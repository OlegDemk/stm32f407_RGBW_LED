
lights_RGBW_PWM_DMA_two_chanels2_WORKS3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c70  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  08011e00  08011e00  00021e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012408  08012408  000300a8  2**0
                  CONTENTS
  4 .ARM          00000008  08012408  08012408  00022408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012410  08012410  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012410  08012410  00022410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012414  08012414  00022414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08012418  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300a8  2**0
                  CONTENTS
 10 .bss          000034cc  200000a8  200000a8  000300a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003574  20003574  000300a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002221d  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004cf3  00000000  00000000  000522f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001aa0  00000000  00000000  00056fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018a8  00000000  00000000  00058a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000276cb  00000000  00000000  0005a330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002421e  00000000  00000000  000819fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d55c2  00000000  00000000  000a5c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017b1db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000746c  00000000  00000000  0017b22c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011de8 	.word	0x08011de8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	08011de8 	.word	0x08011de8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800089c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008a0:	f000 b974 	b.w	8000b8c <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468e      	mov	lr, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d14d      	bne.n	8000966 <__udivmoddi4+0xaa>
 80008ca:	428a      	cmp	r2, r1
 80008cc:	4694      	mov	ip, r2
 80008ce:	d969      	bls.n	80009a4 <__udivmoddi4+0xe8>
 80008d0:	fab2 f282 	clz	r2, r2
 80008d4:	b152      	cbz	r2, 80008ec <__udivmoddi4+0x30>
 80008d6:	fa01 f302 	lsl.w	r3, r1, r2
 80008da:	f1c2 0120 	rsb	r1, r2, #32
 80008de:	fa20 f101 	lsr.w	r1, r0, r1
 80008e2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008e6:	ea41 0e03 	orr.w	lr, r1, r3
 80008ea:	4094      	lsls	r4, r2
 80008ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f0:	0c21      	lsrs	r1, r4, #16
 80008f2:	fbbe f6f8 	udiv	r6, lr, r8
 80008f6:	fa1f f78c 	uxth.w	r7, ip
 80008fa:	fb08 e316 	mls	r3, r8, r6, lr
 80008fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000902:	fb06 f107 	mul.w	r1, r6, r7
 8000906:	4299      	cmp	r1, r3
 8000908:	d90a      	bls.n	8000920 <__udivmoddi4+0x64>
 800090a:	eb1c 0303 	adds.w	r3, ip, r3
 800090e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000912:	f080 811f 	bcs.w	8000b54 <__udivmoddi4+0x298>
 8000916:	4299      	cmp	r1, r3
 8000918:	f240 811c 	bls.w	8000b54 <__udivmoddi4+0x298>
 800091c:	3e02      	subs	r6, #2
 800091e:	4463      	add	r3, ip
 8000920:	1a5b      	subs	r3, r3, r1
 8000922:	b2a4      	uxth	r4, r4
 8000924:	fbb3 f0f8 	udiv	r0, r3, r8
 8000928:	fb08 3310 	mls	r3, r8, r0, r3
 800092c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000930:	fb00 f707 	mul.w	r7, r0, r7
 8000934:	42a7      	cmp	r7, r4
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x92>
 8000938:	eb1c 0404 	adds.w	r4, ip, r4
 800093c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000940:	f080 810a 	bcs.w	8000b58 <__udivmoddi4+0x29c>
 8000944:	42a7      	cmp	r7, r4
 8000946:	f240 8107 	bls.w	8000b58 <__udivmoddi4+0x29c>
 800094a:	4464      	add	r4, ip
 800094c:	3802      	subs	r0, #2
 800094e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000952:	1be4      	subs	r4, r4, r7
 8000954:	2600      	movs	r6, #0
 8000956:	b11d      	cbz	r5, 8000960 <__udivmoddi4+0xa4>
 8000958:	40d4      	lsrs	r4, r2
 800095a:	2300      	movs	r3, #0
 800095c:	e9c5 4300 	strd	r4, r3, [r5]
 8000960:	4631      	mov	r1, r6
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000966:	428b      	cmp	r3, r1
 8000968:	d909      	bls.n	800097e <__udivmoddi4+0xc2>
 800096a:	2d00      	cmp	r5, #0
 800096c:	f000 80ef 	beq.w	8000b4e <__udivmoddi4+0x292>
 8000970:	2600      	movs	r6, #0
 8000972:	e9c5 0100 	strd	r0, r1, [r5]
 8000976:	4630      	mov	r0, r6
 8000978:	4631      	mov	r1, r6
 800097a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800097e:	fab3 f683 	clz	r6, r3
 8000982:	2e00      	cmp	r6, #0
 8000984:	d14a      	bne.n	8000a1c <__udivmoddi4+0x160>
 8000986:	428b      	cmp	r3, r1
 8000988:	d302      	bcc.n	8000990 <__udivmoddi4+0xd4>
 800098a:	4282      	cmp	r2, r0
 800098c:	f200 80f9 	bhi.w	8000b82 <__udivmoddi4+0x2c6>
 8000990:	1a84      	subs	r4, r0, r2
 8000992:	eb61 0303 	sbc.w	r3, r1, r3
 8000996:	2001      	movs	r0, #1
 8000998:	469e      	mov	lr, r3
 800099a:	2d00      	cmp	r5, #0
 800099c:	d0e0      	beq.n	8000960 <__udivmoddi4+0xa4>
 800099e:	e9c5 4e00 	strd	r4, lr, [r5]
 80009a2:	e7dd      	b.n	8000960 <__udivmoddi4+0xa4>
 80009a4:	b902      	cbnz	r2, 80009a8 <__udivmoddi4+0xec>
 80009a6:	deff      	udf	#255	; 0xff
 80009a8:	fab2 f282 	clz	r2, r2
 80009ac:	2a00      	cmp	r2, #0
 80009ae:	f040 8092 	bne.w	8000ad6 <__udivmoddi4+0x21a>
 80009b2:	eba1 010c 	sub.w	r1, r1, ip
 80009b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ba:	fa1f fe8c 	uxth.w	lr, ip
 80009be:	2601      	movs	r6, #1
 80009c0:	0c20      	lsrs	r0, r4, #16
 80009c2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009c6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ce:	fb0e f003 	mul.w	r0, lr, r3
 80009d2:	4288      	cmp	r0, r1
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x12c>
 80009d6:	eb1c 0101 	adds.w	r1, ip, r1
 80009da:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x12a>
 80009e0:	4288      	cmp	r0, r1
 80009e2:	f200 80cb 	bhi.w	8000b7c <__udivmoddi4+0x2c0>
 80009e6:	4643      	mov	r3, r8
 80009e8:	1a09      	subs	r1, r1, r0
 80009ea:	b2a4      	uxth	r4, r4
 80009ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f0:	fb07 1110 	mls	r1, r7, r0, r1
 80009f4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009f8:	fb0e fe00 	mul.w	lr, lr, r0
 80009fc:	45a6      	cmp	lr, r4
 80009fe:	d908      	bls.n	8000a12 <__udivmoddi4+0x156>
 8000a00:	eb1c 0404 	adds.w	r4, ip, r4
 8000a04:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000a08:	d202      	bcs.n	8000a10 <__udivmoddi4+0x154>
 8000a0a:	45a6      	cmp	lr, r4
 8000a0c:	f200 80bb 	bhi.w	8000b86 <__udivmoddi4+0x2ca>
 8000a10:	4608      	mov	r0, r1
 8000a12:	eba4 040e 	sub.w	r4, r4, lr
 8000a16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a1a:	e79c      	b.n	8000956 <__udivmoddi4+0x9a>
 8000a1c:	f1c6 0720 	rsb	r7, r6, #32
 8000a20:	40b3      	lsls	r3, r6
 8000a22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a32:	431c      	orrs	r4, r3
 8000a34:	40f9      	lsrs	r1, r7
 8000a36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a42:	0c20      	lsrs	r0, r4, #16
 8000a44:	fa1f fe8c 	uxth.w	lr, ip
 8000a48:	fb09 1118 	mls	r1, r9, r8, r1
 8000a4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a50:	fb08 f00e 	mul.w	r0, r8, lr
 8000a54:	4288      	cmp	r0, r1
 8000a56:	fa02 f206 	lsl.w	r2, r2, r6
 8000a5a:	d90b      	bls.n	8000a74 <__udivmoddi4+0x1b8>
 8000a5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a60:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000a64:	f080 8088 	bcs.w	8000b78 <__udivmoddi4+0x2bc>
 8000a68:	4288      	cmp	r0, r1
 8000a6a:	f240 8085 	bls.w	8000b78 <__udivmoddi4+0x2bc>
 8000a6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a72:	4461      	add	r1, ip
 8000a74:	1a09      	subs	r1, r1, r0
 8000a76:	b2a4      	uxth	r4, r4
 8000a78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a88:	458e      	cmp	lr, r1
 8000a8a:	d908      	bls.n	8000a9e <__udivmoddi4+0x1e2>
 8000a8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a90:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000a94:	d26c      	bcs.n	8000b70 <__udivmoddi4+0x2b4>
 8000a96:	458e      	cmp	lr, r1
 8000a98:	d96a      	bls.n	8000b70 <__udivmoddi4+0x2b4>
 8000a9a:	3802      	subs	r0, #2
 8000a9c:	4461      	add	r1, ip
 8000a9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aa2:	fba0 9402 	umull	r9, r4, r0, r2
 8000aa6:	eba1 010e 	sub.w	r1, r1, lr
 8000aaa:	42a1      	cmp	r1, r4
 8000aac:	46c8      	mov	r8, r9
 8000aae:	46a6      	mov	lr, r4
 8000ab0:	d356      	bcc.n	8000b60 <__udivmoddi4+0x2a4>
 8000ab2:	d053      	beq.n	8000b5c <__udivmoddi4+0x2a0>
 8000ab4:	b15d      	cbz	r5, 8000ace <__udivmoddi4+0x212>
 8000ab6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aba:	eb61 010e 	sbc.w	r1, r1, lr
 8000abe:	fa01 f707 	lsl.w	r7, r1, r7
 8000ac2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ac6:	40f1      	lsrs	r1, r6
 8000ac8:	431f      	orrs	r7, r3
 8000aca:	e9c5 7100 	strd	r7, r1, [r5]
 8000ace:	2600      	movs	r6, #0
 8000ad0:	4631      	mov	r1, r6
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	40d8      	lsrs	r0, r3
 8000adc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ae4:	4091      	lsls	r1, r2
 8000ae6:	4301      	orrs	r1, r0
 8000ae8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aec:	fa1f fe8c 	uxth.w	lr, ip
 8000af0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000af4:	fb07 3610 	mls	r6, r7, r0, r3
 8000af8:	0c0b      	lsrs	r3, r1, #16
 8000afa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000afe:	fb00 f60e 	mul.w	r6, r0, lr
 8000b02:	429e      	cmp	r6, r3
 8000b04:	fa04 f402 	lsl.w	r4, r4, r2
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x260>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000b12:	d22f      	bcs.n	8000b74 <__udivmoddi4+0x2b8>
 8000b14:	429e      	cmp	r6, r3
 8000b16:	d92d      	bls.n	8000b74 <__udivmoddi4+0x2b8>
 8000b18:	3802      	subs	r0, #2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	1b9b      	subs	r3, r3, r6
 8000b1e:	b289      	uxth	r1, r1
 8000b20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b24:	fb07 3316 	mls	r3, r7, r6, r3
 8000b28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b30:	428b      	cmp	r3, r1
 8000b32:	d908      	bls.n	8000b46 <__udivmoddi4+0x28a>
 8000b34:	eb1c 0101 	adds.w	r1, ip, r1
 8000b38:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000b3c:	d216      	bcs.n	8000b6c <__udivmoddi4+0x2b0>
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d914      	bls.n	8000b6c <__udivmoddi4+0x2b0>
 8000b42:	3e02      	subs	r6, #2
 8000b44:	4461      	add	r1, ip
 8000b46:	1ac9      	subs	r1, r1, r3
 8000b48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b4c:	e738      	b.n	80009c0 <__udivmoddi4+0x104>
 8000b4e:	462e      	mov	r6, r5
 8000b50:	4628      	mov	r0, r5
 8000b52:	e705      	b.n	8000960 <__udivmoddi4+0xa4>
 8000b54:	4606      	mov	r6, r0
 8000b56:	e6e3      	b.n	8000920 <__udivmoddi4+0x64>
 8000b58:	4618      	mov	r0, r3
 8000b5a:	e6f8      	b.n	800094e <__udivmoddi4+0x92>
 8000b5c:	454b      	cmp	r3, r9
 8000b5e:	d2a9      	bcs.n	8000ab4 <__udivmoddi4+0x1f8>
 8000b60:	ebb9 0802 	subs.w	r8, r9, r2
 8000b64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b68:	3801      	subs	r0, #1
 8000b6a:	e7a3      	b.n	8000ab4 <__udivmoddi4+0x1f8>
 8000b6c:	4646      	mov	r6, r8
 8000b6e:	e7ea      	b.n	8000b46 <__udivmoddi4+0x28a>
 8000b70:	4620      	mov	r0, r4
 8000b72:	e794      	b.n	8000a9e <__udivmoddi4+0x1e2>
 8000b74:	4640      	mov	r0, r8
 8000b76:	e7d1      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b78:	46d0      	mov	r8, sl
 8000b7a:	e77b      	b.n	8000a74 <__udivmoddi4+0x1b8>
 8000b7c:	3b02      	subs	r3, #2
 8000b7e:	4461      	add	r1, ip
 8000b80:	e732      	b.n	80009e8 <__udivmoddi4+0x12c>
 8000b82:	4630      	mov	r0, r6
 8000b84:	e709      	b.n	800099a <__udivmoddi4+0xde>
 8000b86:	4464      	add	r4, ip
 8000b88:	3802      	subs	r0, #2
 8000b8a:	e742      	b.n	8000a12 <__udivmoddi4+0x156>

08000b8c <__aeabi_idiv0>:
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <stop_light_turn_on_left>:
#define RIGHT_5_OFF		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3)


// ----------------------------------------------------------------------------------------
void stop_light_turn_on_left(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	LEFT_1_ON; 		LEFT_2_ON;		LEFT_3_ON;		LEFT_4_ON;		LEFT_5_ON;
 8000b94:	2100      	movs	r1, #0
 8000b96:	480a      	ldr	r0, [pc, #40]	; (8000bc0 <stop_light_turn_on_left+0x30>)
 8000b98:	f007 fa68 	bl	800806c <HAL_TIM_PWM_Start>
 8000b9c:	2104      	movs	r1, #4
 8000b9e:	4808      	ldr	r0, [pc, #32]	; (8000bc0 <stop_light_turn_on_left+0x30>)
 8000ba0:	f007 fa64 	bl	800806c <HAL_TIM_PWM_Start>
 8000ba4:	2108      	movs	r1, #8
 8000ba6:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <stop_light_turn_on_left+0x30>)
 8000ba8:	f007 fa60 	bl	800806c <HAL_TIM_PWM_Start>
 8000bac:	210c      	movs	r1, #12
 8000bae:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <stop_light_turn_on_left+0x30>)
 8000bb0:	f007 fa5c 	bl	800806c <HAL_TIM_PWM_Start>
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <stop_light_turn_on_left+0x34>)
 8000bb8:	f007 fa58 	bl	800806c <HAL_TIM_PWM_Start>
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20001608 	.word	0x20001608
 8000bc4:	20001650 	.word	0x20001650

08000bc8 <stop_light_turn_on_right>:

// ----------------------------------------------------------------------------------------
void stop_light_turn_on_right(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	RIGHT_1_ON;		RIGHT_2_ON;		RIGHT_3_ON;		RIGHT_4_ON;		RIGHT_5_ON;
 8000bcc:	2104      	movs	r1, #4
 8000bce:	480a      	ldr	r0, [pc, #40]	; (8000bf8 <stop_light_turn_on_right+0x30>)
 8000bd0:	f007 fa4c 	bl	800806c <HAL_TIM_PWM_Start>
 8000bd4:	2108      	movs	r1, #8
 8000bd6:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <stop_light_turn_on_right+0x30>)
 8000bd8:	f007 fa48 	bl	800806c <HAL_TIM_PWM_Start>
 8000bdc:	210c      	movs	r1, #12
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <stop_light_turn_on_right+0x30>)
 8000be0:	f007 fa44 	bl	800806c <HAL_TIM_PWM_Start>
 8000be4:	2104      	movs	r1, #4
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <stop_light_turn_on_right+0x34>)
 8000be8:	f007 fa40 	bl	800806c <HAL_TIM_PWM_Start>
 8000bec:	2108      	movs	r1, #8
 8000bee:	4803      	ldr	r0, [pc, #12]	; (8000bfc <stop_light_turn_on_right+0x34>)
 8000bf0:	f007 fa3c 	bl	800806c <HAL_TIM_PWM_Start>
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20001650 	.word	0x20001650
 8000bfc:	20001698 	.word	0x20001698

08000c00 <stop_light_turn_off_left>:

// ----------------------------------------------------------------------------------------
void stop_light_turn_off_left(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	LEFT_1_OFF;		LEFT_2_OFF;		LEFT_3_OFF;		LEFT_4_OFF;		LEFT_5_OFF;
 8000c04:	2100      	movs	r1, #0
 8000c06:	480a      	ldr	r0, [pc, #40]	; (8000c30 <stop_light_turn_off_left+0x30>)
 8000c08:	f007 faf8 	bl	80081fc <HAL_TIM_PWM_Stop>
 8000c0c:	2104      	movs	r1, #4
 8000c0e:	4808      	ldr	r0, [pc, #32]	; (8000c30 <stop_light_turn_off_left+0x30>)
 8000c10:	f007 faf4 	bl	80081fc <HAL_TIM_PWM_Stop>
 8000c14:	2108      	movs	r1, #8
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <stop_light_turn_off_left+0x30>)
 8000c18:	f007 faf0 	bl	80081fc <HAL_TIM_PWM_Stop>
 8000c1c:	210c      	movs	r1, #12
 8000c1e:	4804      	ldr	r0, [pc, #16]	; (8000c30 <stop_light_turn_off_left+0x30>)
 8000c20:	f007 faec 	bl	80081fc <HAL_TIM_PWM_Stop>
 8000c24:	2100      	movs	r1, #0
 8000c26:	4803      	ldr	r0, [pc, #12]	; (8000c34 <stop_light_turn_off_left+0x34>)
 8000c28:	f007 fae8 	bl	80081fc <HAL_TIM_PWM_Stop>
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20001608 	.word	0x20001608
 8000c34:	20001650 	.word	0x20001650

08000c38 <stop_light_turn_off_right>:

// ----------------------------------------------------------------------------------------
void stop_light_turn_off_right(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	RIGHT_1_OFF;	RIGHT_2_OFF;	RIGHT_3_OFF;	RIGHT_4_OFF;	RIGHT_5_OFF;
 8000c3c:	2104      	movs	r1, #4
 8000c3e:	480a      	ldr	r0, [pc, #40]	; (8000c68 <stop_light_turn_off_right+0x30>)
 8000c40:	f007 fadc 	bl	80081fc <HAL_TIM_PWM_Stop>
 8000c44:	2108      	movs	r1, #8
 8000c46:	4808      	ldr	r0, [pc, #32]	; (8000c68 <stop_light_turn_off_right+0x30>)
 8000c48:	f007 fad8 	bl	80081fc <HAL_TIM_PWM_Stop>
 8000c4c:	210c      	movs	r1, #12
 8000c4e:	4806      	ldr	r0, [pc, #24]	; (8000c68 <stop_light_turn_off_right+0x30>)
 8000c50:	f007 fad4 	bl	80081fc <HAL_TIM_PWM_Stop>
 8000c54:	2104      	movs	r1, #4
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <stop_light_turn_off_right+0x34>)
 8000c58:	f007 fad0 	bl	80081fc <HAL_TIM_PWM_Stop>
 8000c5c:	2108      	movs	r1, #8
 8000c5e:	4803      	ldr	r0, [pc, #12]	; (8000c6c <stop_light_turn_off_right+0x34>)
 8000c60:	f007 facc 	bl	80081fc <HAL_TIM_PWM_Stop>
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20001650 	.word	0x20001650
 8000c6c:	20001698 	.word	0x20001698

08000c70 <set_duty_cycle_stop_left_1>:
	RIGHT_1_ON;
	HAL_Delay(delay);
}
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_left_1(int duty_cycle)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_cycle);
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <set_duty_cycle_stop_left_1+0x1c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	20001650 	.word	0x20001650

08000c90 <set_duty_cycle_stop_left_2>:
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_left_2(int duty_cycle)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, duty_cycle);
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <set_duty_cycle_stop_left_2+0x1c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	20001608 	.word	0x20001608

08000cb0 <set_duty_cycle_stop_left_3>:
// ---------------------------------------------------------------------------------------
void set_duty_cycle_stop_left_3(int duty_cycle)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle);
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <set_duty_cycle_stop_left_3+0x1c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	20001608 	.word	0x20001608

08000cd0 <set_duty_cycle_stop_left_4>:
// ---------------------------------------------------------------------------------------
void set_duty_cycle_stop_left_4(int duty_cycle)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty_cycle);
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <set_duty_cycle_stop_left_4+0x1c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	20001608 	.word	0x20001608

08000cf0 <set_duty_cycle_stop_left_5>:
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_left_5(int duty_cycle)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle);
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <set_duty_cycle_stop_left_5+0x1c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	20001608 	.word	0x20001608

08000d10 <set_duty_cycle_stop_ritht_1>:
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_ritht_1(int duty_cycle)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, duty_cycle);
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <set_duty_cycle_stop_ritht_1+0x1c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	20001698 	.word	0x20001698

08000d30 <set_duty_cycle_stop_ritht_2>:
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_ritht_2(int duty_cycle)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, duty_cycle);
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <set_duty_cycle_stop_ritht_2+0x1c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	20001698 	.word	0x20001698

08000d50 <set_duty_cycle_stop_ritht_3>:
// ---------------------------------------------------------------------------------------
void set_duty_cycle_stop_ritht_3(int duty_cycle)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, duty_cycle);
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <set_duty_cycle_stop_ritht_3+0x1c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	20001650 	.word	0x20001650

08000d70 <set_duty_cycle_stop_ritht_4>:
// ---------------------------------------------------------------------------------------
void set_duty_cycle_stop_ritht_4(int duty_cycle)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty_cycle);
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <set_duty_cycle_stop_ritht_4+0x1c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	20001650 	.word	0x20001650

08000d90 <set_duty_cycle_stop_ritht_5>:
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_ritht_5(int duty_cycle)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycle);
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <set_duty_cycle_stop_ritht_5+0x1c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	20001650 	.word	0x20001650

08000db0 <stop_light_all_turn_on>:
// ----------------------------------------------------------------------------------------
void stop_light_all_turn_on(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	set_duty_cycle_stop_left_1(255);
 8000db4:	20ff      	movs	r0, #255	; 0xff
 8000db6:	f7ff ff5b 	bl	8000c70 <set_duty_cycle_stop_left_1>
	set_duty_cycle_stop_left_2(250);
 8000dba:	20fa      	movs	r0, #250	; 0xfa
 8000dbc:	f7ff ff68 	bl	8000c90 <set_duty_cycle_stop_left_2>
	set_duty_cycle_stop_left_3(250);
 8000dc0:	20fa      	movs	r0, #250	; 0xfa
 8000dc2:	f7ff ff75 	bl	8000cb0 <set_duty_cycle_stop_left_3>
	set_duty_cycle_stop_left_4(250);
 8000dc6:	20fa      	movs	r0, #250	; 0xfa
 8000dc8:	f7ff ff82 	bl	8000cd0 <set_duty_cycle_stop_left_4>
	set_duty_cycle_stop_left_5(250);
 8000dcc:	20fa      	movs	r0, #250	; 0xfa
 8000dce:	f7ff ff8f 	bl	8000cf0 <set_duty_cycle_stop_left_5>

	set_duty_cycle_stop_ritht_1(250);
 8000dd2:	20fa      	movs	r0, #250	; 0xfa
 8000dd4:	f7ff ff9c 	bl	8000d10 <set_duty_cycle_stop_ritht_1>
	set_duty_cycle_stop_ritht_2(250);
 8000dd8:	20fa      	movs	r0, #250	; 0xfa
 8000dda:	f7ff ffa9 	bl	8000d30 <set_duty_cycle_stop_ritht_2>
	set_duty_cycle_stop_ritht_3(250);
 8000dde:	20fa      	movs	r0, #250	; 0xfa
 8000de0:	f7ff ffb6 	bl	8000d50 <set_duty_cycle_stop_ritht_3>
	set_duty_cycle_stop_ritht_4(250);
 8000de4:	20fa      	movs	r0, #250	; 0xfa
 8000de6:	f7ff ffc3 	bl	8000d70 <set_duty_cycle_stop_ritht_4>
	set_duty_cycle_stop_ritht_5(250);
 8000dea:	20fa      	movs	r0, #250	; 0xfa
 8000dec:	f7ff ffd0 	bl	8000d90 <set_duty_cycle_stop_ritht_5>

	  // Turn on RED LEDs
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000df0:	2100      	movs	r1, #0
 8000df2:	4816      	ldr	r0, [pc, #88]	; (8000e4c <stop_light_all_turn_on+0x9c>)
 8000df4:	f007 f93a 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000df8:	2104      	movs	r1, #4
 8000dfa:	4814      	ldr	r0, [pc, #80]	; (8000e4c <stop_light_all_turn_on+0x9c>)
 8000dfc:	f007 f936 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000e00:	2108      	movs	r1, #8
 8000e02:	4812      	ldr	r0, [pc, #72]	; (8000e4c <stop_light_all_turn_on+0x9c>)
 8000e04:	f007 f932 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000e08:	210c      	movs	r1, #12
 8000e0a:	4810      	ldr	r0, [pc, #64]	; (8000e4c <stop_light_all_turn_on+0x9c>)
 8000e0c:	f007 f92e 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e10:	2100      	movs	r1, #0
 8000e12:	480f      	ldr	r0, [pc, #60]	; (8000e50 <stop_light_all_turn_on+0xa0>)
 8000e14:	f007 f92a 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000e18:	2104      	movs	r1, #4
 8000e1a:	480d      	ldr	r0, [pc, #52]	; (8000e50 <stop_light_all_turn_on+0xa0>)
 8000e1c:	f007 f926 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000e20:	2108      	movs	r1, #8
 8000e22:	480b      	ldr	r0, [pc, #44]	; (8000e50 <stop_light_all_turn_on+0xa0>)
 8000e24:	f007 f922 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000e28:	210c      	movs	r1, #12
 8000e2a:	4809      	ldr	r0, [pc, #36]	; (8000e50 <stop_light_all_turn_on+0xa0>)
 8000e2c:	f007 f91e 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000e30:	2104      	movs	r1, #4
 8000e32:	4808      	ldr	r0, [pc, #32]	; (8000e54 <stop_light_all_turn_on+0xa4>)
 8000e34:	f007 f91a 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000e38:	2108      	movs	r1, #8
 8000e3a:	4806      	ldr	r0, [pc, #24]	; (8000e54 <stop_light_all_turn_on+0xa4>)
 8000e3c:	f007 f916 	bl	800806c <HAL_TIM_PWM_Start>

	stop_light_turn_on_left();
 8000e40:	f7ff fea6 	bl	8000b90 <stop_light_turn_on_left>
	stop_light_turn_on_right();
 8000e44:	f7ff fec0 	bl	8000bc8 <stop_light_turn_on_right>
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20001608 	.word	0x20001608
 8000e50:	20001650 	.word	0x20001650
 8000e54:	20001698 	.word	0x20001698

08000e58 <stop_light_all_turn_off>:

// ----------------------------------------------------------------------------------------
void stop_light_all_turn_off(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	stop_light_turn_off_left();
 8000e5c:	f7ff fed0 	bl	8000c00 <stop_light_turn_off_left>
	stop_light_turn_off_right();
 8000e60:	f7ff feea 	bl	8000c38 <stop_light_turn_off_right>
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <test_from_midle_to_corner>:
		}
	}
}
// ----------------------------------------------------------------------------------------
void test_from_midle_to_corner(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
	int delay = 1;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	603b      	str	r3, [r7, #0]
	int duty_cycle = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]

	  // Turn on RED LEDs
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000e76:	2100      	movs	r1, #0
 8000e78:	4866      	ldr	r0, [pc, #408]	; (8001014 <test_from_midle_to_corner+0x1ac>)
 8000e7a:	f007 f8f7 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000e7e:	2104      	movs	r1, #4
 8000e80:	4864      	ldr	r0, [pc, #400]	; (8001014 <test_from_midle_to_corner+0x1ac>)
 8000e82:	f007 f8f3 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000e86:	2108      	movs	r1, #8
 8000e88:	4862      	ldr	r0, [pc, #392]	; (8001014 <test_from_midle_to_corner+0x1ac>)
 8000e8a:	f007 f8ef 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000e8e:	210c      	movs	r1, #12
 8000e90:	4860      	ldr	r0, [pc, #384]	; (8001014 <test_from_midle_to_corner+0x1ac>)
 8000e92:	f007 f8eb 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e96:	2100      	movs	r1, #0
 8000e98:	485f      	ldr	r0, [pc, #380]	; (8001018 <test_from_midle_to_corner+0x1b0>)
 8000e9a:	f007 f8e7 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000e9e:	2104      	movs	r1, #4
 8000ea0:	485d      	ldr	r0, [pc, #372]	; (8001018 <test_from_midle_to_corner+0x1b0>)
 8000ea2:	f007 f8e3 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000ea6:	2108      	movs	r1, #8
 8000ea8:	485b      	ldr	r0, [pc, #364]	; (8001018 <test_from_midle_to_corner+0x1b0>)
 8000eaa:	f007 f8df 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000eae:	210c      	movs	r1, #12
 8000eb0:	4859      	ldr	r0, [pc, #356]	; (8001018 <test_from_midle_to_corner+0x1b0>)
 8000eb2:	f007 f8db 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000eb6:	2104      	movs	r1, #4
 8000eb8:	4858      	ldr	r0, [pc, #352]	; (800101c <test_from_midle_to_corner+0x1b4>)
 8000eba:	f007 f8d7 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000ebe:	2108      	movs	r1, #8
 8000ec0:	4856      	ldr	r0, [pc, #344]	; (800101c <test_from_midle_to_corner+0x1b4>)
 8000ec2:	f007 f8d3 	bl	800806c <HAL_TIM_PWM_Start>

	for(duty_cycle = 0; duty_cycle <= 250; duty_cycle++)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	e010      	b.n	8000eee <test_from_midle_to_corner+0x86>
	{
		set_duty_cycle_stop_left_1(duty_cycle);
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff fecf 	bl	8000c70 <set_duty_cycle_stop_left_1>
		set_duty_cycle_stop_ritht_1(duty_cycle);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ff1c 	bl	8000d10 <set_duty_cycle_stop_ritht_1>

		stop_light_turn_on_left();
 8000ed8:	f7ff fe5a 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000edc:	f7ff fe74 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f003 fd9e 	bl	8004a24 <HAL_Delay>
	for(duty_cycle = 0; duty_cycle <= 250; duty_cycle++)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3301      	adds	r3, #1
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2bfa      	cmp	r3, #250	; 0xfa
 8000ef2:	ddeb      	ble.n	8000ecc <test_from_midle_to_corner+0x64>
	}

	for(duty_cycle = 0; duty_cycle <= 250; duty_cycle++)
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	e010      	b.n	8000f1c <test_from_midle_to_corner+0xb4>
	{
		set_duty_cycle_stop_left_2(duty_cycle);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff fec8 	bl	8000c90 <set_duty_cycle_stop_left_2>
		set_duty_cycle_stop_ritht_2(duty_cycle);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff15 	bl	8000d30 <set_duty_cycle_stop_ritht_2>

		stop_light_turn_on_left();
 8000f06:	f7ff fe43 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000f0a:	f7ff fe5d 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f003 fd87 	bl	8004a24 <HAL_Delay>
	for(duty_cycle = 0; duty_cycle <= 250; duty_cycle++)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2bfa      	cmp	r3, #250	; 0xfa
 8000f20:	ddeb      	ble.n	8000efa <test_from_midle_to_corner+0x92>
	}

	for(duty_cycle = 0; duty_cycle <= 250; duty_cycle++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	e010      	b.n	8000f4a <test_from_midle_to_corner+0xe2>
	{
		set_duty_cycle_stop_left_3(duty_cycle);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff fec1 	bl	8000cb0 <set_duty_cycle_stop_left_3>
		set_duty_cycle_stop_ritht_3(duty_cycle);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ff0e 	bl	8000d50 <set_duty_cycle_stop_ritht_3>

		stop_light_turn_on_left();
 8000f34:	f7ff fe2c 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000f38:	f7ff fe46 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f003 fd70 	bl	8004a24 <HAL_Delay>
	for(duty_cycle = 0; duty_cycle <= 250; duty_cycle++)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3301      	adds	r3, #1
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2bfa      	cmp	r3, #250	; 0xfa
 8000f4e:	ddeb      	ble.n	8000f28 <test_from_midle_to_corner+0xc0>
	}

	for(duty_cycle = 0; duty_cycle <= 250; duty_cycle++)
 8000f50:	2300      	movs	r3, #0
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	e010      	b.n	8000f78 <test_from_midle_to_corner+0x110>
	{
		set_duty_cycle_stop_left_4(duty_cycle);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff feba 	bl	8000cd0 <set_duty_cycle_stop_left_4>
		set_duty_cycle_stop_ritht_4(duty_cycle);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff ff07 	bl	8000d70 <set_duty_cycle_stop_ritht_4>

		stop_light_turn_on_left();
 8000f62:	f7ff fe15 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000f66:	f7ff fe2f 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f003 fd59 	bl	8004a24 <HAL_Delay>
	for(duty_cycle = 0; duty_cycle <= 250; duty_cycle++)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3301      	adds	r3, #1
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2bfa      	cmp	r3, #250	; 0xfa
 8000f7c:	ddeb      	ble.n	8000f56 <test_from_midle_to_corner+0xee>
	}

	for(duty_cycle = 0; duty_cycle <= 250; duty_cycle++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	e010      	b.n	8000fa6 <test_from_midle_to_corner+0x13e>
	{
		set_duty_cycle_stop_left_5(duty_cycle);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff feb3 	bl	8000cf0 <set_duty_cycle_stop_left_5>
		set_duty_cycle_stop_ritht_5(duty_cycle);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ff00 	bl	8000d90 <set_duty_cycle_stop_ritht_5>

		stop_light_turn_on_left();
 8000f90:	f7ff fdfe 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000f94:	f7ff fe18 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f003 fd42 	bl	8004a24 <HAL_Delay>
	for(duty_cycle = 0; duty_cycle <= 250; duty_cycle++)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2bfa      	cmp	r3, #250	; 0xfa
 8000faa:	ddeb      	ble.n	8000f84 <test_from_midle_to_corner+0x11c>
	}

	for(duty_cycle = 250; duty_cycle >= 0; duty_cycle--)
 8000fac:	23fa      	movs	r3, #250	; 0xfa
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	e028      	b.n	8001004 <test_from_midle_to_corner+0x19c>
	{
		set_duty_cycle_stop_left_1(duty_cycle);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff fe5c 	bl	8000c70 <set_duty_cycle_stop_left_1>
		set_duty_cycle_stop_left_2(duty_cycle);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff fe69 	bl	8000c90 <set_duty_cycle_stop_left_2>
		set_duty_cycle_stop_left_3(duty_cycle);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff fe76 	bl	8000cb0 <set_duty_cycle_stop_left_3>
		set_duty_cycle_stop_left_4(duty_cycle);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff fe83 	bl	8000cd0 <set_duty_cycle_stop_left_4>
		set_duty_cycle_stop_left_5(duty_cycle);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff fe90 	bl	8000cf0 <set_duty_cycle_stop_left_5>

		set_duty_cycle_stop_ritht_1(duty_cycle);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff fe9d 	bl	8000d10 <set_duty_cycle_stop_ritht_1>
		set_duty_cycle_stop_ritht_2(duty_cycle);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff feaa 	bl	8000d30 <set_duty_cycle_stop_ritht_2>
		set_duty_cycle_stop_ritht_3(duty_cycle);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff feb7 	bl	8000d50 <set_duty_cycle_stop_ritht_3>
		set_duty_cycle_stop_ritht_4(duty_cycle);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff fec4 	bl	8000d70 <set_duty_cycle_stop_ritht_4>
		set_duty_cycle_stop_ritht_5(duty_cycle);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff fed1 	bl	8000d90 <set_duty_cycle_stop_ritht_5>

		stop_light_turn_on_left();
 8000fee:	f7ff fdcf 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000ff2:	f7ff fde9 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f003 fd13 	bl	8004a24 <HAL_Delay>
	for(duty_cycle = 250; duty_cycle >= 0; duty_cycle--)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3b01      	subs	r3, #1
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	dad3      	bge.n	8000fb2 <test_from_midle_to_corner+0x14a>
	}

}
 800100a:	bf00      	nop
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20001608 	.word	0x20001608
 8001018:	20001650 	.word	0x20001650
 800101c:	20001698 	.word	0x20001698

08001020 <ARGB_Init>:

/**
 * @brief Init timer & prescalers
 * @param none
 */
void ARGB_Init(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
    /* Auto-calculation! */
    u32_t APBfq; // Clock freq
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
 8001026:	f006 fc65 	bl	80078f4 <HAL_RCC_GetPCLK1Freq>
 800102a:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
 800102c:	4b38      	ldr	r3, [pc, #224]	; (8001110 <ARGB_Init+0xf0>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001034:	2b00      	cmp	r3, #0
 8001036:	d101      	bne.n	800103c <ARGB_Init+0x1c>
 8001038:	2301      	movs	r3, #1
 800103a:	e000      	b.n	800103e <ARGB_Init+0x1e>
 800103c:	2302      	movs	r3, #2
 800103e:	461a      	mov	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	fb02 f303 	mul.w	r3, r2, r3
 8001046:	607b      	str	r3, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	0a1b      	lsrs	r3, r3, #8
 800104c:	4a31      	ldr	r2, [pc, #196]	; (8001114 <ARGB_Init+0xf4>)
 800104e:	fba2 2303 	umull	r2, r3, r2, r3
 8001052:	091b      	lsrs	r3, r3, #4
 8001054:	607b      	str	r3, [r7, #4]
#endif
    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 8001056:	4b30      	ldr	r3, [pc, #192]	; (8001118 <ARGB_Init+0xf8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2200      	movs	r2, #0
 800105c:	629a      	str	r2, [r3, #40]	; 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	b29b      	uxth	r3, r3
 8001062:	3b01      	subs	r3, #1
 8001064:	b29a      	uxth	r2, r3
 8001066:	4b2c      	ldr	r3, [pc, #176]	; (8001118 <ARGB_Init+0xf8>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 800106c:	4b2a      	ldr	r3, [pc, #168]	; (8001118 <ARGB_Init+0xf8>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2201      	movs	r2, #1
 8001072:	615a      	str	r2, [r3, #20]
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.56) - 1;     // Log.1 - 56% - 0.70us
    PWM_LO = (u8_t) (APBfq * 0.28) - 1;     // Log.0 - 28% - 0.35us
#endif
#ifdef SK6812
    PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff fb6f 	bl	8000758 <__aeabi_ui2d>
 800107a:	a321      	add	r3, pc, #132	; (adr r3, 8001100 <ARGB_Init+0xe0>)
 800107c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001080:	f7ff f8fe 	bl	8000280 <__aeabi_dmul>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4610      	mov	r0, r2
 800108a:	4619      	mov	r1, r3
 800108c:	f7ff fbde 	bl	800084c <__aeabi_d2uiz>
 8001090:	4603      	mov	r3, r0
 8001092:	b2db      	uxtb	r3, r3
 8001094:	3b01      	subs	r3, #1
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b20      	ldr	r3, [pc, #128]	; (800111c <ARGB_Init+0xfc>)
 800109a:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.24) - 1;     // Log.0 - 24% - 0.30us
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff fb5b 	bl	8000758 <__aeabi_ui2d>
 80010a2:	a319      	add	r3, pc, #100	; (adr r3, 8001108 <ARGB_Init+0xe8>)
 80010a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a8:	f7ff f8ea 	bl	8000280 <__aeabi_dmul>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4610      	mov	r0, r2
 80010b2:	4619      	mov	r1, r3
 80010b4:	f7ff fbca 	bl	800084c <__aeabi_d2uiz>
 80010b8:	4603      	mov	r3, r0
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	3b01      	subs	r3, #1
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <ARGB_Init+0x100>)
 80010c2:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST_LEFT = ARGB_READY; // Set Ready Flag
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <ARGB_Init+0x104>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH_LEFT, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <ARGB_Init+0xf8>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2201      	movs	r2, #1
 80010d0:	2108      	movs	r1, #8
 80010d2:	4618      	mov	r0, r3
 80010d4:	f007 fef8 	bl	8008ec8 <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 80010d8:	2001      	movs	r0, #1
 80010da:	f003 fca3 	bl	8004a24 <HAL_Delay>
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH_RIGHT, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <ARGB_Init+0xf8>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2201      	movs	r2, #1
 80010e4:	210c      	movs	r1, #12
 80010e6:	4618      	mov	r0, r3
 80010e8:	f007 feee 	bl	8008ec8 <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 80010ec:	2001      	movs	r0, #1
 80010ee:	f003 fc99 	bl	8004a24 <HAL_Delay>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	f3af 8000 	nop.w
 8001100:	eb851eb8 	.word	0xeb851eb8
 8001104:	3fdeb851 	.word	0x3fdeb851
 8001108:	eb851eb8 	.word	0xeb851eb8
 800110c:	3fceb851 	.word	0x3fceb851
 8001110:	40023800 	.word	0x40023800
 8001114:	014f8b59 	.word	0x014f8b59
 8001118:	20001728 	.word	0x20001728
 800111c:	200000c4 	.word	0x200000c4
 8001120:	200000c5 	.word	0x200000c5
 8001124:	20000574 	.word	0x20000574

08001128 <ARGB_Clear_left>:
/**
 * @brief Fill ALL LEDs with (0,0,0)
 * @param none
 * @note Update strip after that
 */
void ARGB_Clear_left(void) {
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
    ARGB_FillRGB_left(0, 0, 0);
 800112c:	2200      	movs	r2, #0
 800112e:	2100      	movs	r1, #0
 8001130:	2000      	movs	r0, #0
 8001132:	f000 f95d 	bl	80013f0 <ARGB_FillRGB_left>
#ifdef SK6812
    ARGB_FillWhite_left(0);
 8001136:	2000      	movs	r0, #0
 8001138:	f000 f99c 	bl	8001474 <ARGB_FillWhite_left>
#endif
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}

08001140 <ARGB_Clear_right>:
// -------------------------------------------------------------------------------
void ARGB_Clear_right(void) {
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
    ARGB_FillRGB_right(0, 0, 0);
 8001144:	2200      	movs	r2, #0
 8001146:	2100      	movs	r1, #0
 8001148:	2000      	movs	r0, #0
 800114a:	f000 f972 	bl	8001432 <ARGB_FillRGB_right>
#ifdef SK6812
    ARGB_FillWhite_right(0);
 800114e:	2000      	movs	r0, #0
 8001150:	f000 f9ad 	bl	80014ae <ARGB_FillWhite_right>
#endif
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}

08001158 <ARGB_SetBrightness>:

/**
 * @brief Set GLOBAL LED brightness
 * @param[in] br Brightness [0..255]
 */
void ARGB_SetBrightness(u8_t br) {
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
    ARGB_BR = br;
 8001162:	4a04      	ldr	r2, [pc, #16]	; (8001174 <ARGB_SetBrightness+0x1c>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	7013      	strb	r3, [r2, #0]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	20000000 	.word	0x20000000

08001178 <ARGB_SetRGB_left>:
 * @param[in] i LED position
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_SetRGB_left(u16_t i, u8_t g, u8_t r, u8_t b) {
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	4604      	mov	r4, r0
 8001180:	4608      	mov	r0, r1
 8001182:	4611      	mov	r1, r2
 8001184:	461a      	mov	r2, r3
 8001186:	4623      	mov	r3, r4
 8001188:	80fb      	strh	r3, [r7, #6]
 800118a:	4603      	mov	r3, r0
 800118c:	717b      	strb	r3, [r7, #5]
 800118e:	460b      	mov	r3, r1
 8001190:	713b      	strb	r3, [r7, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	2b54      	cmp	r3, #84	; 0x54
 800119a:	d913      	bls.n	80011c4 <ARGB_SetRGB_left+0x4c>
        u16_t _i = i / NUM_PIXELS;
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	4a30      	ldr	r2, [pc, #192]	; (8001260 <ARGB_SetRGB_left+0xe8>)
 80011a0:	fba2 2303 	umull	r2, r3, r2, r3
 80011a4:	099b      	lsrs	r3, r3, #6
 80011a6:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 80011a8:	89fb      	ldrh	r3, [r7, #14]
 80011aa:	461a      	mov	r2, r3
 80011ac:	0092      	lsls	r2, r2, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	461a      	mov	r2, r3
 80011b2:	0111      	lsls	r1, r2, #4
 80011b4:	461a      	mov	r2, r3
 80011b6:	460b      	mov	r3, r1
 80011b8:	4413      	add	r3, r2
 80011ba:	425b      	negs	r3, r3
 80011bc:	b29a      	uxth	r2, r3
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	4413      	add	r3, r2
 80011c2:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 80011c4:	4b27      	ldr	r3, [pc, #156]	; (8001264 <ARGB_SetRGB_left+0xec>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	3301      	adds	r3, #1
 80011cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80011d4:	793a      	ldrb	r2, [r7, #4]
 80011d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80011da:	713b      	strb	r3, [r7, #4]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 80011dc:	4b21      	ldr	r3, [pc, #132]	; (8001264 <ARGB_SetRGB_left+0xec>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	3301      	adds	r3, #1
 80011e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80011ec:	797a      	ldrb	r2, [r7, #5]
 80011ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80011f2:	717b      	strb	r3, [r7, #5]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <ARGB_SetRGB_left+0xec>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	3301      	adds	r3, #1
 80011fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001200:	fb92 f3f3 	sdiv	r3, r2, r3
 8001204:	78fa      	ldrb	r2, [r7, #3]
 8001206:	fb92 f3f3 	sdiv	r3, r2, r3
 800120a:	70fb      	strb	r3, [r7, #3]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 800120c:	797b      	ldrb	r3, [r7, #5]
 800120e:	21b0      	movs	r1, #176	; 0xb0
 8001210:	4618      	mov	r0, r3
 8001212:	f000 fd01 	bl	8001c18 <scale8>
 8001216:	4603      	mov	r3, r0
 8001218:	717b      	strb	r3, [r7, #5]
    b = scale8(b, 0xF0);
 800121a:	78fb      	ldrb	r3, [r7, #3]
 800121c:	21f0      	movs	r1, #240	; 0xf0
 800121e:	4618      	mov	r0, r3
 8001220:	f000 fcfa 	bl	8001c18 <scale8>
 8001224:	4603      	mov	r3, r0
 8001226:	70fb      	strb	r3, [r7, #3]
#endif
    // Subpixel chain order
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
 8001228:	793b      	ldrb	r3, [r7, #4]
 800122a:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = g;
 800122c:	797b      	ldrb	r3, [r7, #5]
 800122e:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	72fb      	strb	r3, [r7, #11]
    const u8_t subp2 = r;
    const u8_t subp3 = b;
#endif
    // RGB or RGBW
#ifdef SK6812
    RGB_BUF_LEFT[4 * i] = subp1;     // subpixel 1
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	490b      	ldr	r1, [pc, #44]	; (8001268 <ARGB_SetRGB_left+0xf0>)
 800123a:	7b7a      	ldrb	r2, [r7, #13]
 800123c:	54ca      	strb	r2, [r1, r3]
    RGB_BUF_LEFT[4 * i + 1] = subp2; // subpixel 2
 800123e:	88fb      	ldrh	r3, [r7, #6]
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	3301      	adds	r3, #1
 8001244:	4908      	ldr	r1, [pc, #32]	; (8001268 <ARGB_SetRGB_left+0xf0>)
 8001246:	7b3a      	ldrb	r2, [r7, #12]
 8001248:	54ca      	strb	r2, [r1, r3]
    RGB_BUF_LEFT[4 * i + 2] = subp3; // subpixel 3
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	3302      	adds	r3, #2
 8001250:	4905      	ldr	r1, [pc, #20]	; (8001268 <ARGB_SetRGB_left+0xf0>)
 8001252:	7afa      	ldrb	r2, [r7, #11]
 8001254:	54ca      	strb	r2, [r1, r3]
#else
    RGB_BUF_LEFT[3 * i] = subp1;     // subpixel 1
    RGB_BUF_LEFT[3 * i + 1] = subp2; // subpixel 2
    RGB_BUF_LEFT[3 * i + 2] = subp3; // subpixel 3
#endif
}
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	bd90      	pop	{r4, r7, pc}
 800125e:	bf00      	nop
 8001260:	c0c0c0c1 	.word	0xc0c0c0c1
 8001264:	20000000 	.word	0x20000000
 8001268:	200000c8 	.word	0x200000c8

0800126c <ARGB_SetRGB_right>:
// ----------------------------------------------------------------------------
void ARGB_SetRGB_right(u16_t i, u8_t g, u8_t r, u8_t b) {
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	4604      	mov	r4, r0
 8001274:	4608      	mov	r0, r1
 8001276:	4611      	mov	r1, r2
 8001278:	461a      	mov	r2, r3
 800127a:	4623      	mov	r3, r4
 800127c:	80fb      	strh	r3, [r7, #6]
 800127e:	4603      	mov	r3, r0
 8001280:	717b      	strb	r3, [r7, #5]
 8001282:	460b      	mov	r3, r1
 8001284:	713b      	strb	r3, [r7, #4]
 8001286:	4613      	mov	r3, r2
 8001288:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 800128a:	88fb      	ldrh	r3, [r7, #6]
 800128c:	2b54      	cmp	r3, #84	; 0x54
 800128e:	d913      	bls.n	80012b8 <ARGB_SetRGB_right+0x4c>
        u16_t _i = i / NUM_PIXELS;
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	4a30      	ldr	r2, [pc, #192]	; (8001354 <ARGB_SetRGB_right+0xe8>)
 8001294:	fba2 2303 	umull	r2, r3, r2, r3
 8001298:	099b      	lsrs	r3, r3, #6
 800129a:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 800129c:	89fb      	ldrh	r3, [r7, #14]
 800129e:	461a      	mov	r2, r3
 80012a0:	0092      	lsls	r2, r2, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	461a      	mov	r2, r3
 80012a6:	0111      	lsls	r1, r2, #4
 80012a8:	461a      	mov	r2, r3
 80012aa:	460b      	mov	r3, r1
 80012ac:	4413      	add	r3, r2
 80012ae:	425b      	negs	r3, r3
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	4413      	add	r3, r2
 80012b6:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 80012b8:	4b27      	ldr	r3, [pc, #156]	; (8001358 <ARGB_SetRGB_right+0xec>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	3301      	adds	r3, #1
 80012c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80012c8:	793a      	ldrb	r2, [r7, #4]
 80012ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80012ce:	713b      	strb	r3, [r7, #4]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 80012d0:	4b21      	ldr	r3, [pc, #132]	; (8001358 <ARGB_SetRGB_right+0xec>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	3301      	adds	r3, #1
 80012d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80012e0:	797a      	ldrb	r2, [r7, #5]
 80012e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80012e6:	717b      	strb	r3, [r7, #5]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <ARGB_SetRGB_right+0xec>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	3301      	adds	r3, #1
 80012f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80012f8:	78fa      	ldrb	r2, [r7, #3]
 80012fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80012fe:	70fb      	strb	r3, [r7, #3]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 8001300:	797b      	ldrb	r3, [r7, #5]
 8001302:	21b0      	movs	r1, #176	; 0xb0
 8001304:	4618      	mov	r0, r3
 8001306:	f000 fc87 	bl	8001c18 <scale8>
 800130a:	4603      	mov	r3, r0
 800130c:	717b      	strb	r3, [r7, #5]
    b = scale8(b, 0xF0);
 800130e:	78fb      	ldrb	r3, [r7, #3]
 8001310:	21f0      	movs	r1, #240	; 0xf0
 8001312:	4618      	mov	r0, r3
 8001314:	f000 fc80 	bl	8001c18 <scale8>
 8001318:	4603      	mov	r3, r0
 800131a:	70fb      	strb	r3, [r7, #3]
#endif
    // Subpixel chain order
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
 800131c:	793b      	ldrb	r3, [r7, #4]
 800131e:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = g;
 8001320:	797b      	ldrb	r3, [r7, #5]
 8001322:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8001324:	78fb      	ldrb	r3, [r7, #3]
 8001326:	72fb      	strb	r3, [r7, #11]
    const u8_t subp2 = r;
    const u8_t subp3 = b;
#endif
    // RGB or RGBW
#ifdef SK6812
    RGB_BUF_RIGHT[4 * i] = subp1;     // subpixel 1
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	490b      	ldr	r1, [pc, #44]	; (800135c <ARGB_SetRGB_right+0xf0>)
 800132e:	7b7a      	ldrb	r2, [r7, #13]
 8001330:	54ca      	strb	r2, [r1, r3]
    RGB_BUF_RIGHT[4 * i + 1] = subp2; // subpixel 2
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	3301      	adds	r3, #1
 8001338:	4908      	ldr	r1, [pc, #32]	; (800135c <ARGB_SetRGB_right+0xf0>)
 800133a:	7b3a      	ldrb	r2, [r7, #12]
 800133c:	54ca      	strb	r2, [r1, r3]
    RGB_BUF_RIGHT[4 * i + 2] = subp3; // subpixel 3
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	3302      	adds	r3, #2
 8001344:	4905      	ldr	r1, [pc, #20]	; (800135c <ARGB_SetRGB_right+0xf0>)
 8001346:	7afa      	ldrb	r2, [r7, #11]
 8001348:	54ca      	strb	r2, [r1, r3]
#else
    RGB_BUF_RIGHT[3 * i] = subp1;     // subpixel 1
    RGB_BUF_RIGHT[3 * i + 1] = subp2; // subpixel 2
    RGB_BUF_RIGHT[3 * i + 2] = subp3; // subpixel 3
#endif
}
 800134a:	bf00      	nop
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	bd90      	pop	{r4, r7, pc}
 8001352:	bf00      	nop
 8001354:	c0c0c0c1 	.word	0xc0c0c0c1
 8001358:	20000000 	.word	0x20000000
 800135c:	2000021c 	.word	0x2000021c

08001360 <ARGB_SetWhite_left>:
/**
 * @brief Set White component in strip by index
 * @param[in] i LED position
 * @param[in] w White component [0..255]
 */
void ARGB_SetWhite_left(u16_t i, u8_t w) {
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	460a      	mov	r2, r1
 800136a:	80fb      	strh	r3, [r7, #6]
 800136c:	4613      	mov	r3, r2
 800136e:	717b      	strb	r3, [r7, #5]
#ifdef RGB
    return;
#endif
    w /= 256 / ((u16_t) ARGB_BR + 1); 			// set brightness
 8001370:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <ARGB_SetWhite_left+0x40>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	3301      	adds	r3, #1
 8001378:	f44f 7280 	mov.w	r2, #256	; 0x100
 800137c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001380:	797a      	ldrb	r2, [r7, #5]
 8001382:	fb92 f3f3 	sdiv	r3, r2, r3
 8001386:	717b      	strb	r3, [r7, #5]
    RGB_BUF_LEFT[4 * i + 3] = w;                // set white part
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	3303      	adds	r3, #3
 800138e:	4905      	ldr	r1, [pc, #20]	; (80013a4 <ARGB_SetWhite_left+0x44>)
 8001390:	797a      	ldrb	r2, [r7, #5]
 8001392:	54ca      	strb	r2, [r1, r3]
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	20000000 	.word	0x20000000
 80013a4:	200000c8 	.word	0x200000c8

080013a8 <ARGB_SetWhite_right>:
// -------------------------------------------------------------------
void ARGB_SetWhite_right(u16_t i, u8_t w) {
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	460a      	mov	r2, r1
 80013b2:	80fb      	strh	r3, [r7, #6]
 80013b4:	4613      	mov	r3, r2
 80013b6:	717b      	strb	r3, [r7, #5]
#ifdef RGB
    return;
#endif
    w /= 256 / ((u16_t) ARGB_BR + 1); 			// set brightness
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <ARGB_SetWhite_right+0x40>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	3301      	adds	r3, #1
 80013c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80013c8:	797a      	ldrb	r2, [r7, #5]
 80013ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80013ce:	717b      	strb	r3, [r7, #5]
    RGB_BUF_RIGHT[4 * i + 3] = w;               // set white part
 80013d0:	88fb      	ldrh	r3, [r7, #6]
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	3303      	adds	r3, #3
 80013d6:	4905      	ldr	r1, [pc, #20]	; (80013ec <ARGB_SetWhite_right+0x44>)
 80013d8:	797a      	ldrb	r2, [r7, #5]
 80013da:	54ca      	strb	r2, [r1, r3]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	20000000 	.word	0x20000000
 80013ec:	2000021c 	.word	0x2000021c

080013f0 <ARGB_FillRGB_left>:
 * @brief Fill ALL LEDs with RGB color
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_FillRGB_left(u8_t r, u8_t g, u8_t b) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
 80013fa:	460b      	mov	r3, r1
 80013fc:	71bb      	strb	r3, [r7, #6]
 80013fe:	4613      	mov	r3, r2
 8001400:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8001402:	2300      	movs	r3, #0
 8001404:	81fb      	strh	r3, [r7, #14]
 8001406:	e00b      	b.n	8001420 <ARGB_FillRGB_left+0x30>
        ARGB_SetRGB_left(i, r, g, b);
 8001408:	89fb      	ldrh	r3, [r7, #14]
 800140a:	b298      	uxth	r0, r3
 800140c:	797b      	ldrb	r3, [r7, #5]
 800140e:	79ba      	ldrb	r2, [r7, #6]
 8001410:	79f9      	ldrb	r1, [r7, #7]
 8001412:	f7ff feb1 	bl	8001178 <ARGB_SetRGB_left>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8001416:	89fb      	ldrh	r3, [r7, #14]
 8001418:	b29b      	uxth	r3, r3
 800141a:	3301      	adds	r3, #1
 800141c:	b29b      	uxth	r3, r3
 800141e:	81fb      	strh	r3, [r7, #14]
 8001420:	89fb      	ldrh	r3, [r7, #14]
 8001422:	b29b      	uxth	r3, r3
 8001424:	2b54      	cmp	r3, #84	; 0x54
 8001426:	d9ef      	bls.n	8001408 <ARGB_FillRGB_left+0x18>
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <ARGB_FillRGB_right>:
// --------------------------------------------------------------------------------
void ARGB_FillRGB_right(u8_t r, u8_t g, u8_t b) {
 8001432:	b580      	push	{r7, lr}
 8001434:	b084      	sub	sp, #16
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	71fb      	strb	r3, [r7, #7]
 800143c:	460b      	mov	r3, r1
 800143e:	71bb      	strb	r3, [r7, #6]
 8001440:	4613      	mov	r3, r2
 8001442:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8001444:	2300      	movs	r3, #0
 8001446:	81fb      	strh	r3, [r7, #14]
 8001448:	e00b      	b.n	8001462 <ARGB_FillRGB_right+0x30>
        ARGB_SetRGB_right(i, r, g, b);
 800144a:	89fb      	ldrh	r3, [r7, #14]
 800144c:	b298      	uxth	r0, r3
 800144e:	797b      	ldrb	r3, [r7, #5]
 8001450:	79ba      	ldrb	r2, [r7, #6]
 8001452:	79f9      	ldrb	r1, [r7, #7]
 8001454:	f7ff ff0a 	bl	800126c <ARGB_SetRGB_right>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8001458:	89fb      	ldrh	r3, [r7, #14]
 800145a:	b29b      	uxth	r3, r3
 800145c:	3301      	adds	r3, #1
 800145e:	b29b      	uxth	r3, r3
 8001460:	81fb      	strh	r3, [r7, #14]
 8001462:	89fb      	ldrh	r3, [r7, #14]
 8001464:	b29b      	uxth	r3, r3
 8001466:	2b54      	cmp	r3, #84	; 0x54
 8001468:	d9ef      	bls.n	800144a <ARGB_FillRGB_right+0x18>
}
 800146a:	bf00      	nop
 800146c:	bf00      	nop
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <ARGB_FillWhite_left>:

/**
 * @brief Set ALL White components in strip
 * @param[in] w White component [0..255]
 */
void ARGB_FillWhite_left(u8_t w) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 800147e:	2300      	movs	r3, #0
 8001480:	81fb      	strh	r3, [r7, #14]
 8001482:	e00b      	b.n	800149c <ARGB_FillWhite_left+0x28>
        ARGB_SetWhite_left(i, w);
 8001484:	89fb      	ldrh	r3, [r7, #14]
 8001486:	b29b      	uxth	r3, r3
 8001488:	79fa      	ldrb	r2, [r7, #7]
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff67 	bl	8001360 <ARGB_SetWhite_left>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8001492:	89fb      	ldrh	r3, [r7, #14]
 8001494:	b29b      	uxth	r3, r3
 8001496:	3301      	adds	r3, #1
 8001498:	b29b      	uxth	r3, r3
 800149a:	81fb      	strh	r3, [r7, #14]
 800149c:	89fb      	ldrh	r3, [r7, #14]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	2b54      	cmp	r3, #84	; 0x54
 80014a2:	d9ef      	bls.n	8001484 <ARGB_FillWhite_left+0x10>
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <ARGB_FillWhite_right>:
// --------------------------------------------------------------------------
void ARGB_FillWhite_right(u8_t w) {
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b084      	sub	sp, #16
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	71fb      	strb	r3, [r7, #7]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 80014b8:	2300      	movs	r3, #0
 80014ba:	81fb      	strh	r3, [r7, #14]
 80014bc:	e00b      	b.n	80014d6 <ARGB_FillWhite_right+0x28>
        ARGB_SetWhite_right(i, w);
 80014be:	89fb      	ldrh	r3, [r7, #14]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	79fa      	ldrb	r2, [r7, #7]
 80014c4:	4611      	mov	r1, r2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff6e 	bl	80013a8 <ARGB_SetWhite_right>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 80014cc:	89fb      	ldrh	r3, [r7, #14]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	3301      	adds	r3, #1
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	81fb      	strh	r3, [r7, #14]
 80014d6:	89fb      	ldrh	r3, [r7, #14]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	2b54      	cmp	r3, #84	; 0x54
 80014dc:	d9ef      	bls.n	80014be <ARGB_FillWhite_right+0x10>
}
 80014de:	bf00      	nop
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <ARGB_Show_left>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show_left(void) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
	ARGB_LOC_ST_LEFT = ARGB_BUSY;
 80014ee:	4b9f      	ldr	r3, [pc, #636]	; (800176c <ARGB_Show_left+0x284>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER_LEFT != 0 || DMA_HANDLE_LEFT.State != HAL_DMA_STATE_READY) {   //////////////////////////////////////   BUF_COUNTER  ?????
 80014f4:	4b9e      	ldr	r3, [pc, #632]	; (8001770 <ARGB_Show_left+0x288>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d105      	bne.n	800150a <ARGB_Show_left+0x22>
 80014fe:	4b9d      	ldr	r3, [pc, #628]	; (8001774 <ARGB_Show_left+0x28c>)
 8001500:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b01      	cmp	r3, #1
 8001508:	d001      	beq.n	800150e <ARGB_Show_left+0x26>
        return ARGB_BUSY;
 800150a:	2300      	movs	r3, #0
 800150c:	e1a1      	b.n	8001852 <ARGB_Show_left+0x36a>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 800150e:	2300      	movs	r3, #0
 8001510:	71fb      	strb	r3, [r7, #7]
 8001512:	e0dc      	b.n	80016ce <ARGB_Show_left+0x1e6>
            // set first transfer from first values
        	PWM_BUF_LEFT[i] = (((RGB_BUF_LEFT[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001514:	4b98      	ldr	r3, [pc, #608]	; (8001778 <ARGB_Show_left+0x290>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	461a      	mov	r2, r3
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001528:	2b00      	cmp	r3, #0
 800152a:	dd04      	ble.n	8001536 <ARGB_Show_left+0x4e>
 800152c:	4b93      	ldr	r3, [pc, #588]	; (800177c <ARGB_Show_left+0x294>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	461a      	mov	r2, r3
 8001534:	e003      	b.n	800153e <ARGB_Show_left+0x56>
 8001536:	4b92      	ldr	r3, [pc, #584]	; (8001780 <ARGB_Show_left+0x298>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	b2db      	uxtb	r3, r3
 800153c:	461a      	mov	r2, r3
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	4619      	mov	r1, r3
 8001544:	4b8f      	ldr	r3, [pc, #572]	; (8001784 <ARGB_Show_left+0x29c>)
 8001546:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        	PWM_BUF_LEFT[i + 8] = (((RGB_BUF_LEFT[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800154a:	4b8b      	ldr	r3, [pc, #556]	; (8001778 <ARGB_Show_left+0x290>)
 800154c:	785b      	ldrb	r3, [r3, #1]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	461a      	mov	r2, r3
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155e:	2b00      	cmp	r3, #0
 8001560:	dd04      	ble.n	800156c <ARGB_Show_left+0x84>
 8001562:	4b86      	ldr	r3, [pc, #536]	; (800177c <ARGB_Show_left+0x294>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	4619      	mov	r1, r3
 800156a:	e003      	b.n	8001574 <ARGB_Show_left+0x8c>
 800156c:	4b84      	ldr	r3, [pc, #528]	; (8001780 <ARGB_Show_left+0x298>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	4619      	mov	r1, r3
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	3308      	adds	r3, #8
 800157a:	4a82      	ldr	r2, [pc, #520]	; (8001784 <ARGB_Show_left+0x29c>)
 800157c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 16] = (((RGB_BUF_LEFT[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001580:	4b7d      	ldr	r3, [pc, #500]	; (8001778 <ARGB_Show_left+0x290>)
 8001582:	789b      	ldrb	r3, [r3, #2]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	461a      	mov	r2, r3
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001594:	2b00      	cmp	r3, #0
 8001596:	dd04      	ble.n	80015a2 <ARGB_Show_left+0xba>
 8001598:	4b78      	ldr	r3, [pc, #480]	; (800177c <ARGB_Show_left+0x294>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	4619      	mov	r1, r3
 80015a0:	e003      	b.n	80015aa <ARGB_Show_left+0xc2>
 80015a2:	4b77      	ldr	r3, [pc, #476]	; (8001780 <ARGB_Show_left+0x298>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	4619      	mov	r1, r3
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	3310      	adds	r3, #16
 80015b0:	4a74      	ldr	r2, [pc, #464]	; (8001784 <ARGB_Show_left+0x29c>)
 80015b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 24] = (((RGB_BUF_LEFT[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80015b6:	4b70      	ldr	r3, [pc, #448]	; (8001778 <ARGB_Show_left+0x290>)
 80015b8:	78db      	ldrb	r3, [r3, #3]
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	461a      	mov	r2, r3
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	dd04      	ble.n	80015d8 <ARGB_Show_left+0xf0>
 80015ce:	4b6b      	ldr	r3, [pc, #428]	; (800177c <ARGB_Show_left+0x294>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	4619      	mov	r1, r3
 80015d6:	e003      	b.n	80015e0 <ARGB_Show_left+0xf8>
 80015d8:	4b69      	ldr	r3, [pc, #420]	; (8001780 <ARGB_Show_left+0x298>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	4619      	mov	r1, r3
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	3318      	adds	r3, #24
 80015e6:	4a67      	ldr	r2, [pc, #412]	; (8001784 <ARGB_Show_left+0x29c>)
 80015e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 32] = (((RGB_BUF_LEFT[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80015ec:	4b62      	ldr	r3, [pc, #392]	; (8001778 <ARGB_Show_left+0x290>)
 80015ee:	791b      	ldrb	r3, [r3, #4]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001600:	2b00      	cmp	r3, #0
 8001602:	dd04      	ble.n	800160e <ARGB_Show_left+0x126>
 8001604:	4b5d      	ldr	r3, [pc, #372]	; (800177c <ARGB_Show_left+0x294>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	4619      	mov	r1, r3
 800160c:	e003      	b.n	8001616 <ARGB_Show_left+0x12e>
 800160e:	4b5c      	ldr	r3, [pc, #368]	; (8001780 <ARGB_Show_left+0x298>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	b2db      	uxtb	r3, r3
 8001614:	4619      	mov	r1, r3
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	3320      	adds	r3, #32
 800161c:	4a59      	ldr	r2, [pc, #356]	; (8001784 <ARGB_Show_left+0x29c>)
 800161e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 40] = (((RGB_BUF_LEFT[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001622:	4b55      	ldr	r3, [pc, #340]	; (8001778 <ARGB_Show_left+0x290>)
 8001624:	795b      	ldrb	r3, [r3, #5]
 8001626:	b2db      	uxtb	r3, r3
 8001628:	461a      	mov	r2, r3
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001636:	2b00      	cmp	r3, #0
 8001638:	dd04      	ble.n	8001644 <ARGB_Show_left+0x15c>
 800163a:	4b50      	ldr	r3, [pc, #320]	; (800177c <ARGB_Show_left+0x294>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	4619      	mov	r1, r3
 8001642:	e003      	b.n	800164c <ARGB_Show_left+0x164>
 8001644:	4b4e      	ldr	r3, [pc, #312]	; (8001780 <ARGB_Show_left+0x298>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	4619      	mov	r1, r3
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	b2db      	uxtb	r3, r3
 8001650:	3328      	adds	r3, #40	; 0x28
 8001652:	4a4c      	ldr	r2, [pc, #304]	; (8001784 <ARGB_Show_left+0x29c>)
 8001654:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#ifdef SK6812
        	PWM_BUF_LEFT[i + 48] = (((RGB_BUF_LEFT[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001658:	4b47      	ldr	r3, [pc, #284]	; (8001778 <ARGB_Show_left+0x290>)
 800165a:	799b      	ldrb	r3, [r3, #6]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	461a      	mov	r2, r3
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800166c:	2b00      	cmp	r3, #0
 800166e:	dd04      	ble.n	800167a <ARGB_Show_left+0x192>
 8001670:	4b42      	ldr	r3, [pc, #264]	; (800177c <ARGB_Show_left+0x294>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	4619      	mov	r1, r3
 8001678:	e003      	b.n	8001682 <ARGB_Show_left+0x19a>
 800167a:	4b41      	ldr	r3, [pc, #260]	; (8001780 <ARGB_Show_left+0x298>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	4619      	mov	r1, r3
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	b2db      	uxtb	r3, r3
 8001686:	3330      	adds	r3, #48	; 0x30
 8001688:	4a3e      	ldr	r2, [pc, #248]	; (8001784 <ARGB_Show_left+0x29c>)
 800168a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 56] = (((RGB_BUF_LEFT[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800168e:	4b3a      	ldr	r3, [pc, #232]	; (8001778 <ARGB_Show_left+0x290>)
 8001690:	79db      	ldrb	r3, [r3, #7]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	461a      	mov	r2, r3
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	dd04      	ble.n	80016b0 <ARGB_Show_left+0x1c8>
 80016a6:	4b35      	ldr	r3, [pc, #212]	; (800177c <ARGB_Show_left+0x294>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	4619      	mov	r1, r3
 80016ae:	e003      	b.n	80016b8 <ARGB_Show_left+0x1d0>
 80016b0:	4b33      	ldr	r3, [pc, #204]	; (8001780 <ARGB_Show_left+0x298>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	4619      	mov	r1, r3
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	3338      	adds	r3, #56	; 0x38
 80016be:	4a31      	ldr	r2, [pc, #196]	; (8001784 <ARGB_Show_left+0x29c>)
 80016c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	3301      	adds	r3, #1
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	71fb      	strb	r3, [r7, #7]
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b07      	cmp	r3, #7
 80016d4:	f67f af1e 	bls.w	8001514 <ARGB_Show_left+0x2c>
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 80016dc:	e0b1      	b.n	8001842 <ARGB_Show_left+0x35a>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH_LEFT) == HAL_TIM_CHANNEL_STATE_BUSY) {
 80016de:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <ARGB_Show_left+0x2a0>)
 80016e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d102      	bne.n	80016f0 <ARGB_Show_left+0x208>
                DMA_Send_Stat = HAL_BUSY;
 80016ea:	2302      	movs	r3, #2
 80016ec:	73fb      	strb	r3, [r7, #15]
                continue;
 80016ee:	e0a8      	b.n	8001842 <ARGB_Show_left+0x35a>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH_LEFT) == HAL_TIM_CHANNEL_STATE_READY) {
 80016f0:	4b25      	ldr	r3, [pc, #148]	; (8001788 <ARGB_Show_left+0x2a0>)
 80016f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d11d      	bne.n	8001738 <ARGB_Show_left+0x250>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH_LEFT, HAL_TIM_CHANNEL_STATE_BUSY);
 80016fc:	4b22      	ldr	r3, [pc, #136]	; (8001788 <ARGB_Show_left+0x2a0>)
 80016fe:	2202      	movs	r2, #2
 8001700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#elif TIM_CH_LEFT == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt_left;
 8001704:	4b20      	ldr	r3, [pc, #128]	; (8001788 <ARGB_Show_left+0x2a0>)
 8001706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001708:	4a20      	ldr	r2, [pc, #128]	; (800178c <ARGB_Show_left+0x2a4>)
 800170a:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt_left;
 800170c:	4b1e      	ldr	r3, [pc, #120]	; (8001788 <ARGB_Show_left+0x2a0>)
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	4a1f      	ldr	r2, [pc, #124]	; (8001790 <ARGB_Show_left+0x2a8>)
 8001712:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferErrorCallback = TIM_DMAError;
 8001714:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <ARGB_Show_left+0x2a0>)
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	4a1e      	ldr	r2, [pc, #120]	; (8001794 <ARGB_Show_left+0x2ac>)
 800171a:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF_LEFT,
 800171c:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <ARGB_Show_left+0x2a0>)
 800171e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001720:	4918      	ldr	r1, [pc, #96]	; (8001784 <ARGB_Show_left+0x29c>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR,
 8001722:	4b19      	ldr	r3, [pc, #100]	; (8001788 <ARGB_Show_left+0x2a0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	333c      	adds	r3, #60	; 0x3c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF_LEFT,
 8001728:	461a      	mov	r2, r3
 800172a:	2340      	movs	r3, #64	; 0x40
 800172c:	f003 fb5e 	bl	8004dec <HAL_DMA_Start_IT>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d006      	beq.n	8001744 <ARGB_Show_left+0x25c>
 8001736:	e002      	b.n	800173e <ARGB_Show_left+0x256>
                DMA_Send_Stat = HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
                continue;
 800173c:	e081      	b.n	8001842 <ARGB_Show_left+0x35a>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	73fb      	strb	r3, [r7, #15]
                continue;
 8001742:	e07e      	b.n	8001842 <ARGB_Show_left+0x35a>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC);
 8001744:	4b10      	ldr	r3, [pc, #64]	; (8001788 <ARGB_Show_left+0x2a0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68da      	ldr	r2, [r3, #12]
 800174a:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <ARGB_Show_left+0x2a0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001752:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <ARGB_Show_left+0x2a0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0f      	ldr	r2, [pc, #60]	; (8001798 <ARGB_Show_left+0x2b0>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d004      	beq.n	8001768 <ARGB_Show_left+0x280>
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <ARGB_Show_left+0x2a0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a0e      	ldr	r2, [pc, #56]	; (800179c <ARGB_Show_left+0x2b4>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d11b      	bne.n	80017a0 <ARGB_Show_left+0x2b8>
 8001768:	2301      	movs	r3, #1
 800176a:	e01a      	b.n	80017a2 <ARGB_Show_left+0x2ba>
 800176c:	20000574 	.word	0x20000574
 8001770:	20000570 	.word	0x20000570
 8001774:	20001770 	.word	0x20001770
 8001778:	200000c8 	.word	0x200000c8
 800177c:	200000c4 	.word	0x200000c4
 8001780:	200000c5 	.word	0x200000c5
 8001784:	20000370 	.word	0x20000370
 8001788:	20001728 	.word	0x20001728
 800178c:	08001c41 	.word	0x08001c41
 8001790:	08002231 	.word	0x08002231
 8001794:	08008863 	.word	0x08008863
 8001798:	40010000 	.word	0x40010000
 800179c:	40010400 	.word	0x40010400
 80017a0:	2300      	movs	r3, #0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d007      	beq.n	80017b6 <ARGB_Show_left+0x2ce>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 80017a6:	4b2d      	ldr	r3, [pc, #180]	; (800185c <ARGB_Show_left+0x374>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017ac:	4b2b      	ldr	r3, [pc, #172]	; (800185c <ARGB_Show_left+0x374>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017b4:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 80017b6:	4b29      	ldr	r3, [pc, #164]	; (800185c <ARGB_Show_left+0x374>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a29      	ldr	r2, [pc, #164]	; (8001860 <ARGB_Show_left+0x378>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d022      	beq.n	8001806 <ARGB_Show_left+0x31e>
 80017c0:	4b26      	ldr	r3, [pc, #152]	; (800185c <ARGB_Show_left+0x374>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017c8:	d01d      	beq.n	8001806 <ARGB_Show_left+0x31e>
 80017ca:	4b24      	ldr	r3, [pc, #144]	; (800185c <ARGB_Show_left+0x374>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a25      	ldr	r2, [pc, #148]	; (8001864 <ARGB_Show_left+0x37c>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d018      	beq.n	8001806 <ARGB_Show_left+0x31e>
 80017d4:	4b21      	ldr	r3, [pc, #132]	; (800185c <ARGB_Show_left+0x374>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a23      	ldr	r2, [pc, #140]	; (8001868 <ARGB_Show_left+0x380>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d013      	beq.n	8001806 <ARGB_Show_left+0x31e>
 80017de:	4b1f      	ldr	r3, [pc, #124]	; (800185c <ARGB_Show_left+0x374>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a22      	ldr	r2, [pc, #136]	; (800186c <ARGB_Show_left+0x384>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d00e      	beq.n	8001806 <ARGB_Show_left+0x31e>
 80017e8:	4b1c      	ldr	r3, [pc, #112]	; (800185c <ARGB_Show_left+0x374>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a20      	ldr	r2, [pc, #128]	; (8001870 <ARGB_Show_left+0x388>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d009      	beq.n	8001806 <ARGB_Show_left+0x31e>
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <ARGB_Show_left+0x374>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a1f      	ldr	r2, [pc, #124]	; (8001874 <ARGB_Show_left+0x38c>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d004      	beq.n	8001806 <ARGB_Show_left+0x31e>
 80017fc:	4b17      	ldr	r3, [pc, #92]	; (800185c <ARGB_Show_left+0x374>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a1d      	ldr	r2, [pc, #116]	; (8001878 <ARGB_Show_left+0x390>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d111      	bne.n	800182a <ARGB_Show_left+0x342>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <ARGB_Show_left+0x374>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	2b06      	cmp	r3, #6
 8001816:	d011      	beq.n	800183c <ARGB_Show_left+0x354>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <ARGB_Show_left+0x374>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <ARGB_Show_left+0x374>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f042 0201 	orr.w	r2, r2, #1
 8001826:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001828:	e008      	b.n	800183c <ARGB_Show_left+0x354>
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <ARGB_Show_left+0x374>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b0a      	ldr	r3, [pc, #40]	; (800185c <ARGB_Show_left+0x374>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f042 0201 	orr.w	r2, r2, #1
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	e000      	b.n	800183e <ARGB_Show_left+0x356>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 800183c:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	2b00      	cmp	r3, #0
 8001846:	f47f af4a 	bne.w	80016de <ARGB_Show_left+0x1f6>
        }
        BUF_COUNTER_LEFT = 2;
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <ARGB_Show_left+0x394>)
 800184c:	2202      	movs	r2, #2
 800184e:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 8001850:	2302      	movs	r3, #2
    }
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20001728 	.word	0x20001728
 8001860:	40010000 	.word	0x40010000
 8001864:	40000400 	.word	0x40000400
 8001868:	40000800 	.word	0x40000800
 800186c:	40000c00 	.word	0x40000c00
 8001870:	40010400 	.word	0x40010400
 8001874:	40014000 	.word	0x40014000
 8001878:	40001800 	.word	0x40001800
 800187c:	20000570 	.word	0x20000570

08001880 <ARGB_Show_right>:
// ----------------------------------------------------------------------
ARGB_STATE ARGB_Show_right(void) {             //////////////////////////////////////   BUF_COUNTER  ?????
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
	ARGB_LOC_ST_RIGHT = ARGB_BUSY;
 8001886:	4b9f      	ldr	r3, [pc, #636]	; (8001b04 <ARGB_Show_right+0x284>)
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER_RIGHT != 0 || DMA_HANDLE_RIGHT.State != HAL_DMA_STATE_READY) {
 800188c:	4b9e      	ldr	r3, [pc, #632]	; (8001b08 <ARGB_Show_right+0x288>)
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	b29b      	uxth	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d105      	bne.n	80018a2 <ARGB_Show_right+0x22>
 8001896:	4b9d      	ldr	r3, [pc, #628]	; (8001b0c <ARGB_Show_right+0x28c>)
 8001898:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d001      	beq.n	80018a6 <ARGB_Show_right+0x26>
        return ARGB_BUSY;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e1a1      	b.n	8001bea <ARGB_Show_right+0x36a>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 80018a6:	2300      	movs	r3, #0
 80018a8:	71fb      	strb	r3, [r7, #7]
 80018aa:	e0dc      	b.n	8001a66 <ARGB_Show_right+0x1e6>
            // set first transfer from first values
        	PWM_BUF_RIGHT[i] = (((RGB_BUF_RIGHT[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80018ac:	4b98      	ldr	r3, [pc, #608]	; (8001b10 <ARGB_Show_right+0x290>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	461a      	mov	r2, r3
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	dd04      	ble.n	80018ce <ARGB_Show_right+0x4e>
 80018c4:	4b93      	ldr	r3, [pc, #588]	; (8001b14 <ARGB_Show_right+0x294>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	461a      	mov	r2, r3
 80018cc:	e003      	b.n	80018d6 <ARGB_Show_right+0x56>
 80018ce:	4b92      	ldr	r3, [pc, #584]	; (8001b18 <ARGB_Show_right+0x298>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	461a      	mov	r2, r3
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	4619      	mov	r1, r3
 80018dc:	4b8f      	ldr	r3, [pc, #572]	; (8001b1c <ARGB_Show_right+0x29c>)
 80018de:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        	PWM_BUF_RIGHT[i + 8] = (((RGB_BUF_RIGHT[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80018e2:	4b8b      	ldr	r3, [pc, #556]	; (8001b10 <ARGB_Show_right+0x290>)
 80018e4:	785b      	ldrb	r3, [r3, #1]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	461a      	mov	r2, r3
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	dd04      	ble.n	8001904 <ARGB_Show_right+0x84>
 80018fa:	4b86      	ldr	r3, [pc, #536]	; (8001b14 <ARGB_Show_right+0x294>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	4619      	mov	r1, r3
 8001902:	e003      	b.n	800190c <ARGB_Show_right+0x8c>
 8001904:	4b84      	ldr	r3, [pc, #528]	; (8001b18 <ARGB_Show_right+0x298>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	4619      	mov	r1, r3
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	b2db      	uxtb	r3, r3
 8001910:	3308      	adds	r3, #8
 8001912:	4a82      	ldr	r2, [pc, #520]	; (8001b1c <ARGB_Show_right+0x29c>)
 8001914:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 16] = (((RGB_BUF_RIGHT[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001918:	4b7d      	ldr	r3, [pc, #500]	; (8001b10 <ARGB_Show_right+0x290>)
 800191a:	789b      	ldrb	r3, [r3, #2]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	461a      	mov	r2, r3
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800192c:	2b00      	cmp	r3, #0
 800192e:	dd04      	ble.n	800193a <ARGB_Show_right+0xba>
 8001930:	4b78      	ldr	r3, [pc, #480]	; (8001b14 <ARGB_Show_right+0x294>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	4619      	mov	r1, r3
 8001938:	e003      	b.n	8001942 <ARGB_Show_right+0xc2>
 800193a:	4b77      	ldr	r3, [pc, #476]	; (8001b18 <ARGB_Show_right+0x298>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	4619      	mov	r1, r3
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	3310      	adds	r3, #16
 8001948:	4a74      	ldr	r2, [pc, #464]	; (8001b1c <ARGB_Show_right+0x29c>)
 800194a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 24] = (((RGB_BUF_RIGHT[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800194e:	4b70      	ldr	r3, [pc, #448]	; (8001b10 <ARGB_Show_right+0x290>)
 8001950:	78db      	ldrb	r3, [r3, #3]
 8001952:	b2db      	uxtb	r3, r3
 8001954:	461a      	mov	r2, r3
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	b2db      	uxtb	r3, r3
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001962:	2b00      	cmp	r3, #0
 8001964:	dd04      	ble.n	8001970 <ARGB_Show_right+0xf0>
 8001966:	4b6b      	ldr	r3, [pc, #428]	; (8001b14 <ARGB_Show_right+0x294>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	4619      	mov	r1, r3
 800196e:	e003      	b.n	8001978 <ARGB_Show_right+0xf8>
 8001970:	4b69      	ldr	r3, [pc, #420]	; (8001b18 <ARGB_Show_right+0x298>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	b2db      	uxtb	r3, r3
 8001976:	4619      	mov	r1, r3
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	b2db      	uxtb	r3, r3
 800197c:	3318      	adds	r3, #24
 800197e:	4a67      	ldr	r2, [pc, #412]	; (8001b1c <ARGB_Show_right+0x29c>)
 8001980:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 32] = (((RGB_BUF_RIGHT[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001984:	4b62      	ldr	r3, [pc, #392]	; (8001b10 <ARGB_Show_right+0x290>)
 8001986:	791b      	ldrb	r3, [r3, #4]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	461a      	mov	r2, r3
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	b2db      	uxtb	r3, r3
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001998:	2b00      	cmp	r3, #0
 800199a:	dd04      	ble.n	80019a6 <ARGB_Show_right+0x126>
 800199c:	4b5d      	ldr	r3, [pc, #372]	; (8001b14 <ARGB_Show_right+0x294>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	4619      	mov	r1, r3
 80019a4:	e003      	b.n	80019ae <ARGB_Show_right+0x12e>
 80019a6:	4b5c      	ldr	r3, [pc, #368]	; (8001b18 <ARGB_Show_right+0x298>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	4619      	mov	r1, r3
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	3320      	adds	r3, #32
 80019b4:	4a59      	ldr	r2, [pc, #356]	; (8001b1c <ARGB_Show_right+0x29c>)
 80019b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 40] = (((RGB_BUF_RIGHT[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80019ba:	4b55      	ldr	r3, [pc, #340]	; (8001b10 <ARGB_Show_right+0x290>)
 80019bc:	795b      	ldrb	r3, [r3, #5]
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	461a      	mov	r2, r3
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	dd04      	ble.n	80019dc <ARGB_Show_right+0x15c>
 80019d2:	4b50      	ldr	r3, [pc, #320]	; (8001b14 <ARGB_Show_right+0x294>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	4619      	mov	r1, r3
 80019da:	e003      	b.n	80019e4 <ARGB_Show_right+0x164>
 80019dc:	4b4e      	ldr	r3, [pc, #312]	; (8001b18 <ARGB_Show_right+0x298>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	4619      	mov	r1, r3
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	3328      	adds	r3, #40	; 0x28
 80019ea:	4a4c      	ldr	r2, [pc, #304]	; (8001b1c <ARGB_Show_right+0x29c>)
 80019ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#ifdef SK6812
        	PWM_BUF_RIGHT[i + 48] = (((RGB_BUF_RIGHT[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80019f0:	4b47      	ldr	r3, [pc, #284]	; (8001b10 <ARGB_Show_right+0x290>)
 80019f2:	799b      	ldrb	r3, [r3, #6]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	461a      	mov	r2, r3
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	dd04      	ble.n	8001a12 <ARGB_Show_right+0x192>
 8001a08:	4b42      	ldr	r3, [pc, #264]	; (8001b14 <ARGB_Show_right+0x294>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	4619      	mov	r1, r3
 8001a10:	e003      	b.n	8001a1a <ARGB_Show_right+0x19a>
 8001a12:	4b41      	ldr	r3, [pc, #260]	; (8001b18 <ARGB_Show_right+0x298>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	4619      	mov	r1, r3
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	3330      	adds	r3, #48	; 0x30
 8001a20:	4a3e      	ldr	r2, [pc, #248]	; (8001b1c <ARGB_Show_right+0x29c>)
 8001a22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 56] = (((RGB_BUF_RIGHT[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001a26:	4b3a      	ldr	r3, [pc, #232]	; (8001b10 <ARGB_Show_right+0x290>)
 8001a28:	79db      	ldrb	r3, [r3, #7]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	dd04      	ble.n	8001a48 <ARGB_Show_right+0x1c8>
 8001a3e:	4b35      	ldr	r3, [pc, #212]	; (8001b14 <ARGB_Show_right+0x294>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	4619      	mov	r1, r3
 8001a46:	e003      	b.n	8001a50 <ARGB_Show_right+0x1d0>
 8001a48:	4b33      	ldr	r3, [pc, #204]	; (8001b18 <ARGB_Show_right+0x298>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	4619      	mov	r1, r3
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	3338      	adds	r3, #56	; 0x38
 8001a56:	4a31      	ldr	r2, [pc, #196]	; (8001b1c <ARGB_Show_right+0x29c>)
 8001a58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	3301      	adds	r3, #1
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	71fb      	strb	r3, [r7, #7]
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b07      	cmp	r3, #7
 8001a6c:	f67f af1e 	bls.w	80018ac <ARGB_Show_right+0x2c>
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001a74:	e0b1      	b.n	8001bda <ARGB_Show_right+0x35a>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH_RIGHT) == HAL_TIM_CHANNEL_STATE_BUSY) {
 8001a76:	4b2a      	ldr	r3, [pc, #168]	; (8001b20 <ARGB_Show_right+0x2a0>)
 8001a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d102      	bne.n	8001a88 <ARGB_Show_right+0x208>
                DMA_Send_Stat = HAL_BUSY;
 8001a82:	2302      	movs	r3, #2
 8001a84:	73fb      	strb	r3, [r7, #15]
                continue;
 8001a86:	e0a8      	b.n	8001bda <ARGB_Show_right+0x35a>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH_RIGHT) == HAL_TIM_CHANNEL_STATE_READY) {
 8001a88:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <ARGB_Show_right+0x2a0>)
 8001a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d11d      	bne.n	8001ad0 <ARGB_Show_right+0x250>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH_RIGHT, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a94:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <ARGB_Show_right+0x2a0>)
 8001a96:	2202      	movs	r2, #2
 8001a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#elif TIM_CH_RIGHT == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID_R TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC_R TIM_DMA_CC4
#define ARGB_TIM_CCR_R CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt_right;
 8001a9c:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <ARGB_Show_right+0x2a0>)
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa0:	4a20      	ldr	r2, [pc, #128]	; (8001b24 <ARGB_Show_right+0x2a4>)
 8001aa2:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt_right;
 8001aa4:	4b1e      	ldr	r3, [pc, #120]	; (8001b20 <ARGB_Show_right+0x2a0>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	4a1f      	ldr	r2, [pc, #124]	; (8001b28 <ARGB_Show_right+0x2a8>)
 8001aaa:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R]->XferErrorCallback = TIM_DMAError;
 8001aac:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <ARGB_Show_right+0x2a0>)
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	4a1e      	ldr	r2, [pc, #120]	; (8001b2c <ARGB_Show_right+0x2ac>)
 8001ab2:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R], (u32_t) PWM_BUF_RIGHT,
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <ARGB_Show_right+0x2a0>)
 8001ab6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001ab8:	4918      	ldr	r1, [pc, #96]	; (8001b1c <ARGB_Show_right+0x29c>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR_R,
 8001aba:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <ARGB_Show_right+0x2a0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	3340      	adds	r3, #64	; 0x40
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R], (u32_t) PWM_BUF_RIGHT,
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	2340      	movs	r3, #64	; 0x40
 8001ac4:	f003 f992 	bl	8004dec <HAL_DMA_Start_IT>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d006      	beq.n	8001adc <ARGB_Show_right+0x25c>
 8001ace:	e002      	b.n	8001ad6 <ARGB_Show_right+0x256>
                DMA_Send_Stat = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
                continue;
 8001ad4:	e081      	b.n	8001bda <ARGB_Show_right+0x35a>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	73fb      	strb	r3, [r7, #15]
                continue;
 8001ada:	e07e      	b.n	8001bda <ARGB_Show_right+0x35a>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC_R);
 8001adc:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <ARGB_Show_right+0x2a0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <ARGB_Show_right+0x2a0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001aea:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <ARGB_Show_right+0x2a0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0f      	ldr	r2, [pc, #60]	; (8001b30 <ARGB_Show_right+0x2b0>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d004      	beq.n	8001b00 <ARGB_Show_right+0x280>
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <ARGB_Show_right+0x2a0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a0e      	ldr	r2, [pc, #56]	; (8001b34 <ARGB_Show_right+0x2b4>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d11b      	bne.n	8001b38 <ARGB_Show_right+0x2b8>
 8001b00:	2301      	movs	r3, #1
 8001b02:	e01a      	b.n	8001b3a <ARGB_Show_right+0x2ba>
 8001b04:	20000575 	.word	0x20000575
 8001b08:	20000572 	.word	0x20000572
 8001b0c:	200017d0 	.word	0x200017d0
 8001b10:	2000021c 	.word	0x2000021c
 8001b14:	200000c4 	.word	0x200000c4
 8001b18:	200000c5 	.word	0x200000c5
 8001b1c:	20000470 	.word	0x20000470
 8001b20:	20001728 	.word	0x20001728
 8001b24:	08001f39 	.word	0x08001f39
 8001b28:	080023e1 	.word	0x080023e1
 8001b2c:	08008863 	.word	0x08008863
 8001b30:	40010000 	.word	0x40010000
 8001b34:	40010400 	.word	0x40010400
 8001b38:	2300      	movs	r3, #0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d007      	beq.n	8001b4e <ARGB_Show_right+0x2ce>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8001b3e:	4b2d      	ldr	r3, [pc, #180]	; (8001bf4 <ARGB_Show_right+0x374>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b44:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <ARGB_Show_right+0x374>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b4c:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001b4e:	4b29      	ldr	r3, [pc, #164]	; (8001bf4 <ARGB_Show_right+0x374>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a29      	ldr	r2, [pc, #164]	; (8001bf8 <ARGB_Show_right+0x378>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d022      	beq.n	8001b9e <ARGB_Show_right+0x31e>
 8001b58:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <ARGB_Show_right+0x374>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b60:	d01d      	beq.n	8001b9e <ARGB_Show_right+0x31e>
 8001b62:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <ARGB_Show_right+0x374>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a25      	ldr	r2, [pc, #148]	; (8001bfc <ARGB_Show_right+0x37c>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d018      	beq.n	8001b9e <ARGB_Show_right+0x31e>
 8001b6c:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <ARGB_Show_right+0x374>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a23      	ldr	r2, [pc, #140]	; (8001c00 <ARGB_Show_right+0x380>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d013      	beq.n	8001b9e <ARGB_Show_right+0x31e>
 8001b76:	4b1f      	ldr	r3, [pc, #124]	; (8001bf4 <ARGB_Show_right+0x374>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a22      	ldr	r2, [pc, #136]	; (8001c04 <ARGB_Show_right+0x384>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d00e      	beq.n	8001b9e <ARGB_Show_right+0x31e>
 8001b80:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <ARGB_Show_right+0x374>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a20      	ldr	r2, [pc, #128]	; (8001c08 <ARGB_Show_right+0x388>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d009      	beq.n	8001b9e <ARGB_Show_right+0x31e>
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <ARGB_Show_right+0x374>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a1f      	ldr	r2, [pc, #124]	; (8001c0c <ARGB_Show_right+0x38c>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d004      	beq.n	8001b9e <ARGB_Show_right+0x31e>
 8001b94:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <ARGB_Show_right+0x374>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a1d      	ldr	r2, [pc, #116]	; (8001c10 <ARGB_Show_right+0x390>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d111      	bne.n	8001bc2 <ARGB_Show_right+0x342>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <ARGB_Show_right+0x374>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2b06      	cmp	r3, #6
 8001bae:	d011      	beq.n	8001bd4 <ARGB_Show_right+0x354>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001bb0:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <ARGB_Show_right+0x374>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <ARGB_Show_right+0x374>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0201 	orr.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001bc0:	e008      	b.n	8001bd4 <ARGB_Show_right+0x354>
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <ARGB_Show_right+0x374>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <ARGB_Show_right+0x374>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 0201 	orr.w	r2, r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	e000      	b.n	8001bd6 <ARGB_Show_right+0x356>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001bd4:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f47f af4a 	bne.w	8001a76 <ARGB_Show_right+0x1f6>
        }
        BUF_COUNTER_RIGHT = 2;
 8001be2:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <ARGB_Show_right+0x394>)
 8001be4:	2202      	movs	r2, #2
 8001be6:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 8001be8:	2302      	movs	r3, #2
    }
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20001728 	.word	0x20001728
 8001bf8:	40010000 	.word	0x40010000
 8001bfc:	40000400 	.word	0x40000400
 8001c00:	40000800 	.word	0x40000800
 8001c04:	40000c00 	.word	0x40000c00
 8001c08:	40010400 	.word	0x40010400
 8001c0c:	40014000 	.word	0x40014000
 8001c10:	40001800 	.word	0x40001800
 8001c14:	20000572 	.word	0x20000572

08001c18 <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	460a      	mov	r2, r1
 8001c22:	71fb      	strb	r3, [r7, #7]
 8001c24:	4613      	mov	r3, r2
 8001c26:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	79ba      	ldrb	r2, [r7, #6]
 8001c2c:	fb02 f303 	mul.w	r3, r2, r3
 8001c30:	121b      	asrs	r3, r3, #8
 8001c32:	b2db      	uxtb	r3, r3
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <ARGB_TIM_DMADelayPulseCplt_left>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt_left(DMA_HandleTypeDef *hdma) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4c:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE_LEFT || htim != &TIM_HANDLE) return;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a8c      	ldr	r2, [pc, #560]	; (8001e84 <ARGB_TIM_DMADelayPulseCplt_left+0x244>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	f040 8168 	bne.w	8001f28 <ARGB_TIM_DMADelayPulseCplt_left+0x2e8>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4a8b      	ldr	r2, [pc, #556]	; (8001e88 <ARGB_TIM_DMADelayPulseCplt_left+0x248>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	f040 8163 	bne.w	8001f28 <ARGB_TIM_DMADelayPulseCplt_left+0x2e8>
    if (BUF_COUNTER_LEFT == 0) return; // if no data to transmit - return
 8001c62:	4b8a      	ldr	r3, [pc, #552]	; (8001e8c <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 815f 	beq.w	8001f2c <ARGB_TIM_DMADelayPulseCplt_left+0x2ec>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d10b      	bne.n	8001c90 <ARGB_TIM_DMADelayPulseCplt_left+0x50>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d136      	bne.n	8001cf4 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c8e:	e031      	b.n	8001cf4 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d10b      	bne.n	8001cb2 <ARGB_TIM_DMADelayPulseCplt_left+0x72>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d125      	bne.n	8001cf4 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cb0:	e020      	b.n	8001cf4 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d10b      	bne.n	8001cd4 <ARGB_TIM_DMADelayPulseCplt_left+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2204      	movs	r2, #4
 8001cc0:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d114      	bne.n	8001cf4 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cd2:	e00f      	b.n	8001cf4 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d10a      	bne.n	8001cf4 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2208      	movs	r2, #8
 8001ce2:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d103      	bne.n	8001cf4 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER_LEFT < NUM_PIXELS) {
 8001cf4:	4b65      	ldr	r3, [pc, #404]	; (8001e8c <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	2b54      	cmp	r3, #84	; 0x54
 8001cfc:	f200 8094 	bhi.w	8001e28 <ARGB_TIM_DMADelayPulseCplt_left+0x1e8>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001d00:	2300      	movs	r3, #0
 8001d02:	72fb      	strb	r3, [r7, #11]
 8001d04:	e083      	b.n	8001e0e <ARGB_TIM_DMADelayPulseCplt_left+0x1ce>
#ifdef SK6812
        	PWM_BUF_LEFT[i + 32] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001d06:	4b61      	ldr	r3, [pc, #388]	; (8001e8c <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4a60      	ldr	r2, [pc, #384]	; (8001e90 <ARGB_TIM_DMADelayPulseCplt_left+0x250>)
 8001d10:	5cd3      	ldrb	r3, [r2, r3]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	461a      	mov	r2, r3
 8001d16:	7afb      	ldrb	r3, [r7, #11]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	dd04      	ble.n	8001d30 <ARGB_TIM_DMADelayPulseCplt_left+0xf0>
 8001d26:	4b5b      	ldr	r3, [pc, #364]	; (8001e94 <ARGB_TIM_DMADelayPulseCplt_left+0x254>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	e003      	b.n	8001d38 <ARGB_TIM_DMADelayPulseCplt_left+0xf8>
 8001d30:	4b59      	ldr	r3, [pc, #356]	; (8001e98 <ARGB_TIM_DMADelayPulseCplt_left+0x258>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	4619      	mov	r1, r3
 8001d38:	7afb      	ldrb	r3, [r7, #11]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	3320      	adds	r3, #32
 8001d3e:	4a57      	ldr	r2, [pc, #348]	; (8001e9c <ARGB_TIM_DMADelayPulseCplt_left+0x25c>)
 8001d40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 40] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001d44:	4b51      	ldr	r3, [pc, #324]	; (8001e8c <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	4a50      	ldr	r2, [pc, #320]	; (8001e90 <ARGB_TIM_DMADelayPulseCplt_left+0x250>)
 8001d50:	5cd3      	ldrb	r3, [r2, r3]
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	461a      	mov	r2, r3
 8001d56:	7afb      	ldrb	r3, [r7, #11]
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	dd04      	ble.n	8001d70 <ARGB_TIM_DMADelayPulseCplt_left+0x130>
 8001d66:	4b4b      	ldr	r3, [pc, #300]	; (8001e94 <ARGB_TIM_DMADelayPulseCplt_left+0x254>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	e003      	b.n	8001d78 <ARGB_TIM_DMADelayPulseCplt_left+0x138>
 8001d70:	4b49      	ldr	r3, [pc, #292]	; (8001e98 <ARGB_TIM_DMADelayPulseCplt_left+0x258>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	4619      	mov	r1, r3
 8001d78:	7afb      	ldrb	r3, [r7, #11]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	3328      	adds	r3, #40	; 0x28
 8001d7e:	4a47      	ldr	r2, [pc, #284]	; (8001e9c <ARGB_TIM_DMADelayPulseCplt_left+0x25c>)
 8001d80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 48] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001d84:	4b41      	ldr	r3, [pc, #260]	; (8001e8c <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	4a40      	ldr	r2, [pc, #256]	; (8001e90 <ARGB_TIM_DMADelayPulseCplt_left+0x250>)
 8001d90:	5cd3      	ldrb	r3, [r2, r3]
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	461a      	mov	r2, r3
 8001d96:	7afb      	ldrb	r3, [r7, #11]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	dd04      	ble.n	8001db0 <ARGB_TIM_DMADelayPulseCplt_left+0x170>
 8001da6:	4b3b      	ldr	r3, [pc, #236]	; (8001e94 <ARGB_TIM_DMADelayPulseCplt_left+0x254>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	4619      	mov	r1, r3
 8001dae:	e003      	b.n	8001db8 <ARGB_TIM_DMADelayPulseCplt_left+0x178>
 8001db0:	4b39      	ldr	r3, [pc, #228]	; (8001e98 <ARGB_TIM_DMADelayPulseCplt_left+0x258>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	4619      	mov	r1, r3
 8001db8:	7afb      	ldrb	r3, [r7, #11]
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	3330      	adds	r3, #48	; 0x30
 8001dbe:	4a37      	ldr	r2, [pc, #220]	; (8001e9c <ARGB_TIM_DMADelayPulseCplt_left+0x25c>)
 8001dc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 56] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001dc4:	4b31      	ldr	r3, [pc, #196]	; (8001e8c <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	3303      	adds	r3, #3
 8001dce:	4a30      	ldr	r2, [pc, #192]	; (8001e90 <ARGB_TIM_DMADelayPulseCplt_left+0x250>)
 8001dd0:	5cd3      	ldrb	r3, [r2, r3]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	7afb      	ldrb	r3, [r7, #11]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	dd04      	ble.n	8001df0 <ARGB_TIM_DMADelayPulseCplt_left+0x1b0>
 8001de6:	4b2b      	ldr	r3, [pc, #172]	; (8001e94 <ARGB_TIM_DMADelayPulseCplt_left+0x254>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	4619      	mov	r1, r3
 8001dee:	e003      	b.n	8001df8 <ARGB_TIM_DMADelayPulseCplt_left+0x1b8>
 8001df0:	4b29      	ldr	r3, [pc, #164]	; (8001e98 <ARGB_TIM_DMADelayPulseCplt_left+0x258>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	4619      	mov	r1, r3
 8001df8:	7afb      	ldrb	r3, [r7, #11]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	3338      	adds	r3, #56	; 0x38
 8001dfe:	4a27      	ldr	r2, [pc, #156]	; (8001e9c <ARGB_TIM_DMADelayPulseCplt_left+0x25c>)
 8001e00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001e04:	7afb      	ldrb	r3, [r7, #11]
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	3301      	adds	r3, #1
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	72fb      	strb	r3, [r7, #11]
 8001e0e:	7afb      	ldrb	r3, [r7, #11]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b07      	cmp	r3, #7
 8001e14:	f67f af77 	bls.w	8001d06 <ARGB_TIM_DMADelayPulseCplt_left+0xc6>
        	PWM_BUF_LEFT[i + 24] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_LEFT[i + 32] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_LEFT[i + 40] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        BUF_COUNTER_LEFT++;
 8001e18:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	3301      	adds	r3, #1
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001e24:	801a      	strh	r2, [r3, #0]
 8001e26:	e07b      	b.n	8001f20 <ARGB_TIM_DMADelayPulseCplt_left+0x2e0>
    } else if (BUF_COUNTER_LEFT < NUM_PIXELS + 2) { // if RET transfer
 8001e28:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	2b56      	cmp	r3, #86	; 0x56
 8001e30:	d80c      	bhi.n	8001e4c <ARGB_TIM_DMADelayPulseCplt_left+0x20c>
        memset((dma_siz *) &PWM_BUF_LEFT[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 8001e32:	2280      	movs	r2, #128	; 0x80
 8001e34:	2100      	movs	r1, #0
 8001e36:	481a      	ldr	r0, [pc, #104]	; (8001ea0 <ARGB_TIM_DMADelayPulseCplt_left+0x260>)
 8001e38:	f00f fb60 	bl	80114fc <memset>
        BUF_COUNTER_LEFT++;
 8001e3c:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	3301      	adds	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001e48:	801a      	strh	r2, [r3, #0]
 8001e4a:	e069      	b.n	8001f20 <ARGB_TIM_DMADelayPulseCplt_left+0x2e0>
    } else { // if END of transfer
    	BUF_COUNTER_LEFT = 0;
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	801a      	strh	r2, [r3, #0]
#if TIM_CH_LEFT == TIM_CHANNEL_2
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
#endif
#if TIM_CH_LEFT == TIM_CHANNEL_3
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e60:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e66:	4618      	mov	r0, r3
 8001e68:	f003 f888 	bl	8004f7c <HAL_DMA_Abort_IT>
#endif
#if TIM_CH_LEFT == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0c      	ldr	r2, [pc, #48]	; (8001ea4 <ARGB_TIM_DMADelayPulseCplt_left+0x264>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d004      	beq.n	8001e80 <ARGB_TIM_DMADelayPulseCplt_left+0x240>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ea8 <ARGB_TIM_DMADelayPulseCplt_left+0x268>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d115      	bne.n	8001eac <ARGB_TIM_DMADelayPulseCplt_left+0x26c>
 8001e80:	2301      	movs	r3, #1
 8001e82:	e014      	b.n	8001eae <ARGB_TIM_DMADelayPulseCplt_left+0x26e>
 8001e84:	20001770 	.word	0x20001770
 8001e88:	20001728 	.word	0x20001728
 8001e8c:	20000570 	.word	0x20000570
 8001e90:	200000c8 	.word	0x200000c8
 8001e94:	200000c4 	.word	0x200000c4
 8001e98:	200000c5 	.word	0x200000c5
 8001e9c:	20000370 	.word	0x20000370
 8001ea0:	200003f0 	.word	0x200003f0
 8001ea4:	40010000 	.word	0x40010000
 8001ea8:	40010400 	.word	0x40010400
 8001eac:	2300      	movs	r3, #0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d017      	beq.n	8001ee2 <ARGB_TIM_DMADelayPulseCplt_left+0x2a2>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6a1a      	ldr	r2, [r3, #32]
 8001eb8:	f241 1311 	movw	r3, #4369	; 0x1111
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10f      	bne.n	8001ee2 <ARGB_TIM_DMADelayPulseCplt_left+0x2a2>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6a1a      	ldr	r2, [r3, #32]
 8001ec8:	f240 4344 	movw	r3, #1092	; 0x444
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d107      	bne.n	8001ee2 <ARGB_TIM_DMADelayPulseCplt_left+0x2a2>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ee0:	645a      	str	r2, [r3, #68]	; 0x44
        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6a1a      	ldr	r2, [r3, #32]
 8001ee8:	f241 1311 	movw	r3, #4369	; 0x1111
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10f      	bne.n	8001f12 <ARGB_TIM_DMADelayPulseCplt_left+0x2d2>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6a1a      	ldr	r2, [r3, #32]
 8001ef8:	f240 4344 	movw	r3, #1092	; 0x444
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d107      	bne.n	8001f12 <ARGB_TIM_DMADelayPulseCplt_left+0x2d2>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0201 	bic.w	r2, r2, #1
 8001f10:	601a      	str	r2, [r3, #0]
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH_LEFT, HAL_TIM_CHANNEL_STATE_READY);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        ARGB_LOC_ST_LEFT = ARGB_READY;
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <ARGB_TIM_DMADelayPulseCplt_left+0x2f4>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	771a      	strb	r2, [r3, #28]
 8001f26:	e002      	b.n	8001f2e <ARGB_TIM_DMADelayPulseCplt_left+0x2ee>
    if (hdma != &DMA_HANDLE_LEFT || htim != &TIM_HANDLE) return;
 8001f28:	bf00      	nop
 8001f2a:	e000      	b.n	8001f2e <ARGB_TIM_DMADelayPulseCplt_left+0x2ee>
    if (BUF_COUNTER_LEFT == 0) return; // if no data to transmit - return
 8001f2c:	bf00      	nop
}
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000574 	.word	0x20000574

08001f38 <ARGB_TIM_DMADelayPulseCplt_right>:
// -----------------------------------------------------------------------
static void ARGB_TIM_DMADelayPulseCplt_right(DMA_HandleTypeDef *hdma) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f44:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE_RIGHT || htim != &TIM_HANDLE) return;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a8c      	ldr	r2, [pc, #560]	; (800217c <ARGB_TIM_DMADelayPulseCplt_right+0x244>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	f040 8168 	bne.w	8002220 <ARGB_TIM_DMADelayPulseCplt_right+0x2e8>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4a8b      	ldr	r2, [pc, #556]	; (8002180 <ARGB_TIM_DMADelayPulseCplt_right+0x248>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	f040 8163 	bne.w	8002220 <ARGB_TIM_DMADelayPulseCplt_right+0x2e8>
    if (BUF_COUNTER_RIGHT == 0) return; // if no data to transmit - return    // ,<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 8001f5a:	4b8a      	ldr	r3, [pc, #552]	; (8002184 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 815f 	beq.w	8002224 <ARGB_TIM_DMADelayPulseCplt_right+0x2ec>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d10b      	bne.n	8001f88 <ARGB_TIM_DMADelayPulseCplt_right+0x50>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2201      	movs	r2, #1
 8001f74:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d136      	bne.n	8001fec <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f86:	e031      	b.n	8001fec <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d10b      	bne.n	8001faa <ARGB_TIM_DMADelayPulseCplt_right+0x72>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2202      	movs	r2, #2
 8001f96:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d125      	bne.n	8001fec <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fa8:	e020      	b.n	8001fec <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d10b      	bne.n	8001fcc <ARGB_TIM_DMADelayPulseCplt_right+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2204      	movs	r2, #4
 8001fb8:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d114      	bne.n	8001fec <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fca:	e00f      	b.n	8001fec <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d10a      	bne.n	8001fec <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2208      	movs	r2, #8
 8001fda:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d103      	bne.n	8001fec <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER_RIGHT < NUM_PIXELS) {
 8001fec:	4b65      	ldr	r3, [pc, #404]	; (8002184 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	2b54      	cmp	r3, #84	; 0x54
 8001ff4:	f200 8094 	bhi.w	8002120 <ARGB_TIM_DMADelayPulseCplt_right+0x1e8>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	72fb      	strb	r3, [r7, #11]
 8001ffc:	e083      	b.n	8002106 <ARGB_TIM_DMADelayPulseCplt_right+0x1ce>
#ifdef SK6812
        	PWM_BUF_RIGHT[i + 32] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001ffe:	4b61      	ldr	r3, [pc, #388]	; (8002184 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	b29b      	uxth	r3, r3
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4a60      	ldr	r2, [pc, #384]	; (8002188 <ARGB_TIM_DMADelayPulseCplt_right+0x250>)
 8002008:	5cd3      	ldrb	r3, [r2, r3]
 800200a:	b2db      	uxtb	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	7afb      	ldrb	r3, [r7, #11]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201a:	2b00      	cmp	r3, #0
 800201c:	dd04      	ble.n	8002028 <ARGB_TIM_DMADelayPulseCplt_right+0xf0>
 800201e:	4b5b      	ldr	r3, [pc, #364]	; (800218c <ARGB_TIM_DMADelayPulseCplt_right+0x254>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	b2db      	uxtb	r3, r3
 8002024:	4619      	mov	r1, r3
 8002026:	e003      	b.n	8002030 <ARGB_TIM_DMADelayPulseCplt_right+0xf8>
 8002028:	4b59      	ldr	r3, [pc, #356]	; (8002190 <ARGB_TIM_DMADelayPulseCplt_right+0x258>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	b2db      	uxtb	r3, r3
 800202e:	4619      	mov	r1, r3
 8002030:	7afb      	ldrb	r3, [r7, #11]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	3320      	adds	r3, #32
 8002036:	4a57      	ldr	r2, [pc, #348]	; (8002194 <ARGB_TIM_DMADelayPulseCplt_right+0x25c>)
 8002038:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 40] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800203c:	4b51      	ldr	r3, [pc, #324]	; (8002184 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	b29b      	uxth	r3, r3
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	3301      	adds	r3, #1
 8002046:	4a50      	ldr	r2, [pc, #320]	; (8002188 <ARGB_TIM_DMADelayPulseCplt_right+0x250>)
 8002048:	5cd3      	ldrb	r3, [r2, r3]
 800204a:	b2db      	uxtb	r3, r3
 800204c:	461a      	mov	r2, r3
 800204e:	7afb      	ldrb	r3, [r7, #11]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205a:	2b00      	cmp	r3, #0
 800205c:	dd04      	ble.n	8002068 <ARGB_TIM_DMADelayPulseCplt_right+0x130>
 800205e:	4b4b      	ldr	r3, [pc, #300]	; (800218c <ARGB_TIM_DMADelayPulseCplt_right+0x254>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	4619      	mov	r1, r3
 8002066:	e003      	b.n	8002070 <ARGB_TIM_DMADelayPulseCplt_right+0x138>
 8002068:	4b49      	ldr	r3, [pc, #292]	; (8002190 <ARGB_TIM_DMADelayPulseCplt_right+0x258>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	4619      	mov	r1, r3
 8002070:	7afb      	ldrb	r3, [r7, #11]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	3328      	adds	r3, #40	; 0x28
 8002076:	4a47      	ldr	r2, [pc, #284]	; (8002194 <ARGB_TIM_DMADelayPulseCplt_right+0x25c>)
 8002078:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 48] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800207c:	4b41      	ldr	r3, [pc, #260]	; (8002184 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	b29b      	uxth	r3, r3
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	3302      	adds	r3, #2
 8002086:	4a40      	ldr	r2, [pc, #256]	; (8002188 <ARGB_TIM_DMADelayPulseCplt_right+0x250>)
 8002088:	5cd3      	ldrb	r3, [r2, r3]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	7afb      	ldrb	r3, [r7, #11]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209a:	2b00      	cmp	r3, #0
 800209c:	dd04      	ble.n	80020a8 <ARGB_TIM_DMADelayPulseCplt_right+0x170>
 800209e:	4b3b      	ldr	r3, [pc, #236]	; (800218c <ARGB_TIM_DMADelayPulseCplt_right+0x254>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	4619      	mov	r1, r3
 80020a6:	e003      	b.n	80020b0 <ARGB_TIM_DMADelayPulseCplt_right+0x178>
 80020a8:	4b39      	ldr	r3, [pc, #228]	; (8002190 <ARGB_TIM_DMADelayPulseCplt_right+0x258>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	4619      	mov	r1, r3
 80020b0:	7afb      	ldrb	r3, [r7, #11]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	3330      	adds	r3, #48	; 0x30
 80020b6:	4a37      	ldr	r2, [pc, #220]	; (8002194 <ARGB_TIM_DMADelayPulseCplt_right+0x25c>)
 80020b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 56] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80020bc:	4b31      	ldr	r3, [pc, #196]	; (8002184 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	3303      	adds	r3, #3
 80020c6:	4a30      	ldr	r2, [pc, #192]	; (8002188 <ARGB_TIM_DMADelayPulseCplt_right+0x250>)
 80020c8:	5cd3      	ldrb	r3, [r2, r3]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	461a      	mov	r2, r3
 80020ce:	7afb      	ldrb	r3, [r7, #11]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020da:	2b00      	cmp	r3, #0
 80020dc:	dd04      	ble.n	80020e8 <ARGB_TIM_DMADelayPulseCplt_right+0x1b0>
 80020de:	4b2b      	ldr	r3, [pc, #172]	; (800218c <ARGB_TIM_DMADelayPulseCplt_right+0x254>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	4619      	mov	r1, r3
 80020e6:	e003      	b.n	80020f0 <ARGB_TIM_DMADelayPulseCplt_right+0x1b8>
 80020e8:	4b29      	ldr	r3, [pc, #164]	; (8002190 <ARGB_TIM_DMADelayPulseCplt_right+0x258>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	4619      	mov	r1, r3
 80020f0:	7afb      	ldrb	r3, [r7, #11]
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	3338      	adds	r3, #56	; 0x38
 80020f6:	4a27      	ldr	r2, [pc, #156]	; (8002194 <ARGB_TIM_DMADelayPulseCplt_right+0x25c>)
 80020f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 80020fc:	7afb      	ldrb	r3, [r7, #11]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	3301      	adds	r3, #1
 8002102:	b2db      	uxtb	r3, r3
 8002104:	72fb      	strb	r3, [r7, #11]
 8002106:	7afb      	ldrb	r3, [r7, #11]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b07      	cmp	r3, #7
 800210c:	f67f af77 	bls.w	8001ffe <ARGB_TIM_DMADelayPulseCplt_right+0xc6>
        	PWM_BUF_RIGHT[i + 24] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_RIGHT[i + 32] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_RIGHT[i + 40] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        BUF_COUNTER_RIGHT++;
 8002110:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	b29b      	uxth	r3, r3
 8002116:	3301      	adds	r3, #1
 8002118:	b29a      	uxth	r2, r3
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 800211c:	801a      	strh	r2, [r3, #0]
 800211e:	e07b      	b.n	8002218 <ARGB_TIM_DMADelayPulseCplt_right+0x2e0>
    } else if (BUF_COUNTER_RIGHT < NUM_PIXELS + 2) { // if RET transfer
 8002120:	4b18      	ldr	r3, [pc, #96]	; (8002184 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	b29b      	uxth	r3, r3
 8002126:	2b56      	cmp	r3, #86	; 0x56
 8002128:	d80c      	bhi.n	8002144 <ARGB_TIM_DMADelayPulseCplt_right+0x20c>
        memset((dma_siz *) &PWM_BUF_RIGHT[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 800212a:	2280      	movs	r2, #128	; 0x80
 800212c:	2100      	movs	r1, #0
 800212e:	481a      	ldr	r0, [pc, #104]	; (8002198 <ARGB_TIM_DMADelayPulseCplt_right+0x260>)
 8002130:	f00f f9e4 	bl	80114fc <memset>
        BUF_COUNTER_RIGHT++;
 8002134:	4b13      	ldr	r3, [pc, #76]	; (8002184 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	b29b      	uxth	r3, r3
 800213a:	3301      	adds	r3, #1
 800213c:	b29a      	uxth	r2, r3
 800213e:	4b11      	ldr	r3, [pc, #68]	; (8002184 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8002140:	801a      	strh	r2, [r3, #0]
 8002142:	e069      	b.n	8002218 <ARGB_TIM_DMADelayPulseCplt_right+0x2e0>
    } else { // if END of transfer
    	BUF_COUNTER_RIGHT = 0;
 8002144:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8002146:	2200      	movs	r2, #0
 8002148:	801a      	strh	r2, [r3, #0]
#if TIM_CH_RIGHT == TIM_CHANNEL_3
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
#endif
#if TIM_CH_RIGHT == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002158:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4618      	mov	r0, r3
 8002160:	f002 ff0c 	bl	8004f7c <HAL_DMA_Abort_IT>
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0c      	ldr	r2, [pc, #48]	; (800219c <ARGB_TIM_DMADelayPulseCplt_right+0x264>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d004      	beq.n	8002178 <ARGB_TIM_DMADelayPulseCplt_right+0x240>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a0b      	ldr	r2, [pc, #44]	; (80021a0 <ARGB_TIM_DMADelayPulseCplt_right+0x268>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d115      	bne.n	80021a4 <ARGB_TIM_DMADelayPulseCplt_right+0x26c>
 8002178:	2301      	movs	r3, #1
 800217a:	e014      	b.n	80021a6 <ARGB_TIM_DMADelayPulseCplt_right+0x26e>
 800217c:	200017d0 	.word	0x200017d0
 8002180:	20001728 	.word	0x20001728
 8002184:	20000572 	.word	0x20000572
 8002188:	2000021c 	.word	0x2000021c
 800218c:	200000c4 	.word	0x200000c4
 8002190:	200000c5 	.word	0x200000c5
 8002194:	20000470 	.word	0x20000470
 8002198:	200004f0 	.word	0x200004f0
 800219c:	40010000 	.word	0x40010000
 80021a0:	40010400 	.word	0x40010400
 80021a4:	2300      	movs	r3, #0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d017      	beq.n	80021da <ARGB_TIM_DMADelayPulseCplt_right+0x2a2>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6a1a      	ldr	r2, [r3, #32]
 80021b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10f      	bne.n	80021da <ARGB_TIM_DMADelayPulseCplt_right+0x2a2>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6a1a      	ldr	r2, [r3, #32]
 80021c0:	f240 4344 	movw	r3, #1092	; 0x444
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d107      	bne.n	80021da <ARGB_TIM_DMADelayPulseCplt_right+0x2a2>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021d8:	645a      	str	r2, [r3, #68]	; 0x44
        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6a1a      	ldr	r2, [r3, #32]
 80021e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10f      	bne.n	800220a <ARGB_TIM_DMADelayPulseCplt_right+0x2d2>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6a1a      	ldr	r2, [r3, #32]
 80021f0:	f240 4344 	movw	r3, #1092	; 0x444
 80021f4:	4013      	ands	r3, r2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d107      	bne.n	800220a <ARGB_TIM_DMADelayPulseCplt_right+0x2d2>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0201 	bic.w	r2, r2, #1
 8002208:	601a      	str	r2, [r3, #0]
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH_RIGHT, HAL_TIM_CHANNEL_STATE_READY);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        ARGB_LOC_ST_RIGHT = ARGB_READY;
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <ARGB_TIM_DMADelayPulseCplt_right+0x2f4>)
 8002214:	2201      	movs	r2, #1
 8002216:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	771a      	strb	r2, [r3, #28]
 800221e:	e002      	b.n	8002226 <ARGB_TIM_DMADelayPulseCplt_right+0x2ee>
    if (hdma != &DMA_HANDLE_RIGHT || htim != &TIM_HANDLE) return;
 8002220:	bf00      	nop
 8002222:	e000      	b.n	8002226 <ARGB_TIM_DMADelayPulseCplt_right+0x2ee>
    if (BUF_COUNTER_RIGHT == 0) return; // if no data to transmit - return    // ,<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 8002224:	bf00      	nop
}
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20000575 	.word	0x20000575

08002230 <ARGB_TIM_DMADelayPulseHalfCplt_left>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt_left(DMA_HandleTypeDef *hdma) {
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223c:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE_LEFT || htim != &TIM_HANDLE) return;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a60      	ldr	r2, [pc, #384]	; (80023c4 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x194>)
 8002242:	4293      	cmp	r3, r2
 8002244:	f040 80b7 	bne.w	80023b6 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x186>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4a5f      	ldr	r2, [pc, #380]	; (80023c8 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x198>)
 800224c:	4293      	cmp	r3, r2
 800224e:	f040 80b2 	bne.w	80023b6 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x186>
    if (BUF_COUNTER_LEFT == 0) return; // if no data to transmit - return
 8002252:	4b5e      	ldr	r3, [pc, #376]	; (80023cc <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	b29b      	uxth	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 80ae 	beq.w	80023ba <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18a>
    // if data transfer
    if (BUF_COUNTER_LEFT < NUM_PIXELS) {
 800225e:	4b5b      	ldr	r3, [pc, #364]	; (80023cc <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	b29b      	uxth	r3, r3
 8002264:	2b54      	cmp	r3, #84	; 0x54
 8002266:	f200 8094 	bhi.w	8002392 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x162>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 800226a:	2300      	movs	r3, #0
 800226c:	72fb      	strb	r3, [r7, #11]
 800226e:	e083      	b.n	8002378 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x148>
#ifdef SK6812
        	PWM_BUF_LEFT[i] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002270:	4b56      	ldr	r3, [pc, #344]	; (80023cc <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	b29b      	uxth	r3, r3
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4a55      	ldr	r2, [pc, #340]	; (80023d0 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a0>)
 800227a:	5cd3      	ldrb	r3, [r2, r3]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	461a      	mov	r2, r3
 8002280:	7afb      	ldrb	r3, [r7, #11]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228c:	2b00      	cmp	r3, #0
 800228e:	dd04      	ble.n	800229a <ARGB_TIM_DMADelayPulseHalfCplt_left+0x6a>
 8002290:	4b50      	ldr	r3, [pc, #320]	; (80023d4 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a4>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	461a      	mov	r2, r3
 8002298:	e003      	b.n	80022a2 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x72>
 800229a:	4b4f      	ldr	r3, [pc, #316]	; (80023d8 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a8>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	461a      	mov	r2, r3
 80022a2:	7afb      	ldrb	r3, [r7, #11]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	4619      	mov	r1, r3
 80022a8:	4b4c      	ldr	r3, [pc, #304]	; (80023dc <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 80022aa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        	PWM_BUF_LEFT[i + 8] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80022ae:	4b47      	ldr	r3, [pc, #284]	; (80023cc <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	3301      	adds	r3, #1
 80022b8:	4a45      	ldr	r2, [pc, #276]	; (80023d0 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a0>)
 80022ba:	5cd3      	ldrb	r3, [r2, r3]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	7afb      	ldrb	r3, [r7, #11]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	dd04      	ble.n	80022da <ARGB_TIM_DMADelayPulseHalfCplt_left+0xaa>
 80022d0:	4b40      	ldr	r3, [pc, #256]	; (80023d4 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a4>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	4619      	mov	r1, r3
 80022d8:	e003      	b.n	80022e2 <ARGB_TIM_DMADelayPulseHalfCplt_left+0xb2>
 80022da:	4b3f      	ldr	r3, [pc, #252]	; (80023d8 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a8>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	4619      	mov	r1, r3
 80022e2:	7afb      	ldrb	r3, [r7, #11]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	3308      	adds	r3, #8
 80022e8:	4a3c      	ldr	r2, [pc, #240]	; (80023dc <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 80022ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 16] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80022ee:	4b37      	ldr	r3, [pc, #220]	; (80023cc <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	3302      	adds	r3, #2
 80022f8:	4a35      	ldr	r2, [pc, #212]	; (80023d0 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a0>)
 80022fa:	5cd3      	ldrb	r3, [r2, r3]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	7afb      	ldrb	r3, [r7, #11]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230c:	2b00      	cmp	r3, #0
 800230e:	dd04      	ble.n	800231a <ARGB_TIM_DMADelayPulseHalfCplt_left+0xea>
 8002310:	4b30      	ldr	r3, [pc, #192]	; (80023d4 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a4>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	4619      	mov	r1, r3
 8002318:	e003      	b.n	8002322 <ARGB_TIM_DMADelayPulseHalfCplt_left+0xf2>
 800231a:	4b2f      	ldr	r3, [pc, #188]	; (80023d8 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a8>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	b2db      	uxtb	r3, r3
 8002320:	4619      	mov	r1, r3
 8002322:	7afb      	ldrb	r3, [r7, #11]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	3310      	adds	r3, #16
 8002328:	4a2c      	ldr	r2, [pc, #176]	; (80023dc <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 800232a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 24] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
 800232e:	4b27      	ldr	r3, [pc, #156]	; (80023cc <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	b29b      	uxth	r3, r3
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	3303      	adds	r3, #3
 8002338:	4a25      	ldr	r2, [pc, #148]	; (80023d0 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a0>)
 800233a:	5cd3      	ldrb	r3, [r2, r3]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	7afb      	ldrb	r3, [r7, #11]
 8002342:	b2db      	uxtb	r3, r3
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800234c:	2b00      	cmp	r3, #0
 800234e:	dd04      	ble.n	800235a <ARGB_TIM_DMADelayPulseHalfCplt_left+0x12a>
 8002350:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a4>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	4619      	mov	r1, r3
 8002358:	e003      	b.n	8002362 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x132>
 800235a:	4b1f      	ldr	r3, [pc, #124]	; (80023d8 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a8>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	4619      	mov	r1, r3
 8002362:	7afb      	ldrb	r3, [r7, #11]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	3318      	adds	r3, #24
 8002368:	4a1c      	ldr	r2, [pc, #112]	; (80023dc <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 800236a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 800236e:	7afb      	ldrb	r3, [r7, #11]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	3301      	adds	r3, #1
 8002374:	b2db      	uxtb	r3, r3
 8002376:	72fb      	strb	r3, [r7, #11]
 8002378:	7afb      	ldrb	r3, [r7, #11]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b07      	cmp	r3, #7
 800237e:	f67f af77 	bls.w	8002270 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x40>
        	PWM_BUF_LEFT[i] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_LEFT[i + 8] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_LEFT[i + 16] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        BUF_COUNTER_LEFT++;
 8002382:	4b12      	ldr	r3, [pc, #72]	; (80023cc <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	b29b      	uxth	r3, r3
 8002388:	3301      	adds	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 800238e:	801a      	strh	r2, [r3, #0]
 8002390:	e014      	b.n	80023bc <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18c>
    } else if (BUF_COUNTER_LEFT < NUM_PIXELS + 2) { // if RET transfer
 8002392:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	b29b      	uxth	r3, r3
 8002398:	2b56      	cmp	r3, #86	; 0x56
 800239a:	d80f      	bhi.n	80023bc <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18c>
        memset((dma_siz *) &PWM_BUF_LEFT[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 800239c:	2280      	movs	r2, #128	; 0x80
 800239e:	2100      	movs	r1, #0
 80023a0:	480e      	ldr	r0, [pc, #56]	; (80023dc <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 80023a2:	f00f f8ab 	bl	80114fc <memset>
        BUF_COUNTER_LEFT++;
 80023a6:	4b09      	ldr	r3, [pc, #36]	; (80023cc <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3301      	adds	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80023b2:	801a      	strh	r2, [r3, #0]
 80023b4:	e002      	b.n	80023bc <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18c>
    if (hdma != &DMA_HANDLE_LEFT || htim != &TIM_HANDLE) return;
 80023b6:	bf00      	nop
 80023b8:	e000      	b.n	80023bc <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18c>
    if (BUF_COUNTER_LEFT == 0) return; // if no data to transmit - return
 80023ba:	bf00      	nop
    }
}
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20001770 	.word	0x20001770
 80023c8:	20001728 	.word	0x20001728
 80023cc:	20000570 	.word	0x20000570
 80023d0:	200000c8 	.word	0x200000c8
 80023d4:	200000c4 	.word	0x200000c4
 80023d8:	200000c5 	.word	0x200000c5
 80023dc:	20000370 	.word	0x20000370

080023e0 <ARGB_TIM_DMADelayPulseHalfCplt_right>:
// -----------------------------------------------------------------------------------
static void ARGB_TIM_DMADelayPulseHalfCplt_right(DMA_HandleTypeDef *hdma) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ec:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE_RIGHT || htim != &TIM_HANDLE) return;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a60      	ldr	r2, [pc, #384]	; (8002574 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x194>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	f040 80b7 	bne.w	8002566 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x186>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4a5f      	ldr	r2, [pc, #380]	; (8002578 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x198>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	f040 80b2 	bne.w	8002566 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x186>
    if (BUF_COUNTER_RIGHT == 0) return; // if no data to transmit - return
 8002402:	4b5e      	ldr	r3, [pc, #376]	; (800257c <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	b29b      	uxth	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 80ae 	beq.w	800256a <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18a>
    // if data transfer
    if (BUF_COUNTER_RIGHT < NUM_PIXELS) {
 800240e:	4b5b      	ldr	r3, [pc, #364]	; (800257c <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	b29b      	uxth	r3, r3
 8002414:	2b54      	cmp	r3, #84	; 0x54
 8002416:	f200 8094 	bhi.w	8002542 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x162>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 800241a:	2300      	movs	r3, #0
 800241c:	72fb      	strb	r3, [r7, #11]
 800241e:	e083      	b.n	8002528 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x148>
#ifdef SK6812
        	PWM_BUF_RIGHT[i] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002420:	4b56      	ldr	r3, [pc, #344]	; (800257c <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	b29b      	uxth	r3, r3
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4a55      	ldr	r2, [pc, #340]	; (8002580 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a0>)
 800242a:	5cd3      	ldrb	r3, [r2, r3]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	461a      	mov	r2, r3
 8002430:	7afb      	ldrb	r3, [r7, #11]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243c:	2b00      	cmp	r3, #0
 800243e:	dd04      	ble.n	800244a <ARGB_TIM_DMADelayPulseHalfCplt_right+0x6a>
 8002440:	4b50      	ldr	r3, [pc, #320]	; (8002584 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a4>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	461a      	mov	r2, r3
 8002448:	e003      	b.n	8002452 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x72>
 800244a:	4b4f      	ldr	r3, [pc, #316]	; (8002588 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a8>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	7afb      	ldrb	r3, [r7, #11]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	4619      	mov	r1, r3
 8002458:	4b4c      	ldr	r3, [pc, #304]	; (800258c <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 800245a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        	PWM_BUF_RIGHT[i + 8] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800245e:	4b47      	ldr	r3, [pc, #284]	; (800257c <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	b29b      	uxth	r3, r3
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	3301      	adds	r3, #1
 8002468:	4a45      	ldr	r2, [pc, #276]	; (8002580 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a0>)
 800246a:	5cd3      	ldrb	r3, [r2, r3]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	461a      	mov	r2, r3
 8002470:	7afb      	ldrb	r3, [r7, #11]
 8002472:	b2db      	uxtb	r3, r3
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247c:	2b00      	cmp	r3, #0
 800247e:	dd04      	ble.n	800248a <ARGB_TIM_DMADelayPulseHalfCplt_right+0xaa>
 8002480:	4b40      	ldr	r3, [pc, #256]	; (8002584 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a4>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	4619      	mov	r1, r3
 8002488:	e003      	b.n	8002492 <ARGB_TIM_DMADelayPulseHalfCplt_right+0xb2>
 800248a:	4b3f      	ldr	r3, [pc, #252]	; (8002588 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a8>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	4619      	mov	r1, r3
 8002492:	7afb      	ldrb	r3, [r7, #11]
 8002494:	b2db      	uxtb	r3, r3
 8002496:	3308      	adds	r3, #8
 8002498:	4a3c      	ldr	r2, [pc, #240]	; (800258c <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 800249a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 16] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800249e:	4b37      	ldr	r3, [pc, #220]	; (800257c <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	3302      	adds	r3, #2
 80024a8:	4a35      	ldr	r2, [pc, #212]	; (8002580 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a0>)
 80024aa:	5cd3      	ldrb	r3, [r2, r3]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	7afb      	ldrb	r3, [r7, #11]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024bc:	2b00      	cmp	r3, #0
 80024be:	dd04      	ble.n	80024ca <ARGB_TIM_DMADelayPulseHalfCplt_right+0xea>
 80024c0:	4b30      	ldr	r3, [pc, #192]	; (8002584 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a4>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	4619      	mov	r1, r3
 80024c8:	e003      	b.n	80024d2 <ARGB_TIM_DMADelayPulseHalfCplt_right+0xf2>
 80024ca:	4b2f      	ldr	r3, [pc, #188]	; (8002588 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a8>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	4619      	mov	r1, r3
 80024d2:	7afb      	ldrb	r3, [r7, #11]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	3310      	adds	r3, #16
 80024d8:	4a2c      	ldr	r2, [pc, #176]	; (800258c <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 80024da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 24] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
 80024de:	4b27      	ldr	r3, [pc, #156]	; (800257c <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	3303      	adds	r3, #3
 80024e8:	4a25      	ldr	r2, [pc, #148]	; (8002580 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a0>)
 80024ea:	5cd3      	ldrb	r3, [r2, r3]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	7afb      	ldrb	r3, [r7, #11]
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	dd04      	ble.n	800250a <ARGB_TIM_DMADelayPulseHalfCplt_right+0x12a>
 8002500:	4b20      	ldr	r3, [pc, #128]	; (8002584 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a4>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	4619      	mov	r1, r3
 8002508:	e003      	b.n	8002512 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x132>
 800250a:	4b1f      	ldr	r3, [pc, #124]	; (8002588 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a8>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	b2db      	uxtb	r3, r3
 8002510:	4619      	mov	r1, r3
 8002512:	7afb      	ldrb	r3, [r7, #11]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	3318      	adds	r3, #24
 8002518:	4a1c      	ldr	r2, [pc, #112]	; (800258c <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 800251a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 800251e:	7afb      	ldrb	r3, [r7, #11]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	3301      	adds	r3, #1
 8002524:	b2db      	uxtb	r3, r3
 8002526:	72fb      	strb	r3, [r7, #11]
 8002528:	7afb      	ldrb	r3, [r7, #11]
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b07      	cmp	r3, #7
 800252e:	f67f af77 	bls.w	8002420 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x40>
        	PWM_BUF_RIGHT[i] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_RIGHT[i + 8] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_RIGHT[i + 16] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        BUF_COUNTER_RIGHT++;
 8002532:	4b12      	ldr	r3, [pc, #72]	; (800257c <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	b29b      	uxth	r3, r3
 8002538:	3301      	adds	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 800253e:	801a      	strh	r2, [r3, #0]
 8002540:	e014      	b.n	800256c <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18c>
    } else if (BUF_COUNTER_RIGHT < NUM_PIXELS + 2) { // if RET transfer
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	b29b      	uxth	r3, r3
 8002548:	2b56      	cmp	r3, #86	; 0x56
 800254a:	d80f      	bhi.n	800256c <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18c>
        memset((dma_siz *) &PWM_BUF_RIGHT[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 800254c:	2280      	movs	r2, #128	; 0x80
 800254e:	2100      	movs	r1, #0
 8002550:	480e      	ldr	r0, [pc, #56]	; (800258c <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 8002552:	f00e ffd3 	bl	80114fc <memset>
        BUF_COUNTER_RIGHT++;
 8002556:	4b09      	ldr	r3, [pc, #36]	; (800257c <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	b29b      	uxth	r3, r3
 800255c:	3301      	adds	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002562:	801a      	strh	r2, [r3, #0]
 8002564:	e002      	b.n	800256c <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18c>
    if (hdma != &DMA_HANDLE_RIGHT || htim != &TIM_HANDLE) return;
 8002566:	bf00      	nop
 8002568:	e000      	b.n	800256c <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18c>
    if (BUF_COUNTER_RIGHT == 0) return; // if no data to transmit - return
 800256a:	bf00      	nop
    }
}
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	200017d0 	.word	0x200017d0
 8002578:	20001728 	.word	0x20001728
 800257c:	20000572 	.word	0x20000572
 8002580:	2000021c 	.word	0x2000021c
 8002584:	200000c4 	.word	0x200000c4
 8002588:	200000c5 	.word	0x200000c5
 800258c:	20000470 	.word	0x20000470

08002590 <turn_off_left_stript>:

#include "light/led_stript/ARGB.h"

// -----------------------------------------------------------------------------------------------------
void turn_off_left_stript(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
	ARGB_Clear_left(); 			// Clear stirp
 8002594:	f7fe fdc8 	bl	8001128 <ARGB_Clear_left>
	while (ARGB_Show_left() != ARGB_OK); // Update - Option 1
 8002598:	bf00      	nop
 800259a:	f7fe ffa5 	bl	80014e8 <ARGB_Show_left>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d1fa      	bne.n	800259a <turn_off_left_stript+0xa>
}
 80025a4:	bf00      	nop
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}

080025aa <turn_off_right_stript>:
// -----------------------------------------------------------------------------------------------------
void turn_off_right_stript(void)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	af00      	add	r7, sp, #0
	ARGB_Clear_right();
 80025ae:	f7fe fdc7 	bl	8001140 <ARGB_Clear_right>
	while (ARGB_Show_right() != ARGB_OK); // Update - Option 1
 80025b2:	bf00      	nop
 80025b4:	f7ff f964 	bl	8001880 <ARGB_Show_right>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d1fa      	bne.n	80025b4 <turn_off_right_stript+0xa>
}
 80025be:	bf00      	nop
 80025c0:	bf00      	nop
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <turn_off_left_and_right_dtript>:
// -----------------------------------------------------------------------------------------------------
void turn_off_left_and_right_dtript(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
	turn_off_left_stript();
 80025c8:	f7ff ffe2 	bl	8002590 <turn_off_left_stript>
	turn_off_right_stript();
 80025cc:	f7ff ffed 	bl	80025aa <turn_off_right_stript>
}
 80025d0:	bf00      	nop
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <turn_on_left_stript>:
// -----------------------------------------------------------------------------------------------------
void turn_on_left_stript(u8_t r, u8_t g, u8_t b)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
 80025de:	460b      	mov	r3, r1
 80025e0:	71bb      	strb	r3, [r7, #6]
 80025e2:	4613      	mov	r3, r2
 80025e4:	717b      	strb	r3, [r7, #5]
	uint8_t i = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	73fb      	strb	r3, [r7, #15]
	for(i = 0; i<= 83; i++)
 80025ea:	2300      	movs	r3, #0
 80025ec:	73fb      	strb	r3, [r7, #15]
 80025ee:	e009      	b.n	8002604 <turn_on_left_stript+0x30>
	{
		ARGB_SetRGB_left(i, r, g, b);
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	b298      	uxth	r0, r3
 80025f4:	797b      	ldrb	r3, [r7, #5]
 80025f6:	79ba      	ldrb	r2, [r7, #6]
 80025f8:	79f9      	ldrb	r1, [r7, #7]
 80025fa:	f7fe fdbd 	bl	8001178 <ARGB_SetRGB_left>
	for(i = 0; i<= 83; i++)
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	3301      	adds	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	2b53      	cmp	r3, #83	; 0x53
 8002608:	d9f2      	bls.n	80025f0 <turn_on_left_stript+0x1c>
	}
	while (!ARGB_Show_left());  // Update
 800260a:	bf00      	nop
 800260c:	f7fe ff6c 	bl	80014e8 <ARGB_Show_left>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0fa      	beq.n	800260c <turn_on_left_stript+0x38>
}
 8002616:	bf00      	nop
 8002618:	bf00      	nop
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <turn_on_right_stript>:
// -----------------------------------------------------------------------------------------------------
void turn_on_right_stript(u8_t r, u8_t g, u8_t b)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
 800262a:	460b      	mov	r3, r1
 800262c:	71bb      	strb	r3, [r7, #6]
 800262e:	4613      	mov	r3, r2
 8002630:	717b      	strb	r3, [r7, #5]
	uint8_t i = 0;
 8002632:	2300      	movs	r3, #0
 8002634:	73fb      	strb	r3, [r7, #15]
	for(i = 0; i<= 83; i++)
 8002636:	2300      	movs	r3, #0
 8002638:	73fb      	strb	r3, [r7, #15]
 800263a:	e009      	b.n	8002650 <turn_on_right_stript+0x30>
	{
		ARGB_SetRGB_right(i, r, g, b);
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	b298      	uxth	r0, r3
 8002640:	797b      	ldrb	r3, [r7, #5]
 8002642:	79ba      	ldrb	r2, [r7, #6]
 8002644:	79f9      	ldrb	r1, [r7, #7]
 8002646:	f7fe fe11 	bl	800126c <ARGB_SetRGB_right>
	for(i = 0; i<= 83; i++)
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	3301      	adds	r3, #1
 800264e:	73fb      	strb	r3, [r7, #15]
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	2b53      	cmp	r3, #83	; 0x53
 8002654:	d9f2      	bls.n	800263c <turn_on_right_stript+0x1c>
	}
	while (!ARGB_Show_right());  // Update
 8002656:	bf00      	nop
 8002658:	f7ff f912 	bl	8001880 <ARGB_Show_right>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0fa      	beq.n	8002658 <turn_on_right_stript+0x38>
}
 8002662:	bf00      	nop
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <turn_all_leds_from_centr>:
// -----------------------------------------------------------------------------------------------------
void turn_all_leds_from_centr(u8_t delay, u8_t r, u8_t g, u8_t b)
{
 800266c:	b590      	push	{r4, r7, lr}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	4604      	mov	r4, r0
 8002674:	4608      	mov	r0, r1
 8002676:	4611      	mov	r1, r2
 8002678:	461a      	mov	r2, r3
 800267a:	4623      	mov	r3, r4
 800267c:	71fb      	strb	r3, [r7, #7]
 800267e:	4603      	mov	r3, r0
 8002680:	71bb      	strb	r3, [r7, #6]
 8002682:	460b      	mov	r3, r1
 8002684:	717b      	strb	r3, [r7, #5]
 8002686:	4613      	mov	r3, r2
 8002688:	713b      	strb	r3, [r7, #4]
	uint8_t i =0;
 800268a:	2300      	movs	r3, #0
 800268c:	73fb      	strb	r3, [r7, #15]
	turn_off_left_stript();
 800268e:	f7ff ff7f 	bl	8002590 <turn_off_left_stript>

	for( i = 84; i >= 43; i--)
 8002692:	2354      	movs	r3, #84	; 0x54
 8002694:	73fb      	strb	r3, [r7, #15]
 8002696:	e034      	b.n	8002702 <turn_all_leds_from_centr+0x96>
	{
		ARGB_SetRGB_left(i, r, g, b);			// High side
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	b298      	uxth	r0, r3
 800269c:	793b      	ldrb	r3, [r7, #4]
 800269e:	797a      	ldrb	r2, [r7, #5]
 80026a0:	79b9      	ldrb	r1, [r7, #6]
 80026a2:	f7fe fd69 	bl	8001178 <ARGB_SetRGB_left>
		ARGB_SetRGB_right(i, r, g, b);
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
 80026a8:	b298      	uxth	r0, r3
 80026aa:	793b      	ldrb	r3, [r7, #4]
 80026ac:	797a      	ldrb	r2, [r7, #5]
 80026ae:	79b9      	ldrb	r1, [r7, #6]
 80026b0:	f7fe fddc 	bl	800126c <ARGB_SetRGB_right>

		ARGB_SetRGB_left((85 - i), r, g, b);
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
 80026bc:	b298      	uxth	r0, r3
 80026be:	793b      	ldrb	r3, [r7, #4]
 80026c0:	797a      	ldrb	r2, [r7, #5]
 80026c2:	79b9      	ldrb	r1, [r7, #6]
 80026c4:	f7fe fd58 	bl	8001178 <ARGB_SetRGB_left>
		ARGB_SetRGB_right((85 - i), r, g, b);
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
 80026d0:	b298      	uxth	r0, r3
 80026d2:	793b      	ldrb	r3, [r7, #4]
 80026d4:	797a      	ldrb	r2, [r7, #5]
 80026d6:	79b9      	ldrb	r1, [r7, #6]
 80026d8:	f7fe fdc8 	bl	800126c <ARGB_SetRGB_right>

		while (!ARGB_Show_left());  // Update
 80026dc:	bf00      	nop
 80026de:	f7fe ff03 	bl	80014e8 <ARGB_Show_left>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0fa      	beq.n	80026de <turn_all_leds_from_centr+0x72>
		while (!ARGB_Show_right());  // Update
 80026e8:	bf00      	nop
 80026ea:	f7ff f8c9 	bl	8001880 <ARGB_Show_right>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0fa      	beq.n	80026ea <turn_all_leds_from_centr+0x7e>
		HAL_Delay(delay);
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f002 f994 	bl	8004a24 <HAL_Delay>
	for( i = 84; i >= 43; i--)
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
 80026fe:	3b01      	subs	r3, #1
 8002700:	73fb      	strb	r3, [r7, #15]
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	2b2a      	cmp	r3, #42	; 0x2a
 8002706:	d8c7      	bhi.n	8002698 <turn_all_leds_from_centr+0x2c>
	}
}
 8002708:	bf00      	nop
 800270a:	bf00      	nop
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	bd90      	pop	{r4, r7, pc}

08002712 <set_left_one_rgbw_led>:
// -----------------------------------------------------------------------------------------------------
void set_left_one_rgbw_led(uint8_t position, u8_t r, u8_t g, u8_t b, u8_t w)
{
 8002712:	b590      	push	{r4, r7, lr}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	4604      	mov	r4, r0
 800271a:	4608      	mov	r0, r1
 800271c:	4611      	mov	r1, r2
 800271e:	461a      	mov	r2, r3
 8002720:	4623      	mov	r3, r4
 8002722:	71fb      	strb	r3, [r7, #7]
 8002724:	4603      	mov	r3, r0
 8002726:	71bb      	strb	r3, [r7, #6]
 8002728:	460b      	mov	r3, r1
 800272a:	717b      	strb	r3, [r7, #5]
 800272c:	4613      	mov	r3, r2
 800272e:	713b      	strb	r3, [r7, #4]
	ARGB_SetRGB_left(position, r, g, b);
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	b298      	uxth	r0, r3
 8002734:	793b      	ldrb	r3, [r7, #4]
 8002736:	797a      	ldrb	r2, [r7, #5]
 8002738:	79b9      	ldrb	r1, [r7, #6]
 800273a:	f7fe fd1d 	bl	8001178 <ARGB_SetRGB_left>
	ARGB_SetWhite_left(position, w);
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	b29b      	uxth	r3, r3
 8002742:	7e3a      	ldrb	r2, [r7, #24]
 8002744:	4611      	mov	r1, r2
 8002746:	4618      	mov	r0, r3
 8002748:	f7fe fe0a 	bl	8001360 <ARGB_SetWhite_left>
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	bd90      	pop	{r4, r7, pc}

08002754 <set_right_one_rgbw_led>:
// -----------------------------------------------------------------------------------------------------
void set_right_one_rgbw_led(uint8_t position, u8_t r, u8_t g, u8_t b, u8_t w)
{
 8002754:	b590      	push	{r4, r7, lr}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	4604      	mov	r4, r0
 800275c:	4608      	mov	r0, r1
 800275e:	4611      	mov	r1, r2
 8002760:	461a      	mov	r2, r3
 8002762:	4623      	mov	r3, r4
 8002764:	71fb      	strb	r3, [r7, #7]
 8002766:	4603      	mov	r3, r0
 8002768:	71bb      	strb	r3, [r7, #6]
 800276a:	460b      	mov	r3, r1
 800276c:	717b      	strb	r3, [r7, #5]
 800276e:	4613      	mov	r3, r2
 8002770:	713b      	strb	r3, [r7, #4]
	ARGB_SetRGB_right(position, r, g, b);
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	b298      	uxth	r0, r3
 8002776:	793b      	ldrb	r3, [r7, #4]
 8002778:	797a      	ldrb	r2, [r7, #5]
 800277a:	79b9      	ldrb	r1, [r7, #6]
 800277c:	f7fe fd76 	bl	800126c <ARGB_SetRGB_right>
	ARGB_SetWhite_right(position, w);
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	b29b      	uxth	r3, r3
 8002784:	7e3a      	ldrb	r2, [r7, #24]
 8002786:	4611      	mov	r1, r2
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe fe0d 	bl	80013a8 <ARGB_SetWhite_right>
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	bd90      	pop	{r4, r7, pc}
	...

08002798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002798:	b5b0      	push	{r4, r5, r7, lr}
 800279a:	b090      	sub	sp, #64	; 0x40
 800279c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800279e:	f002 f8cf 	bl	8004940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027a2:	f000 f9b3 	bl	8002b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027a6:	f000 fd19 	bl	80031dc <MX_GPIO_Init>
  MX_DMA_Init();
 80027aa:	f000 fcef 	bl	800318c <MX_DMA_Init>
  MX_USB_HOST_Init();
 80027ae:	f00e fb63 	bl	8010e78 <MX_USB_HOST_Init>
  MX_USART3_UART_Init();
 80027b2:	f000 fcc1 	bl	8003138 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80027b6:	f000 fa13 	bl	8002be0 <MX_SPI1_Init>
  MX_TIM7_Init();
 80027ba:	f000 fbf7 	bl	8002fac <MX_TIM7_Init>
  MX_FATFS_Init();
 80027be:	f008 fd2d 	bl	800b21c <MX_FATFS_Init>
  MX_TIM2_Init();
 80027c2:	f000 fa43 	bl	8002c4c <MX_TIM2_Init>
  MX_TIM3_Init();
 80027c6:	f000 fad7 	bl	8002d78 <MX_TIM3_Init>
  MX_TIM4_Init();
 80027ca:	f000 fb6d 	bl	8002ea8 <MX_TIM4_Init>
  MX_TIM8_Init();
 80027ce:	f000 fc23 	bl	8003018 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */


  // Test run LEDs //////////////////////////////////////////////////////////////////
  ARGB_SetBrightness(255);  // Set global brightness to 40%
 80027d2:	20ff      	movs	r0, #255	; 0xff
 80027d4:	f7fe fcc0 	bl	8001158 <ARGB_SetBrightness>
  ARGB_Init();  				// Initialization
 80027d8:	f7fe fc22 	bl	8001020 <ARGB_Init>

  turn_off_left_and_right_dtript();
 80027dc:	f7ff fef2 	bl	80025c4 <turn_off_left_and_right_dtript>

  HAL_Delay(100);
 80027e0:	2064      	movs	r0, #100	; 0x64
 80027e2:	f002 f91f 	bl	8004a24 <HAL_Delay>
  for(int h = 0; h < 8; h++)
 80027e6:	2300      	movs	r3, #0
 80027e8:	637b      	str	r3, [r7, #52]	; 0x34
 80027ea:	e014      	b.n	8002816 <main+0x7e>
  {
	  turn_on_left_stript(0, 0, 100);
 80027ec:	2264      	movs	r2, #100	; 0x64
 80027ee:	2100      	movs	r1, #0
 80027f0:	2000      	movs	r0, #0
 80027f2:	f7ff feef 	bl	80025d4 <turn_on_left_stript>
	  turn_on_right_stript(100, 0, 0);
 80027f6:	2200      	movs	r2, #0
 80027f8:	2100      	movs	r1, #0
 80027fa:	2064      	movs	r0, #100	; 0x64
 80027fc:	f7ff ff10 	bl	8002620 <turn_on_right_stript>

	  HAL_Delay(20);
 8002800:	2014      	movs	r0, #20
 8002802:	f002 f90f 	bl	8004a24 <HAL_Delay>

	  turn_off_left_and_right_dtript();
 8002806:	f7ff fedd 	bl	80025c4 <turn_off_left_and_right_dtript>
	  HAL_Delay(20);
 800280a:	2014      	movs	r0, #20
 800280c:	f002 f90a 	bl	8004a24 <HAL_Delay>
  for(int h = 0; h < 8; h++)
 8002810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002812:	3301      	adds	r3, #1
 8002814:	637b      	str	r3, [r7, #52]	; 0x34
 8002816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002818:	2b07      	cmp	r3, #7
 800281a:	dde7      	ble.n	80027ec <main+0x54>
  }
  HAL_Delay(500);
 800281c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002820:	f002 f900 	bl	8004a24 <HAL_Delay>

  turn_all_leds_from_centr(10, 100, 40, 0);
 8002824:	2300      	movs	r3, #0
 8002826:	2228      	movs	r2, #40	; 0x28
 8002828:	2164      	movs	r1, #100	; 0x64
 800282a:	200a      	movs	r0, #10
 800282c:	f7ff ff1e 	bl	800266c <turn_all_leds_from_centr>

  HAL_Delay(500);
 8002830:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002834:	f002 f8f6 	bl	8004a24 <HAL_Delay>
  turn_off_left_and_right_dtript();
 8002838:	f7ff fec4 	bl	80025c4 <turn_off_left_and_right_dtript>



  set_left_one_rgbw_led(0, 0, 0, 100, 0);
 800283c:	2300      	movs	r3, #0
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	2364      	movs	r3, #100	; 0x64
 8002842:	2200      	movs	r2, #0
 8002844:	2100      	movs	r1, #0
 8002846:	2000      	movs	r0, #0
 8002848:	f7ff ff63 	bl	8002712 <set_left_one_rgbw_led>
  set_left_one_rgbw_led(42, 0, 0, 100, 0);
 800284c:	2300      	movs	r3, #0
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	2364      	movs	r3, #100	; 0x64
 8002852:	2200      	movs	r2, #0
 8002854:	2100      	movs	r1, #0
 8002856:	202a      	movs	r0, #42	; 0x2a
 8002858:	f7ff ff5b 	bl	8002712 <set_left_one_rgbw_led>
  set_left_one_rgbw_led(43, 0, 0, 100, 0);
 800285c:	2300      	movs	r3, #0
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	2364      	movs	r3, #100	; 0x64
 8002862:	2200      	movs	r2, #0
 8002864:	2100      	movs	r1, #0
 8002866:	202b      	movs	r0, #43	; 0x2b
 8002868:	f7ff ff53 	bl	8002712 <set_left_one_rgbw_led>
  set_left_one_rgbw_led(84, 0, 0, 100, 0);
 800286c:	2300      	movs	r3, #0
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	2364      	movs	r3, #100	; 0x64
 8002872:	2200      	movs	r2, #0
 8002874:	2100      	movs	r1, #0
 8002876:	2054      	movs	r0, #84	; 0x54
 8002878:	f7ff ff4b 	bl	8002712 <set_left_one_rgbw_led>
  while (!ARGB_Show_left());  				// Update
 800287c:	bf00      	nop
 800287e:	f7fe fe33 	bl	80014e8 <ARGB_Show_left>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0fa      	beq.n	800287e <main+0xe6>


  set_right_one_rgbw_led(0, 0, 0, 100, 0);
 8002888:	2300      	movs	r3, #0
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	2364      	movs	r3, #100	; 0x64
 800288e:	2200      	movs	r2, #0
 8002890:	2100      	movs	r1, #0
 8002892:	2000      	movs	r0, #0
 8002894:	f7ff ff5e 	bl	8002754 <set_right_one_rgbw_led>
  set_right_one_rgbw_led(42, 0, 0, 100, 0);
 8002898:	2300      	movs	r3, #0
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	2364      	movs	r3, #100	; 0x64
 800289e:	2200      	movs	r2, #0
 80028a0:	2100      	movs	r1, #0
 80028a2:	202a      	movs	r0, #42	; 0x2a
 80028a4:	f7ff ff56 	bl	8002754 <set_right_one_rgbw_led>
  set_right_one_rgbw_led(43, 0, 0, 100, 0);
 80028a8:	2300      	movs	r3, #0
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	2364      	movs	r3, #100	; 0x64
 80028ae:	2200      	movs	r2, #0
 80028b0:	2100      	movs	r1, #0
 80028b2:	202b      	movs	r0, #43	; 0x2b
 80028b4:	f7ff ff4e 	bl	8002754 <set_right_one_rgbw_led>
  set_right_one_rgbw_led(84, 0, 0, 100, 0);
 80028b8:	2300      	movs	r3, #0
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	2364      	movs	r3, #100	; 0x64
 80028be:	2200      	movs	r2, #0
 80028c0:	2100      	movs	r1, #0
 80028c2:	2054      	movs	r0, #84	; 0x54
 80028c4:	f7ff ff46 	bl	8002754 <set_right_one_rgbw_led>
  while (!ARGB_Show_right());  				// Update
 80028c8:	bf00      	nop
 80028ca:	f7fe ffd9 	bl	8001880 <ARGB_Show_right>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0fa      	beq.n	80028ca <main+0x132>

  HAL_Delay(500);
 80028d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028d8:	f002 f8a4 	bl	8004a24 <HAL_Delay>
  turn_off_left_and_right_dtript();
 80028dc:	f7ff fe72 	bl	80025c4 <turn_off_left_and_right_dtript>


  test_from_midle_to_corner();
 80028e0:	f7fe fac2 	bl	8000e68 <test_from_midle_to_corner>
  stop_light_all_turn_off();
 80028e4:	f7fe fab8 	bl	8000e58 <stop_light_all_turn_off>

  ///////////////////////////////////////////////////////////////////////////////////

  // Send message ower UART, and make receive
  char uart_hellp_msg[30]= "Press the command:  \n\r";
 80028e8:	4b78      	ldr	r3, [pc, #480]	; (8002acc <main+0x334>)
 80028ea:	f107 040c 	add.w	r4, r7, #12
 80028ee:	461d      	mov	r5, r3
 80028f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80028f8:	6020      	str	r0, [r4, #0]
 80028fa:	3404      	adds	r4, #4
 80028fc:	8021      	strh	r1, [r4, #0]
 80028fe:	3402      	adds	r4, #2
 8002900:	0c0b      	lsrs	r3, r1, #16
 8002902:	7023      	strb	r3, [r4, #0]
 8002904:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	f8c3 2003 	str.w	r2, [r3, #3]
  strcat(uart_hellp_msg, "\n\r");
 8002910:	f107 030c 	add.w	r3, r7, #12
 8002914:	4618      	mov	r0, r3
 8002916:	f7fd fc5b 	bl	80001d0 <strlen>
 800291a:	4603      	mov	r3, r0
 800291c:	461a      	mov	r2, r3
 800291e:	f107 030c 	add.w	r3, r7, #12
 8002922:	4413      	add	r3, r2
 8002924:	4a6a      	ldr	r2, [pc, #424]	; (8002ad0 <main+0x338>)
 8002926:	8811      	ldrh	r1, [r2, #0]
 8002928:	7892      	ldrb	r2, [r2, #2]
 800292a:	8019      	strh	r1, [r3, #0]
 800292c:	709a      	strb	r2, [r3, #2]
  HAL_UART_Transmit_IT(&huart3, uart_hellp_msg, sizeof(uart_hellp_msg));
 800292e:	f107 030c 	add.w	r3, r7, #12
 8002932:	221e      	movs	r2, #30
 8002934:	4619      	mov	r1, r3
 8002936:	4867      	ldr	r0, [pc, #412]	; (8002ad4 <main+0x33c>)
 8002938:	f006 fcad 	bl	8009296 <HAL_UART_Transmit_IT>
  //HAL_Delay(100);
  HAL_UART_Receive_IT(&huart3, &uart_RX_data, sizeof(uart_RX_data));
 800293c:	2201      	movs	r2, #1
 800293e:	4966      	ldr	r1, [pc, #408]	; (8002ad8 <main+0x340>)
 8002940:	4864      	ldr	r0, [pc, #400]	; (8002ad4 <main+0x33c>)
 8002942:	f006 fced 	bl	8009320 <HAL_UART_Receive_IT>


  // For test print counter ower COM port
  int j = 0;
 8002946:	2300      	movs	r3, #0
 8002948:	62fb      	str	r3, [r7, #44]	; 0x2c
  char str_count[6] = {0};
 800294a:	2300      	movs	r3, #0
 800294c:	607b      	str	r3, [r7, #4]
 800294e:	2300      	movs	r3, #0
 8002950:	813b      	strh	r3, [r7, #8]
  /* USER CODE BEGIN WHILE */


  // SD Card test
  // HAL_TIM_Base_Start_IT(&htim7);
  disk_initialize(SDFatFs. drv);
 8002952:	4b62      	ldr	r3, [pc, #392]	; (8002adc <main+0x344>)
 8002954:	785b      	ldrb	r3, [r3, #1]
 8002956:	4618      	mov	r0, r3
 8002958:	f00a fd78 	bl	800d44c <disk_initialize>
  SD_SPI_GetFileInfo();
 800295c:	f001 fb84 	bl	8004068 <SD_SPI_GetFileInfo>
  FATFS_UnLinkDriver(USER_Path);
 8002960:	485f      	ldr	r0, [pc, #380]	; (8002ae0 <main+0x348>)
 8002962:	f00e f9b5 	bl	8010cd0 <FATFS_UnLinkDriver>

  //create_example_bin();
  HAL_Delay(100);
 8002966:	2064      	movs	r0, #100	; 0x64
 8002968:	f002 f85c 	bl	8004a24 <HAL_Delay>

  //open_bin_file("56.bin");

  while (1)
  {
	  if(flag_received_command == true)
 800296c:	4b5d      	ldr	r3, [pc, #372]	; (8002ae4 <main+0x34c>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 80a7 	beq.w	8002ac4 <main+0x32c>
	  {
		  if(command_from_uart == '1')			// Turn ON all LEDs
 8002976:	4b5c      	ldr	r3, [pc, #368]	; (8002ae8 <main+0x350>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b31      	cmp	r3, #49	; 0x31
 800297c:	d12f      	bne.n	80029de <main+0x246>
		  {
			  uint8_t i = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			  stop_light_all_turn_on();
 8002984:	f7fe fa14 	bl	8000db0 <stop_light_all_turn_on>

			  for(i = 0; i <= 84; i++)
 8002988:	2300      	movs	r3, #0
 800298a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800298e:	e016      	b.n	80029be <main+0x226>
			  {
				  set_left_one_rgbw_led(i, 255, 255, 255, 255);
 8002990:	f897 0033 	ldrb.w	r0, [r7, #51]	; 0x33
 8002994:	23ff      	movs	r3, #255	; 0xff
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	23ff      	movs	r3, #255	; 0xff
 800299a:	22ff      	movs	r2, #255	; 0xff
 800299c:	21ff      	movs	r1, #255	; 0xff
 800299e:	f7ff feb8 	bl	8002712 <set_left_one_rgbw_led>
				  set_right_one_rgbw_led(i, 255, 255, 255, 255);
 80029a2:	f897 0033 	ldrb.w	r0, [r7, #51]	; 0x33
 80029a6:	23ff      	movs	r3, #255	; 0xff
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	23ff      	movs	r3, #255	; 0xff
 80029ac:	22ff      	movs	r2, #255	; 0xff
 80029ae:	21ff      	movs	r1, #255	; 0xff
 80029b0:	f7ff fed0 	bl	8002754 <set_right_one_rgbw_led>
			  for(i = 0; i <= 84; i++)
 80029b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80029b8:	3301      	adds	r3, #1
 80029ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80029be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80029c2:	2b54      	cmp	r3, #84	; 0x54
 80029c4:	d9e4      	bls.n	8002990 <main+0x1f8>
			  }
			  while (!ARGB_Show_left());
 80029c6:	bf00      	nop
 80029c8:	f7fe fd8e 	bl	80014e8 <ARGB_Show_left>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0fa      	beq.n	80029c8 <main+0x230>
			  while (!ARGB_Show_right());
 80029d2:	bf00      	nop
 80029d4:	f7fe ff54 	bl	8001880 <ARGB_Show_right>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0fa      	beq.n	80029d4 <main+0x23c>
		  }

		  if(command_from_uart == '2')			// Turn OFF all LEDs
 80029de:	4b42      	ldr	r3, [pc, #264]	; (8002ae8 <main+0x350>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b32      	cmp	r3, #50	; 0x32
 80029e4:	d12f      	bne.n	8002a46 <main+0x2ae>
		  {
			  uint8_t i = 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			  stop_light_all_turn_off();
 80029ec:	f7fe fa34 	bl	8000e58 <stop_light_all_turn_off>

			  for(i = 0; i <= 84; i++)
 80029f0:	2300      	movs	r3, #0
 80029f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80029f6:	e016      	b.n	8002a26 <main+0x28e>
			  {
				  set_left_one_rgbw_led(i, 0, 0, 0, 0);
 80029f8:	f897 0032 	ldrb.w	r0, [r7, #50]	; 0x32
 80029fc:	2300      	movs	r3, #0
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	2300      	movs	r3, #0
 8002a02:	2200      	movs	r2, #0
 8002a04:	2100      	movs	r1, #0
 8002a06:	f7ff fe84 	bl	8002712 <set_left_one_rgbw_led>
				  set_right_one_rgbw_led(i, 0, 0, 0, 0);
 8002a0a:	f897 0032 	ldrb.w	r0, [r7, #50]	; 0x32
 8002a0e:	2300      	movs	r3, #0
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	2300      	movs	r3, #0
 8002a14:	2200      	movs	r2, #0
 8002a16:	2100      	movs	r1, #0
 8002a18:	f7ff fe9c 	bl	8002754 <set_right_one_rgbw_led>
			  for(i = 0; i <= 84; i++)
 8002a1c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002a20:	3301      	adds	r3, #1
 8002a22:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8002a26:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002a2a:	2b54      	cmp	r3, #84	; 0x54
 8002a2c:	d9e4      	bls.n	80029f8 <main+0x260>
			  }
			  while (!ARGB_Show_left());
 8002a2e:	bf00      	nop
 8002a30:	f7fe fd5a 	bl	80014e8 <ARGB_Show_left>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0fa      	beq.n	8002a30 <main+0x298>
			  while (!ARGB_Show_right());
 8002a3a:	bf00      	nop
 8002a3c:	f7fe ff20 	bl	8001880 <ARGB_Show_right>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0fa      	beq.n	8002a3c <main+0x2a4>
		  }

		  if(command_from_uart == '3')
 8002a46:	4b28      	ldr	r3, [pc, #160]	; (8002ae8 <main+0x350>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b33      	cmp	r3, #51	; 0x33
 8002a4c:	d102      	bne.n	8002a54 <main+0x2bc>
		  {
			  open_my_bin_file("test_3.bin");		// My test file? one frame
 8002a4e:	4827      	ldr	r0, [pc, #156]	; (8002aec <main+0x354>)
 8002a50:	f001 fdb4 	bl	80045bc <open_my_bin_file>
		  }

		  if(command_from_uart == '4')
 8002a54:	4b24      	ldr	r3, [pc, #144]	; (8002ae8 <main+0x350>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b34      	cmp	r3, #52	; 0x34
 8002a5a:	d102      	bne.n	8002a62 <main+0x2ca>
		  {
			  open_bin_file("69.bin");
 8002a5c:	4824      	ldr	r0, [pc, #144]	; (8002af0 <main+0x358>)
 8002a5e:	f001 fbff 	bl	8004260 <open_bin_file>
		  }

		  if(command_from_uart == '5')
 8002a62:	4b21      	ldr	r3, [pc, #132]	; (8002ae8 <main+0x350>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b35      	cmp	r3, #53	; 0x35
 8002a68:	d102      	bne.n	8002a70 <main+0x2d8>
		  {
			  open_bin_file("55.bin");
 8002a6a:	4822      	ldr	r0, [pc, #136]	; (8002af4 <main+0x35c>)
 8002a6c:	f001 fbf8 	bl	8004260 <open_bin_file>
		  }

		  if(command_from_uart == '6')
 8002a70:	4b1d      	ldr	r3, [pc, #116]	; (8002ae8 <main+0x350>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b36      	cmp	r3, #54	; 0x36
 8002a76:	d102      	bne.n	8002a7e <main+0x2e6>
		  {
			  open_bin_file("75.bin");
 8002a78:	481f      	ldr	r0, [pc, #124]	; (8002af8 <main+0x360>)
 8002a7a:	f001 fbf1 	bl	8004260 <open_bin_file>
		  }

		  if(command_from_uart == '7')
 8002a7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ae8 <main+0x350>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b37      	cmp	r3, #55	; 0x37
 8002a84:	d102      	bne.n	8002a8c <main+0x2f4>
		  {
			  open_bin_file("77.bin");
 8002a86:	481d      	ldr	r0, [pc, #116]	; (8002afc <main+0x364>)
 8002a88:	f001 fbea 	bl	8004260 <open_bin_file>
		  }

		  if(command_from_uart == '8')
 8002a8c:	4b16      	ldr	r3, [pc, #88]	; (8002ae8 <main+0x350>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b38      	cmp	r3, #56	; 0x38
 8002a92:	d102      	bne.n	8002a9a <main+0x302>
		  {
			  open_bin_file("80.bin");
 8002a94:	481a      	ldr	r0, [pc, #104]	; (8002b00 <main+0x368>)
 8002a96:	f001 fbe3 	bl	8004260 <open_bin_file>
		  }

		  if(command_from_uart == '9')
 8002a9a:	4b13      	ldr	r3, [pc, #76]	; (8002ae8 <main+0x350>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b39      	cmp	r3, #57	; 0x39
 8002aa0:	d102      	bne.n	8002aa8 <main+0x310>
		  {
			  open_bin_file("73.bin");
 8002aa2:	4818      	ldr	r0, [pc, #96]	; (8002b04 <main+0x36c>)
 8002aa4:	f001 fbdc 	bl	8004260 <open_bin_file>
		  }
		  if(command_from_uart == '0')
 8002aa8:	4b0f      	ldr	r3, [pc, #60]	; (8002ae8 <main+0x350>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b30      	cmp	r3, #48	; 0x30
 8002aae:	d102      	bne.n	8002ab6 <main+0x31e>
		  {
			  open_bin_file("72.bin");
 8002ab0:	4815      	ldr	r0, [pc, #84]	; (8002b08 <main+0x370>)
 8002ab2:	f001 fbd5 	bl	8004260 <open_bin_file>
		  }
		  //////////////////////////////////////////////////////////////////
		  // Read frames
		  if(flag_received_command == true)
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <main+0x34c>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <main+0x32c>
		  {
	 			  flag_received_command = false;
 8002abe:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <main+0x34c>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
//	  HAL_Delay(1000);
	  //


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8002ac4:	f00e f9fe 	bl	8010ec4 <MX_USB_HOST_Process>
	  if(flag_received_command == true)
 8002ac8:	e750      	b.n	800296c <main+0x1d4>
 8002aca:	bf00      	nop
 8002acc:	08011e48 	.word	0x08011e48
 8002ad0:	08011e00 	.word	0x08011e00
 8002ad4:	20001830 	.word	0x20001830
 8002ad8:	20001876 	.word	0x20001876
 8002adc:	20000578 	.word	0x20000578
 8002ae0:	20001880 	.word	0x20001880
 8002ae4:	20001878 	.word	0x20001878
 8002ae8:	20001877 	.word	0x20001877
 8002aec:	08011e04 	.word	0x08011e04
 8002af0:	08011e10 	.word	0x08011e10
 8002af4:	08011e18 	.word	0x08011e18
 8002af8:	08011e20 	.word	0x08011e20
 8002afc:	08011e28 	.word	0x08011e28
 8002b00:	08011e30 	.word	0x08011e30
 8002b04:	08011e38 	.word	0x08011e38
 8002b08:	08011e40 	.word	0x08011e40

08002b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b094      	sub	sp, #80	; 0x50
 8002b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b12:	f107 0320 	add.w	r3, r7, #32
 8002b16:	2230      	movs	r2, #48	; 0x30
 8002b18:	2100      	movs	r1, #0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f00e fcee 	bl	80114fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b20:	f107 030c 	add.w	r3, r7, #12
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	60da      	str	r2, [r3, #12]
 8002b2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b30:	2300      	movs	r3, #0
 8002b32:	60bb      	str	r3, [r7, #8]
 8002b34:	4b28      	ldr	r3, [pc, #160]	; (8002bd8 <SystemClock_Config+0xcc>)
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	4a27      	ldr	r2, [pc, #156]	; (8002bd8 <SystemClock_Config+0xcc>)
 8002b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b3e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b40:	4b25      	ldr	r3, [pc, #148]	; (8002bd8 <SystemClock_Config+0xcc>)
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	607b      	str	r3, [r7, #4]
 8002b50:	4b22      	ldr	r3, [pc, #136]	; (8002bdc <SystemClock_Config+0xd0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a21      	ldr	r2, [pc, #132]	; (8002bdc <SystemClock_Config+0xd0>)
 8002b56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	4b1f      	ldr	r3, [pc, #124]	; (8002bdc <SystemClock_Config+0xd0>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b64:	607b      	str	r3, [r7, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b72:	2302      	movs	r3, #2
 8002b74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002b7c:	2308      	movs	r3, #8
 8002b7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002b80:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002b84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b86:	2302      	movs	r3, #2
 8002b88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002b8a:	2307      	movs	r3, #7
 8002b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b8e:	f107 0320 	add.w	r3, r7, #32
 8002b92:	4618      	mov	r0, r3
 8002b94:	f004 fa3e 	bl	8007014 <HAL_RCC_OscConfig>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002b9e:	f000 fcb3 	bl	8003508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ba2:	230f      	movs	r3, #15
 8002ba4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002bae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002bb2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002bb4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002bb8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002bba:	f107 030c 	add.w	r3, r7, #12
 8002bbe:	2105      	movs	r1, #5
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f004 fc9f 	bl	8007504 <HAL_RCC_ClockConfig>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002bcc:	f000 fc9c 	bl	8003508 <Error_Handler>
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	3750      	adds	r7, #80	; 0x50
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40007000 	.word	0x40007000

08002be0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002be4:	4b17      	ldr	r3, [pc, #92]	; (8002c44 <MX_SPI1_Init+0x64>)
 8002be6:	4a18      	ldr	r2, [pc, #96]	; (8002c48 <MX_SPI1_Init+0x68>)
 8002be8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bea:	4b16      	ldr	r3, [pc, #88]	; (8002c44 <MX_SPI1_Init+0x64>)
 8002bec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002bf0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002bf2:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <MX_SPI1_Init+0x64>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bf8:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <MX_SPI1_Init+0x64>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bfe:	4b11      	ldr	r3, [pc, #68]	; (8002c44 <MX_SPI1_Init+0x64>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c04:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <MX_SPI1_Init+0x64>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <MX_SPI1_Init+0x64>)
 8002c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002c12:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <MX_SPI1_Init+0x64>)
 8002c14:	2228      	movs	r2, #40	; 0x28
 8002c16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c18:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <MX_SPI1_Init+0x64>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c1e:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <MX_SPI1_Init+0x64>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c24:	4b07      	ldr	r3, [pc, #28]	; (8002c44 <MX_SPI1_Init+0x64>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c2a:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <MX_SPI1_Init+0x64>)
 8002c2c:	220a      	movs	r2, #10
 8002c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c30:	4804      	ldr	r0, [pc, #16]	; (8002c44 <MX_SPI1_Init+0x64>)
 8002c32:	f004 fe87 	bl	8007944 <HAL_SPI_Init>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c3c:	f000 fc64 	bl	8003508 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c40:	bf00      	nop
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	200015b0 	.word	0x200015b0
 8002c48:	40013000 	.word	0x40013000

08002c4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08e      	sub	sp, #56	; 0x38
 8002c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	605a      	str	r2, [r3, #4]
 8002c5c:	609a      	str	r2, [r3, #8]
 8002c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c60:	f107 0320 	add.w	r3, r7, #32
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c6a:	1d3b      	adds	r3, r7, #4
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	60da      	str	r2, [r3, #12]
 8002c76:	611a      	str	r2, [r3, #16]
 8002c78:	615a      	str	r2, [r3, #20]
 8002c7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c7c:	4b3d      	ldr	r3, [pc, #244]	; (8002d74 <MX_TIM2_Init+0x128>)
 8002c7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2100-1;
 8002c84:	4b3b      	ldr	r3, [pc, #236]	; (8002d74 <MX_TIM2_Init+0x128>)
 8002c86:	f640 0233 	movw	r2, #2099	; 0x833
 8002c8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c8c:	4b39      	ldr	r3, [pc, #228]	; (8002d74 <MX_TIM2_Init+0x128>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250-1;
 8002c92:	4b38      	ldr	r3, [pc, #224]	; (8002d74 <MX_TIM2_Init+0x128>)
 8002c94:	22f9      	movs	r2, #249	; 0xf9
 8002c96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c98:	4b36      	ldr	r3, [pc, #216]	; (8002d74 <MX_TIM2_Init+0x128>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c9e:	4b35      	ldr	r3, [pc, #212]	; (8002d74 <MX_TIM2_Init+0x128>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ca4:	4833      	ldr	r0, [pc, #204]	; (8002d74 <MX_TIM2_Init+0x128>)
 8002ca6:	f005 f943 	bl	8007f30 <HAL_TIM_Base_Init>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002cb0:	f000 fc2a 	bl	8003508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002cba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	482c      	ldr	r0, [pc, #176]	; (8002d74 <MX_TIM2_Init+0x128>)
 8002cc2:	f005 fcd5 	bl	8008670 <HAL_TIM_ConfigClockSource>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002ccc:	f000 fc1c 	bl	8003508 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002cd0:	4828      	ldr	r0, [pc, #160]	; (8002d74 <MX_TIM2_Init+0x128>)
 8002cd2:	f005 f97c 	bl	8007fce <HAL_TIM_PWM_Init>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002cdc:	f000 fc14 	bl	8003508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ce8:	f107 0320 	add.w	r3, r7, #32
 8002cec:	4619      	mov	r1, r3
 8002cee:	4821      	ldr	r0, [pc, #132]	; (8002d74 <MX_TIM2_Init+0x128>)
 8002cf0:	f006 f910 	bl	8008f14 <HAL_TIMEx_MasterConfigSynchronization>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002cfa:	f000 fc05 	bl	8003508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cfe:	2360      	movs	r3, #96	; 0x60
 8002d00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d0e:	1d3b      	adds	r3, r7, #4
 8002d10:	2200      	movs	r2, #0
 8002d12:	4619      	mov	r1, r3
 8002d14:	4817      	ldr	r0, [pc, #92]	; (8002d74 <MX_TIM2_Init+0x128>)
 8002d16:	f005 fbe9 	bl	80084ec <HAL_TIM_PWM_ConfigChannel>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002d20:	f000 fbf2 	bl	8003508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d24:	1d3b      	adds	r3, r7, #4
 8002d26:	2204      	movs	r2, #4
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4812      	ldr	r0, [pc, #72]	; (8002d74 <MX_TIM2_Init+0x128>)
 8002d2c:	f005 fbde 	bl	80084ec <HAL_TIM_PWM_ConfigChannel>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002d36:	f000 fbe7 	bl	8003508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d3a:	1d3b      	adds	r3, r7, #4
 8002d3c:	2208      	movs	r2, #8
 8002d3e:	4619      	mov	r1, r3
 8002d40:	480c      	ldr	r0, [pc, #48]	; (8002d74 <MX_TIM2_Init+0x128>)
 8002d42:	f005 fbd3 	bl	80084ec <HAL_TIM_PWM_ConfigChannel>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002d4c:	f000 fbdc 	bl	8003508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d50:	1d3b      	adds	r3, r7, #4
 8002d52:	220c      	movs	r2, #12
 8002d54:	4619      	mov	r1, r3
 8002d56:	4807      	ldr	r0, [pc, #28]	; (8002d74 <MX_TIM2_Init+0x128>)
 8002d58:	f005 fbc8 	bl	80084ec <HAL_TIM_PWM_ConfigChannel>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8002d62:	f000 fbd1 	bl	8003508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002d66:	4803      	ldr	r0, [pc, #12]	; (8002d74 <MX_TIM2_Init+0x128>)
 8002d68:	f000 fd4c 	bl	8003804 <HAL_TIM_MspPostInit>

}
 8002d6c:	bf00      	nop
 8002d6e:	3738      	adds	r7, #56	; 0x38
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20001608 	.word	0x20001608

08002d78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08e      	sub	sp, #56	; 0x38
 8002d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	605a      	str	r2, [r3, #4]
 8002d88:	609a      	str	r2, [r3, #8]
 8002d8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d8c:	f107 0320 	add.w	r3, r7, #32
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d96:	1d3b      	adds	r3, r7, #4
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	60da      	str	r2, [r3, #12]
 8002da2:	611a      	str	r2, [r3, #16]
 8002da4:	615a      	str	r2, [r3, #20]
 8002da6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002da8:	4b3d      	ldr	r3, [pc, #244]	; (8002ea0 <MX_TIM3_Init+0x128>)
 8002daa:	4a3e      	ldr	r2, [pc, #248]	; (8002ea4 <MX_TIM3_Init+0x12c>)
 8002dac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2100-1;
 8002dae:	4b3c      	ldr	r3, [pc, #240]	; (8002ea0 <MX_TIM3_Init+0x128>)
 8002db0:	f640 0233 	movw	r2, #2099	; 0x833
 8002db4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002db6:	4b3a      	ldr	r3, [pc, #232]	; (8002ea0 <MX_TIM3_Init+0x128>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 250-1;
 8002dbc:	4b38      	ldr	r3, [pc, #224]	; (8002ea0 <MX_TIM3_Init+0x128>)
 8002dbe:	22f9      	movs	r2, #249	; 0xf9
 8002dc0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dc2:	4b37      	ldr	r3, [pc, #220]	; (8002ea0 <MX_TIM3_Init+0x128>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dc8:	4b35      	ldr	r3, [pc, #212]	; (8002ea0 <MX_TIM3_Init+0x128>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002dce:	4834      	ldr	r0, [pc, #208]	; (8002ea0 <MX_TIM3_Init+0x128>)
 8002dd0:	f005 f8ae 	bl	8007f30 <HAL_TIM_Base_Init>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002dda:	f000 fb95 	bl	8003508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002de2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002de4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002de8:	4619      	mov	r1, r3
 8002dea:	482d      	ldr	r0, [pc, #180]	; (8002ea0 <MX_TIM3_Init+0x128>)
 8002dec:	f005 fc40 	bl	8008670 <HAL_TIM_ConfigClockSource>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002df6:	f000 fb87 	bl	8003508 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002dfa:	4829      	ldr	r0, [pc, #164]	; (8002ea0 <MX_TIM3_Init+0x128>)
 8002dfc:	f005 f8e7 	bl	8007fce <HAL_TIM_PWM_Init>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002e06:	f000 fb7f 	bl	8003508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e12:	f107 0320 	add.w	r3, r7, #32
 8002e16:	4619      	mov	r1, r3
 8002e18:	4821      	ldr	r0, [pc, #132]	; (8002ea0 <MX_TIM3_Init+0x128>)
 8002e1a:	f006 f87b 	bl	8008f14 <HAL_TIMEx_MasterConfigSynchronization>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002e24:	f000 fb70 	bl	8003508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e28:	2360      	movs	r3, #96	; 0x60
 8002e2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e30:	2300      	movs	r3, #0
 8002e32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e38:	1d3b      	adds	r3, r7, #4
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4818      	ldr	r0, [pc, #96]	; (8002ea0 <MX_TIM3_Init+0x128>)
 8002e40:	f005 fb54 	bl	80084ec <HAL_TIM_PWM_ConfigChannel>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002e4a:	f000 fb5d 	bl	8003508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e4e:	1d3b      	adds	r3, r7, #4
 8002e50:	2204      	movs	r2, #4
 8002e52:	4619      	mov	r1, r3
 8002e54:	4812      	ldr	r0, [pc, #72]	; (8002ea0 <MX_TIM3_Init+0x128>)
 8002e56:	f005 fb49 	bl	80084ec <HAL_TIM_PWM_ConfigChannel>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002e60:	f000 fb52 	bl	8003508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e64:	1d3b      	adds	r3, r7, #4
 8002e66:	2208      	movs	r2, #8
 8002e68:	4619      	mov	r1, r3
 8002e6a:	480d      	ldr	r0, [pc, #52]	; (8002ea0 <MX_TIM3_Init+0x128>)
 8002e6c:	f005 fb3e 	bl	80084ec <HAL_TIM_PWM_ConfigChannel>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002e76:	f000 fb47 	bl	8003508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e7a:	1d3b      	adds	r3, r7, #4
 8002e7c:	220c      	movs	r2, #12
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4807      	ldr	r0, [pc, #28]	; (8002ea0 <MX_TIM3_Init+0x128>)
 8002e82:	f005 fb33 	bl	80084ec <HAL_TIM_PWM_ConfigChannel>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002e8c:	f000 fb3c 	bl	8003508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002e90:	4803      	ldr	r0, [pc, #12]	; (8002ea0 <MX_TIM3_Init+0x128>)
 8002e92:	f000 fcb7 	bl	8003804 <HAL_TIM_MspPostInit>

}
 8002e96:	bf00      	nop
 8002e98:	3738      	adds	r7, #56	; 0x38
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20001650 	.word	0x20001650
 8002ea4:	40000400 	.word	0x40000400

08002ea8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08e      	sub	sp, #56	; 0x38
 8002eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	605a      	str	r2, [r3, #4]
 8002eb8:	609a      	str	r2, [r3, #8]
 8002eba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ebc:	f107 0320 	add.w	r3, r7, #32
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ec6:	1d3b      	adds	r3, r7, #4
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	60da      	str	r2, [r3, #12]
 8002ed2:	611a      	str	r2, [r3, #16]
 8002ed4:	615a      	str	r2, [r3, #20]
 8002ed6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ed8:	4b32      	ldr	r3, [pc, #200]	; (8002fa4 <MX_TIM4_Init+0xfc>)
 8002eda:	4a33      	ldr	r2, [pc, #204]	; (8002fa8 <MX_TIM4_Init+0x100>)
 8002edc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2100-1;
 8002ede:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <MX_TIM4_Init+0xfc>)
 8002ee0:	f640 0233 	movw	r2, #2099	; 0x833
 8002ee4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ee6:	4b2f      	ldr	r3, [pc, #188]	; (8002fa4 <MX_TIM4_Init+0xfc>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 250-1;
 8002eec:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <MX_TIM4_Init+0xfc>)
 8002eee:	22f9      	movs	r2, #249	; 0xf9
 8002ef0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ef2:	4b2c      	ldr	r3, [pc, #176]	; (8002fa4 <MX_TIM4_Init+0xfc>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ef8:	4b2a      	ldr	r3, [pc, #168]	; (8002fa4 <MX_TIM4_Init+0xfc>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002efe:	4829      	ldr	r0, [pc, #164]	; (8002fa4 <MX_TIM4_Init+0xfc>)
 8002f00:	f005 f816 	bl	8007f30 <HAL_TIM_Base_Init>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002f0a:	f000 fafd 	bl	8003508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f12:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002f14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4822      	ldr	r0, [pc, #136]	; (8002fa4 <MX_TIM4_Init+0xfc>)
 8002f1c:	f005 fba8 	bl	8008670 <HAL_TIM_ConfigClockSource>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002f26:	f000 faef 	bl	8003508 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002f2a:	481e      	ldr	r0, [pc, #120]	; (8002fa4 <MX_TIM4_Init+0xfc>)
 8002f2c:	f005 f84f 	bl	8007fce <HAL_TIM_PWM_Init>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002f36:	f000 fae7 	bl	8003508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f42:	f107 0320 	add.w	r3, r7, #32
 8002f46:	4619      	mov	r1, r3
 8002f48:	4816      	ldr	r0, [pc, #88]	; (8002fa4 <MX_TIM4_Init+0xfc>)
 8002f4a:	f005 ffe3 	bl	8008f14 <HAL_TIMEx_MasterConfigSynchronization>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002f54:	f000 fad8 	bl	8003508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f58:	2360      	movs	r3, #96	; 0x60
 8002f5a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f64:	2300      	movs	r3, #0
 8002f66:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f68:	1d3b      	adds	r3, r7, #4
 8002f6a:	2204      	movs	r2, #4
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	480d      	ldr	r0, [pc, #52]	; (8002fa4 <MX_TIM4_Init+0xfc>)
 8002f70:	f005 fabc 	bl	80084ec <HAL_TIM_PWM_ConfigChannel>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002f7a:	f000 fac5 	bl	8003508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f7e:	1d3b      	adds	r3, r7, #4
 8002f80:	2208      	movs	r2, #8
 8002f82:	4619      	mov	r1, r3
 8002f84:	4807      	ldr	r0, [pc, #28]	; (8002fa4 <MX_TIM4_Init+0xfc>)
 8002f86:	f005 fab1 	bl	80084ec <HAL_TIM_PWM_ConfigChannel>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8002f90:	f000 faba 	bl	8003508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002f94:	4803      	ldr	r0, [pc, #12]	; (8002fa4 <MX_TIM4_Init+0xfc>)
 8002f96:	f000 fc35 	bl	8003804 <HAL_TIM_MspPostInit>

}
 8002f9a:	bf00      	nop
 8002f9c:	3738      	adds	r7, #56	; 0x38
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20001698 	.word	0x20001698
 8002fa8:	40000800 	.word	0x40000800

08002fac <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fb2:	463b      	mov	r3, r7
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002fba:	4b15      	ldr	r3, [pc, #84]	; (8003010 <MX_TIM7_Init+0x64>)
 8002fbc:	4a15      	ldr	r2, [pc, #84]	; (8003014 <MX_TIM7_Init+0x68>)
 8002fbe:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 100;
 8002fc0:	4b13      	ldr	r3, [pc, #76]	; (8003010 <MX_TIM7_Init+0x64>)
 8002fc2:	2264      	movs	r2, #100	; 0x64
 8002fc4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fc6:	4b12      	ldr	r3, [pc, #72]	; (8003010 <MX_TIM7_Init+0x64>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8399;
 8002fcc:	4b10      	ldr	r3, [pc, #64]	; (8003010 <MX_TIM7_Init+0x64>)
 8002fce:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002fd2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fd4:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <MX_TIM7_Init+0x64>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002fda:	480d      	ldr	r0, [pc, #52]	; (8003010 <MX_TIM7_Init+0x64>)
 8002fdc:	f004 ffa8 	bl	8007f30 <HAL_TIM_Base_Init>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002fe6:	f000 fa8f 	bl	8003508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fea:	2300      	movs	r3, #0
 8002fec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002ff2:	463b      	mov	r3, r7
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4806      	ldr	r0, [pc, #24]	; (8003010 <MX_TIM7_Init+0x64>)
 8002ff8:	f005 ff8c 	bl	8008f14 <HAL_TIMEx_MasterConfigSynchronization>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8003002:	f000 fa81 	bl	8003508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	200016e0 	.word	0x200016e0
 8003014:	40001400 	.word	0x40001400

08003018 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b092      	sub	sp, #72	; 0x48
 800301c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800301e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	60da      	str	r2, [r3, #12]
 8003036:	611a      	str	r2, [r3, #16]
 8003038:	615a      	str	r2, [r3, #20]
 800303a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800303c:	1d3b      	adds	r3, r7, #4
 800303e:	2220      	movs	r2, #32
 8003040:	2100      	movs	r1, #0
 8003042:	4618      	mov	r0, r3
 8003044:	f00e fa5a 	bl	80114fc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003048:	4b39      	ldr	r3, [pc, #228]	; (8003130 <MX_TIM8_Init+0x118>)
 800304a:	4a3a      	ldr	r2, [pc, #232]	; (8003134 <MX_TIM8_Init+0x11c>)
 800304c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800304e:	4b38      	ldr	r3, [pc, #224]	; (8003130 <MX_TIM8_Init+0x118>)
 8003050:	2200      	movs	r2, #0
 8003052:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003054:	4b36      	ldr	r3, [pc, #216]	; (8003130 <MX_TIM8_Init+0x118>)
 8003056:	2200      	movs	r2, #0
 8003058:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800305a:	4b35      	ldr	r3, [pc, #212]	; (8003130 <MX_TIM8_Init+0x118>)
 800305c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003060:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003062:	4b33      	ldr	r3, [pc, #204]	; (8003130 <MX_TIM8_Init+0x118>)
 8003064:	2200      	movs	r2, #0
 8003066:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003068:	4b31      	ldr	r3, [pc, #196]	; (8003130 <MX_TIM8_Init+0x118>)
 800306a:	2200      	movs	r2, #0
 800306c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800306e:	4b30      	ldr	r3, [pc, #192]	; (8003130 <MX_TIM8_Init+0x118>)
 8003070:	2200      	movs	r2, #0
 8003072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003074:	482e      	ldr	r0, [pc, #184]	; (8003130 <MX_TIM8_Init+0x118>)
 8003076:	f004 ffaa 	bl	8007fce <HAL_TIM_PWM_Init>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8003080:	f000 fa42 	bl	8003508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003084:	2300      	movs	r3, #0
 8003086:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003088:	2300      	movs	r3, #0
 800308a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800308c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003090:	4619      	mov	r1, r3
 8003092:	4827      	ldr	r0, [pc, #156]	; (8003130 <MX_TIM8_Init+0x118>)
 8003094:	f005 ff3e 	bl	8008f14 <HAL_TIMEx_MasterConfigSynchronization>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800309e:	f000 fa33 	bl	8003508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030a2:	2360      	movs	r3, #96	; 0x60
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80030a6:	2300      	movs	r3, #0
 80030a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030aa:	2300      	movs	r3, #0
 80030ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80030ae:	2300      	movs	r3, #0
 80030b0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030b2:	2300      	movs	r3, #0
 80030b4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80030b6:	2300      	movs	r3, #0
 80030b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80030ba:	2300      	movs	r3, #0
 80030bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80030be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030c2:	2208      	movs	r2, #8
 80030c4:	4619      	mov	r1, r3
 80030c6:	481a      	ldr	r0, [pc, #104]	; (8003130 <MX_TIM8_Init+0x118>)
 80030c8:	f005 fa10 	bl	80084ec <HAL_TIM_PWM_ConfigChannel>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80030d2:	f000 fa19 	bl	8003508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80030d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030da:	220c      	movs	r2, #12
 80030dc:	4619      	mov	r1, r3
 80030de:	4814      	ldr	r0, [pc, #80]	; (8003130 <MX_TIM8_Init+0x118>)
 80030e0:	f005 fa04 	bl	80084ec <HAL_TIM_PWM_ConfigChannel>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80030ea:	f000 fa0d 	bl	8003508 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80030ee:	2300      	movs	r3, #0
 80030f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80030f6:	2300      	movs	r3, #0
 80030f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003102:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003106:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003108:	2300      	movs	r3, #0
 800310a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800310c:	1d3b      	adds	r3, r7, #4
 800310e:	4619      	mov	r1, r3
 8003110:	4807      	ldr	r0, [pc, #28]	; (8003130 <MX_TIM8_Init+0x118>)
 8003112:	f005 ff7b 	bl	800900c <HAL_TIMEx_ConfigBreakDeadTime>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 800311c:	f000 f9f4 	bl	8003508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003120:	4803      	ldr	r0, [pc, #12]	; (8003130 <MX_TIM8_Init+0x118>)
 8003122:	f000 fb6f 	bl	8003804 <HAL_TIM_MspPostInit>

}
 8003126:	bf00      	nop
 8003128:	3748      	adds	r7, #72	; 0x48
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	20001728 	.word	0x20001728
 8003134:	40010400 	.word	0x40010400

08003138 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800313c:	4b11      	ldr	r3, [pc, #68]	; (8003184 <MX_USART3_UART_Init+0x4c>)
 800313e:	4a12      	ldr	r2, [pc, #72]	; (8003188 <MX_USART3_UART_Init+0x50>)
 8003140:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003142:	4b10      	ldr	r3, [pc, #64]	; (8003184 <MX_USART3_UART_Init+0x4c>)
 8003144:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003148:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800314a:	4b0e      	ldr	r3, [pc, #56]	; (8003184 <MX_USART3_UART_Init+0x4c>)
 800314c:	2200      	movs	r2, #0
 800314e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003150:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <MX_USART3_UART_Init+0x4c>)
 8003152:	2200      	movs	r2, #0
 8003154:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003156:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <MX_USART3_UART_Init+0x4c>)
 8003158:	2200      	movs	r2, #0
 800315a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800315c:	4b09      	ldr	r3, [pc, #36]	; (8003184 <MX_USART3_UART_Init+0x4c>)
 800315e:	220c      	movs	r2, #12
 8003160:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003162:	4b08      	ldr	r3, [pc, #32]	; (8003184 <MX_USART3_UART_Init+0x4c>)
 8003164:	2200      	movs	r2, #0
 8003166:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003168:	4b06      	ldr	r3, [pc, #24]	; (8003184 <MX_USART3_UART_Init+0x4c>)
 800316a:	2200      	movs	r2, #0
 800316c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800316e:	4805      	ldr	r0, [pc, #20]	; (8003184 <MX_USART3_UART_Init+0x4c>)
 8003170:	f005 ffb2 	bl	80090d8 <HAL_UART_Init>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800317a:	f000 f9c5 	bl	8003508 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	20001830 	.word	0x20001830
 8003188:	40004800 	.word	0x40004800

0800318c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	607b      	str	r3, [r7, #4]
 8003196:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <MX_DMA_Init+0x4c>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	4a0f      	ldr	r2, [pc, #60]	; (80031d8 <MX_DMA_Init+0x4c>)
 800319c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031a0:	6313      	str	r3, [r2, #48]	; 0x30
 80031a2:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <MX_DMA_Init+0x4c>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031aa:	607b      	str	r3, [r7, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80031ae:	2200      	movs	r2, #0
 80031b0:	2100      	movs	r1, #0
 80031b2:	203c      	movs	r0, #60	; 0x3c
 80031b4:	f001 fd35 	bl	8004c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80031b8:	203c      	movs	r0, #60	; 0x3c
 80031ba:	f001 fd4e 	bl	8004c5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80031be:	2200      	movs	r2, #0
 80031c0:	2100      	movs	r1, #0
 80031c2:	2046      	movs	r0, #70	; 0x46
 80031c4:	f001 fd2d 	bl	8004c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80031c8:	2046      	movs	r0, #70	; 0x46
 80031ca:	f001 fd46 	bl	8004c5a <HAL_NVIC_EnableIRQ>

}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40023800 	.word	0x40023800

080031dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08c      	sub	sp, #48	; 0x30
 80031e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e2:	f107 031c 	add.w	r3, r7, #28
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	605a      	str	r2, [r3, #4]
 80031ec:	609a      	str	r2, [r3, #8]
 80031ee:	60da      	str	r2, [r3, #12]
 80031f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	61bb      	str	r3, [r7, #24]
 80031f6:	4b9c      	ldr	r3, [pc, #624]	; (8003468 <MX_GPIO_Init+0x28c>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	4a9b      	ldr	r2, [pc, #620]	; (8003468 <MX_GPIO_Init+0x28c>)
 80031fc:	f043 0310 	orr.w	r3, r3, #16
 8003200:	6313      	str	r3, [r2, #48]	; 0x30
 8003202:	4b99      	ldr	r3, [pc, #612]	; (8003468 <MX_GPIO_Init+0x28c>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	f003 0310 	and.w	r3, r3, #16
 800320a:	61bb      	str	r3, [r7, #24]
 800320c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	4b95      	ldr	r3, [pc, #596]	; (8003468 <MX_GPIO_Init+0x28c>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	4a94      	ldr	r2, [pc, #592]	; (8003468 <MX_GPIO_Init+0x28c>)
 8003218:	f043 0304 	orr.w	r3, r3, #4
 800321c:	6313      	str	r3, [r2, #48]	; 0x30
 800321e:	4b92      	ldr	r3, [pc, #584]	; (8003468 <MX_GPIO_Init+0x28c>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	f003 0304 	and.w	r3, r3, #4
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	4b8e      	ldr	r3, [pc, #568]	; (8003468 <MX_GPIO_Init+0x28c>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4a8d      	ldr	r2, [pc, #564]	; (8003468 <MX_GPIO_Init+0x28c>)
 8003234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003238:	6313      	str	r3, [r2, #48]	; 0x30
 800323a:	4b8b      	ldr	r3, [pc, #556]	; (8003468 <MX_GPIO_Init+0x28c>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003246:	2300      	movs	r3, #0
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	4b87      	ldr	r3, [pc, #540]	; (8003468 <MX_GPIO_Init+0x28c>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	4a86      	ldr	r2, [pc, #536]	; (8003468 <MX_GPIO_Init+0x28c>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	6313      	str	r3, [r2, #48]	; 0x30
 8003256:	4b84      	ldr	r3, [pc, #528]	; (8003468 <MX_GPIO_Init+0x28c>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	4b80      	ldr	r3, [pc, #512]	; (8003468 <MX_GPIO_Init+0x28c>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4a7f      	ldr	r2, [pc, #508]	; (8003468 <MX_GPIO_Init+0x28c>)
 800326c:	f043 0302 	orr.w	r3, r3, #2
 8003270:	6313      	str	r3, [r2, #48]	; 0x30
 8003272:	4b7d      	ldr	r3, [pc, #500]	; (8003468 <MX_GPIO_Init+0x28c>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	607b      	str	r3, [r7, #4]
 8003282:	4b79      	ldr	r3, [pc, #484]	; (8003468 <MX_GPIO_Init+0x28c>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	4a78      	ldr	r2, [pc, #480]	; (8003468 <MX_GPIO_Init+0x28c>)
 8003288:	f043 0308 	orr.w	r3, r3, #8
 800328c:	6313      	str	r3, [r2, #48]	; 0x30
 800328e:	4b76      	ldr	r3, [pc, #472]	; (8003468 <MX_GPIO_Init+0x28c>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	607b      	str	r3, [r7, #4]
 8003298:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800329a:	2200      	movs	r2, #0
 800329c:	2108      	movs	r1, #8
 800329e:	4873      	ldr	r0, [pc, #460]	; (800346c <MX_GPIO_Init+0x290>)
 80032a0:	f002 fa94 	bl	80057cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80032a4:	2201      	movs	r2, #1
 80032a6:	2101      	movs	r1, #1
 80032a8:	4871      	ldr	r0, [pc, #452]	; (8003470 <MX_GPIO_Init+0x294>)
 80032aa:	f002 fa8f 	bl	80057cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_RESET);
 80032ae:	2200      	movs	r2, #0
 80032b0:	2108      	movs	r1, #8
 80032b2:	4870      	ldr	r0, [pc, #448]	; (8003474 <MX_GPIO_Init+0x298>)
 80032b4:	f002 fa8a 	bl	80057cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TEST_OUT_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80032b8:	2200      	movs	r2, #0
 80032ba:	f64f 0110 	movw	r1, #63504	; 0xf810
 80032be:	486e      	ldr	r0, [pc, #440]	; (8003478 <MX_GPIO_Init+0x29c>)
 80032c0:	f002 fa84 	bl	80057cc <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80032c4:	2308      	movs	r3, #8
 80032c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032c8:	2301      	movs	r3, #1
 80032ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d0:	2300      	movs	r3, #0
 80032d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032d4:	f107 031c 	add.w	r3, r7, #28
 80032d8:	4619      	mov	r1, r3
 80032da:	4864      	ldr	r0, [pc, #400]	; (800346c <MX_GPIO_Init+0x290>)
 80032dc:	f002 f8da 	bl	8005494 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80032e0:	2301      	movs	r3, #1
 80032e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032e4:	2301      	movs	r3, #1
 80032e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ec:	2300      	movs	r3, #0
 80032ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80032f0:	f107 031c 	add.w	r3, r7, #28
 80032f4:	4619      	mov	r1, r3
 80032f6:	485e      	ldr	r0, [pc, #376]	; (8003470 <MX_GPIO_Init+0x294>)
 80032f8:	f002 f8cc 	bl	8005494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80032fc:	2308      	movs	r3, #8
 80032fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003300:	2302      	movs	r3, #2
 8003302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003304:	2300      	movs	r3, #0
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003308:	2300      	movs	r3, #0
 800330a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800330c:	2305      	movs	r3, #5
 800330e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003310:	f107 031c 	add.w	r3, r7, #28
 8003314:	4619      	mov	r1, r3
 8003316:	4856      	ldr	r0, [pc, #344]	; (8003470 <MX_GPIO_Init+0x294>)
 8003318:	f002 f8bc 	bl	8005494 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800331c:	2301      	movs	r3, #1
 800331e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003320:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003324:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003326:	2300      	movs	r3, #0
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800332a:	f107 031c 	add.w	r3, r7, #28
 800332e:	4619      	mov	r1, r3
 8003330:	4850      	ldr	r0, [pc, #320]	; (8003474 <MX_GPIO_Init+0x298>)
 8003332:	f002 f8af 	bl	8005494 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_SD_Pin */
  GPIO_InitStruct.Pin = CS_SD_Pin;
 8003336:	2308      	movs	r3, #8
 8003338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800333a:	2301      	movs	r3, #1
 800333c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333e:	2300      	movs	r3, #0
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003342:	2302      	movs	r3, #2
 8003344:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_SD_GPIO_Port, &GPIO_InitStruct);
 8003346:	f107 031c 	add.w	r3, r7, #28
 800334a:	4619      	mov	r1, r3
 800334c:	4849      	ldr	r0, [pc, #292]	; (8003474 <MX_GPIO_Init+0x298>)
 800334e:	f002 f8a1 	bl	8005494 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003352:	2310      	movs	r3, #16
 8003354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003356:	2302      	movs	r3, #2
 8003358:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335a:	2300      	movs	r3, #0
 800335c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335e:	2300      	movs	r3, #0
 8003360:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003362:	2306      	movs	r3, #6
 8003364:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003366:	f107 031c 	add.w	r3, r7, #28
 800336a:	4619      	mov	r1, r3
 800336c:	4841      	ldr	r0, [pc, #260]	; (8003474 <MX_GPIO_Init+0x298>)
 800336e:	f002 f891 	bl	8005494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003372:	2304      	movs	r3, #4
 8003374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003376:	2300      	movs	r3, #0
 8003378:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337a:	2300      	movs	r3, #0
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800337e:	f107 031c 	add.w	r3, r7, #28
 8003382:	4619      	mov	r1, r3
 8003384:	483d      	ldr	r0, [pc, #244]	; (800347c <MX_GPIO_Init+0x2a0>)
 8003386:	f002 f885 	bl	8005494 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800338a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800338e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003390:	2302      	movs	r3, #2
 8003392:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003394:	2300      	movs	r3, #0
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003398:	2300      	movs	r3, #0
 800339a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800339c:	2305      	movs	r3, #5
 800339e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80033a0:	f107 031c 	add.w	r3, r7, #28
 80033a4:	4619      	mov	r1, r3
 80033a6:	4835      	ldr	r0, [pc, #212]	; (800347c <MX_GPIO_Init+0x2a0>)
 80033a8:	f002 f874 	bl	8005494 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUT_Pin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 80033ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033b2:	2301      	movs	r3, #1
 80033b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033b6:	2301      	movs	r3, #1
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ba:	2303      	movs	r3, #3
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 80033be:	f107 031c 	add.w	r3, r7, #28
 80033c2:	4619      	mov	r1, r3
 80033c4:	482c      	ldr	r0, [pc, #176]	; (8003478 <MX_GPIO_Init+0x29c>)
 80033c6:	f002 f865 	bl	8005494 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80033ca:	f24f 0310 	movw	r3, #61456	; 0xf010
 80033ce:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033d0:	2301      	movs	r3, #1
 80033d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d8:	2300      	movs	r3, #0
 80033da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033dc:	f107 031c 	add.w	r3, r7, #28
 80033e0:	4619      	mov	r1, r3
 80033e2:	4825      	ldr	r0, [pc, #148]	; (8003478 <MX_GPIO_Init+0x29c>)
 80033e4:	f002 f856 	bl	8005494 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80033e8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80033ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ee:	2302      	movs	r3, #2
 80033f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f2:	2300      	movs	r3, #0
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f6:	2300      	movs	r3, #0
 80033f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80033fa:	2306      	movs	r3, #6
 80033fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033fe:	f107 031c 	add.w	r3, r7, #28
 8003402:	4619      	mov	r1, r3
 8003404:	481a      	ldr	r0, [pc, #104]	; (8003470 <MX_GPIO_Init+0x294>)
 8003406:	f002 f845 	bl	8005494 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800340a:	2320      	movs	r3, #32
 800340c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800340e:	2300      	movs	r3, #0
 8003410:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003412:	2300      	movs	r3, #0
 8003414:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003416:	f107 031c 	add.w	r3, r7, #28
 800341a:	4619      	mov	r1, r3
 800341c:	4816      	ldr	r0, [pc, #88]	; (8003478 <MX_GPIO_Init+0x29c>)
 800341e:	f002 f839 	bl	8005494 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8003422:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003428:	2312      	movs	r3, #18
 800342a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800342c:	2301      	movs	r3, #1
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003430:	2300      	movs	r3, #0
 8003432:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003434:	2304      	movs	r3, #4
 8003436:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003438:	f107 031c 	add.w	r3, r7, #28
 800343c:	4619      	mov	r1, r3
 800343e:	480f      	ldr	r0, [pc, #60]	; (800347c <MX_GPIO_Init+0x2a0>)
 8003440:	f002 f828 	bl	8005494 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003444:	2302      	movs	r3, #2
 8003446:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003448:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800344c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344e:	2300      	movs	r3, #0
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003452:	f107 031c 	add.w	r3, r7, #28
 8003456:	4619      	mov	r1, r3
 8003458:	4804      	ldr	r0, [pc, #16]	; (800346c <MX_GPIO_Init+0x290>)
 800345a:	f002 f81b 	bl	8005494 <HAL_GPIO_Init>

}
 800345e:	bf00      	nop
 8003460:	3730      	adds	r7, #48	; 0x30
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40023800 	.word	0x40023800
 800346c:	40021000 	.word	0x40021000
 8003470:	40020800 	.word	0x40020800
 8003474:	40020000 	.word	0x40020000
 8003478:	40020c00 	.word	0x40020c00
 800347c:	40020400 	.word	0x40020400

08003480 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// ------------------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
	if(htim==&htim7)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a08      	ldr	r2, [pc, #32]	; (80034ac <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d106      	bne.n	800349e <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		Timer7++;
 8003490:	4b07      	ldr	r3, [pc, #28]	; (80034b0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	b29b      	uxth	r3, r3
 8003496:	3301      	adds	r3, #1
 8003498:	b29a      	uxth	r2, r3
 800349a:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800349c:	801a      	strh	r2, [r3, #0]
	}
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	200016e0 	.word	0x200016e0
 80034b0:	20001874 	.word	0x20001874

080034b4 <HAL_UART_RxCpltCallback>:
// ------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
	int ggg = 99;
 80034bc:	2363      	movs	r3, #99	; 0x63
 80034be:	60fb      	str	r3, [r7, #12]
	if(huart -> Instance == USART3)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a0b      	ldr	r2, [pc, #44]	; (80034f4 <HAL_UART_RxCpltCallback+0x40>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d110      	bne.n	80034ec <HAL_UART_RxCpltCallback+0x38>
	{
		command_from_uart = uart_RX_data;
 80034ca:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <HAL_UART_RxCpltCallback+0x44>)
 80034cc:	781a      	ldrb	r2, [r3, #0]
 80034ce:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_UART_RxCpltCallback+0x48>)
 80034d0:	701a      	strb	r2, [r3, #0]

		HAL_UART_Transmit_IT(&huart3, &uart_RX_data, 1);
 80034d2:	2201      	movs	r2, #1
 80034d4:	4908      	ldr	r1, [pc, #32]	; (80034f8 <HAL_UART_RxCpltCallback+0x44>)
 80034d6:	480a      	ldr	r0, [pc, #40]	; (8003500 <HAL_UART_RxCpltCallback+0x4c>)
 80034d8:	f005 fedd 	bl	8009296 <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart3, &uart_RX_data, 1);
 80034dc:	2201      	movs	r2, #1
 80034de:	4906      	ldr	r1, [pc, #24]	; (80034f8 <HAL_UART_RxCpltCallback+0x44>)
 80034e0:	4807      	ldr	r0, [pc, #28]	; (8003500 <HAL_UART_RxCpltCallback+0x4c>)
 80034e2:	f005 ff1d 	bl	8009320 <HAL_UART_Receive_IT>

		flag_received_command = true;
 80034e6:	4b07      	ldr	r3, [pc, #28]	; (8003504 <HAL_UART_RxCpltCallback+0x50>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	701a      	strb	r2, [r3, #0]
	}
}
 80034ec:	bf00      	nop
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40004800 	.word	0x40004800
 80034f8:	20001876 	.word	0x20001876
 80034fc:	20001877 	.word	0x20001877
 8003500:	20001830 	.word	0x20001830
 8003504:	20001878 	.word	0x20001878

08003508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800350c:	b672      	cpsid	i
}
 800350e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003510:	e7fe      	b.n	8003510 <Error_Handler+0x8>
	...

08003514 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800351a:	2300      	movs	r3, #0
 800351c:	607b      	str	r3, [r7, #4]
 800351e:	4b10      	ldr	r3, [pc, #64]	; (8003560 <HAL_MspInit+0x4c>)
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	4a0f      	ldr	r2, [pc, #60]	; (8003560 <HAL_MspInit+0x4c>)
 8003524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003528:	6453      	str	r3, [r2, #68]	; 0x44
 800352a:	4b0d      	ldr	r3, [pc, #52]	; (8003560 <HAL_MspInit+0x4c>)
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003532:	607b      	str	r3, [r7, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	603b      	str	r3, [r7, #0]
 800353a:	4b09      	ldr	r3, [pc, #36]	; (8003560 <HAL_MspInit+0x4c>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	4a08      	ldr	r2, [pc, #32]	; (8003560 <HAL_MspInit+0x4c>)
 8003540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003544:	6413      	str	r3, [r2, #64]	; 0x40
 8003546:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_MspInit+0x4c>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003552:	2007      	movs	r0, #7
 8003554:	f001 fb5a 	bl	8004c0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003558:	bf00      	nop
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40023800 	.word	0x40023800

08003564 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08a      	sub	sp, #40	; 0x28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800356c:	f107 0314 	add.w	r3, r7, #20
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	60da      	str	r2, [r3, #12]
 800357a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a19      	ldr	r2, [pc, #100]	; (80035e8 <HAL_SPI_MspInit+0x84>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d12b      	bne.n	80035de <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	4b18      	ldr	r3, [pc, #96]	; (80035ec <HAL_SPI_MspInit+0x88>)
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	4a17      	ldr	r2, [pc, #92]	; (80035ec <HAL_SPI_MspInit+0x88>)
 8003590:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003594:	6453      	str	r3, [r2, #68]	; 0x44
 8003596:	4b15      	ldr	r3, [pc, #84]	; (80035ec <HAL_SPI_MspInit+0x88>)
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	4b11      	ldr	r3, [pc, #68]	; (80035ec <HAL_SPI_MspInit+0x88>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	4a10      	ldr	r2, [pc, #64]	; (80035ec <HAL_SPI_MspInit+0x88>)
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	6313      	str	r3, [r2, #48]	; 0x30
 80035b2:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <HAL_SPI_MspInit+0x88>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80035be:	23e0      	movs	r3, #224	; 0xe0
 80035c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c2:	2302      	movs	r3, #2
 80035c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ca:	2303      	movs	r3, #3
 80035cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035ce:	2305      	movs	r3, #5
 80035d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d2:	f107 0314 	add.w	r3, r7, #20
 80035d6:	4619      	mov	r1, r3
 80035d8:	4805      	ldr	r0, [pc, #20]	; (80035f0 <HAL_SPI_MspInit+0x8c>)
 80035da:	f001 ff5b 	bl	8005494 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80035de:	bf00      	nop
 80035e0:	3728      	adds	r7, #40	; 0x28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40013000 	.word	0x40013000
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40020000 	.word	0x40020000

080035f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003604:	d116      	bne.n	8003634 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	4b2e      	ldr	r3, [pc, #184]	; (80036c4 <HAL_TIM_Base_MspInit+0xd0>)
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	4a2d      	ldr	r2, [pc, #180]	; (80036c4 <HAL_TIM_Base_MspInit+0xd0>)
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	6413      	str	r3, [r2, #64]	; 0x40
 8003616:	4b2b      	ldr	r3, [pc, #172]	; (80036c4 <HAL_TIM_Base_MspInit+0xd0>)
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003622:	2200      	movs	r2, #0
 8003624:	2100      	movs	r1, #0
 8003626:	201c      	movs	r0, #28
 8003628:	f001 fafb 	bl	8004c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800362c:	201c      	movs	r0, #28
 800362e:	f001 fb14 	bl	8004c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003632:	e042      	b.n	80036ba <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a23      	ldr	r2, [pc, #140]	; (80036c8 <HAL_TIM_Base_MspInit+0xd4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d10e      	bne.n	800365c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800363e:	2300      	movs	r3, #0
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <HAL_TIM_Base_MspInit+0xd0>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	4a1f      	ldr	r2, [pc, #124]	; (80036c4 <HAL_TIM_Base_MspInit+0xd0>)
 8003648:	f043 0302 	orr.w	r3, r3, #2
 800364c:	6413      	str	r3, [r2, #64]	; 0x40
 800364e:	4b1d      	ldr	r3, [pc, #116]	; (80036c4 <HAL_TIM_Base_MspInit+0xd0>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	693b      	ldr	r3, [r7, #16]
}
 800365a:	e02e      	b.n	80036ba <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a1a      	ldr	r2, [pc, #104]	; (80036cc <HAL_TIM_Base_MspInit+0xd8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d10e      	bne.n	8003684 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	4b16      	ldr	r3, [pc, #88]	; (80036c4 <HAL_TIM_Base_MspInit+0xd0>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	4a15      	ldr	r2, [pc, #84]	; (80036c4 <HAL_TIM_Base_MspInit+0xd0>)
 8003670:	f043 0304 	orr.w	r3, r3, #4
 8003674:	6413      	str	r3, [r2, #64]	; 0x40
 8003676:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <HAL_TIM_Base_MspInit+0xd0>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
}
 8003682:	e01a      	b.n	80036ba <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM7)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a11      	ldr	r2, [pc, #68]	; (80036d0 <HAL_TIM_Base_MspInit+0xdc>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d115      	bne.n	80036ba <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800368e:	2300      	movs	r3, #0
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <HAL_TIM_Base_MspInit+0xd0>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	4a0b      	ldr	r2, [pc, #44]	; (80036c4 <HAL_TIM_Base_MspInit+0xd0>)
 8003698:	f043 0320 	orr.w	r3, r3, #32
 800369c:	6413      	str	r3, [r2, #64]	; 0x40
 800369e:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <HAL_TIM_Base_MspInit+0xd0>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	60bb      	str	r3, [r7, #8]
 80036a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80036aa:	2200      	movs	r2, #0
 80036ac:	2100      	movs	r1, #0
 80036ae:	2037      	movs	r0, #55	; 0x37
 80036b0:	f001 fab7 	bl	8004c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80036b4:	2037      	movs	r0, #55	; 0x37
 80036b6:	f001 fad0 	bl	8004c5a <HAL_NVIC_EnableIRQ>
}
 80036ba:	bf00      	nop
 80036bc:	3718      	adds	r7, #24
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40023800 	.word	0x40023800
 80036c8:	40000400 	.word	0x40000400
 80036cc:	40000800 	.word	0x40000800
 80036d0:	40001400 	.word	0x40001400

080036d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a42      	ldr	r2, [pc, #264]	; (80037ec <HAL_TIM_PWM_MspInit+0x118>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d17d      	bne.n	80037e2 <HAL_TIM_PWM_MspInit+0x10e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	4b41      	ldr	r3, [pc, #260]	; (80037f0 <HAL_TIM_PWM_MspInit+0x11c>)
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	4a40      	ldr	r2, [pc, #256]	; (80037f0 <HAL_TIM_PWM_MspInit+0x11c>)
 80036f0:	f043 0302 	orr.w	r3, r3, #2
 80036f4:	6453      	str	r3, [r2, #68]	; 0x44
 80036f6:	4b3e      	ldr	r3, [pc, #248]	; (80037f0 <HAL_TIM_PWM_MspInit+0x11c>)
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 DMA Init */
    /* TIM8_CH3 Init */
    hdma_tim8_ch3.Instance = DMA2_Stream4;
 8003702:	4b3c      	ldr	r3, [pc, #240]	; (80037f4 <HAL_TIM_PWM_MspInit+0x120>)
 8003704:	4a3c      	ldr	r2, [pc, #240]	; (80037f8 <HAL_TIM_PWM_MspInit+0x124>)
 8003706:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch3.Init.Channel = DMA_CHANNEL_7;
 8003708:	4b3a      	ldr	r3, [pc, #232]	; (80037f4 <HAL_TIM_PWM_MspInit+0x120>)
 800370a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800370e:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003710:	4b38      	ldr	r3, [pc, #224]	; (80037f4 <HAL_TIM_PWM_MspInit+0x120>)
 8003712:	2240      	movs	r2, #64	; 0x40
 8003714:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003716:	4b37      	ldr	r3, [pc, #220]	; (80037f4 <HAL_TIM_PWM_MspInit+0x120>)
 8003718:	2200      	movs	r2, #0
 800371a:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800371c:	4b35      	ldr	r3, [pc, #212]	; (80037f4 <HAL_TIM_PWM_MspInit+0x120>)
 800371e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003722:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003724:	4b33      	ldr	r3, [pc, #204]	; (80037f4 <HAL_TIM_PWM_MspInit+0x120>)
 8003726:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800372a:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800372c:	4b31      	ldr	r3, [pc, #196]	; (80037f4 <HAL_TIM_PWM_MspInit+0x120>)
 800372e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003732:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch3.Init.Mode = DMA_CIRCULAR;
 8003734:	4b2f      	ldr	r3, [pc, #188]	; (80037f4 <HAL_TIM_PWM_MspInit+0x120>)
 8003736:	f44f 7280 	mov.w	r2, #256	; 0x100
 800373a:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 800373c:	4b2d      	ldr	r3, [pc, #180]	; (80037f4 <HAL_TIM_PWM_MspInit+0x120>)
 800373e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003742:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003744:	4b2b      	ldr	r3, [pc, #172]	; (80037f4 <HAL_TIM_PWM_MspInit+0x120>)
 8003746:	2200      	movs	r2, #0
 8003748:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch3) != HAL_OK)
 800374a:	482a      	ldr	r0, [pc, #168]	; (80037f4 <HAL_TIM_PWM_MspInit+0x120>)
 800374c:	f001 faa0 	bl	8004c90 <HAL_DMA_Init>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_TIM_PWM_MspInit+0x86>
    {
      Error_Handler();
 8003756:	f7ff fed7 	bl	8003508 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a25      	ldr	r2, [pc, #148]	; (80037f4 <HAL_TIM_PWM_MspInit+0x120>)
 800375e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003760:	4a24      	ldr	r2, [pc, #144]	; (80037f4 <HAL_TIM_PWM_MspInit+0x120>)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM8_CH4_TRIG_COM Init */
    hdma_tim8_ch4_trig_com.Instance = DMA2_Stream7;
 8003766:	4b25      	ldr	r3, [pc, #148]	; (80037fc <HAL_TIM_PWM_MspInit+0x128>)
 8003768:	4a25      	ldr	r2, [pc, #148]	; (8003800 <HAL_TIM_PWM_MspInit+0x12c>)
 800376a:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch4_trig_com.Init.Channel = DMA_CHANNEL_7;
 800376c:	4b23      	ldr	r3, [pc, #140]	; (80037fc <HAL_TIM_PWM_MspInit+0x128>)
 800376e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003772:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003774:	4b21      	ldr	r3, [pc, #132]	; (80037fc <HAL_TIM_PWM_MspInit+0x128>)
 8003776:	2240      	movs	r2, #64	; 0x40
 8003778:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 800377a:	4b20      	ldr	r3, [pc, #128]	; (80037fc <HAL_TIM_PWM_MspInit+0x128>)
 800377c:	2200      	movs	r2, #0
 800377e:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8003780:	4b1e      	ldr	r3, [pc, #120]	; (80037fc <HAL_TIM_PWM_MspInit+0x128>)
 8003782:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003786:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003788:	4b1c      	ldr	r3, [pc, #112]	; (80037fc <HAL_TIM_PWM_MspInit+0x128>)
 800378a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800378e:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003790:	4b1a      	ldr	r3, [pc, #104]	; (80037fc <HAL_TIM_PWM_MspInit+0x128>)
 8003792:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003796:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 8003798:	4b18      	ldr	r3, [pc, #96]	; (80037fc <HAL_TIM_PWM_MspInit+0x128>)
 800379a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800379e:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 80037a0:	4b16      	ldr	r3, [pc, #88]	; (80037fc <HAL_TIM_PWM_MspInit+0x128>)
 80037a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037a6:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037a8:	4b14      	ldr	r3, [pc, #80]	; (80037fc <HAL_TIM_PWM_MspInit+0x128>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch4_trig_com) != HAL_OK)
 80037ae:	4813      	ldr	r0, [pc, #76]	; (80037fc <HAL_TIM_PWM_MspInit+0x128>)
 80037b0:	f001 fa6e 	bl	8004c90 <HAL_DMA_Init>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_TIM_PWM_MspInit+0xea>
    {
      Error_Handler();
 80037ba:	f7ff fea5 	bl	8003508 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim8_ch4_trig_com);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a0e      	ldr	r2, [pc, #56]	; (80037fc <HAL_TIM_PWM_MspInit+0x128>)
 80037c2:	631a      	str	r2, [r3, #48]	; 0x30
 80037c4:	4a0d      	ldr	r2, [pc, #52]	; (80037fc <HAL_TIM_PWM_MspInit+0x128>)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim8_ch4_trig_com);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a0b      	ldr	r2, [pc, #44]	; (80037fc <HAL_TIM_PWM_MspInit+0x128>)
 80037ce:	639a      	str	r2, [r3, #56]	; 0x38
 80037d0:	4a0a      	ldr	r2, [pc, #40]	; (80037fc <HAL_TIM_PWM_MspInit+0x128>)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim8_ch4_trig_com);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a08      	ldr	r2, [pc, #32]	; (80037fc <HAL_TIM_PWM_MspInit+0x128>)
 80037da:	635a      	str	r2, [r3, #52]	; 0x34
 80037dc:	4a07      	ldr	r2, [pc, #28]	; (80037fc <HAL_TIM_PWM_MspInit+0x128>)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80037e2:	bf00      	nop
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40010400 	.word	0x40010400
 80037f0:	40023800 	.word	0x40023800
 80037f4:	20001770 	.word	0x20001770
 80037f8:	40026470 	.word	0x40026470
 80037fc:	200017d0 	.word	0x200017d0
 8003800:	400264b8 	.word	0x400264b8

08003804 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b08e      	sub	sp, #56	; 0x38
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800380c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	605a      	str	r2, [r3, #4]
 8003816:	609a      	str	r2, [r3, #8]
 8003818:	60da      	str	r2, [r3, #12]
 800381a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003824:	d13e      	bne.n	80038a4 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003826:	2300      	movs	r3, #0
 8003828:	623b      	str	r3, [r7, #32]
 800382a:	4b66      	ldr	r3, [pc, #408]	; (80039c4 <HAL_TIM_MspPostInit+0x1c0>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	4a65      	ldr	r2, [pc, #404]	; (80039c4 <HAL_TIM_MspPostInit+0x1c0>)
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	6313      	str	r3, [r2, #48]	; 0x30
 8003836:	4b63      	ldr	r3, [pc, #396]	; (80039c4 <HAL_TIM_MspPostInit+0x1c0>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	623b      	str	r3, [r7, #32]
 8003840:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	4b5f      	ldr	r3, [pc, #380]	; (80039c4 <HAL_TIM_MspPostInit+0x1c0>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	4a5e      	ldr	r2, [pc, #376]	; (80039c4 <HAL_TIM_MspPostInit+0x1c0>)
 800384c:	f043 0302 	orr.w	r3, r3, #2
 8003850:	6313      	str	r3, [r2, #48]	; 0x30
 8003852:	4b5c      	ldr	r3, [pc, #368]	; (80039c4 <HAL_TIM_MspPostInit+0x1c0>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	61fb      	str	r3, [r7, #28]
 800385c:	69fb      	ldr	r3, [r7, #28]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15;
 800385e:	f248 0306 	movw	r3, #32774	; 0x8006
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003864:	2302      	movs	r3, #2
 8003866:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003868:	2300      	movs	r3, #0
 800386a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800386c:	2300      	movs	r3, #0
 800386e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003870:	2301      	movs	r3, #1
 8003872:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003878:	4619      	mov	r1, r3
 800387a:	4853      	ldr	r0, [pc, #332]	; (80039c8 <HAL_TIM_MspPostInit+0x1c4>)
 800387c:	f001 fe0a 	bl	8005494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003880:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003886:	2302      	movs	r3, #2
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388a:	2300      	movs	r3, #0
 800388c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800388e:	2300      	movs	r3, #0
 8003890:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003892:	2301      	movs	r3, #1
 8003894:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800389a:	4619      	mov	r1, r3
 800389c:	484b      	ldr	r0, [pc, #300]	; (80039cc <HAL_TIM_MspPostInit+0x1c8>)
 800389e:	f001 fdf9 	bl	8005494 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80038a2:	e08a      	b.n	80039ba <HAL_TIM_MspPostInit+0x1b6>
  else if(htim->Instance==TIM3)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a49      	ldr	r2, [pc, #292]	; (80039d0 <HAL_TIM_MspPostInit+0x1cc>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d13c      	bne.n	8003928 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ae:	2300      	movs	r3, #0
 80038b0:	61bb      	str	r3, [r7, #24]
 80038b2:	4b44      	ldr	r3, [pc, #272]	; (80039c4 <HAL_TIM_MspPostInit+0x1c0>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	4a43      	ldr	r2, [pc, #268]	; (80039c4 <HAL_TIM_MspPostInit+0x1c0>)
 80038b8:	f043 0302 	orr.w	r3, r3, #2
 80038bc:	6313      	str	r3, [r2, #48]	; 0x30
 80038be:	4b41      	ldr	r3, [pc, #260]	; (80039c4 <HAL_TIM_MspPostInit+0x1c0>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	61bb      	str	r3, [r7, #24]
 80038c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	4b3d      	ldr	r3, [pc, #244]	; (80039c4 <HAL_TIM_MspPostInit+0x1c0>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	4a3c      	ldr	r2, [pc, #240]	; (80039c4 <HAL_TIM_MspPostInit+0x1c0>)
 80038d4:	f043 0304 	orr.w	r3, r3, #4
 80038d8:	6313      	str	r3, [r2, #48]	; 0x30
 80038da:	4b3a      	ldr	r3, [pc, #232]	; (80039c4 <HAL_TIM_MspPostInit+0x1c0>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 80038e6:	2323      	movs	r3, #35	; 0x23
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ea:	2302      	movs	r3, #2
 80038ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f2:	2300      	movs	r3, #0
 80038f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80038f6:	2302      	movs	r3, #2
 80038f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038fe:	4619      	mov	r1, r3
 8003900:	4832      	ldr	r0, [pc, #200]	; (80039cc <HAL_TIM_MspPostInit+0x1c8>)
 8003902:	f001 fdc7 	bl	8005494 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003906:	2340      	movs	r3, #64	; 0x40
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390a:	2302      	movs	r3, #2
 800390c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390e:	2300      	movs	r3, #0
 8003910:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003912:	2300      	movs	r3, #0
 8003914:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003916:	2302      	movs	r3, #2
 8003918:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800391a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800391e:	4619      	mov	r1, r3
 8003920:	482c      	ldr	r0, [pc, #176]	; (80039d4 <HAL_TIM_MspPostInit+0x1d0>)
 8003922:	f001 fdb7 	bl	8005494 <HAL_GPIO_Init>
}
 8003926:	e048      	b.n	80039ba <HAL_TIM_MspPostInit+0x1b6>
  else if(htim->Instance==TIM4)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a2a      	ldr	r2, [pc, #168]	; (80039d8 <HAL_TIM_MspPostInit+0x1d4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d11f      	bne.n	8003972 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003932:	2300      	movs	r3, #0
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	4b23      	ldr	r3, [pc, #140]	; (80039c4 <HAL_TIM_MspPostInit+0x1c0>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	4a22      	ldr	r2, [pc, #136]	; (80039c4 <HAL_TIM_MspPostInit+0x1c0>)
 800393c:	f043 0302 	orr.w	r3, r3, #2
 8003940:	6313      	str	r3, [r2, #48]	; 0x30
 8003942:	4b20      	ldr	r3, [pc, #128]	; (80039c4 <HAL_TIM_MspPostInit+0x1c0>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	613b      	str	r3, [r7, #16]
 800394c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800394e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003952:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003954:	2302      	movs	r3, #2
 8003956:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003958:	2300      	movs	r3, #0
 800395a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800395c:	2300      	movs	r3, #0
 800395e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003960:	2302      	movs	r3, #2
 8003962:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003968:	4619      	mov	r1, r3
 800396a:	4818      	ldr	r0, [pc, #96]	; (80039cc <HAL_TIM_MspPostInit+0x1c8>)
 800396c:	f001 fd92 	bl	8005494 <HAL_GPIO_Init>
}
 8003970:	e023      	b.n	80039ba <HAL_TIM_MspPostInit+0x1b6>
  else if(htim->Instance==TIM8)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a19      	ldr	r2, [pc, #100]	; (80039dc <HAL_TIM_MspPostInit+0x1d8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d11e      	bne.n	80039ba <HAL_TIM_MspPostInit+0x1b6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	4b10      	ldr	r3, [pc, #64]	; (80039c4 <HAL_TIM_MspPostInit+0x1c0>)
 8003982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003984:	4a0f      	ldr	r2, [pc, #60]	; (80039c4 <HAL_TIM_MspPostInit+0x1c0>)
 8003986:	f043 0304 	orr.w	r3, r3, #4
 800398a:	6313      	str	r3, [r2, #48]	; 0x30
 800398c:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <HAL_TIM_MspPostInit+0x1c0>)
 800398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	60fb      	str	r3, [r7, #12]
 8003996:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003998:	f44f 7340 	mov.w	r3, #768	; 0x300
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800399e:	2302      	movs	r3, #2
 80039a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a6:	2303      	movs	r3, #3
 80039a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80039aa:	2303      	movs	r3, #3
 80039ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039b2:	4619      	mov	r1, r3
 80039b4:	4807      	ldr	r0, [pc, #28]	; (80039d4 <HAL_TIM_MspPostInit+0x1d0>)
 80039b6:	f001 fd6d 	bl	8005494 <HAL_GPIO_Init>
}
 80039ba:	bf00      	nop
 80039bc:	3738      	adds	r7, #56	; 0x38
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40023800 	.word	0x40023800
 80039c8:	40020000 	.word	0x40020000
 80039cc:	40020400 	.word	0x40020400
 80039d0:	40000400 	.word	0x40000400
 80039d4:	40020800 	.word	0x40020800
 80039d8:	40000800 	.word	0x40000800
 80039dc:	40010400 	.word	0x40010400

080039e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08a      	sub	sp, #40	; 0x28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e8:	f107 0314 	add.w	r3, r7, #20
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	605a      	str	r2, [r3, #4]
 80039f2:	609a      	str	r2, [r3, #8]
 80039f4:	60da      	str	r2, [r3, #12]
 80039f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a1d      	ldr	r2, [pc, #116]	; (8003a74 <HAL_UART_MspInit+0x94>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d134      	bne.n	8003a6c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	613b      	str	r3, [r7, #16]
 8003a06:	4b1c      	ldr	r3, [pc, #112]	; (8003a78 <HAL_UART_MspInit+0x98>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	4a1b      	ldr	r2, [pc, #108]	; (8003a78 <HAL_UART_MspInit+0x98>)
 8003a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a10:	6413      	str	r3, [r2, #64]	; 0x40
 8003a12:	4b19      	ldr	r3, [pc, #100]	; (8003a78 <HAL_UART_MspInit+0x98>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a1a:	613b      	str	r3, [r7, #16]
 8003a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	4b15      	ldr	r3, [pc, #84]	; (8003a78 <HAL_UART_MspInit+0x98>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	4a14      	ldr	r2, [pc, #80]	; (8003a78 <HAL_UART_MspInit+0x98>)
 8003a28:	f043 0308 	orr.w	r3, r3, #8
 8003a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a2e:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <HAL_UART_MspInit+0x98>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a40:	2302      	movs	r3, #2
 8003a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a4c:	2307      	movs	r3, #7
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a50:	f107 0314 	add.w	r3, r7, #20
 8003a54:	4619      	mov	r1, r3
 8003a56:	4809      	ldr	r0, [pc, #36]	; (8003a7c <HAL_UART_MspInit+0x9c>)
 8003a58:	f001 fd1c 	bl	8005494 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2100      	movs	r1, #0
 8003a60:	2027      	movs	r0, #39	; 0x27
 8003a62:	f001 f8de 	bl	8004c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003a66:	2027      	movs	r0, #39	; 0x27
 8003a68:	f001 f8f7 	bl	8004c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003a6c:	bf00      	nop
 8003a6e:	3728      	adds	r7, #40	; 0x28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40004800 	.word	0x40004800
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	40020c00 	.word	0x40020c00

08003a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a84:	e7fe      	b.n	8003a84 <NMI_Handler+0x4>

08003a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a86:	b480      	push	{r7}
 8003a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a8a:	e7fe      	b.n	8003a8a <HardFault_Handler+0x4>

08003a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a90:	e7fe      	b.n	8003a90 <MemManage_Handler+0x4>

08003a92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a92:	b480      	push	{r7}
 8003a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a96:	e7fe      	b.n	8003a96 <BusFault_Handler+0x4>

08003a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a9c:	e7fe      	b.n	8003a9c <UsageFault_Handler+0x4>

08003a9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003aa2:	bf00      	nop
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ab0:	bf00      	nop
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003aba:	b480      	push	{r7}
 8003abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003abe:	bf00      	nop
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003acc:	f000 ff8a 	bl	80049e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ad0:	bf00      	nop
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//HAL_GPIO_TogglePin(GPIOD,LD4_Pin);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003ad8:	4802      	ldr	r0, [pc, #8]	; (8003ae4 <TIM2_IRQHandler+0x10>)
 8003ada:	f004 fbff 	bl	80082dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20001608 	.word	0x20001608

08003ae8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003aec:	4802      	ldr	r0, [pc, #8]	; (8003af8 <USART3_IRQHandler+0x10>)
 8003aee:	f005 fc47 	bl	8009380 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003af2:	bf00      	nop
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20001830 	.word	0x20001830

08003afc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	// HAL_GPIO_TogglePin(GPIOD,LD4_Pin);
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003b00:	4802      	ldr	r0, [pc, #8]	; (8003b0c <TIM7_IRQHandler+0x10>)
 8003b02:	f004 fbeb 	bl	80082dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003b06:	bf00      	nop
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	200016e0 	.word	0x200016e0

08003b10 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch3);
 8003b14:	4802      	ldr	r0, [pc, #8]	; (8003b20 <DMA2_Stream4_IRQHandler+0x10>)
 8003b16:	f001 fa53 	bl	8004fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003b1a:	bf00      	nop
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	20001770 	.word	0x20001770

08003b24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003b28:	4802      	ldr	r0, [pc, #8]	; (8003b34 <OTG_FS_IRQHandler+0x10>)
 8003b2a:	f002 f8d3 	bl	8005cd4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003b2e:	bf00      	nop
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	20003260 	.word	0x20003260

08003b38 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch4_trig_com);
 8003b3c:	4802      	ldr	r0, [pc, #8]	; (8003b48 <DMA2_Stream7_IRQHandler+0x10>)
 8003b3e:	f001 fa3f 	bl	8004fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003b42:	bf00      	nop
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	200017d0 	.word	0x200017d0

08003b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b54:	4a14      	ldr	r2, [pc, #80]	; (8003ba8 <_sbrk+0x5c>)
 8003b56:	4b15      	ldr	r3, [pc, #84]	; (8003bac <_sbrk+0x60>)
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b60:	4b13      	ldr	r3, [pc, #76]	; (8003bb0 <_sbrk+0x64>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d102      	bne.n	8003b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b68:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <_sbrk+0x64>)
 8003b6a:	4a12      	ldr	r2, [pc, #72]	; (8003bb4 <_sbrk+0x68>)
 8003b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b6e:	4b10      	ldr	r3, [pc, #64]	; (8003bb0 <_sbrk+0x64>)
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4413      	add	r3, r2
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d207      	bcs.n	8003b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b7c:	f00d fc84 	bl	8011488 <__errno>
 8003b80:	4603      	mov	r3, r0
 8003b82:	220c      	movs	r2, #12
 8003b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b8a:	e009      	b.n	8003ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b8c:	4b08      	ldr	r3, [pc, #32]	; (8003bb0 <_sbrk+0x64>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b92:	4b07      	ldr	r3, [pc, #28]	; (8003bb0 <_sbrk+0x64>)
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4413      	add	r3, r2
 8003b9a:	4a05      	ldr	r2, [pc, #20]	; (8003bb0 <_sbrk+0x64>)
 8003b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	20020000 	.word	0x20020000
 8003bac:	00000400 	.word	0x00000400
 8003bb0:	2000187c 	.word	0x2000187c
 8003bb4:	20003578 	.word	0x20003578

08003bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <SystemInit+0x20>)
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc2:	4a05      	ldr	r2, [pc, #20]	; (8003bd8 <SystemInit+0x20>)
 8003bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bcc:	bf00      	nop
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	e000ed00 	.word	0xe000ed00

08003bdc <SD_SPI_Init>:


/***	FUNCTIONS	***********************************************************************************************************************************************************************************/
/******************************************************************************************************************************************************************************************************/
uint8_t SD_SPI_Init(void)
{
 8003bdc:	b590      	push	{r4, r7, lr}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
	uint8_t vCmd;
	int16_t vCounter;
	//uint32_t vTmpPrc;
	sdinfo.type = 0;
 8003be2:	4b6b      	ldr	r3, [pc, #428]	; (8003d90 <SD_SPI_Init+0x1b4>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	701a      	strb	r2, [r3, #0]
	uint8_t aArray[4];

	HAL_Delay(250);														// SD voltage stability delay
 8003be8:	20fa      	movs	r0, #250	; 0xfa
 8003bea:	f000 ff1b 	bl	8004a24 <HAL_Delay>

	/*vTmpPrc = hspi2.Init.BaudRatePrescaler;
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128; 		//156.25 kbbs*/

	HAL_SPI_Init(&hspi1);
 8003bee:	4869      	ldr	r0, [pc, #420]	; (8003d94 <SD_SPI_Init+0x1b8>)
 8003bf0:	f003 fea8 	bl	8007944 <HAL_SPI_Init>

	SD_DESELECT;
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	2108      	movs	r1, #8
 8003bf8:	4867      	ldr	r0, [pc, #412]	; (8003d98 <SD_SPI_Init+0x1bc>)
 8003bfa:	f001 fde7 	bl	80057cc <HAL_GPIO_WritePin>
	for(vCounter = 0; vCounter<10; vCounter++) // 80 pulse bit. Set SPI as SD card interface
 8003bfe:	2300      	movs	r3, #0
 8003c00:	80bb      	strh	r3, [r7, #4]
 8003c02:	e007      	b.n	8003c14 <SD_SPI_Init+0x38>
		SPI_Release();
 8003c04:	f000 f902 	bl	8003e0c <SPI_Release>
	for(vCounter = 0; vCounter<10; vCounter++) // 80 pulse bit. Set SPI as SD card interface
 8003c08:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	3301      	adds	r3, #1
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	80bb      	strh	r3, [r7, #4]
 8003c14:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c18:	2b09      	cmp	r3, #9
 8003c1a:	ddf3      	ble.n	8003c04 <SD_SPI_Init+0x28>

	/*hspi2.Init.BaudRatePrescaler = vTmpPrc;
	HAL_SPI_Init(&hspi2);*/

	SD_SELECT;
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2108      	movs	r1, #8
 8003c20:	485d      	ldr	r0, [pc, #372]	; (8003d98 <SD_SPI_Init+0x1bc>)
 8003c22:	f001 fdd3 	bl	80057cc <HAL_GPIO_WritePin>
	if (SD_SPI_Cmd(CMD0, 0) == 1) // Enter Idle state
 8003c26:	2100      	movs	r1, #0
 8003c28:	2040      	movs	r0, #64	; 0x40
 8003c2a:	f000 f91b 	bl	8003e64 <SD_SPI_Cmd>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	f040 80a5 	bne.w	8003d80 <SD_SPI_Init+0x1a4>
		{
			SPI_Release();
 8003c36:	f000 f8e9 	bl	8003e0c <SPI_Release>
			if (SD_SPI_Cmd(CMD8, 0x1AA) == 1) // SDv2
 8003c3a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003c3e:	2048      	movs	r0, #72	; 0x48
 8003c40:	f000 f910 	bl	8003e64 <SD_SPI_Cmd>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d162      	bne.n	8003d10 <SD_SPI_Init+0x134>
				{
					for (vCounter = 0; vCounter < 4; vCounter++)
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	80bb      	strh	r3, [r7, #4]
 8003c4e:	e010      	b.n	8003c72 <SD_SPI_Init+0x96>
						aArray[vCounter] = SPI_ReceiveByte();
 8003c50:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003c54:	f000 f8cd 	bl	8003df2 <SPI_ReceiveByte>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	f104 0308 	add.w	r3, r4, #8
 8003c60:	443b      	add	r3, r7
 8003c62:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (vCounter = 0; vCounter < 4; vCounter++)
 8003c66:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	80bb      	strh	r3, [r7, #4]
 8003c72:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c76:	2b03      	cmp	r3, #3
 8003c78:	ddea      	ble.n	8003c50 <SD_SPI_Init+0x74>
					if (aArray[2] == 0x01 && aArray[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8003c7a:	78bb      	ldrb	r3, [r7, #2]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	f040 8081 	bne.w	8003d84 <SD_SPI_Init+0x1a8>
 8003c82:	78fb      	ldrb	r3, [r7, #3]
 8003c84:	2baa      	cmp	r3, #170	; 0xaa
 8003c86:	d17d      	bne.n	8003d84 <SD_SPI_Init+0x1a8>
						{
							for (vCounter = 12000; (vCounter && SD_SPI_Cmd(ACMD41, 1UL << 30)); vCounter--)	{;}	 // Wait for leaving idle state (ACMD41 with HCS bit)
 8003c88:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8003c8c:	80bb      	strh	r3, [r7, #4]
 8003c8e:	e005      	b.n	8003c9c <SD_SPI_Init+0xc0>
 8003c90:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	3b01      	subs	r3, #1
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	80bb      	strh	r3, [r7, #4]
 8003c9c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d007      	beq.n	8003cb4 <SD_SPI_Init+0xd8>
 8003ca4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003ca8:	20e9      	movs	r0, #233	; 0xe9
 8003caa:	f000 f8db 	bl	8003e64 <SD_SPI_Cmd>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1ed      	bne.n	8003c90 <SD_SPI_Init+0xb4>
							if (vCounter && SD_SPI_Cmd(CMD58, 0) == 0)
 8003cb4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d063      	beq.n	8003d84 <SD_SPI_Init+0x1a8>
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	207a      	movs	r0, #122	; 0x7a
 8003cc0:	f000 f8d0 	bl	8003e64 <SD_SPI_Cmd>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d15c      	bne.n	8003d84 <SD_SPI_Init+0x1a8>
								{ // Check CCS bit in the OCR
									for (vCounter = 0; vCounter < 4; vCounter++) 	aArray[vCounter] = SPI_ReceiveByte();
 8003cca:	2300      	movs	r3, #0
 8003ccc:	80bb      	strh	r3, [r7, #4]
 8003cce:	e010      	b.n	8003cf2 <SD_SPI_Init+0x116>
 8003cd0:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003cd4:	f000 f88d 	bl	8003df2 <SPI_ReceiveByte>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f104 0308 	add.w	r3, r4, #8
 8003ce0:	443b      	add	r3, r7
 8003ce2:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003ce6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3301      	adds	r3, #1
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	80bb      	strh	r3, [r7, #4]
 8003cf2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	ddea      	ble.n	8003cd0 <SD_SPI_Init+0xf4>
									sdinfo.type = (aArray[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 8003cfa:	783b      	ldrb	r3, [r7, #0]
 8003cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <SD_SPI_Init+0x12c>
 8003d04:	220c      	movs	r2, #12
 8003d06:	e000      	b.n	8003d0a <SD_SPI_Init+0x12e>
 8003d08:	2204      	movs	r2, #4
 8003d0a:	4b21      	ldr	r3, [pc, #132]	; (8003d90 <SD_SPI_Init+0x1b4>)
 8003d0c:	701a      	strb	r2, [r3, #0]
 8003d0e:	e039      	b.n	8003d84 <SD_SPI_Init+0x1a8>
								}
						}
				}
			else		//SDv1 or MMCv3
				{
					if (SD_SPI_Cmd(ACMD41, 0) <= 1)
 8003d10:	2100      	movs	r1, #0
 8003d12:	20e9      	movs	r0, #233	; 0xe9
 8003d14:	f000 f8a6 	bl	8003e64 <SD_SPI_Cmd>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d805      	bhi.n	8003d2a <SD_SPI_Init+0x14e>
						{
							sdinfo.type = CT_SD1; vCmd = ACMD41; // SDv1
 8003d1e:	4b1c      	ldr	r3, [pc, #112]	; (8003d90 <SD_SPI_Init+0x1b4>)
 8003d20:	2202      	movs	r2, #2
 8003d22:	701a      	strb	r2, [r3, #0]
 8003d24:	23e9      	movs	r3, #233	; 0xe9
 8003d26:	71fb      	strb	r3, [r7, #7]
 8003d28:	e004      	b.n	8003d34 <SD_SPI_Init+0x158>
						}
						else
						{
							sdinfo.type = CT_MMC; vCmd = CMD1; // MMCv3
 8003d2a:	4b19      	ldr	r3, [pc, #100]	; (8003d90 <SD_SPI_Init+0x1b4>)
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	701a      	strb	r2, [r3, #0]
 8003d30:	2341      	movs	r3, #65	; 0x41
 8003d32:	71fb      	strb	r3, [r7, #7]
						}
					for (vCounter = 25000; vCounter && SD_SPI_Cmd(vCmd, 0); vCounter--) ; // Wait for leaving idle state
 8003d34:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8003d38:	80bb      	strh	r3, [r7, #4]
 8003d3a:	e005      	b.n	8003d48 <SD_SPI_Init+0x16c>
 8003d3c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	80bb      	strh	r3, [r7, #4]
 8003d48:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d007      	beq.n	8003d60 <SD_SPI_Init+0x184>
 8003d50:	79fb      	ldrb	r3, [r7, #7]
 8003d52:	2100      	movs	r1, #0
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 f885 	bl	8003e64 <SD_SPI_Cmd>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1ed      	bne.n	8003d3c <SD_SPI_Init+0x160>
					if ( ! vCounter || SD_SPI_Cmd(CMD16, 512) != 0) // Set R/W block length to 512
 8003d60:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d007      	beq.n	8003d78 <SD_SPI_Init+0x19c>
 8003d68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d6c:	2050      	movs	r0, #80	; 0x50
 8003d6e:	f000 f879 	bl	8003e64 <SD_SPI_Cmd>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d005      	beq.n	8003d84 <SD_SPI_Init+0x1a8>
					sdinfo.type = 0;
 8003d78:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <SD_SPI_Init+0x1b4>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	701a      	strb	r2, [r3, #0]
 8003d7e:	e001      	b.n	8003d84 <SD_SPI_Init+0x1a8>
				}
		}
	else
		{
			return 1;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <SD_SPI_Init+0x1aa>
		}

	return 0;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd90      	pop	{r4, r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	200028b8 	.word	0x200028b8
 8003d94:	200015b0 	.word	0x200015b0
 8003d98:	40020000 	.word	0x40020000

08003d9c <SPIx_WriteRead>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SPIx_WriteRead(uint8_t byte)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af02      	add	r7, sp, #8
 8003da2:	4603      	mov	r3, r0
 8003da4:	71fb      	strb	r3, [r7, #7]
  uint8_t vReceivedByte = 0;
 8003da6:	2300      	movs	r3, #0
 8003da8:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &byte, (uint8_t*) &vReceivedByte, 1, 0x1000) != HAL_OK)
 8003daa:	f107 020f 	add.w	r2, r7, #15
 8003dae:	1df9      	adds	r1, r7, #7
 8003db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	2301      	movs	r3, #1
 8003db8:	4806      	ldr	r0, [pc, #24]	; (8003dd4 <SPIx_WriteRead+0x38>)
 8003dba:	f003 fe4c 	bl	8007a56 <HAL_SPI_TransmitReceive>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <SPIx_WriteRead+0x2c>
  {
  	SD_Error_Handler();
 8003dc4:	f000 fa40 	bl	8004248 <SD_Error_Handler>
  }
  return vReceivedByte;
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	200015b0 	.word	0x200015b0

08003dd8 <SPI_SendByte>:

/****************************************************************************************************************/
/****************************************************************************************************************/
void SPI_SendByte(uint8_t byte)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	71fb      	strb	r3, [r7, #7]
  SPIx_WriteRead(byte);
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff ffd9 	bl	8003d9c <SPIx_WriteRead>
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <SPI_ReceiveByte>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SPI_ReceiveByte(void)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b082      	sub	sp, #8
 8003df6:	af00      	add	r7, sp, #0
  uint8_t byte = SPIx_WriteRead(0xFF);
 8003df8:	20ff      	movs	r0, #255	; 0xff
 8003dfa:	f7ff ffcf 	bl	8003d9c <SPIx_WriteRead>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	71fb      	strb	r3, [r7, #7]
  return byte;
 8003e02:	79fb      	ldrb	r3, [r7, #7]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <SPI_Release>:

/****************************************************************************************************************/
/****************************************************************************************************************/
void SPI_Release(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  SPIx_WriteRead(0xFF);
 8003e10:	20ff      	movs	r0, #255	; 0xff
 8003e12:	f7ff ffc3 	bl	8003d9c <SPIx_WriteRead>
}
 8003e16:	bf00      	nop
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <SD_SPI_WaitingForReadiness>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_WaitingForReadiness(void)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b082      	sub	sp, #8
 8003e1e:	af00      	add	r7, sp, #0
	uint8_t vResult;
	uint16_t vCount = 0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	80fb      	strh	r3, [r7, #6]

	do {
		vResult = SPI_ReceiveByte();
 8003e24:	f7ff ffe5 	bl	8003df2 <SPI_ReceiveByte>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	717b      	strb	r3, [r7, #5]
		vCount++;
 8003e2c:	88fb      	ldrh	r3, [r7, #6]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	80fb      	strh	r3, [r7, #6]
	} while ( (vResult != 0xFF) && (vCount < 0xFFFF) );
 8003e32:	797b      	ldrb	r3, [r7, #5]
 8003e34:	2bff      	cmp	r3, #255	; 0xff
 8003e36:	d004      	beq.n	8003e42 <SD_SPI_WaitingForReadiness+0x28>
 8003e38:	88fb      	ldrh	r3, [r7, #6]
 8003e3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d1f0      	bne.n	8003e24 <SD_SPI_WaitingForReadiness+0xa>

	if (vCount >= 0xFFFF) return ERROR;
 8003e42:	88fb      	ldrh	r3, [r7, #6]
 8003e44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d101      	bne.n	8003e50 <SD_SPI_WaitingForReadiness+0x36>
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e005      	b.n	8003e5c <SD_SPI_WaitingForReadiness+0x42>

	  return (vResult == 0xFF) ? OK: ERROR;
 8003e50:	797b      	ldrb	r3, [r7, #5]
 8003e52:	2bff      	cmp	r3, #255	; 0xff
 8003e54:	bf14      	ite	ne
 8003e56:	2301      	movne	r3, #1
 8003e58:	2300      	moveq	r3, #0
 8003e5a:	b2db      	uxtb	r3, r3
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <SD_SPI_Cmd>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_Cmd(uint8_t cmd, uint32_t argument)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	6039      	str	r1, [r7, #0]
 8003e6e:	71fb      	strb	r3, [r7, #7]
  uint8_t vByte, vResult;

	// ACMD is the command sequence of CMD55-CMD?
	if (cmd & 0x80)
 8003e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	da0e      	bge.n	8003e96 <SD_SPI_Cmd+0x32>
	{
		cmd &= 0x7F;
 8003e78:	79fb      	ldrb	r3, [r7, #7]
 8003e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e7e:	71fb      	strb	r3, [r7, #7]
		vResult = SD_SPI_Cmd(CMD55, 0);
 8003e80:	2100      	movs	r1, #0
 8003e82:	2077      	movs	r0, #119	; 0x77
 8003e84:	f7ff ffee 	bl	8003e64 <SD_SPI_Cmd>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	73bb      	strb	r3, [r7, #14]
		if (vResult > 1) return vResult;
 8003e8c:	7bbb      	ldrb	r3, [r7, #14]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d901      	bls.n	8003e96 <SD_SPI_Cmd+0x32>
 8003e92:	7bbb      	ldrb	r3, [r7, #14]
 8003e94:	e049      	b.n	8003f2a <SD_SPI_Cmd+0xc6>
	}

	// Select the card
	SD_DESELECT;
 8003e96:	2201      	movs	r2, #1
 8003e98:	2108      	movs	r1, #8
 8003e9a:	4826      	ldr	r0, [pc, #152]	; (8003f34 <SD_SPI_Cmd+0xd0>)
 8003e9c:	f001 fc96 	bl	80057cc <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 8003ea0:	f7ff ffa7 	bl	8003df2 <SPI_ReceiveByte>
	SD_SELECT;
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	2108      	movs	r1, #8
 8003ea8:	4822      	ldr	r0, [pc, #136]	; (8003f34 <SD_SPI_Cmd+0xd0>)
 8003eaa:	f001 fc8f 	bl	80057cc <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 8003eae:	f7ff ffa0 	bl	8003df2 <SPI_ReceiveByte>

	// Send a command packet
	SPI_SendByte(cmd); // Start + Command index
 8003eb2:	79fb      	ldrb	r3, [r7, #7]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff ff8f 	bl	8003dd8 <SPI_SendByte>
	SPI_SendByte((uint8_t)(argument >> 24)); // Argument[31..24]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	0e1b      	lsrs	r3, r3, #24
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff ff89 	bl	8003dd8 <SPI_SendByte>
	SPI_SendByte((uint8_t)(argument >> 16)); // Argument[23..16]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	0c1b      	lsrs	r3, r3, #16
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff ff83 	bl	8003dd8 <SPI_SendByte>
	SPI_SendByte((uint8_t)(argument >> 8)); // Argument[15..8]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	0a1b      	lsrs	r3, r3, #8
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff ff7d 	bl	8003dd8 <SPI_SendByte>
	SPI_SendByte((uint8_t)argument); // Argument[7..0]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff ff78 	bl	8003dd8 <SPI_SendByte>
	vByte = 0x01; // Dummy CRC + Stop
 8003ee8:	2301      	movs	r3, #1
 8003eea:	73fb      	strb	r3, [r7, #15]

	if (cmd == CMD0) {vByte = 0x95;} // Valid CRC for CMD0(0)
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	2b40      	cmp	r3, #64	; 0x40
 8003ef0:	d101      	bne.n	8003ef6 <SD_SPI_Cmd+0x92>
 8003ef2:	2395      	movs	r3, #149	; 0x95
 8003ef4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) {vByte = 0x87;} // Valid CRC for CMD8(0x1AA)
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	2b48      	cmp	r3, #72	; 0x48
 8003efa:	d101      	bne.n	8003f00 <SD_SPI_Cmd+0x9c>
 8003efc:	2387      	movs	r3, #135	; 0x87
 8003efe:	73fb      	strb	r3, [r7, #15]
	SPI_SendByte(vByte);
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff ff68 	bl	8003dd8 <SPI_SendByte>

  // Receive a command response
  vByte = 10; // Wait for a valid response in timeout of 10 attempts
 8003f08:	230a      	movs	r3, #10
 8003f0a:	73fb      	strb	r3, [r7, #15]
  do {
    		vResult = SPI_ReceiveByte();
 8003f0c:	f7ff ff71 	bl	8003df2 <SPI_ReceiveByte>
 8003f10:	4603      	mov	r3, r0
 8003f12:	73bb      	strb	r3, [r7, #14]
  } while ((vResult & 0x80) && --vByte);
 8003f14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	da05      	bge.n	8003f28 <SD_SPI_Cmd+0xc4>
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	73fb      	strb	r3, [r7, #15]
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1f1      	bne.n	8003f0c <SD_SPI_Cmd+0xa8>

  return vResult;
 8003f28:	7bbb      	ldrb	r3, [r7, #14]

}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40020000 	.word	0x40020000

08003f38 <SD_SPI_Read_Block>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_Read_Block(uint8_t *buff, uint32_t lba)
{
 8003f38:	b590      	push	{r4, r7, lr}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint8_t vResult = 0;
 8003f42:	2300      	movs	r3, #0
 8003f44:	737b      	strb	r3, [r7, #13]
  uint16_t vCounter = 0;
 8003f46:	2300      	movs	r3, #0
 8003f48:	81fb      	strh	r3, [r7, #14]

	vResult = SD_SPI_Cmd (CMD17, lba);
 8003f4a:	6839      	ldr	r1, [r7, #0]
 8003f4c:	2051      	movs	r0, #81	; 0x51
 8003f4e:	f7ff ff89 	bl	8003e64 <SD_SPI_Cmd>
 8003f52:	4603      	mov	r3, r0
 8003f54:	737b      	strb	r3, [r7, #13]
	if (vResult) return 5; //	Error
 8003f56:	7b7b      	ldrb	r3, [r7, #13]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <SD_SPI_Read_Block+0x28>
 8003f5c:	2305      	movs	r3, #5
 8003f5e:	e02d      	b.n	8003fbc <SD_SPI_Read_Block+0x84>

	SPI_Release();
 8003f60:	f7ff ff54 	bl	8003e0c <SPI_Release>

  do{
				vResult=SPI_ReceiveByte();
 8003f64:	f7ff ff45 	bl	8003df2 <SPI_ReceiveByte>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	737b      	strb	r3, [r7, #13]
				vCounter++;
 8003f6c:	89fb      	ldrh	r3, [r7, #14]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	81fb      	strh	r3, [r7, #14]
  } while ((vResult != 0xFE) && (vCounter < 0xFFFF)); // Wait till mark(0xFE) is received
 8003f72:	7b7b      	ldrb	r3, [r7, #13]
 8003f74:	2bfe      	cmp	r3, #254	; 0xfe
 8003f76:	d004      	beq.n	8003f82 <SD_SPI_Read_Block+0x4a>
 8003f78:	89fb      	ldrh	r3, [r7, #14]
 8003f7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d1f0      	bne.n	8003f64 <SD_SPI_Read_Block+0x2c>
  if (vCounter >= 0xFFFF) return 5;	 //	 Error
 8003f82:	89fb      	ldrh	r3, [r7, #14]
 8003f84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d101      	bne.n	8003f90 <SD_SPI_Read_Block+0x58>
 8003f8c:	2305      	movs	r3, #5
 8003f8e:	e015      	b.n	8003fbc <SD_SPI_Read_Block+0x84>

  for (vCounter = 0; vCounter<512; vCounter++) buff[vCounter]=SPI_ReceiveByte(); // Write data to the buffer
 8003f90:	2300      	movs	r3, #0
 8003f92:	81fb      	strh	r3, [r7, #14]
 8003f94:	e009      	b.n	8003faa <SD_SPI_Read_Block+0x72>
 8003f96:	89fb      	ldrh	r3, [r7, #14]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	18d4      	adds	r4, r2, r3
 8003f9c:	f7ff ff29 	bl	8003df2 <SPI_ReceiveByte>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	7023      	strb	r3, [r4, #0]
 8003fa4:	89fb      	ldrh	r3, [r7, #14]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	81fb      	strh	r3, [r7, #14]
 8003faa:	89fb      	ldrh	r3, [r7, #14]
 8003fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fb0:	d3f1      	bcc.n	8003f96 <SD_SPI_Read_Block+0x5e>
  SPI_Release(); // Skip CRC
 8003fb2:	f7ff ff2b 	bl	8003e0c <SPI_Release>
  SPI_Release();
 8003fb6:	f7ff ff29 	bl	8003e0c <SPI_Release>

  return 0;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd90      	pop	{r4, r7, pc}

08003fc4 <SD_SPI_Write_Block>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_Write_Block (uint8_t *buff, uint32_t lba)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint8_t vResult;
  uint16_t vCounter;

  vResult = SD_SPI_Cmd(CMD24, lba);
 8003fce:	6839      	ldr	r1, [r7, #0]
 8003fd0:	2058      	movs	r0, #88	; 0x58
 8003fd2:	f7ff ff47 	bl	8003e64 <SD_SPI_Cmd>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	737b      	strb	r3, [r7, #13]

  if(vResult != 0x00) return 6; // Error
 8003fda:	7b7b      	ldrb	r3, [r7, #13]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <SD_SPI_Write_Block+0x20>
 8003fe0:	2306      	movs	r3, #6
 8003fe2:	e03d      	b.n	8004060 <SD_SPI_Write_Block+0x9c>

  SPI_Release();
 8003fe4:	f7ff ff12 	bl	8003e0c <SPI_Release>
  SPI_SendByte (0xFE); // Send transmission start mark
 8003fe8:	20fe      	movs	r0, #254	; 0xfe
 8003fea:	f7ff fef5 	bl	8003dd8 <SPI_SendByte>
  for (vCounter = 0; vCounter<512; vCounter++) SPI_SendByte(buff[vCounter]); // Write data to the SD
 8003fee:	2300      	movs	r3, #0
 8003ff0:	81fb      	strh	r3, [r7, #14]
 8003ff2:	e009      	b.n	8004008 <SD_SPI_Write_Block+0x44>
 8003ff4:	89fb      	ldrh	r3, [r7, #14]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff feeb 	bl	8003dd8 <SPI_SendByte>
 8004002:	89fb      	ldrh	r3, [r7, #14]
 8004004:	3301      	adds	r3, #1
 8004006:	81fb      	strh	r3, [r7, #14]
 8004008:	89fb      	ldrh	r3, [r7, #14]
 800400a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800400e:	d3f1      	bcc.n	8003ff4 <SD_SPI_Write_Block+0x30>
  SPI_Release();  // Skip CRC
 8004010:	f7ff fefc 	bl	8003e0c <SPI_Release>
  SPI_Release();
 8004014:	f7ff fefa 	bl	8003e0c <SPI_Release>
  vResult = SPI_ReceiveByte();
 8004018:	f7ff feeb 	bl	8003df2 <SPI_ReceiveByte>
 800401c:	4603      	mov	r3, r0
 800401e:	737b      	strb	r3, [r7, #13]
  if((vResult & 0x05) != 0x05) return 6; // Error  (datasheet p. 111)
 8004020:	7b7b      	ldrb	r3, [r7, #13]
 8004022:	f003 0305 	and.w	r3, r3, #5
 8004026:	2b05      	cmp	r3, #5
 8004028:	d001      	beq.n	800402e <SD_SPI_Write_Block+0x6a>
 800402a:	2306      	movs	r3, #6
 800402c:	e018      	b.n	8004060 <SD_SPI_Write_Block+0x9c>

  vCounter = 0;
 800402e:	2300      	movs	r3, #0
 8004030:	81fb      	strh	r3, [r7, #14]
  do {
	  vResult=SPI_ReceiveByte();
 8004032:	f7ff fede 	bl	8003df2 <SPI_ReceiveByte>
 8004036:	4603      	mov	r3, r0
 8004038:	737b      	strb	r3, [r7, #13]
	  vCounter++;
 800403a:	89fb      	ldrh	r3, [r7, #14]
 800403c:	3301      	adds	r3, #1
 800403e:	81fb      	strh	r3, [r7, #14]
  } while ( (vResult != 0xFF)&&(vCounter<0xFFFF) );		//Wait till BUSY mode is finished
 8004040:	7b7b      	ldrb	r3, [r7, #13]
 8004042:	2bff      	cmp	r3, #255	; 0xff
 8004044:	d004      	beq.n	8004050 <SD_SPI_Write_Block+0x8c>
 8004046:	89fb      	ldrh	r3, [r7, #14]
 8004048:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800404c:	4293      	cmp	r3, r2
 800404e:	d1f0      	bne.n	8004032 <SD_SPI_Write_Block+0x6e>
  if (vCounter>=0xFFFF) return 6;		// Error
 8004050:	89fb      	ldrh	r3, [r7, #14]
 8004052:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004056:	4293      	cmp	r3, r2
 8004058:	d101      	bne.n	800405e <SD_SPI_Write_Block+0x9a>
 800405a:	2306      	movs	r3, #6
 800405c:	e000      	b.n	8004060 <SD_SPI_Write_Block+0x9c>

  return 0;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <SD_SPI_GetFileInfo>:
}

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_GetFileInfo(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
	uint8_t vResult;
	DWORD free_clusters, free_sectors, total_sectors;

	if(f_mount(&SDFatFs, (TCHAR const*)USER_Path, 0))
 800406e:	2200      	movs	r2, #0
 8004070:	4964      	ldr	r1, [pc, #400]	; (8004204 <SD_SPI_GetFileInfo+0x19c>)
 8004072:	4865      	ldr	r0, [pc, #404]	; (8004208 <SD_SPI_GetFileInfo+0x1a0>)
 8004074:	f00b fd92 	bl	800fb9c <f_mount>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <SD_SPI_GetFileInfo+0x1c>
	{
		SD_Error_Handler();
 800407e:	f000 f8e3 	bl	8004248 <SD_Error_Handler>
 8004082:	e038      	b.n	80040f6 <SD_SPI_GetFileInfo+0x8e>
	}
	else
	{
		vResult = f_opendir(&sDirectory, "/");		// "/" - directory name to open
 8004084:	4961      	ldr	r1, [pc, #388]	; (800420c <SD_SPI_GetFileInfo+0x1a4>)
 8004086:	4862      	ldr	r0, [pc, #392]	; (8004210 <SD_SPI_GetFileInfo+0x1a8>)
 8004088:	f00c fbc5 	bl	8010816 <f_opendir>
 800408c:	4603      	mov	r3, r0
 800408e:	73fb      	strb	r3, [r7, #15]

		if (vResult == FR_OK)
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d12c      	bne.n	80040f0 <SD_SPI_GetFileInfo+0x88>
		{
			while(1)
			{
				vResult = f_readdir(&sDirectory, &sFileInfo);
 8004096:	495f      	ldr	r1, [pc, #380]	; (8004214 <SD_SPI_GetFileInfo+0x1ac>)
 8004098:	485d      	ldr	r0, [pc, #372]	; (8004210 <SD_SPI_GetFileInfo+0x1a8>)
 800409a:	f00c fc55 	bl	8010948 <f_readdir>
 800409e:	4603      	mov	r3, r0
 80040a0:	73fb      	strb	r3, [r7, #15]

				if ((vResult == FR_OK) && (sFileInfo.fname[0]))
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d123      	bne.n	80040f0 <SD_SPI_GetFileInfo+0x88>
 80040a8:	4b5a      	ldr	r3, [pc, #360]	; (8004214 <SD_SPI_GetFileInfo+0x1ac>)
 80040aa:	7d9b      	ldrb	r3, [r3, #22]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d01f      	beq.n	80040f0 <SD_SPI_GetFileInfo+0x88>
				{
					HAL_UART_Transmit(&huart3, (uint8_t*)sFileInfo.fname, strlen((char*)sFileInfo.fname), 0x1000);
 80040b0:	4859      	ldr	r0, [pc, #356]	; (8004218 <SD_SPI_GetFileInfo+0x1b0>)
 80040b2:	f7fc f88d 	bl	80001d0 <strlen>
 80040b6:	4603      	mov	r3, r0
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040be:	4956      	ldr	r1, [pc, #344]	; (8004218 <SD_SPI_GetFileInfo+0x1b0>)
 80040c0:	4856      	ldr	r0, [pc, #344]	; (800421c <SD_SPI_GetFileInfo+0x1b4>)
 80040c2:	f005 f856 	bl	8009172 <HAL_UART_Transmit>

					if(sFileInfo.fattrib & AM_DIR)
 80040c6:	4b53      	ldr	r3, [pc, #332]	; (8004214 <SD_SPI_GetFileInfo+0x1ac>)
 80040c8:	7a1b      	ldrb	r3, [r3, #8]
 80040ca:	f003 0310 	and.w	r3, r3, #16
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d006      	beq.n	80040e0 <SD_SPI_GetFileInfo+0x78>
					{
						HAL_UART_Transmit(&huart3, (uint8_t*)"  [DIR]", 7, 0x1000);
 80040d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040d6:	2207      	movs	r2, #7
 80040d8:	4951      	ldr	r1, [pc, #324]	; (8004220 <SD_SPI_GetFileInfo+0x1b8>)
 80040da:	4850      	ldr	r0, [pc, #320]	; (800421c <SD_SPI_GetFileInfo+0x1b4>)
 80040dc:	f005 f849 	bl	8009172 <HAL_UART_Transmit>
					}
				}
				else break;

				HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, 0x1000);
 80040e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040e4:	2202      	movs	r2, #2
 80040e6:	494f      	ldr	r1, [pc, #316]	; (8004224 <SD_SPI_GetFileInfo+0x1bc>)
 80040e8:	484c      	ldr	r0, [pc, #304]	; (800421c <SD_SPI_GetFileInfo+0x1b4>)
 80040ea:	f005 f842 	bl	8009172 <HAL_UART_Transmit>
				vResult = f_readdir(&sDirectory, &sFileInfo);
 80040ee:	e7d2      	b.n	8004096 <SD_SPI_GetFileInfo+0x2e>
			}
		}
		f_closedir(&sDirectory);
 80040f0:	4847      	ldr	r0, [pc, #284]	; (8004210 <SD_SPI_GetFileInfo+0x1a8>)
 80040f2:	f00c fc03 	bl	80108fc <f_closedir>
	}

	f_getfree("/", &free_clusters, &fs);
 80040f6:	463b      	mov	r3, r7
 80040f8:	4a4b      	ldr	r2, [pc, #300]	; (8004228 <SD_SPI_GetFileInfo+0x1c0>)
 80040fa:	4619      	mov	r1, r3
 80040fc:	4843      	ldr	r0, [pc, #268]	; (800420c <SD_SPI_GetFileInfo+0x1a4>)
 80040fe:	f00c fc60 	bl	80109c2 <f_getfree>

	sprintf(aStringBuffer, "free_clusters: %lu\r\n", free_clusters);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	461a      	mov	r2, r3
 8004106:	4949      	ldr	r1, [pc, #292]	; (800422c <SD_SPI_GetFileInfo+0x1c4>)
 8004108:	4849      	ldr	r0, [pc, #292]	; (8004230 <SD_SPI_GetFileInfo+0x1c8>)
 800410a:	f00d faef 	bl	80116ec <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 800410e:	4848      	ldr	r0, [pc, #288]	; (8004230 <SD_SPI_GetFileInfo+0x1c8>)
 8004110:	f7fc f85e 	bl	80001d0 <strlen>
 8004114:	4603      	mov	r3, r0
 8004116:	b29a      	uxth	r2, r3
 8004118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800411c:	4944      	ldr	r1, [pc, #272]	; (8004230 <SD_SPI_GetFileInfo+0x1c8>)
 800411e:	483f      	ldr	r0, [pc, #252]	; (800421c <SD_SPI_GetFileInfo+0x1b4>)
 8004120:	f005 f827 	bl	8009172 <HAL_UART_Transmit>

	sprintf(aStringBuffer,"n_fatent: %lu\r\n",fs->n_fatent);
 8004124:	4b40      	ldr	r3, [pc, #256]	; (8004228 <SD_SPI_GetFileInfo+0x1c0>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	461a      	mov	r2, r3
 800412c:	4941      	ldr	r1, [pc, #260]	; (8004234 <SD_SPI_GetFileInfo+0x1cc>)
 800412e:	4840      	ldr	r0, [pc, #256]	; (8004230 <SD_SPI_GetFileInfo+0x1c8>)
 8004130:	f00d fadc 	bl	80116ec <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 8004134:	483e      	ldr	r0, [pc, #248]	; (8004230 <SD_SPI_GetFileInfo+0x1c8>)
 8004136:	f7fc f84b 	bl	80001d0 <strlen>
 800413a:	4603      	mov	r3, r0
 800413c:	b29a      	uxth	r2, r3
 800413e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004142:	493b      	ldr	r1, [pc, #236]	; (8004230 <SD_SPI_GetFileInfo+0x1c8>)
 8004144:	4835      	ldr	r0, [pc, #212]	; (800421c <SD_SPI_GetFileInfo+0x1b4>)
 8004146:	f005 f814 	bl	8009172 <HAL_UART_Transmit>

	sprintf(aStringBuffer,"fs_csize: %d\r\n",fs->csize);
 800414a:	4b37      	ldr	r3, [pc, #220]	; (8004228 <SD_SPI_GetFileInfo+0x1c0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	895b      	ldrh	r3, [r3, #10]
 8004150:	461a      	mov	r2, r3
 8004152:	4939      	ldr	r1, [pc, #228]	; (8004238 <SD_SPI_GetFileInfo+0x1d0>)
 8004154:	4836      	ldr	r0, [pc, #216]	; (8004230 <SD_SPI_GetFileInfo+0x1c8>)
 8004156:	f00d fac9 	bl	80116ec <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 800415a:	4835      	ldr	r0, [pc, #212]	; (8004230 <SD_SPI_GetFileInfo+0x1c8>)
 800415c:	f7fc f838 	bl	80001d0 <strlen>
 8004160:	4603      	mov	r3, r0
 8004162:	b29a      	uxth	r2, r3
 8004164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004168:	4931      	ldr	r1, [pc, #196]	; (8004230 <SD_SPI_GetFileInfo+0x1c8>)
 800416a:	482c      	ldr	r0, [pc, #176]	; (800421c <SD_SPI_GetFileInfo+0x1b4>)
 800416c:	f005 f801 	bl	8009172 <HAL_UART_Transmit>

	total_sectors = (fs->n_fatent - 2) * fs->csize;
 8004170:	4b2d      	ldr	r3, [pc, #180]	; (8004228 <SD_SPI_GetFileInfo+0x1c0>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	3b02      	subs	r3, #2
 8004178:	4a2b      	ldr	r2, [pc, #172]	; (8004228 <SD_SPI_GetFileInfo+0x1c0>)
 800417a:	6812      	ldr	r2, [r2, #0]
 800417c:	8952      	ldrh	r2, [r2, #10]
 800417e:	fb02 f303 	mul.w	r3, r2, r3
 8004182:	60bb      	str	r3, [r7, #8]
	sprintf(aStringBuffer, "total_sectors: %lu\r\n", total_sectors);
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	492d      	ldr	r1, [pc, #180]	; (800423c <SD_SPI_GetFileInfo+0x1d4>)
 8004188:	4829      	ldr	r0, [pc, #164]	; (8004230 <SD_SPI_GetFileInfo+0x1c8>)
 800418a:	f00d faaf 	bl	80116ec <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 800418e:	4828      	ldr	r0, [pc, #160]	; (8004230 <SD_SPI_GetFileInfo+0x1c8>)
 8004190:	f7fc f81e 	bl	80001d0 <strlen>
 8004194:	4603      	mov	r3, r0
 8004196:	b29a      	uxth	r2, r3
 8004198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800419c:	4924      	ldr	r1, [pc, #144]	; (8004230 <SD_SPI_GetFileInfo+0x1c8>)
 800419e:	481f      	ldr	r0, [pc, #124]	; (800421c <SD_SPI_GetFileInfo+0x1b4>)
 80041a0:	f004 ffe7 	bl	8009172 <HAL_UART_Transmit>

	free_sectors = free_clusters * fs->csize;
 80041a4:	4b20      	ldr	r3, [pc, #128]	; (8004228 <SD_SPI_GetFileInfo+0x1c0>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	895b      	ldrh	r3, [r3, #10]
 80041aa:	461a      	mov	r2, r3
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	fb02 f303 	mul.w	r3, r2, r3
 80041b2:	607b      	str	r3, [r7, #4]
	sprintf(aStringBuffer, "free_sectors: %lu\r\n", free_sectors);
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	4922      	ldr	r1, [pc, #136]	; (8004240 <SD_SPI_GetFileInfo+0x1d8>)
 80041b8:	481d      	ldr	r0, [pc, #116]	; (8004230 <SD_SPI_GetFileInfo+0x1c8>)
 80041ba:	f00d fa97 	bl	80116ec <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 80041be:	481c      	ldr	r0, [pc, #112]	; (8004230 <SD_SPI_GetFileInfo+0x1c8>)
 80041c0:	f7fc f806 	bl	80001d0 <strlen>
 80041c4:	4603      	mov	r3, r0
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041cc:	4918      	ldr	r1, [pc, #96]	; (8004230 <SD_SPI_GetFileInfo+0x1c8>)
 80041ce:	4813      	ldr	r0, [pc, #76]	; (800421c <SD_SPI_GetFileInfo+0x1b4>)
 80041d0:	f004 ffcf 	bl	8009172 <HAL_UART_Transmit>

	sprintf(aStringBuffer, "%lu KB total drive space.\r\n%lu KB available.\r\n", (free_sectors / 2), (total_sectors / 2));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	085a      	lsrs	r2, r3, #1
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	085b      	lsrs	r3, r3, #1
 80041dc:	4919      	ldr	r1, [pc, #100]	; (8004244 <SD_SPI_GetFileInfo+0x1dc>)
 80041de:	4814      	ldr	r0, [pc, #80]	; (8004230 <SD_SPI_GetFileInfo+0x1c8>)
 80041e0:	f00d fa84 	bl	80116ec <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 80041e4:	4812      	ldr	r0, [pc, #72]	; (8004230 <SD_SPI_GetFileInfo+0x1c8>)
 80041e6:	f7fb fff3 	bl	80001d0 <strlen>
 80041ea:	4603      	mov	r3, r0
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041f2:	490f      	ldr	r1, [pc, #60]	; (8004230 <SD_SPI_GetFileInfo+0x1c8>)
 80041f4:	4809      	ldr	r0, [pc, #36]	; (800421c <SD_SPI_GetFileInfo+0x1b4>)
 80041f6:	f004 ffbc 	bl	8009172 <HAL_UART_Transmit>

	return 0;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	20001880 	.word	0x20001880
 8004208:	20000578 	.word	0x20000578
 800420c:	08011e78 	.word	0x08011e78
 8004210:	200029d4 	.word	0x200029d4
 8004214:	200028bc 	.word	0x200028bc
 8004218:	200028d2 	.word	0x200028d2
 800421c:	20001830 	.word	0x20001830
 8004220:	08011e7c 	.word	0x08011e7c
 8004224:	08011e84 	.word	0x08011e84
 8004228:	20001884 	.word	0x20001884
 800422c:	08011e88 	.word	0x08011e88
 8004230:	20002a08 	.word	0x20002a08
 8004234:	08011ea0 	.word	0x08011ea0
 8004238:	08011eb0 	.word	0x08011eb0
 800423c:	08011ec0 	.word	0x08011ec0
 8004240:	08011ed8 	.word	0x08011ed8
 8004244:	08011eec 	.word	0x08011eec

08004248 <SD_Error_Handler>:

/****************************************************************************************************************/
/****************************************************************************************************************/
void SD_Error_Handler(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
	LED_Red_ON;
 800424c:	2201      	movs	r2, #1
 800424e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004252:	4802      	ldr	r0, [pc, #8]	; (800425c <SD_Error_Handler+0x14>)
 8004254:	f001 faba 	bl	80057cc <HAL_GPIO_WritePin>
	while(1);
 8004258:	e7fe      	b.n	8004258 <SD_Error_Handler+0x10>
 800425a:	bf00      	nop
 800425c:	40020c00 	.word	0x40020c00

08004260 <open_bin_file>:
 5. Повторити

 */

uint8_t open_bin_file(char* name)
{
 8004260:	b5b0      	push	{r4, r5, r7, lr}
 8004262:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
 8004266:	af02      	add	r7, sp, #8
 8004268:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 800426c:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8004270:	6018      	str	r0, [r3, #0]
	int i = 0;
 8004272:	2300      	movs	r3, #0
 8004274:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8

	uint16_t vTemp = 0;
 8004278:	2300      	movs	r3, #0
 800427a:	f8a7 33d6 	strh.w	r3, [r7, #982]	; 0x3d6
	uint32_t vIndex = 0;
 800427e:	2300      	movs	r3, #0
 8004280:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
	uint32_t vFileSize = MyFile.obj.objsize;
 8004284:	4bc6      	ldr	r3, [pc, #792]	; (80045a0 <open_bin_file+0x340>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
	uint32_t vBytesReadCounter;
	uint8_t frame_buffer[949] = {0};
 800428c:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8004290:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	3304      	adds	r3, #4
 800429a:	f240 32b1 	movw	r2, #945	; 0x3b1
 800429e:	2100      	movs	r1, #0
 80042a0:	4618      	mov	r0, r3
 80042a2:	f00d f92b 	bl	80114fc <memset>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80042a6:	2100      	movs	r1, #0
 80042a8:	48be      	ldr	r0, [pc, #760]	; (80045a4 <open_bin_file+0x344>)
 80042aa:	f003 fedf 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80042ae:	2104      	movs	r1, #4
 80042b0:	48bc      	ldr	r0, [pc, #752]	; (80045a4 <open_bin_file+0x344>)
 80042b2:	f003 fedb 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80042b6:	2108      	movs	r1, #8
 80042b8:	48ba      	ldr	r0, [pc, #744]	; (80045a4 <open_bin_file+0x344>)
 80042ba:	f003 fed7 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80042be:	210c      	movs	r1, #12
 80042c0:	48b8      	ldr	r0, [pc, #736]	; (80045a4 <open_bin_file+0x344>)
 80042c2:	f003 fed3 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80042c6:	2100      	movs	r1, #0
 80042c8:	48b7      	ldr	r0, [pc, #732]	; (80045a8 <open_bin_file+0x348>)
 80042ca:	f003 fecf 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80042ce:	2104      	movs	r1, #4
 80042d0:	48b5      	ldr	r0, [pc, #724]	; (80045a8 <open_bin_file+0x348>)
 80042d2:	f003 fecb 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80042d6:	2108      	movs	r1, #8
 80042d8:	48b3      	ldr	r0, [pc, #716]	; (80045a8 <open_bin_file+0x348>)
 80042da:	f003 fec7 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80042de:	210c      	movs	r1, #12
 80042e0:	48b1      	ldr	r0, [pc, #708]	; (80045a8 <open_bin_file+0x348>)
 80042e2:	f003 fec3 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80042e6:	2104      	movs	r1, #4
 80042e8:	48b0      	ldr	r0, [pc, #704]	; (80045ac <open_bin_file+0x34c>)
 80042ea:	f003 febf 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80042ee:	2108      	movs	r1, #8
 80042f0:	48ae      	ldr	r0, [pc, #696]	; (80045ac <open_bin_file+0x34c>)
 80042f2:	f003 febb 	bl	800806c <HAL_TIM_PWM_Start>

	if(f_mount(&SDFatFs, (TCHAR const*)USER_Path, 0))
 80042f6:	2200      	movs	r2, #0
 80042f8:	49ad      	ldr	r1, [pc, #692]	; (80045b0 <open_bin_file+0x350>)
 80042fa:	48ae      	ldr	r0, [pc, #696]	; (80045b4 <open_bin_file+0x354>)
 80042fc:	f00b fc4e 	bl	800fb9c <f_mount>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <open_bin_file+0xac>
	{
		SD_Error_Handler();
 8004306:	f7ff ff9f 	bl	8004248 <SD_Error_Handler>
 800430a:	e142      	b.n	8004592 <open_bin_file+0x332>
	}
	else
	{
		if(f_open(&MyFile, name, FA_READ))    // 69
 800430c:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8004310:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8004314:	2201      	movs	r2, #1
 8004316:	6819      	ldr	r1, [r3, #0]
 8004318:	48a1      	ldr	r0, [pc, #644]	; (80045a0 <open_bin_file+0x340>)
 800431a:	f00b fc85 	bl	800fc28 <f_open>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d002      	beq.n	800432a <open_bin_file+0xca>
		{
			SD_Error_Handler();
 8004324:	f7ff ff90 	bl	8004248 <SD_Error_Handler>
 8004328:	e133      	b.n	8004592 <open_bin_file+0x332>
		}
		else
		{
			int h = 0;
 800432a:	2300      	movs	r3, #0
 800432c:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
			for(h = 0; h < 1000; h++)
 8004330:	2300      	movs	r3, #0
 8004332:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 8004336:	e123      	b.n	8004580 <open_bin_file+0x320>
			{
				HAL_Delay(2);
 8004338:	2002      	movs	r0, #2
 800433a:	f000 fb73 	bl	8004a24 <HAL_Delay>
				memset(frame_buffer, 0, sizeof(frame_buffer));
 800433e:	f107 030c 	add.w	r3, r7, #12
 8004342:	f240 32b5 	movw	r2, #949	; 0x3b5
 8004346:	2100      	movs	r1, #0
 8004348:	4618      	mov	r0, r3
 800434a:	f00d f8d7 	bl	80114fc <memset>

				f_lseek(&MyFile, h + (947*h));			// shift on one frame
 800434e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8004352:	f44f 726d 	mov.w	r2, #948	; 0x3b4
 8004356:	fb02 f303 	mul.w	r3, r2, r3
 800435a:	4619      	mov	r1, r3
 800435c:	4890      	ldr	r0, [pc, #576]	; (80045a0 <open_bin_file+0x340>)
 800435e:	f00c f836 	bl	80103ce <f_lseek>
				f_read(&MyFile, aBuffer, vTemp, (UINT *)&vBytesReadCounter);
 8004362:	f8b7 23d6 	ldrh.w	r2, [r7, #982]	; 0x3d6
 8004366:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 800436a:	4993      	ldr	r1, [pc, #588]	; (80045b8 <open_bin_file+0x358>)
 800436c:	488c      	ldr	r0, [pc, #560]	; (80045a0 <open_bin_file+0x340>)
 800436e:	f00b fe27 	bl	800ffc0 <f_read>
				/////////////////////////

				int size_buf_for_read = sizeof(frame_buffer);
 8004372:	f240 33b5 	movw	r3, #949	; 0x3b5
 8004376:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
				f_gets(frame_buffer, size_buf_for_read, &MyFile);     // Read one fraime
 800437a:	f107 030c 	add.w	r3, r7, #12
 800437e:	4a88      	ldr	r2, [pc, #544]	; (80045a0 <open_bin_file+0x340>)
 8004380:	f8d7 13c8 	ldr.w	r1, [r7, #968]	; 0x3c8
 8004384:	4618      	mov	r0, r3
 8004386:	f00c fbd1 	bl	8010b2c <f_gets>

				//ПЕРЕДАТИ ДАНІ В СВІТЛОДІОДИ <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>
				int k = 0;
 800438a:	2300      	movs	r3, #0
 800438c:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0

				uint16_t number_of_rgbw_leds = 0;
 8004390:	2300      	movs	r3, #0
 8004392:	f8a7 33de 	strh.w	r3, [r7, #990]	; 0x3de

				// SET RED LEDs
//				for()
//				{

					set_duty_cycle_stop_left_5(frame_buffer[228 + 16 ]);
 8004396:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 800439a:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800439e:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fc fca4 	bl	8000cf0 <set_duty_cycle_stop_left_5>
					set_duty_cycle_stop_left_4(frame_buffer[228 + 12 ]);
 80043a8:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80043ac:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80043b0:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fc fc8b 	bl	8000cd0 <set_duty_cycle_stop_left_4>
					set_duty_cycle_stop_left_3(frame_buffer[228 + 8 ]);
 80043ba:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80043be:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80043c2:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fc fc72 	bl	8000cb0 <set_duty_cycle_stop_left_3>
					set_duty_cycle_stop_left_2(frame_buffer[228 + 4 ]);
 80043cc:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80043d0:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80043d4:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80043d8:	4618      	mov	r0, r3
 80043da:	f7fc fc59 	bl	8000c90 <set_duty_cycle_stop_left_2>
					set_duty_cycle_stop_left_1(frame_buffer[228 ]);
 80043de:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80043e2:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80043e6:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fc fc40 	bl	8000c70 <set_duty_cycle_stop_left_1>

					set_duty_cycle_stop_ritht_1(frame_buffer[228 + 20 ]);
 80043f0:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 80043f4:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80043f8:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7fc fc87 	bl	8000d10 <set_duty_cycle_stop_ritht_1>
					set_duty_cycle_stop_ritht_2(frame_buffer[228 + 24 ]);
 8004402:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8004406:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800440a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800440e:	4618      	mov	r0, r3
 8004410:	f7fc fc8e 	bl	8000d30 <set_duty_cycle_stop_ritht_2>
					set_duty_cycle_stop_ritht_3(frame_buffer[228 + 28 ]);
 8004414:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8004418:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800441c:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8004420:	4618      	mov	r0, r3
 8004422:	f7fc fc95 	bl	8000d50 <set_duty_cycle_stop_ritht_3>
					set_duty_cycle_stop_ritht_4(frame_buffer[228 + 32 ]);
 8004426:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 800442a:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800442e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8004432:	4618      	mov	r0, r3
 8004434:	f7fc fc9c 	bl	8000d70 <set_duty_cycle_stop_ritht_4>
					set_duty_cycle_stop_ritht_5(frame_buffer[228 + 36 ]);
 8004438:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 800443c:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8004440:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8004444:	4618      	mov	r0, r3
 8004446:	f7fc fca3 	bl	8000d90 <set_duty_cycle_stop_ritht_5>
//				}


				// SET Left RGBW LEDs
				number_of_rgbw_leds = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	f8a7 33de 	strh.w	r3, [r7, #990]	; 0x3de
				for(k = 268; k <= 604; k++)		// 84 LEDs
 8004450:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8004454:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8004458:	e037      	b.n	80044ca <open_bin_file+0x26a>
				{
					if(k%4 == 0)
 800445a:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d12c      	bne.n	80044c0 <open_bin_file+0x260>
					{
						//set_left_one_rgbw_led(number_of_rgbw_leds, frame_buffer[k], frame_buffer[k+1], frame_buffer[k+2], frame_buffer[k+3]);
						set_left_one_rgbw_led(number_of_rgbw_leds, frame_buffer[k], frame_buffer[k+1], frame_buffer[k+2], frame_buffer[k+3]);
 8004466:	f8b7 33de 	ldrh.w	r3, [r7, #990]	; 0x3de
 800446a:	b2d8      	uxtb	r0, r3
 800446c:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8004470:	f5a3 7277 	sub.w	r2, r3, #988	; 0x3dc
 8004474:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8004478:	4413      	add	r3, r2
 800447a:	7819      	ldrb	r1, [r3, #0]
 800447c:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8004480:	3301      	adds	r3, #1
 8004482:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 8004486:	f5a2 7277 	sub.w	r2, r2, #988	; 0x3dc
 800448a:	5cd4      	ldrb	r4, [r2, r3]
 800448c:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8004490:	3302      	adds	r3, #2
 8004492:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 8004496:	f5a2 7277 	sub.w	r2, r2, #988	; 0x3dc
 800449a:	5cd5      	ldrb	r5, [r2, r3]
 800449c:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 80044a0:	3303      	adds	r3, #3
 80044a2:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 80044a6:	f5a2 7277 	sub.w	r2, r2, #988	; 0x3dc
 80044aa:	5cd3      	ldrb	r3, [r2, r3]
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	462b      	mov	r3, r5
 80044b0:	4622      	mov	r2, r4
 80044b2:	f7fe f92e 	bl	8002712 <set_left_one_rgbw_led>
						number_of_rgbw_leds++;
 80044b6:	f8b7 33de 	ldrh.w	r3, [r7, #990]	; 0x3de
 80044ba:	3301      	adds	r3, #1
 80044bc:	f8a7 33de 	strh.w	r3, [r7, #990]	; 0x3de
				for(k = 268; k <= 604; k++)		// 84 LEDs
 80044c0:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 80044c4:	3301      	adds	r3, #1
 80044c6:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 80044ca:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 80044ce:	f5b3 7f17 	cmp.w	r3, #604	; 0x25c
 80044d2:	ddc2      	ble.n	800445a <open_bin_file+0x1fa>
					}
				}
				while (!ARGB_Show_left());  // Update
 80044d4:	bf00      	nop
 80044d6:	f7fd f807 	bl	80014e8 <ARGB_Show_left>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0fa      	beq.n	80044d6 <open_bin_file+0x276>
 				//HAL_Delay(5);

				// SET Right RGBW LEDs
				number_of_rgbw_leds = 0;
 80044e0:	2300      	movs	r3, #0
 80044e2:	f8a7 33de 	strh.w	r3, [r7, #990]	; 0x3de
				for(k = 608; k <= 944; k++)
 80044e6:	f44f 7318 	mov.w	r3, #608	; 0x260
 80044ea:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 80044ee:	e037      	b.n	8004560 <open_bin_file+0x300>
				{
					if(k%4 == 0)
 80044f0:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 80044f4:	f003 0303 	and.w	r3, r3, #3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d12c      	bne.n	8004556 <open_bin_file+0x2f6>
					{
						//set_right_one_rgbw_led(number_of_rgbw_leds, frame_buffer[k], frame_buffer[k+1], frame_buffer[k+2], frame_buffer[k+3]);
						set_right_one_rgbw_led(number_of_rgbw_leds, frame_buffer[k], frame_buffer[k+1], frame_buffer[k+2], frame_buffer[k+3]);
 80044fc:	f8b7 33de 	ldrh.w	r3, [r7, #990]	; 0x3de
 8004500:	b2d8      	uxtb	r0, r3
 8004502:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8004506:	f5a3 7277 	sub.w	r2, r3, #988	; 0x3dc
 800450a:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 800450e:	4413      	add	r3, r2
 8004510:	7819      	ldrb	r1, [r3, #0]
 8004512:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8004516:	3301      	adds	r3, #1
 8004518:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 800451c:	f5a2 7277 	sub.w	r2, r2, #988	; 0x3dc
 8004520:	5cd4      	ldrb	r4, [r2, r3]
 8004522:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8004526:	3302      	adds	r3, #2
 8004528:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 800452c:	f5a2 7277 	sub.w	r2, r2, #988	; 0x3dc
 8004530:	5cd5      	ldrb	r5, [r2, r3]
 8004532:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8004536:	3303      	adds	r3, #3
 8004538:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 800453c:	f5a2 7277 	sub.w	r2, r2, #988	; 0x3dc
 8004540:	5cd3      	ldrb	r3, [r2, r3]
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	462b      	mov	r3, r5
 8004546:	4622      	mov	r2, r4
 8004548:	f7fe f904 	bl	8002754 <set_right_one_rgbw_led>
						number_of_rgbw_leds++;
 800454c:	f8b7 33de 	ldrh.w	r3, [r7, #990]	; 0x3de
 8004550:	3301      	adds	r3, #1
 8004552:	f8a7 33de 	strh.w	r3, [r7, #990]	; 0x3de
				for(k = 608; k <= 944; k++)
 8004556:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 800455a:	3301      	adds	r3, #1
 800455c:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8004560:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8004564:	f5b3 7f6c 	cmp.w	r3, #944	; 0x3b0
 8004568:	ddc2      	ble.n	80044f0 <open_bin_file+0x290>
					}
				}
				while (!ARGB_Show_right());  // Update
 800456a:	bf00      	nop
 800456c:	f7fd f988 	bl	8001880 <ARGB_Show_right>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0fa      	beq.n	800456c <open_bin_file+0x30c>
			for(h = 0; h < 1000; h++)
 8004576:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800457a:	3301      	adds	r3, #1
 800457c:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 8004580:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8004584:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004588:	f6ff aed6 	blt.w	8004338 <open_bin_file+0xd8>
 				//HAL_Delay(5);
			}

			f_close(&MyFile);
 800458c:	4804      	ldr	r0, [pc, #16]	; (80045a0 <open_bin_file+0x340>)
 800458e:	f00b fef4 	bl	801037a <f_close>
		}
	}
	return 0;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
 800459a:	46bd      	mov	sp, r7
 800459c:	bdb0      	pop	{r4, r5, r7, pc}
 800459e:	bf00      	nop
 80045a0:	20001888 	.word	0x20001888
 80045a4:	20001608 	.word	0x20001608
 80045a8:	20001650 	.word	0x20001650
 80045ac:	20001698 	.word	0x20001698
 80045b0:	20001880 	.word	0x20001880
 80045b4:	20000578 	.word	0x20000578
 80045b8:	20002a44 	.word	0x20002a44

080045bc <open_my_bin_file>:

// -----------------------------------------------------------------------------------------------------------
uint8_t open_my_bin_file(char* name)
{
 80045bc:	b5b0      	push	{r4, r5, r7, lr}
 80045be:	f5ad 7d7a 	sub.w	sp, sp, #1000	; 0x3e8
 80045c2:	af02      	add	r7, sp, #8
 80045c4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80045c8:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80045cc:	6018      	str	r0, [r3, #0]
	int i = 0;
 80045ce:	2300      	movs	r3, #0
 80045d0:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4

	uint16_t vTemp = 0;
 80045d4:	2300      	movs	r3, #0
 80045d6:	f8a7 33d2 	strh.w	r3, [r7, #978]	; 0x3d2
	uint32_t vIndex = 0;
 80045da:	2300      	movs	r3, #0
 80045dc:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
	uint32_t vFileSize = MyFile.obj.objsize;
 80045e0:	4bbb      	ldr	r3, [pc, #748]	; (80048d0 <open_my_bin_file+0x314>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
	uint32_t vBytesReadCounter;


	// uint8_t frame_buffer[948] = {0};			// One frame buffer

	uint8_t frame_buffer[949] = {0};
 80045e8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80045ec:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	3304      	adds	r3, #4
 80045f6:	f240 32b1 	movw	r2, #945	; 0x3b1
 80045fa:	2100      	movs	r1, #0
 80045fc:	4618      	mov	r0, r3
 80045fe:	f00c ff7d 	bl	80114fc <memset>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004602:	2100      	movs	r1, #0
 8004604:	48b3      	ldr	r0, [pc, #716]	; (80048d4 <open_my_bin_file+0x318>)
 8004606:	f003 fd31 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800460a:	2104      	movs	r1, #4
 800460c:	48b1      	ldr	r0, [pc, #708]	; (80048d4 <open_my_bin_file+0x318>)
 800460e:	f003 fd2d 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8004612:	2108      	movs	r1, #8
 8004614:	48af      	ldr	r0, [pc, #700]	; (80048d4 <open_my_bin_file+0x318>)
 8004616:	f003 fd29 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800461a:	210c      	movs	r1, #12
 800461c:	48ad      	ldr	r0, [pc, #692]	; (80048d4 <open_my_bin_file+0x318>)
 800461e:	f003 fd25 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004622:	2100      	movs	r1, #0
 8004624:	48ac      	ldr	r0, [pc, #688]	; (80048d8 <open_my_bin_file+0x31c>)
 8004626:	f003 fd21 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800462a:	2104      	movs	r1, #4
 800462c:	48aa      	ldr	r0, [pc, #680]	; (80048d8 <open_my_bin_file+0x31c>)
 800462e:	f003 fd1d 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8004632:	2108      	movs	r1, #8
 8004634:	48a8      	ldr	r0, [pc, #672]	; (80048d8 <open_my_bin_file+0x31c>)
 8004636:	f003 fd19 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800463a:	210c      	movs	r1, #12
 800463c:	48a6      	ldr	r0, [pc, #664]	; (80048d8 <open_my_bin_file+0x31c>)
 800463e:	f003 fd15 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8004642:	2104      	movs	r1, #4
 8004644:	48a5      	ldr	r0, [pc, #660]	; (80048dc <open_my_bin_file+0x320>)
 8004646:	f003 fd11 	bl	800806c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800464a:	2108      	movs	r1, #8
 800464c:	48a3      	ldr	r0, [pc, #652]	; (80048dc <open_my_bin_file+0x320>)
 800464e:	f003 fd0d 	bl	800806c <HAL_TIM_PWM_Start>


	if(f_mount(&SDFatFs, (TCHAR const*)USER_Path, 1))
 8004652:	2201      	movs	r2, #1
 8004654:	49a2      	ldr	r1, [pc, #648]	; (80048e0 <open_my_bin_file+0x324>)
 8004656:	48a3      	ldr	r0, [pc, #652]	; (80048e4 <open_my_bin_file+0x328>)
 8004658:	f00b faa0 	bl	800fb9c <f_mount>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <open_my_bin_file+0xac>
	{
		SD_Error_Handler();
 8004662:	f7ff fdf1 	bl	8004248 <SD_Error_Handler>
 8004666:	e12c      	b.n	80048c2 <open_my_bin_file+0x306>
	}
	else
	{
		if(f_open(&MyFile, name, FA_READ))
 8004668:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 800466c:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8004670:	2201      	movs	r2, #1
 8004672:	6819      	ldr	r1, [r3, #0]
 8004674:	4896      	ldr	r0, [pc, #600]	; (80048d0 <open_my_bin_file+0x314>)
 8004676:	f00b fad7 	bl	800fc28 <f_open>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <open_my_bin_file+0xca>
		{
			SD_Error_Handler();
 8004680:	f7ff fde2 	bl	8004248 <SD_Error_Handler>
 8004684:	e11d      	b.n	80048c2 <open_my_bin_file+0x306>
		}
		else
		{
			//SD_SPI_ReadLongFile();

				memset(frame_buffer, 0, sizeof(frame_buffer));
 8004686:	f107 0308 	add.w	r3, r7, #8
 800468a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800468e:	2100      	movs	r1, #0
 8004690:	4618      	mov	r0, r3
 8004692:	f00c ff33 	bl	80114fc <memset>

				f_lseek(&MyFile, 0);			// shift on one frame
 8004696:	2100      	movs	r1, #0
 8004698:	488d      	ldr	r0, [pc, #564]	; (80048d0 <open_my_bin_file+0x314>)
 800469a:	f00b fe98 	bl	80103ce <f_lseek>
				f_read(&MyFile, aBuffer, vTemp, (UINT *)&vBytesReadCounter);
 800469e:	f8b7 23d2 	ldrh.w	r2, [r7, #978]	; 0x3d2
 80046a2:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80046a6:	4990      	ldr	r1, [pc, #576]	; (80048e8 <open_my_bin_file+0x32c>)
 80046a8:	4889      	ldr	r0, [pc, #548]	; (80048d0 <open_my_bin_file+0x314>)
 80046aa:	f00b fc89 	bl	800ffc0 <f_read>
					/////////////////////////

				int size_buf_for_read = sizeof(frame_buffer);
 80046ae:	f240 33b5 	movw	r3, #949	; 0x3b5
 80046b2:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
				f_gets(frame_buffer, size_buf_for_read, &MyFile);     // Read one fraime
 80046b6:	f107 0308 	add.w	r3, r7, #8
 80046ba:	4a85      	ldr	r2, [pc, #532]	; (80048d0 <open_my_bin_file+0x314>)
 80046bc:	f8d7 13c4 	ldr.w	r1, [r7, #964]	; 0x3c4
 80046c0:	4618      	mov	r0, r3
 80046c2:	f00c fa33 	bl	8010b2c <f_gets>

					//ПЕРЕДАТИ ДАНІ В СВІТЛОДІОДИ <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>
					int k = 0;
 80046c6:	2300      	movs	r3, #0
 80046c8:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
					uint16_t number_of_rgbw_leds = 0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	f8a7 33da 	strh.w	r3, [r7, #986]	; 0x3da
					// SET RED LEDs

					set_duty_cycle_stop_left_5(frame_buffer[228 + 16]);
 80046d2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80046d6:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80046da:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fc fb06 	bl	8000cf0 <set_duty_cycle_stop_left_5>
					set_duty_cycle_stop_left_4(frame_buffer[228 + 12]);
 80046e4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80046e8:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80046ec:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fc faed 	bl	8000cd0 <set_duty_cycle_stop_left_4>
					set_duty_cycle_stop_left_3(frame_buffer[228 + 8]);
 80046f6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80046fa:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80046fe:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8004702:	4618      	mov	r0, r3
 8004704:	f7fc fad4 	bl	8000cb0 <set_duty_cycle_stop_left_3>
					set_duty_cycle_stop_left_2(frame_buffer[228 + 4]);
 8004708:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 800470c:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8004710:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8004714:	4618      	mov	r0, r3
 8004716:	f7fc fabb 	bl	8000c90 <set_duty_cycle_stop_left_2>
					set_duty_cycle_stop_left_1(frame_buffer[228]);
 800471a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 800471e:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8004722:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8004726:	4618      	mov	r0, r3
 8004728:	f7fc faa2 	bl	8000c70 <set_duty_cycle_stop_left_1>

					set_duty_cycle_stop_ritht_1(frame_buffer[228 + 20]);
 800472c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8004730:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8004734:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 8004738:	4618      	mov	r0, r3
 800473a:	f7fc fae9 	bl	8000d10 <set_duty_cycle_stop_ritht_1>
					set_duty_cycle_stop_ritht_2(frame_buffer[228 + 24]);
 800473e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8004742:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8004746:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800474a:	4618      	mov	r0, r3
 800474c:	f7fc faf0 	bl	8000d30 <set_duty_cycle_stop_ritht_2>
					set_duty_cycle_stop_ritht_3(frame_buffer[228 + 28]);
 8004750:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8004754:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8004758:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800475c:	4618      	mov	r0, r3
 800475e:	f7fc faf7 	bl	8000d50 <set_duty_cycle_stop_ritht_3>
					set_duty_cycle_stop_ritht_4(frame_buffer[228 + 32]);
 8004762:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8004766:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800476a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800476e:	4618      	mov	r0, r3
 8004770:	f7fc fafe 	bl	8000d70 <set_duty_cycle_stop_ritht_4>
					set_duty_cycle_stop_ritht_5(frame_buffer[228 + 36]);
 8004774:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8004778:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800477c:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8004780:	4618      	mov	r0, r3
 8004782:	f7fc fb05 	bl	8000d90 <set_duty_cycle_stop_ritht_5>

					// SET Left RGBW LEDs
					number_of_rgbw_leds = 0;
 8004786:	2300      	movs	r3, #0
 8004788:	f8a7 33da 	strh.w	r3, [r7, #986]	; 0x3da
					for(k = 269; k <= 604; k++)		// 85 LEDs
 800478c:	f240 130d 	movw	r3, #269	; 0x10d
 8004790:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8004794:	e037      	b.n	8004806 <open_my_bin_file+0x24a>
					{
						if(k%4 == 0)
 8004796:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d12c      	bne.n	80047fc <open_my_bin_file+0x240>
						{
							// не вмикається останній лед
							set_left_one_rgbw_led(number_of_rgbw_leds, frame_buffer[k], frame_buffer[k+1], frame_buffer[k+2], frame_buffer[k+3]);
 80047a2:	f8b7 33da 	ldrh.w	r3, [r7, #986]	; 0x3da
 80047a6:	b2d8      	uxtb	r0, r3
 80047a8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80047ac:	f5a3 7276 	sub.w	r2, r3, #984	; 0x3d8
 80047b0:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 80047b4:	4413      	add	r3, r2
 80047b6:	7819      	ldrb	r1, [r3, #0]
 80047b8:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 80047bc:	3301      	adds	r3, #1
 80047be:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80047c2:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 80047c6:	5cd4      	ldrb	r4, [r2, r3]
 80047c8:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 80047cc:	3302      	adds	r3, #2
 80047ce:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80047d2:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 80047d6:	5cd5      	ldrb	r5, [r2, r3]
 80047d8:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 80047dc:	3303      	adds	r3, #3
 80047de:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80047e2:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 80047e6:	5cd3      	ldrb	r3, [r2, r3]
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	462b      	mov	r3, r5
 80047ec:	4622      	mov	r2, r4
 80047ee:	f7fd ff90 	bl	8002712 <set_left_one_rgbw_led>
							number_of_rgbw_leds++;
 80047f2:	f8b7 33da 	ldrh.w	r3, [r7, #986]	; 0x3da
 80047f6:	3301      	adds	r3, #1
 80047f8:	f8a7 33da 	strh.w	r3, [r7, #986]	; 0x3da
					for(k = 269; k <= 604; k++)		// 85 LEDs
 80047fc:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8004800:	3301      	adds	r3, #1
 8004802:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8004806:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 800480a:	f5b3 7f17 	cmp.w	r3, #604	; 0x25c
 800480e:	ddc2      	ble.n	8004796 <open_my_bin_file+0x1da>

						}
					}
					while (!ARGB_Show_left());
 8004810:	bf00      	nop
 8004812:	f7fc fe69 	bl	80014e8 <ARGB_Show_left>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d0fa      	beq.n	8004812 <open_my_bin_file+0x256>


					// SET Right RGBW LEDs
					number_of_rgbw_leds = 0;
 800481c:	2300      	movs	r3, #0
 800481e:	f8a7 33da 	strh.w	r3, [r7, #986]	; 0x3da
					for(k = 609; k <= 944; k++)
 8004822:	f240 2361 	movw	r3, #609	; 0x261
 8004826:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 800482a:	e037      	b.n	800489c <open_my_bin_file+0x2e0>
					{
						if(k%4 == 0)
 800482c:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8004830:	f003 0303 	and.w	r3, r3, #3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d12c      	bne.n	8004892 <open_my_bin_file+0x2d6>
						{
							// не вмикається останній лед
							//set_right_one_rgbw_led(number_of_rgbw_leds, frame_buffer[k], frame_buffer[k+1], frame_buffer[k+2], frame_buffer[k+3]);
							set_right_one_rgbw_led(number_of_rgbw_leds, frame_buffer[k], frame_buffer[k+1], frame_buffer[k+2], frame_buffer[k+3]);
 8004838:	f8b7 33da 	ldrh.w	r3, [r7, #986]	; 0x3da
 800483c:	b2d8      	uxtb	r0, r3
 800483e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8004842:	f5a3 7276 	sub.w	r2, r3, #984	; 0x3d8
 8004846:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 800484a:	4413      	add	r3, r2
 800484c:	7819      	ldrb	r1, [r3, #0]
 800484e:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8004852:	3301      	adds	r3, #1
 8004854:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8004858:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 800485c:	5cd4      	ldrb	r4, [r2, r3]
 800485e:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8004862:	3302      	adds	r3, #2
 8004864:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8004868:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 800486c:	5cd5      	ldrb	r5, [r2, r3]
 800486e:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8004872:	3303      	adds	r3, #3
 8004874:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8004878:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 800487c:	5cd3      	ldrb	r3, [r2, r3]
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	462b      	mov	r3, r5
 8004882:	4622      	mov	r2, r4
 8004884:	f7fd ff66 	bl	8002754 <set_right_one_rgbw_led>
							number_of_rgbw_leds++;
 8004888:	f8b7 33da 	ldrh.w	r3, [r7, #986]	; 0x3da
 800488c:	3301      	adds	r3, #1
 800488e:	f8a7 33da 	strh.w	r3, [r7, #986]	; 0x3da
					for(k = 609; k <= 944; k++)
 8004892:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8004896:	3301      	adds	r3, #1
 8004898:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 800489c:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 80048a0:	f5b3 7f6c 	cmp.w	r3, #944	; 0x3b0
 80048a4:	ddc2      	ble.n	800482c <open_my_bin_file+0x270>

						}
					}
					while (!ARGB_Show_right());
 80048a6:	bf00      	nop
 80048a8:	f7fc ffea 	bl	8001880 <ARGB_Show_right>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0fa      	beq.n	80048a8 <open_my_bin_file+0x2ec>



			f_close(&MyFile);
 80048b2:	4807      	ldr	r0, [pc, #28]	; (80048d0 <open_my_bin_file+0x314>)
 80048b4:	f00b fd61 	bl	801037a <f_close>

			f_mount(&SDFatFs, (TCHAR const*)USER_Path, 0);
 80048b8:	2200      	movs	r2, #0
 80048ba:	4909      	ldr	r1, [pc, #36]	; (80048e0 <open_my_bin_file+0x324>)
 80048bc:	4809      	ldr	r0, [pc, #36]	; (80048e4 <open_my_bin_file+0x328>)
 80048be:	f00b f96d 	bl	800fb9c <f_mount>
		}
	}
	return 0;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	f507 7778 	add.w	r7, r7, #992	; 0x3e0
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bdb0      	pop	{r4, r5, r7, pc}
 80048ce:	bf00      	nop
 80048d0:	20001888 	.word	0x20001888
 80048d4:	20001608 	.word	0x20001608
 80048d8:	20001650 	.word	0x20001650
 80048dc:	20001698 	.word	0x20001698
 80048e0:	20001880 	.word	0x20001880
 80048e4:	20000578 	.word	0x20000578
 80048e8:	20002a44 	.word	0x20002a44

080048ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80048ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004924 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80048f0:	480d      	ldr	r0, [pc, #52]	; (8004928 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80048f2:	490e      	ldr	r1, [pc, #56]	; (800492c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80048f4:	4a0e      	ldr	r2, [pc, #56]	; (8004930 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80048f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048f8:	e002      	b.n	8004900 <LoopCopyDataInit>

080048fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048fe:	3304      	adds	r3, #4

08004900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004904:	d3f9      	bcc.n	80048fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004906:	4a0b      	ldr	r2, [pc, #44]	; (8004934 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004908:	4c0b      	ldr	r4, [pc, #44]	; (8004938 <LoopFillZerobss+0x26>)
  movs r3, #0
 800490a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800490c:	e001      	b.n	8004912 <LoopFillZerobss>

0800490e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800490e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004910:	3204      	adds	r2, #4

08004912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004914:	d3fb      	bcc.n	800490e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004916:	f7ff f94f 	bl	8003bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800491a:	f00c fdbb 	bl	8011494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800491e:	f7fd ff3b 	bl	8002798 <main>
  bx  lr    
 8004922:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004924:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800492c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8004930:	08012418 	.word	0x08012418
  ldr r2, =_sbss
 8004934:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8004938:	20003574 	.word	0x20003574

0800493c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800493c:	e7fe      	b.n	800493c <ADC_IRQHandler>
	...

08004940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004944:	4b0e      	ldr	r3, [pc, #56]	; (8004980 <HAL_Init+0x40>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a0d      	ldr	r2, [pc, #52]	; (8004980 <HAL_Init+0x40>)
 800494a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800494e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004950:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <HAL_Init+0x40>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a0a      	ldr	r2, [pc, #40]	; (8004980 <HAL_Init+0x40>)
 8004956:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800495a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800495c:	4b08      	ldr	r3, [pc, #32]	; (8004980 <HAL_Init+0x40>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a07      	ldr	r2, [pc, #28]	; (8004980 <HAL_Init+0x40>)
 8004962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004966:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004968:	2003      	movs	r0, #3
 800496a:	f000 f94f 	bl	8004c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800496e:	2000      	movs	r0, #0
 8004970:	f000 f808 	bl	8004984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004974:	f7fe fdce 	bl	8003514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40023c00 	.word	0x40023c00

08004984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800498c:	4b12      	ldr	r3, [pc, #72]	; (80049d8 <HAL_InitTick+0x54>)
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	4b12      	ldr	r3, [pc, #72]	; (80049dc <HAL_InitTick+0x58>)
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	4619      	mov	r1, r3
 8004996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800499a:	fbb3 f3f1 	udiv	r3, r3, r1
 800499e:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 f967 	bl	8004c76 <HAL_SYSTICK_Config>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e00e      	b.n	80049d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b0f      	cmp	r3, #15
 80049b6:	d80a      	bhi.n	80049ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049b8:	2200      	movs	r2, #0
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049c0:	f000 f92f 	bl	8004c22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80049c4:	4a06      	ldr	r2, [pc, #24]	; (80049e0 <HAL_InitTick+0x5c>)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
 80049cc:	e000      	b.n	80049d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	20000004 	.word	0x20000004
 80049dc:	2000000c 	.word	0x2000000c
 80049e0:	20000008 	.word	0x20000008

080049e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049e8:	4b06      	ldr	r3, [pc, #24]	; (8004a04 <HAL_IncTick+0x20>)
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	461a      	mov	r2, r3
 80049ee:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <HAL_IncTick+0x24>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4413      	add	r3, r2
 80049f4:	4a04      	ldr	r2, [pc, #16]	; (8004a08 <HAL_IncTick+0x24>)
 80049f6:	6013      	str	r3, [r2, #0]
}
 80049f8:	bf00      	nop
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	2000000c 	.word	0x2000000c
 8004a08:	20002c44 	.word	0x20002c44

08004a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8004a10:	4b03      	ldr	r3, [pc, #12]	; (8004a20 <HAL_GetTick+0x14>)
 8004a12:	681b      	ldr	r3, [r3, #0]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	20002c44 	.word	0x20002c44

08004a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a2c:	f7ff ffee 	bl	8004a0c <HAL_GetTick>
 8004a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a3c:	d005      	beq.n	8004a4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a3e:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <HAL_Delay+0x44>)
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	461a      	mov	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4413      	add	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a4a:	bf00      	nop
 8004a4c:	f7ff ffde 	bl	8004a0c <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d8f7      	bhi.n	8004a4c <HAL_Delay+0x28>
  {
  }
}
 8004a5c:	bf00      	nop
 8004a5e:	bf00      	nop
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	2000000c 	.word	0x2000000c

08004a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a7c:	4b0c      	ldr	r3, [pc, #48]	; (8004ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a88:	4013      	ands	r3, r2
 8004a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a9e:	4a04      	ldr	r2, [pc, #16]	; (8004ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	60d3      	str	r3, [r2, #12]
}
 8004aa4:	bf00      	nop
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	e000ed00 	.word	0xe000ed00

08004ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ab8:	4b04      	ldr	r3, [pc, #16]	; (8004acc <__NVIC_GetPriorityGrouping+0x18>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	0a1b      	lsrs	r3, r3, #8
 8004abe:	f003 0307 	and.w	r3, r3, #7
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	e000ed00 	.word	0xe000ed00

08004ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	db0b      	blt.n	8004afa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ae2:	79fb      	ldrb	r3, [r7, #7]
 8004ae4:	f003 021f 	and.w	r2, r3, #31
 8004ae8:	4907      	ldr	r1, [pc, #28]	; (8004b08 <__NVIC_EnableIRQ+0x38>)
 8004aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aee:	095b      	lsrs	r3, r3, #5
 8004af0:	2001      	movs	r0, #1
 8004af2:	fa00 f202 	lsl.w	r2, r0, r2
 8004af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	e000e100 	.word	0xe000e100

08004b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	4603      	mov	r3, r0
 8004b14:	6039      	str	r1, [r7, #0]
 8004b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	db0a      	blt.n	8004b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	490c      	ldr	r1, [pc, #48]	; (8004b58 <__NVIC_SetPriority+0x4c>)
 8004b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b2a:	0112      	lsls	r2, r2, #4
 8004b2c:	b2d2      	uxtb	r2, r2
 8004b2e:	440b      	add	r3, r1
 8004b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b34:	e00a      	b.n	8004b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	4908      	ldr	r1, [pc, #32]	; (8004b5c <__NVIC_SetPriority+0x50>)
 8004b3c:	79fb      	ldrb	r3, [r7, #7]
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	3b04      	subs	r3, #4
 8004b44:	0112      	lsls	r2, r2, #4
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	440b      	add	r3, r1
 8004b4a:	761a      	strb	r2, [r3, #24]
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	e000e100 	.word	0xe000e100
 8004b5c:	e000ed00 	.word	0xe000ed00

08004b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b089      	sub	sp, #36	; 0x24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	f1c3 0307 	rsb	r3, r3, #7
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	bf28      	it	cs
 8004b7e:	2304      	movcs	r3, #4
 8004b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	3304      	adds	r3, #4
 8004b86:	2b06      	cmp	r3, #6
 8004b88:	d902      	bls.n	8004b90 <NVIC_EncodePriority+0x30>
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	3b03      	subs	r3, #3
 8004b8e:	e000      	b.n	8004b92 <NVIC_EncodePriority+0x32>
 8004b90:	2300      	movs	r3, #0
 8004b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9e:	43da      	mvns	r2, r3
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	401a      	ands	r2, r3
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ba8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb2:	43d9      	mvns	r1, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bb8:	4313      	orrs	r3, r2
         );
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3724      	adds	r7, #36	; 0x24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
	...

08004bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bd8:	d301      	bcc.n	8004bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e00f      	b.n	8004bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bde:	4a0a      	ldr	r2, [pc, #40]	; (8004c08 <SysTick_Config+0x40>)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004be6:	210f      	movs	r1, #15
 8004be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bec:	f7ff ff8e 	bl	8004b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bf0:	4b05      	ldr	r3, [pc, #20]	; (8004c08 <SysTick_Config+0x40>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bf6:	4b04      	ldr	r3, [pc, #16]	; (8004c08 <SysTick_Config+0x40>)
 8004bf8:	2207      	movs	r2, #7
 8004bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	e000e010 	.word	0xe000e010

08004c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7ff ff29 	bl	8004a6c <__NVIC_SetPriorityGrouping>
}
 8004c1a:	bf00      	nop
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b086      	sub	sp, #24
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	4603      	mov	r3, r0
 8004c2a:	60b9      	str	r1, [r7, #8]
 8004c2c:	607a      	str	r2, [r7, #4]
 8004c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c34:	f7ff ff3e 	bl	8004ab4 <__NVIC_GetPriorityGrouping>
 8004c38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	6978      	ldr	r0, [r7, #20]
 8004c40:	f7ff ff8e 	bl	8004b60 <NVIC_EncodePriority>
 8004c44:	4602      	mov	r2, r0
 8004c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7ff ff5d 	bl	8004b0c <__NVIC_SetPriority>
}
 8004c52:	bf00      	nop
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b082      	sub	sp, #8
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	4603      	mov	r3, r0
 8004c62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff ff31 	bl	8004ad0 <__NVIC_EnableIRQ>
}
 8004c6e:	bf00      	nop
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b082      	sub	sp, #8
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7ff ffa2 	bl	8004bc8 <SysTick_Config>
 8004c84:	4603      	mov	r3, r0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004c9c:	f7ff feb6 	bl	8004a0c <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e099      	b.n	8004de0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f022 0201 	bic.w	r2, r2, #1
 8004cca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ccc:	e00f      	b.n	8004cee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cce:	f7ff fe9d 	bl	8004a0c <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b05      	cmp	r3, #5
 8004cda:	d908      	bls.n	8004cee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2203      	movs	r2, #3
 8004ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e078      	b.n	8004de0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1e8      	bne.n	8004cce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	4b38      	ldr	r3, [pc, #224]	; (8004de8 <HAL_DMA_Init+0x158>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	2b04      	cmp	r3, #4
 8004d46:	d107      	bne.n	8004d58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d50:	4313      	orrs	r3, r2
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f023 0307 	bic.w	r3, r3, #7
 8004d6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	d117      	bne.n	8004db2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00e      	beq.n	8004db2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 fb01 	bl	800539c <DMA_CheckFifoParam>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d008      	beq.n	8004db2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2240      	movs	r2, #64	; 0x40
 8004da4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004dae:	2301      	movs	r3, #1
 8004db0:	e016      	b.n	8004de0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 fab8 	bl	8005330 <DMA_CalcBaseAndBitshift>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc8:	223f      	movs	r2, #63	; 0x3f
 8004dca:	409a      	lsls	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3718      	adds	r7, #24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	f010803f 	.word	0xf010803f

08004dec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
 8004df8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <HAL_DMA_Start_IT+0x26>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	e040      	b.n	8004e94 <HAL_DMA_Start_IT+0xa8>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d12f      	bne.n	8004e86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2202      	movs	r2, #2
 8004e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	68b9      	ldr	r1, [r7, #8]
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 fa4a 	bl	80052d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e44:	223f      	movs	r2, #63	; 0x3f
 8004e46:	409a      	lsls	r2, r3
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0216 	orr.w	r2, r2, #22
 8004e5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d007      	beq.n	8004e74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 0208 	orr.w	r2, r2, #8
 8004e72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	e005      	b.n	8004e92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e8e:	2302      	movs	r3, #2
 8004e90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004eaa:	f7ff fdaf 	bl	8004a0c <HAL_GetTick>
 8004eae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d008      	beq.n	8004ece <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2280      	movs	r2, #128	; 0x80
 8004ec0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e052      	b.n	8004f74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0216 	bic.w	r2, r2, #22
 8004edc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695a      	ldr	r2, [r3, #20]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004eec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d103      	bne.n	8004efe <HAL_DMA_Abort+0x62>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d007      	beq.n	8004f0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0208 	bic.w	r2, r2, #8
 8004f0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0201 	bic.w	r2, r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f1e:	e013      	b.n	8004f48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f20:	f7ff fd74 	bl	8004a0c <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b05      	cmp	r3, #5
 8004f2c:	d90c      	bls.n	8004f48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2220      	movs	r2, #32
 8004f32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2203      	movs	r2, #3
 8004f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e015      	b.n	8004f74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1e4      	bne.n	8004f20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f5a:	223f      	movs	r2, #63	; 0x3f
 8004f5c:	409a      	lsls	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d004      	beq.n	8004f9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2280      	movs	r2, #128	; 0x80
 8004f94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e00c      	b.n	8004fb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2205      	movs	r2, #5
 8004f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 0201 	bic.w	r2, r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004fcc:	4b8e      	ldr	r3, [pc, #568]	; (8005208 <HAL_DMA_IRQHandler+0x248>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a8e      	ldr	r2, [pc, #568]	; (800520c <HAL_DMA_IRQHandler+0x24c>)
 8004fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd6:	0a9b      	lsrs	r3, r3, #10
 8004fd8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fde:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fea:	2208      	movs	r2, #8
 8004fec:	409a      	lsls	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d01a      	beq.n	800502c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	2b00      	cmp	r3, #0
 8005002:	d013      	beq.n	800502c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0204 	bic.w	r2, r2, #4
 8005012:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005018:	2208      	movs	r2, #8
 800501a:	409a      	lsls	r2, r3
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005024:	f043 0201 	orr.w	r2, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005030:	2201      	movs	r2, #1
 8005032:	409a      	lsls	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4013      	ands	r3, r2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d012      	beq.n	8005062 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00b      	beq.n	8005062 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800504e:	2201      	movs	r2, #1
 8005050:	409a      	lsls	r2, r3
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505a:	f043 0202 	orr.w	r2, r3, #2
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005066:	2204      	movs	r2, #4
 8005068:	409a      	lsls	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	4013      	ands	r3, r2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d012      	beq.n	8005098 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00b      	beq.n	8005098 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005084:	2204      	movs	r2, #4
 8005086:	409a      	lsls	r2, r3
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005090:	f043 0204 	orr.w	r2, r3, #4
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800509c:	2210      	movs	r2, #16
 800509e:	409a      	lsls	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4013      	ands	r3, r2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d043      	beq.n	8005130 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0308 	and.w	r3, r3, #8
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d03c      	beq.n	8005130 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ba:	2210      	movs	r2, #16
 80050bc:	409a      	lsls	r2, r3
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d018      	beq.n	8005102 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d108      	bne.n	80050f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d024      	beq.n	8005130 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	4798      	blx	r3
 80050ee:	e01f      	b.n	8005130 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d01b      	beq.n	8005130 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	4798      	blx	r3
 8005100:	e016      	b.n	8005130 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510c:	2b00      	cmp	r3, #0
 800510e:	d107      	bne.n	8005120 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 0208 	bic.w	r2, r2, #8
 800511e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005134:	2220      	movs	r2, #32
 8005136:	409a      	lsls	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4013      	ands	r3, r2
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 808f 	beq.w	8005260 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0310 	and.w	r3, r3, #16
 800514c:	2b00      	cmp	r3, #0
 800514e:	f000 8087 	beq.w	8005260 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005156:	2220      	movs	r2, #32
 8005158:	409a      	lsls	r2, r3
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b05      	cmp	r3, #5
 8005168:	d136      	bne.n	80051d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0216 	bic.w	r2, r2, #22
 8005178:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	695a      	ldr	r2, [r3, #20]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005188:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	2b00      	cmp	r3, #0
 8005190:	d103      	bne.n	800519a <HAL_DMA_IRQHandler+0x1da>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005196:	2b00      	cmp	r3, #0
 8005198:	d007      	beq.n	80051aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 0208 	bic.w	r2, r2, #8
 80051a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ae:	223f      	movs	r2, #63	; 0x3f
 80051b0:	409a      	lsls	r2, r3
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d07e      	beq.n	80052cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	4798      	blx	r3
        }
        return;
 80051d6:	e079      	b.n	80052cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d01d      	beq.n	8005222 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10d      	bne.n	8005210 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d031      	beq.n	8005260 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	4798      	blx	r3
 8005204:	e02c      	b.n	8005260 <HAL_DMA_IRQHandler+0x2a0>
 8005206:	bf00      	nop
 8005208:	20000004 	.word	0x20000004
 800520c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005214:	2b00      	cmp	r3, #0
 8005216:	d023      	beq.n	8005260 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	4798      	blx	r3
 8005220:	e01e      	b.n	8005260 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10f      	bne.n	8005250 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 0210 	bic.w	r2, r2, #16
 800523e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005264:	2b00      	cmp	r3, #0
 8005266:	d032      	beq.n	80052ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	d022      	beq.n	80052ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2205      	movs	r2, #5
 8005278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 0201 	bic.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	3301      	adds	r3, #1
 8005290:	60bb      	str	r3, [r7, #8]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	429a      	cmp	r2, r3
 8005296:	d307      	bcc.n	80052a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1f2      	bne.n	800528c <HAL_DMA_IRQHandler+0x2cc>
 80052a6:	e000      	b.n	80052aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80052a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d005      	beq.n	80052ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	4798      	blx	r3
 80052ca:	e000      	b.n	80052ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80052cc:	bf00      	nop
    }
  }
}
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
 80052e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	2b40      	cmp	r3, #64	; 0x40
 8005300:	d108      	bne.n	8005314 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005312:	e007      	b.n	8005324 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	60da      	str	r2, [r3, #12]
}
 8005324:	bf00      	nop
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	b2db      	uxtb	r3, r3
 800533e:	3b10      	subs	r3, #16
 8005340:	4a14      	ldr	r2, [pc, #80]	; (8005394 <DMA_CalcBaseAndBitshift+0x64>)
 8005342:	fba2 2303 	umull	r2, r3, r2, r3
 8005346:	091b      	lsrs	r3, r3, #4
 8005348:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800534a:	4a13      	ldr	r2, [pc, #76]	; (8005398 <DMA_CalcBaseAndBitshift+0x68>)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4413      	add	r3, r2
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	461a      	mov	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2b03      	cmp	r3, #3
 800535c:	d909      	bls.n	8005372 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005366:	f023 0303 	bic.w	r3, r3, #3
 800536a:	1d1a      	adds	r2, r3, #4
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	659a      	str	r2, [r3, #88]	; 0x58
 8005370:	e007      	b.n	8005382 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800537a:	f023 0303 	bic.w	r3, r3, #3
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005386:	4618      	mov	r0, r3
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	aaaaaaab 	.word	0xaaaaaaab
 8005398:	08011f8c 	.word	0x08011f8c

0800539c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053a4:	2300      	movs	r3, #0
 80053a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d11f      	bne.n	80053f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d856      	bhi.n	800546a <DMA_CheckFifoParam+0xce>
 80053bc:	a201      	add	r2, pc, #4	; (adr r2, 80053c4 <DMA_CheckFifoParam+0x28>)
 80053be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c2:	bf00      	nop
 80053c4:	080053d5 	.word	0x080053d5
 80053c8:	080053e7 	.word	0x080053e7
 80053cc:	080053d5 	.word	0x080053d5
 80053d0:	0800546b 	.word	0x0800546b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d046      	beq.n	800546e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053e4:	e043      	b.n	800546e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053ee:	d140      	bne.n	8005472 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053f4:	e03d      	b.n	8005472 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053fe:	d121      	bne.n	8005444 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2b03      	cmp	r3, #3
 8005404:	d837      	bhi.n	8005476 <DMA_CheckFifoParam+0xda>
 8005406:	a201      	add	r2, pc, #4	; (adr r2, 800540c <DMA_CheckFifoParam+0x70>)
 8005408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540c:	0800541d 	.word	0x0800541d
 8005410:	08005423 	.word	0x08005423
 8005414:	0800541d 	.word	0x0800541d
 8005418:	08005435 	.word	0x08005435
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	73fb      	strb	r3, [r7, #15]
      break;
 8005420:	e030      	b.n	8005484 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005426:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d025      	beq.n	800547a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005432:	e022      	b.n	800547a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800543c:	d11f      	bne.n	800547e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005442:	e01c      	b.n	800547e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b02      	cmp	r3, #2
 8005448:	d903      	bls.n	8005452 <DMA_CheckFifoParam+0xb6>
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2b03      	cmp	r3, #3
 800544e:	d003      	beq.n	8005458 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005450:	e018      	b.n	8005484 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	73fb      	strb	r3, [r7, #15]
      break;
 8005456:	e015      	b.n	8005484 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00e      	beq.n	8005482 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	73fb      	strb	r3, [r7, #15]
      break;
 8005468:	e00b      	b.n	8005482 <DMA_CheckFifoParam+0xe6>
      break;
 800546a:	bf00      	nop
 800546c:	e00a      	b.n	8005484 <DMA_CheckFifoParam+0xe8>
      break;
 800546e:	bf00      	nop
 8005470:	e008      	b.n	8005484 <DMA_CheckFifoParam+0xe8>
      break;
 8005472:	bf00      	nop
 8005474:	e006      	b.n	8005484 <DMA_CheckFifoParam+0xe8>
      break;
 8005476:	bf00      	nop
 8005478:	e004      	b.n	8005484 <DMA_CheckFifoParam+0xe8>
      break;
 800547a:	bf00      	nop
 800547c:	e002      	b.n	8005484 <DMA_CheckFifoParam+0xe8>
      break;   
 800547e:	bf00      	nop
 8005480:	e000      	b.n	8005484 <DMA_CheckFifoParam+0xe8>
      break;
 8005482:	bf00      	nop
    }
  } 
  
  return status; 
 8005484:	7bfb      	ldrb	r3, [r7, #15]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop

08005494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005494:	b480      	push	{r7}
 8005496:	b089      	sub	sp, #36	; 0x24
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800549e:	2300      	movs	r3, #0
 80054a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054aa:	2300      	movs	r3, #0
 80054ac:	61fb      	str	r3, [r7, #28]
 80054ae:	e16b      	b.n	8005788 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80054b0:	2201      	movs	r2, #1
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	fa02 f303 	lsl.w	r3, r2, r3
 80054b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	4013      	ands	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	f040 815a 	bne.w	8005782 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d005      	beq.n	80054e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d130      	bne.n	8005548 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	2203      	movs	r2, #3
 80054f2:	fa02 f303 	lsl.w	r3, r2, r3
 80054f6:	43db      	mvns	r3, r3
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	4013      	ands	r3, r2
 80054fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	fa02 f303 	lsl.w	r3, r2, r3
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	4313      	orrs	r3, r2
 800550e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800551c:	2201      	movs	r2, #1
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	fa02 f303 	lsl.w	r3, r2, r3
 8005524:	43db      	mvns	r3, r3
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	4013      	ands	r3, r2
 800552a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	091b      	lsrs	r3, r3, #4
 8005532:	f003 0201 	and.w	r2, r3, #1
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	fa02 f303 	lsl.w	r3, r2, r3
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	4313      	orrs	r3, r2
 8005540:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f003 0303 	and.w	r3, r3, #3
 8005550:	2b03      	cmp	r3, #3
 8005552:	d017      	beq.n	8005584 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	2203      	movs	r2, #3
 8005560:	fa02 f303 	lsl.w	r3, r2, r3
 8005564:	43db      	mvns	r3, r3
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	4013      	ands	r3, r2
 800556a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	fa02 f303 	lsl.w	r3, r2, r3
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	4313      	orrs	r3, r2
 800557c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f003 0303 	and.w	r3, r3, #3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d123      	bne.n	80055d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	08da      	lsrs	r2, r3, #3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3208      	adds	r2, #8
 8005598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800559c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	220f      	movs	r2, #15
 80055a8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ac:	43db      	mvns	r3, r3
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	4013      	ands	r3, r2
 80055b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	691a      	ldr	r2, [r3, #16]
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	fa02 f303 	lsl.w	r3, r2, r3
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	08da      	lsrs	r2, r3, #3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	3208      	adds	r2, #8
 80055d2:	69b9      	ldr	r1, [r7, #24]
 80055d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	005b      	lsls	r3, r3, #1
 80055e2:	2203      	movs	r2, #3
 80055e4:	fa02 f303 	lsl.w	r3, r2, r3
 80055e8:	43db      	mvns	r3, r3
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	4013      	ands	r3, r2
 80055ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f003 0203 	and.w	r2, r3, #3
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	4313      	orrs	r3, r2
 8005604:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 80b4 	beq.w	8005782 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800561a:	2300      	movs	r3, #0
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	4b60      	ldr	r3, [pc, #384]	; (80057a0 <HAL_GPIO_Init+0x30c>)
 8005620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005622:	4a5f      	ldr	r2, [pc, #380]	; (80057a0 <HAL_GPIO_Init+0x30c>)
 8005624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005628:	6453      	str	r3, [r2, #68]	; 0x44
 800562a:	4b5d      	ldr	r3, [pc, #372]	; (80057a0 <HAL_GPIO_Init+0x30c>)
 800562c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005632:	60fb      	str	r3, [r7, #12]
 8005634:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005636:	4a5b      	ldr	r2, [pc, #364]	; (80057a4 <HAL_GPIO_Init+0x310>)
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	089b      	lsrs	r3, r3, #2
 800563c:	3302      	adds	r3, #2
 800563e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005642:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	f003 0303 	and.w	r3, r3, #3
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	220f      	movs	r2, #15
 800564e:	fa02 f303 	lsl.w	r3, r2, r3
 8005652:	43db      	mvns	r3, r3
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	4013      	ands	r3, r2
 8005658:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a52      	ldr	r2, [pc, #328]	; (80057a8 <HAL_GPIO_Init+0x314>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d02b      	beq.n	80056ba <HAL_GPIO_Init+0x226>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a51      	ldr	r2, [pc, #324]	; (80057ac <HAL_GPIO_Init+0x318>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d025      	beq.n	80056b6 <HAL_GPIO_Init+0x222>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a50      	ldr	r2, [pc, #320]	; (80057b0 <HAL_GPIO_Init+0x31c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d01f      	beq.n	80056b2 <HAL_GPIO_Init+0x21e>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a4f      	ldr	r2, [pc, #316]	; (80057b4 <HAL_GPIO_Init+0x320>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d019      	beq.n	80056ae <HAL_GPIO_Init+0x21a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a4e      	ldr	r2, [pc, #312]	; (80057b8 <HAL_GPIO_Init+0x324>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d013      	beq.n	80056aa <HAL_GPIO_Init+0x216>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a4d      	ldr	r2, [pc, #308]	; (80057bc <HAL_GPIO_Init+0x328>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d00d      	beq.n	80056a6 <HAL_GPIO_Init+0x212>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a4c      	ldr	r2, [pc, #304]	; (80057c0 <HAL_GPIO_Init+0x32c>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d007      	beq.n	80056a2 <HAL_GPIO_Init+0x20e>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a4b      	ldr	r2, [pc, #300]	; (80057c4 <HAL_GPIO_Init+0x330>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d101      	bne.n	800569e <HAL_GPIO_Init+0x20a>
 800569a:	2307      	movs	r3, #7
 800569c:	e00e      	b.n	80056bc <HAL_GPIO_Init+0x228>
 800569e:	2308      	movs	r3, #8
 80056a0:	e00c      	b.n	80056bc <HAL_GPIO_Init+0x228>
 80056a2:	2306      	movs	r3, #6
 80056a4:	e00a      	b.n	80056bc <HAL_GPIO_Init+0x228>
 80056a6:	2305      	movs	r3, #5
 80056a8:	e008      	b.n	80056bc <HAL_GPIO_Init+0x228>
 80056aa:	2304      	movs	r3, #4
 80056ac:	e006      	b.n	80056bc <HAL_GPIO_Init+0x228>
 80056ae:	2303      	movs	r3, #3
 80056b0:	e004      	b.n	80056bc <HAL_GPIO_Init+0x228>
 80056b2:	2302      	movs	r3, #2
 80056b4:	e002      	b.n	80056bc <HAL_GPIO_Init+0x228>
 80056b6:	2301      	movs	r3, #1
 80056b8:	e000      	b.n	80056bc <HAL_GPIO_Init+0x228>
 80056ba:	2300      	movs	r3, #0
 80056bc:	69fa      	ldr	r2, [r7, #28]
 80056be:	f002 0203 	and.w	r2, r2, #3
 80056c2:	0092      	lsls	r2, r2, #2
 80056c4:	4093      	lsls	r3, r2
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056cc:	4935      	ldr	r1, [pc, #212]	; (80057a4 <HAL_GPIO_Init+0x310>)
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	089b      	lsrs	r3, r3, #2
 80056d2:	3302      	adds	r3, #2
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056da:	4b3b      	ldr	r3, [pc, #236]	; (80057c8 <HAL_GPIO_Init+0x334>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	43db      	mvns	r3, r3
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	4013      	ands	r3, r2
 80056e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056fe:	4a32      	ldr	r2, [pc, #200]	; (80057c8 <HAL_GPIO_Init+0x334>)
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005704:	4b30      	ldr	r3, [pc, #192]	; (80057c8 <HAL_GPIO_Init+0x334>)
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	43db      	mvns	r3, r3
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	4013      	ands	r3, r2
 8005712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d003      	beq.n	8005728 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	4313      	orrs	r3, r2
 8005726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005728:	4a27      	ldr	r2, [pc, #156]	; (80057c8 <HAL_GPIO_Init+0x334>)
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800572e:	4b26      	ldr	r3, [pc, #152]	; (80057c8 <HAL_GPIO_Init+0x334>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	43db      	mvns	r3, r3
 8005738:	69ba      	ldr	r2, [r7, #24]
 800573a:	4013      	ands	r3, r2
 800573c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	4313      	orrs	r3, r2
 8005750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005752:	4a1d      	ldr	r2, [pc, #116]	; (80057c8 <HAL_GPIO_Init+0x334>)
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005758:	4b1b      	ldr	r3, [pc, #108]	; (80057c8 <HAL_GPIO_Init+0x334>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	43db      	mvns	r3, r3
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	4013      	ands	r3, r2
 8005766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	4313      	orrs	r3, r2
 800577a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800577c:	4a12      	ldr	r2, [pc, #72]	; (80057c8 <HAL_GPIO_Init+0x334>)
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	3301      	adds	r3, #1
 8005786:	61fb      	str	r3, [r7, #28]
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	2b0f      	cmp	r3, #15
 800578c:	f67f ae90 	bls.w	80054b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005790:	bf00      	nop
 8005792:	bf00      	nop
 8005794:	3724      	adds	r7, #36	; 0x24
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	40023800 	.word	0x40023800
 80057a4:	40013800 	.word	0x40013800
 80057a8:	40020000 	.word	0x40020000
 80057ac:	40020400 	.word	0x40020400
 80057b0:	40020800 	.word	0x40020800
 80057b4:	40020c00 	.word	0x40020c00
 80057b8:	40021000 	.word	0x40021000
 80057bc:	40021400 	.word	0x40021400
 80057c0:	40021800 	.word	0x40021800
 80057c4:	40021c00 	.word	0x40021c00
 80057c8:	40013c00 	.word	0x40013c00

080057cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	460b      	mov	r3, r1
 80057d6:	807b      	strh	r3, [r7, #2]
 80057d8:	4613      	mov	r3, r2
 80057da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057dc:	787b      	ldrb	r3, [r7, #1]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057e2:	887a      	ldrh	r2, [r7, #2]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80057e8:	e003      	b.n	80057f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80057ea:	887b      	ldrh	r3, [r7, #2]
 80057ec:	041a      	lsls	r2, r3, #16
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	619a      	str	r2, [r3, #24]
}
 80057f2:	bf00      	nop
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80057fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005800:	b08f      	sub	sp, #60	; 0x3c
 8005802:	af0a      	add	r7, sp, #40	; 0x28
 8005804:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e054      	b.n	80058ba <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d106      	bne.n	8005830 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f00b fb82 	bl	8010f34 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2203      	movs	r2, #3
 8005834:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800583c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005840:	2b00      	cmp	r3, #0
 8005842:	d102      	bne.n	800584a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4618      	mov	r0, r3
 8005850:	f004 fd70 	bl	800a334 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	603b      	str	r3, [r7, #0]
 800585a:	687e      	ldr	r6, [r7, #4]
 800585c:	466d      	mov	r5, sp
 800585e:	f106 0410 	add.w	r4, r6, #16
 8005862:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800586a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800586e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005872:	1d33      	adds	r3, r6, #4
 8005874:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005876:	6838      	ldr	r0, [r7, #0]
 8005878:	f004 fcea 	bl	800a250 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2101      	movs	r1, #1
 8005882:	4618      	mov	r0, r3
 8005884:	f004 fd67 	bl	800a356 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	603b      	str	r3, [r7, #0]
 800588e:	687e      	ldr	r6, [r7, #4]
 8005890:	466d      	mov	r5, sp
 8005892:	f106 0410 	add.w	r4, r6, #16
 8005896:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005898:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800589a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800589c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800589e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80058a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80058a6:	1d33      	adds	r3, r6, #4
 80058a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058aa:	6838      	ldr	r0, [r7, #0]
 80058ac:	f004 fef0 	bl	800a690 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080058c2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80058c2:	b590      	push	{r4, r7, lr}
 80058c4:	b089      	sub	sp, #36	; 0x24
 80058c6:	af04      	add	r7, sp, #16
 80058c8:	6078      	str	r0, [r7, #4]
 80058ca:	4608      	mov	r0, r1
 80058cc:	4611      	mov	r1, r2
 80058ce:	461a      	mov	r2, r3
 80058d0:	4603      	mov	r3, r0
 80058d2:	70fb      	strb	r3, [r7, #3]
 80058d4:	460b      	mov	r3, r1
 80058d6:	70bb      	strb	r3, [r7, #2]
 80058d8:	4613      	mov	r3, r2
 80058da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d101      	bne.n	80058ea <HAL_HCD_HC_Init+0x28>
 80058e6:	2302      	movs	r3, #2
 80058e8:	e076      	b.n	80059d8 <HAL_HCD_HC_Init+0x116>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80058f2:	78fb      	ldrb	r3, [r7, #3]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	212c      	movs	r1, #44	; 0x2c
 80058f8:	fb01 f303 	mul.w	r3, r1, r3
 80058fc:	4413      	add	r3, r2
 80058fe:	333d      	adds	r3, #61	; 0x3d
 8005900:	2200      	movs	r2, #0
 8005902:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005904:	78fb      	ldrb	r3, [r7, #3]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	212c      	movs	r1, #44	; 0x2c
 800590a:	fb01 f303 	mul.w	r3, r1, r3
 800590e:	4413      	add	r3, r2
 8005910:	3338      	adds	r3, #56	; 0x38
 8005912:	787a      	ldrb	r2, [r7, #1]
 8005914:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8005916:	78fb      	ldrb	r3, [r7, #3]
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	212c      	movs	r1, #44	; 0x2c
 800591c:	fb01 f303 	mul.w	r3, r1, r3
 8005920:	4413      	add	r3, r2
 8005922:	3340      	adds	r3, #64	; 0x40
 8005924:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005926:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005928:	78fb      	ldrb	r3, [r7, #3]
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	212c      	movs	r1, #44	; 0x2c
 800592e:	fb01 f303 	mul.w	r3, r1, r3
 8005932:	4413      	add	r3, r2
 8005934:	3339      	adds	r3, #57	; 0x39
 8005936:	78fa      	ldrb	r2, [r7, #3]
 8005938:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800593a:	78fb      	ldrb	r3, [r7, #3]
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	212c      	movs	r1, #44	; 0x2c
 8005940:	fb01 f303 	mul.w	r3, r1, r3
 8005944:	4413      	add	r3, r2
 8005946:	333f      	adds	r3, #63	; 0x3f
 8005948:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800594c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800594e:	78fb      	ldrb	r3, [r7, #3]
 8005950:	78ba      	ldrb	r2, [r7, #2]
 8005952:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005956:	b2d0      	uxtb	r0, r2
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	212c      	movs	r1, #44	; 0x2c
 800595c:	fb01 f303 	mul.w	r3, r1, r3
 8005960:	4413      	add	r3, r2
 8005962:	333a      	adds	r3, #58	; 0x3a
 8005964:	4602      	mov	r2, r0
 8005966:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005968:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800596c:	2b00      	cmp	r3, #0
 800596e:	da09      	bge.n	8005984 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005970:	78fb      	ldrb	r3, [r7, #3]
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	212c      	movs	r1, #44	; 0x2c
 8005976:	fb01 f303 	mul.w	r3, r1, r3
 800597a:	4413      	add	r3, r2
 800597c:	333b      	adds	r3, #59	; 0x3b
 800597e:	2201      	movs	r2, #1
 8005980:	701a      	strb	r2, [r3, #0]
 8005982:	e008      	b.n	8005996 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005984:	78fb      	ldrb	r3, [r7, #3]
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	212c      	movs	r1, #44	; 0x2c
 800598a:	fb01 f303 	mul.w	r3, r1, r3
 800598e:	4413      	add	r3, r2
 8005990:	333b      	adds	r3, #59	; 0x3b
 8005992:	2200      	movs	r2, #0
 8005994:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8005996:	78fb      	ldrb	r3, [r7, #3]
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	212c      	movs	r1, #44	; 0x2c
 800599c:	fb01 f303 	mul.w	r3, r1, r3
 80059a0:	4413      	add	r3, r2
 80059a2:	333c      	adds	r3, #60	; 0x3c
 80059a4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80059a8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6818      	ldr	r0, [r3, #0]
 80059ae:	787c      	ldrb	r4, [r7, #1]
 80059b0:	78ba      	ldrb	r2, [r7, #2]
 80059b2:	78f9      	ldrb	r1, [r7, #3]
 80059b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80059b6:	9302      	str	r3, [sp, #8]
 80059b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80059bc:	9301      	str	r3, [sp, #4]
 80059be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	4623      	mov	r3, r4
 80059c6:	f004 ffe9 	bl	800a99c <USB_HC_Init>
 80059ca:	4603      	mov	r3, r0
 80059cc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80059d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd90      	pop	{r4, r7, pc}

080059e0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	460b      	mov	r3, r1
 80059ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d101      	bne.n	80059fe <HAL_HCD_HC_Halt+0x1e>
 80059fa:	2302      	movs	r3, #2
 80059fc:	e00f      	b.n	8005a1e <HAL_HCD_HC_Halt+0x3e>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	78fa      	ldrb	r2, [r7, #3]
 8005a0c:	4611      	mov	r1, r2
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f005 fa39 	bl	800ae86 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
	...

08005a28 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	4608      	mov	r0, r1
 8005a32:	4611      	mov	r1, r2
 8005a34:	461a      	mov	r2, r3
 8005a36:	4603      	mov	r3, r0
 8005a38:	70fb      	strb	r3, [r7, #3]
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	70bb      	strb	r3, [r7, #2]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005a42:	78fb      	ldrb	r3, [r7, #3]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	212c      	movs	r1, #44	; 0x2c
 8005a48:	fb01 f303 	mul.w	r3, r1, r3
 8005a4c:	4413      	add	r3, r2
 8005a4e:	333b      	adds	r3, #59	; 0x3b
 8005a50:	78ba      	ldrb	r2, [r7, #2]
 8005a52:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005a54:	78fb      	ldrb	r3, [r7, #3]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	212c      	movs	r1, #44	; 0x2c
 8005a5a:	fb01 f303 	mul.w	r3, r1, r3
 8005a5e:	4413      	add	r3, r2
 8005a60:	333f      	adds	r3, #63	; 0x3f
 8005a62:	787a      	ldrb	r2, [r7, #1]
 8005a64:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005a66:	7c3b      	ldrb	r3, [r7, #16]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d112      	bne.n	8005a92 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005a6c:	78fb      	ldrb	r3, [r7, #3]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	212c      	movs	r1, #44	; 0x2c
 8005a72:	fb01 f303 	mul.w	r3, r1, r3
 8005a76:	4413      	add	r3, r2
 8005a78:	3342      	adds	r3, #66	; 0x42
 8005a7a:	2203      	movs	r2, #3
 8005a7c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005a7e:	78fb      	ldrb	r3, [r7, #3]
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	212c      	movs	r1, #44	; 0x2c
 8005a84:	fb01 f303 	mul.w	r3, r1, r3
 8005a88:	4413      	add	r3, r2
 8005a8a:	333d      	adds	r3, #61	; 0x3d
 8005a8c:	7f3a      	ldrb	r2, [r7, #28]
 8005a8e:	701a      	strb	r2, [r3, #0]
 8005a90:	e008      	b.n	8005aa4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005a92:	78fb      	ldrb	r3, [r7, #3]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	212c      	movs	r1, #44	; 0x2c
 8005a98:	fb01 f303 	mul.w	r3, r1, r3
 8005a9c:	4413      	add	r3, r2
 8005a9e:	3342      	adds	r3, #66	; 0x42
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005aa4:	787b      	ldrb	r3, [r7, #1]
 8005aa6:	2b03      	cmp	r3, #3
 8005aa8:	f200 80c6 	bhi.w	8005c38 <HAL_HCD_HC_SubmitRequest+0x210>
 8005aac:	a201      	add	r2, pc, #4	; (adr r2, 8005ab4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8005aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab2:	bf00      	nop
 8005ab4:	08005ac5 	.word	0x08005ac5
 8005ab8:	08005c25 	.word	0x08005c25
 8005abc:	08005b29 	.word	0x08005b29
 8005ac0:	08005ba7 	.word	0x08005ba7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005ac4:	7c3b      	ldrb	r3, [r7, #16]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	f040 80b8 	bne.w	8005c3c <HAL_HCD_HC_SubmitRequest+0x214>
 8005acc:	78bb      	ldrb	r3, [r7, #2]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f040 80b4 	bne.w	8005c3c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8005ad4:	8b3b      	ldrh	r3, [r7, #24]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d108      	bne.n	8005aec <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8005ada:	78fb      	ldrb	r3, [r7, #3]
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	212c      	movs	r1, #44	; 0x2c
 8005ae0:	fb01 f303 	mul.w	r3, r1, r3
 8005ae4:	4413      	add	r3, r2
 8005ae6:	3355      	adds	r3, #85	; 0x55
 8005ae8:	2201      	movs	r2, #1
 8005aea:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005aec:	78fb      	ldrb	r3, [r7, #3]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	212c      	movs	r1, #44	; 0x2c
 8005af2:	fb01 f303 	mul.w	r3, r1, r3
 8005af6:	4413      	add	r3, r2
 8005af8:	3355      	adds	r3, #85	; 0x55
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d109      	bne.n	8005b14 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005b00:	78fb      	ldrb	r3, [r7, #3]
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	212c      	movs	r1, #44	; 0x2c
 8005b06:	fb01 f303 	mul.w	r3, r1, r3
 8005b0a:	4413      	add	r3, r2
 8005b0c:	3342      	adds	r3, #66	; 0x42
 8005b0e:	2200      	movs	r2, #0
 8005b10:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005b12:	e093      	b.n	8005c3c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005b14:	78fb      	ldrb	r3, [r7, #3]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	212c      	movs	r1, #44	; 0x2c
 8005b1a:	fb01 f303 	mul.w	r3, r1, r3
 8005b1e:	4413      	add	r3, r2
 8005b20:	3342      	adds	r3, #66	; 0x42
 8005b22:	2202      	movs	r2, #2
 8005b24:	701a      	strb	r2, [r3, #0]
      break;
 8005b26:	e089      	b.n	8005c3c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005b28:	78bb      	ldrb	r3, [r7, #2]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d11d      	bne.n	8005b6a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005b2e:	78fb      	ldrb	r3, [r7, #3]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	212c      	movs	r1, #44	; 0x2c
 8005b34:	fb01 f303 	mul.w	r3, r1, r3
 8005b38:	4413      	add	r3, r2
 8005b3a:	3355      	adds	r3, #85	; 0x55
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d109      	bne.n	8005b56 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005b42:	78fb      	ldrb	r3, [r7, #3]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	212c      	movs	r1, #44	; 0x2c
 8005b48:	fb01 f303 	mul.w	r3, r1, r3
 8005b4c:	4413      	add	r3, r2
 8005b4e:	3342      	adds	r3, #66	; 0x42
 8005b50:	2200      	movs	r2, #0
 8005b52:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005b54:	e073      	b.n	8005c3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005b56:	78fb      	ldrb	r3, [r7, #3]
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	212c      	movs	r1, #44	; 0x2c
 8005b5c:	fb01 f303 	mul.w	r3, r1, r3
 8005b60:	4413      	add	r3, r2
 8005b62:	3342      	adds	r3, #66	; 0x42
 8005b64:	2202      	movs	r2, #2
 8005b66:	701a      	strb	r2, [r3, #0]
      break;
 8005b68:	e069      	b.n	8005c3e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005b6a:	78fb      	ldrb	r3, [r7, #3]
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	212c      	movs	r1, #44	; 0x2c
 8005b70:	fb01 f303 	mul.w	r3, r1, r3
 8005b74:	4413      	add	r3, r2
 8005b76:	3354      	adds	r3, #84	; 0x54
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d109      	bne.n	8005b92 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005b7e:	78fb      	ldrb	r3, [r7, #3]
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	212c      	movs	r1, #44	; 0x2c
 8005b84:	fb01 f303 	mul.w	r3, r1, r3
 8005b88:	4413      	add	r3, r2
 8005b8a:	3342      	adds	r3, #66	; 0x42
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	701a      	strb	r2, [r3, #0]
      break;
 8005b90:	e055      	b.n	8005c3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005b92:	78fb      	ldrb	r3, [r7, #3]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	212c      	movs	r1, #44	; 0x2c
 8005b98:	fb01 f303 	mul.w	r3, r1, r3
 8005b9c:	4413      	add	r3, r2
 8005b9e:	3342      	adds	r3, #66	; 0x42
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	701a      	strb	r2, [r3, #0]
      break;
 8005ba4:	e04b      	b.n	8005c3e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005ba6:	78bb      	ldrb	r3, [r7, #2]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d11d      	bne.n	8005be8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005bac:	78fb      	ldrb	r3, [r7, #3]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	212c      	movs	r1, #44	; 0x2c
 8005bb2:	fb01 f303 	mul.w	r3, r1, r3
 8005bb6:	4413      	add	r3, r2
 8005bb8:	3355      	adds	r3, #85	; 0x55
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d109      	bne.n	8005bd4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005bc0:	78fb      	ldrb	r3, [r7, #3]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	212c      	movs	r1, #44	; 0x2c
 8005bc6:	fb01 f303 	mul.w	r3, r1, r3
 8005bca:	4413      	add	r3, r2
 8005bcc:	3342      	adds	r3, #66	; 0x42
 8005bce:	2200      	movs	r2, #0
 8005bd0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005bd2:	e034      	b.n	8005c3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005bd4:	78fb      	ldrb	r3, [r7, #3]
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	212c      	movs	r1, #44	; 0x2c
 8005bda:	fb01 f303 	mul.w	r3, r1, r3
 8005bde:	4413      	add	r3, r2
 8005be0:	3342      	adds	r3, #66	; 0x42
 8005be2:	2202      	movs	r2, #2
 8005be4:	701a      	strb	r2, [r3, #0]
      break;
 8005be6:	e02a      	b.n	8005c3e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	212c      	movs	r1, #44	; 0x2c
 8005bee:	fb01 f303 	mul.w	r3, r1, r3
 8005bf2:	4413      	add	r3, r2
 8005bf4:	3354      	adds	r3, #84	; 0x54
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d109      	bne.n	8005c10 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005bfc:	78fb      	ldrb	r3, [r7, #3]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	212c      	movs	r1, #44	; 0x2c
 8005c02:	fb01 f303 	mul.w	r3, r1, r3
 8005c06:	4413      	add	r3, r2
 8005c08:	3342      	adds	r3, #66	; 0x42
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	701a      	strb	r2, [r3, #0]
      break;
 8005c0e:	e016      	b.n	8005c3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005c10:	78fb      	ldrb	r3, [r7, #3]
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	212c      	movs	r1, #44	; 0x2c
 8005c16:	fb01 f303 	mul.w	r3, r1, r3
 8005c1a:	4413      	add	r3, r2
 8005c1c:	3342      	adds	r3, #66	; 0x42
 8005c1e:	2202      	movs	r2, #2
 8005c20:	701a      	strb	r2, [r3, #0]
      break;
 8005c22:	e00c      	b.n	8005c3e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005c24:	78fb      	ldrb	r3, [r7, #3]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	212c      	movs	r1, #44	; 0x2c
 8005c2a:	fb01 f303 	mul.w	r3, r1, r3
 8005c2e:	4413      	add	r3, r2
 8005c30:	3342      	adds	r3, #66	; 0x42
 8005c32:	2200      	movs	r2, #0
 8005c34:	701a      	strb	r2, [r3, #0]
      break;
 8005c36:	e002      	b.n	8005c3e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8005c38:	bf00      	nop
 8005c3a:	e000      	b.n	8005c3e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8005c3c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005c3e:	78fb      	ldrb	r3, [r7, #3]
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	212c      	movs	r1, #44	; 0x2c
 8005c44:	fb01 f303 	mul.w	r3, r1, r3
 8005c48:	4413      	add	r3, r2
 8005c4a:	3344      	adds	r3, #68	; 0x44
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005c50:	78fb      	ldrb	r3, [r7, #3]
 8005c52:	8b3a      	ldrh	r2, [r7, #24]
 8005c54:	6879      	ldr	r1, [r7, #4]
 8005c56:	202c      	movs	r0, #44	; 0x2c
 8005c58:	fb00 f303 	mul.w	r3, r0, r3
 8005c5c:	440b      	add	r3, r1
 8005c5e:	334c      	adds	r3, #76	; 0x4c
 8005c60:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005c62:	78fb      	ldrb	r3, [r7, #3]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	212c      	movs	r1, #44	; 0x2c
 8005c68:	fb01 f303 	mul.w	r3, r1, r3
 8005c6c:	4413      	add	r3, r2
 8005c6e:	3360      	adds	r3, #96	; 0x60
 8005c70:	2200      	movs	r2, #0
 8005c72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005c74:	78fb      	ldrb	r3, [r7, #3]
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	212c      	movs	r1, #44	; 0x2c
 8005c7a:	fb01 f303 	mul.w	r3, r1, r3
 8005c7e:	4413      	add	r3, r2
 8005c80:	3350      	adds	r3, #80	; 0x50
 8005c82:	2200      	movs	r2, #0
 8005c84:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005c86:	78fb      	ldrb	r3, [r7, #3]
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	212c      	movs	r1, #44	; 0x2c
 8005c8c:	fb01 f303 	mul.w	r3, r1, r3
 8005c90:	4413      	add	r3, r2
 8005c92:	3339      	adds	r3, #57	; 0x39
 8005c94:	78fa      	ldrb	r2, [r7, #3]
 8005c96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005c98:	78fb      	ldrb	r3, [r7, #3]
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	212c      	movs	r1, #44	; 0x2c
 8005c9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ca2:	4413      	add	r3, r2
 8005ca4:	3361      	adds	r3, #97	; 0x61
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6818      	ldr	r0, [r3, #0]
 8005cae:	78fb      	ldrb	r3, [r7, #3]
 8005cb0:	222c      	movs	r2, #44	; 0x2c
 8005cb2:	fb02 f303 	mul.w	r3, r2, r3
 8005cb6:	3338      	adds	r3, #56	; 0x38
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	18d1      	adds	r1, r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	f004 ff8c 	bl	800abe0 <USB_HC_StartXfer>
 8005cc8:	4603      	mov	r3, r0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop

08005cd4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f004 fc8d 	bl	800a60a <USB_GetMode>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	f040 80f6 	bne.w	8005ee4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f004 fc71 	bl	800a5e4 <USB_ReadInterrupts>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 80ec 	beq.w	8005ee2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f004 fc68 	bl	800a5e4 <USB_ReadInterrupts>
 8005d14:	4603      	mov	r3, r0
 8005d16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d1e:	d104      	bne.n	8005d2a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005d28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f004 fc58 	bl	800a5e4 <USB_ReadInterrupts>
 8005d34:	4603      	mov	r3, r0
 8005d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d3e:	d104      	bne.n	8005d4a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005d48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f004 fc48 	bl	800a5e4 <USB_ReadInterrupts>
 8005d54:	4603      	mov	r3, r0
 8005d56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d5e:	d104      	bne.n	8005d6a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005d68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f004 fc38 	bl	800a5e4 <USB_ReadInterrupts>
 8005d74:	4603      	mov	r3, r0
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d103      	bne.n	8005d86 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2202      	movs	r2, #2
 8005d84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f004 fc2a 	bl	800a5e4 <USB_ReadInterrupts>
 8005d90:	4603      	mov	r3, r0
 8005d92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d9a:	d11c      	bne.n	8005dd6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005da4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10f      	bne.n	8005dd6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8005db6:	2110      	movs	r1, #16
 8005db8:	6938      	ldr	r0, [r7, #16]
 8005dba:	f004 fb19 	bl	800a3f0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8005dbe:	6938      	ldr	r0, [r7, #16]
 8005dc0:	f004 fb4a 	bl	800a458 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2101      	movs	r1, #1
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f004 fd20 	bl	800a810 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f00b f92d 	bl	8011030 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f004 fc02 	bl	800a5e4 <USB_ReadInterrupts>
 8005de0:	4603      	mov	r3, r0
 8005de2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005de6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005dea:	d102      	bne.n	8005df2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f001 f89e 	bl	8006f2e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f004 fbf4 	bl	800a5e4 <USB_ReadInterrupts>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	f003 0308 	and.w	r3, r3, #8
 8005e02:	2b08      	cmp	r3, #8
 8005e04:	d106      	bne.n	8005e14 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f00b f8f6 	bl	8010ff8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2208      	movs	r2, #8
 8005e12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f004 fbe3 	bl	800a5e4 <USB_ReadInterrupts>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	f003 0310 	and.w	r3, r3, #16
 8005e24:	2b10      	cmp	r3, #16
 8005e26:	d101      	bne.n	8005e2c <HAL_HCD_IRQHandler+0x158>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e000      	b.n	8005e2e <HAL_HCD_IRQHandler+0x15a>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d012      	beq.n	8005e58 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	699a      	ldr	r2, [r3, #24]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0210 	bic.w	r2, r2, #16
 8005e40:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 ffa1 	bl	8006d8a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699a      	ldr	r2, [r3, #24]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0210 	orr.w	r2, r2, #16
 8005e56:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f004 fbc1 	bl	800a5e4 <USB_ReadInterrupts>
 8005e62:	4603      	mov	r3, r0
 8005e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e6c:	d13a      	bne.n	8005ee4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4618      	mov	r0, r3
 8005e74:	f004 fff6 	bl	800ae64 <USB_HC_ReadInterrupt>
 8005e78:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	617b      	str	r3, [r7, #20]
 8005e7e:	e025      	b.n	8005ecc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f003 030f 	and.w	r3, r3, #15
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	fa22 f303 	lsr.w	r3, r2, r3
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d018      	beq.n	8005ec6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eaa:	d106      	bne.n	8005eba <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f8ab 	bl	800600e <HCD_HC_IN_IRQHandler>
 8005eb8:	e005      	b.n	8005ec6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fbf9 	bl	80066b8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	617b      	str	r3, [r7, #20]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d3d4      	bcc.n	8005e80 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ede:	615a      	str	r2, [r3, #20]
 8005ee0:	e000      	b.n	8005ee4 <HAL_HCD_IRQHandler+0x210>
      return;
 8005ee2:	bf00      	nop
    }
  }
}
 8005ee4:	3718      	adds	r7, #24
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b082      	sub	sp, #8
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d101      	bne.n	8005f00 <HAL_HCD_Start+0x16>
 8005efc:	2302      	movs	r3, #2
 8005efe:	e013      	b.n	8005f28 <HAL_HCD_Start+0x3e>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2101      	movs	r1, #1
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f004 fce2 	bl	800a8d8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f004 f9fa 	bl	800a312 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d101      	bne.n	8005f46 <HAL_HCD_Stop+0x16>
 8005f42:	2302      	movs	r3, #2
 8005f44:	e00d      	b.n	8005f62 <HAL_HCD_Stop+0x32>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f005 f8d0 	bl	800b0f8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b082      	sub	sp, #8
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f004 fc84 	bl	800a884 <USB_ResetPort>
 8005f7c:	4603      	mov	r3, r0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
 8005f8e:	460b      	mov	r3, r1
 8005f90:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005f92:	78fb      	ldrb	r3, [r7, #3]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	212c      	movs	r1, #44	; 0x2c
 8005f98:	fb01 f303 	mul.w	r3, r1, r3
 8005f9c:	4413      	add	r3, r2
 8005f9e:	3360      	adds	r3, #96	; 0x60
 8005fa0:	781b      	ldrb	r3, [r3, #0]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005fba:	78fb      	ldrb	r3, [r7, #3]
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	212c      	movs	r1, #44	; 0x2c
 8005fc0:	fb01 f303 	mul.w	r3, r1, r3
 8005fc4:	4413      	add	r3, r2
 8005fc6:	3350      	adds	r3, #80	; 0x50
 8005fc8:	681b      	ldr	r3, [r3, #0]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b082      	sub	sp, #8
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f004 fcc8 	bl	800a978 <USB_GetCurrentFrame>
 8005fe8:	4603      	mov	r3, r0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b082      	sub	sp, #8
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f004 fca3 	bl	800a94a <USB_GetHostSpeed>
 8006004:	4603      	mov	r3, r0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b086      	sub	sp, #24
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	460b      	mov	r3, r1
 8006018:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006024:	78fb      	ldrb	r3, [r7, #3]
 8006026:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	015a      	lsls	r2, r3, #5
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	4413      	add	r3, r2
 8006030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b04      	cmp	r3, #4
 800603c:	d11a      	bne.n	8006074 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	4413      	add	r3, r2
 8006046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800604a:	461a      	mov	r2, r3
 800604c:	2304      	movs	r3, #4
 800604e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	212c      	movs	r1, #44	; 0x2c
 8006056:	fb01 f303 	mul.w	r3, r1, r3
 800605a:	4413      	add	r3, r2
 800605c:	3361      	adds	r3, #97	; 0x61
 800605e:	2206      	movs	r2, #6
 8006060:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	b2d2      	uxtb	r2, r2
 800606a:	4611      	mov	r1, r2
 800606c:	4618      	mov	r0, r3
 800606e:	f004 ff0a 	bl	800ae86 <USB_HC_Halt>
 8006072:	e0af      	b.n	80061d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	4413      	add	r3, r2
 800607c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800608a:	d11b      	bne.n	80060c4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	4413      	add	r3, r2
 8006094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006098:	461a      	mov	r2, r3
 800609a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800609e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	212c      	movs	r1, #44	; 0x2c
 80060a6:	fb01 f303 	mul.w	r3, r1, r3
 80060aa:	4413      	add	r3, r2
 80060ac:	3361      	adds	r3, #97	; 0x61
 80060ae:	2207      	movs	r2, #7
 80060b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	b2d2      	uxtb	r2, r2
 80060ba:	4611      	mov	r1, r2
 80060bc:	4618      	mov	r0, r3
 80060be:	f004 fee2 	bl	800ae86 <USB_HC_Halt>
 80060c2:	e087      	b.n	80061d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f003 0320 	and.w	r3, r3, #32
 80060d6:	2b20      	cmp	r3, #32
 80060d8:	d109      	bne.n	80060ee <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e6:	461a      	mov	r2, r3
 80060e8:	2320      	movs	r3, #32
 80060ea:	6093      	str	r3, [r2, #8]
 80060ec:	e072      	b.n	80061d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f003 0308 	and.w	r3, r3, #8
 8006100:	2b08      	cmp	r3, #8
 8006102:	d11a      	bne.n	800613a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	4413      	add	r3, r2
 800610c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006110:	461a      	mov	r2, r3
 8006112:	2308      	movs	r3, #8
 8006114:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	212c      	movs	r1, #44	; 0x2c
 800611c:	fb01 f303 	mul.w	r3, r1, r3
 8006120:	4413      	add	r3, r2
 8006122:	3361      	adds	r3, #97	; 0x61
 8006124:	2205      	movs	r2, #5
 8006126:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	4611      	mov	r1, r2
 8006132:	4618      	mov	r0, r3
 8006134:	f004 fea7 	bl	800ae86 <USB_HC_Halt>
 8006138:	e04c      	b.n	80061d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	4413      	add	r3, r2
 8006142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800614c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006150:	d11b      	bne.n	800618a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	4413      	add	r3, r2
 800615a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800615e:	461a      	mov	r2, r3
 8006160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006164:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	212c      	movs	r1, #44	; 0x2c
 800616c:	fb01 f303 	mul.w	r3, r1, r3
 8006170:	4413      	add	r3, r2
 8006172:	3361      	adds	r3, #97	; 0x61
 8006174:	2208      	movs	r2, #8
 8006176:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	b2d2      	uxtb	r2, r2
 8006180:	4611      	mov	r1, r2
 8006182:	4618      	mov	r0, r3
 8006184:	f004 fe7f 	bl	800ae86 <USB_HC_Halt>
 8006188:	e024      	b.n	80061d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	4413      	add	r3, r2
 8006192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800619c:	2b80      	cmp	r3, #128	; 0x80
 800619e:	d119      	bne.n	80061d4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ac:	461a      	mov	r2, r3
 80061ae:	2380      	movs	r3, #128	; 0x80
 80061b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	212c      	movs	r1, #44	; 0x2c
 80061b8:	fb01 f303 	mul.w	r3, r1, r3
 80061bc:	4413      	add	r3, r2
 80061be:	3361      	adds	r3, #97	; 0x61
 80061c0:	2206      	movs	r2, #6
 80061c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	b2d2      	uxtb	r2, r2
 80061cc:	4611      	mov	r1, r2
 80061ce:	4618      	mov	r0, r3
 80061d0:	f004 fe59 	bl	800ae86 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061ea:	d112      	bne.n	8006212 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	b2d2      	uxtb	r2, r2
 80061f4:	4611      	mov	r1, r2
 80061f6:	4618      	mov	r0, r3
 80061f8:	f004 fe45 	bl	800ae86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	4413      	add	r3, r2
 8006204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006208:	461a      	mov	r2, r3
 800620a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800620e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8006210:	e24e      	b.n	80066b0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	4413      	add	r3, r2
 800621a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b01      	cmp	r3, #1
 8006226:	f040 80df 	bne.w	80063e8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d019      	beq.n	8006266 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	212c      	movs	r1, #44	; 0x2c
 8006238:	fb01 f303 	mul.w	r3, r1, r3
 800623c:	4413      	add	r3, r2
 800623e:	3348      	adds	r3, #72	; 0x48
 8006240:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	0159      	lsls	r1, r3, #5
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	440b      	add	r3, r1
 800624a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006254:	1ad2      	subs	r2, r2, r3
 8006256:	6879      	ldr	r1, [r7, #4]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	202c      	movs	r0, #44	; 0x2c
 800625c:	fb00 f303 	mul.w	r3, r0, r3
 8006260:	440b      	add	r3, r1
 8006262:	3350      	adds	r3, #80	; 0x50
 8006264:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	212c      	movs	r1, #44	; 0x2c
 800626c:	fb01 f303 	mul.w	r3, r1, r3
 8006270:	4413      	add	r3, r2
 8006272:	3361      	adds	r3, #97	; 0x61
 8006274:	2201      	movs	r2, #1
 8006276:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	212c      	movs	r1, #44	; 0x2c
 800627e:	fb01 f303 	mul.w	r3, r1, r3
 8006282:	4413      	add	r3, r2
 8006284:	335c      	adds	r3, #92	; 0x5c
 8006286:	2200      	movs	r2, #0
 8006288:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	4413      	add	r3, r2
 8006292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006296:	461a      	mov	r2, r3
 8006298:	2301      	movs	r3, #1
 800629a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	212c      	movs	r1, #44	; 0x2c
 80062a2:	fb01 f303 	mul.w	r3, r1, r3
 80062a6:	4413      	add	r3, r2
 80062a8:	333f      	adds	r3, #63	; 0x3f
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d009      	beq.n	80062c4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	212c      	movs	r1, #44	; 0x2c
 80062b6:	fb01 f303 	mul.w	r3, r1, r3
 80062ba:	4413      	add	r3, r2
 80062bc:	333f      	adds	r3, #63	; 0x3f
 80062be:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d111      	bne.n	80062e8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	4611      	mov	r1, r2
 80062ce:	4618      	mov	r0, r3
 80062d0:	f004 fdd9 	bl	800ae86 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e0:	461a      	mov	r2, r3
 80062e2:	2310      	movs	r3, #16
 80062e4:	6093      	str	r3, [r2, #8]
 80062e6:	e03a      	b.n	800635e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	212c      	movs	r1, #44	; 0x2c
 80062ee:	fb01 f303 	mul.w	r3, r1, r3
 80062f2:	4413      	add	r3, r2
 80062f4:	333f      	adds	r3, #63	; 0x3f
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	2b03      	cmp	r3, #3
 80062fa:	d009      	beq.n	8006310 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	212c      	movs	r1, #44	; 0x2c
 8006302:	fb01 f303 	mul.w	r3, r1, r3
 8006306:	4413      	add	r3, r2
 8006308:	333f      	adds	r3, #63	; 0x3f
 800630a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800630c:	2b01      	cmp	r3, #1
 800630e:	d126      	bne.n	800635e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	4413      	add	r3, r2
 8006318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	0151      	lsls	r1, r2, #5
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	440a      	add	r2, r1
 8006326:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800632a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800632e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	212c      	movs	r1, #44	; 0x2c
 8006336:	fb01 f303 	mul.w	r3, r1, r3
 800633a:	4413      	add	r3, r2
 800633c:	3360      	adds	r3, #96	; 0x60
 800633e:	2201      	movs	r2, #1
 8006340:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	b2d9      	uxtb	r1, r3
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	202c      	movs	r0, #44	; 0x2c
 800634c:	fb00 f303 	mul.w	r3, r0, r3
 8006350:	4413      	add	r3, r2
 8006352:	3360      	adds	r3, #96	; 0x60
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	461a      	mov	r2, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f00a fe77 	bl	801104c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d12b      	bne.n	80063be <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	212c      	movs	r1, #44	; 0x2c
 800636c:	fb01 f303 	mul.w	r3, r1, r3
 8006370:	4413      	add	r3, r2
 8006372:	3348      	adds	r3, #72	; 0x48
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6879      	ldr	r1, [r7, #4]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	202c      	movs	r0, #44	; 0x2c
 800637c:	fb00 f202 	mul.w	r2, r0, r2
 8006380:	440a      	add	r2, r1
 8006382:	3240      	adds	r2, #64	; 0x40
 8006384:	8812      	ldrh	r2, [r2, #0]
 8006386:	fbb3 f3f2 	udiv	r3, r3, r2
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b00      	cmp	r3, #0
 8006390:	f000 818e 	beq.w	80066b0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	212c      	movs	r1, #44	; 0x2c
 800639a:	fb01 f303 	mul.w	r3, r1, r3
 800639e:	4413      	add	r3, r2
 80063a0:	3354      	adds	r3, #84	; 0x54
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	f083 0301 	eor.w	r3, r3, #1
 80063a8:	b2d8      	uxtb	r0, r3
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	212c      	movs	r1, #44	; 0x2c
 80063b0:	fb01 f303 	mul.w	r3, r1, r3
 80063b4:	4413      	add	r3, r2
 80063b6:	3354      	adds	r3, #84	; 0x54
 80063b8:	4602      	mov	r2, r0
 80063ba:	701a      	strb	r2, [r3, #0]
}
 80063bc:	e178      	b.n	80066b0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	212c      	movs	r1, #44	; 0x2c
 80063c4:	fb01 f303 	mul.w	r3, r1, r3
 80063c8:	4413      	add	r3, r2
 80063ca:	3354      	adds	r3, #84	; 0x54
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	f083 0301 	eor.w	r3, r3, #1
 80063d2:	b2d8      	uxtb	r0, r3
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	212c      	movs	r1, #44	; 0x2c
 80063da:	fb01 f303 	mul.w	r3, r1, r3
 80063de:	4413      	add	r3, r2
 80063e0:	3354      	adds	r3, #84	; 0x54
 80063e2:	4602      	mov	r2, r0
 80063e4:	701a      	strb	r2, [r3, #0]
}
 80063e6:	e163      	b.n	80066b0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	f040 80f6 	bne.w	80065ec <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	212c      	movs	r1, #44	; 0x2c
 8006406:	fb01 f303 	mul.w	r3, r1, r3
 800640a:	4413      	add	r3, r2
 800640c:	3361      	adds	r3, #97	; 0x61
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d109      	bne.n	8006428 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	212c      	movs	r1, #44	; 0x2c
 800641a:	fb01 f303 	mul.w	r3, r1, r3
 800641e:	4413      	add	r3, r2
 8006420:	3360      	adds	r3, #96	; 0x60
 8006422:	2201      	movs	r2, #1
 8006424:	701a      	strb	r2, [r3, #0]
 8006426:	e0c9      	b.n	80065bc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	212c      	movs	r1, #44	; 0x2c
 800642e:	fb01 f303 	mul.w	r3, r1, r3
 8006432:	4413      	add	r3, r2
 8006434:	3361      	adds	r3, #97	; 0x61
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b05      	cmp	r3, #5
 800643a:	d109      	bne.n	8006450 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	212c      	movs	r1, #44	; 0x2c
 8006442:	fb01 f303 	mul.w	r3, r1, r3
 8006446:	4413      	add	r3, r2
 8006448:	3360      	adds	r3, #96	; 0x60
 800644a:	2205      	movs	r2, #5
 800644c:	701a      	strb	r2, [r3, #0]
 800644e:	e0b5      	b.n	80065bc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	212c      	movs	r1, #44	; 0x2c
 8006456:	fb01 f303 	mul.w	r3, r1, r3
 800645a:	4413      	add	r3, r2
 800645c:	3361      	adds	r3, #97	; 0x61
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2b06      	cmp	r3, #6
 8006462:	d009      	beq.n	8006478 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	212c      	movs	r1, #44	; 0x2c
 800646a:	fb01 f303 	mul.w	r3, r1, r3
 800646e:	4413      	add	r3, r2
 8006470:	3361      	adds	r3, #97	; 0x61
 8006472:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006474:	2b08      	cmp	r3, #8
 8006476:	d150      	bne.n	800651a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	212c      	movs	r1, #44	; 0x2c
 800647e:	fb01 f303 	mul.w	r3, r1, r3
 8006482:	4413      	add	r3, r2
 8006484:	335c      	adds	r3, #92	; 0x5c
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	1c5a      	adds	r2, r3, #1
 800648a:	6879      	ldr	r1, [r7, #4]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	202c      	movs	r0, #44	; 0x2c
 8006490:	fb00 f303 	mul.w	r3, r0, r3
 8006494:	440b      	add	r3, r1
 8006496:	335c      	adds	r3, #92	; 0x5c
 8006498:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	212c      	movs	r1, #44	; 0x2c
 80064a0:	fb01 f303 	mul.w	r3, r1, r3
 80064a4:	4413      	add	r3, r2
 80064a6:	335c      	adds	r3, #92	; 0x5c
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d912      	bls.n	80064d4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	212c      	movs	r1, #44	; 0x2c
 80064b4:	fb01 f303 	mul.w	r3, r1, r3
 80064b8:	4413      	add	r3, r2
 80064ba:	335c      	adds	r3, #92	; 0x5c
 80064bc:	2200      	movs	r2, #0
 80064be:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	212c      	movs	r1, #44	; 0x2c
 80064c6:	fb01 f303 	mul.w	r3, r1, r3
 80064ca:	4413      	add	r3, r2
 80064cc:	3360      	adds	r3, #96	; 0x60
 80064ce:	2204      	movs	r2, #4
 80064d0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80064d2:	e073      	b.n	80065bc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	212c      	movs	r1, #44	; 0x2c
 80064da:	fb01 f303 	mul.w	r3, r1, r3
 80064de:	4413      	add	r3, r2
 80064e0:	3360      	adds	r3, #96	; 0x60
 80064e2:	2202      	movs	r2, #2
 80064e4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064fc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006504:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	4413      	add	r3, r2
 800650e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006512:	461a      	mov	r2, r3
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006518:	e050      	b.n	80065bc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	212c      	movs	r1, #44	; 0x2c
 8006520:	fb01 f303 	mul.w	r3, r1, r3
 8006524:	4413      	add	r3, r2
 8006526:	3361      	adds	r3, #97	; 0x61
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	2b03      	cmp	r3, #3
 800652c:	d122      	bne.n	8006574 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	212c      	movs	r1, #44	; 0x2c
 8006534:	fb01 f303 	mul.w	r3, r1, r3
 8006538:	4413      	add	r3, r2
 800653a:	3360      	adds	r3, #96	; 0x60
 800653c:	2202      	movs	r2, #2
 800653e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	4413      	add	r3, r2
 8006548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006556:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800655e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	4413      	add	r3, r2
 8006568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800656c:	461a      	mov	r2, r3
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	6013      	str	r3, [r2, #0]
 8006572:	e023      	b.n	80065bc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	212c      	movs	r1, #44	; 0x2c
 800657a:	fb01 f303 	mul.w	r3, r1, r3
 800657e:	4413      	add	r3, r2
 8006580:	3361      	adds	r3, #97	; 0x61
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	2b07      	cmp	r3, #7
 8006586:	d119      	bne.n	80065bc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	212c      	movs	r1, #44	; 0x2c
 800658e:	fb01 f303 	mul.w	r3, r1, r3
 8006592:	4413      	add	r3, r2
 8006594:	335c      	adds	r3, #92	; 0x5c
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	1c5a      	adds	r2, r3, #1
 800659a:	6879      	ldr	r1, [r7, #4]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	202c      	movs	r0, #44	; 0x2c
 80065a0:	fb00 f303 	mul.w	r3, r0, r3
 80065a4:	440b      	add	r3, r1
 80065a6:	335c      	adds	r3, #92	; 0x5c
 80065a8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	212c      	movs	r1, #44	; 0x2c
 80065b0:	fb01 f303 	mul.w	r3, r1, r3
 80065b4:	4413      	add	r3, r2
 80065b6:	3360      	adds	r3, #96	; 0x60
 80065b8:	2204      	movs	r2, #4
 80065ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c8:	461a      	mov	r2, r3
 80065ca:	2302      	movs	r3, #2
 80065cc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	b2d9      	uxtb	r1, r3
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	202c      	movs	r0, #44	; 0x2c
 80065d8:	fb00 f303 	mul.w	r3, r0, r3
 80065dc:	4413      	add	r3, r2
 80065de:	3360      	adds	r3, #96	; 0x60
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	461a      	mov	r2, r3
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f00a fd31 	bl	801104c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80065ea:	e061      	b.n	80066b0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f003 0310 	and.w	r3, r3, #16
 80065fe:	2b10      	cmp	r3, #16
 8006600:	d156      	bne.n	80066b0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	212c      	movs	r1, #44	; 0x2c
 8006608:	fb01 f303 	mul.w	r3, r1, r3
 800660c:	4413      	add	r3, r2
 800660e:	333f      	adds	r3, #63	; 0x3f
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	2b03      	cmp	r3, #3
 8006614:	d111      	bne.n	800663a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	212c      	movs	r1, #44	; 0x2c
 800661c:	fb01 f303 	mul.w	r3, r1, r3
 8006620:	4413      	add	r3, r2
 8006622:	335c      	adds	r3, #92	; 0x5c
 8006624:	2200      	movs	r2, #0
 8006626:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	b2d2      	uxtb	r2, r2
 8006630:	4611      	mov	r1, r2
 8006632:	4618      	mov	r0, r3
 8006634:	f004 fc27 	bl	800ae86 <USB_HC_Halt>
 8006638:	e031      	b.n	800669e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	212c      	movs	r1, #44	; 0x2c
 8006640:	fb01 f303 	mul.w	r3, r1, r3
 8006644:	4413      	add	r3, r2
 8006646:	333f      	adds	r3, #63	; 0x3f
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d009      	beq.n	8006662 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	212c      	movs	r1, #44	; 0x2c
 8006654:	fb01 f303 	mul.w	r3, r1, r3
 8006658:	4413      	add	r3, r2
 800665a:	333f      	adds	r3, #63	; 0x3f
 800665c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800665e:	2b02      	cmp	r3, #2
 8006660:	d11d      	bne.n	800669e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	212c      	movs	r1, #44	; 0x2c
 8006668:	fb01 f303 	mul.w	r3, r1, r3
 800666c:	4413      	add	r3, r2
 800666e:	335c      	adds	r3, #92	; 0x5c
 8006670:	2200      	movs	r2, #0
 8006672:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d110      	bne.n	800669e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	212c      	movs	r1, #44	; 0x2c
 8006682:	fb01 f303 	mul.w	r3, r1, r3
 8006686:	4413      	add	r3, r2
 8006688:	3361      	adds	r3, #97	; 0x61
 800668a:	2203      	movs	r2, #3
 800668c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	b2d2      	uxtb	r2, r2
 8006696:	4611      	mov	r1, r2
 8006698:	4618      	mov	r0, r3
 800669a:	f004 fbf4 	bl	800ae86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066aa:	461a      	mov	r2, r3
 80066ac:	2310      	movs	r3, #16
 80066ae:	6093      	str	r3, [r2, #8]
}
 80066b0:	bf00      	nop
 80066b2:	3718      	adds	r7, #24
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b088      	sub	sp, #32
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	460b      	mov	r3, r1
 80066c2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80066ce:	78fb      	ldrb	r3, [r7, #3]
 80066d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f003 0304 	and.w	r3, r3, #4
 80066e4:	2b04      	cmp	r3, #4
 80066e6:	d11a      	bne.n	800671e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f4:	461a      	mov	r2, r3
 80066f6:	2304      	movs	r3, #4
 80066f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	212c      	movs	r1, #44	; 0x2c
 8006700:	fb01 f303 	mul.w	r3, r1, r3
 8006704:	4413      	add	r3, r2
 8006706:	3361      	adds	r3, #97	; 0x61
 8006708:	2206      	movs	r2, #6
 800670a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	b2d2      	uxtb	r2, r2
 8006714:	4611      	mov	r1, r2
 8006716:	4618      	mov	r0, r3
 8006718:	f004 fbb5 	bl	800ae86 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800671c:	e331      	b.n	8006d82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	4413      	add	r3, r2
 8006726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f003 0320 	and.w	r3, r3, #32
 8006730:	2b20      	cmp	r3, #32
 8006732:	d12e      	bne.n	8006792 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	4413      	add	r3, r2
 800673c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006740:	461a      	mov	r2, r3
 8006742:	2320      	movs	r3, #32
 8006744:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	212c      	movs	r1, #44	; 0x2c
 800674c:	fb01 f303 	mul.w	r3, r1, r3
 8006750:	4413      	add	r3, r2
 8006752:	333d      	adds	r3, #61	; 0x3d
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	2b01      	cmp	r3, #1
 8006758:	f040 8313 	bne.w	8006d82 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	212c      	movs	r1, #44	; 0x2c
 8006762:	fb01 f303 	mul.w	r3, r1, r3
 8006766:	4413      	add	r3, r2
 8006768:	333d      	adds	r3, #61	; 0x3d
 800676a:	2200      	movs	r2, #0
 800676c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	212c      	movs	r1, #44	; 0x2c
 8006774:	fb01 f303 	mul.w	r3, r1, r3
 8006778:	4413      	add	r3, r2
 800677a:	3360      	adds	r3, #96	; 0x60
 800677c:	2202      	movs	r2, #2
 800677e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	4611      	mov	r1, r2
 800678a:	4618      	mov	r0, r3
 800678c:	f004 fb7b 	bl	800ae86 <USB_HC_Halt>
}
 8006790:	e2f7      	b.n	8006d82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	4413      	add	r3, r2
 800679a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a8:	d112      	bne.n	80067d0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b6:	461a      	mov	r2, r3
 80067b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067bc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	b2d2      	uxtb	r2, r2
 80067c6:	4611      	mov	r1, r2
 80067c8:	4618      	mov	r0, r3
 80067ca:	f004 fb5c 	bl	800ae86 <USB_HC_Halt>
}
 80067ce:	e2d8      	b.n	8006d82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d140      	bne.n	8006868 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	212c      	movs	r1, #44	; 0x2c
 80067ec:	fb01 f303 	mul.w	r3, r1, r3
 80067f0:	4413      	add	r3, r2
 80067f2:	335c      	adds	r3, #92	; 0x5c
 80067f4:	2200      	movs	r2, #0
 80067f6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680a:	2b40      	cmp	r3, #64	; 0x40
 800680c:	d111      	bne.n	8006832 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	212c      	movs	r1, #44	; 0x2c
 8006814:	fb01 f303 	mul.w	r3, r1, r3
 8006818:	4413      	add	r3, r2
 800681a:	333d      	adds	r3, #61	; 0x3d
 800681c:	2201      	movs	r2, #1
 800681e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	4413      	add	r3, r2
 8006828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800682c:	461a      	mov	r2, r3
 800682e:	2340      	movs	r3, #64	; 0x40
 8006830:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	4413      	add	r3, r2
 800683a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683e:	461a      	mov	r2, r3
 8006840:	2301      	movs	r3, #1
 8006842:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	212c      	movs	r1, #44	; 0x2c
 800684a:	fb01 f303 	mul.w	r3, r1, r3
 800684e:	4413      	add	r3, r2
 8006850:	3361      	adds	r3, #97	; 0x61
 8006852:	2201      	movs	r2, #1
 8006854:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	b2d2      	uxtb	r2, r2
 800685e:	4611      	mov	r1, r2
 8006860:	4618      	mov	r0, r3
 8006862:	f004 fb10 	bl	800ae86 <USB_HC_Halt>
}
 8006866:	e28c      	b.n	8006d82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	015a      	lsls	r2, r3, #5
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	4413      	add	r3, r2
 8006870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687a:	2b40      	cmp	r3, #64	; 0x40
 800687c:	d12c      	bne.n	80068d8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	212c      	movs	r1, #44	; 0x2c
 8006884:	fb01 f303 	mul.w	r3, r1, r3
 8006888:	4413      	add	r3, r2
 800688a:	3361      	adds	r3, #97	; 0x61
 800688c:	2204      	movs	r2, #4
 800688e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	212c      	movs	r1, #44	; 0x2c
 8006896:	fb01 f303 	mul.w	r3, r1, r3
 800689a:	4413      	add	r3, r2
 800689c:	333d      	adds	r3, #61	; 0x3d
 800689e:	2201      	movs	r2, #1
 80068a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	212c      	movs	r1, #44	; 0x2c
 80068a8:	fb01 f303 	mul.w	r3, r1, r3
 80068ac:	4413      	add	r3, r2
 80068ae:	335c      	adds	r3, #92	; 0x5c
 80068b0:	2200      	movs	r2, #0
 80068b2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	b2d2      	uxtb	r2, r2
 80068bc:	4611      	mov	r1, r2
 80068be:	4618      	mov	r0, r3
 80068c0:	f004 fae1 	bl	800ae86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	015a      	lsls	r2, r3, #5
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d0:	461a      	mov	r2, r3
 80068d2:	2340      	movs	r3, #64	; 0x40
 80068d4:	6093      	str	r3, [r2, #8]
}
 80068d6:	e254      	b.n	8006d82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f003 0308 	and.w	r3, r3, #8
 80068ea:	2b08      	cmp	r3, #8
 80068ec:	d11a      	bne.n	8006924 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fa:	461a      	mov	r2, r3
 80068fc:	2308      	movs	r3, #8
 80068fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	212c      	movs	r1, #44	; 0x2c
 8006906:	fb01 f303 	mul.w	r3, r1, r3
 800690a:	4413      	add	r3, r2
 800690c:	3361      	adds	r3, #97	; 0x61
 800690e:	2205      	movs	r2, #5
 8006910:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	b2d2      	uxtb	r2, r2
 800691a:	4611      	mov	r1, r2
 800691c:	4618      	mov	r0, r3
 800691e:	f004 fab2 	bl	800ae86 <USB_HC_Halt>
}
 8006922:	e22e      	b.n	8006d82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	4413      	add	r3, r2
 800692c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f003 0310 	and.w	r3, r3, #16
 8006936:	2b10      	cmp	r3, #16
 8006938:	d140      	bne.n	80069bc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	212c      	movs	r1, #44	; 0x2c
 8006940:	fb01 f303 	mul.w	r3, r1, r3
 8006944:	4413      	add	r3, r2
 8006946:	335c      	adds	r3, #92	; 0x5c
 8006948:	2200      	movs	r2, #0
 800694a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	212c      	movs	r1, #44	; 0x2c
 8006952:	fb01 f303 	mul.w	r3, r1, r3
 8006956:	4413      	add	r3, r2
 8006958:	3361      	adds	r3, #97	; 0x61
 800695a:	2203      	movs	r2, #3
 800695c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	212c      	movs	r1, #44	; 0x2c
 8006964:	fb01 f303 	mul.w	r3, r1, r3
 8006968:	4413      	add	r3, r2
 800696a:	333d      	adds	r3, #61	; 0x3d
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d112      	bne.n	8006998 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	212c      	movs	r1, #44	; 0x2c
 8006978:	fb01 f303 	mul.w	r3, r1, r3
 800697c:	4413      	add	r3, r2
 800697e:	333c      	adds	r3, #60	; 0x3c
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d108      	bne.n	8006998 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	212c      	movs	r1, #44	; 0x2c
 800698c:	fb01 f303 	mul.w	r3, r1, r3
 8006990:	4413      	add	r3, r2
 8006992:	333d      	adds	r3, #61	; 0x3d
 8006994:	2201      	movs	r2, #1
 8006996:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	b2d2      	uxtb	r2, r2
 80069a0:	4611      	mov	r1, r2
 80069a2:	4618      	mov	r0, r3
 80069a4:	f004 fa6f 	bl	800ae86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b4:	461a      	mov	r2, r3
 80069b6:	2310      	movs	r3, #16
 80069b8:	6093      	str	r3, [r2, #8]
}
 80069ba:	e1e2      	b.n	8006d82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ce:	2b80      	cmp	r3, #128	; 0x80
 80069d0:	d164      	bne.n	8006a9c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d111      	bne.n	80069fe <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	212c      	movs	r1, #44	; 0x2c
 80069e0:	fb01 f303 	mul.w	r3, r1, r3
 80069e4:	4413      	add	r3, r2
 80069e6:	3361      	adds	r3, #97	; 0x61
 80069e8:	2206      	movs	r2, #6
 80069ea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	b2d2      	uxtb	r2, r2
 80069f4:	4611      	mov	r1, r2
 80069f6:	4618      	mov	r0, r3
 80069f8:	f004 fa45 	bl	800ae86 <USB_HC_Halt>
 80069fc:	e044      	b.n	8006a88 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	212c      	movs	r1, #44	; 0x2c
 8006a04:	fb01 f303 	mul.w	r3, r1, r3
 8006a08:	4413      	add	r3, r2
 8006a0a:	335c      	adds	r3, #92	; 0x5c
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	1c5a      	adds	r2, r3, #1
 8006a10:	6879      	ldr	r1, [r7, #4]
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	202c      	movs	r0, #44	; 0x2c
 8006a16:	fb00 f303 	mul.w	r3, r0, r3
 8006a1a:	440b      	add	r3, r1
 8006a1c:	335c      	adds	r3, #92	; 0x5c
 8006a1e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	212c      	movs	r1, #44	; 0x2c
 8006a26:	fb01 f303 	mul.w	r3, r1, r3
 8006a2a:	4413      	add	r3, r2
 8006a2c:	335c      	adds	r3, #92	; 0x5c
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d920      	bls.n	8006a76 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	212c      	movs	r1, #44	; 0x2c
 8006a3a:	fb01 f303 	mul.w	r3, r1, r3
 8006a3e:	4413      	add	r3, r2
 8006a40:	335c      	adds	r3, #92	; 0x5c
 8006a42:	2200      	movs	r2, #0
 8006a44:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	212c      	movs	r1, #44	; 0x2c
 8006a4c:	fb01 f303 	mul.w	r3, r1, r3
 8006a50:	4413      	add	r3, r2
 8006a52:	3360      	adds	r3, #96	; 0x60
 8006a54:	2204      	movs	r2, #4
 8006a56:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	b2d9      	uxtb	r1, r3
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	202c      	movs	r0, #44	; 0x2c
 8006a62:	fb00 f303 	mul.w	r3, r0, r3
 8006a66:	4413      	add	r3, r2
 8006a68:	3360      	adds	r3, #96	; 0x60
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f00a faec 	bl	801104c <HAL_HCD_HC_NotifyURBChange_Callback>
 8006a74:	e008      	b.n	8006a88 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	212c      	movs	r1, #44	; 0x2c
 8006a7c:	fb01 f303 	mul.w	r3, r1, r3
 8006a80:	4413      	add	r3, r2
 8006a82:	3360      	adds	r3, #96	; 0x60
 8006a84:	2202      	movs	r2, #2
 8006a86:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	015a      	lsls	r2, r3, #5
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a94:	461a      	mov	r2, r3
 8006a96:	2380      	movs	r3, #128	; 0x80
 8006a98:	6093      	str	r3, [r2, #8]
}
 8006a9a:	e172      	b.n	8006d82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	015a      	lsls	r2, r3, #5
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ab2:	d11b      	bne.n	8006aec <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	212c      	movs	r1, #44	; 0x2c
 8006aba:	fb01 f303 	mul.w	r3, r1, r3
 8006abe:	4413      	add	r3, r2
 8006ac0:	3361      	adds	r3, #97	; 0x61
 8006ac2:	2208      	movs	r2, #8
 8006ac4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	b2d2      	uxtb	r2, r2
 8006ace:	4611      	mov	r1, r2
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f004 f9d8 	bl	800ae86 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ae8:	6093      	str	r3, [r2, #8]
}
 8006aea:	e14a      	b.n	8006d82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	f040 813f 	bne.w	8006d82 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	212c      	movs	r1, #44	; 0x2c
 8006b0a:	fb01 f303 	mul.w	r3, r1, r3
 8006b0e:	4413      	add	r3, r2
 8006b10:	3361      	adds	r3, #97	; 0x61
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d17d      	bne.n	8006c14 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	212c      	movs	r1, #44	; 0x2c
 8006b1e:	fb01 f303 	mul.w	r3, r1, r3
 8006b22:	4413      	add	r3, r2
 8006b24:	3360      	adds	r3, #96	; 0x60
 8006b26:	2201      	movs	r2, #1
 8006b28:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	212c      	movs	r1, #44	; 0x2c
 8006b30:	fb01 f303 	mul.w	r3, r1, r3
 8006b34:	4413      	add	r3, r2
 8006b36:	333f      	adds	r3, #63	; 0x3f
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d00a      	beq.n	8006b54 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	212c      	movs	r1, #44	; 0x2c
 8006b44:	fb01 f303 	mul.w	r3, r1, r3
 8006b48:	4413      	add	r3, r2
 8006b4a:	333f      	adds	r3, #63	; 0x3f
 8006b4c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006b4e:	2b03      	cmp	r3, #3
 8006b50:	f040 8100 	bne.w	8006d54 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d113      	bne.n	8006b84 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	212c      	movs	r1, #44	; 0x2c
 8006b62:	fb01 f303 	mul.w	r3, r1, r3
 8006b66:	4413      	add	r3, r2
 8006b68:	3355      	adds	r3, #85	; 0x55
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	f083 0301 	eor.w	r3, r3, #1
 8006b70:	b2d8      	uxtb	r0, r3
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	212c      	movs	r1, #44	; 0x2c
 8006b78:	fb01 f303 	mul.w	r3, r1, r3
 8006b7c:	4413      	add	r3, r2
 8006b7e:	3355      	adds	r3, #85	; 0x55
 8006b80:	4602      	mov	r2, r0
 8006b82:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	f040 80e3 	bne.w	8006d54 <HCD_HC_OUT_IRQHandler+0x69c>
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	212c      	movs	r1, #44	; 0x2c
 8006b94:	fb01 f303 	mul.w	r3, r1, r3
 8006b98:	4413      	add	r3, r2
 8006b9a:	334c      	adds	r3, #76	; 0x4c
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f000 80d8 	beq.w	8006d54 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	212c      	movs	r1, #44	; 0x2c
 8006baa:	fb01 f303 	mul.w	r3, r1, r3
 8006bae:	4413      	add	r3, r2
 8006bb0:	334c      	adds	r3, #76	; 0x4c
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6879      	ldr	r1, [r7, #4]
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	202c      	movs	r0, #44	; 0x2c
 8006bba:	fb00 f202 	mul.w	r2, r0, r2
 8006bbe:	440a      	add	r2, r1
 8006bc0:	3240      	adds	r2, #64	; 0x40
 8006bc2:	8812      	ldrh	r2, [r2, #0]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	6879      	ldr	r1, [r7, #4]
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	202c      	movs	r0, #44	; 0x2c
 8006bce:	fb00 f202 	mul.w	r2, r0, r2
 8006bd2:	440a      	add	r2, r1
 8006bd4:	3240      	adds	r2, #64	; 0x40
 8006bd6:	8812      	ldrh	r2, [r2, #0]
 8006bd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 80b5 	beq.w	8006d54 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	212c      	movs	r1, #44	; 0x2c
 8006bf0:	fb01 f303 	mul.w	r3, r1, r3
 8006bf4:	4413      	add	r3, r2
 8006bf6:	3355      	adds	r3, #85	; 0x55
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	f083 0301 	eor.w	r3, r3, #1
 8006bfe:	b2d8      	uxtb	r0, r3
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	212c      	movs	r1, #44	; 0x2c
 8006c06:	fb01 f303 	mul.w	r3, r1, r3
 8006c0a:	4413      	add	r3, r2
 8006c0c:	3355      	adds	r3, #85	; 0x55
 8006c0e:	4602      	mov	r2, r0
 8006c10:	701a      	strb	r2, [r3, #0]
 8006c12:	e09f      	b.n	8006d54 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	212c      	movs	r1, #44	; 0x2c
 8006c1a:	fb01 f303 	mul.w	r3, r1, r3
 8006c1e:	4413      	add	r3, r2
 8006c20:	3361      	adds	r3, #97	; 0x61
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	2b03      	cmp	r3, #3
 8006c26:	d109      	bne.n	8006c3c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	212c      	movs	r1, #44	; 0x2c
 8006c2e:	fb01 f303 	mul.w	r3, r1, r3
 8006c32:	4413      	add	r3, r2
 8006c34:	3360      	adds	r3, #96	; 0x60
 8006c36:	2202      	movs	r2, #2
 8006c38:	701a      	strb	r2, [r3, #0]
 8006c3a:	e08b      	b.n	8006d54 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	212c      	movs	r1, #44	; 0x2c
 8006c42:	fb01 f303 	mul.w	r3, r1, r3
 8006c46:	4413      	add	r3, r2
 8006c48:	3361      	adds	r3, #97	; 0x61
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	2b04      	cmp	r3, #4
 8006c4e:	d109      	bne.n	8006c64 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	212c      	movs	r1, #44	; 0x2c
 8006c56:	fb01 f303 	mul.w	r3, r1, r3
 8006c5a:	4413      	add	r3, r2
 8006c5c:	3360      	adds	r3, #96	; 0x60
 8006c5e:	2202      	movs	r2, #2
 8006c60:	701a      	strb	r2, [r3, #0]
 8006c62:	e077      	b.n	8006d54 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	212c      	movs	r1, #44	; 0x2c
 8006c6a:	fb01 f303 	mul.w	r3, r1, r3
 8006c6e:	4413      	add	r3, r2
 8006c70:	3361      	adds	r3, #97	; 0x61
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	2b05      	cmp	r3, #5
 8006c76:	d109      	bne.n	8006c8c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	212c      	movs	r1, #44	; 0x2c
 8006c7e:	fb01 f303 	mul.w	r3, r1, r3
 8006c82:	4413      	add	r3, r2
 8006c84:	3360      	adds	r3, #96	; 0x60
 8006c86:	2205      	movs	r2, #5
 8006c88:	701a      	strb	r2, [r3, #0]
 8006c8a:	e063      	b.n	8006d54 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	212c      	movs	r1, #44	; 0x2c
 8006c92:	fb01 f303 	mul.w	r3, r1, r3
 8006c96:	4413      	add	r3, r2
 8006c98:	3361      	adds	r3, #97	; 0x61
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	2b06      	cmp	r3, #6
 8006c9e:	d009      	beq.n	8006cb4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	212c      	movs	r1, #44	; 0x2c
 8006ca6:	fb01 f303 	mul.w	r3, r1, r3
 8006caa:	4413      	add	r3, r2
 8006cac:	3361      	adds	r3, #97	; 0x61
 8006cae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	d14f      	bne.n	8006d54 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	212c      	movs	r1, #44	; 0x2c
 8006cba:	fb01 f303 	mul.w	r3, r1, r3
 8006cbe:	4413      	add	r3, r2
 8006cc0:	335c      	adds	r3, #92	; 0x5c
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	1c5a      	adds	r2, r3, #1
 8006cc6:	6879      	ldr	r1, [r7, #4]
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	202c      	movs	r0, #44	; 0x2c
 8006ccc:	fb00 f303 	mul.w	r3, r0, r3
 8006cd0:	440b      	add	r3, r1
 8006cd2:	335c      	adds	r3, #92	; 0x5c
 8006cd4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	212c      	movs	r1, #44	; 0x2c
 8006cdc:	fb01 f303 	mul.w	r3, r1, r3
 8006ce0:	4413      	add	r3, r2
 8006ce2:	335c      	adds	r3, #92	; 0x5c
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d912      	bls.n	8006d10 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	212c      	movs	r1, #44	; 0x2c
 8006cf0:	fb01 f303 	mul.w	r3, r1, r3
 8006cf4:	4413      	add	r3, r2
 8006cf6:	335c      	adds	r3, #92	; 0x5c
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	212c      	movs	r1, #44	; 0x2c
 8006d02:	fb01 f303 	mul.w	r3, r1, r3
 8006d06:	4413      	add	r3, r2
 8006d08:	3360      	adds	r3, #96	; 0x60
 8006d0a:	2204      	movs	r2, #4
 8006d0c:	701a      	strb	r2, [r3, #0]
 8006d0e:	e021      	b.n	8006d54 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	212c      	movs	r1, #44	; 0x2c
 8006d16:	fb01 f303 	mul.w	r3, r1, r3
 8006d1a:	4413      	add	r3, r2
 8006d1c:	3360      	adds	r3, #96	; 0x60
 8006d1e:	2202      	movs	r2, #2
 8006d20:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	015a      	lsls	r2, r3, #5
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	4413      	add	r3, r2
 8006d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d38:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d40:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d4e:	461a      	mov	r2, r3
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d60:	461a      	mov	r2, r3
 8006d62:	2302      	movs	r3, #2
 8006d64:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	b2d9      	uxtb	r1, r3
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	202c      	movs	r0, #44	; 0x2c
 8006d70:	fb00 f303 	mul.w	r3, r0, r3
 8006d74:	4413      	add	r3, r2
 8006d76:	3360      	adds	r3, #96	; 0x60
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f00a f965 	bl	801104c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006d82:	bf00      	nop
 8006d84:	3720      	adds	r7, #32
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b08a      	sub	sp, #40	; 0x28
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	f003 030f 	and.w	r3, r3, #15
 8006daa:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	0c5b      	lsrs	r3, r3, #17
 8006db0:	f003 030f 	and.w	r3, r3, #15
 8006db4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	091b      	lsrs	r3, r3, #4
 8006dba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006dbe:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d004      	beq.n	8006dd0 <HCD_RXQLVL_IRQHandler+0x46>
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	2b05      	cmp	r3, #5
 8006dca:	f000 80a9 	beq.w	8006f20 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006dce:	e0aa      	b.n	8006f26 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 80a6 	beq.w	8006f24 <HCD_RXQLVL_IRQHandler+0x19a>
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	212c      	movs	r1, #44	; 0x2c
 8006dde:	fb01 f303 	mul.w	r3, r1, r3
 8006de2:	4413      	add	r3, r2
 8006de4:	3344      	adds	r3, #68	; 0x44
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 809b 	beq.w	8006f24 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	212c      	movs	r1, #44	; 0x2c
 8006df4:	fb01 f303 	mul.w	r3, r1, r3
 8006df8:	4413      	add	r3, r2
 8006dfa:	3350      	adds	r3, #80	; 0x50
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	441a      	add	r2, r3
 8006e02:	6879      	ldr	r1, [r7, #4]
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	202c      	movs	r0, #44	; 0x2c
 8006e08:	fb00 f303 	mul.w	r3, r0, r3
 8006e0c:	440b      	add	r3, r1
 8006e0e:	334c      	adds	r3, #76	; 0x4c
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d87a      	bhi.n	8006f0c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6818      	ldr	r0, [r3, #0]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	212c      	movs	r1, #44	; 0x2c
 8006e20:	fb01 f303 	mul.w	r3, r1, r3
 8006e24:	4413      	add	r3, r2
 8006e26:	3344      	adds	r3, #68	; 0x44
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	693a      	ldr	r2, [r7, #16]
 8006e2c:	b292      	uxth	r2, r2
 8006e2e:	4619      	mov	r1, r3
 8006e30:	f003 fb80 	bl	800a534 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	212c      	movs	r1, #44	; 0x2c
 8006e3a:	fb01 f303 	mul.w	r3, r1, r3
 8006e3e:	4413      	add	r3, r2
 8006e40:	3344      	adds	r3, #68	; 0x44
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	441a      	add	r2, r3
 8006e48:	6879      	ldr	r1, [r7, #4]
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	202c      	movs	r0, #44	; 0x2c
 8006e4e:	fb00 f303 	mul.w	r3, r0, r3
 8006e52:	440b      	add	r3, r1
 8006e54:	3344      	adds	r3, #68	; 0x44
 8006e56:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	212c      	movs	r1, #44	; 0x2c
 8006e5e:	fb01 f303 	mul.w	r3, r1, r3
 8006e62:	4413      	add	r3, r2
 8006e64:	3350      	adds	r3, #80	; 0x50
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	441a      	add	r2, r3
 8006e6c:	6879      	ldr	r1, [r7, #4]
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	202c      	movs	r0, #44	; 0x2c
 8006e72:	fb00 f303 	mul.w	r3, r0, r3
 8006e76:	440b      	add	r3, r1
 8006e78:	3350      	adds	r3, #80	; 0x50
 8006e7a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	6a3b      	ldr	r3, [r7, #32]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	0cdb      	lsrs	r3, r3, #19
 8006e8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e90:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	212c      	movs	r1, #44	; 0x2c
 8006e98:	fb01 f303 	mul.w	r3, r1, r3
 8006e9c:	4413      	add	r3, r2
 8006e9e:	3340      	adds	r3, #64	; 0x40
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d13c      	bne.n	8006f24 <HCD_RXQLVL_IRQHandler+0x19a>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d039      	beq.n	8006f24 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	6a3b      	ldr	r3, [r7, #32]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ec6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ece:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006edc:	461a      	mov	r2, r3
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	212c      	movs	r1, #44	; 0x2c
 8006ee8:	fb01 f303 	mul.w	r3, r1, r3
 8006eec:	4413      	add	r3, r2
 8006eee:	3354      	adds	r3, #84	; 0x54
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	f083 0301 	eor.w	r3, r3, #1
 8006ef6:	b2d8      	uxtb	r0, r3
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	212c      	movs	r1, #44	; 0x2c
 8006efe:	fb01 f303 	mul.w	r3, r1, r3
 8006f02:	4413      	add	r3, r2
 8006f04:	3354      	adds	r3, #84	; 0x54
 8006f06:	4602      	mov	r2, r0
 8006f08:	701a      	strb	r2, [r3, #0]
      break;
 8006f0a:	e00b      	b.n	8006f24 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	212c      	movs	r1, #44	; 0x2c
 8006f12:	fb01 f303 	mul.w	r3, r1, r3
 8006f16:	4413      	add	r3, r2
 8006f18:	3360      	adds	r3, #96	; 0x60
 8006f1a:	2204      	movs	r2, #4
 8006f1c:	701a      	strb	r2, [r3, #0]
      break;
 8006f1e:	e001      	b.n	8006f24 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006f20:	bf00      	nop
 8006f22:	e000      	b.n	8006f26 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006f24:	bf00      	nop
  }
}
 8006f26:	bf00      	nop
 8006f28:	3728      	adds	r7, #40	; 0x28
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b086      	sub	sp, #24
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006f5a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d10b      	bne.n	8006f7e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d102      	bne.n	8006f76 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f00a f84f 	bl	8011014 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	f043 0302 	orr.w	r3, r3, #2
 8006f7c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f003 0308 	and.w	r3, r3, #8
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d132      	bne.n	8006fee <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	f043 0308 	orr.w	r3, r3, #8
 8006f8e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f003 0304 	and.w	r3, r3, #4
 8006f96:	2b04      	cmp	r3, #4
 8006f98:	d126      	bne.n	8006fe8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d113      	bne.n	8006fca <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006fa8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fac:	d106      	bne.n	8006fbc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2102      	movs	r1, #2
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f003 fc2b 	bl	800a810 <USB_InitFSLSPClkSel>
 8006fba:	e011      	b.n	8006fe0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2101      	movs	r1, #1
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f003 fc24 	bl	800a810 <USB_InitFSLSPClkSel>
 8006fc8:	e00a      	b.n	8006fe0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d106      	bne.n	8006fe0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fd8:	461a      	mov	r2, r3
 8006fda:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006fde:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f00a f841 	bl	8011068 <HAL_HCD_PortEnabled_Callback>
 8006fe6:	e002      	b.n	8006fee <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f00a f84b 	bl	8011084 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f003 0320 	and.w	r3, r3, #32
 8006ff4:	2b20      	cmp	r3, #32
 8006ff6:	d103      	bne.n	8007000 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	f043 0320 	orr.w	r3, r3, #32
 8006ffe:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007006:	461a      	mov	r2, r3
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	6013      	str	r3, [r2, #0]
}
 800700c:	bf00      	nop
 800700e:	3718      	adds	r7, #24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e267      	b.n	80074f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	2b00      	cmp	r3, #0
 8007030:	d075      	beq.n	800711e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007032:	4b88      	ldr	r3, [pc, #544]	; (8007254 <HAL_RCC_OscConfig+0x240>)
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f003 030c 	and.w	r3, r3, #12
 800703a:	2b04      	cmp	r3, #4
 800703c:	d00c      	beq.n	8007058 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800703e:	4b85      	ldr	r3, [pc, #532]	; (8007254 <HAL_RCC_OscConfig+0x240>)
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007046:	2b08      	cmp	r3, #8
 8007048:	d112      	bne.n	8007070 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800704a:	4b82      	ldr	r3, [pc, #520]	; (8007254 <HAL_RCC_OscConfig+0x240>)
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007052:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007056:	d10b      	bne.n	8007070 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007058:	4b7e      	ldr	r3, [pc, #504]	; (8007254 <HAL_RCC_OscConfig+0x240>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d05b      	beq.n	800711c <HAL_RCC_OscConfig+0x108>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d157      	bne.n	800711c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e242      	b.n	80074f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007078:	d106      	bne.n	8007088 <HAL_RCC_OscConfig+0x74>
 800707a:	4b76      	ldr	r3, [pc, #472]	; (8007254 <HAL_RCC_OscConfig+0x240>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a75      	ldr	r2, [pc, #468]	; (8007254 <HAL_RCC_OscConfig+0x240>)
 8007080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	e01d      	b.n	80070c4 <HAL_RCC_OscConfig+0xb0>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007090:	d10c      	bne.n	80070ac <HAL_RCC_OscConfig+0x98>
 8007092:	4b70      	ldr	r3, [pc, #448]	; (8007254 <HAL_RCC_OscConfig+0x240>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a6f      	ldr	r2, [pc, #444]	; (8007254 <HAL_RCC_OscConfig+0x240>)
 8007098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800709c:	6013      	str	r3, [r2, #0]
 800709e:	4b6d      	ldr	r3, [pc, #436]	; (8007254 <HAL_RCC_OscConfig+0x240>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a6c      	ldr	r2, [pc, #432]	; (8007254 <HAL_RCC_OscConfig+0x240>)
 80070a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070a8:	6013      	str	r3, [r2, #0]
 80070aa:	e00b      	b.n	80070c4 <HAL_RCC_OscConfig+0xb0>
 80070ac:	4b69      	ldr	r3, [pc, #420]	; (8007254 <HAL_RCC_OscConfig+0x240>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a68      	ldr	r2, [pc, #416]	; (8007254 <HAL_RCC_OscConfig+0x240>)
 80070b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070b6:	6013      	str	r3, [r2, #0]
 80070b8:	4b66      	ldr	r3, [pc, #408]	; (8007254 <HAL_RCC_OscConfig+0x240>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a65      	ldr	r2, [pc, #404]	; (8007254 <HAL_RCC_OscConfig+0x240>)
 80070be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d013      	beq.n	80070f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070cc:	f7fd fc9e 	bl	8004a0c <HAL_GetTick>
 80070d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070d2:	e008      	b.n	80070e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070d4:	f7fd fc9a 	bl	8004a0c <HAL_GetTick>
 80070d8:	4602      	mov	r2, r0
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	2b64      	cmp	r3, #100	; 0x64
 80070e0:	d901      	bls.n	80070e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e207      	b.n	80074f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070e6:	4b5b      	ldr	r3, [pc, #364]	; (8007254 <HAL_RCC_OscConfig+0x240>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d0f0      	beq.n	80070d4 <HAL_RCC_OscConfig+0xc0>
 80070f2:	e014      	b.n	800711e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070f4:	f7fd fc8a 	bl	8004a0c <HAL_GetTick>
 80070f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070fa:	e008      	b.n	800710e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070fc:	f7fd fc86 	bl	8004a0c <HAL_GetTick>
 8007100:	4602      	mov	r2, r0
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	2b64      	cmp	r3, #100	; 0x64
 8007108:	d901      	bls.n	800710e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e1f3      	b.n	80074f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800710e:	4b51      	ldr	r3, [pc, #324]	; (8007254 <HAL_RCC_OscConfig+0x240>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1f0      	bne.n	80070fc <HAL_RCC_OscConfig+0xe8>
 800711a:	e000      	b.n	800711e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800711c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0302 	and.w	r3, r3, #2
 8007126:	2b00      	cmp	r3, #0
 8007128:	d063      	beq.n	80071f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800712a:	4b4a      	ldr	r3, [pc, #296]	; (8007254 <HAL_RCC_OscConfig+0x240>)
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f003 030c 	and.w	r3, r3, #12
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00b      	beq.n	800714e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007136:	4b47      	ldr	r3, [pc, #284]	; (8007254 <HAL_RCC_OscConfig+0x240>)
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800713e:	2b08      	cmp	r3, #8
 8007140:	d11c      	bne.n	800717c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007142:	4b44      	ldr	r3, [pc, #272]	; (8007254 <HAL_RCC_OscConfig+0x240>)
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d116      	bne.n	800717c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800714e:	4b41      	ldr	r3, [pc, #260]	; (8007254 <HAL_RCC_OscConfig+0x240>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	2b00      	cmp	r3, #0
 8007158:	d005      	beq.n	8007166 <HAL_RCC_OscConfig+0x152>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d001      	beq.n	8007166 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e1c7      	b.n	80074f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007166:	4b3b      	ldr	r3, [pc, #236]	; (8007254 <HAL_RCC_OscConfig+0x240>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	00db      	lsls	r3, r3, #3
 8007174:	4937      	ldr	r1, [pc, #220]	; (8007254 <HAL_RCC_OscConfig+0x240>)
 8007176:	4313      	orrs	r3, r2
 8007178:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800717a:	e03a      	b.n	80071f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d020      	beq.n	80071c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007184:	4b34      	ldr	r3, [pc, #208]	; (8007258 <HAL_RCC_OscConfig+0x244>)
 8007186:	2201      	movs	r2, #1
 8007188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800718a:	f7fd fc3f 	bl	8004a0c <HAL_GetTick>
 800718e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007190:	e008      	b.n	80071a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007192:	f7fd fc3b 	bl	8004a0c <HAL_GetTick>
 8007196:	4602      	mov	r2, r0
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	2b02      	cmp	r3, #2
 800719e:	d901      	bls.n	80071a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e1a8      	b.n	80074f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071a4:	4b2b      	ldr	r3, [pc, #172]	; (8007254 <HAL_RCC_OscConfig+0x240>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0302 	and.w	r3, r3, #2
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d0f0      	beq.n	8007192 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071b0:	4b28      	ldr	r3, [pc, #160]	; (8007254 <HAL_RCC_OscConfig+0x240>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	00db      	lsls	r3, r3, #3
 80071be:	4925      	ldr	r1, [pc, #148]	; (8007254 <HAL_RCC_OscConfig+0x240>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	600b      	str	r3, [r1, #0]
 80071c4:	e015      	b.n	80071f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071c6:	4b24      	ldr	r3, [pc, #144]	; (8007258 <HAL_RCC_OscConfig+0x244>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071cc:	f7fd fc1e 	bl	8004a0c <HAL_GetTick>
 80071d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071d2:	e008      	b.n	80071e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071d4:	f7fd fc1a 	bl	8004a0c <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d901      	bls.n	80071e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e187      	b.n	80074f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071e6:	4b1b      	ldr	r3, [pc, #108]	; (8007254 <HAL_RCC_OscConfig+0x240>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1f0      	bne.n	80071d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0308 	and.w	r3, r3, #8
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d036      	beq.n	800726c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d016      	beq.n	8007234 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007206:	4b15      	ldr	r3, [pc, #84]	; (800725c <HAL_RCC_OscConfig+0x248>)
 8007208:	2201      	movs	r2, #1
 800720a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800720c:	f7fd fbfe 	bl	8004a0c <HAL_GetTick>
 8007210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007212:	e008      	b.n	8007226 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007214:	f7fd fbfa 	bl	8004a0c <HAL_GetTick>
 8007218:	4602      	mov	r2, r0
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	2b02      	cmp	r3, #2
 8007220:	d901      	bls.n	8007226 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e167      	b.n	80074f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007226:	4b0b      	ldr	r3, [pc, #44]	; (8007254 <HAL_RCC_OscConfig+0x240>)
 8007228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800722a:	f003 0302 	and.w	r3, r3, #2
 800722e:	2b00      	cmp	r3, #0
 8007230:	d0f0      	beq.n	8007214 <HAL_RCC_OscConfig+0x200>
 8007232:	e01b      	b.n	800726c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007234:	4b09      	ldr	r3, [pc, #36]	; (800725c <HAL_RCC_OscConfig+0x248>)
 8007236:	2200      	movs	r2, #0
 8007238:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800723a:	f7fd fbe7 	bl	8004a0c <HAL_GetTick>
 800723e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007240:	e00e      	b.n	8007260 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007242:	f7fd fbe3 	bl	8004a0c <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	2b02      	cmp	r3, #2
 800724e:	d907      	bls.n	8007260 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e150      	b.n	80074f6 <HAL_RCC_OscConfig+0x4e2>
 8007254:	40023800 	.word	0x40023800
 8007258:	42470000 	.word	0x42470000
 800725c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007260:	4b88      	ldr	r3, [pc, #544]	; (8007484 <HAL_RCC_OscConfig+0x470>)
 8007262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007264:	f003 0302 	and.w	r3, r3, #2
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1ea      	bne.n	8007242 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0304 	and.w	r3, r3, #4
 8007274:	2b00      	cmp	r3, #0
 8007276:	f000 8097 	beq.w	80073a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800727a:	2300      	movs	r3, #0
 800727c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800727e:	4b81      	ldr	r3, [pc, #516]	; (8007484 <HAL_RCC_OscConfig+0x470>)
 8007280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10f      	bne.n	80072aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800728a:	2300      	movs	r3, #0
 800728c:	60bb      	str	r3, [r7, #8]
 800728e:	4b7d      	ldr	r3, [pc, #500]	; (8007484 <HAL_RCC_OscConfig+0x470>)
 8007290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007292:	4a7c      	ldr	r2, [pc, #496]	; (8007484 <HAL_RCC_OscConfig+0x470>)
 8007294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007298:	6413      	str	r3, [r2, #64]	; 0x40
 800729a:	4b7a      	ldr	r3, [pc, #488]	; (8007484 <HAL_RCC_OscConfig+0x470>)
 800729c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072a2:	60bb      	str	r3, [r7, #8]
 80072a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072a6:	2301      	movs	r3, #1
 80072a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072aa:	4b77      	ldr	r3, [pc, #476]	; (8007488 <HAL_RCC_OscConfig+0x474>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d118      	bne.n	80072e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072b6:	4b74      	ldr	r3, [pc, #464]	; (8007488 <HAL_RCC_OscConfig+0x474>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a73      	ldr	r2, [pc, #460]	; (8007488 <HAL_RCC_OscConfig+0x474>)
 80072bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072c2:	f7fd fba3 	bl	8004a0c <HAL_GetTick>
 80072c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072c8:	e008      	b.n	80072dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072ca:	f7fd fb9f 	bl	8004a0c <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d901      	bls.n	80072dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e10c      	b.n	80074f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072dc:	4b6a      	ldr	r3, [pc, #424]	; (8007488 <HAL_RCC_OscConfig+0x474>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d0f0      	beq.n	80072ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d106      	bne.n	80072fe <HAL_RCC_OscConfig+0x2ea>
 80072f0:	4b64      	ldr	r3, [pc, #400]	; (8007484 <HAL_RCC_OscConfig+0x470>)
 80072f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f4:	4a63      	ldr	r2, [pc, #396]	; (8007484 <HAL_RCC_OscConfig+0x470>)
 80072f6:	f043 0301 	orr.w	r3, r3, #1
 80072fa:	6713      	str	r3, [r2, #112]	; 0x70
 80072fc:	e01c      	b.n	8007338 <HAL_RCC_OscConfig+0x324>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	2b05      	cmp	r3, #5
 8007304:	d10c      	bne.n	8007320 <HAL_RCC_OscConfig+0x30c>
 8007306:	4b5f      	ldr	r3, [pc, #380]	; (8007484 <HAL_RCC_OscConfig+0x470>)
 8007308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730a:	4a5e      	ldr	r2, [pc, #376]	; (8007484 <HAL_RCC_OscConfig+0x470>)
 800730c:	f043 0304 	orr.w	r3, r3, #4
 8007310:	6713      	str	r3, [r2, #112]	; 0x70
 8007312:	4b5c      	ldr	r3, [pc, #368]	; (8007484 <HAL_RCC_OscConfig+0x470>)
 8007314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007316:	4a5b      	ldr	r2, [pc, #364]	; (8007484 <HAL_RCC_OscConfig+0x470>)
 8007318:	f043 0301 	orr.w	r3, r3, #1
 800731c:	6713      	str	r3, [r2, #112]	; 0x70
 800731e:	e00b      	b.n	8007338 <HAL_RCC_OscConfig+0x324>
 8007320:	4b58      	ldr	r3, [pc, #352]	; (8007484 <HAL_RCC_OscConfig+0x470>)
 8007322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007324:	4a57      	ldr	r2, [pc, #348]	; (8007484 <HAL_RCC_OscConfig+0x470>)
 8007326:	f023 0301 	bic.w	r3, r3, #1
 800732a:	6713      	str	r3, [r2, #112]	; 0x70
 800732c:	4b55      	ldr	r3, [pc, #340]	; (8007484 <HAL_RCC_OscConfig+0x470>)
 800732e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007330:	4a54      	ldr	r2, [pc, #336]	; (8007484 <HAL_RCC_OscConfig+0x470>)
 8007332:	f023 0304 	bic.w	r3, r3, #4
 8007336:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d015      	beq.n	800736c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007340:	f7fd fb64 	bl	8004a0c <HAL_GetTick>
 8007344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007346:	e00a      	b.n	800735e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007348:	f7fd fb60 	bl	8004a0c <HAL_GetTick>
 800734c:	4602      	mov	r2, r0
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	f241 3288 	movw	r2, #5000	; 0x1388
 8007356:	4293      	cmp	r3, r2
 8007358:	d901      	bls.n	800735e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e0cb      	b.n	80074f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800735e:	4b49      	ldr	r3, [pc, #292]	; (8007484 <HAL_RCC_OscConfig+0x470>)
 8007360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007362:	f003 0302 	and.w	r3, r3, #2
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0ee      	beq.n	8007348 <HAL_RCC_OscConfig+0x334>
 800736a:	e014      	b.n	8007396 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800736c:	f7fd fb4e 	bl	8004a0c <HAL_GetTick>
 8007370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007372:	e00a      	b.n	800738a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007374:	f7fd fb4a 	bl	8004a0c <HAL_GetTick>
 8007378:	4602      	mov	r2, r0
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007382:	4293      	cmp	r3, r2
 8007384:	d901      	bls.n	800738a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e0b5      	b.n	80074f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800738a:	4b3e      	ldr	r3, [pc, #248]	; (8007484 <HAL_RCC_OscConfig+0x470>)
 800738c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800738e:	f003 0302 	and.w	r3, r3, #2
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1ee      	bne.n	8007374 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007396:	7dfb      	ldrb	r3, [r7, #23]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d105      	bne.n	80073a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800739c:	4b39      	ldr	r3, [pc, #228]	; (8007484 <HAL_RCC_OscConfig+0x470>)
 800739e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a0:	4a38      	ldr	r2, [pc, #224]	; (8007484 <HAL_RCC_OscConfig+0x470>)
 80073a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 80a1 	beq.w	80074f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80073b2:	4b34      	ldr	r3, [pc, #208]	; (8007484 <HAL_RCC_OscConfig+0x470>)
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	f003 030c 	and.w	r3, r3, #12
 80073ba:	2b08      	cmp	r3, #8
 80073bc:	d05c      	beq.n	8007478 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d141      	bne.n	800744a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073c6:	4b31      	ldr	r3, [pc, #196]	; (800748c <HAL_RCC_OscConfig+0x478>)
 80073c8:	2200      	movs	r2, #0
 80073ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073cc:	f7fd fb1e 	bl	8004a0c <HAL_GetTick>
 80073d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073d2:	e008      	b.n	80073e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073d4:	f7fd fb1a 	bl	8004a0c <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d901      	bls.n	80073e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e087      	b.n	80074f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073e6:	4b27      	ldr	r3, [pc, #156]	; (8007484 <HAL_RCC_OscConfig+0x470>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1f0      	bne.n	80073d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	69da      	ldr	r2, [r3, #28]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	431a      	orrs	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	019b      	lsls	r3, r3, #6
 8007402:	431a      	orrs	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007408:	085b      	lsrs	r3, r3, #1
 800740a:	3b01      	subs	r3, #1
 800740c:	041b      	lsls	r3, r3, #16
 800740e:	431a      	orrs	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007414:	061b      	lsls	r3, r3, #24
 8007416:	491b      	ldr	r1, [pc, #108]	; (8007484 <HAL_RCC_OscConfig+0x470>)
 8007418:	4313      	orrs	r3, r2
 800741a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800741c:	4b1b      	ldr	r3, [pc, #108]	; (800748c <HAL_RCC_OscConfig+0x478>)
 800741e:	2201      	movs	r2, #1
 8007420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007422:	f7fd faf3 	bl	8004a0c <HAL_GetTick>
 8007426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007428:	e008      	b.n	800743c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800742a:	f7fd faef 	bl	8004a0c <HAL_GetTick>
 800742e:	4602      	mov	r2, r0
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	2b02      	cmp	r3, #2
 8007436:	d901      	bls.n	800743c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e05c      	b.n	80074f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800743c:	4b11      	ldr	r3, [pc, #68]	; (8007484 <HAL_RCC_OscConfig+0x470>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d0f0      	beq.n	800742a <HAL_RCC_OscConfig+0x416>
 8007448:	e054      	b.n	80074f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800744a:	4b10      	ldr	r3, [pc, #64]	; (800748c <HAL_RCC_OscConfig+0x478>)
 800744c:	2200      	movs	r2, #0
 800744e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007450:	f7fd fadc 	bl	8004a0c <HAL_GetTick>
 8007454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007456:	e008      	b.n	800746a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007458:	f7fd fad8 	bl	8004a0c <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	2b02      	cmp	r3, #2
 8007464:	d901      	bls.n	800746a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	e045      	b.n	80074f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800746a:	4b06      	ldr	r3, [pc, #24]	; (8007484 <HAL_RCC_OscConfig+0x470>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1f0      	bne.n	8007458 <HAL_RCC_OscConfig+0x444>
 8007476:	e03d      	b.n	80074f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d107      	bne.n	8007490 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e038      	b.n	80074f6 <HAL_RCC_OscConfig+0x4e2>
 8007484:	40023800 	.word	0x40023800
 8007488:	40007000 	.word	0x40007000
 800748c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007490:	4b1b      	ldr	r3, [pc, #108]	; (8007500 <HAL_RCC_OscConfig+0x4ec>)
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d028      	beq.n	80074f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d121      	bne.n	80074f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d11a      	bne.n	80074f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80074c0:	4013      	ands	r3, r2
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80074c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d111      	bne.n	80074f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d6:	085b      	lsrs	r3, r3, #1
 80074d8:	3b01      	subs	r3, #1
 80074da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074dc:	429a      	cmp	r2, r3
 80074de:	d107      	bne.n	80074f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d001      	beq.n	80074f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e000      	b.n	80074f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3718      	adds	r7, #24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	40023800 	.word	0x40023800

08007504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d101      	bne.n	8007518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e0cc      	b.n	80076b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007518:	4b68      	ldr	r3, [pc, #416]	; (80076bc <HAL_RCC_ClockConfig+0x1b8>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0307 	and.w	r3, r3, #7
 8007520:	683a      	ldr	r2, [r7, #0]
 8007522:	429a      	cmp	r2, r3
 8007524:	d90c      	bls.n	8007540 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007526:	4b65      	ldr	r3, [pc, #404]	; (80076bc <HAL_RCC_ClockConfig+0x1b8>)
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	b2d2      	uxtb	r2, r2
 800752c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800752e:	4b63      	ldr	r3, [pc, #396]	; (80076bc <HAL_RCC_ClockConfig+0x1b8>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0307 	and.w	r3, r3, #7
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	429a      	cmp	r2, r3
 800753a:	d001      	beq.n	8007540 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e0b8      	b.n	80076b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0302 	and.w	r3, r3, #2
 8007548:	2b00      	cmp	r3, #0
 800754a:	d020      	beq.n	800758e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0304 	and.w	r3, r3, #4
 8007554:	2b00      	cmp	r3, #0
 8007556:	d005      	beq.n	8007564 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007558:	4b59      	ldr	r3, [pc, #356]	; (80076c0 <HAL_RCC_ClockConfig+0x1bc>)
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	4a58      	ldr	r2, [pc, #352]	; (80076c0 <HAL_RCC_ClockConfig+0x1bc>)
 800755e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007562:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0308 	and.w	r3, r3, #8
 800756c:	2b00      	cmp	r3, #0
 800756e:	d005      	beq.n	800757c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007570:	4b53      	ldr	r3, [pc, #332]	; (80076c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	4a52      	ldr	r2, [pc, #328]	; (80076c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007576:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800757a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800757c:	4b50      	ldr	r3, [pc, #320]	; (80076c0 <HAL_RCC_ClockConfig+0x1bc>)
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	494d      	ldr	r1, [pc, #308]	; (80076c0 <HAL_RCC_ClockConfig+0x1bc>)
 800758a:	4313      	orrs	r3, r2
 800758c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b00      	cmp	r3, #0
 8007598:	d044      	beq.n	8007624 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d107      	bne.n	80075b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075a2:	4b47      	ldr	r3, [pc, #284]	; (80076c0 <HAL_RCC_ClockConfig+0x1bc>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d119      	bne.n	80075e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e07f      	b.n	80076b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d003      	beq.n	80075c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80075be:	2b03      	cmp	r3, #3
 80075c0:	d107      	bne.n	80075d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075c2:	4b3f      	ldr	r3, [pc, #252]	; (80076c0 <HAL_RCC_ClockConfig+0x1bc>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d109      	bne.n	80075e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e06f      	b.n	80076b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075d2:	4b3b      	ldr	r3, [pc, #236]	; (80076c0 <HAL_RCC_ClockConfig+0x1bc>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 0302 	and.w	r3, r3, #2
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d101      	bne.n	80075e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e067      	b.n	80076b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075e2:	4b37      	ldr	r3, [pc, #220]	; (80076c0 <HAL_RCC_ClockConfig+0x1bc>)
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	f023 0203 	bic.w	r2, r3, #3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	4934      	ldr	r1, [pc, #208]	; (80076c0 <HAL_RCC_ClockConfig+0x1bc>)
 80075f0:	4313      	orrs	r3, r2
 80075f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075f4:	f7fd fa0a 	bl	8004a0c <HAL_GetTick>
 80075f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075fa:	e00a      	b.n	8007612 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075fc:	f7fd fa06 	bl	8004a0c <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	f241 3288 	movw	r2, #5000	; 0x1388
 800760a:	4293      	cmp	r3, r2
 800760c:	d901      	bls.n	8007612 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e04f      	b.n	80076b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007612:	4b2b      	ldr	r3, [pc, #172]	; (80076c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f003 020c 	and.w	r2, r3, #12
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	429a      	cmp	r2, r3
 8007622:	d1eb      	bne.n	80075fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007624:	4b25      	ldr	r3, [pc, #148]	; (80076bc <HAL_RCC_ClockConfig+0x1b8>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 0307 	and.w	r3, r3, #7
 800762c:	683a      	ldr	r2, [r7, #0]
 800762e:	429a      	cmp	r2, r3
 8007630:	d20c      	bcs.n	800764c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007632:	4b22      	ldr	r3, [pc, #136]	; (80076bc <HAL_RCC_ClockConfig+0x1b8>)
 8007634:	683a      	ldr	r2, [r7, #0]
 8007636:	b2d2      	uxtb	r2, r2
 8007638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800763a:	4b20      	ldr	r3, [pc, #128]	; (80076bc <HAL_RCC_ClockConfig+0x1b8>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0307 	and.w	r3, r3, #7
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	429a      	cmp	r2, r3
 8007646:	d001      	beq.n	800764c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e032      	b.n	80076b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 0304 	and.w	r3, r3, #4
 8007654:	2b00      	cmp	r3, #0
 8007656:	d008      	beq.n	800766a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007658:	4b19      	ldr	r3, [pc, #100]	; (80076c0 <HAL_RCC_ClockConfig+0x1bc>)
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	4916      	ldr	r1, [pc, #88]	; (80076c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007666:	4313      	orrs	r3, r2
 8007668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0308 	and.w	r3, r3, #8
 8007672:	2b00      	cmp	r3, #0
 8007674:	d009      	beq.n	800768a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007676:	4b12      	ldr	r3, [pc, #72]	; (80076c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	00db      	lsls	r3, r3, #3
 8007684:	490e      	ldr	r1, [pc, #56]	; (80076c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007686:	4313      	orrs	r3, r2
 8007688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800768a:	f000 f821 	bl	80076d0 <HAL_RCC_GetSysClockFreq>
 800768e:	4602      	mov	r2, r0
 8007690:	4b0b      	ldr	r3, [pc, #44]	; (80076c0 <HAL_RCC_ClockConfig+0x1bc>)
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	091b      	lsrs	r3, r3, #4
 8007696:	f003 030f 	and.w	r3, r3, #15
 800769a:	490a      	ldr	r1, [pc, #40]	; (80076c4 <HAL_RCC_ClockConfig+0x1c0>)
 800769c:	5ccb      	ldrb	r3, [r1, r3]
 800769e:	fa22 f303 	lsr.w	r3, r2, r3
 80076a2:	4a09      	ldr	r2, [pc, #36]	; (80076c8 <HAL_RCC_ClockConfig+0x1c4>)
 80076a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80076a6:	4b09      	ldr	r3, [pc, #36]	; (80076cc <HAL_RCC_ClockConfig+0x1c8>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fd f96a 	bl	8004984 <HAL_InitTick>

  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	40023c00 	.word	0x40023c00
 80076c0:	40023800 	.word	0x40023800
 80076c4:	08011f74 	.word	0x08011f74
 80076c8:	20000004 	.word	0x20000004
 80076cc:	20000008 	.word	0x20000008

080076d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076d4:	b094      	sub	sp, #80	; 0x50
 80076d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80076d8:	2300      	movs	r3, #0
 80076da:	647b      	str	r3, [r7, #68]	; 0x44
 80076dc:	2300      	movs	r3, #0
 80076de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076e0:	2300      	movs	r3, #0
 80076e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80076e4:	2300      	movs	r3, #0
 80076e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076e8:	4b79      	ldr	r3, [pc, #484]	; (80078d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f003 030c 	and.w	r3, r3, #12
 80076f0:	2b08      	cmp	r3, #8
 80076f2:	d00d      	beq.n	8007710 <HAL_RCC_GetSysClockFreq+0x40>
 80076f4:	2b08      	cmp	r3, #8
 80076f6:	f200 80e1 	bhi.w	80078bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d002      	beq.n	8007704 <HAL_RCC_GetSysClockFreq+0x34>
 80076fe:	2b04      	cmp	r3, #4
 8007700:	d003      	beq.n	800770a <HAL_RCC_GetSysClockFreq+0x3a>
 8007702:	e0db      	b.n	80078bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007704:	4b73      	ldr	r3, [pc, #460]	; (80078d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007706:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007708:	e0db      	b.n	80078c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800770a:	4b73      	ldr	r3, [pc, #460]	; (80078d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800770c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800770e:	e0d8      	b.n	80078c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007710:	4b6f      	ldr	r3, [pc, #444]	; (80078d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007718:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800771a:	4b6d      	ldr	r3, [pc, #436]	; (80078d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d063      	beq.n	80077ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007726:	4b6a      	ldr	r3, [pc, #424]	; (80078d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	099b      	lsrs	r3, r3, #6
 800772c:	2200      	movs	r2, #0
 800772e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007730:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007738:	633b      	str	r3, [r7, #48]	; 0x30
 800773a:	2300      	movs	r3, #0
 800773c:	637b      	str	r3, [r7, #52]	; 0x34
 800773e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007742:	4622      	mov	r2, r4
 8007744:	462b      	mov	r3, r5
 8007746:	f04f 0000 	mov.w	r0, #0
 800774a:	f04f 0100 	mov.w	r1, #0
 800774e:	0159      	lsls	r1, r3, #5
 8007750:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007754:	0150      	lsls	r0, r2, #5
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	4621      	mov	r1, r4
 800775c:	1a51      	subs	r1, r2, r1
 800775e:	6139      	str	r1, [r7, #16]
 8007760:	4629      	mov	r1, r5
 8007762:	eb63 0301 	sbc.w	r3, r3, r1
 8007766:	617b      	str	r3, [r7, #20]
 8007768:	f04f 0200 	mov.w	r2, #0
 800776c:	f04f 0300 	mov.w	r3, #0
 8007770:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007774:	4659      	mov	r1, fp
 8007776:	018b      	lsls	r3, r1, #6
 8007778:	4651      	mov	r1, sl
 800777a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800777e:	4651      	mov	r1, sl
 8007780:	018a      	lsls	r2, r1, #6
 8007782:	4651      	mov	r1, sl
 8007784:	ebb2 0801 	subs.w	r8, r2, r1
 8007788:	4659      	mov	r1, fp
 800778a:	eb63 0901 	sbc.w	r9, r3, r1
 800778e:	f04f 0200 	mov.w	r2, #0
 8007792:	f04f 0300 	mov.w	r3, #0
 8007796:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800779a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800779e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077a2:	4690      	mov	r8, r2
 80077a4:	4699      	mov	r9, r3
 80077a6:	4623      	mov	r3, r4
 80077a8:	eb18 0303 	adds.w	r3, r8, r3
 80077ac:	60bb      	str	r3, [r7, #8]
 80077ae:	462b      	mov	r3, r5
 80077b0:	eb49 0303 	adc.w	r3, r9, r3
 80077b4:	60fb      	str	r3, [r7, #12]
 80077b6:	f04f 0200 	mov.w	r2, #0
 80077ba:	f04f 0300 	mov.w	r3, #0
 80077be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80077c2:	4629      	mov	r1, r5
 80077c4:	024b      	lsls	r3, r1, #9
 80077c6:	4621      	mov	r1, r4
 80077c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80077cc:	4621      	mov	r1, r4
 80077ce:	024a      	lsls	r2, r1, #9
 80077d0:	4610      	mov	r0, r2
 80077d2:	4619      	mov	r1, r3
 80077d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077d6:	2200      	movs	r2, #0
 80077d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80077da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80077e0:	f7f9 f854 	bl	800088c <__aeabi_uldivmod>
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	4613      	mov	r3, r2
 80077ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077ec:	e058      	b.n	80078a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077ee:	4b38      	ldr	r3, [pc, #224]	; (80078d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	099b      	lsrs	r3, r3, #6
 80077f4:	2200      	movs	r2, #0
 80077f6:	4618      	mov	r0, r3
 80077f8:	4611      	mov	r1, r2
 80077fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80077fe:	623b      	str	r3, [r7, #32]
 8007800:	2300      	movs	r3, #0
 8007802:	627b      	str	r3, [r7, #36]	; 0x24
 8007804:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007808:	4642      	mov	r2, r8
 800780a:	464b      	mov	r3, r9
 800780c:	f04f 0000 	mov.w	r0, #0
 8007810:	f04f 0100 	mov.w	r1, #0
 8007814:	0159      	lsls	r1, r3, #5
 8007816:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800781a:	0150      	lsls	r0, r2, #5
 800781c:	4602      	mov	r2, r0
 800781e:	460b      	mov	r3, r1
 8007820:	4641      	mov	r1, r8
 8007822:	ebb2 0a01 	subs.w	sl, r2, r1
 8007826:	4649      	mov	r1, r9
 8007828:	eb63 0b01 	sbc.w	fp, r3, r1
 800782c:	f04f 0200 	mov.w	r2, #0
 8007830:	f04f 0300 	mov.w	r3, #0
 8007834:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007838:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800783c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007840:	ebb2 040a 	subs.w	r4, r2, sl
 8007844:	eb63 050b 	sbc.w	r5, r3, fp
 8007848:	f04f 0200 	mov.w	r2, #0
 800784c:	f04f 0300 	mov.w	r3, #0
 8007850:	00eb      	lsls	r3, r5, #3
 8007852:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007856:	00e2      	lsls	r2, r4, #3
 8007858:	4614      	mov	r4, r2
 800785a:	461d      	mov	r5, r3
 800785c:	4643      	mov	r3, r8
 800785e:	18e3      	adds	r3, r4, r3
 8007860:	603b      	str	r3, [r7, #0]
 8007862:	464b      	mov	r3, r9
 8007864:	eb45 0303 	adc.w	r3, r5, r3
 8007868:	607b      	str	r3, [r7, #4]
 800786a:	f04f 0200 	mov.w	r2, #0
 800786e:	f04f 0300 	mov.w	r3, #0
 8007872:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007876:	4629      	mov	r1, r5
 8007878:	028b      	lsls	r3, r1, #10
 800787a:	4621      	mov	r1, r4
 800787c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007880:	4621      	mov	r1, r4
 8007882:	028a      	lsls	r2, r1, #10
 8007884:	4610      	mov	r0, r2
 8007886:	4619      	mov	r1, r3
 8007888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800788a:	2200      	movs	r2, #0
 800788c:	61bb      	str	r3, [r7, #24]
 800788e:	61fa      	str	r2, [r7, #28]
 8007890:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007894:	f7f8 fffa 	bl	800088c <__aeabi_uldivmod>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	4613      	mov	r3, r2
 800789e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80078a0:	4b0b      	ldr	r3, [pc, #44]	; (80078d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	0c1b      	lsrs	r3, r3, #16
 80078a6:	f003 0303 	and.w	r3, r3, #3
 80078aa:	3301      	adds	r3, #1
 80078ac:	005b      	lsls	r3, r3, #1
 80078ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80078b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80078ba:	e002      	b.n	80078c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80078bc:	4b05      	ldr	r3, [pc, #20]	; (80078d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80078be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80078c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80078c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3750      	adds	r7, #80	; 0x50
 80078c8:	46bd      	mov	sp, r7
 80078ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078ce:	bf00      	nop
 80078d0:	40023800 	.word	0x40023800
 80078d4:	00f42400 	.word	0x00f42400
 80078d8:	007a1200 	.word	0x007a1200

080078dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078dc:	b480      	push	{r7}
 80078de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078e0:	4b03      	ldr	r3, [pc, #12]	; (80078f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80078e2:	681b      	ldr	r3, [r3, #0]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	20000004 	.word	0x20000004

080078f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80078f8:	f7ff fff0 	bl	80078dc <HAL_RCC_GetHCLKFreq>
 80078fc:	4602      	mov	r2, r0
 80078fe:	4b05      	ldr	r3, [pc, #20]	; (8007914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	0a9b      	lsrs	r3, r3, #10
 8007904:	f003 0307 	and.w	r3, r3, #7
 8007908:	4903      	ldr	r1, [pc, #12]	; (8007918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800790a:	5ccb      	ldrb	r3, [r1, r3]
 800790c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007910:	4618      	mov	r0, r3
 8007912:	bd80      	pop	{r7, pc}
 8007914:	40023800 	.word	0x40023800
 8007918:	08011f84 	.word	0x08011f84

0800791c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007920:	f7ff ffdc 	bl	80078dc <HAL_RCC_GetHCLKFreq>
 8007924:	4602      	mov	r2, r0
 8007926:	4b05      	ldr	r3, [pc, #20]	; (800793c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	0b5b      	lsrs	r3, r3, #13
 800792c:	f003 0307 	and.w	r3, r3, #7
 8007930:	4903      	ldr	r1, [pc, #12]	; (8007940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007932:	5ccb      	ldrb	r3, [r1, r3]
 8007934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007938:	4618      	mov	r0, r3
 800793a:	bd80      	pop	{r7, pc}
 800793c:	40023800 	.word	0x40023800
 8007940:	08011f84 	.word	0x08011f84

08007944 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e07b      	b.n	8007a4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795a:	2b00      	cmp	r3, #0
 800795c:	d108      	bne.n	8007970 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007966:	d009      	beq.n	800797c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	61da      	str	r2, [r3, #28]
 800796e:	e005      	b.n	800797c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007988:	b2db      	uxtb	r3, r3
 800798a:	2b00      	cmp	r3, #0
 800798c:	d106      	bne.n	800799c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f7fb fde4 	bl	8003564 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2202      	movs	r2, #2
 80079a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80079c4:	431a      	orrs	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079ce:	431a      	orrs	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	f003 0302 	and.w	r3, r3, #2
 80079d8:	431a      	orrs	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	431a      	orrs	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079ec:	431a      	orrs	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	69db      	ldr	r3, [r3, #28]
 80079f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079f6:	431a      	orrs	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a1b      	ldr	r3, [r3, #32]
 80079fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a00:	ea42 0103 	orr.w	r1, r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	430a      	orrs	r2, r1
 8007a12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	0c1b      	lsrs	r3, r3, #16
 8007a1a:	f003 0104 	and.w	r1, r3, #4
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a22:	f003 0210 	and.w	r2, r3, #16
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	69da      	ldr	r2, [r3, #28]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b08c      	sub	sp, #48	; 0x30
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	60f8      	str	r0, [r7, #12]
 8007a5e:	60b9      	str	r1, [r7, #8]
 8007a60:	607a      	str	r2, [r7, #4]
 8007a62:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007a64:	2301      	movs	r3, #1
 8007a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d101      	bne.n	8007a7c <HAL_SPI_TransmitReceive+0x26>
 8007a78:	2302      	movs	r3, #2
 8007a7a:	e18a      	b.n	8007d92 <HAL_SPI_TransmitReceive+0x33c>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a84:	f7fc ffc2 	bl	8004a0c <HAL_GetTick>
 8007a88:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007a9a:	887b      	ldrh	r3, [r7, #2]
 8007a9c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d00f      	beq.n	8007ac6 <HAL_SPI_TransmitReceive+0x70>
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007aac:	d107      	bne.n	8007abe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d103      	bne.n	8007abe <HAL_SPI_TransmitReceive+0x68>
 8007ab6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007aba:	2b04      	cmp	r3, #4
 8007abc:	d003      	beq.n	8007ac6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007abe:	2302      	movs	r3, #2
 8007ac0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007ac4:	e15b      	b.n	8007d7e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d005      	beq.n	8007ad8 <HAL_SPI_TransmitReceive+0x82>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d002      	beq.n	8007ad8 <HAL_SPI_TransmitReceive+0x82>
 8007ad2:	887b      	ldrh	r3, [r7, #2]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d103      	bne.n	8007ae0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007ade:	e14e      	b.n	8007d7e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	2b04      	cmp	r3, #4
 8007aea:	d003      	beq.n	8007af4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2205      	movs	r2, #5
 8007af0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	887a      	ldrh	r2, [r7, #2]
 8007b04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	887a      	ldrh	r2, [r7, #2]
 8007b0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	887a      	ldrh	r2, [r7, #2]
 8007b16:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	887a      	ldrh	r2, [r7, #2]
 8007b1c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b34:	2b40      	cmp	r3, #64	; 0x40
 8007b36:	d007      	beq.n	8007b48 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b50:	d178      	bne.n	8007c44 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d002      	beq.n	8007b60 <HAL_SPI_TransmitReceive+0x10a>
 8007b5a:	8b7b      	ldrh	r3, [r7, #26]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d166      	bne.n	8007c2e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b64:	881a      	ldrh	r2, [r3, #0]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b70:	1c9a      	adds	r2, r3, #2
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b84:	e053      	b.n	8007c2e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	f003 0302 	and.w	r3, r3, #2
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d11b      	bne.n	8007bcc <HAL_SPI_TransmitReceive+0x176>
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d016      	beq.n	8007bcc <HAL_SPI_TransmitReceive+0x176>
 8007b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d113      	bne.n	8007bcc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba8:	881a      	ldrh	r2, [r3, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb4:	1c9a      	adds	r2, r3, #2
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d119      	bne.n	8007c0e <HAL_SPI_TransmitReceive+0x1b8>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d014      	beq.n	8007c0e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68da      	ldr	r2, [r3, #12]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bee:	b292      	uxth	r2, r2
 8007bf0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf6:	1c9a      	adds	r2, r3, #2
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	3b01      	subs	r3, #1
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007c0e:	f7fc fefd 	bl	8004a0c <HAL_GetTick>
 8007c12:	4602      	mov	r2, r0
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	1ad3      	subs	r3, r2, r3
 8007c18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d807      	bhi.n	8007c2e <HAL_SPI_TransmitReceive+0x1d8>
 8007c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c24:	d003      	beq.n	8007c2e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007c2c:	e0a7      	b.n	8007d7e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1a6      	bne.n	8007b86 <HAL_SPI_TransmitReceive+0x130>
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1a1      	bne.n	8007b86 <HAL_SPI_TransmitReceive+0x130>
 8007c42:	e07c      	b.n	8007d3e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d002      	beq.n	8007c52 <HAL_SPI_TransmitReceive+0x1fc>
 8007c4c:	8b7b      	ldrh	r3, [r7, #26]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d16b      	bne.n	8007d2a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	330c      	adds	r3, #12
 8007c5c:	7812      	ldrb	r2, [r2, #0]
 8007c5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c64:	1c5a      	adds	r2, r3, #1
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	3b01      	subs	r3, #1
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c78:	e057      	b.n	8007d2a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	f003 0302 	and.w	r3, r3, #2
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d11c      	bne.n	8007cc2 <HAL_SPI_TransmitReceive+0x26c>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d017      	beq.n	8007cc2 <HAL_SPI_TransmitReceive+0x26c>
 8007c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d114      	bne.n	8007cc2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	330c      	adds	r3, #12
 8007ca2:	7812      	ldrb	r2, [r2, #0]
 8007ca4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007caa:	1c5a      	adds	r2, r3, #1
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	f003 0301 	and.w	r3, r3, #1
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d119      	bne.n	8007d04 <HAL_SPI_TransmitReceive+0x2ae>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d014      	beq.n	8007d04 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68da      	ldr	r2, [r3, #12]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce4:	b2d2      	uxtb	r2, r2
 8007ce6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cec:	1c5a      	adds	r2, r3, #1
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d00:	2301      	movs	r3, #1
 8007d02:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007d04:	f7fc fe82 	bl	8004a0c <HAL_GetTick>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d803      	bhi.n	8007d1c <HAL_SPI_TransmitReceive+0x2c6>
 8007d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d1a:	d102      	bne.n	8007d22 <HAL_SPI_TransmitReceive+0x2cc>
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d103      	bne.n	8007d2a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007d28:	e029      	b.n	8007d7e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1a2      	bne.n	8007c7a <HAL_SPI_TransmitReceive+0x224>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d19d      	bne.n	8007c7a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f000 f8b2 	bl	8007eac <SPI_EndRxTxTransaction>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d006      	beq.n	8007d5c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2220      	movs	r2, #32
 8007d58:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007d5a:	e010      	b.n	8007d7e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10b      	bne.n	8007d7c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d64:	2300      	movs	r3, #0
 8007d66:	617b      	str	r3, [r7, #20]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	617b      	str	r3, [r7, #20]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	617b      	str	r3, [r7, #20]
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	e000      	b.n	8007d7e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007d7c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2201      	movs	r2, #1
 8007d82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007d8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3730      	adds	r7, #48	; 0x30
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
	...

08007d9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b088      	sub	sp, #32
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	603b      	str	r3, [r7, #0]
 8007da8:	4613      	mov	r3, r2
 8007daa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007dac:	f7fc fe2e 	bl	8004a0c <HAL_GetTick>
 8007db0:	4602      	mov	r2, r0
 8007db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db4:	1a9b      	subs	r3, r3, r2
 8007db6:	683a      	ldr	r2, [r7, #0]
 8007db8:	4413      	add	r3, r2
 8007dba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007dbc:	f7fc fe26 	bl	8004a0c <HAL_GetTick>
 8007dc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007dc2:	4b39      	ldr	r3, [pc, #228]	; (8007ea8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	015b      	lsls	r3, r3, #5
 8007dc8:	0d1b      	lsrs	r3, r3, #20
 8007dca:	69fa      	ldr	r2, [r7, #28]
 8007dcc:	fb02 f303 	mul.w	r3, r2, r3
 8007dd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007dd2:	e054      	b.n	8007e7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dda:	d050      	beq.n	8007e7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ddc:	f7fc fe16 	bl	8004a0c <HAL_GetTick>
 8007de0:	4602      	mov	r2, r0
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	69fa      	ldr	r2, [r7, #28]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d902      	bls.n	8007df2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d13d      	bne.n	8007e6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	685a      	ldr	r2, [r3, #4]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e0a:	d111      	bne.n	8007e30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e14:	d004      	beq.n	8007e20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e1e:	d107      	bne.n	8007e30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e38:	d10f      	bne.n	8007e5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e48:	601a      	str	r2, [r3, #0]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e017      	b.n	8007e9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d101      	bne.n	8007e78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007e74:	2300      	movs	r3, #0
 8007e76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	689a      	ldr	r2, [r3, #8]
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	4013      	ands	r3, r2
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	bf0c      	ite	eq
 8007e8e:	2301      	moveq	r3, #1
 8007e90:	2300      	movne	r3, #0
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	461a      	mov	r2, r3
 8007e96:	79fb      	ldrb	r3, [r7, #7]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d19b      	bne.n	8007dd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3720      	adds	r7, #32
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	20000004 	.word	0x20000004

08007eac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b088      	sub	sp, #32
 8007eb0:	af02      	add	r7, sp, #8
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007eb8:	4b1b      	ldr	r3, [pc, #108]	; (8007f28 <SPI_EndRxTxTransaction+0x7c>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a1b      	ldr	r2, [pc, #108]	; (8007f2c <SPI_EndRxTxTransaction+0x80>)
 8007ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec2:	0d5b      	lsrs	r3, r3, #21
 8007ec4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ec8:	fb02 f303 	mul.w	r3, r2, r3
 8007ecc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ed6:	d112      	bne.n	8007efe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	2180      	movs	r1, #128	; 0x80
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f7ff ff5a 	bl	8007d9c <SPI_WaitFlagStateUntilTimeout>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d016      	beq.n	8007f1c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef2:	f043 0220 	orr.w	r2, r3, #32
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e00f      	b.n	8007f1e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00a      	beq.n	8007f1a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	3b01      	subs	r3, #1
 8007f08:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f14:	2b80      	cmp	r3, #128	; 0x80
 8007f16:	d0f2      	beq.n	8007efe <SPI_EndRxTxTransaction+0x52>
 8007f18:	e000      	b.n	8007f1c <SPI_EndRxTxTransaction+0x70>
        break;
 8007f1a:	bf00      	nop
  }

  return HAL_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3718      	adds	r7, #24
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	20000004 	.word	0x20000004
 8007f2c:	165e9f81 	.word	0x165e9f81

08007f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d101      	bne.n	8007f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e041      	b.n	8007fc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d106      	bne.n	8007f5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7fb fb4c 	bl	80035f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2202      	movs	r2, #2
 8007f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	3304      	adds	r3, #4
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	4610      	mov	r0, r2
 8007f70:	f000 fcc0 	bl	80088f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b082      	sub	sp, #8
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d101      	bne.n	8007fe0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e041      	b.n	8008064 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d106      	bne.n	8007ffa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f7fb fb6d 	bl	80036d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2202      	movs	r2, #2
 8007ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	3304      	adds	r3, #4
 800800a:	4619      	mov	r1, r3
 800800c:	4610      	mov	r0, r2
 800800e:	f000 fc71 	bl	80088f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2201      	movs	r2, #1
 800801e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2201      	movs	r2, #1
 8008036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2201      	movs	r2, #1
 800804e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3708      	adds	r7, #8
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d109      	bne.n	8008090 <HAL_TIM_PWM_Start+0x24>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008082:	b2db      	uxtb	r3, r3
 8008084:	2b01      	cmp	r3, #1
 8008086:	bf14      	ite	ne
 8008088:	2301      	movne	r3, #1
 800808a:	2300      	moveq	r3, #0
 800808c:	b2db      	uxtb	r3, r3
 800808e:	e022      	b.n	80080d6 <HAL_TIM_PWM_Start+0x6a>
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	2b04      	cmp	r3, #4
 8008094:	d109      	bne.n	80080aa <HAL_TIM_PWM_Start+0x3e>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b01      	cmp	r3, #1
 80080a0:	bf14      	ite	ne
 80080a2:	2301      	movne	r3, #1
 80080a4:	2300      	moveq	r3, #0
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	e015      	b.n	80080d6 <HAL_TIM_PWM_Start+0x6a>
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	2b08      	cmp	r3, #8
 80080ae:	d109      	bne.n	80080c4 <HAL_TIM_PWM_Start+0x58>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	bf14      	ite	ne
 80080bc:	2301      	movne	r3, #1
 80080be:	2300      	moveq	r3, #0
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	e008      	b.n	80080d6 <HAL_TIM_PWM_Start+0x6a>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	bf14      	ite	ne
 80080d0:	2301      	movne	r3, #1
 80080d2:	2300      	moveq	r3, #0
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e07c      	b.n	80081d8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d104      	bne.n	80080ee <HAL_TIM_PWM_Start+0x82>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2202      	movs	r2, #2
 80080e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080ec:	e013      	b.n	8008116 <HAL_TIM_PWM_Start+0xaa>
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	2b04      	cmp	r3, #4
 80080f2:	d104      	bne.n	80080fe <HAL_TIM_PWM_Start+0x92>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2202      	movs	r2, #2
 80080f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080fc:	e00b      	b.n	8008116 <HAL_TIM_PWM_Start+0xaa>
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	2b08      	cmp	r3, #8
 8008102:	d104      	bne.n	800810e <HAL_TIM_PWM_Start+0xa2>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2202      	movs	r2, #2
 8008108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800810c:	e003      	b.n	8008116 <HAL_TIM_PWM_Start+0xaa>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2202      	movs	r2, #2
 8008112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2201      	movs	r2, #1
 800811c:	6839      	ldr	r1, [r7, #0]
 800811e:	4618      	mov	r0, r3
 8008120:	f000 fed2 	bl	8008ec8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a2d      	ldr	r2, [pc, #180]	; (80081e0 <HAL_TIM_PWM_Start+0x174>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d004      	beq.n	8008138 <HAL_TIM_PWM_Start+0xcc>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a2c      	ldr	r2, [pc, #176]	; (80081e4 <HAL_TIM_PWM_Start+0x178>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d101      	bne.n	800813c <HAL_TIM_PWM_Start+0xd0>
 8008138:	2301      	movs	r3, #1
 800813a:	e000      	b.n	800813e <HAL_TIM_PWM_Start+0xd2>
 800813c:	2300      	movs	r3, #0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d007      	beq.n	8008152 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008150:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a22      	ldr	r2, [pc, #136]	; (80081e0 <HAL_TIM_PWM_Start+0x174>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d022      	beq.n	80081a2 <HAL_TIM_PWM_Start+0x136>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008164:	d01d      	beq.n	80081a2 <HAL_TIM_PWM_Start+0x136>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a1f      	ldr	r2, [pc, #124]	; (80081e8 <HAL_TIM_PWM_Start+0x17c>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d018      	beq.n	80081a2 <HAL_TIM_PWM_Start+0x136>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a1d      	ldr	r2, [pc, #116]	; (80081ec <HAL_TIM_PWM_Start+0x180>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d013      	beq.n	80081a2 <HAL_TIM_PWM_Start+0x136>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a1c      	ldr	r2, [pc, #112]	; (80081f0 <HAL_TIM_PWM_Start+0x184>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d00e      	beq.n	80081a2 <HAL_TIM_PWM_Start+0x136>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a16      	ldr	r2, [pc, #88]	; (80081e4 <HAL_TIM_PWM_Start+0x178>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d009      	beq.n	80081a2 <HAL_TIM_PWM_Start+0x136>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a18      	ldr	r2, [pc, #96]	; (80081f4 <HAL_TIM_PWM_Start+0x188>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d004      	beq.n	80081a2 <HAL_TIM_PWM_Start+0x136>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a16      	ldr	r2, [pc, #88]	; (80081f8 <HAL_TIM_PWM_Start+0x18c>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d111      	bne.n	80081c6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	f003 0307 	and.w	r3, r3, #7
 80081ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2b06      	cmp	r3, #6
 80081b2:	d010      	beq.n	80081d6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f042 0201 	orr.w	r2, r2, #1
 80081c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081c4:	e007      	b.n	80081d6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f042 0201 	orr.w	r2, r2, #1
 80081d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	40010000 	.word	0x40010000
 80081e4:	40010400 	.word	0x40010400
 80081e8:	40000400 	.word	0x40000400
 80081ec:	40000800 	.word	0x40000800
 80081f0:	40000c00 	.word	0x40000c00
 80081f4:	40014000 	.word	0x40014000
 80081f8:	40001800 	.word	0x40001800

080081fc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2200      	movs	r2, #0
 800820c:	6839      	ldr	r1, [r7, #0]
 800820e:	4618      	mov	r0, r3
 8008210:	f000 fe5a 	bl	8008ec8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a2e      	ldr	r2, [pc, #184]	; (80082d4 <HAL_TIM_PWM_Stop+0xd8>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d004      	beq.n	8008228 <HAL_TIM_PWM_Stop+0x2c>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a2d      	ldr	r2, [pc, #180]	; (80082d8 <HAL_TIM_PWM_Stop+0xdc>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d101      	bne.n	800822c <HAL_TIM_PWM_Stop+0x30>
 8008228:	2301      	movs	r3, #1
 800822a:	e000      	b.n	800822e <HAL_TIM_PWM_Stop+0x32>
 800822c:	2300      	movs	r3, #0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d017      	beq.n	8008262 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	6a1a      	ldr	r2, [r3, #32]
 8008238:	f241 1311 	movw	r3, #4369	; 0x1111
 800823c:	4013      	ands	r3, r2
 800823e:	2b00      	cmp	r3, #0
 8008240:	d10f      	bne.n	8008262 <HAL_TIM_PWM_Stop+0x66>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6a1a      	ldr	r2, [r3, #32]
 8008248:	f240 4344 	movw	r3, #1092	; 0x444
 800824c:	4013      	ands	r3, r2
 800824e:	2b00      	cmp	r3, #0
 8008250:	d107      	bne.n	8008262 <HAL_TIM_PWM_Stop+0x66>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008260:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	6a1a      	ldr	r2, [r3, #32]
 8008268:	f241 1311 	movw	r3, #4369	; 0x1111
 800826c:	4013      	ands	r3, r2
 800826e:	2b00      	cmp	r3, #0
 8008270:	d10f      	bne.n	8008292 <HAL_TIM_PWM_Stop+0x96>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	6a1a      	ldr	r2, [r3, #32]
 8008278:	f240 4344 	movw	r3, #1092	; 0x444
 800827c:	4013      	ands	r3, r2
 800827e:	2b00      	cmp	r3, #0
 8008280:	d107      	bne.n	8008292 <HAL_TIM_PWM_Stop+0x96>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f022 0201 	bic.w	r2, r2, #1
 8008290:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d104      	bne.n	80082a2 <HAL_TIM_PWM_Stop+0xa6>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082a0:	e013      	b.n	80082ca <HAL_TIM_PWM_Stop+0xce>
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2b04      	cmp	r3, #4
 80082a6:	d104      	bne.n	80082b2 <HAL_TIM_PWM_Stop+0xb6>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082b0:	e00b      	b.n	80082ca <HAL_TIM_PWM_Stop+0xce>
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	2b08      	cmp	r3, #8
 80082b6:	d104      	bne.n	80082c2 <HAL_TIM_PWM_Stop+0xc6>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082c0:	e003      	b.n	80082ca <HAL_TIM_PWM_Stop+0xce>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	40010000 	.word	0x40010000
 80082d8:	40010400 	.word	0x40010400

080082dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	f003 0302 	and.w	r3, r3, #2
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	d122      	bne.n	8008338 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	f003 0302 	and.w	r3, r3, #2
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d11b      	bne.n	8008338 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f06f 0202 	mvn.w	r2, #2
 8008308:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	f003 0303 	and.w	r3, r3, #3
 800831a:	2b00      	cmp	r3, #0
 800831c:	d003      	beq.n	8008326 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fa77 	bl	8008812 <HAL_TIM_IC_CaptureCallback>
 8008324:	e005      	b.n	8008332 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 fa69 	bl	80087fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fa7a 	bl	8008826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	f003 0304 	and.w	r3, r3, #4
 8008342:	2b04      	cmp	r3, #4
 8008344:	d122      	bne.n	800838c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	f003 0304 	and.w	r3, r3, #4
 8008350:	2b04      	cmp	r3, #4
 8008352:	d11b      	bne.n	800838c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f06f 0204 	mvn.w	r2, #4
 800835c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2202      	movs	r2, #2
 8008362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	699b      	ldr	r3, [r3, #24]
 800836a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800836e:	2b00      	cmp	r3, #0
 8008370:	d003      	beq.n	800837a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fa4d 	bl	8008812 <HAL_TIM_IC_CaptureCallback>
 8008378:	e005      	b.n	8008386 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fa3f 	bl	80087fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 fa50 	bl	8008826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	f003 0308 	and.w	r3, r3, #8
 8008396:	2b08      	cmp	r3, #8
 8008398:	d122      	bne.n	80083e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	f003 0308 	and.w	r3, r3, #8
 80083a4:	2b08      	cmp	r3, #8
 80083a6:	d11b      	bne.n	80083e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f06f 0208 	mvn.w	r2, #8
 80083b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2204      	movs	r2, #4
 80083b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	69db      	ldr	r3, [r3, #28]
 80083be:	f003 0303 	and.w	r3, r3, #3
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d003      	beq.n	80083ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fa23 	bl	8008812 <HAL_TIM_IC_CaptureCallback>
 80083cc:	e005      	b.n	80083da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fa15 	bl	80087fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fa26 	bl	8008826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	f003 0310 	and.w	r3, r3, #16
 80083ea:	2b10      	cmp	r3, #16
 80083ec:	d122      	bne.n	8008434 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	f003 0310 	and.w	r3, r3, #16
 80083f8:	2b10      	cmp	r3, #16
 80083fa:	d11b      	bne.n	8008434 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f06f 0210 	mvn.w	r2, #16
 8008404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2208      	movs	r2, #8
 800840a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	69db      	ldr	r3, [r3, #28]
 8008412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008416:	2b00      	cmp	r3, #0
 8008418:	d003      	beq.n	8008422 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f9f9 	bl	8008812 <HAL_TIM_IC_CaptureCallback>
 8008420:	e005      	b.n	800842e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f9eb 	bl	80087fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 f9fc 	bl	8008826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	f003 0301 	and.w	r3, r3, #1
 800843e:	2b01      	cmp	r3, #1
 8008440:	d10e      	bne.n	8008460 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	f003 0301 	and.w	r3, r3, #1
 800844c:	2b01      	cmp	r3, #1
 800844e:	d107      	bne.n	8008460 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f06f 0201 	mvn.w	r2, #1
 8008458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f7fb f810 	bl	8003480 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800846a:	2b80      	cmp	r3, #128	; 0x80
 800846c:	d10e      	bne.n	800848c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008478:	2b80      	cmp	r3, #128	; 0x80
 800847a:	d107      	bne.n	800848c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fe1c 	bl	80090c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008496:	2b40      	cmp	r3, #64	; 0x40
 8008498:	d10e      	bne.n	80084b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084a4:	2b40      	cmp	r3, #64	; 0x40
 80084a6:	d107      	bne.n	80084b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f9c1 	bl	800883a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	f003 0320 	and.w	r3, r3, #32
 80084c2:	2b20      	cmp	r3, #32
 80084c4:	d10e      	bne.n	80084e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	f003 0320 	and.w	r3, r3, #32
 80084d0:	2b20      	cmp	r3, #32
 80084d2:	d107      	bne.n	80084e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f06f 0220 	mvn.w	r2, #32
 80084dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fde6 	bl	80090b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084e4:	bf00      	nop
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b086      	sub	sp, #24
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084f8:	2300      	movs	r3, #0
 80084fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008502:	2b01      	cmp	r3, #1
 8008504:	d101      	bne.n	800850a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008506:	2302      	movs	r3, #2
 8008508:	e0ae      	b.n	8008668 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2201      	movs	r2, #1
 800850e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2b0c      	cmp	r3, #12
 8008516:	f200 809f 	bhi.w	8008658 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800851a:	a201      	add	r2, pc, #4	; (adr r2, 8008520 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800851c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008520:	08008555 	.word	0x08008555
 8008524:	08008659 	.word	0x08008659
 8008528:	08008659 	.word	0x08008659
 800852c:	08008659 	.word	0x08008659
 8008530:	08008595 	.word	0x08008595
 8008534:	08008659 	.word	0x08008659
 8008538:	08008659 	.word	0x08008659
 800853c:	08008659 	.word	0x08008659
 8008540:	080085d7 	.word	0x080085d7
 8008544:	08008659 	.word	0x08008659
 8008548:	08008659 	.word	0x08008659
 800854c:	08008659 	.word	0x08008659
 8008550:	08008617 	.word	0x08008617
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68b9      	ldr	r1, [r7, #8]
 800855a:	4618      	mov	r0, r3
 800855c:	f000 fa6a 	bl	8008a34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	699a      	ldr	r2, [r3, #24]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f042 0208 	orr.w	r2, r2, #8
 800856e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	699a      	ldr	r2, [r3, #24]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f022 0204 	bic.w	r2, r2, #4
 800857e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	6999      	ldr	r1, [r3, #24]
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	691a      	ldr	r2, [r3, #16]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	430a      	orrs	r2, r1
 8008590:	619a      	str	r2, [r3, #24]
      break;
 8008592:	e064      	b.n	800865e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	68b9      	ldr	r1, [r7, #8]
 800859a:	4618      	mov	r0, r3
 800859c:	f000 faba 	bl	8008b14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	699a      	ldr	r2, [r3, #24]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	699a      	ldr	r2, [r3, #24]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	6999      	ldr	r1, [r3, #24]
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	021a      	lsls	r2, r3, #8
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	430a      	orrs	r2, r1
 80085d2:	619a      	str	r2, [r3, #24]
      break;
 80085d4:	e043      	b.n	800865e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68b9      	ldr	r1, [r7, #8]
 80085dc:	4618      	mov	r0, r3
 80085de:	f000 fb0f 	bl	8008c00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	69da      	ldr	r2, [r3, #28]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f042 0208 	orr.w	r2, r2, #8
 80085f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	69da      	ldr	r2, [r3, #28]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f022 0204 	bic.w	r2, r2, #4
 8008600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	69d9      	ldr	r1, [r3, #28]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	691a      	ldr	r2, [r3, #16]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	430a      	orrs	r2, r1
 8008612:	61da      	str	r2, [r3, #28]
      break;
 8008614:	e023      	b.n	800865e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	68b9      	ldr	r1, [r7, #8]
 800861c:	4618      	mov	r0, r3
 800861e:	f000 fb63 	bl	8008ce8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	69da      	ldr	r2, [r3, #28]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008630:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	69da      	ldr	r2, [r3, #28]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	69d9      	ldr	r1, [r3, #28]
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	021a      	lsls	r2, r3, #8
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	430a      	orrs	r2, r1
 8008654:	61da      	str	r2, [r3, #28]
      break;
 8008656:	e002      	b.n	800865e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	75fb      	strb	r3, [r7, #23]
      break;
 800865c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008666:	7dfb      	ldrb	r3, [r7, #23]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3718      	adds	r7, #24
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800867a:	2300      	movs	r3, #0
 800867c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008684:	2b01      	cmp	r3, #1
 8008686:	d101      	bne.n	800868c <HAL_TIM_ConfigClockSource+0x1c>
 8008688:	2302      	movs	r3, #2
 800868a:	e0b4      	b.n	80087f6 <HAL_TIM_ConfigClockSource+0x186>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2202      	movs	r2, #2
 8008698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80086aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086c4:	d03e      	beq.n	8008744 <HAL_TIM_ConfigClockSource+0xd4>
 80086c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086ca:	f200 8087 	bhi.w	80087dc <HAL_TIM_ConfigClockSource+0x16c>
 80086ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086d2:	f000 8086 	beq.w	80087e2 <HAL_TIM_ConfigClockSource+0x172>
 80086d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086da:	d87f      	bhi.n	80087dc <HAL_TIM_ConfigClockSource+0x16c>
 80086dc:	2b70      	cmp	r3, #112	; 0x70
 80086de:	d01a      	beq.n	8008716 <HAL_TIM_ConfigClockSource+0xa6>
 80086e0:	2b70      	cmp	r3, #112	; 0x70
 80086e2:	d87b      	bhi.n	80087dc <HAL_TIM_ConfigClockSource+0x16c>
 80086e4:	2b60      	cmp	r3, #96	; 0x60
 80086e6:	d050      	beq.n	800878a <HAL_TIM_ConfigClockSource+0x11a>
 80086e8:	2b60      	cmp	r3, #96	; 0x60
 80086ea:	d877      	bhi.n	80087dc <HAL_TIM_ConfigClockSource+0x16c>
 80086ec:	2b50      	cmp	r3, #80	; 0x50
 80086ee:	d03c      	beq.n	800876a <HAL_TIM_ConfigClockSource+0xfa>
 80086f0:	2b50      	cmp	r3, #80	; 0x50
 80086f2:	d873      	bhi.n	80087dc <HAL_TIM_ConfigClockSource+0x16c>
 80086f4:	2b40      	cmp	r3, #64	; 0x40
 80086f6:	d058      	beq.n	80087aa <HAL_TIM_ConfigClockSource+0x13a>
 80086f8:	2b40      	cmp	r3, #64	; 0x40
 80086fa:	d86f      	bhi.n	80087dc <HAL_TIM_ConfigClockSource+0x16c>
 80086fc:	2b30      	cmp	r3, #48	; 0x30
 80086fe:	d064      	beq.n	80087ca <HAL_TIM_ConfigClockSource+0x15a>
 8008700:	2b30      	cmp	r3, #48	; 0x30
 8008702:	d86b      	bhi.n	80087dc <HAL_TIM_ConfigClockSource+0x16c>
 8008704:	2b20      	cmp	r3, #32
 8008706:	d060      	beq.n	80087ca <HAL_TIM_ConfigClockSource+0x15a>
 8008708:	2b20      	cmp	r3, #32
 800870a:	d867      	bhi.n	80087dc <HAL_TIM_ConfigClockSource+0x16c>
 800870c:	2b00      	cmp	r3, #0
 800870e:	d05c      	beq.n	80087ca <HAL_TIM_ConfigClockSource+0x15a>
 8008710:	2b10      	cmp	r3, #16
 8008712:	d05a      	beq.n	80087ca <HAL_TIM_ConfigClockSource+0x15a>
 8008714:	e062      	b.n	80087dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6818      	ldr	r0, [r3, #0]
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	6899      	ldr	r1, [r3, #8]
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	685a      	ldr	r2, [r3, #4]
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	f000 fbaf 	bl	8008e88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008738:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	609a      	str	r2, [r3, #8]
      break;
 8008742:	e04f      	b.n	80087e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6818      	ldr	r0, [r3, #0]
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	6899      	ldr	r1, [r3, #8]
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	685a      	ldr	r2, [r3, #4]
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	f000 fb98 	bl	8008e88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689a      	ldr	r2, [r3, #8]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008766:	609a      	str	r2, [r3, #8]
      break;
 8008768:	e03c      	b.n	80087e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6818      	ldr	r0, [r3, #0]
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	6859      	ldr	r1, [r3, #4]
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	461a      	mov	r2, r3
 8008778:	f000 fb0c 	bl	8008d94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2150      	movs	r1, #80	; 0x50
 8008782:	4618      	mov	r0, r3
 8008784:	f000 fb65 	bl	8008e52 <TIM_ITRx_SetConfig>
      break;
 8008788:	e02c      	b.n	80087e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6818      	ldr	r0, [r3, #0]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	6859      	ldr	r1, [r3, #4]
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	461a      	mov	r2, r3
 8008798:	f000 fb2b 	bl	8008df2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2160      	movs	r1, #96	; 0x60
 80087a2:	4618      	mov	r0, r3
 80087a4:	f000 fb55 	bl	8008e52 <TIM_ITRx_SetConfig>
      break;
 80087a8:	e01c      	b.n	80087e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6818      	ldr	r0, [r3, #0]
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	6859      	ldr	r1, [r3, #4]
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	461a      	mov	r2, r3
 80087b8:	f000 faec 	bl	8008d94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2140      	movs	r1, #64	; 0x40
 80087c2:	4618      	mov	r0, r3
 80087c4:	f000 fb45 	bl	8008e52 <TIM_ITRx_SetConfig>
      break;
 80087c8:	e00c      	b.n	80087e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4619      	mov	r1, r3
 80087d4:	4610      	mov	r0, r2
 80087d6:	f000 fb3c 	bl	8008e52 <TIM_ITRx_SetConfig>
      break;
 80087da:	e003      	b.n	80087e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	73fb      	strb	r3, [r7, #15]
      break;
 80087e0:	e000      	b.n	80087e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80087e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087fe:	b480      	push	{r7}
 8008800:	b083      	sub	sp, #12
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008806:	bf00      	nop
 8008808:	370c      	adds	r7, #12
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr

08008812 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008812:	b480      	push	{r7}
 8008814:	b083      	sub	sp, #12
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800881a:	bf00      	nop
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008826:	b480      	push	{r7}
 8008828:	b083      	sub	sp, #12
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800882e:	bf00      	nop
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800883a:	b480      	push	{r7}
 800883c:	b083      	sub	sp, #12
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008842:	bf00      	nop
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800884e:	b480      	push	{r7}
 8008850:	b083      	sub	sp, #12
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008856:	bf00      	nop
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b084      	sub	sp, #16
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800886e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	429a      	cmp	r2, r3
 8008878:	d107      	bne.n	800888a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2201      	movs	r2, #1
 800887e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008888:	e02a      	b.n	80088e0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	429a      	cmp	r2, r3
 8008892:	d107      	bne.n	80088a4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2202      	movs	r2, #2
 8008898:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2201      	movs	r2, #1
 800889e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088a2:	e01d      	b.n	80088e0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d107      	bne.n	80088be <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2204      	movs	r2, #4
 80088b2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088bc:	e010      	b.n	80088e0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d107      	bne.n	80088d8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2208      	movs	r2, #8
 80088cc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2201      	movs	r2, #1
 80088d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80088d6:	e003      	b.n	80088e0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f7ff ffb4 	bl	800884e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	771a      	strb	r2, [r3, #28]
}
 80088ec:	bf00      	nop
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a40      	ldr	r2, [pc, #256]	; (8008a08 <TIM_Base_SetConfig+0x114>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d013      	beq.n	8008934 <TIM_Base_SetConfig+0x40>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008912:	d00f      	beq.n	8008934 <TIM_Base_SetConfig+0x40>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a3d      	ldr	r2, [pc, #244]	; (8008a0c <TIM_Base_SetConfig+0x118>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d00b      	beq.n	8008934 <TIM_Base_SetConfig+0x40>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a3c      	ldr	r2, [pc, #240]	; (8008a10 <TIM_Base_SetConfig+0x11c>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d007      	beq.n	8008934 <TIM_Base_SetConfig+0x40>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a3b      	ldr	r2, [pc, #236]	; (8008a14 <TIM_Base_SetConfig+0x120>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d003      	beq.n	8008934 <TIM_Base_SetConfig+0x40>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	4a3a      	ldr	r2, [pc, #232]	; (8008a18 <TIM_Base_SetConfig+0x124>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d108      	bne.n	8008946 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800893a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	4313      	orrs	r3, r2
 8008944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a2f      	ldr	r2, [pc, #188]	; (8008a08 <TIM_Base_SetConfig+0x114>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d02b      	beq.n	80089a6 <TIM_Base_SetConfig+0xb2>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008954:	d027      	beq.n	80089a6 <TIM_Base_SetConfig+0xb2>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a2c      	ldr	r2, [pc, #176]	; (8008a0c <TIM_Base_SetConfig+0x118>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d023      	beq.n	80089a6 <TIM_Base_SetConfig+0xb2>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a2b      	ldr	r2, [pc, #172]	; (8008a10 <TIM_Base_SetConfig+0x11c>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d01f      	beq.n	80089a6 <TIM_Base_SetConfig+0xb2>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a2a      	ldr	r2, [pc, #168]	; (8008a14 <TIM_Base_SetConfig+0x120>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d01b      	beq.n	80089a6 <TIM_Base_SetConfig+0xb2>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4a29      	ldr	r2, [pc, #164]	; (8008a18 <TIM_Base_SetConfig+0x124>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d017      	beq.n	80089a6 <TIM_Base_SetConfig+0xb2>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a28      	ldr	r2, [pc, #160]	; (8008a1c <TIM_Base_SetConfig+0x128>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d013      	beq.n	80089a6 <TIM_Base_SetConfig+0xb2>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a27      	ldr	r2, [pc, #156]	; (8008a20 <TIM_Base_SetConfig+0x12c>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d00f      	beq.n	80089a6 <TIM_Base_SetConfig+0xb2>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a26      	ldr	r2, [pc, #152]	; (8008a24 <TIM_Base_SetConfig+0x130>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d00b      	beq.n	80089a6 <TIM_Base_SetConfig+0xb2>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a25      	ldr	r2, [pc, #148]	; (8008a28 <TIM_Base_SetConfig+0x134>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d007      	beq.n	80089a6 <TIM_Base_SetConfig+0xb2>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a24      	ldr	r2, [pc, #144]	; (8008a2c <TIM_Base_SetConfig+0x138>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d003      	beq.n	80089a6 <TIM_Base_SetConfig+0xb2>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a23      	ldr	r2, [pc, #140]	; (8008a30 <TIM_Base_SetConfig+0x13c>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d108      	bne.n	80089b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	695b      	ldr	r3, [r3, #20]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	689a      	ldr	r2, [r3, #8]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4a0a      	ldr	r2, [pc, #40]	; (8008a08 <TIM_Base_SetConfig+0x114>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d003      	beq.n	80089ec <TIM_Base_SetConfig+0xf8>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	4a0c      	ldr	r2, [pc, #48]	; (8008a18 <TIM_Base_SetConfig+0x124>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d103      	bne.n	80089f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	691a      	ldr	r2, [r3, #16]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	615a      	str	r2, [r3, #20]
}
 80089fa:	bf00      	nop
 80089fc:	3714      	adds	r7, #20
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	40010000 	.word	0x40010000
 8008a0c:	40000400 	.word	0x40000400
 8008a10:	40000800 	.word	0x40000800
 8008a14:	40000c00 	.word	0x40000c00
 8008a18:	40010400 	.word	0x40010400
 8008a1c:	40014000 	.word	0x40014000
 8008a20:	40014400 	.word	0x40014400
 8008a24:	40014800 	.word	0x40014800
 8008a28:	40001800 	.word	0x40001800
 8008a2c:	40001c00 	.word	0x40001c00
 8008a30:	40002000 	.word	0x40002000

08008a34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b087      	sub	sp, #28
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a1b      	ldr	r3, [r3, #32]
 8008a42:	f023 0201 	bic.w	r2, r3, #1
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a1b      	ldr	r3, [r3, #32]
 8008a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	699b      	ldr	r3, [r3, #24]
 8008a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f023 0303 	bic.w	r3, r3, #3
 8008a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68fa      	ldr	r2, [r7, #12]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	f023 0302 	bic.w	r3, r3, #2
 8008a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a20      	ldr	r2, [pc, #128]	; (8008b0c <TIM_OC1_SetConfig+0xd8>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d003      	beq.n	8008a98 <TIM_OC1_SetConfig+0x64>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a1f      	ldr	r2, [pc, #124]	; (8008b10 <TIM_OC1_SetConfig+0xdc>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d10c      	bne.n	8008ab2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	f023 0308 	bic.w	r3, r3, #8
 8008a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	697a      	ldr	r2, [r7, #20]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	f023 0304 	bic.w	r3, r3, #4
 8008ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a15      	ldr	r2, [pc, #84]	; (8008b0c <TIM_OC1_SetConfig+0xd8>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d003      	beq.n	8008ac2 <TIM_OC1_SetConfig+0x8e>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4a14      	ldr	r2, [pc, #80]	; (8008b10 <TIM_OC1_SetConfig+0xdc>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d111      	bne.n	8008ae6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	695b      	ldr	r3, [r3, #20]
 8008ad6:	693a      	ldr	r2, [r7, #16]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	699b      	ldr	r3, [r3, #24]
 8008ae0:	693a      	ldr	r2, [r7, #16]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	685a      	ldr	r2, [r3, #4]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	697a      	ldr	r2, [r7, #20]
 8008afe:	621a      	str	r2, [r3, #32]
}
 8008b00:	bf00      	nop
 8008b02:	371c      	adds	r7, #28
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr
 8008b0c:	40010000 	.word	0x40010000
 8008b10:	40010400 	.word	0x40010400

08008b14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b087      	sub	sp, #28
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	f023 0210 	bic.w	r2, r3, #16
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	699b      	ldr	r3, [r3, #24]
 8008b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	021b      	lsls	r3, r3, #8
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	f023 0320 	bic.w	r3, r3, #32
 8008b5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	011b      	lsls	r3, r3, #4
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a22      	ldr	r2, [pc, #136]	; (8008bf8 <TIM_OC2_SetConfig+0xe4>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d003      	beq.n	8008b7c <TIM_OC2_SetConfig+0x68>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a21      	ldr	r2, [pc, #132]	; (8008bfc <TIM_OC2_SetConfig+0xe8>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d10d      	bne.n	8008b98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	011b      	lsls	r3, r3, #4
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a17      	ldr	r2, [pc, #92]	; (8008bf8 <TIM_OC2_SetConfig+0xe4>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d003      	beq.n	8008ba8 <TIM_OC2_SetConfig+0x94>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a16      	ldr	r2, [pc, #88]	; (8008bfc <TIM_OC2_SetConfig+0xe8>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d113      	bne.n	8008bd0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008bae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	695b      	ldr	r3, [r3, #20]
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	693a      	ldr	r2, [r7, #16]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	685a      	ldr	r2, [r3, #4]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	697a      	ldr	r2, [r7, #20]
 8008be8:	621a      	str	r2, [r3, #32]
}
 8008bea:	bf00      	nop
 8008bec:	371c      	adds	r7, #28
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	40010000 	.word	0x40010000
 8008bfc:	40010400 	.word	0x40010400

08008c00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b087      	sub	sp, #28
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a1b      	ldr	r3, [r3, #32]
 8008c0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a1b      	ldr	r3, [r3, #32]
 8008c1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	69db      	ldr	r3, [r3, #28]
 8008c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f023 0303 	bic.w	r3, r3, #3
 8008c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	68fa      	ldr	r2, [r7, #12]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	021b      	lsls	r3, r3, #8
 8008c50:	697a      	ldr	r2, [r7, #20]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a21      	ldr	r2, [pc, #132]	; (8008ce0 <TIM_OC3_SetConfig+0xe0>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d003      	beq.n	8008c66 <TIM_OC3_SetConfig+0x66>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a20      	ldr	r2, [pc, #128]	; (8008ce4 <TIM_OC3_SetConfig+0xe4>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d10d      	bne.n	8008c82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	021b      	lsls	r3, r3, #8
 8008c74:	697a      	ldr	r2, [r7, #20]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4a16      	ldr	r2, [pc, #88]	; (8008ce0 <TIM_OC3_SetConfig+0xe0>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d003      	beq.n	8008c92 <TIM_OC3_SetConfig+0x92>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4a15      	ldr	r2, [pc, #84]	; (8008ce4 <TIM_OC3_SetConfig+0xe4>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d113      	bne.n	8008cba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	695b      	ldr	r3, [r3, #20]
 8008ca6:	011b      	lsls	r3, r3, #4
 8008ca8:	693a      	ldr	r2, [r7, #16]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	011b      	lsls	r3, r3, #4
 8008cb4:	693a      	ldr	r2, [r7, #16]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	693a      	ldr	r2, [r7, #16]
 8008cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	685a      	ldr	r2, [r3, #4]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	697a      	ldr	r2, [r7, #20]
 8008cd2:	621a      	str	r2, [r3, #32]
}
 8008cd4:	bf00      	nop
 8008cd6:	371c      	adds	r7, #28
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr
 8008ce0:	40010000 	.word	0x40010000
 8008ce4:	40010400 	.word	0x40010400

08008ce8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b087      	sub	sp, #28
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a1b      	ldr	r3, [r3, #32]
 8008cf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a1b      	ldr	r3, [r3, #32]
 8008d02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	69db      	ldr	r3, [r3, #28]
 8008d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	021b      	lsls	r3, r3, #8
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	031b      	lsls	r3, r3, #12
 8008d3a:	693a      	ldr	r2, [r7, #16]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a12      	ldr	r2, [pc, #72]	; (8008d8c <TIM_OC4_SetConfig+0xa4>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d003      	beq.n	8008d50 <TIM_OC4_SetConfig+0x68>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a11      	ldr	r2, [pc, #68]	; (8008d90 <TIM_OC4_SetConfig+0xa8>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d109      	bne.n	8008d64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	695b      	ldr	r3, [r3, #20]
 8008d5c:	019b      	lsls	r3, r3, #6
 8008d5e:	697a      	ldr	r2, [r7, #20]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	697a      	ldr	r2, [r7, #20]
 8008d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	621a      	str	r2, [r3, #32]
}
 8008d7e:	bf00      	nop
 8008d80:	371c      	adds	r7, #28
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	40010000 	.word	0x40010000
 8008d90:	40010400 	.word	0x40010400

08008d94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b087      	sub	sp, #28
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6a1b      	ldr	r3, [r3, #32]
 8008da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6a1b      	ldr	r3, [r3, #32]
 8008daa:	f023 0201 	bic.w	r2, r3, #1
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	011b      	lsls	r3, r3, #4
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	f023 030a 	bic.w	r3, r3, #10
 8008dd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008dd2:	697a      	ldr	r2, [r7, #20]
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	693a      	ldr	r2, [r7, #16]
 8008dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	697a      	ldr	r2, [r7, #20]
 8008de4:	621a      	str	r2, [r3, #32]
}
 8008de6:	bf00      	nop
 8008de8:	371c      	adds	r7, #28
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr

08008df2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008df2:	b480      	push	{r7}
 8008df4:	b087      	sub	sp, #28
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	60f8      	str	r0, [r7, #12]
 8008dfa:	60b9      	str	r1, [r7, #8]
 8008dfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	6a1b      	ldr	r3, [r3, #32]
 8008e02:	f023 0210 	bic.w	r2, r3, #16
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	699b      	ldr	r3, [r3, #24]
 8008e0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6a1b      	ldr	r3, [r3, #32]
 8008e14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	031b      	lsls	r3, r3, #12
 8008e22:	697a      	ldr	r2, [r7, #20]
 8008e24:	4313      	orrs	r3, r2
 8008e26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	011b      	lsls	r3, r3, #4
 8008e34:	693a      	ldr	r2, [r7, #16]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	697a      	ldr	r2, [r7, #20]
 8008e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	693a      	ldr	r2, [r7, #16]
 8008e44:	621a      	str	r2, [r3, #32]
}
 8008e46:	bf00      	nop
 8008e48:	371c      	adds	r7, #28
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr

08008e52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e52:	b480      	push	{r7}
 8008e54:	b085      	sub	sp, #20
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
 8008e5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e6a:	683a      	ldr	r2, [r7, #0]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	f043 0307 	orr.w	r3, r3, #7
 8008e74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	609a      	str	r2, [r3, #8]
}
 8008e7c:	bf00      	nop
 8008e7e:	3714      	adds	r7, #20
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b087      	sub	sp, #28
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
 8008e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ea2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	021a      	lsls	r2, r3, #8
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	431a      	orrs	r2, r3
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	697a      	ldr	r2, [r7, #20]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	697a      	ldr	r2, [r7, #20]
 8008eba:	609a      	str	r2, [r3, #8]
}
 8008ebc:	bf00      	nop
 8008ebe:	371c      	adds	r7, #28
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b087      	sub	sp, #28
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	f003 031f 	and.w	r3, r3, #31
 8008eda:	2201      	movs	r2, #1
 8008edc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6a1a      	ldr	r2, [r3, #32]
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	43db      	mvns	r3, r3
 8008eea:	401a      	ands	r2, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6a1a      	ldr	r2, [r3, #32]
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	f003 031f 	and.w	r3, r3, #31
 8008efa:	6879      	ldr	r1, [r7, #4]
 8008efc:	fa01 f303 	lsl.w	r3, r1, r3
 8008f00:	431a      	orrs	r2, r3
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	621a      	str	r2, [r3, #32]
}
 8008f06:	bf00      	nop
 8008f08:	371c      	adds	r7, #28
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
	...

08008f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d101      	bne.n	8008f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f28:	2302      	movs	r3, #2
 8008f2a:	e05a      	b.n	8008fe2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2202      	movs	r2, #2
 8008f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68fa      	ldr	r2, [r7, #12]
 8008f64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a21      	ldr	r2, [pc, #132]	; (8008ff0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d022      	beq.n	8008fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f78:	d01d      	beq.n	8008fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a1d      	ldr	r2, [pc, #116]	; (8008ff4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d018      	beq.n	8008fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a1b      	ldr	r2, [pc, #108]	; (8008ff8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d013      	beq.n	8008fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a1a      	ldr	r2, [pc, #104]	; (8008ffc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d00e      	beq.n	8008fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a18      	ldr	r2, [pc, #96]	; (8009000 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d009      	beq.n	8008fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a17      	ldr	r2, [pc, #92]	; (8009004 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d004      	beq.n	8008fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a15      	ldr	r2, [pc, #84]	; (8009008 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d10c      	bne.n	8008fd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68ba      	ldr	r2, [r7, #8]
 8008fce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3714      	adds	r7, #20
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	40010000 	.word	0x40010000
 8008ff4:	40000400 	.word	0x40000400
 8008ff8:	40000800 	.word	0x40000800
 8008ffc:	40000c00 	.word	0x40000c00
 8009000:	40010400 	.word	0x40010400
 8009004:	40014000 	.word	0x40014000
 8009008:	40001800 	.word	0x40001800

0800900c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800900c:	b480      	push	{r7}
 800900e:	b085      	sub	sp, #20
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009016:	2300      	movs	r3, #0
 8009018:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009020:	2b01      	cmp	r3, #1
 8009022:	d101      	bne.n	8009028 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009024:	2302      	movs	r3, #2
 8009026:	e03d      	b.n	80090a4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	4313      	orrs	r3, r2
 800903c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	4313      	orrs	r3, r2
 800904a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	4313      	orrs	r3, r2
 8009058:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4313      	orrs	r3, r2
 8009066:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	4313      	orrs	r3, r2
 8009074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	695b      	ldr	r3, [r3, #20]
 8009080:	4313      	orrs	r3, r2
 8009082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	69db      	ldr	r3, [r3, #28]
 800908e:	4313      	orrs	r3, r2
 8009090:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090b8:	bf00      	nop
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090cc:	bf00      	nop
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d101      	bne.n	80090ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	e03f      	b.n	800916a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d106      	bne.n	8009104 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7fa fc6e 	bl	80039e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2224      	movs	r2, #36	; 0x24
 8009108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68da      	ldr	r2, [r3, #12]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800911a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 fe23 	bl	8009d68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	691a      	ldr	r2, [r3, #16]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009130:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	695a      	ldr	r2, [r3, #20]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009140:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68da      	ldr	r2, [r3, #12]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009150:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2220      	movs	r2, #32
 800915c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2220      	movs	r2, #32
 8009164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b08a      	sub	sp, #40	; 0x28
 8009176:	af02      	add	r7, sp, #8
 8009178:	60f8      	str	r0, [r7, #12]
 800917a:	60b9      	str	r1, [r7, #8]
 800917c:	603b      	str	r3, [r7, #0]
 800917e:	4613      	mov	r3, r2
 8009180:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009182:	2300      	movs	r3, #0
 8009184:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800918c:	b2db      	uxtb	r3, r3
 800918e:	2b20      	cmp	r3, #32
 8009190:	d17c      	bne.n	800928c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d002      	beq.n	800919e <HAL_UART_Transmit+0x2c>
 8009198:	88fb      	ldrh	r3, [r7, #6]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d101      	bne.n	80091a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	e075      	b.n	800928e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d101      	bne.n	80091b0 <HAL_UART_Transmit+0x3e>
 80091ac:	2302      	movs	r3, #2
 80091ae:	e06e      	b.n	800928e <HAL_UART_Transmit+0x11c>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2200      	movs	r2, #0
 80091bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2221      	movs	r2, #33	; 0x21
 80091c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80091c6:	f7fb fc21 	bl	8004a0c <HAL_GetTick>
 80091ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	88fa      	ldrh	r2, [r7, #6]
 80091d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	88fa      	ldrh	r2, [r7, #6]
 80091d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091e0:	d108      	bne.n	80091f4 <HAL_UART_Transmit+0x82>
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d104      	bne.n	80091f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80091ea:	2300      	movs	r3, #0
 80091ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	61bb      	str	r3, [r7, #24]
 80091f2:	e003      	b.n	80091fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80091f8:	2300      	movs	r3, #0
 80091fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2200      	movs	r2, #0
 8009200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009204:	e02a      	b.n	800925c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	9300      	str	r3, [sp, #0]
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	2200      	movs	r2, #0
 800920e:	2180      	movs	r1, #128	; 0x80
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f000 fb63 	bl	80098dc <UART_WaitOnFlagUntilTimeout>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d001      	beq.n	8009220 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800921c:	2303      	movs	r3, #3
 800921e:	e036      	b.n	800928e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d10b      	bne.n	800923e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	881b      	ldrh	r3, [r3, #0]
 800922a:	461a      	mov	r2, r3
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009234:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	3302      	adds	r3, #2
 800923a:	61bb      	str	r3, [r7, #24]
 800923c:	e007      	b.n	800924e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	781a      	ldrb	r2, [r3, #0]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	3301      	adds	r3, #1
 800924c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009252:	b29b      	uxth	r3, r3
 8009254:	3b01      	subs	r3, #1
 8009256:	b29a      	uxth	r2, r3
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009260:	b29b      	uxth	r3, r3
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1cf      	bne.n	8009206 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	9300      	str	r3, [sp, #0]
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	2200      	movs	r2, #0
 800926e:	2140      	movs	r1, #64	; 0x40
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f000 fb33 	bl	80098dc <UART_WaitOnFlagUntilTimeout>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d001      	beq.n	8009280 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800927c:	2303      	movs	r3, #3
 800927e:	e006      	b.n	800928e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2220      	movs	r2, #32
 8009284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009288:	2300      	movs	r3, #0
 800928a:	e000      	b.n	800928e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800928c:	2302      	movs	r3, #2
  }
}
 800928e:	4618      	mov	r0, r3
 8009290:	3720      	adds	r7, #32
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009296:	b480      	push	{r7}
 8009298:	b085      	sub	sp, #20
 800929a:	af00      	add	r7, sp, #0
 800929c:	60f8      	str	r0, [r7, #12]
 800929e:	60b9      	str	r1, [r7, #8]
 80092a0:	4613      	mov	r3, r2
 80092a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	2b20      	cmp	r3, #32
 80092ae:	d130      	bne.n	8009312 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d002      	beq.n	80092bc <HAL_UART_Transmit_IT+0x26>
 80092b6:	88fb      	ldrh	r3, [r7, #6]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d101      	bne.n	80092c0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	e029      	b.n	8009314 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d101      	bne.n	80092ce <HAL_UART_Transmit_IT+0x38>
 80092ca:	2302      	movs	r3, #2
 80092cc:	e022      	b.n	8009314 <HAL_UART_Transmit_IT+0x7e>
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2201      	movs	r2, #1
 80092d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	68ba      	ldr	r2, [r7, #8]
 80092da:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	88fa      	ldrh	r2, [r7, #6]
 80092e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	88fa      	ldrh	r2, [r7, #6]
 80092e6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2200      	movs	r2, #0
 80092ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2221      	movs	r2, #33	; 0x21
 80092f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	68da      	ldr	r2, [r3, #12]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800930c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800930e:	2300      	movs	r3, #0
 8009310:	e000      	b.n	8009314 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8009312:	2302      	movs	r3, #2
  }
}
 8009314:	4618      	mov	r0, r3
 8009316:	3714      	adds	r7, #20
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	4613      	mov	r3, r2
 800932c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009334:	b2db      	uxtb	r3, r3
 8009336:	2b20      	cmp	r3, #32
 8009338:	d11d      	bne.n	8009376 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d002      	beq.n	8009346 <HAL_UART_Receive_IT+0x26>
 8009340:	88fb      	ldrh	r3, [r7, #6]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d101      	bne.n	800934a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	e016      	b.n	8009378 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009350:	2b01      	cmp	r3, #1
 8009352:	d101      	bne.n	8009358 <HAL_UART_Receive_IT+0x38>
 8009354:	2302      	movs	r3, #2
 8009356:	e00f      	b.n	8009378 <HAL_UART_Receive_IT+0x58>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2200      	movs	r2, #0
 8009364:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009366:	88fb      	ldrh	r3, [r7, #6]
 8009368:	461a      	mov	r2, r3
 800936a:	68b9      	ldr	r1, [r7, #8]
 800936c:	68f8      	ldr	r0, [r7, #12]
 800936e:	f000 fb23 	bl	80099b8 <UART_Start_Receive_IT>
 8009372:	4603      	mov	r3, r0
 8009374:	e000      	b.n	8009378 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009376:	2302      	movs	r3, #2
  }
}
 8009378:	4618      	mov	r0, r3
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b0ba      	sub	sp, #232	; 0xe8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	695b      	ldr	r3, [r3, #20]
 80093a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80093a6:	2300      	movs	r3, #0
 80093a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80093ac:	2300      	movs	r3, #0
 80093ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80093b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093b6:	f003 030f 	and.w	r3, r3, #15
 80093ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80093be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d10f      	bne.n	80093e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80093c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ca:	f003 0320 	and.w	r3, r3, #32
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d009      	beq.n	80093e6 <HAL_UART_IRQHandler+0x66>
 80093d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093d6:	f003 0320 	and.w	r3, r3, #32
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d003      	beq.n	80093e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fc07 	bl	8009bf2 <UART_Receive_IT>
      return;
 80093e4:	e256      	b.n	8009894 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80093e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	f000 80de 	beq.w	80095ac <HAL_UART_IRQHandler+0x22c>
 80093f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093f4:	f003 0301 	and.w	r3, r3, #1
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d106      	bne.n	800940a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80093fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009400:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009404:	2b00      	cmp	r3, #0
 8009406:	f000 80d1 	beq.w	80095ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800940a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800940e:	f003 0301 	and.w	r3, r3, #1
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00b      	beq.n	800942e <HAL_UART_IRQHandler+0xae>
 8009416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800941a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800941e:	2b00      	cmp	r3, #0
 8009420:	d005      	beq.n	800942e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009426:	f043 0201 	orr.w	r2, r3, #1
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800942e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009432:	f003 0304 	and.w	r3, r3, #4
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00b      	beq.n	8009452 <HAL_UART_IRQHandler+0xd2>
 800943a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800943e:	f003 0301 	and.w	r3, r3, #1
 8009442:	2b00      	cmp	r3, #0
 8009444:	d005      	beq.n	8009452 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800944a:	f043 0202 	orr.w	r2, r3, #2
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009456:	f003 0302 	and.w	r3, r3, #2
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00b      	beq.n	8009476 <HAL_UART_IRQHandler+0xf6>
 800945e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009462:	f003 0301 	and.w	r3, r3, #1
 8009466:	2b00      	cmp	r3, #0
 8009468:	d005      	beq.n	8009476 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946e:	f043 0204 	orr.w	r2, r3, #4
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800947a:	f003 0308 	and.w	r3, r3, #8
 800947e:	2b00      	cmp	r3, #0
 8009480:	d011      	beq.n	80094a6 <HAL_UART_IRQHandler+0x126>
 8009482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009486:	f003 0320 	and.w	r3, r3, #32
 800948a:	2b00      	cmp	r3, #0
 800948c:	d105      	bne.n	800949a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800948e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009492:	f003 0301 	and.w	r3, r3, #1
 8009496:	2b00      	cmp	r3, #0
 8009498:	d005      	beq.n	80094a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800949e:	f043 0208 	orr.w	r2, r3, #8
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	f000 81ed 	beq.w	800988a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80094b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094b4:	f003 0320 	and.w	r3, r3, #32
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d008      	beq.n	80094ce <HAL_UART_IRQHandler+0x14e>
 80094bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094c0:	f003 0320 	and.w	r3, r3, #32
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d002      	beq.n	80094ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 fb92 	bl	8009bf2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	695b      	ldr	r3, [r3, #20]
 80094d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094d8:	2b40      	cmp	r3, #64	; 0x40
 80094da:	bf0c      	ite	eq
 80094dc:	2301      	moveq	r3, #1
 80094de:	2300      	movne	r3, #0
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ea:	f003 0308 	and.w	r3, r3, #8
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d103      	bne.n	80094fa <HAL_UART_IRQHandler+0x17a>
 80094f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d04f      	beq.n	800959a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 fa9a 	bl	8009a34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	695b      	ldr	r3, [r3, #20]
 8009506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800950a:	2b40      	cmp	r3, #64	; 0x40
 800950c:	d141      	bne.n	8009592 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	3314      	adds	r3, #20
 8009514:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009518:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800951c:	e853 3f00 	ldrex	r3, [r3]
 8009520:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009524:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800952c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	3314      	adds	r3, #20
 8009536:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800953a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800953e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009542:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009546:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800954a:	e841 2300 	strex	r3, r2, [r1]
 800954e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009552:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d1d9      	bne.n	800950e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800955e:	2b00      	cmp	r3, #0
 8009560:	d013      	beq.n	800958a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009566:	4a7d      	ldr	r2, [pc, #500]	; (800975c <HAL_UART_IRQHandler+0x3dc>)
 8009568:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800956e:	4618      	mov	r0, r3
 8009570:	f7fb fd04 	bl	8004f7c <HAL_DMA_Abort_IT>
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	d016      	beq.n	80095a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009584:	4610      	mov	r0, r2
 8009586:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009588:	e00e      	b.n	80095a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 f990 	bl	80098b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009590:	e00a      	b.n	80095a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 f98c 	bl	80098b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009598:	e006      	b.n	80095a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 f988 	bl	80098b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80095a6:	e170      	b.n	800988a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095a8:	bf00      	nop
    return;
 80095aa:	e16e      	b.n	800988a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	f040 814a 	bne.w	800984a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80095b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ba:	f003 0310 	and.w	r3, r3, #16
 80095be:	2b00      	cmp	r3, #0
 80095c0:	f000 8143 	beq.w	800984a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80095c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095c8:	f003 0310 	and.w	r3, r3, #16
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f000 813c 	beq.w	800984a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80095d2:	2300      	movs	r3, #0
 80095d4:	60bb      	str	r3, [r7, #8]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	60bb      	str	r3, [r7, #8]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	60bb      	str	r3, [r7, #8]
 80095e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	695b      	ldr	r3, [r3, #20]
 80095ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f2:	2b40      	cmp	r3, #64	; 0x40
 80095f4:	f040 80b4 	bne.w	8009760 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009604:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009608:	2b00      	cmp	r3, #0
 800960a:	f000 8140 	beq.w	800988e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009612:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009616:	429a      	cmp	r2, r3
 8009618:	f080 8139 	bcs.w	800988e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009622:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009628:	69db      	ldr	r3, [r3, #28]
 800962a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800962e:	f000 8088 	beq.w	8009742 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	330c      	adds	r3, #12
 8009638:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009640:	e853 3f00 	ldrex	r3, [r3]
 8009644:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009648:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800964c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009650:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	330c      	adds	r3, #12
 800965a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800965e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009662:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009666:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800966a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800966e:	e841 2300 	strex	r3, r2, [r1]
 8009672:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009676:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800967a:	2b00      	cmp	r3, #0
 800967c:	d1d9      	bne.n	8009632 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	3314      	adds	r3, #20
 8009684:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009688:	e853 3f00 	ldrex	r3, [r3]
 800968c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800968e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009690:	f023 0301 	bic.w	r3, r3, #1
 8009694:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	3314      	adds	r3, #20
 800969e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80096a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80096a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80096aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80096ae:	e841 2300 	strex	r3, r2, [r1]
 80096b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80096b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d1e1      	bne.n	800967e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	3314      	adds	r3, #20
 80096c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096c4:	e853 3f00 	ldrex	r3, [r3]
 80096c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80096ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	3314      	adds	r3, #20
 80096da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80096de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80096e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80096e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80096e6:	e841 2300 	strex	r3, r2, [r1]
 80096ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80096ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1e3      	bne.n	80096ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2220      	movs	r2, #32
 80096f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	330c      	adds	r3, #12
 8009706:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800970a:	e853 3f00 	ldrex	r3, [r3]
 800970e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009712:	f023 0310 	bic.w	r3, r3, #16
 8009716:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	330c      	adds	r3, #12
 8009720:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009724:	65ba      	str	r2, [r7, #88]	; 0x58
 8009726:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009728:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800972a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800972c:	e841 2300 	strex	r3, r2, [r1]
 8009730:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009734:	2b00      	cmp	r3, #0
 8009736:	d1e3      	bne.n	8009700 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973c:	4618      	mov	r0, r3
 800973e:	f7fb fbad 	bl	8004e9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800974a:	b29b      	uxth	r3, r3
 800974c:	1ad3      	subs	r3, r2, r3
 800974e:	b29b      	uxth	r3, r3
 8009750:	4619      	mov	r1, r3
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 f8b6 	bl	80098c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009758:	e099      	b.n	800988e <HAL_UART_IRQHandler+0x50e>
 800975a:	bf00      	nop
 800975c:	08009afb 	.word	0x08009afb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009768:	b29b      	uxth	r3, r3
 800976a:	1ad3      	subs	r3, r2, r3
 800976c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009774:	b29b      	uxth	r3, r3
 8009776:	2b00      	cmp	r3, #0
 8009778:	f000 808b 	beq.w	8009892 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800977c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009780:	2b00      	cmp	r3, #0
 8009782:	f000 8086 	beq.w	8009892 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	330c      	adds	r3, #12
 800978c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009790:	e853 3f00 	ldrex	r3, [r3]
 8009794:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009798:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800979c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	330c      	adds	r3, #12
 80097a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80097aa:	647a      	str	r2, [r7, #68]	; 0x44
 80097ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80097b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097b2:	e841 2300 	strex	r3, r2, [r1]
 80097b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d1e3      	bne.n	8009786 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	3314      	adds	r3, #20
 80097c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c8:	e853 3f00 	ldrex	r3, [r3]
 80097cc:	623b      	str	r3, [r7, #32]
   return(result);
 80097ce:	6a3b      	ldr	r3, [r7, #32]
 80097d0:	f023 0301 	bic.w	r3, r3, #1
 80097d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	3314      	adds	r3, #20
 80097de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80097e2:	633a      	str	r2, [r7, #48]	; 0x30
 80097e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097ea:	e841 2300 	strex	r3, r2, [r1]
 80097ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d1e3      	bne.n	80097be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2220      	movs	r2, #32
 80097fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	330c      	adds	r3, #12
 800980a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	e853 3f00 	ldrex	r3, [r3]
 8009812:	60fb      	str	r3, [r7, #12]
   return(result);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f023 0310 	bic.w	r3, r3, #16
 800981a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	330c      	adds	r3, #12
 8009824:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009828:	61fa      	str	r2, [r7, #28]
 800982a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800982c:	69b9      	ldr	r1, [r7, #24]
 800982e:	69fa      	ldr	r2, [r7, #28]
 8009830:	e841 2300 	strex	r3, r2, [r1]
 8009834:	617b      	str	r3, [r7, #20]
   return(result);
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d1e3      	bne.n	8009804 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800983c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009840:	4619      	mov	r1, r3
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 f83e 	bl	80098c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009848:	e023      	b.n	8009892 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800984a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800984e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009852:	2b00      	cmp	r3, #0
 8009854:	d009      	beq.n	800986a <HAL_UART_IRQHandler+0x4ea>
 8009856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800985a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800985e:	2b00      	cmp	r3, #0
 8009860:	d003      	beq.n	800986a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 f95d 	bl	8009b22 <UART_Transmit_IT>
    return;
 8009868:	e014      	b.n	8009894 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800986a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800986e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00e      	beq.n	8009894 <HAL_UART_IRQHandler+0x514>
 8009876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800987a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800987e:	2b00      	cmp	r3, #0
 8009880:	d008      	beq.n	8009894 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 f99d 	bl	8009bc2 <UART_EndTransmit_IT>
    return;
 8009888:	e004      	b.n	8009894 <HAL_UART_IRQHandler+0x514>
    return;
 800988a:	bf00      	nop
 800988c:	e002      	b.n	8009894 <HAL_UART_IRQHandler+0x514>
      return;
 800988e:	bf00      	nop
 8009890:	e000      	b.n	8009894 <HAL_UART_IRQHandler+0x514>
      return;
 8009892:	bf00      	nop
  }
}
 8009894:	37e8      	adds	r7, #232	; 0xe8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop

0800989c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80098a4:	bf00      	nop
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80098b8:	bf00      	nop
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	460b      	mov	r3, r1
 80098ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80098d0:	bf00      	nop
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b090      	sub	sp, #64	; 0x40
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	603b      	str	r3, [r7, #0]
 80098e8:	4613      	mov	r3, r2
 80098ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098ec:	e050      	b.n	8009990 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098f4:	d04c      	beq.n	8009990 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80098f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d007      	beq.n	800990c <UART_WaitOnFlagUntilTimeout+0x30>
 80098fc:	f7fb f886 	bl	8004a0c <HAL_GetTick>
 8009900:	4602      	mov	r2, r0
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	1ad3      	subs	r3, r2, r3
 8009906:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009908:	429a      	cmp	r2, r3
 800990a:	d241      	bcs.n	8009990 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	330c      	adds	r3, #12
 8009912:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009916:	e853 3f00 	ldrex	r3, [r3]
 800991a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800991c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009922:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	330c      	adds	r3, #12
 800992a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800992c:	637a      	str	r2, [r7, #52]	; 0x34
 800992e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009930:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009932:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009934:	e841 2300 	strex	r3, r2, [r1]
 8009938:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800993a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993c:	2b00      	cmp	r3, #0
 800993e:	d1e5      	bne.n	800990c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	3314      	adds	r3, #20
 8009946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	e853 3f00 	ldrex	r3, [r3]
 800994e:	613b      	str	r3, [r7, #16]
   return(result);
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	f023 0301 	bic.w	r3, r3, #1
 8009956:	63bb      	str	r3, [r7, #56]	; 0x38
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	3314      	adds	r3, #20
 800995e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009960:	623a      	str	r2, [r7, #32]
 8009962:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009964:	69f9      	ldr	r1, [r7, #28]
 8009966:	6a3a      	ldr	r2, [r7, #32]
 8009968:	e841 2300 	strex	r3, r2, [r1]
 800996c:	61bb      	str	r3, [r7, #24]
   return(result);
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d1e5      	bne.n	8009940 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2220      	movs	r2, #32
 8009978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2220      	movs	r2, #32
 8009980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2200      	movs	r2, #0
 8009988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800998c:	2303      	movs	r3, #3
 800998e:	e00f      	b.n	80099b0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	4013      	ands	r3, r2
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	429a      	cmp	r2, r3
 800999e:	bf0c      	ite	eq
 80099a0:	2301      	moveq	r3, #1
 80099a2:	2300      	movne	r3, #0
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	461a      	mov	r2, r3
 80099a8:	79fb      	ldrb	r3, [r7, #7]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d09f      	beq.n	80098ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80099ae:	2300      	movs	r3, #0
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3740      	adds	r7, #64	; 0x40
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	4613      	mov	r3, r2
 80099c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	68ba      	ldr	r2, [r7, #8]
 80099ca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	88fa      	ldrh	r2, [r7, #6]
 80099d0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	88fa      	ldrh	r2, [r7, #6]
 80099d6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2200      	movs	r2, #0
 80099dc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2222      	movs	r2, #34	; 0x22
 80099e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2200      	movs	r2, #0
 80099ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d007      	beq.n	8009a06 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	68da      	ldr	r2, [r3, #12]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a04:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	695a      	ldr	r2, [r3, #20]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f042 0201 	orr.w	r2, r2, #1
 8009a14:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	68da      	ldr	r2, [r3, #12]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f042 0220 	orr.w	r2, r2, #32
 8009a24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009a26:	2300      	movs	r3, #0
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b095      	sub	sp, #84	; 0x54
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	330c      	adds	r3, #12
 8009a42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a46:	e853 3f00 	ldrex	r3, [r3]
 8009a4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	330c      	adds	r3, #12
 8009a5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a5c:	643a      	str	r2, [r7, #64]	; 0x40
 8009a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a64:	e841 2300 	strex	r3, r2, [r1]
 8009a68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d1e5      	bne.n	8009a3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	3314      	adds	r3, #20
 8009a76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a78:	6a3b      	ldr	r3, [r7, #32]
 8009a7a:	e853 3f00 	ldrex	r3, [r3]
 8009a7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	f023 0301 	bic.w	r3, r3, #1
 8009a86:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3314      	adds	r3, #20
 8009a8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a98:	e841 2300 	strex	r3, r2, [r1]
 8009a9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1e5      	bne.n	8009a70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d119      	bne.n	8009ae0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	330c      	adds	r3, #12
 8009ab2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	e853 3f00 	ldrex	r3, [r3]
 8009aba:	60bb      	str	r3, [r7, #8]
   return(result);
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	f023 0310 	bic.w	r3, r3, #16
 8009ac2:	647b      	str	r3, [r7, #68]	; 0x44
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	330c      	adds	r3, #12
 8009aca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009acc:	61ba      	str	r2, [r7, #24]
 8009ace:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad0:	6979      	ldr	r1, [r7, #20]
 8009ad2:	69ba      	ldr	r2, [r7, #24]
 8009ad4:	e841 2300 	strex	r3, r2, [r1]
 8009ad8:	613b      	str	r3, [r7, #16]
   return(result);
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d1e5      	bne.n	8009aac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2220      	movs	r2, #32
 8009ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2200      	movs	r2, #0
 8009aec:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009aee:	bf00      	nop
 8009af0:	3754      	adds	r7, #84	; 0x54
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr

08009afa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009afa:	b580      	push	{r7, lr}
 8009afc:	b084      	sub	sp, #16
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f7ff fecb 	bl	80098b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b1a:	bf00      	nop
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009b22:	b480      	push	{r7}
 8009b24:	b085      	sub	sp, #20
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	2b21      	cmp	r3, #33	; 0x21
 8009b34:	d13e      	bne.n	8009bb4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b3e:	d114      	bne.n	8009b6a <UART_Transmit_IT+0x48>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	691b      	ldr	r3, [r3, #16]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d110      	bne.n	8009b6a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6a1b      	ldr	r3, [r3, #32]
 8009b4c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	881b      	ldrh	r3, [r3, #0]
 8009b52:	461a      	mov	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b5c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a1b      	ldr	r3, [r3, #32]
 8009b62:	1c9a      	adds	r2, r3, #2
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	621a      	str	r2, [r3, #32]
 8009b68:	e008      	b.n	8009b7c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a1b      	ldr	r3, [r3, #32]
 8009b6e:	1c59      	adds	r1, r3, #1
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	6211      	str	r1, [r2, #32]
 8009b74:	781a      	ldrb	r2, [r3, #0]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	3b01      	subs	r3, #1
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	4619      	mov	r1, r3
 8009b8a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d10f      	bne.n	8009bb0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	68da      	ldr	r2, [r3, #12]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b9e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	68da      	ldr	r2, [r3, #12]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	e000      	b.n	8009bb6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009bb4:	2302      	movs	r3, #2
  }
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3714      	adds	r7, #20
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr

08009bc2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b082      	sub	sp, #8
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	68da      	ldr	r2, [r3, #12]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bd8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2220      	movs	r2, #32
 8009bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f7ff fe5a 	bl	800989c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3708      	adds	r7, #8
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009bf2:	b580      	push	{r7, lr}
 8009bf4:	b08c      	sub	sp, #48	; 0x30
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	2b22      	cmp	r3, #34	; 0x22
 8009c04:	f040 80ab 	bne.w	8009d5e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c10:	d117      	bne.n	8009c42 <UART_Receive_IT+0x50>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	691b      	ldr	r3, [r3, #16]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d113      	bne.n	8009c42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c22:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c30:	b29a      	uxth	r2, r3
 8009c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c3a:	1c9a      	adds	r2, r3, #2
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	629a      	str	r2, [r3, #40]	; 0x28
 8009c40:	e026      	b.n	8009c90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c46:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c54:	d007      	beq.n	8009c66 <UART_Receive_IT+0x74>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d10a      	bne.n	8009c74 <UART_Receive_IT+0x82>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	691b      	ldr	r3, [r3, #16]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d106      	bne.n	8009c74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	b2da      	uxtb	r2, r3
 8009c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c70:	701a      	strb	r2, [r3, #0]
 8009c72:	e008      	b.n	8009c86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c80:	b2da      	uxtb	r2, r3
 8009c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c8a:	1c5a      	adds	r2, r3, #1
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	3b01      	subs	r3, #1
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d15a      	bne.n	8009d5a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	68da      	ldr	r2, [r3, #12]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f022 0220 	bic.w	r2, r2, #32
 8009cb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	68da      	ldr	r2, [r3, #12]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009cc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	695a      	ldr	r2, [r3, #20]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f022 0201 	bic.w	r2, r2, #1
 8009cd2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2220      	movs	r2, #32
 8009cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d135      	bne.n	8009d50 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	330c      	adds	r3, #12
 8009cf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	e853 3f00 	ldrex	r3, [r3]
 8009cf8:	613b      	str	r3, [r7, #16]
   return(result);
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	f023 0310 	bic.w	r3, r3, #16
 8009d00:	627b      	str	r3, [r7, #36]	; 0x24
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	330c      	adds	r3, #12
 8009d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d0a:	623a      	str	r2, [r7, #32]
 8009d0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d0e:	69f9      	ldr	r1, [r7, #28]
 8009d10:	6a3a      	ldr	r2, [r7, #32]
 8009d12:	e841 2300 	strex	r3, r2, [r1]
 8009d16:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d1e5      	bne.n	8009cea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f003 0310 	and.w	r3, r3, #16
 8009d28:	2b10      	cmp	r3, #16
 8009d2a:	d10a      	bne.n	8009d42 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	60fb      	str	r3, [r7, #12]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	60fb      	str	r3, [r7, #12]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	60fb      	str	r3, [r7, #12]
 8009d40:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009d46:	4619      	mov	r1, r3
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f7ff fdbb 	bl	80098c4 <HAL_UARTEx_RxEventCallback>
 8009d4e:	e002      	b.n	8009d56 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f7f9 fbaf 	bl	80034b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009d56:	2300      	movs	r3, #0
 8009d58:	e002      	b.n	8009d60 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	e000      	b.n	8009d60 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009d5e:	2302      	movs	r3, #2
  }
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3730      	adds	r7, #48	; 0x30
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d6c:	b0c0      	sub	sp, #256	; 0x100
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	691b      	ldr	r3, [r3, #16]
 8009d7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d84:	68d9      	ldr	r1, [r3, #12]
 8009d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	ea40 0301 	orr.w	r3, r0, r1
 8009d90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d96:	689a      	ldr	r2, [r3, #8]
 8009d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	431a      	orrs	r2, r3
 8009da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009da4:	695b      	ldr	r3, [r3, #20]
 8009da6:	431a      	orrs	r2, r3
 8009da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dac:	69db      	ldr	r3, [r3, #28]
 8009dae:	4313      	orrs	r3, r2
 8009db0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009dc0:	f021 010c 	bic.w	r1, r1, #12
 8009dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009dce:	430b      	orrs	r3, r1
 8009dd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	695b      	ldr	r3, [r3, #20]
 8009dda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009de2:	6999      	ldr	r1, [r3, #24]
 8009de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	ea40 0301 	orr.w	r3, r0, r1
 8009dee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	4b8f      	ldr	r3, [pc, #572]	; (800a034 <UART_SetConfig+0x2cc>)
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d005      	beq.n	8009e08 <UART_SetConfig+0xa0>
 8009dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	4b8d      	ldr	r3, [pc, #564]	; (800a038 <UART_SetConfig+0x2d0>)
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d104      	bne.n	8009e12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009e08:	f7fd fd88 	bl	800791c <HAL_RCC_GetPCLK2Freq>
 8009e0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009e10:	e003      	b.n	8009e1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009e12:	f7fd fd6f 	bl	80078f4 <HAL_RCC_GetPCLK1Freq>
 8009e16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e1e:	69db      	ldr	r3, [r3, #28]
 8009e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e24:	f040 810c 	bne.w	800a040 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009e32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009e36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009e3a:	4622      	mov	r2, r4
 8009e3c:	462b      	mov	r3, r5
 8009e3e:	1891      	adds	r1, r2, r2
 8009e40:	65b9      	str	r1, [r7, #88]	; 0x58
 8009e42:	415b      	adcs	r3, r3
 8009e44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009e4a:	4621      	mov	r1, r4
 8009e4c:	eb12 0801 	adds.w	r8, r2, r1
 8009e50:	4629      	mov	r1, r5
 8009e52:	eb43 0901 	adc.w	r9, r3, r1
 8009e56:	f04f 0200 	mov.w	r2, #0
 8009e5a:	f04f 0300 	mov.w	r3, #0
 8009e5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009e62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009e66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009e6a:	4690      	mov	r8, r2
 8009e6c:	4699      	mov	r9, r3
 8009e6e:	4623      	mov	r3, r4
 8009e70:	eb18 0303 	adds.w	r3, r8, r3
 8009e74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009e78:	462b      	mov	r3, r5
 8009e7a:	eb49 0303 	adc.w	r3, r9, r3
 8009e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009e92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009e96:	460b      	mov	r3, r1
 8009e98:	18db      	adds	r3, r3, r3
 8009e9a:	653b      	str	r3, [r7, #80]	; 0x50
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	eb42 0303 	adc.w	r3, r2, r3
 8009ea2:	657b      	str	r3, [r7, #84]	; 0x54
 8009ea4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009ea8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009eac:	f7f6 fcee 	bl	800088c <__aeabi_uldivmod>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	4b61      	ldr	r3, [pc, #388]	; (800a03c <UART_SetConfig+0x2d4>)
 8009eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8009eba:	095b      	lsrs	r3, r3, #5
 8009ebc:	011c      	lsls	r4, r3, #4
 8009ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ec8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009ecc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009ed0:	4642      	mov	r2, r8
 8009ed2:	464b      	mov	r3, r9
 8009ed4:	1891      	adds	r1, r2, r2
 8009ed6:	64b9      	str	r1, [r7, #72]	; 0x48
 8009ed8:	415b      	adcs	r3, r3
 8009eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009edc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009ee0:	4641      	mov	r1, r8
 8009ee2:	eb12 0a01 	adds.w	sl, r2, r1
 8009ee6:	4649      	mov	r1, r9
 8009ee8:	eb43 0b01 	adc.w	fp, r3, r1
 8009eec:	f04f 0200 	mov.w	r2, #0
 8009ef0:	f04f 0300 	mov.w	r3, #0
 8009ef4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009ef8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009efc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f00:	4692      	mov	sl, r2
 8009f02:	469b      	mov	fp, r3
 8009f04:	4643      	mov	r3, r8
 8009f06:	eb1a 0303 	adds.w	r3, sl, r3
 8009f0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f0e:	464b      	mov	r3, r9
 8009f10:	eb4b 0303 	adc.w	r3, fp, r3
 8009f14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009f28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	18db      	adds	r3, r3, r3
 8009f30:	643b      	str	r3, [r7, #64]	; 0x40
 8009f32:	4613      	mov	r3, r2
 8009f34:	eb42 0303 	adc.w	r3, r2, r3
 8009f38:	647b      	str	r3, [r7, #68]	; 0x44
 8009f3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009f3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009f42:	f7f6 fca3 	bl	800088c <__aeabi_uldivmod>
 8009f46:	4602      	mov	r2, r0
 8009f48:	460b      	mov	r3, r1
 8009f4a:	4611      	mov	r1, r2
 8009f4c:	4b3b      	ldr	r3, [pc, #236]	; (800a03c <UART_SetConfig+0x2d4>)
 8009f4e:	fba3 2301 	umull	r2, r3, r3, r1
 8009f52:	095b      	lsrs	r3, r3, #5
 8009f54:	2264      	movs	r2, #100	; 0x64
 8009f56:	fb02 f303 	mul.w	r3, r2, r3
 8009f5a:	1acb      	subs	r3, r1, r3
 8009f5c:	00db      	lsls	r3, r3, #3
 8009f5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009f62:	4b36      	ldr	r3, [pc, #216]	; (800a03c <UART_SetConfig+0x2d4>)
 8009f64:	fba3 2302 	umull	r2, r3, r3, r2
 8009f68:	095b      	lsrs	r3, r3, #5
 8009f6a:	005b      	lsls	r3, r3, #1
 8009f6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009f70:	441c      	add	r4, r3
 8009f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f76:	2200      	movs	r2, #0
 8009f78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009f80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009f84:	4642      	mov	r2, r8
 8009f86:	464b      	mov	r3, r9
 8009f88:	1891      	adds	r1, r2, r2
 8009f8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8009f8c:	415b      	adcs	r3, r3
 8009f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009f94:	4641      	mov	r1, r8
 8009f96:	1851      	adds	r1, r2, r1
 8009f98:	6339      	str	r1, [r7, #48]	; 0x30
 8009f9a:	4649      	mov	r1, r9
 8009f9c:	414b      	adcs	r3, r1
 8009f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8009fa0:	f04f 0200 	mov.w	r2, #0
 8009fa4:	f04f 0300 	mov.w	r3, #0
 8009fa8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009fac:	4659      	mov	r1, fp
 8009fae:	00cb      	lsls	r3, r1, #3
 8009fb0:	4651      	mov	r1, sl
 8009fb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009fb6:	4651      	mov	r1, sl
 8009fb8:	00ca      	lsls	r2, r1, #3
 8009fba:	4610      	mov	r0, r2
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	4642      	mov	r2, r8
 8009fc2:	189b      	adds	r3, r3, r2
 8009fc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009fc8:	464b      	mov	r3, r9
 8009fca:	460a      	mov	r2, r1
 8009fcc:	eb42 0303 	adc.w	r3, r2, r3
 8009fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009fe0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009fe4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009fe8:	460b      	mov	r3, r1
 8009fea:	18db      	adds	r3, r3, r3
 8009fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8009fee:	4613      	mov	r3, r2
 8009ff0:	eb42 0303 	adc.w	r3, r2, r3
 8009ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ff6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ffa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009ffe:	f7f6 fc45 	bl	800088c <__aeabi_uldivmod>
 800a002:	4602      	mov	r2, r0
 800a004:	460b      	mov	r3, r1
 800a006:	4b0d      	ldr	r3, [pc, #52]	; (800a03c <UART_SetConfig+0x2d4>)
 800a008:	fba3 1302 	umull	r1, r3, r3, r2
 800a00c:	095b      	lsrs	r3, r3, #5
 800a00e:	2164      	movs	r1, #100	; 0x64
 800a010:	fb01 f303 	mul.w	r3, r1, r3
 800a014:	1ad3      	subs	r3, r2, r3
 800a016:	00db      	lsls	r3, r3, #3
 800a018:	3332      	adds	r3, #50	; 0x32
 800a01a:	4a08      	ldr	r2, [pc, #32]	; (800a03c <UART_SetConfig+0x2d4>)
 800a01c:	fba2 2303 	umull	r2, r3, r2, r3
 800a020:	095b      	lsrs	r3, r3, #5
 800a022:	f003 0207 	and.w	r2, r3, #7
 800a026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4422      	add	r2, r4
 800a02e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a030:	e105      	b.n	800a23e <UART_SetConfig+0x4d6>
 800a032:	bf00      	nop
 800a034:	40011000 	.word	0x40011000
 800a038:	40011400 	.word	0x40011400
 800a03c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a044:	2200      	movs	r2, #0
 800a046:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a04a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a04e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a052:	4642      	mov	r2, r8
 800a054:	464b      	mov	r3, r9
 800a056:	1891      	adds	r1, r2, r2
 800a058:	6239      	str	r1, [r7, #32]
 800a05a:	415b      	adcs	r3, r3
 800a05c:	627b      	str	r3, [r7, #36]	; 0x24
 800a05e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a062:	4641      	mov	r1, r8
 800a064:	1854      	adds	r4, r2, r1
 800a066:	4649      	mov	r1, r9
 800a068:	eb43 0501 	adc.w	r5, r3, r1
 800a06c:	f04f 0200 	mov.w	r2, #0
 800a070:	f04f 0300 	mov.w	r3, #0
 800a074:	00eb      	lsls	r3, r5, #3
 800a076:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a07a:	00e2      	lsls	r2, r4, #3
 800a07c:	4614      	mov	r4, r2
 800a07e:	461d      	mov	r5, r3
 800a080:	4643      	mov	r3, r8
 800a082:	18e3      	adds	r3, r4, r3
 800a084:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a088:	464b      	mov	r3, r9
 800a08a:	eb45 0303 	adc.w	r3, r5, r3
 800a08e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	2200      	movs	r2, #0
 800a09a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a09e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a0a2:	f04f 0200 	mov.w	r2, #0
 800a0a6:	f04f 0300 	mov.w	r3, #0
 800a0aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a0ae:	4629      	mov	r1, r5
 800a0b0:	008b      	lsls	r3, r1, #2
 800a0b2:	4621      	mov	r1, r4
 800a0b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0b8:	4621      	mov	r1, r4
 800a0ba:	008a      	lsls	r2, r1, #2
 800a0bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a0c0:	f7f6 fbe4 	bl	800088c <__aeabi_uldivmod>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	4b60      	ldr	r3, [pc, #384]	; (800a24c <UART_SetConfig+0x4e4>)
 800a0ca:	fba3 2302 	umull	r2, r3, r3, r2
 800a0ce:	095b      	lsrs	r3, r3, #5
 800a0d0:	011c      	lsls	r4, r3, #4
 800a0d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a0dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a0e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a0e4:	4642      	mov	r2, r8
 800a0e6:	464b      	mov	r3, r9
 800a0e8:	1891      	adds	r1, r2, r2
 800a0ea:	61b9      	str	r1, [r7, #24]
 800a0ec:	415b      	adcs	r3, r3
 800a0ee:	61fb      	str	r3, [r7, #28]
 800a0f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a0f4:	4641      	mov	r1, r8
 800a0f6:	1851      	adds	r1, r2, r1
 800a0f8:	6139      	str	r1, [r7, #16]
 800a0fa:	4649      	mov	r1, r9
 800a0fc:	414b      	adcs	r3, r1
 800a0fe:	617b      	str	r3, [r7, #20]
 800a100:	f04f 0200 	mov.w	r2, #0
 800a104:	f04f 0300 	mov.w	r3, #0
 800a108:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a10c:	4659      	mov	r1, fp
 800a10e:	00cb      	lsls	r3, r1, #3
 800a110:	4651      	mov	r1, sl
 800a112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a116:	4651      	mov	r1, sl
 800a118:	00ca      	lsls	r2, r1, #3
 800a11a:	4610      	mov	r0, r2
 800a11c:	4619      	mov	r1, r3
 800a11e:	4603      	mov	r3, r0
 800a120:	4642      	mov	r2, r8
 800a122:	189b      	adds	r3, r3, r2
 800a124:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a128:	464b      	mov	r3, r9
 800a12a:	460a      	mov	r2, r1
 800a12c:	eb42 0303 	adc.w	r3, r2, r3
 800a130:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	67bb      	str	r3, [r7, #120]	; 0x78
 800a13e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a140:	f04f 0200 	mov.w	r2, #0
 800a144:	f04f 0300 	mov.w	r3, #0
 800a148:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a14c:	4649      	mov	r1, r9
 800a14e:	008b      	lsls	r3, r1, #2
 800a150:	4641      	mov	r1, r8
 800a152:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a156:	4641      	mov	r1, r8
 800a158:	008a      	lsls	r2, r1, #2
 800a15a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a15e:	f7f6 fb95 	bl	800088c <__aeabi_uldivmod>
 800a162:	4602      	mov	r2, r0
 800a164:	460b      	mov	r3, r1
 800a166:	4b39      	ldr	r3, [pc, #228]	; (800a24c <UART_SetConfig+0x4e4>)
 800a168:	fba3 1302 	umull	r1, r3, r3, r2
 800a16c:	095b      	lsrs	r3, r3, #5
 800a16e:	2164      	movs	r1, #100	; 0x64
 800a170:	fb01 f303 	mul.w	r3, r1, r3
 800a174:	1ad3      	subs	r3, r2, r3
 800a176:	011b      	lsls	r3, r3, #4
 800a178:	3332      	adds	r3, #50	; 0x32
 800a17a:	4a34      	ldr	r2, [pc, #208]	; (800a24c <UART_SetConfig+0x4e4>)
 800a17c:	fba2 2303 	umull	r2, r3, r2, r3
 800a180:	095b      	lsrs	r3, r3, #5
 800a182:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a186:	441c      	add	r4, r3
 800a188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a18c:	2200      	movs	r2, #0
 800a18e:	673b      	str	r3, [r7, #112]	; 0x70
 800a190:	677a      	str	r2, [r7, #116]	; 0x74
 800a192:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a196:	4642      	mov	r2, r8
 800a198:	464b      	mov	r3, r9
 800a19a:	1891      	adds	r1, r2, r2
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	415b      	adcs	r3, r3
 800a1a0:	60fb      	str	r3, [r7, #12]
 800a1a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a1a6:	4641      	mov	r1, r8
 800a1a8:	1851      	adds	r1, r2, r1
 800a1aa:	6039      	str	r1, [r7, #0]
 800a1ac:	4649      	mov	r1, r9
 800a1ae:	414b      	adcs	r3, r1
 800a1b0:	607b      	str	r3, [r7, #4]
 800a1b2:	f04f 0200 	mov.w	r2, #0
 800a1b6:	f04f 0300 	mov.w	r3, #0
 800a1ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a1be:	4659      	mov	r1, fp
 800a1c0:	00cb      	lsls	r3, r1, #3
 800a1c2:	4651      	mov	r1, sl
 800a1c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1c8:	4651      	mov	r1, sl
 800a1ca:	00ca      	lsls	r2, r1, #3
 800a1cc:	4610      	mov	r0, r2
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	4642      	mov	r2, r8
 800a1d4:	189b      	adds	r3, r3, r2
 800a1d6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a1d8:	464b      	mov	r3, r9
 800a1da:	460a      	mov	r2, r1
 800a1dc:	eb42 0303 	adc.w	r3, r2, r3
 800a1e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a1e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	663b      	str	r3, [r7, #96]	; 0x60
 800a1ec:	667a      	str	r2, [r7, #100]	; 0x64
 800a1ee:	f04f 0200 	mov.w	r2, #0
 800a1f2:	f04f 0300 	mov.w	r3, #0
 800a1f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a1fa:	4649      	mov	r1, r9
 800a1fc:	008b      	lsls	r3, r1, #2
 800a1fe:	4641      	mov	r1, r8
 800a200:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a204:	4641      	mov	r1, r8
 800a206:	008a      	lsls	r2, r1, #2
 800a208:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a20c:	f7f6 fb3e 	bl	800088c <__aeabi_uldivmod>
 800a210:	4602      	mov	r2, r0
 800a212:	460b      	mov	r3, r1
 800a214:	4b0d      	ldr	r3, [pc, #52]	; (800a24c <UART_SetConfig+0x4e4>)
 800a216:	fba3 1302 	umull	r1, r3, r3, r2
 800a21a:	095b      	lsrs	r3, r3, #5
 800a21c:	2164      	movs	r1, #100	; 0x64
 800a21e:	fb01 f303 	mul.w	r3, r1, r3
 800a222:	1ad3      	subs	r3, r2, r3
 800a224:	011b      	lsls	r3, r3, #4
 800a226:	3332      	adds	r3, #50	; 0x32
 800a228:	4a08      	ldr	r2, [pc, #32]	; (800a24c <UART_SetConfig+0x4e4>)
 800a22a:	fba2 2303 	umull	r2, r3, r2, r3
 800a22e:	095b      	lsrs	r3, r3, #5
 800a230:	f003 020f 	and.w	r2, r3, #15
 800a234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4422      	add	r2, r4
 800a23c:	609a      	str	r2, [r3, #8]
}
 800a23e:	bf00      	nop
 800a240:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a244:	46bd      	mov	sp, r7
 800a246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a24a:	bf00      	nop
 800a24c:	51eb851f 	.word	0x51eb851f

0800a250 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a250:	b084      	sub	sp, #16
 800a252:	b580      	push	{r7, lr}
 800a254:	b084      	sub	sp, #16
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
 800a25a:	f107 001c 	add.w	r0, r7, #28
 800a25e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a264:	2b01      	cmp	r3, #1
 800a266:	d122      	bne.n	800a2ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a26c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a27c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a292:	2b01      	cmp	r3, #1
 800a294:	d105      	bne.n	800a2a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 f9c0 	bl	800a628 <USB_CoreReset>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	73fb      	strb	r3, [r7, #15]
 800a2ac:	e01a      	b.n	800a2e4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 f9b4 	bl	800a628 <USB_CoreReset>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a2c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d106      	bne.n	800a2d8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	639a      	str	r2, [r3, #56]	; 0x38
 800a2d6:	e005      	b.n	800a2e4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d10b      	bne.n	800a302 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	f043 0206 	orr.w	r2, r3, #6
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	f043 0220 	orr.w	r2, r3, #32
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a302:	7bfb      	ldrb	r3, [r7, #15]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3710      	adds	r7, #16
 800a308:	46bd      	mov	sp, r7
 800a30a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a30e:	b004      	add	sp, #16
 800a310:	4770      	bx	lr

0800a312 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a312:	b480      	push	{r7}
 800a314:	b083      	sub	sp, #12
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	689b      	ldr	r3, [r3, #8]
 800a31e:	f043 0201 	orr.w	r2, r3, #1
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	f023 0201 	bic.w	r2, r3, #1
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a348:	2300      	movs	r3, #0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	370c      	adds	r7, #12
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr

0800a356 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b084      	sub	sp, #16
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
 800a35e:	460b      	mov	r3, r1
 800a360:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a362:	2300      	movs	r3, #0
 800a364:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a372:	78fb      	ldrb	r3, [r7, #3]
 800a374:	2b01      	cmp	r3, #1
 800a376:	d115      	bne.n	800a3a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a384:	2001      	movs	r0, #1
 800a386:	f7fa fb4d 	bl	8004a24 <HAL_Delay>
      ms++;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	3301      	adds	r3, #1
 800a38e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 f93a 	bl	800a60a <USB_GetMode>
 800a396:	4603      	mov	r3, r0
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d01e      	beq.n	800a3da <USB_SetCurrentMode+0x84>
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2b31      	cmp	r3, #49	; 0x31
 800a3a0:	d9f0      	bls.n	800a384 <USB_SetCurrentMode+0x2e>
 800a3a2:	e01a      	b.n	800a3da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a3a4:	78fb      	ldrb	r3, [r7, #3]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d115      	bne.n	800a3d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a3b6:	2001      	movs	r0, #1
 800a3b8:	f7fa fb34 	bl	8004a24 <HAL_Delay>
      ms++;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 f921 	bl	800a60a <USB_GetMode>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d005      	beq.n	800a3da <USB_SetCurrentMode+0x84>
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2b31      	cmp	r3, #49	; 0x31
 800a3d2:	d9f0      	bls.n	800a3b6 <USB_SetCurrentMode+0x60>
 800a3d4:	e001      	b.n	800a3da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	e005      	b.n	800a3e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2b32      	cmp	r3, #50	; 0x32
 800a3de:	d101      	bne.n	800a3e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e000      	b.n	800a3e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
	...

0800a3f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	3301      	adds	r3, #1
 800a402:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	4a13      	ldr	r2, [pc, #76]	; (800a454 <USB_FlushTxFifo+0x64>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d901      	bls.n	800a410 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a40c:	2303      	movs	r3, #3
 800a40e:	e01b      	b.n	800a448 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	2b00      	cmp	r3, #0
 800a416:	daf2      	bge.n	800a3fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a418:	2300      	movs	r3, #0
 800a41a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	019b      	lsls	r3, r3, #6
 800a420:	f043 0220 	orr.w	r2, r3, #32
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	3301      	adds	r3, #1
 800a42c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	4a08      	ldr	r2, [pc, #32]	; (800a454 <USB_FlushTxFifo+0x64>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d901      	bls.n	800a43a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a436:	2303      	movs	r3, #3
 800a438:	e006      	b.n	800a448 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	691b      	ldr	r3, [r3, #16]
 800a43e:	f003 0320 	and.w	r3, r3, #32
 800a442:	2b20      	cmp	r3, #32
 800a444:	d0f0      	beq.n	800a428 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3714      	adds	r7, #20
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr
 800a454:	00030d40 	.word	0x00030d40

0800a458 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a458:	b480      	push	{r7}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a460:	2300      	movs	r3, #0
 800a462:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	3301      	adds	r3, #1
 800a468:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	4a11      	ldr	r2, [pc, #68]	; (800a4b4 <USB_FlushRxFifo+0x5c>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d901      	bls.n	800a476 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a472:	2303      	movs	r3, #3
 800a474:	e018      	b.n	800a4a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	691b      	ldr	r3, [r3, #16]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	daf2      	bge.n	800a464 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a47e:	2300      	movs	r3, #0
 800a480:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2210      	movs	r2, #16
 800a486:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	3301      	adds	r3, #1
 800a48c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	4a08      	ldr	r2, [pc, #32]	; (800a4b4 <USB_FlushRxFifo+0x5c>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d901      	bls.n	800a49a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a496:	2303      	movs	r3, #3
 800a498:	e006      	b.n	800a4a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	691b      	ldr	r3, [r3, #16]
 800a49e:	f003 0310 	and.w	r3, r3, #16
 800a4a2:	2b10      	cmp	r3, #16
 800a4a4:	d0f0      	beq.n	800a488 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a4a6:	2300      	movs	r3, #0
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3714      	adds	r7, #20
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr
 800a4b4:	00030d40 	.word	0x00030d40

0800a4b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b089      	sub	sp, #36	; 0x24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	60b9      	str	r1, [r7, #8]
 800a4c2:	4611      	mov	r1, r2
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	71fb      	strb	r3, [r7, #7]
 800a4ca:	4613      	mov	r3, r2
 800a4cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a4d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d123      	bne.n	800a526 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a4de:	88bb      	ldrh	r3, [r7, #4]
 800a4e0:	3303      	adds	r3, #3
 800a4e2:	089b      	lsrs	r3, r3, #2
 800a4e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	61bb      	str	r3, [r7, #24]
 800a4ea:	e018      	b.n	800a51e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a4ec:	79fb      	ldrb	r3, [r7, #7]
 800a4ee:	031a      	lsls	r2, r3, #12
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	69fb      	ldr	r3, [r7, #28]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a500:	69fb      	ldr	r3, [r7, #28]
 800a502:	3301      	adds	r3, #1
 800a504:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a506:	69fb      	ldr	r3, [r7, #28]
 800a508:	3301      	adds	r3, #1
 800a50a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	3301      	adds	r3, #1
 800a510:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a512:	69fb      	ldr	r3, [r7, #28]
 800a514:	3301      	adds	r3, #1
 800a516:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a518:	69bb      	ldr	r3, [r7, #24]
 800a51a:	3301      	adds	r3, #1
 800a51c:	61bb      	str	r3, [r7, #24]
 800a51e:	69ba      	ldr	r2, [r7, #24]
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	429a      	cmp	r2, r3
 800a524:	d3e2      	bcc.n	800a4ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a526:	2300      	movs	r3, #0
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3724      	adds	r7, #36	; 0x24
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a534:	b480      	push	{r7}
 800a536:	b08b      	sub	sp, #44	; 0x2c
 800a538:	af00      	add	r7, sp, #0
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	4613      	mov	r3, r2
 800a540:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a54a:	88fb      	ldrh	r3, [r7, #6]
 800a54c:	089b      	lsrs	r3, r3, #2
 800a54e:	b29b      	uxth	r3, r3
 800a550:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a552:	88fb      	ldrh	r3, [r7, #6]
 800a554:	f003 0303 	and.w	r3, r3, #3
 800a558:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a55a:	2300      	movs	r3, #0
 800a55c:	623b      	str	r3, [r7, #32]
 800a55e:	e014      	b.n	800a58a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56e:	3301      	adds	r3, #1
 800a570:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a574:	3301      	adds	r3, #1
 800a576:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57a:	3301      	adds	r3, #1
 800a57c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a580:	3301      	adds	r3, #1
 800a582:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a584:	6a3b      	ldr	r3, [r7, #32]
 800a586:	3301      	adds	r3, #1
 800a588:	623b      	str	r3, [r7, #32]
 800a58a:	6a3a      	ldr	r2, [r7, #32]
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	429a      	cmp	r2, r3
 800a590:	d3e6      	bcc.n	800a560 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a592:	8bfb      	ldrh	r3, [r7, #30]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d01e      	beq.n	800a5d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a598:	2300      	movs	r3, #0
 800a59a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	f107 0310 	add.w	r3, r7, #16
 800a5a8:	6812      	ldr	r2, [r2, #0]
 800a5aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a5ac:	693a      	ldr	r2, [r7, #16]
 800a5ae:	6a3b      	ldr	r3, [r7, #32]
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	00db      	lsls	r3, r3, #3
 800a5b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a5b8:	b2da      	uxtb	r2, r3
 800a5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5bc:	701a      	strb	r2, [r3, #0]
      i++;
 800a5be:	6a3b      	ldr	r3, [r7, #32]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	623b      	str	r3, [r7, #32]
      pDest++;
 800a5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a5ca:	8bfb      	ldrh	r3, [r7, #30]
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a5d0:	8bfb      	ldrh	r3, [r7, #30]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d1ea      	bne.n	800a5ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	372c      	adds	r7, #44	; 0x2c
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	695b      	ldr	r3, [r3, #20]
 800a5f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	699b      	ldr	r3, [r3, #24]
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	4013      	ands	r3, r2
 800a5fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3714      	adds	r7, #20
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr

0800a60a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a60a:	b480      	push	{r7}
 800a60c:	b083      	sub	sp, #12
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	695b      	ldr	r3, [r3, #20]
 800a616:	f003 0301 	and.w	r3, r3, #1
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	370c      	adds	r7, #12
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr
	...

0800a628 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a630:	2300      	movs	r3, #0
 800a632:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	3301      	adds	r3, #1
 800a638:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	4a13      	ldr	r2, [pc, #76]	; (800a68c <USB_CoreReset+0x64>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d901      	bls.n	800a646 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a642:	2303      	movs	r3, #3
 800a644:	e01b      	b.n	800a67e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	691b      	ldr	r3, [r3, #16]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	daf2      	bge.n	800a634 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a64e:	2300      	movs	r3, #0
 800a650:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	691b      	ldr	r3, [r3, #16]
 800a656:	f043 0201 	orr.w	r2, r3, #1
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	3301      	adds	r3, #1
 800a662:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	4a09      	ldr	r2, [pc, #36]	; (800a68c <USB_CoreReset+0x64>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d901      	bls.n	800a670 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a66c:	2303      	movs	r3, #3
 800a66e:	e006      	b.n	800a67e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	691b      	ldr	r3, [r3, #16]
 800a674:	f003 0301 	and.w	r3, r3, #1
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d0f0      	beq.n	800a65e <USB_CoreReset+0x36>

  return HAL_OK;
 800a67c:	2300      	movs	r3, #0
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3714      	adds	r7, #20
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	00030d40 	.word	0x00030d40

0800a690 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a690:	b084      	sub	sp, #16
 800a692:	b580      	push	{r7, lr}
 800a694:	b086      	sub	sp, #24
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
 800a69a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a69e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d018      	beq.n	800a718 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d10a      	bne.n	800a702 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	68fa      	ldr	r2, [r7, #12]
 800a6f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a6fa:	f043 0304 	orr.w	r3, r3, #4
 800a6fe:	6013      	str	r3, [r2, #0]
 800a700:	e014      	b.n	800a72c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	68fa      	ldr	r2, [r7, #12]
 800a70c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a710:	f023 0304 	bic.w	r3, r3, #4
 800a714:	6013      	str	r3, [r2, #0]
 800a716:	e009      	b.n	800a72c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	68fa      	ldr	r2, [r7, #12]
 800a722:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a726:	f023 0304 	bic.w	r3, r3, #4
 800a72a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a72c:	2110      	movs	r1, #16
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f7ff fe5e 	bl	800a3f0 <USB_FlushTxFifo>
 800a734:	4603      	mov	r3, r0
 800a736:	2b00      	cmp	r3, #0
 800a738:	d001      	beq.n	800a73e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f7ff fe8a 	bl	800a458 <USB_FlushRxFifo>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d001      	beq.n	800a74e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a74e:	2300      	movs	r3, #0
 800a750:	613b      	str	r3, [r7, #16]
 800a752:	e015      	b.n	800a780 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	015a      	lsls	r2, r3, #5
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	4413      	add	r3, r2
 800a75c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a760:	461a      	mov	r2, r3
 800a762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a766:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	015a      	lsls	r2, r3, #5
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	4413      	add	r3, r2
 800a770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a774:	461a      	mov	r2, r3
 800a776:	2300      	movs	r3, #0
 800a778:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	3301      	adds	r3, #1
 800a77e:	613b      	str	r3, [r7, #16]
 800a780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a782:	693a      	ldr	r2, [r7, #16]
 800a784:	429a      	cmp	r2, r3
 800a786:	d3e5      	bcc.n	800a754 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a794:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a79a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d00b      	beq.n	800a7ba <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7a8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4a13      	ldr	r2, [pc, #76]	; (800a7fc <USB_HostInit+0x16c>)
 800a7ae:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a13      	ldr	r2, [pc, #76]	; (800a800 <USB_HostInit+0x170>)
 800a7b4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a7b8:	e009      	b.n	800a7ce <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2280      	movs	r2, #128	; 0x80
 800a7be:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4a10      	ldr	r2, [pc, #64]	; (800a804 <USB_HostInit+0x174>)
 800a7c4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	4a0f      	ldr	r2, [pc, #60]	; (800a808 <USB_HostInit+0x178>)
 800a7ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d105      	bne.n	800a7e0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	699b      	ldr	r3, [r3, #24]
 800a7d8:	f043 0210 	orr.w	r2, r3, #16
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	699a      	ldr	r2, [r3, #24]
 800a7e4:	4b09      	ldr	r3, [pc, #36]	; (800a80c <USB_HostInit+0x17c>)
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800a7ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3718      	adds	r7, #24
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a7f8:	b004      	add	sp, #16
 800a7fa:	4770      	bx	lr
 800a7fc:	01000200 	.word	0x01000200
 800a800:	00e00300 	.word	0x00e00300
 800a804:	00600080 	.word	0x00600080
 800a808:	004000e0 	.word	0x004000e0
 800a80c:	a3200008 	.word	0xa3200008

0800a810 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a810:	b480      	push	{r7}
 800a812:	b085      	sub	sp, #20
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	460b      	mov	r3, r1
 800a81a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a82e:	f023 0303 	bic.w	r3, r3, #3
 800a832:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	78fb      	ldrb	r3, [r7, #3]
 800a83e:	f003 0303 	and.w	r3, r3, #3
 800a842:	68f9      	ldr	r1, [r7, #12]
 800a844:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a848:	4313      	orrs	r3, r2
 800a84a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a84c:	78fb      	ldrb	r3, [r7, #3]
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d107      	bne.n	800a862 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a858:	461a      	mov	r2, r3
 800a85a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a85e:	6053      	str	r3, [r2, #4]
 800a860:	e009      	b.n	800a876 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a862:	78fb      	ldrb	r3, [r7, #3]
 800a864:	2b02      	cmp	r3, #2
 800a866:	d106      	bne.n	800a876 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a86e:	461a      	mov	r2, r3
 800a870:	f241 7370 	movw	r3, #6000	; 0x1770
 800a874:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a876:	2300      	movs	r3, #0
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3714      	adds	r7, #20
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a890:	2300      	movs	r3, #0
 800a892:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a8a4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	68fa      	ldr	r2, [r7, #12]
 800a8aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a8ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8b2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a8b4:	2064      	movs	r0, #100	; 0x64
 800a8b6:	f7fa f8b5 	bl	8004a24 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	68fa      	ldr	r2, [r7, #12]
 800a8be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a8c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8c6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a8c8:	200a      	movs	r0, #10
 800a8ca:	f7fa f8ab 	bl	8004a24 <HAL_Delay>

  return HAL_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3710      	adds	r7, #16
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b085      	sub	sp, #20
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a8fc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a904:	2b00      	cmp	r3, #0
 800a906:	d109      	bne.n	800a91c <USB_DriveVbus+0x44>
 800a908:	78fb      	ldrb	r3, [r7, #3]
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d106      	bne.n	800a91c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	68fa      	ldr	r2, [r7, #12]
 800a912:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a916:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a91a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a926:	d109      	bne.n	800a93c <USB_DriveVbus+0x64>
 800a928:	78fb      	ldrb	r3, [r7, #3]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d106      	bne.n	800a93c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	68fa      	ldr	r2, [r7, #12]
 800a932:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a936:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a93a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a93c:	2300      	movs	r3, #0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3714      	adds	r7, #20
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr

0800a94a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a94a:	b480      	push	{r7}
 800a94c:	b085      	sub	sp, #20
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a956:	2300      	movs	r3, #0
 800a958:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	0c5b      	lsrs	r3, r3, #17
 800a968:	f003 0303 	and.w	r3, r3, #3
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3714      	adds	r7, #20
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr

0800a978 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800a978:	b480      	push	{r7}
 800a97a:	b085      	sub	sp, #20
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	b29b      	uxth	r3, r3
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3714      	adds	r7, #20
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr
	...

0800a99c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b088      	sub	sp, #32
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	4608      	mov	r0, r1
 800a9a6:	4611      	mov	r1, r2
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	70fb      	strb	r3, [r7, #3]
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	70bb      	strb	r3, [r7, #2]
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800a9be:	78fb      	ldrb	r3, [r7, #3]
 800a9c0:	015a      	lsls	r2, r3, #5
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9d0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a9d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a9d6:	2b03      	cmp	r3, #3
 800a9d8:	d87e      	bhi.n	800aad8 <USB_HC_Init+0x13c>
 800a9da:	a201      	add	r2, pc, #4	; (adr r2, 800a9e0 <USB_HC_Init+0x44>)
 800a9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e0:	0800a9f1 	.word	0x0800a9f1
 800a9e4:	0800aa9b 	.word	0x0800aa9b
 800a9e8:	0800a9f1 	.word	0x0800a9f1
 800a9ec:	0800aa5d 	.word	0x0800aa5d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a9f0:	78fb      	ldrb	r3, [r7, #3]
 800a9f2:	015a      	lsls	r2, r3, #5
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	f240 439d 	movw	r3, #1181	; 0x49d
 800aa02:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800aa04:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	da10      	bge.n	800aa2e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800aa0c:	78fb      	ldrb	r3, [r7, #3]
 800aa0e:	015a      	lsls	r2, r3, #5
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	4413      	add	r3, r2
 800aa14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa18:	68db      	ldr	r3, [r3, #12]
 800aa1a:	78fa      	ldrb	r2, [r7, #3]
 800aa1c:	0151      	lsls	r1, r2, #5
 800aa1e:	693a      	ldr	r2, [r7, #16]
 800aa20:	440a      	add	r2, r1
 800aa22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa2a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800aa2c:	e057      	b.n	800aade <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d051      	beq.n	800aade <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800aa3a:	78fb      	ldrb	r3, [r7, #3]
 800aa3c:	015a      	lsls	r2, r3, #5
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	4413      	add	r3, r2
 800aa42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	78fa      	ldrb	r2, [r7, #3]
 800aa4a:	0151      	lsls	r1, r2, #5
 800aa4c:	693a      	ldr	r2, [r7, #16]
 800aa4e:	440a      	add	r2, r1
 800aa50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa54:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800aa58:	60d3      	str	r3, [r2, #12]
      break;
 800aa5a:	e040      	b.n	800aade <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800aa5c:	78fb      	ldrb	r3, [r7, #3]
 800aa5e:	015a      	lsls	r2, r3, #5
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	4413      	add	r3, r2
 800aa64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa68:	461a      	mov	r2, r3
 800aa6a:	f240 639d 	movw	r3, #1693	; 0x69d
 800aa6e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800aa70:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	da34      	bge.n	800aae2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800aa78:	78fb      	ldrb	r3, [r7, #3]
 800aa7a:	015a      	lsls	r2, r3, #5
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	4413      	add	r3, r2
 800aa80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	78fa      	ldrb	r2, [r7, #3]
 800aa88:	0151      	lsls	r1, r2, #5
 800aa8a:	693a      	ldr	r2, [r7, #16]
 800aa8c:	440a      	add	r2, r1
 800aa8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa96:	60d3      	str	r3, [r2, #12]
      }

      break;
 800aa98:	e023      	b.n	800aae2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800aa9a:	78fb      	ldrb	r3, [r7, #3]
 800aa9c:	015a      	lsls	r2, r3, #5
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	4413      	add	r3, r2
 800aaa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	f240 2325 	movw	r3, #549	; 0x225
 800aaac:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800aaae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	da17      	bge.n	800aae6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800aab6:	78fb      	ldrb	r3, [r7, #3]
 800aab8:	015a      	lsls	r2, r3, #5
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	4413      	add	r3, r2
 800aabe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aac2:	68db      	ldr	r3, [r3, #12]
 800aac4:	78fa      	ldrb	r2, [r7, #3]
 800aac6:	0151      	lsls	r1, r2, #5
 800aac8:	693a      	ldr	r2, [r7, #16]
 800aaca:	440a      	add	r2, r1
 800aacc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aad0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800aad4:	60d3      	str	r3, [r2, #12]
      }
      break;
 800aad6:	e006      	b.n	800aae6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800aad8:	2301      	movs	r3, #1
 800aada:	77fb      	strb	r3, [r7, #31]
      break;
 800aadc:	e004      	b.n	800aae8 <USB_HC_Init+0x14c>
      break;
 800aade:	bf00      	nop
 800aae0:	e002      	b.n	800aae8 <USB_HC_Init+0x14c>
      break;
 800aae2:	bf00      	nop
 800aae4:	e000      	b.n	800aae8 <USB_HC_Init+0x14c>
      break;
 800aae6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800aae8:	78fb      	ldrb	r3, [r7, #3]
 800aaea:	015a      	lsls	r2, r3, #5
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	4413      	add	r3, r2
 800aaf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	78fa      	ldrb	r2, [r7, #3]
 800aaf8:	0151      	lsls	r1, r2, #5
 800aafa:	693a      	ldr	r2, [r7, #16]
 800aafc:	440a      	add	r2, r1
 800aafe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab02:	f043 0302 	orr.w	r3, r3, #2
 800ab06:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab0e:	699a      	ldr	r2, [r3, #24]
 800ab10:	78fb      	ldrb	r3, [r7, #3]
 800ab12:	f003 030f 	and.w	r3, r3, #15
 800ab16:	2101      	movs	r1, #1
 800ab18:	fa01 f303 	lsl.w	r3, r1, r3
 800ab1c:	6939      	ldr	r1, [r7, #16]
 800ab1e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ab22:	4313      	orrs	r3, r2
 800ab24:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	699b      	ldr	r3, [r3, #24]
 800ab2a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800ab32:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	da03      	bge.n	800ab42 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800ab3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab3e:	61bb      	str	r3, [r7, #24]
 800ab40:	e001      	b.n	800ab46 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800ab42:	2300      	movs	r3, #0
 800ab44:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f7ff feff 	bl	800a94a <USB_GetHostSpeed>
 800ab4c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800ab4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ab52:	2b02      	cmp	r3, #2
 800ab54:	d106      	bne.n	800ab64 <USB_HC_Init+0x1c8>
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2b02      	cmp	r3, #2
 800ab5a:	d003      	beq.n	800ab64 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800ab5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ab60:	617b      	str	r3, [r7, #20]
 800ab62:	e001      	b.n	800ab68 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800ab64:	2300      	movs	r3, #0
 800ab66:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ab68:	787b      	ldrb	r3, [r7, #1]
 800ab6a:	059b      	lsls	r3, r3, #22
 800ab6c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ab70:	78bb      	ldrb	r3, [r7, #2]
 800ab72:	02db      	lsls	r3, r3, #11
 800ab74:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ab78:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ab7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ab7e:	049b      	lsls	r3, r3, #18
 800ab80:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ab84:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ab86:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ab88:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ab8c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ab8e:	69bb      	ldr	r3, [r7, #24]
 800ab90:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ab92:	78fb      	ldrb	r3, [r7, #3]
 800ab94:	0159      	lsls	r1, r3, #5
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	440b      	add	r3, r1
 800ab9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab9e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800aba4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800aba6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800abaa:	2b03      	cmp	r3, #3
 800abac:	d003      	beq.n	800abb6 <USB_HC_Init+0x21a>
 800abae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d10f      	bne.n	800abd6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800abb6:	78fb      	ldrb	r3, [r7, #3]
 800abb8:	015a      	lsls	r2, r3, #5
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	4413      	add	r3, r2
 800abbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	78fa      	ldrb	r2, [r7, #3]
 800abc6:	0151      	lsls	r1, r2, #5
 800abc8:	693a      	ldr	r2, [r7, #16]
 800abca:	440a      	add	r2, r1
 800abcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800abd4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800abd6:	7ffb      	ldrb	r3, [r7, #31]
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3720      	adds	r7, #32
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b08c      	sub	sp, #48	; 0x30
 800abe4:	af02      	add	r7, sp, #8
 800abe6:	60f8      	str	r0, [r7, #12]
 800abe8:	60b9      	str	r1, [r7, #8]
 800abea:	4613      	mov	r3, r2
 800abec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	785b      	ldrb	r3, [r3, #1]
 800abf6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800abf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abfc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d02d      	beq.n	800ac66 <USB_HC_StartXfer+0x86>
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	791b      	ldrb	r3, [r3, #4]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d129      	bne.n	800ac66 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800ac12:	79fb      	ldrb	r3, [r7, #7]
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d117      	bne.n	800ac48 <USB_HC_StartXfer+0x68>
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	79db      	ldrb	r3, [r3, #7]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d003      	beq.n	800ac28 <USB_HC_StartXfer+0x48>
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	79db      	ldrb	r3, [r3, #7]
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	d10f      	bne.n	800ac48 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800ac28:	69fb      	ldr	r3, [r7, #28]
 800ac2a:	015a      	lsls	r2, r3, #5
 800ac2c:	6a3b      	ldr	r3, [r7, #32]
 800ac2e:	4413      	add	r3, r2
 800ac30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac34:	68db      	ldr	r3, [r3, #12]
 800ac36:	69fa      	ldr	r2, [r7, #28]
 800ac38:	0151      	lsls	r1, r2, #5
 800ac3a:	6a3a      	ldr	r2, [r7, #32]
 800ac3c:	440a      	add	r2, r1
 800ac3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac46:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800ac48:	79fb      	ldrb	r3, [r7, #7]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d10b      	bne.n	800ac66 <USB_HC_StartXfer+0x86>
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	795b      	ldrb	r3, [r3, #5]
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d107      	bne.n	800ac66 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	785b      	ldrb	r3, [r3, #1]
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	68f8      	ldr	r0, [r7, #12]
 800ac5e:	f000 fa0f 	bl	800b080 <USB_DoPing>
      return HAL_OK;
 800ac62:	2300      	movs	r3, #0
 800ac64:	e0f8      	b.n	800ae58 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	695b      	ldr	r3, [r3, #20]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d018      	beq.n	800aca0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	695b      	ldr	r3, [r3, #20]
 800ac72:	68ba      	ldr	r2, [r7, #8]
 800ac74:	8912      	ldrh	r2, [r2, #8]
 800ac76:	4413      	add	r3, r2
 800ac78:	3b01      	subs	r3, #1
 800ac7a:	68ba      	ldr	r2, [r7, #8]
 800ac7c:	8912      	ldrh	r2, [r2, #8]
 800ac7e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac82:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800ac84:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ac86:	8b7b      	ldrh	r3, [r7, #26]
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d90b      	bls.n	800aca4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800ac8c:	8b7b      	ldrh	r3, [r7, #26]
 800ac8e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ac90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ac92:	68ba      	ldr	r2, [r7, #8]
 800ac94:	8912      	ldrh	r2, [r2, #8]
 800ac96:	fb03 f202 	mul.w	r2, r3, r2
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	611a      	str	r2, [r3, #16]
 800ac9e:	e001      	b.n	800aca4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800aca0:	2301      	movs	r3, #1
 800aca2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	78db      	ldrb	r3, [r3, #3]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d007      	beq.n	800acbc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800acac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800acae:	68ba      	ldr	r2, [r7, #8]
 800acb0:	8912      	ldrh	r2, [r2, #8]
 800acb2:	fb03 f202 	mul.w	r2, r3, r2
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	611a      	str	r2, [r3, #16]
 800acba:	e003      	b.n	800acc4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	695a      	ldr	r2, [r3, #20]
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	691b      	ldr	r3, [r3, #16]
 800acc8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800accc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800acce:	04d9      	lsls	r1, r3, #19
 800acd0:	4b63      	ldr	r3, [pc, #396]	; (800ae60 <USB_HC_StartXfer+0x280>)
 800acd2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800acd4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	7a9b      	ldrb	r3, [r3, #10]
 800acda:	075b      	lsls	r3, r3, #29
 800acdc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ace0:	69f9      	ldr	r1, [r7, #28]
 800ace2:	0148      	lsls	r0, r1, #5
 800ace4:	6a39      	ldr	r1, [r7, #32]
 800ace6:	4401      	add	r1, r0
 800ace8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800acec:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800acee:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800acf0:	79fb      	ldrb	r3, [r7, #7]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d009      	beq.n	800ad0a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	68d9      	ldr	r1, [r3, #12]
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	015a      	lsls	r2, r3, #5
 800acfe:	6a3b      	ldr	r3, [r7, #32]
 800ad00:	4413      	add	r3, r2
 800ad02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad06:	460a      	mov	r2, r1
 800ad08:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800ad0a:	6a3b      	ldr	r3, [r7, #32]
 800ad0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad10:	689b      	ldr	r3, [r3, #8]
 800ad12:	f003 0301 	and.w	r3, r3, #1
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	bf0c      	ite	eq
 800ad1a:	2301      	moveq	r3, #1
 800ad1c:	2300      	movne	r3, #0
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	015a      	lsls	r2, r3, #5
 800ad26:	6a3b      	ldr	r3, [r7, #32]
 800ad28:	4413      	add	r3, r2
 800ad2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	69fa      	ldr	r2, [r7, #28]
 800ad32:	0151      	lsls	r1, r2, #5
 800ad34:	6a3a      	ldr	r2, [r7, #32]
 800ad36:	440a      	add	r2, r1
 800ad38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad3c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ad40:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800ad42:	69fb      	ldr	r3, [r7, #28]
 800ad44:	015a      	lsls	r2, r3, #5
 800ad46:	6a3b      	ldr	r3, [r7, #32]
 800ad48:	4413      	add	r3, r2
 800ad4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad4e:	681a      	ldr	r2, [r3, #0]
 800ad50:	7e7b      	ldrb	r3, [r7, #25]
 800ad52:	075b      	lsls	r3, r3, #29
 800ad54:	69f9      	ldr	r1, [r7, #28]
 800ad56:	0148      	lsls	r0, r1, #5
 800ad58:	6a39      	ldr	r1, [r7, #32]
 800ad5a:	4401      	add	r1, r0
 800ad5c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800ad60:	4313      	orrs	r3, r2
 800ad62:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	015a      	lsls	r2, r3, #5
 800ad68:	6a3b      	ldr	r3, [r7, #32]
 800ad6a:	4413      	add	r3, r2
 800ad6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ad7a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	78db      	ldrb	r3, [r3, #3]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d004      	beq.n	800ad8e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad8a:	613b      	str	r3, [r7, #16]
 800ad8c:	e003      	b.n	800ad96 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ad94:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad9c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	015a      	lsls	r2, r3, #5
 800ada2:	6a3b      	ldr	r3, [r7, #32]
 800ada4:	4413      	add	r3, r2
 800ada6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adaa:	461a      	mov	r2, r3
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800adb0:	79fb      	ldrb	r3, [r7, #7]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d001      	beq.n	800adba <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800adb6:	2300      	movs	r3, #0
 800adb8:	e04e      	b.n	800ae58 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	78db      	ldrb	r3, [r3, #3]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d149      	bne.n	800ae56 <USB_HC_StartXfer+0x276>
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	695b      	ldr	r3, [r3, #20]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d045      	beq.n	800ae56 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	79db      	ldrb	r3, [r3, #7]
 800adce:	2b03      	cmp	r3, #3
 800add0:	d830      	bhi.n	800ae34 <USB_HC_StartXfer+0x254>
 800add2:	a201      	add	r2, pc, #4	; (adr r2, 800add8 <USB_HC_StartXfer+0x1f8>)
 800add4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add8:	0800ade9 	.word	0x0800ade9
 800addc:	0800ae0d 	.word	0x0800ae0d
 800ade0:	0800ade9 	.word	0x0800ade9
 800ade4:	0800ae0d 	.word	0x0800ae0d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	695b      	ldr	r3, [r3, #20]
 800adec:	3303      	adds	r3, #3
 800adee:	089b      	lsrs	r3, r3, #2
 800adf0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800adf2:	8afa      	ldrh	r2, [r7, #22]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d91c      	bls.n	800ae38 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	699b      	ldr	r3, [r3, #24]
 800ae02:	f043 0220 	orr.w	r2, r3, #32
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	619a      	str	r2, [r3, #24]
        }
        break;
 800ae0a:	e015      	b.n	800ae38 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	695b      	ldr	r3, [r3, #20]
 800ae10:	3303      	adds	r3, #3
 800ae12:	089b      	lsrs	r3, r3, #2
 800ae14:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ae16:	8afa      	ldrh	r2, [r7, #22]
 800ae18:	6a3b      	ldr	r3, [r7, #32]
 800ae1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae1e:	691b      	ldr	r3, [r3, #16]
 800ae20:	b29b      	uxth	r3, r3
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d90a      	bls.n	800ae3c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	699b      	ldr	r3, [r3, #24]
 800ae2a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	619a      	str	r2, [r3, #24]
        }
        break;
 800ae32:	e003      	b.n	800ae3c <USB_HC_StartXfer+0x25c>

      default:
        break;
 800ae34:	bf00      	nop
 800ae36:	e002      	b.n	800ae3e <USB_HC_StartXfer+0x25e>
        break;
 800ae38:	bf00      	nop
 800ae3a:	e000      	b.n	800ae3e <USB_HC_StartXfer+0x25e>
        break;
 800ae3c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	68d9      	ldr	r1, [r3, #12]
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	785a      	ldrb	r2, [r3, #1]
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	695b      	ldr	r3, [r3, #20]
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	2000      	movs	r0, #0
 800ae4e:	9000      	str	r0, [sp, #0]
 800ae50:	68f8      	ldr	r0, [r7, #12]
 800ae52:	f7ff fb31 	bl	800a4b8 <USB_WritePacket>
  }

  return HAL_OK;
 800ae56:	2300      	movs	r3, #0
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3728      	adds	r7, #40	; 0x28
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	1ff80000 	.word	0x1ff80000

0800ae64 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b085      	sub	sp, #20
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae76:	695b      	ldr	r3, [r3, #20]
 800ae78:	b29b      	uxth	r3, r3
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3714      	adds	r7, #20
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr

0800ae86 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ae86:	b480      	push	{r7}
 800ae88:	b089      	sub	sp, #36	; 0x24
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
 800ae8e:	460b      	mov	r3, r1
 800ae90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800ae96:	78fb      	ldrb	r3, [r7, #3]
 800ae98:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ae9e:	69bb      	ldr	r3, [r7, #24]
 800aea0:	015a      	lsls	r2, r3, #5
 800aea2:	69fb      	ldr	r3, [r7, #28]
 800aea4:	4413      	add	r3, r2
 800aea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	0c9b      	lsrs	r3, r3, #18
 800aeae:	f003 0303 	and.w	r3, r3, #3
 800aeb2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800aeb4:	69bb      	ldr	r3, [r7, #24]
 800aeb6:	015a      	lsls	r2, r3, #5
 800aeb8:	69fb      	ldr	r3, [r7, #28]
 800aeba:	4413      	add	r3, r2
 800aebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	0fdb      	lsrs	r3, r3, #31
 800aec4:	f003 0301 	and.w	r3, r3, #1
 800aec8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	f003 0320 	and.w	r3, r3, #32
 800aed2:	2b20      	cmp	r3, #32
 800aed4:	d104      	bne.n	800aee0 <USB_HC_Halt+0x5a>
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d101      	bne.n	800aee0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800aedc:	2300      	movs	r3, #0
 800aede:	e0c8      	b.n	800b072 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d002      	beq.n	800aeec <USB_HC_Halt+0x66>
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	2b02      	cmp	r3, #2
 800aeea:	d163      	bne.n	800afb4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	015a      	lsls	r2, r3, #5
 800aef0:	69fb      	ldr	r3, [r7, #28]
 800aef2:	4413      	add	r3, r2
 800aef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	69ba      	ldr	r2, [r7, #24]
 800aefc:	0151      	lsls	r1, r2, #5
 800aefe:	69fa      	ldr	r2, [r7, #28]
 800af00:	440a      	add	r2, r1
 800af02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af0a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	f003 0320 	and.w	r3, r3, #32
 800af14:	2b00      	cmp	r3, #0
 800af16:	f040 80ab 	bne.w	800b070 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800af22:	2b00      	cmp	r3, #0
 800af24:	d133      	bne.n	800af8e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	015a      	lsls	r2, r3, #5
 800af2a:	69fb      	ldr	r3, [r7, #28]
 800af2c:	4413      	add	r3, r2
 800af2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	69ba      	ldr	r2, [r7, #24]
 800af36:	0151      	lsls	r1, r2, #5
 800af38:	69fa      	ldr	r2, [r7, #28]
 800af3a:	440a      	add	r2, r1
 800af3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af44:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800af46:	69bb      	ldr	r3, [r7, #24]
 800af48:	015a      	lsls	r2, r3, #5
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	4413      	add	r3, r2
 800af4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	69ba      	ldr	r2, [r7, #24]
 800af56:	0151      	lsls	r1, r2, #5
 800af58:	69fa      	ldr	r2, [r7, #28]
 800af5a:	440a      	add	r2, r1
 800af5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af64:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	3301      	adds	r3, #1
 800af6a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af72:	d81d      	bhi.n	800afb0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800af74:	69bb      	ldr	r3, [r7, #24]
 800af76:	015a      	lsls	r2, r3, #5
 800af78:	69fb      	ldr	r3, [r7, #28]
 800af7a:	4413      	add	r3, r2
 800af7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af8a:	d0ec      	beq.n	800af66 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800af8c:	e070      	b.n	800b070 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800af8e:	69bb      	ldr	r3, [r7, #24]
 800af90:	015a      	lsls	r2, r3, #5
 800af92:	69fb      	ldr	r3, [r7, #28]
 800af94:	4413      	add	r3, r2
 800af96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	69ba      	ldr	r2, [r7, #24]
 800af9e:	0151      	lsls	r1, r2, #5
 800afa0:	69fa      	ldr	r2, [r7, #28]
 800afa2:	440a      	add	r2, r1
 800afa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800afa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800afac:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800afae:	e05f      	b.n	800b070 <USB_HC_Halt+0x1ea>
            break;
 800afb0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800afb2:	e05d      	b.n	800b070 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800afb4:	69bb      	ldr	r3, [r7, #24]
 800afb6:	015a      	lsls	r2, r3, #5
 800afb8:	69fb      	ldr	r3, [r7, #28]
 800afba:	4413      	add	r3, r2
 800afbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	69ba      	ldr	r2, [r7, #24]
 800afc4:	0151      	lsls	r1, r2, #5
 800afc6:	69fa      	ldr	r2, [r7, #28]
 800afc8:	440a      	add	r2, r1
 800afca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800afce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800afd2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800afd4:	69fb      	ldr	r3, [r7, #28]
 800afd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800afda:	691b      	ldr	r3, [r3, #16]
 800afdc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d133      	bne.n	800b04c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800afe4:	69bb      	ldr	r3, [r7, #24]
 800afe6:	015a      	lsls	r2, r3, #5
 800afe8:	69fb      	ldr	r3, [r7, #28]
 800afea:	4413      	add	r3, r2
 800afec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	69ba      	ldr	r2, [r7, #24]
 800aff4:	0151      	lsls	r1, r2, #5
 800aff6:	69fa      	ldr	r2, [r7, #28]
 800aff8:	440a      	add	r2, r1
 800affa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800affe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b002:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b004:	69bb      	ldr	r3, [r7, #24]
 800b006:	015a      	lsls	r2, r3, #5
 800b008:	69fb      	ldr	r3, [r7, #28]
 800b00a:	4413      	add	r3, r2
 800b00c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	69ba      	ldr	r2, [r7, #24]
 800b014:	0151      	lsls	r1, r2, #5
 800b016:	69fa      	ldr	r2, [r7, #28]
 800b018:	440a      	add	r2, r1
 800b01a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b01e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b022:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	3301      	adds	r3, #1
 800b028:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b030:	d81d      	bhi.n	800b06e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	015a      	lsls	r2, r3, #5
 800b036:	69fb      	ldr	r3, [r7, #28]
 800b038:	4413      	add	r3, r2
 800b03a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b044:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b048:	d0ec      	beq.n	800b024 <USB_HC_Halt+0x19e>
 800b04a:	e011      	b.n	800b070 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b04c:	69bb      	ldr	r3, [r7, #24]
 800b04e:	015a      	lsls	r2, r3, #5
 800b050:	69fb      	ldr	r3, [r7, #28]
 800b052:	4413      	add	r3, r2
 800b054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	69ba      	ldr	r2, [r7, #24]
 800b05c:	0151      	lsls	r1, r2, #5
 800b05e:	69fa      	ldr	r2, [r7, #28]
 800b060:	440a      	add	r2, r1
 800b062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b066:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b06a:	6013      	str	r3, [r2, #0]
 800b06c:	e000      	b.n	800b070 <USB_HC_Halt+0x1ea>
          break;
 800b06e:	bf00      	nop
    }
  }

  return HAL_OK;
 800b070:	2300      	movs	r3, #0
}
 800b072:	4618      	mov	r0, r3
 800b074:	3724      	adds	r7, #36	; 0x24
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr
	...

0800b080 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b080:	b480      	push	{r7}
 800b082:	b087      	sub	sp, #28
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	460b      	mov	r3, r1
 800b08a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b090:	78fb      	ldrb	r3, [r7, #3]
 800b092:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b094:	2301      	movs	r3, #1
 800b096:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	04da      	lsls	r2, r3, #19
 800b09c:	4b15      	ldr	r3, [pc, #84]	; (800b0f4 <USB_DoPing+0x74>)
 800b09e:	4013      	ands	r3, r2
 800b0a0:	693a      	ldr	r2, [r7, #16]
 800b0a2:	0151      	lsls	r1, r2, #5
 800b0a4:	697a      	ldr	r2, [r7, #20]
 800b0a6:	440a      	add	r2, r1
 800b0a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b0ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b0b0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	015a      	lsls	r2, r3, #5
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b0c8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b0d0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	015a      	lsls	r2, r3, #5
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	4413      	add	r3, r2
 800b0da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0de:	461a      	mov	r2, r3
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b0e4:	2300      	movs	r3, #0
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	371c      	adds	r7, #28
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr
 800b0f2:	bf00      	nop
 800b0f4:	1ff80000 	.word	0x1ff80000

0800b0f8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b088      	sub	sp, #32
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800b100:	2300      	movs	r3, #0
 800b102:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800b108:	2300      	movs	r3, #0
 800b10a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f7ff f911 	bl	800a334 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b112:	2110      	movs	r1, #16
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f7ff f96b 	bl	800a3f0 <USB_FlushTxFifo>
 800b11a:	4603      	mov	r3, r0
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d001      	beq.n	800b124 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800b120:	2301      	movs	r3, #1
 800b122:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f7ff f997 	bl	800a458 <USB_FlushRxFifo>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d001      	beq.n	800b134 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800b130:	2301      	movs	r3, #1
 800b132:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b134:	2300      	movs	r3, #0
 800b136:	61bb      	str	r3, [r7, #24]
 800b138:	e01f      	b.n	800b17a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800b13a:	69bb      	ldr	r3, [r7, #24]
 800b13c:	015a      	lsls	r2, r3, #5
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	4413      	add	r3, r2
 800b142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b150:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b158:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b160:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b162:	69bb      	ldr	r3, [r7, #24]
 800b164:	015a      	lsls	r2, r3, #5
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	4413      	add	r3, r2
 800b16a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b16e:	461a      	mov	r2, r3
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b174:	69bb      	ldr	r3, [r7, #24]
 800b176:	3301      	adds	r3, #1
 800b178:	61bb      	str	r3, [r7, #24]
 800b17a:	69bb      	ldr	r3, [r7, #24]
 800b17c:	2b0f      	cmp	r3, #15
 800b17e:	d9dc      	bls.n	800b13a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b180:	2300      	movs	r3, #0
 800b182:	61bb      	str	r3, [r7, #24]
 800b184:	e034      	b.n	800b1f0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800b186:	69bb      	ldr	r3, [r7, #24]
 800b188:	015a      	lsls	r2, r3, #5
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	4413      	add	r3, r2
 800b18e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b19c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b1a4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b1ac:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	015a      	lsls	r2, r3, #5
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b1cc:	d80c      	bhi.n	800b1e8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b1ce:	69bb      	ldr	r3, [r7, #24]
 800b1d0:	015a      	lsls	r2, r3, #5
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	4413      	add	r3, r2
 800b1d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b1e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b1e4:	d0ec      	beq.n	800b1c0 <USB_StopHost+0xc8>
 800b1e6:	e000      	b.n	800b1ea <USB_StopHost+0xf2>
        break;
 800b1e8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b1ea:	69bb      	ldr	r3, [r7, #24]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	61bb      	str	r3, [r7, #24]
 800b1f0:	69bb      	ldr	r3, [r7, #24]
 800b1f2:	2b0f      	cmp	r3, #15
 800b1f4:	d9c7      	bls.n	800b186 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b202:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b20a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f7ff f880 	bl	800a312 <USB_EnableGlobalInt>

  return ret;
 800b212:	7ffb      	ldrb	r3, [r7, #31]
}
 800b214:	4618      	mov	r0, r3
 800b216:	3720      	adds	r7, #32
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b220:	4904      	ldr	r1, [pc, #16]	; (800b234 <MX_FATFS_Init+0x18>)
 800b222:	4805      	ldr	r0, [pc, #20]	; (800b238 <MX_FATFS_Init+0x1c>)
 800b224:	f005 fd0c 	bl	8010c40 <FATFS_LinkDriver>
 800b228:	4603      	mov	r3, r0
 800b22a:	461a      	mov	r2, r3
 800b22c:	4b03      	ldr	r3, [pc, #12]	; (800b23c <MX_FATFS_Init+0x20>)
 800b22e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b230:	bf00      	nop
 800b232:	bd80      	pop	{r7, pc}
 800b234:	20002c4c 	.word	0x20002c4c
 800b238:	20000010 	.word	0x20000010
 800b23c:	20002c48 	.word	0x20002c48

0800b240 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b240:	b480      	push	{r7}
 800b242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b244:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b246:	4618      	mov	r0, r3
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	4603      	mov	r3, r0
 800b258:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
	Stat = (SD_SPI_Init()) ? STA_NOINIT : RES_OK;
 800b25a:	f7f8 fcbf 	bl	8003bdc <SD_SPI_Init>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b00      	cmp	r3, #0
 800b262:	bf14      	ite	ne
 800b264:	2301      	movne	r3, #1
 800b266:	2300      	moveq	r3, #0
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	461a      	mov	r2, r3
 800b26c:	4b04      	ldr	r3, [pc, #16]	; (800b280 <USER_initialize+0x30>)
 800b26e:	701a      	strb	r2, [r3, #0]
//	 HAL_UART_Transmit(&huart3,(uint8_t*)"USER_initialize\n\r",17,0x1000);
//
//	 SD_PowerOn();
//	 if(sd_ini()==0) {Stat &= ~STA_NOINIT;} 		//Сбросим статус STA_NOINIT
    return Stat;
 800b270:	4b03      	ldr	r3, [pc, #12]	; (800b280 <USER_initialize+0x30>)
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800b276:	4618      	mov	r0, r3
 800b278:	3708      	adds	r7, #8
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	2000000d 	.word	0x2000000d

0800b284 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b284:	b480      	push	{r7}
 800b286:	b083      	sub	sp, #12
 800b288:	af00      	add	r7, sp, #0
 800b28a:	4603      	mov	r3, r0
 800b28c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
	//HAL_UART_Transmit(&huart3,(uint8_t*)"USER_status\n\r",13,0x1000);
	if (pdrv) return STA_NOINIT;
 800b28e:	79fb      	ldrb	r3, [r7, #7]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d001      	beq.n	800b298 <USER_status+0x14>
 800b294:	2301      	movs	r3, #1
 800b296:	e002      	b.n	800b29e <USER_status+0x1a>
    return Stat;
 800b298:	4b04      	ldr	r3, [pc, #16]	; (800b2ac <USER_status+0x28>)
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	370c      	adds	r7, #12
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr
 800b2aa:	bf00      	nop
 800b2ac:	2000000d 	.word	0x2000000d

0800b2b0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60b9      	str	r1, [r7, #8]
 800b2b8:	607a      	str	r2, [r7, #4]
 800b2ba:	603b      	str	r3, [r7, #0]
 800b2bc:	4603      	mov	r3, r0
 800b2be:	73fb      	strb	r3, [r7, #15]
//
//	SPI_Release();
//
//	return count ? RES_ERROR : RES_OK;

	if (pdrv || ( ! count)) return RES_PARERR;
 800b2c0:	7bfb      	ldrb	r3, [r7, #15]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d102      	bne.n	800b2cc <USER_read+0x1c>
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d101      	bne.n	800b2d0 <USER_read+0x20>
 800b2cc:	2304      	movs	r3, #4
 800b2ce:	e023      	b.n	800b318 <USER_read+0x68>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b2d0:	4b13      	ldr	r3, [pc, #76]	; (800b320 <USER_read+0x70>)
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	f003 0301 	and.w	r3, r3, #1
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d001      	beq.n	800b2e2 <USER_read+0x32>
 800b2de:	2303      	movs	r3, #3
 800b2e0:	e01a      	b.n	800b318 <USER_read+0x68>

			if ( ! (sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 800b2e2:	4b10      	ldr	r3, [pc, #64]	; (800b324 <USER_read+0x74>)
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	b2db      	uxtb	r3, r3
 800b2e8:	f003 0304 	and.w	r3, r3, #4
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d102      	bne.n	800b2f6 <USER_read+0x46>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	025b      	lsls	r3, r3, #9
 800b2f4:	607b      	str	r3, [r7, #4]
			if (count == 1) /* Single block read */
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d105      	bne.n	800b308 <USER_read+0x58>
			{
				SD_SPI_Read_Block(buff, sector);
 800b2fc:	6879      	ldr	r1, [r7, #4]
 800b2fe:	68b8      	ldr	r0, [r7, #8]
 800b300:	f7f8 fe1a 	bl	8003f38 <SD_SPI_Read_Block>
				count = 0;
 800b304:	2300      	movs	r3, #0
 800b306:	603b      	str	r3, [r7, #0]
			}
			else /* Multiple block read */
			{
			}
			SPI_Release();
 800b308:	f7f8 fd80 	bl	8003e0c <SPI_Release>
			return count ? RES_ERROR : RES_OK;
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	bf14      	ite	ne
 800b312:	2301      	movne	r3, #1
 800b314:	2300      	moveq	r3, #0
 800b316:	b2db      	uxtb	r3, r3

   // return RES_OK;
  /* USER CODE END READ */
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3710      	adds	r7, #16
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	2000000d 	.word	0x2000000d
 800b324:	200028b8 	.word	0x200028b8

0800b328 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60b9      	str	r1, [r7, #8]
 800b330:	607a      	str	r2, [r7, #4]
 800b332:	603b      	str	r3, [r7, #0]
 800b334:	4603      	mov	r3, r0
 800b336:	73fb      	strb	r3, [r7, #15]
  /* USER CODE HERE */
//	HAL_UART_Transmit(&huart3,(uint8_t*)"USER_write\n\r",12,0x1000);
//	sprintf(str1,"sector: %lu\n\r",sector);
//	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);

	if (pdrv || !count) return RES_PARERR;
 800b338:	7bfb      	ldrb	r3, [r7, #15]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d102      	bne.n	800b344 <USER_write+0x1c>
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d101      	bne.n	800b348 <USER_write+0x20>
 800b344:	2304      	movs	r3, #4
 800b346:	e02c      	b.n	800b3a2 <USER_write+0x7a>
			if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b348:	4b18      	ldr	r3, [pc, #96]	; (800b3ac <USER_write+0x84>)
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	f003 0301 	and.w	r3, r3, #1
 800b352:	2b00      	cmp	r3, #0
 800b354:	d001      	beq.n	800b35a <USER_write+0x32>
 800b356:	2303      	movs	r3, #3
 800b358:	e023      	b.n	800b3a2 <USER_write+0x7a>
			if (Stat & STA_PROTECT) return RES_WRPRT;
 800b35a:	4b14      	ldr	r3, [pc, #80]	; (800b3ac <USER_write+0x84>)
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	f003 0304 	and.w	r3, r3, #4
 800b364:	2b00      	cmp	r3, #0
 800b366:	d001      	beq.n	800b36c <USER_write+0x44>
 800b368:	2302      	movs	r3, #2
 800b36a:	e01a      	b.n	800b3a2 <USER_write+0x7a>
			if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 800b36c:	4b10      	ldr	r3, [pc, #64]	; (800b3b0 <USER_write+0x88>)
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	b2db      	uxtb	r3, r3
 800b372:	f003 0304 	and.w	r3, r3, #4
 800b376:	2b00      	cmp	r3, #0
 800b378:	d102      	bne.n	800b380 <USER_write+0x58>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	025b      	lsls	r3, r3, #9
 800b37e:	607b      	str	r3, [r7, #4]
			if (count == 1) /* Single block read */
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	2b01      	cmp	r3, #1
 800b384:	d105      	bne.n	800b392 <USER_write+0x6a>
			{
				SD_SPI_Write_Block((BYTE*)buff, sector);
 800b386:	6879      	ldr	r1, [r7, #4]
 800b388:	68b8      	ldr	r0, [r7, #8]
 800b38a:	f7f8 fe1b 	bl	8003fc4 <SD_SPI_Write_Block>
				count = 0;
 800b38e:	2300      	movs	r3, #0
 800b390:	603b      	str	r3, [r7, #0]
			}
			else /* Multiple block read */
			{
			}
			SPI_Release();
 800b392:	f7f8 fd3b 	bl	8003e0c <SPI_Release>
			return count ? RES_ERROR : RES_OK;
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	bf14      	ite	ne
 800b39c:	2301      	movne	r3, #1
 800b39e:	2300      	moveq	r3, #0
 800b3a0:	b2db      	uxtb	r3, r3

    //return RES_OK;
  /* USER CODE END WRITE */
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3710      	adds	r7, #16
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	2000000d 	.word	0x2000000d
 800b3b0:	200028b8 	.word	0x200028b8

0800b3b4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	603a      	str	r2, [r7, #0]
 800b3be:	71fb      	strb	r3, [r7, #7]
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	71bb      	strb	r3, [r7, #6]
//
//    SPI_Release();
//
//    return res;

	DRESULT vResult = RES_ERROR;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	73fb      	strb	r3, [r7, #15]

		    if (pdrv) return RES_PARERR;
 800b3c8:	79fb      	ldrb	r3, [r7, #7]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d001      	beq.n	800b3d2 <USER_ioctl+0x1e>
 800b3ce:	2304      	movs	r3, #4
 800b3d0:	e02b      	b.n	800b42a <USER_ioctl+0x76>
				if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b3d2:	4b18      	ldr	r3, [pc, #96]	; (800b434 <USER_ioctl+0x80>)
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	b2db      	uxtb	r3, r3
 800b3d8:	f003 0301 	and.w	r3, r3, #1
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d001      	beq.n	800b3e4 <USER_ioctl+0x30>
 800b3e0:	2303      	movs	r3, #3
 800b3e2:	e022      	b.n	800b42a <USER_ioctl+0x76>
				vResult = RES_ERROR;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	73fb      	strb	r3, [r7, #15]

				switch (cmd)
 800b3e8:	79bb      	ldrb	r3, [r7, #6]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d002      	beq.n	800b3f4 <USER_ioctl+0x40>
 800b3ee:	2b02      	cmp	r3, #2
 800b3f0:	d00d      	beq.n	800b40e <USER_ioctl+0x5a>
 800b3f2:	e013      	b.n	800b41c <USER_ioctl+0x68>
				{
					case CTRL_SYNC : /* Flush dirty buffer if present */
									SD_SELECT;
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	2108      	movs	r1, #8
 800b3f8:	480f      	ldr	r0, [pc, #60]	; (800b438 <USER_ioctl+0x84>)
 800b3fa:	f7fa f9e7 	bl	80057cc <HAL_GPIO_WritePin>
									if ( ! SD_SPI_WaitingForReadiness())
 800b3fe:	f7f8 fd0c 	bl	8003e1a <SD_SPI_WaitingForReadiness>
 800b402:	4603      	mov	r3, r0
 800b404:	2b00      	cmp	r3, #0
 800b406:	d10c      	bne.n	800b422 <USER_ioctl+0x6e>
									vResult = RES_OK;
 800b408:	2300      	movs	r3, #0
 800b40a:	73fb      	strb	r3, [r7, #15]
										break;
 800b40c:	e009      	b.n	800b422 <USER_ioctl+0x6e>

					case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
									*(WORD*)buff = 512;
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b414:	801a      	strh	r2, [r3, #0]
									vResult = RES_OK;
 800b416:	2300      	movs	r3, #0
 800b418:	73fb      	strb	r3, [r7, #15]
										break;
 800b41a:	e003      	b.n	800b424 <USER_ioctl+0x70>

					default:
						vResult = RES_PARERR;
 800b41c:	2304      	movs	r3, #4
 800b41e:	73fb      	strb	r3, [r7, #15]
 800b420:	e000      	b.n	800b424 <USER_ioctl+0x70>
										break;
 800b422:	bf00      	nop
				}

				SPI_Release();
 800b424:	f7f8 fcf2 	bl	8003e0c <SPI_Release>

				return vResult;
 800b428:	7bfb      	ldrb	r3, [r7, #15]
   // return res;
  /* USER CODE END IOCTL */
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3710      	adds	r7, #16
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	2000000d 	.word	0x2000000d
 800b438:	40020000 	.word	0x40020000

0800b43c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b43c:	b590      	push	{r4, r7, lr}
 800b43e:	b089      	sub	sp, #36	; 0x24
 800b440:	af04      	add	r7, sp, #16
 800b442:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800b444:	2301      	movs	r3, #1
 800b446:	2202      	movs	r2, #2
 800b448:	2102      	movs	r1, #2
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 fc66 	bl	800bd1c <USBH_FindInterface>
 800b450:	4603      	mov	r3, r0
 800b452:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b454:	7bfb      	ldrb	r3, [r7, #15]
 800b456:	2bff      	cmp	r3, #255	; 0xff
 800b458:	d002      	beq.n	800b460 <USBH_CDC_InterfaceInit+0x24>
 800b45a:	7bfb      	ldrb	r3, [r7, #15]
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d901      	bls.n	800b464 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b460:	2302      	movs	r3, #2
 800b462:	e13d      	b.n	800b6e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800b464:	7bfb      	ldrb	r3, [r7, #15]
 800b466:	4619      	mov	r1, r3
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f000 fc3b 	bl	800bce4 <USBH_SelectInterface>
 800b46e:	4603      	mov	r3, r0
 800b470:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b472:	7bbb      	ldrb	r3, [r7, #14]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d001      	beq.n	800b47c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800b478:	2302      	movs	r3, #2
 800b47a:	e131      	b.n	800b6e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b482:	2050      	movs	r0, #80	; 0x50
 800b484:	f006 f82a 	bl	80114dc <malloc>
 800b488:	4603      	mov	r3, r0
 800b48a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b492:	69db      	ldr	r3, [r3, #28]
 800b494:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d101      	bne.n	800b4a0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800b49c:	2302      	movs	r3, #2
 800b49e:	e11f      	b.n	800b6e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800b4a0:	2250      	movs	r2, #80	; 0x50
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	68b8      	ldr	r0, [r7, #8]
 800b4a6:	f006 f829 	bl	80114fc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800b4aa:	7bfb      	ldrb	r3, [r7, #15]
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	211a      	movs	r1, #26
 800b4b0:	fb01 f303 	mul.w	r3, r1, r3
 800b4b4:	4413      	add	r3, r2
 800b4b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b4ba:	781b      	ldrb	r3, [r3, #0]
 800b4bc:	b25b      	sxtb	r3, r3
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	da15      	bge.n	800b4ee <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b4c2:	7bfb      	ldrb	r3, [r7, #15]
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	211a      	movs	r1, #26
 800b4c8:	fb01 f303 	mul.w	r3, r1, r3
 800b4cc:	4413      	add	r3, r2
 800b4ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b4d2:	781a      	ldrb	r2, [r3, #0]
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b4d8:	7bfb      	ldrb	r3, [r7, #15]
 800b4da:	687a      	ldr	r2, [r7, #4]
 800b4dc:	211a      	movs	r1, #26
 800b4de:	fb01 f303 	mul.w	r3, r1, r3
 800b4e2:	4413      	add	r3, r2
 800b4e4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b4e8:	881a      	ldrh	r2, [r3, #0]
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	785b      	ldrb	r3, [r3, #1]
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f001 ff2c 	bl	800d352 <USBH_AllocPipe>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	7819      	ldrb	r1, [r3, #0]
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	7858      	ldrb	r0, [r3, #1]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b516:	68ba      	ldr	r2, [r7, #8]
 800b518:	8952      	ldrh	r2, [r2, #10]
 800b51a:	9202      	str	r2, [sp, #8]
 800b51c:	2203      	movs	r2, #3
 800b51e:	9201      	str	r2, [sp, #4]
 800b520:	9300      	str	r3, [sp, #0]
 800b522:	4623      	mov	r3, r4
 800b524:	4602      	mov	r2, r0
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f001 fee4 	bl	800d2f4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	2200      	movs	r2, #0
 800b532:	4619      	mov	r1, r3
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f005 ff23 	bl	8011380 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800b53a:	2300      	movs	r3, #0
 800b53c:	2200      	movs	r2, #0
 800b53e:	210a      	movs	r1, #10
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 fbeb 	bl	800bd1c <USBH_FindInterface>
 800b546:	4603      	mov	r3, r0
 800b548:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b54a:	7bfb      	ldrb	r3, [r7, #15]
 800b54c:	2bff      	cmp	r3, #255	; 0xff
 800b54e:	d002      	beq.n	800b556 <USBH_CDC_InterfaceInit+0x11a>
 800b550:	7bfb      	ldrb	r3, [r7, #15]
 800b552:	2b01      	cmp	r3, #1
 800b554:	d901      	bls.n	800b55a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b556:	2302      	movs	r3, #2
 800b558:	e0c2      	b.n	800b6e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800b55a:	7bfb      	ldrb	r3, [r7, #15]
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	211a      	movs	r1, #26
 800b560:	fb01 f303 	mul.w	r3, r1, r3
 800b564:	4413      	add	r3, r2
 800b566:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	b25b      	sxtb	r3, r3
 800b56e:	2b00      	cmp	r3, #0
 800b570:	da16      	bge.n	800b5a0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b572:	7bfb      	ldrb	r3, [r7, #15]
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	211a      	movs	r1, #26
 800b578:	fb01 f303 	mul.w	r3, r1, r3
 800b57c:	4413      	add	r3, r2
 800b57e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b582:	781a      	ldrb	r2, [r3, #0]
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b588:	7bfb      	ldrb	r3, [r7, #15]
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	211a      	movs	r1, #26
 800b58e:	fb01 f303 	mul.w	r3, r1, r3
 800b592:	4413      	add	r3, r2
 800b594:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b598:	881a      	ldrh	r2, [r3, #0]
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	835a      	strh	r2, [r3, #26]
 800b59e:	e015      	b.n	800b5cc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b5a0:	7bfb      	ldrb	r3, [r7, #15]
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	211a      	movs	r1, #26
 800b5a6:	fb01 f303 	mul.w	r3, r1, r3
 800b5aa:	4413      	add	r3, r2
 800b5ac:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b5b0:	781a      	ldrb	r2, [r3, #0]
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b5b6:	7bfb      	ldrb	r3, [r7, #15]
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	211a      	movs	r1, #26
 800b5bc:	fb01 f303 	mul.w	r3, r1, r3
 800b5c0:	4413      	add	r3, r2
 800b5c2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b5c6:	881a      	ldrh	r2, [r3, #0]
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800b5cc:	7bfb      	ldrb	r3, [r7, #15]
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	211a      	movs	r1, #26
 800b5d2:	fb01 f303 	mul.w	r3, r1, r3
 800b5d6:	4413      	add	r3, r2
 800b5d8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	b25b      	sxtb	r3, r3
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	da16      	bge.n	800b612 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b5e4:	7bfb      	ldrb	r3, [r7, #15]
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	211a      	movs	r1, #26
 800b5ea:	fb01 f303 	mul.w	r3, r1, r3
 800b5ee:	4413      	add	r3, r2
 800b5f0:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b5f4:	781a      	ldrb	r2, [r3, #0]
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b5fa:	7bfb      	ldrb	r3, [r7, #15]
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	211a      	movs	r1, #26
 800b600:	fb01 f303 	mul.w	r3, r1, r3
 800b604:	4413      	add	r3, r2
 800b606:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b60a:	881a      	ldrh	r2, [r3, #0]
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	835a      	strh	r2, [r3, #26]
 800b610:	e015      	b.n	800b63e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b612:	7bfb      	ldrb	r3, [r7, #15]
 800b614:	687a      	ldr	r2, [r7, #4]
 800b616:	211a      	movs	r1, #26
 800b618:	fb01 f303 	mul.w	r3, r1, r3
 800b61c:	4413      	add	r3, r2
 800b61e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b622:	781a      	ldrb	r2, [r3, #0]
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b628:	7bfb      	ldrb	r3, [r7, #15]
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	211a      	movs	r1, #26
 800b62e:	fb01 f303 	mul.w	r3, r1, r3
 800b632:	4413      	add	r3, r2
 800b634:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b638:	881a      	ldrh	r2, [r3, #0]
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	7b9b      	ldrb	r3, [r3, #14]
 800b642:	4619      	mov	r1, r3
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f001 fe84 	bl	800d352 <USBH_AllocPipe>
 800b64a:	4603      	mov	r3, r0
 800b64c:	461a      	mov	r2, r3
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	7bdb      	ldrb	r3, [r3, #15]
 800b656:	4619      	mov	r1, r3
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f001 fe7a 	bl	800d352 <USBH_AllocPipe>
 800b65e:	4603      	mov	r3, r0
 800b660:	461a      	mov	r2, r3
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	7b59      	ldrb	r1, [r3, #13]
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	7b98      	ldrb	r0, [r3, #14]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b67a:	68ba      	ldr	r2, [r7, #8]
 800b67c:	8b12      	ldrh	r2, [r2, #24]
 800b67e:	9202      	str	r2, [sp, #8]
 800b680:	2202      	movs	r2, #2
 800b682:	9201      	str	r2, [sp, #4]
 800b684:	9300      	str	r3, [sp, #0]
 800b686:	4623      	mov	r3, r4
 800b688:	4602      	mov	r2, r0
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f001 fe32 	bl	800d2f4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	7b19      	ldrb	r1, [r3, #12]
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	7bd8      	ldrb	r0, [r3, #15]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b6a4:	68ba      	ldr	r2, [r7, #8]
 800b6a6:	8b52      	ldrh	r2, [r2, #26]
 800b6a8:	9202      	str	r2, [sp, #8]
 800b6aa:	2202      	movs	r2, #2
 800b6ac:	9201      	str	r2, [sp, #4]
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	4623      	mov	r3, r4
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f001 fe1d 	bl	800d2f4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	7b5b      	ldrb	r3, [r3, #13]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f005 fe58 	bl	8011380 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	7b1b      	ldrb	r3, [r3, #12]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f005 fe51 	bl	8011380 <USBH_LL_SetToggle>

  return USBH_OK;
 800b6de:	2300      	movs	r3, #0
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3714      	adds	r7, #20
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd90      	pop	{r4, r7, pc}

0800b6e8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b084      	sub	sp, #16
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b6f6:	69db      	ldr	r3, [r3, #28]
 800b6f8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d00e      	beq.n	800b720 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	4619      	mov	r1, r3
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f001 fe12 	bl	800d332 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	4619      	mov	r1, r3
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f001 fe3d 	bl	800d394 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2200      	movs	r2, #0
 800b71e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	7b1b      	ldrb	r3, [r3, #12]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d00e      	beq.n	800b746 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	7b1b      	ldrb	r3, [r3, #12]
 800b72c:	4619      	mov	r1, r3
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f001 fdff 	bl	800d332 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	7b1b      	ldrb	r3, [r3, #12]
 800b738:	4619      	mov	r1, r3
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f001 fe2a 	bl	800d394 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2200      	movs	r2, #0
 800b744:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	7b5b      	ldrb	r3, [r3, #13]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d00e      	beq.n	800b76c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	7b5b      	ldrb	r3, [r3, #13]
 800b752:	4619      	mov	r1, r3
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f001 fdec 	bl	800d332 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	7b5b      	ldrb	r3, [r3, #13]
 800b75e:	4619      	mov	r1, r3
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f001 fe17 	bl	800d394 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2200      	movs	r2, #0
 800b76a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b772:	69db      	ldr	r3, [r3, #28]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d00b      	beq.n	800b790 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b77e:	69db      	ldr	r3, [r3, #28]
 800b780:	4618      	mov	r0, r3
 800b782:	f005 feb3 	bl	80114ec <free>
    phost->pActiveClass->pData = 0U;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b78c:	2200      	movs	r2, #0
 800b78e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b790:	2300      	movs	r3, #0
}
 800b792:	4618      	mov	r0, r3
 800b794:	3710      	adds	r7, #16
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b084      	sub	sp, #16
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7a8:	69db      	ldr	r3, [r3, #28]
 800b7aa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	3340      	adds	r3, #64	; 0x40
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 f8b1 	bl	800b91a <GetLineCoding>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800b7bc:	7afb      	ldrb	r3, [r7, #11]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d105      	bne.n	800b7ce <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b7c8:	2102      	movs	r1, #2
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800b7ce:	7afb      	ldrb	r3, [r7, #11]
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3710      	adds	r7, #16
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b084      	sub	sp, #16
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7ee:	69db      	ldr	r3, [r3, #28]
 800b7f0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b7f8:	2b04      	cmp	r3, #4
 800b7fa:	d877      	bhi.n	800b8ec <USBH_CDC_Process+0x114>
 800b7fc:	a201      	add	r2, pc, #4	; (adr r2, 800b804 <USBH_CDC_Process+0x2c>)
 800b7fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b802:	bf00      	nop
 800b804:	0800b819 	.word	0x0800b819
 800b808:	0800b81f 	.word	0x0800b81f
 800b80c:	0800b84f 	.word	0x0800b84f
 800b810:	0800b8c3 	.word	0x0800b8c3
 800b814:	0800b8d1 	.word	0x0800b8d1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800b818:	2300      	movs	r3, #0
 800b81a:	73fb      	strb	r3, [r7, #15]
      break;
 800b81c:	e06d      	b.n	800b8fa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b822:	4619      	mov	r1, r3
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f000 f897 	bl	800b958 <SetLineCoding>
 800b82a:	4603      	mov	r3, r0
 800b82c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b82e:	7bbb      	ldrb	r3, [r7, #14]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d104      	bne.n	800b83e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	2202      	movs	r2, #2
 800b838:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b83c:	e058      	b.n	800b8f0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800b83e:	7bbb      	ldrb	r3, [r7, #14]
 800b840:	2b01      	cmp	r3, #1
 800b842:	d055      	beq.n	800b8f0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	2204      	movs	r2, #4
 800b848:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b84c:	e050      	b.n	800b8f0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	3340      	adds	r3, #64	; 0x40
 800b852:	4619      	mov	r1, r3
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f000 f860 	bl	800b91a <GetLineCoding>
 800b85a:	4603      	mov	r3, r0
 800b85c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b85e:	7bbb      	ldrb	r3, [r7, #14]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d126      	bne.n	800b8b2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	2200      	movs	r2, #0
 800b868:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b876:	791b      	ldrb	r3, [r3, #4]
 800b878:	429a      	cmp	r2, r3
 800b87a:	d13b      	bne.n	800b8f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b886:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b888:	429a      	cmp	r2, r3
 800b88a:	d133      	bne.n	800b8f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b896:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b898:	429a      	cmp	r2, r3
 800b89a:	d12b      	bne.n	800b8f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8a4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d124      	bne.n	800b8f4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 f958 	bl	800bb60 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b8b0:	e020      	b.n	800b8f4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800b8b2:	7bbb      	ldrb	r3, [r7, #14]
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d01d      	beq.n	800b8f4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	2204      	movs	r2, #4
 800b8bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b8c0:	e018      	b.n	800b8f4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 f867 	bl	800b996 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 f8da 	bl	800ba82 <CDC_ProcessReception>
      break;
 800b8ce:	e014      	b.n	800b8fa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800b8d0:	2100      	movs	r1, #0
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 ffef 	bl	800c8b6 <USBH_ClrFeature>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b8dc:	7bbb      	ldrb	r3, [r7, #14]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d10a      	bne.n	800b8f8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800b8ea:	e005      	b.n	800b8f8 <USBH_CDC_Process+0x120>

    default:
      break;
 800b8ec:	bf00      	nop
 800b8ee:	e004      	b.n	800b8fa <USBH_CDC_Process+0x122>
      break;
 800b8f0:	bf00      	nop
 800b8f2:	e002      	b.n	800b8fa <USBH_CDC_Process+0x122>
      break;
 800b8f4:	bf00      	nop
 800b8f6:	e000      	b.n	800b8fa <USBH_CDC_Process+0x122>
      break;
 800b8f8:	bf00      	nop

  }

  return status;
 800b8fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3710      	adds	r7, #16
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b904:	b480      	push	{r7}
 800b906:	b083      	sub	sp, #12
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b90c:	2300      	movs	r3, #0
}
 800b90e:	4618      	mov	r0, r3
 800b910:	370c      	adds	r7, #12
 800b912:	46bd      	mov	sp, r7
 800b914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b918:	4770      	bx	lr

0800b91a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800b91a:	b580      	push	{r7, lr}
 800b91c:	b082      	sub	sp, #8
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
 800b922:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	22a1      	movs	r2, #161	; 0xa1
 800b928:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2221      	movs	r2, #33	; 0x21
 800b92e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2200      	movs	r2, #0
 800b934:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2200      	movs	r2, #0
 800b93a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2207      	movs	r2, #7
 800b940:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	2207      	movs	r2, #7
 800b946:	4619      	mov	r1, r3
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f001 fa81 	bl	800ce50 <USBH_CtlReq>
 800b94e:	4603      	mov	r3, r0
}
 800b950:	4618      	mov	r0, r3
 800b952:	3708      	adds	r7, #8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2221      	movs	r2, #33	; 0x21
 800b966:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2220      	movs	r2, #32
 800b96c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2200      	movs	r2, #0
 800b972:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2200      	movs	r2, #0
 800b978:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2207      	movs	r2, #7
 800b97e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	2207      	movs	r2, #7
 800b984:	4619      	mov	r1, r3
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f001 fa62 	bl	800ce50 <USBH_CtlReq>
 800b98c:	4603      	mov	r3, r0
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3708      	adds	r7, #8
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}

0800b996 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800b996:	b580      	push	{r7, lr}
 800b998:	b086      	sub	sp, #24
 800b99a:	af02      	add	r7, sp, #8
 800b99c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9a4:	69db      	ldr	r3, [r3, #28]
 800b9a6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d002      	beq.n	800b9bc <CDC_ProcessTransmission+0x26>
 800b9b6:	2b02      	cmp	r3, #2
 800b9b8:	d023      	beq.n	800ba02 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800b9ba:	e05e      	b.n	800ba7a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c0:	68fa      	ldr	r2, [r7, #12]
 800b9c2:	8b12      	ldrh	r2, [r2, #24]
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d90b      	bls.n	800b9e0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	69d9      	ldr	r1, [r3, #28]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	8b1a      	ldrh	r2, [r3, #24]
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	7b5b      	ldrb	r3, [r3, #13]
 800b9d4:	2001      	movs	r0, #1
 800b9d6:	9000      	str	r0, [sp, #0]
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f001 fc48 	bl	800d26e <USBH_BulkSendData>
 800b9de:	e00b      	b.n	800b9f8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800b9e8:	b29a      	uxth	r2, r3
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	7b5b      	ldrb	r3, [r3, #13]
 800b9ee:	2001      	movs	r0, #1
 800b9f0:	9000      	str	r0, [sp, #0]
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f001 fc3b 	bl	800d26e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2202      	movs	r2, #2
 800b9fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ba00:	e03b      	b.n	800ba7a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	7b5b      	ldrb	r3, [r3, #13]
 800ba06:	4619      	mov	r1, r3
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f005 fc8f 	bl	801132c <USBH_LL_GetURBState>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800ba12:	7afb      	ldrb	r3, [r7, #11]
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d128      	bne.n	800ba6a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba1c:	68fa      	ldr	r2, [r7, #12]
 800ba1e:	8b12      	ldrh	r2, [r2, #24]
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d90e      	bls.n	800ba42 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	8b12      	ldrh	r2, [r2, #24]
 800ba2c:	1a9a      	subs	r2, r3, r2
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	69db      	ldr	r3, [r3, #28]
 800ba36:	68fa      	ldr	r2, [r7, #12]
 800ba38:	8b12      	ldrh	r2, [r2, #24]
 800ba3a:	441a      	add	r2, r3
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	61da      	str	r2, [r3, #28]
 800ba40:	e002      	b.n	800ba48 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2200      	movs	r2, #0
 800ba46:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d004      	beq.n	800ba5a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2201      	movs	r2, #1
 800ba54:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ba58:	e00e      	b.n	800ba78 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f000 f868 	bl	800bb38 <USBH_CDC_TransmitCallback>
      break;
 800ba68:	e006      	b.n	800ba78 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800ba6a:	7afb      	ldrb	r3, [r7, #11]
 800ba6c:	2b02      	cmp	r3, #2
 800ba6e:	d103      	bne.n	800ba78 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2201      	movs	r2, #1
 800ba74:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ba78:	bf00      	nop
  }
}
 800ba7a:	bf00      	nop
 800ba7c:	3710      	adds	r7, #16
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}

0800ba82 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ba82:	b580      	push	{r7, lr}
 800ba84:	b086      	sub	sp, #24
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba90:	69db      	ldr	r3, [r3, #28]
 800ba92:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ba94:	2300      	movs	r3, #0
 800ba96:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ba9e:	2b03      	cmp	r3, #3
 800baa0:	d002      	beq.n	800baa8 <CDC_ProcessReception+0x26>
 800baa2:	2b04      	cmp	r3, #4
 800baa4:	d00e      	beq.n	800bac4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800baa6:	e043      	b.n	800bb30 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	6a19      	ldr	r1, [r3, #32]
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	8b5a      	ldrh	r2, [r3, #26]
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	7b1b      	ldrb	r3, [r3, #12]
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f001 fbff 	bl	800d2b8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	2204      	movs	r2, #4
 800babe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800bac2:	e035      	b.n	800bb30 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	7b1b      	ldrb	r3, [r3, #12]
 800bac8:	4619      	mov	r1, r3
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f005 fc2e 	bl	801132c <USBH_LL_GetURBState>
 800bad0:	4603      	mov	r3, r0
 800bad2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800bad4:	7cfb      	ldrb	r3, [r7, #19]
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d129      	bne.n	800bb2e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	7b1b      	ldrb	r3, [r3, #12]
 800bade:	4619      	mov	r1, r3
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f005 fb91 	bl	8011208 <USBH_LL_GetLastXferSize>
 800bae6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baec:	68fa      	ldr	r2, [r7, #12]
 800baee:	429a      	cmp	r2, r3
 800baf0:	d016      	beq.n	800bb20 <CDC_ProcessReception+0x9e>
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	8b5b      	ldrh	r3, [r3, #26]
 800baf6:	461a      	mov	r2, r3
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d910      	bls.n	800bb20 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	1ad2      	subs	r2, r2, r3
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	6a1a      	ldr	r2, [r3, #32]
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	441a      	add	r2, r3
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	2203      	movs	r2, #3
 800bb1a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800bb1e:	e006      	b.n	800bb2e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	2200      	movs	r2, #0
 800bb24:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f000 f80f 	bl	800bb4c <USBH_CDC_ReceiveCallback>
      break;
 800bb2e:	bf00      	nop
  }
}
 800bb30:	bf00      	nop
 800bb32:	3718      	adds	r7, #24
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b083      	sub	sp, #12
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bb40:	bf00      	nop
 800bb42:	370c      	adds	r7, #12
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b083      	sub	sp, #12
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bb54:	bf00      	nop
 800bb56:	370c      	adds	r7, #12
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr

0800bb60 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b083      	sub	sp, #12
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bb68:	bf00      	nop
 800bb6a:	370c      	adds	r7, #12
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr

0800bb74 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	4613      	mov	r3, r2
 800bb80:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d101      	bne.n	800bb8c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800bb88:	2302      	movs	r3, #2
 800bb8a:	e029      	b.n	800bbe0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	79fa      	ldrb	r2, [r7, #7]
 800bb90:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2200      	movs	r2, #0
 800bb98:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800bba4:	68f8      	ldr	r0, [r7, #12]
 800bba6:	f000 f81f 	bl	800bbe8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2200      	movs	r2, #0
 800bbae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d003      	beq.n	800bbd8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	68ba      	ldr	r2, [r7, #8]
 800bbd4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800bbd8:	68f8      	ldr	r0, [r7, #12]
 800bbda:	f005 fa61 	bl	80110a0 <USBH_LL_Init>

  return USBH_OK;
 800bbde:	2300      	movs	r3, #0
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3710      	adds	r7, #16
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b085      	sub	sp, #20
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	60fb      	str	r3, [r7, #12]
 800bbf8:	e009      	b.n	800bc0e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800bbfa:	687a      	ldr	r2, [r7, #4]
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	33e0      	adds	r3, #224	; 0xe0
 800bc00:	009b      	lsls	r3, r3, #2
 800bc02:	4413      	add	r3, r2
 800bc04:	2200      	movs	r2, #0
 800bc06:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	3301      	adds	r3, #1
 800bc0c:	60fb      	str	r3, [r7, #12]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2b0f      	cmp	r3, #15
 800bc12:	d9f2      	bls.n	800bbfa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bc14:	2300      	movs	r3, #0
 800bc16:	60fb      	str	r3, [r7, #12]
 800bc18:	e009      	b.n	800bc2e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	4413      	add	r3, r2
 800bc20:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bc24:	2200      	movs	r2, #0
 800bc26:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	60fb      	str	r3, [r7, #12]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc34:	d3f1      	bcc.n	800bc1a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2201      	movs	r2, #1
 800bc46:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2201      	movs	r2, #1
 800bc54:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2240      	movs	r2, #64	; 0x40
 800bc5a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2200      	movs	r2, #0
 800bc66:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2200      	movs	r2, #0
 800bc76:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800bc82:	2300      	movs	r3, #0
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3714      	adds	r7, #20
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b085      	sub	sp, #20
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d016      	beq.n	800bcd2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d10e      	bne.n	800bccc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bcb4:	1c59      	adds	r1, r3, #1
 800bcb6:	687a      	ldr	r2, [r7, #4]
 800bcb8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	33de      	adds	r3, #222	; 0xde
 800bcc0:	6839      	ldr	r1, [r7, #0]
 800bcc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	73fb      	strb	r3, [r7, #15]
 800bcca:	e004      	b.n	800bcd6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800bccc:	2302      	movs	r3, #2
 800bcce:	73fb      	strb	r3, [r7, #15]
 800bcd0:	e001      	b.n	800bcd6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800bcd2:	2302      	movs	r3, #2
 800bcd4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bcd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3714      	adds	r7, #20
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b085      	sub	sp, #20
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	460b      	mov	r3, r1
 800bcee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800bcfa:	78fa      	ldrb	r2, [r7, #3]
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d204      	bcs.n	800bd0a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	78fa      	ldrb	r2, [r7, #3]
 800bd04:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800bd08:	e001      	b.n	800bd0e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800bd0a:	2302      	movs	r3, #2
 800bd0c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bd0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3714      	adds	r7, #20
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr

0800bd1c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b087      	sub	sp, #28
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	4608      	mov	r0, r1
 800bd26:	4611      	mov	r1, r2
 800bd28:	461a      	mov	r2, r3
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	70fb      	strb	r3, [r7, #3]
 800bd2e:	460b      	mov	r3, r1
 800bd30:	70bb      	strb	r3, [r7, #2]
 800bd32:	4613      	mov	r3, r2
 800bd34:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800bd36:	2300      	movs	r3, #0
 800bd38:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bd44:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bd46:	e025      	b.n	800bd94 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800bd48:	7dfb      	ldrb	r3, [r7, #23]
 800bd4a:	221a      	movs	r2, #26
 800bd4c:	fb02 f303 	mul.w	r3, r2, r3
 800bd50:	3308      	adds	r3, #8
 800bd52:	68fa      	ldr	r2, [r7, #12]
 800bd54:	4413      	add	r3, r2
 800bd56:	3302      	adds	r3, #2
 800bd58:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	795b      	ldrb	r3, [r3, #5]
 800bd5e:	78fa      	ldrb	r2, [r7, #3]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d002      	beq.n	800bd6a <USBH_FindInterface+0x4e>
 800bd64:	78fb      	ldrb	r3, [r7, #3]
 800bd66:	2bff      	cmp	r3, #255	; 0xff
 800bd68:	d111      	bne.n	800bd8e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bd6e:	78ba      	ldrb	r2, [r7, #2]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d002      	beq.n	800bd7a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bd74:	78bb      	ldrb	r3, [r7, #2]
 800bd76:	2bff      	cmp	r3, #255	; 0xff
 800bd78:	d109      	bne.n	800bd8e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bd7e:	787a      	ldrb	r2, [r7, #1]
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d002      	beq.n	800bd8a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bd84:	787b      	ldrb	r3, [r7, #1]
 800bd86:	2bff      	cmp	r3, #255	; 0xff
 800bd88:	d101      	bne.n	800bd8e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800bd8a:	7dfb      	ldrb	r3, [r7, #23]
 800bd8c:	e006      	b.n	800bd9c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800bd8e:	7dfb      	ldrb	r3, [r7, #23]
 800bd90:	3301      	adds	r3, #1
 800bd92:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bd94:	7dfb      	ldrb	r3, [r7, #23]
 800bd96:	2b01      	cmp	r3, #1
 800bd98:	d9d6      	bls.n	800bd48 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800bd9a:	23ff      	movs	r3, #255	; 0xff
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	371c      	adds	r7, #28
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr

0800bda8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f005 f9b1 	bl	8011118 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800bdb6:	2101      	movs	r1, #1
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f005 faca 	bl	8011352 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800bdbe:	2300      	movs	r3, #0
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3708      	adds	r7, #8
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b088      	sub	sp, #32
 800bdcc:	af04      	add	r7, sp, #16
 800bdce:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800bdd0:	2302      	movs	r3, #2
 800bdd2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800bdde:	b2db      	uxtb	r3, r3
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d102      	bne.n	800bdea <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2203      	movs	r2, #3
 800bde8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	b2db      	uxtb	r3, r3
 800bdf0:	2b0b      	cmp	r3, #11
 800bdf2:	f200 81be 	bhi.w	800c172 <USBH_Process+0x3aa>
 800bdf6:	a201      	add	r2, pc, #4	; (adr r2, 800bdfc <USBH_Process+0x34>)
 800bdf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdfc:	0800be2d 	.word	0x0800be2d
 800be00:	0800be5f 	.word	0x0800be5f
 800be04:	0800bec7 	.word	0x0800bec7
 800be08:	0800c10d 	.word	0x0800c10d
 800be0c:	0800c173 	.word	0x0800c173
 800be10:	0800bf6b 	.word	0x0800bf6b
 800be14:	0800c0b3 	.word	0x0800c0b3
 800be18:	0800bfa1 	.word	0x0800bfa1
 800be1c:	0800bfc1 	.word	0x0800bfc1
 800be20:	0800bfe1 	.word	0x0800bfe1
 800be24:	0800c025 	.word	0x0800c025
 800be28:	0800c0f5 	.word	0x0800c0f5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800be32:	b2db      	uxtb	r3, r3
 800be34:	2b00      	cmp	r3, #0
 800be36:	f000 819e 	beq.w	800c176 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2201      	movs	r2, #1
 800be3e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800be40:	20c8      	movs	r0, #200	; 0xc8
 800be42:	f005 facd 	bl	80113e0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f005 f9c3 	bl	80111d2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2200      	movs	r2, #0
 800be50:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2200      	movs	r2, #0
 800be58:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800be5c:	e18b      	b.n	800c176 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800be64:	2b01      	cmp	r3, #1
 800be66:	d107      	bne.n	800be78 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2202      	movs	r2, #2
 800be74:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800be76:	e18d      	b.n	800c194 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800be7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be82:	d914      	bls.n	800beae <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800be8a:	3301      	adds	r3, #1
 800be8c:	b2da      	uxtb	r2, r3
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800be9a:	2b03      	cmp	r3, #3
 800be9c:	d903      	bls.n	800bea6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	220d      	movs	r2, #13
 800bea2:	701a      	strb	r2, [r3, #0]
      break;
 800bea4:	e176      	b.n	800c194 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2200      	movs	r2, #0
 800beaa:	701a      	strb	r2, [r3, #0]
      break;
 800beac:	e172      	b.n	800c194 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800beb4:	f103 020a 	add.w	r2, r3, #10
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800bebe:	200a      	movs	r0, #10
 800bec0:	f005 fa8e 	bl	80113e0 <USBH_Delay>
      break;
 800bec4:	e166      	b.n	800c194 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800becc:	2b00      	cmp	r3, #0
 800bece:	d005      	beq.n	800bedc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bed6:	2104      	movs	r1, #4
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800bedc:	2064      	movs	r0, #100	; 0x64
 800bede:	f005 fa7f 	bl	80113e0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f005 f94e 	bl	8011184 <USBH_LL_GetSpeed>
 800bee8:	4603      	mov	r3, r0
 800beea:	461a      	mov	r2, r3
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2205      	movs	r2, #5
 800bef6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800bef8:	2100      	movs	r1, #0
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f001 fa29 	bl	800d352 <USBH_AllocPipe>
 800bf00:	4603      	mov	r3, r0
 800bf02:	461a      	mov	r2, r3
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800bf08:	2180      	movs	r1, #128	; 0x80
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f001 fa21 	bl	800d352 <USBH_AllocPipe>
 800bf10:	4603      	mov	r3, r0
 800bf12:	461a      	mov	r2, r3
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	7919      	ldrb	r1, [r3, #4]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bf28:	687a      	ldr	r2, [r7, #4]
 800bf2a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bf2c:	b292      	uxth	r2, r2
 800bf2e:	9202      	str	r2, [sp, #8]
 800bf30:	2200      	movs	r2, #0
 800bf32:	9201      	str	r2, [sp, #4]
 800bf34:	9300      	str	r3, [sp, #0]
 800bf36:	4603      	mov	r3, r0
 800bf38:	2280      	movs	r2, #128	; 0x80
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f001 f9da 	bl	800d2f4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	7959      	ldrb	r1, [r3, #5]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bf54:	b292      	uxth	r2, r2
 800bf56:	9202      	str	r2, [sp, #8]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	9201      	str	r2, [sp, #4]
 800bf5c:	9300      	str	r3, [sp, #0]
 800bf5e:	4603      	mov	r3, r0
 800bf60:	2200      	movs	r2, #0
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f001 f9c6 	bl	800d2f4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bf68:	e114      	b.n	800c194 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f000 f918 	bl	800c1a0 <USBH_HandleEnum>
 800bf70:	4603      	mov	r3, r0
 800bf72:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800bf74:	7bbb      	ldrb	r3, [r7, #14]
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	f040 80fe 	bne.w	800c17a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2200      	movs	r2, #0
 800bf82:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	d103      	bne.n	800bf98 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2208      	movs	r2, #8
 800bf94:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bf96:	e0f0      	b.n	800c17a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2207      	movs	r2, #7
 800bf9c:	701a      	strb	r2, [r3, #0]
      break;
 800bf9e:	e0ec      	b.n	800c17a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	f000 80e9 	beq.w	800c17e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bfb2:	2101      	movs	r1, #1
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2208      	movs	r2, #8
 800bfbc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800bfbe:	e0de      	b.n	800c17e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	4619      	mov	r1, r3
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 fc2c 	bl	800c828 <USBH_SetCfg>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	f040 80d5 	bne.w	800c182 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2209      	movs	r2, #9
 800bfdc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bfde:	e0d0      	b.n	800c182 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800bfe6:	f003 0320 	and.w	r3, r3, #32
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d016      	beq.n	800c01c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800bfee:	2101      	movs	r1, #1
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f000 fc3c 	bl	800c86e <USBH_SetFeature>
 800bff6:	4603      	mov	r3, r0
 800bff8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800bffa:	7bbb      	ldrb	r3, [r7, #14]
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d103      	bne.n	800c00a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	220a      	movs	r2, #10
 800c006:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c008:	e0bd      	b.n	800c186 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800c00a:	7bbb      	ldrb	r3, [r7, #14]
 800c00c:	b2db      	uxtb	r3, r3
 800c00e:	2b03      	cmp	r3, #3
 800c010:	f040 80b9 	bne.w	800c186 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	220a      	movs	r2, #10
 800c018:	701a      	strb	r2, [r3, #0]
      break;
 800c01a:	e0b4      	b.n	800c186 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	220a      	movs	r2, #10
 800c020:	701a      	strb	r2, [r3, #0]
      break;
 800c022:	e0b0      	b.n	800c186 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	f000 80ad 	beq.w	800c18a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2200      	movs	r2, #0
 800c034:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c038:	2300      	movs	r3, #0
 800c03a:	73fb      	strb	r3, [r7, #15]
 800c03c:	e016      	b.n	800c06c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c03e:	7bfa      	ldrb	r2, [r7, #15]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	32de      	adds	r2, #222	; 0xde
 800c044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c048:	791a      	ldrb	r2, [r3, #4]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800c050:	429a      	cmp	r2, r3
 800c052:	d108      	bne.n	800c066 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c054:	7bfa      	ldrb	r2, [r7, #15]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	32de      	adds	r2, #222	; 0xde
 800c05a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800c064:	e005      	b.n	800c072 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c066:	7bfb      	ldrb	r3, [r7, #15]
 800c068:	3301      	adds	r3, #1
 800c06a:	73fb      	strb	r3, [r7, #15]
 800c06c:	7bfb      	ldrb	r3, [r7, #15]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d0e5      	beq.n	800c03e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d016      	beq.n	800c0aa <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c082:	689b      	ldr	r3, [r3, #8]
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	4798      	blx	r3
 800c088:	4603      	mov	r3, r0
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d109      	bne.n	800c0a2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2206      	movs	r2, #6
 800c092:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c09a:	2103      	movs	r1, #3
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c0a0:	e073      	b.n	800c18a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	220d      	movs	r2, #13
 800c0a6:	701a      	strb	r2, [r3, #0]
      break;
 800c0a8:	e06f      	b.n	800c18a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	220d      	movs	r2, #13
 800c0ae:	701a      	strb	r2, [r3, #0]
      break;
 800c0b0:	e06b      	b.n	800c18a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d017      	beq.n	800c0ec <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0c2:	691b      	ldr	r3, [r3, #16]
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	4798      	blx	r3
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c0cc:	7bbb      	ldrb	r3, [r7, #14]
 800c0ce:	b2db      	uxtb	r3, r3
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d103      	bne.n	800c0dc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	220b      	movs	r2, #11
 800c0d8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c0da:	e058      	b.n	800c18e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800c0dc:	7bbb      	ldrb	r3, [r7, #14]
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	2b02      	cmp	r3, #2
 800c0e2:	d154      	bne.n	800c18e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	220d      	movs	r2, #13
 800c0e8:	701a      	strb	r2, [r3, #0]
      break;
 800c0ea:	e050      	b.n	800c18e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	220d      	movs	r2, #13
 800c0f0:	701a      	strb	r2, [r3, #0]
      break;
 800c0f2:	e04c      	b.n	800c18e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d049      	beq.n	800c192 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c104:	695b      	ldr	r3, [r3, #20]
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	4798      	blx	r3
      }
      break;
 800c10a:	e042      	b.n	800c192 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2200      	movs	r2, #0
 800c110:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f7ff fd67 	bl	800bbe8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c120:	2b00      	cmp	r3, #0
 800c122:	d009      	beq.n	800c138 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c12a:	68db      	ldr	r3, [r3, #12]
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2200      	movs	r2, #0
 800c134:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d005      	beq.n	800c14e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c148:	2105      	movs	r1, #5
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800c154:	b2db      	uxtb	r3, r3
 800c156:	2b01      	cmp	r3, #1
 800c158:	d107      	bne.n	800c16a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2200      	movs	r2, #0
 800c15e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f7ff fe20 	bl	800bda8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c168:	e014      	b.n	800c194 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f004 ffd4 	bl	8011118 <USBH_LL_Start>
      break;
 800c170:	e010      	b.n	800c194 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800c172:	bf00      	nop
 800c174:	e00e      	b.n	800c194 <USBH_Process+0x3cc>
      break;
 800c176:	bf00      	nop
 800c178:	e00c      	b.n	800c194 <USBH_Process+0x3cc>
      break;
 800c17a:	bf00      	nop
 800c17c:	e00a      	b.n	800c194 <USBH_Process+0x3cc>
    break;
 800c17e:	bf00      	nop
 800c180:	e008      	b.n	800c194 <USBH_Process+0x3cc>
      break;
 800c182:	bf00      	nop
 800c184:	e006      	b.n	800c194 <USBH_Process+0x3cc>
      break;
 800c186:	bf00      	nop
 800c188:	e004      	b.n	800c194 <USBH_Process+0x3cc>
      break;
 800c18a:	bf00      	nop
 800c18c:	e002      	b.n	800c194 <USBH_Process+0x3cc>
      break;
 800c18e:	bf00      	nop
 800c190:	e000      	b.n	800c194 <USBH_Process+0x3cc>
      break;
 800c192:	bf00      	nop
  }
  return USBH_OK;
 800c194:	2300      	movs	r3, #0
}
 800c196:	4618      	mov	r0, r3
 800c198:	3710      	adds	r7, #16
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
 800c19e:	bf00      	nop

0800c1a0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b088      	sub	sp, #32
 800c1a4:	af04      	add	r7, sp, #16
 800c1a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	785b      	ldrb	r3, [r3, #1]
 800c1b4:	2b07      	cmp	r3, #7
 800c1b6:	f200 81c1 	bhi.w	800c53c <USBH_HandleEnum+0x39c>
 800c1ba:	a201      	add	r2, pc, #4	; (adr r2, 800c1c0 <USBH_HandleEnum+0x20>)
 800c1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c0:	0800c1e1 	.word	0x0800c1e1
 800c1c4:	0800c29f 	.word	0x0800c29f
 800c1c8:	0800c309 	.word	0x0800c309
 800c1cc:	0800c397 	.word	0x0800c397
 800c1d0:	0800c401 	.word	0x0800c401
 800c1d4:	0800c471 	.word	0x0800c471
 800c1d8:	0800c4b7 	.word	0x0800c4b7
 800c1dc:	0800c4fd 	.word	0x0800c4fd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c1e0:	2108      	movs	r1, #8
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 fa50 	bl	800c688 <USBH_Get_DevDesc>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c1ec:	7bbb      	ldrb	r3, [r7, #14]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d130      	bne.n	800c254 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2201      	movs	r2, #1
 800c200:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	7919      	ldrb	r1, [r3, #4]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c216:	b292      	uxth	r2, r2
 800c218:	9202      	str	r2, [sp, #8]
 800c21a:	2200      	movs	r2, #0
 800c21c:	9201      	str	r2, [sp, #4]
 800c21e:	9300      	str	r3, [sp, #0]
 800c220:	4603      	mov	r3, r0
 800c222:	2280      	movs	r2, #128	; 0x80
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f001 f865 	bl	800d2f4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	7959      	ldrb	r1, [r3, #5]
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c23e:	b292      	uxth	r2, r2
 800c240:	9202      	str	r2, [sp, #8]
 800c242:	2200      	movs	r2, #0
 800c244:	9201      	str	r2, [sp, #4]
 800c246:	9300      	str	r3, [sp, #0]
 800c248:	4603      	mov	r3, r0
 800c24a:	2200      	movs	r2, #0
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f001 f851 	bl	800d2f4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c252:	e175      	b.n	800c540 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c254:	7bbb      	ldrb	r3, [r7, #14]
 800c256:	2b03      	cmp	r3, #3
 800c258:	f040 8172 	bne.w	800c540 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c262:	3301      	adds	r3, #1
 800c264:	b2da      	uxtb	r2, r3
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c272:	2b03      	cmp	r3, #3
 800c274:	d903      	bls.n	800c27e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	220d      	movs	r2, #13
 800c27a:	701a      	strb	r2, [r3, #0]
      break;
 800c27c:	e160      	b.n	800c540 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	795b      	ldrb	r3, [r3, #5]
 800c282:	4619      	mov	r1, r3
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f001 f885 	bl	800d394 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	791b      	ldrb	r3, [r3, #4]
 800c28e:	4619      	mov	r1, r3
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f001 f87f 	bl	800d394 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2200      	movs	r2, #0
 800c29a:	701a      	strb	r2, [r3, #0]
      break;
 800c29c:	e150      	b.n	800c540 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c29e:	2112      	movs	r1, #18
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f000 f9f1 	bl	800c688 <USBH_Get_DevDesc>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c2aa:	7bbb      	ldrb	r3, [r7, #14]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d103      	bne.n	800c2b8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2202      	movs	r2, #2
 800c2b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c2b6:	e145      	b.n	800c544 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c2b8:	7bbb      	ldrb	r3, [r7, #14]
 800c2ba:	2b03      	cmp	r3, #3
 800c2bc:	f040 8142 	bne.w	800c544 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	b2da      	uxtb	r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c2d6:	2b03      	cmp	r3, #3
 800c2d8:	d903      	bls.n	800c2e2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	220d      	movs	r2, #13
 800c2de:	701a      	strb	r2, [r3, #0]
      break;
 800c2e0:	e130      	b.n	800c544 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	795b      	ldrb	r3, [r3, #5]
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f001 f853 	bl	800d394 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	791b      	ldrb	r3, [r3, #4]
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f001 f84d 	bl	800d394 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2200      	movs	r2, #0
 800c304:	701a      	strb	r2, [r3, #0]
      break;
 800c306:	e11d      	b.n	800c544 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c308:	2101      	movs	r1, #1
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 fa68 	bl	800c7e0 <USBH_SetAddress>
 800c310:	4603      	mov	r3, r0
 800c312:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c314:	7bbb      	ldrb	r3, [r7, #14]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d132      	bne.n	800c380 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c31a:	2002      	movs	r0, #2
 800c31c:	f005 f860 	bl	80113e0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2201      	movs	r2, #1
 800c324:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2203      	movs	r2, #3
 800c32c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	7919      	ldrb	r1, [r3, #4]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c342:	b292      	uxth	r2, r2
 800c344:	9202      	str	r2, [sp, #8]
 800c346:	2200      	movs	r2, #0
 800c348:	9201      	str	r2, [sp, #4]
 800c34a:	9300      	str	r3, [sp, #0]
 800c34c:	4603      	mov	r3, r0
 800c34e:	2280      	movs	r2, #128	; 0x80
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f000 ffcf 	bl	800d2f4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	7959      	ldrb	r1, [r3, #5]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c366:	687a      	ldr	r2, [r7, #4]
 800c368:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c36a:	b292      	uxth	r2, r2
 800c36c:	9202      	str	r2, [sp, #8]
 800c36e:	2200      	movs	r2, #0
 800c370:	9201      	str	r2, [sp, #4]
 800c372:	9300      	str	r3, [sp, #0]
 800c374:	4603      	mov	r3, r0
 800c376:	2200      	movs	r2, #0
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f000 ffbb 	bl	800d2f4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c37e:	e0e3      	b.n	800c548 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c380:	7bbb      	ldrb	r3, [r7, #14]
 800c382:	2b03      	cmp	r3, #3
 800c384:	f040 80e0 	bne.w	800c548 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	220d      	movs	r2, #13
 800c38c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2200      	movs	r2, #0
 800c392:	705a      	strb	r2, [r3, #1]
      break;
 800c394:	e0d8      	b.n	800c548 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c396:	2109      	movs	r1, #9
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f000 f99d 	bl	800c6d8 <USBH_Get_CfgDesc>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c3a2:	7bbb      	ldrb	r3, [r7, #14]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d103      	bne.n	800c3b0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2204      	movs	r2, #4
 800c3ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c3ae:	e0cd      	b.n	800c54c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c3b0:	7bbb      	ldrb	r3, [r7, #14]
 800c3b2:	2b03      	cmp	r3, #3
 800c3b4:	f040 80ca 	bne.w	800c54c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c3be:	3301      	adds	r3, #1
 800c3c0:	b2da      	uxtb	r2, r3
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c3ce:	2b03      	cmp	r3, #3
 800c3d0:	d903      	bls.n	800c3da <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	220d      	movs	r2, #13
 800c3d6:	701a      	strb	r2, [r3, #0]
      break;
 800c3d8:	e0b8      	b.n	800c54c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	795b      	ldrb	r3, [r3, #5]
 800c3de:	4619      	mov	r1, r3
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f000 ffd7 	bl	800d394 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	791b      	ldrb	r3, [r3, #4]
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 ffd1 	bl	800d394 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	701a      	strb	r2, [r3, #0]
      break;
 800c3fe:	e0a5      	b.n	800c54c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c406:	4619      	mov	r1, r3
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f000 f965 	bl	800c6d8 <USBH_Get_CfgDesc>
 800c40e:	4603      	mov	r3, r0
 800c410:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c412:	7bbb      	ldrb	r3, [r7, #14]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d103      	bne.n	800c420 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2205      	movs	r2, #5
 800c41c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c41e:	e097      	b.n	800c550 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c420:	7bbb      	ldrb	r3, [r7, #14]
 800c422:	2b03      	cmp	r3, #3
 800c424:	f040 8094 	bne.w	800c550 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c42e:	3301      	adds	r3, #1
 800c430:	b2da      	uxtb	r2, r3
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c43e:	2b03      	cmp	r3, #3
 800c440:	d903      	bls.n	800c44a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	220d      	movs	r2, #13
 800c446:	701a      	strb	r2, [r3, #0]
      break;
 800c448:	e082      	b.n	800c550 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	795b      	ldrb	r3, [r3, #5]
 800c44e:	4619      	mov	r1, r3
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 ff9f 	bl	800d394 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	791b      	ldrb	r3, [r3, #4]
 800c45a:	4619      	mov	r1, r3
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f000 ff99 	bl	800d394 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2200      	movs	r2, #0
 800c466:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2200      	movs	r2, #0
 800c46c:	701a      	strb	r2, [r3, #0]
      break;
 800c46e:	e06f      	b.n	800c550 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c476:	2b00      	cmp	r3, #0
 800c478:	d019      	beq.n	800c4ae <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c486:	23ff      	movs	r3, #255	; 0xff
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f000 f949 	bl	800c720 <USBH_Get_StringDesc>
 800c48e:	4603      	mov	r3, r0
 800c490:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c492:	7bbb      	ldrb	r3, [r7, #14]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d103      	bne.n	800c4a0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2206      	movs	r2, #6
 800c49c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c49e:	e059      	b.n	800c554 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c4a0:	7bbb      	ldrb	r3, [r7, #14]
 800c4a2:	2b03      	cmp	r3, #3
 800c4a4:	d156      	bne.n	800c554 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2206      	movs	r2, #6
 800c4aa:	705a      	strb	r2, [r3, #1]
      break;
 800c4ac:	e052      	b.n	800c554 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2206      	movs	r2, #6
 800c4b2:	705a      	strb	r2, [r3, #1]
      break;
 800c4b4:	e04e      	b.n	800c554 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d019      	beq.n	800c4f4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c4cc:	23ff      	movs	r3, #255	; 0xff
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 f926 	bl	800c720 <USBH_Get_StringDesc>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c4d8:	7bbb      	ldrb	r3, [r7, #14]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d103      	bne.n	800c4e6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2207      	movs	r2, #7
 800c4e2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c4e4:	e038      	b.n	800c558 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c4e6:	7bbb      	ldrb	r3, [r7, #14]
 800c4e8:	2b03      	cmp	r3, #3
 800c4ea:	d135      	bne.n	800c558 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2207      	movs	r2, #7
 800c4f0:	705a      	strb	r2, [r3, #1]
      break;
 800c4f2:	e031      	b.n	800c558 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2207      	movs	r2, #7
 800c4f8:	705a      	strb	r2, [r3, #1]
      break;
 800c4fa:	e02d      	b.n	800c558 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c502:	2b00      	cmp	r3, #0
 800c504:	d017      	beq.n	800c536 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c512:	23ff      	movs	r3, #255	; 0xff
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f000 f903 	bl	800c720 <USBH_Get_StringDesc>
 800c51a:	4603      	mov	r3, r0
 800c51c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c51e:	7bbb      	ldrb	r3, [r7, #14]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d102      	bne.n	800c52a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c524:	2300      	movs	r3, #0
 800c526:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c528:	e018      	b.n	800c55c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c52a:	7bbb      	ldrb	r3, [r7, #14]
 800c52c:	2b03      	cmp	r3, #3
 800c52e:	d115      	bne.n	800c55c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800c530:	2300      	movs	r3, #0
 800c532:	73fb      	strb	r3, [r7, #15]
      break;
 800c534:	e012      	b.n	800c55c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800c536:	2300      	movs	r3, #0
 800c538:	73fb      	strb	r3, [r7, #15]
      break;
 800c53a:	e00f      	b.n	800c55c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800c53c:	bf00      	nop
 800c53e:	e00e      	b.n	800c55e <USBH_HandleEnum+0x3be>
      break;
 800c540:	bf00      	nop
 800c542:	e00c      	b.n	800c55e <USBH_HandleEnum+0x3be>
      break;
 800c544:	bf00      	nop
 800c546:	e00a      	b.n	800c55e <USBH_HandleEnum+0x3be>
      break;
 800c548:	bf00      	nop
 800c54a:	e008      	b.n	800c55e <USBH_HandleEnum+0x3be>
      break;
 800c54c:	bf00      	nop
 800c54e:	e006      	b.n	800c55e <USBH_HandleEnum+0x3be>
      break;
 800c550:	bf00      	nop
 800c552:	e004      	b.n	800c55e <USBH_HandleEnum+0x3be>
      break;
 800c554:	bf00      	nop
 800c556:	e002      	b.n	800c55e <USBH_HandleEnum+0x3be>
      break;
 800c558:	bf00      	nop
 800c55a:	e000      	b.n	800c55e <USBH_HandleEnum+0x3be>
      break;
 800c55c:	bf00      	nop
  }
  return Status;
 800c55e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c560:	4618      	mov	r0, r3
 800c562:	3710      	adds	r7, #16
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c568:	b480      	push	{r7}
 800c56a:	b083      	sub	sp, #12
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	683a      	ldr	r2, [r7, #0]
 800c576:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c57a:	bf00      	nop
 800c57c:	370c      	adds	r7, #12
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr

0800c586 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c586:	b580      	push	{r7, lr}
 800c588:	b082      	sub	sp, #8
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c594:	1c5a      	adds	r2, r3, #1
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 f804 	bl	800c5aa <USBH_HandleSof>
}
 800c5a2:	bf00      	nop
 800c5a4:	3708      	adds	r7, #8
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}

0800c5aa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c5aa:	b580      	push	{r7, lr}
 800c5ac:	b082      	sub	sp, #8
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	781b      	ldrb	r3, [r3, #0]
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	2b0b      	cmp	r3, #11
 800c5ba:	d10a      	bne.n	800c5d2 <USBH_HandleSof+0x28>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d005      	beq.n	800c5d2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c5cc:	699b      	ldr	r3, [r3, #24]
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	4798      	blx	r3
  }
}
 800c5d2:	bf00      	nop
 800c5d4:	3708      	adds	r7, #8
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}

0800c5da <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c5da:	b480      	push	{r7}
 800c5dc:	b083      	sub	sp, #12
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2201      	movs	r2, #1
 800c5e6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800c5ea:	bf00      	nop
}
 800c5ec:	370c      	adds	r7, #12
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr

0800c5f6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c5f6:	b480      	push	{r7}
 800c5f8:	b083      	sub	sp, #12
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2200      	movs	r2, #0
 800c602:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c606:	bf00      	nop
}
 800c608:	370c      	adds	r7, #12
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr

0800c612 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c612:	b480      	push	{r7}
 800c614:	b083      	sub	sp, #12
 800c616:	af00      	add	r7, sp, #0
 800c618:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2201      	movs	r2, #1
 800c61e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2200      	movs	r2, #0
 800c626:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2200      	movs	r2, #0
 800c62e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c632:	2300      	movs	r3, #0
}
 800c634:	4618      	mov	r0, r3
 800c636:	370c      	adds	r7, #12
 800c638:	46bd      	mov	sp, r7
 800c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63e:	4770      	bx	lr

0800c640 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2201      	movs	r2, #1
 800c64c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2200      	movs	r2, #0
 800c654:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2200      	movs	r2, #0
 800c65c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f004 fd74 	bl	801114e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	791b      	ldrb	r3, [r3, #4]
 800c66a:	4619      	mov	r1, r3
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 fe91 	bl	800d394 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	795b      	ldrb	r3, [r3, #5]
 800c676:	4619      	mov	r1, r3
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f000 fe8b 	bl	800d394 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c67e:	2300      	movs	r3, #0
}
 800c680:	4618      	mov	r0, r3
 800c682:	3708      	adds	r7, #8
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}

0800c688 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b086      	sub	sp, #24
 800c68c:	af02      	add	r7, sp, #8
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	460b      	mov	r3, r1
 800c692:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c69a:	78fb      	ldrb	r3, [r7, #3]
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	9300      	str	r3, [sp, #0]
 800c6a0:	4613      	mov	r3, r2
 800c6a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c6a6:	2100      	movs	r1, #0
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f000 f864 	bl	800c776 <USBH_GetDescriptor>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800c6b2:	7bfb      	ldrb	r3, [r7, #15]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d10a      	bne.n	800c6ce <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c6c4:	78fa      	ldrb	r2, [r7, #3]
 800c6c6:	b292      	uxth	r2, r2
 800c6c8:	4619      	mov	r1, r3
 800c6ca:	f000 f918 	bl	800c8fe <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c6ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3710      	adds	r7, #16
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b086      	sub	sp, #24
 800c6dc:	af02      	add	r7, sp, #8
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	331c      	adds	r3, #28
 800c6e8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c6ea:	887b      	ldrh	r3, [r7, #2]
 800c6ec:	9300      	str	r3, [sp, #0]
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c6f4:	2100      	movs	r1, #0
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f000 f83d 	bl	800c776 <USBH_GetDescriptor>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800c700:	7bfb      	ldrb	r3, [r7, #15]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d107      	bne.n	800c716 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800c706:	887b      	ldrh	r3, [r7, #2]
 800c708:	461a      	mov	r2, r3
 800c70a:	68b9      	ldr	r1, [r7, #8]
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f000 f987 	bl	800ca20 <USBH_ParseCfgDesc>
 800c712:	4603      	mov	r3, r0
 800c714:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c716:	7bfb      	ldrb	r3, [r7, #15]
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3710      	adds	r7, #16
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b088      	sub	sp, #32
 800c724:	af02      	add	r7, sp, #8
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	607a      	str	r2, [r7, #4]
 800c72a:	461a      	mov	r2, r3
 800c72c:	460b      	mov	r3, r1
 800c72e:	72fb      	strb	r3, [r7, #11]
 800c730:	4613      	mov	r3, r2
 800c732:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800c734:	7afb      	ldrb	r3, [r7, #11]
 800c736:	b29b      	uxth	r3, r3
 800c738:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c73c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c744:	893b      	ldrh	r3, [r7, #8]
 800c746:	9300      	str	r3, [sp, #0]
 800c748:	460b      	mov	r3, r1
 800c74a:	2100      	movs	r1, #0
 800c74c:	68f8      	ldr	r0, [r7, #12]
 800c74e:	f000 f812 	bl	800c776 <USBH_GetDescriptor>
 800c752:	4603      	mov	r3, r0
 800c754:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c756:	7dfb      	ldrb	r3, [r7, #23]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d107      	bne.n	800c76c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c762:	893a      	ldrh	r2, [r7, #8]
 800c764:	6879      	ldr	r1, [r7, #4]
 800c766:	4618      	mov	r0, r3
 800c768:	f000 fb24 	bl	800cdb4 <USBH_ParseStringDesc>
  }

  return status;
 800c76c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3718      	adds	r7, #24
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}

0800c776 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c776:	b580      	push	{r7, lr}
 800c778:	b084      	sub	sp, #16
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	60f8      	str	r0, [r7, #12]
 800c77e:	607b      	str	r3, [r7, #4]
 800c780:	460b      	mov	r3, r1
 800c782:	72fb      	strb	r3, [r7, #11]
 800c784:	4613      	mov	r3, r2
 800c786:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	789b      	ldrb	r3, [r3, #2]
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	d11c      	bne.n	800c7ca <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c790:	7afb      	ldrb	r3, [r7, #11]
 800c792:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c796:	b2da      	uxtb	r2, r3
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2206      	movs	r2, #6
 800c7a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	893a      	ldrh	r2, [r7, #8]
 800c7a6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c7a8:	893b      	ldrh	r3, [r7, #8]
 800c7aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c7ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c7b2:	d104      	bne.n	800c7be <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f240 4209 	movw	r2, #1033	; 0x409
 800c7ba:	829a      	strh	r2, [r3, #20]
 800c7bc:	e002      	b.n	800c7c4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	8b3a      	ldrh	r2, [r7, #24]
 800c7c8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c7ca:	8b3b      	ldrh	r3, [r7, #24]
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	6879      	ldr	r1, [r7, #4]
 800c7d0:	68f8      	ldr	r0, [r7, #12]
 800c7d2:	f000 fb3d 	bl	800ce50 <USBH_CtlReq>
 800c7d6:	4603      	mov	r3, r0
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3710      	adds	r7, #16
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}

0800c7e0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b082      	sub	sp, #8
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	789b      	ldrb	r3, [r3, #2]
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	d10f      	bne.n	800c814 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2205      	movs	r2, #5
 800c7fe:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c800:	78fb      	ldrb	r3, [r7, #3]
 800c802:	b29a      	uxth	r2, r3
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2200      	movs	r2, #0
 800c812:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c814:	2200      	movs	r2, #0
 800c816:	2100      	movs	r1, #0
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 fb19 	bl	800ce50 <USBH_CtlReq>
 800c81e:	4603      	mov	r3, r0
}
 800c820:	4618      	mov	r0, r3
 800c822:	3708      	adds	r7, #8
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	460b      	mov	r3, r1
 800c832:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	789b      	ldrb	r3, [r3, #2]
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d10e      	bne.n	800c85a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2200      	movs	r2, #0
 800c840:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2209      	movs	r2, #9
 800c846:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	887a      	ldrh	r2, [r7, #2]
 800c84c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2200      	movs	r2, #0
 800c852:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2200      	movs	r2, #0
 800c858:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c85a:	2200      	movs	r2, #0
 800c85c:	2100      	movs	r1, #0
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 faf6 	bl	800ce50 <USBH_CtlReq>
 800c864:	4603      	mov	r3, r0
}
 800c866:	4618      	mov	r0, r3
 800c868:	3708      	adds	r7, #8
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}

0800c86e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c86e:	b580      	push	{r7, lr}
 800c870:	b082      	sub	sp, #8
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
 800c876:	460b      	mov	r3, r1
 800c878:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	789b      	ldrb	r3, [r3, #2]
 800c87e:	2b01      	cmp	r3, #1
 800c880:	d10f      	bne.n	800c8a2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2200      	movs	r2, #0
 800c886:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2203      	movs	r2, #3
 800c88c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c88e:	78fb      	ldrb	r3, [r7, #3]
 800c890:	b29a      	uxth	r2, r3
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2200      	movs	r2, #0
 800c89a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	2100      	movs	r1, #0
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f000 fad2 	bl	800ce50 <USBH_CtlReq>
 800c8ac:	4603      	mov	r3, r0
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3708      	adds	r7, #8
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}

0800c8b6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c8b6:	b580      	push	{r7, lr}
 800c8b8:	b082      	sub	sp, #8
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
 800c8be:	460b      	mov	r3, r1
 800c8c0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	789b      	ldrb	r3, [r3, #2]
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d10f      	bne.n	800c8ea <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2202      	movs	r2, #2
 800c8ce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c8dc:	78fb      	ldrb	r3, [r7, #3]
 800c8de:	b29a      	uxth	r2, r3
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	2100      	movs	r1, #0
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f000 faae 	bl	800ce50 <USBH_CtlReq>
 800c8f4:	4603      	mov	r3, r0
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3708      	adds	r7, #8
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}

0800c8fe <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c8fe:	b480      	push	{r7}
 800c900:	b085      	sub	sp, #20
 800c902:	af00      	add	r7, sp, #0
 800c904:	60f8      	str	r0, [r7, #12]
 800c906:	60b9      	str	r1, [r7, #8]
 800c908:	4613      	mov	r3, r2
 800c90a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	781a      	ldrb	r2, [r3, #0]
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	785a      	ldrb	r2, [r3, #1]
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	3302      	adds	r3, #2
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	b29a      	uxth	r2, r3
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	3303      	adds	r3, #3
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	b29b      	uxth	r3, r3
 800c92c:	021b      	lsls	r3, r3, #8
 800c92e:	b29b      	uxth	r3, r3
 800c930:	4313      	orrs	r3, r2
 800c932:	b29a      	uxth	r2, r3
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	791a      	ldrb	r2, [r3, #4]
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	795a      	ldrb	r2, [r3, #5]
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	799a      	ldrb	r2, [r3, #6]
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	79da      	ldrb	r2, [r3, #7]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	79db      	ldrb	r3, [r3, #7]
 800c95c:	2b20      	cmp	r3, #32
 800c95e:	dc11      	bgt.n	800c984 <USBH_ParseDevDesc+0x86>
 800c960:	2b08      	cmp	r3, #8
 800c962:	db16      	blt.n	800c992 <USBH_ParseDevDesc+0x94>
 800c964:	3b08      	subs	r3, #8
 800c966:	2201      	movs	r2, #1
 800c968:	fa02 f303 	lsl.w	r3, r2, r3
 800c96c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800c970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c974:	2b00      	cmp	r3, #0
 800c976:	bf14      	ite	ne
 800c978:	2301      	movne	r3, #1
 800c97a:	2300      	moveq	r3, #0
 800c97c:	b2db      	uxtb	r3, r3
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d102      	bne.n	800c988 <USBH_ParseDevDesc+0x8a>
 800c982:	e006      	b.n	800c992 <USBH_ParseDevDesc+0x94>
 800c984:	2b40      	cmp	r3, #64	; 0x40
 800c986:	d104      	bne.n	800c992 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	79da      	ldrb	r2, [r3, #7]
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	71da      	strb	r2, [r3, #7]
      break;
 800c990:	e003      	b.n	800c99a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	2240      	movs	r2, #64	; 0x40
 800c996:	71da      	strb	r2, [r3, #7]
      break;
 800c998:	bf00      	nop
  }

  if (length > 8U)
 800c99a:	88fb      	ldrh	r3, [r7, #6]
 800c99c:	2b08      	cmp	r3, #8
 800c99e:	d939      	bls.n	800ca14 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	3308      	adds	r3, #8
 800c9a4:	781b      	ldrb	r3, [r3, #0]
 800c9a6:	b29a      	uxth	r2, r3
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	3309      	adds	r3, #9
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	021b      	lsls	r3, r3, #8
 800c9b2:	b29b      	uxth	r3, r3
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	b29a      	uxth	r2, r3
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	330a      	adds	r3, #10
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	b29a      	uxth	r2, r3
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	330b      	adds	r3, #11
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	021b      	lsls	r3, r3, #8
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	4313      	orrs	r3, r2
 800c9d2:	b29a      	uxth	r2, r3
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	330c      	adds	r3, #12
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	b29a      	uxth	r2, r3
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	330d      	adds	r3, #13
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	021b      	lsls	r3, r3, #8
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	4313      	orrs	r3, r2
 800c9ee:	b29a      	uxth	r2, r3
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	7b9a      	ldrb	r2, [r3, #14]
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	7bda      	ldrb	r2, [r3, #15]
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	7c1a      	ldrb	r2, [r3, #16]
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	7c5a      	ldrb	r2, [r3, #17]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	745a      	strb	r2, [r3, #17]
  }
}
 800ca14:	bf00      	nop
 800ca16:	3714      	adds	r7, #20
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1e:	4770      	bx	lr

0800ca20 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b08c      	sub	sp, #48	; 0x30
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	60f8      	str	r0, [r7, #12]
 800ca28:	60b9      	str	r1, [r7, #8]
 800ca2a:	4613      	mov	r3, r2
 800ca2c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ca34:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800ca36:	2300      	movs	r3, #0
 800ca38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ca40:	2300      	movs	r3, #0
 800ca42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800ca46:	2300      	movs	r3, #0
 800ca48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	781a      	ldrb	r2, [r3, #0]
 800ca54:	6a3b      	ldr	r3, [r7, #32]
 800ca56:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	785a      	ldrb	r2, [r3, #1]
 800ca5c:	6a3b      	ldr	r3, [r7, #32]
 800ca5e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	3302      	adds	r3, #2
 800ca64:	781b      	ldrb	r3, [r3, #0]
 800ca66:	b29a      	uxth	r2, r3
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	3303      	adds	r3, #3
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	b29b      	uxth	r3, r3
 800ca70:	021b      	lsls	r3, r3, #8
 800ca72:	b29b      	uxth	r3, r3
 800ca74:	4313      	orrs	r3, r2
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca7c:	bf28      	it	cs
 800ca7e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800ca82:	b29a      	uxth	r2, r3
 800ca84:	6a3b      	ldr	r3, [r7, #32]
 800ca86:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	791a      	ldrb	r2, [r3, #4]
 800ca8c:	6a3b      	ldr	r3, [r7, #32]
 800ca8e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	795a      	ldrb	r2, [r3, #5]
 800ca94:	6a3b      	ldr	r3, [r7, #32]
 800ca96:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	799a      	ldrb	r2, [r3, #6]
 800ca9c:	6a3b      	ldr	r3, [r7, #32]
 800ca9e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	79da      	ldrb	r2, [r3, #7]
 800caa4:	6a3b      	ldr	r3, [r7, #32]
 800caa6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	7a1a      	ldrb	r2, [r3, #8]
 800caac:	6a3b      	ldr	r3, [r7, #32]
 800caae:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800cab0:	6a3b      	ldr	r3, [r7, #32]
 800cab2:	781b      	ldrb	r3, [r3, #0]
 800cab4:	2b09      	cmp	r3, #9
 800cab6:	d002      	beq.n	800cabe <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800cab8:	6a3b      	ldr	r3, [r7, #32]
 800caba:	2209      	movs	r2, #9
 800cabc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800cabe:	88fb      	ldrh	r3, [r7, #6]
 800cac0:	2b09      	cmp	r3, #9
 800cac2:	f240 809d 	bls.w	800cc00 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800cac6:	2309      	movs	r3, #9
 800cac8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800caca:	2300      	movs	r3, #0
 800cacc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cace:	e081      	b.n	800cbd4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cad0:	f107 0316 	add.w	r3, r7, #22
 800cad4:	4619      	mov	r1, r3
 800cad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cad8:	f000 f99f 	bl	800ce1a <USBH_GetNextDesc>
 800cadc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800cade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae0:	785b      	ldrb	r3, [r3, #1]
 800cae2:	2b04      	cmp	r3, #4
 800cae4:	d176      	bne.n	800cbd4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800cae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	2b09      	cmp	r3, #9
 800caec:	d002      	beq.n	800caf4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800caee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf0:	2209      	movs	r2, #9
 800caf2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800caf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caf8:	221a      	movs	r2, #26
 800cafa:	fb02 f303 	mul.w	r3, r2, r3
 800cafe:	3308      	adds	r3, #8
 800cb00:	6a3a      	ldr	r2, [r7, #32]
 800cb02:	4413      	add	r3, r2
 800cb04:	3302      	adds	r3, #2
 800cb06:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800cb08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb0a:	69f8      	ldr	r0, [r7, #28]
 800cb0c:	f000 f87e 	bl	800cc0c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800cb10:	2300      	movs	r3, #0
 800cb12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800cb16:	2300      	movs	r3, #0
 800cb18:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cb1a:	e043      	b.n	800cba4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cb1c:	f107 0316 	add.w	r3, r7, #22
 800cb20:	4619      	mov	r1, r3
 800cb22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb24:	f000 f979 	bl	800ce1a <USBH_GetNextDesc>
 800cb28:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb2c:	785b      	ldrb	r3, [r3, #1]
 800cb2e:	2b05      	cmp	r3, #5
 800cb30:	d138      	bne.n	800cba4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800cb32:	69fb      	ldr	r3, [r7, #28]
 800cb34:	795b      	ldrb	r3, [r3, #5]
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	d10f      	bne.n	800cb5a <USBH_ParseCfgDesc+0x13a>
 800cb3a:	69fb      	ldr	r3, [r7, #28]
 800cb3c:	799b      	ldrb	r3, [r3, #6]
 800cb3e:	2b02      	cmp	r3, #2
 800cb40:	d10b      	bne.n	800cb5a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800cb42:	69fb      	ldr	r3, [r7, #28]
 800cb44:	79db      	ldrb	r3, [r3, #7]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d10f      	bne.n	800cb6a <USBH_ParseCfgDesc+0x14a>
 800cb4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	2b09      	cmp	r3, #9
 800cb50:	d00b      	beq.n	800cb6a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800cb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb54:	2209      	movs	r2, #9
 800cb56:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800cb58:	e007      	b.n	800cb6a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800cb5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	2b07      	cmp	r3, #7
 800cb60:	d004      	beq.n	800cb6c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800cb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb64:	2207      	movs	r2, #7
 800cb66:	701a      	strb	r2, [r3, #0]
 800cb68:	e000      	b.n	800cb6c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800cb6a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800cb6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb70:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800cb74:	3201      	adds	r2, #1
 800cb76:	00d2      	lsls	r2, r2, #3
 800cb78:	211a      	movs	r1, #26
 800cb7a:	fb01 f303 	mul.w	r3, r1, r3
 800cb7e:	4413      	add	r3, r2
 800cb80:	3308      	adds	r3, #8
 800cb82:	6a3a      	ldr	r2, [r7, #32]
 800cb84:	4413      	add	r3, r2
 800cb86:	3304      	adds	r3, #4
 800cb88:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800cb8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb8c:	69b9      	ldr	r1, [r7, #24]
 800cb8e:	68f8      	ldr	r0, [r7, #12]
 800cb90:	f000 f86b 	bl	800cc6a <USBH_ParseEPDesc>
 800cb94:	4603      	mov	r3, r0
 800cb96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800cb9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb9e:	3301      	adds	r3, #1
 800cba0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cba4:	69fb      	ldr	r3, [r7, #28]
 800cba6:	791b      	ldrb	r3, [r3, #4]
 800cba8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d204      	bcs.n	800cbba <USBH_ParseCfgDesc+0x19a>
 800cbb0:	6a3b      	ldr	r3, [r7, #32]
 800cbb2:	885a      	ldrh	r2, [r3, #2]
 800cbb4:	8afb      	ldrh	r3, [r7, #22]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d8b0      	bhi.n	800cb1c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800cbba:	69fb      	ldr	r3, [r7, #28]
 800cbbc:	791b      	ldrb	r3, [r3, #4]
 800cbbe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d201      	bcs.n	800cbca <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800cbc6:	2303      	movs	r3, #3
 800cbc8:	e01c      	b.n	800cc04 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800cbca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbce:	3301      	adds	r3, #1
 800cbd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cbd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbd8:	2b01      	cmp	r3, #1
 800cbda:	d805      	bhi.n	800cbe8 <USBH_ParseCfgDesc+0x1c8>
 800cbdc:	6a3b      	ldr	r3, [r7, #32]
 800cbde:	885a      	ldrh	r2, [r3, #2]
 800cbe0:	8afb      	ldrh	r3, [r7, #22]
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	f63f af74 	bhi.w	800cad0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800cbe8:	6a3b      	ldr	r3, [r7, #32]
 800cbea:	791b      	ldrb	r3, [r3, #4]
 800cbec:	2b02      	cmp	r3, #2
 800cbee:	bf28      	it	cs
 800cbf0:	2302      	movcs	r3, #2
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d201      	bcs.n	800cc00 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800cbfc:	2303      	movs	r3, #3
 800cbfe:	e001      	b.n	800cc04 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800cc00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3730      	adds	r7, #48	; 0x30
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b083      	sub	sp, #12
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	781a      	ldrb	r2, [r3, #0]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	785a      	ldrb	r2, [r3, #1]
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	789a      	ldrb	r2, [r3, #2]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	78da      	ldrb	r2, [r3, #3]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	791a      	ldrb	r2, [r3, #4]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	795a      	ldrb	r2, [r3, #5]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	799a      	ldrb	r2, [r3, #6]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	79da      	ldrb	r2, [r3, #7]
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	7a1a      	ldrb	r2, [r3, #8]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	721a      	strb	r2, [r3, #8]
}
 800cc5e:	bf00      	nop
 800cc60:	370c      	adds	r7, #12
 800cc62:	46bd      	mov	sp, r7
 800cc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc68:	4770      	bx	lr

0800cc6a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800cc6a:	b480      	push	{r7}
 800cc6c:	b087      	sub	sp, #28
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	60f8      	str	r0, [r7, #12]
 800cc72:	60b9      	str	r1, [r7, #8]
 800cc74:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800cc76:	2300      	movs	r3, #0
 800cc78:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	781a      	ldrb	r2, [r3, #0]
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	785a      	ldrb	r2, [r3, #1]
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	789a      	ldrb	r2, [r3, #2]
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	78da      	ldrb	r2, [r3, #3]
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	3304      	adds	r3, #4
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	b29a      	uxth	r2, r3
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	3305      	adds	r3, #5
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	b29b      	uxth	r3, r3
 800ccaa:	021b      	lsls	r3, r3, #8
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	b29a      	uxth	r2, r3
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	799a      	ldrb	r2, [r3, #6]
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	889b      	ldrh	r3, [r3, #4]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d102      	bne.n	800cccc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800ccc6:	2303      	movs	r3, #3
 800ccc8:	75fb      	strb	r3, [r7, #23]
 800ccca:	e033      	b.n	800cd34 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	889b      	ldrh	r3, [r3, #4]
 800ccd0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ccd4:	f023 0307 	bic.w	r3, r3, #7
 800ccd8:	b29a      	uxth	r2, r3
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	889b      	ldrh	r3, [r3, #4]
 800cce2:	b21a      	sxth	r2, r3
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	3304      	adds	r3, #4
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	b299      	uxth	r1, r3
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	3305      	adds	r3, #5
 800ccf0:	781b      	ldrb	r3, [r3, #0]
 800ccf2:	b29b      	uxth	r3, r3
 800ccf4:	021b      	lsls	r3, r3, #8
 800ccf6:	b29b      	uxth	r3, r3
 800ccf8:	430b      	orrs	r3, r1
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d110      	bne.n	800cd26 <USBH_ParseEPDesc+0xbc>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	3304      	adds	r3, #4
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	b299      	uxth	r1, r3
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	3305      	adds	r3, #5
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	b29b      	uxth	r3, r3
 800cd14:	021b      	lsls	r3, r3, #8
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	430b      	orrs	r3, r1
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	b21b      	sxth	r3, r3
 800cd1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd22:	b21b      	sxth	r3, r3
 800cd24:	e001      	b.n	800cd2a <USBH_ParseEPDesc+0xc0>
 800cd26:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	b21b      	sxth	r3, r3
 800cd2e:	b29a      	uxth	r2, r3
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d116      	bne.n	800cd6c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	78db      	ldrb	r3, [r3, #3]
 800cd42:	f003 0303 	and.w	r3, r3, #3
 800cd46:	2b01      	cmp	r3, #1
 800cd48:	d005      	beq.n	800cd56 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	78db      	ldrb	r3, [r3, #3]
 800cd4e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800cd52:	2b03      	cmp	r3, #3
 800cd54:	d127      	bne.n	800cda6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	799b      	ldrb	r3, [r3, #6]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d003      	beq.n	800cd66 <USBH_ParseEPDesc+0xfc>
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	799b      	ldrb	r3, [r3, #6]
 800cd62:	2b10      	cmp	r3, #16
 800cd64:	d91f      	bls.n	800cda6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800cd66:	2303      	movs	r3, #3
 800cd68:	75fb      	strb	r3, [r7, #23]
 800cd6a:	e01c      	b.n	800cda6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	78db      	ldrb	r3, [r3, #3]
 800cd70:	f003 0303 	and.w	r3, r3, #3
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	d10a      	bne.n	800cd8e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	799b      	ldrb	r3, [r3, #6]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d003      	beq.n	800cd88 <USBH_ParseEPDesc+0x11e>
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	799b      	ldrb	r3, [r3, #6]
 800cd84:	2b10      	cmp	r3, #16
 800cd86:	d90e      	bls.n	800cda6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800cd88:	2303      	movs	r3, #3
 800cd8a:	75fb      	strb	r3, [r7, #23]
 800cd8c:	e00b      	b.n	800cda6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	78db      	ldrb	r3, [r3, #3]
 800cd92:	f003 0303 	and.w	r3, r3, #3
 800cd96:	2b03      	cmp	r3, #3
 800cd98:	d105      	bne.n	800cda6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	799b      	ldrb	r3, [r3, #6]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d101      	bne.n	800cda6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800cda2:	2303      	movs	r3, #3
 800cda4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800cda6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	371c      	adds	r7, #28
 800cdac:	46bd      	mov	sp, r7
 800cdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb2:	4770      	bx	lr

0800cdb4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b087      	sub	sp, #28
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	60f8      	str	r0, [r7, #12]
 800cdbc:	60b9      	str	r1, [r7, #8]
 800cdbe:	4613      	mov	r3, r2
 800cdc0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	2b03      	cmp	r3, #3
 800cdca:	d120      	bne.n	800ce0e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	781b      	ldrb	r3, [r3, #0]
 800cdd0:	1e9a      	subs	r2, r3, #2
 800cdd2:	88fb      	ldrh	r3, [r7, #6]
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	bf28      	it	cs
 800cdd8:	4613      	movcs	r3, r2
 800cdda:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	3302      	adds	r3, #2
 800cde0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800cde2:	2300      	movs	r3, #0
 800cde4:	82fb      	strh	r3, [r7, #22]
 800cde6:	e00b      	b.n	800ce00 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800cde8:	8afb      	ldrh	r3, [r7, #22]
 800cdea:	68fa      	ldr	r2, [r7, #12]
 800cdec:	4413      	add	r3, r2
 800cdee:	781a      	ldrb	r2, [r3, #0]
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	701a      	strb	r2, [r3, #0]
      pdest++;
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800cdfa:	8afb      	ldrh	r3, [r7, #22]
 800cdfc:	3302      	adds	r3, #2
 800cdfe:	82fb      	strh	r3, [r7, #22]
 800ce00:	8afa      	ldrh	r2, [r7, #22]
 800ce02:	8abb      	ldrh	r3, [r7, #20]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d3ef      	bcc.n	800cde8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	701a      	strb	r2, [r3, #0]
  }
}
 800ce0e:	bf00      	nop
 800ce10:	371c      	adds	r7, #28
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr

0800ce1a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800ce1a:	b480      	push	{r7}
 800ce1c:	b085      	sub	sp, #20
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	6078      	str	r0, [r7, #4]
 800ce22:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	881a      	ldrh	r2, [r3, #0]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	4413      	add	r3, r2
 800ce30:	b29a      	uxth	r2, r3
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	4413      	add	r3, r2
 800ce40:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ce42:	68fb      	ldr	r3, [r7, #12]
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3714      	adds	r7, #20
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr

0800ce50 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b086      	sub	sp, #24
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	60b9      	str	r1, [r7, #8]
 800ce5a:	4613      	mov	r3, r2
 800ce5c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ce5e:	2301      	movs	r3, #1
 800ce60:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	789b      	ldrb	r3, [r3, #2]
 800ce66:	2b01      	cmp	r3, #1
 800ce68:	d002      	beq.n	800ce70 <USBH_CtlReq+0x20>
 800ce6a:	2b02      	cmp	r3, #2
 800ce6c:	d00f      	beq.n	800ce8e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ce6e:	e027      	b.n	800cec0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	68ba      	ldr	r2, [r7, #8]
 800ce74:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	88fa      	ldrh	r2, [r7, #6]
 800ce7a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2201      	movs	r2, #1
 800ce80:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	2202      	movs	r2, #2
 800ce86:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ce88:	2301      	movs	r3, #1
 800ce8a:	75fb      	strb	r3, [r7, #23]
      break;
 800ce8c:	e018      	b.n	800cec0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ce8e:	68f8      	ldr	r0, [r7, #12]
 800ce90:	f000 f81c 	bl	800cecc <USBH_HandleControl>
 800ce94:	4603      	mov	r3, r0
 800ce96:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ce98:	7dfb      	ldrb	r3, [r7, #23]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d002      	beq.n	800cea4 <USBH_CtlReq+0x54>
 800ce9e:	7dfb      	ldrb	r3, [r7, #23]
 800cea0:	2b03      	cmp	r3, #3
 800cea2:	d106      	bne.n	800ceb2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2201      	movs	r2, #1
 800cea8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2200      	movs	r2, #0
 800ceae:	761a      	strb	r2, [r3, #24]
      break;
 800ceb0:	e005      	b.n	800cebe <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ceb2:	7dfb      	ldrb	r3, [r7, #23]
 800ceb4:	2b02      	cmp	r3, #2
 800ceb6:	d102      	bne.n	800cebe <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	2201      	movs	r2, #1
 800cebc:	709a      	strb	r2, [r3, #2]
      break;
 800cebe:	bf00      	nop
  }
  return status;
 800cec0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3718      	adds	r7, #24
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}
	...

0800cecc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b086      	sub	sp, #24
 800ced0:	af02      	add	r7, sp, #8
 800ced2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ced4:	2301      	movs	r3, #1
 800ced6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ced8:	2300      	movs	r3, #0
 800ceda:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	7e1b      	ldrb	r3, [r3, #24]
 800cee0:	3b01      	subs	r3, #1
 800cee2:	2b0a      	cmp	r3, #10
 800cee4:	f200 8156 	bhi.w	800d194 <USBH_HandleControl+0x2c8>
 800cee8:	a201      	add	r2, pc, #4	; (adr r2, 800cef0 <USBH_HandleControl+0x24>)
 800ceea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceee:	bf00      	nop
 800cef0:	0800cf1d 	.word	0x0800cf1d
 800cef4:	0800cf37 	.word	0x0800cf37
 800cef8:	0800cfa1 	.word	0x0800cfa1
 800cefc:	0800cfc7 	.word	0x0800cfc7
 800cf00:	0800cfff 	.word	0x0800cfff
 800cf04:	0800d029 	.word	0x0800d029
 800cf08:	0800d07b 	.word	0x0800d07b
 800cf0c:	0800d09d 	.word	0x0800d09d
 800cf10:	0800d0d9 	.word	0x0800d0d9
 800cf14:	0800d0ff 	.word	0x0800d0ff
 800cf18:	0800d13d 	.word	0x0800d13d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f103 0110 	add.w	r1, r3, #16
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	795b      	ldrb	r3, [r3, #5]
 800cf26:	461a      	mov	r2, r3
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f000 f943 	bl	800d1b4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2202      	movs	r2, #2
 800cf32:	761a      	strb	r2, [r3, #24]
      break;
 800cf34:	e139      	b.n	800d1aa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	795b      	ldrb	r3, [r3, #5]
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f004 f9f5 	bl	801132c <USBH_LL_GetURBState>
 800cf42:	4603      	mov	r3, r0
 800cf44:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800cf46:	7bbb      	ldrb	r3, [r7, #14]
 800cf48:	2b01      	cmp	r3, #1
 800cf4a:	d11e      	bne.n	800cf8a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	7c1b      	ldrb	r3, [r3, #16]
 800cf50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cf54:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	8adb      	ldrh	r3, [r3, #22]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d00a      	beq.n	800cf74 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800cf5e:	7b7b      	ldrb	r3, [r7, #13]
 800cf60:	2b80      	cmp	r3, #128	; 0x80
 800cf62:	d103      	bne.n	800cf6c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2203      	movs	r2, #3
 800cf68:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cf6a:	e115      	b.n	800d198 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2205      	movs	r2, #5
 800cf70:	761a      	strb	r2, [r3, #24]
      break;
 800cf72:	e111      	b.n	800d198 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800cf74:	7b7b      	ldrb	r3, [r7, #13]
 800cf76:	2b80      	cmp	r3, #128	; 0x80
 800cf78:	d103      	bne.n	800cf82 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2209      	movs	r2, #9
 800cf7e:	761a      	strb	r2, [r3, #24]
      break;
 800cf80:	e10a      	b.n	800d198 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2207      	movs	r2, #7
 800cf86:	761a      	strb	r2, [r3, #24]
      break;
 800cf88:	e106      	b.n	800d198 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800cf8a:	7bbb      	ldrb	r3, [r7, #14]
 800cf8c:	2b04      	cmp	r3, #4
 800cf8e:	d003      	beq.n	800cf98 <USBH_HandleControl+0xcc>
 800cf90:	7bbb      	ldrb	r3, [r7, #14]
 800cf92:	2b02      	cmp	r3, #2
 800cf94:	f040 8100 	bne.w	800d198 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	220b      	movs	r2, #11
 800cf9c:	761a      	strb	r2, [r3, #24]
      break;
 800cf9e:	e0fb      	b.n	800d198 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cfa6:	b29a      	uxth	r2, r3
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6899      	ldr	r1, [r3, #8]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	899a      	ldrh	r2, [r3, #12]
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	791b      	ldrb	r3, [r3, #4]
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f000 f93a 	bl	800d232 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2204      	movs	r2, #4
 800cfc2:	761a      	strb	r2, [r3, #24]
      break;
 800cfc4:	e0f1      	b.n	800d1aa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	791b      	ldrb	r3, [r3, #4]
 800cfca:	4619      	mov	r1, r3
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f004 f9ad 	bl	801132c <USBH_LL_GetURBState>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800cfd6:	7bbb      	ldrb	r3, [r7, #14]
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	d102      	bne.n	800cfe2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2209      	movs	r2, #9
 800cfe0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800cfe2:	7bbb      	ldrb	r3, [r7, #14]
 800cfe4:	2b05      	cmp	r3, #5
 800cfe6:	d102      	bne.n	800cfee <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800cfe8:	2303      	movs	r3, #3
 800cfea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cfec:	e0d6      	b.n	800d19c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800cfee:	7bbb      	ldrb	r3, [r7, #14]
 800cff0:	2b04      	cmp	r3, #4
 800cff2:	f040 80d3 	bne.w	800d19c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	220b      	movs	r2, #11
 800cffa:	761a      	strb	r2, [r3, #24]
      break;
 800cffc:	e0ce      	b.n	800d19c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6899      	ldr	r1, [r3, #8]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	899a      	ldrh	r2, [r3, #12]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	795b      	ldrb	r3, [r3, #5]
 800d00a:	2001      	movs	r0, #1
 800d00c:	9000      	str	r0, [sp, #0]
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f000 f8ea 	bl	800d1e8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d01a:	b29a      	uxth	r2, r3
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2206      	movs	r2, #6
 800d024:	761a      	strb	r2, [r3, #24]
      break;
 800d026:	e0c0      	b.n	800d1aa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	795b      	ldrb	r3, [r3, #5]
 800d02c:	4619      	mov	r1, r3
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f004 f97c 	bl	801132c <USBH_LL_GetURBState>
 800d034:	4603      	mov	r3, r0
 800d036:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d038:	7bbb      	ldrb	r3, [r7, #14]
 800d03a:	2b01      	cmp	r3, #1
 800d03c:	d103      	bne.n	800d046 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2207      	movs	r2, #7
 800d042:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d044:	e0ac      	b.n	800d1a0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800d046:	7bbb      	ldrb	r3, [r7, #14]
 800d048:	2b05      	cmp	r3, #5
 800d04a:	d105      	bne.n	800d058 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	220c      	movs	r2, #12
 800d050:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d052:	2303      	movs	r3, #3
 800d054:	73fb      	strb	r3, [r7, #15]
      break;
 800d056:	e0a3      	b.n	800d1a0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d058:	7bbb      	ldrb	r3, [r7, #14]
 800d05a:	2b02      	cmp	r3, #2
 800d05c:	d103      	bne.n	800d066 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2205      	movs	r2, #5
 800d062:	761a      	strb	r2, [r3, #24]
      break;
 800d064:	e09c      	b.n	800d1a0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800d066:	7bbb      	ldrb	r3, [r7, #14]
 800d068:	2b04      	cmp	r3, #4
 800d06a:	f040 8099 	bne.w	800d1a0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	220b      	movs	r2, #11
 800d072:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d074:	2302      	movs	r3, #2
 800d076:	73fb      	strb	r3, [r7, #15]
      break;
 800d078:	e092      	b.n	800d1a0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	791b      	ldrb	r3, [r3, #4]
 800d07e:	2200      	movs	r2, #0
 800d080:	2100      	movs	r1, #0
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f000 f8d5 	bl	800d232 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d08e:	b29a      	uxth	r2, r3
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2208      	movs	r2, #8
 800d098:	761a      	strb	r2, [r3, #24]

      break;
 800d09a:	e086      	b.n	800d1aa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	791b      	ldrb	r3, [r3, #4]
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f004 f942 	bl	801132c <USBH_LL_GetURBState>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d0ac:	7bbb      	ldrb	r3, [r7, #14]
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	d105      	bne.n	800d0be <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	220d      	movs	r2, #13
 800d0b6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d0bc:	e072      	b.n	800d1a4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800d0be:	7bbb      	ldrb	r3, [r7, #14]
 800d0c0:	2b04      	cmp	r3, #4
 800d0c2:	d103      	bne.n	800d0cc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	220b      	movs	r2, #11
 800d0c8:	761a      	strb	r2, [r3, #24]
      break;
 800d0ca:	e06b      	b.n	800d1a4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800d0cc:	7bbb      	ldrb	r3, [r7, #14]
 800d0ce:	2b05      	cmp	r3, #5
 800d0d0:	d168      	bne.n	800d1a4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800d0d2:	2303      	movs	r3, #3
 800d0d4:	73fb      	strb	r3, [r7, #15]
      break;
 800d0d6:	e065      	b.n	800d1a4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	795b      	ldrb	r3, [r3, #5]
 800d0dc:	2201      	movs	r2, #1
 800d0de:	9200      	str	r2, [sp, #0]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	2100      	movs	r1, #0
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f000 f87f 	bl	800d1e8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d0f0:	b29a      	uxth	r2, r3
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	220a      	movs	r2, #10
 800d0fa:	761a      	strb	r2, [r3, #24]
      break;
 800d0fc:	e055      	b.n	800d1aa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	795b      	ldrb	r3, [r3, #5]
 800d102:	4619      	mov	r1, r3
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f004 f911 	bl	801132c <USBH_LL_GetURBState>
 800d10a:	4603      	mov	r3, r0
 800d10c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d10e:	7bbb      	ldrb	r3, [r7, #14]
 800d110:	2b01      	cmp	r3, #1
 800d112:	d105      	bne.n	800d120 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800d114:	2300      	movs	r3, #0
 800d116:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	220d      	movs	r2, #13
 800d11c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d11e:	e043      	b.n	800d1a8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d120:	7bbb      	ldrb	r3, [r7, #14]
 800d122:	2b02      	cmp	r3, #2
 800d124:	d103      	bne.n	800d12e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2209      	movs	r2, #9
 800d12a:	761a      	strb	r2, [r3, #24]
      break;
 800d12c:	e03c      	b.n	800d1a8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800d12e:	7bbb      	ldrb	r3, [r7, #14]
 800d130:	2b04      	cmp	r3, #4
 800d132:	d139      	bne.n	800d1a8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	220b      	movs	r2, #11
 800d138:	761a      	strb	r2, [r3, #24]
      break;
 800d13a:	e035      	b.n	800d1a8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	7e5b      	ldrb	r3, [r3, #25]
 800d140:	3301      	adds	r3, #1
 800d142:	b2da      	uxtb	r2, r3
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	765a      	strb	r2, [r3, #25]
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	7e5b      	ldrb	r3, [r3, #25]
 800d14c:	2b02      	cmp	r3, #2
 800d14e:	d806      	bhi.n	800d15e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2201      	movs	r2, #1
 800d154:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2201      	movs	r2, #1
 800d15a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d15c:	e025      	b.n	800d1aa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d164:	2106      	movs	r1, #6
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2200      	movs	r2, #0
 800d16e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	795b      	ldrb	r3, [r3, #5]
 800d174:	4619      	mov	r1, r3
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f000 f90c 	bl	800d394 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	791b      	ldrb	r3, [r3, #4]
 800d180:	4619      	mov	r1, r3
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 f906 	bl	800d394 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2200      	movs	r2, #0
 800d18c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d18e:	2302      	movs	r3, #2
 800d190:	73fb      	strb	r3, [r7, #15]
      break;
 800d192:	e00a      	b.n	800d1aa <USBH_HandleControl+0x2de>

    default:
      break;
 800d194:	bf00      	nop
 800d196:	e008      	b.n	800d1aa <USBH_HandleControl+0x2de>
      break;
 800d198:	bf00      	nop
 800d19a:	e006      	b.n	800d1aa <USBH_HandleControl+0x2de>
      break;
 800d19c:	bf00      	nop
 800d19e:	e004      	b.n	800d1aa <USBH_HandleControl+0x2de>
      break;
 800d1a0:	bf00      	nop
 800d1a2:	e002      	b.n	800d1aa <USBH_HandleControl+0x2de>
      break;
 800d1a4:	bf00      	nop
 800d1a6:	e000      	b.n	800d1aa <USBH_HandleControl+0x2de>
      break;
 800d1a8:	bf00      	nop
  }

  return status;
 800d1aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3710      	adds	r7, #16
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}

0800d1b4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b088      	sub	sp, #32
 800d1b8:	af04      	add	r7, sp, #16
 800d1ba:	60f8      	str	r0, [r7, #12]
 800d1bc:	60b9      	str	r1, [r7, #8]
 800d1be:	4613      	mov	r3, r2
 800d1c0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d1c2:	79f9      	ldrb	r1, [r7, #7]
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	9303      	str	r3, [sp, #12]
 800d1c8:	2308      	movs	r3, #8
 800d1ca:	9302      	str	r3, [sp, #8]
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	9301      	str	r3, [sp, #4]
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	9300      	str	r3, [sp, #0]
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	68f8      	ldr	r0, [r7, #12]
 800d1da:	f004 f876 	bl	80112ca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800d1de:	2300      	movs	r3, #0
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3710      	adds	r7, #16
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b088      	sub	sp, #32
 800d1ec:	af04      	add	r7, sp, #16
 800d1ee:	60f8      	str	r0, [r7, #12]
 800d1f0:	60b9      	str	r1, [r7, #8]
 800d1f2:	4611      	mov	r1, r2
 800d1f4:	461a      	mov	r2, r3
 800d1f6:	460b      	mov	r3, r1
 800d1f8:	80fb      	strh	r3, [r7, #6]
 800d1fa:	4613      	mov	r3, r2
 800d1fc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d204:	2b00      	cmp	r3, #0
 800d206:	d001      	beq.n	800d20c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d208:	2300      	movs	r3, #0
 800d20a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d20c:	7979      	ldrb	r1, [r7, #5]
 800d20e:	7e3b      	ldrb	r3, [r7, #24]
 800d210:	9303      	str	r3, [sp, #12]
 800d212:	88fb      	ldrh	r3, [r7, #6]
 800d214:	9302      	str	r3, [sp, #8]
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	9301      	str	r3, [sp, #4]
 800d21a:	2301      	movs	r3, #1
 800d21c:	9300      	str	r3, [sp, #0]
 800d21e:	2300      	movs	r3, #0
 800d220:	2200      	movs	r2, #0
 800d222:	68f8      	ldr	r0, [r7, #12]
 800d224:	f004 f851 	bl	80112ca <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d228:	2300      	movs	r3, #0
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}

0800d232 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d232:	b580      	push	{r7, lr}
 800d234:	b088      	sub	sp, #32
 800d236:	af04      	add	r7, sp, #16
 800d238:	60f8      	str	r0, [r7, #12]
 800d23a:	60b9      	str	r1, [r7, #8]
 800d23c:	4611      	mov	r1, r2
 800d23e:	461a      	mov	r2, r3
 800d240:	460b      	mov	r3, r1
 800d242:	80fb      	strh	r3, [r7, #6]
 800d244:	4613      	mov	r3, r2
 800d246:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d248:	7979      	ldrb	r1, [r7, #5]
 800d24a:	2300      	movs	r3, #0
 800d24c:	9303      	str	r3, [sp, #12]
 800d24e:	88fb      	ldrh	r3, [r7, #6]
 800d250:	9302      	str	r3, [sp, #8]
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	9301      	str	r3, [sp, #4]
 800d256:	2301      	movs	r3, #1
 800d258:	9300      	str	r3, [sp, #0]
 800d25a:	2300      	movs	r3, #0
 800d25c:	2201      	movs	r2, #1
 800d25e:	68f8      	ldr	r0, [r7, #12]
 800d260:	f004 f833 	bl	80112ca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d264:	2300      	movs	r3, #0

}
 800d266:	4618      	mov	r0, r3
 800d268:	3710      	adds	r7, #16
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}

0800d26e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d26e:	b580      	push	{r7, lr}
 800d270:	b088      	sub	sp, #32
 800d272:	af04      	add	r7, sp, #16
 800d274:	60f8      	str	r0, [r7, #12]
 800d276:	60b9      	str	r1, [r7, #8]
 800d278:	4611      	mov	r1, r2
 800d27a:	461a      	mov	r2, r3
 800d27c:	460b      	mov	r3, r1
 800d27e:	80fb      	strh	r3, [r7, #6]
 800d280:	4613      	mov	r3, r2
 800d282:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d001      	beq.n	800d292 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d28e:	2300      	movs	r3, #0
 800d290:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d292:	7979      	ldrb	r1, [r7, #5]
 800d294:	7e3b      	ldrb	r3, [r7, #24]
 800d296:	9303      	str	r3, [sp, #12]
 800d298:	88fb      	ldrh	r3, [r7, #6]
 800d29a:	9302      	str	r3, [sp, #8]
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	9301      	str	r3, [sp, #4]
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	9300      	str	r3, [sp, #0]
 800d2a4:	2302      	movs	r3, #2
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	68f8      	ldr	r0, [r7, #12]
 800d2aa:	f004 f80e 	bl	80112ca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d2ae:	2300      	movs	r3, #0
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3710      	adds	r7, #16
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}

0800d2b8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b088      	sub	sp, #32
 800d2bc:	af04      	add	r7, sp, #16
 800d2be:	60f8      	str	r0, [r7, #12]
 800d2c0:	60b9      	str	r1, [r7, #8]
 800d2c2:	4611      	mov	r1, r2
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	460b      	mov	r3, r1
 800d2c8:	80fb      	strh	r3, [r7, #6]
 800d2ca:	4613      	mov	r3, r2
 800d2cc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d2ce:	7979      	ldrb	r1, [r7, #5]
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	9303      	str	r3, [sp, #12]
 800d2d4:	88fb      	ldrh	r3, [r7, #6]
 800d2d6:	9302      	str	r3, [sp, #8]
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	9301      	str	r3, [sp, #4]
 800d2dc:	2301      	movs	r3, #1
 800d2de:	9300      	str	r3, [sp, #0]
 800d2e0:	2302      	movs	r3, #2
 800d2e2:	2201      	movs	r2, #1
 800d2e4:	68f8      	ldr	r0, [r7, #12]
 800d2e6:	f003 fff0 	bl	80112ca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d2ea:	2300      	movs	r3, #0
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3710      	adds	r7, #16
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b086      	sub	sp, #24
 800d2f8:	af04      	add	r7, sp, #16
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	4608      	mov	r0, r1
 800d2fe:	4611      	mov	r1, r2
 800d300:	461a      	mov	r2, r3
 800d302:	4603      	mov	r3, r0
 800d304:	70fb      	strb	r3, [r7, #3]
 800d306:	460b      	mov	r3, r1
 800d308:	70bb      	strb	r3, [r7, #2]
 800d30a:	4613      	mov	r3, r2
 800d30c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d30e:	7878      	ldrb	r0, [r7, #1]
 800d310:	78ba      	ldrb	r2, [r7, #2]
 800d312:	78f9      	ldrb	r1, [r7, #3]
 800d314:	8b3b      	ldrh	r3, [r7, #24]
 800d316:	9302      	str	r3, [sp, #8]
 800d318:	7d3b      	ldrb	r3, [r7, #20]
 800d31a:	9301      	str	r3, [sp, #4]
 800d31c:	7c3b      	ldrb	r3, [r7, #16]
 800d31e:	9300      	str	r3, [sp, #0]
 800d320:	4603      	mov	r3, r0
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	f003 ff83 	bl	801122e <USBH_LL_OpenPipe>

  return USBH_OK;
 800d328:	2300      	movs	r3, #0
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3708      	adds	r7, #8
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}

0800d332 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d332:	b580      	push	{r7, lr}
 800d334:	b082      	sub	sp, #8
 800d336:	af00      	add	r7, sp, #0
 800d338:	6078      	str	r0, [r7, #4]
 800d33a:	460b      	mov	r3, r1
 800d33c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d33e:	78fb      	ldrb	r3, [r7, #3]
 800d340:	4619      	mov	r1, r3
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f003 ffa2 	bl	801128c <USBH_LL_ClosePipe>

  return USBH_OK;
 800d348:	2300      	movs	r3, #0
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3708      	adds	r7, #8
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}

0800d352 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d352:	b580      	push	{r7, lr}
 800d354:	b084      	sub	sp, #16
 800d356:	af00      	add	r7, sp, #0
 800d358:	6078      	str	r0, [r7, #4]
 800d35a:	460b      	mov	r3, r1
 800d35c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f000 f836 	bl	800d3d0 <USBH_GetFreePipe>
 800d364:	4603      	mov	r3, r0
 800d366:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d368:	89fb      	ldrh	r3, [r7, #14]
 800d36a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d36e:	4293      	cmp	r3, r2
 800d370:	d00a      	beq.n	800d388 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d372:	78fa      	ldrb	r2, [r7, #3]
 800d374:	89fb      	ldrh	r3, [r7, #14]
 800d376:	f003 030f 	and.w	r3, r3, #15
 800d37a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d37e:	6879      	ldr	r1, [r7, #4]
 800d380:	33e0      	adds	r3, #224	; 0xe0
 800d382:	009b      	lsls	r3, r3, #2
 800d384:	440b      	add	r3, r1
 800d386:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d388:	89fb      	ldrh	r3, [r7, #14]
 800d38a:	b2db      	uxtb	r3, r3
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3710      	adds	r7, #16
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}

0800d394 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d394:	b480      	push	{r7}
 800d396:	b083      	sub	sp, #12
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	460b      	mov	r3, r1
 800d39e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d3a0:	78fb      	ldrb	r3, [r7, #3]
 800d3a2:	2b0f      	cmp	r3, #15
 800d3a4:	d80d      	bhi.n	800d3c2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d3a6:	78fb      	ldrb	r3, [r7, #3]
 800d3a8:	687a      	ldr	r2, [r7, #4]
 800d3aa:	33e0      	adds	r3, #224	; 0xe0
 800d3ac:	009b      	lsls	r3, r3, #2
 800d3ae:	4413      	add	r3, r2
 800d3b0:	685a      	ldr	r2, [r3, #4]
 800d3b2:	78fb      	ldrb	r3, [r7, #3]
 800d3b4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d3b8:	6879      	ldr	r1, [r7, #4]
 800d3ba:	33e0      	adds	r3, #224	; 0xe0
 800d3bc:	009b      	lsls	r3, r3, #2
 800d3be:	440b      	add	r3, r1
 800d3c0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d3c2:	2300      	movs	r3, #0
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	370c      	adds	r7, #12
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ce:	4770      	bx	lr

0800d3d0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b085      	sub	sp, #20
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d3dc:	2300      	movs	r3, #0
 800d3de:	73fb      	strb	r3, [r7, #15]
 800d3e0:	e00f      	b.n	800d402 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d3e2:	7bfb      	ldrb	r3, [r7, #15]
 800d3e4:	687a      	ldr	r2, [r7, #4]
 800d3e6:	33e0      	adds	r3, #224	; 0xe0
 800d3e8:	009b      	lsls	r3, r3, #2
 800d3ea:	4413      	add	r3, r2
 800d3ec:	685b      	ldr	r3, [r3, #4]
 800d3ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d102      	bne.n	800d3fc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d3f6:	7bfb      	ldrb	r3, [r7, #15]
 800d3f8:	b29b      	uxth	r3, r3
 800d3fa:	e007      	b.n	800d40c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d3fc:	7bfb      	ldrb	r3, [r7, #15]
 800d3fe:	3301      	adds	r3, #1
 800d400:	73fb      	strb	r3, [r7, #15]
 800d402:	7bfb      	ldrb	r3, [r7, #15]
 800d404:	2b0f      	cmp	r3, #15
 800d406:	d9ec      	bls.n	800d3e2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d408:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3714      	adds	r7, #20
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr

0800d418 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b084      	sub	sp, #16
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	4603      	mov	r3, r0
 800d420:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d422:	79fb      	ldrb	r3, [r7, #7]
 800d424:	4a08      	ldr	r2, [pc, #32]	; (800d448 <disk_status+0x30>)
 800d426:	009b      	lsls	r3, r3, #2
 800d428:	4413      	add	r3, r2
 800d42a:	685b      	ldr	r3, [r3, #4]
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	79fa      	ldrb	r2, [r7, #7]
 800d430:	4905      	ldr	r1, [pc, #20]	; (800d448 <disk_status+0x30>)
 800d432:	440a      	add	r2, r1
 800d434:	7a12      	ldrb	r2, [r2, #8]
 800d436:	4610      	mov	r0, r2
 800d438:	4798      	blx	r3
 800d43a:	4603      	mov	r3, r0
 800d43c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d43e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d440:	4618      	mov	r0, r3
 800d442:	3710      	adds	r7, #16
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}
 800d448:	20002e78 	.word	0x20002e78

0800d44c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b084      	sub	sp, #16
 800d450:	af00      	add	r7, sp, #0
 800d452:	4603      	mov	r3, r0
 800d454:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d456:	2300      	movs	r3, #0
 800d458:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d45a:	79fb      	ldrb	r3, [r7, #7]
 800d45c:	4a0d      	ldr	r2, [pc, #52]	; (800d494 <disk_initialize+0x48>)
 800d45e:	5cd3      	ldrb	r3, [r2, r3]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d111      	bne.n	800d488 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d464:	79fb      	ldrb	r3, [r7, #7]
 800d466:	4a0b      	ldr	r2, [pc, #44]	; (800d494 <disk_initialize+0x48>)
 800d468:	2101      	movs	r1, #1
 800d46a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d46c:	79fb      	ldrb	r3, [r7, #7]
 800d46e:	4a09      	ldr	r2, [pc, #36]	; (800d494 <disk_initialize+0x48>)
 800d470:	009b      	lsls	r3, r3, #2
 800d472:	4413      	add	r3, r2
 800d474:	685b      	ldr	r3, [r3, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	79fa      	ldrb	r2, [r7, #7]
 800d47a:	4906      	ldr	r1, [pc, #24]	; (800d494 <disk_initialize+0x48>)
 800d47c:	440a      	add	r2, r1
 800d47e:	7a12      	ldrb	r2, [r2, #8]
 800d480:	4610      	mov	r0, r2
 800d482:	4798      	blx	r3
 800d484:	4603      	mov	r3, r0
 800d486:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d488:	7bfb      	ldrb	r3, [r7, #15]
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3710      	adds	r7, #16
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}
 800d492:	bf00      	nop
 800d494:	20002e78 	.word	0x20002e78

0800d498 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d498:	b590      	push	{r4, r7, lr}
 800d49a:	b087      	sub	sp, #28
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	60b9      	str	r1, [r7, #8]
 800d4a0:	607a      	str	r2, [r7, #4]
 800d4a2:	603b      	str	r3, [r7, #0]
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d4a8:	7bfb      	ldrb	r3, [r7, #15]
 800d4aa:	4a0a      	ldr	r2, [pc, #40]	; (800d4d4 <disk_read+0x3c>)
 800d4ac:	009b      	lsls	r3, r3, #2
 800d4ae:	4413      	add	r3, r2
 800d4b0:	685b      	ldr	r3, [r3, #4]
 800d4b2:	689c      	ldr	r4, [r3, #8]
 800d4b4:	7bfb      	ldrb	r3, [r7, #15]
 800d4b6:	4a07      	ldr	r2, [pc, #28]	; (800d4d4 <disk_read+0x3c>)
 800d4b8:	4413      	add	r3, r2
 800d4ba:	7a18      	ldrb	r0, [r3, #8]
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	68b9      	ldr	r1, [r7, #8]
 800d4c2:	47a0      	blx	r4
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	75fb      	strb	r3, [r7, #23]
  return res;
 800d4c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	371c      	adds	r7, #28
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd90      	pop	{r4, r7, pc}
 800d4d2:	bf00      	nop
 800d4d4:	20002e78 	.word	0x20002e78

0800d4d8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d4d8:	b590      	push	{r4, r7, lr}
 800d4da:	b087      	sub	sp, #28
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	60b9      	str	r1, [r7, #8]
 800d4e0:	607a      	str	r2, [r7, #4]
 800d4e2:	603b      	str	r3, [r7, #0]
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d4e8:	7bfb      	ldrb	r3, [r7, #15]
 800d4ea:	4a0a      	ldr	r2, [pc, #40]	; (800d514 <disk_write+0x3c>)
 800d4ec:	009b      	lsls	r3, r3, #2
 800d4ee:	4413      	add	r3, r2
 800d4f0:	685b      	ldr	r3, [r3, #4]
 800d4f2:	68dc      	ldr	r4, [r3, #12]
 800d4f4:	7bfb      	ldrb	r3, [r7, #15]
 800d4f6:	4a07      	ldr	r2, [pc, #28]	; (800d514 <disk_write+0x3c>)
 800d4f8:	4413      	add	r3, r2
 800d4fa:	7a18      	ldrb	r0, [r3, #8]
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	687a      	ldr	r2, [r7, #4]
 800d500:	68b9      	ldr	r1, [r7, #8]
 800d502:	47a0      	blx	r4
 800d504:	4603      	mov	r3, r0
 800d506:	75fb      	strb	r3, [r7, #23]
  return res;
 800d508:	7dfb      	ldrb	r3, [r7, #23]
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	371c      	adds	r7, #28
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd90      	pop	{r4, r7, pc}
 800d512:	bf00      	nop
 800d514:	20002e78 	.word	0x20002e78

0800d518 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b084      	sub	sp, #16
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	4603      	mov	r3, r0
 800d520:	603a      	str	r2, [r7, #0]
 800d522:	71fb      	strb	r3, [r7, #7]
 800d524:	460b      	mov	r3, r1
 800d526:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d528:	79fb      	ldrb	r3, [r7, #7]
 800d52a:	4a09      	ldr	r2, [pc, #36]	; (800d550 <disk_ioctl+0x38>)
 800d52c:	009b      	lsls	r3, r3, #2
 800d52e:	4413      	add	r3, r2
 800d530:	685b      	ldr	r3, [r3, #4]
 800d532:	691b      	ldr	r3, [r3, #16]
 800d534:	79fa      	ldrb	r2, [r7, #7]
 800d536:	4906      	ldr	r1, [pc, #24]	; (800d550 <disk_ioctl+0x38>)
 800d538:	440a      	add	r2, r1
 800d53a:	7a10      	ldrb	r0, [r2, #8]
 800d53c:	79b9      	ldrb	r1, [r7, #6]
 800d53e:	683a      	ldr	r2, [r7, #0]
 800d540:	4798      	blx	r3
 800d542:	4603      	mov	r3, r0
 800d544:	73fb      	strb	r3, [r7, #15]
  return res;
 800d546:	7bfb      	ldrb	r3, [r7, #15]
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3710      	adds	r7, #16
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}
 800d550:	20002e78 	.word	0x20002e78

0800d554 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d554:	b480      	push	{r7}
 800d556:	b085      	sub	sp, #20
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	3301      	adds	r3, #1
 800d560:	781b      	ldrb	r3, [r3, #0]
 800d562:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d564:	89fb      	ldrh	r3, [r7, #14]
 800d566:	021b      	lsls	r3, r3, #8
 800d568:	b21a      	sxth	r2, r3
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	b21b      	sxth	r3, r3
 800d570:	4313      	orrs	r3, r2
 800d572:	b21b      	sxth	r3, r3
 800d574:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d576:	89fb      	ldrh	r3, [r7, #14]
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3714      	adds	r7, #20
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr

0800d584 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d584:	b480      	push	{r7}
 800d586:	b085      	sub	sp, #20
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	3303      	adds	r3, #3
 800d590:	781b      	ldrb	r3, [r3, #0]
 800d592:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	021b      	lsls	r3, r3, #8
 800d598:	687a      	ldr	r2, [r7, #4]
 800d59a:	3202      	adds	r2, #2
 800d59c:	7812      	ldrb	r2, [r2, #0]
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	021b      	lsls	r3, r3, #8
 800d5a6:	687a      	ldr	r2, [r7, #4]
 800d5a8:	3201      	adds	r2, #1
 800d5aa:	7812      	ldrb	r2, [r2, #0]
 800d5ac:	4313      	orrs	r3, r2
 800d5ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	021b      	lsls	r3, r3, #8
 800d5b4:	687a      	ldr	r2, [r7, #4]
 800d5b6:	7812      	ldrb	r2, [r2, #0]
 800d5b8:	4313      	orrs	r3, r2
 800d5ba:	60fb      	str	r3, [r7, #12]
	return rv;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3714      	adds	r7, #20
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c8:	4770      	bx	lr

0800d5ca <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d5ca:	b480      	push	{r7}
 800d5cc:	b083      	sub	sp, #12
 800d5ce:	af00      	add	r7, sp, #0
 800d5d0:	6078      	str	r0, [r7, #4]
 800d5d2:	460b      	mov	r3, r1
 800d5d4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	1c5a      	adds	r2, r3, #1
 800d5da:	607a      	str	r2, [r7, #4]
 800d5dc:	887a      	ldrh	r2, [r7, #2]
 800d5de:	b2d2      	uxtb	r2, r2
 800d5e0:	701a      	strb	r2, [r3, #0]
 800d5e2:	887b      	ldrh	r3, [r7, #2]
 800d5e4:	0a1b      	lsrs	r3, r3, #8
 800d5e6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	1c5a      	adds	r2, r3, #1
 800d5ec:	607a      	str	r2, [r7, #4]
 800d5ee:	887a      	ldrh	r2, [r7, #2]
 800d5f0:	b2d2      	uxtb	r2, r2
 800d5f2:	701a      	strb	r2, [r3, #0]
}
 800d5f4:	bf00      	nop
 800d5f6:	370c      	adds	r7, #12
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr

0800d600 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d600:	b480      	push	{r7}
 800d602:	b083      	sub	sp, #12
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
 800d608:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	1c5a      	adds	r2, r3, #1
 800d60e:	607a      	str	r2, [r7, #4]
 800d610:	683a      	ldr	r2, [r7, #0]
 800d612:	b2d2      	uxtb	r2, r2
 800d614:	701a      	strb	r2, [r3, #0]
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	0a1b      	lsrs	r3, r3, #8
 800d61a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	1c5a      	adds	r2, r3, #1
 800d620:	607a      	str	r2, [r7, #4]
 800d622:	683a      	ldr	r2, [r7, #0]
 800d624:	b2d2      	uxtb	r2, r2
 800d626:	701a      	strb	r2, [r3, #0]
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	0a1b      	lsrs	r3, r3, #8
 800d62c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	1c5a      	adds	r2, r3, #1
 800d632:	607a      	str	r2, [r7, #4]
 800d634:	683a      	ldr	r2, [r7, #0]
 800d636:	b2d2      	uxtb	r2, r2
 800d638:	701a      	strb	r2, [r3, #0]
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	0a1b      	lsrs	r3, r3, #8
 800d63e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	1c5a      	adds	r2, r3, #1
 800d644:	607a      	str	r2, [r7, #4]
 800d646:	683a      	ldr	r2, [r7, #0]
 800d648:	b2d2      	uxtb	r2, r2
 800d64a:	701a      	strb	r2, [r3, #0]
}
 800d64c:	bf00      	nop
 800d64e:	370c      	adds	r7, #12
 800d650:	46bd      	mov	sp, r7
 800d652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d656:	4770      	bx	lr

0800d658 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d658:	b480      	push	{r7}
 800d65a:	b087      	sub	sp, #28
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	60f8      	str	r0, [r7, #12]
 800d660:	60b9      	str	r1, [r7, #8]
 800d662:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d00d      	beq.n	800d68e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d672:	693a      	ldr	r2, [r7, #16]
 800d674:	1c53      	adds	r3, r2, #1
 800d676:	613b      	str	r3, [r7, #16]
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	1c59      	adds	r1, r3, #1
 800d67c:	6179      	str	r1, [r7, #20]
 800d67e:	7812      	ldrb	r2, [r2, #0]
 800d680:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	3b01      	subs	r3, #1
 800d686:	607b      	str	r3, [r7, #4]
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d1f1      	bne.n	800d672 <mem_cpy+0x1a>
	}
}
 800d68e:	bf00      	nop
 800d690:	371c      	adds	r7, #28
 800d692:	46bd      	mov	sp, r7
 800d694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d698:	4770      	bx	lr

0800d69a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d69a:	b480      	push	{r7}
 800d69c:	b087      	sub	sp, #28
 800d69e:	af00      	add	r7, sp, #0
 800d6a0:	60f8      	str	r0, [r7, #12]
 800d6a2:	60b9      	str	r1, [r7, #8]
 800d6a4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	1c5a      	adds	r2, r3, #1
 800d6ae:	617a      	str	r2, [r7, #20]
 800d6b0:	68ba      	ldr	r2, [r7, #8]
 800d6b2:	b2d2      	uxtb	r2, r2
 800d6b4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	3b01      	subs	r3, #1
 800d6ba:	607b      	str	r3, [r7, #4]
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d1f3      	bne.n	800d6aa <mem_set+0x10>
}
 800d6c2:	bf00      	nop
 800d6c4:	bf00      	nop
 800d6c6:	371c      	adds	r7, #28
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr

0800d6d0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d6d0:	b480      	push	{r7}
 800d6d2:	b089      	sub	sp, #36	; 0x24
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	60b9      	str	r1, [r7, #8]
 800d6da:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	61fb      	str	r3, [r7, #28]
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d6e8:	69fb      	ldr	r3, [r7, #28]
 800d6ea:	1c5a      	adds	r2, r3, #1
 800d6ec:	61fa      	str	r2, [r7, #28]
 800d6ee:	781b      	ldrb	r3, [r3, #0]
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	69bb      	ldr	r3, [r7, #24]
 800d6f4:	1c5a      	adds	r2, r3, #1
 800d6f6:	61ba      	str	r2, [r7, #24]
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	1acb      	subs	r3, r1, r3
 800d6fc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	3b01      	subs	r3, #1
 800d702:	607b      	str	r3, [r7, #4]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d002      	beq.n	800d710 <mem_cmp+0x40>
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d0eb      	beq.n	800d6e8 <mem_cmp+0x18>

	return r;
 800d710:	697b      	ldr	r3, [r7, #20]
}
 800d712:	4618      	mov	r0, r3
 800d714:	3724      	adds	r7, #36	; 0x24
 800d716:	46bd      	mov	sp, r7
 800d718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71c:	4770      	bx	lr

0800d71e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d71e:	b480      	push	{r7}
 800d720:	b083      	sub	sp, #12
 800d722:	af00      	add	r7, sp, #0
 800d724:	6078      	str	r0, [r7, #4]
 800d726:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d728:	e002      	b.n	800d730 <chk_chr+0x12>
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	3301      	adds	r3, #1
 800d72e:	607b      	str	r3, [r7, #4]
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d005      	beq.n	800d744 <chk_chr+0x26>
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	461a      	mov	r2, r3
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	4293      	cmp	r3, r2
 800d742:	d1f2      	bne.n	800d72a <chk_chr+0xc>
	return *str;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	781b      	ldrb	r3, [r3, #0]
}
 800d748:	4618      	mov	r0, r3
 800d74a:	370c      	adds	r7, #12
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr

0800d754 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d754:	b480      	push	{r7}
 800d756:	b085      	sub	sp, #20
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d75e:	2300      	movs	r3, #0
 800d760:	60bb      	str	r3, [r7, #8]
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	60fb      	str	r3, [r7, #12]
 800d766:	e029      	b.n	800d7bc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d768:	4a27      	ldr	r2, [pc, #156]	; (800d808 <chk_lock+0xb4>)
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	011b      	lsls	r3, r3, #4
 800d76e:	4413      	add	r3, r2
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d01d      	beq.n	800d7b2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d776:	4a24      	ldr	r2, [pc, #144]	; (800d808 <chk_lock+0xb4>)
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	011b      	lsls	r3, r3, #4
 800d77c:	4413      	add	r3, r2
 800d77e:	681a      	ldr	r2, [r3, #0]
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	429a      	cmp	r2, r3
 800d786:	d116      	bne.n	800d7b6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d788:	4a1f      	ldr	r2, [pc, #124]	; (800d808 <chk_lock+0xb4>)
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	011b      	lsls	r3, r3, #4
 800d78e:	4413      	add	r3, r2
 800d790:	3304      	adds	r3, #4
 800d792:	681a      	ldr	r2, [r3, #0]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d798:	429a      	cmp	r2, r3
 800d79a:	d10c      	bne.n	800d7b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d79c:	4a1a      	ldr	r2, [pc, #104]	; (800d808 <chk_lock+0xb4>)
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	011b      	lsls	r3, r3, #4
 800d7a2:	4413      	add	r3, r2
 800d7a4:	3308      	adds	r3, #8
 800d7a6:	681a      	ldr	r2, [r3, #0]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d102      	bne.n	800d7b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d7b0:	e007      	b.n	800d7c2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	60fb      	str	r3, [r7, #12]
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	2b01      	cmp	r3, #1
 800d7c0:	d9d2      	bls.n	800d768 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	2b02      	cmp	r3, #2
 800d7c6:	d109      	bne.n	800d7dc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d102      	bne.n	800d7d4 <chk_lock+0x80>
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	2b02      	cmp	r3, #2
 800d7d2:	d101      	bne.n	800d7d8 <chk_lock+0x84>
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	e010      	b.n	800d7fa <chk_lock+0xa6>
 800d7d8:	2312      	movs	r3, #18
 800d7da:	e00e      	b.n	800d7fa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d108      	bne.n	800d7f4 <chk_lock+0xa0>
 800d7e2:	4a09      	ldr	r2, [pc, #36]	; (800d808 <chk_lock+0xb4>)
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	011b      	lsls	r3, r3, #4
 800d7e8:	4413      	add	r3, r2
 800d7ea:	330c      	adds	r3, #12
 800d7ec:	881b      	ldrh	r3, [r3, #0]
 800d7ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7f2:	d101      	bne.n	800d7f8 <chk_lock+0xa4>
 800d7f4:	2310      	movs	r3, #16
 800d7f6:	e000      	b.n	800d7fa <chk_lock+0xa6>
 800d7f8:	2300      	movs	r3, #0
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3714      	adds	r7, #20
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr
 800d806:	bf00      	nop
 800d808:	20002c58 	.word	0x20002c58

0800d80c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d80c:	b480      	push	{r7}
 800d80e:	b083      	sub	sp, #12
 800d810:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d812:	2300      	movs	r3, #0
 800d814:	607b      	str	r3, [r7, #4]
 800d816:	e002      	b.n	800d81e <enq_lock+0x12>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	3301      	adds	r3, #1
 800d81c:	607b      	str	r3, [r7, #4]
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2b01      	cmp	r3, #1
 800d822:	d806      	bhi.n	800d832 <enq_lock+0x26>
 800d824:	4a09      	ldr	r2, [pc, #36]	; (800d84c <enq_lock+0x40>)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	011b      	lsls	r3, r3, #4
 800d82a:	4413      	add	r3, r2
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d1f2      	bne.n	800d818 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2b02      	cmp	r3, #2
 800d836:	bf14      	ite	ne
 800d838:	2301      	movne	r3, #1
 800d83a:	2300      	moveq	r3, #0
 800d83c:	b2db      	uxtb	r3, r3
}
 800d83e:	4618      	mov	r0, r3
 800d840:	370c      	adds	r7, #12
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr
 800d84a:	bf00      	nop
 800d84c:	20002c58 	.word	0x20002c58

0800d850 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d850:	b480      	push	{r7}
 800d852:	b085      	sub	sp, #20
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d85a:	2300      	movs	r3, #0
 800d85c:	60fb      	str	r3, [r7, #12]
 800d85e:	e01f      	b.n	800d8a0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d860:	4a41      	ldr	r2, [pc, #260]	; (800d968 <inc_lock+0x118>)
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	011b      	lsls	r3, r3, #4
 800d866:	4413      	add	r3, r2
 800d868:	681a      	ldr	r2, [r3, #0]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	429a      	cmp	r2, r3
 800d870:	d113      	bne.n	800d89a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d872:	4a3d      	ldr	r2, [pc, #244]	; (800d968 <inc_lock+0x118>)
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	011b      	lsls	r3, r3, #4
 800d878:	4413      	add	r3, r2
 800d87a:	3304      	adds	r3, #4
 800d87c:	681a      	ldr	r2, [r3, #0]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d882:	429a      	cmp	r2, r3
 800d884:	d109      	bne.n	800d89a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d886:	4a38      	ldr	r2, [pc, #224]	; (800d968 <inc_lock+0x118>)
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	011b      	lsls	r3, r3, #4
 800d88c:	4413      	add	r3, r2
 800d88e:	3308      	adds	r3, #8
 800d890:	681a      	ldr	r2, [r3, #0]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d896:	429a      	cmp	r2, r3
 800d898:	d006      	beq.n	800d8a8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	3301      	adds	r3, #1
 800d89e:	60fb      	str	r3, [r7, #12]
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	2b01      	cmp	r3, #1
 800d8a4:	d9dc      	bls.n	800d860 <inc_lock+0x10>
 800d8a6:	e000      	b.n	800d8aa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d8a8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	2b02      	cmp	r3, #2
 800d8ae:	d132      	bne.n	800d916 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	60fb      	str	r3, [r7, #12]
 800d8b4:	e002      	b.n	800d8bc <inc_lock+0x6c>
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	3301      	adds	r3, #1
 800d8ba:	60fb      	str	r3, [r7, #12]
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2b01      	cmp	r3, #1
 800d8c0:	d806      	bhi.n	800d8d0 <inc_lock+0x80>
 800d8c2:	4a29      	ldr	r2, [pc, #164]	; (800d968 <inc_lock+0x118>)
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	011b      	lsls	r3, r3, #4
 800d8c8:	4413      	add	r3, r2
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d1f2      	bne.n	800d8b6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	2b02      	cmp	r3, #2
 800d8d4:	d101      	bne.n	800d8da <inc_lock+0x8a>
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	e040      	b.n	800d95c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681a      	ldr	r2, [r3, #0]
 800d8de:	4922      	ldr	r1, [pc, #136]	; (800d968 <inc_lock+0x118>)
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	011b      	lsls	r3, r3, #4
 800d8e4:	440b      	add	r3, r1
 800d8e6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	689a      	ldr	r2, [r3, #8]
 800d8ec:	491e      	ldr	r1, [pc, #120]	; (800d968 <inc_lock+0x118>)
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	011b      	lsls	r3, r3, #4
 800d8f2:	440b      	add	r3, r1
 800d8f4:	3304      	adds	r3, #4
 800d8f6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	695a      	ldr	r2, [r3, #20]
 800d8fc:	491a      	ldr	r1, [pc, #104]	; (800d968 <inc_lock+0x118>)
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	011b      	lsls	r3, r3, #4
 800d902:	440b      	add	r3, r1
 800d904:	3308      	adds	r3, #8
 800d906:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d908:	4a17      	ldr	r2, [pc, #92]	; (800d968 <inc_lock+0x118>)
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	011b      	lsls	r3, r3, #4
 800d90e:	4413      	add	r3, r2
 800d910:	330c      	adds	r3, #12
 800d912:	2200      	movs	r2, #0
 800d914:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d009      	beq.n	800d930 <inc_lock+0xe0>
 800d91c:	4a12      	ldr	r2, [pc, #72]	; (800d968 <inc_lock+0x118>)
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	011b      	lsls	r3, r3, #4
 800d922:	4413      	add	r3, r2
 800d924:	330c      	adds	r3, #12
 800d926:	881b      	ldrh	r3, [r3, #0]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d001      	beq.n	800d930 <inc_lock+0xe0>
 800d92c:	2300      	movs	r3, #0
 800d92e:	e015      	b.n	800d95c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d108      	bne.n	800d948 <inc_lock+0xf8>
 800d936:	4a0c      	ldr	r2, [pc, #48]	; (800d968 <inc_lock+0x118>)
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	011b      	lsls	r3, r3, #4
 800d93c:	4413      	add	r3, r2
 800d93e:	330c      	adds	r3, #12
 800d940:	881b      	ldrh	r3, [r3, #0]
 800d942:	3301      	adds	r3, #1
 800d944:	b29a      	uxth	r2, r3
 800d946:	e001      	b.n	800d94c <inc_lock+0xfc>
 800d948:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d94c:	4906      	ldr	r1, [pc, #24]	; (800d968 <inc_lock+0x118>)
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	011b      	lsls	r3, r3, #4
 800d952:	440b      	add	r3, r1
 800d954:	330c      	adds	r3, #12
 800d956:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	3301      	adds	r3, #1
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	3714      	adds	r7, #20
 800d960:	46bd      	mov	sp, r7
 800d962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d966:	4770      	bx	lr
 800d968:	20002c58 	.word	0x20002c58

0800d96c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b085      	sub	sp, #20
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	3b01      	subs	r3, #1
 800d978:	607b      	str	r3, [r7, #4]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2b01      	cmp	r3, #1
 800d97e:	d825      	bhi.n	800d9cc <dec_lock+0x60>
		n = Files[i].ctr;
 800d980:	4a17      	ldr	r2, [pc, #92]	; (800d9e0 <dec_lock+0x74>)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	011b      	lsls	r3, r3, #4
 800d986:	4413      	add	r3, r2
 800d988:	330c      	adds	r3, #12
 800d98a:	881b      	ldrh	r3, [r3, #0]
 800d98c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d98e:	89fb      	ldrh	r3, [r7, #14]
 800d990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d994:	d101      	bne.n	800d99a <dec_lock+0x2e>
 800d996:	2300      	movs	r3, #0
 800d998:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d99a:	89fb      	ldrh	r3, [r7, #14]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d002      	beq.n	800d9a6 <dec_lock+0x3a>
 800d9a0:	89fb      	ldrh	r3, [r7, #14]
 800d9a2:	3b01      	subs	r3, #1
 800d9a4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d9a6:	4a0e      	ldr	r2, [pc, #56]	; (800d9e0 <dec_lock+0x74>)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	011b      	lsls	r3, r3, #4
 800d9ac:	4413      	add	r3, r2
 800d9ae:	330c      	adds	r3, #12
 800d9b0:	89fa      	ldrh	r2, [r7, #14]
 800d9b2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d9b4:	89fb      	ldrh	r3, [r7, #14]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d105      	bne.n	800d9c6 <dec_lock+0x5a>
 800d9ba:	4a09      	ldr	r2, [pc, #36]	; (800d9e0 <dec_lock+0x74>)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	011b      	lsls	r3, r3, #4
 800d9c0:	4413      	add	r3, r2
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	737b      	strb	r3, [r7, #13]
 800d9ca:	e001      	b.n	800d9d0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d9cc:	2302      	movs	r3, #2
 800d9ce:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d9d0:	7b7b      	ldrb	r3, [r7, #13]
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3714      	adds	r7, #20
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9dc:	4770      	bx	lr
 800d9de:	bf00      	nop
 800d9e0:	20002c58 	.word	0x20002c58

0800d9e4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d9e4:	b480      	push	{r7}
 800d9e6:	b085      	sub	sp, #20
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	60fb      	str	r3, [r7, #12]
 800d9f0:	e010      	b.n	800da14 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d9f2:	4a0d      	ldr	r2, [pc, #52]	; (800da28 <clear_lock+0x44>)
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	011b      	lsls	r3, r3, #4
 800d9f8:	4413      	add	r3, r2
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	687a      	ldr	r2, [r7, #4]
 800d9fe:	429a      	cmp	r2, r3
 800da00:	d105      	bne.n	800da0e <clear_lock+0x2a>
 800da02:	4a09      	ldr	r2, [pc, #36]	; (800da28 <clear_lock+0x44>)
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	011b      	lsls	r3, r3, #4
 800da08:	4413      	add	r3, r2
 800da0a:	2200      	movs	r2, #0
 800da0c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	3301      	adds	r3, #1
 800da12:	60fb      	str	r3, [r7, #12]
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2b01      	cmp	r3, #1
 800da18:	d9eb      	bls.n	800d9f2 <clear_lock+0xe>
	}
}
 800da1a:	bf00      	nop
 800da1c:	bf00      	nop
 800da1e:	3714      	adds	r7, #20
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr
 800da28:	20002c58 	.word	0x20002c58

0800da2c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b086      	sub	sp, #24
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800da34:	2300      	movs	r3, #0
 800da36:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	78db      	ldrb	r3, [r3, #3]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d034      	beq.n	800daaa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da44:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	7858      	ldrb	r0, [r3, #1]
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800da50:	2301      	movs	r3, #1
 800da52:	697a      	ldr	r2, [r7, #20]
 800da54:	f7ff fd40 	bl	800d4d8 <disk_write>
 800da58:	4603      	mov	r3, r0
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d002      	beq.n	800da64 <sync_window+0x38>
			res = FR_DISK_ERR;
 800da5e:	2301      	movs	r3, #1
 800da60:	73fb      	strb	r3, [r7, #15]
 800da62:	e022      	b.n	800daaa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2200      	movs	r2, #0
 800da68:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da6e:	697a      	ldr	r2, [r7, #20]
 800da70:	1ad2      	subs	r2, r2, r3
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6a1b      	ldr	r3, [r3, #32]
 800da76:	429a      	cmp	r2, r3
 800da78:	d217      	bcs.n	800daaa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	789b      	ldrb	r3, [r3, #2]
 800da7e:	613b      	str	r3, [r7, #16]
 800da80:	e010      	b.n	800daa4 <sync_window+0x78>
					wsect += fs->fsize;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6a1b      	ldr	r3, [r3, #32]
 800da86:	697a      	ldr	r2, [r7, #20]
 800da88:	4413      	add	r3, r2
 800da8a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	7858      	ldrb	r0, [r3, #1]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800da96:	2301      	movs	r3, #1
 800da98:	697a      	ldr	r2, [r7, #20]
 800da9a:	f7ff fd1d 	bl	800d4d8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	3b01      	subs	r3, #1
 800daa2:	613b      	str	r3, [r7, #16]
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	2b01      	cmp	r3, #1
 800daa8:	d8eb      	bhi.n	800da82 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800daaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800daac:	4618      	mov	r0, r3
 800daae:	3718      	adds	r7, #24
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}

0800dab4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b084      	sub	sp, #16
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
 800dabc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800dabe:	2300      	movs	r3, #0
 800dac0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dac6:	683a      	ldr	r2, [r7, #0]
 800dac8:	429a      	cmp	r2, r3
 800daca:	d01b      	beq.n	800db04 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f7ff ffad 	bl	800da2c <sync_window>
 800dad2:	4603      	mov	r3, r0
 800dad4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800dad6:	7bfb      	ldrb	r3, [r7, #15]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d113      	bne.n	800db04 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	7858      	ldrb	r0, [r3, #1]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dae6:	2301      	movs	r3, #1
 800dae8:	683a      	ldr	r2, [r7, #0]
 800daea:	f7ff fcd5 	bl	800d498 <disk_read>
 800daee:	4603      	mov	r3, r0
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d004      	beq.n	800dafe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800daf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800daf8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800dafa:	2301      	movs	r3, #1
 800dafc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	683a      	ldr	r2, [r7, #0]
 800db02:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800db04:	7bfb      	ldrb	r3, [r7, #15]
}
 800db06:	4618      	mov	r0, r3
 800db08:	3710      	adds	r7, #16
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
	...

0800db10 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b084      	sub	sp, #16
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f7ff ff87 	bl	800da2c <sync_window>
 800db1e:	4603      	mov	r3, r0
 800db20:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800db22:	7bfb      	ldrb	r3, [r7, #15]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d159      	bne.n	800dbdc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	781b      	ldrb	r3, [r3, #0]
 800db2c:	2b03      	cmp	r3, #3
 800db2e:	d149      	bne.n	800dbc4 <sync_fs+0xb4>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	791b      	ldrb	r3, [r3, #4]
 800db34:	2b01      	cmp	r3, #1
 800db36:	d145      	bne.n	800dbc4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	899b      	ldrh	r3, [r3, #12]
 800db42:	461a      	mov	r2, r3
 800db44:	2100      	movs	r1, #0
 800db46:	f7ff fda8 	bl	800d69a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	3338      	adds	r3, #56	; 0x38
 800db4e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800db52:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800db56:	4618      	mov	r0, r3
 800db58:	f7ff fd37 	bl	800d5ca <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	3338      	adds	r3, #56	; 0x38
 800db60:	4921      	ldr	r1, [pc, #132]	; (800dbe8 <sync_fs+0xd8>)
 800db62:	4618      	mov	r0, r3
 800db64:	f7ff fd4c 	bl	800d600 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	3338      	adds	r3, #56	; 0x38
 800db6c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800db70:	491e      	ldr	r1, [pc, #120]	; (800dbec <sync_fs+0xdc>)
 800db72:	4618      	mov	r0, r3
 800db74:	f7ff fd44 	bl	800d600 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	3338      	adds	r3, #56	; 0x38
 800db7c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	699b      	ldr	r3, [r3, #24]
 800db84:	4619      	mov	r1, r3
 800db86:	4610      	mov	r0, r2
 800db88:	f7ff fd3a 	bl	800d600 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	3338      	adds	r3, #56	; 0x38
 800db90:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	695b      	ldr	r3, [r3, #20]
 800db98:	4619      	mov	r1, r3
 800db9a:	4610      	mov	r0, r2
 800db9c:	f7ff fd30 	bl	800d600 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dba4:	1c5a      	adds	r2, r3, #1
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	7858      	ldrb	r0, [r3, #1]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbb8:	2301      	movs	r3, #1
 800dbba:	f7ff fc8d 	bl	800d4d8 <disk_write>
			fs->fsi_flag = 0;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	785b      	ldrb	r3, [r3, #1]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	2100      	movs	r1, #0
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f7ff fca3 	bl	800d518 <disk_ioctl>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d001      	beq.n	800dbdc <sync_fs+0xcc>
 800dbd8:	2301      	movs	r3, #1
 800dbda:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800dbdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3710      	adds	r7, #16
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}
 800dbe6:	bf00      	nop
 800dbe8:	41615252 	.word	0x41615252
 800dbec:	61417272 	.word	0x61417272

0800dbf0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b083      	sub	sp, #12
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
 800dbf8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	3b02      	subs	r3, #2
 800dbfe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	69db      	ldr	r3, [r3, #28]
 800dc04:	3b02      	subs	r3, #2
 800dc06:	683a      	ldr	r2, [r7, #0]
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d301      	bcc.n	800dc10 <clust2sect+0x20>
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	e008      	b.n	800dc22 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	895b      	ldrh	r3, [r3, #10]
 800dc14:	461a      	mov	r2, r3
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	fb03 f202 	mul.w	r2, r3, r2
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc20:	4413      	add	r3, r2
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	370c      	adds	r7, #12
 800dc26:	46bd      	mov	sp, r7
 800dc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2c:	4770      	bx	lr

0800dc2e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800dc2e:	b580      	push	{r7, lr}
 800dc30:	b086      	sub	sp, #24
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	6078      	str	r0, [r7, #4]
 800dc36:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	2b01      	cmp	r3, #1
 800dc42:	d904      	bls.n	800dc4e <get_fat+0x20>
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	69db      	ldr	r3, [r3, #28]
 800dc48:	683a      	ldr	r2, [r7, #0]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d302      	bcc.n	800dc54 <get_fat+0x26>
		val = 1;	/* Internal error */
 800dc4e:	2301      	movs	r3, #1
 800dc50:	617b      	str	r3, [r7, #20]
 800dc52:	e0bb      	b.n	800ddcc <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800dc54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc58:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800dc5a:	693b      	ldr	r3, [r7, #16]
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	2b03      	cmp	r3, #3
 800dc60:	f000 8083 	beq.w	800dd6a <get_fat+0x13c>
 800dc64:	2b03      	cmp	r3, #3
 800dc66:	f300 80a7 	bgt.w	800ddb8 <get_fat+0x18a>
 800dc6a:	2b01      	cmp	r3, #1
 800dc6c:	d002      	beq.n	800dc74 <get_fat+0x46>
 800dc6e:	2b02      	cmp	r3, #2
 800dc70:	d056      	beq.n	800dd20 <get_fat+0xf2>
 800dc72:	e0a1      	b.n	800ddb8 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	60fb      	str	r3, [r7, #12]
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	085b      	lsrs	r3, r3, #1
 800dc7c:	68fa      	ldr	r2, [r7, #12]
 800dc7e:	4413      	add	r3, r2
 800dc80:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	899b      	ldrh	r3, [r3, #12]
 800dc8a:	4619      	mov	r1, r3
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc92:	4413      	add	r3, r2
 800dc94:	4619      	mov	r1, r3
 800dc96:	6938      	ldr	r0, [r7, #16]
 800dc98:	f7ff ff0c 	bl	800dab4 <move_window>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	f040 808d 	bne.w	800ddbe <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	1c5a      	adds	r2, r3, #1
 800dca8:	60fa      	str	r2, [r7, #12]
 800dcaa:	693a      	ldr	r2, [r7, #16]
 800dcac:	8992      	ldrh	r2, [r2, #12]
 800dcae:	fbb3 f1f2 	udiv	r1, r3, r2
 800dcb2:	fb01 f202 	mul.w	r2, r1, r2
 800dcb6:	1a9b      	subs	r3, r3, r2
 800dcb8:	693a      	ldr	r2, [r7, #16]
 800dcba:	4413      	add	r3, r2
 800dcbc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dcc0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dcc2:	693b      	ldr	r3, [r7, #16]
 800dcc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	899b      	ldrh	r3, [r3, #12]
 800dcca:	4619      	mov	r1, r3
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	fbb3 f3f1 	udiv	r3, r3, r1
 800dcd2:	4413      	add	r3, r2
 800dcd4:	4619      	mov	r1, r3
 800dcd6:	6938      	ldr	r0, [r7, #16]
 800dcd8:	f7ff feec 	bl	800dab4 <move_window>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d16f      	bne.n	800ddc2 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	899b      	ldrh	r3, [r3, #12]
 800dce6:	461a      	mov	r2, r3
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	fbb3 f1f2 	udiv	r1, r3, r2
 800dcee:	fb01 f202 	mul.w	r2, r1, r2
 800dcf2:	1a9b      	subs	r3, r3, r2
 800dcf4:	693a      	ldr	r2, [r7, #16]
 800dcf6:	4413      	add	r3, r2
 800dcf8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dcfc:	021b      	lsls	r3, r3, #8
 800dcfe:	461a      	mov	r2, r3
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	4313      	orrs	r3, r2
 800dd04:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	f003 0301 	and.w	r3, r3, #1
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d002      	beq.n	800dd16 <get_fat+0xe8>
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	091b      	lsrs	r3, r3, #4
 800dd14:	e002      	b.n	800dd1c <get_fat+0xee>
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dd1c:	617b      	str	r3, [r7, #20]
			break;
 800dd1e:	e055      	b.n	800ddcc <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	899b      	ldrh	r3, [r3, #12]
 800dd28:	085b      	lsrs	r3, r3, #1
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	4619      	mov	r1, r3
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd34:	4413      	add	r3, r2
 800dd36:	4619      	mov	r1, r3
 800dd38:	6938      	ldr	r0, [r7, #16]
 800dd3a:	f7ff febb 	bl	800dab4 <move_window>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d140      	bne.n	800ddc6 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	005b      	lsls	r3, r3, #1
 800dd4e:	693a      	ldr	r2, [r7, #16]
 800dd50:	8992      	ldrh	r2, [r2, #12]
 800dd52:	fbb3 f0f2 	udiv	r0, r3, r2
 800dd56:	fb00 f202 	mul.w	r2, r0, r2
 800dd5a:	1a9b      	subs	r3, r3, r2
 800dd5c:	440b      	add	r3, r1
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7ff fbf8 	bl	800d554 <ld_word>
 800dd64:	4603      	mov	r3, r0
 800dd66:	617b      	str	r3, [r7, #20]
			break;
 800dd68:	e030      	b.n	800ddcc <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	899b      	ldrh	r3, [r3, #12]
 800dd72:	089b      	lsrs	r3, r3, #2
 800dd74:	b29b      	uxth	r3, r3
 800dd76:	4619      	mov	r1, r3
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd7e:	4413      	add	r3, r2
 800dd80:	4619      	mov	r1, r3
 800dd82:	6938      	ldr	r0, [r7, #16]
 800dd84:	f7ff fe96 	bl	800dab4 <move_window>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d11d      	bne.n	800ddca <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	009b      	lsls	r3, r3, #2
 800dd98:	693a      	ldr	r2, [r7, #16]
 800dd9a:	8992      	ldrh	r2, [r2, #12]
 800dd9c:	fbb3 f0f2 	udiv	r0, r3, r2
 800dda0:	fb00 f202 	mul.w	r2, r0, r2
 800dda4:	1a9b      	subs	r3, r3, r2
 800dda6:	440b      	add	r3, r1
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f7ff fbeb 	bl	800d584 <ld_dword>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ddb4:	617b      	str	r3, [r7, #20]
			break;
 800ddb6:	e009      	b.n	800ddcc <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ddb8:	2301      	movs	r3, #1
 800ddba:	617b      	str	r3, [r7, #20]
 800ddbc:	e006      	b.n	800ddcc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ddbe:	bf00      	nop
 800ddc0:	e004      	b.n	800ddcc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ddc2:	bf00      	nop
 800ddc4:	e002      	b.n	800ddcc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ddc6:	bf00      	nop
 800ddc8:	e000      	b.n	800ddcc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ddca:	bf00      	nop
		}
	}

	return val;
 800ddcc:	697b      	ldr	r3, [r7, #20]
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3718      	adds	r7, #24
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}

0800ddd6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ddd6:	b590      	push	{r4, r7, lr}
 800ddd8:	b089      	sub	sp, #36	; 0x24
 800ddda:	af00      	add	r7, sp, #0
 800dddc:	60f8      	str	r0, [r7, #12]
 800ddde:	60b9      	str	r1, [r7, #8]
 800dde0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800dde2:	2302      	movs	r3, #2
 800dde4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	2b01      	cmp	r3, #1
 800ddea:	f240 8102 	bls.w	800dff2 <put_fat+0x21c>
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	69db      	ldr	r3, [r3, #28]
 800ddf2:	68ba      	ldr	r2, [r7, #8]
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	f080 80fc 	bcs.w	800dff2 <put_fat+0x21c>
		switch (fs->fs_type) {
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	781b      	ldrb	r3, [r3, #0]
 800ddfe:	2b03      	cmp	r3, #3
 800de00:	f000 80b6 	beq.w	800df70 <put_fat+0x19a>
 800de04:	2b03      	cmp	r3, #3
 800de06:	f300 80fd 	bgt.w	800e004 <put_fat+0x22e>
 800de0a:	2b01      	cmp	r3, #1
 800de0c:	d003      	beq.n	800de16 <put_fat+0x40>
 800de0e:	2b02      	cmp	r3, #2
 800de10:	f000 8083 	beq.w	800df1a <put_fat+0x144>
 800de14:	e0f6      	b.n	800e004 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	61bb      	str	r3, [r7, #24]
 800de1a:	69bb      	ldr	r3, [r7, #24]
 800de1c:	085b      	lsrs	r3, r3, #1
 800de1e:	69ba      	ldr	r2, [r7, #24]
 800de20:	4413      	add	r3, r2
 800de22:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	899b      	ldrh	r3, [r3, #12]
 800de2c:	4619      	mov	r1, r3
 800de2e:	69bb      	ldr	r3, [r7, #24]
 800de30:	fbb3 f3f1 	udiv	r3, r3, r1
 800de34:	4413      	add	r3, r2
 800de36:	4619      	mov	r1, r3
 800de38:	68f8      	ldr	r0, [r7, #12]
 800de3a:	f7ff fe3b 	bl	800dab4 <move_window>
 800de3e:	4603      	mov	r3, r0
 800de40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800de42:	7ffb      	ldrb	r3, [r7, #31]
 800de44:	2b00      	cmp	r3, #0
 800de46:	f040 80d6 	bne.w	800dff6 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800de50:	69bb      	ldr	r3, [r7, #24]
 800de52:	1c5a      	adds	r2, r3, #1
 800de54:	61ba      	str	r2, [r7, #24]
 800de56:	68fa      	ldr	r2, [r7, #12]
 800de58:	8992      	ldrh	r2, [r2, #12]
 800de5a:	fbb3 f0f2 	udiv	r0, r3, r2
 800de5e:	fb00 f202 	mul.w	r2, r0, r2
 800de62:	1a9b      	subs	r3, r3, r2
 800de64:	440b      	add	r3, r1
 800de66:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	f003 0301 	and.w	r3, r3, #1
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d00d      	beq.n	800de8e <put_fat+0xb8>
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	781b      	ldrb	r3, [r3, #0]
 800de76:	b25b      	sxtb	r3, r3
 800de78:	f003 030f 	and.w	r3, r3, #15
 800de7c:	b25a      	sxtb	r2, r3
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	b2db      	uxtb	r3, r3
 800de82:	011b      	lsls	r3, r3, #4
 800de84:	b25b      	sxtb	r3, r3
 800de86:	4313      	orrs	r3, r2
 800de88:	b25b      	sxtb	r3, r3
 800de8a:	b2db      	uxtb	r3, r3
 800de8c:	e001      	b.n	800de92 <put_fat+0xbc>
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	b2db      	uxtb	r3, r3
 800de92:	697a      	ldr	r2, [r7, #20]
 800de94:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	2201      	movs	r2, #1
 800de9a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	899b      	ldrh	r3, [r3, #12]
 800dea4:	4619      	mov	r1, r3
 800dea6:	69bb      	ldr	r3, [r7, #24]
 800dea8:	fbb3 f3f1 	udiv	r3, r3, r1
 800deac:	4413      	add	r3, r2
 800deae:	4619      	mov	r1, r3
 800deb0:	68f8      	ldr	r0, [r7, #12]
 800deb2:	f7ff fdff 	bl	800dab4 <move_window>
 800deb6:	4603      	mov	r3, r0
 800deb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800deba:	7ffb      	ldrb	r3, [r7, #31]
 800debc:	2b00      	cmp	r3, #0
 800debe:	f040 809c 	bne.w	800dffa <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	899b      	ldrh	r3, [r3, #12]
 800decc:	461a      	mov	r2, r3
 800dece:	69bb      	ldr	r3, [r7, #24]
 800ded0:	fbb3 f0f2 	udiv	r0, r3, r2
 800ded4:	fb00 f202 	mul.w	r2, r0, r2
 800ded8:	1a9b      	subs	r3, r3, r2
 800deda:	440b      	add	r3, r1
 800dedc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	f003 0301 	and.w	r3, r3, #1
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d003      	beq.n	800def0 <put_fat+0x11a>
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	091b      	lsrs	r3, r3, #4
 800deec:	b2db      	uxtb	r3, r3
 800deee:	e00e      	b.n	800df0e <put_fat+0x138>
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	781b      	ldrb	r3, [r3, #0]
 800def4:	b25b      	sxtb	r3, r3
 800def6:	f023 030f 	bic.w	r3, r3, #15
 800defa:	b25a      	sxtb	r2, r3
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	0a1b      	lsrs	r3, r3, #8
 800df00:	b25b      	sxtb	r3, r3
 800df02:	f003 030f 	and.w	r3, r3, #15
 800df06:	b25b      	sxtb	r3, r3
 800df08:	4313      	orrs	r3, r2
 800df0a:	b25b      	sxtb	r3, r3
 800df0c:	b2db      	uxtb	r3, r3
 800df0e:	697a      	ldr	r2, [r7, #20]
 800df10:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	2201      	movs	r2, #1
 800df16:	70da      	strb	r2, [r3, #3]
			break;
 800df18:	e074      	b.n	800e004 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	899b      	ldrh	r3, [r3, #12]
 800df22:	085b      	lsrs	r3, r3, #1
 800df24:	b29b      	uxth	r3, r3
 800df26:	4619      	mov	r1, r3
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	fbb3 f3f1 	udiv	r3, r3, r1
 800df2e:	4413      	add	r3, r2
 800df30:	4619      	mov	r1, r3
 800df32:	68f8      	ldr	r0, [r7, #12]
 800df34:	f7ff fdbe 	bl	800dab4 <move_window>
 800df38:	4603      	mov	r3, r0
 800df3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800df3c:	7ffb      	ldrb	r3, [r7, #31]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d15d      	bne.n	800dffe <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	005b      	lsls	r3, r3, #1
 800df4c:	68fa      	ldr	r2, [r7, #12]
 800df4e:	8992      	ldrh	r2, [r2, #12]
 800df50:	fbb3 f0f2 	udiv	r0, r3, r2
 800df54:	fb00 f202 	mul.w	r2, r0, r2
 800df58:	1a9b      	subs	r3, r3, r2
 800df5a:	440b      	add	r3, r1
 800df5c:	687a      	ldr	r2, [r7, #4]
 800df5e:	b292      	uxth	r2, r2
 800df60:	4611      	mov	r1, r2
 800df62:	4618      	mov	r0, r3
 800df64:	f7ff fb31 	bl	800d5ca <st_word>
			fs->wflag = 1;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	2201      	movs	r2, #1
 800df6c:	70da      	strb	r2, [r3, #3]
			break;
 800df6e:	e049      	b.n	800e004 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	899b      	ldrh	r3, [r3, #12]
 800df78:	089b      	lsrs	r3, r3, #2
 800df7a:	b29b      	uxth	r3, r3
 800df7c:	4619      	mov	r1, r3
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	fbb3 f3f1 	udiv	r3, r3, r1
 800df84:	4413      	add	r3, r2
 800df86:	4619      	mov	r1, r3
 800df88:	68f8      	ldr	r0, [r7, #12]
 800df8a:	f7ff fd93 	bl	800dab4 <move_window>
 800df8e:	4603      	mov	r3, r0
 800df90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800df92:	7ffb      	ldrb	r3, [r7, #31]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d134      	bne.n	800e002 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	009b      	lsls	r3, r3, #2
 800dfa8:	68fa      	ldr	r2, [r7, #12]
 800dfaa:	8992      	ldrh	r2, [r2, #12]
 800dfac:	fbb3 f0f2 	udiv	r0, r3, r2
 800dfb0:	fb00 f202 	mul.w	r2, r0, r2
 800dfb4:	1a9b      	subs	r3, r3, r2
 800dfb6:	440b      	add	r3, r1
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f7ff fae3 	bl	800d584 <ld_dword>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800dfc4:	4323      	orrs	r3, r4
 800dfc6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	009b      	lsls	r3, r3, #2
 800dfd2:	68fa      	ldr	r2, [r7, #12]
 800dfd4:	8992      	ldrh	r2, [r2, #12]
 800dfd6:	fbb3 f0f2 	udiv	r0, r3, r2
 800dfda:	fb00 f202 	mul.w	r2, r0, r2
 800dfde:	1a9b      	subs	r3, r3, r2
 800dfe0:	440b      	add	r3, r1
 800dfe2:	6879      	ldr	r1, [r7, #4]
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f7ff fb0b 	bl	800d600 <st_dword>
			fs->wflag = 1;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	2201      	movs	r2, #1
 800dfee:	70da      	strb	r2, [r3, #3]
			break;
 800dff0:	e008      	b.n	800e004 <put_fat+0x22e>
		}
	}
 800dff2:	bf00      	nop
 800dff4:	e006      	b.n	800e004 <put_fat+0x22e>
			if (res != FR_OK) break;
 800dff6:	bf00      	nop
 800dff8:	e004      	b.n	800e004 <put_fat+0x22e>
			if (res != FR_OK) break;
 800dffa:	bf00      	nop
 800dffc:	e002      	b.n	800e004 <put_fat+0x22e>
			if (res != FR_OK) break;
 800dffe:	bf00      	nop
 800e000:	e000      	b.n	800e004 <put_fat+0x22e>
			if (res != FR_OK) break;
 800e002:	bf00      	nop
	return res;
 800e004:	7ffb      	ldrb	r3, [r7, #31]
}
 800e006:	4618      	mov	r0, r3
 800e008:	3724      	adds	r7, #36	; 0x24
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd90      	pop	{r4, r7, pc}

0800e00e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e00e:	b580      	push	{r7, lr}
 800e010:	b088      	sub	sp, #32
 800e012:	af00      	add	r7, sp, #0
 800e014:	60f8      	str	r0, [r7, #12]
 800e016:	60b9      	str	r1, [r7, #8]
 800e018:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e01a:	2300      	movs	r3, #0
 800e01c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	2b01      	cmp	r3, #1
 800e028:	d904      	bls.n	800e034 <remove_chain+0x26>
 800e02a:	69bb      	ldr	r3, [r7, #24]
 800e02c:	69db      	ldr	r3, [r3, #28]
 800e02e:	68ba      	ldr	r2, [r7, #8]
 800e030:	429a      	cmp	r2, r3
 800e032:	d301      	bcc.n	800e038 <remove_chain+0x2a>
 800e034:	2302      	movs	r3, #2
 800e036:	e04b      	b.n	800e0d0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d00c      	beq.n	800e058 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e03e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e042:	6879      	ldr	r1, [r7, #4]
 800e044:	69b8      	ldr	r0, [r7, #24]
 800e046:	f7ff fec6 	bl	800ddd6 <put_fat>
 800e04a:	4603      	mov	r3, r0
 800e04c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e04e:	7ffb      	ldrb	r3, [r7, #31]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d001      	beq.n	800e058 <remove_chain+0x4a>
 800e054:	7ffb      	ldrb	r3, [r7, #31]
 800e056:	e03b      	b.n	800e0d0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e058:	68b9      	ldr	r1, [r7, #8]
 800e05a:	68f8      	ldr	r0, [r7, #12]
 800e05c:	f7ff fde7 	bl	800dc2e <get_fat>
 800e060:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d031      	beq.n	800e0cc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e068:	697b      	ldr	r3, [r7, #20]
 800e06a:	2b01      	cmp	r3, #1
 800e06c:	d101      	bne.n	800e072 <remove_chain+0x64>
 800e06e:	2302      	movs	r3, #2
 800e070:	e02e      	b.n	800e0d0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e078:	d101      	bne.n	800e07e <remove_chain+0x70>
 800e07a:	2301      	movs	r3, #1
 800e07c:	e028      	b.n	800e0d0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e07e:	2200      	movs	r2, #0
 800e080:	68b9      	ldr	r1, [r7, #8]
 800e082:	69b8      	ldr	r0, [r7, #24]
 800e084:	f7ff fea7 	bl	800ddd6 <put_fat>
 800e088:	4603      	mov	r3, r0
 800e08a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e08c:	7ffb      	ldrb	r3, [r7, #31]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d001      	beq.n	800e096 <remove_chain+0x88>
 800e092:	7ffb      	ldrb	r3, [r7, #31]
 800e094:	e01c      	b.n	800e0d0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e096:	69bb      	ldr	r3, [r7, #24]
 800e098:	699a      	ldr	r2, [r3, #24]
 800e09a:	69bb      	ldr	r3, [r7, #24]
 800e09c:	69db      	ldr	r3, [r3, #28]
 800e09e:	3b02      	subs	r3, #2
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d20b      	bcs.n	800e0bc <remove_chain+0xae>
			fs->free_clst++;
 800e0a4:	69bb      	ldr	r3, [r7, #24]
 800e0a6:	699b      	ldr	r3, [r3, #24]
 800e0a8:	1c5a      	adds	r2, r3, #1
 800e0aa:	69bb      	ldr	r3, [r7, #24]
 800e0ac:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800e0ae:	69bb      	ldr	r3, [r7, #24]
 800e0b0:	791b      	ldrb	r3, [r3, #4]
 800e0b2:	f043 0301 	orr.w	r3, r3, #1
 800e0b6:	b2da      	uxtb	r2, r3
 800e0b8:	69bb      	ldr	r3, [r7, #24]
 800e0ba:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e0c0:	69bb      	ldr	r3, [r7, #24]
 800e0c2:	69db      	ldr	r3, [r3, #28]
 800e0c4:	68ba      	ldr	r2, [r7, #8]
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d3c6      	bcc.n	800e058 <remove_chain+0x4a>
 800e0ca:	e000      	b.n	800e0ce <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e0cc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e0ce:	2300      	movs	r3, #0
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3720      	adds	r7, #32
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}

0800e0d8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b088      	sub	sp, #32
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d10d      	bne.n	800e10a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e0ee:	693b      	ldr	r3, [r7, #16]
 800e0f0:	695b      	ldr	r3, [r3, #20]
 800e0f2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e0f4:	69bb      	ldr	r3, [r7, #24]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d004      	beq.n	800e104 <create_chain+0x2c>
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	69db      	ldr	r3, [r3, #28]
 800e0fe:	69ba      	ldr	r2, [r7, #24]
 800e100:	429a      	cmp	r2, r3
 800e102:	d31b      	bcc.n	800e13c <create_chain+0x64>
 800e104:	2301      	movs	r3, #1
 800e106:	61bb      	str	r3, [r7, #24]
 800e108:	e018      	b.n	800e13c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e10a:	6839      	ldr	r1, [r7, #0]
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f7ff fd8e 	bl	800dc2e <get_fat>
 800e112:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	2b01      	cmp	r3, #1
 800e118:	d801      	bhi.n	800e11e <create_chain+0x46>
 800e11a:	2301      	movs	r3, #1
 800e11c:	e070      	b.n	800e200 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e124:	d101      	bne.n	800e12a <create_chain+0x52>
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	e06a      	b.n	800e200 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	69db      	ldr	r3, [r3, #28]
 800e12e:	68fa      	ldr	r2, [r7, #12]
 800e130:	429a      	cmp	r2, r3
 800e132:	d201      	bcs.n	800e138 <create_chain+0x60>
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	e063      	b.n	800e200 <create_chain+0x128>
		scl = clst;
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e13c:	69bb      	ldr	r3, [r7, #24]
 800e13e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e140:	69fb      	ldr	r3, [r7, #28]
 800e142:	3301      	adds	r3, #1
 800e144:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	69db      	ldr	r3, [r3, #28]
 800e14a:	69fa      	ldr	r2, [r7, #28]
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d307      	bcc.n	800e160 <create_chain+0x88>
				ncl = 2;
 800e150:	2302      	movs	r3, #2
 800e152:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e154:	69fa      	ldr	r2, [r7, #28]
 800e156:	69bb      	ldr	r3, [r7, #24]
 800e158:	429a      	cmp	r2, r3
 800e15a:	d901      	bls.n	800e160 <create_chain+0x88>
 800e15c:	2300      	movs	r3, #0
 800e15e:	e04f      	b.n	800e200 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e160:	69f9      	ldr	r1, [r7, #28]
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f7ff fd63 	bl	800dc2e <get_fat>
 800e168:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d00e      	beq.n	800e18e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	2b01      	cmp	r3, #1
 800e174:	d003      	beq.n	800e17e <create_chain+0xa6>
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e17c:	d101      	bne.n	800e182 <create_chain+0xaa>
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	e03e      	b.n	800e200 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e182:	69fa      	ldr	r2, [r7, #28]
 800e184:	69bb      	ldr	r3, [r7, #24]
 800e186:	429a      	cmp	r2, r3
 800e188:	d1da      	bne.n	800e140 <create_chain+0x68>
 800e18a:	2300      	movs	r3, #0
 800e18c:	e038      	b.n	800e200 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e18e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e194:	69f9      	ldr	r1, [r7, #28]
 800e196:	6938      	ldr	r0, [r7, #16]
 800e198:	f7ff fe1d 	bl	800ddd6 <put_fat>
 800e19c:	4603      	mov	r3, r0
 800e19e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e1a0:	7dfb      	ldrb	r3, [r7, #23]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d109      	bne.n	800e1ba <create_chain+0xe2>
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d006      	beq.n	800e1ba <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e1ac:	69fa      	ldr	r2, [r7, #28]
 800e1ae:	6839      	ldr	r1, [r7, #0]
 800e1b0:	6938      	ldr	r0, [r7, #16]
 800e1b2:	f7ff fe10 	bl	800ddd6 <put_fat>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e1ba:	7dfb      	ldrb	r3, [r7, #23]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d116      	bne.n	800e1ee <create_chain+0x116>
		fs->last_clst = ncl;
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	69fa      	ldr	r2, [r7, #28]
 800e1c4:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	699a      	ldr	r2, [r3, #24]
 800e1ca:	693b      	ldr	r3, [r7, #16]
 800e1cc:	69db      	ldr	r3, [r3, #28]
 800e1ce:	3b02      	subs	r3, #2
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d804      	bhi.n	800e1de <create_chain+0x106>
 800e1d4:	693b      	ldr	r3, [r7, #16]
 800e1d6:	699b      	ldr	r3, [r3, #24]
 800e1d8:	1e5a      	subs	r2, r3, #1
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	791b      	ldrb	r3, [r3, #4]
 800e1e2:	f043 0301 	orr.w	r3, r3, #1
 800e1e6:	b2da      	uxtb	r2, r3
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	711a      	strb	r2, [r3, #4]
 800e1ec:	e007      	b.n	800e1fe <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e1ee:	7dfb      	ldrb	r3, [r7, #23]
 800e1f0:	2b01      	cmp	r3, #1
 800e1f2:	d102      	bne.n	800e1fa <create_chain+0x122>
 800e1f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e1f8:	e000      	b.n	800e1fc <create_chain+0x124>
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e1fe:	69fb      	ldr	r3, [r7, #28]
}
 800e200:	4618      	mov	r0, r3
 800e202:	3720      	adds	r7, #32
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}

0800e208 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e208:	b480      	push	{r7}
 800e20a:	b087      	sub	sp, #28
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e21c:	3304      	adds	r3, #4
 800e21e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	899b      	ldrh	r3, [r3, #12]
 800e224:	461a      	mov	r2, r3
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	fbb3 f3f2 	udiv	r3, r3, r2
 800e22c:	68fa      	ldr	r2, [r7, #12]
 800e22e:	8952      	ldrh	r2, [r2, #10]
 800e230:	fbb3 f3f2 	udiv	r3, r3, r2
 800e234:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e236:	693b      	ldr	r3, [r7, #16]
 800e238:	1d1a      	adds	r2, r3, #4
 800e23a:	613a      	str	r2, [r7, #16]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d101      	bne.n	800e24a <clmt_clust+0x42>
 800e246:	2300      	movs	r3, #0
 800e248:	e010      	b.n	800e26c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800e24a:	697a      	ldr	r2, [r7, #20]
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	429a      	cmp	r2, r3
 800e250:	d307      	bcc.n	800e262 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800e252:	697a      	ldr	r2, [r7, #20]
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	1ad3      	subs	r3, r2, r3
 800e258:	617b      	str	r3, [r7, #20]
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	3304      	adds	r3, #4
 800e25e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e260:	e7e9      	b.n	800e236 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800e262:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e264:	693b      	ldr	r3, [r7, #16]
 800e266:	681a      	ldr	r2, [r3, #0]
 800e268:	697b      	ldr	r3, [r7, #20]
 800e26a:	4413      	add	r3, r2
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	371c      	adds	r7, #28
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr

0800e278 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b086      	sub	sp, #24
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e28e:	d204      	bcs.n	800e29a <dir_sdi+0x22>
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	f003 031f 	and.w	r3, r3, #31
 800e296:	2b00      	cmp	r3, #0
 800e298:	d001      	beq.n	800e29e <dir_sdi+0x26>
		return FR_INT_ERR;
 800e29a:	2302      	movs	r3, #2
 800e29c:	e071      	b.n	800e382 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	683a      	ldr	r2, [r7, #0]
 800e2a2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	689b      	ldr	r3, [r3, #8]
 800e2a8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d106      	bne.n	800e2be <dir_sdi+0x46>
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	781b      	ldrb	r3, [r3, #0]
 800e2b4:	2b02      	cmp	r3, #2
 800e2b6:	d902      	bls.n	800e2be <dir_sdi+0x46>
		clst = fs->dirbase;
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2bc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d10c      	bne.n	800e2de <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	095b      	lsrs	r3, r3, #5
 800e2c8:	693a      	ldr	r2, [r7, #16]
 800e2ca:	8912      	ldrh	r2, [r2, #8]
 800e2cc:	4293      	cmp	r3, r2
 800e2ce:	d301      	bcc.n	800e2d4 <dir_sdi+0x5c>
 800e2d0:	2302      	movs	r3, #2
 800e2d2:	e056      	b.n	800e382 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	61da      	str	r2, [r3, #28]
 800e2dc:	e02d      	b.n	800e33a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	895b      	ldrh	r3, [r3, #10]
 800e2e2:	461a      	mov	r2, r3
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	899b      	ldrh	r3, [r3, #12]
 800e2e8:	fb02 f303 	mul.w	r3, r2, r3
 800e2ec:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e2ee:	e019      	b.n	800e324 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	6979      	ldr	r1, [r7, #20]
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f7ff fc9a 	bl	800dc2e <get_fat>
 800e2fa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e302:	d101      	bne.n	800e308 <dir_sdi+0x90>
 800e304:	2301      	movs	r3, #1
 800e306:	e03c      	b.n	800e382 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	2b01      	cmp	r3, #1
 800e30c:	d904      	bls.n	800e318 <dir_sdi+0xa0>
 800e30e:	693b      	ldr	r3, [r7, #16]
 800e310:	69db      	ldr	r3, [r3, #28]
 800e312:	697a      	ldr	r2, [r7, #20]
 800e314:	429a      	cmp	r2, r3
 800e316:	d301      	bcc.n	800e31c <dir_sdi+0xa4>
 800e318:	2302      	movs	r3, #2
 800e31a:	e032      	b.n	800e382 <dir_sdi+0x10a>
			ofs -= csz;
 800e31c:	683a      	ldr	r2, [r7, #0]
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	1ad3      	subs	r3, r2, r3
 800e322:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e324:	683a      	ldr	r2, [r7, #0]
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	429a      	cmp	r2, r3
 800e32a:	d2e1      	bcs.n	800e2f0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800e32c:	6979      	ldr	r1, [r7, #20]
 800e32e:	6938      	ldr	r0, [r7, #16]
 800e330:	f7ff fc5e 	bl	800dbf0 <clust2sect>
 800e334:	4602      	mov	r2, r0
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	697a      	ldr	r2, [r7, #20]
 800e33e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	69db      	ldr	r3, [r3, #28]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d101      	bne.n	800e34c <dir_sdi+0xd4>
 800e348:	2302      	movs	r3, #2
 800e34a:	e01a      	b.n	800e382 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	69da      	ldr	r2, [r3, #28]
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	899b      	ldrh	r3, [r3, #12]
 800e354:	4619      	mov	r1, r3
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	fbb3 f3f1 	udiv	r3, r3, r1
 800e35c:	441a      	add	r2, r3
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	899b      	ldrh	r3, [r3, #12]
 800e36c:	461a      	mov	r2, r3
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	fbb3 f0f2 	udiv	r0, r3, r2
 800e374:	fb00 f202 	mul.w	r2, r0, r2
 800e378:	1a9b      	subs	r3, r3, r2
 800e37a:	18ca      	adds	r2, r1, r3
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e380:	2300      	movs	r3, #0
}
 800e382:	4618      	mov	r0, r3
 800e384:	3718      	adds	r7, #24
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}

0800e38a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e38a:	b580      	push	{r7, lr}
 800e38c:	b086      	sub	sp, #24
 800e38e:	af00      	add	r7, sp, #0
 800e390:	6078      	str	r0, [r7, #4]
 800e392:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	695b      	ldr	r3, [r3, #20]
 800e39e:	3320      	adds	r3, #32
 800e3a0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	69db      	ldr	r3, [r3, #28]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d003      	beq.n	800e3b2 <dir_next+0x28>
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e3b0:	d301      	bcc.n	800e3b6 <dir_next+0x2c>
 800e3b2:	2304      	movs	r3, #4
 800e3b4:	e0bb      	b.n	800e52e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	899b      	ldrh	r3, [r3, #12]
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	fbb3 f1f2 	udiv	r1, r3, r2
 800e3c2:	fb01 f202 	mul.w	r2, r1, r2
 800e3c6:	1a9b      	subs	r3, r3, r2
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	f040 809d 	bne.w	800e508 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	69db      	ldr	r3, [r3, #28]
 800e3d2:	1c5a      	adds	r2, r3, #1
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	699b      	ldr	r3, [r3, #24]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d10b      	bne.n	800e3f8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e3e0:	68bb      	ldr	r3, [r7, #8]
 800e3e2:	095b      	lsrs	r3, r3, #5
 800e3e4:	68fa      	ldr	r2, [r7, #12]
 800e3e6:	8912      	ldrh	r2, [r2, #8]
 800e3e8:	4293      	cmp	r3, r2
 800e3ea:	f0c0 808d 	bcc.w	800e508 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	61da      	str	r2, [r3, #28]
 800e3f4:	2304      	movs	r3, #4
 800e3f6:	e09a      	b.n	800e52e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	899b      	ldrh	r3, [r3, #12]
 800e3fc:	461a      	mov	r2, r3
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	fbb3 f3f2 	udiv	r3, r3, r2
 800e404:	68fa      	ldr	r2, [r7, #12]
 800e406:	8952      	ldrh	r2, [r2, #10]
 800e408:	3a01      	subs	r2, #1
 800e40a:	4013      	ands	r3, r2
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d17b      	bne.n	800e508 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e410:	687a      	ldr	r2, [r7, #4]
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	699b      	ldr	r3, [r3, #24]
 800e416:	4619      	mov	r1, r3
 800e418:	4610      	mov	r0, r2
 800e41a:	f7ff fc08 	bl	800dc2e <get_fat>
 800e41e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e420:	697b      	ldr	r3, [r7, #20]
 800e422:	2b01      	cmp	r3, #1
 800e424:	d801      	bhi.n	800e42a <dir_next+0xa0>
 800e426:	2302      	movs	r3, #2
 800e428:	e081      	b.n	800e52e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e42a:	697b      	ldr	r3, [r7, #20]
 800e42c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e430:	d101      	bne.n	800e436 <dir_next+0xac>
 800e432:	2301      	movs	r3, #1
 800e434:	e07b      	b.n	800e52e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	69db      	ldr	r3, [r3, #28]
 800e43a:	697a      	ldr	r2, [r7, #20]
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d359      	bcc.n	800e4f4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d104      	bne.n	800e450 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2200      	movs	r2, #0
 800e44a:	61da      	str	r2, [r3, #28]
 800e44c:	2304      	movs	r3, #4
 800e44e:	e06e      	b.n	800e52e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e450:	687a      	ldr	r2, [r7, #4]
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	699b      	ldr	r3, [r3, #24]
 800e456:	4619      	mov	r1, r3
 800e458:	4610      	mov	r0, r2
 800e45a:	f7ff fe3d 	bl	800e0d8 <create_chain>
 800e45e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d101      	bne.n	800e46a <dir_next+0xe0>
 800e466:	2307      	movs	r3, #7
 800e468:	e061      	b.n	800e52e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	2b01      	cmp	r3, #1
 800e46e:	d101      	bne.n	800e474 <dir_next+0xea>
 800e470:	2302      	movs	r3, #2
 800e472:	e05c      	b.n	800e52e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e47a:	d101      	bne.n	800e480 <dir_next+0xf6>
 800e47c:	2301      	movs	r3, #1
 800e47e:	e056      	b.n	800e52e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e480:	68f8      	ldr	r0, [r7, #12]
 800e482:	f7ff fad3 	bl	800da2c <sync_window>
 800e486:	4603      	mov	r3, r0
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d001      	beq.n	800e490 <dir_next+0x106>
 800e48c:	2301      	movs	r3, #1
 800e48e:	e04e      	b.n	800e52e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	899b      	ldrh	r3, [r3, #12]
 800e49a:	461a      	mov	r2, r3
 800e49c:	2100      	movs	r1, #0
 800e49e:	f7ff f8fc 	bl	800d69a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	613b      	str	r3, [r7, #16]
 800e4a6:	6979      	ldr	r1, [r7, #20]
 800e4a8:	68f8      	ldr	r0, [r7, #12]
 800e4aa:	f7ff fba1 	bl	800dbf0 <clust2sect>
 800e4ae:	4602      	mov	r2, r0
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	635a      	str	r2, [r3, #52]	; 0x34
 800e4b4:	e012      	b.n	800e4dc <dir_next+0x152>
						fs->wflag = 1;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e4bc:	68f8      	ldr	r0, [r7, #12]
 800e4be:	f7ff fab5 	bl	800da2c <sync_window>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d001      	beq.n	800e4cc <dir_next+0x142>
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	e030      	b.n	800e52e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e4cc:	693b      	ldr	r3, [r7, #16]
 800e4ce:	3301      	adds	r3, #1
 800e4d0:	613b      	str	r3, [r7, #16]
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4d6:	1c5a      	adds	r2, r3, #1
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	635a      	str	r2, [r3, #52]	; 0x34
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	895b      	ldrh	r3, [r3, #10]
 800e4e0:	461a      	mov	r2, r3
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	4293      	cmp	r3, r2
 800e4e6:	d3e6      	bcc.n	800e4b6 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4ec:	693b      	ldr	r3, [r7, #16]
 800e4ee:	1ad2      	subs	r2, r2, r3
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	697a      	ldr	r2, [r7, #20]
 800e4f8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e4fa:	6979      	ldr	r1, [r7, #20]
 800e4fc:	68f8      	ldr	r0, [r7, #12]
 800e4fe:	f7ff fb77 	bl	800dbf0 <clust2sect>
 800e502:	4602      	mov	r2, r0
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	68ba      	ldr	r2, [r7, #8]
 800e50c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	899b      	ldrh	r3, [r3, #12]
 800e518:	461a      	mov	r2, r3
 800e51a:	68bb      	ldr	r3, [r7, #8]
 800e51c:	fbb3 f0f2 	udiv	r0, r3, r2
 800e520:	fb00 f202 	mul.w	r2, r0, r2
 800e524:	1a9b      	subs	r3, r3, r2
 800e526:	18ca      	adds	r2, r1, r3
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e52c:	2300      	movs	r3, #0
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3718      	adds	r7, #24
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}

0800e536 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e536:	b580      	push	{r7, lr}
 800e538:	b086      	sub	sp, #24
 800e53a:	af00      	add	r7, sp, #0
 800e53c:	6078      	str	r0, [r7, #4]
 800e53e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e546:	2100      	movs	r1, #0
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f7ff fe95 	bl	800e278 <dir_sdi>
 800e54e:	4603      	mov	r3, r0
 800e550:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e552:	7dfb      	ldrb	r3, [r7, #23]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d12b      	bne.n	800e5b0 <dir_alloc+0x7a>
		n = 0;
 800e558:	2300      	movs	r3, #0
 800e55a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	69db      	ldr	r3, [r3, #28]
 800e560:	4619      	mov	r1, r3
 800e562:	68f8      	ldr	r0, [r7, #12]
 800e564:	f7ff faa6 	bl	800dab4 <move_window>
 800e568:	4603      	mov	r3, r0
 800e56a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e56c:	7dfb      	ldrb	r3, [r7, #23]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d11d      	bne.n	800e5ae <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	6a1b      	ldr	r3, [r3, #32]
 800e576:	781b      	ldrb	r3, [r3, #0]
 800e578:	2be5      	cmp	r3, #229	; 0xe5
 800e57a:	d004      	beq.n	800e586 <dir_alloc+0x50>
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	6a1b      	ldr	r3, [r3, #32]
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d107      	bne.n	800e596 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e586:	693b      	ldr	r3, [r7, #16]
 800e588:	3301      	adds	r3, #1
 800e58a:	613b      	str	r3, [r7, #16]
 800e58c:	693a      	ldr	r2, [r7, #16]
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	429a      	cmp	r2, r3
 800e592:	d102      	bne.n	800e59a <dir_alloc+0x64>
 800e594:	e00c      	b.n	800e5b0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e596:	2300      	movs	r3, #0
 800e598:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e59a:	2101      	movs	r1, #1
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f7ff fef4 	bl	800e38a <dir_next>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e5a6:	7dfb      	ldrb	r3, [r7, #23]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d0d7      	beq.n	800e55c <dir_alloc+0x26>
 800e5ac:	e000      	b.n	800e5b0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e5ae:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e5b0:	7dfb      	ldrb	r3, [r7, #23]
 800e5b2:	2b04      	cmp	r3, #4
 800e5b4:	d101      	bne.n	800e5ba <dir_alloc+0x84>
 800e5b6:	2307      	movs	r3, #7
 800e5b8:	75fb      	strb	r3, [r7, #23]
	return res;
 800e5ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3718      	adds	r7, #24
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}

0800e5c4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b084      	sub	sp, #16
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	331a      	adds	r3, #26
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7fe ffbe 	bl	800d554 <ld_word>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	781b      	ldrb	r3, [r3, #0]
 800e5e0:	2b03      	cmp	r3, #3
 800e5e2:	d109      	bne.n	800e5f8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	3314      	adds	r3, #20
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f7fe ffb3 	bl	800d554 <ld_word>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	041b      	lsls	r3, r3, #16
 800e5f2:	68fa      	ldr	r2, [r7, #12]
 800e5f4:	4313      	orrs	r3, r2
 800e5f6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3710      	adds	r7, #16
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}

0800e602 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e602:	b580      	push	{r7, lr}
 800e604:	b084      	sub	sp, #16
 800e606:	af00      	add	r7, sp, #0
 800e608:	60f8      	str	r0, [r7, #12]
 800e60a:	60b9      	str	r1, [r7, #8]
 800e60c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	331a      	adds	r3, #26
 800e612:	687a      	ldr	r2, [r7, #4]
 800e614:	b292      	uxth	r2, r2
 800e616:	4611      	mov	r1, r2
 800e618:	4618      	mov	r0, r3
 800e61a:	f7fe ffd6 	bl	800d5ca <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	2b03      	cmp	r3, #3
 800e624:	d109      	bne.n	800e63a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	f103 0214 	add.w	r2, r3, #20
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	0c1b      	lsrs	r3, r3, #16
 800e630:	b29b      	uxth	r3, r3
 800e632:	4619      	mov	r1, r3
 800e634:	4610      	mov	r0, r2
 800e636:	f7fe ffc8 	bl	800d5ca <st_word>
	}
}
 800e63a:	bf00      	nop
 800e63c:	3710      	adds	r7, #16
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
	...

0800e644 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e644:	b590      	push	{r4, r7, lr}
 800e646:	b087      	sub	sp, #28
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
 800e64c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	331a      	adds	r3, #26
 800e652:	4618      	mov	r0, r3
 800e654:	f7fe ff7e 	bl	800d554 <ld_word>
 800e658:	4603      	mov	r3, r0
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d001      	beq.n	800e662 <cmp_lfn+0x1e>
 800e65e:	2300      	movs	r3, #0
 800e660:	e059      	b.n	800e716 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	781b      	ldrb	r3, [r3, #0]
 800e666:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e66a:	1e5a      	subs	r2, r3, #1
 800e66c:	4613      	mov	r3, r2
 800e66e:	005b      	lsls	r3, r3, #1
 800e670:	4413      	add	r3, r2
 800e672:	009b      	lsls	r3, r3, #2
 800e674:	4413      	add	r3, r2
 800e676:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e678:	2301      	movs	r3, #1
 800e67a:	81fb      	strh	r3, [r7, #14]
 800e67c:	2300      	movs	r3, #0
 800e67e:	613b      	str	r3, [r7, #16]
 800e680:	e033      	b.n	800e6ea <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e682:	4a27      	ldr	r2, [pc, #156]	; (800e720 <cmp_lfn+0xdc>)
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	4413      	add	r3, r2
 800e688:	781b      	ldrb	r3, [r3, #0]
 800e68a:	461a      	mov	r2, r3
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	4413      	add	r3, r2
 800e690:	4618      	mov	r0, r3
 800e692:	f7fe ff5f 	bl	800d554 <ld_word>
 800e696:	4603      	mov	r3, r0
 800e698:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e69a:	89fb      	ldrh	r3, [r7, #14]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d01a      	beq.n	800e6d6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	2bfe      	cmp	r3, #254	; 0xfe
 800e6a4:	d812      	bhi.n	800e6cc <cmp_lfn+0x88>
 800e6a6:	89bb      	ldrh	r3, [r7, #12]
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f002 fb5b 	bl	8010d64 <ff_wtoupper>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	461c      	mov	r4, r3
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	1c5a      	adds	r2, r3, #1
 800e6b6:	617a      	str	r2, [r7, #20]
 800e6b8:	005b      	lsls	r3, r3, #1
 800e6ba:	687a      	ldr	r2, [r7, #4]
 800e6bc:	4413      	add	r3, r2
 800e6be:	881b      	ldrh	r3, [r3, #0]
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f002 fb4f 	bl	8010d64 <ff_wtoupper>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	429c      	cmp	r4, r3
 800e6ca:	d001      	beq.n	800e6d0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	e022      	b.n	800e716 <cmp_lfn+0xd2>
			}
			wc = uc;
 800e6d0:	89bb      	ldrh	r3, [r7, #12]
 800e6d2:	81fb      	strh	r3, [r7, #14]
 800e6d4:	e006      	b.n	800e6e4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e6d6:	89bb      	ldrh	r3, [r7, #12]
 800e6d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6dc:	4293      	cmp	r3, r2
 800e6de:	d001      	beq.n	800e6e4 <cmp_lfn+0xa0>
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	e018      	b.n	800e716 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	613b      	str	r3, [r7, #16]
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	2b0c      	cmp	r3, #12
 800e6ee:	d9c8      	bls.n	800e682 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	781b      	ldrb	r3, [r3, #0]
 800e6f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d00b      	beq.n	800e714 <cmp_lfn+0xd0>
 800e6fc:	89fb      	ldrh	r3, [r7, #14]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d008      	beq.n	800e714 <cmp_lfn+0xd0>
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	005b      	lsls	r3, r3, #1
 800e706:	687a      	ldr	r2, [r7, #4]
 800e708:	4413      	add	r3, r2
 800e70a:	881b      	ldrh	r3, [r3, #0]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d001      	beq.n	800e714 <cmp_lfn+0xd0>
 800e710:	2300      	movs	r3, #0
 800e712:	e000      	b.n	800e716 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e714:	2301      	movs	r3, #1
}
 800e716:	4618      	mov	r0, r3
 800e718:	371c      	adds	r7, #28
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd90      	pop	{r4, r7, pc}
 800e71e:	bf00      	nop
 800e720:	08012014 	.word	0x08012014

0800e724 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b086      	sub	sp, #24
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	331a      	adds	r3, #26
 800e732:	4618      	mov	r0, r3
 800e734:	f7fe ff0e 	bl	800d554 <ld_word>
 800e738:	4603      	mov	r3, r0
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d001      	beq.n	800e742 <pick_lfn+0x1e>
 800e73e:	2300      	movs	r3, #0
 800e740:	e04d      	b.n	800e7de <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	781b      	ldrb	r3, [r3, #0]
 800e746:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e74a:	1e5a      	subs	r2, r3, #1
 800e74c:	4613      	mov	r3, r2
 800e74e:	005b      	lsls	r3, r3, #1
 800e750:	4413      	add	r3, r2
 800e752:	009b      	lsls	r3, r3, #2
 800e754:	4413      	add	r3, r2
 800e756:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e758:	2301      	movs	r3, #1
 800e75a:	81fb      	strh	r3, [r7, #14]
 800e75c:	2300      	movs	r3, #0
 800e75e:	613b      	str	r3, [r7, #16]
 800e760:	e028      	b.n	800e7b4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e762:	4a21      	ldr	r2, [pc, #132]	; (800e7e8 <pick_lfn+0xc4>)
 800e764:	693b      	ldr	r3, [r7, #16]
 800e766:	4413      	add	r3, r2
 800e768:	781b      	ldrb	r3, [r3, #0]
 800e76a:	461a      	mov	r2, r3
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	4413      	add	r3, r2
 800e770:	4618      	mov	r0, r3
 800e772:	f7fe feef 	bl	800d554 <ld_word>
 800e776:	4603      	mov	r3, r0
 800e778:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e77a:	89fb      	ldrh	r3, [r7, #14]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d00f      	beq.n	800e7a0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	2bfe      	cmp	r3, #254	; 0xfe
 800e784:	d901      	bls.n	800e78a <pick_lfn+0x66>
 800e786:	2300      	movs	r3, #0
 800e788:	e029      	b.n	800e7de <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800e78a:	89bb      	ldrh	r3, [r7, #12]
 800e78c:	81fb      	strh	r3, [r7, #14]
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	1c5a      	adds	r2, r3, #1
 800e792:	617a      	str	r2, [r7, #20]
 800e794:	005b      	lsls	r3, r3, #1
 800e796:	687a      	ldr	r2, [r7, #4]
 800e798:	4413      	add	r3, r2
 800e79a:	89fa      	ldrh	r2, [r7, #14]
 800e79c:	801a      	strh	r2, [r3, #0]
 800e79e:	e006      	b.n	800e7ae <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e7a0:	89bb      	ldrh	r3, [r7, #12]
 800e7a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7a6:	4293      	cmp	r3, r2
 800e7a8:	d001      	beq.n	800e7ae <pick_lfn+0x8a>
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	e017      	b.n	800e7de <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	613b      	str	r3, [r7, #16]
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	2b0c      	cmp	r3, #12
 800e7b8:	d9d3      	bls.n	800e762 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	781b      	ldrb	r3, [r3, #0]
 800e7be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d00a      	beq.n	800e7dc <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	2bfe      	cmp	r3, #254	; 0xfe
 800e7ca:	d901      	bls.n	800e7d0 <pick_lfn+0xac>
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	e006      	b.n	800e7de <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	005b      	lsls	r3, r3, #1
 800e7d4:	687a      	ldr	r2, [r7, #4]
 800e7d6:	4413      	add	r3, r2
 800e7d8:	2200      	movs	r2, #0
 800e7da:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800e7dc:	2301      	movs	r3, #1
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3718      	adds	r7, #24
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	08012014 	.word	0x08012014

0800e7ec <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b088      	sub	sp, #32
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	60f8      	str	r0, [r7, #12]
 800e7f4:	60b9      	str	r1, [r7, #8]
 800e7f6:	4611      	mov	r1, r2
 800e7f8:	461a      	mov	r2, r3
 800e7fa:	460b      	mov	r3, r1
 800e7fc:	71fb      	strb	r3, [r7, #7]
 800e7fe:	4613      	mov	r3, r2
 800e800:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	330d      	adds	r3, #13
 800e806:	79ba      	ldrb	r2, [r7, #6]
 800e808:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	330b      	adds	r3, #11
 800e80e:	220f      	movs	r2, #15
 800e810:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	330c      	adds	r3, #12
 800e816:	2200      	movs	r2, #0
 800e818:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	331a      	adds	r3, #26
 800e81e:	2100      	movs	r1, #0
 800e820:	4618      	mov	r0, r3
 800e822:	f7fe fed2 	bl	800d5ca <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e826:	79fb      	ldrb	r3, [r7, #7]
 800e828:	1e5a      	subs	r2, r3, #1
 800e82a:	4613      	mov	r3, r2
 800e82c:	005b      	lsls	r3, r3, #1
 800e82e:	4413      	add	r3, r2
 800e830:	009b      	lsls	r3, r3, #2
 800e832:	4413      	add	r3, r2
 800e834:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e836:	2300      	movs	r3, #0
 800e838:	82fb      	strh	r3, [r7, #22]
 800e83a:	2300      	movs	r3, #0
 800e83c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e83e:	8afb      	ldrh	r3, [r7, #22]
 800e840:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e844:	4293      	cmp	r3, r2
 800e846:	d007      	beq.n	800e858 <put_lfn+0x6c>
 800e848:	69fb      	ldr	r3, [r7, #28]
 800e84a:	1c5a      	adds	r2, r3, #1
 800e84c:	61fa      	str	r2, [r7, #28]
 800e84e:	005b      	lsls	r3, r3, #1
 800e850:	68fa      	ldr	r2, [r7, #12]
 800e852:	4413      	add	r3, r2
 800e854:	881b      	ldrh	r3, [r3, #0]
 800e856:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e858:	4a17      	ldr	r2, [pc, #92]	; (800e8b8 <put_lfn+0xcc>)
 800e85a:	69bb      	ldr	r3, [r7, #24]
 800e85c:	4413      	add	r3, r2
 800e85e:	781b      	ldrb	r3, [r3, #0]
 800e860:	461a      	mov	r2, r3
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	4413      	add	r3, r2
 800e866:	8afa      	ldrh	r2, [r7, #22]
 800e868:	4611      	mov	r1, r2
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7fe fead 	bl	800d5ca <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e870:	8afb      	ldrh	r3, [r7, #22]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d102      	bne.n	800e87c <put_lfn+0x90>
 800e876:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e87a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e87c:	69bb      	ldr	r3, [r7, #24]
 800e87e:	3301      	adds	r3, #1
 800e880:	61bb      	str	r3, [r7, #24]
 800e882:	69bb      	ldr	r3, [r7, #24]
 800e884:	2b0c      	cmp	r3, #12
 800e886:	d9da      	bls.n	800e83e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e888:	8afb      	ldrh	r3, [r7, #22]
 800e88a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e88e:	4293      	cmp	r3, r2
 800e890:	d006      	beq.n	800e8a0 <put_lfn+0xb4>
 800e892:	69fb      	ldr	r3, [r7, #28]
 800e894:	005b      	lsls	r3, r3, #1
 800e896:	68fa      	ldr	r2, [r7, #12]
 800e898:	4413      	add	r3, r2
 800e89a:	881b      	ldrh	r3, [r3, #0]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d103      	bne.n	800e8a8 <put_lfn+0xbc>
 800e8a0:	79fb      	ldrb	r3, [r7, #7]
 800e8a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8a6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	79fa      	ldrb	r2, [r7, #7]
 800e8ac:	701a      	strb	r2, [r3, #0]
}
 800e8ae:	bf00      	nop
 800e8b0:	3720      	adds	r7, #32
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}
 800e8b6:	bf00      	nop
 800e8b8:	08012014 	.word	0x08012014

0800e8bc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b08c      	sub	sp, #48	; 0x30
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	60f8      	str	r0, [r7, #12]
 800e8c4:	60b9      	str	r1, [r7, #8]
 800e8c6:	607a      	str	r2, [r7, #4]
 800e8c8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e8ca:	220b      	movs	r2, #11
 800e8cc:	68b9      	ldr	r1, [r7, #8]
 800e8ce:	68f8      	ldr	r0, [r7, #12]
 800e8d0:	f7fe fec2 	bl	800d658 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	2b05      	cmp	r3, #5
 800e8d8:	d92b      	bls.n	800e932 <gen_numname+0x76>
		sr = seq;
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e8de:	e022      	b.n	800e926 <gen_numname+0x6a>
			wc = *lfn++;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	1c9a      	adds	r2, r3, #2
 800e8e4:	607a      	str	r2, [r7, #4]
 800e8e6:	881b      	ldrh	r3, [r3, #0]
 800e8e8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800e8ee:	e017      	b.n	800e920 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e8f0:	69fb      	ldr	r3, [r7, #28]
 800e8f2:	005a      	lsls	r2, r3, #1
 800e8f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e8f6:	f003 0301 	and.w	r3, r3, #1
 800e8fa:	4413      	add	r3, r2
 800e8fc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e8fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e900:	085b      	lsrs	r3, r3, #1
 800e902:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e904:	69fb      	ldr	r3, [r7, #28]
 800e906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d005      	beq.n	800e91a <gen_numname+0x5e>
 800e90e:	69fb      	ldr	r3, [r7, #28]
 800e910:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800e914:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800e918:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e91c:	3301      	adds	r3, #1
 800e91e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e922:	2b0f      	cmp	r3, #15
 800e924:	d9e4      	bls.n	800e8f0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	881b      	ldrh	r3, [r3, #0]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d1d8      	bne.n	800e8e0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e92e:	69fb      	ldr	r3, [r7, #28]
 800e930:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e932:	2307      	movs	r3, #7
 800e934:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	b2db      	uxtb	r3, r3
 800e93a:	f003 030f 	and.w	r3, r3, #15
 800e93e:	b2db      	uxtb	r3, r3
 800e940:	3330      	adds	r3, #48	; 0x30
 800e942:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e946:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e94a:	2b39      	cmp	r3, #57	; 0x39
 800e94c:	d904      	bls.n	800e958 <gen_numname+0x9c>
 800e94e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e952:	3307      	adds	r3, #7
 800e954:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e95a:	1e5a      	subs	r2, r3, #1
 800e95c:	62ba      	str	r2, [r7, #40]	; 0x28
 800e95e:	3330      	adds	r3, #48	; 0x30
 800e960:	443b      	add	r3, r7
 800e962:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e966:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	091b      	lsrs	r3, r3, #4
 800e96e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d1df      	bne.n	800e936 <gen_numname+0x7a>
	ns[i] = '~';
 800e976:	f107 0214 	add.w	r2, r7, #20
 800e97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97c:	4413      	add	r3, r2
 800e97e:	227e      	movs	r2, #126	; 0x7e
 800e980:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e982:	2300      	movs	r3, #0
 800e984:	627b      	str	r3, [r7, #36]	; 0x24
 800e986:	e002      	b.n	800e98e <gen_numname+0xd2>
 800e988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e98a:	3301      	adds	r3, #1
 800e98c:	627b      	str	r3, [r7, #36]	; 0x24
 800e98e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e992:	429a      	cmp	r2, r3
 800e994:	d205      	bcs.n	800e9a2 <gen_numname+0xe6>
 800e996:	68fa      	ldr	r2, [r7, #12]
 800e998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e99a:	4413      	add	r3, r2
 800e99c:	781b      	ldrb	r3, [r3, #0]
 800e99e:	2b20      	cmp	r3, #32
 800e9a0:	d1f2      	bne.n	800e988 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a4:	2b07      	cmp	r3, #7
 800e9a6:	d807      	bhi.n	800e9b8 <gen_numname+0xfc>
 800e9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9aa:	1c5a      	adds	r2, r3, #1
 800e9ac:	62ba      	str	r2, [r7, #40]	; 0x28
 800e9ae:	3330      	adds	r3, #48	; 0x30
 800e9b0:	443b      	add	r3, r7
 800e9b2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e9b6:	e000      	b.n	800e9ba <gen_numname+0xfe>
 800e9b8:	2120      	movs	r1, #32
 800e9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9bc:	1c5a      	adds	r2, r3, #1
 800e9be:	627a      	str	r2, [r7, #36]	; 0x24
 800e9c0:	68fa      	ldr	r2, [r7, #12]
 800e9c2:	4413      	add	r3, r2
 800e9c4:	460a      	mov	r2, r1
 800e9c6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ca:	2b07      	cmp	r3, #7
 800e9cc:	d9e9      	bls.n	800e9a2 <gen_numname+0xe6>
}
 800e9ce:	bf00      	nop
 800e9d0:	bf00      	nop
 800e9d2:	3730      	adds	r7, #48	; 0x30
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}

0800e9d8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b085      	sub	sp, #20
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e9e4:	230b      	movs	r3, #11
 800e9e6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e9e8:	7bfb      	ldrb	r3, [r7, #15]
 800e9ea:	b2da      	uxtb	r2, r3
 800e9ec:	0852      	lsrs	r2, r2, #1
 800e9ee:	01db      	lsls	r3, r3, #7
 800e9f0:	4313      	orrs	r3, r2
 800e9f2:	b2da      	uxtb	r2, r3
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	1c59      	adds	r1, r3, #1
 800e9f8:	6079      	str	r1, [r7, #4]
 800e9fa:	781b      	ldrb	r3, [r3, #0]
 800e9fc:	4413      	add	r3, r2
 800e9fe:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	3b01      	subs	r3, #1
 800ea04:	60bb      	str	r3, [r7, #8]
 800ea06:	68bb      	ldr	r3, [r7, #8]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d1ed      	bne.n	800e9e8 <sum_sfn+0x10>
	return sum;
 800ea0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	3714      	adds	r7, #20
 800ea12:	46bd      	mov	sp, r7
 800ea14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea18:	4770      	bx	lr

0800ea1a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ea1a:	b580      	push	{r7, lr}
 800ea1c:	b086      	sub	sp, #24
 800ea1e:	af00      	add	r7, sp, #0
 800ea20:	6078      	str	r0, [r7, #4]
 800ea22:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800ea24:	2304      	movs	r3, #4
 800ea26:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800ea2e:	23ff      	movs	r3, #255	; 0xff
 800ea30:	757b      	strb	r3, [r7, #21]
 800ea32:	23ff      	movs	r3, #255	; 0xff
 800ea34:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800ea36:	e081      	b.n	800eb3c <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	69db      	ldr	r3, [r3, #28]
 800ea3c:	4619      	mov	r1, r3
 800ea3e:	6938      	ldr	r0, [r7, #16]
 800ea40:	f7ff f838 	bl	800dab4 <move_window>
 800ea44:	4603      	mov	r3, r0
 800ea46:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ea48:	7dfb      	ldrb	r3, [r7, #23]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d17c      	bne.n	800eb48 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6a1b      	ldr	r3, [r3, #32]
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800ea56:	7dbb      	ldrb	r3, [r7, #22]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d102      	bne.n	800ea62 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800ea5c:	2304      	movs	r3, #4
 800ea5e:	75fb      	strb	r3, [r7, #23]
 800ea60:	e077      	b.n	800eb52 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6a1b      	ldr	r3, [r3, #32]
 800ea66:	330b      	adds	r3, #11
 800ea68:	781b      	ldrb	r3, [r3, #0]
 800ea6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea6e:	73fb      	strb	r3, [r7, #15]
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	7bfa      	ldrb	r2, [r7, #15]
 800ea74:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800ea76:	7dbb      	ldrb	r3, [r7, #22]
 800ea78:	2be5      	cmp	r3, #229	; 0xe5
 800ea7a:	d00e      	beq.n	800ea9a <dir_read+0x80>
 800ea7c:	7dbb      	ldrb	r3, [r7, #22]
 800ea7e:	2b2e      	cmp	r3, #46	; 0x2e
 800ea80:	d00b      	beq.n	800ea9a <dir_read+0x80>
 800ea82:	7bfb      	ldrb	r3, [r7, #15]
 800ea84:	f023 0320 	bic.w	r3, r3, #32
 800ea88:	2b08      	cmp	r3, #8
 800ea8a:	bf0c      	ite	eq
 800ea8c:	2301      	moveq	r3, #1
 800ea8e:	2300      	movne	r3, #0
 800ea90:	b2db      	uxtb	r3, r3
 800ea92:	461a      	mov	r2, r3
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	4293      	cmp	r3, r2
 800ea98:	d002      	beq.n	800eaa0 <dir_read+0x86>
				ord = 0xFF;
 800ea9a:	23ff      	movs	r3, #255	; 0xff
 800ea9c:	757b      	strb	r3, [r7, #21]
 800ea9e:	e044      	b.n	800eb2a <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800eaa0:	7bfb      	ldrb	r3, [r7, #15]
 800eaa2:	2b0f      	cmp	r3, #15
 800eaa4:	d12f      	bne.n	800eb06 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800eaa6:	7dbb      	ldrb	r3, [r7, #22]
 800eaa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d00d      	beq.n	800eacc <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	6a1b      	ldr	r3, [r3, #32]
 800eab4:	7b5b      	ldrb	r3, [r3, #13]
 800eab6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800eab8:	7dbb      	ldrb	r3, [r7, #22]
 800eaba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eabe:	75bb      	strb	r3, [r7, #22]
 800eac0:	7dbb      	ldrb	r3, [r7, #22]
 800eac2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	695a      	ldr	r2, [r3, #20]
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800eacc:	7dba      	ldrb	r2, [r7, #22]
 800eace:	7d7b      	ldrb	r3, [r7, #21]
 800ead0:	429a      	cmp	r2, r3
 800ead2:	d115      	bne.n	800eb00 <dir_read+0xe6>
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	6a1b      	ldr	r3, [r3, #32]
 800ead8:	330d      	adds	r3, #13
 800eada:	781b      	ldrb	r3, [r3, #0]
 800eadc:	7d3a      	ldrb	r2, [r7, #20]
 800eade:	429a      	cmp	r2, r3
 800eae0:	d10e      	bne.n	800eb00 <dir_read+0xe6>
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	691a      	ldr	r2, [r3, #16]
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6a1b      	ldr	r3, [r3, #32]
 800eaea:	4619      	mov	r1, r3
 800eaec:	4610      	mov	r0, r2
 800eaee:	f7ff fe19 	bl	800e724 <pick_lfn>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d003      	beq.n	800eb00 <dir_read+0xe6>
 800eaf8:	7d7b      	ldrb	r3, [r7, #21]
 800eafa:	3b01      	subs	r3, #1
 800eafc:	b2db      	uxtb	r3, r3
 800eafe:	e000      	b.n	800eb02 <dir_read+0xe8>
 800eb00:	23ff      	movs	r3, #255	; 0xff
 800eb02:	757b      	strb	r3, [r7, #21]
 800eb04:	e011      	b.n	800eb2a <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800eb06:	7d7b      	ldrb	r3, [r7, #21]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d109      	bne.n	800eb20 <dir_read+0x106>
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	6a1b      	ldr	r3, [r3, #32]
 800eb10:	4618      	mov	r0, r3
 800eb12:	f7ff ff61 	bl	800e9d8 <sum_sfn>
 800eb16:	4603      	mov	r3, r0
 800eb18:	461a      	mov	r2, r3
 800eb1a:	7d3b      	ldrb	r3, [r7, #20]
 800eb1c:	4293      	cmp	r3, r2
 800eb1e:	d015      	beq.n	800eb4c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb26:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800eb28:	e010      	b.n	800eb4c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800eb2a:	2100      	movs	r1, #0
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	f7ff fc2c 	bl	800e38a <dir_next>
 800eb32:	4603      	mov	r3, r0
 800eb34:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800eb36:	7dfb      	ldrb	r3, [r7, #23]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d109      	bne.n	800eb50 <dir_read+0x136>
	while (dp->sect) {
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	69db      	ldr	r3, [r3, #28]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	f47f af79 	bne.w	800ea38 <dir_read+0x1e>
 800eb46:	e004      	b.n	800eb52 <dir_read+0x138>
		if (res != FR_OK) break;
 800eb48:	bf00      	nop
 800eb4a:	e002      	b.n	800eb52 <dir_read+0x138>
					break;
 800eb4c:	bf00      	nop
 800eb4e:	e000      	b.n	800eb52 <dir_read+0x138>
		if (res != FR_OK) break;
 800eb50:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800eb52:	7dfb      	ldrb	r3, [r7, #23]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d002      	beq.n	800eb5e <dir_read+0x144>
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	61da      	str	r2, [r3, #28]
	return res;
 800eb5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3718      	adds	r7, #24
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}

0800eb68 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b086      	sub	sp, #24
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800eb76:	2100      	movs	r1, #0
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f7ff fb7d 	bl	800e278 <dir_sdi>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800eb82:	7dfb      	ldrb	r3, [r7, #23]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d001      	beq.n	800eb8c <dir_find+0x24>
 800eb88:	7dfb      	ldrb	r3, [r7, #23]
 800eb8a:	e0a9      	b.n	800ece0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800eb8c:	23ff      	movs	r3, #255	; 0xff
 800eb8e:	753b      	strb	r3, [r7, #20]
 800eb90:	7d3b      	ldrb	r3, [r7, #20]
 800eb92:	757b      	strb	r3, [r7, #21]
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb9a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	69db      	ldr	r3, [r3, #28]
 800eba0:	4619      	mov	r1, r3
 800eba2:	6938      	ldr	r0, [r7, #16]
 800eba4:	f7fe ff86 	bl	800dab4 <move_window>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ebac:	7dfb      	ldrb	r3, [r7, #23]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	f040 8090 	bne.w	800ecd4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	6a1b      	ldr	r3, [r3, #32]
 800ebb8:	781b      	ldrb	r3, [r3, #0]
 800ebba:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ebbc:	7dbb      	ldrb	r3, [r7, #22]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d102      	bne.n	800ebc8 <dir_find+0x60>
 800ebc2:	2304      	movs	r3, #4
 800ebc4:	75fb      	strb	r3, [r7, #23]
 800ebc6:	e08a      	b.n	800ecde <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	6a1b      	ldr	r3, [r3, #32]
 800ebcc:	330b      	adds	r3, #11
 800ebce:	781b      	ldrb	r3, [r3, #0]
 800ebd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ebd4:	73fb      	strb	r3, [r7, #15]
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	7bfa      	ldrb	r2, [r7, #15]
 800ebda:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ebdc:	7dbb      	ldrb	r3, [r7, #22]
 800ebde:	2be5      	cmp	r3, #229	; 0xe5
 800ebe0:	d007      	beq.n	800ebf2 <dir_find+0x8a>
 800ebe2:	7bfb      	ldrb	r3, [r7, #15]
 800ebe4:	f003 0308 	and.w	r3, r3, #8
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d009      	beq.n	800ec00 <dir_find+0x98>
 800ebec:	7bfb      	ldrb	r3, [r7, #15]
 800ebee:	2b0f      	cmp	r3, #15
 800ebf0:	d006      	beq.n	800ec00 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ebf2:	23ff      	movs	r3, #255	; 0xff
 800ebf4:	757b      	strb	r3, [r7, #21]
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ebfc:	631a      	str	r2, [r3, #48]	; 0x30
 800ebfe:	e05e      	b.n	800ecbe <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ec00:	7bfb      	ldrb	r3, [r7, #15]
 800ec02:	2b0f      	cmp	r3, #15
 800ec04:	d136      	bne.n	800ec74 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ec0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d154      	bne.n	800ecbe <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ec14:	7dbb      	ldrb	r3, [r7, #22]
 800ec16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d00d      	beq.n	800ec3a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	6a1b      	ldr	r3, [r3, #32]
 800ec22:	7b5b      	ldrb	r3, [r3, #13]
 800ec24:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ec26:	7dbb      	ldrb	r3, [r7, #22]
 800ec28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec2c:	75bb      	strb	r3, [r7, #22]
 800ec2e:	7dbb      	ldrb	r3, [r7, #22]
 800ec30:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	695a      	ldr	r2, [r3, #20]
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ec3a:	7dba      	ldrb	r2, [r7, #22]
 800ec3c:	7d7b      	ldrb	r3, [r7, #21]
 800ec3e:	429a      	cmp	r2, r3
 800ec40:	d115      	bne.n	800ec6e <dir_find+0x106>
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6a1b      	ldr	r3, [r3, #32]
 800ec46:	330d      	adds	r3, #13
 800ec48:	781b      	ldrb	r3, [r3, #0]
 800ec4a:	7d3a      	ldrb	r2, [r7, #20]
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	d10e      	bne.n	800ec6e <dir_find+0x106>
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	691a      	ldr	r2, [r3, #16]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6a1b      	ldr	r3, [r3, #32]
 800ec58:	4619      	mov	r1, r3
 800ec5a:	4610      	mov	r0, r2
 800ec5c:	f7ff fcf2 	bl	800e644 <cmp_lfn>
 800ec60:	4603      	mov	r3, r0
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d003      	beq.n	800ec6e <dir_find+0x106>
 800ec66:	7d7b      	ldrb	r3, [r7, #21]
 800ec68:	3b01      	subs	r3, #1
 800ec6a:	b2db      	uxtb	r3, r3
 800ec6c:	e000      	b.n	800ec70 <dir_find+0x108>
 800ec6e:	23ff      	movs	r3, #255	; 0xff
 800ec70:	757b      	strb	r3, [r7, #21]
 800ec72:	e024      	b.n	800ecbe <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ec74:	7d7b      	ldrb	r3, [r7, #21]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d109      	bne.n	800ec8e <dir_find+0x126>
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	6a1b      	ldr	r3, [r3, #32]
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f7ff feaa 	bl	800e9d8 <sum_sfn>
 800ec84:	4603      	mov	r3, r0
 800ec86:	461a      	mov	r2, r3
 800ec88:	7d3b      	ldrb	r3, [r7, #20]
 800ec8a:	4293      	cmp	r3, r2
 800ec8c:	d024      	beq.n	800ecd8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ec94:	f003 0301 	and.w	r3, r3, #1
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d10a      	bne.n	800ecb2 <dir_find+0x14a>
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	6a18      	ldr	r0, [r3, #32]
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	3324      	adds	r3, #36	; 0x24
 800eca4:	220b      	movs	r2, #11
 800eca6:	4619      	mov	r1, r3
 800eca8:	f7fe fd12 	bl	800d6d0 <mem_cmp>
 800ecac:	4603      	mov	r3, r0
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d014      	beq.n	800ecdc <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ecb2:	23ff      	movs	r3, #255	; 0xff
 800ecb4:	757b      	strb	r3, [r7, #21]
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ecbc:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ecbe:	2100      	movs	r1, #0
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f7ff fb62 	bl	800e38a <dir_next>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ecca:	7dfb      	ldrb	r3, [r7, #23]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	f43f af65 	beq.w	800eb9c <dir_find+0x34>
 800ecd2:	e004      	b.n	800ecde <dir_find+0x176>
		if (res != FR_OK) break;
 800ecd4:	bf00      	nop
 800ecd6:	e002      	b.n	800ecde <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ecd8:	bf00      	nop
 800ecda:	e000      	b.n	800ecde <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ecdc:	bf00      	nop

	return res;
 800ecde:	7dfb      	ldrb	r3, [r7, #23]
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	3718      	adds	r7, #24
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}

0800ece8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b08c      	sub	sp, #48	; 0x30
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ecfc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d001      	beq.n	800ed08 <dir_register+0x20>
 800ed04:	2306      	movs	r3, #6
 800ed06:	e0e0      	b.n	800eeca <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ed08:	2300      	movs	r3, #0
 800ed0a:	627b      	str	r3, [r7, #36]	; 0x24
 800ed0c:	e002      	b.n	800ed14 <dir_register+0x2c>
 800ed0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed10:	3301      	adds	r3, #1
 800ed12:	627b      	str	r3, [r7, #36]	; 0x24
 800ed14:	69fb      	ldr	r3, [r7, #28]
 800ed16:	691a      	ldr	r2, [r3, #16]
 800ed18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed1a:	005b      	lsls	r3, r3, #1
 800ed1c:	4413      	add	r3, r2
 800ed1e:	881b      	ldrh	r3, [r3, #0]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d1f4      	bne.n	800ed0e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800ed2a:	f107 030c 	add.w	r3, r7, #12
 800ed2e:	220c      	movs	r2, #12
 800ed30:	4618      	mov	r0, r3
 800ed32:	f7fe fc91 	bl	800d658 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ed36:	7dfb      	ldrb	r3, [r7, #23]
 800ed38:	f003 0301 	and.w	r3, r3, #1
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d032      	beq.n	800eda6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2240      	movs	r2, #64	; 0x40
 800ed44:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800ed48:	2301      	movs	r3, #1
 800ed4a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed4c:	e016      	b.n	800ed7c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800ed54:	69fb      	ldr	r3, [r7, #28]
 800ed56:	691a      	ldr	r2, [r3, #16]
 800ed58:	f107 010c 	add.w	r1, r7, #12
 800ed5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed5e:	f7ff fdad 	bl	800e8bc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ed62:	6878      	ldr	r0, [r7, #4]
 800ed64:	f7ff ff00 	bl	800eb68 <dir_find>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ed6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d106      	bne.n	800ed84 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ed76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed78:	3301      	adds	r3, #1
 800ed7a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed7e:	2b63      	cmp	r3, #99	; 0x63
 800ed80:	d9e5      	bls.n	800ed4e <dir_register+0x66>
 800ed82:	e000      	b.n	800ed86 <dir_register+0x9e>
			if (res != FR_OK) break;
 800ed84:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ed86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed88:	2b64      	cmp	r3, #100	; 0x64
 800ed8a:	d101      	bne.n	800ed90 <dir_register+0xa8>
 800ed8c:	2307      	movs	r3, #7
 800ed8e:	e09c      	b.n	800eeca <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ed90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed94:	2b04      	cmp	r3, #4
 800ed96:	d002      	beq.n	800ed9e <dir_register+0xb6>
 800ed98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed9c:	e095      	b.n	800eeca <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ed9e:	7dfa      	ldrb	r2, [r7, #23]
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800eda6:	7dfb      	ldrb	r3, [r7, #23]
 800eda8:	f003 0302 	and.w	r3, r3, #2
 800edac:	2b00      	cmp	r3, #0
 800edae:	d007      	beq.n	800edc0 <dir_register+0xd8>
 800edb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edb2:	330c      	adds	r3, #12
 800edb4:	4a47      	ldr	r2, [pc, #284]	; (800eed4 <dir_register+0x1ec>)
 800edb6:	fba2 2303 	umull	r2, r3, r2, r3
 800edba:	089b      	lsrs	r3, r3, #2
 800edbc:	3301      	adds	r3, #1
 800edbe:	e000      	b.n	800edc2 <dir_register+0xda>
 800edc0:	2301      	movs	r3, #1
 800edc2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800edc4:	6a39      	ldr	r1, [r7, #32]
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	f7ff fbb5 	bl	800e536 <dir_alloc>
 800edcc:	4603      	mov	r3, r0
 800edce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800edd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d148      	bne.n	800ee6c <dir_register+0x184>
 800edda:	6a3b      	ldr	r3, [r7, #32]
 800eddc:	3b01      	subs	r3, #1
 800edde:	623b      	str	r3, [r7, #32]
 800ede0:	6a3b      	ldr	r3, [r7, #32]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d042      	beq.n	800ee6c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	695a      	ldr	r2, [r3, #20]
 800edea:	6a3b      	ldr	r3, [r7, #32]
 800edec:	015b      	lsls	r3, r3, #5
 800edee:	1ad3      	subs	r3, r2, r3
 800edf0:	4619      	mov	r1, r3
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	f7ff fa40 	bl	800e278 <dir_sdi>
 800edf8:	4603      	mov	r3, r0
 800edfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800edfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d132      	bne.n	800ee6c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	3324      	adds	r3, #36	; 0x24
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f7ff fde4 	bl	800e9d8 <sum_sfn>
 800ee10:	4603      	mov	r3, r0
 800ee12:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	69db      	ldr	r3, [r3, #28]
 800ee18:	4619      	mov	r1, r3
 800ee1a:	69f8      	ldr	r0, [r7, #28]
 800ee1c:	f7fe fe4a 	bl	800dab4 <move_window>
 800ee20:	4603      	mov	r3, r0
 800ee22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800ee26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d11d      	bne.n	800ee6a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ee2e:	69fb      	ldr	r3, [r7, #28]
 800ee30:	6918      	ldr	r0, [r3, #16]
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6a19      	ldr	r1, [r3, #32]
 800ee36:	6a3b      	ldr	r3, [r7, #32]
 800ee38:	b2da      	uxtb	r2, r3
 800ee3a:	7efb      	ldrb	r3, [r7, #27]
 800ee3c:	f7ff fcd6 	bl	800e7ec <put_lfn>
				fs->wflag = 1;
 800ee40:	69fb      	ldr	r3, [r7, #28]
 800ee42:	2201      	movs	r2, #1
 800ee44:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ee46:	2100      	movs	r1, #0
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f7ff fa9e 	bl	800e38a <dir_next>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800ee54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d107      	bne.n	800ee6c <dir_register+0x184>
 800ee5c:	6a3b      	ldr	r3, [r7, #32]
 800ee5e:	3b01      	subs	r3, #1
 800ee60:	623b      	str	r3, [r7, #32]
 800ee62:	6a3b      	ldr	r3, [r7, #32]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d1d5      	bne.n	800ee14 <dir_register+0x12c>
 800ee68:	e000      	b.n	800ee6c <dir_register+0x184>
				if (res != FR_OK) break;
 800ee6a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ee6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d128      	bne.n	800eec6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	69db      	ldr	r3, [r3, #28]
 800ee78:	4619      	mov	r1, r3
 800ee7a:	69f8      	ldr	r0, [r7, #28]
 800ee7c:	f7fe fe1a 	bl	800dab4 <move_window>
 800ee80:	4603      	mov	r3, r0
 800ee82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ee86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d11b      	bne.n	800eec6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	6a1b      	ldr	r3, [r3, #32]
 800ee92:	2220      	movs	r2, #32
 800ee94:	2100      	movs	r1, #0
 800ee96:	4618      	mov	r0, r3
 800ee98:	f7fe fbff 	bl	800d69a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	6a18      	ldr	r0, [r3, #32]
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	3324      	adds	r3, #36	; 0x24
 800eea4:	220b      	movs	r2, #11
 800eea6:	4619      	mov	r1, r3
 800eea8:	f7fe fbd6 	bl	800d658 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6a1b      	ldr	r3, [r3, #32]
 800eeb6:	330c      	adds	r3, #12
 800eeb8:	f002 0218 	and.w	r2, r2, #24
 800eebc:	b2d2      	uxtb	r2, r2
 800eebe:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800eec0:	69fb      	ldr	r3, [r7, #28]
 800eec2:	2201      	movs	r2, #1
 800eec4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800eec6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	3730      	adds	r7, #48	; 0x30
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}
 800eed2:	bf00      	nop
 800eed4:	4ec4ec4f 	.word	0x4ec4ec4f

0800eed8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b088      	sub	sp, #32
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
 800eee0:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	2200      	movs	r2, #0
 800eeec:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	69db      	ldr	r3, [r3, #28]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	f000 80c9 	beq.w	800f08a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eefc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef00:	d032      	beq.n	800ef68 <get_fileinfo+0x90>
			i = j = 0;
 800ef02:	2300      	movs	r3, #0
 800ef04:	61bb      	str	r3, [r7, #24]
 800ef06:	69bb      	ldr	r3, [r7, #24]
 800ef08:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ef0a:	e01b      	b.n	800ef44 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800ef0c:	89fb      	ldrh	r3, [r7, #14]
 800ef0e:	2100      	movs	r1, #0
 800ef10:	4618      	mov	r0, r3
 800ef12:	f001 feeb 	bl	8010cec <ff_convert>
 800ef16:	4603      	mov	r3, r0
 800ef18:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800ef1a:	89fb      	ldrh	r3, [r7, #14]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d102      	bne.n	800ef26 <get_fileinfo+0x4e>
 800ef20:	2300      	movs	r3, #0
 800ef22:	61fb      	str	r3, [r7, #28]
 800ef24:	e01a      	b.n	800ef5c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800ef26:	69fb      	ldr	r3, [r7, #28]
 800ef28:	2bfe      	cmp	r3, #254	; 0xfe
 800ef2a:	d902      	bls.n	800ef32 <get_fileinfo+0x5a>
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	61fb      	str	r3, [r7, #28]
 800ef30:	e014      	b.n	800ef5c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800ef32:	69fb      	ldr	r3, [r7, #28]
 800ef34:	1c5a      	adds	r2, r3, #1
 800ef36:	61fa      	str	r2, [r7, #28]
 800ef38:	89fa      	ldrh	r2, [r7, #14]
 800ef3a:	b2d1      	uxtb	r1, r2
 800ef3c:	683a      	ldr	r2, [r7, #0]
 800ef3e:	4413      	add	r3, r2
 800ef40:	460a      	mov	r2, r1
 800ef42:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ef44:	693b      	ldr	r3, [r7, #16]
 800ef46:	691a      	ldr	r2, [r3, #16]
 800ef48:	69bb      	ldr	r3, [r7, #24]
 800ef4a:	1c59      	adds	r1, r3, #1
 800ef4c:	61b9      	str	r1, [r7, #24]
 800ef4e:	005b      	lsls	r3, r3, #1
 800ef50:	4413      	add	r3, r2
 800ef52:	881b      	ldrh	r3, [r3, #0]
 800ef54:	81fb      	strh	r3, [r7, #14]
 800ef56:	89fb      	ldrh	r3, [r7, #14]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d1d7      	bne.n	800ef0c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800ef5c:	683a      	ldr	r2, [r7, #0]
 800ef5e:	69fb      	ldr	r3, [r7, #28]
 800ef60:	4413      	add	r3, r2
 800ef62:	3316      	adds	r3, #22
 800ef64:	2200      	movs	r2, #0
 800ef66:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	61bb      	str	r3, [r7, #24]
 800ef6c:	69bb      	ldr	r3, [r7, #24]
 800ef6e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800ef70:	683a      	ldr	r2, [r7, #0]
 800ef72:	69fb      	ldr	r3, [r7, #28]
 800ef74:	4413      	add	r3, r2
 800ef76:	3316      	adds	r3, #22
 800ef78:	781b      	ldrb	r3, [r3, #0]
 800ef7a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800ef7c:	e04c      	b.n	800f018 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	6a1a      	ldr	r2, [r3, #32]
 800ef82:	69fb      	ldr	r3, [r7, #28]
 800ef84:	1c59      	adds	r1, r3, #1
 800ef86:	61f9      	str	r1, [r7, #28]
 800ef88:	4413      	add	r3, r2
 800ef8a:	781b      	ldrb	r3, [r3, #0]
 800ef8c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800ef8e:	7dfb      	ldrb	r3, [r7, #23]
 800ef90:	2b20      	cmp	r3, #32
 800ef92:	d100      	bne.n	800ef96 <get_fileinfo+0xbe>
 800ef94:	e040      	b.n	800f018 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ef96:	7dfb      	ldrb	r3, [r7, #23]
 800ef98:	2b05      	cmp	r3, #5
 800ef9a:	d101      	bne.n	800efa0 <get_fileinfo+0xc8>
 800ef9c:	23e5      	movs	r3, #229	; 0xe5
 800ef9e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800efa0:	69fb      	ldr	r3, [r7, #28]
 800efa2:	2b09      	cmp	r3, #9
 800efa4:	d10f      	bne.n	800efc6 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800efa6:	89bb      	ldrh	r3, [r7, #12]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d105      	bne.n	800efb8 <get_fileinfo+0xe0>
 800efac:	683a      	ldr	r2, [r7, #0]
 800efae:	69bb      	ldr	r3, [r7, #24]
 800efb0:	4413      	add	r3, r2
 800efb2:	3316      	adds	r3, #22
 800efb4:	222e      	movs	r2, #46	; 0x2e
 800efb6:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800efb8:	69bb      	ldr	r3, [r7, #24]
 800efba:	1c5a      	adds	r2, r3, #1
 800efbc:	61ba      	str	r2, [r7, #24]
 800efbe:	683a      	ldr	r2, [r7, #0]
 800efc0:	4413      	add	r3, r2
 800efc2:	222e      	movs	r2, #46	; 0x2e
 800efc4:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800efc6:	683a      	ldr	r2, [r7, #0]
 800efc8:	69bb      	ldr	r3, [r7, #24]
 800efca:	4413      	add	r3, r2
 800efcc:	3309      	adds	r3, #9
 800efce:	7dfa      	ldrb	r2, [r7, #23]
 800efd0:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800efd2:	89bb      	ldrh	r3, [r7, #12]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d11c      	bne.n	800f012 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800efd8:	7dfb      	ldrb	r3, [r7, #23]
 800efda:	2b40      	cmp	r3, #64	; 0x40
 800efdc:	d913      	bls.n	800f006 <get_fileinfo+0x12e>
 800efde:	7dfb      	ldrb	r3, [r7, #23]
 800efe0:	2b5a      	cmp	r3, #90	; 0x5a
 800efe2:	d810      	bhi.n	800f006 <get_fileinfo+0x12e>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	6a1b      	ldr	r3, [r3, #32]
 800efe8:	330c      	adds	r3, #12
 800efea:	781b      	ldrb	r3, [r3, #0]
 800efec:	461a      	mov	r2, r3
 800efee:	69fb      	ldr	r3, [r7, #28]
 800eff0:	2b08      	cmp	r3, #8
 800eff2:	d901      	bls.n	800eff8 <get_fileinfo+0x120>
 800eff4:	2310      	movs	r3, #16
 800eff6:	e000      	b.n	800effa <get_fileinfo+0x122>
 800eff8:	2308      	movs	r3, #8
 800effa:	4013      	ands	r3, r2
 800effc:	2b00      	cmp	r3, #0
 800effe:	d002      	beq.n	800f006 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800f000:	7dfb      	ldrb	r3, [r7, #23]
 800f002:	3320      	adds	r3, #32
 800f004:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800f006:	683a      	ldr	r2, [r7, #0]
 800f008:	69bb      	ldr	r3, [r7, #24]
 800f00a:	4413      	add	r3, r2
 800f00c:	3316      	adds	r3, #22
 800f00e:	7dfa      	ldrb	r2, [r7, #23]
 800f010:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800f012:	69bb      	ldr	r3, [r7, #24]
 800f014:	3301      	adds	r3, #1
 800f016:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800f018:	69fb      	ldr	r3, [r7, #28]
 800f01a:	2b0a      	cmp	r3, #10
 800f01c:	d9af      	bls.n	800ef7e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800f01e:	89bb      	ldrh	r3, [r7, #12]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d10d      	bne.n	800f040 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800f024:	683a      	ldr	r2, [r7, #0]
 800f026:	69bb      	ldr	r3, [r7, #24]
 800f028:	4413      	add	r3, r2
 800f02a:	3316      	adds	r3, #22
 800f02c:	2200      	movs	r2, #0
 800f02e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6a1b      	ldr	r3, [r3, #32]
 800f034:	330c      	adds	r3, #12
 800f036:	781b      	ldrb	r3, [r3, #0]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d101      	bne.n	800f040 <get_fileinfo+0x168>
 800f03c:	2300      	movs	r3, #0
 800f03e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800f040:	683a      	ldr	r2, [r7, #0]
 800f042:	69bb      	ldr	r3, [r7, #24]
 800f044:	4413      	add	r3, r2
 800f046:	3309      	adds	r3, #9
 800f048:	2200      	movs	r2, #0
 800f04a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6a1b      	ldr	r3, [r3, #32]
 800f050:	7ada      	ldrb	r2, [r3, #11]
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	6a1b      	ldr	r3, [r3, #32]
 800f05a:	331c      	adds	r3, #28
 800f05c:	4618      	mov	r0, r3
 800f05e:	f7fe fa91 	bl	800d584 <ld_dword>
 800f062:	4602      	mov	r2, r0
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6a1b      	ldr	r3, [r3, #32]
 800f06c:	3316      	adds	r3, #22
 800f06e:	4618      	mov	r0, r3
 800f070:	f7fe fa88 	bl	800d584 <ld_dword>
 800f074:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	b29a      	uxth	r2, r3
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	80da      	strh	r2, [r3, #6]
 800f07e:	68bb      	ldr	r3, [r7, #8]
 800f080:	0c1b      	lsrs	r3, r3, #16
 800f082:	b29a      	uxth	r2, r3
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	809a      	strh	r2, [r3, #4]
 800f088:	e000      	b.n	800f08c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f08a:	bf00      	nop
}
 800f08c:	3720      	adds	r7, #32
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}
	...

0800f094 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b08a      	sub	sp, #40	; 0x28
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	613b      	str	r3, [r7, #16]
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	691b      	ldr	r3, [r3, #16]
 800f0aa:	60fb      	str	r3, [r7, #12]
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	617b      	str	r3, [r7, #20]
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f0b4:	69bb      	ldr	r3, [r7, #24]
 800f0b6:	1c5a      	adds	r2, r3, #1
 800f0b8:	61ba      	str	r2, [r7, #24]
 800f0ba:	693a      	ldr	r2, [r7, #16]
 800f0bc:	4413      	add	r3, r2
 800f0be:	781b      	ldrb	r3, [r3, #0]
 800f0c0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f0c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0c4:	2b1f      	cmp	r3, #31
 800f0c6:	d940      	bls.n	800f14a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f0c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0ca:	2b2f      	cmp	r3, #47	; 0x2f
 800f0cc:	d006      	beq.n	800f0dc <create_name+0x48>
 800f0ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0d0:	2b5c      	cmp	r3, #92	; 0x5c
 800f0d2:	d110      	bne.n	800f0f6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f0d4:	e002      	b.n	800f0dc <create_name+0x48>
 800f0d6:	69bb      	ldr	r3, [r7, #24]
 800f0d8:	3301      	adds	r3, #1
 800f0da:	61bb      	str	r3, [r7, #24]
 800f0dc:	693a      	ldr	r2, [r7, #16]
 800f0de:	69bb      	ldr	r3, [r7, #24]
 800f0e0:	4413      	add	r3, r2
 800f0e2:	781b      	ldrb	r3, [r3, #0]
 800f0e4:	2b2f      	cmp	r3, #47	; 0x2f
 800f0e6:	d0f6      	beq.n	800f0d6 <create_name+0x42>
 800f0e8:	693a      	ldr	r2, [r7, #16]
 800f0ea:	69bb      	ldr	r3, [r7, #24]
 800f0ec:	4413      	add	r3, r2
 800f0ee:	781b      	ldrb	r3, [r3, #0]
 800f0f0:	2b5c      	cmp	r3, #92	; 0x5c
 800f0f2:	d0f0      	beq.n	800f0d6 <create_name+0x42>
			break;
 800f0f4:	e02a      	b.n	800f14c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	2bfe      	cmp	r3, #254	; 0xfe
 800f0fa:	d901      	bls.n	800f100 <create_name+0x6c>
 800f0fc:	2306      	movs	r3, #6
 800f0fe:	e17d      	b.n	800f3fc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f100:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f102:	b2db      	uxtb	r3, r3
 800f104:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f108:	2101      	movs	r1, #1
 800f10a:	4618      	mov	r0, r3
 800f10c:	f001 fdee 	bl	8010cec <ff_convert>
 800f110:	4603      	mov	r3, r0
 800f112:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f114:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f116:	2b00      	cmp	r3, #0
 800f118:	d101      	bne.n	800f11e <create_name+0x8a>
 800f11a:	2306      	movs	r3, #6
 800f11c:	e16e      	b.n	800f3fc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f11e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f120:	2b7f      	cmp	r3, #127	; 0x7f
 800f122:	d809      	bhi.n	800f138 <create_name+0xa4>
 800f124:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f126:	4619      	mov	r1, r3
 800f128:	488d      	ldr	r0, [pc, #564]	; (800f360 <create_name+0x2cc>)
 800f12a:	f7fe faf8 	bl	800d71e <chk_chr>
 800f12e:	4603      	mov	r3, r0
 800f130:	2b00      	cmp	r3, #0
 800f132:	d001      	beq.n	800f138 <create_name+0xa4>
 800f134:	2306      	movs	r3, #6
 800f136:	e161      	b.n	800f3fc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	1c5a      	adds	r2, r3, #1
 800f13c:	617a      	str	r2, [r7, #20]
 800f13e:	005b      	lsls	r3, r3, #1
 800f140:	68fa      	ldr	r2, [r7, #12]
 800f142:	4413      	add	r3, r2
 800f144:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f146:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f148:	e7b4      	b.n	800f0b4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800f14a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f14c:	693a      	ldr	r2, [r7, #16]
 800f14e:	69bb      	ldr	r3, [r7, #24]
 800f150:	441a      	add	r2, r3
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f156:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f158:	2b1f      	cmp	r3, #31
 800f15a:	d801      	bhi.n	800f160 <create_name+0xcc>
 800f15c:	2304      	movs	r3, #4
 800f15e:	e000      	b.n	800f162 <create_name+0xce>
 800f160:	2300      	movs	r3, #0
 800f162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f166:	e011      	b.n	800f18c <create_name+0xf8>
		w = lfn[di - 1];
 800f168:	697b      	ldr	r3, [r7, #20]
 800f16a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f16e:	3b01      	subs	r3, #1
 800f170:	005b      	lsls	r3, r3, #1
 800f172:	68fa      	ldr	r2, [r7, #12]
 800f174:	4413      	add	r3, r2
 800f176:	881b      	ldrh	r3, [r3, #0]
 800f178:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800f17a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f17c:	2b20      	cmp	r3, #32
 800f17e:	d002      	beq.n	800f186 <create_name+0xf2>
 800f180:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f182:	2b2e      	cmp	r3, #46	; 0x2e
 800f184:	d106      	bne.n	800f194 <create_name+0x100>
		di--;
 800f186:	697b      	ldr	r3, [r7, #20]
 800f188:	3b01      	subs	r3, #1
 800f18a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d1ea      	bne.n	800f168 <create_name+0xd4>
 800f192:	e000      	b.n	800f196 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800f194:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f196:	697b      	ldr	r3, [r7, #20]
 800f198:	005b      	lsls	r3, r3, #1
 800f19a:	68fa      	ldr	r2, [r7, #12]
 800f19c:	4413      	add	r3, r2
 800f19e:	2200      	movs	r2, #0
 800f1a0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d101      	bne.n	800f1ac <create_name+0x118>
 800f1a8:	2306      	movs	r3, #6
 800f1aa:	e127      	b.n	800f3fc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	3324      	adds	r3, #36	; 0x24
 800f1b0:	220b      	movs	r2, #11
 800f1b2:	2120      	movs	r1, #32
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f7fe fa70 	bl	800d69a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	61bb      	str	r3, [r7, #24]
 800f1be:	e002      	b.n	800f1c6 <create_name+0x132>
 800f1c0:	69bb      	ldr	r3, [r7, #24]
 800f1c2:	3301      	adds	r3, #1
 800f1c4:	61bb      	str	r3, [r7, #24]
 800f1c6:	69bb      	ldr	r3, [r7, #24]
 800f1c8:	005b      	lsls	r3, r3, #1
 800f1ca:	68fa      	ldr	r2, [r7, #12]
 800f1cc:	4413      	add	r3, r2
 800f1ce:	881b      	ldrh	r3, [r3, #0]
 800f1d0:	2b20      	cmp	r3, #32
 800f1d2:	d0f5      	beq.n	800f1c0 <create_name+0x12c>
 800f1d4:	69bb      	ldr	r3, [r7, #24]
 800f1d6:	005b      	lsls	r3, r3, #1
 800f1d8:	68fa      	ldr	r2, [r7, #12]
 800f1da:	4413      	add	r3, r2
 800f1dc:	881b      	ldrh	r3, [r3, #0]
 800f1de:	2b2e      	cmp	r3, #46	; 0x2e
 800f1e0:	d0ee      	beq.n	800f1c0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f1e2:	69bb      	ldr	r3, [r7, #24]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d009      	beq.n	800f1fc <create_name+0x168>
 800f1e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1ec:	f043 0303 	orr.w	r3, r3, #3
 800f1f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f1f4:	e002      	b.n	800f1fc <create_name+0x168>
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	3b01      	subs	r3, #1
 800f1fa:	617b      	str	r3, [r7, #20]
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d009      	beq.n	800f216 <create_name+0x182>
 800f202:	697b      	ldr	r3, [r7, #20]
 800f204:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f208:	3b01      	subs	r3, #1
 800f20a:	005b      	lsls	r3, r3, #1
 800f20c:	68fa      	ldr	r2, [r7, #12]
 800f20e:	4413      	add	r3, r2
 800f210:	881b      	ldrh	r3, [r3, #0]
 800f212:	2b2e      	cmp	r3, #46	; 0x2e
 800f214:	d1ef      	bne.n	800f1f6 <create_name+0x162>

	i = b = 0; ni = 8;
 800f216:	2300      	movs	r3, #0
 800f218:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f21c:	2300      	movs	r3, #0
 800f21e:	623b      	str	r3, [r7, #32]
 800f220:	2308      	movs	r3, #8
 800f222:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f224:	69bb      	ldr	r3, [r7, #24]
 800f226:	1c5a      	adds	r2, r3, #1
 800f228:	61ba      	str	r2, [r7, #24]
 800f22a:	005b      	lsls	r3, r3, #1
 800f22c:	68fa      	ldr	r2, [r7, #12]
 800f22e:	4413      	add	r3, r2
 800f230:	881b      	ldrh	r3, [r3, #0]
 800f232:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f234:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f236:	2b00      	cmp	r3, #0
 800f238:	f000 8090 	beq.w	800f35c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f23c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f23e:	2b20      	cmp	r3, #32
 800f240:	d006      	beq.n	800f250 <create_name+0x1bc>
 800f242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f244:	2b2e      	cmp	r3, #46	; 0x2e
 800f246:	d10a      	bne.n	800f25e <create_name+0x1ca>
 800f248:	69ba      	ldr	r2, [r7, #24]
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	429a      	cmp	r2, r3
 800f24e:	d006      	beq.n	800f25e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800f250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f254:	f043 0303 	orr.w	r3, r3, #3
 800f258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f25c:	e07d      	b.n	800f35a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f25e:	6a3a      	ldr	r2, [r7, #32]
 800f260:	69fb      	ldr	r3, [r7, #28]
 800f262:	429a      	cmp	r2, r3
 800f264:	d203      	bcs.n	800f26e <create_name+0x1da>
 800f266:	69ba      	ldr	r2, [r7, #24]
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d123      	bne.n	800f2b6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800f26e:	69fb      	ldr	r3, [r7, #28]
 800f270:	2b0b      	cmp	r3, #11
 800f272:	d106      	bne.n	800f282 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f278:	f043 0303 	orr.w	r3, r3, #3
 800f27c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f280:	e075      	b.n	800f36e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f282:	69ba      	ldr	r2, [r7, #24]
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	429a      	cmp	r2, r3
 800f288:	d005      	beq.n	800f296 <create_name+0x202>
 800f28a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f28e:	f043 0303 	orr.w	r3, r3, #3
 800f292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f296:	69ba      	ldr	r2, [r7, #24]
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	429a      	cmp	r2, r3
 800f29c:	d866      	bhi.n	800f36c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	61bb      	str	r3, [r7, #24]
 800f2a2:	2308      	movs	r3, #8
 800f2a4:	623b      	str	r3, [r7, #32]
 800f2a6:	230b      	movs	r3, #11
 800f2a8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f2aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f2ae:	009b      	lsls	r3, r3, #2
 800f2b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f2b4:	e051      	b.n	800f35a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f2b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2b8:	2b7f      	cmp	r3, #127	; 0x7f
 800f2ba:	d914      	bls.n	800f2e6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f2bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2be:	2100      	movs	r1, #0
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f001 fd13 	bl	8010cec <ff_convert>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f2ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d004      	beq.n	800f2da <create_name+0x246>
 800f2d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2d2:	3b80      	subs	r3, #128	; 0x80
 800f2d4:	4a23      	ldr	r2, [pc, #140]	; (800f364 <create_name+0x2d0>)
 800f2d6:	5cd3      	ldrb	r3, [r2, r3]
 800f2d8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f2da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2de:	f043 0302 	orr.w	r3, r3, #2
 800f2e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f2e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d007      	beq.n	800f2fc <create_name+0x268>
 800f2ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2ee:	4619      	mov	r1, r3
 800f2f0:	481d      	ldr	r0, [pc, #116]	; (800f368 <create_name+0x2d4>)
 800f2f2:	f7fe fa14 	bl	800d71e <chk_chr>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d008      	beq.n	800f30e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f2fc:	235f      	movs	r3, #95	; 0x5f
 800f2fe:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f304:	f043 0303 	orr.w	r3, r3, #3
 800f308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f30c:	e01b      	b.n	800f346 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f30e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f310:	2b40      	cmp	r3, #64	; 0x40
 800f312:	d909      	bls.n	800f328 <create_name+0x294>
 800f314:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f316:	2b5a      	cmp	r3, #90	; 0x5a
 800f318:	d806      	bhi.n	800f328 <create_name+0x294>
					b |= 2;
 800f31a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f31e:	f043 0302 	orr.w	r3, r3, #2
 800f322:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f326:	e00e      	b.n	800f346 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f328:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f32a:	2b60      	cmp	r3, #96	; 0x60
 800f32c:	d90b      	bls.n	800f346 <create_name+0x2b2>
 800f32e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f330:	2b7a      	cmp	r3, #122	; 0x7a
 800f332:	d808      	bhi.n	800f346 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f334:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f338:	f043 0301 	orr.w	r3, r3, #1
 800f33c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f340:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f342:	3b20      	subs	r3, #32
 800f344:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f346:	6a3b      	ldr	r3, [r7, #32]
 800f348:	1c5a      	adds	r2, r3, #1
 800f34a:	623a      	str	r2, [r7, #32]
 800f34c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f34e:	b2d1      	uxtb	r1, r2
 800f350:	687a      	ldr	r2, [r7, #4]
 800f352:	4413      	add	r3, r2
 800f354:	460a      	mov	r2, r1
 800f356:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800f35a:	e763      	b.n	800f224 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f35c:	bf00      	nop
 800f35e:	e006      	b.n	800f36e <create_name+0x2da>
 800f360:	08011f2c 	.word	0x08011f2c
 800f364:	08011f94 	.word	0x08011f94
 800f368:	08011f38 	.word	0x08011f38
			if (si > di) break;			/* No extension */
 800f36c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f374:	2be5      	cmp	r3, #229	; 0xe5
 800f376:	d103      	bne.n	800f380 <create_name+0x2ec>
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2205      	movs	r2, #5
 800f37c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800f380:	69fb      	ldr	r3, [r7, #28]
 800f382:	2b08      	cmp	r3, #8
 800f384:	d104      	bne.n	800f390 <create_name+0x2fc>
 800f386:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f38a:	009b      	lsls	r3, r3, #2
 800f38c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f390:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f394:	f003 030c 	and.w	r3, r3, #12
 800f398:	2b0c      	cmp	r3, #12
 800f39a:	d005      	beq.n	800f3a8 <create_name+0x314>
 800f39c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f3a0:	f003 0303 	and.w	r3, r3, #3
 800f3a4:	2b03      	cmp	r3, #3
 800f3a6:	d105      	bne.n	800f3b4 <create_name+0x320>
 800f3a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3ac:	f043 0302 	orr.w	r3, r3, #2
 800f3b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f3b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3b8:	f003 0302 	and.w	r3, r3, #2
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d117      	bne.n	800f3f0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f3c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f3c4:	f003 0303 	and.w	r3, r3, #3
 800f3c8:	2b01      	cmp	r3, #1
 800f3ca:	d105      	bne.n	800f3d8 <create_name+0x344>
 800f3cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3d0:	f043 0310 	orr.w	r3, r3, #16
 800f3d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f3d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f3dc:	f003 030c 	and.w	r3, r3, #12
 800f3e0:	2b04      	cmp	r3, #4
 800f3e2:	d105      	bne.n	800f3f0 <create_name+0x35c>
 800f3e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3e8:	f043 0308 	orr.w	r3, r3, #8
 800f3ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f3f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800f3fa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	3728      	adds	r7, #40	; 0x28
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}

0800f404 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b086      	sub	sp, #24
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
 800f40c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f412:	693b      	ldr	r3, [r7, #16]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f418:	e002      	b.n	800f420 <follow_path+0x1c>
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	3301      	adds	r3, #1
 800f41e:	603b      	str	r3, [r7, #0]
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	2b2f      	cmp	r3, #47	; 0x2f
 800f426:	d0f8      	beq.n	800f41a <follow_path+0x16>
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	2b5c      	cmp	r3, #92	; 0x5c
 800f42e:	d0f4      	beq.n	800f41a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f430:	693b      	ldr	r3, [r7, #16]
 800f432:	2200      	movs	r2, #0
 800f434:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	781b      	ldrb	r3, [r3, #0]
 800f43a:	2b1f      	cmp	r3, #31
 800f43c:	d80a      	bhi.n	800f454 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2280      	movs	r2, #128	; 0x80
 800f442:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f446:	2100      	movs	r1, #0
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f7fe ff15 	bl	800e278 <dir_sdi>
 800f44e:	4603      	mov	r3, r0
 800f450:	75fb      	strb	r3, [r7, #23]
 800f452:	e048      	b.n	800f4e6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f454:	463b      	mov	r3, r7
 800f456:	4619      	mov	r1, r3
 800f458:	6878      	ldr	r0, [r7, #4]
 800f45a:	f7ff fe1b 	bl	800f094 <create_name>
 800f45e:	4603      	mov	r3, r0
 800f460:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f462:	7dfb      	ldrb	r3, [r7, #23]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d139      	bne.n	800f4dc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f7ff fb7d 	bl	800eb68 <dir_find>
 800f46e:	4603      	mov	r3, r0
 800f470:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f478:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f47a:	7dfb      	ldrb	r3, [r7, #23]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d00a      	beq.n	800f496 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f480:	7dfb      	ldrb	r3, [r7, #23]
 800f482:	2b04      	cmp	r3, #4
 800f484:	d12c      	bne.n	800f4e0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f486:	7afb      	ldrb	r3, [r7, #11]
 800f488:	f003 0304 	and.w	r3, r3, #4
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d127      	bne.n	800f4e0 <follow_path+0xdc>
 800f490:	2305      	movs	r3, #5
 800f492:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f494:	e024      	b.n	800f4e0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f496:	7afb      	ldrb	r3, [r7, #11]
 800f498:	f003 0304 	and.w	r3, r3, #4
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d121      	bne.n	800f4e4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f4a0:	693b      	ldr	r3, [r7, #16]
 800f4a2:	799b      	ldrb	r3, [r3, #6]
 800f4a4:	f003 0310 	and.w	r3, r3, #16
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d102      	bne.n	800f4b2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f4ac:	2305      	movs	r3, #5
 800f4ae:	75fb      	strb	r3, [r7, #23]
 800f4b0:	e019      	b.n	800f4e6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	695b      	ldr	r3, [r3, #20]
 800f4bc:	68fa      	ldr	r2, [r7, #12]
 800f4be:	8992      	ldrh	r2, [r2, #12]
 800f4c0:	fbb3 f0f2 	udiv	r0, r3, r2
 800f4c4:	fb00 f202 	mul.w	r2, r0, r2
 800f4c8:	1a9b      	subs	r3, r3, r2
 800f4ca:	440b      	add	r3, r1
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	68f8      	ldr	r0, [r7, #12]
 800f4d0:	f7ff f878 	bl	800e5c4 <ld_clust>
 800f4d4:	4602      	mov	r2, r0
 800f4d6:	693b      	ldr	r3, [r7, #16]
 800f4d8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f4da:	e7bb      	b.n	800f454 <follow_path+0x50>
			if (res != FR_OK) break;
 800f4dc:	bf00      	nop
 800f4de:	e002      	b.n	800f4e6 <follow_path+0xe2>
				break;
 800f4e0:	bf00      	nop
 800f4e2:	e000      	b.n	800f4e6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f4e4:	bf00      	nop
			}
		}
	}

	return res;
 800f4e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	3718      	adds	r7, #24
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}

0800f4f0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f4f0:	b480      	push	{r7}
 800f4f2:	b087      	sub	sp, #28
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f4f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f4fc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d031      	beq.n	800f56a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	617b      	str	r3, [r7, #20]
 800f50c:	e002      	b.n	800f514 <get_ldnumber+0x24>
 800f50e:	697b      	ldr	r3, [r7, #20]
 800f510:	3301      	adds	r3, #1
 800f512:	617b      	str	r3, [r7, #20]
 800f514:	697b      	ldr	r3, [r7, #20]
 800f516:	781b      	ldrb	r3, [r3, #0]
 800f518:	2b1f      	cmp	r3, #31
 800f51a:	d903      	bls.n	800f524 <get_ldnumber+0x34>
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	781b      	ldrb	r3, [r3, #0]
 800f520:	2b3a      	cmp	r3, #58	; 0x3a
 800f522:	d1f4      	bne.n	800f50e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f524:	697b      	ldr	r3, [r7, #20]
 800f526:	781b      	ldrb	r3, [r3, #0]
 800f528:	2b3a      	cmp	r3, #58	; 0x3a
 800f52a:	d11c      	bne.n	800f566 <get_ldnumber+0x76>
			tp = *path;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	1c5a      	adds	r2, r3, #1
 800f536:	60fa      	str	r2, [r7, #12]
 800f538:	781b      	ldrb	r3, [r3, #0]
 800f53a:	3b30      	subs	r3, #48	; 0x30
 800f53c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	2b09      	cmp	r3, #9
 800f542:	d80e      	bhi.n	800f562 <get_ldnumber+0x72>
 800f544:	68fa      	ldr	r2, [r7, #12]
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	429a      	cmp	r2, r3
 800f54a:	d10a      	bne.n	800f562 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d107      	bne.n	800f562 <get_ldnumber+0x72>
					vol = (int)i;
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f556:	697b      	ldr	r3, [r7, #20]
 800f558:	3301      	adds	r3, #1
 800f55a:	617b      	str	r3, [r7, #20]
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	697a      	ldr	r2, [r7, #20]
 800f560:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f562:	693b      	ldr	r3, [r7, #16]
 800f564:	e002      	b.n	800f56c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f566:	2300      	movs	r3, #0
 800f568:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f56a:	693b      	ldr	r3, [r7, #16]
}
 800f56c:	4618      	mov	r0, r3
 800f56e:	371c      	adds	r7, #28
 800f570:	46bd      	mov	sp, r7
 800f572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f576:	4770      	bx	lr

0800f578 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b082      	sub	sp, #8
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
 800f580:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	2200      	movs	r2, #0
 800f586:	70da      	strb	r2, [r3, #3]
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f58e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f590:	6839      	ldr	r1, [r7, #0]
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f7fe fa8e 	bl	800dab4 <move_window>
 800f598:	4603      	mov	r3, r0
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d001      	beq.n	800f5a2 <check_fs+0x2a>
 800f59e:	2304      	movs	r3, #4
 800f5a0:	e038      	b.n	800f614 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	3338      	adds	r3, #56	; 0x38
 800f5a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f7fd ffd2 	bl	800d554 <ld_word>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	461a      	mov	r2, r3
 800f5b4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d001      	beq.n	800f5c0 <check_fs+0x48>
 800f5bc:	2303      	movs	r3, #3
 800f5be:	e029      	b.n	800f614 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f5c6:	2be9      	cmp	r3, #233	; 0xe9
 800f5c8:	d009      	beq.n	800f5de <check_fs+0x66>
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f5d0:	2beb      	cmp	r3, #235	; 0xeb
 800f5d2:	d11e      	bne.n	800f612 <check_fs+0x9a>
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f5da:	2b90      	cmp	r3, #144	; 0x90
 800f5dc:	d119      	bne.n	800f612 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	3338      	adds	r3, #56	; 0x38
 800f5e2:	3336      	adds	r3, #54	; 0x36
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f7fd ffcd 	bl	800d584 <ld_dword>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f5f0:	4a0a      	ldr	r2, [pc, #40]	; (800f61c <check_fs+0xa4>)
 800f5f2:	4293      	cmp	r3, r2
 800f5f4:	d101      	bne.n	800f5fa <check_fs+0x82>
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	e00c      	b.n	800f614 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	3338      	adds	r3, #56	; 0x38
 800f5fe:	3352      	adds	r3, #82	; 0x52
 800f600:	4618      	mov	r0, r3
 800f602:	f7fd ffbf 	bl	800d584 <ld_dword>
 800f606:	4603      	mov	r3, r0
 800f608:	4a05      	ldr	r2, [pc, #20]	; (800f620 <check_fs+0xa8>)
 800f60a:	4293      	cmp	r3, r2
 800f60c:	d101      	bne.n	800f612 <check_fs+0x9a>
 800f60e:	2300      	movs	r3, #0
 800f610:	e000      	b.n	800f614 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f612:	2302      	movs	r3, #2
}
 800f614:	4618      	mov	r0, r3
 800f616:	3708      	adds	r7, #8
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}
 800f61c:	00544146 	.word	0x00544146
 800f620:	33544146 	.word	0x33544146

0800f624 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b096      	sub	sp, #88	; 0x58
 800f628:	af00      	add	r7, sp, #0
 800f62a:	60f8      	str	r0, [r7, #12]
 800f62c:	60b9      	str	r1, [r7, #8]
 800f62e:	4613      	mov	r3, r2
 800f630:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f632:	68bb      	ldr	r3, [r7, #8]
 800f634:	2200      	movs	r2, #0
 800f636:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f638:	68f8      	ldr	r0, [r7, #12]
 800f63a:	f7ff ff59 	bl	800f4f0 <get_ldnumber>
 800f63e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f642:	2b00      	cmp	r3, #0
 800f644:	da01      	bge.n	800f64a <find_volume+0x26>
 800f646:	230b      	movs	r3, #11
 800f648:	e265      	b.n	800fb16 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f64a:	4a9f      	ldr	r2, [pc, #636]	; (800f8c8 <find_volume+0x2a4>)
 800f64c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f64e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f652:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f656:	2b00      	cmp	r3, #0
 800f658:	d101      	bne.n	800f65e <find_volume+0x3a>
 800f65a:	230c      	movs	r3, #12
 800f65c:	e25b      	b.n	800fb16 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f662:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f664:	79fb      	ldrb	r3, [r7, #7]
 800f666:	f023 0301 	bic.w	r3, r3, #1
 800f66a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f66e:	781b      	ldrb	r3, [r3, #0]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d01a      	beq.n	800f6aa <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f676:	785b      	ldrb	r3, [r3, #1]
 800f678:	4618      	mov	r0, r3
 800f67a:	f7fd fecd 	bl	800d418 <disk_status>
 800f67e:	4603      	mov	r3, r0
 800f680:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f684:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f688:	f003 0301 	and.w	r3, r3, #1
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d10c      	bne.n	800f6aa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f690:	79fb      	ldrb	r3, [r7, #7]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d007      	beq.n	800f6a6 <find_volume+0x82>
 800f696:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f69a:	f003 0304 	and.w	r3, r3, #4
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d001      	beq.n	800f6a6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f6a2:	230a      	movs	r3, #10
 800f6a4:	e237      	b.n	800fb16 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	e235      	b.n	800fb16 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f6b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6b2:	b2da      	uxtb	r2, r3
 800f6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ba:	785b      	ldrb	r3, [r3, #1]
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f7fd fec5 	bl	800d44c <disk_initialize>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f6c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f6cc:	f003 0301 	and.w	r3, r3, #1
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d001      	beq.n	800f6d8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f6d4:	2303      	movs	r3, #3
 800f6d6:	e21e      	b.n	800fb16 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f6d8:	79fb      	ldrb	r3, [r7, #7]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d007      	beq.n	800f6ee <find_volume+0xca>
 800f6de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f6e2:	f003 0304 	and.w	r3, r3, #4
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d001      	beq.n	800f6ee <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f6ea:	230a      	movs	r3, #10
 800f6ec:	e213      	b.n	800fb16 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6f0:	7858      	ldrb	r0, [r3, #1]
 800f6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6f4:	330c      	adds	r3, #12
 800f6f6:	461a      	mov	r2, r3
 800f6f8:	2102      	movs	r1, #2
 800f6fa:	f7fd ff0d 	bl	800d518 <disk_ioctl>
 800f6fe:	4603      	mov	r3, r0
 800f700:	2b00      	cmp	r3, #0
 800f702:	d001      	beq.n	800f708 <find_volume+0xe4>
 800f704:	2301      	movs	r3, #1
 800f706:	e206      	b.n	800fb16 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f70a:	899b      	ldrh	r3, [r3, #12]
 800f70c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f710:	d80d      	bhi.n	800f72e <find_volume+0x10a>
 800f712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f714:	899b      	ldrh	r3, [r3, #12]
 800f716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f71a:	d308      	bcc.n	800f72e <find_volume+0x10a>
 800f71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f71e:	899b      	ldrh	r3, [r3, #12]
 800f720:	461a      	mov	r2, r3
 800f722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f724:	899b      	ldrh	r3, [r3, #12]
 800f726:	3b01      	subs	r3, #1
 800f728:	4013      	ands	r3, r2
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d001      	beq.n	800f732 <find_volume+0x10e>
 800f72e:	2301      	movs	r3, #1
 800f730:	e1f1      	b.n	800fb16 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f732:	2300      	movs	r3, #0
 800f734:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f736:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f738:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f73a:	f7ff ff1d 	bl	800f578 <check_fs>
 800f73e:	4603      	mov	r3, r0
 800f740:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f744:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f748:	2b02      	cmp	r3, #2
 800f74a:	d149      	bne.n	800f7e0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f74c:	2300      	movs	r3, #0
 800f74e:	643b      	str	r3, [r7, #64]	; 0x40
 800f750:	e01e      	b.n	800f790 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f754:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f75a:	011b      	lsls	r3, r3, #4
 800f75c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f760:	4413      	add	r3, r2
 800f762:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f766:	3304      	adds	r3, #4
 800f768:	781b      	ldrb	r3, [r3, #0]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d006      	beq.n	800f77c <find_volume+0x158>
 800f76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f770:	3308      	adds	r3, #8
 800f772:	4618      	mov	r0, r3
 800f774:	f7fd ff06 	bl	800d584 <ld_dword>
 800f778:	4602      	mov	r2, r0
 800f77a:	e000      	b.n	800f77e <find_volume+0x15a>
 800f77c:	2200      	movs	r2, #0
 800f77e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f780:	009b      	lsls	r3, r3, #2
 800f782:	3358      	adds	r3, #88	; 0x58
 800f784:	443b      	add	r3, r7
 800f786:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f78a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f78c:	3301      	adds	r3, #1
 800f78e:	643b      	str	r3, [r7, #64]	; 0x40
 800f790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f792:	2b03      	cmp	r3, #3
 800f794:	d9dd      	bls.n	800f752 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f796:	2300      	movs	r3, #0
 800f798:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f79a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d002      	beq.n	800f7a6 <find_volume+0x182>
 800f7a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7a2:	3b01      	subs	r3, #1
 800f7a4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f7a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7a8:	009b      	lsls	r3, r3, #2
 800f7aa:	3358      	adds	r3, #88	; 0x58
 800f7ac:	443b      	add	r3, r7
 800f7ae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f7b2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f7b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d005      	beq.n	800f7c6 <find_volume+0x1a2>
 800f7ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f7bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f7be:	f7ff fedb 	bl	800f578 <check_fs>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	e000      	b.n	800f7c8 <find_volume+0x1a4>
 800f7c6:	2303      	movs	r3, #3
 800f7c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f7cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f7d0:	2b01      	cmp	r3, #1
 800f7d2:	d905      	bls.n	800f7e0 <find_volume+0x1bc>
 800f7d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7d6:	3301      	adds	r3, #1
 800f7d8:	643b      	str	r3, [r7, #64]	; 0x40
 800f7da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7dc:	2b03      	cmp	r3, #3
 800f7de:	d9e2      	bls.n	800f7a6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f7e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f7e4:	2b04      	cmp	r3, #4
 800f7e6:	d101      	bne.n	800f7ec <find_volume+0x1c8>
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	e194      	b.n	800fb16 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f7ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f7f0:	2b01      	cmp	r3, #1
 800f7f2:	d901      	bls.n	800f7f8 <find_volume+0x1d4>
 800f7f4:	230d      	movs	r3, #13
 800f7f6:	e18e      	b.n	800fb16 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7fa:	3338      	adds	r3, #56	; 0x38
 800f7fc:	330b      	adds	r3, #11
 800f7fe:	4618      	mov	r0, r3
 800f800:	f7fd fea8 	bl	800d554 <ld_word>
 800f804:	4603      	mov	r3, r0
 800f806:	461a      	mov	r2, r3
 800f808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f80a:	899b      	ldrh	r3, [r3, #12]
 800f80c:	429a      	cmp	r2, r3
 800f80e:	d001      	beq.n	800f814 <find_volume+0x1f0>
 800f810:	230d      	movs	r3, #13
 800f812:	e180      	b.n	800fb16 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f816:	3338      	adds	r3, #56	; 0x38
 800f818:	3316      	adds	r3, #22
 800f81a:	4618      	mov	r0, r3
 800f81c:	f7fd fe9a 	bl	800d554 <ld_word>
 800f820:	4603      	mov	r3, r0
 800f822:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f826:	2b00      	cmp	r3, #0
 800f828:	d106      	bne.n	800f838 <find_volume+0x214>
 800f82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f82c:	3338      	adds	r3, #56	; 0x38
 800f82e:	3324      	adds	r3, #36	; 0x24
 800f830:	4618      	mov	r0, r3
 800f832:	f7fd fea7 	bl	800d584 <ld_dword>
 800f836:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f83a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f83c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f840:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f846:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f84a:	789b      	ldrb	r3, [r3, #2]
 800f84c:	2b01      	cmp	r3, #1
 800f84e:	d005      	beq.n	800f85c <find_volume+0x238>
 800f850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f852:	789b      	ldrb	r3, [r3, #2]
 800f854:	2b02      	cmp	r3, #2
 800f856:	d001      	beq.n	800f85c <find_volume+0x238>
 800f858:	230d      	movs	r3, #13
 800f85a:	e15c      	b.n	800fb16 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f85e:	789b      	ldrb	r3, [r3, #2]
 800f860:	461a      	mov	r2, r3
 800f862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f864:	fb02 f303 	mul.w	r3, r2, r3
 800f868:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f86c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f870:	b29a      	uxth	r2, r3
 800f872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f874:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f878:	895b      	ldrh	r3, [r3, #10]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d008      	beq.n	800f890 <find_volume+0x26c>
 800f87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f880:	895b      	ldrh	r3, [r3, #10]
 800f882:	461a      	mov	r2, r3
 800f884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f886:	895b      	ldrh	r3, [r3, #10]
 800f888:	3b01      	subs	r3, #1
 800f88a:	4013      	ands	r3, r2
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d001      	beq.n	800f894 <find_volume+0x270>
 800f890:	230d      	movs	r3, #13
 800f892:	e140      	b.n	800fb16 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f896:	3338      	adds	r3, #56	; 0x38
 800f898:	3311      	adds	r3, #17
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7fd fe5a 	bl	800d554 <ld_word>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	461a      	mov	r2, r3
 800f8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8aa:	891b      	ldrh	r3, [r3, #8]
 800f8ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8ae:	8992      	ldrh	r2, [r2, #12]
 800f8b0:	0952      	lsrs	r2, r2, #5
 800f8b2:	b292      	uxth	r2, r2
 800f8b4:	fbb3 f1f2 	udiv	r1, r3, r2
 800f8b8:	fb01 f202 	mul.w	r2, r1, r2
 800f8bc:	1a9b      	subs	r3, r3, r2
 800f8be:	b29b      	uxth	r3, r3
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d003      	beq.n	800f8cc <find_volume+0x2a8>
 800f8c4:	230d      	movs	r3, #13
 800f8c6:	e126      	b.n	800fb16 <find_volume+0x4f2>
 800f8c8:	20002c50 	.word	0x20002c50

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ce:	3338      	adds	r3, #56	; 0x38
 800f8d0:	3313      	adds	r3, #19
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f7fd fe3e 	bl	800d554 <ld_word>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f8dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d106      	bne.n	800f8f0 <find_volume+0x2cc>
 800f8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8e4:	3338      	adds	r3, #56	; 0x38
 800f8e6:	3320      	adds	r3, #32
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f7fd fe4b 	bl	800d584 <ld_dword>
 800f8ee:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8f2:	3338      	adds	r3, #56	; 0x38
 800f8f4:	330e      	adds	r3, #14
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f7fd fe2c 	bl	800d554 <ld_word>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f900:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f902:	2b00      	cmp	r3, #0
 800f904:	d101      	bne.n	800f90a <find_volume+0x2e6>
 800f906:	230d      	movs	r3, #13
 800f908:	e105      	b.n	800fb16 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f90a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f90c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f90e:	4413      	add	r3, r2
 800f910:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f912:	8911      	ldrh	r1, [r2, #8]
 800f914:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f916:	8992      	ldrh	r2, [r2, #12]
 800f918:	0952      	lsrs	r2, r2, #5
 800f91a:	b292      	uxth	r2, r2
 800f91c:	fbb1 f2f2 	udiv	r2, r1, r2
 800f920:	b292      	uxth	r2, r2
 800f922:	4413      	add	r3, r2
 800f924:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f926:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d201      	bcs.n	800f932 <find_volume+0x30e>
 800f92e:	230d      	movs	r3, #13
 800f930:	e0f1      	b.n	800fb16 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f932:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f936:	1ad3      	subs	r3, r2, r3
 800f938:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f93a:	8952      	ldrh	r2, [r2, #10]
 800f93c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f940:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f944:	2b00      	cmp	r3, #0
 800f946:	d101      	bne.n	800f94c <find_volume+0x328>
 800f948:	230d      	movs	r3, #13
 800f94a:	e0e4      	b.n	800fb16 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800f94c:	2303      	movs	r3, #3
 800f94e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f954:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f958:	4293      	cmp	r3, r2
 800f95a:	d802      	bhi.n	800f962 <find_volume+0x33e>
 800f95c:	2302      	movs	r3, #2
 800f95e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f964:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f968:	4293      	cmp	r3, r2
 800f96a:	d802      	bhi.n	800f972 <find_volume+0x34e>
 800f96c:	2301      	movs	r3, #1
 800f96e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f974:	1c9a      	adds	r2, r3, #2
 800f976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f978:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800f97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f97c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f97e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f980:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f984:	441a      	add	r2, r3
 800f986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f988:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800f98a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f98e:	441a      	add	r2, r3
 800f990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f992:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800f994:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f998:	2b03      	cmp	r3, #3
 800f99a:	d11e      	bne.n	800f9da <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f99e:	3338      	adds	r3, #56	; 0x38
 800f9a0:	332a      	adds	r3, #42	; 0x2a
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	f7fd fdd6 	bl	800d554 <ld_word>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d001      	beq.n	800f9b2 <find_volume+0x38e>
 800f9ae:	230d      	movs	r3, #13
 800f9b0:	e0b1      	b.n	800fb16 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9b4:	891b      	ldrh	r3, [r3, #8]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d001      	beq.n	800f9be <find_volume+0x39a>
 800f9ba:	230d      	movs	r3, #13
 800f9bc:	e0ab      	b.n	800fb16 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9c0:	3338      	adds	r3, #56	; 0x38
 800f9c2:	332c      	adds	r3, #44	; 0x2c
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f7fd fddd 	bl	800d584 <ld_dword>
 800f9ca:	4602      	mov	r2, r0
 800f9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ce:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9d2:	69db      	ldr	r3, [r3, #28]
 800f9d4:	009b      	lsls	r3, r3, #2
 800f9d6:	647b      	str	r3, [r7, #68]	; 0x44
 800f9d8:	e01f      	b.n	800fa1a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9dc:	891b      	ldrh	r3, [r3, #8]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d101      	bne.n	800f9e6 <find_volume+0x3c2>
 800f9e2:	230d      	movs	r3, #13
 800f9e4:	e097      	b.n	800fb16 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f9ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9ec:	441a      	add	r2, r3
 800f9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9f0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f9f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f9f6:	2b02      	cmp	r3, #2
 800f9f8:	d103      	bne.n	800fa02 <find_volume+0x3de>
 800f9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9fc:	69db      	ldr	r3, [r3, #28]
 800f9fe:	005b      	lsls	r3, r3, #1
 800fa00:	e00a      	b.n	800fa18 <find_volume+0x3f4>
 800fa02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa04:	69da      	ldr	r2, [r3, #28]
 800fa06:	4613      	mov	r3, r2
 800fa08:	005b      	lsls	r3, r3, #1
 800fa0a:	4413      	add	r3, r2
 800fa0c:	085a      	lsrs	r2, r3, #1
 800fa0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa10:	69db      	ldr	r3, [r3, #28]
 800fa12:	f003 0301 	and.w	r3, r3, #1
 800fa16:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fa18:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fa1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa1c:	6a1a      	ldr	r2, [r3, #32]
 800fa1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa20:	899b      	ldrh	r3, [r3, #12]
 800fa22:	4619      	mov	r1, r3
 800fa24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa26:	440b      	add	r3, r1
 800fa28:	3b01      	subs	r3, #1
 800fa2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fa2c:	8989      	ldrh	r1, [r1, #12]
 800fa2e:	fbb3 f3f1 	udiv	r3, r3, r1
 800fa32:	429a      	cmp	r2, r3
 800fa34:	d201      	bcs.n	800fa3a <find_volume+0x416>
 800fa36:	230d      	movs	r3, #13
 800fa38:	e06d      	b.n	800fb16 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fa3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fa40:	619a      	str	r2, [r3, #24]
 800fa42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa44:	699a      	ldr	r2, [r3, #24]
 800fa46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa48:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800fa4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa4c:	2280      	movs	r2, #128	; 0x80
 800fa4e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fa50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fa54:	2b03      	cmp	r3, #3
 800fa56:	d149      	bne.n	800faec <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fa58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa5a:	3338      	adds	r3, #56	; 0x38
 800fa5c:	3330      	adds	r3, #48	; 0x30
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f7fd fd78 	bl	800d554 <ld_word>
 800fa64:	4603      	mov	r3, r0
 800fa66:	2b01      	cmp	r3, #1
 800fa68:	d140      	bne.n	800faec <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fa6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa6c:	3301      	adds	r3, #1
 800fa6e:	4619      	mov	r1, r3
 800fa70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fa72:	f7fe f81f 	bl	800dab4 <move_window>
 800fa76:	4603      	mov	r3, r0
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d137      	bne.n	800faec <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800fa7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa7e:	2200      	movs	r2, #0
 800fa80:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fa82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa84:	3338      	adds	r3, #56	; 0x38
 800fa86:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f7fd fd62 	bl	800d554 <ld_word>
 800fa90:	4603      	mov	r3, r0
 800fa92:	461a      	mov	r2, r3
 800fa94:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fa98:	429a      	cmp	r2, r3
 800fa9a:	d127      	bne.n	800faec <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fa9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa9e:	3338      	adds	r3, #56	; 0x38
 800faa0:	4618      	mov	r0, r3
 800faa2:	f7fd fd6f 	bl	800d584 <ld_dword>
 800faa6:	4603      	mov	r3, r0
 800faa8:	4a1d      	ldr	r2, [pc, #116]	; (800fb20 <find_volume+0x4fc>)
 800faaa:	4293      	cmp	r3, r2
 800faac:	d11e      	bne.n	800faec <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800faae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fab0:	3338      	adds	r3, #56	; 0x38
 800fab2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fab6:	4618      	mov	r0, r3
 800fab8:	f7fd fd64 	bl	800d584 <ld_dword>
 800fabc:	4603      	mov	r3, r0
 800fabe:	4a19      	ldr	r2, [pc, #100]	; (800fb24 <find_volume+0x500>)
 800fac0:	4293      	cmp	r3, r2
 800fac2:	d113      	bne.n	800faec <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fac6:	3338      	adds	r3, #56	; 0x38
 800fac8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800facc:	4618      	mov	r0, r3
 800face:	f7fd fd59 	bl	800d584 <ld_dword>
 800fad2:	4602      	mov	r2, r0
 800fad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fad6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fada:	3338      	adds	r3, #56	; 0x38
 800fadc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fae0:	4618      	mov	r0, r3
 800fae2:	f7fd fd4f 	bl	800d584 <ld_dword>
 800fae6:	4602      	mov	r2, r0
 800fae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faea:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800faec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faee:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800faf2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800faf4:	4b0c      	ldr	r3, [pc, #48]	; (800fb28 <find_volume+0x504>)
 800faf6:	881b      	ldrh	r3, [r3, #0]
 800faf8:	3301      	adds	r3, #1
 800fafa:	b29a      	uxth	r2, r3
 800fafc:	4b0a      	ldr	r3, [pc, #40]	; (800fb28 <find_volume+0x504>)
 800fafe:	801a      	strh	r2, [r3, #0]
 800fb00:	4b09      	ldr	r3, [pc, #36]	; (800fb28 <find_volume+0x504>)
 800fb02:	881a      	ldrh	r2, [r3, #0]
 800fb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb06:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800fb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb0a:	4a08      	ldr	r2, [pc, #32]	; (800fb2c <find_volume+0x508>)
 800fb0c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fb0e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fb10:	f7fd ff68 	bl	800d9e4 <clear_lock>
#endif
	return FR_OK;
 800fb14:	2300      	movs	r3, #0
}
 800fb16:	4618      	mov	r0, r3
 800fb18:	3758      	adds	r7, #88	; 0x58
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}
 800fb1e:	bf00      	nop
 800fb20:	41615252 	.word	0x41615252
 800fb24:	61417272 	.word	0x61417272
 800fb28:	20002c54 	.word	0x20002c54
 800fb2c:	20002c78 	.word	0x20002c78

0800fb30 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b084      	sub	sp, #16
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
 800fb38:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fb3a:	2309      	movs	r3, #9
 800fb3c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d01c      	beq.n	800fb7e <validate+0x4e>
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d018      	beq.n	800fb7e <validate+0x4e>
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	781b      	ldrb	r3, [r3, #0]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d013      	beq.n	800fb7e <validate+0x4e>
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	889a      	ldrh	r2, [r3, #4]
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	88db      	ldrh	r3, [r3, #6]
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d10c      	bne.n	800fb7e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	785b      	ldrb	r3, [r3, #1]
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f7fd fc54 	bl	800d418 <disk_status>
 800fb70:	4603      	mov	r3, r0
 800fb72:	f003 0301 	and.w	r3, r3, #1
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d101      	bne.n	800fb7e <validate+0x4e>
			res = FR_OK;
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fb7e:	7bfb      	ldrb	r3, [r7, #15]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d102      	bne.n	800fb8a <validate+0x5a>
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	e000      	b.n	800fb8c <validate+0x5c>
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	683a      	ldr	r2, [r7, #0]
 800fb8e:	6013      	str	r3, [r2, #0]
	return res;
 800fb90:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb92:	4618      	mov	r0, r3
 800fb94:	3710      	adds	r7, #16
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}
	...

0800fb9c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b088      	sub	sp, #32
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	60f8      	str	r0, [r7, #12]
 800fba4:	60b9      	str	r1, [r7, #8]
 800fba6:	4613      	mov	r3, r2
 800fba8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fbae:	f107 0310 	add.w	r3, r7, #16
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7ff fc9c 	bl	800f4f0 <get_ldnumber>
 800fbb8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fbba:	69fb      	ldr	r3, [r7, #28]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	da01      	bge.n	800fbc4 <f_mount+0x28>
 800fbc0:	230b      	movs	r3, #11
 800fbc2:	e02b      	b.n	800fc1c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fbc4:	4a17      	ldr	r2, [pc, #92]	; (800fc24 <f_mount+0x88>)
 800fbc6:	69fb      	ldr	r3, [r7, #28]
 800fbc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbcc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fbce:	69bb      	ldr	r3, [r7, #24]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d005      	beq.n	800fbe0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fbd4:	69b8      	ldr	r0, [r7, #24]
 800fbd6:	f7fd ff05 	bl	800d9e4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fbda:	69bb      	ldr	r3, [r7, #24]
 800fbdc:	2200      	movs	r2, #0
 800fbde:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d002      	beq.n	800fbec <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	2200      	movs	r2, #0
 800fbea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fbec:	68fa      	ldr	r2, [r7, #12]
 800fbee:	490d      	ldr	r1, [pc, #52]	; (800fc24 <f_mount+0x88>)
 800fbf0:	69fb      	ldr	r3, [r7, #28]
 800fbf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d002      	beq.n	800fc02 <f_mount+0x66>
 800fbfc:	79fb      	ldrb	r3, [r7, #7]
 800fbfe:	2b01      	cmp	r3, #1
 800fc00:	d001      	beq.n	800fc06 <f_mount+0x6a>
 800fc02:	2300      	movs	r3, #0
 800fc04:	e00a      	b.n	800fc1c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fc06:	f107 010c 	add.w	r1, r7, #12
 800fc0a:	f107 0308 	add.w	r3, r7, #8
 800fc0e:	2200      	movs	r2, #0
 800fc10:	4618      	mov	r0, r3
 800fc12:	f7ff fd07 	bl	800f624 <find_volume>
 800fc16:	4603      	mov	r3, r0
 800fc18:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fc1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	3720      	adds	r7, #32
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}
 800fc24:	20002c50 	.word	0x20002c50

0800fc28 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b09a      	sub	sp, #104	; 0x68
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	60f8      	str	r0, [r7, #12]
 800fc30:	60b9      	str	r1, [r7, #8]
 800fc32:	4613      	mov	r3, r2
 800fc34:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d101      	bne.n	800fc40 <f_open+0x18>
 800fc3c:	2309      	movs	r3, #9
 800fc3e:	e1bb      	b.n	800ffb8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fc40:	79fb      	ldrb	r3, [r7, #7]
 800fc42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fc46:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800fc48:	79fa      	ldrb	r2, [r7, #7]
 800fc4a:	f107 0114 	add.w	r1, r7, #20
 800fc4e:	f107 0308 	add.w	r3, r7, #8
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7ff fce6 	bl	800f624 <find_volume>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800fc5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	f040 819f 	bne.w	800ffa6 <f_open+0x37e>
		dj.obj.fs = fs;
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fc6c:	68ba      	ldr	r2, [r7, #8]
 800fc6e:	f107 0318 	add.w	r3, r7, #24
 800fc72:	4611      	mov	r1, r2
 800fc74:	4618      	mov	r0, r3
 800fc76:	f7ff fbc5 	bl	800f404 <follow_path>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fc80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d11a      	bne.n	800fcbe <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fc88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800fc8c:	b25b      	sxtb	r3, r3
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	da03      	bge.n	800fc9a <f_open+0x72>
				res = FR_INVALID_NAME;
 800fc92:	2306      	movs	r3, #6
 800fc94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fc98:	e011      	b.n	800fcbe <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fc9a:	79fb      	ldrb	r3, [r7, #7]
 800fc9c:	f023 0301 	bic.w	r3, r3, #1
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	bf14      	ite	ne
 800fca4:	2301      	movne	r3, #1
 800fca6:	2300      	moveq	r3, #0
 800fca8:	b2db      	uxtb	r3, r3
 800fcaa:	461a      	mov	r2, r3
 800fcac:	f107 0318 	add.w	r3, r7, #24
 800fcb0:	4611      	mov	r1, r2
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7fd fd4e 	bl	800d754 <chk_lock>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fcbe:	79fb      	ldrb	r3, [r7, #7]
 800fcc0:	f003 031c 	and.w	r3, r3, #28
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d07f      	beq.n	800fdc8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800fcc8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d017      	beq.n	800fd00 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fcd0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fcd4:	2b04      	cmp	r3, #4
 800fcd6:	d10e      	bne.n	800fcf6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fcd8:	f7fd fd98 	bl	800d80c <enq_lock>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d006      	beq.n	800fcf0 <f_open+0xc8>
 800fce2:	f107 0318 	add.w	r3, r7, #24
 800fce6:	4618      	mov	r0, r3
 800fce8:	f7fe fffe 	bl	800ece8 <dir_register>
 800fcec:	4603      	mov	r3, r0
 800fcee:	e000      	b.n	800fcf2 <f_open+0xca>
 800fcf0:	2312      	movs	r3, #18
 800fcf2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fcf6:	79fb      	ldrb	r3, [r7, #7]
 800fcf8:	f043 0308 	orr.w	r3, r3, #8
 800fcfc:	71fb      	strb	r3, [r7, #7]
 800fcfe:	e010      	b.n	800fd22 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fd00:	7fbb      	ldrb	r3, [r7, #30]
 800fd02:	f003 0311 	and.w	r3, r3, #17
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d003      	beq.n	800fd12 <f_open+0xea>
					res = FR_DENIED;
 800fd0a:	2307      	movs	r3, #7
 800fd0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fd10:	e007      	b.n	800fd22 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fd12:	79fb      	ldrb	r3, [r7, #7]
 800fd14:	f003 0304 	and.w	r3, r3, #4
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d002      	beq.n	800fd22 <f_open+0xfa>
 800fd1c:	2308      	movs	r3, #8
 800fd1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fd22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d168      	bne.n	800fdfc <f_open+0x1d4>
 800fd2a:	79fb      	ldrb	r3, [r7, #7]
 800fd2c:	f003 0308 	and.w	r3, r3, #8
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d063      	beq.n	800fdfc <f_open+0x1d4>
				dw = GET_FATTIME();
 800fd34:	f7fb fa84 	bl	800b240 <get_fattime>
 800fd38:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fd3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd3c:	330e      	adds	r3, #14
 800fd3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fd40:	4618      	mov	r0, r3
 800fd42:	f7fd fc5d 	bl	800d600 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fd46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd48:	3316      	adds	r3, #22
 800fd4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f7fd fc57 	bl	800d600 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd54:	330b      	adds	r3, #11
 800fd56:	2220      	movs	r2, #32
 800fd58:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd5e:	4611      	mov	r1, r2
 800fd60:	4618      	mov	r0, r3
 800fd62:	f7fe fc2f 	bl	800e5c4 <ld_clust>
 800fd66:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fd68:	697b      	ldr	r3, [r7, #20]
 800fd6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7fe fc47 	bl	800e602 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd76:	331c      	adds	r3, #28
 800fd78:	2100      	movs	r1, #0
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f7fd fc40 	bl	800d600 <st_dword>
					fs->wflag = 1;
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	2201      	movs	r2, #1
 800fd84:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fd86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d037      	beq.n	800fdfc <f_open+0x1d4>
						dw = fs->winsect;
 800fd8c:	697b      	ldr	r3, [r7, #20]
 800fd8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd90:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800fd92:	f107 0318 	add.w	r3, r7, #24
 800fd96:	2200      	movs	r2, #0
 800fd98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	f7fe f937 	bl	800e00e <remove_chain>
 800fda0:	4603      	mov	r3, r0
 800fda2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800fda6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d126      	bne.n	800fdfc <f_open+0x1d4>
							res = move_window(fs, dw);
 800fdae:	697b      	ldr	r3, [r7, #20]
 800fdb0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	f7fd fe7e 	bl	800dab4 <move_window>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fdbe:	697b      	ldr	r3, [r7, #20]
 800fdc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fdc2:	3a01      	subs	r2, #1
 800fdc4:	615a      	str	r2, [r3, #20]
 800fdc6:	e019      	b.n	800fdfc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fdc8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d115      	bne.n	800fdfc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fdd0:	7fbb      	ldrb	r3, [r7, #30]
 800fdd2:	f003 0310 	and.w	r3, r3, #16
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d003      	beq.n	800fde2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800fdda:	2304      	movs	r3, #4
 800fddc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fde0:	e00c      	b.n	800fdfc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fde2:	79fb      	ldrb	r3, [r7, #7]
 800fde4:	f003 0302 	and.w	r3, r3, #2
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d007      	beq.n	800fdfc <f_open+0x1d4>
 800fdec:	7fbb      	ldrb	r3, [r7, #30]
 800fdee:	f003 0301 	and.w	r3, r3, #1
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d002      	beq.n	800fdfc <f_open+0x1d4>
						res = FR_DENIED;
 800fdf6:	2307      	movs	r3, #7
 800fdf8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800fdfc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d128      	bne.n	800fe56 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fe04:	79fb      	ldrb	r3, [r7, #7]
 800fe06:	f003 0308 	and.w	r3, r3, #8
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d003      	beq.n	800fe16 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800fe0e:	79fb      	ldrb	r3, [r7, #7]
 800fe10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe14:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fe16:	697b      	ldr	r3, [r7, #20]
 800fe18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800fe1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fe24:	79fb      	ldrb	r3, [r7, #7]
 800fe26:	f023 0301 	bic.w	r3, r3, #1
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	bf14      	ite	ne
 800fe2e:	2301      	movne	r3, #1
 800fe30:	2300      	moveq	r3, #0
 800fe32:	b2db      	uxtb	r3, r3
 800fe34:	461a      	mov	r2, r3
 800fe36:	f107 0318 	add.w	r3, r7, #24
 800fe3a:	4611      	mov	r1, r2
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f7fd fd07 	bl	800d850 <inc_lock>
 800fe42:	4602      	mov	r2, r0
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	691b      	ldr	r3, [r3, #16]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d102      	bne.n	800fe56 <f_open+0x22e>
 800fe50:	2302      	movs	r3, #2
 800fe52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fe56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	f040 80a3 	bne.w	800ffa6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fe60:	697b      	ldr	r3, [r7, #20]
 800fe62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe64:	4611      	mov	r1, r2
 800fe66:	4618      	mov	r0, r3
 800fe68:	f7fe fbac 	bl	800e5c4 <ld_clust>
 800fe6c:	4602      	mov	r2, r0
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fe72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe74:	331c      	adds	r3, #28
 800fe76:	4618      	mov	r0, r3
 800fe78:	f7fd fb84 	bl	800d584 <ld_dword>
 800fe7c:	4602      	mov	r2, r0
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	2200      	movs	r2, #0
 800fe86:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fe88:	697a      	ldr	r2, [r7, #20]
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fe8e:	697b      	ldr	r3, [r7, #20]
 800fe90:	88da      	ldrh	r2, [r3, #6]
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	79fa      	ldrb	r2, [r7, #7]
 800fe9a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	2200      	movs	r2, #0
 800fea0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	2200      	movs	r2, #0
 800fea6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	2200      	movs	r2, #0
 800feac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	3330      	adds	r3, #48	; 0x30
 800feb2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800feb6:	2100      	movs	r1, #0
 800feb8:	4618      	mov	r0, r3
 800feba:	f7fd fbee 	bl	800d69a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800febe:	79fb      	ldrb	r3, [r7, #7]
 800fec0:	f003 0320 	and.w	r3, r3, #32
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d06e      	beq.n	800ffa6 <f_open+0x37e>
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	68db      	ldr	r3, [r3, #12]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d06a      	beq.n	800ffa6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	68da      	ldr	r2, [r3, #12]
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fed8:	697b      	ldr	r3, [r7, #20]
 800feda:	895b      	ldrh	r3, [r3, #10]
 800fedc:	461a      	mov	r2, r3
 800fede:	697b      	ldr	r3, [r7, #20]
 800fee0:	899b      	ldrh	r3, [r3, #12]
 800fee2:	fb02 f303 	mul.w	r3, r2, r3
 800fee6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	689b      	ldr	r3, [r3, #8]
 800feec:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	68db      	ldr	r3, [r3, #12]
 800fef2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fef4:	e016      	b.n	800ff24 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fefa:	4618      	mov	r0, r3
 800fefc:	f7fd fe97 	bl	800dc2e <get_fat>
 800ff00:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ff02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff04:	2b01      	cmp	r3, #1
 800ff06:	d802      	bhi.n	800ff0e <f_open+0x2e6>
 800ff08:	2302      	movs	r3, #2
 800ff0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ff0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff14:	d102      	bne.n	800ff1c <f_open+0x2f4>
 800ff16:	2301      	movs	r3, #1
 800ff18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ff1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ff1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff20:	1ad3      	subs	r3, r2, r3
 800ff22:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ff24:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d103      	bne.n	800ff34 <f_open+0x30c>
 800ff2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ff2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff30:	429a      	cmp	r2, r3
 800ff32:	d8e0      	bhi.n	800fef6 <f_open+0x2ce>
				}
				fp->clust = clst;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ff38:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ff3a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d131      	bne.n	800ffa6 <f_open+0x37e>
 800ff42:	697b      	ldr	r3, [r7, #20]
 800ff44:	899b      	ldrh	r3, [r3, #12]
 800ff46:	461a      	mov	r2, r3
 800ff48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff4a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ff4e:	fb01 f202 	mul.w	r2, r1, r2
 800ff52:	1a9b      	subs	r3, r3, r2
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d026      	beq.n	800ffa6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ff58:	697b      	ldr	r3, [r7, #20]
 800ff5a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	f7fd fe47 	bl	800dbf0 <clust2sect>
 800ff62:	64f8      	str	r0, [r7, #76]	; 0x4c
 800ff64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d103      	bne.n	800ff72 <f_open+0x34a>
						res = FR_INT_ERR;
 800ff6a:	2302      	movs	r3, #2
 800ff6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ff70:	e019      	b.n	800ffa6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ff72:	697b      	ldr	r3, [r7, #20]
 800ff74:	899b      	ldrh	r3, [r3, #12]
 800ff76:	461a      	mov	r2, r3
 800ff78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff7a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ff7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff80:	441a      	add	r2, r3
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ff86:	697b      	ldr	r3, [r7, #20]
 800ff88:	7858      	ldrb	r0, [r3, #1]
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	6a1a      	ldr	r2, [r3, #32]
 800ff94:	2301      	movs	r3, #1
 800ff96:	f7fd fa7f 	bl	800d498 <disk_read>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d002      	beq.n	800ffa6 <f_open+0x37e>
 800ffa0:	2301      	movs	r3, #1
 800ffa2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ffa6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d002      	beq.n	800ffb4 <f_open+0x38c>
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ffb4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3768      	adds	r7, #104	; 0x68
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}

0800ffc0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b08e      	sub	sp, #56	; 0x38
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	60f8      	str	r0, [r7, #12]
 800ffc8:	60b9      	str	r1, [r7, #8]
 800ffca:	607a      	str	r2, [r7, #4]
 800ffcc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	f107 0214 	add.w	r2, r7, #20
 800ffde:	4611      	mov	r1, r2
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f7ff fda5 	bl	800fb30 <validate>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ffec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d107      	bne.n	8010004 <f_read+0x44>
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	7d5b      	ldrb	r3, [r3, #21]
 800fff8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fffc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010000:	2b00      	cmp	r3, #0
 8010002:	d002      	beq.n	801000a <f_read+0x4a>
 8010004:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010008:	e135      	b.n	8010276 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	7d1b      	ldrb	r3, [r3, #20]
 801000e:	f003 0301 	and.w	r3, r3, #1
 8010012:	2b00      	cmp	r3, #0
 8010014:	d101      	bne.n	801001a <f_read+0x5a>
 8010016:	2307      	movs	r3, #7
 8010018:	e12d      	b.n	8010276 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	68da      	ldr	r2, [r3, #12]
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	699b      	ldr	r3, [r3, #24]
 8010022:	1ad3      	subs	r3, r2, r3
 8010024:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8010026:	687a      	ldr	r2, [r7, #4]
 8010028:	6a3b      	ldr	r3, [r7, #32]
 801002a:	429a      	cmp	r2, r3
 801002c:	f240 811e 	bls.w	801026c <f_read+0x2ac>
 8010030:	6a3b      	ldr	r3, [r7, #32]
 8010032:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010034:	e11a      	b.n	801026c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	699b      	ldr	r3, [r3, #24]
 801003a:	697a      	ldr	r2, [r7, #20]
 801003c:	8992      	ldrh	r2, [r2, #12]
 801003e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010042:	fb01 f202 	mul.w	r2, r1, r2
 8010046:	1a9b      	subs	r3, r3, r2
 8010048:	2b00      	cmp	r3, #0
 801004a:	f040 80d5 	bne.w	80101f8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	699b      	ldr	r3, [r3, #24]
 8010052:	697a      	ldr	r2, [r7, #20]
 8010054:	8992      	ldrh	r2, [r2, #12]
 8010056:	fbb3 f3f2 	udiv	r3, r3, r2
 801005a:	697a      	ldr	r2, [r7, #20]
 801005c:	8952      	ldrh	r2, [r2, #10]
 801005e:	3a01      	subs	r2, #1
 8010060:	4013      	ands	r3, r2
 8010062:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8010064:	69fb      	ldr	r3, [r7, #28]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d12f      	bne.n	80100ca <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	699b      	ldr	r3, [r3, #24]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d103      	bne.n	801007a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	689b      	ldr	r3, [r3, #8]
 8010076:	633b      	str	r3, [r7, #48]	; 0x30
 8010078:	e013      	b.n	80100a2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801007e:	2b00      	cmp	r3, #0
 8010080:	d007      	beq.n	8010092 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	699b      	ldr	r3, [r3, #24]
 8010086:	4619      	mov	r1, r3
 8010088:	68f8      	ldr	r0, [r7, #12]
 801008a:	f7fe f8bd 	bl	800e208 <clmt_clust>
 801008e:	6338      	str	r0, [r7, #48]	; 0x30
 8010090:	e007      	b.n	80100a2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8010092:	68fa      	ldr	r2, [r7, #12]
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	69db      	ldr	r3, [r3, #28]
 8010098:	4619      	mov	r1, r3
 801009a:	4610      	mov	r0, r2
 801009c:	f7fd fdc7 	bl	800dc2e <get_fat>
 80100a0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80100a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100a4:	2b01      	cmp	r3, #1
 80100a6:	d804      	bhi.n	80100b2 <f_read+0xf2>
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	2202      	movs	r2, #2
 80100ac:	755a      	strb	r2, [r3, #21]
 80100ae:	2302      	movs	r3, #2
 80100b0:	e0e1      	b.n	8010276 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80100b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80100b8:	d104      	bne.n	80100c4 <f_read+0x104>
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	2201      	movs	r2, #1
 80100be:	755a      	strb	r2, [r3, #21]
 80100c0:	2301      	movs	r3, #1
 80100c2:	e0d8      	b.n	8010276 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100c8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80100ca:	697a      	ldr	r2, [r7, #20]
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	69db      	ldr	r3, [r3, #28]
 80100d0:	4619      	mov	r1, r3
 80100d2:	4610      	mov	r0, r2
 80100d4:	f7fd fd8c 	bl	800dbf0 <clust2sect>
 80100d8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80100da:	69bb      	ldr	r3, [r7, #24]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d104      	bne.n	80100ea <f_read+0x12a>
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	2202      	movs	r2, #2
 80100e4:	755a      	strb	r2, [r3, #21]
 80100e6:	2302      	movs	r3, #2
 80100e8:	e0c5      	b.n	8010276 <f_read+0x2b6>
			sect += csect;
 80100ea:	69ba      	ldr	r2, [r7, #24]
 80100ec:	69fb      	ldr	r3, [r7, #28]
 80100ee:	4413      	add	r3, r2
 80100f0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80100f2:	697b      	ldr	r3, [r7, #20]
 80100f4:	899b      	ldrh	r3, [r3, #12]
 80100f6:	461a      	mov	r2, r3
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80100fe:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8010100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010102:	2b00      	cmp	r3, #0
 8010104:	d041      	beq.n	801018a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010106:	69fa      	ldr	r2, [r7, #28]
 8010108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801010a:	4413      	add	r3, r2
 801010c:	697a      	ldr	r2, [r7, #20]
 801010e:	8952      	ldrh	r2, [r2, #10]
 8010110:	4293      	cmp	r3, r2
 8010112:	d905      	bls.n	8010120 <f_read+0x160>
					cc = fs->csize - csect;
 8010114:	697b      	ldr	r3, [r7, #20]
 8010116:	895b      	ldrh	r3, [r3, #10]
 8010118:	461a      	mov	r2, r3
 801011a:	69fb      	ldr	r3, [r7, #28]
 801011c:	1ad3      	subs	r3, r2, r3
 801011e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	7858      	ldrb	r0, [r3, #1]
 8010124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010126:	69ba      	ldr	r2, [r7, #24]
 8010128:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801012a:	f7fd f9b5 	bl	800d498 <disk_read>
 801012e:	4603      	mov	r3, r0
 8010130:	2b00      	cmp	r3, #0
 8010132:	d004      	beq.n	801013e <f_read+0x17e>
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	2201      	movs	r2, #1
 8010138:	755a      	strb	r2, [r3, #21]
 801013a:	2301      	movs	r3, #1
 801013c:	e09b      	b.n	8010276 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	7d1b      	ldrb	r3, [r3, #20]
 8010142:	b25b      	sxtb	r3, r3
 8010144:	2b00      	cmp	r3, #0
 8010146:	da18      	bge.n	801017a <f_read+0x1ba>
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	6a1a      	ldr	r2, [r3, #32]
 801014c:	69bb      	ldr	r3, [r7, #24]
 801014e:	1ad3      	subs	r3, r2, r3
 8010150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010152:	429a      	cmp	r2, r3
 8010154:	d911      	bls.n	801017a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	6a1a      	ldr	r2, [r3, #32]
 801015a:	69bb      	ldr	r3, [r7, #24]
 801015c:	1ad3      	subs	r3, r2, r3
 801015e:	697a      	ldr	r2, [r7, #20]
 8010160:	8992      	ldrh	r2, [r2, #12]
 8010162:	fb02 f303 	mul.w	r3, r2, r3
 8010166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010168:	18d0      	adds	r0, r2, r3
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	899b      	ldrh	r3, [r3, #12]
 8010174:	461a      	mov	r2, r3
 8010176:	f7fd fa6f 	bl	800d658 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801017a:	697b      	ldr	r3, [r7, #20]
 801017c:	899b      	ldrh	r3, [r3, #12]
 801017e:	461a      	mov	r2, r3
 8010180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010182:	fb02 f303 	mul.w	r3, r2, r3
 8010186:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8010188:	e05c      	b.n	8010244 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	6a1b      	ldr	r3, [r3, #32]
 801018e:	69ba      	ldr	r2, [r7, #24]
 8010190:	429a      	cmp	r2, r3
 8010192:	d02e      	beq.n	80101f2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	7d1b      	ldrb	r3, [r3, #20]
 8010198:	b25b      	sxtb	r3, r3
 801019a:	2b00      	cmp	r3, #0
 801019c:	da18      	bge.n	80101d0 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	7858      	ldrb	r0, [r3, #1]
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	6a1a      	ldr	r2, [r3, #32]
 80101ac:	2301      	movs	r3, #1
 80101ae:	f7fd f993 	bl	800d4d8 <disk_write>
 80101b2:	4603      	mov	r3, r0
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d004      	beq.n	80101c2 <f_read+0x202>
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	2201      	movs	r2, #1
 80101bc:	755a      	strb	r2, [r3, #21]
 80101be:	2301      	movs	r3, #1
 80101c0:	e059      	b.n	8010276 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	7d1b      	ldrb	r3, [r3, #20]
 80101c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101ca:	b2da      	uxtb	r2, r3
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80101d0:	697b      	ldr	r3, [r7, #20]
 80101d2:	7858      	ldrb	r0, [r3, #1]
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80101da:	2301      	movs	r3, #1
 80101dc:	69ba      	ldr	r2, [r7, #24]
 80101de:	f7fd f95b 	bl	800d498 <disk_read>
 80101e2:	4603      	mov	r3, r0
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d004      	beq.n	80101f2 <f_read+0x232>
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	2201      	movs	r2, #1
 80101ec:	755a      	strb	r2, [r3, #21]
 80101ee:	2301      	movs	r3, #1
 80101f0:	e041      	b.n	8010276 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	69ba      	ldr	r2, [r7, #24]
 80101f6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80101f8:	697b      	ldr	r3, [r7, #20]
 80101fa:	899b      	ldrh	r3, [r3, #12]
 80101fc:	4618      	mov	r0, r3
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	699b      	ldr	r3, [r3, #24]
 8010202:	697a      	ldr	r2, [r7, #20]
 8010204:	8992      	ldrh	r2, [r2, #12]
 8010206:	fbb3 f1f2 	udiv	r1, r3, r2
 801020a:	fb01 f202 	mul.w	r2, r1, r2
 801020e:	1a9b      	subs	r3, r3, r2
 8010210:	1ac3      	subs	r3, r0, r3
 8010212:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	429a      	cmp	r2, r3
 801021a:	d901      	bls.n	8010220 <f_read+0x260>
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	699b      	ldr	r3, [r3, #24]
 801022a:	697a      	ldr	r2, [r7, #20]
 801022c:	8992      	ldrh	r2, [r2, #12]
 801022e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010232:	fb00 f202 	mul.w	r2, r0, r2
 8010236:	1a9b      	subs	r3, r3, r2
 8010238:	440b      	add	r3, r1
 801023a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801023c:	4619      	mov	r1, r3
 801023e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010240:	f7fd fa0a 	bl	800d658 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010248:	4413      	add	r3, r2
 801024a:	627b      	str	r3, [r7, #36]	; 0x24
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	699a      	ldr	r2, [r3, #24]
 8010250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010252:	441a      	add	r2, r3
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	619a      	str	r2, [r3, #24]
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	681a      	ldr	r2, [r3, #0]
 801025c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801025e:	441a      	add	r2, r3
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	601a      	str	r2, [r3, #0]
 8010264:	687a      	ldr	r2, [r7, #4]
 8010266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010268:	1ad3      	subs	r3, r2, r3
 801026a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2b00      	cmp	r3, #0
 8010270:	f47f aee1 	bne.w	8010036 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010274:	2300      	movs	r3, #0
}
 8010276:	4618      	mov	r0, r3
 8010278:	3738      	adds	r7, #56	; 0x38
 801027a:	46bd      	mov	sp, r7
 801027c:	bd80      	pop	{r7, pc}

0801027e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801027e:	b580      	push	{r7, lr}
 8010280:	b086      	sub	sp, #24
 8010282:	af00      	add	r7, sp, #0
 8010284:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f107 0208 	add.w	r2, r7, #8
 801028c:	4611      	mov	r1, r2
 801028e:	4618      	mov	r0, r3
 8010290:	f7ff fc4e 	bl	800fb30 <validate>
 8010294:	4603      	mov	r3, r0
 8010296:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010298:	7dfb      	ldrb	r3, [r7, #23]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d168      	bne.n	8010370 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	7d1b      	ldrb	r3, [r3, #20]
 80102a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d062      	beq.n	8010370 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	7d1b      	ldrb	r3, [r3, #20]
 80102ae:	b25b      	sxtb	r3, r3
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	da15      	bge.n	80102e0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	7858      	ldrb	r0, [r3, #1]
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	6a1a      	ldr	r2, [r3, #32]
 80102c2:	2301      	movs	r3, #1
 80102c4:	f7fd f908 	bl	800d4d8 <disk_write>
 80102c8:	4603      	mov	r3, r0
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d001      	beq.n	80102d2 <f_sync+0x54>
 80102ce:	2301      	movs	r3, #1
 80102d0:	e04f      	b.n	8010372 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	7d1b      	ldrb	r3, [r3, #20]
 80102d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80102da:	b2da      	uxtb	r2, r3
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80102e0:	f7fa ffae 	bl	800b240 <get_fattime>
 80102e4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80102e6:	68ba      	ldr	r2, [r7, #8]
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102ec:	4619      	mov	r1, r3
 80102ee:	4610      	mov	r0, r2
 80102f0:	f7fd fbe0 	bl	800dab4 <move_window>
 80102f4:	4603      	mov	r3, r0
 80102f6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80102f8:	7dfb      	ldrb	r3, [r7, #23]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d138      	bne.n	8010370 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010302:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	330b      	adds	r3, #11
 8010308:	781a      	ldrb	r2, [r3, #0]
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	330b      	adds	r3, #11
 801030e:	f042 0220 	orr.w	r2, r2, #32
 8010312:	b2d2      	uxtb	r2, r2
 8010314:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	6818      	ldr	r0, [r3, #0]
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	689b      	ldr	r3, [r3, #8]
 801031e:	461a      	mov	r2, r3
 8010320:	68f9      	ldr	r1, [r7, #12]
 8010322:	f7fe f96e 	bl	800e602 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	f103 021c 	add.w	r2, r3, #28
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	68db      	ldr	r3, [r3, #12]
 8010330:	4619      	mov	r1, r3
 8010332:	4610      	mov	r0, r2
 8010334:	f7fd f964 	bl	800d600 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	3316      	adds	r3, #22
 801033c:	6939      	ldr	r1, [r7, #16]
 801033e:	4618      	mov	r0, r3
 8010340:	f7fd f95e 	bl	800d600 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	3312      	adds	r3, #18
 8010348:	2100      	movs	r1, #0
 801034a:	4618      	mov	r0, r3
 801034c:	f7fd f93d 	bl	800d5ca <st_word>
					fs->wflag = 1;
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	2201      	movs	r2, #1
 8010354:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	4618      	mov	r0, r3
 801035a:	f7fd fbd9 	bl	800db10 <sync_fs>
 801035e:	4603      	mov	r3, r0
 8010360:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	7d1b      	ldrb	r3, [r3, #20]
 8010366:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801036a:	b2da      	uxtb	r2, r3
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010370:	7dfb      	ldrb	r3, [r7, #23]
}
 8010372:	4618      	mov	r0, r3
 8010374:	3718      	adds	r7, #24
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}

0801037a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801037a:	b580      	push	{r7, lr}
 801037c:	b084      	sub	sp, #16
 801037e:	af00      	add	r7, sp, #0
 8010380:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010382:	6878      	ldr	r0, [r7, #4]
 8010384:	f7ff ff7b 	bl	801027e <f_sync>
 8010388:	4603      	mov	r3, r0
 801038a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801038c:	7bfb      	ldrb	r3, [r7, #15]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d118      	bne.n	80103c4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f107 0208 	add.w	r2, r7, #8
 8010398:	4611      	mov	r1, r2
 801039a:	4618      	mov	r0, r3
 801039c:	f7ff fbc8 	bl	800fb30 <validate>
 80103a0:	4603      	mov	r3, r0
 80103a2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80103a4:	7bfb      	ldrb	r3, [r7, #15]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d10c      	bne.n	80103c4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	691b      	ldr	r3, [r3, #16]
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7fd fadc 	bl	800d96c <dec_lock>
 80103b4:	4603      	mov	r3, r0
 80103b6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80103b8:	7bfb      	ldrb	r3, [r7, #15]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d102      	bne.n	80103c4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	2200      	movs	r2, #0
 80103c2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80103c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80103c6:	4618      	mov	r0, r3
 80103c8:	3710      	adds	r7, #16
 80103ca:	46bd      	mov	sp, r7
 80103cc:	bd80      	pop	{r7, pc}

080103ce <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80103ce:	b580      	push	{r7, lr}
 80103d0:	b090      	sub	sp, #64	; 0x40
 80103d2:	af00      	add	r7, sp, #0
 80103d4:	6078      	str	r0, [r7, #4]
 80103d6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f107 0208 	add.w	r2, r7, #8
 80103de:	4611      	mov	r1, r2
 80103e0:	4618      	mov	r0, r3
 80103e2:	f7ff fba5 	bl	800fb30 <validate>
 80103e6:	4603      	mov	r3, r0
 80103e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80103ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d103      	bne.n	80103fc <f_lseek+0x2e>
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	7d5b      	ldrb	r3, [r3, #21]
 80103f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80103fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010400:	2b00      	cmp	r3, #0
 8010402:	d002      	beq.n	801040a <f_lseek+0x3c>
 8010404:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010408:	e201      	b.n	801080e <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801040e:	2b00      	cmp	r3, #0
 8010410:	f000 80d9 	beq.w	80105c6 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801041a:	d15a      	bne.n	80104d2 <f_lseek+0x104>
			tbl = fp->cltbl;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010420:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010424:	1d1a      	adds	r2, r3, #4
 8010426:	627a      	str	r2, [r7, #36]	; 0x24
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	617b      	str	r3, [r7, #20]
 801042c:	2302      	movs	r3, #2
 801042e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	689b      	ldr	r3, [r3, #8]
 8010434:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8010436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010438:	2b00      	cmp	r3, #0
 801043a:	d03a      	beq.n	80104b2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801043c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801043e:	613b      	str	r3, [r7, #16]
 8010440:	2300      	movs	r3, #0
 8010442:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010446:	3302      	adds	r3, #2
 8010448:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801044a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801044c:	60fb      	str	r3, [r7, #12]
 801044e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010450:	3301      	adds	r3, #1
 8010452:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010458:	4618      	mov	r0, r3
 801045a:	f7fd fbe8 	bl	800dc2e <get_fat>
 801045e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010462:	2b01      	cmp	r3, #1
 8010464:	d804      	bhi.n	8010470 <f_lseek+0xa2>
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	2202      	movs	r2, #2
 801046a:	755a      	strb	r2, [r3, #21]
 801046c:	2302      	movs	r3, #2
 801046e:	e1ce      	b.n	801080e <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010472:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010476:	d104      	bne.n	8010482 <f_lseek+0xb4>
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2201      	movs	r2, #1
 801047c:	755a      	strb	r2, [r3, #21]
 801047e:	2301      	movs	r3, #1
 8010480:	e1c5      	b.n	801080e <f_lseek+0x440>
					} while (cl == pcl + 1);
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	3301      	adds	r3, #1
 8010486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010488:	429a      	cmp	r2, r3
 801048a:	d0de      	beq.n	801044a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801048c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801048e:	697b      	ldr	r3, [r7, #20]
 8010490:	429a      	cmp	r2, r3
 8010492:	d809      	bhi.n	80104a8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8010494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010496:	1d1a      	adds	r2, r3, #4
 8010498:	627a      	str	r2, [r7, #36]	; 0x24
 801049a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801049c:	601a      	str	r2, [r3, #0]
 801049e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a0:	1d1a      	adds	r2, r3, #4
 80104a2:	627a      	str	r2, [r7, #36]	; 0x24
 80104a4:	693a      	ldr	r2, [r7, #16]
 80104a6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80104a8:	68bb      	ldr	r3, [r7, #8]
 80104aa:	69db      	ldr	r3, [r3, #28]
 80104ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80104ae:	429a      	cmp	r2, r3
 80104b0:	d3c4      	bcc.n	801043c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104b8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80104ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104bc:	697b      	ldr	r3, [r7, #20]
 80104be:	429a      	cmp	r2, r3
 80104c0:	d803      	bhi.n	80104ca <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80104c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104c4:	2200      	movs	r2, #0
 80104c6:	601a      	str	r2, [r3, #0]
 80104c8:	e19f      	b.n	801080a <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80104ca:	2311      	movs	r3, #17
 80104cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80104d0:	e19b      	b.n	801080a <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	68db      	ldr	r3, [r3, #12]
 80104d6:	683a      	ldr	r2, [r7, #0]
 80104d8:	429a      	cmp	r2, r3
 80104da:	d902      	bls.n	80104e2 <f_lseek+0x114>
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	68db      	ldr	r3, [r3, #12]
 80104e0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	683a      	ldr	r2, [r7, #0]
 80104e6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	f000 818d 	beq.w	801080a <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	3b01      	subs	r3, #1
 80104f4:	4619      	mov	r1, r3
 80104f6:	6878      	ldr	r0, [r7, #4]
 80104f8:	f7fd fe86 	bl	800e208 <clmt_clust>
 80104fc:	4602      	mov	r2, r0
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010502:	68ba      	ldr	r2, [r7, #8]
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	69db      	ldr	r3, [r3, #28]
 8010508:	4619      	mov	r1, r3
 801050a:	4610      	mov	r0, r2
 801050c:	f7fd fb70 	bl	800dbf0 <clust2sect>
 8010510:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010512:	69bb      	ldr	r3, [r7, #24]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d104      	bne.n	8010522 <f_lseek+0x154>
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2202      	movs	r2, #2
 801051c:	755a      	strb	r2, [r3, #21]
 801051e:	2302      	movs	r3, #2
 8010520:	e175      	b.n	801080e <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	3b01      	subs	r3, #1
 8010526:	68ba      	ldr	r2, [r7, #8]
 8010528:	8992      	ldrh	r2, [r2, #12]
 801052a:	fbb3 f3f2 	udiv	r3, r3, r2
 801052e:	68ba      	ldr	r2, [r7, #8]
 8010530:	8952      	ldrh	r2, [r2, #10]
 8010532:	3a01      	subs	r2, #1
 8010534:	4013      	ands	r3, r2
 8010536:	69ba      	ldr	r2, [r7, #24]
 8010538:	4413      	add	r3, r2
 801053a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	699b      	ldr	r3, [r3, #24]
 8010540:	68ba      	ldr	r2, [r7, #8]
 8010542:	8992      	ldrh	r2, [r2, #12]
 8010544:	fbb3 f1f2 	udiv	r1, r3, r2
 8010548:	fb01 f202 	mul.w	r2, r1, r2
 801054c:	1a9b      	subs	r3, r3, r2
 801054e:	2b00      	cmp	r3, #0
 8010550:	f000 815b 	beq.w	801080a <f_lseek+0x43c>
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	6a1b      	ldr	r3, [r3, #32]
 8010558:	69ba      	ldr	r2, [r7, #24]
 801055a:	429a      	cmp	r2, r3
 801055c:	f000 8155 	beq.w	801080a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	7d1b      	ldrb	r3, [r3, #20]
 8010564:	b25b      	sxtb	r3, r3
 8010566:	2b00      	cmp	r3, #0
 8010568:	da18      	bge.n	801059c <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801056a:	68bb      	ldr	r3, [r7, #8]
 801056c:	7858      	ldrb	r0, [r3, #1]
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	6a1a      	ldr	r2, [r3, #32]
 8010578:	2301      	movs	r3, #1
 801057a:	f7fc ffad 	bl	800d4d8 <disk_write>
 801057e:	4603      	mov	r3, r0
 8010580:	2b00      	cmp	r3, #0
 8010582:	d004      	beq.n	801058e <f_lseek+0x1c0>
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2201      	movs	r2, #1
 8010588:	755a      	strb	r2, [r3, #21]
 801058a:	2301      	movs	r3, #1
 801058c:	e13f      	b.n	801080e <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	7d1b      	ldrb	r3, [r3, #20]
 8010592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010596:	b2da      	uxtb	r2, r3
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	7858      	ldrb	r0, [r3, #1]
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80105a6:	2301      	movs	r3, #1
 80105a8:	69ba      	ldr	r2, [r7, #24]
 80105aa:	f7fc ff75 	bl	800d498 <disk_read>
 80105ae:	4603      	mov	r3, r0
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d004      	beq.n	80105be <f_lseek+0x1f0>
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2201      	movs	r2, #1
 80105b8:	755a      	strb	r2, [r3, #21]
 80105ba:	2301      	movs	r3, #1
 80105bc:	e127      	b.n	801080e <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	69ba      	ldr	r2, [r7, #24]
 80105c2:	621a      	str	r2, [r3, #32]
 80105c4:	e121      	b.n	801080a <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	68db      	ldr	r3, [r3, #12]
 80105ca:	683a      	ldr	r2, [r7, #0]
 80105cc:	429a      	cmp	r2, r3
 80105ce:	d908      	bls.n	80105e2 <f_lseek+0x214>
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	7d1b      	ldrb	r3, [r3, #20]
 80105d4:	f003 0302 	and.w	r3, r3, #2
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d102      	bne.n	80105e2 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	68db      	ldr	r3, [r3, #12]
 80105e0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	699b      	ldr	r3, [r3, #24]
 80105e6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80105e8:	2300      	movs	r3, #0
 80105ea:	637b      	str	r3, [r7, #52]	; 0x34
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80105f0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	f000 80b5 	beq.w	8010764 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80105fa:	68bb      	ldr	r3, [r7, #8]
 80105fc:	895b      	ldrh	r3, [r3, #10]
 80105fe:	461a      	mov	r2, r3
 8010600:	68bb      	ldr	r3, [r7, #8]
 8010602:	899b      	ldrh	r3, [r3, #12]
 8010604:	fb02 f303 	mul.w	r3, r2, r3
 8010608:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801060a:	6a3b      	ldr	r3, [r7, #32]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d01b      	beq.n	8010648 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	1e5a      	subs	r2, r3, #1
 8010614:	69fb      	ldr	r3, [r7, #28]
 8010616:	fbb2 f2f3 	udiv	r2, r2, r3
 801061a:	6a3b      	ldr	r3, [r7, #32]
 801061c:	1e59      	subs	r1, r3, #1
 801061e:	69fb      	ldr	r3, [r7, #28]
 8010620:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010624:	429a      	cmp	r2, r3
 8010626:	d30f      	bcc.n	8010648 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010628:	6a3b      	ldr	r3, [r7, #32]
 801062a:	1e5a      	subs	r2, r3, #1
 801062c:	69fb      	ldr	r3, [r7, #28]
 801062e:	425b      	negs	r3, r3
 8010630:	401a      	ands	r2, r3
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	699b      	ldr	r3, [r3, #24]
 801063a:	683a      	ldr	r2, [r7, #0]
 801063c:	1ad3      	subs	r3, r2, r3
 801063e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	69db      	ldr	r3, [r3, #28]
 8010644:	63bb      	str	r3, [r7, #56]	; 0x38
 8010646:	e022      	b.n	801068e <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	689b      	ldr	r3, [r3, #8]
 801064c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801064e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010650:	2b00      	cmp	r3, #0
 8010652:	d119      	bne.n	8010688 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	2100      	movs	r1, #0
 8010658:	4618      	mov	r0, r3
 801065a:	f7fd fd3d 	bl	800e0d8 <create_chain>
 801065e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010662:	2b01      	cmp	r3, #1
 8010664:	d104      	bne.n	8010670 <f_lseek+0x2a2>
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	2202      	movs	r2, #2
 801066a:	755a      	strb	r2, [r3, #21]
 801066c:	2302      	movs	r3, #2
 801066e:	e0ce      	b.n	801080e <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010676:	d104      	bne.n	8010682 <f_lseek+0x2b4>
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	2201      	movs	r2, #1
 801067c:	755a      	strb	r2, [r3, #21]
 801067e:	2301      	movs	r3, #1
 8010680:	e0c5      	b.n	801080e <f_lseek+0x440>
					fp->obj.sclust = clst;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010686:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801068c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801068e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010690:	2b00      	cmp	r3, #0
 8010692:	d067      	beq.n	8010764 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8010694:	e03a      	b.n	801070c <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8010696:	683a      	ldr	r2, [r7, #0]
 8010698:	69fb      	ldr	r3, [r7, #28]
 801069a:	1ad3      	subs	r3, r2, r3
 801069c:	603b      	str	r3, [r7, #0]
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	699a      	ldr	r2, [r3, #24]
 80106a2:	69fb      	ldr	r3, [r7, #28]
 80106a4:	441a      	add	r2, r3
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	7d1b      	ldrb	r3, [r3, #20]
 80106ae:	f003 0302 	and.w	r3, r3, #2
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d00b      	beq.n	80106ce <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80106ba:	4618      	mov	r0, r3
 80106bc:	f7fd fd0c 	bl	800e0d8 <create_chain>
 80106c0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80106c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d108      	bne.n	80106da <f_lseek+0x30c>
							ofs = 0; break;
 80106c8:	2300      	movs	r3, #0
 80106ca:	603b      	str	r3, [r7, #0]
 80106cc:	e022      	b.n	8010714 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80106d2:	4618      	mov	r0, r3
 80106d4:	f7fd faab 	bl	800dc2e <get_fat>
 80106d8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80106da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80106e0:	d104      	bne.n	80106ec <f_lseek+0x31e>
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2201      	movs	r2, #1
 80106e6:	755a      	strb	r2, [r3, #21]
 80106e8:	2301      	movs	r3, #1
 80106ea:	e090      	b.n	801080e <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80106ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ee:	2b01      	cmp	r3, #1
 80106f0:	d904      	bls.n	80106fc <f_lseek+0x32e>
 80106f2:	68bb      	ldr	r3, [r7, #8]
 80106f4:	69db      	ldr	r3, [r3, #28]
 80106f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80106f8:	429a      	cmp	r2, r3
 80106fa:	d304      	bcc.n	8010706 <f_lseek+0x338>
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2202      	movs	r2, #2
 8010700:	755a      	strb	r2, [r3, #21]
 8010702:	2302      	movs	r3, #2
 8010704:	e083      	b.n	801080e <f_lseek+0x440>
					fp->clust = clst;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801070a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801070c:	683a      	ldr	r2, [r7, #0]
 801070e:	69fb      	ldr	r3, [r7, #28]
 8010710:	429a      	cmp	r2, r3
 8010712:	d8c0      	bhi.n	8010696 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	699a      	ldr	r2, [r3, #24]
 8010718:	683b      	ldr	r3, [r7, #0]
 801071a:	441a      	add	r2, r3
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010720:	68bb      	ldr	r3, [r7, #8]
 8010722:	899b      	ldrh	r3, [r3, #12]
 8010724:	461a      	mov	r2, r3
 8010726:	683b      	ldr	r3, [r7, #0]
 8010728:	fbb3 f1f2 	udiv	r1, r3, r2
 801072c:	fb01 f202 	mul.w	r2, r1, r2
 8010730:	1a9b      	subs	r3, r3, r2
 8010732:	2b00      	cmp	r3, #0
 8010734:	d016      	beq.n	8010764 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801073a:	4618      	mov	r0, r3
 801073c:	f7fd fa58 	bl	800dbf0 <clust2sect>
 8010740:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8010742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010744:	2b00      	cmp	r3, #0
 8010746:	d104      	bne.n	8010752 <f_lseek+0x384>
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2202      	movs	r2, #2
 801074c:	755a      	strb	r2, [r3, #21]
 801074e:	2302      	movs	r3, #2
 8010750:	e05d      	b.n	801080e <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	899b      	ldrh	r3, [r3, #12]
 8010756:	461a      	mov	r2, r3
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	fbb3 f3f2 	udiv	r3, r3, r2
 801075e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010760:	4413      	add	r3, r2
 8010762:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	699a      	ldr	r2, [r3, #24]
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	68db      	ldr	r3, [r3, #12]
 801076c:	429a      	cmp	r2, r3
 801076e:	d90a      	bls.n	8010786 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	699a      	ldr	r2, [r3, #24]
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	7d1b      	ldrb	r3, [r3, #20]
 801077c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010780:	b2da      	uxtb	r2, r3
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	699b      	ldr	r3, [r3, #24]
 801078a:	68ba      	ldr	r2, [r7, #8]
 801078c:	8992      	ldrh	r2, [r2, #12]
 801078e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010792:	fb01 f202 	mul.w	r2, r1, r2
 8010796:	1a9b      	subs	r3, r3, r2
 8010798:	2b00      	cmp	r3, #0
 801079a:	d036      	beq.n	801080a <f_lseek+0x43c>
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6a1b      	ldr	r3, [r3, #32]
 80107a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80107a2:	429a      	cmp	r2, r3
 80107a4:	d031      	beq.n	801080a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	7d1b      	ldrb	r3, [r3, #20]
 80107aa:	b25b      	sxtb	r3, r3
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	da18      	bge.n	80107e2 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	7858      	ldrb	r0, [r3, #1]
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	6a1a      	ldr	r2, [r3, #32]
 80107be:	2301      	movs	r3, #1
 80107c0:	f7fc fe8a 	bl	800d4d8 <disk_write>
 80107c4:	4603      	mov	r3, r0
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d004      	beq.n	80107d4 <f_lseek+0x406>
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2201      	movs	r2, #1
 80107ce:	755a      	strb	r2, [r3, #21]
 80107d0:	2301      	movs	r3, #1
 80107d2:	e01c      	b.n	801080e <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	7d1b      	ldrb	r3, [r3, #20]
 80107d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107dc:	b2da      	uxtb	r2, r3
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80107e2:	68bb      	ldr	r3, [r7, #8]
 80107e4:	7858      	ldrb	r0, [r3, #1]
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80107ec:	2301      	movs	r3, #1
 80107ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80107f0:	f7fc fe52 	bl	800d498 <disk_read>
 80107f4:	4603      	mov	r3, r0
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d004      	beq.n	8010804 <f_lseek+0x436>
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	2201      	movs	r2, #1
 80107fe:	755a      	strb	r2, [r3, #21]
 8010800:	2301      	movs	r3, #1
 8010802:	e004      	b.n	801080e <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010808:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801080a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801080e:	4618      	mov	r0, r3
 8010810:	3740      	adds	r7, #64	; 0x40
 8010812:	46bd      	mov	sp, r7
 8010814:	bd80      	pop	{r7, pc}

08010816 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010816:	b580      	push	{r7, lr}
 8010818:	b086      	sub	sp, #24
 801081a:	af00      	add	r7, sp, #0
 801081c:	6078      	str	r0, [r7, #4]
 801081e:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d101      	bne.n	801082a <f_opendir+0x14>
 8010826:	2309      	movs	r3, #9
 8010828:	e064      	b.n	80108f4 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801082e:	f107 010c 	add.w	r1, r7, #12
 8010832:	463b      	mov	r3, r7
 8010834:	2200      	movs	r2, #0
 8010836:	4618      	mov	r0, r3
 8010838:	f7fe fef4 	bl	800f624 <find_volume>
 801083c:	4603      	mov	r3, r0
 801083e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010840:	7dfb      	ldrb	r3, [r7, #23]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d14f      	bne.n	80108e6 <f_opendir+0xd0>
		obj->fs = fs;
 8010846:	68fa      	ldr	r2, [r7, #12]
 8010848:	693b      	ldr	r3, [r7, #16]
 801084a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	4619      	mov	r1, r3
 8010850:	6878      	ldr	r0, [r7, #4]
 8010852:	f7fe fdd7 	bl	800f404 <follow_path>
 8010856:	4603      	mov	r3, r0
 8010858:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801085a:	7dfb      	ldrb	r3, [r7, #23]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d13d      	bne.n	80108dc <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010866:	b25b      	sxtb	r3, r3
 8010868:	2b00      	cmp	r3, #0
 801086a:	db12      	blt.n	8010892 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801086c:	693b      	ldr	r3, [r7, #16]
 801086e:	799b      	ldrb	r3, [r3, #6]
 8010870:	f003 0310 	and.w	r3, r3, #16
 8010874:	2b00      	cmp	r3, #0
 8010876:	d00a      	beq.n	801088e <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8010878:	68fa      	ldr	r2, [r7, #12]
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	6a1b      	ldr	r3, [r3, #32]
 801087e:	4619      	mov	r1, r3
 8010880:	4610      	mov	r0, r2
 8010882:	f7fd fe9f 	bl	800e5c4 <ld_clust>
 8010886:	4602      	mov	r2, r0
 8010888:	693b      	ldr	r3, [r7, #16]
 801088a:	609a      	str	r2, [r3, #8]
 801088c:	e001      	b.n	8010892 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801088e:	2305      	movs	r3, #5
 8010890:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8010892:	7dfb      	ldrb	r3, [r7, #23]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d121      	bne.n	80108dc <f_opendir+0xc6>
				obj->id = fs->id;
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	88da      	ldrh	r2, [r3, #6]
 801089c:	693b      	ldr	r3, [r7, #16]
 801089e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80108a0:	2100      	movs	r1, #0
 80108a2:	6878      	ldr	r0, [r7, #4]
 80108a4:	f7fd fce8 	bl	800e278 <dir_sdi>
 80108a8:	4603      	mov	r3, r0
 80108aa:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80108ac:	7dfb      	ldrb	r3, [r7, #23]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d114      	bne.n	80108dc <f_opendir+0xc6>
					if (obj->sclust) {
 80108b2:	693b      	ldr	r3, [r7, #16]
 80108b4:	689b      	ldr	r3, [r3, #8]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d00d      	beq.n	80108d6 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80108ba:	2100      	movs	r1, #0
 80108bc:	6878      	ldr	r0, [r7, #4]
 80108be:	f7fc ffc7 	bl	800d850 <inc_lock>
 80108c2:	4602      	mov	r2, r0
 80108c4:	693b      	ldr	r3, [r7, #16]
 80108c6:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80108c8:	693b      	ldr	r3, [r7, #16]
 80108ca:	691b      	ldr	r3, [r3, #16]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d105      	bne.n	80108dc <f_opendir+0xc6>
 80108d0:	2312      	movs	r3, #18
 80108d2:	75fb      	strb	r3, [r7, #23]
 80108d4:	e002      	b.n	80108dc <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80108d6:	693b      	ldr	r3, [r7, #16]
 80108d8:	2200      	movs	r2, #0
 80108da:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80108dc:	7dfb      	ldrb	r3, [r7, #23]
 80108de:	2b04      	cmp	r3, #4
 80108e0:	d101      	bne.n	80108e6 <f_opendir+0xd0>
 80108e2:	2305      	movs	r3, #5
 80108e4:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80108e6:	7dfb      	ldrb	r3, [r7, #23]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d002      	beq.n	80108f2 <f_opendir+0xdc>
 80108ec:	693b      	ldr	r3, [r7, #16]
 80108ee:	2200      	movs	r2, #0
 80108f0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80108f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	3718      	adds	r7, #24
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}

080108fc <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b084      	sub	sp, #16
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f107 0208 	add.w	r2, r7, #8
 801090a:	4611      	mov	r1, r2
 801090c:	4618      	mov	r0, r3
 801090e:	f7ff f90f 	bl	800fb30 <validate>
 8010912:	4603      	mov	r3, r0
 8010914:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010916:	7bfb      	ldrb	r3, [r7, #15]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d110      	bne.n	801093e <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	691b      	ldr	r3, [r3, #16]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d006      	beq.n	8010932 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	691b      	ldr	r3, [r3, #16]
 8010928:	4618      	mov	r0, r3
 801092a:	f7fd f81f 	bl	800d96c <dec_lock>
 801092e:	4603      	mov	r3, r0
 8010930:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8010932:	7bfb      	ldrb	r3, [r7, #15]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d102      	bne.n	801093e <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2200      	movs	r2, #0
 801093c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801093e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010940:	4618      	mov	r0, r3
 8010942:	3710      	adds	r7, #16
 8010944:	46bd      	mov	sp, r7
 8010946:	bd80      	pop	{r7, pc}

08010948 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010948:	b580      	push	{r7, lr}
 801094a:	b084      	sub	sp, #16
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
 8010950:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	f107 0208 	add.w	r2, r7, #8
 8010958:	4611      	mov	r1, r2
 801095a:	4618      	mov	r0, r3
 801095c:	f7ff f8e8 	bl	800fb30 <validate>
 8010960:	4603      	mov	r3, r0
 8010962:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010964:	7bfb      	ldrb	r3, [r7, #15]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d126      	bne.n	80109b8 <f_readdir+0x70>
		if (!fno) {
 801096a:	683b      	ldr	r3, [r7, #0]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d106      	bne.n	801097e <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8010970:	2100      	movs	r1, #0
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	f7fd fc80 	bl	800e278 <dir_sdi>
 8010978:	4603      	mov	r3, r0
 801097a:	73fb      	strb	r3, [r7, #15]
 801097c:	e01c      	b.n	80109b8 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801097e:	2100      	movs	r1, #0
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f7fe f84a 	bl	800ea1a <dir_read>
 8010986:	4603      	mov	r3, r0
 8010988:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801098a:	7bfb      	ldrb	r3, [r7, #15]
 801098c:	2b04      	cmp	r3, #4
 801098e:	d101      	bne.n	8010994 <f_readdir+0x4c>
 8010990:	2300      	movs	r3, #0
 8010992:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8010994:	7bfb      	ldrb	r3, [r7, #15]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d10e      	bne.n	80109b8 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 801099a:	6839      	ldr	r1, [r7, #0]
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	f7fe fa9b 	bl	800eed8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80109a2:	2100      	movs	r1, #0
 80109a4:	6878      	ldr	r0, [r7, #4]
 80109a6:	f7fd fcf0 	bl	800e38a <dir_next>
 80109aa:	4603      	mov	r3, r0
 80109ac:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80109ae:	7bfb      	ldrb	r3, [r7, #15]
 80109b0:	2b04      	cmp	r3, #4
 80109b2:	d101      	bne.n	80109b8 <f_readdir+0x70>
 80109b4:	2300      	movs	r3, #0
 80109b6:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80109b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80109ba:	4618      	mov	r0, r3
 80109bc:	3710      	adds	r7, #16
 80109be:	46bd      	mov	sp, r7
 80109c0:	bd80      	pop	{r7, pc}

080109c2 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80109c2:	b580      	push	{r7, lr}
 80109c4:	b092      	sub	sp, #72	; 0x48
 80109c6:	af00      	add	r7, sp, #0
 80109c8:	60f8      	str	r0, [r7, #12]
 80109ca:	60b9      	str	r1, [r7, #8]
 80109cc:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80109ce:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80109d2:	f107 030c 	add.w	r3, r7, #12
 80109d6:	2200      	movs	r2, #0
 80109d8:	4618      	mov	r0, r3
 80109da:	f7fe fe23 	bl	800f624 <find_volume>
 80109de:	4603      	mov	r3, r0
 80109e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80109e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	f040 8099 	bne.w	8010b20 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80109ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80109f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109f6:	699a      	ldr	r2, [r3, #24]
 80109f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109fa:	69db      	ldr	r3, [r3, #28]
 80109fc:	3b02      	subs	r3, #2
 80109fe:	429a      	cmp	r2, r3
 8010a00:	d804      	bhi.n	8010a0c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8010a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a04:	699a      	ldr	r2, [r3, #24]
 8010a06:	68bb      	ldr	r3, [r7, #8]
 8010a08:	601a      	str	r2, [r3, #0]
 8010a0a:	e089      	b.n	8010b20 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8010a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a12:	781b      	ldrb	r3, [r3, #0]
 8010a14:	2b01      	cmp	r3, #1
 8010a16:	d128      	bne.n	8010a6a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8010a18:	2302      	movs	r3, #2
 8010a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a1e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8010a20:	f107 0314 	add.w	r3, r7, #20
 8010a24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010a26:	4618      	mov	r0, r3
 8010a28:	f7fd f901 	bl	800dc2e <get_fat>
 8010a2c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8010a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a34:	d103      	bne.n	8010a3e <f_getfree+0x7c>
 8010a36:	2301      	movs	r3, #1
 8010a38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8010a3c:	e063      	b.n	8010b06 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8010a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a40:	2b01      	cmp	r3, #1
 8010a42:	d103      	bne.n	8010a4c <f_getfree+0x8a>
 8010a44:	2302      	movs	r3, #2
 8010a46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8010a4a:	e05c      	b.n	8010b06 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8010a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d102      	bne.n	8010a58 <f_getfree+0x96>
 8010a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a54:	3301      	adds	r3, #1
 8010a56:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8010a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a5a:	3301      	adds	r3, #1
 8010a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a60:	69db      	ldr	r3, [r3, #28]
 8010a62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010a64:	429a      	cmp	r2, r3
 8010a66:	d3db      	bcc.n	8010a20 <f_getfree+0x5e>
 8010a68:	e04d      	b.n	8010b06 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8010a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a6c:	69db      	ldr	r3, [r3, #28]
 8010a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a74:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8010a76:	2300      	movs	r3, #0
 8010a78:	637b      	str	r3, [r7, #52]	; 0x34
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8010a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d113      	bne.n	8010aac <f_getfree+0xea>
							res = move_window(fs, sect++);
 8010a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a88:	1c5a      	adds	r2, r3, #1
 8010a8a:	63ba      	str	r2, [r7, #56]	; 0x38
 8010a8c:	4619      	mov	r1, r3
 8010a8e:	f7fd f811 	bl	800dab4 <move_window>
 8010a92:	4603      	mov	r3, r0
 8010a94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8010a98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d131      	bne.n	8010b04 <f_getfree+0x142>
							p = fs->win;
 8010aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aa2:	3338      	adds	r3, #56	; 0x38
 8010aa4:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8010aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aa8:	899b      	ldrh	r3, [r3, #12]
 8010aaa:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8010aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aae:	781b      	ldrb	r3, [r3, #0]
 8010ab0:	2b02      	cmp	r3, #2
 8010ab2:	d10f      	bne.n	8010ad4 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8010ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ab6:	f7fc fd4d 	bl	800d554 <ld_word>
 8010aba:	4603      	mov	r3, r0
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d102      	bne.n	8010ac6 <f_getfree+0x104>
 8010ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ac2:	3301      	adds	r3, #1
 8010ac4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8010ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ac8:	3302      	adds	r3, #2
 8010aca:	633b      	str	r3, [r7, #48]	; 0x30
 8010acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ace:	3b02      	subs	r3, #2
 8010ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8010ad2:	e010      	b.n	8010af6 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8010ad4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ad6:	f7fc fd55 	bl	800d584 <ld_dword>
 8010ada:	4603      	mov	r3, r0
 8010adc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d102      	bne.n	8010aea <f_getfree+0x128>
 8010ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ae6:	3301      	adds	r3, #1
 8010ae8:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8010aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aec:	3304      	adds	r3, #4
 8010aee:	633b      	str	r3, [r7, #48]	; 0x30
 8010af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010af2:	3b04      	subs	r3, #4
 8010af4:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8010af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010af8:	3b01      	subs	r3, #1
 8010afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d1bd      	bne.n	8010a7e <f_getfree+0xbc>
 8010b02:	e000      	b.n	8010b06 <f_getfree+0x144>
							if (res != FR_OK) break;
 8010b04:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8010b06:	68bb      	ldr	r3, [r7, #8]
 8010b08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010b0a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8010b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010b10:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8010b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b14:	791a      	ldrb	r2, [r3, #4]
 8010b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b18:	f042 0201 	orr.w	r2, r2, #1
 8010b1c:	b2d2      	uxtb	r2, r2
 8010b1e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8010b20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8010b24:	4618      	mov	r0, r3
 8010b26:	3748      	adds	r7, #72	; 0x48
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	bd80      	pop	{r7, pc}

08010b2c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b088      	sub	sp, #32
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	60f8      	str	r0, [r7, #12]
 8010b34:	60b9      	str	r1, [r7, #8]
 8010b36:	607a      	str	r2, [r7, #4]
	int n = 0;
 8010b38:	2300      	movs	r3, #0
 8010b3a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8010b40:	e01b      	b.n	8010b7a <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8010b42:	f107 0310 	add.w	r3, r7, #16
 8010b46:	f107 0114 	add.w	r1, r7, #20
 8010b4a:	2201      	movs	r2, #1
 8010b4c:	6878      	ldr	r0, [r7, #4]
 8010b4e:	f7ff fa37 	bl	800ffc0 <f_read>
		if (rc != 1) break;
 8010b52:	693b      	ldr	r3, [r7, #16]
 8010b54:	2b01      	cmp	r3, #1
 8010b56:	d116      	bne.n	8010b86 <f_gets+0x5a>
		c = s[0];
 8010b58:	7d3b      	ldrb	r3, [r7, #20]
 8010b5a:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8010b5c:	7dfb      	ldrb	r3, [r7, #23]
 8010b5e:	2b0d      	cmp	r3, #13
 8010b60:	d100      	bne.n	8010b64 <f_gets+0x38>
 8010b62:	e00a      	b.n	8010b7a <f_gets+0x4e>
		*p++ = c;
 8010b64:	69bb      	ldr	r3, [r7, #24]
 8010b66:	1c5a      	adds	r2, r3, #1
 8010b68:	61ba      	str	r2, [r7, #24]
 8010b6a:	7dfa      	ldrb	r2, [r7, #23]
 8010b6c:	701a      	strb	r2, [r3, #0]
		n++;
 8010b6e:	69fb      	ldr	r3, [r7, #28]
 8010b70:	3301      	adds	r3, #1
 8010b72:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8010b74:	7dfb      	ldrb	r3, [r7, #23]
 8010b76:	2b0a      	cmp	r3, #10
 8010b78:	d007      	beq.n	8010b8a <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8010b7a:	68bb      	ldr	r3, [r7, #8]
 8010b7c:	3b01      	subs	r3, #1
 8010b7e:	69fa      	ldr	r2, [r7, #28]
 8010b80:	429a      	cmp	r2, r3
 8010b82:	dbde      	blt.n	8010b42 <f_gets+0x16>
 8010b84:	e002      	b.n	8010b8c <f_gets+0x60>
		if (rc != 1) break;
 8010b86:	bf00      	nop
 8010b88:	e000      	b.n	8010b8c <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8010b8a:	bf00      	nop
	}
	*p = 0;
 8010b8c:	69bb      	ldr	r3, [r7, #24]
 8010b8e:	2200      	movs	r2, #0
 8010b90:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8010b92:	69fb      	ldr	r3, [r7, #28]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d001      	beq.n	8010b9c <f_gets+0x70>
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	e000      	b.n	8010b9e <f_gets+0x72>
 8010b9c:	2300      	movs	r3, #0
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	3720      	adds	r7, #32
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}
	...

08010ba8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010ba8:	b480      	push	{r7}
 8010baa:	b087      	sub	sp, #28
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	60f8      	str	r0, [r7, #12]
 8010bb0:	60b9      	str	r1, [r7, #8]
 8010bb2:	4613      	mov	r3, r2
 8010bb4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010bba:	2300      	movs	r3, #0
 8010bbc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010bbe:	4b1f      	ldr	r3, [pc, #124]	; (8010c3c <FATFS_LinkDriverEx+0x94>)
 8010bc0:	7a5b      	ldrb	r3, [r3, #9]
 8010bc2:	b2db      	uxtb	r3, r3
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d131      	bne.n	8010c2c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010bc8:	4b1c      	ldr	r3, [pc, #112]	; (8010c3c <FATFS_LinkDriverEx+0x94>)
 8010bca:	7a5b      	ldrb	r3, [r3, #9]
 8010bcc:	b2db      	uxtb	r3, r3
 8010bce:	461a      	mov	r2, r3
 8010bd0:	4b1a      	ldr	r3, [pc, #104]	; (8010c3c <FATFS_LinkDriverEx+0x94>)
 8010bd2:	2100      	movs	r1, #0
 8010bd4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010bd6:	4b19      	ldr	r3, [pc, #100]	; (8010c3c <FATFS_LinkDriverEx+0x94>)
 8010bd8:	7a5b      	ldrb	r3, [r3, #9]
 8010bda:	b2db      	uxtb	r3, r3
 8010bdc:	4a17      	ldr	r2, [pc, #92]	; (8010c3c <FATFS_LinkDriverEx+0x94>)
 8010bde:	009b      	lsls	r3, r3, #2
 8010be0:	4413      	add	r3, r2
 8010be2:	68fa      	ldr	r2, [r7, #12]
 8010be4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010be6:	4b15      	ldr	r3, [pc, #84]	; (8010c3c <FATFS_LinkDriverEx+0x94>)
 8010be8:	7a5b      	ldrb	r3, [r3, #9]
 8010bea:	b2db      	uxtb	r3, r3
 8010bec:	461a      	mov	r2, r3
 8010bee:	4b13      	ldr	r3, [pc, #76]	; (8010c3c <FATFS_LinkDriverEx+0x94>)
 8010bf0:	4413      	add	r3, r2
 8010bf2:	79fa      	ldrb	r2, [r7, #7]
 8010bf4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010bf6:	4b11      	ldr	r3, [pc, #68]	; (8010c3c <FATFS_LinkDriverEx+0x94>)
 8010bf8:	7a5b      	ldrb	r3, [r3, #9]
 8010bfa:	b2db      	uxtb	r3, r3
 8010bfc:	1c5a      	adds	r2, r3, #1
 8010bfe:	b2d1      	uxtb	r1, r2
 8010c00:	4a0e      	ldr	r2, [pc, #56]	; (8010c3c <FATFS_LinkDriverEx+0x94>)
 8010c02:	7251      	strb	r1, [r2, #9]
 8010c04:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010c06:	7dbb      	ldrb	r3, [r7, #22]
 8010c08:	3330      	adds	r3, #48	; 0x30
 8010c0a:	b2da      	uxtb	r2, r3
 8010c0c:	68bb      	ldr	r3, [r7, #8]
 8010c0e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	3301      	adds	r3, #1
 8010c14:	223a      	movs	r2, #58	; 0x3a
 8010c16:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010c18:	68bb      	ldr	r3, [r7, #8]
 8010c1a:	3302      	adds	r3, #2
 8010c1c:	222f      	movs	r2, #47	; 0x2f
 8010c1e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010c20:	68bb      	ldr	r3, [r7, #8]
 8010c22:	3303      	adds	r3, #3
 8010c24:	2200      	movs	r2, #0
 8010c26:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010c28:	2300      	movs	r3, #0
 8010c2a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c2e:	4618      	mov	r0, r3
 8010c30:	371c      	adds	r7, #28
 8010c32:	46bd      	mov	sp, r7
 8010c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c38:	4770      	bx	lr
 8010c3a:	bf00      	nop
 8010c3c:	20002e78 	.word	0x20002e78

08010c40 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b082      	sub	sp, #8
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
 8010c48:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	6839      	ldr	r1, [r7, #0]
 8010c4e:	6878      	ldr	r0, [r7, #4]
 8010c50:	f7ff ffaa 	bl	8010ba8 <FATFS_LinkDriverEx>
 8010c54:	4603      	mov	r3, r0
}
 8010c56:	4618      	mov	r0, r3
 8010c58:	3708      	adds	r7, #8
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	bd80      	pop	{r7, pc}
	...

08010c60 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8010c60:	b480      	push	{r7}
 8010c62:	b085      	sub	sp, #20
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
 8010c68:	460b      	mov	r3, r1
 8010c6a:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8010c70:	2301      	movs	r3, #1
 8010c72:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8010c74:	4b15      	ldr	r3, [pc, #84]	; (8010ccc <FATFS_UnLinkDriverEx+0x6c>)
 8010c76:	7a5b      	ldrb	r3, [r3, #9]
 8010c78:	b2db      	uxtb	r3, r3
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d01e      	beq.n	8010cbc <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	781b      	ldrb	r3, [r3, #0]
 8010c82:	3b30      	subs	r3, #48	; 0x30
 8010c84:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 8010c86:	7bbb      	ldrb	r3, [r7, #14]
 8010c88:	4a10      	ldr	r2, [pc, #64]	; (8010ccc <FATFS_UnLinkDriverEx+0x6c>)
 8010c8a:	009b      	lsls	r3, r3, #2
 8010c8c:	4413      	add	r3, r2
 8010c8e:	685b      	ldr	r3, [r3, #4]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d013      	beq.n	8010cbc <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8010c94:	7bbb      	ldrb	r3, [r7, #14]
 8010c96:	4a0d      	ldr	r2, [pc, #52]	; (8010ccc <FATFS_UnLinkDriverEx+0x6c>)
 8010c98:	009b      	lsls	r3, r3, #2
 8010c9a:	4413      	add	r3, r2
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8010ca0:	7bbb      	ldrb	r3, [r7, #14]
 8010ca2:	4a0a      	ldr	r2, [pc, #40]	; (8010ccc <FATFS_UnLinkDriverEx+0x6c>)
 8010ca4:	4413      	add	r3, r2
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8010caa:	4b08      	ldr	r3, [pc, #32]	; (8010ccc <FATFS_UnLinkDriverEx+0x6c>)
 8010cac:	7a5b      	ldrb	r3, [r3, #9]
 8010cae:	b2db      	uxtb	r3, r3
 8010cb0:	3b01      	subs	r3, #1
 8010cb2:	b2da      	uxtb	r2, r3
 8010cb4:	4b05      	ldr	r3, [pc, #20]	; (8010ccc <FATFS_UnLinkDriverEx+0x6c>)
 8010cb6:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8010cb8:	2300      	movs	r3, #0
 8010cba:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8010cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	3714      	adds	r7, #20
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc8:	4770      	bx	lr
 8010cca:	bf00      	nop
 8010ccc:	20002e78 	.word	0x20002e78

08010cd0 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b082      	sub	sp, #8
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8010cd8:	2100      	movs	r1, #0
 8010cda:	6878      	ldr	r0, [r7, #4]
 8010cdc:	f7ff ffc0 	bl	8010c60 <FATFS_UnLinkDriverEx>
 8010ce0:	4603      	mov	r3, r0
}
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	3708      	adds	r7, #8
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}
	...

08010cec <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010cec:	b480      	push	{r7}
 8010cee:	b085      	sub	sp, #20
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	6039      	str	r1, [r7, #0]
 8010cf6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010cf8:	88fb      	ldrh	r3, [r7, #6]
 8010cfa:	2b7f      	cmp	r3, #127	; 0x7f
 8010cfc:	d802      	bhi.n	8010d04 <ff_convert+0x18>
		c = chr;
 8010cfe:	88fb      	ldrh	r3, [r7, #6]
 8010d00:	81fb      	strh	r3, [r7, #14]
 8010d02:	e025      	b.n	8010d50 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010d04:	683b      	ldr	r3, [r7, #0]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d00b      	beq.n	8010d22 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010d0a:	88fb      	ldrh	r3, [r7, #6]
 8010d0c:	2bff      	cmp	r3, #255	; 0xff
 8010d0e:	d805      	bhi.n	8010d1c <ff_convert+0x30>
 8010d10:	88fb      	ldrh	r3, [r7, #6]
 8010d12:	3b80      	subs	r3, #128	; 0x80
 8010d14:	4a12      	ldr	r2, [pc, #72]	; (8010d60 <ff_convert+0x74>)
 8010d16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d1a:	e000      	b.n	8010d1e <ff_convert+0x32>
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	81fb      	strh	r3, [r7, #14]
 8010d20:	e016      	b.n	8010d50 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010d22:	2300      	movs	r3, #0
 8010d24:	81fb      	strh	r3, [r7, #14]
 8010d26:	e009      	b.n	8010d3c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010d28:	89fb      	ldrh	r3, [r7, #14]
 8010d2a:	4a0d      	ldr	r2, [pc, #52]	; (8010d60 <ff_convert+0x74>)
 8010d2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d30:	88fa      	ldrh	r2, [r7, #6]
 8010d32:	429a      	cmp	r2, r3
 8010d34:	d006      	beq.n	8010d44 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010d36:	89fb      	ldrh	r3, [r7, #14]
 8010d38:	3301      	adds	r3, #1
 8010d3a:	81fb      	strh	r3, [r7, #14]
 8010d3c:	89fb      	ldrh	r3, [r7, #14]
 8010d3e:	2b7f      	cmp	r3, #127	; 0x7f
 8010d40:	d9f2      	bls.n	8010d28 <ff_convert+0x3c>
 8010d42:	e000      	b.n	8010d46 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010d44:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010d46:	89fb      	ldrh	r3, [r7, #14]
 8010d48:	3380      	adds	r3, #128	; 0x80
 8010d4a:	b29b      	uxth	r3, r3
 8010d4c:	b2db      	uxtb	r3, r3
 8010d4e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010d50:	89fb      	ldrh	r3, [r7, #14]
}
 8010d52:	4618      	mov	r0, r3
 8010d54:	3714      	adds	r7, #20
 8010d56:	46bd      	mov	sp, r7
 8010d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5c:	4770      	bx	lr
 8010d5e:	bf00      	nop
 8010d60:	08012024 	.word	0x08012024

08010d64 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010d64:	b480      	push	{r7}
 8010d66:	b087      	sub	sp, #28
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010d6e:	88fb      	ldrh	r3, [r7, #6]
 8010d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010d74:	d201      	bcs.n	8010d7a <ff_wtoupper+0x16>
 8010d76:	4b3e      	ldr	r3, [pc, #248]	; (8010e70 <ff_wtoupper+0x10c>)
 8010d78:	e000      	b.n	8010d7c <ff_wtoupper+0x18>
 8010d7a:	4b3e      	ldr	r3, [pc, #248]	; (8010e74 <ff_wtoupper+0x110>)
 8010d7c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010d7e:	697b      	ldr	r3, [r7, #20]
 8010d80:	1c9a      	adds	r2, r3, #2
 8010d82:	617a      	str	r2, [r7, #20]
 8010d84:	881b      	ldrh	r3, [r3, #0]
 8010d86:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010d88:	8a7b      	ldrh	r3, [r7, #18]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d068      	beq.n	8010e60 <ff_wtoupper+0xfc>
 8010d8e:	88fa      	ldrh	r2, [r7, #6]
 8010d90:	8a7b      	ldrh	r3, [r7, #18]
 8010d92:	429a      	cmp	r2, r3
 8010d94:	d364      	bcc.n	8010e60 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010d96:	697b      	ldr	r3, [r7, #20]
 8010d98:	1c9a      	adds	r2, r3, #2
 8010d9a:	617a      	str	r2, [r7, #20]
 8010d9c:	881b      	ldrh	r3, [r3, #0]
 8010d9e:	823b      	strh	r3, [r7, #16]
 8010da0:	8a3b      	ldrh	r3, [r7, #16]
 8010da2:	0a1b      	lsrs	r3, r3, #8
 8010da4:	81fb      	strh	r3, [r7, #14]
 8010da6:	8a3b      	ldrh	r3, [r7, #16]
 8010da8:	b2db      	uxtb	r3, r3
 8010daa:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010dac:	88fa      	ldrh	r2, [r7, #6]
 8010dae:	8a79      	ldrh	r1, [r7, #18]
 8010db0:	8a3b      	ldrh	r3, [r7, #16]
 8010db2:	440b      	add	r3, r1
 8010db4:	429a      	cmp	r2, r3
 8010db6:	da49      	bge.n	8010e4c <ff_wtoupper+0xe8>
			switch (cmd) {
 8010db8:	89fb      	ldrh	r3, [r7, #14]
 8010dba:	2b08      	cmp	r3, #8
 8010dbc:	d84f      	bhi.n	8010e5e <ff_wtoupper+0xfa>
 8010dbe:	a201      	add	r2, pc, #4	; (adr r2, 8010dc4 <ff_wtoupper+0x60>)
 8010dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dc4:	08010de9 	.word	0x08010de9
 8010dc8:	08010dfb 	.word	0x08010dfb
 8010dcc:	08010e11 	.word	0x08010e11
 8010dd0:	08010e19 	.word	0x08010e19
 8010dd4:	08010e21 	.word	0x08010e21
 8010dd8:	08010e29 	.word	0x08010e29
 8010ddc:	08010e31 	.word	0x08010e31
 8010de0:	08010e39 	.word	0x08010e39
 8010de4:	08010e41 	.word	0x08010e41
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010de8:	88fa      	ldrh	r2, [r7, #6]
 8010dea:	8a7b      	ldrh	r3, [r7, #18]
 8010dec:	1ad3      	subs	r3, r2, r3
 8010dee:	005b      	lsls	r3, r3, #1
 8010df0:	697a      	ldr	r2, [r7, #20]
 8010df2:	4413      	add	r3, r2
 8010df4:	881b      	ldrh	r3, [r3, #0]
 8010df6:	80fb      	strh	r3, [r7, #6]
 8010df8:	e027      	b.n	8010e4a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010dfa:	88fa      	ldrh	r2, [r7, #6]
 8010dfc:	8a7b      	ldrh	r3, [r7, #18]
 8010dfe:	1ad3      	subs	r3, r2, r3
 8010e00:	b29b      	uxth	r3, r3
 8010e02:	f003 0301 	and.w	r3, r3, #1
 8010e06:	b29b      	uxth	r3, r3
 8010e08:	88fa      	ldrh	r2, [r7, #6]
 8010e0a:	1ad3      	subs	r3, r2, r3
 8010e0c:	80fb      	strh	r3, [r7, #6]
 8010e0e:	e01c      	b.n	8010e4a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010e10:	88fb      	ldrh	r3, [r7, #6]
 8010e12:	3b10      	subs	r3, #16
 8010e14:	80fb      	strh	r3, [r7, #6]
 8010e16:	e018      	b.n	8010e4a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010e18:	88fb      	ldrh	r3, [r7, #6]
 8010e1a:	3b20      	subs	r3, #32
 8010e1c:	80fb      	strh	r3, [r7, #6]
 8010e1e:	e014      	b.n	8010e4a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010e20:	88fb      	ldrh	r3, [r7, #6]
 8010e22:	3b30      	subs	r3, #48	; 0x30
 8010e24:	80fb      	strh	r3, [r7, #6]
 8010e26:	e010      	b.n	8010e4a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010e28:	88fb      	ldrh	r3, [r7, #6]
 8010e2a:	3b1a      	subs	r3, #26
 8010e2c:	80fb      	strh	r3, [r7, #6]
 8010e2e:	e00c      	b.n	8010e4a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010e30:	88fb      	ldrh	r3, [r7, #6]
 8010e32:	3308      	adds	r3, #8
 8010e34:	80fb      	strh	r3, [r7, #6]
 8010e36:	e008      	b.n	8010e4a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010e38:	88fb      	ldrh	r3, [r7, #6]
 8010e3a:	3b50      	subs	r3, #80	; 0x50
 8010e3c:	80fb      	strh	r3, [r7, #6]
 8010e3e:	e004      	b.n	8010e4a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010e40:	88fb      	ldrh	r3, [r7, #6]
 8010e42:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010e46:	80fb      	strh	r3, [r7, #6]
 8010e48:	bf00      	nop
			}
			break;
 8010e4a:	e008      	b.n	8010e5e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010e4c:	89fb      	ldrh	r3, [r7, #14]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d195      	bne.n	8010d7e <ff_wtoupper+0x1a>
 8010e52:	8a3b      	ldrh	r3, [r7, #16]
 8010e54:	005b      	lsls	r3, r3, #1
 8010e56:	697a      	ldr	r2, [r7, #20]
 8010e58:	4413      	add	r3, r2
 8010e5a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010e5c:	e78f      	b.n	8010d7e <ff_wtoupper+0x1a>
			break;
 8010e5e:	bf00      	nop
	}

	return chr;
 8010e60:	88fb      	ldrh	r3, [r7, #6]
}
 8010e62:	4618      	mov	r0, r3
 8010e64:	371c      	adds	r7, #28
 8010e66:	46bd      	mov	sp, r7
 8010e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6c:	4770      	bx	lr
 8010e6e:	bf00      	nop
 8010e70:	08012124 	.word	0x08012124
 8010e74:	08012318 	.word	0x08012318

08010e78 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010e7c:	2201      	movs	r2, #1
 8010e7e:	490e      	ldr	r1, [pc, #56]	; (8010eb8 <MX_USB_HOST_Init+0x40>)
 8010e80:	480e      	ldr	r0, [pc, #56]	; (8010ebc <MX_USB_HOST_Init+0x44>)
 8010e82:	f7fa fe77 	bl	800bb74 <USBH_Init>
 8010e86:	4603      	mov	r3, r0
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d001      	beq.n	8010e90 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010e8c:	f7f2 fb3c 	bl	8003508 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8010e90:	490b      	ldr	r1, [pc, #44]	; (8010ec0 <MX_USB_HOST_Init+0x48>)
 8010e92:	480a      	ldr	r0, [pc, #40]	; (8010ebc <MX_USB_HOST_Init+0x44>)
 8010e94:	f7fa fefc 	bl	800bc90 <USBH_RegisterClass>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d001      	beq.n	8010ea2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010e9e:	f7f2 fb33 	bl	8003508 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010ea2:	4806      	ldr	r0, [pc, #24]	; (8010ebc <MX_USB_HOST_Init+0x44>)
 8010ea4:	f7fa ff80 	bl	800bda8 <USBH_Start>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d001      	beq.n	8010eb2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010eae:	f7f2 fb2b 	bl	8003508 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010eb2:	bf00      	nop
 8010eb4:	bd80      	pop	{r7, pc}
 8010eb6:	bf00      	nop
 8010eb8:	08010ed9 	.word	0x08010ed9
 8010ebc:	20002e84 	.word	0x20002e84
 8010ec0:	20000024 	.word	0x20000024

08010ec4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8010ec8:	4802      	ldr	r0, [pc, #8]	; (8010ed4 <MX_USB_HOST_Process+0x10>)
 8010eca:	f7fa ff7d 	bl	800bdc8 <USBH_Process>
}
 8010ece:	bf00      	nop
 8010ed0:	bd80      	pop	{r7, pc}
 8010ed2:	bf00      	nop
 8010ed4:	20002e84 	.word	0x20002e84

08010ed8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010ed8:	b480      	push	{r7}
 8010eda:	b083      	sub	sp, #12
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
 8010ee0:	460b      	mov	r3, r1
 8010ee2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010ee4:	78fb      	ldrb	r3, [r7, #3]
 8010ee6:	3b01      	subs	r3, #1
 8010ee8:	2b04      	cmp	r3, #4
 8010eea:	d819      	bhi.n	8010f20 <USBH_UserProcess+0x48>
 8010eec:	a201      	add	r2, pc, #4	; (adr r2, 8010ef4 <USBH_UserProcess+0x1c>)
 8010eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ef2:	bf00      	nop
 8010ef4:	08010f21 	.word	0x08010f21
 8010ef8:	08010f11 	.word	0x08010f11
 8010efc:	08010f21 	.word	0x08010f21
 8010f00:	08010f19 	.word	0x08010f19
 8010f04:	08010f09 	.word	0x08010f09
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010f08:	4b09      	ldr	r3, [pc, #36]	; (8010f30 <USBH_UserProcess+0x58>)
 8010f0a:	2203      	movs	r2, #3
 8010f0c:	701a      	strb	r2, [r3, #0]
  break;
 8010f0e:	e008      	b.n	8010f22 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010f10:	4b07      	ldr	r3, [pc, #28]	; (8010f30 <USBH_UserProcess+0x58>)
 8010f12:	2202      	movs	r2, #2
 8010f14:	701a      	strb	r2, [r3, #0]
  break;
 8010f16:	e004      	b.n	8010f22 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010f18:	4b05      	ldr	r3, [pc, #20]	; (8010f30 <USBH_UserProcess+0x58>)
 8010f1a:	2201      	movs	r2, #1
 8010f1c:	701a      	strb	r2, [r3, #0]
  break;
 8010f1e:	e000      	b.n	8010f22 <USBH_UserProcess+0x4a>

  default:
  break;
 8010f20:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010f22:	bf00      	nop
 8010f24:	370c      	adds	r7, #12
 8010f26:	46bd      	mov	sp, r7
 8010f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2c:	4770      	bx	lr
 8010f2e:	bf00      	nop
 8010f30:	2000325c 	.word	0x2000325c

08010f34 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b08a      	sub	sp, #40	; 0x28
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010f3c:	f107 0314 	add.w	r3, r7, #20
 8010f40:	2200      	movs	r2, #0
 8010f42:	601a      	str	r2, [r3, #0]
 8010f44:	605a      	str	r2, [r3, #4]
 8010f46:	609a      	str	r2, [r3, #8]
 8010f48:	60da      	str	r2, [r3, #12]
 8010f4a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010f54:	d147      	bne.n	8010fe6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010f56:	2300      	movs	r3, #0
 8010f58:	613b      	str	r3, [r7, #16]
 8010f5a:	4b25      	ldr	r3, [pc, #148]	; (8010ff0 <HAL_HCD_MspInit+0xbc>)
 8010f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f5e:	4a24      	ldr	r2, [pc, #144]	; (8010ff0 <HAL_HCD_MspInit+0xbc>)
 8010f60:	f043 0301 	orr.w	r3, r3, #1
 8010f64:	6313      	str	r3, [r2, #48]	; 0x30
 8010f66:	4b22      	ldr	r3, [pc, #136]	; (8010ff0 <HAL_HCD_MspInit+0xbc>)
 8010f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f6a:	f003 0301 	and.w	r3, r3, #1
 8010f6e:	613b      	str	r3, [r7, #16]
 8010f70:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8010f72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010f78:	2300      	movs	r3, #0
 8010f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8010f80:	f107 0314 	add.w	r3, r7, #20
 8010f84:	4619      	mov	r1, r3
 8010f86:	481b      	ldr	r0, [pc, #108]	; (8010ff4 <HAL_HCD_MspInit+0xc0>)
 8010f88:	f7f4 fa84 	bl	8005494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8010f8c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8010f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f92:	2302      	movs	r3, #2
 8010f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f96:	2300      	movs	r3, #0
 8010f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010f9e:	230a      	movs	r3, #10
 8010fa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010fa2:	f107 0314 	add.w	r3, r7, #20
 8010fa6:	4619      	mov	r1, r3
 8010fa8:	4812      	ldr	r0, [pc, #72]	; (8010ff4 <HAL_HCD_MspInit+0xc0>)
 8010faa:	f7f4 fa73 	bl	8005494 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010fae:	4b10      	ldr	r3, [pc, #64]	; (8010ff0 <HAL_HCD_MspInit+0xbc>)
 8010fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fb2:	4a0f      	ldr	r2, [pc, #60]	; (8010ff0 <HAL_HCD_MspInit+0xbc>)
 8010fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010fb8:	6353      	str	r3, [r2, #52]	; 0x34
 8010fba:	2300      	movs	r3, #0
 8010fbc:	60fb      	str	r3, [r7, #12]
 8010fbe:	4b0c      	ldr	r3, [pc, #48]	; (8010ff0 <HAL_HCD_MspInit+0xbc>)
 8010fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fc2:	4a0b      	ldr	r2, [pc, #44]	; (8010ff0 <HAL_HCD_MspInit+0xbc>)
 8010fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8010fca:	4b09      	ldr	r3, [pc, #36]	; (8010ff0 <HAL_HCD_MspInit+0xbc>)
 8010fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010fd2:	60fb      	str	r3, [r7, #12]
 8010fd4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	2100      	movs	r1, #0
 8010fda:	2043      	movs	r0, #67	; 0x43
 8010fdc:	f7f3 fe21 	bl	8004c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010fe0:	2043      	movs	r0, #67	; 0x43
 8010fe2:	f7f3 fe3a 	bl	8004c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010fe6:	bf00      	nop
 8010fe8:	3728      	adds	r7, #40	; 0x28
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bd80      	pop	{r7, pc}
 8010fee:	bf00      	nop
 8010ff0:	40023800 	.word	0x40023800
 8010ff4:	40020000 	.word	0x40020000

08010ff8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b082      	sub	sp, #8
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011006:	4618      	mov	r0, r3
 8011008:	f7fb fabd 	bl	800c586 <USBH_LL_IncTimer>
}
 801100c:	bf00      	nop
 801100e:	3708      	adds	r7, #8
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}

08011014 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b082      	sub	sp, #8
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011022:	4618      	mov	r0, r3
 8011024:	f7fb faf5 	bl	800c612 <USBH_LL_Connect>
}
 8011028:	bf00      	nop
 801102a:	3708      	adds	r7, #8
 801102c:	46bd      	mov	sp, r7
 801102e:	bd80      	pop	{r7, pc}

08011030 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b082      	sub	sp, #8
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801103e:	4618      	mov	r0, r3
 8011040:	f7fb fafe 	bl	800c640 <USBH_LL_Disconnect>
}
 8011044:	bf00      	nop
 8011046:	3708      	adds	r7, #8
 8011048:	46bd      	mov	sp, r7
 801104a:	bd80      	pop	{r7, pc}

0801104c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801104c:	b480      	push	{r7}
 801104e:	b083      	sub	sp, #12
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
 8011054:	460b      	mov	r3, r1
 8011056:	70fb      	strb	r3, [r7, #3]
 8011058:	4613      	mov	r3, r2
 801105a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 801105c:	bf00      	nop
 801105e:	370c      	adds	r7, #12
 8011060:	46bd      	mov	sp, r7
 8011062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011066:	4770      	bx	lr

08011068 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b082      	sub	sp, #8
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011076:	4618      	mov	r0, r3
 8011078:	f7fb faaf 	bl	800c5da <USBH_LL_PortEnabled>
}
 801107c:	bf00      	nop
 801107e:	3708      	adds	r7, #8
 8011080:	46bd      	mov	sp, r7
 8011082:	bd80      	pop	{r7, pc}

08011084 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b082      	sub	sp, #8
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011092:	4618      	mov	r0, r3
 8011094:	f7fb faaf 	bl	800c5f6 <USBH_LL_PortDisabled>
}
 8011098:	bf00      	nop
 801109a:	3708      	adds	r7, #8
 801109c:	46bd      	mov	sp, r7
 801109e:	bd80      	pop	{r7, pc}

080110a0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b082      	sub	sp, #8
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80110ae:	2b01      	cmp	r3, #1
 80110b0:	d12a      	bne.n	8011108 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80110b2:	4a18      	ldr	r2, [pc, #96]	; (8011114 <USBH_LL_Init+0x74>)
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	4a15      	ldr	r2, [pc, #84]	; (8011114 <USBH_LL_Init+0x74>)
 80110be:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80110c2:	4b14      	ldr	r3, [pc, #80]	; (8011114 <USBH_LL_Init+0x74>)
 80110c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80110c8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80110ca:	4b12      	ldr	r3, [pc, #72]	; (8011114 <USBH_LL_Init+0x74>)
 80110cc:	2208      	movs	r2, #8
 80110ce:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80110d0:	4b10      	ldr	r3, [pc, #64]	; (8011114 <USBH_LL_Init+0x74>)
 80110d2:	2201      	movs	r2, #1
 80110d4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80110d6:	4b0f      	ldr	r3, [pc, #60]	; (8011114 <USBH_LL_Init+0x74>)
 80110d8:	2200      	movs	r2, #0
 80110da:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80110dc:	4b0d      	ldr	r3, [pc, #52]	; (8011114 <USBH_LL_Init+0x74>)
 80110de:	2202      	movs	r2, #2
 80110e0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80110e2:	4b0c      	ldr	r3, [pc, #48]	; (8011114 <USBH_LL_Init+0x74>)
 80110e4:	2200      	movs	r2, #0
 80110e6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80110e8:	480a      	ldr	r0, [pc, #40]	; (8011114 <USBH_LL_Init+0x74>)
 80110ea:	f7f4 fb88 	bl	80057fe <HAL_HCD_Init>
 80110ee:	4603      	mov	r3, r0
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d001      	beq.n	80110f8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80110f4:	f7f2 fa08 	bl	8003508 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80110f8:	4806      	ldr	r0, [pc, #24]	; (8011114 <USBH_LL_Init+0x74>)
 80110fa:	f7f4 ff6c 	bl	8005fd6 <HAL_HCD_GetCurrentFrame>
 80110fe:	4603      	mov	r3, r0
 8011100:	4619      	mov	r1, r3
 8011102:	6878      	ldr	r0, [r7, #4]
 8011104:	f7fb fa30 	bl	800c568 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8011108:	2300      	movs	r3, #0
}
 801110a:	4618      	mov	r0, r3
 801110c:	3708      	adds	r7, #8
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}
 8011112:	bf00      	nop
 8011114:	20003260 	.word	0x20003260

08011118 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8011118:	b580      	push	{r7, lr}
 801111a:	b084      	sub	sp, #16
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011120:	2300      	movs	r3, #0
 8011122:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011124:	2300      	movs	r3, #0
 8011126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801112e:	4618      	mov	r0, r3
 8011130:	f7f4 fedb 	bl	8005eea <HAL_HCD_Start>
 8011134:	4603      	mov	r3, r0
 8011136:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011138:	7bfb      	ldrb	r3, [r7, #15]
 801113a:	4618      	mov	r0, r3
 801113c:	f000 f95c 	bl	80113f8 <USBH_Get_USB_Status>
 8011140:	4603      	mov	r3, r0
 8011142:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011144:	7bbb      	ldrb	r3, [r7, #14]
}
 8011146:	4618      	mov	r0, r3
 8011148:	3710      	adds	r7, #16
 801114a:	46bd      	mov	sp, r7
 801114c:	bd80      	pop	{r7, pc}

0801114e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801114e:	b580      	push	{r7, lr}
 8011150:	b084      	sub	sp, #16
 8011152:	af00      	add	r7, sp, #0
 8011154:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011156:	2300      	movs	r3, #0
 8011158:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801115a:	2300      	movs	r3, #0
 801115c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011164:	4618      	mov	r0, r3
 8011166:	f7f4 fee3 	bl	8005f30 <HAL_HCD_Stop>
 801116a:	4603      	mov	r3, r0
 801116c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801116e:	7bfb      	ldrb	r3, [r7, #15]
 8011170:	4618      	mov	r0, r3
 8011172:	f000 f941 	bl	80113f8 <USBH_Get_USB_Status>
 8011176:	4603      	mov	r3, r0
 8011178:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801117a:	7bbb      	ldrb	r3, [r7, #14]
}
 801117c:	4618      	mov	r0, r3
 801117e:	3710      	adds	r7, #16
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}

08011184 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8011184:	b580      	push	{r7, lr}
 8011186:	b084      	sub	sp, #16
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801118c:	2301      	movs	r3, #1
 801118e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011196:	4618      	mov	r0, r3
 8011198:	f7f4 ff2b 	bl	8005ff2 <HAL_HCD_GetCurrentSpeed>
 801119c:	4603      	mov	r3, r0
 801119e:	2b02      	cmp	r3, #2
 80111a0:	d00c      	beq.n	80111bc <USBH_LL_GetSpeed+0x38>
 80111a2:	2b02      	cmp	r3, #2
 80111a4:	d80d      	bhi.n	80111c2 <USBH_LL_GetSpeed+0x3e>
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d002      	beq.n	80111b0 <USBH_LL_GetSpeed+0x2c>
 80111aa:	2b01      	cmp	r3, #1
 80111ac:	d003      	beq.n	80111b6 <USBH_LL_GetSpeed+0x32>
 80111ae:	e008      	b.n	80111c2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80111b0:	2300      	movs	r3, #0
 80111b2:	73fb      	strb	r3, [r7, #15]
    break;
 80111b4:	e008      	b.n	80111c8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80111b6:	2301      	movs	r3, #1
 80111b8:	73fb      	strb	r3, [r7, #15]
    break;
 80111ba:	e005      	b.n	80111c8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80111bc:	2302      	movs	r3, #2
 80111be:	73fb      	strb	r3, [r7, #15]
    break;
 80111c0:	e002      	b.n	80111c8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80111c2:	2301      	movs	r3, #1
 80111c4:	73fb      	strb	r3, [r7, #15]
    break;
 80111c6:	bf00      	nop
  }
  return  speed;
 80111c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80111ca:	4618      	mov	r0, r3
 80111cc:	3710      	adds	r7, #16
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd80      	pop	{r7, pc}

080111d2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80111d2:	b580      	push	{r7, lr}
 80111d4:	b084      	sub	sp, #16
 80111d6:	af00      	add	r7, sp, #0
 80111d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111da:	2300      	movs	r3, #0
 80111dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80111de:	2300      	movs	r3, #0
 80111e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80111e8:	4618      	mov	r0, r3
 80111ea:	f7f4 febe 	bl	8005f6a <HAL_HCD_ResetPort>
 80111ee:	4603      	mov	r3, r0
 80111f0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80111f2:	7bfb      	ldrb	r3, [r7, #15]
 80111f4:	4618      	mov	r0, r3
 80111f6:	f000 f8ff 	bl	80113f8 <USBH_Get_USB_Status>
 80111fa:	4603      	mov	r3, r0
 80111fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80111fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8011200:	4618      	mov	r0, r3
 8011202:	3710      	adds	r7, #16
 8011204:	46bd      	mov	sp, r7
 8011206:	bd80      	pop	{r7, pc}

08011208 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b082      	sub	sp, #8
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
 8011210:	460b      	mov	r3, r1
 8011212:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801121a:	78fa      	ldrb	r2, [r7, #3]
 801121c:	4611      	mov	r1, r2
 801121e:	4618      	mov	r0, r3
 8011220:	f7f4 fec5 	bl	8005fae <HAL_HCD_HC_GetXferCount>
 8011224:	4603      	mov	r3, r0
}
 8011226:	4618      	mov	r0, r3
 8011228:	3708      	adds	r7, #8
 801122a:	46bd      	mov	sp, r7
 801122c:	bd80      	pop	{r7, pc}

0801122e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801122e:	b590      	push	{r4, r7, lr}
 8011230:	b089      	sub	sp, #36	; 0x24
 8011232:	af04      	add	r7, sp, #16
 8011234:	6078      	str	r0, [r7, #4]
 8011236:	4608      	mov	r0, r1
 8011238:	4611      	mov	r1, r2
 801123a:	461a      	mov	r2, r3
 801123c:	4603      	mov	r3, r0
 801123e:	70fb      	strb	r3, [r7, #3]
 8011240:	460b      	mov	r3, r1
 8011242:	70bb      	strb	r3, [r7, #2]
 8011244:	4613      	mov	r3, r2
 8011246:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011248:	2300      	movs	r3, #0
 801124a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801124c:	2300      	movs	r3, #0
 801124e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011256:	787c      	ldrb	r4, [r7, #1]
 8011258:	78ba      	ldrb	r2, [r7, #2]
 801125a:	78f9      	ldrb	r1, [r7, #3]
 801125c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801125e:	9302      	str	r3, [sp, #8]
 8011260:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011264:	9301      	str	r3, [sp, #4]
 8011266:	f897 3020 	ldrb.w	r3, [r7, #32]
 801126a:	9300      	str	r3, [sp, #0]
 801126c:	4623      	mov	r3, r4
 801126e:	f7f4 fb28 	bl	80058c2 <HAL_HCD_HC_Init>
 8011272:	4603      	mov	r3, r0
 8011274:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8011276:	7bfb      	ldrb	r3, [r7, #15]
 8011278:	4618      	mov	r0, r3
 801127a:	f000 f8bd 	bl	80113f8 <USBH_Get_USB_Status>
 801127e:	4603      	mov	r3, r0
 8011280:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011282:	7bbb      	ldrb	r3, [r7, #14]
}
 8011284:	4618      	mov	r0, r3
 8011286:	3714      	adds	r7, #20
 8011288:	46bd      	mov	sp, r7
 801128a:	bd90      	pop	{r4, r7, pc}

0801128c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b084      	sub	sp, #16
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
 8011294:	460b      	mov	r3, r1
 8011296:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011298:	2300      	movs	r3, #0
 801129a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801129c:	2300      	movs	r3, #0
 801129e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80112a6:	78fa      	ldrb	r2, [r7, #3]
 80112a8:	4611      	mov	r1, r2
 80112aa:	4618      	mov	r0, r3
 80112ac:	f7f4 fb98 	bl	80059e0 <HAL_HCD_HC_Halt>
 80112b0:	4603      	mov	r3, r0
 80112b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80112b4:	7bfb      	ldrb	r3, [r7, #15]
 80112b6:	4618      	mov	r0, r3
 80112b8:	f000 f89e 	bl	80113f8 <USBH_Get_USB_Status>
 80112bc:	4603      	mov	r3, r0
 80112be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80112c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80112c2:	4618      	mov	r0, r3
 80112c4:	3710      	adds	r7, #16
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bd80      	pop	{r7, pc}

080112ca <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80112ca:	b590      	push	{r4, r7, lr}
 80112cc:	b089      	sub	sp, #36	; 0x24
 80112ce:	af04      	add	r7, sp, #16
 80112d0:	6078      	str	r0, [r7, #4]
 80112d2:	4608      	mov	r0, r1
 80112d4:	4611      	mov	r1, r2
 80112d6:	461a      	mov	r2, r3
 80112d8:	4603      	mov	r3, r0
 80112da:	70fb      	strb	r3, [r7, #3]
 80112dc:	460b      	mov	r3, r1
 80112de:	70bb      	strb	r3, [r7, #2]
 80112e0:	4613      	mov	r3, r2
 80112e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112e4:	2300      	movs	r3, #0
 80112e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80112e8:	2300      	movs	r3, #0
 80112ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80112f2:	787c      	ldrb	r4, [r7, #1]
 80112f4:	78ba      	ldrb	r2, [r7, #2]
 80112f6:	78f9      	ldrb	r1, [r7, #3]
 80112f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80112fc:	9303      	str	r3, [sp, #12]
 80112fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011300:	9302      	str	r3, [sp, #8]
 8011302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011304:	9301      	str	r3, [sp, #4]
 8011306:	f897 3020 	ldrb.w	r3, [r7, #32]
 801130a:	9300      	str	r3, [sp, #0]
 801130c:	4623      	mov	r3, r4
 801130e:	f7f4 fb8b 	bl	8005a28 <HAL_HCD_HC_SubmitRequest>
 8011312:	4603      	mov	r3, r0
 8011314:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8011316:	7bfb      	ldrb	r3, [r7, #15]
 8011318:	4618      	mov	r0, r3
 801131a:	f000 f86d 	bl	80113f8 <USBH_Get_USB_Status>
 801131e:	4603      	mov	r3, r0
 8011320:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011322:	7bbb      	ldrb	r3, [r7, #14]
}
 8011324:	4618      	mov	r0, r3
 8011326:	3714      	adds	r7, #20
 8011328:	46bd      	mov	sp, r7
 801132a:	bd90      	pop	{r4, r7, pc}

0801132c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b082      	sub	sp, #8
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
 8011334:	460b      	mov	r3, r1
 8011336:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801133e:	78fa      	ldrb	r2, [r7, #3]
 8011340:	4611      	mov	r1, r2
 8011342:	4618      	mov	r0, r3
 8011344:	f7f4 fe1f 	bl	8005f86 <HAL_HCD_HC_GetURBState>
 8011348:	4603      	mov	r3, r0
}
 801134a:	4618      	mov	r0, r3
 801134c:	3708      	adds	r7, #8
 801134e:	46bd      	mov	sp, r7
 8011350:	bd80      	pop	{r7, pc}

08011352 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8011352:	b580      	push	{r7, lr}
 8011354:	b082      	sub	sp, #8
 8011356:	af00      	add	r7, sp, #0
 8011358:	6078      	str	r0, [r7, #4]
 801135a:	460b      	mov	r3, r1
 801135c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011364:	2b01      	cmp	r3, #1
 8011366:	d103      	bne.n	8011370 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8011368:	78fb      	ldrb	r3, [r7, #3]
 801136a:	4618      	mov	r0, r3
 801136c:	f000 f870 	bl	8011450 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011370:	20c8      	movs	r0, #200	; 0xc8
 8011372:	f7f3 fb57 	bl	8004a24 <HAL_Delay>
  return USBH_OK;
 8011376:	2300      	movs	r3, #0
}
 8011378:	4618      	mov	r0, r3
 801137a:	3708      	adds	r7, #8
 801137c:	46bd      	mov	sp, r7
 801137e:	bd80      	pop	{r7, pc}

08011380 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8011380:	b480      	push	{r7}
 8011382:	b085      	sub	sp, #20
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
 8011388:	460b      	mov	r3, r1
 801138a:	70fb      	strb	r3, [r7, #3]
 801138c:	4613      	mov	r3, r2
 801138e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011396:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8011398:	78fb      	ldrb	r3, [r7, #3]
 801139a:	68fa      	ldr	r2, [r7, #12]
 801139c:	212c      	movs	r1, #44	; 0x2c
 801139e:	fb01 f303 	mul.w	r3, r1, r3
 80113a2:	4413      	add	r3, r2
 80113a4:	333b      	adds	r3, #59	; 0x3b
 80113a6:	781b      	ldrb	r3, [r3, #0]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d009      	beq.n	80113c0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80113ac:	78fb      	ldrb	r3, [r7, #3]
 80113ae:	68fa      	ldr	r2, [r7, #12]
 80113b0:	212c      	movs	r1, #44	; 0x2c
 80113b2:	fb01 f303 	mul.w	r3, r1, r3
 80113b6:	4413      	add	r3, r2
 80113b8:	3354      	adds	r3, #84	; 0x54
 80113ba:	78ba      	ldrb	r2, [r7, #2]
 80113bc:	701a      	strb	r2, [r3, #0]
 80113be:	e008      	b.n	80113d2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80113c0:	78fb      	ldrb	r3, [r7, #3]
 80113c2:	68fa      	ldr	r2, [r7, #12]
 80113c4:	212c      	movs	r1, #44	; 0x2c
 80113c6:	fb01 f303 	mul.w	r3, r1, r3
 80113ca:	4413      	add	r3, r2
 80113cc:	3355      	adds	r3, #85	; 0x55
 80113ce:	78ba      	ldrb	r2, [r7, #2]
 80113d0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80113d2:	2300      	movs	r3, #0
}
 80113d4:	4618      	mov	r0, r3
 80113d6:	3714      	adds	r7, #20
 80113d8:	46bd      	mov	sp, r7
 80113da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113de:	4770      	bx	lr

080113e0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b082      	sub	sp, #8
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80113e8:	6878      	ldr	r0, [r7, #4]
 80113ea:	f7f3 fb1b 	bl	8004a24 <HAL_Delay>
}
 80113ee:	bf00      	nop
 80113f0:	3708      	adds	r7, #8
 80113f2:	46bd      	mov	sp, r7
 80113f4:	bd80      	pop	{r7, pc}
	...

080113f8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80113f8:	b480      	push	{r7}
 80113fa:	b085      	sub	sp, #20
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	4603      	mov	r3, r0
 8011400:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011402:	2300      	movs	r3, #0
 8011404:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011406:	79fb      	ldrb	r3, [r7, #7]
 8011408:	2b03      	cmp	r3, #3
 801140a:	d817      	bhi.n	801143c <USBH_Get_USB_Status+0x44>
 801140c:	a201      	add	r2, pc, #4	; (adr r2, 8011414 <USBH_Get_USB_Status+0x1c>)
 801140e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011412:	bf00      	nop
 8011414:	08011425 	.word	0x08011425
 8011418:	0801142b 	.word	0x0801142b
 801141c:	08011431 	.word	0x08011431
 8011420:	08011437 	.word	0x08011437
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011424:	2300      	movs	r3, #0
 8011426:	73fb      	strb	r3, [r7, #15]
    break;
 8011428:	e00b      	b.n	8011442 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801142a:	2302      	movs	r3, #2
 801142c:	73fb      	strb	r3, [r7, #15]
    break;
 801142e:	e008      	b.n	8011442 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011430:	2301      	movs	r3, #1
 8011432:	73fb      	strb	r3, [r7, #15]
    break;
 8011434:	e005      	b.n	8011442 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011436:	2302      	movs	r3, #2
 8011438:	73fb      	strb	r3, [r7, #15]
    break;
 801143a:	e002      	b.n	8011442 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801143c:	2302      	movs	r3, #2
 801143e:	73fb      	strb	r3, [r7, #15]
    break;
 8011440:	bf00      	nop
  }
  return usb_status;
 8011442:	7bfb      	ldrb	r3, [r7, #15]
}
 8011444:	4618      	mov	r0, r3
 8011446:	3714      	adds	r7, #20
 8011448:	46bd      	mov	sp, r7
 801144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801144e:	4770      	bx	lr

08011450 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b084      	sub	sp, #16
 8011454:	af00      	add	r7, sp, #0
 8011456:	4603      	mov	r3, r0
 8011458:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801145a:	79fb      	ldrb	r3, [r7, #7]
 801145c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801145e:	79fb      	ldrb	r3, [r7, #7]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d102      	bne.n	801146a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8011464:	2300      	movs	r3, #0
 8011466:	73fb      	strb	r3, [r7, #15]
 8011468:	e001      	b.n	801146e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 801146a:	2301      	movs	r3, #1
 801146c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 801146e:	7bfb      	ldrb	r3, [r7, #15]
 8011470:	461a      	mov	r2, r3
 8011472:	2101      	movs	r1, #1
 8011474:	4803      	ldr	r0, [pc, #12]	; (8011484 <MX_DriverVbusFS+0x34>)
 8011476:	f7f4 f9a9 	bl	80057cc <HAL_GPIO_WritePin>
}
 801147a:	bf00      	nop
 801147c:	3710      	adds	r7, #16
 801147e:	46bd      	mov	sp, r7
 8011480:	bd80      	pop	{r7, pc}
 8011482:	bf00      	nop
 8011484:	40020800 	.word	0x40020800

08011488 <__errno>:
 8011488:	4b01      	ldr	r3, [pc, #4]	; (8011490 <__errno+0x8>)
 801148a:	6818      	ldr	r0, [r3, #0]
 801148c:	4770      	bx	lr
 801148e:	bf00      	nop
 8011490:	20000044 	.word	0x20000044

08011494 <__libc_init_array>:
 8011494:	b570      	push	{r4, r5, r6, lr}
 8011496:	4d0d      	ldr	r5, [pc, #52]	; (80114cc <__libc_init_array+0x38>)
 8011498:	4c0d      	ldr	r4, [pc, #52]	; (80114d0 <__libc_init_array+0x3c>)
 801149a:	1b64      	subs	r4, r4, r5
 801149c:	10a4      	asrs	r4, r4, #2
 801149e:	2600      	movs	r6, #0
 80114a0:	42a6      	cmp	r6, r4
 80114a2:	d109      	bne.n	80114b8 <__libc_init_array+0x24>
 80114a4:	4d0b      	ldr	r5, [pc, #44]	; (80114d4 <__libc_init_array+0x40>)
 80114a6:	4c0c      	ldr	r4, [pc, #48]	; (80114d8 <__libc_init_array+0x44>)
 80114a8:	f000 fc9e 	bl	8011de8 <_init>
 80114ac:	1b64      	subs	r4, r4, r5
 80114ae:	10a4      	asrs	r4, r4, #2
 80114b0:	2600      	movs	r6, #0
 80114b2:	42a6      	cmp	r6, r4
 80114b4:	d105      	bne.n	80114c2 <__libc_init_array+0x2e>
 80114b6:	bd70      	pop	{r4, r5, r6, pc}
 80114b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80114bc:	4798      	blx	r3
 80114be:	3601      	adds	r6, #1
 80114c0:	e7ee      	b.n	80114a0 <__libc_init_array+0xc>
 80114c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80114c6:	4798      	blx	r3
 80114c8:	3601      	adds	r6, #1
 80114ca:	e7f2      	b.n	80114b2 <__libc_init_array+0x1e>
 80114cc:	08012410 	.word	0x08012410
 80114d0:	08012410 	.word	0x08012410
 80114d4:	08012410 	.word	0x08012410
 80114d8:	08012414 	.word	0x08012414

080114dc <malloc>:
 80114dc:	4b02      	ldr	r3, [pc, #8]	; (80114e8 <malloc+0xc>)
 80114de:	4601      	mov	r1, r0
 80114e0:	6818      	ldr	r0, [r3, #0]
 80114e2:	f000 b87f 	b.w	80115e4 <_malloc_r>
 80114e6:	bf00      	nop
 80114e8:	20000044 	.word	0x20000044

080114ec <free>:
 80114ec:	4b02      	ldr	r3, [pc, #8]	; (80114f8 <free+0xc>)
 80114ee:	4601      	mov	r1, r0
 80114f0:	6818      	ldr	r0, [r3, #0]
 80114f2:	f000 b80b 	b.w	801150c <_free_r>
 80114f6:	bf00      	nop
 80114f8:	20000044 	.word	0x20000044

080114fc <memset>:
 80114fc:	4402      	add	r2, r0
 80114fe:	4603      	mov	r3, r0
 8011500:	4293      	cmp	r3, r2
 8011502:	d100      	bne.n	8011506 <memset+0xa>
 8011504:	4770      	bx	lr
 8011506:	f803 1b01 	strb.w	r1, [r3], #1
 801150a:	e7f9      	b.n	8011500 <memset+0x4>

0801150c <_free_r>:
 801150c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801150e:	2900      	cmp	r1, #0
 8011510:	d044      	beq.n	801159c <_free_r+0x90>
 8011512:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011516:	9001      	str	r0, [sp, #4]
 8011518:	2b00      	cmp	r3, #0
 801151a:	f1a1 0404 	sub.w	r4, r1, #4
 801151e:	bfb8      	it	lt
 8011520:	18e4      	addlt	r4, r4, r3
 8011522:	f000 f903 	bl	801172c <__malloc_lock>
 8011526:	4a1e      	ldr	r2, [pc, #120]	; (80115a0 <_free_r+0x94>)
 8011528:	9801      	ldr	r0, [sp, #4]
 801152a:	6813      	ldr	r3, [r2, #0]
 801152c:	b933      	cbnz	r3, 801153c <_free_r+0x30>
 801152e:	6063      	str	r3, [r4, #4]
 8011530:	6014      	str	r4, [r2, #0]
 8011532:	b003      	add	sp, #12
 8011534:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011538:	f000 b8fe 	b.w	8011738 <__malloc_unlock>
 801153c:	42a3      	cmp	r3, r4
 801153e:	d908      	bls.n	8011552 <_free_r+0x46>
 8011540:	6825      	ldr	r5, [r4, #0]
 8011542:	1961      	adds	r1, r4, r5
 8011544:	428b      	cmp	r3, r1
 8011546:	bf01      	itttt	eq
 8011548:	6819      	ldreq	r1, [r3, #0]
 801154a:	685b      	ldreq	r3, [r3, #4]
 801154c:	1949      	addeq	r1, r1, r5
 801154e:	6021      	streq	r1, [r4, #0]
 8011550:	e7ed      	b.n	801152e <_free_r+0x22>
 8011552:	461a      	mov	r2, r3
 8011554:	685b      	ldr	r3, [r3, #4]
 8011556:	b10b      	cbz	r3, 801155c <_free_r+0x50>
 8011558:	42a3      	cmp	r3, r4
 801155a:	d9fa      	bls.n	8011552 <_free_r+0x46>
 801155c:	6811      	ldr	r1, [r2, #0]
 801155e:	1855      	adds	r5, r2, r1
 8011560:	42a5      	cmp	r5, r4
 8011562:	d10b      	bne.n	801157c <_free_r+0x70>
 8011564:	6824      	ldr	r4, [r4, #0]
 8011566:	4421      	add	r1, r4
 8011568:	1854      	adds	r4, r2, r1
 801156a:	42a3      	cmp	r3, r4
 801156c:	6011      	str	r1, [r2, #0]
 801156e:	d1e0      	bne.n	8011532 <_free_r+0x26>
 8011570:	681c      	ldr	r4, [r3, #0]
 8011572:	685b      	ldr	r3, [r3, #4]
 8011574:	6053      	str	r3, [r2, #4]
 8011576:	4421      	add	r1, r4
 8011578:	6011      	str	r1, [r2, #0]
 801157a:	e7da      	b.n	8011532 <_free_r+0x26>
 801157c:	d902      	bls.n	8011584 <_free_r+0x78>
 801157e:	230c      	movs	r3, #12
 8011580:	6003      	str	r3, [r0, #0]
 8011582:	e7d6      	b.n	8011532 <_free_r+0x26>
 8011584:	6825      	ldr	r5, [r4, #0]
 8011586:	1961      	adds	r1, r4, r5
 8011588:	428b      	cmp	r3, r1
 801158a:	bf04      	itt	eq
 801158c:	6819      	ldreq	r1, [r3, #0]
 801158e:	685b      	ldreq	r3, [r3, #4]
 8011590:	6063      	str	r3, [r4, #4]
 8011592:	bf04      	itt	eq
 8011594:	1949      	addeq	r1, r1, r5
 8011596:	6021      	streq	r1, [r4, #0]
 8011598:	6054      	str	r4, [r2, #4]
 801159a:	e7ca      	b.n	8011532 <_free_r+0x26>
 801159c:	b003      	add	sp, #12
 801159e:	bd30      	pop	{r4, r5, pc}
 80115a0:	20003564 	.word	0x20003564

080115a4 <sbrk_aligned>:
 80115a4:	b570      	push	{r4, r5, r6, lr}
 80115a6:	4e0e      	ldr	r6, [pc, #56]	; (80115e0 <sbrk_aligned+0x3c>)
 80115a8:	460c      	mov	r4, r1
 80115aa:	6831      	ldr	r1, [r6, #0]
 80115ac:	4605      	mov	r5, r0
 80115ae:	b911      	cbnz	r1, 80115b6 <sbrk_aligned+0x12>
 80115b0:	f000 f88c 	bl	80116cc <_sbrk_r>
 80115b4:	6030      	str	r0, [r6, #0]
 80115b6:	4621      	mov	r1, r4
 80115b8:	4628      	mov	r0, r5
 80115ba:	f000 f887 	bl	80116cc <_sbrk_r>
 80115be:	1c43      	adds	r3, r0, #1
 80115c0:	d00a      	beq.n	80115d8 <sbrk_aligned+0x34>
 80115c2:	1cc4      	adds	r4, r0, #3
 80115c4:	f024 0403 	bic.w	r4, r4, #3
 80115c8:	42a0      	cmp	r0, r4
 80115ca:	d007      	beq.n	80115dc <sbrk_aligned+0x38>
 80115cc:	1a21      	subs	r1, r4, r0
 80115ce:	4628      	mov	r0, r5
 80115d0:	f000 f87c 	bl	80116cc <_sbrk_r>
 80115d4:	3001      	adds	r0, #1
 80115d6:	d101      	bne.n	80115dc <sbrk_aligned+0x38>
 80115d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80115dc:	4620      	mov	r0, r4
 80115de:	bd70      	pop	{r4, r5, r6, pc}
 80115e0:	20003568 	.word	0x20003568

080115e4 <_malloc_r>:
 80115e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115e8:	1ccd      	adds	r5, r1, #3
 80115ea:	f025 0503 	bic.w	r5, r5, #3
 80115ee:	3508      	adds	r5, #8
 80115f0:	2d0c      	cmp	r5, #12
 80115f2:	bf38      	it	cc
 80115f4:	250c      	movcc	r5, #12
 80115f6:	2d00      	cmp	r5, #0
 80115f8:	4607      	mov	r7, r0
 80115fa:	db01      	blt.n	8011600 <_malloc_r+0x1c>
 80115fc:	42a9      	cmp	r1, r5
 80115fe:	d905      	bls.n	801160c <_malloc_r+0x28>
 8011600:	230c      	movs	r3, #12
 8011602:	603b      	str	r3, [r7, #0]
 8011604:	2600      	movs	r6, #0
 8011606:	4630      	mov	r0, r6
 8011608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801160c:	4e2e      	ldr	r6, [pc, #184]	; (80116c8 <_malloc_r+0xe4>)
 801160e:	f000 f88d 	bl	801172c <__malloc_lock>
 8011612:	6833      	ldr	r3, [r6, #0]
 8011614:	461c      	mov	r4, r3
 8011616:	bb34      	cbnz	r4, 8011666 <_malloc_r+0x82>
 8011618:	4629      	mov	r1, r5
 801161a:	4638      	mov	r0, r7
 801161c:	f7ff ffc2 	bl	80115a4 <sbrk_aligned>
 8011620:	1c43      	adds	r3, r0, #1
 8011622:	4604      	mov	r4, r0
 8011624:	d14d      	bne.n	80116c2 <_malloc_r+0xde>
 8011626:	6834      	ldr	r4, [r6, #0]
 8011628:	4626      	mov	r6, r4
 801162a:	2e00      	cmp	r6, #0
 801162c:	d140      	bne.n	80116b0 <_malloc_r+0xcc>
 801162e:	6823      	ldr	r3, [r4, #0]
 8011630:	4631      	mov	r1, r6
 8011632:	4638      	mov	r0, r7
 8011634:	eb04 0803 	add.w	r8, r4, r3
 8011638:	f000 f848 	bl	80116cc <_sbrk_r>
 801163c:	4580      	cmp	r8, r0
 801163e:	d13a      	bne.n	80116b6 <_malloc_r+0xd2>
 8011640:	6821      	ldr	r1, [r4, #0]
 8011642:	3503      	adds	r5, #3
 8011644:	1a6d      	subs	r5, r5, r1
 8011646:	f025 0503 	bic.w	r5, r5, #3
 801164a:	3508      	adds	r5, #8
 801164c:	2d0c      	cmp	r5, #12
 801164e:	bf38      	it	cc
 8011650:	250c      	movcc	r5, #12
 8011652:	4629      	mov	r1, r5
 8011654:	4638      	mov	r0, r7
 8011656:	f7ff ffa5 	bl	80115a4 <sbrk_aligned>
 801165a:	3001      	adds	r0, #1
 801165c:	d02b      	beq.n	80116b6 <_malloc_r+0xd2>
 801165e:	6823      	ldr	r3, [r4, #0]
 8011660:	442b      	add	r3, r5
 8011662:	6023      	str	r3, [r4, #0]
 8011664:	e00e      	b.n	8011684 <_malloc_r+0xa0>
 8011666:	6822      	ldr	r2, [r4, #0]
 8011668:	1b52      	subs	r2, r2, r5
 801166a:	d41e      	bmi.n	80116aa <_malloc_r+0xc6>
 801166c:	2a0b      	cmp	r2, #11
 801166e:	d916      	bls.n	801169e <_malloc_r+0xba>
 8011670:	1961      	adds	r1, r4, r5
 8011672:	42a3      	cmp	r3, r4
 8011674:	6025      	str	r5, [r4, #0]
 8011676:	bf18      	it	ne
 8011678:	6059      	strne	r1, [r3, #4]
 801167a:	6863      	ldr	r3, [r4, #4]
 801167c:	bf08      	it	eq
 801167e:	6031      	streq	r1, [r6, #0]
 8011680:	5162      	str	r2, [r4, r5]
 8011682:	604b      	str	r3, [r1, #4]
 8011684:	4638      	mov	r0, r7
 8011686:	f104 060b 	add.w	r6, r4, #11
 801168a:	f000 f855 	bl	8011738 <__malloc_unlock>
 801168e:	f026 0607 	bic.w	r6, r6, #7
 8011692:	1d23      	adds	r3, r4, #4
 8011694:	1af2      	subs	r2, r6, r3
 8011696:	d0b6      	beq.n	8011606 <_malloc_r+0x22>
 8011698:	1b9b      	subs	r3, r3, r6
 801169a:	50a3      	str	r3, [r4, r2]
 801169c:	e7b3      	b.n	8011606 <_malloc_r+0x22>
 801169e:	6862      	ldr	r2, [r4, #4]
 80116a0:	42a3      	cmp	r3, r4
 80116a2:	bf0c      	ite	eq
 80116a4:	6032      	streq	r2, [r6, #0]
 80116a6:	605a      	strne	r2, [r3, #4]
 80116a8:	e7ec      	b.n	8011684 <_malloc_r+0xa0>
 80116aa:	4623      	mov	r3, r4
 80116ac:	6864      	ldr	r4, [r4, #4]
 80116ae:	e7b2      	b.n	8011616 <_malloc_r+0x32>
 80116b0:	4634      	mov	r4, r6
 80116b2:	6876      	ldr	r6, [r6, #4]
 80116b4:	e7b9      	b.n	801162a <_malloc_r+0x46>
 80116b6:	230c      	movs	r3, #12
 80116b8:	603b      	str	r3, [r7, #0]
 80116ba:	4638      	mov	r0, r7
 80116bc:	f000 f83c 	bl	8011738 <__malloc_unlock>
 80116c0:	e7a1      	b.n	8011606 <_malloc_r+0x22>
 80116c2:	6025      	str	r5, [r4, #0]
 80116c4:	e7de      	b.n	8011684 <_malloc_r+0xa0>
 80116c6:	bf00      	nop
 80116c8:	20003564 	.word	0x20003564

080116cc <_sbrk_r>:
 80116cc:	b538      	push	{r3, r4, r5, lr}
 80116ce:	4d06      	ldr	r5, [pc, #24]	; (80116e8 <_sbrk_r+0x1c>)
 80116d0:	2300      	movs	r3, #0
 80116d2:	4604      	mov	r4, r0
 80116d4:	4608      	mov	r0, r1
 80116d6:	602b      	str	r3, [r5, #0]
 80116d8:	f7f2 fa38 	bl	8003b4c <_sbrk>
 80116dc:	1c43      	adds	r3, r0, #1
 80116de:	d102      	bne.n	80116e6 <_sbrk_r+0x1a>
 80116e0:	682b      	ldr	r3, [r5, #0]
 80116e2:	b103      	cbz	r3, 80116e6 <_sbrk_r+0x1a>
 80116e4:	6023      	str	r3, [r4, #0]
 80116e6:	bd38      	pop	{r3, r4, r5, pc}
 80116e8:	2000356c 	.word	0x2000356c

080116ec <siprintf>:
 80116ec:	b40e      	push	{r1, r2, r3}
 80116ee:	b500      	push	{lr}
 80116f0:	b09c      	sub	sp, #112	; 0x70
 80116f2:	ab1d      	add	r3, sp, #116	; 0x74
 80116f4:	9002      	str	r0, [sp, #8]
 80116f6:	9006      	str	r0, [sp, #24]
 80116f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80116fc:	4809      	ldr	r0, [pc, #36]	; (8011724 <siprintf+0x38>)
 80116fe:	9107      	str	r1, [sp, #28]
 8011700:	9104      	str	r1, [sp, #16]
 8011702:	4909      	ldr	r1, [pc, #36]	; (8011728 <siprintf+0x3c>)
 8011704:	f853 2b04 	ldr.w	r2, [r3], #4
 8011708:	9105      	str	r1, [sp, #20]
 801170a:	6800      	ldr	r0, [r0, #0]
 801170c:	9301      	str	r3, [sp, #4]
 801170e:	a902      	add	r1, sp, #8
 8011710:	f000 f874 	bl	80117fc <_svfiprintf_r>
 8011714:	9b02      	ldr	r3, [sp, #8]
 8011716:	2200      	movs	r2, #0
 8011718:	701a      	strb	r2, [r3, #0]
 801171a:	b01c      	add	sp, #112	; 0x70
 801171c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011720:	b003      	add	sp, #12
 8011722:	4770      	bx	lr
 8011724:	20000044 	.word	0x20000044
 8011728:	ffff0208 	.word	0xffff0208

0801172c <__malloc_lock>:
 801172c:	4801      	ldr	r0, [pc, #4]	; (8011734 <__malloc_lock+0x8>)
 801172e:	f000 baf9 	b.w	8011d24 <__retarget_lock_acquire_recursive>
 8011732:	bf00      	nop
 8011734:	20003570 	.word	0x20003570

08011738 <__malloc_unlock>:
 8011738:	4801      	ldr	r0, [pc, #4]	; (8011740 <__malloc_unlock+0x8>)
 801173a:	f000 baf4 	b.w	8011d26 <__retarget_lock_release_recursive>
 801173e:	bf00      	nop
 8011740:	20003570 	.word	0x20003570

08011744 <__ssputs_r>:
 8011744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011748:	688e      	ldr	r6, [r1, #8]
 801174a:	429e      	cmp	r6, r3
 801174c:	4682      	mov	sl, r0
 801174e:	460c      	mov	r4, r1
 8011750:	4690      	mov	r8, r2
 8011752:	461f      	mov	r7, r3
 8011754:	d838      	bhi.n	80117c8 <__ssputs_r+0x84>
 8011756:	898a      	ldrh	r2, [r1, #12]
 8011758:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801175c:	d032      	beq.n	80117c4 <__ssputs_r+0x80>
 801175e:	6825      	ldr	r5, [r4, #0]
 8011760:	6909      	ldr	r1, [r1, #16]
 8011762:	eba5 0901 	sub.w	r9, r5, r1
 8011766:	6965      	ldr	r5, [r4, #20]
 8011768:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801176c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011770:	3301      	adds	r3, #1
 8011772:	444b      	add	r3, r9
 8011774:	106d      	asrs	r5, r5, #1
 8011776:	429d      	cmp	r5, r3
 8011778:	bf38      	it	cc
 801177a:	461d      	movcc	r5, r3
 801177c:	0553      	lsls	r3, r2, #21
 801177e:	d531      	bpl.n	80117e4 <__ssputs_r+0xa0>
 8011780:	4629      	mov	r1, r5
 8011782:	f7ff ff2f 	bl	80115e4 <_malloc_r>
 8011786:	4606      	mov	r6, r0
 8011788:	b950      	cbnz	r0, 80117a0 <__ssputs_r+0x5c>
 801178a:	230c      	movs	r3, #12
 801178c:	f8ca 3000 	str.w	r3, [sl]
 8011790:	89a3      	ldrh	r3, [r4, #12]
 8011792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011796:	81a3      	strh	r3, [r4, #12]
 8011798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801179c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117a0:	6921      	ldr	r1, [r4, #16]
 80117a2:	464a      	mov	r2, r9
 80117a4:	f000 fac0 	bl	8011d28 <memcpy>
 80117a8:	89a3      	ldrh	r3, [r4, #12]
 80117aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80117ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117b2:	81a3      	strh	r3, [r4, #12]
 80117b4:	6126      	str	r6, [r4, #16]
 80117b6:	6165      	str	r5, [r4, #20]
 80117b8:	444e      	add	r6, r9
 80117ba:	eba5 0509 	sub.w	r5, r5, r9
 80117be:	6026      	str	r6, [r4, #0]
 80117c0:	60a5      	str	r5, [r4, #8]
 80117c2:	463e      	mov	r6, r7
 80117c4:	42be      	cmp	r6, r7
 80117c6:	d900      	bls.n	80117ca <__ssputs_r+0x86>
 80117c8:	463e      	mov	r6, r7
 80117ca:	6820      	ldr	r0, [r4, #0]
 80117cc:	4632      	mov	r2, r6
 80117ce:	4641      	mov	r1, r8
 80117d0:	f000 fab8 	bl	8011d44 <memmove>
 80117d4:	68a3      	ldr	r3, [r4, #8]
 80117d6:	1b9b      	subs	r3, r3, r6
 80117d8:	60a3      	str	r3, [r4, #8]
 80117da:	6823      	ldr	r3, [r4, #0]
 80117dc:	4433      	add	r3, r6
 80117de:	6023      	str	r3, [r4, #0]
 80117e0:	2000      	movs	r0, #0
 80117e2:	e7db      	b.n	801179c <__ssputs_r+0x58>
 80117e4:	462a      	mov	r2, r5
 80117e6:	f000 fac7 	bl	8011d78 <_realloc_r>
 80117ea:	4606      	mov	r6, r0
 80117ec:	2800      	cmp	r0, #0
 80117ee:	d1e1      	bne.n	80117b4 <__ssputs_r+0x70>
 80117f0:	6921      	ldr	r1, [r4, #16]
 80117f2:	4650      	mov	r0, sl
 80117f4:	f7ff fe8a 	bl	801150c <_free_r>
 80117f8:	e7c7      	b.n	801178a <__ssputs_r+0x46>
	...

080117fc <_svfiprintf_r>:
 80117fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011800:	4698      	mov	r8, r3
 8011802:	898b      	ldrh	r3, [r1, #12]
 8011804:	061b      	lsls	r3, r3, #24
 8011806:	b09d      	sub	sp, #116	; 0x74
 8011808:	4607      	mov	r7, r0
 801180a:	460d      	mov	r5, r1
 801180c:	4614      	mov	r4, r2
 801180e:	d50e      	bpl.n	801182e <_svfiprintf_r+0x32>
 8011810:	690b      	ldr	r3, [r1, #16]
 8011812:	b963      	cbnz	r3, 801182e <_svfiprintf_r+0x32>
 8011814:	2140      	movs	r1, #64	; 0x40
 8011816:	f7ff fee5 	bl	80115e4 <_malloc_r>
 801181a:	6028      	str	r0, [r5, #0]
 801181c:	6128      	str	r0, [r5, #16]
 801181e:	b920      	cbnz	r0, 801182a <_svfiprintf_r+0x2e>
 8011820:	230c      	movs	r3, #12
 8011822:	603b      	str	r3, [r7, #0]
 8011824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011828:	e0d1      	b.n	80119ce <_svfiprintf_r+0x1d2>
 801182a:	2340      	movs	r3, #64	; 0x40
 801182c:	616b      	str	r3, [r5, #20]
 801182e:	2300      	movs	r3, #0
 8011830:	9309      	str	r3, [sp, #36]	; 0x24
 8011832:	2320      	movs	r3, #32
 8011834:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011838:	f8cd 800c 	str.w	r8, [sp, #12]
 801183c:	2330      	movs	r3, #48	; 0x30
 801183e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80119e8 <_svfiprintf_r+0x1ec>
 8011842:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011846:	f04f 0901 	mov.w	r9, #1
 801184a:	4623      	mov	r3, r4
 801184c:	469a      	mov	sl, r3
 801184e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011852:	b10a      	cbz	r2, 8011858 <_svfiprintf_r+0x5c>
 8011854:	2a25      	cmp	r2, #37	; 0x25
 8011856:	d1f9      	bne.n	801184c <_svfiprintf_r+0x50>
 8011858:	ebba 0b04 	subs.w	fp, sl, r4
 801185c:	d00b      	beq.n	8011876 <_svfiprintf_r+0x7a>
 801185e:	465b      	mov	r3, fp
 8011860:	4622      	mov	r2, r4
 8011862:	4629      	mov	r1, r5
 8011864:	4638      	mov	r0, r7
 8011866:	f7ff ff6d 	bl	8011744 <__ssputs_r>
 801186a:	3001      	adds	r0, #1
 801186c:	f000 80aa 	beq.w	80119c4 <_svfiprintf_r+0x1c8>
 8011870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011872:	445a      	add	r2, fp
 8011874:	9209      	str	r2, [sp, #36]	; 0x24
 8011876:	f89a 3000 	ldrb.w	r3, [sl]
 801187a:	2b00      	cmp	r3, #0
 801187c:	f000 80a2 	beq.w	80119c4 <_svfiprintf_r+0x1c8>
 8011880:	2300      	movs	r3, #0
 8011882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801188a:	f10a 0a01 	add.w	sl, sl, #1
 801188e:	9304      	str	r3, [sp, #16]
 8011890:	9307      	str	r3, [sp, #28]
 8011892:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011896:	931a      	str	r3, [sp, #104]	; 0x68
 8011898:	4654      	mov	r4, sl
 801189a:	2205      	movs	r2, #5
 801189c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118a0:	4851      	ldr	r0, [pc, #324]	; (80119e8 <_svfiprintf_r+0x1ec>)
 80118a2:	f7ee fc9d 	bl	80001e0 <memchr>
 80118a6:	9a04      	ldr	r2, [sp, #16]
 80118a8:	b9d8      	cbnz	r0, 80118e2 <_svfiprintf_r+0xe6>
 80118aa:	06d0      	lsls	r0, r2, #27
 80118ac:	bf44      	itt	mi
 80118ae:	2320      	movmi	r3, #32
 80118b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80118b4:	0711      	lsls	r1, r2, #28
 80118b6:	bf44      	itt	mi
 80118b8:	232b      	movmi	r3, #43	; 0x2b
 80118ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80118be:	f89a 3000 	ldrb.w	r3, [sl]
 80118c2:	2b2a      	cmp	r3, #42	; 0x2a
 80118c4:	d015      	beq.n	80118f2 <_svfiprintf_r+0xf6>
 80118c6:	9a07      	ldr	r2, [sp, #28]
 80118c8:	4654      	mov	r4, sl
 80118ca:	2000      	movs	r0, #0
 80118cc:	f04f 0c0a 	mov.w	ip, #10
 80118d0:	4621      	mov	r1, r4
 80118d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80118d6:	3b30      	subs	r3, #48	; 0x30
 80118d8:	2b09      	cmp	r3, #9
 80118da:	d94e      	bls.n	801197a <_svfiprintf_r+0x17e>
 80118dc:	b1b0      	cbz	r0, 801190c <_svfiprintf_r+0x110>
 80118de:	9207      	str	r2, [sp, #28]
 80118e0:	e014      	b.n	801190c <_svfiprintf_r+0x110>
 80118e2:	eba0 0308 	sub.w	r3, r0, r8
 80118e6:	fa09 f303 	lsl.w	r3, r9, r3
 80118ea:	4313      	orrs	r3, r2
 80118ec:	9304      	str	r3, [sp, #16]
 80118ee:	46a2      	mov	sl, r4
 80118f0:	e7d2      	b.n	8011898 <_svfiprintf_r+0x9c>
 80118f2:	9b03      	ldr	r3, [sp, #12]
 80118f4:	1d19      	adds	r1, r3, #4
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	9103      	str	r1, [sp, #12]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	bfbb      	ittet	lt
 80118fe:	425b      	neglt	r3, r3
 8011900:	f042 0202 	orrlt.w	r2, r2, #2
 8011904:	9307      	strge	r3, [sp, #28]
 8011906:	9307      	strlt	r3, [sp, #28]
 8011908:	bfb8      	it	lt
 801190a:	9204      	strlt	r2, [sp, #16]
 801190c:	7823      	ldrb	r3, [r4, #0]
 801190e:	2b2e      	cmp	r3, #46	; 0x2e
 8011910:	d10c      	bne.n	801192c <_svfiprintf_r+0x130>
 8011912:	7863      	ldrb	r3, [r4, #1]
 8011914:	2b2a      	cmp	r3, #42	; 0x2a
 8011916:	d135      	bne.n	8011984 <_svfiprintf_r+0x188>
 8011918:	9b03      	ldr	r3, [sp, #12]
 801191a:	1d1a      	adds	r2, r3, #4
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	9203      	str	r2, [sp, #12]
 8011920:	2b00      	cmp	r3, #0
 8011922:	bfb8      	it	lt
 8011924:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011928:	3402      	adds	r4, #2
 801192a:	9305      	str	r3, [sp, #20]
 801192c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80119f8 <_svfiprintf_r+0x1fc>
 8011930:	7821      	ldrb	r1, [r4, #0]
 8011932:	2203      	movs	r2, #3
 8011934:	4650      	mov	r0, sl
 8011936:	f7ee fc53 	bl	80001e0 <memchr>
 801193a:	b140      	cbz	r0, 801194e <_svfiprintf_r+0x152>
 801193c:	2340      	movs	r3, #64	; 0x40
 801193e:	eba0 000a 	sub.w	r0, r0, sl
 8011942:	fa03 f000 	lsl.w	r0, r3, r0
 8011946:	9b04      	ldr	r3, [sp, #16]
 8011948:	4303      	orrs	r3, r0
 801194a:	3401      	adds	r4, #1
 801194c:	9304      	str	r3, [sp, #16]
 801194e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011952:	4826      	ldr	r0, [pc, #152]	; (80119ec <_svfiprintf_r+0x1f0>)
 8011954:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011958:	2206      	movs	r2, #6
 801195a:	f7ee fc41 	bl	80001e0 <memchr>
 801195e:	2800      	cmp	r0, #0
 8011960:	d038      	beq.n	80119d4 <_svfiprintf_r+0x1d8>
 8011962:	4b23      	ldr	r3, [pc, #140]	; (80119f0 <_svfiprintf_r+0x1f4>)
 8011964:	bb1b      	cbnz	r3, 80119ae <_svfiprintf_r+0x1b2>
 8011966:	9b03      	ldr	r3, [sp, #12]
 8011968:	3307      	adds	r3, #7
 801196a:	f023 0307 	bic.w	r3, r3, #7
 801196e:	3308      	adds	r3, #8
 8011970:	9303      	str	r3, [sp, #12]
 8011972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011974:	4433      	add	r3, r6
 8011976:	9309      	str	r3, [sp, #36]	; 0x24
 8011978:	e767      	b.n	801184a <_svfiprintf_r+0x4e>
 801197a:	fb0c 3202 	mla	r2, ip, r2, r3
 801197e:	460c      	mov	r4, r1
 8011980:	2001      	movs	r0, #1
 8011982:	e7a5      	b.n	80118d0 <_svfiprintf_r+0xd4>
 8011984:	2300      	movs	r3, #0
 8011986:	3401      	adds	r4, #1
 8011988:	9305      	str	r3, [sp, #20]
 801198a:	4619      	mov	r1, r3
 801198c:	f04f 0c0a 	mov.w	ip, #10
 8011990:	4620      	mov	r0, r4
 8011992:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011996:	3a30      	subs	r2, #48	; 0x30
 8011998:	2a09      	cmp	r2, #9
 801199a:	d903      	bls.n	80119a4 <_svfiprintf_r+0x1a8>
 801199c:	2b00      	cmp	r3, #0
 801199e:	d0c5      	beq.n	801192c <_svfiprintf_r+0x130>
 80119a0:	9105      	str	r1, [sp, #20]
 80119a2:	e7c3      	b.n	801192c <_svfiprintf_r+0x130>
 80119a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80119a8:	4604      	mov	r4, r0
 80119aa:	2301      	movs	r3, #1
 80119ac:	e7f0      	b.n	8011990 <_svfiprintf_r+0x194>
 80119ae:	ab03      	add	r3, sp, #12
 80119b0:	9300      	str	r3, [sp, #0]
 80119b2:	462a      	mov	r2, r5
 80119b4:	4b0f      	ldr	r3, [pc, #60]	; (80119f4 <_svfiprintf_r+0x1f8>)
 80119b6:	a904      	add	r1, sp, #16
 80119b8:	4638      	mov	r0, r7
 80119ba:	f3af 8000 	nop.w
 80119be:	1c42      	adds	r2, r0, #1
 80119c0:	4606      	mov	r6, r0
 80119c2:	d1d6      	bne.n	8011972 <_svfiprintf_r+0x176>
 80119c4:	89ab      	ldrh	r3, [r5, #12]
 80119c6:	065b      	lsls	r3, r3, #25
 80119c8:	f53f af2c 	bmi.w	8011824 <_svfiprintf_r+0x28>
 80119cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80119ce:	b01d      	add	sp, #116	; 0x74
 80119d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119d4:	ab03      	add	r3, sp, #12
 80119d6:	9300      	str	r3, [sp, #0]
 80119d8:	462a      	mov	r2, r5
 80119da:	4b06      	ldr	r3, [pc, #24]	; (80119f4 <_svfiprintf_r+0x1f8>)
 80119dc:	a904      	add	r1, sp, #16
 80119de:	4638      	mov	r0, r7
 80119e0:	f000 f87a 	bl	8011ad8 <_printf_i>
 80119e4:	e7eb      	b.n	80119be <_svfiprintf_r+0x1c2>
 80119e6:	bf00      	nop
 80119e8:	080123d4 	.word	0x080123d4
 80119ec:	080123de 	.word	0x080123de
 80119f0:	00000000 	.word	0x00000000
 80119f4:	08011745 	.word	0x08011745
 80119f8:	080123da 	.word	0x080123da

080119fc <_printf_common>:
 80119fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a00:	4616      	mov	r6, r2
 8011a02:	4699      	mov	r9, r3
 8011a04:	688a      	ldr	r2, [r1, #8]
 8011a06:	690b      	ldr	r3, [r1, #16]
 8011a08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011a0c:	4293      	cmp	r3, r2
 8011a0e:	bfb8      	it	lt
 8011a10:	4613      	movlt	r3, r2
 8011a12:	6033      	str	r3, [r6, #0]
 8011a14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011a18:	4607      	mov	r7, r0
 8011a1a:	460c      	mov	r4, r1
 8011a1c:	b10a      	cbz	r2, 8011a22 <_printf_common+0x26>
 8011a1e:	3301      	adds	r3, #1
 8011a20:	6033      	str	r3, [r6, #0]
 8011a22:	6823      	ldr	r3, [r4, #0]
 8011a24:	0699      	lsls	r1, r3, #26
 8011a26:	bf42      	ittt	mi
 8011a28:	6833      	ldrmi	r3, [r6, #0]
 8011a2a:	3302      	addmi	r3, #2
 8011a2c:	6033      	strmi	r3, [r6, #0]
 8011a2e:	6825      	ldr	r5, [r4, #0]
 8011a30:	f015 0506 	ands.w	r5, r5, #6
 8011a34:	d106      	bne.n	8011a44 <_printf_common+0x48>
 8011a36:	f104 0a19 	add.w	sl, r4, #25
 8011a3a:	68e3      	ldr	r3, [r4, #12]
 8011a3c:	6832      	ldr	r2, [r6, #0]
 8011a3e:	1a9b      	subs	r3, r3, r2
 8011a40:	42ab      	cmp	r3, r5
 8011a42:	dc26      	bgt.n	8011a92 <_printf_common+0x96>
 8011a44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011a48:	1e13      	subs	r3, r2, #0
 8011a4a:	6822      	ldr	r2, [r4, #0]
 8011a4c:	bf18      	it	ne
 8011a4e:	2301      	movne	r3, #1
 8011a50:	0692      	lsls	r2, r2, #26
 8011a52:	d42b      	bmi.n	8011aac <_printf_common+0xb0>
 8011a54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011a58:	4649      	mov	r1, r9
 8011a5a:	4638      	mov	r0, r7
 8011a5c:	47c0      	blx	r8
 8011a5e:	3001      	adds	r0, #1
 8011a60:	d01e      	beq.n	8011aa0 <_printf_common+0xa4>
 8011a62:	6823      	ldr	r3, [r4, #0]
 8011a64:	68e5      	ldr	r5, [r4, #12]
 8011a66:	6832      	ldr	r2, [r6, #0]
 8011a68:	f003 0306 	and.w	r3, r3, #6
 8011a6c:	2b04      	cmp	r3, #4
 8011a6e:	bf08      	it	eq
 8011a70:	1aad      	subeq	r5, r5, r2
 8011a72:	68a3      	ldr	r3, [r4, #8]
 8011a74:	6922      	ldr	r2, [r4, #16]
 8011a76:	bf0c      	ite	eq
 8011a78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011a7c:	2500      	movne	r5, #0
 8011a7e:	4293      	cmp	r3, r2
 8011a80:	bfc4      	itt	gt
 8011a82:	1a9b      	subgt	r3, r3, r2
 8011a84:	18ed      	addgt	r5, r5, r3
 8011a86:	2600      	movs	r6, #0
 8011a88:	341a      	adds	r4, #26
 8011a8a:	42b5      	cmp	r5, r6
 8011a8c:	d11a      	bne.n	8011ac4 <_printf_common+0xc8>
 8011a8e:	2000      	movs	r0, #0
 8011a90:	e008      	b.n	8011aa4 <_printf_common+0xa8>
 8011a92:	2301      	movs	r3, #1
 8011a94:	4652      	mov	r2, sl
 8011a96:	4649      	mov	r1, r9
 8011a98:	4638      	mov	r0, r7
 8011a9a:	47c0      	blx	r8
 8011a9c:	3001      	adds	r0, #1
 8011a9e:	d103      	bne.n	8011aa8 <_printf_common+0xac>
 8011aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011aa8:	3501      	adds	r5, #1
 8011aaa:	e7c6      	b.n	8011a3a <_printf_common+0x3e>
 8011aac:	18e1      	adds	r1, r4, r3
 8011aae:	1c5a      	adds	r2, r3, #1
 8011ab0:	2030      	movs	r0, #48	; 0x30
 8011ab2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011ab6:	4422      	add	r2, r4
 8011ab8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011abc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011ac0:	3302      	adds	r3, #2
 8011ac2:	e7c7      	b.n	8011a54 <_printf_common+0x58>
 8011ac4:	2301      	movs	r3, #1
 8011ac6:	4622      	mov	r2, r4
 8011ac8:	4649      	mov	r1, r9
 8011aca:	4638      	mov	r0, r7
 8011acc:	47c0      	blx	r8
 8011ace:	3001      	adds	r0, #1
 8011ad0:	d0e6      	beq.n	8011aa0 <_printf_common+0xa4>
 8011ad2:	3601      	adds	r6, #1
 8011ad4:	e7d9      	b.n	8011a8a <_printf_common+0x8e>
	...

08011ad8 <_printf_i>:
 8011ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011adc:	7e0f      	ldrb	r7, [r1, #24]
 8011ade:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011ae0:	2f78      	cmp	r7, #120	; 0x78
 8011ae2:	4691      	mov	r9, r2
 8011ae4:	4680      	mov	r8, r0
 8011ae6:	460c      	mov	r4, r1
 8011ae8:	469a      	mov	sl, r3
 8011aea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011aee:	d807      	bhi.n	8011b00 <_printf_i+0x28>
 8011af0:	2f62      	cmp	r7, #98	; 0x62
 8011af2:	d80a      	bhi.n	8011b0a <_printf_i+0x32>
 8011af4:	2f00      	cmp	r7, #0
 8011af6:	f000 80d8 	beq.w	8011caa <_printf_i+0x1d2>
 8011afa:	2f58      	cmp	r7, #88	; 0x58
 8011afc:	f000 80a3 	beq.w	8011c46 <_printf_i+0x16e>
 8011b00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011b04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011b08:	e03a      	b.n	8011b80 <_printf_i+0xa8>
 8011b0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011b0e:	2b15      	cmp	r3, #21
 8011b10:	d8f6      	bhi.n	8011b00 <_printf_i+0x28>
 8011b12:	a101      	add	r1, pc, #4	; (adr r1, 8011b18 <_printf_i+0x40>)
 8011b14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011b18:	08011b71 	.word	0x08011b71
 8011b1c:	08011b85 	.word	0x08011b85
 8011b20:	08011b01 	.word	0x08011b01
 8011b24:	08011b01 	.word	0x08011b01
 8011b28:	08011b01 	.word	0x08011b01
 8011b2c:	08011b01 	.word	0x08011b01
 8011b30:	08011b85 	.word	0x08011b85
 8011b34:	08011b01 	.word	0x08011b01
 8011b38:	08011b01 	.word	0x08011b01
 8011b3c:	08011b01 	.word	0x08011b01
 8011b40:	08011b01 	.word	0x08011b01
 8011b44:	08011c91 	.word	0x08011c91
 8011b48:	08011bb5 	.word	0x08011bb5
 8011b4c:	08011c73 	.word	0x08011c73
 8011b50:	08011b01 	.word	0x08011b01
 8011b54:	08011b01 	.word	0x08011b01
 8011b58:	08011cb3 	.word	0x08011cb3
 8011b5c:	08011b01 	.word	0x08011b01
 8011b60:	08011bb5 	.word	0x08011bb5
 8011b64:	08011b01 	.word	0x08011b01
 8011b68:	08011b01 	.word	0x08011b01
 8011b6c:	08011c7b 	.word	0x08011c7b
 8011b70:	682b      	ldr	r3, [r5, #0]
 8011b72:	1d1a      	adds	r2, r3, #4
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	602a      	str	r2, [r5, #0]
 8011b78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011b7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011b80:	2301      	movs	r3, #1
 8011b82:	e0a3      	b.n	8011ccc <_printf_i+0x1f4>
 8011b84:	6820      	ldr	r0, [r4, #0]
 8011b86:	6829      	ldr	r1, [r5, #0]
 8011b88:	0606      	lsls	r6, r0, #24
 8011b8a:	f101 0304 	add.w	r3, r1, #4
 8011b8e:	d50a      	bpl.n	8011ba6 <_printf_i+0xce>
 8011b90:	680e      	ldr	r6, [r1, #0]
 8011b92:	602b      	str	r3, [r5, #0]
 8011b94:	2e00      	cmp	r6, #0
 8011b96:	da03      	bge.n	8011ba0 <_printf_i+0xc8>
 8011b98:	232d      	movs	r3, #45	; 0x2d
 8011b9a:	4276      	negs	r6, r6
 8011b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ba0:	485e      	ldr	r0, [pc, #376]	; (8011d1c <_printf_i+0x244>)
 8011ba2:	230a      	movs	r3, #10
 8011ba4:	e019      	b.n	8011bda <_printf_i+0x102>
 8011ba6:	680e      	ldr	r6, [r1, #0]
 8011ba8:	602b      	str	r3, [r5, #0]
 8011baa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011bae:	bf18      	it	ne
 8011bb0:	b236      	sxthne	r6, r6
 8011bb2:	e7ef      	b.n	8011b94 <_printf_i+0xbc>
 8011bb4:	682b      	ldr	r3, [r5, #0]
 8011bb6:	6820      	ldr	r0, [r4, #0]
 8011bb8:	1d19      	adds	r1, r3, #4
 8011bba:	6029      	str	r1, [r5, #0]
 8011bbc:	0601      	lsls	r1, r0, #24
 8011bbe:	d501      	bpl.n	8011bc4 <_printf_i+0xec>
 8011bc0:	681e      	ldr	r6, [r3, #0]
 8011bc2:	e002      	b.n	8011bca <_printf_i+0xf2>
 8011bc4:	0646      	lsls	r6, r0, #25
 8011bc6:	d5fb      	bpl.n	8011bc0 <_printf_i+0xe8>
 8011bc8:	881e      	ldrh	r6, [r3, #0]
 8011bca:	4854      	ldr	r0, [pc, #336]	; (8011d1c <_printf_i+0x244>)
 8011bcc:	2f6f      	cmp	r7, #111	; 0x6f
 8011bce:	bf0c      	ite	eq
 8011bd0:	2308      	moveq	r3, #8
 8011bd2:	230a      	movne	r3, #10
 8011bd4:	2100      	movs	r1, #0
 8011bd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011bda:	6865      	ldr	r5, [r4, #4]
 8011bdc:	60a5      	str	r5, [r4, #8]
 8011bde:	2d00      	cmp	r5, #0
 8011be0:	bfa2      	ittt	ge
 8011be2:	6821      	ldrge	r1, [r4, #0]
 8011be4:	f021 0104 	bicge.w	r1, r1, #4
 8011be8:	6021      	strge	r1, [r4, #0]
 8011bea:	b90e      	cbnz	r6, 8011bf0 <_printf_i+0x118>
 8011bec:	2d00      	cmp	r5, #0
 8011bee:	d04d      	beq.n	8011c8c <_printf_i+0x1b4>
 8011bf0:	4615      	mov	r5, r2
 8011bf2:	fbb6 f1f3 	udiv	r1, r6, r3
 8011bf6:	fb03 6711 	mls	r7, r3, r1, r6
 8011bfa:	5dc7      	ldrb	r7, [r0, r7]
 8011bfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011c00:	4637      	mov	r7, r6
 8011c02:	42bb      	cmp	r3, r7
 8011c04:	460e      	mov	r6, r1
 8011c06:	d9f4      	bls.n	8011bf2 <_printf_i+0x11a>
 8011c08:	2b08      	cmp	r3, #8
 8011c0a:	d10b      	bne.n	8011c24 <_printf_i+0x14c>
 8011c0c:	6823      	ldr	r3, [r4, #0]
 8011c0e:	07de      	lsls	r6, r3, #31
 8011c10:	d508      	bpl.n	8011c24 <_printf_i+0x14c>
 8011c12:	6923      	ldr	r3, [r4, #16]
 8011c14:	6861      	ldr	r1, [r4, #4]
 8011c16:	4299      	cmp	r1, r3
 8011c18:	bfde      	ittt	le
 8011c1a:	2330      	movle	r3, #48	; 0x30
 8011c1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011c20:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011c24:	1b52      	subs	r2, r2, r5
 8011c26:	6122      	str	r2, [r4, #16]
 8011c28:	f8cd a000 	str.w	sl, [sp]
 8011c2c:	464b      	mov	r3, r9
 8011c2e:	aa03      	add	r2, sp, #12
 8011c30:	4621      	mov	r1, r4
 8011c32:	4640      	mov	r0, r8
 8011c34:	f7ff fee2 	bl	80119fc <_printf_common>
 8011c38:	3001      	adds	r0, #1
 8011c3a:	d14c      	bne.n	8011cd6 <_printf_i+0x1fe>
 8011c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011c40:	b004      	add	sp, #16
 8011c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c46:	4835      	ldr	r0, [pc, #212]	; (8011d1c <_printf_i+0x244>)
 8011c48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011c4c:	6829      	ldr	r1, [r5, #0]
 8011c4e:	6823      	ldr	r3, [r4, #0]
 8011c50:	f851 6b04 	ldr.w	r6, [r1], #4
 8011c54:	6029      	str	r1, [r5, #0]
 8011c56:	061d      	lsls	r5, r3, #24
 8011c58:	d514      	bpl.n	8011c84 <_printf_i+0x1ac>
 8011c5a:	07df      	lsls	r7, r3, #31
 8011c5c:	bf44      	itt	mi
 8011c5e:	f043 0320 	orrmi.w	r3, r3, #32
 8011c62:	6023      	strmi	r3, [r4, #0]
 8011c64:	b91e      	cbnz	r6, 8011c6e <_printf_i+0x196>
 8011c66:	6823      	ldr	r3, [r4, #0]
 8011c68:	f023 0320 	bic.w	r3, r3, #32
 8011c6c:	6023      	str	r3, [r4, #0]
 8011c6e:	2310      	movs	r3, #16
 8011c70:	e7b0      	b.n	8011bd4 <_printf_i+0xfc>
 8011c72:	6823      	ldr	r3, [r4, #0]
 8011c74:	f043 0320 	orr.w	r3, r3, #32
 8011c78:	6023      	str	r3, [r4, #0]
 8011c7a:	2378      	movs	r3, #120	; 0x78
 8011c7c:	4828      	ldr	r0, [pc, #160]	; (8011d20 <_printf_i+0x248>)
 8011c7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011c82:	e7e3      	b.n	8011c4c <_printf_i+0x174>
 8011c84:	0659      	lsls	r1, r3, #25
 8011c86:	bf48      	it	mi
 8011c88:	b2b6      	uxthmi	r6, r6
 8011c8a:	e7e6      	b.n	8011c5a <_printf_i+0x182>
 8011c8c:	4615      	mov	r5, r2
 8011c8e:	e7bb      	b.n	8011c08 <_printf_i+0x130>
 8011c90:	682b      	ldr	r3, [r5, #0]
 8011c92:	6826      	ldr	r6, [r4, #0]
 8011c94:	6961      	ldr	r1, [r4, #20]
 8011c96:	1d18      	adds	r0, r3, #4
 8011c98:	6028      	str	r0, [r5, #0]
 8011c9a:	0635      	lsls	r5, r6, #24
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	d501      	bpl.n	8011ca4 <_printf_i+0x1cc>
 8011ca0:	6019      	str	r1, [r3, #0]
 8011ca2:	e002      	b.n	8011caa <_printf_i+0x1d2>
 8011ca4:	0670      	lsls	r0, r6, #25
 8011ca6:	d5fb      	bpl.n	8011ca0 <_printf_i+0x1c8>
 8011ca8:	8019      	strh	r1, [r3, #0]
 8011caa:	2300      	movs	r3, #0
 8011cac:	6123      	str	r3, [r4, #16]
 8011cae:	4615      	mov	r5, r2
 8011cb0:	e7ba      	b.n	8011c28 <_printf_i+0x150>
 8011cb2:	682b      	ldr	r3, [r5, #0]
 8011cb4:	1d1a      	adds	r2, r3, #4
 8011cb6:	602a      	str	r2, [r5, #0]
 8011cb8:	681d      	ldr	r5, [r3, #0]
 8011cba:	6862      	ldr	r2, [r4, #4]
 8011cbc:	2100      	movs	r1, #0
 8011cbe:	4628      	mov	r0, r5
 8011cc0:	f7ee fa8e 	bl	80001e0 <memchr>
 8011cc4:	b108      	cbz	r0, 8011cca <_printf_i+0x1f2>
 8011cc6:	1b40      	subs	r0, r0, r5
 8011cc8:	6060      	str	r0, [r4, #4]
 8011cca:	6863      	ldr	r3, [r4, #4]
 8011ccc:	6123      	str	r3, [r4, #16]
 8011cce:	2300      	movs	r3, #0
 8011cd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011cd4:	e7a8      	b.n	8011c28 <_printf_i+0x150>
 8011cd6:	6923      	ldr	r3, [r4, #16]
 8011cd8:	462a      	mov	r2, r5
 8011cda:	4649      	mov	r1, r9
 8011cdc:	4640      	mov	r0, r8
 8011cde:	47d0      	blx	sl
 8011ce0:	3001      	adds	r0, #1
 8011ce2:	d0ab      	beq.n	8011c3c <_printf_i+0x164>
 8011ce4:	6823      	ldr	r3, [r4, #0]
 8011ce6:	079b      	lsls	r3, r3, #30
 8011ce8:	d413      	bmi.n	8011d12 <_printf_i+0x23a>
 8011cea:	68e0      	ldr	r0, [r4, #12]
 8011cec:	9b03      	ldr	r3, [sp, #12]
 8011cee:	4298      	cmp	r0, r3
 8011cf0:	bfb8      	it	lt
 8011cf2:	4618      	movlt	r0, r3
 8011cf4:	e7a4      	b.n	8011c40 <_printf_i+0x168>
 8011cf6:	2301      	movs	r3, #1
 8011cf8:	4632      	mov	r2, r6
 8011cfa:	4649      	mov	r1, r9
 8011cfc:	4640      	mov	r0, r8
 8011cfe:	47d0      	blx	sl
 8011d00:	3001      	adds	r0, #1
 8011d02:	d09b      	beq.n	8011c3c <_printf_i+0x164>
 8011d04:	3501      	adds	r5, #1
 8011d06:	68e3      	ldr	r3, [r4, #12]
 8011d08:	9903      	ldr	r1, [sp, #12]
 8011d0a:	1a5b      	subs	r3, r3, r1
 8011d0c:	42ab      	cmp	r3, r5
 8011d0e:	dcf2      	bgt.n	8011cf6 <_printf_i+0x21e>
 8011d10:	e7eb      	b.n	8011cea <_printf_i+0x212>
 8011d12:	2500      	movs	r5, #0
 8011d14:	f104 0619 	add.w	r6, r4, #25
 8011d18:	e7f5      	b.n	8011d06 <_printf_i+0x22e>
 8011d1a:	bf00      	nop
 8011d1c:	080123e5 	.word	0x080123e5
 8011d20:	080123f6 	.word	0x080123f6

08011d24 <__retarget_lock_acquire_recursive>:
 8011d24:	4770      	bx	lr

08011d26 <__retarget_lock_release_recursive>:
 8011d26:	4770      	bx	lr

08011d28 <memcpy>:
 8011d28:	440a      	add	r2, r1
 8011d2a:	4291      	cmp	r1, r2
 8011d2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011d30:	d100      	bne.n	8011d34 <memcpy+0xc>
 8011d32:	4770      	bx	lr
 8011d34:	b510      	push	{r4, lr}
 8011d36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011d3e:	4291      	cmp	r1, r2
 8011d40:	d1f9      	bne.n	8011d36 <memcpy+0xe>
 8011d42:	bd10      	pop	{r4, pc}

08011d44 <memmove>:
 8011d44:	4288      	cmp	r0, r1
 8011d46:	b510      	push	{r4, lr}
 8011d48:	eb01 0402 	add.w	r4, r1, r2
 8011d4c:	d902      	bls.n	8011d54 <memmove+0x10>
 8011d4e:	4284      	cmp	r4, r0
 8011d50:	4623      	mov	r3, r4
 8011d52:	d807      	bhi.n	8011d64 <memmove+0x20>
 8011d54:	1e43      	subs	r3, r0, #1
 8011d56:	42a1      	cmp	r1, r4
 8011d58:	d008      	beq.n	8011d6c <memmove+0x28>
 8011d5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011d5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011d62:	e7f8      	b.n	8011d56 <memmove+0x12>
 8011d64:	4402      	add	r2, r0
 8011d66:	4601      	mov	r1, r0
 8011d68:	428a      	cmp	r2, r1
 8011d6a:	d100      	bne.n	8011d6e <memmove+0x2a>
 8011d6c:	bd10      	pop	{r4, pc}
 8011d6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011d72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011d76:	e7f7      	b.n	8011d68 <memmove+0x24>

08011d78 <_realloc_r>:
 8011d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d7c:	4680      	mov	r8, r0
 8011d7e:	4614      	mov	r4, r2
 8011d80:	460e      	mov	r6, r1
 8011d82:	b921      	cbnz	r1, 8011d8e <_realloc_r+0x16>
 8011d84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d88:	4611      	mov	r1, r2
 8011d8a:	f7ff bc2b 	b.w	80115e4 <_malloc_r>
 8011d8e:	b92a      	cbnz	r2, 8011d9c <_realloc_r+0x24>
 8011d90:	f7ff fbbc 	bl	801150c <_free_r>
 8011d94:	4625      	mov	r5, r4
 8011d96:	4628      	mov	r0, r5
 8011d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d9c:	f000 f81b 	bl	8011dd6 <_malloc_usable_size_r>
 8011da0:	4284      	cmp	r4, r0
 8011da2:	4607      	mov	r7, r0
 8011da4:	d802      	bhi.n	8011dac <_realloc_r+0x34>
 8011da6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011daa:	d812      	bhi.n	8011dd2 <_realloc_r+0x5a>
 8011dac:	4621      	mov	r1, r4
 8011dae:	4640      	mov	r0, r8
 8011db0:	f7ff fc18 	bl	80115e4 <_malloc_r>
 8011db4:	4605      	mov	r5, r0
 8011db6:	2800      	cmp	r0, #0
 8011db8:	d0ed      	beq.n	8011d96 <_realloc_r+0x1e>
 8011dba:	42bc      	cmp	r4, r7
 8011dbc:	4622      	mov	r2, r4
 8011dbe:	4631      	mov	r1, r6
 8011dc0:	bf28      	it	cs
 8011dc2:	463a      	movcs	r2, r7
 8011dc4:	f7ff ffb0 	bl	8011d28 <memcpy>
 8011dc8:	4631      	mov	r1, r6
 8011dca:	4640      	mov	r0, r8
 8011dcc:	f7ff fb9e 	bl	801150c <_free_r>
 8011dd0:	e7e1      	b.n	8011d96 <_realloc_r+0x1e>
 8011dd2:	4635      	mov	r5, r6
 8011dd4:	e7df      	b.n	8011d96 <_realloc_r+0x1e>

08011dd6 <_malloc_usable_size_r>:
 8011dd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011dda:	1f18      	subs	r0, r3, #4
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	bfbc      	itt	lt
 8011de0:	580b      	ldrlt	r3, [r1, r0]
 8011de2:	18c0      	addlt	r0, r0, r3
 8011de4:	4770      	bx	lr
	...

08011de8 <_init>:
 8011de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dea:	bf00      	nop
 8011dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011dee:	bc08      	pop	{r3}
 8011df0:	469e      	mov	lr, r3
 8011df2:	4770      	bx	lr

08011df4 <_fini>:
 8011df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011df6:	bf00      	nop
 8011df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011dfa:	bc08      	pop	{r3}
 8011dfc:	469e      	mov	lr, r3
 8011dfe:	4770      	bx	lr
