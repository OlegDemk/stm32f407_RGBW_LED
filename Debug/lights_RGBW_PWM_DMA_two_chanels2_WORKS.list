
lights_RGBW_PWM_DMA_two_chanels2_WORKS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d104  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800d294  0800d294  0001d294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d348  0800d348  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d348  0800d348  0001d348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d350  0800d350  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d350  0800d350  0001d350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d354  0800d354  0001d354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800d358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a8  2**0
                  CONTENTS
 10 .bss          00000ee4  200000a8  200000a8  000200a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000f8c  20000f8c  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d8c8  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004579  00000000  00000000  0003d9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001710  00000000  00000000  00041f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001558  00000000  00000000  00043630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000725f  00000000  00000000  00044b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001df06  00000000  00000000  0004bde7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3a9e  00000000  00000000  00069ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013d78b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006528  00000000  00000000  0013d7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d27c 	.word	0x0800d27c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800d27c 	.word	0x0800d27c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800089c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008a0:	f000 b974 	b.w	8000b8c <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468e      	mov	lr, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d14d      	bne.n	8000966 <__udivmoddi4+0xaa>
 80008ca:	428a      	cmp	r2, r1
 80008cc:	4694      	mov	ip, r2
 80008ce:	d969      	bls.n	80009a4 <__udivmoddi4+0xe8>
 80008d0:	fab2 f282 	clz	r2, r2
 80008d4:	b152      	cbz	r2, 80008ec <__udivmoddi4+0x30>
 80008d6:	fa01 f302 	lsl.w	r3, r1, r2
 80008da:	f1c2 0120 	rsb	r1, r2, #32
 80008de:	fa20 f101 	lsr.w	r1, r0, r1
 80008e2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008e6:	ea41 0e03 	orr.w	lr, r1, r3
 80008ea:	4094      	lsls	r4, r2
 80008ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f0:	0c21      	lsrs	r1, r4, #16
 80008f2:	fbbe f6f8 	udiv	r6, lr, r8
 80008f6:	fa1f f78c 	uxth.w	r7, ip
 80008fa:	fb08 e316 	mls	r3, r8, r6, lr
 80008fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000902:	fb06 f107 	mul.w	r1, r6, r7
 8000906:	4299      	cmp	r1, r3
 8000908:	d90a      	bls.n	8000920 <__udivmoddi4+0x64>
 800090a:	eb1c 0303 	adds.w	r3, ip, r3
 800090e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000912:	f080 811f 	bcs.w	8000b54 <__udivmoddi4+0x298>
 8000916:	4299      	cmp	r1, r3
 8000918:	f240 811c 	bls.w	8000b54 <__udivmoddi4+0x298>
 800091c:	3e02      	subs	r6, #2
 800091e:	4463      	add	r3, ip
 8000920:	1a5b      	subs	r3, r3, r1
 8000922:	b2a4      	uxth	r4, r4
 8000924:	fbb3 f0f8 	udiv	r0, r3, r8
 8000928:	fb08 3310 	mls	r3, r8, r0, r3
 800092c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000930:	fb00 f707 	mul.w	r7, r0, r7
 8000934:	42a7      	cmp	r7, r4
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x92>
 8000938:	eb1c 0404 	adds.w	r4, ip, r4
 800093c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000940:	f080 810a 	bcs.w	8000b58 <__udivmoddi4+0x29c>
 8000944:	42a7      	cmp	r7, r4
 8000946:	f240 8107 	bls.w	8000b58 <__udivmoddi4+0x29c>
 800094a:	4464      	add	r4, ip
 800094c:	3802      	subs	r0, #2
 800094e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000952:	1be4      	subs	r4, r4, r7
 8000954:	2600      	movs	r6, #0
 8000956:	b11d      	cbz	r5, 8000960 <__udivmoddi4+0xa4>
 8000958:	40d4      	lsrs	r4, r2
 800095a:	2300      	movs	r3, #0
 800095c:	e9c5 4300 	strd	r4, r3, [r5]
 8000960:	4631      	mov	r1, r6
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000966:	428b      	cmp	r3, r1
 8000968:	d909      	bls.n	800097e <__udivmoddi4+0xc2>
 800096a:	2d00      	cmp	r5, #0
 800096c:	f000 80ef 	beq.w	8000b4e <__udivmoddi4+0x292>
 8000970:	2600      	movs	r6, #0
 8000972:	e9c5 0100 	strd	r0, r1, [r5]
 8000976:	4630      	mov	r0, r6
 8000978:	4631      	mov	r1, r6
 800097a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800097e:	fab3 f683 	clz	r6, r3
 8000982:	2e00      	cmp	r6, #0
 8000984:	d14a      	bne.n	8000a1c <__udivmoddi4+0x160>
 8000986:	428b      	cmp	r3, r1
 8000988:	d302      	bcc.n	8000990 <__udivmoddi4+0xd4>
 800098a:	4282      	cmp	r2, r0
 800098c:	f200 80f9 	bhi.w	8000b82 <__udivmoddi4+0x2c6>
 8000990:	1a84      	subs	r4, r0, r2
 8000992:	eb61 0303 	sbc.w	r3, r1, r3
 8000996:	2001      	movs	r0, #1
 8000998:	469e      	mov	lr, r3
 800099a:	2d00      	cmp	r5, #0
 800099c:	d0e0      	beq.n	8000960 <__udivmoddi4+0xa4>
 800099e:	e9c5 4e00 	strd	r4, lr, [r5]
 80009a2:	e7dd      	b.n	8000960 <__udivmoddi4+0xa4>
 80009a4:	b902      	cbnz	r2, 80009a8 <__udivmoddi4+0xec>
 80009a6:	deff      	udf	#255	; 0xff
 80009a8:	fab2 f282 	clz	r2, r2
 80009ac:	2a00      	cmp	r2, #0
 80009ae:	f040 8092 	bne.w	8000ad6 <__udivmoddi4+0x21a>
 80009b2:	eba1 010c 	sub.w	r1, r1, ip
 80009b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ba:	fa1f fe8c 	uxth.w	lr, ip
 80009be:	2601      	movs	r6, #1
 80009c0:	0c20      	lsrs	r0, r4, #16
 80009c2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009c6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ce:	fb0e f003 	mul.w	r0, lr, r3
 80009d2:	4288      	cmp	r0, r1
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x12c>
 80009d6:	eb1c 0101 	adds.w	r1, ip, r1
 80009da:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x12a>
 80009e0:	4288      	cmp	r0, r1
 80009e2:	f200 80cb 	bhi.w	8000b7c <__udivmoddi4+0x2c0>
 80009e6:	4643      	mov	r3, r8
 80009e8:	1a09      	subs	r1, r1, r0
 80009ea:	b2a4      	uxth	r4, r4
 80009ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f0:	fb07 1110 	mls	r1, r7, r0, r1
 80009f4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009f8:	fb0e fe00 	mul.w	lr, lr, r0
 80009fc:	45a6      	cmp	lr, r4
 80009fe:	d908      	bls.n	8000a12 <__udivmoddi4+0x156>
 8000a00:	eb1c 0404 	adds.w	r4, ip, r4
 8000a04:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000a08:	d202      	bcs.n	8000a10 <__udivmoddi4+0x154>
 8000a0a:	45a6      	cmp	lr, r4
 8000a0c:	f200 80bb 	bhi.w	8000b86 <__udivmoddi4+0x2ca>
 8000a10:	4608      	mov	r0, r1
 8000a12:	eba4 040e 	sub.w	r4, r4, lr
 8000a16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a1a:	e79c      	b.n	8000956 <__udivmoddi4+0x9a>
 8000a1c:	f1c6 0720 	rsb	r7, r6, #32
 8000a20:	40b3      	lsls	r3, r6
 8000a22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a32:	431c      	orrs	r4, r3
 8000a34:	40f9      	lsrs	r1, r7
 8000a36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a42:	0c20      	lsrs	r0, r4, #16
 8000a44:	fa1f fe8c 	uxth.w	lr, ip
 8000a48:	fb09 1118 	mls	r1, r9, r8, r1
 8000a4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a50:	fb08 f00e 	mul.w	r0, r8, lr
 8000a54:	4288      	cmp	r0, r1
 8000a56:	fa02 f206 	lsl.w	r2, r2, r6
 8000a5a:	d90b      	bls.n	8000a74 <__udivmoddi4+0x1b8>
 8000a5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a60:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000a64:	f080 8088 	bcs.w	8000b78 <__udivmoddi4+0x2bc>
 8000a68:	4288      	cmp	r0, r1
 8000a6a:	f240 8085 	bls.w	8000b78 <__udivmoddi4+0x2bc>
 8000a6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a72:	4461      	add	r1, ip
 8000a74:	1a09      	subs	r1, r1, r0
 8000a76:	b2a4      	uxth	r4, r4
 8000a78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a88:	458e      	cmp	lr, r1
 8000a8a:	d908      	bls.n	8000a9e <__udivmoddi4+0x1e2>
 8000a8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a90:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000a94:	d26c      	bcs.n	8000b70 <__udivmoddi4+0x2b4>
 8000a96:	458e      	cmp	lr, r1
 8000a98:	d96a      	bls.n	8000b70 <__udivmoddi4+0x2b4>
 8000a9a:	3802      	subs	r0, #2
 8000a9c:	4461      	add	r1, ip
 8000a9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aa2:	fba0 9402 	umull	r9, r4, r0, r2
 8000aa6:	eba1 010e 	sub.w	r1, r1, lr
 8000aaa:	42a1      	cmp	r1, r4
 8000aac:	46c8      	mov	r8, r9
 8000aae:	46a6      	mov	lr, r4
 8000ab0:	d356      	bcc.n	8000b60 <__udivmoddi4+0x2a4>
 8000ab2:	d053      	beq.n	8000b5c <__udivmoddi4+0x2a0>
 8000ab4:	b15d      	cbz	r5, 8000ace <__udivmoddi4+0x212>
 8000ab6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aba:	eb61 010e 	sbc.w	r1, r1, lr
 8000abe:	fa01 f707 	lsl.w	r7, r1, r7
 8000ac2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ac6:	40f1      	lsrs	r1, r6
 8000ac8:	431f      	orrs	r7, r3
 8000aca:	e9c5 7100 	strd	r7, r1, [r5]
 8000ace:	2600      	movs	r6, #0
 8000ad0:	4631      	mov	r1, r6
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	40d8      	lsrs	r0, r3
 8000adc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ae4:	4091      	lsls	r1, r2
 8000ae6:	4301      	orrs	r1, r0
 8000ae8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aec:	fa1f fe8c 	uxth.w	lr, ip
 8000af0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000af4:	fb07 3610 	mls	r6, r7, r0, r3
 8000af8:	0c0b      	lsrs	r3, r1, #16
 8000afa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000afe:	fb00 f60e 	mul.w	r6, r0, lr
 8000b02:	429e      	cmp	r6, r3
 8000b04:	fa04 f402 	lsl.w	r4, r4, r2
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x260>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000b12:	d22f      	bcs.n	8000b74 <__udivmoddi4+0x2b8>
 8000b14:	429e      	cmp	r6, r3
 8000b16:	d92d      	bls.n	8000b74 <__udivmoddi4+0x2b8>
 8000b18:	3802      	subs	r0, #2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	1b9b      	subs	r3, r3, r6
 8000b1e:	b289      	uxth	r1, r1
 8000b20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b24:	fb07 3316 	mls	r3, r7, r6, r3
 8000b28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b30:	428b      	cmp	r3, r1
 8000b32:	d908      	bls.n	8000b46 <__udivmoddi4+0x28a>
 8000b34:	eb1c 0101 	adds.w	r1, ip, r1
 8000b38:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000b3c:	d216      	bcs.n	8000b6c <__udivmoddi4+0x2b0>
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d914      	bls.n	8000b6c <__udivmoddi4+0x2b0>
 8000b42:	3e02      	subs	r6, #2
 8000b44:	4461      	add	r1, ip
 8000b46:	1ac9      	subs	r1, r1, r3
 8000b48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b4c:	e738      	b.n	80009c0 <__udivmoddi4+0x104>
 8000b4e:	462e      	mov	r6, r5
 8000b50:	4628      	mov	r0, r5
 8000b52:	e705      	b.n	8000960 <__udivmoddi4+0xa4>
 8000b54:	4606      	mov	r6, r0
 8000b56:	e6e3      	b.n	8000920 <__udivmoddi4+0x64>
 8000b58:	4618      	mov	r0, r3
 8000b5a:	e6f8      	b.n	800094e <__udivmoddi4+0x92>
 8000b5c:	454b      	cmp	r3, r9
 8000b5e:	d2a9      	bcs.n	8000ab4 <__udivmoddi4+0x1f8>
 8000b60:	ebb9 0802 	subs.w	r8, r9, r2
 8000b64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b68:	3801      	subs	r0, #1
 8000b6a:	e7a3      	b.n	8000ab4 <__udivmoddi4+0x1f8>
 8000b6c:	4646      	mov	r6, r8
 8000b6e:	e7ea      	b.n	8000b46 <__udivmoddi4+0x28a>
 8000b70:	4620      	mov	r0, r4
 8000b72:	e794      	b.n	8000a9e <__udivmoddi4+0x1e2>
 8000b74:	4640      	mov	r0, r8
 8000b76:	e7d1      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b78:	46d0      	mov	r8, sl
 8000b7a:	e77b      	b.n	8000a74 <__udivmoddi4+0x1b8>
 8000b7c:	3b02      	subs	r3, #2
 8000b7e:	4461      	add	r1, ip
 8000b80:	e732      	b.n	80009e8 <__udivmoddi4+0x12c>
 8000b82:	4630      	mov	r0, r6
 8000b84:	e709      	b.n	800099a <__udivmoddi4+0xde>
 8000b86:	4464      	add	r4, ip
 8000b88:	3802      	subs	r0, #2
 8000b8a:	e742      	b.n	8000a12 <__udivmoddi4+0x156>

08000b8c <__aeabi_idiv0>:
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <ARGB_Init>:

/**
 * @brief Init timer & prescalers
 * @param none
 */
void ARGB_Init(void) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
    /* Auto-calculation! */
    u32_t APBfq; // Clock freq
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
 8000b96:	f005 feff 	bl	8006998 <HAL_RCC_GetPCLK1Freq>
 8000b9a:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
 8000b9c:	4b38      	ldr	r3, [pc, #224]	; (8000c80 <ARGB_Init+0xf0>)
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d101      	bne.n	8000bac <ARGB_Init+0x1c>
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e000      	b.n	8000bae <ARGB_Init+0x1e>
 8000bac:	2302      	movs	r3, #2
 8000bae:	461a      	mov	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	fb02 f303 	mul.w	r3, r2, r3
 8000bb6:	607b      	str	r3, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	0a1b      	lsrs	r3, r3, #8
 8000bbc:	4a31      	ldr	r2, [pc, #196]	; (8000c84 <ARGB_Init+0xf4>)
 8000bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc2:	091b      	lsrs	r3, r3, #4
 8000bc4:	607b      	str	r3, [r7, #4]
#endif
    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 8000bc6:	4b30      	ldr	r3, [pc, #192]	; (8000c88 <ARGB_Init+0xf8>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	629a      	str	r2, [r3, #40]	; 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	4b2c      	ldr	r3, [pc, #176]	; (8000c88 <ARGB_Init+0xf8>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 8000bdc:	4b2a      	ldr	r3, [pc, #168]	; (8000c88 <ARGB_Init+0xf8>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2201      	movs	r2, #1
 8000be2:	615a      	str	r2, [r3, #20]
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.56) - 1;     // Log.1 - 56% - 0.70us
    PWM_LO = (u8_t) (APBfq * 0.28) - 1;     // Log.0 - 28% - 0.35us
#endif
#ifdef SK6812
    PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff fdb7 	bl	8000758 <__aeabi_ui2d>
 8000bea:	a321      	add	r3, pc, #132	; (adr r3, 8000c70 <ARGB_Init+0xe0>)
 8000bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf0:	f7ff fb46 	bl	8000280 <__aeabi_dmul>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f7ff fe26 	bl	800084c <__aeabi_d2uiz>
 8000c00:	4603      	mov	r3, r0
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	3b01      	subs	r3, #1
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <ARGB_Init+0xfc>)
 8000c0a:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.24) - 1;     // Log.0 - 24% - 0.30us
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff fda3 	bl	8000758 <__aeabi_ui2d>
 8000c12:	a319      	add	r3, pc, #100	; (adr r3, 8000c78 <ARGB_Init+0xe8>)
 8000c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c18:	f7ff fb32 	bl	8000280 <__aeabi_dmul>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
 8000c20:	4610      	mov	r0, r2
 8000c22:	4619      	mov	r1, r3
 8000c24:	f7ff fe12 	bl	800084c <__aeabi_d2uiz>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <ARGB_Init+0x100>)
 8000c32:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST_LEFT = ARGB_READY; // Set Ready Flag
 8000c34:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <ARGB_Init+0x104>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH_LEFT, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <ARGB_Init+0xf8>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2201      	movs	r2, #1
 8000c40:	2108      	movs	r1, #8
 8000c42:	4618      	mov	r0, r3
 8000c44:	f007 f85a 	bl	8007cfc <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f002 ff3d 	bl	8003ac8 <HAL_Delay>
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH_RIGHT, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <ARGB_Init+0xf8>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2201      	movs	r2, #1
 8000c54:	210c      	movs	r1, #12
 8000c56:	4618      	mov	r0, r3
 8000c58:	f007 f850 	bl	8007cfc <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f002 ff33 	bl	8003ac8 <HAL_Delay>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	f3af 8000 	nop.w
 8000c70:	eb851eb8 	.word	0xeb851eb8
 8000c74:	3fdeb851 	.word	0x3fdeb851
 8000c78:	eb851eb8 	.word	0xeb851eb8
 8000c7c:	3fceb851 	.word	0x3fceb851
 8000c80:	40023800 	.word	0x40023800
 8000c84:	014f8b59 	.word	0x014f8b59
 8000c88:	200006f0 	.word	0x200006f0
 8000c8c:	200000c4 	.word	0x200000c4
 8000c90:	200000c5 	.word	0x200000c5
 8000c94:	20000574 	.word	0x20000574

08000c98 <ARGB_Clear_left>:
/**
 * @brief Fill ALL LEDs with (0,0,0)
 * @param none
 * @note Update strip after that
 */
void ARGB_Clear_left(void) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
    ARGB_FillRGB_left(0, 0, 0);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f000 f95d 	bl	8000f60 <ARGB_FillRGB_left>
#ifdef SK6812
    ARGB_FillWhite_left(0);
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f000 f99c 	bl	8000fe4 <ARGB_FillWhite_left>
#endif
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <ARGB_Clear_right>:
// -------------------------------------------------------------------------------
void ARGB_Clear_right(void) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
    ARGB_FillRGB_right(0, 0, 0);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f000 f972 	bl	8000fa2 <ARGB_FillRGB_right>
#ifdef SK6812
    ARGB_FillWhite_right(0);
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f000 f9ad 	bl	800101e <ARGB_FillWhite_right>
#endif
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <ARGB_SetBrightness>:

/**
 * @brief Set GLOBAL LED brightness
 * @param[in] br Brightness [0..255]
 */
void ARGB_SetBrightness(u8_t br) {
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
    ARGB_BR = br;
 8000cd2:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <ARGB_SetBrightness+0x1c>)
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	7013      	strb	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	20000000 	.word	0x20000000

08000ce8 <ARGB_SetRGB_left>:
 * @param[in] i LED position
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_SetRGB_left(u16_t i, u8_t g, u8_t r, u8_t b) {
 8000ce8:	b590      	push	{r4, r7, lr}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4608      	mov	r0, r1
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4623      	mov	r3, r4
 8000cf8:	80fb      	strh	r3, [r7, #6]
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	717b      	strb	r3, [r7, #5]
 8000cfe:	460b      	mov	r3, r1
 8000d00:	713b      	strb	r3, [r7, #4]
 8000d02:	4613      	mov	r3, r2
 8000d04:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 8000d06:	88fb      	ldrh	r3, [r7, #6]
 8000d08:	2b54      	cmp	r3, #84	; 0x54
 8000d0a:	d913      	bls.n	8000d34 <ARGB_SetRGB_left+0x4c>
        u16_t _i = i / NUM_PIXELS;
 8000d0c:	88fb      	ldrh	r3, [r7, #6]
 8000d0e:	4a30      	ldr	r2, [pc, #192]	; (8000dd0 <ARGB_SetRGB_left+0xe8>)
 8000d10:	fba2 2303 	umull	r2, r3, r2, r3
 8000d14:	099b      	lsrs	r3, r3, #6
 8000d16:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 8000d18:	89fb      	ldrh	r3, [r7, #14]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	0092      	lsls	r2, r2, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	461a      	mov	r2, r3
 8000d22:	0111      	lsls	r1, r2, #4
 8000d24:	461a      	mov	r2, r3
 8000d26:	460b      	mov	r3, r1
 8000d28:	4413      	add	r3, r2
 8000d2a:	425b      	negs	r3, r3
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	4413      	add	r3, r2
 8000d32:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 8000d34:	4b27      	ldr	r3, [pc, #156]	; (8000dd4 <ARGB_SetRGB_left+0xec>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d40:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d44:	793a      	ldrb	r2, [r7, #4]
 8000d46:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d4a:	713b      	strb	r3, [r7, #4]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 8000d4c:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <ARGB_SetRGB_left+0xec>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	3301      	adds	r3, #1
 8000d54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d58:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d5c:	797a      	ldrb	r2, [r7, #5]
 8000d5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d62:	717b      	strb	r3, [r7, #5]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 8000d64:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <ARGB_SetRGB_left+0xec>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d70:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d74:	78fa      	ldrb	r2, [r7, #3]
 8000d76:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d7a:	70fb      	strb	r3, [r7, #3]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 8000d7c:	797b      	ldrb	r3, [r7, #5]
 8000d7e:	21b0      	movs	r1, #176	; 0xb0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f000 fd01 	bl	8001788 <scale8>
 8000d86:	4603      	mov	r3, r0
 8000d88:	717b      	strb	r3, [r7, #5]
    b = scale8(b, 0xF0);
 8000d8a:	78fb      	ldrb	r3, [r7, #3]
 8000d8c:	21f0      	movs	r1, #240	; 0xf0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 fcfa 	bl	8001788 <scale8>
 8000d94:	4603      	mov	r3, r0
 8000d96:	70fb      	strb	r3, [r7, #3]
#endif
    // Subpixel chain order
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
 8000d98:	793b      	ldrb	r3, [r7, #4]
 8000d9a:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = g;
 8000d9c:	797b      	ldrb	r3, [r7, #5]
 8000d9e:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8000da0:	78fb      	ldrb	r3, [r7, #3]
 8000da2:	72fb      	strb	r3, [r7, #11]
    const u8_t subp2 = r;
    const u8_t subp3 = b;
#endif
    // RGB or RGBW
#ifdef SK6812
    RGB_BUF_LEFT[4 * i] = subp1;     // subpixel 1
 8000da4:	88fb      	ldrh	r3, [r7, #6]
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	490b      	ldr	r1, [pc, #44]	; (8000dd8 <ARGB_SetRGB_left+0xf0>)
 8000daa:	7b7a      	ldrb	r2, [r7, #13]
 8000dac:	54ca      	strb	r2, [r1, r3]
    RGB_BUF_LEFT[4 * i + 1] = subp2; // subpixel 2
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	3301      	adds	r3, #1
 8000db4:	4908      	ldr	r1, [pc, #32]	; (8000dd8 <ARGB_SetRGB_left+0xf0>)
 8000db6:	7b3a      	ldrb	r2, [r7, #12]
 8000db8:	54ca      	strb	r2, [r1, r3]
    RGB_BUF_LEFT[4 * i + 2] = subp3; // subpixel 3
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	3302      	adds	r3, #2
 8000dc0:	4905      	ldr	r1, [pc, #20]	; (8000dd8 <ARGB_SetRGB_left+0xf0>)
 8000dc2:	7afa      	ldrb	r2, [r7, #11]
 8000dc4:	54ca      	strb	r2, [r1, r3]
#else
    RGB_BUF_LEFT[3 * i] = subp1;     // subpixel 1
    RGB_BUF_LEFT[3 * i + 1] = subp2; // subpixel 2
    RGB_BUF_LEFT[3 * i + 2] = subp3; // subpixel 3
#endif
}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd90      	pop	{r4, r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	c0c0c0c1 	.word	0xc0c0c0c1
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	200000c8 	.word	0x200000c8

08000ddc <ARGB_SetRGB_right>:
// ----------------------------------------------------------------------------
void ARGB_SetRGB_right(u16_t i, u8_t g, u8_t r, u8_t b) {
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4604      	mov	r4, r0
 8000de4:	4608      	mov	r0, r1
 8000de6:	4611      	mov	r1, r2
 8000de8:	461a      	mov	r2, r3
 8000dea:	4623      	mov	r3, r4
 8000dec:	80fb      	strh	r3, [r7, #6]
 8000dee:	4603      	mov	r3, r0
 8000df0:	717b      	strb	r3, [r7, #5]
 8000df2:	460b      	mov	r3, r1
 8000df4:	713b      	strb	r3, [r7, #4]
 8000df6:	4613      	mov	r3, r2
 8000df8:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 8000dfa:	88fb      	ldrh	r3, [r7, #6]
 8000dfc:	2b54      	cmp	r3, #84	; 0x54
 8000dfe:	d913      	bls.n	8000e28 <ARGB_SetRGB_right+0x4c>
        u16_t _i = i / NUM_PIXELS;
 8000e00:	88fb      	ldrh	r3, [r7, #6]
 8000e02:	4a30      	ldr	r2, [pc, #192]	; (8000ec4 <ARGB_SetRGB_right+0xe8>)
 8000e04:	fba2 2303 	umull	r2, r3, r2, r3
 8000e08:	099b      	lsrs	r3, r3, #6
 8000e0a:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 8000e0c:	89fb      	ldrh	r3, [r7, #14]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	0092      	lsls	r2, r2, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	461a      	mov	r2, r3
 8000e16:	0111      	lsls	r1, r2, #4
 8000e18:	461a      	mov	r2, r3
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	4413      	add	r3, r2
 8000e1e:	425b      	negs	r3, r3
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	4413      	add	r3, r2
 8000e26:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 8000e28:	4b27      	ldr	r3, [pc, #156]	; (8000ec8 <ARGB_SetRGB_right+0xec>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	3301      	adds	r3, #1
 8000e30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e34:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e38:	793a      	ldrb	r2, [r7, #4]
 8000e3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e3e:	713b      	strb	r3, [r7, #4]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 8000e40:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <ARGB_SetRGB_right+0xec>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	3301      	adds	r3, #1
 8000e48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e50:	797a      	ldrb	r2, [r7, #5]
 8000e52:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e56:	717b      	strb	r3, [r7, #5]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 8000e58:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <ARGB_SetRGB_right+0xec>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	3301      	adds	r3, #1
 8000e60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e64:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e68:	78fa      	ldrb	r2, [r7, #3]
 8000e6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e6e:	70fb      	strb	r3, [r7, #3]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 8000e70:	797b      	ldrb	r3, [r7, #5]
 8000e72:	21b0      	movs	r1, #176	; 0xb0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 fc87 	bl	8001788 <scale8>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	717b      	strb	r3, [r7, #5]
    b = scale8(b, 0xF0);
 8000e7e:	78fb      	ldrb	r3, [r7, #3]
 8000e80:	21f0      	movs	r1, #240	; 0xf0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 fc80 	bl	8001788 <scale8>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	70fb      	strb	r3, [r7, #3]
#endif
    // Subpixel chain order
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
 8000e8c:	793b      	ldrb	r3, [r7, #4]
 8000e8e:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = g;
 8000e90:	797b      	ldrb	r3, [r7, #5]
 8000e92:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8000e94:	78fb      	ldrb	r3, [r7, #3]
 8000e96:	72fb      	strb	r3, [r7, #11]
    const u8_t subp2 = r;
    const u8_t subp3 = b;
#endif
    // RGB or RGBW
#ifdef SK6812
    RGB_BUF_RIGHT[4 * i] = subp1;     // subpixel 1
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	490b      	ldr	r1, [pc, #44]	; (8000ecc <ARGB_SetRGB_right+0xf0>)
 8000e9e:	7b7a      	ldrb	r2, [r7, #13]
 8000ea0:	54ca      	strb	r2, [r1, r3]
    RGB_BUF_RIGHT[4 * i + 1] = subp2; // subpixel 2
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	4908      	ldr	r1, [pc, #32]	; (8000ecc <ARGB_SetRGB_right+0xf0>)
 8000eaa:	7b3a      	ldrb	r2, [r7, #12]
 8000eac:	54ca      	strb	r2, [r1, r3]
    RGB_BUF_RIGHT[4 * i + 2] = subp3; // subpixel 3
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	4905      	ldr	r1, [pc, #20]	; (8000ecc <ARGB_SetRGB_right+0xf0>)
 8000eb6:	7afa      	ldrb	r2, [r7, #11]
 8000eb8:	54ca      	strb	r2, [r1, r3]
#else
    RGB_BUF_RIGHT[3 * i] = subp1;     // subpixel 1
    RGB_BUF_RIGHT[3 * i + 1] = subp2; // subpixel 2
    RGB_BUF_RIGHT[3 * i + 2] = subp3; // subpixel 3
#endif
}
 8000eba:	bf00      	nop
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd90      	pop	{r4, r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	c0c0c0c1 	.word	0xc0c0c0c1
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	2000021c 	.word	0x2000021c

08000ed0 <ARGB_SetWhite_left>:
/**
 * @brief Set White component in strip by index
 * @param[in] i LED position
 * @param[in] w White component [0..255]
 */
void ARGB_SetWhite_left(u16_t i, u8_t w) {
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	460a      	mov	r2, r1
 8000eda:	80fb      	strh	r3, [r7, #6]
 8000edc:	4613      	mov	r3, r2
 8000ede:	717b      	strb	r3, [r7, #5]
#ifdef RGB
    return;
#endif
    w /= 256 / ((u16_t) ARGB_BR + 1); 			// set brightness
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <ARGB_SetWhite_left+0x40>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eec:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ef0:	797a      	ldrb	r2, [r7, #5]
 8000ef2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ef6:	717b      	strb	r3, [r7, #5]
    RGB_BUF_LEFT[4 * i + 3] = w;                // set white part
 8000ef8:	88fb      	ldrh	r3, [r7, #6]
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	3303      	adds	r3, #3
 8000efe:	4905      	ldr	r1, [pc, #20]	; (8000f14 <ARGB_SetWhite_left+0x44>)
 8000f00:	797a      	ldrb	r2, [r7, #5]
 8000f02:	54ca      	strb	r2, [r1, r3]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	20000000 	.word	0x20000000
 8000f14:	200000c8 	.word	0x200000c8

08000f18 <ARGB_SetWhite_right>:
// -------------------------------------------------------------------
void ARGB_SetWhite_right(u16_t i, u8_t w) {
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	460a      	mov	r2, r1
 8000f22:	80fb      	strh	r3, [r7, #6]
 8000f24:	4613      	mov	r3, r2
 8000f26:	717b      	strb	r3, [r7, #5]
#ifdef RGB
    return;
#endif
    w /= 256 / ((u16_t) ARGB_BR + 1); 			// set brightness
 8000f28:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <ARGB_SetWhite_right+0x40>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	3301      	adds	r3, #1
 8000f30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f34:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f38:	797a      	ldrb	r2, [r7, #5]
 8000f3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f3e:	717b      	strb	r3, [r7, #5]
    RGB_BUF_RIGHT[4 * i + 3] = w;               // set white part
 8000f40:	88fb      	ldrh	r3, [r7, #6]
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	3303      	adds	r3, #3
 8000f46:	4905      	ldr	r1, [pc, #20]	; (8000f5c <ARGB_SetWhite_right+0x44>)
 8000f48:	797a      	ldrb	r2, [r7, #5]
 8000f4a:	54ca      	strb	r2, [r1, r3]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	2000021c 	.word	0x2000021c

08000f60 <ARGB_FillRGB_left>:
 * @brief Fill ALL LEDs with RGB color
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_FillRGB_left(u8_t r, u8_t g, u8_t b) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	71bb      	strb	r3, [r7, #6]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	81fb      	strh	r3, [r7, #14]
 8000f76:	e00b      	b.n	8000f90 <ARGB_FillRGB_left+0x30>
        ARGB_SetRGB_left(i, r, g, b);
 8000f78:	89fb      	ldrh	r3, [r7, #14]
 8000f7a:	b298      	uxth	r0, r3
 8000f7c:	797b      	ldrb	r3, [r7, #5]
 8000f7e:	79ba      	ldrb	r2, [r7, #6]
 8000f80:	79f9      	ldrb	r1, [r7, #7]
 8000f82:	f7ff feb1 	bl	8000ce8 <ARGB_SetRGB_left>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8000f86:	89fb      	ldrh	r3, [r7, #14]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	81fb      	strh	r3, [r7, #14]
 8000f90:	89fb      	ldrh	r3, [r7, #14]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	2b54      	cmp	r3, #84	; 0x54
 8000f96:	d9ef      	bls.n	8000f78 <ARGB_FillRGB_left+0x18>
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <ARGB_FillRGB_right>:
// --------------------------------------------------------------------------------
void ARGB_FillRGB_right(u8_t r, u8_t g, u8_t b) {
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b084      	sub	sp, #16
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	4603      	mov	r3, r0
 8000faa:	71fb      	strb	r3, [r7, #7]
 8000fac:	460b      	mov	r3, r1
 8000fae:	71bb      	strb	r3, [r7, #6]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	81fb      	strh	r3, [r7, #14]
 8000fb8:	e00b      	b.n	8000fd2 <ARGB_FillRGB_right+0x30>
        ARGB_SetRGB_right(i, r, g, b);
 8000fba:	89fb      	ldrh	r3, [r7, #14]
 8000fbc:	b298      	uxth	r0, r3
 8000fbe:	797b      	ldrb	r3, [r7, #5]
 8000fc0:	79ba      	ldrb	r2, [r7, #6]
 8000fc2:	79f9      	ldrb	r1, [r7, #7]
 8000fc4:	f7ff ff0a 	bl	8000ddc <ARGB_SetRGB_right>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8000fc8:	89fb      	ldrh	r3, [r7, #14]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	81fb      	strh	r3, [r7, #14]
 8000fd2:	89fb      	ldrh	r3, [r7, #14]
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	2b54      	cmp	r3, #84	; 0x54
 8000fd8:	d9ef      	bls.n	8000fba <ARGB_FillRGB_right+0x18>
}
 8000fda:	bf00      	nop
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <ARGB_FillWhite_left>:

/**
 * @brief Set ALL White components in strip
 * @param[in] w White component [0..255]
 */
void ARGB_FillWhite_left(u8_t w) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	81fb      	strh	r3, [r7, #14]
 8000ff2:	e00b      	b.n	800100c <ARGB_FillWhite_left+0x28>
        ARGB_SetWhite_left(i, w);
 8000ff4:	89fb      	ldrh	r3, [r7, #14]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	79fa      	ldrb	r2, [r7, #7]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff67 	bl	8000ed0 <ARGB_SetWhite_left>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8001002:	89fb      	ldrh	r3, [r7, #14]
 8001004:	b29b      	uxth	r3, r3
 8001006:	3301      	adds	r3, #1
 8001008:	b29b      	uxth	r3, r3
 800100a:	81fb      	strh	r3, [r7, #14]
 800100c:	89fb      	ldrh	r3, [r7, #14]
 800100e:	b29b      	uxth	r3, r3
 8001010:	2b54      	cmp	r3, #84	; 0x54
 8001012:	d9ef      	bls.n	8000ff4 <ARGB_FillWhite_left+0x10>
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <ARGB_FillWhite_right>:
// --------------------------------------------------------------------------
void ARGB_FillWhite_right(u8_t w) {
 800101e:	b580      	push	{r7, lr}
 8001020:	b084      	sub	sp, #16
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	71fb      	strb	r3, [r7, #7]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8001028:	2300      	movs	r3, #0
 800102a:	81fb      	strh	r3, [r7, #14]
 800102c:	e00b      	b.n	8001046 <ARGB_FillWhite_right+0x28>
        ARGB_SetWhite_right(i, w);
 800102e:	89fb      	ldrh	r3, [r7, #14]
 8001030:	b29b      	uxth	r3, r3
 8001032:	79fa      	ldrb	r2, [r7, #7]
 8001034:	4611      	mov	r1, r2
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff6e 	bl	8000f18 <ARGB_SetWhite_right>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 800103c:	89fb      	ldrh	r3, [r7, #14]
 800103e:	b29b      	uxth	r3, r3
 8001040:	3301      	adds	r3, #1
 8001042:	b29b      	uxth	r3, r3
 8001044:	81fb      	strh	r3, [r7, #14]
 8001046:	89fb      	ldrh	r3, [r7, #14]
 8001048:	b29b      	uxth	r3, r3
 800104a:	2b54      	cmp	r3, #84	; 0x54
 800104c:	d9ef      	bls.n	800102e <ARGB_FillWhite_right+0x10>
}
 800104e:	bf00      	nop
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <ARGB_Show_left>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show_left(void) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
	ARGB_LOC_ST_LEFT = ARGB_BUSY;
 800105e:	4b9f      	ldr	r3, [pc, #636]	; (80012dc <ARGB_Show_left+0x284>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER_LEFT != 0 || DMA_HANDLE_LEFT.State != HAL_DMA_STATE_READY) {   //////////////////////////////////////   BUF_COUNTER  ?????
 8001064:	4b9e      	ldr	r3, [pc, #632]	; (80012e0 <ARGB_Show_left+0x288>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	b29b      	uxth	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d105      	bne.n	800107a <ARGB_Show_left+0x22>
 800106e:	4b9d      	ldr	r3, [pc, #628]	; (80012e4 <ARGB_Show_left+0x28c>)
 8001070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b01      	cmp	r3, #1
 8001078:	d001      	beq.n	800107e <ARGB_Show_left+0x26>
        return ARGB_BUSY;
 800107a:	2300      	movs	r3, #0
 800107c:	e1a1      	b.n	80013c2 <ARGB_Show_left+0x36a>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 800107e:	2300      	movs	r3, #0
 8001080:	71fb      	strb	r3, [r7, #7]
 8001082:	e0dc      	b.n	800123e <ARGB_Show_left+0x1e6>
            // set first transfer from first values
        	PWM_BUF_LEFT[i] = (((RGB_BUF_LEFT[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001084:	4b98      	ldr	r3, [pc, #608]	; (80012e8 <ARGB_Show_left+0x290>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	461a      	mov	r2, r3
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	b2db      	uxtb	r3, r3
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001098:	2b00      	cmp	r3, #0
 800109a:	dd04      	ble.n	80010a6 <ARGB_Show_left+0x4e>
 800109c:	4b93      	ldr	r3, [pc, #588]	; (80012ec <ARGB_Show_left+0x294>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	461a      	mov	r2, r3
 80010a4:	e003      	b.n	80010ae <ARGB_Show_left+0x56>
 80010a6:	4b92      	ldr	r3, [pc, #584]	; (80012f0 <ARGB_Show_left+0x298>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	461a      	mov	r2, r3
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	4619      	mov	r1, r3
 80010b4:	4b8f      	ldr	r3, [pc, #572]	; (80012f4 <ARGB_Show_left+0x29c>)
 80010b6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        	PWM_BUF_LEFT[i + 8] = (((RGB_BUF_LEFT[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80010ba:	4b8b      	ldr	r3, [pc, #556]	; (80012e8 <ARGB_Show_left+0x290>)
 80010bc:	785b      	ldrb	r3, [r3, #1]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	461a      	mov	r2, r3
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	dd04      	ble.n	80010dc <ARGB_Show_left+0x84>
 80010d2:	4b86      	ldr	r3, [pc, #536]	; (80012ec <ARGB_Show_left+0x294>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4619      	mov	r1, r3
 80010da:	e003      	b.n	80010e4 <ARGB_Show_left+0x8c>
 80010dc:	4b84      	ldr	r3, [pc, #528]	; (80012f0 <ARGB_Show_left+0x298>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	4619      	mov	r1, r3
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	3308      	adds	r3, #8
 80010ea:	4a82      	ldr	r2, [pc, #520]	; (80012f4 <ARGB_Show_left+0x29c>)
 80010ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 16] = (((RGB_BUF_LEFT[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80010f0:	4b7d      	ldr	r3, [pc, #500]	; (80012e8 <ARGB_Show_left+0x290>)
 80010f2:	789b      	ldrb	r3, [r3, #2]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	461a      	mov	r2, r3
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001104:	2b00      	cmp	r3, #0
 8001106:	dd04      	ble.n	8001112 <ARGB_Show_left+0xba>
 8001108:	4b78      	ldr	r3, [pc, #480]	; (80012ec <ARGB_Show_left+0x294>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	4619      	mov	r1, r3
 8001110:	e003      	b.n	800111a <ARGB_Show_left+0xc2>
 8001112:	4b77      	ldr	r3, [pc, #476]	; (80012f0 <ARGB_Show_left+0x298>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	4619      	mov	r1, r3
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	3310      	adds	r3, #16
 8001120:	4a74      	ldr	r2, [pc, #464]	; (80012f4 <ARGB_Show_left+0x29c>)
 8001122:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 24] = (((RGB_BUF_LEFT[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001126:	4b70      	ldr	r3, [pc, #448]	; (80012e8 <ARGB_Show_left+0x290>)
 8001128:	78db      	ldrb	r3, [r3, #3]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	461a      	mov	r2, r3
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113a:	2b00      	cmp	r3, #0
 800113c:	dd04      	ble.n	8001148 <ARGB_Show_left+0xf0>
 800113e:	4b6b      	ldr	r3, [pc, #428]	; (80012ec <ARGB_Show_left+0x294>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	4619      	mov	r1, r3
 8001146:	e003      	b.n	8001150 <ARGB_Show_left+0xf8>
 8001148:	4b69      	ldr	r3, [pc, #420]	; (80012f0 <ARGB_Show_left+0x298>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	4619      	mov	r1, r3
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	b2db      	uxtb	r3, r3
 8001154:	3318      	adds	r3, #24
 8001156:	4a67      	ldr	r2, [pc, #412]	; (80012f4 <ARGB_Show_left+0x29c>)
 8001158:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 32] = (((RGB_BUF_LEFT[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800115c:	4b62      	ldr	r3, [pc, #392]	; (80012e8 <ARGB_Show_left+0x290>)
 800115e:	791b      	ldrb	r3, [r3, #4]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	461a      	mov	r2, r3
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001170:	2b00      	cmp	r3, #0
 8001172:	dd04      	ble.n	800117e <ARGB_Show_left+0x126>
 8001174:	4b5d      	ldr	r3, [pc, #372]	; (80012ec <ARGB_Show_left+0x294>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	4619      	mov	r1, r3
 800117c:	e003      	b.n	8001186 <ARGB_Show_left+0x12e>
 800117e:	4b5c      	ldr	r3, [pc, #368]	; (80012f0 <ARGB_Show_left+0x298>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	4619      	mov	r1, r3
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	3320      	adds	r3, #32
 800118c:	4a59      	ldr	r2, [pc, #356]	; (80012f4 <ARGB_Show_left+0x29c>)
 800118e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 40] = (((RGB_BUF_LEFT[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001192:	4b55      	ldr	r3, [pc, #340]	; (80012e8 <ARGB_Show_left+0x290>)
 8001194:	795b      	ldrb	r3, [r3, #5]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	461a      	mov	r2, r3
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	dd04      	ble.n	80011b4 <ARGB_Show_left+0x15c>
 80011aa:	4b50      	ldr	r3, [pc, #320]	; (80012ec <ARGB_Show_left+0x294>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	4619      	mov	r1, r3
 80011b2:	e003      	b.n	80011bc <ARGB_Show_left+0x164>
 80011b4:	4b4e      	ldr	r3, [pc, #312]	; (80012f0 <ARGB_Show_left+0x298>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	4619      	mov	r1, r3
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	3328      	adds	r3, #40	; 0x28
 80011c2:	4a4c      	ldr	r2, [pc, #304]	; (80012f4 <ARGB_Show_left+0x29c>)
 80011c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#ifdef SK6812
        	PWM_BUF_LEFT[i + 48] = (((RGB_BUF_LEFT[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80011c8:	4b47      	ldr	r3, [pc, #284]	; (80012e8 <ARGB_Show_left+0x290>)
 80011ca:	799b      	ldrb	r3, [r3, #6]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	461a      	mov	r2, r3
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011dc:	2b00      	cmp	r3, #0
 80011de:	dd04      	ble.n	80011ea <ARGB_Show_left+0x192>
 80011e0:	4b42      	ldr	r3, [pc, #264]	; (80012ec <ARGB_Show_left+0x294>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	4619      	mov	r1, r3
 80011e8:	e003      	b.n	80011f2 <ARGB_Show_left+0x19a>
 80011ea:	4b41      	ldr	r3, [pc, #260]	; (80012f0 <ARGB_Show_left+0x298>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	4619      	mov	r1, r3
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	3330      	adds	r3, #48	; 0x30
 80011f8:	4a3e      	ldr	r2, [pc, #248]	; (80012f4 <ARGB_Show_left+0x29c>)
 80011fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 56] = (((RGB_BUF_LEFT[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80011fe:	4b3a      	ldr	r3, [pc, #232]	; (80012e8 <ARGB_Show_left+0x290>)
 8001200:	79db      	ldrb	r3, [r3, #7]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	461a      	mov	r2, r3
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001212:	2b00      	cmp	r3, #0
 8001214:	dd04      	ble.n	8001220 <ARGB_Show_left+0x1c8>
 8001216:	4b35      	ldr	r3, [pc, #212]	; (80012ec <ARGB_Show_left+0x294>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	4619      	mov	r1, r3
 800121e:	e003      	b.n	8001228 <ARGB_Show_left+0x1d0>
 8001220:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <ARGB_Show_left+0x298>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	4619      	mov	r1, r3
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	3338      	adds	r3, #56	; 0x38
 800122e:	4a31      	ldr	r2, [pc, #196]	; (80012f4 <ARGB_Show_left+0x29c>)
 8001230:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	3301      	adds	r3, #1
 800123a:	b2db      	uxtb	r3, r3
 800123c:	71fb      	strb	r3, [r7, #7]
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b07      	cmp	r3, #7
 8001244:	f67f af1e 	bls.w	8001084 <ARGB_Show_left+0x2c>
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 800124c:	e0b1      	b.n	80013b2 <ARGB_Show_left+0x35a>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH_LEFT) == HAL_TIM_CHANNEL_STATE_BUSY) {
 800124e:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <ARGB_Show_left+0x2a0>)
 8001250:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d102      	bne.n	8001260 <ARGB_Show_left+0x208>
                DMA_Send_Stat = HAL_BUSY;
 800125a:	2302      	movs	r3, #2
 800125c:	73fb      	strb	r3, [r7, #15]
                continue;
 800125e:	e0a8      	b.n	80013b2 <ARGB_Show_left+0x35a>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH_LEFT) == HAL_TIM_CHANNEL_STATE_READY) {
 8001260:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <ARGB_Show_left+0x2a0>)
 8001262:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b01      	cmp	r3, #1
 800126a:	d11d      	bne.n	80012a8 <ARGB_Show_left+0x250>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH_LEFT, HAL_TIM_CHANNEL_STATE_BUSY);
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <ARGB_Show_left+0x2a0>)
 800126e:	2202      	movs	r2, #2
 8001270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#elif TIM_CH_LEFT == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt_left;
 8001274:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <ARGB_Show_left+0x2a0>)
 8001276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001278:	4a20      	ldr	r2, [pc, #128]	; (80012fc <ARGB_Show_left+0x2a4>)
 800127a:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt_left;
 800127c:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <ARGB_Show_left+0x2a0>)
 800127e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001280:	4a1f      	ldr	r2, [pc, #124]	; (8001300 <ARGB_Show_left+0x2a8>)
 8001282:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID]->XferErrorCallback = TIM_DMAError;
 8001284:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <ARGB_Show_left+0x2a0>)
 8001286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001288:	4a1e      	ldr	r2, [pc, #120]	; (8001304 <ARGB_Show_left+0x2ac>)
 800128a:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF_LEFT,
 800128c:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <ARGB_Show_left+0x2a0>)
 800128e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001290:	4918      	ldr	r1, [pc, #96]	; (80012f4 <ARGB_Show_left+0x29c>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR,
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <ARGB_Show_left+0x2a0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	333c      	adds	r3, #60	; 0x3c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID], (u32_t) PWM_BUF_LEFT,
 8001298:	461a      	mov	r2, r3
 800129a:	2340      	movs	r3, #64	; 0x40
 800129c:	f002 fdf8 	bl	8003e90 <HAL_DMA_Start_IT>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d006      	beq.n	80012b4 <ARGB_Show_left+0x25c>
 80012a6:	e002      	b.n	80012ae <ARGB_Show_left+0x256>
                DMA_Send_Stat = HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
                continue;
 80012ac:	e081      	b.n	80013b2 <ARGB_Show_left+0x35a>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	73fb      	strb	r3, [r7, #15]
                continue;
 80012b2:	e07e      	b.n	80013b2 <ARGB_Show_left+0x35a>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC);
 80012b4:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <ARGB_Show_left+0x2a0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68da      	ldr	r2, [r3, #12]
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <ARGB_Show_left+0x2a0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012c2:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <ARGB_Show_left+0x2a0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0f      	ldr	r2, [pc, #60]	; (8001308 <ARGB_Show_left+0x2b0>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d004      	beq.n	80012d8 <ARGB_Show_left+0x280>
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <ARGB_Show_left+0x2a0>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a0e      	ldr	r2, [pc, #56]	; (800130c <ARGB_Show_left+0x2b4>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d11b      	bne.n	8001310 <ARGB_Show_left+0x2b8>
 80012d8:	2301      	movs	r3, #1
 80012da:	e01a      	b.n	8001312 <ARGB_Show_left+0x2ba>
 80012dc:	20000574 	.word	0x20000574
 80012e0:	20000570 	.word	0x20000570
 80012e4:	20000738 	.word	0x20000738
 80012e8:	200000c8 	.word	0x200000c8
 80012ec:	200000c4 	.word	0x200000c4
 80012f0:	200000c5 	.word	0x200000c5
 80012f4:	20000370 	.word	0x20000370
 80012f8:	200006f0 	.word	0x200006f0
 80012fc:	080017b1 	.word	0x080017b1
 8001300:	08001da1 	.word	0x08001da1
 8001304:	08007697 	.word	0x08007697
 8001308:	40010000 	.word	0x40010000
 800130c:	40010400 	.word	0x40010400
 8001310:	2300      	movs	r3, #0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d007      	beq.n	8001326 <ARGB_Show_left+0x2ce>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8001316:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <ARGB_Show_left+0x374>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800131c:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <ARGB_Show_left+0x374>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001324:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001326:	4b29      	ldr	r3, [pc, #164]	; (80013cc <ARGB_Show_left+0x374>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a29      	ldr	r2, [pc, #164]	; (80013d0 <ARGB_Show_left+0x378>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d022      	beq.n	8001376 <ARGB_Show_left+0x31e>
 8001330:	4b26      	ldr	r3, [pc, #152]	; (80013cc <ARGB_Show_left+0x374>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001338:	d01d      	beq.n	8001376 <ARGB_Show_left+0x31e>
 800133a:	4b24      	ldr	r3, [pc, #144]	; (80013cc <ARGB_Show_left+0x374>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a25      	ldr	r2, [pc, #148]	; (80013d4 <ARGB_Show_left+0x37c>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d018      	beq.n	8001376 <ARGB_Show_left+0x31e>
 8001344:	4b21      	ldr	r3, [pc, #132]	; (80013cc <ARGB_Show_left+0x374>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a23      	ldr	r2, [pc, #140]	; (80013d8 <ARGB_Show_left+0x380>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d013      	beq.n	8001376 <ARGB_Show_left+0x31e>
 800134e:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <ARGB_Show_left+0x374>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a22      	ldr	r2, [pc, #136]	; (80013dc <ARGB_Show_left+0x384>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d00e      	beq.n	8001376 <ARGB_Show_left+0x31e>
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <ARGB_Show_left+0x374>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a20      	ldr	r2, [pc, #128]	; (80013e0 <ARGB_Show_left+0x388>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d009      	beq.n	8001376 <ARGB_Show_left+0x31e>
 8001362:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <ARGB_Show_left+0x374>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a1f      	ldr	r2, [pc, #124]	; (80013e4 <ARGB_Show_left+0x38c>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d004      	beq.n	8001376 <ARGB_Show_left+0x31e>
 800136c:	4b17      	ldr	r3, [pc, #92]	; (80013cc <ARGB_Show_left+0x374>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a1d      	ldr	r2, [pc, #116]	; (80013e8 <ARGB_Show_left+0x390>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d111      	bne.n	800139a <ARGB_Show_left+0x342>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <ARGB_Show_left+0x374>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	2b06      	cmp	r3, #6
 8001386:	d011      	beq.n	80013ac <ARGB_Show_left+0x354>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001388:	4b10      	ldr	r3, [pc, #64]	; (80013cc <ARGB_Show_left+0x374>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <ARGB_Show_left+0x374>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f042 0201 	orr.w	r2, r2, #1
 8001396:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001398:	e008      	b.n	80013ac <ARGB_Show_left+0x354>
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <ARGB_Show_left+0x374>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <ARGB_Show_left+0x374>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f042 0201 	orr.w	r2, r2, #1
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	e000      	b.n	80013ae <ARGB_Show_left+0x356>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 80013ac:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f47f af4a 	bne.w	800124e <ARGB_Show_left+0x1f6>
        }
        BUF_COUNTER_LEFT = 2;
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <ARGB_Show_left+0x394>)
 80013bc:	2202      	movs	r2, #2
 80013be:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 80013c0:	2302      	movs	r3, #2
    }
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200006f0 	.word	0x200006f0
 80013d0:	40010000 	.word	0x40010000
 80013d4:	40000400 	.word	0x40000400
 80013d8:	40000800 	.word	0x40000800
 80013dc:	40000c00 	.word	0x40000c00
 80013e0:	40010400 	.word	0x40010400
 80013e4:	40014000 	.word	0x40014000
 80013e8:	40001800 	.word	0x40001800
 80013ec:	20000570 	.word	0x20000570

080013f0 <ARGB_Show_right>:
// ----------------------------------------------------------------------
ARGB_STATE ARGB_Show_right(void) {             //////////////////////////////////////   BUF_COUNTER  ?????
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
	ARGB_LOC_ST_RIGHT = ARGB_BUSY;
 80013f6:	4b9f      	ldr	r3, [pc, #636]	; (8001674 <ARGB_Show_right+0x284>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER_RIGHT != 0 || DMA_HANDLE_RIGHT.State != HAL_DMA_STATE_READY) {
 80013fc:	4b9e      	ldr	r3, [pc, #632]	; (8001678 <ARGB_Show_right+0x288>)
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	b29b      	uxth	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d105      	bne.n	8001412 <ARGB_Show_right+0x22>
 8001406:	4b9d      	ldr	r3, [pc, #628]	; (800167c <ARGB_Show_right+0x28c>)
 8001408:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b01      	cmp	r3, #1
 8001410:	d001      	beq.n	8001416 <ARGB_Show_right+0x26>
        return ARGB_BUSY;
 8001412:	2300      	movs	r3, #0
 8001414:	e1a1      	b.n	800175a <ARGB_Show_right+0x36a>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 8001416:	2300      	movs	r3, #0
 8001418:	71fb      	strb	r3, [r7, #7]
 800141a:	e0dc      	b.n	80015d6 <ARGB_Show_right+0x1e6>
            // set first transfer from first values
        	PWM_BUF_RIGHT[i] = (((RGB_BUF_RIGHT[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800141c:	4b98      	ldr	r3, [pc, #608]	; (8001680 <ARGB_Show_right+0x290>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	461a      	mov	r2, r3
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001430:	2b00      	cmp	r3, #0
 8001432:	dd04      	ble.n	800143e <ARGB_Show_right+0x4e>
 8001434:	4b93      	ldr	r3, [pc, #588]	; (8001684 <ARGB_Show_right+0x294>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	461a      	mov	r2, r3
 800143c:	e003      	b.n	8001446 <ARGB_Show_right+0x56>
 800143e:	4b92      	ldr	r3, [pc, #584]	; (8001688 <ARGB_Show_right+0x298>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	461a      	mov	r2, r3
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	4619      	mov	r1, r3
 800144c:	4b8f      	ldr	r3, [pc, #572]	; (800168c <ARGB_Show_right+0x29c>)
 800144e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        	PWM_BUF_RIGHT[i + 8] = (((RGB_BUF_RIGHT[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001452:	4b8b      	ldr	r3, [pc, #556]	; (8001680 <ARGB_Show_right+0x290>)
 8001454:	785b      	ldrb	r3, [r3, #1]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	461a      	mov	r2, r3
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001466:	2b00      	cmp	r3, #0
 8001468:	dd04      	ble.n	8001474 <ARGB_Show_right+0x84>
 800146a:	4b86      	ldr	r3, [pc, #536]	; (8001684 <ARGB_Show_right+0x294>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	4619      	mov	r1, r3
 8001472:	e003      	b.n	800147c <ARGB_Show_right+0x8c>
 8001474:	4b84      	ldr	r3, [pc, #528]	; (8001688 <ARGB_Show_right+0x298>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	4619      	mov	r1, r3
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	3308      	adds	r3, #8
 8001482:	4a82      	ldr	r2, [pc, #520]	; (800168c <ARGB_Show_right+0x29c>)
 8001484:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 16] = (((RGB_BUF_RIGHT[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001488:	4b7d      	ldr	r3, [pc, #500]	; (8001680 <ARGB_Show_right+0x290>)
 800148a:	789b      	ldrb	r3, [r3, #2]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	461a      	mov	r2, r3
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149c:	2b00      	cmp	r3, #0
 800149e:	dd04      	ble.n	80014aa <ARGB_Show_right+0xba>
 80014a0:	4b78      	ldr	r3, [pc, #480]	; (8001684 <ARGB_Show_right+0x294>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	4619      	mov	r1, r3
 80014a8:	e003      	b.n	80014b2 <ARGB_Show_right+0xc2>
 80014aa:	4b77      	ldr	r3, [pc, #476]	; (8001688 <ARGB_Show_right+0x298>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	4619      	mov	r1, r3
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	3310      	adds	r3, #16
 80014b8:	4a74      	ldr	r2, [pc, #464]	; (800168c <ARGB_Show_right+0x29c>)
 80014ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 24] = (((RGB_BUF_RIGHT[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80014be:	4b70      	ldr	r3, [pc, #448]	; (8001680 <ARGB_Show_right+0x290>)
 80014c0:	78db      	ldrb	r3, [r3, #3]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	461a      	mov	r2, r3
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	dd04      	ble.n	80014e0 <ARGB_Show_right+0xf0>
 80014d6:	4b6b      	ldr	r3, [pc, #428]	; (8001684 <ARGB_Show_right+0x294>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	4619      	mov	r1, r3
 80014de:	e003      	b.n	80014e8 <ARGB_Show_right+0xf8>
 80014e0:	4b69      	ldr	r3, [pc, #420]	; (8001688 <ARGB_Show_right+0x298>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	4619      	mov	r1, r3
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	3318      	adds	r3, #24
 80014ee:	4a67      	ldr	r2, [pc, #412]	; (800168c <ARGB_Show_right+0x29c>)
 80014f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 32] = (((RGB_BUF_RIGHT[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80014f4:	4b62      	ldr	r3, [pc, #392]	; (8001680 <ARGB_Show_right+0x290>)
 80014f6:	791b      	ldrb	r3, [r3, #4]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	461a      	mov	r2, r3
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001508:	2b00      	cmp	r3, #0
 800150a:	dd04      	ble.n	8001516 <ARGB_Show_right+0x126>
 800150c:	4b5d      	ldr	r3, [pc, #372]	; (8001684 <ARGB_Show_right+0x294>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	4619      	mov	r1, r3
 8001514:	e003      	b.n	800151e <ARGB_Show_right+0x12e>
 8001516:	4b5c      	ldr	r3, [pc, #368]	; (8001688 <ARGB_Show_right+0x298>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	4619      	mov	r1, r3
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	3320      	adds	r3, #32
 8001524:	4a59      	ldr	r2, [pc, #356]	; (800168c <ARGB_Show_right+0x29c>)
 8001526:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 40] = (((RGB_BUF_RIGHT[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800152a:	4b55      	ldr	r3, [pc, #340]	; (8001680 <ARGB_Show_right+0x290>)
 800152c:	795b      	ldrb	r3, [r3, #5]
 800152e:	b2db      	uxtb	r3, r3
 8001530:	461a      	mov	r2, r3
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800153e:	2b00      	cmp	r3, #0
 8001540:	dd04      	ble.n	800154c <ARGB_Show_right+0x15c>
 8001542:	4b50      	ldr	r3, [pc, #320]	; (8001684 <ARGB_Show_right+0x294>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	4619      	mov	r1, r3
 800154a:	e003      	b.n	8001554 <ARGB_Show_right+0x164>
 800154c:	4b4e      	ldr	r3, [pc, #312]	; (8001688 <ARGB_Show_right+0x298>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	4619      	mov	r1, r3
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	b2db      	uxtb	r3, r3
 8001558:	3328      	adds	r3, #40	; 0x28
 800155a:	4a4c      	ldr	r2, [pc, #304]	; (800168c <ARGB_Show_right+0x29c>)
 800155c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#ifdef SK6812
        	PWM_BUF_RIGHT[i + 48] = (((RGB_BUF_RIGHT[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001560:	4b47      	ldr	r3, [pc, #284]	; (8001680 <ARGB_Show_right+0x290>)
 8001562:	799b      	ldrb	r3, [r3, #6]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	461a      	mov	r2, r3
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001574:	2b00      	cmp	r3, #0
 8001576:	dd04      	ble.n	8001582 <ARGB_Show_right+0x192>
 8001578:	4b42      	ldr	r3, [pc, #264]	; (8001684 <ARGB_Show_right+0x294>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	4619      	mov	r1, r3
 8001580:	e003      	b.n	800158a <ARGB_Show_right+0x19a>
 8001582:	4b41      	ldr	r3, [pc, #260]	; (8001688 <ARGB_Show_right+0x298>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	b2db      	uxtb	r3, r3
 8001588:	4619      	mov	r1, r3
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	3330      	adds	r3, #48	; 0x30
 8001590:	4a3e      	ldr	r2, [pc, #248]	; (800168c <ARGB_Show_right+0x29c>)
 8001592:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 56] = (((RGB_BUF_RIGHT[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001596:	4b3a      	ldr	r3, [pc, #232]	; (8001680 <ARGB_Show_right+0x290>)
 8001598:	79db      	ldrb	r3, [r3, #7]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	461a      	mov	r2, r3
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	dd04      	ble.n	80015b8 <ARGB_Show_right+0x1c8>
 80015ae:	4b35      	ldr	r3, [pc, #212]	; (8001684 <ARGB_Show_right+0x294>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	4619      	mov	r1, r3
 80015b6:	e003      	b.n	80015c0 <ARGB_Show_right+0x1d0>
 80015b8:	4b33      	ldr	r3, [pc, #204]	; (8001688 <ARGB_Show_right+0x298>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	4619      	mov	r1, r3
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	3338      	adds	r3, #56	; 0x38
 80015c6:	4a31      	ldr	r2, [pc, #196]	; (800168c <ARGB_Show_right+0x29c>)
 80015c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	3301      	adds	r3, #1
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	71fb      	strb	r3, [r7, #7]
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b07      	cmp	r3, #7
 80015dc:	f67f af1e 	bls.w	800141c <ARGB_Show_right+0x2c>
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 80015e4:	e0b1      	b.n	800174a <ARGB_Show_right+0x35a>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH_RIGHT) == HAL_TIM_CHANNEL_STATE_BUSY) {
 80015e6:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <ARGB_Show_right+0x2a0>)
 80015e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d102      	bne.n	80015f8 <ARGB_Show_right+0x208>
                DMA_Send_Stat = HAL_BUSY;
 80015f2:	2302      	movs	r3, #2
 80015f4:	73fb      	strb	r3, [r7, #15]
                continue;
 80015f6:	e0a8      	b.n	800174a <ARGB_Show_right+0x35a>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH_RIGHT) == HAL_TIM_CHANNEL_STATE_READY) {
 80015f8:	4b25      	ldr	r3, [pc, #148]	; (8001690 <ARGB_Show_right+0x2a0>)
 80015fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b01      	cmp	r3, #1
 8001602:	d11d      	bne.n	8001640 <ARGB_Show_right+0x250>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH_RIGHT, HAL_TIM_CHANNEL_STATE_BUSY);
 8001604:	4b22      	ldr	r3, [pc, #136]	; (8001690 <ARGB_Show_right+0x2a0>)
 8001606:	2202      	movs	r2, #2
 8001608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#elif TIM_CH_RIGHT == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID_R TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC_R TIM_DMA_CC4
#define ARGB_TIM_CCR_R CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt_right;
 800160c:	4b20      	ldr	r3, [pc, #128]	; (8001690 <ARGB_Show_right+0x2a0>)
 800160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001610:	4a20      	ldr	r2, [pc, #128]	; (8001694 <ARGB_Show_right+0x2a4>)
 8001612:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt_right;
 8001614:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <ARGB_Show_right+0x2a0>)
 8001616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001618:	4a1f      	ldr	r2, [pc, #124]	; (8001698 <ARGB_Show_right+0x2a8>)
 800161a:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R]->XferErrorCallback = TIM_DMAError;
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <ARGB_Show_right+0x2a0>)
 800161e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001620:	4a1e      	ldr	r2, [pc, #120]	; (800169c <ARGB_Show_right+0x2ac>)
 8001622:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R], (u32_t) PWM_BUF_RIGHT,
 8001624:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <ARGB_Show_right+0x2a0>)
 8001626:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001628:	4918      	ldr	r1, [pc, #96]	; (800168c <ARGB_Show_right+0x29c>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR_R,
 800162a:	4b19      	ldr	r3, [pc, #100]	; (8001690 <ARGB_Show_right+0x2a0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	3340      	adds	r3, #64	; 0x40
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R], (u32_t) PWM_BUF_RIGHT,
 8001630:	461a      	mov	r2, r3
 8001632:	2340      	movs	r3, #64	; 0x40
 8001634:	f002 fc2c 	bl	8003e90 <HAL_DMA_Start_IT>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d006      	beq.n	800164c <ARGB_Show_right+0x25c>
 800163e:	e002      	b.n	8001646 <ARGB_Show_right+0x256>
                DMA_Send_Stat = HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	73fb      	strb	r3, [r7, #15]
                continue;
 8001644:	e081      	b.n	800174a <ARGB_Show_right+0x35a>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	73fb      	strb	r3, [r7, #15]
                continue;
 800164a:	e07e      	b.n	800174a <ARGB_Show_right+0x35a>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC_R);
 800164c:	4b10      	ldr	r3, [pc, #64]	; (8001690 <ARGB_Show_right+0x2a0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68da      	ldr	r2, [r3, #12]
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <ARGB_Show_right+0x2a0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800165a:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <ARGB_Show_right+0x2a0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0f      	ldr	r2, [pc, #60]	; (80016a0 <ARGB_Show_right+0x2b0>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d004      	beq.n	8001670 <ARGB_Show_right+0x280>
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <ARGB_Show_right+0x2a0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <ARGB_Show_right+0x2b4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d11b      	bne.n	80016a8 <ARGB_Show_right+0x2b8>
 8001670:	2301      	movs	r3, #1
 8001672:	e01a      	b.n	80016aa <ARGB_Show_right+0x2ba>
 8001674:	20000575 	.word	0x20000575
 8001678:	20000572 	.word	0x20000572
 800167c:	20000798 	.word	0x20000798
 8001680:	2000021c 	.word	0x2000021c
 8001684:	200000c4 	.word	0x200000c4
 8001688:	200000c5 	.word	0x200000c5
 800168c:	20000470 	.word	0x20000470
 8001690:	200006f0 	.word	0x200006f0
 8001694:	08001aa9 	.word	0x08001aa9
 8001698:	08001f51 	.word	0x08001f51
 800169c:	08007697 	.word	0x08007697
 80016a0:	40010000 	.word	0x40010000
 80016a4:	40010400 	.word	0x40010400
 80016a8:	2300      	movs	r3, #0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d007      	beq.n	80016be <ARGB_Show_right+0x2ce>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 80016ae:	4b2d      	ldr	r3, [pc, #180]	; (8001764 <ARGB_Show_right+0x374>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016b4:	4b2b      	ldr	r3, [pc, #172]	; (8001764 <ARGB_Show_right+0x374>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016bc:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 80016be:	4b29      	ldr	r3, [pc, #164]	; (8001764 <ARGB_Show_right+0x374>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a29      	ldr	r2, [pc, #164]	; (8001768 <ARGB_Show_right+0x378>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d022      	beq.n	800170e <ARGB_Show_right+0x31e>
 80016c8:	4b26      	ldr	r3, [pc, #152]	; (8001764 <ARGB_Show_right+0x374>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d0:	d01d      	beq.n	800170e <ARGB_Show_right+0x31e>
 80016d2:	4b24      	ldr	r3, [pc, #144]	; (8001764 <ARGB_Show_right+0x374>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a25      	ldr	r2, [pc, #148]	; (800176c <ARGB_Show_right+0x37c>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d018      	beq.n	800170e <ARGB_Show_right+0x31e>
 80016dc:	4b21      	ldr	r3, [pc, #132]	; (8001764 <ARGB_Show_right+0x374>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a23      	ldr	r2, [pc, #140]	; (8001770 <ARGB_Show_right+0x380>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d013      	beq.n	800170e <ARGB_Show_right+0x31e>
 80016e6:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <ARGB_Show_right+0x374>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a22      	ldr	r2, [pc, #136]	; (8001774 <ARGB_Show_right+0x384>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d00e      	beq.n	800170e <ARGB_Show_right+0x31e>
 80016f0:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <ARGB_Show_right+0x374>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a20      	ldr	r2, [pc, #128]	; (8001778 <ARGB_Show_right+0x388>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d009      	beq.n	800170e <ARGB_Show_right+0x31e>
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <ARGB_Show_right+0x374>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a1f      	ldr	r2, [pc, #124]	; (800177c <ARGB_Show_right+0x38c>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d004      	beq.n	800170e <ARGB_Show_right+0x31e>
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <ARGB_Show_right+0x374>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a1d      	ldr	r2, [pc, #116]	; (8001780 <ARGB_Show_right+0x390>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d111      	bne.n	8001732 <ARGB_Show_right+0x342>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <ARGB_Show_right+0x374>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	2b06      	cmp	r3, #6
 800171e:	d011      	beq.n	8001744 <ARGB_Show_right+0x354>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001720:	4b10      	ldr	r3, [pc, #64]	; (8001764 <ARGB_Show_right+0x374>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <ARGB_Show_right+0x374>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0201 	orr.w	r2, r2, #1
 800172e:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001730:	e008      	b.n	8001744 <ARGB_Show_right+0x354>
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001732:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <ARGB_Show_right+0x374>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <ARGB_Show_right+0x374>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f042 0201 	orr.w	r2, r2, #1
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	e000      	b.n	8001746 <ARGB_Show_right+0x356>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001744:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	2b00      	cmp	r3, #0
 800174e:	f47f af4a 	bne.w	80015e6 <ARGB_Show_right+0x1f6>
        }
        BUF_COUNTER_RIGHT = 2;
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <ARGB_Show_right+0x394>)
 8001754:	2202      	movs	r2, #2
 8001756:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 8001758:	2302      	movs	r3, #2
    }
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200006f0 	.word	0x200006f0
 8001768:	40010000 	.word	0x40010000
 800176c:	40000400 	.word	0x40000400
 8001770:	40000800 	.word	0x40000800
 8001774:	40000c00 	.word	0x40000c00
 8001778:	40010400 	.word	0x40010400
 800177c:	40014000 	.word	0x40014000
 8001780:	40001800 	.word	0x40001800
 8001784:	20000572 	.word	0x20000572

08001788 <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	460a      	mov	r2, r1
 8001792:	71fb      	strb	r3, [r7, #7]
 8001794:	4613      	mov	r3, r2
 8001796:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	79ba      	ldrb	r2, [r7, #6]
 800179c:	fb02 f303 	mul.w	r3, r2, r3
 80017a0:	121b      	asrs	r3, r3, #8
 80017a2:	b2db      	uxtb	r3, r3
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <ARGB_TIM_DMADelayPulseCplt_left>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt_left(DMA_HandleTypeDef *hdma) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017bc:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE_LEFT || htim != &TIM_HANDLE) return;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a8c      	ldr	r2, [pc, #560]	; (80019f4 <ARGB_TIM_DMADelayPulseCplt_left+0x244>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	f040 8168 	bne.w	8001a98 <ARGB_TIM_DMADelayPulseCplt_left+0x2e8>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4a8b      	ldr	r2, [pc, #556]	; (80019f8 <ARGB_TIM_DMADelayPulseCplt_left+0x248>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	f040 8163 	bne.w	8001a98 <ARGB_TIM_DMADelayPulseCplt_left+0x2e8>
    if (BUF_COUNTER_LEFT == 0) return; // if no data to transmit - return
 80017d2:	4b8a      	ldr	r3, [pc, #552]	; (80019fc <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 815f 	beq.w	8001a9c <ARGB_TIM_DMADelayPulseCplt_left+0x2ec>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d10b      	bne.n	8001800 <ARGB_TIM_DMADelayPulseCplt_left+0x50>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2201      	movs	r2, #1
 80017ec:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d136      	bne.n	8001864 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017fe:	e031      	b.n	8001864 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	429a      	cmp	r2, r3
 8001808:	d10b      	bne.n	8001822 <ARGB_TIM_DMADelayPulseCplt_left+0x72>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2202      	movs	r2, #2
 800180e:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69db      	ldr	r3, [r3, #28]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d125      	bne.n	8001864 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001820:	e020      	b.n	8001864 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	429a      	cmp	r2, r3
 800182a:	d10b      	bne.n	8001844 <ARGB_TIM_DMADelayPulseCplt_left+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2204      	movs	r2, #4
 8001830:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d114      	bne.n	8001864 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001842:	e00f      	b.n	8001864 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	429a      	cmp	r2, r3
 800184c:	d10a      	bne.n	8001864 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2208      	movs	r2, #8
 8001852:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d103      	bne.n	8001864 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER_LEFT < NUM_PIXELS) {
 8001864:	4b65      	ldr	r3, [pc, #404]	; (80019fc <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	b29b      	uxth	r3, r3
 800186a:	2b54      	cmp	r3, #84	; 0x54
 800186c:	f200 8094 	bhi.w	8001998 <ARGB_TIM_DMADelayPulseCplt_left+0x1e8>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001870:	2300      	movs	r3, #0
 8001872:	72fb      	strb	r3, [r7, #11]
 8001874:	e083      	b.n	800197e <ARGB_TIM_DMADelayPulseCplt_left+0x1ce>
#ifdef SK6812
        	PWM_BUF_LEFT[i + 32] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001876:	4b61      	ldr	r3, [pc, #388]	; (80019fc <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	b29b      	uxth	r3, r3
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4a60      	ldr	r2, [pc, #384]	; (8001a00 <ARGB_TIM_DMADelayPulseCplt_left+0x250>)
 8001880:	5cd3      	ldrb	r3, [r2, r3]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	461a      	mov	r2, r3
 8001886:	7afb      	ldrb	r3, [r7, #11]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001892:	2b00      	cmp	r3, #0
 8001894:	dd04      	ble.n	80018a0 <ARGB_TIM_DMADelayPulseCplt_left+0xf0>
 8001896:	4b5b      	ldr	r3, [pc, #364]	; (8001a04 <ARGB_TIM_DMADelayPulseCplt_left+0x254>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	b2db      	uxtb	r3, r3
 800189c:	4619      	mov	r1, r3
 800189e:	e003      	b.n	80018a8 <ARGB_TIM_DMADelayPulseCplt_left+0xf8>
 80018a0:	4b59      	ldr	r3, [pc, #356]	; (8001a08 <ARGB_TIM_DMADelayPulseCplt_left+0x258>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	4619      	mov	r1, r3
 80018a8:	7afb      	ldrb	r3, [r7, #11]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	3320      	adds	r3, #32
 80018ae:	4a57      	ldr	r2, [pc, #348]	; (8001a0c <ARGB_TIM_DMADelayPulseCplt_left+0x25c>)
 80018b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 40] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80018b4:	4b51      	ldr	r3, [pc, #324]	; (80019fc <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	3301      	adds	r3, #1
 80018be:	4a50      	ldr	r2, [pc, #320]	; (8001a00 <ARGB_TIM_DMADelayPulseCplt_left+0x250>)
 80018c0:	5cd3      	ldrb	r3, [r2, r3]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	461a      	mov	r2, r3
 80018c6:	7afb      	ldrb	r3, [r7, #11]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	dd04      	ble.n	80018e0 <ARGB_TIM_DMADelayPulseCplt_left+0x130>
 80018d6:	4b4b      	ldr	r3, [pc, #300]	; (8001a04 <ARGB_TIM_DMADelayPulseCplt_left+0x254>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	4619      	mov	r1, r3
 80018de:	e003      	b.n	80018e8 <ARGB_TIM_DMADelayPulseCplt_left+0x138>
 80018e0:	4b49      	ldr	r3, [pc, #292]	; (8001a08 <ARGB_TIM_DMADelayPulseCplt_left+0x258>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	4619      	mov	r1, r3
 80018e8:	7afb      	ldrb	r3, [r7, #11]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	3328      	adds	r3, #40	; 0x28
 80018ee:	4a47      	ldr	r2, [pc, #284]	; (8001a0c <ARGB_TIM_DMADelayPulseCplt_left+0x25c>)
 80018f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 48] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80018f4:	4b41      	ldr	r3, [pc, #260]	; (80019fc <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	3302      	adds	r3, #2
 80018fe:	4a40      	ldr	r2, [pc, #256]	; (8001a00 <ARGB_TIM_DMADelayPulseCplt_left+0x250>)
 8001900:	5cd3      	ldrb	r3, [r2, r3]
 8001902:	b2db      	uxtb	r3, r3
 8001904:	461a      	mov	r2, r3
 8001906:	7afb      	ldrb	r3, [r7, #11]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001912:	2b00      	cmp	r3, #0
 8001914:	dd04      	ble.n	8001920 <ARGB_TIM_DMADelayPulseCplt_left+0x170>
 8001916:	4b3b      	ldr	r3, [pc, #236]	; (8001a04 <ARGB_TIM_DMADelayPulseCplt_left+0x254>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	4619      	mov	r1, r3
 800191e:	e003      	b.n	8001928 <ARGB_TIM_DMADelayPulseCplt_left+0x178>
 8001920:	4b39      	ldr	r3, [pc, #228]	; (8001a08 <ARGB_TIM_DMADelayPulseCplt_left+0x258>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	4619      	mov	r1, r3
 8001928:	7afb      	ldrb	r3, [r7, #11]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	3330      	adds	r3, #48	; 0x30
 800192e:	4a37      	ldr	r2, [pc, #220]	; (8001a0c <ARGB_TIM_DMADelayPulseCplt_left+0x25c>)
 8001930:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 56] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001934:	4b31      	ldr	r3, [pc, #196]	; (80019fc <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	b29b      	uxth	r3, r3
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	3303      	adds	r3, #3
 800193e:	4a30      	ldr	r2, [pc, #192]	; (8001a00 <ARGB_TIM_DMADelayPulseCplt_left+0x250>)
 8001940:	5cd3      	ldrb	r3, [r2, r3]
 8001942:	b2db      	uxtb	r3, r3
 8001944:	461a      	mov	r2, r3
 8001946:	7afb      	ldrb	r3, [r7, #11]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001952:	2b00      	cmp	r3, #0
 8001954:	dd04      	ble.n	8001960 <ARGB_TIM_DMADelayPulseCplt_left+0x1b0>
 8001956:	4b2b      	ldr	r3, [pc, #172]	; (8001a04 <ARGB_TIM_DMADelayPulseCplt_left+0x254>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	4619      	mov	r1, r3
 800195e:	e003      	b.n	8001968 <ARGB_TIM_DMADelayPulseCplt_left+0x1b8>
 8001960:	4b29      	ldr	r3, [pc, #164]	; (8001a08 <ARGB_TIM_DMADelayPulseCplt_left+0x258>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	4619      	mov	r1, r3
 8001968:	7afb      	ldrb	r3, [r7, #11]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	3338      	adds	r3, #56	; 0x38
 800196e:	4a27      	ldr	r2, [pc, #156]	; (8001a0c <ARGB_TIM_DMADelayPulseCplt_left+0x25c>)
 8001970:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001974:	7afb      	ldrb	r3, [r7, #11]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	3301      	adds	r3, #1
 800197a:	b2db      	uxtb	r3, r3
 800197c:	72fb      	strb	r3, [r7, #11]
 800197e:	7afb      	ldrb	r3, [r7, #11]
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b07      	cmp	r3, #7
 8001984:	f67f af77 	bls.w	8001876 <ARGB_TIM_DMADelayPulseCplt_left+0xc6>
        	PWM_BUF_LEFT[i + 24] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_LEFT[i + 32] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_LEFT[i + 40] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        BUF_COUNTER_LEFT++;
 8001988:	4b1c      	ldr	r3, [pc, #112]	; (80019fc <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	b29b      	uxth	r3, r3
 800198e:	3301      	adds	r3, #1
 8001990:	b29a      	uxth	r2, r3
 8001992:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001994:	801a      	strh	r2, [r3, #0]
 8001996:	e07b      	b.n	8001a90 <ARGB_TIM_DMADelayPulseCplt_left+0x2e0>
    } else if (BUF_COUNTER_LEFT < NUM_PIXELS + 2) { // if RET transfer
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	b29b      	uxth	r3, r3
 800199e:	2b56      	cmp	r3, #86	; 0x56
 80019a0:	d80c      	bhi.n	80019bc <ARGB_TIM_DMADelayPulseCplt_left+0x20c>
        memset((dma_siz *) &PWM_BUF_LEFT[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 80019a2:	2280      	movs	r2, #128	; 0x80
 80019a4:	2100      	movs	r1, #0
 80019a6:	481a      	ldr	r0, [pc, #104]	; (8001a10 <ARGB_TIM_DMADelayPulseCplt_left+0x260>)
 80019a8:	f00b f800 	bl	800c9ac <memset>
        BUF_COUNTER_LEFT++;
 80019ac:	4b13      	ldr	r3, [pc, #76]	; (80019fc <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	3301      	adds	r3, #1
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 80019b8:	801a      	strh	r2, [r3, #0]
 80019ba:	e069      	b.n	8001a90 <ARGB_TIM_DMADelayPulseCplt_left+0x2e0>
    } else { // if END of transfer
    	BUF_COUNTER_LEFT = 0;
 80019bc:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	801a      	strh	r2, [r3, #0]
#if TIM_CH_LEFT == TIM_CHANNEL_2
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
#endif
#if TIM_CH_LEFT == TIM_CHANNEL_3
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019d0:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d6:	4618      	mov	r0, r3
 80019d8:	f002 fb22 	bl	8004020 <HAL_DMA_Abort_IT>
#endif
#if TIM_CH_LEFT == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0c      	ldr	r2, [pc, #48]	; (8001a14 <ARGB_TIM_DMADelayPulseCplt_left+0x264>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d004      	beq.n	80019f0 <ARGB_TIM_DMADelayPulseCplt_left+0x240>
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a0b      	ldr	r2, [pc, #44]	; (8001a18 <ARGB_TIM_DMADelayPulseCplt_left+0x268>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d115      	bne.n	8001a1c <ARGB_TIM_DMADelayPulseCplt_left+0x26c>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e014      	b.n	8001a1e <ARGB_TIM_DMADelayPulseCplt_left+0x26e>
 80019f4:	20000738 	.word	0x20000738
 80019f8:	200006f0 	.word	0x200006f0
 80019fc:	20000570 	.word	0x20000570
 8001a00:	200000c8 	.word	0x200000c8
 8001a04:	200000c4 	.word	0x200000c4
 8001a08:	200000c5 	.word	0x200000c5
 8001a0c:	20000370 	.word	0x20000370
 8001a10:	200003f0 	.word	0x200003f0
 8001a14:	40010000 	.word	0x40010000
 8001a18:	40010400 	.word	0x40010400
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d017      	beq.n	8001a52 <ARGB_TIM_DMADelayPulseCplt_left+0x2a2>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6a1a      	ldr	r2, [r3, #32]
 8001a28:	f241 1311 	movw	r3, #4369	; 0x1111
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10f      	bne.n	8001a52 <ARGB_TIM_DMADelayPulseCplt_left+0x2a2>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6a1a      	ldr	r2, [r3, #32]
 8001a38:	f240 4344 	movw	r3, #1092	; 0x444
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d107      	bne.n	8001a52 <ARGB_TIM_DMADelayPulseCplt_left+0x2a2>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a50:	645a      	str	r2, [r3, #68]	; 0x44
        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6a1a      	ldr	r2, [r3, #32]
 8001a58:	f241 1311 	movw	r3, #4369	; 0x1111
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10f      	bne.n	8001a82 <ARGB_TIM_DMADelayPulseCplt_left+0x2d2>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6a1a      	ldr	r2, [r3, #32]
 8001a68:	f240 4344 	movw	r3, #1092	; 0x444
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d107      	bne.n	8001a82 <ARGB_TIM_DMADelayPulseCplt_left+0x2d2>
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 0201 	bic.w	r2, r2, #1
 8001a80:	601a      	str	r2, [r3, #0]
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH_LEFT, HAL_TIM_CHANNEL_STATE_READY);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        ARGB_LOC_ST_LEFT = ARGB_READY;
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <ARGB_TIM_DMADelayPulseCplt_left+0x2f4>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	771a      	strb	r2, [r3, #28]
 8001a96:	e002      	b.n	8001a9e <ARGB_TIM_DMADelayPulseCplt_left+0x2ee>
    if (hdma != &DMA_HANDLE_LEFT || htim != &TIM_HANDLE) return;
 8001a98:	bf00      	nop
 8001a9a:	e000      	b.n	8001a9e <ARGB_TIM_DMADelayPulseCplt_left+0x2ee>
    if (BUF_COUNTER_LEFT == 0) return; // if no data to transmit - return
 8001a9c:	bf00      	nop
}
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000574 	.word	0x20000574

08001aa8 <ARGB_TIM_DMADelayPulseCplt_right>:
// -----------------------------------------------------------------------
static void ARGB_TIM_DMADelayPulseCplt_right(DMA_HandleTypeDef *hdma) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab4:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE_RIGHT || htim != &TIM_HANDLE) return;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a8c      	ldr	r2, [pc, #560]	; (8001cec <ARGB_TIM_DMADelayPulseCplt_right+0x244>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	f040 8168 	bne.w	8001d90 <ARGB_TIM_DMADelayPulseCplt_right+0x2e8>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4a8b      	ldr	r2, [pc, #556]	; (8001cf0 <ARGB_TIM_DMADelayPulseCplt_right+0x248>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	f040 8163 	bne.w	8001d90 <ARGB_TIM_DMADelayPulseCplt_right+0x2e8>
    if (BUF_COUNTER_RIGHT == 0) return; // if no data to transmit - return    // ,<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 8001aca:	4b8a      	ldr	r3, [pc, #552]	; (8001cf4 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 815f 	beq.w	8001d94 <ARGB_TIM_DMADelayPulseCplt_right+0x2ec>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d10b      	bne.n	8001af8 <ARGB_TIM_DMADelayPulseCplt_right+0x50>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d136      	bne.n	8001b5c <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001af6:	e031      	b.n	8001b5c <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d10b      	bne.n	8001b1a <ARGB_TIM_DMADelayPulseCplt_right+0x72>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2202      	movs	r2, #2
 8001b06:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d125      	bne.n	8001b5c <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b18:	e020      	b.n	8001b5c <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d10b      	bne.n	8001b3c <ARGB_TIM_DMADelayPulseCplt_right+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2204      	movs	r2, #4
 8001b28:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d114      	bne.n	8001b5c <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b3a:	e00f      	b.n	8001b5c <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d10a      	bne.n	8001b5c <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2208      	movs	r2, #8
 8001b4a:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d103      	bne.n	8001b5c <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER_RIGHT < NUM_PIXELS) {
 8001b5c:	4b65      	ldr	r3, [pc, #404]	; (8001cf4 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	2b54      	cmp	r3, #84	; 0x54
 8001b64:	f200 8094 	bhi.w	8001c90 <ARGB_TIM_DMADelayPulseCplt_right+0x1e8>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001b68:	2300      	movs	r3, #0
 8001b6a:	72fb      	strb	r3, [r7, #11]
 8001b6c:	e083      	b.n	8001c76 <ARGB_TIM_DMADelayPulseCplt_right+0x1ce>
#ifdef SK6812
        	PWM_BUF_RIGHT[i + 32] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001b6e:	4b61      	ldr	r3, [pc, #388]	; (8001cf4 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4a60      	ldr	r2, [pc, #384]	; (8001cf8 <ARGB_TIM_DMADelayPulseCplt_right+0x250>)
 8001b78:	5cd3      	ldrb	r3, [r2, r3]
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	7afb      	ldrb	r3, [r7, #11]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	dd04      	ble.n	8001b98 <ARGB_TIM_DMADelayPulseCplt_right+0xf0>
 8001b8e:	4b5b      	ldr	r3, [pc, #364]	; (8001cfc <ARGB_TIM_DMADelayPulseCplt_right+0x254>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	4619      	mov	r1, r3
 8001b96:	e003      	b.n	8001ba0 <ARGB_TIM_DMADelayPulseCplt_right+0xf8>
 8001b98:	4b59      	ldr	r3, [pc, #356]	; (8001d00 <ARGB_TIM_DMADelayPulseCplt_right+0x258>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	7afb      	ldrb	r3, [r7, #11]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	3320      	adds	r3, #32
 8001ba6:	4a57      	ldr	r2, [pc, #348]	; (8001d04 <ARGB_TIM_DMADelayPulseCplt_right+0x25c>)
 8001ba8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 40] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001bac:	4b51      	ldr	r3, [pc, #324]	; (8001cf4 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	4a50      	ldr	r2, [pc, #320]	; (8001cf8 <ARGB_TIM_DMADelayPulseCplt_right+0x250>)
 8001bb8:	5cd3      	ldrb	r3, [r2, r3]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	7afb      	ldrb	r3, [r7, #11]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	dd04      	ble.n	8001bd8 <ARGB_TIM_DMADelayPulseCplt_right+0x130>
 8001bce:	4b4b      	ldr	r3, [pc, #300]	; (8001cfc <ARGB_TIM_DMADelayPulseCplt_right+0x254>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	e003      	b.n	8001be0 <ARGB_TIM_DMADelayPulseCplt_right+0x138>
 8001bd8:	4b49      	ldr	r3, [pc, #292]	; (8001d00 <ARGB_TIM_DMADelayPulseCplt_right+0x258>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	4619      	mov	r1, r3
 8001be0:	7afb      	ldrb	r3, [r7, #11]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	3328      	adds	r3, #40	; 0x28
 8001be6:	4a47      	ldr	r2, [pc, #284]	; (8001d04 <ARGB_TIM_DMADelayPulseCplt_right+0x25c>)
 8001be8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 48] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001bec:	4b41      	ldr	r3, [pc, #260]	; (8001cf4 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	3302      	adds	r3, #2
 8001bf6:	4a40      	ldr	r2, [pc, #256]	; (8001cf8 <ARGB_TIM_DMADelayPulseCplt_right+0x250>)
 8001bf8:	5cd3      	ldrb	r3, [r2, r3]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	7afb      	ldrb	r3, [r7, #11]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	dd04      	ble.n	8001c18 <ARGB_TIM_DMADelayPulseCplt_right+0x170>
 8001c0e:	4b3b      	ldr	r3, [pc, #236]	; (8001cfc <ARGB_TIM_DMADelayPulseCplt_right+0x254>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	4619      	mov	r1, r3
 8001c16:	e003      	b.n	8001c20 <ARGB_TIM_DMADelayPulseCplt_right+0x178>
 8001c18:	4b39      	ldr	r3, [pc, #228]	; (8001d00 <ARGB_TIM_DMADelayPulseCplt_right+0x258>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	4619      	mov	r1, r3
 8001c20:	7afb      	ldrb	r3, [r7, #11]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	3330      	adds	r3, #48	; 0x30
 8001c26:	4a37      	ldr	r2, [pc, #220]	; (8001d04 <ARGB_TIM_DMADelayPulseCplt_right+0x25c>)
 8001c28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 56] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001c2c:	4b31      	ldr	r3, [pc, #196]	; (8001cf4 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	3303      	adds	r3, #3
 8001c36:	4a30      	ldr	r2, [pc, #192]	; (8001cf8 <ARGB_TIM_DMADelayPulseCplt_right+0x250>)
 8001c38:	5cd3      	ldrb	r3, [r2, r3]
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	7afb      	ldrb	r3, [r7, #11]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	dd04      	ble.n	8001c58 <ARGB_TIM_DMADelayPulseCplt_right+0x1b0>
 8001c4e:	4b2b      	ldr	r3, [pc, #172]	; (8001cfc <ARGB_TIM_DMADelayPulseCplt_right+0x254>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	4619      	mov	r1, r3
 8001c56:	e003      	b.n	8001c60 <ARGB_TIM_DMADelayPulseCplt_right+0x1b8>
 8001c58:	4b29      	ldr	r3, [pc, #164]	; (8001d00 <ARGB_TIM_DMADelayPulseCplt_right+0x258>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	4619      	mov	r1, r3
 8001c60:	7afb      	ldrb	r3, [r7, #11]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	3338      	adds	r3, #56	; 0x38
 8001c66:	4a27      	ldr	r2, [pc, #156]	; (8001d04 <ARGB_TIM_DMADelayPulseCplt_right+0x25c>)
 8001c68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001c6c:	7afb      	ldrb	r3, [r7, #11]
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	3301      	adds	r3, #1
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	72fb      	strb	r3, [r7, #11]
 8001c76:	7afb      	ldrb	r3, [r7, #11]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b07      	cmp	r3, #7
 8001c7c:	f67f af77 	bls.w	8001b6e <ARGB_TIM_DMADelayPulseCplt_right+0xc6>
        	PWM_BUF_RIGHT[i + 24] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_RIGHT[i + 32] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_RIGHT[i + 40] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        BUF_COUNTER_RIGHT++;
 8001c80:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	3301      	adds	r3, #1
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001c8c:	801a      	strh	r2, [r3, #0]
 8001c8e:	e07b      	b.n	8001d88 <ARGB_TIM_DMADelayPulseCplt_right+0x2e0>
    } else if (BUF_COUNTER_RIGHT < NUM_PIXELS + 2) { // if RET transfer
 8001c90:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	2b56      	cmp	r3, #86	; 0x56
 8001c98:	d80c      	bhi.n	8001cb4 <ARGB_TIM_DMADelayPulseCplt_right+0x20c>
        memset((dma_siz *) &PWM_BUF_RIGHT[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 8001c9a:	2280      	movs	r2, #128	; 0x80
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	481a      	ldr	r0, [pc, #104]	; (8001d08 <ARGB_TIM_DMADelayPulseCplt_right+0x260>)
 8001ca0:	f00a fe84 	bl	800c9ac <memset>
        BUF_COUNTER_RIGHT++;
 8001ca4:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	3301      	adds	r3, #1
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001cb0:	801a      	strh	r2, [r3, #0]
 8001cb2:	e069      	b.n	8001d88 <ARGB_TIM_DMADelayPulseCplt_right+0x2e0>
    } else { // if END of transfer
    	BUF_COUNTER_RIGHT = 0;
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	801a      	strh	r2, [r3, #0]
#if TIM_CH_RIGHT == TIM_CHANNEL_3
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
#endif
#if TIM_CH_RIGHT == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cc8:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f002 f9a6 	bl	8004020 <HAL_DMA_Abort_IT>
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0c      	ldr	r2, [pc, #48]	; (8001d0c <ARGB_TIM_DMADelayPulseCplt_right+0x264>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d004      	beq.n	8001ce8 <ARGB_TIM_DMADelayPulseCplt_right+0x240>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a0b      	ldr	r2, [pc, #44]	; (8001d10 <ARGB_TIM_DMADelayPulseCplt_right+0x268>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d115      	bne.n	8001d14 <ARGB_TIM_DMADelayPulseCplt_right+0x26c>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e014      	b.n	8001d16 <ARGB_TIM_DMADelayPulseCplt_right+0x26e>
 8001cec:	20000798 	.word	0x20000798
 8001cf0:	200006f0 	.word	0x200006f0
 8001cf4:	20000572 	.word	0x20000572
 8001cf8:	2000021c 	.word	0x2000021c
 8001cfc:	200000c4 	.word	0x200000c4
 8001d00:	200000c5 	.word	0x200000c5
 8001d04:	20000470 	.word	0x20000470
 8001d08:	200004f0 	.word	0x200004f0
 8001d0c:	40010000 	.word	0x40010000
 8001d10:	40010400 	.word	0x40010400
 8001d14:	2300      	movs	r3, #0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d017      	beq.n	8001d4a <ARGB_TIM_DMADelayPulseCplt_right+0x2a2>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6a1a      	ldr	r2, [r3, #32]
 8001d20:	f241 1311 	movw	r3, #4369	; 0x1111
 8001d24:	4013      	ands	r3, r2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10f      	bne.n	8001d4a <ARGB_TIM_DMADelayPulseCplt_right+0x2a2>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6a1a      	ldr	r2, [r3, #32]
 8001d30:	f240 4344 	movw	r3, #1092	; 0x444
 8001d34:	4013      	ands	r3, r2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d107      	bne.n	8001d4a <ARGB_TIM_DMADelayPulseCplt_right+0x2a2>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d48:	645a      	str	r2, [r3, #68]	; 0x44
        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6a1a      	ldr	r2, [r3, #32]
 8001d50:	f241 1311 	movw	r3, #4369	; 0x1111
 8001d54:	4013      	ands	r3, r2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10f      	bne.n	8001d7a <ARGB_TIM_DMADelayPulseCplt_right+0x2d2>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6a1a      	ldr	r2, [r3, #32]
 8001d60:	f240 4344 	movw	r3, #1092	; 0x444
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d107      	bne.n	8001d7a <ARGB_TIM_DMADelayPulseCplt_right+0x2d2>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0201 	bic.w	r2, r2, #1
 8001d78:	601a      	str	r2, [r3, #0]
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH_RIGHT, HAL_TIM_CHANNEL_STATE_READY);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        ARGB_LOC_ST_RIGHT = ARGB_READY;
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <ARGB_TIM_DMADelayPulseCplt_right+0x2f4>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	771a      	strb	r2, [r3, #28]
 8001d8e:	e002      	b.n	8001d96 <ARGB_TIM_DMADelayPulseCplt_right+0x2ee>
    if (hdma != &DMA_HANDLE_RIGHT || htim != &TIM_HANDLE) return;
 8001d90:	bf00      	nop
 8001d92:	e000      	b.n	8001d96 <ARGB_TIM_DMADelayPulseCplt_right+0x2ee>
    if (BUF_COUNTER_RIGHT == 0) return; // if no data to transmit - return    // ,<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 8001d94:	bf00      	nop
}
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000575 	.word	0x20000575

08001da0 <ARGB_TIM_DMADelayPulseHalfCplt_left>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt_left(DMA_HandleTypeDef *hdma) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dac:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE_LEFT || htim != &TIM_HANDLE) return;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a60      	ldr	r2, [pc, #384]	; (8001f34 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x194>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	f040 80b7 	bne.w	8001f26 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x186>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4a5f      	ldr	r2, [pc, #380]	; (8001f38 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x198>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	f040 80b2 	bne.w	8001f26 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x186>
    if (BUF_COUNTER_LEFT == 0) return; // if no data to transmit - return
 8001dc2:	4b5e      	ldr	r3, [pc, #376]	; (8001f3c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 80ae 	beq.w	8001f2a <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18a>
    // if data transfer
    if (BUF_COUNTER_LEFT < NUM_PIXELS) {
 8001dce:	4b5b      	ldr	r3, [pc, #364]	; (8001f3c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	2b54      	cmp	r3, #84	; 0x54
 8001dd6:	f200 8094 	bhi.w	8001f02 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x162>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001dda:	2300      	movs	r3, #0
 8001ddc:	72fb      	strb	r3, [r7, #11]
 8001dde:	e083      	b.n	8001ee8 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x148>
#ifdef SK6812
        	PWM_BUF_LEFT[i] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001de0:	4b56      	ldr	r3, [pc, #344]	; (8001f3c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4a55      	ldr	r2, [pc, #340]	; (8001f40 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a0>)
 8001dea:	5cd3      	ldrb	r3, [r2, r3]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	461a      	mov	r2, r3
 8001df0:	7afb      	ldrb	r3, [r7, #11]
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	dd04      	ble.n	8001e0a <ARGB_TIM_DMADelayPulseHalfCplt_left+0x6a>
 8001e00:	4b50      	ldr	r3, [pc, #320]	; (8001f44 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a4>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	461a      	mov	r2, r3
 8001e08:	e003      	b.n	8001e12 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x72>
 8001e0a:	4b4f      	ldr	r3, [pc, #316]	; (8001f48 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a8>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	461a      	mov	r2, r3
 8001e12:	7afb      	ldrb	r3, [r7, #11]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	4619      	mov	r1, r3
 8001e18:	4b4c      	ldr	r3, [pc, #304]	; (8001f4c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 8001e1a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        	PWM_BUF_LEFT[i + 8] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001e1e:	4b47      	ldr	r3, [pc, #284]	; (8001f3c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	3301      	adds	r3, #1
 8001e28:	4a45      	ldr	r2, [pc, #276]	; (8001f40 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a0>)
 8001e2a:	5cd3      	ldrb	r3, [r2, r3]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	461a      	mov	r2, r3
 8001e30:	7afb      	ldrb	r3, [r7, #11]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	dd04      	ble.n	8001e4a <ARGB_TIM_DMADelayPulseHalfCplt_left+0xaa>
 8001e40:	4b40      	ldr	r3, [pc, #256]	; (8001f44 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a4>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	4619      	mov	r1, r3
 8001e48:	e003      	b.n	8001e52 <ARGB_TIM_DMADelayPulseHalfCplt_left+0xb2>
 8001e4a:	4b3f      	ldr	r3, [pc, #252]	; (8001f48 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a8>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	4619      	mov	r1, r3
 8001e52:	7afb      	ldrb	r3, [r7, #11]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	3308      	adds	r3, #8
 8001e58:	4a3c      	ldr	r2, [pc, #240]	; (8001f4c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 8001e5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 16] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001e5e:	4b37      	ldr	r3, [pc, #220]	; (8001f3c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	3302      	adds	r3, #2
 8001e68:	4a35      	ldr	r2, [pc, #212]	; (8001f40 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a0>)
 8001e6a:	5cd3      	ldrb	r3, [r2, r3]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	7afb      	ldrb	r3, [r7, #11]
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	dd04      	ble.n	8001e8a <ARGB_TIM_DMADelayPulseHalfCplt_left+0xea>
 8001e80:	4b30      	ldr	r3, [pc, #192]	; (8001f44 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a4>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	4619      	mov	r1, r3
 8001e88:	e003      	b.n	8001e92 <ARGB_TIM_DMADelayPulseHalfCplt_left+0xf2>
 8001e8a:	4b2f      	ldr	r3, [pc, #188]	; (8001f48 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a8>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	4619      	mov	r1, r3
 8001e92:	7afb      	ldrb	r3, [r7, #11]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	3310      	adds	r3, #16
 8001e98:	4a2c      	ldr	r2, [pc, #176]	; (8001f4c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 8001e9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 24] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
 8001e9e:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	3303      	adds	r3, #3
 8001ea8:	4a25      	ldr	r2, [pc, #148]	; (8001f40 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a0>)
 8001eaa:	5cd3      	ldrb	r3, [r2, r3]
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	7afb      	ldrb	r3, [r7, #11]
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	dd04      	ble.n	8001eca <ARGB_TIM_DMADelayPulseHalfCplt_left+0x12a>
 8001ec0:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a4>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	e003      	b.n	8001ed2 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x132>
 8001eca:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a8>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	7afb      	ldrb	r3, [r7, #11]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	3318      	adds	r3, #24
 8001ed8:	4a1c      	ldr	r2, [pc, #112]	; (8001f4c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 8001eda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001ede:	7afb      	ldrb	r3, [r7, #11]
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	72fb      	strb	r3, [r7, #11]
 8001ee8:	7afb      	ldrb	r3, [r7, #11]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b07      	cmp	r3, #7
 8001eee:	f67f af77 	bls.w	8001de0 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x40>
        	PWM_BUF_LEFT[i] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_LEFT[i + 8] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_LEFT[i + 16] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        BUF_COUNTER_LEFT++;
 8001ef2:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	3301      	adds	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8001efe:	801a      	strh	r2, [r3, #0]
 8001f00:	e014      	b.n	8001f2c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18c>
    } else if (BUF_COUNTER_LEFT < NUM_PIXELS + 2) { // if RET transfer
 8001f02:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	2b56      	cmp	r3, #86	; 0x56
 8001f0a:	d80f      	bhi.n	8001f2c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18c>
        memset((dma_siz *) &PWM_BUF_LEFT[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 8001f0c:	2280      	movs	r2, #128	; 0x80
 8001f0e:	2100      	movs	r1, #0
 8001f10:	480e      	ldr	r0, [pc, #56]	; (8001f4c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 8001f12:	f00a fd4b 	bl	800c9ac <memset>
        BUF_COUNTER_LEFT++;
 8001f16:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8001f22:	801a      	strh	r2, [r3, #0]
 8001f24:	e002      	b.n	8001f2c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18c>
    if (hdma != &DMA_HANDLE_LEFT || htim != &TIM_HANDLE) return;
 8001f26:	bf00      	nop
 8001f28:	e000      	b.n	8001f2c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18c>
    if (BUF_COUNTER_LEFT == 0) return; // if no data to transmit - return
 8001f2a:	bf00      	nop
    }
}
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000738 	.word	0x20000738
 8001f38:	200006f0 	.word	0x200006f0
 8001f3c:	20000570 	.word	0x20000570
 8001f40:	200000c8 	.word	0x200000c8
 8001f44:	200000c4 	.word	0x200000c4
 8001f48:	200000c5 	.word	0x200000c5
 8001f4c:	20000370 	.word	0x20000370

08001f50 <ARGB_TIM_DMADelayPulseHalfCplt_right>:
// -----------------------------------------------------------------------------------
static void ARGB_TIM_DMADelayPulseHalfCplt_right(DMA_HandleTypeDef *hdma) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5c:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE_RIGHT || htim != &TIM_HANDLE) return;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a60      	ldr	r2, [pc, #384]	; (80020e4 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x194>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	f040 80b7 	bne.w	80020d6 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x186>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4a5f      	ldr	r2, [pc, #380]	; (80020e8 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x198>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	f040 80b2 	bne.w	80020d6 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x186>
    if (BUF_COUNTER_RIGHT == 0) return; // if no data to transmit - return
 8001f72:	4b5e      	ldr	r3, [pc, #376]	; (80020ec <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 80ae 	beq.w	80020da <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18a>
    // if data transfer
    if (BUF_COUNTER_RIGHT < NUM_PIXELS) {
 8001f7e:	4b5b      	ldr	r3, [pc, #364]	; (80020ec <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	2b54      	cmp	r3, #84	; 0x54
 8001f86:	f200 8094 	bhi.w	80020b2 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x162>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	72fb      	strb	r3, [r7, #11]
 8001f8e:	e083      	b.n	8002098 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x148>
#ifdef SK6812
        	PWM_BUF_RIGHT[i] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001f90:	4b56      	ldr	r3, [pc, #344]	; (80020ec <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4a55      	ldr	r2, [pc, #340]	; (80020f0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a0>)
 8001f9a:	5cd3      	ldrb	r3, [r2, r3]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	7afb      	ldrb	r3, [r7, #11]
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	dd04      	ble.n	8001fba <ARGB_TIM_DMADelayPulseHalfCplt_right+0x6a>
 8001fb0:	4b50      	ldr	r3, [pc, #320]	; (80020f4 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a4>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	e003      	b.n	8001fc2 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x72>
 8001fba:	4b4f      	ldr	r3, [pc, #316]	; (80020f8 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a8>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	7afb      	ldrb	r3, [r7, #11]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4b4c      	ldr	r3, [pc, #304]	; (80020fc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 8001fca:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        	PWM_BUF_RIGHT[i + 8] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001fce:	4b47      	ldr	r3, [pc, #284]	; (80020ec <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8001fd0:	881b      	ldrh	r3, [r3, #0]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	4a45      	ldr	r2, [pc, #276]	; (80020f0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a0>)
 8001fda:	5cd3      	ldrb	r3, [r2, r3]
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	461a      	mov	r2, r3
 8001fe0:	7afb      	ldrb	r3, [r7, #11]
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	dd04      	ble.n	8001ffa <ARGB_TIM_DMADelayPulseHalfCplt_right+0xaa>
 8001ff0:	4b40      	ldr	r3, [pc, #256]	; (80020f4 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a4>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	e003      	b.n	8002002 <ARGB_TIM_DMADelayPulseHalfCplt_right+0xb2>
 8001ffa:	4b3f      	ldr	r3, [pc, #252]	; (80020f8 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a8>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	4619      	mov	r1, r3
 8002002:	7afb      	ldrb	r3, [r7, #11]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	3308      	adds	r3, #8
 8002008:	4a3c      	ldr	r2, [pc, #240]	; (80020fc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 800200a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 16] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800200e:	4b37      	ldr	r3, [pc, #220]	; (80020ec <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	b29b      	uxth	r3, r3
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	3302      	adds	r3, #2
 8002018:	4a35      	ldr	r2, [pc, #212]	; (80020f0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a0>)
 800201a:	5cd3      	ldrb	r3, [r2, r3]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	461a      	mov	r2, r3
 8002020:	7afb      	ldrb	r3, [r7, #11]
 8002022:	b2db      	uxtb	r3, r3
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202c:	2b00      	cmp	r3, #0
 800202e:	dd04      	ble.n	800203a <ARGB_TIM_DMADelayPulseHalfCplt_right+0xea>
 8002030:	4b30      	ldr	r3, [pc, #192]	; (80020f4 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a4>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	4619      	mov	r1, r3
 8002038:	e003      	b.n	8002042 <ARGB_TIM_DMADelayPulseHalfCplt_right+0xf2>
 800203a:	4b2f      	ldr	r3, [pc, #188]	; (80020f8 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a8>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	b2db      	uxtb	r3, r3
 8002040:	4619      	mov	r1, r3
 8002042:	7afb      	ldrb	r3, [r7, #11]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	3310      	adds	r3, #16
 8002048:	4a2c      	ldr	r2, [pc, #176]	; (80020fc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 800204a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 24] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
 800204e:	4b27      	ldr	r3, [pc, #156]	; (80020ec <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	b29b      	uxth	r3, r3
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	3303      	adds	r3, #3
 8002058:	4a25      	ldr	r2, [pc, #148]	; (80020f0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a0>)
 800205a:	5cd3      	ldrb	r3, [r2, r3]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	7afb      	ldrb	r3, [r7, #11]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206c:	2b00      	cmp	r3, #0
 800206e:	dd04      	ble.n	800207a <ARGB_TIM_DMADelayPulseHalfCplt_right+0x12a>
 8002070:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a4>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	4619      	mov	r1, r3
 8002078:	e003      	b.n	8002082 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x132>
 800207a:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a8>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	4619      	mov	r1, r3
 8002082:	7afb      	ldrb	r3, [r7, #11]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	3318      	adds	r3, #24
 8002088:	4a1c      	ldr	r2, [pc, #112]	; (80020fc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 800208a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 800208e:	7afb      	ldrb	r3, [r7, #11]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	3301      	adds	r3, #1
 8002094:	b2db      	uxtb	r3, r3
 8002096:	72fb      	strb	r3, [r7, #11]
 8002098:	7afb      	ldrb	r3, [r7, #11]
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b07      	cmp	r3, #7
 800209e:	f67f af77 	bls.w	8001f90 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x40>
        	PWM_BUF_RIGHT[i] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_RIGHT[i + 8] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_RIGHT[i + 16] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        BUF_COUNTER_RIGHT++;
 80020a2:	4b12      	ldr	r3, [pc, #72]	; (80020ec <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	3301      	adds	r3, #1
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 80020ae:	801a      	strh	r2, [r3, #0]
 80020b0:	e014      	b.n	80020dc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18c>
    } else if (BUF_COUNTER_RIGHT < NUM_PIXELS + 2) { // if RET transfer
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	2b56      	cmp	r3, #86	; 0x56
 80020ba:	d80f      	bhi.n	80020dc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18c>
        memset((dma_siz *) &PWM_BUF_RIGHT[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 80020bc:	2280      	movs	r2, #128	; 0x80
 80020be:	2100      	movs	r1, #0
 80020c0:	480e      	ldr	r0, [pc, #56]	; (80020fc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 80020c2:	f00a fc73 	bl	800c9ac <memset>
        BUF_COUNTER_RIGHT++;
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	3301      	adds	r3, #1
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 80020d2:	801a      	strh	r2, [r3, #0]
 80020d4:	e002      	b.n	80020dc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18c>
    if (hdma != &DMA_HANDLE_RIGHT || htim != &TIM_HANDLE) return;
 80020d6:	bf00      	nop
 80020d8:	e000      	b.n	80020dc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18c>
    if (BUF_COUNTER_RIGHT == 0) return; // if no data to transmit - return
 80020da:	bf00      	nop
    }
}
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000798 	.word	0x20000798
 80020e8:	200006f0 	.word	0x200006f0
 80020ec:	20000572 	.word	0x20000572
 80020f0:	2000021c 	.word	0x2000021c
 80020f4:	200000c4 	.word	0x200000c4
 80020f8:	200000c5 	.word	0x200000c5
 80020fc:	20000470 	.word	0x20000470

08002100 <turn_off_left_stript>:

#include "light/led_stript/ARGB.h"

// -----------------------------------------------------------------------------------------------------
void turn_off_left_stript(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
	ARGB_Clear_left(); 			// Clear stirp
 8002104:	f7fe fdc8 	bl	8000c98 <ARGB_Clear_left>
	while (ARGB_Show_left() != ARGB_OK); // Update - Option 1
 8002108:	bf00      	nop
 800210a:	f7fe ffa5 	bl	8001058 <ARGB_Show_left>
 800210e:	4603      	mov	r3, r0
 8002110:	2b02      	cmp	r3, #2
 8002112:	d1fa      	bne.n	800210a <turn_off_left_stript+0xa>
}
 8002114:	bf00      	nop
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}

0800211a <turn_off_right_stript>:
// -----------------------------------------------------------------------------------------------------
void turn_off_right_stript(void)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	af00      	add	r7, sp, #0
	ARGB_Clear_right();
 800211e:	f7fe fdc7 	bl	8000cb0 <ARGB_Clear_right>
	while (ARGB_Show_right() != ARGB_OK); // Update - Option 1
 8002122:	bf00      	nop
 8002124:	f7ff f964 	bl	80013f0 <ARGB_Show_right>
 8002128:	4603      	mov	r3, r0
 800212a:	2b02      	cmp	r3, #2
 800212c:	d1fa      	bne.n	8002124 <turn_off_right_stript+0xa>
}
 800212e:	bf00      	nop
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}

08002134 <turn_off_left_and_right_dtript>:
// -----------------------------------------------------------------------------------------------------
void turn_off_left_and_right_dtript(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
	turn_off_left_stript();
 8002138:	f7ff ffe2 	bl	8002100 <turn_off_left_stript>
	turn_off_right_stript();
 800213c:	f7ff ffed 	bl	800211a <turn_off_right_stript>
}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}

08002144 <turn_on_left_stript>:
// -----------------------------------------------------------------------------------------------------
void turn_on_left_stript(u8_t r, u8_t g, u8_t b)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
 800214e:	460b      	mov	r3, r1
 8002150:	71bb      	strb	r3, [r7, #6]
 8002152:	4613      	mov	r3, r2
 8002154:	717b      	strb	r3, [r7, #5]
	uint8_t i = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	73fb      	strb	r3, [r7, #15]
	for(i = 0; i<= 83; i++)
 800215a:	2300      	movs	r3, #0
 800215c:	73fb      	strb	r3, [r7, #15]
 800215e:	e009      	b.n	8002174 <turn_on_left_stript+0x30>
	{
		ARGB_SetRGB_left(i, r, g, b);
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	b298      	uxth	r0, r3
 8002164:	797b      	ldrb	r3, [r7, #5]
 8002166:	79ba      	ldrb	r2, [r7, #6]
 8002168:	79f9      	ldrb	r1, [r7, #7]
 800216a:	f7fe fdbd 	bl	8000ce8 <ARGB_SetRGB_left>
	for(i = 0; i<= 83; i++)
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	3301      	adds	r3, #1
 8002172:	73fb      	strb	r3, [r7, #15]
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	2b53      	cmp	r3, #83	; 0x53
 8002178:	d9f2      	bls.n	8002160 <turn_on_left_stript+0x1c>
	}
	while (!ARGB_Show_left());  // Update
 800217a:	bf00      	nop
 800217c:	f7fe ff6c 	bl	8001058 <ARGB_Show_left>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0fa      	beq.n	800217c <turn_on_left_stript+0x38>
}
 8002186:	bf00      	nop
 8002188:	bf00      	nop
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <turn_on_right_stript>:
// -----------------------------------------------------------------------------------------------------
void turn_on_right_stript(u8_t r, u8_t g, u8_t b)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
 800219a:	460b      	mov	r3, r1
 800219c:	71bb      	strb	r3, [r7, #6]
 800219e:	4613      	mov	r3, r2
 80021a0:	717b      	strb	r3, [r7, #5]
	uint8_t i = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	73fb      	strb	r3, [r7, #15]
	for(i = 0; i<= 83; i++)
 80021a6:	2300      	movs	r3, #0
 80021a8:	73fb      	strb	r3, [r7, #15]
 80021aa:	e009      	b.n	80021c0 <turn_on_right_stript+0x30>
	{
		ARGB_SetRGB_right(i, r, g, b);
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	b298      	uxth	r0, r3
 80021b0:	797b      	ldrb	r3, [r7, #5]
 80021b2:	79ba      	ldrb	r2, [r7, #6]
 80021b4:	79f9      	ldrb	r1, [r7, #7]
 80021b6:	f7fe fe11 	bl	8000ddc <ARGB_SetRGB_right>
	for(i = 0; i<= 83; i++)
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	3301      	adds	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	2b53      	cmp	r3, #83	; 0x53
 80021c4:	d9f2      	bls.n	80021ac <turn_on_right_stript+0x1c>
	}
	while (!ARGB_Show_right());  // Update
 80021c6:	bf00      	nop
 80021c8:	f7ff f912 	bl	80013f0 <ARGB_Show_right>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0fa      	beq.n	80021c8 <turn_on_right_stript+0x38>
}
 80021d2:	bf00      	nop
 80021d4:	bf00      	nop
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <turn_all_leds_from_centr>:
// -----------------------------------------------------------------------------------------------------
void turn_all_leds_from_centr(u8_t delay, u8_t r, u8_t g, u8_t b)
{
 80021dc:	b590      	push	{r4, r7, lr}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4604      	mov	r4, r0
 80021e4:	4608      	mov	r0, r1
 80021e6:	4611      	mov	r1, r2
 80021e8:	461a      	mov	r2, r3
 80021ea:	4623      	mov	r3, r4
 80021ec:	71fb      	strb	r3, [r7, #7]
 80021ee:	4603      	mov	r3, r0
 80021f0:	71bb      	strb	r3, [r7, #6]
 80021f2:	460b      	mov	r3, r1
 80021f4:	717b      	strb	r3, [r7, #5]
 80021f6:	4613      	mov	r3, r2
 80021f8:	713b      	strb	r3, [r7, #4]
	uint8_t i =0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	73fb      	strb	r3, [r7, #15]
	turn_off_left_stript();
 80021fe:	f7ff ff7f 	bl	8002100 <turn_off_left_stript>

	for( i = 84; i >= 43; i--)
 8002202:	2354      	movs	r3, #84	; 0x54
 8002204:	73fb      	strb	r3, [r7, #15]
 8002206:	e034      	b.n	8002272 <turn_all_leds_from_centr+0x96>
	{
		ARGB_SetRGB_left(i, r, g, b);			// High side
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	b298      	uxth	r0, r3
 800220c:	793b      	ldrb	r3, [r7, #4]
 800220e:	797a      	ldrb	r2, [r7, #5]
 8002210:	79b9      	ldrb	r1, [r7, #6]
 8002212:	f7fe fd69 	bl	8000ce8 <ARGB_SetRGB_left>
		ARGB_SetRGB_right(i, r, g, b);
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	b298      	uxth	r0, r3
 800221a:	793b      	ldrb	r3, [r7, #4]
 800221c:	797a      	ldrb	r2, [r7, #5]
 800221e:	79b9      	ldrb	r1, [r7, #6]
 8002220:	f7fe fddc 	bl	8000ddc <ARGB_SetRGB_right>

		ARGB_SetRGB_left((85 - i), r, g, b);
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	b29b      	uxth	r3, r3
 8002228:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
 800222c:	b298      	uxth	r0, r3
 800222e:	793b      	ldrb	r3, [r7, #4]
 8002230:	797a      	ldrb	r2, [r7, #5]
 8002232:	79b9      	ldrb	r1, [r7, #6]
 8002234:	f7fe fd58 	bl	8000ce8 <ARGB_SetRGB_left>
		ARGB_SetRGB_right((85 - i), r, g, b);
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	b29b      	uxth	r3, r3
 800223c:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
 8002240:	b298      	uxth	r0, r3
 8002242:	793b      	ldrb	r3, [r7, #4]
 8002244:	797a      	ldrb	r2, [r7, #5]
 8002246:	79b9      	ldrb	r1, [r7, #6]
 8002248:	f7fe fdc8 	bl	8000ddc <ARGB_SetRGB_right>

		while (!ARGB_Show_left());  // Update
 800224c:	bf00      	nop
 800224e:	f7fe ff03 	bl	8001058 <ARGB_Show_left>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0fa      	beq.n	800224e <turn_all_leds_from_centr+0x72>
		while (!ARGB_Show_right());  // Update
 8002258:	bf00      	nop
 800225a:	f7ff f8c9 	bl	80013f0 <ARGB_Show_right>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0fa      	beq.n	800225a <turn_all_leds_from_centr+0x7e>
		HAL_Delay(delay);
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	4618      	mov	r0, r3
 8002268:	f001 fc2e 	bl	8003ac8 <HAL_Delay>
	for( i = 84; i >= 43; i--)
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	3b01      	subs	r3, #1
 8002270:	73fb      	strb	r3, [r7, #15]
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	2b2a      	cmp	r3, #42	; 0x2a
 8002276:	d8c7      	bhi.n	8002208 <turn_all_leds_from_centr+0x2c>
	}

}
 8002278:	bf00      	nop
 800227a:	bf00      	nop
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	bd90      	pop	{r4, r7, pc}
	...

08002284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002284:	b5b0      	push	{r4, r5, r7, lr}
 8002286:	b08c      	sub	sp, #48	; 0x30
 8002288:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800228a:	f001 fbab 	bl	80039e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800228e:	f000 f8c9 	bl	8002424 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002292:	f000 fc2f 	bl	8002af4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002296:	f000 fc05 	bl	8002aa4 <MX_DMA_Init>
  MX_USB_HOST_Init();
 800229a:	f00a f837 	bl	800c30c <MX_USB_HOST_Init>
  MX_USART3_UART_Init();
 800229e:	f000 fbd7 	bl	8002a50 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80022a2:	f000 f929 	bl	80024f8 <MX_SPI1_Init>
  MX_TIM7_Init();
 80022a6:	f000 fb0d 	bl	80028c4 <MX_TIM7_Init>
  MX_FATFS_Init();
 80022aa:	f007 fed1 	bl	800a050 <MX_FATFS_Init>
  MX_TIM2_Init();
 80022ae:	f000 f959 	bl	8002564 <MX_TIM2_Init>
  MX_TIM3_Init();
 80022b2:	f000 f9ed 	bl	8002690 <MX_TIM3_Init>
  MX_TIM4_Init();
 80022b6:	f000 fa83 	bl	80027c0 <MX_TIM4_Init>
  MX_TIM8_Init();
 80022ba:	f000 fb39 	bl	8002930 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */


  // Test run LEDs //////////////////////////////////////////////////////////////////

  ARGB_SetBrightness(255);  // Set global brightness to 40%
 80022be:	20ff      	movs	r0, #255	; 0xff
 80022c0:	f7fe fd02 	bl	8000cc8 <ARGB_SetBrightness>
  ARGB_Init();  				// Initialization
 80022c4:	f7fe fc64 	bl	8000b90 <ARGB_Init>

  turn_off_left_and_right_dtript();
 80022c8:	f7ff ff34 	bl	8002134 <turn_off_left_and_right_dtript>


  HAL_Delay(1000);
 80022cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022d0:	f001 fbfa 	bl	8003ac8 <HAL_Delay>
  for(int h = 0; h < 5; h++)
 80022d4:	2300      	movs	r3, #0
 80022d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022d8:	e014      	b.n	8002304 <main+0x80>
  {
	  turn_on_left_stript(0, 0, 100);
 80022da:	2264      	movs	r2, #100	; 0x64
 80022dc:	2100      	movs	r1, #0
 80022de:	2000      	movs	r0, #0
 80022e0:	f7ff ff30 	bl	8002144 <turn_on_left_stript>
	  turn_on_right_stript(100, 0, 0);
 80022e4:	2200      	movs	r2, #0
 80022e6:	2100      	movs	r1, #0
 80022e8:	2064      	movs	r0, #100	; 0x64
 80022ea:	f7ff ff51 	bl	8002190 <turn_on_right_stript>

	  HAL_Delay(100);
 80022ee:	2064      	movs	r0, #100	; 0x64
 80022f0:	f001 fbea 	bl	8003ac8 <HAL_Delay>

	  turn_off_left_and_right_dtript();
 80022f4:	f7ff ff1e 	bl	8002134 <turn_off_left_and_right_dtript>
	  HAL_Delay(100);
 80022f8:	2064      	movs	r0, #100	; 0x64
 80022fa:	f001 fbe5 	bl	8003ac8 <HAL_Delay>
  for(int h = 0; h < 5; h++)
 80022fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002300:	3301      	adds	r3, #1
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002306:	2b04      	cmp	r3, #4
 8002308:	dde7      	ble.n	80022da <main+0x56>
  }

  HAL_Delay(1000);
 800230a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800230e:	f001 fbdb 	bl	8003ac8 <HAL_Delay>


  turn_all_leds_from_centr(10, 100, 40, 0);
 8002312:	2300      	movs	r3, #0
 8002314:	2228      	movs	r2, #40	; 0x28
 8002316:	2164      	movs	r1, #100	; 0x64
 8002318:	200a      	movs	r0, #10
 800231a:	f7ff ff5f 	bl	80021dc <turn_all_leds_from_centr>

  HAL_Delay(1000);
 800231e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002322:	f001 fbd1 	bl	8003ac8 <HAL_Delay>
  turn_off_left_and_right_dtript();
 8002326:	f7ff ff05 	bl	8002134 <turn_off_left_and_right_dtript>



  ARGB_SetRGB_left(0, 0, 0, 100);			// High sid
 800232a:	2364      	movs	r3, #100	; 0x64
 800232c:	2200      	movs	r2, #0
 800232e:	2100      	movs	r1, #0
 8002330:	2000      	movs	r0, #0
 8002332:	f7fe fcd9 	bl	8000ce8 <ARGB_SetRGB_left>
  ARGB_SetRGB_left(42, 0, 0, 100);
 8002336:	2364      	movs	r3, #100	; 0x64
 8002338:	2200      	movs	r2, #0
 800233a:	2100      	movs	r1, #0
 800233c:	202a      	movs	r0, #42	; 0x2a
 800233e:	f7fe fcd3 	bl	8000ce8 <ARGB_SetRGB_left>
  ARGB_SetRGB_left(43, 0, 0, 100);
 8002342:	2364      	movs	r3, #100	; 0x64
 8002344:	2200      	movs	r2, #0
 8002346:	2100      	movs	r1, #0
 8002348:	202b      	movs	r0, #43	; 0x2b
 800234a:	f7fe fccd 	bl	8000ce8 <ARGB_SetRGB_left>
  ARGB_SetRGB_left(84, 0, 0, 100);
 800234e:	2364      	movs	r3, #100	; 0x64
 8002350:	2200      	movs	r2, #0
 8002352:	2100      	movs	r1, #0
 8002354:	2054      	movs	r0, #84	; 0x54
 8002356:	f7fe fcc7 	bl	8000ce8 <ARGB_SetRGB_left>
  while (!ARGB_Show_left());  // Update
 800235a:	bf00      	nop
 800235c:	f7fe fe7c 	bl	8001058 <ARGB_Show_left>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0fa      	beq.n	800235c <main+0xd8>


  ARGB_SetRGB_right(0, 0, 100, 0);			// High sid
 8002366:	2300      	movs	r3, #0
 8002368:	2264      	movs	r2, #100	; 0x64
 800236a:	2100      	movs	r1, #0
 800236c:	2000      	movs	r0, #0
 800236e:	f7fe fd35 	bl	8000ddc <ARGB_SetRGB_right>
  ARGB_SetRGB_right(42, 0, 100, 0);
 8002372:	2300      	movs	r3, #0
 8002374:	2264      	movs	r2, #100	; 0x64
 8002376:	2100      	movs	r1, #0
 8002378:	202a      	movs	r0, #42	; 0x2a
 800237a:	f7fe fd2f 	bl	8000ddc <ARGB_SetRGB_right>
  ARGB_SetRGB_right(43, 0, 100, 0);
 800237e:	2300      	movs	r3, #0
 8002380:	2264      	movs	r2, #100	; 0x64
 8002382:	2100      	movs	r1, #0
 8002384:	202b      	movs	r0, #43	; 0x2b
 8002386:	f7fe fd29 	bl	8000ddc <ARGB_SetRGB_right>
  ARGB_SetRGB_right(84, 0, 100, 0);
 800238a:	2300      	movs	r3, #0
 800238c:	2264      	movs	r2, #100	; 0x64
 800238e:	2100      	movs	r1, #0
 8002390:	2054      	movs	r0, #84	; 0x54
 8002392:	f7fe fd23 	bl	8000ddc <ARGB_SetRGB_right>
  while (!ARGB_Show_right());  // Update
 8002396:	bf00      	nop
 8002398:	f7ff f82a 	bl	80013f0 <ARGB_Show_right>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0fa      	beq.n	8002398 <main+0x114>
  ///////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////////

  // Send message ower UART, and make receive
  char uart_hellp_msg[30]= "Press the command:  \n\r";
 80023a2:	4b1c      	ldr	r3, [pc, #112]	; (8002414 <main+0x190>)
 80023a4:	f107 0408 	add.w	r4, r7, #8
 80023a8:	461d      	mov	r5, r3
 80023aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80023b2:	6020      	str	r0, [r4, #0]
 80023b4:	3404      	adds	r4, #4
 80023b6:	8021      	strh	r1, [r4, #0]
 80023b8:	3402      	adds	r4, #2
 80023ba:	0c0b      	lsrs	r3, r1, #16
 80023bc:	7023      	strb	r3, [r4, #0]
 80023be:	f107 031f 	add.w	r3, r7, #31
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	f8c3 2003 	str.w	r2, [r3, #3]
  strcat(uart_hellp_msg, "\n\r");
 80023ca:	f107 0308 	add.w	r3, r7, #8
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fd fefe 	bl	80001d0 <strlen>
 80023d4:	4603      	mov	r3, r0
 80023d6:	461a      	mov	r2, r3
 80023d8:	f107 0308 	add.w	r3, r7, #8
 80023dc:	4413      	add	r3, r2
 80023de:	4a0e      	ldr	r2, [pc, #56]	; (8002418 <main+0x194>)
 80023e0:	8811      	ldrh	r1, [r2, #0]
 80023e2:	7892      	ldrb	r2, [r2, #2]
 80023e4:	8019      	strh	r1, [r3, #0]
 80023e6:	709a      	strb	r2, [r3, #2]
  HAL_UART_Transmit_IT(&huart3, uart_hellp_msg, sizeof(uart_hellp_msg));
 80023e8:	f107 0308 	add.w	r3, r7, #8
 80023ec:	221e      	movs	r2, #30
 80023ee:	4619      	mov	r1, r3
 80023f0:	480a      	ldr	r0, [pc, #40]	; (800241c <main+0x198>)
 80023f2:	f005 fe6a 	bl	80080ca <HAL_UART_Transmit_IT>
  //HAL_Delay(100);

  HAL_UART_Receive_IT(&huart3, &uart_RX_data, sizeof(uart_RX_data));
 80023f6:	2201      	movs	r2, #1
 80023f8:	4909      	ldr	r1, [pc, #36]	; (8002420 <main+0x19c>)
 80023fa:	4808      	ldr	r0, [pc, #32]	; (800241c <main+0x198>)
 80023fc:	f005 feaa 	bl	8008154 <HAL_UART_Receive_IT>


  // For test print counter ower COM port
  int j = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
  char str_count[6] = {0};
 8002404:	2300      	movs	r3, #0
 8002406:	603b      	str	r3, [r7, #0]
 8002408:	2300      	movs	r3, #0
 800240a:	80bb      	strh	r3, [r7, #4]
//	  HAL_Delay(1000);
	  //


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800240c:	f009 ffa4 	bl	800c358 <MX_USB_HOST_Process>
 8002410:	e7fc      	b.n	800240c <main+0x188>
 8002412:	bf00      	nop
 8002414:	0800d298 	.word	0x0800d298
 8002418:	0800d294 	.word	0x0800d294
 800241c:	200007f8 	.word	0x200007f8
 8002420:	2000083e 	.word	0x2000083e

08002424 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b094      	sub	sp, #80	; 0x50
 8002428:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800242a:	f107 0320 	add.w	r3, r7, #32
 800242e:	2230      	movs	r2, #48	; 0x30
 8002430:	2100      	movs	r1, #0
 8002432:	4618      	mov	r0, r3
 8002434:	f00a faba 	bl	800c9ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002438:	f107 030c 	add.w	r3, r7, #12
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002448:	2300      	movs	r3, #0
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	4b28      	ldr	r3, [pc, #160]	; (80024f0 <SystemClock_Config+0xcc>)
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	4a27      	ldr	r2, [pc, #156]	; (80024f0 <SystemClock_Config+0xcc>)
 8002452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002456:	6413      	str	r3, [r2, #64]	; 0x40
 8002458:	4b25      	ldr	r3, [pc, #148]	; (80024f0 <SystemClock_Config+0xcc>)
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002464:	2300      	movs	r3, #0
 8002466:	607b      	str	r3, [r7, #4]
 8002468:	4b22      	ldr	r3, [pc, #136]	; (80024f4 <SystemClock_Config+0xd0>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a21      	ldr	r2, [pc, #132]	; (80024f4 <SystemClock_Config+0xd0>)
 800246e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4b1f      	ldr	r3, [pc, #124]	; (80024f4 <SystemClock_Config+0xd0>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800247c:	607b      	str	r3, [r7, #4]
 800247e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002480:	2301      	movs	r3, #1
 8002482:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002484:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800248a:	2302      	movs	r3, #2
 800248c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800248e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002492:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002494:	2308      	movs	r3, #8
 8002496:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002498:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800249c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800249e:	2302      	movs	r3, #2
 80024a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80024a2:	2307      	movs	r3, #7
 80024a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024a6:	f107 0320 	add.w	r3, r7, #32
 80024aa:	4618      	mov	r0, r3
 80024ac:	f003 fe04 	bl	80060b8 <HAL_RCC_OscConfig>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80024b6:	f000 fca9 	bl	8002e0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024ba:	230f      	movs	r3, #15
 80024bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024be:	2302      	movs	r3, #2
 80024c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80024cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80024d2:	f107 030c 	add.w	r3, r7, #12
 80024d6:	2105      	movs	r1, #5
 80024d8:	4618      	mov	r0, r3
 80024da:	f004 f865 	bl	80065a8 <HAL_RCC_ClockConfig>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80024e4:	f000 fc92 	bl	8002e0c <Error_Handler>
  }
}
 80024e8:	bf00      	nop
 80024ea:	3750      	adds	r7, #80	; 0x50
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40007000 	.word	0x40007000

080024f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80024fc:	4b17      	ldr	r3, [pc, #92]	; (800255c <MX_SPI1_Init+0x64>)
 80024fe:	4a18      	ldr	r2, [pc, #96]	; (8002560 <MX_SPI1_Init+0x68>)
 8002500:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002502:	4b16      	ldr	r3, [pc, #88]	; (800255c <MX_SPI1_Init+0x64>)
 8002504:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002508:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800250a:	4b14      	ldr	r3, [pc, #80]	; (800255c <MX_SPI1_Init+0x64>)
 800250c:	2200      	movs	r2, #0
 800250e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002510:	4b12      	ldr	r3, [pc, #72]	; (800255c <MX_SPI1_Init+0x64>)
 8002512:	2200      	movs	r2, #0
 8002514:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002516:	4b11      	ldr	r3, [pc, #68]	; (800255c <MX_SPI1_Init+0x64>)
 8002518:	2200      	movs	r2, #0
 800251a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800251c:	4b0f      	ldr	r3, [pc, #60]	; (800255c <MX_SPI1_Init+0x64>)
 800251e:	2200      	movs	r2, #0
 8002520:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002522:	4b0e      	ldr	r3, [pc, #56]	; (800255c <MX_SPI1_Init+0x64>)
 8002524:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002528:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800252a:	4b0c      	ldr	r3, [pc, #48]	; (800255c <MX_SPI1_Init+0x64>)
 800252c:	2228      	movs	r2, #40	; 0x28
 800252e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002530:	4b0a      	ldr	r3, [pc, #40]	; (800255c <MX_SPI1_Init+0x64>)
 8002532:	2200      	movs	r2, #0
 8002534:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002536:	4b09      	ldr	r3, [pc, #36]	; (800255c <MX_SPI1_Init+0x64>)
 8002538:	2200      	movs	r2, #0
 800253a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800253c:	4b07      	ldr	r3, [pc, #28]	; (800255c <MX_SPI1_Init+0x64>)
 800253e:	2200      	movs	r2, #0
 8002540:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002542:	4b06      	ldr	r3, [pc, #24]	; (800255c <MX_SPI1_Init+0x64>)
 8002544:	220a      	movs	r2, #10
 8002546:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002548:	4804      	ldr	r0, [pc, #16]	; (800255c <MX_SPI1_Init+0x64>)
 800254a:	f004 fa4d 	bl	80069e8 <HAL_SPI_Init>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002554:	f000 fc5a 	bl	8002e0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20000578 	.word	0x20000578
 8002560:	40013000 	.word	0x40013000

08002564 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08e      	sub	sp, #56	; 0x38
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800256a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]
 8002574:	609a      	str	r2, [r3, #8]
 8002576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002578:	f107 0320 	add.w	r3, r7, #32
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002582:	1d3b      	adds	r3, r7, #4
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	611a      	str	r2, [r3, #16]
 8002590:	615a      	str	r2, [r3, #20]
 8002592:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002594:	4b3d      	ldr	r3, [pc, #244]	; (800268c <MX_TIM2_Init+0x128>)
 8002596:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800259a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2100-1;
 800259c:	4b3b      	ldr	r3, [pc, #236]	; (800268c <MX_TIM2_Init+0x128>)
 800259e:	f640 0233 	movw	r2, #2099	; 0x833
 80025a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a4:	4b39      	ldr	r3, [pc, #228]	; (800268c <MX_TIM2_Init+0x128>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250-1;
 80025aa:	4b38      	ldr	r3, [pc, #224]	; (800268c <MX_TIM2_Init+0x128>)
 80025ac:	22f9      	movs	r2, #249	; 0xf9
 80025ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b0:	4b36      	ldr	r3, [pc, #216]	; (800268c <MX_TIM2_Init+0x128>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b6:	4b35      	ldr	r3, [pc, #212]	; (800268c <MX_TIM2_Init+0x128>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025bc:	4833      	ldr	r0, [pc, #204]	; (800268c <MX_TIM2_Init+0x128>)
 80025be:	f004 fd09 	bl	8006fd4 <HAL_TIM_Base_Init>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80025c8:	f000 fc20 	bl	8002e0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025d6:	4619      	mov	r1, r3
 80025d8:	482c      	ldr	r0, [pc, #176]	; (800268c <MX_TIM2_Init+0x128>)
 80025da:	f004 ff63 	bl	80074a4 <HAL_TIM_ConfigClockSource>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80025e4:	f000 fc12 	bl	8002e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80025e8:	4828      	ldr	r0, [pc, #160]	; (800268c <MX_TIM2_Init+0x128>)
 80025ea:	f004 fd42 	bl	8007072 <HAL_TIM_PWM_Init>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80025f4:	f000 fc0a 	bl	8002e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f8:	2300      	movs	r3, #0
 80025fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025fc:	2300      	movs	r3, #0
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002600:	f107 0320 	add.w	r3, r7, #32
 8002604:	4619      	mov	r1, r3
 8002606:	4821      	ldr	r0, [pc, #132]	; (800268c <MX_TIM2_Init+0x128>)
 8002608:	f005 fb9e 	bl	8007d48 <HAL_TIMEx_MasterConfigSynchronization>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002612:	f000 fbfb 	bl	8002e0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002616:	2360      	movs	r3, #96	; 0x60
 8002618:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002626:	1d3b      	adds	r3, r7, #4
 8002628:	2200      	movs	r2, #0
 800262a:	4619      	mov	r1, r3
 800262c:	4817      	ldr	r0, [pc, #92]	; (800268c <MX_TIM2_Init+0x128>)
 800262e:	f004 fe77 	bl	8007320 <HAL_TIM_PWM_ConfigChannel>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002638:	f000 fbe8 	bl	8002e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800263c:	1d3b      	adds	r3, r7, #4
 800263e:	2204      	movs	r2, #4
 8002640:	4619      	mov	r1, r3
 8002642:	4812      	ldr	r0, [pc, #72]	; (800268c <MX_TIM2_Init+0x128>)
 8002644:	f004 fe6c 	bl	8007320 <HAL_TIM_PWM_ConfigChannel>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800264e:	f000 fbdd 	bl	8002e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002652:	1d3b      	adds	r3, r7, #4
 8002654:	2208      	movs	r2, #8
 8002656:	4619      	mov	r1, r3
 8002658:	480c      	ldr	r0, [pc, #48]	; (800268c <MX_TIM2_Init+0x128>)
 800265a:	f004 fe61 	bl	8007320 <HAL_TIM_PWM_ConfigChannel>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002664:	f000 fbd2 	bl	8002e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002668:	1d3b      	adds	r3, r7, #4
 800266a:	220c      	movs	r2, #12
 800266c:	4619      	mov	r1, r3
 800266e:	4807      	ldr	r0, [pc, #28]	; (800268c <MX_TIM2_Init+0x128>)
 8002670:	f004 fe56 	bl	8007320 <HAL_TIM_PWM_ConfigChannel>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 800267a:	f000 fbc7 	bl	8002e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800267e:	4803      	ldr	r0, [pc, #12]	; (800268c <MX_TIM2_Init+0x128>)
 8002680:	f000 fd42 	bl	8003108 <HAL_TIM_MspPostInit>

}
 8002684:	bf00      	nop
 8002686:	3738      	adds	r7, #56	; 0x38
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	200005d0 	.word	0x200005d0

08002690 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08e      	sub	sp, #56	; 0x38
 8002694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002696:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	609a      	str	r2, [r3, #8]
 80026a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a4:	f107 0320 	add.w	r3, r7, #32
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026ae:	1d3b      	adds	r3, r7, #4
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]
 80026ba:	611a      	str	r2, [r3, #16]
 80026bc:	615a      	str	r2, [r3, #20]
 80026be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026c0:	4b3d      	ldr	r3, [pc, #244]	; (80027b8 <MX_TIM3_Init+0x128>)
 80026c2:	4a3e      	ldr	r2, [pc, #248]	; (80027bc <MX_TIM3_Init+0x12c>)
 80026c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2100-1;
 80026c6:	4b3c      	ldr	r3, [pc, #240]	; (80027b8 <MX_TIM3_Init+0x128>)
 80026c8:	f640 0233 	movw	r2, #2099	; 0x833
 80026cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ce:	4b3a      	ldr	r3, [pc, #232]	; (80027b8 <MX_TIM3_Init+0x128>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 250-1;
 80026d4:	4b38      	ldr	r3, [pc, #224]	; (80027b8 <MX_TIM3_Init+0x128>)
 80026d6:	22f9      	movs	r2, #249	; 0xf9
 80026d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026da:	4b37      	ldr	r3, [pc, #220]	; (80027b8 <MX_TIM3_Init+0x128>)
 80026dc:	2200      	movs	r2, #0
 80026de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026e0:	4b35      	ldr	r3, [pc, #212]	; (80027b8 <MX_TIM3_Init+0x128>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026e6:	4834      	ldr	r0, [pc, #208]	; (80027b8 <MX_TIM3_Init+0x128>)
 80026e8:	f004 fc74 	bl	8006fd4 <HAL_TIM_Base_Init>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80026f2:	f000 fb8b 	bl	8002e0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002700:	4619      	mov	r1, r3
 8002702:	482d      	ldr	r0, [pc, #180]	; (80027b8 <MX_TIM3_Init+0x128>)
 8002704:	f004 fece 	bl	80074a4 <HAL_TIM_ConfigClockSource>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800270e:	f000 fb7d 	bl	8002e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002712:	4829      	ldr	r0, [pc, #164]	; (80027b8 <MX_TIM3_Init+0x128>)
 8002714:	f004 fcad 	bl	8007072 <HAL_TIM_PWM_Init>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800271e:	f000 fb75 	bl	8002e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002722:	2300      	movs	r3, #0
 8002724:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002726:	2300      	movs	r3, #0
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800272a:	f107 0320 	add.w	r3, r7, #32
 800272e:	4619      	mov	r1, r3
 8002730:	4821      	ldr	r0, [pc, #132]	; (80027b8 <MX_TIM3_Init+0x128>)
 8002732:	f005 fb09 	bl	8007d48 <HAL_TIMEx_MasterConfigSynchronization>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800273c:	f000 fb66 	bl	8002e0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002740:	2360      	movs	r3, #96	; 0x60
 8002742:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002748:	2300      	movs	r3, #0
 800274a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002750:	1d3b      	adds	r3, r7, #4
 8002752:	2200      	movs	r2, #0
 8002754:	4619      	mov	r1, r3
 8002756:	4818      	ldr	r0, [pc, #96]	; (80027b8 <MX_TIM3_Init+0x128>)
 8002758:	f004 fde2 	bl	8007320 <HAL_TIM_PWM_ConfigChannel>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002762:	f000 fb53 	bl	8002e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002766:	1d3b      	adds	r3, r7, #4
 8002768:	2204      	movs	r2, #4
 800276a:	4619      	mov	r1, r3
 800276c:	4812      	ldr	r0, [pc, #72]	; (80027b8 <MX_TIM3_Init+0x128>)
 800276e:	f004 fdd7 	bl	8007320 <HAL_TIM_PWM_ConfigChannel>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002778:	f000 fb48 	bl	8002e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800277c:	1d3b      	adds	r3, r7, #4
 800277e:	2208      	movs	r2, #8
 8002780:	4619      	mov	r1, r3
 8002782:	480d      	ldr	r0, [pc, #52]	; (80027b8 <MX_TIM3_Init+0x128>)
 8002784:	f004 fdcc 	bl	8007320 <HAL_TIM_PWM_ConfigChannel>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800278e:	f000 fb3d 	bl	8002e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002792:	1d3b      	adds	r3, r7, #4
 8002794:	220c      	movs	r2, #12
 8002796:	4619      	mov	r1, r3
 8002798:	4807      	ldr	r0, [pc, #28]	; (80027b8 <MX_TIM3_Init+0x128>)
 800279a:	f004 fdc1 	bl	8007320 <HAL_TIM_PWM_ConfigChannel>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80027a4:	f000 fb32 	bl	8002e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80027a8:	4803      	ldr	r0, [pc, #12]	; (80027b8 <MX_TIM3_Init+0x128>)
 80027aa:	f000 fcad 	bl	8003108 <HAL_TIM_MspPostInit>

}
 80027ae:	bf00      	nop
 80027b0:	3738      	adds	r7, #56	; 0x38
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000618 	.word	0x20000618
 80027bc:	40000400 	.word	0x40000400

080027c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08e      	sub	sp, #56	; 0x38
 80027c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	609a      	str	r2, [r3, #8]
 80027d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027d4:	f107 0320 	add.w	r3, r7, #32
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027de:	1d3b      	adds	r3, r7, #4
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	611a      	str	r2, [r3, #16]
 80027ec:	615a      	str	r2, [r3, #20]
 80027ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027f0:	4b32      	ldr	r3, [pc, #200]	; (80028bc <MX_TIM4_Init+0xfc>)
 80027f2:	4a33      	ldr	r2, [pc, #204]	; (80028c0 <MX_TIM4_Init+0x100>)
 80027f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2100-1;
 80027f6:	4b31      	ldr	r3, [pc, #196]	; (80028bc <MX_TIM4_Init+0xfc>)
 80027f8:	f640 0233 	movw	r2, #2099	; 0x833
 80027fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027fe:	4b2f      	ldr	r3, [pc, #188]	; (80028bc <MX_TIM4_Init+0xfc>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 250-1;
 8002804:	4b2d      	ldr	r3, [pc, #180]	; (80028bc <MX_TIM4_Init+0xfc>)
 8002806:	22f9      	movs	r2, #249	; 0xf9
 8002808:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800280a:	4b2c      	ldr	r3, [pc, #176]	; (80028bc <MX_TIM4_Init+0xfc>)
 800280c:	2200      	movs	r2, #0
 800280e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002810:	4b2a      	ldr	r3, [pc, #168]	; (80028bc <MX_TIM4_Init+0xfc>)
 8002812:	2200      	movs	r2, #0
 8002814:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002816:	4829      	ldr	r0, [pc, #164]	; (80028bc <MX_TIM4_Init+0xfc>)
 8002818:	f004 fbdc 	bl	8006fd4 <HAL_TIM_Base_Init>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002822:	f000 faf3 	bl	8002e0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800282a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800282c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002830:	4619      	mov	r1, r3
 8002832:	4822      	ldr	r0, [pc, #136]	; (80028bc <MX_TIM4_Init+0xfc>)
 8002834:	f004 fe36 	bl	80074a4 <HAL_TIM_ConfigClockSource>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800283e:	f000 fae5 	bl	8002e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002842:	481e      	ldr	r0, [pc, #120]	; (80028bc <MX_TIM4_Init+0xfc>)
 8002844:	f004 fc15 	bl	8007072 <HAL_TIM_PWM_Init>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800284e:	f000 fadd 	bl	8002e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002852:	2300      	movs	r3, #0
 8002854:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002856:	2300      	movs	r3, #0
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800285a:	f107 0320 	add.w	r3, r7, #32
 800285e:	4619      	mov	r1, r3
 8002860:	4816      	ldr	r0, [pc, #88]	; (80028bc <MX_TIM4_Init+0xfc>)
 8002862:	f005 fa71 	bl	8007d48 <HAL_TIMEx_MasterConfigSynchronization>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800286c:	f000 face 	bl	8002e0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002870:	2360      	movs	r3, #96	; 0x60
 8002872:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002880:	1d3b      	adds	r3, r7, #4
 8002882:	2204      	movs	r2, #4
 8002884:	4619      	mov	r1, r3
 8002886:	480d      	ldr	r0, [pc, #52]	; (80028bc <MX_TIM4_Init+0xfc>)
 8002888:	f004 fd4a 	bl	8007320 <HAL_TIM_PWM_ConfigChannel>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002892:	f000 fabb 	bl	8002e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002896:	1d3b      	adds	r3, r7, #4
 8002898:	2208      	movs	r2, #8
 800289a:	4619      	mov	r1, r3
 800289c:	4807      	ldr	r0, [pc, #28]	; (80028bc <MX_TIM4_Init+0xfc>)
 800289e:	f004 fd3f 	bl	8007320 <HAL_TIM_PWM_ConfigChannel>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80028a8:	f000 fab0 	bl	8002e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80028ac:	4803      	ldr	r0, [pc, #12]	; (80028bc <MX_TIM4_Init+0xfc>)
 80028ae:	f000 fc2b 	bl	8003108 <HAL_TIM_MspPostInit>

}
 80028b2:	bf00      	nop
 80028b4:	3738      	adds	r7, #56	; 0x38
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20000660 	.word	0x20000660
 80028c0:	40000800 	.word	0x40000800

080028c4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ca:	463b      	mov	r3, r7
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80028d2:	4b15      	ldr	r3, [pc, #84]	; (8002928 <MX_TIM7_Init+0x64>)
 80028d4:	4a15      	ldr	r2, [pc, #84]	; (800292c <MX_TIM7_Init+0x68>)
 80028d6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 100;
 80028d8:	4b13      	ldr	r3, [pc, #76]	; (8002928 <MX_TIM7_Init+0x64>)
 80028da:	2264      	movs	r2, #100	; 0x64
 80028dc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028de:	4b12      	ldr	r3, [pc, #72]	; (8002928 <MX_TIM7_Init+0x64>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8399;
 80028e4:	4b10      	ldr	r3, [pc, #64]	; (8002928 <MX_TIM7_Init+0x64>)
 80028e6:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80028ea:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ec:	4b0e      	ldr	r3, [pc, #56]	; (8002928 <MX_TIM7_Init+0x64>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80028f2:	480d      	ldr	r0, [pc, #52]	; (8002928 <MX_TIM7_Init+0x64>)
 80028f4:	f004 fb6e 	bl	8006fd4 <HAL_TIM_Base_Init>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80028fe:	f000 fa85 	bl	8002e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002902:	2300      	movs	r3, #0
 8002904:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002906:	2300      	movs	r3, #0
 8002908:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800290a:	463b      	mov	r3, r7
 800290c:	4619      	mov	r1, r3
 800290e:	4806      	ldr	r0, [pc, #24]	; (8002928 <MX_TIM7_Init+0x64>)
 8002910:	f005 fa1a 	bl	8007d48 <HAL_TIMEx_MasterConfigSynchronization>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800291a:	f000 fa77 	bl	8002e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	200006a8 	.word	0x200006a8
 800292c:	40001400 	.word	0x40001400

08002930 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b092      	sub	sp, #72	; 0x48
 8002934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002936:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]
 8002950:	615a      	str	r2, [r3, #20]
 8002952:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002954:	1d3b      	adds	r3, r7, #4
 8002956:	2220      	movs	r2, #32
 8002958:	2100      	movs	r1, #0
 800295a:	4618      	mov	r0, r3
 800295c:	f00a f826 	bl	800c9ac <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002960:	4b39      	ldr	r3, [pc, #228]	; (8002a48 <MX_TIM8_Init+0x118>)
 8002962:	4a3a      	ldr	r2, [pc, #232]	; (8002a4c <MX_TIM8_Init+0x11c>)
 8002964:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002966:	4b38      	ldr	r3, [pc, #224]	; (8002a48 <MX_TIM8_Init+0x118>)
 8002968:	2200      	movs	r2, #0
 800296a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800296c:	4b36      	ldr	r3, [pc, #216]	; (8002a48 <MX_TIM8_Init+0x118>)
 800296e:	2200      	movs	r2, #0
 8002970:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002972:	4b35      	ldr	r3, [pc, #212]	; (8002a48 <MX_TIM8_Init+0x118>)
 8002974:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002978:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800297a:	4b33      	ldr	r3, [pc, #204]	; (8002a48 <MX_TIM8_Init+0x118>)
 800297c:	2200      	movs	r2, #0
 800297e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002980:	4b31      	ldr	r3, [pc, #196]	; (8002a48 <MX_TIM8_Init+0x118>)
 8002982:	2200      	movs	r2, #0
 8002984:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002986:	4b30      	ldr	r3, [pc, #192]	; (8002a48 <MX_TIM8_Init+0x118>)
 8002988:	2200      	movs	r2, #0
 800298a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800298c:	482e      	ldr	r0, [pc, #184]	; (8002a48 <MX_TIM8_Init+0x118>)
 800298e:	f004 fb70 	bl	8007072 <HAL_TIM_PWM_Init>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002998:	f000 fa38 	bl	8002e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800299c:	2300      	movs	r3, #0
 800299e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029a0:	2300      	movs	r3, #0
 80029a2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80029a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80029a8:	4619      	mov	r1, r3
 80029aa:	4827      	ldr	r0, [pc, #156]	; (8002a48 <MX_TIM8_Init+0x118>)
 80029ac:	f005 f9cc 	bl	8007d48 <HAL_TIMEx_MasterConfigSynchronization>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80029b6:	f000 fa29 	bl	8002e0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029ba:	2360      	movs	r3, #96	; 0x60
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029c2:	2300      	movs	r3, #0
 80029c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80029c6:	2300      	movs	r3, #0
 80029c8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029ca:	2300      	movs	r3, #0
 80029cc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80029ce:	2300      	movs	r3, #0
 80029d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80029d2:	2300      	movs	r3, #0
 80029d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029da:	2208      	movs	r2, #8
 80029dc:	4619      	mov	r1, r3
 80029de:	481a      	ldr	r0, [pc, #104]	; (8002a48 <MX_TIM8_Init+0x118>)
 80029e0:	f004 fc9e 	bl	8007320 <HAL_TIM_PWM_ConfigChannel>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80029ea:	f000 fa0f 	bl	8002e0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80029ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029f2:	220c      	movs	r2, #12
 80029f4:	4619      	mov	r1, r3
 80029f6:	4814      	ldr	r0, [pc, #80]	; (8002a48 <MX_TIM8_Init+0x118>)
 80029f8:	f004 fc92 	bl	8007320 <HAL_TIM_PWM_ConfigChannel>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8002a02:	f000 fa03 	bl	8002e0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a06:	2300      	movs	r3, #0
 8002a08:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a1e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a20:	2300      	movs	r3, #0
 8002a22:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002a24:	1d3b      	adds	r3, r7, #4
 8002a26:	4619      	mov	r1, r3
 8002a28:	4807      	ldr	r0, [pc, #28]	; (8002a48 <MX_TIM8_Init+0x118>)
 8002a2a:	f005 fa09 	bl	8007e40 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8002a34:	f000 f9ea 	bl	8002e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002a38:	4803      	ldr	r0, [pc, #12]	; (8002a48 <MX_TIM8_Init+0x118>)
 8002a3a:	f000 fb65 	bl	8003108 <HAL_TIM_MspPostInit>

}
 8002a3e:	bf00      	nop
 8002a40:	3748      	adds	r7, #72	; 0x48
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	200006f0 	.word	0x200006f0
 8002a4c:	40010400 	.word	0x40010400

08002a50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a54:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <MX_USART3_UART_Init+0x4c>)
 8002a56:	4a12      	ldr	r2, [pc, #72]	; (8002aa0 <MX_USART3_UART_Init+0x50>)
 8002a58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002a5a:	4b10      	ldr	r3, [pc, #64]	; (8002a9c <MX_USART3_UART_Init+0x4c>)
 8002a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a62:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <MX_USART3_UART_Init+0x4c>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <MX_USART3_UART_Init+0x4c>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <MX_USART3_UART_Init+0x4c>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a74:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <MX_USART3_UART_Init+0x4c>)
 8002a76:	220c      	movs	r2, #12
 8002a78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a7a:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <MX_USART3_UART_Init+0x4c>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <MX_USART3_UART_Init+0x4c>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a86:	4805      	ldr	r0, [pc, #20]	; (8002a9c <MX_USART3_UART_Init+0x4c>)
 8002a88:	f005 fa40 	bl	8007f0c <HAL_UART_Init>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002a92:	f000 f9bb 	bl	8002e0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	200007f8 	.word	0x200007f8
 8002aa0:	40004800 	.word	0x40004800

08002aa4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	607b      	str	r3, [r7, #4]
 8002aae:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <MX_DMA_Init+0x4c>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	4a0f      	ldr	r2, [pc, #60]	; (8002af0 <MX_DMA_Init+0x4c>)
 8002ab4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aba:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <MX_DMA_Init+0x4c>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac2:	607b      	str	r3, [r7, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2100      	movs	r1, #0
 8002aca:	203c      	movs	r0, #60	; 0x3c
 8002acc:	f001 f8fb 	bl	8003cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002ad0:	203c      	movs	r0, #60	; 0x3c
 8002ad2:	f001 f914 	bl	8003cfe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2100      	movs	r1, #0
 8002ada:	2046      	movs	r0, #70	; 0x46
 8002adc:	f001 f8f3 	bl	8003cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002ae0:	2046      	movs	r0, #70	; 0x46
 8002ae2:	f001 f90c 	bl	8003cfe <HAL_NVIC_EnableIRQ>

}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40023800 	.word	0x40023800

08002af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08c      	sub	sp, #48	; 0x30
 8002af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afa:	f107 031c 	add.w	r3, r7, #28
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	609a      	str	r2, [r3, #8]
 8002b06:	60da      	str	r2, [r3, #12]
 8002b08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61bb      	str	r3, [r7, #24]
 8002b0e:	4b9c      	ldr	r3, [pc, #624]	; (8002d80 <MX_GPIO_Init+0x28c>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	4a9b      	ldr	r2, [pc, #620]	; (8002d80 <MX_GPIO_Init+0x28c>)
 8002b14:	f043 0310 	orr.w	r3, r3, #16
 8002b18:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1a:	4b99      	ldr	r3, [pc, #612]	; (8002d80 <MX_GPIO_Init+0x28c>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	61bb      	str	r3, [r7, #24]
 8002b24:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	4b95      	ldr	r3, [pc, #596]	; (8002d80 <MX_GPIO_Init+0x28c>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	4a94      	ldr	r2, [pc, #592]	; (8002d80 <MX_GPIO_Init+0x28c>)
 8002b30:	f043 0304 	orr.w	r3, r3, #4
 8002b34:	6313      	str	r3, [r2, #48]	; 0x30
 8002b36:	4b92      	ldr	r3, [pc, #584]	; (8002d80 <MX_GPIO_Init+0x28c>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	4b8e      	ldr	r3, [pc, #568]	; (8002d80 <MX_GPIO_Init+0x28c>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	4a8d      	ldr	r2, [pc, #564]	; (8002d80 <MX_GPIO_Init+0x28c>)
 8002b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b50:	6313      	str	r3, [r2, #48]	; 0x30
 8002b52:	4b8b      	ldr	r3, [pc, #556]	; (8002d80 <MX_GPIO_Init+0x28c>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	4b87      	ldr	r3, [pc, #540]	; (8002d80 <MX_GPIO_Init+0x28c>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	4a86      	ldr	r2, [pc, #536]	; (8002d80 <MX_GPIO_Init+0x28c>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6e:	4b84      	ldr	r3, [pc, #528]	; (8002d80 <MX_GPIO_Init+0x28c>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60bb      	str	r3, [r7, #8]
 8002b7e:	4b80      	ldr	r3, [pc, #512]	; (8002d80 <MX_GPIO_Init+0x28c>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	4a7f      	ldr	r2, [pc, #508]	; (8002d80 <MX_GPIO_Init+0x28c>)
 8002b84:	f043 0302 	orr.w	r3, r3, #2
 8002b88:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8a:	4b7d      	ldr	r3, [pc, #500]	; (8002d80 <MX_GPIO_Init+0x28c>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	60bb      	str	r3, [r7, #8]
 8002b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	607b      	str	r3, [r7, #4]
 8002b9a:	4b79      	ldr	r3, [pc, #484]	; (8002d80 <MX_GPIO_Init+0x28c>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	4a78      	ldr	r2, [pc, #480]	; (8002d80 <MX_GPIO_Init+0x28c>)
 8002ba0:	f043 0308 	orr.w	r3, r3, #8
 8002ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba6:	4b76      	ldr	r3, [pc, #472]	; (8002d80 <MX_GPIO_Init+0x28c>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	607b      	str	r3, [r7, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2108      	movs	r1, #8
 8002bb6:	4873      	ldr	r0, [pc, #460]	; (8002d84 <MX_GPIO_Init+0x290>)
 8002bb8:	f001 fe5a 	bl	8004870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	4871      	ldr	r0, [pc, #452]	; (8002d88 <MX_GPIO_Init+0x294>)
 8002bc2:	f001 fe55 	bl	8004870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_RESET);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2108      	movs	r1, #8
 8002bca:	4870      	ldr	r0, [pc, #448]	; (8002d8c <MX_GPIO_Init+0x298>)
 8002bcc:	f001 fe50 	bl	8004870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TEST_OUT_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f64f 0110 	movw	r1, #63504	; 0xf810
 8002bd6:	486e      	ldr	r0, [pc, #440]	; (8002d90 <MX_GPIO_Init+0x29c>)
 8002bd8:	f001 fe4a 	bl	8004870 <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bdc:	2308      	movs	r3, #8
 8002bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002be0:	2301      	movs	r3, #1
 8002be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be8:	2300      	movs	r3, #0
 8002bea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bec:	f107 031c 	add.w	r3, r7, #28
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4864      	ldr	r0, [pc, #400]	; (8002d84 <MX_GPIO_Init+0x290>)
 8002bf4:	f001 fca0 	bl	8004538 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c04:	2300      	movs	r3, #0
 8002c06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002c08:	f107 031c 	add.w	r3, r7, #28
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	485e      	ldr	r0, [pc, #376]	; (8002d88 <MX_GPIO_Init+0x294>)
 8002c10:	f001 fc92 	bl	8004538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002c14:	2308      	movs	r3, #8
 8002c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c20:	2300      	movs	r3, #0
 8002c22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c24:	2305      	movs	r3, #5
 8002c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002c28:	f107 031c 	add.w	r3, r7, #28
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4856      	ldr	r0, [pc, #344]	; (8002d88 <MX_GPIO_Init+0x294>)
 8002c30:	f001 fc82 	bl	8004538 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002c34:	2301      	movs	r3, #1
 8002c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002c38:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c42:	f107 031c 	add.w	r3, r7, #28
 8002c46:	4619      	mov	r1, r3
 8002c48:	4850      	ldr	r0, [pc, #320]	; (8002d8c <MX_GPIO_Init+0x298>)
 8002c4a:	f001 fc75 	bl	8004538 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_SD_Pin */
  GPIO_InitStruct.Pin = CS_SD_Pin;
 8002c4e:	2308      	movs	r3, #8
 8002c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c52:	2301      	movs	r3, #1
 8002c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_SD_GPIO_Port, &GPIO_InitStruct);
 8002c5e:	f107 031c 	add.w	r3, r7, #28
 8002c62:	4619      	mov	r1, r3
 8002c64:	4849      	ldr	r0, [pc, #292]	; (8002d8c <MX_GPIO_Init+0x298>)
 8002c66:	f001 fc67 	bl	8004538 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002c6a:	2310      	movs	r3, #16
 8002c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c76:	2300      	movs	r3, #0
 8002c78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c7a:	2306      	movs	r3, #6
 8002c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002c7e:	f107 031c 	add.w	r3, r7, #28
 8002c82:	4619      	mov	r1, r3
 8002c84:	4841      	ldr	r0, [pc, #260]	; (8002d8c <MX_GPIO_Init+0x298>)
 8002c86:	f001 fc57 	bl	8004538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c8a:	2304      	movs	r3, #4
 8002c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c96:	f107 031c 	add.w	r3, r7, #28
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	483d      	ldr	r0, [pc, #244]	; (8002d94 <MX_GPIO_Init+0x2a0>)
 8002c9e:	f001 fc4b 	bl	8004538 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002cb4:	2305      	movs	r3, #5
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002cb8:	f107 031c 	add.w	r3, r7, #28
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4835      	ldr	r0, [pc, #212]	; (8002d94 <MX_GPIO_Init+0x2a0>)
 8002cc0:	f001 fc3a 	bl	8004538 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUT_Pin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 8002cc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 8002cd6:	f107 031c 	add.w	r3, r7, #28
 8002cda:	4619      	mov	r1, r3
 8002cdc:	482c      	ldr	r0, [pc, #176]	; (8002d90 <MX_GPIO_Init+0x29c>)
 8002cde:	f001 fc2b 	bl	8004538 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002ce2:	f24f 0310 	movw	r3, #61456	; 0xf010
 8002ce6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cf4:	f107 031c 	add.w	r3, r7, #28
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4825      	ldr	r0, [pc, #148]	; (8002d90 <MX_GPIO_Init+0x29c>)
 8002cfc:	f001 fc1c 	bl	8004538 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002d00:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d06:	2302      	movs	r3, #2
 8002d08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002d12:	2306      	movs	r3, #6
 8002d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d16:	f107 031c 	add.w	r3, r7, #28
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	481a      	ldr	r0, [pc, #104]	; (8002d88 <MX_GPIO_Init+0x294>)
 8002d1e:	f001 fc0b 	bl	8004538 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002d22:	2320      	movs	r3, #32
 8002d24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d26:	2300      	movs	r3, #0
 8002d28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002d2e:	f107 031c 	add.w	r3, r7, #28
 8002d32:	4619      	mov	r1, r3
 8002d34:	4816      	ldr	r0, [pc, #88]	; (8002d90 <MX_GPIO_Init+0x29c>)
 8002d36:	f001 fbff 	bl	8004538 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002d3a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d40:	2312      	movs	r3, #18
 8002d42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d44:	2301      	movs	r3, #1
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d4c:	2304      	movs	r3, #4
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d50:	f107 031c 	add.w	r3, r7, #28
 8002d54:	4619      	mov	r1, r3
 8002d56:	480f      	ldr	r0, [pc, #60]	; (8002d94 <MX_GPIO_Init+0x2a0>)
 8002d58:	f001 fbee 	bl	8004538 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002d60:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002d6a:	f107 031c 	add.w	r3, r7, #28
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4804      	ldr	r0, [pc, #16]	; (8002d84 <MX_GPIO_Init+0x290>)
 8002d72:	f001 fbe1 	bl	8004538 <HAL_GPIO_Init>

}
 8002d76:	bf00      	nop
 8002d78:	3730      	adds	r7, #48	; 0x30
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40020800 	.word	0x40020800
 8002d8c:	40020000 	.word	0x40020000
 8002d90:	40020c00 	.word	0x40020c00
 8002d94:	40020400 	.word	0x40020400

08002d98 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// ------------------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
	if(htim==&htim7)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a08      	ldr	r2, [pc, #32]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d106      	bne.n	8002db6 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		Timer7++;
 8002da8:	4b07      	ldr	r3, [pc, #28]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3301      	adds	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002db4:	801a      	strh	r2, [r3, #0]
	}
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	200006a8 	.word	0x200006a8
 8002dc8:	2000083c 	.word	0x2000083c

08002dcc <HAL_UART_RxCpltCallback>:
// ------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
	int ggg = 99;
 8002dd4:	2363      	movs	r3, #99	; 0x63
 8002dd6:	60fb      	str	r3, [r7, #12]
	if(huart -> Instance == USART3)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a07      	ldr	r2, [pc, #28]	; (8002dfc <HAL_UART_RxCpltCallback+0x30>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d108      	bne.n	8002df4 <HAL_UART_RxCpltCallback+0x28>
	{
		command_from_uart = uart_RX_data;
 8002de2:	4b07      	ldr	r3, [pc, #28]	; (8002e00 <HAL_UART_RxCpltCallback+0x34>)
 8002de4:	781a      	ldrb	r2, [r3, #0]
 8002de6:	4b07      	ldr	r3, [pc, #28]	; (8002e04 <HAL_UART_RxCpltCallback+0x38>)
 8002de8:	701a      	strb	r2, [r3, #0]

		// HAL_UART_Transmit_IT(&huart3, uart_RX_data, sizeof(uart_RX_data));		// Make echo doesn't work

		HAL_UART_Receive_IT(&huart3, &uart_RX_data, sizeof(uart_RX_data));
 8002dea:	2201      	movs	r2, #1
 8002dec:	4904      	ldr	r1, [pc, #16]	; (8002e00 <HAL_UART_RxCpltCallback+0x34>)
 8002dee:	4806      	ldr	r0, [pc, #24]	; (8002e08 <HAL_UART_RxCpltCallback+0x3c>)
 8002df0:	f005 f9b0 	bl	8008154 <HAL_UART_Receive_IT>
	}
}
 8002df4:	bf00      	nop
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40004800 	.word	0x40004800
 8002e00:	2000083e 	.word	0x2000083e
 8002e04:	2000083f 	.word	0x2000083f
 8002e08:	200007f8 	.word	0x200007f8

08002e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e10:	b672      	cpsid	i
}
 8002e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e14:	e7fe      	b.n	8002e14 <Error_Handler+0x8>
	...

08002e18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	607b      	str	r3, [r7, #4]
 8002e22:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <HAL_MspInit+0x4c>)
 8002e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e26:	4a0f      	ldr	r2, [pc, #60]	; (8002e64 <HAL_MspInit+0x4c>)
 8002e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <HAL_MspInit+0x4c>)
 8002e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e36:	607b      	str	r3, [r7, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	603b      	str	r3, [r7, #0]
 8002e3e:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <HAL_MspInit+0x4c>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	4a08      	ldr	r2, [pc, #32]	; (8002e64 <HAL_MspInit+0x4c>)
 8002e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e48:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_MspInit+0x4c>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002e56:	2007      	movs	r0, #7
 8002e58:	f000 ff2a 	bl	8003cb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40023800 	.word	0x40023800

08002e68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08a      	sub	sp, #40	; 0x28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e70:	f107 0314 	add.w	r3, r7, #20
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a19      	ldr	r2, [pc, #100]	; (8002eec <HAL_SPI_MspInit+0x84>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d12b      	bne.n	8002ee2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	4b18      	ldr	r3, [pc, #96]	; (8002ef0 <HAL_SPI_MspInit+0x88>)
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	4a17      	ldr	r2, [pc, #92]	; (8002ef0 <HAL_SPI_MspInit+0x88>)
 8002e94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e98:	6453      	str	r3, [r2, #68]	; 0x44
 8002e9a:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <HAL_SPI_MspInit+0x88>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ea2:	613b      	str	r3, [r7, #16]
 8002ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	4b11      	ldr	r3, [pc, #68]	; (8002ef0 <HAL_SPI_MspInit+0x88>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	4a10      	ldr	r2, [pc, #64]	; (8002ef0 <HAL_SPI_MspInit+0x88>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ef0 <HAL_SPI_MspInit+0x88>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002ec2:	23e0      	movs	r3, #224	; 0xe0
 8002ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ed2:	2305      	movs	r3, #5
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed6:	f107 0314 	add.w	r3, r7, #20
 8002eda:	4619      	mov	r1, r3
 8002edc:	4805      	ldr	r0, [pc, #20]	; (8002ef4 <HAL_SPI_MspInit+0x8c>)
 8002ede:	f001 fb2b 	bl	8004538 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ee2:	bf00      	nop
 8002ee4:	3728      	adds	r7, #40	; 0x28
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40013000 	.word	0x40013000
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	40020000 	.word	0x40020000

08002ef8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f08:	d116      	bne.n	8002f38 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
 8002f0e:	4b2e      	ldr	r3, [pc, #184]	; (8002fc8 <HAL_TIM_Base_MspInit+0xd0>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	4a2d      	ldr	r2, [pc, #180]	; (8002fc8 <HAL_TIM_Base_MspInit+0xd0>)
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1a:	4b2b      	ldr	r3, [pc, #172]	; (8002fc8 <HAL_TIM_Base_MspInit+0xd0>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f26:	2200      	movs	r2, #0
 8002f28:	2100      	movs	r1, #0
 8002f2a:	201c      	movs	r0, #28
 8002f2c:	f000 fecb 	bl	8003cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f30:	201c      	movs	r0, #28
 8002f32:	f000 fee4 	bl	8003cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002f36:	e042      	b.n	8002fbe <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a23      	ldr	r2, [pc, #140]	; (8002fcc <HAL_TIM_Base_MspInit+0xd4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d10e      	bne.n	8002f60 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <HAL_TIM_Base_MspInit+0xd0>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	4a1f      	ldr	r2, [pc, #124]	; (8002fc8 <HAL_TIM_Base_MspInit+0xd0>)
 8002f4c:	f043 0302 	orr.w	r3, r3, #2
 8002f50:	6413      	str	r3, [r2, #64]	; 0x40
 8002f52:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <HAL_TIM_Base_MspInit+0xd0>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	693b      	ldr	r3, [r7, #16]
}
 8002f5e:	e02e      	b.n	8002fbe <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a1a      	ldr	r2, [pc, #104]	; (8002fd0 <HAL_TIM_Base_MspInit+0xd8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d10e      	bne.n	8002f88 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	4b16      	ldr	r3, [pc, #88]	; (8002fc8 <HAL_TIM_Base_MspInit+0xd0>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	4a15      	ldr	r2, [pc, #84]	; (8002fc8 <HAL_TIM_Base_MspInit+0xd0>)
 8002f74:	f043 0304 	orr.w	r3, r3, #4
 8002f78:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7a:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <HAL_TIM_Base_MspInit+0xd0>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	68fb      	ldr	r3, [r7, #12]
}
 8002f86:	e01a      	b.n	8002fbe <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM7)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a11      	ldr	r2, [pc, #68]	; (8002fd4 <HAL_TIM_Base_MspInit+0xdc>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d115      	bne.n	8002fbe <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <HAL_TIM_Base_MspInit+0xd0>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	4a0b      	ldr	r2, [pc, #44]	; (8002fc8 <HAL_TIM_Base_MspInit+0xd0>)
 8002f9c:	f043 0320 	orr.w	r3, r3, #32
 8002fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fa2:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <HAL_TIM_Base_MspInit+0xd0>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	f003 0320 	and.w	r3, r3, #32
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	2037      	movs	r0, #55	; 0x37
 8002fb4:	f000 fe87 	bl	8003cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002fb8:	2037      	movs	r0, #55	; 0x37
 8002fba:	f000 fea0 	bl	8003cfe <HAL_NVIC_EnableIRQ>
}
 8002fbe:	bf00      	nop
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40000400 	.word	0x40000400
 8002fd0:	40000800 	.word	0x40000800
 8002fd4:	40001400 	.word	0x40001400

08002fd8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a42      	ldr	r2, [pc, #264]	; (80030f0 <HAL_TIM_PWM_MspInit+0x118>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d17d      	bne.n	80030e6 <HAL_TIM_PWM_MspInit+0x10e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	4b41      	ldr	r3, [pc, #260]	; (80030f4 <HAL_TIM_PWM_MspInit+0x11c>)
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	4a40      	ldr	r2, [pc, #256]	; (80030f4 <HAL_TIM_PWM_MspInit+0x11c>)
 8002ff4:	f043 0302 	orr.w	r3, r3, #2
 8002ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ffa:	4b3e      	ldr	r3, [pc, #248]	; (80030f4 <HAL_TIM_PWM_MspInit+0x11c>)
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 DMA Init */
    /* TIM8_CH3 Init */
    hdma_tim8_ch3.Instance = DMA2_Stream4;
 8003006:	4b3c      	ldr	r3, [pc, #240]	; (80030f8 <HAL_TIM_PWM_MspInit+0x120>)
 8003008:	4a3c      	ldr	r2, [pc, #240]	; (80030fc <HAL_TIM_PWM_MspInit+0x124>)
 800300a:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch3.Init.Channel = DMA_CHANNEL_7;
 800300c:	4b3a      	ldr	r3, [pc, #232]	; (80030f8 <HAL_TIM_PWM_MspInit+0x120>)
 800300e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003012:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003014:	4b38      	ldr	r3, [pc, #224]	; (80030f8 <HAL_TIM_PWM_MspInit+0x120>)
 8003016:	2240      	movs	r2, #64	; 0x40
 8003018:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800301a:	4b37      	ldr	r3, [pc, #220]	; (80030f8 <HAL_TIM_PWM_MspInit+0x120>)
 800301c:	2200      	movs	r2, #0
 800301e:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003020:	4b35      	ldr	r3, [pc, #212]	; (80030f8 <HAL_TIM_PWM_MspInit+0x120>)
 8003022:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003026:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003028:	4b33      	ldr	r3, [pc, #204]	; (80030f8 <HAL_TIM_PWM_MspInit+0x120>)
 800302a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800302e:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003030:	4b31      	ldr	r3, [pc, #196]	; (80030f8 <HAL_TIM_PWM_MspInit+0x120>)
 8003032:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003036:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch3.Init.Mode = DMA_CIRCULAR;
 8003038:	4b2f      	ldr	r3, [pc, #188]	; (80030f8 <HAL_TIM_PWM_MspInit+0x120>)
 800303a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800303e:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8003040:	4b2d      	ldr	r3, [pc, #180]	; (80030f8 <HAL_TIM_PWM_MspInit+0x120>)
 8003042:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003046:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003048:	4b2b      	ldr	r3, [pc, #172]	; (80030f8 <HAL_TIM_PWM_MspInit+0x120>)
 800304a:	2200      	movs	r2, #0
 800304c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch3) != HAL_OK)
 800304e:	482a      	ldr	r0, [pc, #168]	; (80030f8 <HAL_TIM_PWM_MspInit+0x120>)
 8003050:	f000 fe70 	bl	8003d34 <HAL_DMA_Init>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_TIM_PWM_MspInit+0x86>
    {
      Error_Handler();
 800305a:	f7ff fed7 	bl	8002e0c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a25      	ldr	r2, [pc, #148]	; (80030f8 <HAL_TIM_PWM_MspInit+0x120>)
 8003062:	62da      	str	r2, [r3, #44]	; 0x2c
 8003064:	4a24      	ldr	r2, [pc, #144]	; (80030f8 <HAL_TIM_PWM_MspInit+0x120>)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM8_CH4_TRIG_COM Init */
    hdma_tim8_ch4_trig_com.Instance = DMA2_Stream7;
 800306a:	4b25      	ldr	r3, [pc, #148]	; (8003100 <HAL_TIM_PWM_MspInit+0x128>)
 800306c:	4a25      	ldr	r2, [pc, #148]	; (8003104 <HAL_TIM_PWM_MspInit+0x12c>)
 800306e:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch4_trig_com.Init.Channel = DMA_CHANNEL_7;
 8003070:	4b23      	ldr	r3, [pc, #140]	; (8003100 <HAL_TIM_PWM_MspInit+0x128>)
 8003072:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003076:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003078:	4b21      	ldr	r3, [pc, #132]	; (8003100 <HAL_TIM_PWM_MspInit+0x128>)
 800307a:	2240      	movs	r2, #64	; 0x40
 800307c:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 800307e:	4b20      	ldr	r3, [pc, #128]	; (8003100 <HAL_TIM_PWM_MspInit+0x128>)
 8003080:	2200      	movs	r2, #0
 8003082:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8003084:	4b1e      	ldr	r3, [pc, #120]	; (8003100 <HAL_TIM_PWM_MspInit+0x128>)
 8003086:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800308a:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800308c:	4b1c      	ldr	r3, [pc, #112]	; (8003100 <HAL_TIM_PWM_MspInit+0x128>)
 800308e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003092:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003094:	4b1a      	ldr	r3, [pc, #104]	; (8003100 <HAL_TIM_PWM_MspInit+0x128>)
 8003096:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800309a:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 800309c:	4b18      	ldr	r3, [pc, #96]	; (8003100 <HAL_TIM_PWM_MspInit+0x128>)
 800309e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030a2:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 80030a4:	4b16      	ldr	r3, [pc, #88]	; (8003100 <HAL_TIM_PWM_MspInit+0x128>)
 80030a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030aa:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030ac:	4b14      	ldr	r3, [pc, #80]	; (8003100 <HAL_TIM_PWM_MspInit+0x128>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch4_trig_com) != HAL_OK)
 80030b2:	4813      	ldr	r0, [pc, #76]	; (8003100 <HAL_TIM_PWM_MspInit+0x128>)
 80030b4:	f000 fe3e 	bl	8003d34 <HAL_DMA_Init>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_TIM_PWM_MspInit+0xea>
    {
      Error_Handler();
 80030be:	f7ff fea5 	bl	8002e0c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim8_ch4_trig_com);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a0e      	ldr	r2, [pc, #56]	; (8003100 <HAL_TIM_PWM_MspInit+0x128>)
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
 80030c8:	4a0d      	ldr	r2, [pc, #52]	; (8003100 <HAL_TIM_PWM_MspInit+0x128>)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim8_ch4_trig_com);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a0b      	ldr	r2, [pc, #44]	; (8003100 <HAL_TIM_PWM_MspInit+0x128>)
 80030d2:	639a      	str	r2, [r3, #56]	; 0x38
 80030d4:	4a0a      	ldr	r2, [pc, #40]	; (8003100 <HAL_TIM_PWM_MspInit+0x128>)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim8_ch4_trig_com);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a08      	ldr	r2, [pc, #32]	; (8003100 <HAL_TIM_PWM_MspInit+0x128>)
 80030de:	635a      	str	r2, [r3, #52]	; 0x34
 80030e0:	4a07      	ldr	r2, [pc, #28]	; (8003100 <HAL_TIM_PWM_MspInit+0x128>)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80030e6:	bf00      	nop
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40010400 	.word	0x40010400
 80030f4:	40023800 	.word	0x40023800
 80030f8:	20000738 	.word	0x20000738
 80030fc:	40026470 	.word	0x40026470
 8003100:	20000798 	.word	0x20000798
 8003104:	400264b8 	.word	0x400264b8

08003108 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08c      	sub	sp, #48	; 0x30
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003110:	f107 031c 	add.w	r3, r7, #28
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	609a      	str	r2, [r3, #8]
 800311c:	60da      	str	r2, [r3, #12]
 800311e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003128:	d14e      	bne.n	80031c8 <HAL_TIM_MspPostInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	4b5f      	ldr	r3, [pc, #380]	; (80032ac <HAL_TIM_MspPostInit+0x1a4>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	4a5e      	ldr	r2, [pc, #376]	; (80032ac <HAL_TIM_MspPostInit+0x1a4>)
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	6313      	str	r3, [r2, #48]	; 0x30
 800313a:	4b5c      	ldr	r3, [pc, #368]	; (80032ac <HAL_TIM_MspPostInit+0x1a4>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	61bb      	str	r3, [r7, #24]
 8003144:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	4b58      	ldr	r3, [pc, #352]	; (80032ac <HAL_TIM_MspPostInit+0x1a4>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	4a57      	ldr	r2, [pc, #348]	; (80032ac <HAL_TIM_MspPostInit+0x1a4>)
 8003150:	f043 0302 	orr.w	r3, r3, #2
 8003154:	6313      	str	r3, [r2, #48]	; 0x30
 8003156:	4b55      	ldr	r3, [pc, #340]	; (80032ac <HAL_TIM_MspPostInit+0x1a4>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	697b      	ldr	r3, [r7, #20]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8003162:	2306      	movs	r3, #6
 8003164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003166:	2302      	movs	r3, #2
 8003168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316a:	2300      	movs	r3, #0
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316e:	2300      	movs	r3, #0
 8003170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003172:	2301      	movs	r3, #1
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003176:	f107 031c 	add.w	r3, r7, #28
 800317a:	4619      	mov	r1, r3
 800317c:	484c      	ldr	r0, [pc, #304]	; (80032b0 <HAL_TIM_MspPostInit+0x1a8>)
 800317e:	f001 f9db 	bl	8004538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003182:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003188:	2302      	movs	r3, #2
 800318a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318c:	2300      	movs	r3, #0
 800318e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003190:	2300      	movs	r3, #0
 8003192:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003194:	2301      	movs	r3, #1
 8003196:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003198:	f107 031c 	add.w	r3, r7, #28
 800319c:	4619      	mov	r1, r3
 800319e:	4845      	ldr	r0, [pc, #276]	; (80032b4 <HAL_TIM_MspPostInit+0x1ac>)
 80031a0:	f001 f9ca 	bl	8004538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80031a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031aa:	2302      	movs	r3, #2
 80031ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b2:	2303      	movs	r3, #3
 80031b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031b6:	2301      	movs	r3, #1
 80031b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ba:	f107 031c 	add.w	r3, r7, #28
 80031be:	4619      	mov	r1, r3
 80031c0:	483b      	ldr	r0, [pc, #236]	; (80032b0 <HAL_TIM_MspPostInit+0x1a8>)
 80031c2:	f001 f9b9 	bl	8004538 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80031c6:	e06c      	b.n	80032a2 <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM3)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a3a      	ldr	r2, [pc, #232]	; (80032b8 <HAL_TIM_MspPostInit+0x1b0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d11e      	bne.n	8003210 <HAL_TIM_MspPostInit+0x108>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	4b35      	ldr	r3, [pc, #212]	; (80032ac <HAL_TIM_MspPostInit+0x1a4>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	4a34      	ldr	r2, [pc, #208]	; (80032ac <HAL_TIM_MspPostInit+0x1a4>)
 80031dc:	f043 0302 	orr.w	r3, r3, #2
 80031e0:	6313      	str	r3, [r2, #48]	; 0x30
 80031e2:	4b32      	ldr	r3, [pc, #200]	; (80032ac <HAL_TIM_MspPostInit+0x1a4>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	613b      	str	r3, [r7, #16]
 80031ec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80031ee:	2333      	movs	r3, #51	; 0x33
 80031f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f2:	2302      	movs	r3, #2
 80031f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031fa:	2300      	movs	r3, #0
 80031fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031fe:	2302      	movs	r3, #2
 8003200:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003202:	f107 031c 	add.w	r3, r7, #28
 8003206:	4619      	mov	r1, r3
 8003208:	482a      	ldr	r0, [pc, #168]	; (80032b4 <HAL_TIM_MspPostInit+0x1ac>)
 800320a:	f001 f995 	bl	8004538 <HAL_GPIO_Init>
}
 800320e:	e048      	b.n	80032a2 <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM4)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a29      	ldr	r2, [pc, #164]	; (80032bc <HAL_TIM_MspPostInit+0x1b4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d11f      	bne.n	800325a <HAL_TIM_MspPostInit+0x152>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	4b23      	ldr	r3, [pc, #140]	; (80032ac <HAL_TIM_MspPostInit+0x1a4>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	4a22      	ldr	r2, [pc, #136]	; (80032ac <HAL_TIM_MspPostInit+0x1a4>)
 8003224:	f043 0302 	orr.w	r3, r3, #2
 8003228:	6313      	str	r3, [r2, #48]	; 0x30
 800322a:	4b20      	ldr	r3, [pc, #128]	; (80032ac <HAL_TIM_MspPostInit+0x1a4>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003236:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800323a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323c:	2302      	movs	r3, #2
 800323e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003240:	2300      	movs	r3, #0
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003244:	2300      	movs	r3, #0
 8003246:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003248:	2302      	movs	r3, #2
 800324a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800324c:	f107 031c 	add.w	r3, r7, #28
 8003250:	4619      	mov	r1, r3
 8003252:	4818      	ldr	r0, [pc, #96]	; (80032b4 <HAL_TIM_MspPostInit+0x1ac>)
 8003254:	f001 f970 	bl	8004538 <HAL_GPIO_Init>
}
 8003258:	e023      	b.n	80032a2 <HAL_TIM_MspPostInit+0x19a>
  else if(htim->Instance==TIM8)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a18      	ldr	r2, [pc, #96]	; (80032c0 <HAL_TIM_MspPostInit+0x1b8>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d11e      	bne.n	80032a2 <HAL_TIM_MspPostInit+0x19a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003264:	2300      	movs	r3, #0
 8003266:	60bb      	str	r3, [r7, #8]
 8003268:	4b10      	ldr	r3, [pc, #64]	; (80032ac <HAL_TIM_MspPostInit+0x1a4>)
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	4a0f      	ldr	r2, [pc, #60]	; (80032ac <HAL_TIM_MspPostInit+0x1a4>)
 800326e:	f043 0304 	orr.w	r3, r3, #4
 8003272:	6313      	str	r3, [r2, #48]	; 0x30
 8003274:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <HAL_TIM_MspPostInit+0x1a4>)
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003280:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003286:	2302      	movs	r3, #2
 8003288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328a:	2300      	movs	r3, #0
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800328e:	2303      	movs	r3, #3
 8003290:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003292:	2303      	movs	r3, #3
 8003294:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003296:	f107 031c 	add.w	r3, r7, #28
 800329a:	4619      	mov	r1, r3
 800329c:	4809      	ldr	r0, [pc, #36]	; (80032c4 <HAL_TIM_MspPostInit+0x1bc>)
 800329e:	f001 f94b 	bl	8004538 <HAL_GPIO_Init>
}
 80032a2:	bf00      	nop
 80032a4:	3730      	adds	r7, #48	; 0x30
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40020000 	.word	0x40020000
 80032b4:	40020400 	.word	0x40020400
 80032b8:	40000400 	.word	0x40000400
 80032bc:	40000800 	.word	0x40000800
 80032c0:	40010400 	.word	0x40010400
 80032c4:	40020800 	.word	0x40020800

080032c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08a      	sub	sp, #40	; 0x28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d0:	f107 0314 	add.w	r3, r7, #20
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a1d      	ldr	r2, [pc, #116]	; (800335c <HAL_UART_MspInit+0x94>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d134      	bne.n	8003354 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80032ea:	2300      	movs	r3, #0
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	4b1c      	ldr	r3, [pc, #112]	; (8003360 <HAL_UART_MspInit+0x98>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	4a1b      	ldr	r2, [pc, #108]	; (8003360 <HAL_UART_MspInit+0x98>)
 80032f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032f8:	6413      	str	r3, [r2, #64]	; 0x40
 80032fa:	4b19      	ldr	r3, [pc, #100]	; (8003360 <HAL_UART_MspInit+0x98>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	4b15      	ldr	r3, [pc, #84]	; (8003360 <HAL_UART_MspInit+0x98>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	4a14      	ldr	r2, [pc, #80]	; (8003360 <HAL_UART_MspInit+0x98>)
 8003310:	f043 0308 	orr.w	r3, r3, #8
 8003314:	6313      	str	r3, [r2, #48]	; 0x30
 8003316:	4b12      	ldr	r3, [pc, #72]	; (8003360 <HAL_UART_MspInit+0x98>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003322:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003328:	2302      	movs	r3, #2
 800332a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332c:	2300      	movs	r3, #0
 800332e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003330:	2303      	movs	r3, #3
 8003332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003334:	2307      	movs	r3, #7
 8003336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003338:	f107 0314 	add.w	r3, r7, #20
 800333c:	4619      	mov	r1, r3
 800333e:	4809      	ldr	r0, [pc, #36]	; (8003364 <HAL_UART_MspInit+0x9c>)
 8003340:	f001 f8fa 	bl	8004538 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003344:	2200      	movs	r2, #0
 8003346:	2100      	movs	r1, #0
 8003348:	2027      	movs	r0, #39	; 0x27
 800334a:	f000 fcbc 	bl	8003cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800334e:	2027      	movs	r0, #39	; 0x27
 8003350:	f000 fcd5 	bl	8003cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003354:	bf00      	nop
 8003356:	3728      	adds	r7, #40	; 0x28
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40004800 	.word	0x40004800
 8003360:	40023800 	.word	0x40023800
 8003364:	40020c00 	.word	0x40020c00

08003368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800336c:	e7fe      	b.n	800336c <NMI_Handler+0x4>

0800336e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800336e:	b480      	push	{r7}
 8003370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003372:	e7fe      	b.n	8003372 <HardFault_Handler+0x4>

08003374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003378:	e7fe      	b.n	8003378 <MemManage_Handler+0x4>

0800337a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800337a:	b480      	push	{r7}
 800337c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800337e:	e7fe      	b.n	800337e <BusFault_Handler+0x4>

08003380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003384:	e7fe      	b.n	8003384 <UsageFault_Handler+0x4>

08003386 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003386:	b480      	push	{r7}
 8003388:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800338a:	bf00      	nop
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003398:	bf00      	nop
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033a2:	b480      	push	{r7}
 80033a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033a6:	bf00      	nop
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033b4:	f000 fb68 	bl	8003a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033b8:	bf00      	nop
 80033ba:	bd80      	pop	{r7, pc}

080033bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//HAL_GPIO_TogglePin(GPIOD,LD4_Pin);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80033c0:	4802      	ldr	r0, [pc, #8]	; (80033cc <TIM2_IRQHandler+0x10>)
 80033c2:	f003 fea5 	bl	8007110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	200005d0 	.word	0x200005d0

080033d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80033d4:	4802      	ldr	r0, [pc, #8]	; (80033e0 <USART3_IRQHandler+0x10>)
 80033d6:	f004 feed 	bl	80081b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	200007f8 	.word	0x200007f8

080033e4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	// HAL_GPIO_TogglePin(GPIOD,LD4_Pin);
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80033e8:	4802      	ldr	r0, [pc, #8]	; (80033f4 <TIM7_IRQHandler+0x10>)
 80033ea:	f003 fe91 	bl	8007110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	200006a8 	.word	0x200006a8

080033f8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch3);
 80033fc:	4802      	ldr	r0, [pc, #8]	; (8003408 <DMA2_Stream4_IRQHandler+0x10>)
 80033fe:	f000 fe31 	bl	8004064 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20000738 	.word	0x20000738

0800340c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003410:	4802      	ldr	r0, [pc, #8]	; (800341c <OTG_FS_IRQHandler+0x10>)
 8003412:	f001 fcb1 	bl	8004d78 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20000c78 	.word	0x20000c78

08003420 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch4_trig_com);
 8003424:	4802      	ldr	r0, [pc, #8]	; (8003430 <DMA2_Stream7_IRQHandler+0x10>)
 8003426:	f000 fe1d 	bl	8004064 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800342a:	bf00      	nop
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000798 	.word	0x20000798

08003434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800343c:	4a14      	ldr	r2, [pc, #80]	; (8003490 <_sbrk+0x5c>)
 800343e:	4b15      	ldr	r3, [pc, #84]	; (8003494 <_sbrk+0x60>)
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003448:	4b13      	ldr	r3, [pc, #76]	; (8003498 <_sbrk+0x64>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d102      	bne.n	8003456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003450:	4b11      	ldr	r3, [pc, #68]	; (8003498 <_sbrk+0x64>)
 8003452:	4a12      	ldr	r2, [pc, #72]	; (800349c <_sbrk+0x68>)
 8003454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003456:	4b10      	ldr	r3, [pc, #64]	; (8003498 <_sbrk+0x64>)
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4413      	add	r3, r2
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	429a      	cmp	r2, r3
 8003462:	d207      	bcs.n	8003474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003464:	f009 fa5a 	bl	800c91c <__errno>
 8003468:	4603      	mov	r3, r0
 800346a:	220c      	movs	r2, #12
 800346c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800346e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003472:	e009      	b.n	8003488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003474:	4b08      	ldr	r3, [pc, #32]	; (8003498 <_sbrk+0x64>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800347a:	4b07      	ldr	r3, [pc, #28]	; (8003498 <_sbrk+0x64>)
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4413      	add	r3, r2
 8003482:	4a05      	ldr	r2, [pc, #20]	; (8003498 <_sbrk+0x64>)
 8003484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003486:	68fb      	ldr	r3, [r7, #12]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20020000 	.word	0x20020000
 8003494:	00000400 	.word	0x00000400
 8003498:	20000840 	.word	0x20000840
 800349c:	20000f90 	.word	0x20000f90

080034a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034a4:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <SystemInit+0x20>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034aa:	4a05      	ldr	r2, [pc, #20]	; (80034c0 <SystemInit+0x20>)
 80034ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034b4:	bf00      	nop
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <SD_Write_Block>:
void SPI_SendByte(uint8_t bt);
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg);

// ----------------------------------------------------------------------------
uint8_t SD_Write_Block (uint8_t *buff, uint32_t lba)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
	uint8_t result;
	uint16_t cnt;

	result=SD_cmd(CMD24,lba); 			//CMD24 даташит стр 51 и 97-98
 80034ce:	6839      	ldr	r1, [r7, #0]
 80034d0:	2058      	movs	r0, #88	; 0x58
 80034d2:	f000 f8a1 	bl	8003618 <SD_cmd>
 80034d6:	4603      	mov	r3, r0
 80034d8:	737b      	strb	r3, [r7, #13]
	if (result!=0x00) return 6; 		//Выйти, если результат не 0x00
 80034da:	7b7b      	ldrb	r3, [r7, #13]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <SD_Write_Block+0x20>
 80034e0:	2306      	movs	r3, #6
 80034e2:	e03d      	b.n	8003560 <SD_Write_Block+0x9c>
	SPI_Release();
 80034e4:	f000 fa2c 	bl	8003940 <SPI_Release>
	SPI_SendByte (0xFE); 				//Начало буфера
 80034e8:	20fe      	movs	r0, #254	; 0xfe
 80034ea:	f000 fa0f 	bl	800390c <SPI_SendByte>

	for (cnt=0;cnt<512;cnt++) SPI_SendByte(buff[cnt]); 		//Данные
 80034ee:	2300      	movs	r3, #0
 80034f0:	81fb      	strh	r3, [r7, #14]
 80034f2:	e009      	b.n	8003508 <SD_Write_Block+0x44>
 80034f4:	89fb      	ldrh	r3, [r7, #14]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	4413      	add	r3, r2
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 fa05 	bl	800390c <SPI_SendByte>
 8003502:	89fb      	ldrh	r3, [r7, #14]
 8003504:	3301      	adds	r3, #1
 8003506:	81fb      	strh	r3, [r7, #14]
 8003508:	89fb      	ldrh	r3, [r7, #14]
 800350a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800350e:	d3f1      	bcc.n	80034f4 <SD_Write_Block+0x30>
	SPI_Release();											//Пропустим котрольную сумму
 8003510:	f000 fa16 	bl	8003940 <SPI_Release>
	SPI_Release();
 8003514:	f000 fa14 	bl	8003940 <SPI_Release>

	result=SPI_ReceiveByte();
 8003518:	f000 fa05 	bl	8003926 <SPI_ReceiveByte>
 800351c:	4603      	mov	r3, r0
 800351e:	737b      	strb	r3, [r7, #13]
	if ((result&0x05)!=0x05) return 6; 		//Выйти, если результат не 0x05 (Даташит стр 111)
 8003520:	7b7b      	ldrb	r3, [r7, #13]
 8003522:	f003 0305 	and.w	r3, r3, #5
 8003526:	2b05      	cmp	r3, #5
 8003528:	d001      	beq.n	800352e <SD_Write_Block+0x6a>
 800352a:	2306      	movs	r3, #6
 800352c:	e018      	b.n	8003560 <SD_Write_Block+0x9c>
	cnt=0;
 800352e:	2300      	movs	r3, #0
 8003530:	81fb      	strh	r3, [r7, #14]
	do { 									//Ждем окончания состояния BUSY
		result=SPI_ReceiveByte();
 8003532:	f000 f9f8 	bl	8003926 <SPI_ReceiveByte>
 8003536:	4603      	mov	r3, r0
 8003538:	737b      	strb	r3, [r7, #13]
		cnt++;
 800353a:	89fb      	ldrh	r3, [r7, #14]
 800353c:	3301      	adds	r3, #1
 800353e:	81fb      	strh	r3, [r7, #14]
	} while ( (result!=0xFF)&&(cnt<0xFFFF) );
 8003540:	7b7b      	ldrb	r3, [r7, #13]
 8003542:	2bff      	cmp	r3, #255	; 0xff
 8003544:	d004      	beq.n	8003550 <SD_Write_Block+0x8c>
 8003546:	89fb      	ldrh	r3, [r7, #14]
 8003548:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800354c:	4293      	cmp	r3, r2
 800354e:	d1f0      	bne.n	8003532 <SD_Write_Block+0x6e>

	if (cnt>=0xFFFF) return 6;
 8003550:	89fb      	ldrh	r3, [r7, #14]
 8003552:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003556:	4293      	cmp	r3, r2
 8003558:	d101      	bne.n	800355e <SD_Write_Block+0x9a>
 800355a:	2306      	movs	r3, #6
 800355c:	e000      	b.n	8003560 <SD_Write_Block+0x9c>

	return 0;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <SD_Read_Block>:
// ----------------------------------------------------------------------------
uint8_t SD_Read_Block (uint8_t *buff, uint32_t lba)
{
 8003568:	b590      	push	{r4, r7, lr}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
	uint8_t result;
	uint16_t cnt;

	result=SD_cmd (CMD17, lba);
 8003572:	6839      	ldr	r1, [r7, #0]
 8003574:	2051      	movs	r0, #81	; 0x51
 8003576:	f000 f84f 	bl	8003618 <SD_cmd>
 800357a:	4603      	mov	r3, r0
 800357c:	737b      	strb	r3, [r7, #13]
	if (result!=0x00) return 5;
 800357e:	7b7b      	ldrb	r3, [r7, #13]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <SD_Read_Block+0x20>
 8003584:	2305      	movs	r3, #5
 8003586:	e02f      	b.n	80035e8 <SD_Read_Block+0x80>
	SPI_Release();
 8003588:	f000 f9da 	bl	8003940 <SPI_Release>

	cnt=0;
 800358c:	2300      	movs	r3, #0
 800358e:	81fb      	strh	r3, [r7, #14]

	do{ 		// Waiting start of bock
		result=SPI_ReceiveByte();
 8003590:	f000 f9c9 	bl	8003926 <SPI_ReceiveByte>
 8003594:	4603      	mov	r3, r0
 8003596:	737b      	strb	r3, [r7, #13]
	    cnt++;
 8003598:	89fb      	ldrh	r3, [r7, #14]
 800359a:	3301      	adds	r3, #1
 800359c:	81fb      	strh	r3, [r7, #14]
	} while ( (result!=0xFE)&&(cnt<0xFFFF) );
 800359e:	7b7b      	ldrb	r3, [r7, #13]
 80035a0:	2bfe      	cmp	r3, #254	; 0xfe
 80035a2:	d004      	beq.n	80035ae <SD_Read_Block+0x46>
 80035a4:	89fb      	ldrh	r3, [r7, #14]
 80035a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d1f0      	bne.n	8003590 <SD_Read_Block+0x28>

	if (cnt>=0xFFFF) return 5;
 80035ae:	89fb      	ldrh	r3, [r7, #14]
 80035b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d101      	bne.n	80035bc <SD_Read_Block+0x54>
 80035b8:	2305      	movs	r3, #5
 80035ba:	e015      	b.n	80035e8 <SD_Read_Block+0x80>
	for (cnt=0;cnt<512;cnt++)
 80035bc:	2300      	movs	r3, #0
 80035be:	81fb      	strh	r3, [r7, #14]
 80035c0:	e009      	b.n	80035d6 <SD_Read_Block+0x6e>
	{
		buff[cnt] = SPI_ReceiveByte(); 		// получаем байты блока из шины в буфер
 80035c2:	89fb      	ldrh	r3, [r7, #14]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	18d4      	adds	r4, r2, r3
 80035c8:	f000 f9ad 	bl	8003926 <SPI_ReceiveByte>
 80035cc:	4603      	mov	r3, r0
 80035ce:	7023      	strb	r3, [r4, #0]
	for (cnt=0;cnt<512;cnt++)
 80035d0:	89fb      	ldrh	r3, [r7, #14]
 80035d2:	3301      	adds	r3, #1
 80035d4:	81fb      	strh	r3, [r7, #14]
 80035d6:	89fb      	ldrh	r3, [r7, #14]
 80035d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035dc:	d3f1      	bcc.n	80035c2 <SD_Read_Block+0x5a>
	}
	SPI_Release(); 							// Пропускаем контрольную сумму
 80035de:	f000 f9af 	bl	8003940 <SPI_Release>
	SPI_Release();
 80035e2:	f000 f9ad 	bl	8003940 <SPI_Release>

	return 0;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd90      	pop	{r4, r7, pc}

080035f0 <SD_PowerOn>:
// ----------------------------------------------------------------------------
void SD_PowerOn(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
	Timer7 = 0;
 80035f4:	4b07      	ldr	r3, [pc, #28]	; (8003614 <SD_PowerOn+0x24>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	801a      	strh	r2, [r3, #0]
	while(Timer7<10) 		// wait 20 msec     while(Timer3<2)
 80035fa:	bf00      	nop
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <SD_PowerOn+0x24>)
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b09      	cmp	r3, #9
 8003604:	d9fa      	bls.n	80035fc <SD_PowerOn+0xc>
	;
}
 8003606:	bf00      	nop
 8003608:	bf00      	nop
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	2000083c 	.word	0x2000083c

08003618 <SD_cmd>:
// ----------------------------------------------------------------------------
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	6039      	str	r1, [r7, #0]
 8003622:	71fb      	strb	r3, [r7, #7]
	uint8_t n, res;
	// ACMD<n> is the command sequense of CMD55-CMD<n>

	if (cmd & 0x80)
 8003624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003628:	2b00      	cmp	r3, #0
 800362a:	da0e      	bge.n	800364a <SD_cmd+0x32>
	{
		cmd &= 0x7F;
 800362c:	79fb      	ldrb	r3, [r7, #7]
 800362e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003632:	71fb      	strb	r3, [r7, #7]
		res = SD_cmd(CMD55, 0);
 8003634:	2100      	movs	r1, #0
 8003636:	2077      	movs	r0, #119	; 0x77
 8003638:	f7ff ffee 	bl	8003618 <SD_cmd>
 800363c:	4603      	mov	r3, r0
 800363e:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8003640:	7bbb      	ldrb	r3, [r7, #14]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d901      	bls.n	800364a <SD_cmd+0x32>
 8003646:	7bbb      	ldrb	r3, [r7, #14]
 8003648:	e049      	b.n	80036de <SD_cmd+0xc6>
	}
	// Select the card
	SS_SD_DESELECT();
 800364a:	2201      	movs	r2, #1
 800364c:	2108      	movs	r1, #8
 800364e:	4826      	ldr	r0, [pc, #152]	; (80036e8 <SD_cmd+0xd0>)
 8003650:	f001 f90e 	bl	8004870 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 8003654:	f000 f967 	bl	8003926 <SPI_ReceiveByte>
	SS_SD_SELECT();
 8003658:	2200      	movs	r2, #0
 800365a:	2108      	movs	r1, #8
 800365c:	4822      	ldr	r0, [pc, #136]	; (80036e8 <SD_cmd+0xd0>)
 800365e:	f001 f907 	bl	8004870 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 8003662:	f000 f960 	bl	8003926 <SPI_ReceiveByte>

	// Send a command packet
	SPI_SendByte(cmd); // Start + Command index
 8003666:	79fb      	ldrb	r3, [r7, #7]
 8003668:	4618      	mov	r0, r3
 800366a:	f000 f94f 	bl	800390c <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 24)); // Argument[31..24]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	0e1b      	lsrs	r3, r3, #24
 8003672:	b2db      	uxtb	r3, r3
 8003674:	4618      	mov	r0, r3
 8003676:	f000 f949 	bl	800390c <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 16)); // Argument[23..16]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	0c1b      	lsrs	r3, r3, #16
 800367e:	b2db      	uxtb	r3, r3
 8003680:	4618      	mov	r0, r3
 8003682:	f000 f943 	bl	800390c <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 8)); // Argument[15..8]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	0a1b      	lsrs	r3, r3, #8
 800368a:	b2db      	uxtb	r3, r3
 800368c:	4618      	mov	r0, r3
 800368e:	f000 f93d 	bl	800390c <SPI_SendByte>
	SPI_SendByte((uint8_t)arg); // Argument[7..0]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	4618      	mov	r0, r3
 8003698:	f000 f938 	bl	800390c <SPI_SendByte>

	n = 0x01; // Dummy CRC + Stop
 800369c:	2301      	movs	r3, #1
 800369e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) {n = 0x95;} // Valid CRC for CMD0(0)
 80036a0:	79fb      	ldrb	r3, [r7, #7]
 80036a2:	2b40      	cmp	r3, #64	; 0x40
 80036a4:	d101      	bne.n	80036aa <SD_cmd+0x92>
 80036a6:	2395      	movs	r3, #149	; 0x95
 80036a8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) {n = 0x87;} // Valid CRC for CMD8(0x1AA)
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	2b48      	cmp	r3, #72	; 0x48
 80036ae:	d101      	bne.n	80036b4 <SD_cmd+0x9c>
 80036b0:	2387      	movs	r3, #135	; 0x87
 80036b2:	73fb      	strb	r3, [r7, #15]
	SPI_SendByte(n);
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 f928 	bl	800390c <SPI_SendByte>

	// Receive a command response
	 n = 10; // Wait for a valid response in timeout of 10 attempts
 80036bc:	230a      	movs	r3, #10
 80036be:	73fb      	strb	r3, [r7, #15]

	 do {
		 res = SPI_ReceiveByte();
 80036c0:	f000 f931 	bl	8003926 <SPI_ReceiveByte>
 80036c4:	4603      	mov	r3, r0
 80036c6:	73bb      	strb	r3, [r7, #14]
	 } while ((res & 0x80) && --n);
 80036c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	da05      	bge.n	80036dc <SD_cmd+0xc4>
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	73fb      	strb	r3, [r7, #15]
 80036d6:	7bfb      	ldrb	r3, [r7, #15]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1f1      	bne.n	80036c0 <SD_cmd+0xa8>

	return res;
 80036dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40020000 	.word	0x40020000

080036ec <sd_ini>:
// ----------------------------------------------------------------------------
uint8_t sd_ini(void)
{
 80036ec:	b590      	push	{r4, r7, lr}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af02      	add	r7, sp, #8
	uint8_t ocr[4];
	uint16_t tmr;
	uint32_t temp;


	LD_OFF;
 80036f2:	2201      	movs	r2, #1
 80036f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036f8:	486a      	ldr	r0, [pc, #424]	; (80038a4 <sd_ini+0x1b8>)
 80036fa:	f001 f8b9 	bl	8004870 <HAL_GPIO_WritePin>
	sdinfo.type = 0;
 80036fe:	4b6a      	ldr	r3, [pc, #424]	; (80038a8 <sd_ini+0x1bc>)
 8003700:	2200      	movs	r2, #0
 8003702:	701a      	strb	r2, [r3, #0]
	// reinit SPI for test
//	temp = hspi1.Init.BaudRatePrescaler;
//	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128; //156.25 kbbs
//	HAL_SPI_Init(&hspi1);

	SS_SD_DESELECT();
 8003704:	2201      	movs	r2, #1
 8003706:	2108      	movs	r1, #8
 8003708:	4868      	ldr	r0, [pc, #416]	; (80038ac <sd_ini+0x1c0>)
 800370a:	f001 f8b1 	bl	8004870 <HAL_GPIO_WritePin>

	for(i = 0; i < 10; i++)
 800370e:	2300      	movs	r3, #0
 8003710:	71fb      	strb	r3, [r7, #7]
 8003712:	e004      	b.n	800371e <sd_ini+0x32>
	{
		SPI_Release();
 8003714:	f000 f914 	bl	8003940 <SPI_Release>
	for(i = 0; i < 10; i++)
 8003718:	79fb      	ldrb	r3, [r7, #7]
 800371a:	3301      	adds	r3, #1
 800371c:	71fb      	strb	r3, [r7, #7]
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	2b09      	cmp	r3, #9
 8003722:	d9f7      	bls.n	8003714 <sd_ini+0x28>
	}

//	hspi1.Init.BaudRatePrescaler = temp;
//	HAL_SPI_Init(&hspi1);
	SS_SD_SELECT();
 8003724:	2200      	movs	r2, #0
 8003726:	2108      	movs	r1, #8
 8003728:	4860      	ldr	r0, [pc, #384]	; (80038ac <sd_ini+0x1c0>)
 800372a:	f001 f8a1 	bl	8004870 <HAL_GPIO_WritePin>
	// For test
//	SPI_SendByte(0x1);
//	SPI_SendByte(0x2);
//	SPI_SendByte(0x3);

	 if (SD_cmd(CMD0, 0) == 1) // Enter Idle state
 800372e:	2100      	movs	r1, #0
 8003730:	2040      	movs	r0, #64	; 0x40
 8003732:	f7ff ff71 	bl	8003618 <SD_cmd>
 8003736:	4603      	mov	r3, r0
 8003738:	2b01      	cmp	r3, #1
 800373a:	f040 80ac 	bne.w	8003896 <sd_ini+0x1aa>
	 {
		 SPI_Release();
 800373e:	f000 f8ff 	bl	8003940 <SPI_Release>
		 if (SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 8003742:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003746:	2048      	movs	r0, #72	; 0x48
 8003748:	f7ff ff66 	bl	8003618 <SD_cmd>
 800374c:	4603      	mov	r3, r0
 800374e:	2b01      	cmp	r3, #1
 8003750:	d16e      	bne.n	8003830 <sd_ini+0x144>
		 {
			 for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8003752:	2300      	movs	r3, #0
 8003754:	71fb      	strb	r3, [r7, #7]
 8003756:	e00c      	b.n	8003772 <sd_ini+0x86>
 8003758:	79fc      	ldrb	r4, [r7, #7]
 800375a:	f000 f8e4 	bl	8003926 <SPI_ReceiveByte>
 800375e:	4603      	mov	r3, r0
 8003760:	461a      	mov	r2, r3
 8003762:	f104 0308 	add.w	r3, r4, #8
 8003766:	443b      	add	r3, r7
 8003768:	f803 2c08 	strb.w	r2, [r3, #-8]
 800376c:	79fb      	ldrb	r3, [r7, #7]
 800376e:	3301      	adds	r3, #1
 8003770:	71fb      	strb	r3, [r7, #7]
 8003772:	79fb      	ldrb	r3, [r7, #7]
 8003774:	2b03      	cmp	r3, #3
 8003776:	d9ef      	bls.n	8003758 <sd_ini+0x6c>
			 sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02Xrn",ocr[0],ocr[1],ocr[2],ocr[3]);
 8003778:	783b      	ldrb	r3, [r7, #0]
 800377a:	4619      	mov	r1, r3
 800377c:	787b      	ldrb	r3, [r7, #1]
 800377e:	4618      	mov	r0, r3
 8003780:	78bb      	ldrb	r3, [r7, #2]
 8003782:	78fa      	ldrb	r2, [r7, #3]
 8003784:	9201      	str	r2, [sp, #4]
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	4603      	mov	r3, r0
 800378a:	460a      	mov	r2, r1
 800378c:	4948      	ldr	r1, [pc, #288]	; (80038b0 <sd_ini+0x1c4>)
 800378e:	4849      	ldr	r0, [pc, #292]	; (80038b4 <sd_ini+0x1c8>)
 8003790:	f009 fa04 	bl	800cb9c <siprintf>

			 // Get trailing return value of R7 resp
			 if (ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8003794:	78bb      	ldrb	r3, [r7, #2]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d17f      	bne.n	800389a <sd_ini+0x1ae>
 800379a:	78fb      	ldrb	r3, [r7, #3]
 800379c:	2baa      	cmp	r3, #170	; 0xaa
 800379e:	d17c      	bne.n	800389a <sd_ini+0x1ae>
			 {
				 for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--)
 80037a0:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80037a4:	80bb      	strh	r3, [r7, #4]
 80037a6:	e002      	b.n	80037ae <sd_ini+0xc2>
 80037a8:	88bb      	ldrh	r3, [r7, #4]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	80bb      	strh	r3, [r7, #4]
 80037ae:	88bb      	ldrh	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d007      	beq.n	80037c4 <sd_ini+0xd8>
 80037b4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80037b8:	20e9      	movs	r0, #233	; 0xe9
 80037ba:	f7ff ff2d 	bl	8003618 <SD_cmd>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1f1      	bne.n	80037a8 <sd_ini+0xbc>
				    ; // Wait for leaving idle state (ACMD41 with HCS bit)
				 if (tmr && SD_cmd(CMD58, 0) == 0)
 80037c4:	88bb      	ldrh	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d067      	beq.n	800389a <sd_ini+0x1ae>
 80037ca:	2100      	movs	r1, #0
 80037cc:	207a      	movs	r0, #122	; 0x7a
 80037ce:	f7ff ff23 	bl	8003618 <SD_cmd>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d160      	bne.n	800389a <sd_ini+0x1ae>
				 { // Check CCS bit in the OCR
				   for (i = 0; i < 4; i++)
 80037d8:	2300      	movs	r3, #0
 80037da:	71fb      	strb	r3, [r7, #7]
 80037dc:	e00c      	b.n	80037f8 <sd_ini+0x10c>
				   {
					   ocr[i] = SPI_ReceiveByte();
 80037de:	79fc      	ldrb	r4, [r7, #7]
 80037e0:	f000 f8a1 	bl	8003926 <SPI_ReceiveByte>
 80037e4:	4603      	mov	r3, r0
 80037e6:	461a      	mov	r2, r3
 80037e8:	f104 0308 	add.w	r3, r4, #8
 80037ec:	443b      	add	r3, r7
 80037ee:	f803 2c08 	strb.w	r2, [r3, #-8]
				   for (i = 0; i < 4; i++)
 80037f2:	79fb      	ldrb	r3, [r7, #7]
 80037f4:	3301      	adds	r3, #1
 80037f6:	71fb      	strb	r3, [r7, #7]
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	2b03      	cmp	r3, #3
 80037fc:	d9ef      	bls.n	80037de <sd_ini+0xf2>
				   }
				   sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02Xrn",ocr[0],ocr[1],ocr[2],ocr[3]);
 80037fe:	783b      	ldrb	r3, [r7, #0]
 8003800:	4619      	mov	r1, r3
 8003802:	787b      	ldrb	r3, [r7, #1]
 8003804:	4618      	mov	r0, r3
 8003806:	78bb      	ldrb	r3, [r7, #2]
 8003808:	78fa      	ldrb	r2, [r7, #3]
 800380a:	9201      	str	r2, [sp, #4]
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	4603      	mov	r3, r0
 8003810:	460a      	mov	r2, r1
 8003812:	4927      	ldr	r1, [pc, #156]	; (80038b0 <sd_ini+0x1c4>)
 8003814:	4827      	ldr	r0, [pc, #156]	; (80038b4 <sd_ini+0x1c8>)
 8003816:	f009 f9c1 	bl	800cb9c <siprintf>
				   sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 800381a:	783b      	ldrb	r3, [r7, #0]
 800381c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <sd_ini+0x13c>
 8003824:	220c      	movs	r2, #12
 8003826:	e000      	b.n	800382a <sd_ini+0x13e>
 8003828:	2204      	movs	r2, #4
 800382a:	4b1f      	ldr	r3, [pc, #124]	; (80038a8 <sd_ini+0x1bc>)
 800382c:	701a      	strb	r2, [r3, #0]
 800382e:	e034      	b.n	800389a <sd_ini+0x1ae>
			 }

		 }
		 else //SDv1 or MMCv3
		 {
			 if (SD_cmd(ACMD41, 0) <= 1)
 8003830:	2100      	movs	r1, #0
 8003832:	20e9      	movs	r0, #233	; 0xe9
 8003834:	f7ff fef0 	bl	8003618 <SD_cmd>
 8003838:	4603      	mov	r3, r0
 800383a:	2b01      	cmp	r3, #1
 800383c:	d805      	bhi.n	800384a <sd_ini+0x15e>
			 {
			    sdinfo.type = CT_SD1; cmd = ACMD41; // SDv1
 800383e:	4b1a      	ldr	r3, [pc, #104]	; (80038a8 <sd_ini+0x1bc>)
 8003840:	2202      	movs	r2, #2
 8003842:	701a      	strb	r2, [r3, #0]
 8003844:	23e9      	movs	r3, #233	; 0xe9
 8003846:	71bb      	strb	r3, [r7, #6]
 8003848:	e004      	b.n	8003854 <sd_ini+0x168>
			 }
			 else
			 {
			    sdinfo.type = CT_MMC; cmd = CMD1; // MMCv3
 800384a:	4b17      	ldr	r3, [pc, #92]	; (80038a8 <sd_ini+0x1bc>)
 800384c:	2201      	movs	r2, #1
 800384e:	701a      	strb	r2, [r3, #0]
 8003850:	2341      	movs	r3, #65	; 0x41
 8003852:	71bb      	strb	r3, [r7, #6]
			 }

			 for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; // Wait for leaving idle state
 8003854:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8003858:	80bb      	strh	r3, [r7, #4]
 800385a:	e002      	b.n	8003862 <sd_ini+0x176>
 800385c:	88bb      	ldrh	r3, [r7, #4]
 800385e:	3b01      	subs	r3, #1
 8003860:	80bb      	strh	r3, [r7, #4]
 8003862:	88bb      	ldrh	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d007      	beq.n	8003878 <sd_ini+0x18c>
 8003868:	79bb      	ldrb	r3, [r7, #6]
 800386a:	2100      	movs	r1, #0
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff fed3 	bl	8003618 <SD_cmd>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1f1      	bne.n	800385c <sd_ini+0x170>
			 if (!tmr || SD_cmd(CMD16, 512) != 0) // Set R/W block length to 512
 8003878:	88bb      	ldrh	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d007      	beq.n	800388e <sd_ini+0x1a2>
 800387e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003882:	2050      	movs	r0, #80	; 0x50
 8003884:	f7ff fec8 	bl	8003618 <SD_cmd>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d005      	beq.n	800389a <sd_ini+0x1ae>
				sdinfo.type = 0;
 800388e:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <sd_ini+0x1bc>)
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]
 8003894:	e001      	b.n	800389a <sd_ini+0x1ae>
		 }
	 }
	 else
	 {
	    return 1;
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <sd_ini+0x1b0>
	 }
	return 0;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd90      	pop	{r4, r7, pc}
 80038a4:	40020800 	.word	0x40020800
 80038a8:	20000844 	.word	0x20000844
 80038ac:	40020000 	.word	0x40020000
 80038b0:	0800d2b8 	.word	0x0800d2b8
 80038b4:	20000848 	.word	0x20000848

080038b8 <Error>:
// ----------------------------------------------------------------------------
static void Error (void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
	LD_ON;
 80038bc:	2200      	movs	r2, #0
 80038be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038c2:	4802      	ldr	r0, [pc, #8]	; (80038cc <Error+0x14>)
 80038c4:	f000 ffd4 	bl	8004870 <HAL_GPIO_WritePin>
}
 80038c8:	bf00      	nop
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40020800 	.word	0x40020800

080038d0 <SPIx_WriteRead>:
// ----------------------------------------------------------------------------
uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af02      	add	r7, sp, #8
 80038d6:	4603      	mov	r3, r0
 80038d8:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 80038da:	2300      	movs	r3, #0
 80038dc:	73fb      	strb	r3, [r7, #15]

	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 80038de:	f107 020f 	add.w	r2, r7, #15
 80038e2:	1df9      	adds	r1, r7, #7
 80038e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	2301      	movs	r3, #1
 80038ec:	4806      	ldr	r0, [pc, #24]	; (8003908 <SPIx_WriteRead+0x38>)
 80038ee:	f003 f904 	bl	8006afa <HAL_SPI_TransmitReceive>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <SPIx_WriteRead+0x2c>
	{
		Error();
 80038f8:	f7ff ffde 	bl	80038b8 <Error>
	}
	return receivedbyte;
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	20000578 	.word	0x20000578

0800390c <SPI_SendByte>:
// ----------------------------------------------------------------------------
void SPI_SendByte(uint8_t bt)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	71fb      	strb	r3, [r7, #7]
	SPIx_WriteRead(bt);
 8003916:	79fb      	ldrb	r3, [r7, #7]
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff ffd9 	bl	80038d0 <SPIx_WriteRead>
}
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <SPI_ReceiveByte>:
// ----------------------------------------------------------------------------
uint8_t SPI_ReceiveByte(void)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b082      	sub	sp, #8
 800392a:	af00      	add	r7, sp, #0
	uint8_t bt = SPIx_WriteRead(0xFF);
 800392c:	20ff      	movs	r0, #255	; 0xff
 800392e:	f7ff ffcf 	bl	80038d0 <SPIx_WriteRead>
 8003932:	4603      	mov	r3, r0
 8003934:	71fb      	strb	r3, [r7, #7]
	return bt;
 8003936:	79fb      	ldrb	r3, [r7, #7]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <SPI_Release>:
// ----------------------------------------------------------------------------
void SPI_Release(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
	SPIx_WriteRead(0xFF);
 8003944:	20ff      	movs	r0, #255	; 0xff
 8003946:	f7ff ffc3 	bl	80038d0 <SPIx_WriteRead>
}
 800394a:	bf00      	nop
 800394c:	bd80      	pop	{r7, pc}

0800394e <SPI_wait_ready>:
// ----------------------------------------------------------------------------
uint8_t SPI_wait_ready(void)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
	uint8_t res;
	uint16_t cnt;
	cnt=0;
 8003954:	2300      	movs	r3, #0
 8003956:	80fb      	strh	r3, [r7, #6]

	do { //Ждем окончания состояния BUSY
		res=SPI_ReceiveByte();
 8003958:	f7ff ffe5 	bl	8003926 <SPI_ReceiveByte>
 800395c:	4603      	mov	r3, r0
 800395e:	717b      	strb	r3, [r7, #5]
		cnt++;
 8003960:	88fb      	ldrh	r3, [r7, #6]
 8003962:	3301      	adds	r3, #1
 8003964:	80fb      	strh	r3, [r7, #6]
  } while ( (res!=0xFF)&&(cnt<0xFFFF) );
 8003966:	797b      	ldrb	r3, [r7, #5]
 8003968:	2bff      	cmp	r3, #255	; 0xff
 800396a:	d004      	beq.n	8003976 <SPI_wait_ready+0x28>
 800396c:	88fb      	ldrh	r3, [r7, #6]
 800396e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003972:	4293      	cmp	r3, r2
 8003974:	d1f0      	bne.n	8003958 <SPI_wait_ready+0xa>

  if (cnt>=0xFFFF) return 1;
 8003976:	88fb      	ldrh	r3, [r7, #6]
 8003978:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800397c:	4293      	cmp	r3, r2
 800397e:	d101      	bne.n	8003984 <SPI_wait_ready+0x36>
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <SPI_wait_ready+0x38>

  return res;
 8003984:	797b      	ldrb	r3, [r7, #5]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003990:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003994:	480d      	ldr	r0, [pc, #52]	; (80039cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003996:	490e      	ldr	r1, [pc, #56]	; (80039d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003998:	4a0e      	ldr	r2, [pc, #56]	; (80039d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800399a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800399c:	e002      	b.n	80039a4 <LoopCopyDataInit>

0800399e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800399e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039a2:	3304      	adds	r3, #4

080039a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039a8:	d3f9      	bcc.n	800399e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039aa:	4a0b      	ldr	r2, [pc, #44]	; (80039d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80039ac:	4c0b      	ldr	r4, [pc, #44]	; (80039dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80039ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039b0:	e001      	b.n	80039b6 <LoopFillZerobss>

080039b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039b4:	3204      	adds	r2, #4

080039b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039b8:	d3fb      	bcc.n	80039b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80039ba:	f7ff fd71 	bl	80034a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039be:	f008 ffb3 	bl	800c928 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039c2:	f7fe fc5f 	bl	8002284 <main>
  bx  lr    
 80039c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80039c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80039cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039d0:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80039d4:	0800d358 	.word	0x0800d358
  ldr r2, =_sbss
 80039d8:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80039dc:	20000f8c 	.word	0x20000f8c

080039e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039e0:	e7fe      	b.n	80039e0 <ADC_IRQHandler>
	...

080039e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039e8:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <HAL_Init+0x40>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a0d      	ldr	r2, [pc, #52]	; (8003a24 <HAL_Init+0x40>)
 80039ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039f4:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <HAL_Init+0x40>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a0a      	ldr	r2, [pc, #40]	; (8003a24 <HAL_Init+0x40>)
 80039fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a00:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <HAL_Init+0x40>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a07      	ldr	r2, [pc, #28]	; (8003a24 <HAL_Init+0x40>)
 8003a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a0c:	2003      	movs	r0, #3
 8003a0e:	f000 f94f 	bl	8003cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a12:	2000      	movs	r0, #0
 8003a14:	f000 f808 	bl	8003a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a18:	f7ff f9fe 	bl	8002e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40023c00 	.word	0x40023c00

08003a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a30:	4b12      	ldr	r3, [pc, #72]	; (8003a7c <HAL_InitTick+0x54>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	4b12      	ldr	r3, [pc, #72]	; (8003a80 <HAL_InitTick+0x58>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	4619      	mov	r1, r3
 8003a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 f967 	bl	8003d1a <HAL_SYSTICK_Config>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e00e      	b.n	8003a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b0f      	cmp	r3, #15
 8003a5a:	d80a      	bhi.n	8003a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a64:	f000 f92f 	bl	8003cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a68:	4a06      	ldr	r2, [pc, #24]	; (8003a84 <HAL_InitTick+0x5c>)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e000      	b.n	8003a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	20000004 	.word	0x20000004
 8003a80:	2000000c 	.word	0x2000000c
 8003a84:	20000008 	.word	0x20000008

08003a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a8c:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <HAL_IncTick+0x20>)
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	461a      	mov	r2, r3
 8003a92:	4b06      	ldr	r3, [pc, #24]	; (8003aac <HAL_IncTick+0x24>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4413      	add	r3, r2
 8003a98:	4a04      	ldr	r2, [pc, #16]	; (8003aac <HAL_IncTick+0x24>)
 8003a9a:	6013      	str	r3, [r2, #0]
}
 8003a9c:	bf00      	nop
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	2000000c 	.word	0x2000000c
 8003aac:	20000884 	.word	0x20000884

08003ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ab4:	4b03      	ldr	r3, [pc, #12]	; (8003ac4 <HAL_GetTick+0x14>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	20000884 	.word	0x20000884

08003ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ad0:	f7ff ffee 	bl	8003ab0 <HAL_GetTick>
 8003ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ae0:	d005      	beq.n	8003aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ae2:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <HAL_Delay+0x44>)
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4413      	add	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003aee:	bf00      	nop
 8003af0:	f7ff ffde 	bl	8003ab0 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d8f7      	bhi.n	8003af0 <HAL_Delay+0x28>
  {
  }
}
 8003b00:	bf00      	nop
 8003b02:	bf00      	nop
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	2000000c 	.word	0x2000000c

08003b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b20:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <__NVIC_SetPriorityGrouping+0x44>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b42:	4a04      	ldr	r2, [pc, #16]	; (8003b54 <__NVIC_SetPriorityGrouping+0x44>)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	60d3      	str	r3, [r2, #12]
}
 8003b48:	bf00      	nop
 8003b4a:	3714      	adds	r7, #20
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	e000ed00 	.word	0xe000ed00

08003b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b5c:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <__NVIC_GetPriorityGrouping+0x18>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	0a1b      	lsrs	r3, r3, #8
 8003b62:	f003 0307 	and.w	r3, r3, #7
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	e000ed00 	.word	0xe000ed00

08003b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	db0b      	blt.n	8003b9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	f003 021f 	and.w	r2, r3, #31
 8003b8c:	4907      	ldr	r1, [pc, #28]	; (8003bac <__NVIC_EnableIRQ+0x38>)
 8003b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	2001      	movs	r0, #1
 8003b96:	fa00 f202 	lsl.w	r2, r0, r2
 8003b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	e000e100 	.word	0xe000e100

08003bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	6039      	str	r1, [r7, #0]
 8003bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	db0a      	blt.n	8003bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	490c      	ldr	r1, [pc, #48]	; (8003bfc <__NVIC_SetPriority+0x4c>)
 8003bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bce:	0112      	lsls	r2, r2, #4
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bd8:	e00a      	b.n	8003bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	4908      	ldr	r1, [pc, #32]	; (8003c00 <__NVIC_SetPriority+0x50>)
 8003be0:	79fb      	ldrb	r3, [r7, #7]
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	3b04      	subs	r3, #4
 8003be8:	0112      	lsls	r2, r2, #4
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	440b      	add	r3, r1
 8003bee:	761a      	strb	r2, [r3, #24]
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	e000e100 	.word	0xe000e100
 8003c00:	e000ed00 	.word	0xe000ed00

08003c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b089      	sub	sp, #36	; 0x24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f1c3 0307 	rsb	r3, r3, #7
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	bf28      	it	cs
 8003c22:	2304      	movcs	r3, #4
 8003c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	2b06      	cmp	r3, #6
 8003c2c:	d902      	bls.n	8003c34 <NVIC_EncodePriority+0x30>
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	3b03      	subs	r3, #3
 8003c32:	e000      	b.n	8003c36 <NVIC_EncodePriority+0x32>
 8003c34:	2300      	movs	r3, #0
 8003c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	43da      	mvns	r2, r3
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	401a      	ands	r2, r3
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	fa01 f303 	lsl.w	r3, r1, r3
 8003c56:	43d9      	mvns	r1, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c5c:	4313      	orrs	r3, r2
         );
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3724      	adds	r7, #36	; 0x24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
	...

08003c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	3b01      	subs	r3, #1
 8003c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c7c:	d301      	bcc.n	8003c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e00f      	b.n	8003ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c82:	4a0a      	ldr	r2, [pc, #40]	; (8003cac <SysTick_Config+0x40>)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3b01      	subs	r3, #1
 8003c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c8a:	210f      	movs	r1, #15
 8003c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c90:	f7ff ff8e 	bl	8003bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c94:	4b05      	ldr	r3, [pc, #20]	; (8003cac <SysTick_Config+0x40>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c9a:	4b04      	ldr	r3, [pc, #16]	; (8003cac <SysTick_Config+0x40>)
 8003c9c:	2207      	movs	r2, #7
 8003c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	e000e010 	.word	0xe000e010

08003cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7ff ff29 	bl	8003b10 <__NVIC_SetPriorityGrouping>
}
 8003cbe:	bf00      	nop
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b086      	sub	sp, #24
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	4603      	mov	r3, r0
 8003cce:	60b9      	str	r1, [r7, #8]
 8003cd0:	607a      	str	r2, [r7, #4]
 8003cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cd8:	f7ff ff3e 	bl	8003b58 <__NVIC_GetPriorityGrouping>
 8003cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	68b9      	ldr	r1, [r7, #8]
 8003ce2:	6978      	ldr	r0, [r7, #20]
 8003ce4:	f7ff ff8e 	bl	8003c04 <NVIC_EncodePriority>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cee:	4611      	mov	r1, r2
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff ff5d 	bl	8003bb0 <__NVIC_SetPriority>
}
 8003cf6:	bf00      	nop
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b082      	sub	sp, #8
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	4603      	mov	r3, r0
 8003d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff ff31 	bl	8003b74 <__NVIC_EnableIRQ>
}
 8003d12:	bf00      	nop
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7ff ffa2 	bl	8003c6c <SysTick_Config>
 8003d28:	4603      	mov	r3, r0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d40:	f7ff feb6 	bl	8003ab0 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e099      	b.n	8003e84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0201 	bic.w	r2, r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d70:	e00f      	b.n	8003d92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d72:	f7ff fe9d 	bl	8003ab0 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b05      	cmp	r3, #5
 8003d7e:	d908      	bls.n	8003d92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2203      	movs	r2, #3
 8003d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e078      	b.n	8003e84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1e8      	bne.n	8003d72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	4b38      	ldr	r3, [pc, #224]	; (8003e8c <HAL_DMA_Init+0x158>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	2b04      	cmp	r3, #4
 8003dea:	d107      	bne.n	8003dfc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	4313      	orrs	r3, r2
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f023 0307 	bic.w	r3, r3, #7
 8003e12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d117      	bne.n	8003e56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00e      	beq.n	8003e56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 fb01 	bl	8004440 <DMA_CheckFifoParam>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2240      	movs	r2, #64	; 0x40
 8003e48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e52:	2301      	movs	r3, #1
 8003e54:	e016      	b.n	8003e84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fab8 	bl	80043d4 <DMA_CalcBaseAndBitshift>
 8003e64:	4603      	mov	r3, r0
 8003e66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6c:	223f      	movs	r2, #63	; 0x3f
 8003e6e:	409a      	lsls	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	f010803f 	.word	0xf010803f

08003e90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
 8003e9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d101      	bne.n	8003eb6 <HAL_DMA_Start_IT+0x26>
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	e040      	b.n	8003f38 <HAL_DMA_Start_IT+0xa8>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d12f      	bne.n	8003f2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2202      	movs	r2, #2
 8003ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	68b9      	ldr	r1, [r7, #8]
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 fa4a 	bl	8004378 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee8:	223f      	movs	r2, #63	; 0x3f
 8003eea:	409a      	lsls	r2, r3
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0216 	orr.w	r2, r2, #22
 8003efe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d007      	beq.n	8003f18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0208 	orr.w	r2, r2, #8
 8003f16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0201 	orr.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	e005      	b.n	8003f36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f32:	2302      	movs	r3, #2
 8003f34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f4e:	f7ff fdaf 	bl	8003ab0 <HAL_GetTick>
 8003f52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d008      	beq.n	8003f72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2280      	movs	r2, #128	; 0x80
 8003f64:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e052      	b.n	8004018 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0216 	bic.w	r2, r2, #22
 8003f80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695a      	ldr	r2, [r3, #20]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d103      	bne.n	8003fa2 <HAL_DMA_Abort+0x62>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d007      	beq.n	8003fb2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0208 	bic.w	r2, r2, #8
 8003fb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0201 	bic.w	r2, r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fc2:	e013      	b.n	8003fec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fc4:	f7ff fd74 	bl	8003ab0 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b05      	cmp	r3, #5
 8003fd0:	d90c      	bls.n	8003fec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2203      	movs	r2, #3
 8003fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e015      	b.n	8004018 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1e4      	bne.n	8003fc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffe:	223f      	movs	r2, #63	; 0x3f
 8004000:	409a      	lsls	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d004      	beq.n	800403e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2280      	movs	r2, #128	; 0x80
 8004038:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e00c      	b.n	8004058 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2205      	movs	r2, #5
 8004042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0201 	bic.w	r2, r2, #1
 8004054:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004070:	4b8e      	ldr	r3, [pc, #568]	; (80042ac <HAL_DMA_IRQHandler+0x248>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a8e      	ldr	r2, [pc, #568]	; (80042b0 <HAL_DMA_IRQHandler+0x24c>)
 8004076:	fba2 2303 	umull	r2, r3, r2, r3
 800407a:	0a9b      	lsrs	r3, r3, #10
 800407c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004082:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408e:	2208      	movs	r2, #8
 8004090:	409a      	lsls	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	4013      	ands	r3, r2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d01a      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d013      	beq.n	80040d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0204 	bic.w	r2, r2, #4
 80040b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040bc:	2208      	movs	r2, #8
 80040be:	409a      	lsls	r2, r3
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c8:	f043 0201 	orr.w	r2, r3, #1
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d4:	2201      	movs	r2, #1
 80040d6:	409a      	lsls	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4013      	ands	r3, r2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d012      	beq.n	8004106 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00b      	beq.n	8004106 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f2:	2201      	movs	r2, #1
 80040f4:	409a      	lsls	r2, r3
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fe:	f043 0202 	orr.w	r2, r3, #2
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800410a:	2204      	movs	r2, #4
 800410c:	409a      	lsls	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	4013      	ands	r3, r2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d012      	beq.n	800413c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00b      	beq.n	800413c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004128:	2204      	movs	r2, #4
 800412a:	409a      	lsls	r2, r3
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004134:	f043 0204 	orr.w	r2, r3, #4
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004140:	2210      	movs	r2, #16
 8004142:	409a      	lsls	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4013      	ands	r3, r2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d043      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b00      	cmp	r3, #0
 8004158:	d03c      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415e:	2210      	movs	r2, #16
 8004160:	409a      	lsls	r2, r3
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d018      	beq.n	80041a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d108      	bne.n	8004194 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	2b00      	cmp	r3, #0
 8004188:	d024      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	4798      	blx	r3
 8004192:	e01f      	b.n	80041d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01b      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	4798      	blx	r3
 80041a4:	e016      	b.n	80041d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d107      	bne.n	80041c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0208 	bic.w	r2, r2, #8
 80041c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d8:	2220      	movs	r2, #32
 80041da:	409a      	lsls	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4013      	ands	r3, r2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 808f 	beq.w	8004304 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 8087 	beq.w	8004304 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fa:	2220      	movs	r2, #32
 80041fc:	409a      	lsls	r2, r3
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b05      	cmp	r3, #5
 800420c:	d136      	bne.n	800427c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0216 	bic.w	r2, r2, #22
 800421c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695a      	ldr	r2, [r3, #20]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800422c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	2b00      	cmp	r3, #0
 8004234:	d103      	bne.n	800423e <HAL_DMA_IRQHandler+0x1da>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800423a:	2b00      	cmp	r3, #0
 800423c:	d007      	beq.n	800424e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0208 	bic.w	r2, r2, #8
 800424c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004252:	223f      	movs	r2, #63	; 0x3f
 8004254:	409a      	lsls	r2, r3
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800426e:	2b00      	cmp	r3, #0
 8004270:	d07e      	beq.n	8004370 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	4798      	blx	r3
        }
        return;
 800427a:	e079      	b.n	8004370 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d01d      	beq.n	80042c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10d      	bne.n	80042b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429c:	2b00      	cmp	r3, #0
 800429e:	d031      	beq.n	8004304 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	4798      	blx	r3
 80042a8:	e02c      	b.n	8004304 <HAL_DMA_IRQHandler+0x2a0>
 80042aa:	bf00      	nop
 80042ac:	20000004 	.word	0x20000004
 80042b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d023      	beq.n	8004304 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	4798      	blx	r3
 80042c4:	e01e      	b.n	8004304 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10f      	bne.n	80042f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0210 	bic.w	r2, r2, #16
 80042e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004308:	2b00      	cmp	r3, #0
 800430a:	d032      	beq.n	8004372 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d022      	beq.n	800435e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2205      	movs	r2, #5
 800431c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0201 	bic.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	3301      	adds	r3, #1
 8004334:	60bb      	str	r3, [r7, #8]
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	429a      	cmp	r2, r3
 800433a:	d307      	bcc.n	800434c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f2      	bne.n	8004330 <HAL_DMA_IRQHandler+0x2cc>
 800434a:	e000      	b.n	800434e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800434c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004362:	2b00      	cmp	r3, #0
 8004364:	d005      	beq.n	8004372 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	4798      	blx	r3
 800436e:	e000      	b.n	8004372 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004370:	bf00      	nop
    }
  }
}
 8004372:	3718      	adds	r7, #24
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
 8004384:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004394:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	2b40      	cmp	r3, #64	; 0x40
 80043a4:	d108      	bne.n	80043b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80043b6:	e007      	b.n	80043c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	60da      	str	r2, [r3, #12]
}
 80043c8:	bf00      	nop
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	3b10      	subs	r3, #16
 80043e4:	4a14      	ldr	r2, [pc, #80]	; (8004438 <DMA_CalcBaseAndBitshift+0x64>)
 80043e6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ea:	091b      	lsrs	r3, r3, #4
 80043ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80043ee:	4a13      	ldr	r2, [pc, #76]	; (800443c <DMA_CalcBaseAndBitshift+0x68>)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4413      	add	r3, r2
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d909      	bls.n	8004416 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800440a:	f023 0303 	bic.w	r3, r3, #3
 800440e:	1d1a      	adds	r2, r3, #4
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	659a      	str	r2, [r3, #88]	; 0x58
 8004414:	e007      	b.n	8004426 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800441e:	f023 0303 	bic.w	r3, r3, #3
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800442a:	4618      	mov	r0, r3
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	aaaaaaab 	.word	0xaaaaaaab
 800443c:	0800d30c 	.word	0x0800d30c

08004440 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004448:	2300      	movs	r3, #0
 800444a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004450:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d11f      	bne.n	800449a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b03      	cmp	r3, #3
 800445e:	d856      	bhi.n	800450e <DMA_CheckFifoParam+0xce>
 8004460:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <DMA_CheckFifoParam+0x28>)
 8004462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004466:	bf00      	nop
 8004468:	08004479 	.word	0x08004479
 800446c:	0800448b 	.word	0x0800448b
 8004470:	08004479 	.word	0x08004479
 8004474:	0800450f 	.word	0x0800450f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d046      	beq.n	8004512 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004488:	e043      	b.n	8004512 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004492:	d140      	bne.n	8004516 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004498:	e03d      	b.n	8004516 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044a2:	d121      	bne.n	80044e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d837      	bhi.n	800451a <DMA_CheckFifoParam+0xda>
 80044aa:	a201      	add	r2, pc, #4	; (adr r2, 80044b0 <DMA_CheckFifoParam+0x70>)
 80044ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b0:	080044c1 	.word	0x080044c1
 80044b4:	080044c7 	.word	0x080044c7
 80044b8:	080044c1 	.word	0x080044c1
 80044bc:	080044d9 	.word	0x080044d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	73fb      	strb	r3, [r7, #15]
      break;
 80044c4:	e030      	b.n	8004528 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d025      	beq.n	800451e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044d6:	e022      	b.n	800451e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044e0:	d11f      	bne.n	8004522 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80044e6:	e01c      	b.n	8004522 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d903      	bls.n	80044f6 <DMA_CheckFifoParam+0xb6>
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d003      	beq.n	80044fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80044f4:	e018      	b.n	8004528 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	73fb      	strb	r3, [r7, #15]
      break;
 80044fa:	e015      	b.n	8004528 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00e      	beq.n	8004526 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	73fb      	strb	r3, [r7, #15]
      break;
 800450c:	e00b      	b.n	8004526 <DMA_CheckFifoParam+0xe6>
      break;
 800450e:	bf00      	nop
 8004510:	e00a      	b.n	8004528 <DMA_CheckFifoParam+0xe8>
      break;
 8004512:	bf00      	nop
 8004514:	e008      	b.n	8004528 <DMA_CheckFifoParam+0xe8>
      break;
 8004516:	bf00      	nop
 8004518:	e006      	b.n	8004528 <DMA_CheckFifoParam+0xe8>
      break;
 800451a:	bf00      	nop
 800451c:	e004      	b.n	8004528 <DMA_CheckFifoParam+0xe8>
      break;
 800451e:	bf00      	nop
 8004520:	e002      	b.n	8004528 <DMA_CheckFifoParam+0xe8>
      break;   
 8004522:	bf00      	nop
 8004524:	e000      	b.n	8004528 <DMA_CheckFifoParam+0xe8>
      break;
 8004526:	bf00      	nop
    }
  } 
  
  return status; 
 8004528:	7bfb      	ldrb	r3, [r7, #15]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop

08004538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004538:	b480      	push	{r7}
 800453a:	b089      	sub	sp, #36	; 0x24
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004542:	2300      	movs	r3, #0
 8004544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004546:	2300      	movs	r3, #0
 8004548:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800454a:	2300      	movs	r3, #0
 800454c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800454e:	2300      	movs	r3, #0
 8004550:	61fb      	str	r3, [r7, #28]
 8004552:	e16b      	b.n	800482c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004554:	2201      	movs	r2, #1
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	4013      	ands	r3, r2
 8004566:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	429a      	cmp	r2, r3
 800456e:	f040 815a 	bne.w	8004826 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	2b01      	cmp	r3, #1
 800457c:	d005      	beq.n	800458a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004586:	2b02      	cmp	r3, #2
 8004588:	d130      	bne.n	80045ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	2203      	movs	r2, #3
 8004596:	fa02 f303 	lsl.w	r3, r2, r3
 800459a:	43db      	mvns	r3, r3
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	4013      	ands	r3, r2
 80045a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	fa02 f303 	lsl.w	r3, r2, r3
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045c0:	2201      	movs	r2, #1
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	43db      	mvns	r3, r3
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	4013      	ands	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	091b      	lsrs	r3, r3, #4
 80045d6:	f003 0201 	and.w	r2, r3, #1
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f003 0303 	and.w	r3, r3, #3
 80045f4:	2b03      	cmp	r3, #3
 80045f6:	d017      	beq.n	8004628 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	2203      	movs	r2, #3
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	43db      	mvns	r3, r3
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	4013      	ands	r3, r2
 800460e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	4313      	orrs	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f003 0303 	and.w	r3, r3, #3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d123      	bne.n	800467c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	08da      	lsrs	r2, r3, #3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3208      	adds	r2, #8
 800463c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004640:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	220f      	movs	r2, #15
 800464c:	fa02 f303 	lsl.w	r3, r2, r3
 8004650:	43db      	mvns	r3, r3
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	4013      	ands	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4313      	orrs	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	08da      	lsrs	r2, r3, #3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3208      	adds	r2, #8
 8004676:	69b9      	ldr	r1, [r7, #24]
 8004678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	2203      	movs	r2, #3
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	43db      	mvns	r3, r3
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	4013      	ands	r3, r2
 8004692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f003 0203 	and.w	r2, r3, #3
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 80b4 	beq.w	8004826 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046be:	2300      	movs	r3, #0
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	4b60      	ldr	r3, [pc, #384]	; (8004844 <HAL_GPIO_Init+0x30c>)
 80046c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c6:	4a5f      	ldr	r2, [pc, #380]	; (8004844 <HAL_GPIO_Init+0x30c>)
 80046c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046cc:	6453      	str	r3, [r2, #68]	; 0x44
 80046ce:	4b5d      	ldr	r3, [pc, #372]	; (8004844 <HAL_GPIO_Init+0x30c>)
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046da:	4a5b      	ldr	r2, [pc, #364]	; (8004848 <HAL_GPIO_Init+0x310>)
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	089b      	lsrs	r3, r3, #2
 80046e0:	3302      	adds	r3, #2
 80046e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	220f      	movs	r2, #15
 80046f2:	fa02 f303 	lsl.w	r3, r2, r3
 80046f6:	43db      	mvns	r3, r3
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	4013      	ands	r3, r2
 80046fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a52      	ldr	r2, [pc, #328]	; (800484c <HAL_GPIO_Init+0x314>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d02b      	beq.n	800475e <HAL_GPIO_Init+0x226>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a51      	ldr	r2, [pc, #324]	; (8004850 <HAL_GPIO_Init+0x318>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d025      	beq.n	800475a <HAL_GPIO_Init+0x222>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a50      	ldr	r2, [pc, #320]	; (8004854 <HAL_GPIO_Init+0x31c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d01f      	beq.n	8004756 <HAL_GPIO_Init+0x21e>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a4f      	ldr	r2, [pc, #316]	; (8004858 <HAL_GPIO_Init+0x320>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d019      	beq.n	8004752 <HAL_GPIO_Init+0x21a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a4e      	ldr	r2, [pc, #312]	; (800485c <HAL_GPIO_Init+0x324>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d013      	beq.n	800474e <HAL_GPIO_Init+0x216>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a4d      	ldr	r2, [pc, #308]	; (8004860 <HAL_GPIO_Init+0x328>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d00d      	beq.n	800474a <HAL_GPIO_Init+0x212>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a4c      	ldr	r2, [pc, #304]	; (8004864 <HAL_GPIO_Init+0x32c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d007      	beq.n	8004746 <HAL_GPIO_Init+0x20e>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a4b      	ldr	r2, [pc, #300]	; (8004868 <HAL_GPIO_Init+0x330>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d101      	bne.n	8004742 <HAL_GPIO_Init+0x20a>
 800473e:	2307      	movs	r3, #7
 8004740:	e00e      	b.n	8004760 <HAL_GPIO_Init+0x228>
 8004742:	2308      	movs	r3, #8
 8004744:	e00c      	b.n	8004760 <HAL_GPIO_Init+0x228>
 8004746:	2306      	movs	r3, #6
 8004748:	e00a      	b.n	8004760 <HAL_GPIO_Init+0x228>
 800474a:	2305      	movs	r3, #5
 800474c:	e008      	b.n	8004760 <HAL_GPIO_Init+0x228>
 800474e:	2304      	movs	r3, #4
 8004750:	e006      	b.n	8004760 <HAL_GPIO_Init+0x228>
 8004752:	2303      	movs	r3, #3
 8004754:	e004      	b.n	8004760 <HAL_GPIO_Init+0x228>
 8004756:	2302      	movs	r3, #2
 8004758:	e002      	b.n	8004760 <HAL_GPIO_Init+0x228>
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <HAL_GPIO_Init+0x228>
 800475e:	2300      	movs	r3, #0
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	f002 0203 	and.w	r2, r2, #3
 8004766:	0092      	lsls	r2, r2, #2
 8004768:	4093      	lsls	r3, r2
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	4313      	orrs	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004770:	4935      	ldr	r1, [pc, #212]	; (8004848 <HAL_GPIO_Init+0x310>)
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	089b      	lsrs	r3, r3, #2
 8004776:	3302      	adds	r3, #2
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800477e:	4b3b      	ldr	r3, [pc, #236]	; (800486c <HAL_GPIO_Init+0x334>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	43db      	mvns	r3, r3
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	4013      	ands	r3, r2
 800478c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	4313      	orrs	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047a2:	4a32      	ldr	r2, [pc, #200]	; (800486c <HAL_GPIO_Init+0x334>)
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047a8:	4b30      	ldr	r3, [pc, #192]	; (800486c <HAL_GPIO_Init+0x334>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	43db      	mvns	r3, r3
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	4013      	ands	r3, r2
 80047b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047cc:	4a27      	ldr	r2, [pc, #156]	; (800486c <HAL_GPIO_Init+0x334>)
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80047d2:	4b26      	ldr	r3, [pc, #152]	; (800486c <HAL_GPIO_Init+0x334>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	43db      	mvns	r3, r3
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	4013      	ands	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047f6:	4a1d      	ldr	r2, [pc, #116]	; (800486c <HAL_GPIO_Init+0x334>)
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047fc:	4b1b      	ldr	r3, [pc, #108]	; (800486c <HAL_GPIO_Init+0x334>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	43db      	mvns	r3, r3
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	4013      	ands	r3, r2
 800480a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004820:	4a12      	ldr	r2, [pc, #72]	; (800486c <HAL_GPIO_Init+0x334>)
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	3301      	adds	r3, #1
 800482a:	61fb      	str	r3, [r7, #28]
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	2b0f      	cmp	r3, #15
 8004830:	f67f ae90 	bls.w	8004554 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004834:	bf00      	nop
 8004836:	bf00      	nop
 8004838:	3724      	adds	r7, #36	; 0x24
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	40023800 	.word	0x40023800
 8004848:	40013800 	.word	0x40013800
 800484c:	40020000 	.word	0x40020000
 8004850:	40020400 	.word	0x40020400
 8004854:	40020800 	.word	0x40020800
 8004858:	40020c00 	.word	0x40020c00
 800485c:	40021000 	.word	0x40021000
 8004860:	40021400 	.word	0x40021400
 8004864:	40021800 	.word	0x40021800
 8004868:	40021c00 	.word	0x40021c00
 800486c:	40013c00 	.word	0x40013c00

08004870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	460b      	mov	r3, r1
 800487a:	807b      	strh	r3, [r7, #2]
 800487c:	4613      	mov	r3, r2
 800487e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004880:	787b      	ldrb	r3, [r7, #1]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004886:	887a      	ldrh	r2, [r7, #2]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800488c:	e003      	b.n	8004896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800488e:	887b      	ldrh	r3, [r7, #2]
 8004890:	041a      	lsls	r2, r3, #16
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	619a      	str	r2, [r3, #24]
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80048a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048a4:	b08f      	sub	sp, #60	; 0x3c
 80048a6:	af0a      	add	r7, sp, #40	; 0x28
 80048a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e054      	b.n	800495e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d106      	bne.n	80048d4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f007 fd7a 	bl	800c3c8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2203      	movs	r2, #3
 80048d8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d102      	bne.n	80048ee <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f004 fc38 	bl	8009168 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	603b      	str	r3, [r7, #0]
 80048fe:	687e      	ldr	r6, [r7, #4]
 8004900:	466d      	mov	r5, sp
 8004902:	f106 0410 	add.w	r4, r6, #16
 8004906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800490a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800490c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800490e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004912:	e885 0003 	stmia.w	r5, {r0, r1}
 8004916:	1d33      	adds	r3, r6, #4
 8004918:	cb0e      	ldmia	r3, {r1, r2, r3}
 800491a:	6838      	ldr	r0, [r7, #0]
 800491c:	f004 fbb2 	bl	8009084 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2101      	movs	r1, #1
 8004926:	4618      	mov	r0, r3
 8004928:	f004 fc2f 	bl	800918a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	603b      	str	r3, [r7, #0]
 8004932:	687e      	ldr	r6, [r7, #4]
 8004934:	466d      	mov	r5, sp
 8004936:	f106 0410 	add.w	r4, r6, #16
 800493a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800493c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800493e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004942:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004946:	e885 0003 	stmia.w	r5, {r0, r1}
 800494a:	1d33      	adds	r3, r6, #4
 800494c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800494e:	6838      	ldr	r0, [r7, #0]
 8004950:	f004 fdb8 	bl	80094c4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004966 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004966:	b590      	push	{r4, r7, lr}
 8004968:	b089      	sub	sp, #36	; 0x24
 800496a:	af04      	add	r7, sp, #16
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	4608      	mov	r0, r1
 8004970:	4611      	mov	r1, r2
 8004972:	461a      	mov	r2, r3
 8004974:	4603      	mov	r3, r0
 8004976:	70fb      	strb	r3, [r7, #3]
 8004978:	460b      	mov	r3, r1
 800497a:	70bb      	strb	r3, [r7, #2]
 800497c:	4613      	mov	r3, r2
 800497e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <HAL_HCD_HC_Init+0x28>
 800498a:	2302      	movs	r3, #2
 800498c:	e076      	b.n	8004a7c <HAL_HCD_HC_Init+0x116>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004996:	78fb      	ldrb	r3, [r7, #3]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	212c      	movs	r1, #44	; 0x2c
 800499c:	fb01 f303 	mul.w	r3, r1, r3
 80049a0:	4413      	add	r3, r2
 80049a2:	333d      	adds	r3, #61	; 0x3d
 80049a4:	2200      	movs	r2, #0
 80049a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80049a8:	78fb      	ldrb	r3, [r7, #3]
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	212c      	movs	r1, #44	; 0x2c
 80049ae:	fb01 f303 	mul.w	r3, r1, r3
 80049b2:	4413      	add	r3, r2
 80049b4:	3338      	adds	r3, #56	; 0x38
 80049b6:	787a      	ldrb	r2, [r7, #1]
 80049b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80049ba:	78fb      	ldrb	r3, [r7, #3]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	212c      	movs	r1, #44	; 0x2c
 80049c0:	fb01 f303 	mul.w	r3, r1, r3
 80049c4:	4413      	add	r3, r2
 80049c6:	3340      	adds	r3, #64	; 0x40
 80049c8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80049ca:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80049cc:	78fb      	ldrb	r3, [r7, #3]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	212c      	movs	r1, #44	; 0x2c
 80049d2:	fb01 f303 	mul.w	r3, r1, r3
 80049d6:	4413      	add	r3, r2
 80049d8:	3339      	adds	r3, #57	; 0x39
 80049da:	78fa      	ldrb	r2, [r7, #3]
 80049dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80049de:	78fb      	ldrb	r3, [r7, #3]
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	212c      	movs	r1, #44	; 0x2c
 80049e4:	fb01 f303 	mul.w	r3, r1, r3
 80049e8:	4413      	add	r3, r2
 80049ea:	333f      	adds	r3, #63	; 0x3f
 80049ec:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80049f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80049f2:	78fb      	ldrb	r3, [r7, #3]
 80049f4:	78ba      	ldrb	r2, [r7, #2]
 80049f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049fa:	b2d0      	uxtb	r0, r2
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	212c      	movs	r1, #44	; 0x2c
 8004a00:	fb01 f303 	mul.w	r3, r1, r3
 8004a04:	4413      	add	r3, r2
 8004a06:	333a      	adds	r3, #58	; 0x3a
 8004a08:	4602      	mov	r2, r0
 8004a0a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004a0c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	da09      	bge.n	8004a28 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004a14:	78fb      	ldrb	r3, [r7, #3]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	212c      	movs	r1, #44	; 0x2c
 8004a1a:	fb01 f303 	mul.w	r3, r1, r3
 8004a1e:	4413      	add	r3, r2
 8004a20:	333b      	adds	r3, #59	; 0x3b
 8004a22:	2201      	movs	r2, #1
 8004a24:	701a      	strb	r2, [r3, #0]
 8004a26:	e008      	b.n	8004a3a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004a28:	78fb      	ldrb	r3, [r7, #3]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	212c      	movs	r1, #44	; 0x2c
 8004a2e:	fb01 f303 	mul.w	r3, r1, r3
 8004a32:	4413      	add	r3, r2
 8004a34:	333b      	adds	r3, #59	; 0x3b
 8004a36:	2200      	movs	r2, #0
 8004a38:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	212c      	movs	r1, #44	; 0x2c
 8004a40:	fb01 f303 	mul.w	r3, r1, r3
 8004a44:	4413      	add	r3, r2
 8004a46:	333c      	adds	r3, #60	; 0x3c
 8004a48:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004a4c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6818      	ldr	r0, [r3, #0]
 8004a52:	787c      	ldrb	r4, [r7, #1]
 8004a54:	78ba      	ldrb	r2, [r7, #2]
 8004a56:	78f9      	ldrb	r1, [r7, #3]
 8004a58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a5a:	9302      	str	r3, [sp, #8]
 8004a5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a60:	9301      	str	r3, [sp, #4]
 8004a62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	4623      	mov	r3, r4
 8004a6a:	f004 feb1 	bl	80097d0 <USB_HC_Init>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd90      	pop	{r4, r7, pc}

08004a84 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004a90:	2300      	movs	r3, #0
 8004a92:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <HAL_HCD_HC_Halt+0x1e>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e00f      	b.n	8004ac2 <HAL_HCD_HC_Halt+0x3e>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	78fa      	ldrb	r2, [r7, #3]
 8004ab0:	4611      	mov	r1, r2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f005 f901 	bl	8009cba <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	4608      	mov	r0, r1
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	461a      	mov	r2, r3
 8004ada:	4603      	mov	r3, r0
 8004adc:	70fb      	strb	r3, [r7, #3]
 8004ade:	460b      	mov	r3, r1
 8004ae0:	70bb      	strb	r3, [r7, #2]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004ae6:	78fb      	ldrb	r3, [r7, #3]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	212c      	movs	r1, #44	; 0x2c
 8004aec:	fb01 f303 	mul.w	r3, r1, r3
 8004af0:	4413      	add	r3, r2
 8004af2:	333b      	adds	r3, #59	; 0x3b
 8004af4:	78ba      	ldrb	r2, [r7, #2]
 8004af6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004af8:	78fb      	ldrb	r3, [r7, #3]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	212c      	movs	r1, #44	; 0x2c
 8004afe:	fb01 f303 	mul.w	r3, r1, r3
 8004b02:	4413      	add	r3, r2
 8004b04:	333f      	adds	r3, #63	; 0x3f
 8004b06:	787a      	ldrb	r2, [r7, #1]
 8004b08:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004b0a:	7c3b      	ldrb	r3, [r7, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d112      	bne.n	8004b36 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004b10:	78fb      	ldrb	r3, [r7, #3]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	212c      	movs	r1, #44	; 0x2c
 8004b16:	fb01 f303 	mul.w	r3, r1, r3
 8004b1a:	4413      	add	r3, r2
 8004b1c:	3342      	adds	r3, #66	; 0x42
 8004b1e:	2203      	movs	r2, #3
 8004b20:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004b22:	78fb      	ldrb	r3, [r7, #3]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	212c      	movs	r1, #44	; 0x2c
 8004b28:	fb01 f303 	mul.w	r3, r1, r3
 8004b2c:	4413      	add	r3, r2
 8004b2e:	333d      	adds	r3, #61	; 0x3d
 8004b30:	7f3a      	ldrb	r2, [r7, #28]
 8004b32:	701a      	strb	r2, [r3, #0]
 8004b34:	e008      	b.n	8004b48 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b36:	78fb      	ldrb	r3, [r7, #3]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	212c      	movs	r1, #44	; 0x2c
 8004b3c:	fb01 f303 	mul.w	r3, r1, r3
 8004b40:	4413      	add	r3, r2
 8004b42:	3342      	adds	r3, #66	; 0x42
 8004b44:	2202      	movs	r2, #2
 8004b46:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004b48:	787b      	ldrb	r3, [r7, #1]
 8004b4a:	2b03      	cmp	r3, #3
 8004b4c:	f200 80c6 	bhi.w	8004cdc <HAL_HCD_HC_SubmitRequest+0x210>
 8004b50:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b56:	bf00      	nop
 8004b58:	08004b69 	.word	0x08004b69
 8004b5c:	08004cc9 	.word	0x08004cc9
 8004b60:	08004bcd 	.word	0x08004bcd
 8004b64:	08004c4b 	.word	0x08004c4b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004b68:	7c3b      	ldrb	r3, [r7, #16]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	f040 80b8 	bne.w	8004ce0 <HAL_HCD_HC_SubmitRequest+0x214>
 8004b70:	78bb      	ldrb	r3, [r7, #2]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f040 80b4 	bne.w	8004ce0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004b78:	8b3b      	ldrh	r3, [r7, #24]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d108      	bne.n	8004b90 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004b7e:	78fb      	ldrb	r3, [r7, #3]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	212c      	movs	r1, #44	; 0x2c
 8004b84:	fb01 f303 	mul.w	r3, r1, r3
 8004b88:	4413      	add	r3, r2
 8004b8a:	3355      	adds	r3, #85	; 0x55
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004b90:	78fb      	ldrb	r3, [r7, #3]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	212c      	movs	r1, #44	; 0x2c
 8004b96:	fb01 f303 	mul.w	r3, r1, r3
 8004b9a:	4413      	add	r3, r2
 8004b9c:	3355      	adds	r3, #85	; 0x55
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d109      	bne.n	8004bb8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ba4:	78fb      	ldrb	r3, [r7, #3]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	212c      	movs	r1, #44	; 0x2c
 8004baa:	fb01 f303 	mul.w	r3, r1, r3
 8004bae:	4413      	add	r3, r2
 8004bb0:	3342      	adds	r3, #66	; 0x42
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004bb6:	e093      	b.n	8004ce0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	212c      	movs	r1, #44	; 0x2c
 8004bbe:	fb01 f303 	mul.w	r3, r1, r3
 8004bc2:	4413      	add	r3, r2
 8004bc4:	3342      	adds	r3, #66	; 0x42
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	701a      	strb	r2, [r3, #0]
      break;
 8004bca:	e089      	b.n	8004ce0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004bcc:	78bb      	ldrb	r3, [r7, #2]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d11d      	bne.n	8004c0e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004bd2:	78fb      	ldrb	r3, [r7, #3]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	212c      	movs	r1, #44	; 0x2c
 8004bd8:	fb01 f303 	mul.w	r3, r1, r3
 8004bdc:	4413      	add	r3, r2
 8004bde:	3355      	adds	r3, #85	; 0x55
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d109      	bne.n	8004bfa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004be6:	78fb      	ldrb	r3, [r7, #3]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	212c      	movs	r1, #44	; 0x2c
 8004bec:	fb01 f303 	mul.w	r3, r1, r3
 8004bf0:	4413      	add	r3, r2
 8004bf2:	3342      	adds	r3, #66	; 0x42
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004bf8:	e073      	b.n	8004ce2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004bfa:	78fb      	ldrb	r3, [r7, #3]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	212c      	movs	r1, #44	; 0x2c
 8004c00:	fb01 f303 	mul.w	r3, r1, r3
 8004c04:	4413      	add	r3, r2
 8004c06:	3342      	adds	r3, #66	; 0x42
 8004c08:	2202      	movs	r2, #2
 8004c0a:	701a      	strb	r2, [r3, #0]
      break;
 8004c0c:	e069      	b.n	8004ce2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004c0e:	78fb      	ldrb	r3, [r7, #3]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	212c      	movs	r1, #44	; 0x2c
 8004c14:	fb01 f303 	mul.w	r3, r1, r3
 8004c18:	4413      	add	r3, r2
 8004c1a:	3354      	adds	r3, #84	; 0x54
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d109      	bne.n	8004c36 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c22:	78fb      	ldrb	r3, [r7, #3]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	212c      	movs	r1, #44	; 0x2c
 8004c28:	fb01 f303 	mul.w	r3, r1, r3
 8004c2c:	4413      	add	r3, r2
 8004c2e:	3342      	adds	r3, #66	; 0x42
 8004c30:	2200      	movs	r2, #0
 8004c32:	701a      	strb	r2, [r3, #0]
      break;
 8004c34:	e055      	b.n	8004ce2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c36:	78fb      	ldrb	r3, [r7, #3]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	212c      	movs	r1, #44	; 0x2c
 8004c3c:	fb01 f303 	mul.w	r3, r1, r3
 8004c40:	4413      	add	r3, r2
 8004c42:	3342      	adds	r3, #66	; 0x42
 8004c44:	2202      	movs	r2, #2
 8004c46:	701a      	strb	r2, [r3, #0]
      break;
 8004c48:	e04b      	b.n	8004ce2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004c4a:	78bb      	ldrb	r3, [r7, #2]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d11d      	bne.n	8004c8c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004c50:	78fb      	ldrb	r3, [r7, #3]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	212c      	movs	r1, #44	; 0x2c
 8004c56:	fb01 f303 	mul.w	r3, r1, r3
 8004c5a:	4413      	add	r3, r2
 8004c5c:	3355      	adds	r3, #85	; 0x55
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d109      	bne.n	8004c78 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c64:	78fb      	ldrb	r3, [r7, #3]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	212c      	movs	r1, #44	; 0x2c
 8004c6a:	fb01 f303 	mul.w	r3, r1, r3
 8004c6e:	4413      	add	r3, r2
 8004c70:	3342      	adds	r3, #66	; 0x42
 8004c72:	2200      	movs	r2, #0
 8004c74:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004c76:	e034      	b.n	8004ce2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c78:	78fb      	ldrb	r3, [r7, #3]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	212c      	movs	r1, #44	; 0x2c
 8004c7e:	fb01 f303 	mul.w	r3, r1, r3
 8004c82:	4413      	add	r3, r2
 8004c84:	3342      	adds	r3, #66	; 0x42
 8004c86:	2202      	movs	r2, #2
 8004c88:	701a      	strb	r2, [r3, #0]
      break;
 8004c8a:	e02a      	b.n	8004ce2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004c8c:	78fb      	ldrb	r3, [r7, #3]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	212c      	movs	r1, #44	; 0x2c
 8004c92:	fb01 f303 	mul.w	r3, r1, r3
 8004c96:	4413      	add	r3, r2
 8004c98:	3354      	adds	r3, #84	; 0x54
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d109      	bne.n	8004cb4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ca0:	78fb      	ldrb	r3, [r7, #3]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	212c      	movs	r1, #44	; 0x2c
 8004ca6:	fb01 f303 	mul.w	r3, r1, r3
 8004caa:	4413      	add	r3, r2
 8004cac:	3342      	adds	r3, #66	; 0x42
 8004cae:	2200      	movs	r2, #0
 8004cb0:	701a      	strb	r2, [r3, #0]
      break;
 8004cb2:	e016      	b.n	8004ce2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004cb4:	78fb      	ldrb	r3, [r7, #3]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	212c      	movs	r1, #44	; 0x2c
 8004cba:	fb01 f303 	mul.w	r3, r1, r3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	3342      	adds	r3, #66	; 0x42
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	701a      	strb	r2, [r3, #0]
      break;
 8004cc6:	e00c      	b.n	8004ce2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	212c      	movs	r1, #44	; 0x2c
 8004cce:	fb01 f303 	mul.w	r3, r1, r3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	3342      	adds	r3, #66	; 0x42
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	701a      	strb	r2, [r3, #0]
      break;
 8004cda:	e002      	b.n	8004ce2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004cdc:	bf00      	nop
 8004cde:	e000      	b.n	8004ce2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004ce0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004ce2:	78fb      	ldrb	r3, [r7, #3]
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	212c      	movs	r1, #44	; 0x2c
 8004ce8:	fb01 f303 	mul.w	r3, r1, r3
 8004cec:	4413      	add	r3, r2
 8004cee:	3344      	adds	r3, #68	; 0x44
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004cf4:	78fb      	ldrb	r3, [r7, #3]
 8004cf6:	8b3a      	ldrh	r2, [r7, #24]
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	202c      	movs	r0, #44	; 0x2c
 8004cfc:	fb00 f303 	mul.w	r3, r0, r3
 8004d00:	440b      	add	r3, r1
 8004d02:	334c      	adds	r3, #76	; 0x4c
 8004d04:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004d06:	78fb      	ldrb	r3, [r7, #3]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	212c      	movs	r1, #44	; 0x2c
 8004d0c:	fb01 f303 	mul.w	r3, r1, r3
 8004d10:	4413      	add	r3, r2
 8004d12:	3360      	adds	r3, #96	; 0x60
 8004d14:	2200      	movs	r2, #0
 8004d16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004d18:	78fb      	ldrb	r3, [r7, #3]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	212c      	movs	r1, #44	; 0x2c
 8004d1e:	fb01 f303 	mul.w	r3, r1, r3
 8004d22:	4413      	add	r3, r2
 8004d24:	3350      	adds	r3, #80	; 0x50
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004d2a:	78fb      	ldrb	r3, [r7, #3]
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	212c      	movs	r1, #44	; 0x2c
 8004d30:	fb01 f303 	mul.w	r3, r1, r3
 8004d34:	4413      	add	r3, r2
 8004d36:	3339      	adds	r3, #57	; 0x39
 8004d38:	78fa      	ldrb	r2, [r7, #3]
 8004d3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	212c      	movs	r1, #44	; 0x2c
 8004d42:	fb01 f303 	mul.w	r3, r1, r3
 8004d46:	4413      	add	r3, r2
 8004d48:	3361      	adds	r3, #97	; 0x61
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6818      	ldr	r0, [r3, #0]
 8004d52:	78fb      	ldrb	r3, [r7, #3]
 8004d54:	222c      	movs	r2, #44	; 0x2c
 8004d56:	fb02 f303 	mul.w	r3, r2, r3
 8004d5a:	3338      	adds	r3, #56	; 0x38
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	18d1      	adds	r1, r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	461a      	mov	r2, r3
 8004d68:	f004 fe54 	bl	8009a14 <USB_HC_StartXfer>
 8004d6c:	4603      	mov	r3, r0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop

08004d78 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f004 fb55 	bl	800943e <USB_GetMode>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	f040 80f6 	bne.w	8004f88 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f004 fb39 	bl	8009418 <USB_ReadInterrupts>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 80ec 	beq.w	8004f86 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f004 fb30 	bl	8009418 <USB_ReadInterrupts>
 8004db8:	4603      	mov	r3, r0
 8004dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dc2:	d104      	bne.n	8004dce <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004dcc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f004 fb20 	bl	8009418 <USB_ReadInterrupts>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004de2:	d104      	bne.n	8004dee <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004dec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f004 fb10 	bl	8009418 <USB_ReadInterrupts>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004dfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e02:	d104      	bne.n	8004e0e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004e0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f004 fb00 	bl	8009418 <USB_ReadInterrupts>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d103      	bne.n	8004e2a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2202      	movs	r2, #2
 8004e28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f004 faf2 	bl	8009418 <USB_ReadInterrupts>
 8004e34:	4603      	mov	r3, r0
 8004e36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e3e:	d11c      	bne.n	8004e7a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004e48:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10f      	bne.n	8004e7a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004e5a:	2110      	movs	r1, #16
 8004e5c:	6938      	ldr	r0, [r7, #16]
 8004e5e:	f004 f9e1 	bl	8009224 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004e62:	6938      	ldr	r0, [r7, #16]
 8004e64:	f004 fa12 	bl	800928c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f004 fbe8 	bl	8009644 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f007 fb25 	bl	800c4c4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f004 faca 	bl	8009418 <USB_ReadInterrupts>
 8004e84:	4603      	mov	r3, r0
 8004e86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e8e:	d102      	bne.n	8004e96 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f001 f89e 	bl	8005fd2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f004 fabc 	bl	8009418 <USB_ReadInterrupts>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d106      	bne.n	8004eb8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f007 faee 	bl	800c48c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2208      	movs	r2, #8
 8004eb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f004 faab 	bl	8009418 <USB_ReadInterrupts>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	f003 0310 	and.w	r3, r3, #16
 8004ec8:	2b10      	cmp	r3, #16
 8004eca:	d101      	bne.n	8004ed0 <HAL_HCD_IRQHandler+0x158>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e000      	b.n	8004ed2 <HAL_HCD_IRQHandler+0x15a>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d012      	beq.n	8004efc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	699a      	ldr	r2, [r3, #24]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0210 	bic.w	r2, r2, #16
 8004ee4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 ffa1 	bl	8005e2e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699a      	ldr	r2, [r3, #24]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0210 	orr.w	r2, r2, #16
 8004efa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f004 fa89 	bl	8009418 <USB_ReadInterrupts>
 8004f06:	4603      	mov	r3, r0
 8004f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f10:	d13a      	bne.n	8004f88 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f004 febe 	bl	8009c98 <USB_HC_ReadInterrupt>
 8004f1c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004f1e:	2300      	movs	r3, #0
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	e025      	b.n	8004f70 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d018      	beq.n	8004f6a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f4e:	d106      	bne.n	8004f5e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	4619      	mov	r1, r3
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f8ab 	bl	80050b2 <HCD_HC_IN_IRQHandler>
 8004f5c:	e005      	b.n	8004f6a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	4619      	mov	r1, r3
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fbf9 	bl	800575c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d3d4      	bcc.n	8004f24 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f82:	615a      	str	r2, [r3, #20]
 8004f84:	e000      	b.n	8004f88 <HAL_HCD_IRQHandler+0x210>
      return;
 8004f86:	bf00      	nop
    }
  }
}
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b082      	sub	sp, #8
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d101      	bne.n	8004fa4 <HAL_HCD_Start+0x16>
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	e013      	b.n	8004fcc <HAL_HCD_Start+0x3e>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f004 fbaa 	bl	800970c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f004 f8c2 	bl	8009146 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d101      	bne.n	8004fea <HAL_HCD_Stop+0x16>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e00d      	b.n	8005006 <HAL_HCD_Stop+0x32>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f004 ff98 	bl	8009f2c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b082      	sub	sp, #8
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f004 fb4c 	bl	80096b8 <USB_ResetPort>
 8005020:	4603      	mov	r3, r0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	460b      	mov	r3, r1
 8005034:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005036:	78fb      	ldrb	r3, [r7, #3]
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	212c      	movs	r1, #44	; 0x2c
 800503c:	fb01 f303 	mul.w	r3, r1, r3
 8005040:	4413      	add	r3, r2
 8005042:	3360      	adds	r3, #96	; 0x60
 8005044:	781b      	ldrb	r3, [r3, #0]
}
 8005046:	4618      	mov	r0, r3
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	460b      	mov	r3, r1
 800505c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800505e:	78fb      	ldrb	r3, [r7, #3]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	212c      	movs	r1, #44	; 0x2c
 8005064:	fb01 f303 	mul.w	r3, r1, r3
 8005068:	4413      	add	r3, r2
 800506a:	3350      	adds	r3, #80	; 0x50
 800506c:	681b      	ldr	r3, [r3, #0]
}
 800506e:	4618      	mov	r0, r3
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b082      	sub	sp, #8
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f004 fb90 	bl	80097ac <USB_GetCurrentFrame>
 800508c:	4603      	mov	r3, r0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b082      	sub	sp, #8
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f004 fb6b 	bl	800977e <USB_GetHostSpeed>
 80050a8:	4603      	mov	r3, r0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b086      	sub	sp, #24
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
 80050ba:	460b      	mov	r3, r1
 80050bc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80050c8:	78fb      	ldrb	r3, [r7, #3]
 80050ca:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 0304 	and.w	r3, r3, #4
 80050de:	2b04      	cmp	r3, #4
 80050e0:	d11a      	bne.n	8005118 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	015a      	lsls	r2, r3, #5
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	4413      	add	r3, r2
 80050ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ee:	461a      	mov	r2, r3
 80050f0:	2304      	movs	r3, #4
 80050f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	212c      	movs	r1, #44	; 0x2c
 80050fa:	fb01 f303 	mul.w	r3, r1, r3
 80050fe:	4413      	add	r3, r2
 8005100:	3361      	adds	r3, #97	; 0x61
 8005102:	2206      	movs	r2, #6
 8005104:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	4611      	mov	r1, r2
 8005110:	4618      	mov	r0, r3
 8005112:	f004 fdd2 	bl	8009cba <USB_HC_Halt>
 8005116:	e0af      	b.n	8005278 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	4413      	add	r3, r2
 8005120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800512e:	d11b      	bne.n	8005168 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	4413      	add	r3, r2
 8005138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800513c:	461a      	mov	r2, r3
 800513e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005142:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	212c      	movs	r1, #44	; 0x2c
 800514a:	fb01 f303 	mul.w	r3, r1, r3
 800514e:	4413      	add	r3, r2
 8005150:	3361      	adds	r3, #97	; 0x61
 8005152:	2207      	movs	r2, #7
 8005154:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	4611      	mov	r1, r2
 8005160:	4618      	mov	r0, r3
 8005162:	f004 fdaa 	bl	8009cba <USB_HC_Halt>
 8005166:	e087      	b.n	8005278 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	4413      	add	r3, r2
 8005170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 0320 	and.w	r3, r3, #32
 800517a:	2b20      	cmp	r3, #32
 800517c:	d109      	bne.n	8005192 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	4413      	add	r3, r2
 8005186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518a:	461a      	mov	r2, r3
 800518c:	2320      	movs	r3, #32
 800518e:	6093      	str	r3, [r2, #8]
 8005190:	e072      	b.n	8005278 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	4413      	add	r3, r2
 800519a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f003 0308 	and.w	r3, r3, #8
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d11a      	bne.n	80051de <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b4:	461a      	mov	r2, r3
 80051b6:	2308      	movs	r3, #8
 80051b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	212c      	movs	r1, #44	; 0x2c
 80051c0:	fb01 f303 	mul.w	r3, r1, r3
 80051c4:	4413      	add	r3, r2
 80051c6:	3361      	adds	r3, #97	; 0x61
 80051c8:	2205      	movs	r2, #5
 80051ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	4611      	mov	r1, r2
 80051d6:	4618      	mov	r0, r3
 80051d8:	f004 fd6f 	bl	8009cba <USB_HC_Halt>
 80051dc:	e04c      	b.n	8005278 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f4:	d11b      	bne.n	800522e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005202:	461a      	mov	r2, r3
 8005204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005208:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	212c      	movs	r1, #44	; 0x2c
 8005210:	fb01 f303 	mul.w	r3, r1, r3
 8005214:	4413      	add	r3, r2
 8005216:	3361      	adds	r3, #97	; 0x61
 8005218:	2208      	movs	r2, #8
 800521a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	b2d2      	uxtb	r2, r2
 8005224:	4611      	mov	r1, r2
 8005226:	4618      	mov	r0, r3
 8005228:	f004 fd47 	bl	8009cba <USB_HC_Halt>
 800522c:	e024      	b.n	8005278 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	4413      	add	r3, r2
 8005236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005240:	2b80      	cmp	r3, #128	; 0x80
 8005242:	d119      	bne.n	8005278 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	4413      	add	r3, r2
 800524c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005250:	461a      	mov	r2, r3
 8005252:	2380      	movs	r3, #128	; 0x80
 8005254:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	212c      	movs	r1, #44	; 0x2c
 800525c:	fb01 f303 	mul.w	r3, r1, r3
 8005260:	4413      	add	r3, r2
 8005262:	3361      	adds	r3, #97	; 0x61
 8005264:	2206      	movs	r2, #6
 8005266:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	4611      	mov	r1, r2
 8005272:	4618      	mov	r0, r3
 8005274:	f004 fd21 	bl	8009cba <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	4413      	add	r3, r2
 8005280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800528a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800528e:	d112      	bne.n	80052b6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	b2d2      	uxtb	r2, r2
 8005298:	4611      	mov	r1, r2
 800529a:	4618      	mov	r0, r3
 800529c:	f004 fd0d 	bl	8009cba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ac:	461a      	mov	r2, r3
 80052ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052b2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80052b4:	e24e      	b.n	8005754 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	f040 80df 	bne.w	800548c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d019      	beq.n	800530a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	212c      	movs	r1, #44	; 0x2c
 80052dc:	fb01 f303 	mul.w	r3, r1, r3
 80052e0:	4413      	add	r3, r2
 80052e2:	3348      	adds	r3, #72	; 0x48
 80052e4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	0159      	lsls	r1, r3, #5
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	440b      	add	r3, r1
 80052ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80052f8:	1ad2      	subs	r2, r2, r3
 80052fa:	6879      	ldr	r1, [r7, #4]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	202c      	movs	r0, #44	; 0x2c
 8005300:	fb00 f303 	mul.w	r3, r0, r3
 8005304:	440b      	add	r3, r1
 8005306:	3350      	adds	r3, #80	; 0x50
 8005308:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	212c      	movs	r1, #44	; 0x2c
 8005310:	fb01 f303 	mul.w	r3, r1, r3
 8005314:	4413      	add	r3, r2
 8005316:	3361      	adds	r3, #97	; 0x61
 8005318:	2201      	movs	r2, #1
 800531a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	212c      	movs	r1, #44	; 0x2c
 8005322:	fb01 f303 	mul.w	r3, r1, r3
 8005326:	4413      	add	r3, r2
 8005328:	335c      	adds	r3, #92	; 0x5c
 800532a:	2200      	movs	r2, #0
 800532c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	4413      	add	r3, r2
 8005336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800533a:	461a      	mov	r2, r3
 800533c:	2301      	movs	r3, #1
 800533e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	212c      	movs	r1, #44	; 0x2c
 8005346:	fb01 f303 	mul.w	r3, r1, r3
 800534a:	4413      	add	r3, r2
 800534c:	333f      	adds	r3, #63	; 0x3f
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d009      	beq.n	8005368 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	212c      	movs	r1, #44	; 0x2c
 800535a:	fb01 f303 	mul.w	r3, r1, r3
 800535e:	4413      	add	r3, r2
 8005360:	333f      	adds	r3, #63	; 0x3f
 8005362:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005364:	2b02      	cmp	r3, #2
 8005366:	d111      	bne.n	800538c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	4611      	mov	r1, r2
 8005372:	4618      	mov	r0, r3
 8005374:	f004 fca1 	bl	8009cba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	4413      	add	r3, r2
 8005380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005384:	461a      	mov	r2, r3
 8005386:	2310      	movs	r3, #16
 8005388:	6093      	str	r3, [r2, #8]
 800538a:	e03a      	b.n	8005402 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	212c      	movs	r1, #44	; 0x2c
 8005392:	fb01 f303 	mul.w	r3, r1, r3
 8005396:	4413      	add	r3, r2
 8005398:	333f      	adds	r3, #63	; 0x3f
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b03      	cmp	r3, #3
 800539e:	d009      	beq.n	80053b4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	212c      	movs	r1, #44	; 0x2c
 80053a6:	fb01 f303 	mul.w	r3, r1, r3
 80053aa:	4413      	add	r3, r2
 80053ac:	333f      	adds	r3, #63	; 0x3f
 80053ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d126      	bne.n	8005402 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	0151      	lsls	r1, r2, #5
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	440a      	add	r2, r1
 80053ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053d2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	212c      	movs	r1, #44	; 0x2c
 80053da:	fb01 f303 	mul.w	r3, r1, r3
 80053de:	4413      	add	r3, r2
 80053e0:	3360      	adds	r3, #96	; 0x60
 80053e2:	2201      	movs	r2, #1
 80053e4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	b2d9      	uxtb	r1, r3
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	202c      	movs	r0, #44	; 0x2c
 80053f0:	fb00 f303 	mul.w	r3, r0, r3
 80053f4:	4413      	add	r3, r2
 80053f6:	3360      	adds	r3, #96	; 0x60
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f007 f86f 	bl	800c4e0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d12b      	bne.n	8005462 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	212c      	movs	r1, #44	; 0x2c
 8005410:	fb01 f303 	mul.w	r3, r1, r3
 8005414:	4413      	add	r3, r2
 8005416:	3348      	adds	r3, #72	; 0x48
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	202c      	movs	r0, #44	; 0x2c
 8005420:	fb00 f202 	mul.w	r2, r0, r2
 8005424:	440a      	add	r2, r1
 8005426:	3240      	adds	r2, #64	; 0x40
 8005428:	8812      	ldrh	r2, [r2, #0]
 800542a:	fbb3 f3f2 	udiv	r3, r3, r2
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 818e 	beq.w	8005754 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	212c      	movs	r1, #44	; 0x2c
 800543e:	fb01 f303 	mul.w	r3, r1, r3
 8005442:	4413      	add	r3, r2
 8005444:	3354      	adds	r3, #84	; 0x54
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	f083 0301 	eor.w	r3, r3, #1
 800544c:	b2d8      	uxtb	r0, r3
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	212c      	movs	r1, #44	; 0x2c
 8005454:	fb01 f303 	mul.w	r3, r1, r3
 8005458:	4413      	add	r3, r2
 800545a:	3354      	adds	r3, #84	; 0x54
 800545c:	4602      	mov	r2, r0
 800545e:	701a      	strb	r2, [r3, #0]
}
 8005460:	e178      	b.n	8005754 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	212c      	movs	r1, #44	; 0x2c
 8005468:	fb01 f303 	mul.w	r3, r1, r3
 800546c:	4413      	add	r3, r2
 800546e:	3354      	adds	r3, #84	; 0x54
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	f083 0301 	eor.w	r3, r3, #1
 8005476:	b2d8      	uxtb	r0, r3
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	212c      	movs	r1, #44	; 0x2c
 800547e:	fb01 f303 	mul.w	r3, r1, r3
 8005482:	4413      	add	r3, r2
 8005484:	3354      	adds	r3, #84	; 0x54
 8005486:	4602      	mov	r2, r0
 8005488:	701a      	strb	r2, [r3, #0]
}
 800548a:	e163      	b.n	8005754 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	4413      	add	r3, r2
 8005494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b02      	cmp	r3, #2
 80054a0:	f040 80f6 	bne.w	8005690 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	212c      	movs	r1, #44	; 0x2c
 80054aa:	fb01 f303 	mul.w	r3, r1, r3
 80054ae:	4413      	add	r3, r2
 80054b0:	3361      	adds	r3, #97	; 0x61
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d109      	bne.n	80054cc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	212c      	movs	r1, #44	; 0x2c
 80054be:	fb01 f303 	mul.w	r3, r1, r3
 80054c2:	4413      	add	r3, r2
 80054c4:	3360      	adds	r3, #96	; 0x60
 80054c6:	2201      	movs	r2, #1
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	e0c9      	b.n	8005660 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	212c      	movs	r1, #44	; 0x2c
 80054d2:	fb01 f303 	mul.w	r3, r1, r3
 80054d6:	4413      	add	r3, r2
 80054d8:	3361      	adds	r3, #97	; 0x61
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	2b05      	cmp	r3, #5
 80054de:	d109      	bne.n	80054f4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	212c      	movs	r1, #44	; 0x2c
 80054e6:	fb01 f303 	mul.w	r3, r1, r3
 80054ea:	4413      	add	r3, r2
 80054ec:	3360      	adds	r3, #96	; 0x60
 80054ee:	2205      	movs	r2, #5
 80054f0:	701a      	strb	r2, [r3, #0]
 80054f2:	e0b5      	b.n	8005660 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	212c      	movs	r1, #44	; 0x2c
 80054fa:	fb01 f303 	mul.w	r3, r1, r3
 80054fe:	4413      	add	r3, r2
 8005500:	3361      	adds	r3, #97	; 0x61
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2b06      	cmp	r3, #6
 8005506:	d009      	beq.n	800551c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	212c      	movs	r1, #44	; 0x2c
 800550e:	fb01 f303 	mul.w	r3, r1, r3
 8005512:	4413      	add	r3, r2
 8005514:	3361      	adds	r3, #97	; 0x61
 8005516:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005518:	2b08      	cmp	r3, #8
 800551a:	d150      	bne.n	80055be <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	212c      	movs	r1, #44	; 0x2c
 8005522:	fb01 f303 	mul.w	r3, r1, r3
 8005526:	4413      	add	r3, r2
 8005528:	335c      	adds	r3, #92	; 0x5c
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	1c5a      	adds	r2, r3, #1
 800552e:	6879      	ldr	r1, [r7, #4]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	202c      	movs	r0, #44	; 0x2c
 8005534:	fb00 f303 	mul.w	r3, r0, r3
 8005538:	440b      	add	r3, r1
 800553a:	335c      	adds	r3, #92	; 0x5c
 800553c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	212c      	movs	r1, #44	; 0x2c
 8005544:	fb01 f303 	mul.w	r3, r1, r3
 8005548:	4413      	add	r3, r2
 800554a:	335c      	adds	r3, #92	; 0x5c
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b02      	cmp	r3, #2
 8005550:	d912      	bls.n	8005578 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	212c      	movs	r1, #44	; 0x2c
 8005558:	fb01 f303 	mul.w	r3, r1, r3
 800555c:	4413      	add	r3, r2
 800555e:	335c      	adds	r3, #92	; 0x5c
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	212c      	movs	r1, #44	; 0x2c
 800556a:	fb01 f303 	mul.w	r3, r1, r3
 800556e:	4413      	add	r3, r2
 8005570:	3360      	adds	r3, #96	; 0x60
 8005572:	2204      	movs	r2, #4
 8005574:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005576:	e073      	b.n	8005660 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	212c      	movs	r1, #44	; 0x2c
 800557e:	fb01 f303 	mul.w	r3, r1, r3
 8005582:	4413      	add	r3, r2
 8005584:	3360      	adds	r3, #96	; 0x60
 8005586:	2202      	movs	r2, #2
 8005588:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	4413      	add	r3, r2
 8005592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055a0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055a8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b6:	461a      	mov	r2, r3
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80055bc:	e050      	b.n	8005660 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	212c      	movs	r1, #44	; 0x2c
 80055c4:	fb01 f303 	mul.w	r3, r1, r3
 80055c8:	4413      	add	r3, r2
 80055ca:	3361      	adds	r3, #97	; 0x61
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2b03      	cmp	r3, #3
 80055d0:	d122      	bne.n	8005618 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	212c      	movs	r1, #44	; 0x2c
 80055d8:	fb01 f303 	mul.w	r3, r1, r3
 80055dc:	4413      	add	r3, r2
 80055de:	3360      	adds	r3, #96	; 0x60
 80055e0:	2202      	movs	r2, #2
 80055e2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055fa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005602:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	015a      	lsls	r2, r3, #5
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	4413      	add	r3, r2
 800560c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005610:	461a      	mov	r2, r3
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	e023      	b.n	8005660 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	212c      	movs	r1, #44	; 0x2c
 800561e:	fb01 f303 	mul.w	r3, r1, r3
 8005622:	4413      	add	r3, r2
 8005624:	3361      	adds	r3, #97	; 0x61
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	2b07      	cmp	r3, #7
 800562a:	d119      	bne.n	8005660 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	212c      	movs	r1, #44	; 0x2c
 8005632:	fb01 f303 	mul.w	r3, r1, r3
 8005636:	4413      	add	r3, r2
 8005638:	335c      	adds	r3, #92	; 0x5c
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	1c5a      	adds	r2, r3, #1
 800563e:	6879      	ldr	r1, [r7, #4]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	202c      	movs	r0, #44	; 0x2c
 8005644:	fb00 f303 	mul.w	r3, r0, r3
 8005648:	440b      	add	r3, r1
 800564a:	335c      	adds	r3, #92	; 0x5c
 800564c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	212c      	movs	r1, #44	; 0x2c
 8005654:	fb01 f303 	mul.w	r3, r1, r3
 8005658:	4413      	add	r3, r2
 800565a:	3360      	adds	r3, #96	; 0x60
 800565c:	2204      	movs	r2, #4
 800565e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	4413      	add	r3, r2
 8005668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800566c:	461a      	mov	r2, r3
 800566e:	2302      	movs	r3, #2
 8005670:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	b2d9      	uxtb	r1, r3
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	202c      	movs	r0, #44	; 0x2c
 800567c:	fb00 f303 	mul.w	r3, r0, r3
 8005680:	4413      	add	r3, r2
 8005682:	3360      	adds	r3, #96	; 0x60
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f006 ff29 	bl	800c4e0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800568e:	e061      	b.n	8005754 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	4413      	add	r3, r2
 8005698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f003 0310 	and.w	r3, r3, #16
 80056a2:	2b10      	cmp	r3, #16
 80056a4:	d156      	bne.n	8005754 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	212c      	movs	r1, #44	; 0x2c
 80056ac:	fb01 f303 	mul.w	r3, r1, r3
 80056b0:	4413      	add	r3, r2
 80056b2:	333f      	adds	r3, #63	; 0x3f
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b03      	cmp	r3, #3
 80056b8:	d111      	bne.n	80056de <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	212c      	movs	r1, #44	; 0x2c
 80056c0:	fb01 f303 	mul.w	r3, r1, r3
 80056c4:	4413      	add	r3, r2
 80056c6:	335c      	adds	r3, #92	; 0x5c
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	4611      	mov	r1, r2
 80056d6:	4618      	mov	r0, r3
 80056d8:	f004 faef 	bl	8009cba <USB_HC_Halt>
 80056dc:	e031      	b.n	8005742 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	212c      	movs	r1, #44	; 0x2c
 80056e4:	fb01 f303 	mul.w	r3, r1, r3
 80056e8:	4413      	add	r3, r2
 80056ea:	333f      	adds	r3, #63	; 0x3f
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d009      	beq.n	8005706 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	212c      	movs	r1, #44	; 0x2c
 80056f8:	fb01 f303 	mul.w	r3, r1, r3
 80056fc:	4413      	add	r3, r2
 80056fe:	333f      	adds	r3, #63	; 0x3f
 8005700:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005702:	2b02      	cmp	r3, #2
 8005704:	d11d      	bne.n	8005742 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	212c      	movs	r1, #44	; 0x2c
 800570c:	fb01 f303 	mul.w	r3, r1, r3
 8005710:	4413      	add	r3, r2
 8005712:	335c      	adds	r3, #92	; 0x5c
 8005714:	2200      	movs	r2, #0
 8005716:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d110      	bne.n	8005742 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	212c      	movs	r1, #44	; 0x2c
 8005726:	fb01 f303 	mul.w	r3, r1, r3
 800572a:	4413      	add	r3, r2
 800572c:	3361      	adds	r3, #97	; 0x61
 800572e:	2203      	movs	r2, #3
 8005730:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	b2d2      	uxtb	r2, r2
 800573a:	4611      	mov	r1, r2
 800573c:	4618      	mov	r0, r3
 800573e:	f004 fabc 	bl	8009cba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	4413      	add	r3, r2
 800574a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800574e:	461a      	mov	r2, r3
 8005750:	2310      	movs	r3, #16
 8005752:	6093      	str	r3, [r2, #8]
}
 8005754:	bf00      	nop
 8005756:	3718      	adds	r7, #24
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b088      	sub	sp, #32
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	460b      	mov	r3, r1
 8005766:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005772:	78fb      	ldrb	r3, [r7, #3]
 8005774:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	4413      	add	r3, r2
 800577e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	2b04      	cmp	r3, #4
 800578a:	d11a      	bne.n	80057c2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	4413      	add	r3, r2
 8005794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005798:	461a      	mov	r2, r3
 800579a:	2304      	movs	r3, #4
 800579c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	212c      	movs	r1, #44	; 0x2c
 80057a4:	fb01 f303 	mul.w	r3, r1, r3
 80057a8:	4413      	add	r3, r2
 80057aa:	3361      	adds	r3, #97	; 0x61
 80057ac:	2206      	movs	r2, #6
 80057ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	4611      	mov	r1, r2
 80057ba:	4618      	mov	r0, r3
 80057bc:	f004 fa7d 	bl	8009cba <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80057c0:	e331      	b.n	8005e26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f003 0320 	and.w	r3, r3, #32
 80057d4:	2b20      	cmp	r3, #32
 80057d6:	d12e      	bne.n	8005836 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e4:	461a      	mov	r2, r3
 80057e6:	2320      	movs	r3, #32
 80057e8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	212c      	movs	r1, #44	; 0x2c
 80057f0:	fb01 f303 	mul.w	r3, r1, r3
 80057f4:	4413      	add	r3, r2
 80057f6:	333d      	adds	r3, #61	; 0x3d
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	f040 8313 	bne.w	8005e26 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	212c      	movs	r1, #44	; 0x2c
 8005806:	fb01 f303 	mul.w	r3, r1, r3
 800580a:	4413      	add	r3, r2
 800580c:	333d      	adds	r3, #61	; 0x3d
 800580e:	2200      	movs	r2, #0
 8005810:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	212c      	movs	r1, #44	; 0x2c
 8005818:	fb01 f303 	mul.w	r3, r1, r3
 800581c:	4413      	add	r3, r2
 800581e:	3360      	adds	r3, #96	; 0x60
 8005820:	2202      	movs	r2, #2
 8005822:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	b2d2      	uxtb	r2, r2
 800582c:	4611      	mov	r1, r2
 800582e:	4618      	mov	r0, r3
 8005830:	f004 fa43 	bl	8009cba <USB_HC_Halt>
}
 8005834:	e2f7      	b.n	8005e26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	4413      	add	r3, r2
 800583e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800584c:	d112      	bne.n	8005874 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	4413      	add	r3, r2
 8005856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800585a:	461a      	mov	r2, r3
 800585c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005860:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	b2d2      	uxtb	r2, r2
 800586a:	4611      	mov	r1, r2
 800586c:	4618      	mov	r0, r3
 800586e:	f004 fa24 	bl	8009cba <USB_HC_Halt>
}
 8005872:	e2d8      	b.n	8005e26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	4413      	add	r3, r2
 800587c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b01      	cmp	r3, #1
 8005888:	d140      	bne.n	800590c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	212c      	movs	r1, #44	; 0x2c
 8005890:	fb01 f303 	mul.w	r3, r1, r3
 8005894:	4413      	add	r3, r2
 8005896:	335c      	adds	r3, #92	; 0x5c
 8005898:	2200      	movs	r2, #0
 800589a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ae:	2b40      	cmp	r3, #64	; 0x40
 80058b0:	d111      	bne.n	80058d6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	212c      	movs	r1, #44	; 0x2c
 80058b8:	fb01 f303 	mul.w	r3, r1, r3
 80058bc:	4413      	add	r3, r2
 80058be:	333d      	adds	r3, #61	; 0x3d
 80058c0:	2201      	movs	r2, #1
 80058c2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d0:	461a      	mov	r2, r3
 80058d2:	2340      	movs	r3, #64	; 0x40
 80058d4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e2:	461a      	mov	r2, r3
 80058e4:	2301      	movs	r3, #1
 80058e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	212c      	movs	r1, #44	; 0x2c
 80058ee:	fb01 f303 	mul.w	r3, r1, r3
 80058f2:	4413      	add	r3, r2
 80058f4:	3361      	adds	r3, #97	; 0x61
 80058f6:	2201      	movs	r2, #1
 80058f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	b2d2      	uxtb	r2, r2
 8005902:	4611      	mov	r1, r2
 8005904:	4618      	mov	r0, r3
 8005906:	f004 f9d8 	bl	8009cba <USB_HC_Halt>
}
 800590a:	e28c      	b.n	8005e26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	4413      	add	r3, r2
 8005914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591e:	2b40      	cmp	r3, #64	; 0x40
 8005920:	d12c      	bne.n	800597c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	212c      	movs	r1, #44	; 0x2c
 8005928:	fb01 f303 	mul.w	r3, r1, r3
 800592c:	4413      	add	r3, r2
 800592e:	3361      	adds	r3, #97	; 0x61
 8005930:	2204      	movs	r2, #4
 8005932:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	212c      	movs	r1, #44	; 0x2c
 800593a:	fb01 f303 	mul.w	r3, r1, r3
 800593e:	4413      	add	r3, r2
 8005940:	333d      	adds	r3, #61	; 0x3d
 8005942:	2201      	movs	r2, #1
 8005944:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	212c      	movs	r1, #44	; 0x2c
 800594c:	fb01 f303 	mul.w	r3, r1, r3
 8005950:	4413      	add	r3, r2
 8005952:	335c      	adds	r3, #92	; 0x5c
 8005954:	2200      	movs	r2, #0
 8005956:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	b2d2      	uxtb	r2, r2
 8005960:	4611      	mov	r1, r2
 8005962:	4618      	mov	r0, r3
 8005964:	f004 f9a9 	bl	8009cba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	4413      	add	r3, r2
 8005970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005974:	461a      	mov	r2, r3
 8005976:	2340      	movs	r3, #64	; 0x40
 8005978:	6093      	str	r3, [r2, #8]
}
 800597a:	e254      	b.n	8005e26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	4413      	add	r3, r2
 8005984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 0308 	and.w	r3, r3, #8
 800598e:	2b08      	cmp	r3, #8
 8005990:	d11a      	bne.n	80059c8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	4413      	add	r3, r2
 800599a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599e:	461a      	mov	r2, r3
 80059a0:	2308      	movs	r3, #8
 80059a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	212c      	movs	r1, #44	; 0x2c
 80059aa:	fb01 f303 	mul.w	r3, r1, r3
 80059ae:	4413      	add	r3, r2
 80059b0:	3361      	adds	r3, #97	; 0x61
 80059b2:	2205      	movs	r2, #5
 80059b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	4611      	mov	r1, r2
 80059c0:	4618      	mov	r0, r3
 80059c2:	f004 f97a 	bl	8009cba <USB_HC_Halt>
}
 80059c6:	e22e      	b.n	8005e26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f003 0310 	and.w	r3, r3, #16
 80059da:	2b10      	cmp	r3, #16
 80059dc:	d140      	bne.n	8005a60 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	212c      	movs	r1, #44	; 0x2c
 80059e4:	fb01 f303 	mul.w	r3, r1, r3
 80059e8:	4413      	add	r3, r2
 80059ea:	335c      	adds	r3, #92	; 0x5c
 80059ec:	2200      	movs	r2, #0
 80059ee:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	212c      	movs	r1, #44	; 0x2c
 80059f6:	fb01 f303 	mul.w	r3, r1, r3
 80059fa:	4413      	add	r3, r2
 80059fc:	3361      	adds	r3, #97	; 0x61
 80059fe:	2203      	movs	r2, #3
 8005a00:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	212c      	movs	r1, #44	; 0x2c
 8005a08:	fb01 f303 	mul.w	r3, r1, r3
 8005a0c:	4413      	add	r3, r2
 8005a0e:	333d      	adds	r3, #61	; 0x3d
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d112      	bne.n	8005a3c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	212c      	movs	r1, #44	; 0x2c
 8005a1c:	fb01 f303 	mul.w	r3, r1, r3
 8005a20:	4413      	add	r3, r2
 8005a22:	333c      	adds	r3, #60	; 0x3c
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d108      	bne.n	8005a3c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	212c      	movs	r1, #44	; 0x2c
 8005a30:	fb01 f303 	mul.w	r3, r1, r3
 8005a34:	4413      	add	r3, r2
 8005a36:	333d      	adds	r3, #61	; 0x3d
 8005a38:	2201      	movs	r2, #1
 8005a3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	4611      	mov	r1, r2
 8005a46:	4618      	mov	r0, r3
 8005a48:	f004 f937 	bl	8009cba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	015a      	lsls	r2, r3, #5
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	4413      	add	r3, r2
 8005a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a58:	461a      	mov	r2, r3
 8005a5a:	2310      	movs	r3, #16
 8005a5c:	6093      	str	r3, [r2, #8]
}
 8005a5e:	e1e2      	b.n	8005e26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a72:	2b80      	cmp	r3, #128	; 0x80
 8005a74:	d164      	bne.n	8005b40 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d111      	bne.n	8005aa2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	212c      	movs	r1, #44	; 0x2c
 8005a84:	fb01 f303 	mul.w	r3, r1, r3
 8005a88:	4413      	add	r3, r2
 8005a8a:	3361      	adds	r3, #97	; 0x61
 8005a8c:	2206      	movs	r2, #6
 8005a8e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	b2d2      	uxtb	r2, r2
 8005a98:	4611      	mov	r1, r2
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f004 f90d 	bl	8009cba <USB_HC_Halt>
 8005aa0:	e044      	b.n	8005b2c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	212c      	movs	r1, #44	; 0x2c
 8005aa8:	fb01 f303 	mul.w	r3, r1, r3
 8005aac:	4413      	add	r3, r2
 8005aae:	335c      	adds	r3, #92	; 0x5c
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	6879      	ldr	r1, [r7, #4]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	202c      	movs	r0, #44	; 0x2c
 8005aba:	fb00 f303 	mul.w	r3, r0, r3
 8005abe:	440b      	add	r3, r1
 8005ac0:	335c      	adds	r3, #92	; 0x5c
 8005ac2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	212c      	movs	r1, #44	; 0x2c
 8005aca:	fb01 f303 	mul.w	r3, r1, r3
 8005ace:	4413      	add	r3, r2
 8005ad0:	335c      	adds	r3, #92	; 0x5c
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d920      	bls.n	8005b1a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	212c      	movs	r1, #44	; 0x2c
 8005ade:	fb01 f303 	mul.w	r3, r1, r3
 8005ae2:	4413      	add	r3, r2
 8005ae4:	335c      	adds	r3, #92	; 0x5c
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	212c      	movs	r1, #44	; 0x2c
 8005af0:	fb01 f303 	mul.w	r3, r1, r3
 8005af4:	4413      	add	r3, r2
 8005af6:	3360      	adds	r3, #96	; 0x60
 8005af8:	2204      	movs	r2, #4
 8005afa:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	b2d9      	uxtb	r1, r3
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	202c      	movs	r0, #44	; 0x2c
 8005b06:	fb00 f303 	mul.w	r3, r0, r3
 8005b0a:	4413      	add	r3, r2
 8005b0c:	3360      	adds	r3, #96	; 0x60
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	461a      	mov	r2, r3
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f006 fce4 	bl	800c4e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005b18:	e008      	b.n	8005b2c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	212c      	movs	r1, #44	; 0x2c
 8005b20:	fb01 f303 	mul.w	r3, r1, r3
 8005b24:	4413      	add	r3, r2
 8005b26:	3360      	adds	r3, #96	; 0x60
 8005b28:	2202      	movs	r2, #2
 8005b2a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b38:	461a      	mov	r2, r3
 8005b3a:	2380      	movs	r3, #128	; 0x80
 8005b3c:	6093      	str	r3, [r2, #8]
}
 8005b3e:	e172      	b.n	8005e26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b56:	d11b      	bne.n	8005b90 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	212c      	movs	r1, #44	; 0x2c
 8005b5e:	fb01 f303 	mul.w	r3, r1, r3
 8005b62:	4413      	add	r3, r2
 8005b64:	3361      	adds	r3, #97	; 0x61
 8005b66:	2208      	movs	r2, #8
 8005b68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	b2d2      	uxtb	r2, r2
 8005b72:	4611      	mov	r1, r2
 8005b74:	4618      	mov	r0, r3
 8005b76:	f004 f8a0 	bl	8009cba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	015a      	lsls	r2, r3, #5
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b86:	461a      	mov	r2, r3
 8005b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b8c:	6093      	str	r3, [r2, #8]
}
 8005b8e:	e14a      	b.n	8005e26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	f040 813f 	bne.w	8005e26 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	212c      	movs	r1, #44	; 0x2c
 8005bae:	fb01 f303 	mul.w	r3, r1, r3
 8005bb2:	4413      	add	r3, r2
 8005bb4:	3361      	adds	r3, #97	; 0x61
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d17d      	bne.n	8005cb8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	212c      	movs	r1, #44	; 0x2c
 8005bc2:	fb01 f303 	mul.w	r3, r1, r3
 8005bc6:	4413      	add	r3, r2
 8005bc8:	3360      	adds	r3, #96	; 0x60
 8005bca:	2201      	movs	r2, #1
 8005bcc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	212c      	movs	r1, #44	; 0x2c
 8005bd4:	fb01 f303 	mul.w	r3, r1, r3
 8005bd8:	4413      	add	r3, r2
 8005bda:	333f      	adds	r3, #63	; 0x3f
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d00a      	beq.n	8005bf8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	212c      	movs	r1, #44	; 0x2c
 8005be8:	fb01 f303 	mul.w	r3, r1, r3
 8005bec:	4413      	add	r3, r2
 8005bee:	333f      	adds	r3, #63	; 0x3f
 8005bf0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005bf2:	2b03      	cmp	r3, #3
 8005bf4:	f040 8100 	bne.w	8005df8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d113      	bne.n	8005c28 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	212c      	movs	r1, #44	; 0x2c
 8005c06:	fb01 f303 	mul.w	r3, r1, r3
 8005c0a:	4413      	add	r3, r2
 8005c0c:	3355      	adds	r3, #85	; 0x55
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	f083 0301 	eor.w	r3, r3, #1
 8005c14:	b2d8      	uxtb	r0, r3
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	212c      	movs	r1, #44	; 0x2c
 8005c1c:	fb01 f303 	mul.w	r3, r1, r3
 8005c20:	4413      	add	r3, r2
 8005c22:	3355      	adds	r3, #85	; 0x55
 8005c24:	4602      	mov	r2, r0
 8005c26:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	f040 80e3 	bne.w	8005df8 <HCD_HC_OUT_IRQHandler+0x69c>
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	212c      	movs	r1, #44	; 0x2c
 8005c38:	fb01 f303 	mul.w	r3, r1, r3
 8005c3c:	4413      	add	r3, r2
 8005c3e:	334c      	adds	r3, #76	; 0x4c
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 80d8 	beq.w	8005df8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	212c      	movs	r1, #44	; 0x2c
 8005c4e:	fb01 f303 	mul.w	r3, r1, r3
 8005c52:	4413      	add	r3, r2
 8005c54:	334c      	adds	r3, #76	; 0x4c
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6879      	ldr	r1, [r7, #4]
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	202c      	movs	r0, #44	; 0x2c
 8005c5e:	fb00 f202 	mul.w	r2, r0, r2
 8005c62:	440a      	add	r2, r1
 8005c64:	3240      	adds	r2, #64	; 0x40
 8005c66:	8812      	ldrh	r2, [r2, #0]
 8005c68:	4413      	add	r3, r2
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	202c      	movs	r0, #44	; 0x2c
 8005c72:	fb00 f202 	mul.w	r2, r0, r2
 8005c76:	440a      	add	r2, r1
 8005c78:	3240      	adds	r2, #64	; 0x40
 8005c7a:	8812      	ldrh	r2, [r2, #0]
 8005c7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 80b5 	beq.w	8005df8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	212c      	movs	r1, #44	; 0x2c
 8005c94:	fb01 f303 	mul.w	r3, r1, r3
 8005c98:	4413      	add	r3, r2
 8005c9a:	3355      	adds	r3, #85	; 0x55
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	f083 0301 	eor.w	r3, r3, #1
 8005ca2:	b2d8      	uxtb	r0, r3
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	212c      	movs	r1, #44	; 0x2c
 8005caa:	fb01 f303 	mul.w	r3, r1, r3
 8005cae:	4413      	add	r3, r2
 8005cb0:	3355      	adds	r3, #85	; 0x55
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	701a      	strb	r2, [r3, #0]
 8005cb6:	e09f      	b.n	8005df8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	212c      	movs	r1, #44	; 0x2c
 8005cbe:	fb01 f303 	mul.w	r3, r1, r3
 8005cc2:	4413      	add	r3, r2
 8005cc4:	3361      	adds	r3, #97	; 0x61
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b03      	cmp	r3, #3
 8005cca:	d109      	bne.n	8005ce0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	212c      	movs	r1, #44	; 0x2c
 8005cd2:	fb01 f303 	mul.w	r3, r1, r3
 8005cd6:	4413      	add	r3, r2
 8005cd8:	3360      	adds	r3, #96	; 0x60
 8005cda:	2202      	movs	r2, #2
 8005cdc:	701a      	strb	r2, [r3, #0]
 8005cde:	e08b      	b.n	8005df8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	212c      	movs	r1, #44	; 0x2c
 8005ce6:	fb01 f303 	mul.w	r3, r1, r3
 8005cea:	4413      	add	r3, r2
 8005cec:	3361      	adds	r3, #97	; 0x61
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	2b04      	cmp	r3, #4
 8005cf2:	d109      	bne.n	8005d08 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	212c      	movs	r1, #44	; 0x2c
 8005cfa:	fb01 f303 	mul.w	r3, r1, r3
 8005cfe:	4413      	add	r3, r2
 8005d00:	3360      	adds	r3, #96	; 0x60
 8005d02:	2202      	movs	r2, #2
 8005d04:	701a      	strb	r2, [r3, #0]
 8005d06:	e077      	b.n	8005df8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	212c      	movs	r1, #44	; 0x2c
 8005d0e:	fb01 f303 	mul.w	r3, r1, r3
 8005d12:	4413      	add	r3, r2
 8005d14:	3361      	adds	r3, #97	; 0x61
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	2b05      	cmp	r3, #5
 8005d1a:	d109      	bne.n	8005d30 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	212c      	movs	r1, #44	; 0x2c
 8005d22:	fb01 f303 	mul.w	r3, r1, r3
 8005d26:	4413      	add	r3, r2
 8005d28:	3360      	adds	r3, #96	; 0x60
 8005d2a:	2205      	movs	r2, #5
 8005d2c:	701a      	strb	r2, [r3, #0]
 8005d2e:	e063      	b.n	8005df8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	212c      	movs	r1, #44	; 0x2c
 8005d36:	fb01 f303 	mul.w	r3, r1, r3
 8005d3a:	4413      	add	r3, r2
 8005d3c:	3361      	adds	r3, #97	; 0x61
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	2b06      	cmp	r3, #6
 8005d42:	d009      	beq.n	8005d58 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	212c      	movs	r1, #44	; 0x2c
 8005d4a:	fb01 f303 	mul.w	r3, r1, r3
 8005d4e:	4413      	add	r3, r2
 8005d50:	3361      	adds	r3, #97	; 0x61
 8005d52:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005d54:	2b08      	cmp	r3, #8
 8005d56:	d14f      	bne.n	8005df8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	212c      	movs	r1, #44	; 0x2c
 8005d5e:	fb01 f303 	mul.w	r3, r1, r3
 8005d62:	4413      	add	r3, r2
 8005d64:	335c      	adds	r3, #92	; 0x5c
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	1c5a      	adds	r2, r3, #1
 8005d6a:	6879      	ldr	r1, [r7, #4]
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	202c      	movs	r0, #44	; 0x2c
 8005d70:	fb00 f303 	mul.w	r3, r0, r3
 8005d74:	440b      	add	r3, r1
 8005d76:	335c      	adds	r3, #92	; 0x5c
 8005d78:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	212c      	movs	r1, #44	; 0x2c
 8005d80:	fb01 f303 	mul.w	r3, r1, r3
 8005d84:	4413      	add	r3, r2
 8005d86:	335c      	adds	r3, #92	; 0x5c
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d912      	bls.n	8005db4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	212c      	movs	r1, #44	; 0x2c
 8005d94:	fb01 f303 	mul.w	r3, r1, r3
 8005d98:	4413      	add	r3, r2
 8005d9a:	335c      	adds	r3, #92	; 0x5c
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	212c      	movs	r1, #44	; 0x2c
 8005da6:	fb01 f303 	mul.w	r3, r1, r3
 8005daa:	4413      	add	r3, r2
 8005dac:	3360      	adds	r3, #96	; 0x60
 8005dae:	2204      	movs	r2, #4
 8005db0:	701a      	strb	r2, [r3, #0]
 8005db2:	e021      	b.n	8005df8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	212c      	movs	r1, #44	; 0x2c
 8005dba:	fb01 f303 	mul.w	r3, r1, r3
 8005dbe:	4413      	add	r3, r2
 8005dc0:	3360      	adds	r3, #96	; 0x60
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ddc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005de4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df2:	461a      	mov	r2, r3
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e04:	461a      	mov	r2, r3
 8005e06:	2302      	movs	r3, #2
 8005e08:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	b2d9      	uxtb	r1, r3
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	202c      	movs	r0, #44	; 0x2c
 8005e14:	fb00 f303 	mul.w	r3, r0, r3
 8005e18:	4413      	add	r3, r2
 8005e1a:	3360      	adds	r3, #96	; 0x60
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f006 fb5d 	bl	800c4e0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005e26:	bf00      	nop
 8005e28:	3720      	adds	r7, #32
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b08a      	sub	sp, #40	; 0x28
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	f003 030f 	and.w	r3, r3, #15
 8005e4e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	0c5b      	lsrs	r3, r3, #17
 8005e54:	f003 030f 	and.w	r3, r3, #15
 8005e58:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	091b      	lsrs	r3, r3, #4
 8005e5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e62:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d004      	beq.n	8005e74 <HCD_RXQLVL_IRQHandler+0x46>
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2b05      	cmp	r3, #5
 8005e6e:	f000 80a9 	beq.w	8005fc4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005e72:	e0aa      	b.n	8005fca <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 80a6 	beq.w	8005fc8 <HCD_RXQLVL_IRQHandler+0x19a>
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	212c      	movs	r1, #44	; 0x2c
 8005e82:	fb01 f303 	mul.w	r3, r1, r3
 8005e86:	4413      	add	r3, r2
 8005e88:	3344      	adds	r3, #68	; 0x44
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 809b 	beq.w	8005fc8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	212c      	movs	r1, #44	; 0x2c
 8005e98:	fb01 f303 	mul.w	r3, r1, r3
 8005e9c:	4413      	add	r3, r2
 8005e9e:	3350      	adds	r3, #80	; 0x50
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	441a      	add	r2, r3
 8005ea6:	6879      	ldr	r1, [r7, #4]
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	202c      	movs	r0, #44	; 0x2c
 8005eac:	fb00 f303 	mul.w	r3, r0, r3
 8005eb0:	440b      	add	r3, r1
 8005eb2:	334c      	adds	r3, #76	; 0x4c
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d87a      	bhi.n	8005fb0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6818      	ldr	r0, [r3, #0]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	212c      	movs	r1, #44	; 0x2c
 8005ec4:	fb01 f303 	mul.w	r3, r1, r3
 8005ec8:	4413      	add	r3, r2
 8005eca:	3344      	adds	r3, #68	; 0x44
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	b292      	uxth	r2, r2
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	f003 fa48 	bl	8009368 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	212c      	movs	r1, #44	; 0x2c
 8005ede:	fb01 f303 	mul.w	r3, r1, r3
 8005ee2:	4413      	add	r3, r2
 8005ee4:	3344      	adds	r3, #68	; 0x44
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	441a      	add	r2, r3
 8005eec:	6879      	ldr	r1, [r7, #4]
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	202c      	movs	r0, #44	; 0x2c
 8005ef2:	fb00 f303 	mul.w	r3, r0, r3
 8005ef6:	440b      	add	r3, r1
 8005ef8:	3344      	adds	r3, #68	; 0x44
 8005efa:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	212c      	movs	r1, #44	; 0x2c
 8005f02:	fb01 f303 	mul.w	r3, r1, r3
 8005f06:	4413      	add	r3, r2
 8005f08:	3350      	adds	r3, #80	; 0x50
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	441a      	add	r2, r3
 8005f10:	6879      	ldr	r1, [r7, #4]
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	202c      	movs	r0, #44	; 0x2c
 8005f16:	fb00 f303 	mul.w	r3, r0, r3
 8005f1a:	440b      	add	r3, r1
 8005f1c:	3350      	adds	r3, #80	; 0x50
 8005f1e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	0cdb      	lsrs	r3, r3, #19
 8005f30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f34:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	212c      	movs	r1, #44	; 0x2c
 8005f3c:	fb01 f303 	mul.w	r3, r1, r3
 8005f40:	4413      	add	r3, r2
 8005f42:	3340      	adds	r3, #64	; 0x40
 8005f44:	881b      	ldrh	r3, [r3, #0]
 8005f46:	461a      	mov	r2, r3
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d13c      	bne.n	8005fc8 <HCD_RXQLVL_IRQHandler+0x19a>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d039      	beq.n	8005fc8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f6a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f72:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f80:	461a      	mov	r2, r3
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	212c      	movs	r1, #44	; 0x2c
 8005f8c:	fb01 f303 	mul.w	r3, r1, r3
 8005f90:	4413      	add	r3, r2
 8005f92:	3354      	adds	r3, #84	; 0x54
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	f083 0301 	eor.w	r3, r3, #1
 8005f9a:	b2d8      	uxtb	r0, r3
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	212c      	movs	r1, #44	; 0x2c
 8005fa2:	fb01 f303 	mul.w	r3, r1, r3
 8005fa6:	4413      	add	r3, r2
 8005fa8:	3354      	adds	r3, #84	; 0x54
 8005faa:	4602      	mov	r2, r0
 8005fac:	701a      	strb	r2, [r3, #0]
      break;
 8005fae:	e00b      	b.n	8005fc8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	212c      	movs	r1, #44	; 0x2c
 8005fb6:	fb01 f303 	mul.w	r3, r1, r3
 8005fba:	4413      	add	r3, r2
 8005fbc:	3360      	adds	r3, #96	; 0x60
 8005fbe:	2204      	movs	r2, #4
 8005fc0:	701a      	strb	r2, [r3, #0]
      break;
 8005fc2:	e001      	b.n	8005fc8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005fc4:	bf00      	nop
 8005fc6:	e000      	b.n	8005fca <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005fc8:	bf00      	nop
  }
}
 8005fca:	bf00      	nop
 8005fcc:	3728      	adds	r7, #40	; 0x28
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b086      	sub	sp, #24
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ffe:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b02      	cmp	r3, #2
 8006008:	d10b      	bne.n	8006022 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	2b01      	cmp	r3, #1
 8006012:	d102      	bne.n	800601a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f006 fa47 	bl	800c4a8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f043 0302 	orr.w	r3, r3, #2
 8006020:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f003 0308 	and.w	r3, r3, #8
 8006028:	2b08      	cmp	r3, #8
 800602a:	d132      	bne.n	8006092 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f043 0308 	orr.w	r3, r3, #8
 8006032:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b04      	cmp	r3, #4
 800603c:	d126      	bne.n	800608c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	2b02      	cmp	r3, #2
 8006044:	d113      	bne.n	800606e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800604c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006050:	d106      	bne.n	8006060 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2102      	movs	r1, #2
 8006058:	4618      	mov	r0, r3
 800605a:	f003 faf3 	bl	8009644 <USB_InitFSLSPClkSel>
 800605e:	e011      	b.n	8006084 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2101      	movs	r1, #1
 8006066:	4618      	mov	r0, r3
 8006068:	f003 faec 	bl	8009644 <USB_InitFSLSPClkSel>
 800606c:	e00a      	b.n	8006084 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d106      	bne.n	8006084 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800607c:	461a      	mov	r2, r3
 800607e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006082:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f006 fa39 	bl	800c4fc <HAL_HCD_PortEnabled_Callback>
 800608a:	e002      	b.n	8006092 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f006 fa43 	bl	800c518 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f003 0320 	and.w	r3, r3, #32
 8006098:	2b20      	cmp	r3, #32
 800609a:	d103      	bne.n	80060a4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f043 0320 	orr.w	r3, r3, #32
 80060a2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80060aa:	461a      	mov	r2, r3
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	6013      	str	r3, [r2, #0]
}
 80060b0:	bf00      	nop
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e267      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d075      	beq.n	80061c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80060d6:	4b88      	ldr	r3, [pc, #544]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 030c 	and.w	r3, r3, #12
 80060de:	2b04      	cmp	r3, #4
 80060e0:	d00c      	beq.n	80060fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060e2:	4b85      	ldr	r3, [pc, #532]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80060ea:	2b08      	cmp	r3, #8
 80060ec:	d112      	bne.n	8006114 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060ee:	4b82      	ldr	r3, [pc, #520]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060fa:	d10b      	bne.n	8006114 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060fc:	4b7e      	ldr	r3, [pc, #504]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d05b      	beq.n	80061c0 <HAL_RCC_OscConfig+0x108>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d157      	bne.n	80061c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e242      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800611c:	d106      	bne.n	800612c <HAL_RCC_OscConfig+0x74>
 800611e:	4b76      	ldr	r3, [pc, #472]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a75      	ldr	r2, [pc, #468]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 8006124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006128:	6013      	str	r3, [r2, #0]
 800612a:	e01d      	b.n	8006168 <HAL_RCC_OscConfig+0xb0>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006134:	d10c      	bne.n	8006150 <HAL_RCC_OscConfig+0x98>
 8006136:	4b70      	ldr	r3, [pc, #448]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a6f      	ldr	r2, [pc, #444]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 800613c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006140:	6013      	str	r3, [r2, #0]
 8006142:	4b6d      	ldr	r3, [pc, #436]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a6c      	ldr	r2, [pc, #432]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 8006148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	e00b      	b.n	8006168 <HAL_RCC_OscConfig+0xb0>
 8006150:	4b69      	ldr	r3, [pc, #420]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a68      	ldr	r2, [pc, #416]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 8006156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800615a:	6013      	str	r3, [r2, #0]
 800615c:	4b66      	ldr	r3, [pc, #408]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a65      	ldr	r2, [pc, #404]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 8006162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d013      	beq.n	8006198 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006170:	f7fd fc9e 	bl	8003ab0 <HAL_GetTick>
 8006174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006176:	e008      	b.n	800618a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006178:	f7fd fc9a 	bl	8003ab0 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b64      	cmp	r3, #100	; 0x64
 8006184:	d901      	bls.n	800618a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e207      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800618a:	4b5b      	ldr	r3, [pc, #364]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d0f0      	beq.n	8006178 <HAL_RCC_OscConfig+0xc0>
 8006196:	e014      	b.n	80061c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006198:	f7fd fc8a 	bl	8003ab0 <HAL_GetTick>
 800619c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800619e:	e008      	b.n	80061b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061a0:	f7fd fc86 	bl	8003ab0 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b64      	cmp	r3, #100	; 0x64
 80061ac:	d901      	bls.n	80061b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e1f3      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061b2:	4b51      	ldr	r3, [pc, #324]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1f0      	bne.n	80061a0 <HAL_RCC_OscConfig+0xe8>
 80061be:	e000      	b.n	80061c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0302 	and.w	r3, r3, #2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d063      	beq.n	8006296 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80061ce:	4b4a      	ldr	r3, [pc, #296]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f003 030c 	and.w	r3, r3, #12
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00b      	beq.n	80061f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061da:	4b47      	ldr	r3, [pc, #284]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80061e2:	2b08      	cmp	r3, #8
 80061e4:	d11c      	bne.n	8006220 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061e6:	4b44      	ldr	r3, [pc, #272]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d116      	bne.n	8006220 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061f2:	4b41      	ldr	r3, [pc, #260]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d005      	beq.n	800620a <HAL_RCC_OscConfig+0x152>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d001      	beq.n	800620a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e1c7      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800620a:	4b3b      	ldr	r3, [pc, #236]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	00db      	lsls	r3, r3, #3
 8006218:	4937      	ldr	r1, [pc, #220]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 800621a:	4313      	orrs	r3, r2
 800621c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800621e:	e03a      	b.n	8006296 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d020      	beq.n	800626a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006228:	4b34      	ldr	r3, [pc, #208]	; (80062fc <HAL_RCC_OscConfig+0x244>)
 800622a:	2201      	movs	r2, #1
 800622c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800622e:	f7fd fc3f 	bl	8003ab0 <HAL_GetTick>
 8006232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006234:	e008      	b.n	8006248 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006236:	f7fd fc3b 	bl	8003ab0 <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	2b02      	cmp	r3, #2
 8006242:	d901      	bls.n	8006248 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e1a8      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006248:	4b2b      	ldr	r3, [pc, #172]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0302 	and.w	r3, r3, #2
 8006250:	2b00      	cmp	r3, #0
 8006252:	d0f0      	beq.n	8006236 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006254:	4b28      	ldr	r3, [pc, #160]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	00db      	lsls	r3, r3, #3
 8006262:	4925      	ldr	r1, [pc, #148]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 8006264:	4313      	orrs	r3, r2
 8006266:	600b      	str	r3, [r1, #0]
 8006268:	e015      	b.n	8006296 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800626a:	4b24      	ldr	r3, [pc, #144]	; (80062fc <HAL_RCC_OscConfig+0x244>)
 800626c:	2200      	movs	r2, #0
 800626e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006270:	f7fd fc1e 	bl	8003ab0 <HAL_GetTick>
 8006274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006276:	e008      	b.n	800628a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006278:	f7fd fc1a 	bl	8003ab0 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e187      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800628a:	4b1b      	ldr	r3, [pc, #108]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1f0      	bne.n	8006278 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0308 	and.w	r3, r3, #8
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d036      	beq.n	8006310 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d016      	beq.n	80062d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062aa:	4b15      	ldr	r3, [pc, #84]	; (8006300 <HAL_RCC_OscConfig+0x248>)
 80062ac:	2201      	movs	r2, #1
 80062ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b0:	f7fd fbfe 	bl	8003ab0 <HAL_GetTick>
 80062b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062b6:	e008      	b.n	80062ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062b8:	f7fd fbfa 	bl	8003ab0 <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d901      	bls.n	80062ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e167      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062ca:	4b0b      	ldr	r3, [pc, #44]	; (80062f8 <HAL_RCC_OscConfig+0x240>)
 80062cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d0f0      	beq.n	80062b8 <HAL_RCC_OscConfig+0x200>
 80062d6:	e01b      	b.n	8006310 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062d8:	4b09      	ldr	r3, [pc, #36]	; (8006300 <HAL_RCC_OscConfig+0x248>)
 80062da:	2200      	movs	r2, #0
 80062dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062de:	f7fd fbe7 	bl	8003ab0 <HAL_GetTick>
 80062e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062e4:	e00e      	b.n	8006304 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062e6:	f7fd fbe3 	bl	8003ab0 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d907      	bls.n	8006304 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e150      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
 80062f8:	40023800 	.word	0x40023800
 80062fc:	42470000 	.word	0x42470000
 8006300:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006304:	4b88      	ldr	r3, [pc, #544]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 8006306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1ea      	bne.n	80062e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0304 	and.w	r3, r3, #4
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 8097 	beq.w	800644c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800631e:	2300      	movs	r3, #0
 8006320:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006322:	4b81      	ldr	r3, [pc, #516]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 8006324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10f      	bne.n	800634e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800632e:	2300      	movs	r3, #0
 8006330:	60bb      	str	r3, [r7, #8]
 8006332:	4b7d      	ldr	r3, [pc, #500]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 8006334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006336:	4a7c      	ldr	r2, [pc, #496]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 8006338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800633c:	6413      	str	r3, [r2, #64]	; 0x40
 800633e:	4b7a      	ldr	r3, [pc, #488]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 8006340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006346:	60bb      	str	r3, [r7, #8]
 8006348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800634a:	2301      	movs	r3, #1
 800634c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800634e:	4b77      	ldr	r3, [pc, #476]	; (800652c <HAL_RCC_OscConfig+0x474>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006356:	2b00      	cmp	r3, #0
 8006358:	d118      	bne.n	800638c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800635a:	4b74      	ldr	r3, [pc, #464]	; (800652c <HAL_RCC_OscConfig+0x474>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a73      	ldr	r2, [pc, #460]	; (800652c <HAL_RCC_OscConfig+0x474>)
 8006360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006366:	f7fd fba3 	bl	8003ab0 <HAL_GetTick>
 800636a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800636c:	e008      	b.n	8006380 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800636e:	f7fd fb9f 	bl	8003ab0 <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	2b02      	cmp	r3, #2
 800637a:	d901      	bls.n	8006380 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e10c      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006380:	4b6a      	ldr	r3, [pc, #424]	; (800652c <HAL_RCC_OscConfig+0x474>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006388:	2b00      	cmp	r3, #0
 800638a:	d0f0      	beq.n	800636e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d106      	bne.n	80063a2 <HAL_RCC_OscConfig+0x2ea>
 8006394:	4b64      	ldr	r3, [pc, #400]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 8006396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006398:	4a63      	ldr	r2, [pc, #396]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 800639a:	f043 0301 	orr.w	r3, r3, #1
 800639e:	6713      	str	r3, [r2, #112]	; 0x70
 80063a0:	e01c      	b.n	80063dc <HAL_RCC_OscConfig+0x324>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	2b05      	cmp	r3, #5
 80063a8:	d10c      	bne.n	80063c4 <HAL_RCC_OscConfig+0x30c>
 80063aa:	4b5f      	ldr	r3, [pc, #380]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 80063ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ae:	4a5e      	ldr	r2, [pc, #376]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 80063b0:	f043 0304 	orr.w	r3, r3, #4
 80063b4:	6713      	str	r3, [r2, #112]	; 0x70
 80063b6:	4b5c      	ldr	r3, [pc, #368]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 80063b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ba:	4a5b      	ldr	r2, [pc, #364]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 80063bc:	f043 0301 	orr.w	r3, r3, #1
 80063c0:	6713      	str	r3, [r2, #112]	; 0x70
 80063c2:	e00b      	b.n	80063dc <HAL_RCC_OscConfig+0x324>
 80063c4:	4b58      	ldr	r3, [pc, #352]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 80063c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c8:	4a57      	ldr	r2, [pc, #348]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 80063ca:	f023 0301 	bic.w	r3, r3, #1
 80063ce:	6713      	str	r3, [r2, #112]	; 0x70
 80063d0:	4b55      	ldr	r3, [pc, #340]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 80063d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d4:	4a54      	ldr	r2, [pc, #336]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 80063d6:	f023 0304 	bic.w	r3, r3, #4
 80063da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d015      	beq.n	8006410 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063e4:	f7fd fb64 	bl	8003ab0 <HAL_GetTick>
 80063e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063ea:	e00a      	b.n	8006402 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063ec:	f7fd fb60 	bl	8003ab0 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e0cb      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006402:	4b49      	ldr	r3, [pc, #292]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 8006404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0ee      	beq.n	80063ec <HAL_RCC_OscConfig+0x334>
 800640e:	e014      	b.n	800643a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006410:	f7fd fb4e 	bl	8003ab0 <HAL_GetTick>
 8006414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006416:	e00a      	b.n	800642e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006418:	f7fd fb4a 	bl	8003ab0 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	f241 3288 	movw	r2, #5000	; 0x1388
 8006426:	4293      	cmp	r3, r2
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e0b5      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800642e:	4b3e      	ldr	r3, [pc, #248]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 8006430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1ee      	bne.n	8006418 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800643a:	7dfb      	ldrb	r3, [r7, #23]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d105      	bne.n	800644c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006440:	4b39      	ldr	r3, [pc, #228]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 8006442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006444:	4a38      	ldr	r2, [pc, #224]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 8006446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800644a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 80a1 	beq.w	8006598 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006456:	4b34      	ldr	r3, [pc, #208]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 030c 	and.w	r3, r3, #12
 800645e:	2b08      	cmp	r3, #8
 8006460:	d05c      	beq.n	800651c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	2b02      	cmp	r3, #2
 8006468:	d141      	bne.n	80064ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800646a:	4b31      	ldr	r3, [pc, #196]	; (8006530 <HAL_RCC_OscConfig+0x478>)
 800646c:	2200      	movs	r2, #0
 800646e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006470:	f7fd fb1e 	bl	8003ab0 <HAL_GetTick>
 8006474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006476:	e008      	b.n	800648a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006478:	f7fd fb1a 	bl	8003ab0 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e087      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800648a:	4b27      	ldr	r3, [pc, #156]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1f0      	bne.n	8006478 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	69da      	ldr	r2, [r3, #28]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	431a      	orrs	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a4:	019b      	lsls	r3, r3, #6
 80064a6:	431a      	orrs	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ac:	085b      	lsrs	r3, r3, #1
 80064ae:	3b01      	subs	r3, #1
 80064b0:	041b      	lsls	r3, r3, #16
 80064b2:	431a      	orrs	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b8:	061b      	lsls	r3, r3, #24
 80064ba:	491b      	ldr	r1, [pc, #108]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064c0:	4b1b      	ldr	r3, [pc, #108]	; (8006530 <HAL_RCC_OscConfig+0x478>)
 80064c2:	2201      	movs	r2, #1
 80064c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064c6:	f7fd faf3 	bl	8003ab0 <HAL_GetTick>
 80064ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064cc:	e008      	b.n	80064e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064ce:	f7fd faef 	bl	8003ab0 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d901      	bls.n	80064e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e05c      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064e0:	4b11      	ldr	r3, [pc, #68]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d0f0      	beq.n	80064ce <HAL_RCC_OscConfig+0x416>
 80064ec:	e054      	b.n	8006598 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064ee:	4b10      	ldr	r3, [pc, #64]	; (8006530 <HAL_RCC_OscConfig+0x478>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064f4:	f7fd fadc 	bl	8003ab0 <HAL_GetTick>
 80064f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064fa:	e008      	b.n	800650e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064fc:	f7fd fad8 	bl	8003ab0 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b02      	cmp	r3, #2
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e045      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800650e:	4b06      	ldr	r3, [pc, #24]	; (8006528 <HAL_RCC_OscConfig+0x470>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1f0      	bne.n	80064fc <HAL_RCC_OscConfig+0x444>
 800651a:	e03d      	b.n	8006598 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d107      	bne.n	8006534 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e038      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
 8006528:	40023800 	.word	0x40023800
 800652c:	40007000 	.word	0x40007000
 8006530:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006534:	4b1b      	ldr	r3, [pc, #108]	; (80065a4 <HAL_RCC_OscConfig+0x4ec>)
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d028      	beq.n	8006594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800654c:	429a      	cmp	r2, r3
 800654e:	d121      	bne.n	8006594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800655a:	429a      	cmp	r2, r3
 800655c:	d11a      	bne.n	8006594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006564:	4013      	ands	r3, r2
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800656a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800656c:	4293      	cmp	r3, r2
 800656e:	d111      	bne.n	8006594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657a:	085b      	lsrs	r3, r3, #1
 800657c:	3b01      	subs	r3, #1
 800657e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006580:	429a      	cmp	r2, r3
 8006582:	d107      	bne.n	8006594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006590:	429a      	cmp	r2, r3
 8006592:	d001      	beq.n	8006598 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e000      	b.n	800659a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3718      	adds	r7, #24
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	40023800 	.word	0x40023800

080065a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e0cc      	b.n	8006756 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065bc:	4b68      	ldr	r3, [pc, #416]	; (8006760 <HAL_RCC_ClockConfig+0x1b8>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0307 	and.w	r3, r3, #7
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d90c      	bls.n	80065e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ca:	4b65      	ldr	r3, [pc, #404]	; (8006760 <HAL_RCC_ClockConfig+0x1b8>)
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	b2d2      	uxtb	r2, r2
 80065d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065d2:	4b63      	ldr	r3, [pc, #396]	; (8006760 <HAL_RCC_ClockConfig+0x1b8>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0307 	and.w	r3, r3, #7
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d001      	beq.n	80065e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e0b8      	b.n	8006756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0302 	and.w	r3, r3, #2
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d020      	beq.n	8006632 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0304 	and.w	r3, r3, #4
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d005      	beq.n	8006608 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065fc:	4b59      	ldr	r3, [pc, #356]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	4a58      	ldr	r2, [pc, #352]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 8006602:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006606:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0308 	and.w	r3, r3, #8
 8006610:	2b00      	cmp	r3, #0
 8006612:	d005      	beq.n	8006620 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006614:	4b53      	ldr	r3, [pc, #332]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	4a52      	ldr	r2, [pc, #328]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 800661a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800661e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006620:	4b50      	ldr	r3, [pc, #320]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	494d      	ldr	r1, [pc, #308]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 800662e:	4313      	orrs	r3, r2
 8006630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b00      	cmp	r3, #0
 800663c:	d044      	beq.n	80066c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d107      	bne.n	8006656 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006646:	4b47      	ldr	r3, [pc, #284]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d119      	bne.n	8006686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e07f      	b.n	8006756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	2b02      	cmp	r3, #2
 800665c:	d003      	beq.n	8006666 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006662:	2b03      	cmp	r3, #3
 8006664:	d107      	bne.n	8006676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006666:	4b3f      	ldr	r3, [pc, #252]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d109      	bne.n	8006686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e06f      	b.n	8006756 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006676:	4b3b      	ldr	r3, [pc, #236]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d101      	bne.n	8006686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e067      	b.n	8006756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006686:	4b37      	ldr	r3, [pc, #220]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f023 0203 	bic.w	r2, r3, #3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	4934      	ldr	r1, [pc, #208]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 8006694:	4313      	orrs	r3, r2
 8006696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006698:	f7fd fa0a 	bl	8003ab0 <HAL_GetTick>
 800669c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800669e:	e00a      	b.n	80066b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066a0:	f7fd fa06 	bl	8003ab0 <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d901      	bls.n	80066b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e04f      	b.n	8006756 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066b6:	4b2b      	ldr	r3, [pc, #172]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f003 020c 	and.w	r2, r3, #12
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d1eb      	bne.n	80066a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066c8:	4b25      	ldr	r3, [pc, #148]	; (8006760 <HAL_RCC_ClockConfig+0x1b8>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0307 	and.w	r3, r3, #7
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d20c      	bcs.n	80066f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066d6:	4b22      	ldr	r3, [pc, #136]	; (8006760 <HAL_RCC_ClockConfig+0x1b8>)
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	b2d2      	uxtb	r2, r2
 80066dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066de:	4b20      	ldr	r3, [pc, #128]	; (8006760 <HAL_RCC_ClockConfig+0x1b8>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d001      	beq.n	80066f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e032      	b.n	8006756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0304 	and.w	r3, r3, #4
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d008      	beq.n	800670e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066fc:	4b19      	ldr	r3, [pc, #100]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	4916      	ldr	r1, [pc, #88]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 800670a:	4313      	orrs	r3, r2
 800670c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0308 	and.w	r3, r3, #8
 8006716:	2b00      	cmp	r3, #0
 8006718:	d009      	beq.n	800672e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800671a:	4b12      	ldr	r3, [pc, #72]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	00db      	lsls	r3, r3, #3
 8006728:	490e      	ldr	r1, [pc, #56]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 800672a:	4313      	orrs	r3, r2
 800672c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800672e:	f000 f821 	bl	8006774 <HAL_RCC_GetSysClockFreq>
 8006732:	4602      	mov	r2, r0
 8006734:	4b0b      	ldr	r3, [pc, #44]	; (8006764 <HAL_RCC_ClockConfig+0x1bc>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	091b      	lsrs	r3, r3, #4
 800673a:	f003 030f 	and.w	r3, r3, #15
 800673e:	490a      	ldr	r1, [pc, #40]	; (8006768 <HAL_RCC_ClockConfig+0x1c0>)
 8006740:	5ccb      	ldrb	r3, [r1, r3]
 8006742:	fa22 f303 	lsr.w	r3, r2, r3
 8006746:	4a09      	ldr	r2, [pc, #36]	; (800676c <HAL_RCC_ClockConfig+0x1c4>)
 8006748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800674a:	4b09      	ldr	r3, [pc, #36]	; (8006770 <HAL_RCC_ClockConfig+0x1c8>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4618      	mov	r0, r3
 8006750:	f7fd f96a 	bl	8003a28 <HAL_InitTick>

  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	40023c00 	.word	0x40023c00
 8006764:	40023800 	.word	0x40023800
 8006768:	0800d2f4 	.word	0x0800d2f4
 800676c:	20000004 	.word	0x20000004
 8006770:	20000008 	.word	0x20000008

08006774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006778:	b094      	sub	sp, #80	; 0x50
 800677a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800677c:	2300      	movs	r3, #0
 800677e:	647b      	str	r3, [r7, #68]	; 0x44
 8006780:	2300      	movs	r3, #0
 8006782:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006784:	2300      	movs	r3, #0
 8006786:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006788:	2300      	movs	r3, #0
 800678a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800678c:	4b79      	ldr	r3, [pc, #484]	; (8006974 <HAL_RCC_GetSysClockFreq+0x200>)
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f003 030c 	and.w	r3, r3, #12
 8006794:	2b08      	cmp	r3, #8
 8006796:	d00d      	beq.n	80067b4 <HAL_RCC_GetSysClockFreq+0x40>
 8006798:	2b08      	cmp	r3, #8
 800679a:	f200 80e1 	bhi.w	8006960 <HAL_RCC_GetSysClockFreq+0x1ec>
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d002      	beq.n	80067a8 <HAL_RCC_GetSysClockFreq+0x34>
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	d003      	beq.n	80067ae <HAL_RCC_GetSysClockFreq+0x3a>
 80067a6:	e0db      	b.n	8006960 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067a8:	4b73      	ldr	r3, [pc, #460]	; (8006978 <HAL_RCC_GetSysClockFreq+0x204>)
 80067aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80067ac:	e0db      	b.n	8006966 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067ae:	4b73      	ldr	r3, [pc, #460]	; (800697c <HAL_RCC_GetSysClockFreq+0x208>)
 80067b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80067b2:	e0d8      	b.n	8006966 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067b4:	4b6f      	ldr	r3, [pc, #444]	; (8006974 <HAL_RCC_GetSysClockFreq+0x200>)
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067be:	4b6d      	ldr	r3, [pc, #436]	; (8006974 <HAL_RCC_GetSysClockFreq+0x200>)
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d063      	beq.n	8006892 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067ca:	4b6a      	ldr	r3, [pc, #424]	; (8006974 <HAL_RCC_GetSysClockFreq+0x200>)
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	099b      	lsrs	r3, r3, #6
 80067d0:	2200      	movs	r2, #0
 80067d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80067d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80067d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067dc:	633b      	str	r3, [r7, #48]	; 0x30
 80067de:	2300      	movs	r3, #0
 80067e0:	637b      	str	r3, [r7, #52]	; 0x34
 80067e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80067e6:	4622      	mov	r2, r4
 80067e8:	462b      	mov	r3, r5
 80067ea:	f04f 0000 	mov.w	r0, #0
 80067ee:	f04f 0100 	mov.w	r1, #0
 80067f2:	0159      	lsls	r1, r3, #5
 80067f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067f8:	0150      	lsls	r0, r2, #5
 80067fa:	4602      	mov	r2, r0
 80067fc:	460b      	mov	r3, r1
 80067fe:	4621      	mov	r1, r4
 8006800:	1a51      	subs	r1, r2, r1
 8006802:	6139      	str	r1, [r7, #16]
 8006804:	4629      	mov	r1, r5
 8006806:	eb63 0301 	sbc.w	r3, r3, r1
 800680a:	617b      	str	r3, [r7, #20]
 800680c:	f04f 0200 	mov.w	r2, #0
 8006810:	f04f 0300 	mov.w	r3, #0
 8006814:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006818:	4659      	mov	r1, fp
 800681a:	018b      	lsls	r3, r1, #6
 800681c:	4651      	mov	r1, sl
 800681e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006822:	4651      	mov	r1, sl
 8006824:	018a      	lsls	r2, r1, #6
 8006826:	4651      	mov	r1, sl
 8006828:	ebb2 0801 	subs.w	r8, r2, r1
 800682c:	4659      	mov	r1, fp
 800682e:	eb63 0901 	sbc.w	r9, r3, r1
 8006832:	f04f 0200 	mov.w	r2, #0
 8006836:	f04f 0300 	mov.w	r3, #0
 800683a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800683e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006842:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006846:	4690      	mov	r8, r2
 8006848:	4699      	mov	r9, r3
 800684a:	4623      	mov	r3, r4
 800684c:	eb18 0303 	adds.w	r3, r8, r3
 8006850:	60bb      	str	r3, [r7, #8]
 8006852:	462b      	mov	r3, r5
 8006854:	eb49 0303 	adc.w	r3, r9, r3
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	f04f 0200 	mov.w	r2, #0
 800685e:	f04f 0300 	mov.w	r3, #0
 8006862:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006866:	4629      	mov	r1, r5
 8006868:	024b      	lsls	r3, r1, #9
 800686a:	4621      	mov	r1, r4
 800686c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006870:	4621      	mov	r1, r4
 8006872:	024a      	lsls	r2, r1, #9
 8006874:	4610      	mov	r0, r2
 8006876:	4619      	mov	r1, r3
 8006878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800687a:	2200      	movs	r2, #0
 800687c:	62bb      	str	r3, [r7, #40]	; 0x28
 800687e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006880:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006884:	f7fa f802 	bl	800088c <__aeabi_uldivmod>
 8006888:	4602      	mov	r2, r0
 800688a:	460b      	mov	r3, r1
 800688c:	4613      	mov	r3, r2
 800688e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006890:	e058      	b.n	8006944 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006892:	4b38      	ldr	r3, [pc, #224]	; (8006974 <HAL_RCC_GetSysClockFreq+0x200>)
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	099b      	lsrs	r3, r3, #6
 8006898:	2200      	movs	r2, #0
 800689a:	4618      	mov	r0, r3
 800689c:	4611      	mov	r1, r2
 800689e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80068a2:	623b      	str	r3, [r7, #32]
 80068a4:	2300      	movs	r3, #0
 80068a6:	627b      	str	r3, [r7, #36]	; 0x24
 80068a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80068ac:	4642      	mov	r2, r8
 80068ae:	464b      	mov	r3, r9
 80068b0:	f04f 0000 	mov.w	r0, #0
 80068b4:	f04f 0100 	mov.w	r1, #0
 80068b8:	0159      	lsls	r1, r3, #5
 80068ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068be:	0150      	lsls	r0, r2, #5
 80068c0:	4602      	mov	r2, r0
 80068c2:	460b      	mov	r3, r1
 80068c4:	4641      	mov	r1, r8
 80068c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80068ca:	4649      	mov	r1, r9
 80068cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80068d0:	f04f 0200 	mov.w	r2, #0
 80068d4:	f04f 0300 	mov.w	r3, #0
 80068d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80068dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80068e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80068e4:	ebb2 040a 	subs.w	r4, r2, sl
 80068e8:	eb63 050b 	sbc.w	r5, r3, fp
 80068ec:	f04f 0200 	mov.w	r2, #0
 80068f0:	f04f 0300 	mov.w	r3, #0
 80068f4:	00eb      	lsls	r3, r5, #3
 80068f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068fa:	00e2      	lsls	r2, r4, #3
 80068fc:	4614      	mov	r4, r2
 80068fe:	461d      	mov	r5, r3
 8006900:	4643      	mov	r3, r8
 8006902:	18e3      	adds	r3, r4, r3
 8006904:	603b      	str	r3, [r7, #0]
 8006906:	464b      	mov	r3, r9
 8006908:	eb45 0303 	adc.w	r3, r5, r3
 800690c:	607b      	str	r3, [r7, #4]
 800690e:	f04f 0200 	mov.w	r2, #0
 8006912:	f04f 0300 	mov.w	r3, #0
 8006916:	e9d7 4500 	ldrd	r4, r5, [r7]
 800691a:	4629      	mov	r1, r5
 800691c:	028b      	lsls	r3, r1, #10
 800691e:	4621      	mov	r1, r4
 8006920:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006924:	4621      	mov	r1, r4
 8006926:	028a      	lsls	r2, r1, #10
 8006928:	4610      	mov	r0, r2
 800692a:	4619      	mov	r1, r3
 800692c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800692e:	2200      	movs	r2, #0
 8006930:	61bb      	str	r3, [r7, #24]
 8006932:	61fa      	str	r2, [r7, #28]
 8006934:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006938:	f7f9 ffa8 	bl	800088c <__aeabi_uldivmod>
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	4613      	mov	r3, r2
 8006942:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006944:	4b0b      	ldr	r3, [pc, #44]	; (8006974 <HAL_RCC_GetSysClockFreq+0x200>)
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	0c1b      	lsrs	r3, r3, #16
 800694a:	f003 0303 	and.w	r3, r3, #3
 800694e:	3301      	adds	r3, #1
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006954:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006958:	fbb2 f3f3 	udiv	r3, r2, r3
 800695c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800695e:	e002      	b.n	8006966 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006960:	4b05      	ldr	r3, [pc, #20]	; (8006978 <HAL_RCC_GetSysClockFreq+0x204>)
 8006962:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006968:	4618      	mov	r0, r3
 800696a:	3750      	adds	r7, #80	; 0x50
 800696c:	46bd      	mov	sp, r7
 800696e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006972:	bf00      	nop
 8006974:	40023800 	.word	0x40023800
 8006978:	00f42400 	.word	0x00f42400
 800697c:	007a1200 	.word	0x007a1200

08006980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006984:	4b03      	ldr	r3, [pc, #12]	; (8006994 <HAL_RCC_GetHCLKFreq+0x14>)
 8006986:	681b      	ldr	r3, [r3, #0]
}
 8006988:	4618      	mov	r0, r3
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	20000004 	.word	0x20000004

08006998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800699c:	f7ff fff0 	bl	8006980 <HAL_RCC_GetHCLKFreq>
 80069a0:	4602      	mov	r2, r0
 80069a2:	4b05      	ldr	r3, [pc, #20]	; (80069b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	0a9b      	lsrs	r3, r3, #10
 80069a8:	f003 0307 	and.w	r3, r3, #7
 80069ac:	4903      	ldr	r1, [pc, #12]	; (80069bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80069ae:	5ccb      	ldrb	r3, [r1, r3]
 80069b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	40023800 	.word	0x40023800
 80069bc:	0800d304 	.word	0x0800d304

080069c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80069c4:	f7ff ffdc 	bl	8006980 <HAL_RCC_GetHCLKFreq>
 80069c8:	4602      	mov	r2, r0
 80069ca:	4b05      	ldr	r3, [pc, #20]	; (80069e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	0b5b      	lsrs	r3, r3, #13
 80069d0:	f003 0307 	and.w	r3, r3, #7
 80069d4:	4903      	ldr	r1, [pc, #12]	; (80069e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069d6:	5ccb      	ldrb	r3, [r1, r3]
 80069d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069dc:	4618      	mov	r0, r3
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	40023800 	.word	0x40023800
 80069e4:	0800d304 	.word	0x0800d304

080069e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e07b      	b.n	8006af2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d108      	bne.n	8006a14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a0a:	d009      	beq.n	8006a20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	61da      	str	r2, [r3, #28]
 8006a12:	e005      	b.n	8006a20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d106      	bne.n	8006a40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7fc fa14 	bl	8002e68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2202      	movs	r2, #2
 8006a44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a68:	431a      	orrs	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a72:	431a      	orrs	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	431a      	orrs	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	431a      	orrs	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	699b      	ldr	r3, [r3, #24]
 8006a8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a90:	431a      	orrs	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a9a:	431a      	orrs	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa4:	ea42 0103 	orr.w	r1, r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	0c1b      	lsrs	r3, r3, #16
 8006abe:	f003 0104 	and.w	r1, r3, #4
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac6:	f003 0210 	and.w	r2, r3, #16
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	69da      	ldr	r2, [r3, #28]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ae0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3708      	adds	r7, #8
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b08c      	sub	sp, #48	; 0x30
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	60f8      	str	r0, [r7, #12]
 8006b02:	60b9      	str	r1, [r7, #8]
 8006b04:	607a      	str	r2, [r7, #4]
 8006b06:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d101      	bne.n	8006b20 <HAL_SPI_TransmitReceive+0x26>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	e18a      	b.n	8006e36 <HAL_SPI_TransmitReceive+0x33c>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b28:	f7fc ffc2 	bl	8003ab0 <HAL_GetTick>
 8006b2c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006b3e:	887b      	ldrh	r3, [r7, #2]
 8006b40:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d00f      	beq.n	8006b6a <HAL_SPI_TransmitReceive+0x70>
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b50:	d107      	bne.n	8006b62 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d103      	bne.n	8006b62 <HAL_SPI_TransmitReceive+0x68>
 8006b5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b5e:	2b04      	cmp	r3, #4
 8006b60:	d003      	beq.n	8006b6a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006b62:	2302      	movs	r3, #2
 8006b64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006b68:	e15b      	b.n	8006e22 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d005      	beq.n	8006b7c <HAL_SPI_TransmitReceive+0x82>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d002      	beq.n	8006b7c <HAL_SPI_TransmitReceive+0x82>
 8006b76:	887b      	ldrh	r3, [r7, #2]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d103      	bne.n	8006b84 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006b82:	e14e      	b.n	8006e22 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	2b04      	cmp	r3, #4
 8006b8e:	d003      	beq.n	8006b98 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2205      	movs	r2, #5
 8006b94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	887a      	ldrh	r2, [r7, #2]
 8006ba8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	887a      	ldrh	r2, [r7, #2]
 8006bae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	887a      	ldrh	r2, [r7, #2]
 8006bba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	887a      	ldrh	r2, [r7, #2]
 8006bc0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd8:	2b40      	cmp	r3, #64	; 0x40
 8006bda:	d007      	beq.n	8006bec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bf4:	d178      	bne.n	8006ce8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d002      	beq.n	8006c04 <HAL_SPI_TransmitReceive+0x10a>
 8006bfe:	8b7b      	ldrh	r3, [r7, #26]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d166      	bne.n	8006cd2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c08:	881a      	ldrh	r2, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c14:	1c9a      	adds	r2, r3, #2
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c28:	e053      	b.n	8006cd2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d11b      	bne.n	8006c70 <HAL_SPI_TransmitReceive+0x176>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d016      	beq.n	8006c70 <HAL_SPI_TransmitReceive+0x176>
 8006c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d113      	bne.n	8006c70 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4c:	881a      	ldrh	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c58:	1c9a      	adds	r2, r3, #2
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	3b01      	subs	r3, #1
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d119      	bne.n	8006cb2 <HAL_SPI_TransmitReceive+0x1b8>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d014      	beq.n	8006cb2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68da      	ldr	r2, [r3, #12]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c92:	b292      	uxth	r2, r2
 8006c94:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9a:	1c9a      	adds	r2, r3, #2
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006cb2:	f7fc fefd 	bl	8003ab0 <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d807      	bhi.n	8006cd2 <HAL_SPI_TransmitReceive+0x1d8>
 8006cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cc8:	d003      	beq.n	8006cd2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006cd0:	e0a7      	b.n	8006e22 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1a6      	bne.n	8006c2a <HAL_SPI_TransmitReceive+0x130>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1a1      	bne.n	8006c2a <HAL_SPI_TransmitReceive+0x130>
 8006ce6:	e07c      	b.n	8006de2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d002      	beq.n	8006cf6 <HAL_SPI_TransmitReceive+0x1fc>
 8006cf0:	8b7b      	ldrh	r3, [r7, #26]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d16b      	bne.n	8006dce <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	330c      	adds	r3, #12
 8006d00:	7812      	ldrb	r2, [r2, #0]
 8006d02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d08:	1c5a      	adds	r2, r3, #1
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	3b01      	subs	r3, #1
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d1c:	e057      	b.n	8006dce <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f003 0302 	and.w	r3, r3, #2
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d11c      	bne.n	8006d66 <HAL_SPI_TransmitReceive+0x26c>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d017      	beq.n	8006d66 <HAL_SPI_TransmitReceive+0x26c>
 8006d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d114      	bne.n	8006d66 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	330c      	adds	r3, #12
 8006d46:	7812      	ldrb	r2, [r2, #0]
 8006d48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d62:	2300      	movs	r3, #0
 8006d64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d119      	bne.n	8006da8 <HAL_SPI_TransmitReceive+0x2ae>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d014      	beq.n	8006da8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68da      	ldr	r2, [r3, #12]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d88:	b2d2      	uxtb	r2, r2
 8006d8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d90:	1c5a      	adds	r2, r3, #1
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006da4:	2301      	movs	r3, #1
 8006da6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006da8:	f7fc fe82 	bl	8003ab0 <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d803      	bhi.n	8006dc0 <HAL_SPI_TransmitReceive+0x2c6>
 8006db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dbe:	d102      	bne.n	8006dc6 <HAL_SPI_TransmitReceive+0x2cc>
 8006dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d103      	bne.n	8006dce <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006dcc:	e029      	b.n	8006e22 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1a2      	bne.n	8006d1e <HAL_SPI_TransmitReceive+0x224>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d19d      	bne.n	8006d1e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006de4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 f8b2 	bl	8006f50 <SPI_EndRxTxTransaction>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d006      	beq.n	8006e00 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006dfe:	e010      	b.n	8006e22 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10b      	bne.n	8006e20 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e08:	2300      	movs	r3, #0
 8006e0a:	617b      	str	r3, [r7, #20]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	617b      	str	r3, [r7, #20]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	617b      	str	r3, [r7, #20]
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	e000      	b.n	8006e22 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006e20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3730      	adds	r7, #48	; 0x30
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
	...

08006e40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b088      	sub	sp, #32
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	603b      	str	r3, [r7, #0]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e50:	f7fc fe2e 	bl	8003ab0 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e58:	1a9b      	subs	r3, r3, r2
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e60:	f7fc fe26 	bl	8003ab0 <HAL_GetTick>
 8006e64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e66:	4b39      	ldr	r3, [pc, #228]	; (8006f4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	015b      	lsls	r3, r3, #5
 8006e6c:	0d1b      	lsrs	r3, r3, #20
 8006e6e:	69fa      	ldr	r2, [r7, #28]
 8006e70:	fb02 f303 	mul.w	r3, r2, r3
 8006e74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e76:	e054      	b.n	8006f22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e7e:	d050      	beq.n	8006f22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e80:	f7fc fe16 	bl	8003ab0 <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	69fa      	ldr	r2, [r7, #28]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d902      	bls.n	8006e96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d13d      	bne.n	8006f12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	685a      	ldr	r2, [r3, #4]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ea4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006eae:	d111      	bne.n	8006ed4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eb8:	d004      	beq.n	8006ec4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ec2:	d107      	bne.n	8006ed4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ed2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006edc:	d10f      	bne.n	8006efe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006efc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e017      	b.n	8006f42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	689a      	ldr	r2, [r3, #8]
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	bf0c      	ite	eq
 8006f32:	2301      	moveq	r3, #1
 8006f34:	2300      	movne	r3, #0
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	461a      	mov	r2, r3
 8006f3a:	79fb      	ldrb	r3, [r7, #7]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d19b      	bne.n	8006e78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3720      	adds	r7, #32
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	20000004 	.word	0x20000004

08006f50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b088      	sub	sp, #32
 8006f54:	af02      	add	r7, sp, #8
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006f5c:	4b1b      	ldr	r3, [pc, #108]	; (8006fcc <SPI_EndRxTxTransaction+0x7c>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a1b      	ldr	r2, [pc, #108]	; (8006fd0 <SPI_EndRxTxTransaction+0x80>)
 8006f62:	fba2 2303 	umull	r2, r3, r2, r3
 8006f66:	0d5b      	lsrs	r3, r3, #21
 8006f68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f6c:	fb02 f303 	mul.w	r3, r2, r3
 8006f70:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f7a:	d112      	bne.n	8006fa2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2200      	movs	r2, #0
 8006f84:	2180      	movs	r1, #128	; 0x80
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f7ff ff5a 	bl	8006e40 <SPI_WaitFlagStateUntilTimeout>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d016      	beq.n	8006fc0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f96:	f043 0220 	orr.w	r2, r3, #32
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e00f      	b.n	8006fc2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00a      	beq.n	8006fbe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	3b01      	subs	r3, #1
 8006fac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb8:	2b80      	cmp	r3, #128	; 0x80
 8006fba:	d0f2      	beq.n	8006fa2 <SPI_EndRxTxTransaction+0x52>
 8006fbc:	e000      	b.n	8006fc0 <SPI_EndRxTxTransaction+0x70>
        break;
 8006fbe:	bf00      	nop
  }

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3718      	adds	r7, #24
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20000004 	.word	0x20000004
 8006fd0:	165e9f81 	.word	0x165e9f81

08006fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e041      	b.n	800706a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d106      	bne.n	8007000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7fb ff7c 	bl	8002ef8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2202      	movs	r2, #2
 8007004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	3304      	adds	r3, #4
 8007010:	4619      	mov	r1, r3
 8007012:	4610      	mov	r0, r2
 8007014:	f000 fb88 	bl	8007728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3708      	adds	r7, #8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b082      	sub	sp, #8
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e041      	b.n	8007108 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	d106      	bne.n	800709e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f7fb ff9d 	bl	8002fd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2202      	movs	r2, #2
 80070a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	3304      	adds	r3, #4
 80070ae:	4619      	mov	r1, r3
 80070b0:	4610      	mov	r0, r2
 80070b2:	f000 fb39 	bl	8007728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	f003 0302 	and.w	r3, r3, #2
 8007122:	2b02      	cmp	r3, #2
 8007124:	d122      	bne.n	800716c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	f003 0302 	and.w	r3, r3, #2
 8007130:	2b02      	cmp	r3, #2
 8007132:	d11b      	bne.n	800716c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f06f 0202 	mvn.w	r2, #2
 800713c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	f003 0303 	and.w	r3, r3, #3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d003      	beq.n	800715a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fa77 	bl	8007646 <HAL_TIM_IC_CaptureCallback>
 8007158:	e005      	b.n	8007166 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fa69 	bl	8007632 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fa7a 	bl	800765a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	f003 0304 	and.w	r3, r3, #4
 8007176:	2b04      	cmp	r3, #4
 8007178:	d122      	bne.n	80071c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	f003 0304 	and.w	r3, r3, #4
 8007184:	2b04      	cmp	r3, #4
 8007186:	d11b      	bne.n	80071c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f06f 0204 	mvn.w	r2, #4
 8007190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2202      	movs	r2, #2
 8007196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d003      	beq.n	80071ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fa4d 	bl	8007646 <HAL_TIM_IC_CaptureCallback>
 80071ac:	e005      	b.n	80071ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fa3f 	bl	8007632 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fa50 	bl	800765a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	f003 0308 	and.w	r3, r3, #8
 80071ca:	2b08      	cmp	r3, #8
 80071cc:	d122      	bne.n	8007214 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	f003 0308 	and.w	r3, r3, #8
 80071d8:	2b08      	cmp	r3, #8
 80071da:	d11b      	bne.n	8007214 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f06f 0208 	mvn.w	r2, #8
 80071e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2204      	movs	r2, #4
 80071ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	f003 0303 	and.w	r3, r3, #3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d003      	beq.n	8007202 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fa23 	bl	8007646 <HAL_TIM_IC_CaptureCallback>
 8007200:	e005      	b.n	800720e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fa15 	bl	8007632 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fa26 	bl	800765a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	f003 0310 	and.w	r3, r3, #16
 800721e:	2b10      	cmp	r3, #16
 8007220:	d122      	bne.n	8007268 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	f003 0310 	and.w	r3, r3, #16
 800722c:	2b10      	cmp	r3, #16
 800722e:	d11b      	bne.n	8007268 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f06f 0210 	mvn.w	r2, #16
 8007238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2208      	movs	r2, #8
 800723e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	69db      	ldr	r3, [r3, #28]
 8007246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800724a:	2b00      	cmp	r3, #0
 800724c:	d003      	beq.n	8007256 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f9f9 	bl	8007646 <HAL_TIM_IC_CaptureCallback>
 8007254:	e005      	b.n	8007262 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f9eb 	bl	8007632 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 f9fc 	bl	800765a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b01      	cmp	r3, #1
 8007274:	d10e      	bne.n	8007294 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	2b01      	cmp	r3, #1
 8007282:	d107      	bne.n	8007294 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f06f 0201 	mvn.w	r2, #1
 800728c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7fb fd82 	bl	8002d98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800729e:	2b80      	cmp	r3, #128	; 0x80
 80072a0:	d10e      	bne.n	80072c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ac:	2b80      	cmp	r3, #128	; 0x80
 80072ae:	d107      	bne.n	80072c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fe1c 	bl	8007ef8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ca:	2b40      	cmp	r3, #64	; 0x40
 80072cc:	d10e      	bne.n	80072ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d8:	2b40      	cmp	r3, #64	; 0x40
 80072da:	d107      	bne.n	80072ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f9c1 	bl	800766e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	f003 0320 	and.w	r3, r3, #32
 80072f6:	2b20      	cmp	r3, #32
 80072f8:	d10e      	bne.n	8007318 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f003 0320 	and.w	r3, r3, #32
 8007304:	2b20      	cmp	r3, #32
 8007306:	d107      	bne.n	8007318 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f06f 0220 	mvn.w	r2, #32
 8007310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fde6 	bl	8007ee4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007318:	bf00      	nop
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800732c:	2300      	movs	r3, #0
 800732e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007336:	2b01      	cmp	r3, #1
 8007338:	d101      	bne.n	800733e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800733a:	2302      	movs	r3, #2
 800733c:	e0ae      	b.n	800749c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2b0c      	cmp	r3, #12
 800734a:	f200 809f 	bhi.w	800748c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800734e:	a201      	add	r2, pc, #4	; (adr r2, 8007354 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007354:	08007389 	.word	0x08007389
 8007358:	0800748d 	.word	0x0800748d
 800735c:	0800748d 	.word	0x0800748d
 8007360:	0800748d 	.word	0x0800748d
 8007364:	080073c9 	.word	0x080073c9
 8007368:	0800748d 	.word	0x0800748d
 800736c:	0800748d 	.word	0x0800748d
 8007370:	0800748d 	.word	0x0800748d
 8007374:	0800740b 	.word	0x0800740b
 8007378:	0800748d 	.word	0x0800748d
 800737c:	0800748d 	.word	0x0800748d
 8007380:	0800748d 	.word	0x0800748d
 8007384:	0800744b 	.word	0x0800744b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68b9      	ldr	r1, [r7, #8]
 800738e:	4618      	mov	r0, r3
 8007390:	f000 fa6a 	bl	8007868 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	699a      	ldr	r2, [r3, #24]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f042 0208 	orr.w	r2, r2, #8
 80073a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	699a      	ldr	r2, [r3, #24]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f022 0204 	bic.w	r2, r2, #4
 80073b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6999      	ldr	r1, [r3, #24]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	691a      	ldr	r2, [r3, #16]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	430a      	orrs	r2, r1
 80073c4:	619a      	str	r2, [r3, #24]
      break;
 80073c6:	e064      	b.n	8007492 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68b9      	ldr	r1, [r7, #8]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 faba 	bl	8007948 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	699a      	ldr	r2, [r3, #24]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	699a      	ldr	r2, [r3, #24]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6999      	ldr	r1, [r3, #24]
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	021a      	lsls	r2, r3, #8
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	430a      	orrs	r2, r1
 8007406:	619a      	str	r2, [r3, #24]
      break;
 8007408:	e043      	b.n	8007492 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68b9      	ldr	r1, [r7, #8]
 8007410:	4618      	mov	r0, r3
 8007412:	f000 fb0f 	bl	8007a34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	69da      	ldr	r2, [r3, #28]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f042 0208 	orr.w	r2, r2, #8
 8007424:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	69da      	ldr	r2, [r3, #28]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f022 0204 	bic.w	r2, r2, #4
 8007434:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	69d9      	ldr	r1, [r3, #28]
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	691a      	ldr	r2, [r3, #16]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	430a      	orrs	r2, r1
 8007446:	61da      	str	r2, [r3, #28]
      break;
 8007448:	e023      	b.n	8007492 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68b9      	ldr	r1, [r7, #8]
 8007450:	4618      	mov	r0, r3
 8007452:	f000 fb63 	bl	8007b1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	69da      	ldr	r2, [r3, #28]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	69da      	ldr	r2, [r3, #28]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	69d9      	ldr	r1, [r3, #28]
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	021a      	lsls	r2, r3, #8
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	430a      	orrs	r2, r1
 8007488:	61da      	str	r2, [r3, #28]
      break;
 800748a:	e002      	b.n	8007492 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	75fb      	strb	r3, [r7, #23]
      break;
 8007490:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800749a:	7dfb      	ldrb	r3, [r7, #23]
}
 800749c:	4618      	mov	r0, r3
 800749e:	3718      	adds	r7, #24
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074ae:	2300      	movs	r3, #0
 80074b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d101      	bne.n	80074c0 <HAL_TIM_ConfigClockSource+0x1c>
 80074bc:	2302      	movs	r3, #2
 80074be:	e0b4      	b.n	800762a <HAL_TIM_ConfigClockSource+0x186>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80074de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074f8:	d03e      	beq.n	8007578 <HAL_TIM_ConfigClockSource+0xd4>
 80074fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074fe:	f200 8087 	bhi.w	8007610 <HAL_TIM_ConfigClockSource+0x16c>
 8007502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007506:	f000 8086 	beq.w	8007616 <HAL_TIM_ConfigClockSource+0x172>
 800750a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800750e:	d87f      	bhi.n	8007610 <HAL_TIM_ConfigClockSource+0x16c>
 8007510:	2b70      	cmp	r3, #112	; 0x70
 8007512:	d01a      	beq.n	800754a <HAL_TIM_ConfigClockSource+0xa6>
 8007514:	2b70      	cmp	r3, #112	; 0x70
 8007516:	d87b      	bhi.n	8007610 <HAL_TIM_ConfigClockSource+0x16c>
 8007518:	2b60      	cmp	r3, #96	; 0x60
 800751a:	d050      	beq.n	80075be <HAL_TIM_ConfigClockSource+0x11a>
 800751c:	2b60      	cmp	r3, #96	; 0x60
 800751e:	d877      	bhi.n	8007610 <HAL_TIM_ConfigClockSource+0x16c>
 8007520:	2b50      	cmp	r3, #80	; 0x50
 8007522:	d03c      	beq.n	800759e <HAL_TIM_ConfigClockSource+0xfa>
 8007524:	2b50      	cmp	r3, #80	; 0x50
 8007526:	d873      	bhi.n	8007610 <HAL_TIM_ConfigClockSource+0x16c>
 8007528:	2b40      	cmp	r3, #64	; 0x40
 800752a:	d058      	beq.n	80075de <HAL_TIM_ConfigClockSource+0x13a>
 800752c:	2b40      	cmp	r3, #64	; 0x40
 800752e:	d86f      	bhi.n	8007610 <HAL_TIM_ConfigClockSource+0x16c>
 8007530:	2b30      	cmp	r3, #48	; 0x30
 8007532:	d064      	beq.n	80075fe <HAL_TIM_ConfigClockSource+0x15a>
 8007534:	2b30      	cmp	r3, #48	; 0x30
 8007536:	d86b      	bhi.n	8007610 <HAL_TIM_ConfigClockSource+0x16c>
 8007538:	2b20      	cmp	r3, #32
 800753a:	d060      	beq.n	80075fe <HAL_TIM_ConfigClockSource+0x15a>
 800753c:	2b20      	cmp	r3, #32
 800753e:	d867      	bhi.n	8007610 <HAL_TIM_ConfigClockSource+0x16c>
 8007540:	2b00      	cmp	r3, #0
 8007542:	d05c      	beq.n	80075fe <HAL_TIM_ConfigClockSource+0x15a>
 8007544:	2b10      	cmp	r3, #16
 8007546:	d05a      	beq.n	80075fe <HAL_TIM_ConfigClockSource+0x15a>
 8007548:	e062      	b.n	8007610 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6818      	ldr	r0, [r3, #0]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	6899      	ldr	r1, [r3, #8]
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	f000 fbaf 	bl	8007cbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800756c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	609a      	str	r2, [r3, #8]
      break;
 8007576:	e04f      	b.n	8007618 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6818      	ldr	r0, [r3, #0]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	6899      	ldr	r1, [r3, #8]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	f000 fb98 	bl	8007cbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	689a      	ldr	r2, [r3, #8]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800759a:	609a      	str	r2, [r3, #8]
      break;
 800759c:	e03c      	b.n	8007618 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6818      	ldr	r0, [r3, #0]
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	6859      	ldr	r1, [r3, #4]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	461a      	mov	r2, r3
 80075ac:	f000 fb0c 	bl	8007bc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2150      	movs	r1, #80	; 0x50
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 fb65 	bl	8007c86 <TIM_ITRx_SetConfig>
      break;
 80075bc:	e02c      	b.n	8007618 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6818      	ldr	r0, [r3, #0]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	6859      	ldr	r1, [r3, #4]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	461a      	mov	r2, r3
 80075cc:	f000 fb2b 	bl	8007c26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2160      	movs	r1, #96	; 0x60
 80075d6:	4618      	mov	r0, r3
 80075d8:	f000 fb55 	bl	8007c86 <TIM_ITRx_SetConfig>
      break;
 80075dc:	e01c      	b.n	8007618 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6818      	ldr	r0, [r3, #0]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	6859      	ldr	r1, [r3, #4]
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	461a      	mov	r2, r3
 80075ec:	f000 faec 	bl	8007bc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2140      	movs	r1, #64	; 0x40
 80075f6:	4618      	mov	r0, r3
 80075f8:	f000 fb45 	bl	8007c86 <TIM_ITRx_SetConfig>
      break;
 80075fc:	e00c      	b.n	8007618 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4619      	mov	r1, r3
 8007608:	4610      	mov	r0, r2
 800760a:	f000 fb3c 	bl	8007c86 <TIM_ITRx_SetConfig>
      break;
 800760e:	e003      	b.n	8007618 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	73fb      	strb	r3, [r7, #15]
      break;
 8007614:	e000      	b.n	8007618 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007616:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007628:	7bfb      	ldrb	r3, [r7, #15]
}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007632:	b480      	push	{r7}
 8007634:	b083      	sub	sp, #12
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800763a:	bf00      	nop
 800763c:	370c      	adds	r7, #12
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007646:	b480      	push	{r7}
 8007648:	b083      	sub	sp, #12
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800764e:	bf00      	nop
 8007650:	370c      	adds	r7, #12
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800765a:	b480      	push	{r7}
 800765c:	b083      	sub	sp, #12
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007662:	bf00      	nop
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800766e:	b480      	push	{r7}
 8007670:	b083      	sub	sp, #12
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007676:	bf00      	nop
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007682:	b480      	push	{r7}
 8007684:	b083      	sub	sp, #12
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800768a:	bf00      	nop
 800768c:	370c      	adds	r7, #12
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr

08007696 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b084      	sub	sp, #16
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d107      	bne.n	80076be <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2201      	movs	r2, #1
 80076b2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076bc:	e02a      	b.n	8007714 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d107      	bne.n	80076d8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2202      	movs	r2, #2
 80076cc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076d6:	e01d      	b.n	8007714 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d107      	bne.n	80076f2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2204      	movs	r2, #4
 80076e6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076f0:	e010      	b.n	8007714 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d107      	bne.n	800770c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2208      	movs	r2, #8
 8007700:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800770a:	e003      	b.n	8007714 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f7ff ffb4 	bl	8007682 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	771a      	strb	r2, [r3, #28]
}
 8007720:	bf00      	nop
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a40      	ldr	r2, [pc, #256]	; (800783c <TIM_Base_SetConfig+0x114>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d013      	beq.n	8007768 <TIM_Base_SetConfig+0x40>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007746:	d00f      	beq.n	8007768 <TIM_Base_SetConfig+0x40>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a3d      	ldr	r2, [pc, #244]	; (8007840 <TIM_Base_SetConfig+0x118>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d00b      	beq.n	8007768 <TIM_Base_SetConfig+0x40>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a3c      	ldr	r2, [pc, #240]	; (8007844 <TIM_Base_SetConfig+0x11c>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d007      	beq.n	8007768 <TIM_Base_SetConfig+0x40>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a3b      	ldr	r2, [pc, #236]	; (8007848 <TIM_Base_SetConfig+0x120>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d003      	beq.n	8007768 <TIM_Base_SetConfig+0x40>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a3a      	ldr	r2, [pc, #232]	; (800784c <TIM_Base_SetConfig+0x124>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d108      	bne.n	800777a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800776e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	4313      	orrs	r3, r2
 8007778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a2f      	ldr	r2, [pc, #188]	; (800783c <TIM_Base_SetConfig+0x114>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d02b      	beq.n	80077da <TIM_Base_SetConfig+0xb2>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007788:	d027      	beq.n	80077da <TIM_Base_SetConfig+0xb2>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a2c      	ldr	r2, [pc, #176]	; (8007840 <TIM_Base_SetConfig+0x118>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d023      	beq.n	80077da <TIM_Base_SetConfig+0xb2>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a2b      	ldr	r2, [pc, #172]	; (8007844 <TIM_Base_SetConfig+0x11c>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d01f      	beq.n	80077da <TIM_Base_SetConfig+0xb2>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a2a      	ldr	r2, [pc, #168]	; (8007848 <TIM_Base_SetConfig+0x120>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d01b      	beq.n	80077da <TIM_Base_SetConfig+0xb2>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a29      	ldr	r2, [pc, #164]	; (800784c <TIM_Base_SetConfig+0x124>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d017      	beq.n	80077da <TIM_Base_SetConfig+0xb2>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a28      	ldr	r2, [pc, #160]	; (8007850 <TIM_Base_SetConfig+0x128>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d013      	beq.n	80077da <TIM_Base_SetConfig+0xb2>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a27      	ldr	r2, [pc, #156]	; (8007854 <TIM_Base_SetConfig+0x12c>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d00f      	beq.n	80077da <TIM_Base_SetConfig+0xb2>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a26      	ldr	r2, [pc, #152]	; (8007858 <TIM_Base_SetConfig+0x130>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d00b      	beq.n	80077da <TIM_Base_SetConfig+0xb2>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a25      	ldr	r2, [pc, #148]	; (800785c <TIM_Base_SetConfig+0x134>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d007      	beq.n	80077da <TIM_Base_SetConfig+0xb2>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a24      	ldr	r2, [pc, #144]	; (8007860 <TIM_Base_SetConfig+0x138>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d003      	beq.n	80077da <TIM_Base_SetConfig+0xb2>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a23      	ldr	r2, [pc, #140]	; (8007864 <TIM_Base_SetConfig+0x13c>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d108      	bne.n	80077ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	689a      	ldr	r2, [r3, #8]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a0a      	ldr	r2, [pc, #40]	; (800783c <TIM_Base_SetConfig+0x114>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d003      	beq.n	8007820 <TIM_Base_SetConfig+0xf8>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a0c      	ldr	r2, [pc, #48]	; (800784c <TIM_Base_SetConfig+0x124>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d103      	bne.n	8007828 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	691a      	ldr	r2, [r3, #16]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	615a      	str	r2, [r3, #20]
}
 800782e:	bf00      	nop
 8007830:	3714      	adds	r7, #20
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	40010000 	.word	0x40010000
 8007840:	40000400 	.word	0x40000400
 8007844:	40000800 	.word	0x40000800
 8007848:	40000c00 	.word	0x40000c00
 800784c:	40010400 	.word	0x40010400
 8007850:	40014000 	.word	0x40014000
 8007854:	40014400 	.word	0x40014400
 8007858:	40014800 	.word	0x40014800
 800785c:	40001800 	.word	0x40001800
 8007860:	40001c00 	.word	0x40001c00
 8007864:	40002000 	.word	0x40002000

08007868 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007868:	b480      	push	{r7}
 800786a:	b087      	sub	sp, #28
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	f023 0201 	bic.w	r2, r3, #1
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f023 0303 	bic.w	r3, r3, #3
 800789e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	f023 0302 	bic.w	r3, r3, #2
 80078b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a20      	ldr	r2, [pc, #128]	; (8007940 <TIM_OC1_SetConfig+0xd8>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d003      	beq.n	80078cc <TIM_OC1_SetConfig+0x64>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a1f      	ldr	r2, [pc, #124]	; (8007944 <TIM_OC1_SetConfig+0xdc>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d10c      	bne.n	80078e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	f023 0308 	bic.w	r3, r3, #8
 80078d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	4313      	orrs	r3, r2
 80078dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	f023 0304 	bic.w	r3, r3, #4
 80078e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a15      	ldr	r2, [pc, #84]	; (8007940 <TIM_OC1_SetConfig+0xd8>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d003      	beq.n	80078f6 <TIM_OC1_SetConfig+0x8e>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a14      	ldr	r2, [pc, #80]	; (8007944 <TIM_OC1_SetConfig+0xdc>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d111      	bne.n	800791a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	695b      	ldr	r3, [r3, #20]
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	4313      	orrs	r3, r2
 800790e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	4313      	orrs	r3, r2
 8007918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	685a      	ldr	r2, [r3, #4]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	621a      	str	r2, [r3, #32]
}
 8007934:	bf00      	nop
 8007936:	371c      	adds	r7, #28
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	40010000 	.word	0x40010000
 8007944:	40010400 	.word	0x40010400

08007948 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007948:	b480      	push	{r7}
 800794a:	b087      	sub	sp, #28
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	f023 0210 	bic.w	r2, r3, #16
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800797e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	021b      	lsls	r3, r3, #8
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	4313      	orrs	r3, r2
 800798a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	f023 0320 	bic.w	r3, r3, #32
 8007992:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	011b      	lsls	r3, r3, #4
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	4313      	orrs	r3, r2
 800799e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a22      	ldr	r2, [pc, #136]	; (8007a2c <TIM_OC2_SetConfig+0xe4>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d003      	beq.n	80079b0 <TIM_OC2_SetConfig+0x68>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a21      	ldr	r2, [pc, #132]	; (8007a30 <TIM_OC2_SetConfig+0xe8>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d10d      	bne.n	80079cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	011b      	lsls	r3, r3, #4
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a17      	ldr	r2, [pc, #92]	; (8007a2c <TIM_OC2_SetConfig+0xe4>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d003      	beq.n	80079dc <TIM_OC2_SetConfig+0x94>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a16      	ldr	r2, [pc, #88]	; (8007a30 <TIM_OC2_SetConfig+0xe8>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d113      	bne.n	8007a04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	695b      	ldr	r3, [r3, #20]
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	693a      	ldr	r2, [r7, #16]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	685a      	ldr	r2, [r3, #4]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	621a      	str	r2, [r3, #32]
}
 8007a1e:	bf00      	nop
 8007a20:	371c      	adds	r7, #28
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	40010000 	.word	0x40010000
 8007a30:	40010400 	.word	0x40010400

08007a34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b087      	sub	sp, #28
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	69db      	ldr	r3, [r3, #28]
 8007a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f023 0303 	bic.w	r3, r3, #3
 8007a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	021b      	lsls	r3, r3, #8
 8007a84:	697a      	ldr	r2, [r7, #20]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a21      	ldr	r2, [pc, #132]	; (8007b14 <TIM_OC3_SetConfig+0xe0>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d003      	beq.n	8007a9a <TIM_OC3_SetConfig+0x66>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a20      	ldr	r2, [pc, #128]	; (8007b18 <TIM_OC3_SetConfig+0xe4>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d10d      	bne.n	8007ab6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	021b      	lsls	r3, r3, #8
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a16      	ldr	r2, [pc, #88]	; (8007b14 <TIM_OC3_SetConfig+0xe0>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d003      	beq.n	8007ac6 <TIM_OC3_SetConfig+0x92>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a15      	ldr	r2, [pc, #84]	; (8007b18 <TIM_OC3_SetConfig+0xe4>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d113      	bne.n	8007aee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007acc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	011b      	lsls	r3, r3, #4
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	011b      	lsls	r3, r3, #4
 8007ae8:	693a      	ldr	r2, [r7, #16]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	693a      	ldr	r2, [r7, #16]
 8007af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	697a      	ldr	r2, [r7, #20]
 8007b06:	621a      	str	r2, [r3, #32]
}
 8007b08:	bf00      	nop
 8007b0a:	371c      	adds	r7, #28
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr
 8007b14:	40010000 	.word	0x40010000
 8007b18:	40010400 	.word	0x40010400

08007b1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b087      	sub	sp, #28
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	69db      	ldr	r3, [r3, #28]
 8007b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	021b      	lsls	r3, r3, #8
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	031b      	lsls	r3, r3, #12
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a12      	ldr	r2, [pc, #72]	; (8007bc0 <TIM_OC4_SetConfig+0xa4>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d003      	beq.n	8007b84 <TIM_OC4_SetConfig+0x68>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a11      	ldr	r2, [pc, #68]	; (8007bc4 <TIM_OC4_SetConfig+0xa8>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d109      	bne.n	8007b98 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	695b      	ldr	r3, [r3, #20]
 8007b90:	019b      	lsls	r3, r3, #6
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	621a      	str	r2, [r3, #32]
}
 8007bb2:	bf00      	nop
 8007bb4:	371c      	adds	r7, #28
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	40010000 	.word	0x40010000
 8007bc4:	40010400 	.word	0x40010400

08007bc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b087      	sub	sp, #28
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6a1b      	ldr	r3, [r3, #32]
 8007bd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	f023 0201 	bic.w	r2, r3, #1
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	011b      	lsls	r3, r3, #4
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f023 030a 	bic.w	r3, r3, #10
 8007c04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	621a      	str	r2, [r3, #32]
}
 8007c1a:	bf00      	nop
 8007c1c:	371c      	adds	r7, #28
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b087      	sub	sp, #28
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	60f8      	str	r0, [r7, #12]
 8007c2e:	60b9      	str	r1, [r7, #8]
 8007c30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	f023 0210 	bic.w	r2, r3, #16
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6a1b      	ldr	r3, [r3, #32]
 8007c48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	031b      	lsls	r3, r3, #12
 8007c56:	697a      	ldr	r2, [r7, #20]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	011b      	lsls	r3, r3, #4
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	697a      	ldr	r2, [r7, #20]
 8007c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	693a      	ldr	r2, [r7, #16]
 8007c78:	621a      	str	r2, [r3, #32]
}
 8007c7a:	bf00      	nop
 8007c7c:	371c      	adds	r7, #28
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b085      	sub	sp, #20
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	f043 0307 	orr.w	r3, r3, #7
 8007ca8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	609a      	str	r2, [r3, #8]
}
 8007cb0:	bf00      	nop
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
 8007cc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	021a      	lsls	r2, r3, #8
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	431a      	orrs	r2, r3
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	697a      	ldr	r2, [r7, #20]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	609a      	str	r2, [r3, #8]
}
 8007cf0:	bf00      	nop
 8007cf2:	371c      	adds	r7, #28
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	f003 031f 	and.w	r3, r3, #31
 8007d0e:	2201      	movs	r2, #1
 8007d10:	fa02 f303 	lsl.w	r3, r2, r3
 8007d14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6a1a      	ldr	r2, [r3, #32]
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	43db      	mvns	r3, r3
 8007d1e:	401a      	ands	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6a1a      	ldr	r2, [r3, #32]
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	f003 031f 	and.w	r3, r3, #31
 8007d2e:	6879      	ldr	r1, [r7, #4]
 8007d30:	fa01 f303 	lsl.w	r3, r1, r3
 8007d34:	431a      	orrs	r2, r3
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	621a      	str	r2, [r3, #32]
}
 8007d3a:	bf00      	nop
 8007d3c:	371c      	adds	r7, #28
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr
	...

08007d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d101      	bne.n	8007d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	e05a      	b.n	8007e16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a21      	ldr	r2, [pc, #132]	; (8007e24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d022      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dac:	d01d      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a1d      	ldr	r2, [pc, #116]	; (8007e28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d018      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a1b      	ldr	r2, [pc, #108]	; (8007e2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d013      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a1a      	ldr	r2, [pc, #104]	; (8007e30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d00e      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a18      	ldr	r2, [pc, #96]	; (8007e34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d009      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a17      	ldr	r2, [pc, #92]	; (8007e38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d004      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a15      	ldr	r2, [pc, #84]	; (8007e3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d10c      	bne.n	8007e04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007df0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3714      	adds	r7, #20
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	40010000 	.word	0x40010000
 8007e28:	40000400 	.word	0x40000400
 8007e2c:	40000800 	.word	0x40000800
 8007e30:	40000c00 	.word	0x40000c00
 8007e34:	40010400 	.word	0x40010400
 8007e38:	40014000 	.word	0x40014000
 8007e3c:	40001800 	.word	0x40001800

08007e40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d101      	bne.n	8007e5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e58:	2302      	movs	r3, #2
 8007e5a:	e03d      	b.n	8007ed8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	695b      	ldr	r3, [r3, #20]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3714      	adds	r7, #20
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d101      	bne.n	8007f1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e03f      	b.n	8007f9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d106      	bne.n	8007f38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7fb f9c8 	bl	80032c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2224      	movs	r2, #36	; 0x24
 8007f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68da      	ldr	r2, [r3, #12]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fe23 	bl	8008b9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	691a      	ldr	r2, [r3, #16]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	695a      	ldr	r2, [r3, #20]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68da      	ldr	r2, [r3, #12]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2220      	movs	r2, #32
 8007f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2220      	movs	r2, #32
 8007f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b08a      	sub	sp, #40	; 0x28
 8007faa:	af02      	add	r7, sp, #8
 8007fac:	60f8      	str	r0, [r7, #12]
 8007fae:	60b9      	str	r1, [r7, #8]
 8007fb0:	603b      	str	r3, [r7, #0]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	2b20      	cmp	r3, #32
 8007fc4:	d17c      	bne.n	80080c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d002      	beq.n	8007fd2 <HAL_UART_Transmit+0x2c>
 8007fcc:	88fb      	ldrh	r3, [r7, #6]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d101      	bne.n	8007fd6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e075      	b.n	80080c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d101      	bne.n	8007fe4 <HAL_UART_Transmit+0x3e>
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	e06e      	b.n	80080c2 <HAL_UART_Transmit+0x11c>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2221      	movs	r2, #33	; 0x21
 8007ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ffa:	f7fb fd59 	bl	8003ab0 <HAL_GetTick>
 8007ffe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	88fa      	ldrh	r2, [r7, #6]
 8008004:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	88fa      	ldrh	r2, [r7, #6]
 800800a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008014:	d108      	bne.n	8008028 <HAL_UART_Transmit+0x82>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d104      	bne.n	8008028 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800801e:	2300      	movs	r3, #0
 8008020:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	61bb      	str	r3, [r7, #24]
 8008026:	e003      	b.n	8008030 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800802c:	2300      	movs	r3, #0
 800802e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008038:	e02a      	b.n	8008090 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	2200      	movs	r2, #0
 8008042:	2180      	movs	r1, #128	; 0x80
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f000 fb63 	bl	8008710 <UART_WaitOnFlagUntilTimeout>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d001      	beq.n	8008054 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008050:	2303      	movs	r3, #3
 8008052:	e036      	b.n	80080c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10b      	bne.n	8008072 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	881b      	ldrh	r3, [r3, #0]
 800805e:	461a      	mov	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008068:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	3302      	adds	r3, #2
 800806e:	61bb      	str	r3, [r7, #24]
 8008070:	e007      	b.n	8008082 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	781a      	ldrb	r2, [r3, #0]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	3301      	adds	r3, #1
 8008080:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008086:	b29b      	uxth	r3, r3
 8008088:	3b01      	subs	r3, #1
 800808a:	b29a      	uxth	r2, r3
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008094:	b29b      	uxth	r3, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1cf      	bne.n	800803a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	2200      	movs	r2, #0
 80080a2:	2140      	movs	r1, #64	; 0x40
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 fb33 	bl	8008710 <UART_WaitOnFlagUntilTimeout>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d001      	beq.n	80080b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e006      	b.n	80080c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2220      	movs	r2, #32
 80080b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	e000      	b.n	80080c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80080c0:	2302      	movs	r3, #2
  }
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3720      	adds	r7, #32
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80080ca:	b480      	push	{r7}
 80080cc:	b085      	sub	sp, #20
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	60f8      	str	r0, [r7, #12]
 80080d2:	60b9      	str	r1, [r7, #8]
 80080d4:	4613      	mov	r3, r2
 80080d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	2b20      	cmp	r3, #32
 80080e2:	d130      	bne.n	8008146 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d002      	beq.n	80080f0 <HAL_UART_Transmit_IT+0x26>
 80080ea:	88fb      	ldrh	r3, [r7, #6]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d101      	bne.n	80080f4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e029      	b.n	8008148 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d101      	bne.n	8008102 <HAL_UART_Transmit_IT+0x38>
 80080fe:	2302      	movs	r3, #2
 8008100:	e022      	b.n	8008148 <HAL_UART_Transmit_IT+0x7e>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2201      	movs	r2, #1
 8008106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	88fa      	ldrh	r2, [r7, #6]
 8008114:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	88fa      	ldrh	r2, [r7, #6]
 800811a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2221      	movs	r2, #33	; 0x21
 8008126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68da      	ldr	r2, [r3, #12]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008140:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	e000      	b.n	8008148 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008146:	2302      	movs	r3, #2
  }
}
 8008148:	4618      	mov	r0, r3
 800814a:	3714      	adds	r7, #20
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	4613      	mov	r3, r2
 8008160:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b20      	cmp	r3, #32
 800816c:	d11d      	bne.n	80081aa <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d002      	beq.n	800817a <HAL_UART_Receive_IT+0x26>
 8008174:	88fb      	ldrh	r3, [r7, #6]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d101      	bne.n	800817e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e016      	b.n	80081ac <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008184:	2b01      	cmp	r3, #1
 8008186:	d101      	bne.n	800818c <HAL_UART_Receive_IT+0x38>
 8008188:	2302      	movs	r3, #2
 800818a:	e00f      	b.n	80081ac <HAL_UART_Receive_IT+0x58>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800819a:	88fb      	ldrh	r3, [r7, #6]
 800819c:	461a      	mov	r2, r3
 800819e:	68b9      	ldr	r1, [r7, #8]
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f000 fb23 	bl	80087ec <UART_Start_Receive_IT>
 80081a6:	4603      	mov	r3, r0
 80081a8:	e000      	b.n	80081ac <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80081aa:	2302      	movs	r3, #2
  }
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b0ba      	sub	sp, #232	; 0xe8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80081da:	2300      	movs	r3, #0
 80081dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80081e0:	2300      	movs	r3, #0
 80081e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80081e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ea:	f003 030f 	and.w	r3, r3, #15
 80081ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80081f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10f      	bne.n	800821a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081fe:	f003 0320 	and.w	r3, r3, #32
 8008202:	2b00      	cmp	r3, #0
 8008204:	d009      	beq.n	800821a <HAL_UART_IRQHandler+0x66>
 8008206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800820a:	f003 0320 	and.w	r3, r3, #32
 800820e:	2b00      	cmp	r3, #0
 8008210:	d003      	beq.n	800821a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fc07 	bl	8008a26 <UART_Receive_IT>
      return;
 8008218:	e256      	b.n	80086c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800821a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800821e:	2b00      	cmp	r3, #0
 8008220:	f000 80de 	beq.w	80083e0 <HAL_UART_IRQHandler+0x22c>
 8008224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008228:	f003 0301 	and.w	r3, r3, #1
 800822c:	2b00      	cmp	r3, #0
 800822e:	d106      	bne.n	800823e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008234:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008238:	2b00      	cmp	r3, #0
 800823a:	f000 80d1 	beq.w	80083e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800823e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00b      	beq.n	8008262 <HAL_UART_IRQHandler+0xae>
 800824a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800824e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008252:	2b00      	cmp	r3, #0
 8008254:	d005      	beq.n	8008262 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825a:	f043 0201 	orr.w	r2, r3, #1
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008266:	f003 0304 	and.w	r3, r3, #4
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00b      	beq.n	8008286 <HAL_UART_IRQHandler+0xd2>
 800826e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008272:	f003 0301 	and.w	r3, r3, #1
 8008276:	2b00      	cmp	r3, #0
 8008278:	d005      	beq.n	8008286 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827e:	f043 0202 	orr.w	r2, r3, #2
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800828a:	f003 0302 	and.w	r3, r3, #2
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00b      	beq.n	80082aa <HAL_UART_IRQHandler+0xf6>
 8008292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008296:	f003 0301 	and.w	r3, r3, #1
 800829a:	2b00      	cmp	r3, #0
 800829c:	d005      	beq.n	80082aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a2:	f043 0204 	orr.w	r2, r3, #4
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80082aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ae:	f003 0308 	and.w	r3, r3, #8
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d011      	beq.n	80082da <HAL_UART_IRQHandler+0x126>
 80082b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082ba:	f003 0320 	and.w	r3, r3, #32
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d105      	bne.n	80082ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80082c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082c6:	f003 0301 	and.w	r3, r3, #1
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d005      	beq.n	80082da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d2:	f043 0208 	orr.w	r2, r3, #8
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f000 81ed 	beq.w	80086be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082e8:	f003 0320 	and.w	r3, r3, #32
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d008      	beq.n	8008302 <HAL_UART_IRQHandler+0x14e>
 80082f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082f4:	f003 0320 	and.w	r3, r3, #32
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d002      	beq.n	8008302 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fb92 	bl	8008a26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	695b      	ldr	r3, [r3, #20]
 8008308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800830c:	2b40      	cmp	r3, #64	; 0x40
 800830e:	bf0c      	ite	eq
 8008310:	2301      	moveq	r3, #1
 8008312:	2300      	movne	r3, #0
 8008314:	b2db      	uxtb	r3, r3
 8008316:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831e:	f003 0308 	and.w	r3, r3, #8
 8008322:	2b00      	cmp	r3, #0
 8008324:	d103      	bne.n	800832e <HAL_UART_IRQHandler+0x17a>
 8008326:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800832a:	2b00      	cmp	r3, #0
 800832c:	d04f      	beq.n	80083ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fa9a 	bl	8008868 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833e:	2b40      	cmp	r3, #64	; 0x40
 8008340:	d141      	bne.n	80083c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	3314      	adds	r3, #20
 8008348:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008350:	e853 3f00 	ldrex	r3, [r3]
 8008354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008358:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800835c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008360:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	3314      	adds	r3, #20
 800836a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800836e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008372:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008376:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800837a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800837e:	e841 2300 	strex	r3, r2, [r1]
 8008382:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008386:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1d9      	bne.n	8008342 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008392:	2b00      	cmp	r3, #0
 8008394:	d013      	beq.n	80083be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839a:	4a7d      	ldr	r2, [pc, #500]	; (8008590 <HAL_UART_IRQHandler+0x3dc>)
 800839c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7fb fe3c 	bl	8004020 <HAL_DMA_Abort_IT>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d016      	beq.n	80083dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80083b8:	4610      	mov	r0, r2
 80083ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083bc:	e00e      	b.n	80083dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f990 	bl	80086e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083c4:	e00a      	b.n	80083dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f98c 	bl	80086e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083cc:	e006      	b.n	80083dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f988 	bl	80086e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80083da:	e170      	b.n	80086be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083dc:	bf00      	nop
    return;
 80083de:	e16e      	b.n	80086be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	f040 814a 	bne.w	800867e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80083ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083ee:	f003 0310 	and.w	r3, r3, #16
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f000 8143 	beq.w	800867e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80083f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083fc:	f003 0310 	and.w	r3, r3, #16
 8008400:	2b00      	cmp	r3, #0
 8008402:	f000 813c 	beq.w	800867e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008406:	2300      	movs	r3, #0
 8008408:	60bb      	str	r3, [r7, #8]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	60bb      	str	r3, [r7, #8]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	60bb      	str	r3, [r7, #8]
 800841a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008426:	2b40      	cmp	r3, #64	; 0x40
 8008428:	f040 80b4 	bne.w	8008594 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008438:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800843c:	2b00      	cmp	r3, #0
 800843e:	f000 8140 	beq.w	80086c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008446:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800844a:	429a      	cmp	r2, r3
 800844c:	f080 8139 	bcs.w	80086c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008456:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845c:	69db      	ldr	r3, [r3, #28]
 800845e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008462:	f000 8088 	beq.w	8008576 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	330c      	adds	r3, #12
 800846c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008470:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008474:	e853 3f00 	ldrex	r3, [r3]
 8008478:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800847c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	330c      	adds	r3, #12
 800848e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008492:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008496:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800849e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80084a2:	e841 2300 	strex	r3, r2, [r1]
 80084a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80084aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1d9      	bne.n	8008466 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	3314      	adds	r3, #20
 80084b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084bc:	e853 3f00 	ldrex	r3, [r3]
 80084c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80084c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084c4:	f023 0301 	bic.w	r3, r3, #1
 80084c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	3314      	adds	r3, #20
 80084d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80084da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80084de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80084e2:	e841 2300 	strex	r3, r2, [r1]
 80084e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80084e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1e1      	bne.n	80084b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	3314      	adds	r3, #20
 80084f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084f8:	e853 3f00 	ldrex	r3, [r3]
 80084fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80084fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008504:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	3314      	adds	r3, #20
 800850e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008512:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008514:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008516:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008518:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800851a:	e841 2300 	strex	r3, r2, [r1]
 800851e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1e3      	bne.n	80084ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2220      	movs	r2, #32
 800852a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	330c      	adds	r3, #12
 800853a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800853e:	e853 3f00 	ldrex	r3, [r3]
 8008542:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008546:	f023 0310 	bic.w	r3, r3, #16
 800854a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	330c      	adds	r3, #12
 8008554:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008558:	65ba      	str	r2, [r7, #88]	; 0x58
 800855a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800855e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008560:	e841 2300 	strex	r3, r2, [r1]
 8008564:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008568:	2b00      	cmp	r3, #0
 800856a:	d1e3      	bne.n	8008534 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008570:	4618      	mov	r0, r3
 8008572:	f7fb fce5 	bl	8003f40 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800857e:	b29b      	uxth	r3, r3
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	b29b      	uxth	r3, r3
 8008584:	4619      	mov	r1, r3
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f8b6 	bl	80086f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800858c:	e099      	b.n	80086c2 <HAL_UART_IRQHandler+0x50e>
 800858e:	bf00      	nop
 8008590:	0800892f 	.word	0x0800892f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800859c:	b29b      	uxth	r3, r3
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	f000 808b 	beq.w	80086c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80085b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f000 8086 	beq.w	80086c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	330c      	adds	r3, #12
 80085c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c4:	e853 3f00 	ldrex	r3, [r3]
 80085c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	330c      	adds	r3, #12
 80085da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80085de:	647a      	str	r2, [r7, #68]	; 0x44
 80085e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085e6:	e841 2300 	strex	r3, r2, [r1]
 80085ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1e3      	bne.n	80085ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	3314      	adds	r3, #20
 80085f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fc:	e853 3f00 	ldrex	r3, [r3]
 8008600:	623b      	str	r3, [r7, #32]
   return(result);
 8008602:	6a3b      	ldr	r3, [r7, #32]
 8008604:	f023 0301 	bic.w	r3, r3, #1
 8008608:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	3314      	adds	r3, #20
 8008612:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008616:	633a      	str	r2, [r7, #48]	; 0x30
 8008618:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800861c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800861e:	e841 2300 	strex	r3, r2, [r1]
 8008622:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1e3      	bne.n	80085f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2220      	movs	r2, #32
 800862e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	330c      	adds	r3, #12
 800863e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	e853 3f00 	ldrex	r3, [r3]
 8008646:	60fb      	str	r3, [r7, #12]
   return(result);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f023 0310 	bic.w	r3, r3, #16
 800864e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	330c      	adds	r3, #12
 8008658:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800865c:	61fa      	str	r2, [r7, #28]
 800865e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008660:	69b9      	ldr	r1, [r7, #24]
 8008662:	69fa      	ldr	r2, [r7, #28]
 8008664:	e841 2300 	strex	r3, r2, [r1]
 8008668:	617b      	str	r3, [r7, #20]
   return(result);
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1e3      	bne.n	8008638 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008670:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008674:	4619      	mov	r1, r3
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f83e 	bl	80086f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800867c:	e023      	b.n	80086c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800867e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008686:	2b00      	cmp	r3, #0
 8008688:	d009      	beq.n	800869e <HAL_UART_IRQHandler+0x4ea>
 800868a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800868e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008692:	2b00      	cmp	r3, #0
 8008694:	d003      	beq.n	800869e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 f95d 	bl	8008956 <UART_Transmit_IT>
    return;
 800869c:	e014      	b.n	80086c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800869e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00e      	beq.n	80086c8 <HAL_UART_IRQHandler+0x514>
 80086aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d008      	beq.n	80086c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f99d 	bl	80089f6 <UART_EndTransmit_IT>
    return;
 80086bc:	e004      	b.n	80086c8 <HAL_UART_IRQHandler+0x514>
    return;
 80086be:	bf00      	nop
 80086c0:	e002      	b.n	80086c8 <HAL_UART_IRQHandler+0x514>
      return;
 80086c2:	bf00      	nop
 80086c4:	e000      	b.n	80086c8 <HAL_UART_IRQHandler+0x514>
      return;
 80086c6:	bf00      	nop
  }
}
 80086c8:	37e8      	adds	r7, #232	; 0xe8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop

080086d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80086d8:	bf00      	nop
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	460b      	mov	r3, r1
 8008702:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008704:	bf00      	nop
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b090      	sub	sp, #64	; 0x40
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	603b      	str	r3, [r7, #0]
 800871c:	4613      	mov	r3, r2
 800871e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008720:	e050      	b.n	80087c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008728:	d04c      	beq.n	80087c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800872a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800872c:	2b00      	cmp	r3, #0
 800872e:	d007      	beq.n	8008740 <UART_WaitOnFlagUntilTimeout+0x30>
 8008730:	f7fb f9be 	bl	8003ab0 <HAL_GetTick>
 8008734:	4602      	mov	r2, r0
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800873c:	429a      	cmp	r2, r3
 800873e:	d241      	bcs.n	80087c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	330c      	adds	r3, #12
 8008746:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874a:	e853 3f00 	ldrex	r3, [r3]
 800874e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008752:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	330c      	adds	r3, #12
 800875e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008760:	637a      	str	r2, [r7, #52]	; 0x34
 8008762:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008764:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008768:	e841 2300 	strex	r3, r2, [r1]
 800876c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800876e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1e5      	bne.n	8008740 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	3314      	adds	r3, #20
 800877a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	613b      	str	r3, [r7, #16]
   return(result);
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	f023 0301 	bic.w	r3, r3, #1
 800878a:	63bb      	str	r3, [r7, #56]	; 0x38
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	3314      	adds	r3, #20
 8008792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008794:	623a      	str	r2, [r7, #32]
 8008796:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	69f9      	ldr	r1, [r7, #28]
 800879a:	6a3a      	ldr	r2, [r7, #32]
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e5      	bne.n	8008774 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2220      	movs	r2, #32
 80087ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2220      	movs	r2, #32
 80087b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80087c0:	2303      	movs	r3, #3
 80087c2:	e00f      	b.n	80087e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	4013      	ands	r3, r2
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	bf0c      	ite	eq
 80087d4:	2301      	moveq	r3, #1
 80087d6:	2300      	movne	r3, #0
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	461a      	mov	r2, r3
 80087dc:	79fb      	ldrb	r3, [r7, #7]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d09f      	beq.n	8008722 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3740      	adds	r7, #64	; 0x40
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b085      	sub	sp, #20
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	4613      	mov	r3, r2
 80087f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	68ba      	ldr	r2, [r7, #8]
 80087fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	88fa      	ldrh	r2, [r7, #6]
 8008804:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	88fa      	ldrh	r2, [r7, #6]
 800880a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2200      	movs	r2, #0
 8008810:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2222      	movs	r2, #34	; 0x22
 8008816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d007      	beq.n	800883a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	68da      	ldr	r2, [r3, #12]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008838:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	695a      	ldr	r2, [r3, #20]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f042 0201 	orr.w	r2, r2, #1
 8008848:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68da      	ldr	r2, [r3, #12]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f042 0220 	orr.w	r2, r2, #32
 8008858:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	3714      	adds	r7, #20
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008868:	b480      	push	{r7}
 800886a:	b095      	sub	sp, #84	; 0x54
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	330c      	adds	r3, #12
 8008876:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800887a:	e853 3f00 	ldrex	r3, [r3]
 800887e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008882:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	330c      	adds	r3, #12
 800888e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008890:	643a      	str	r2, [r7, #64]	; 0x40
 8008892:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008894:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008896:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008898:	e841 2300 	strex	r3, r2, [r1]
 800889c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800889e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d1e5      	bne.n	8008870 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	3314      	adds	r3, #20
 80088aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ac:	6a3b      	ldr	r3, [r7, #32]
 80088ae:	e853 3f00 	ldrex	r3, [r3]
 80088b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	f023 0301 	bic.w	r3, r3, #1
 80088ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	3314      	adds	r3, #20
 80088c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088cc:	e841 2300 	strex	r3, r2, [r1]
 80088d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1e5      	bne.n	80088a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d119      	bne.n	8008914 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	330c      	adds	r3, #12
 80088e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	e853 3f00 	ldrex	r3, [r3]
 80088ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	f023 0310 	bic.w	r3, r3, #16
 80088f6:	647b      	str	r3, [r7, #68]	; 0x44
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	330c      	adds	r3, #12
 80088fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008900:	61ba      	str	r2, [r7, #24]
 8008902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008904:	6979      	ldr	r1, [r7, #20]
 8008906:	69ba      	ldr	r2, [r7, #24]
 8008908:	e841 2300 	strex	r3, r2, [r1]
 800890c:	613b      	str	r3, [r7, #16]
   return(result);
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1e5      	bne.n	80088e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2220      	movs	r2, #32
 8008918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008922:	bf00      	nop
 8008924:	3754      	adds	r7, #84	; 0x54
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr

0800892e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b084      	sub	sp, #16
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f7ff fecb 	bl	80086e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800894e:	bf00      	nop
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008956:	b480      	push	{r7}
 8008958:	b085      	sub	sp, #20
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008964:	b2db      	uxtb	r3, r3
 8008966:	2b21      	cmp	r3, #33	; 0x21
 8008968:	d13e      	bne.n	80089e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008972:	d114      	bne.n	800899e <UART_Transmit_IT+0x48>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d110      	bne.n	800899e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a1b      	ldr	r3, [r3, #32]
 8008980:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	881b      	ldrh	r3, [r3, #0]
 8008986:	461a      	mov	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008990:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a1b      	ldr	r3, [r3, #32]
 8008996:	1c9a      	adds	r2, r3, #2
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	621a      	str	r2, [r3, #32]
 800899c:	e008      	b.n	80089b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a1b      	ldr	r3, [r3, #32]
 80089a2:	1c59      	adds	r1, r3, #1
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	6211      	str	r1, [r2, #32]
 80089a8:	781a      	ldrb	r2, [r3, #0]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	3b01      	subs	r3, #1
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	4619      	mov	r1, r3
 80089be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10f      	bne.n	80089e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	68da      	ldr	r2, [r3, #12]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68da      	ldr	r2, [r3, #12]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80089e4:	2300      	movs	r3, #0
 80089e6:	e000      	b.n	80089ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80089e8:	2302      	movs	r3, #2
  }
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3714      	adds	r7, #20
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b082      	sub	sp, #8
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68da      	ldr	r2, [r3, #12]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2220      	movs	r2, #32
 8008a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f7ff fe5a 	bl	80086d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3708      	adds	r7, #8
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b08c      	sub	sp, #48	; 0x30
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	2b22      	cmp	r3, #34	; 0x22
 8008a38:	f040 80ab 	bne.w	8008b92 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a44:	d117      	bne.n	8008a76 <UART_Receive_IT+0x50>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d113      	bne.n	8008a76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a56:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a64:	b29a      	uxth	r2, r3
 8008a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a6e:	1c9a      	adds	r2, r3, #2
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	629a      	str	r2, [r3, #40]	; 0x28
 8008a74:	e026      	b.n	8008ac4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a88:	d007      	beq.n	8008a9a <UART_Receive_IT+0x74>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d10a      	bne.n	8008aa8 <UART_Receive_IT+0x82>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	691b      	ldr	r3, [r3, #16]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d106      	bne.n	8008aa8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa4:	701a      	strb	r2, [r3, #0]
 8008aa6:	e008      	b.n	8008aba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ab4:	b2da      	uxtb	r2, r3
 8008ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008abe:	1c5a      	adds	r2, r3, #1
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	3b01      	subs	r3, #1
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d15a      	bne.n	8008b8e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	68da      	ldr	r2, [r3, #12]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f022 0220 	bic.w	r2, r2, #32
 8008ae6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68da      	ldr	r2, [r3, #12]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008af6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	695a      	ldr	r2, [r3, #20]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f022 0201 	bic.w	r2, r2, #1
 8008b06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2220      	movs	r2, #32
 8008b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d135      	bne.n	8008b84 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	330c      	adds	r3, #12
 8008b24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	e853 3f00 	ldrex	r3, [r3]
 8008b2c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	f023 0310 	bic.w	r3, r3, #16
 8008b34:	627b      	str	r3, [r7, #36]	; 0x24
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	330c      	adds	r3, #12
 8008b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b3e:	623a      	str	r2, [r7, #32]
 8008b40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b42:	69f9      	ldr	r1, [r7, #28]
 8008b44:	6a3a      	ldr	r2, [r7, #32]
 8008b46:	e841 2300 	strex	r3, r2, [r1]
 8008b4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1e5      	bne.n	8008b1e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 0310 	and.w	r3, r3, #16
 8008b5c:	2b10      	cmp	r3, #16
 8008b5e:	d10a      	bne.n	8008b76 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b60:	2300      	movs	r3, #0
 8008b62:	60fb      	str	r3, [r7, #12]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	60fb      	str	r3, [r7, #12]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	60fb      	str	r3, [r7, #12]
 8008b74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f7ff fdbb 	bl	80086f8 <HAL_UARTEx_RxEventCallback>
 8008b82:	e002      	b.n	8008b8a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f7fa f921 	bl	8002dcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	e002      	b.n	8008b94 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	e000      	b.n	8008b94 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008b92:	2302      	movs	r3, #2
  }
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3730      	adds	r7, #48	; 0x30
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ba0:	b0c0      	sub	sp, #256	; 0x100
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb8:	68d9      	ldr	r1, [r3, #12]
 8008bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	ea40 0301 	orr.w	r3, r0, r1
 8008bc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bca:	689a      	ldr	r2, [r3, #8]
 8008bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	431a      	orrs	r2, r3
 8008bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bd8:	695b      	ldr	r3, [r3, #20]
 8008bda:	431a      	orrs	r2, r3
 8008bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008be0:	69db      	ldr	r3, [r3, #28]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008bf4:	f021 010c 	bic.w	r1, r1, #12
 8008bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c02:	430b      	orrs	r3, r1
 8008c04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	695b      	ldr	r3, [r3, #20]
 8008c0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c16:	6999      	ldr	r1, [r3, #24]
 8008c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	ea40 0301 	orr.w	r3, r0, r1
 8008c22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	4b8f      	ldr	r3, [pc, #572]	; (8008e68 <UART_SetConfig+0x2cc>)
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d005      	beq.n	8008c3c <UART_SetConfig+0xa0>
 8008c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	4b8d      	ldr	r3, [pc, #564]	; (8008e6c <UART_SetConfig+0x2d0>)
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d104      	bne.n	8008c46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c3c:	f7fd fec0 	bl	80069c0 <HAL_RCC_GetPCLK2Freq>
 8008c40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008c44:	e003      	b.n	8008c4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c46:	f7fd fea7 	bl	8006998 <HAL_RCC_GetPCLK1Freq>
 8008c4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c52:	69db      	ldr	r3, [r3, #28]
 8008c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c58:	f040 810c 	bne.w	8008e74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c60:	2200      	movs	r2, #0
 8008c62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008c6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008c6e:	4622      	mov	r2, r4
 8008c70:	462b      	mov	r3, r5
 8008c72:	1891      	adds	r1, r2, r2
 8008c74:	65b9      	str	r1, [r7, #88]	; 0x58
 8008c76:	415b      	adcs	r3, r3
 8008c78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008c7e:	4621      	mov	r1, r4
 8008c80:	eb12 0801 	adds.w	r8, r2, r1
 8008c84:	4629      	mov	r1, r5
 8008c86:	eb43 0901 	adc.w	r9, r3, r1
 8008c8a:	f04f 0200 	mov.w	r2, #0
 8008c8e:	f04f 0300 	mov.w	r3, #0
 8008c92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c9e:	4690      	mov	r8, r2
 8008ca0:	4699      	mov	r9, r3
 8008ca2:	4623      	mov	r3, r4
 8008ca4:	eb18 0303 	adds.w	r3, r8, r3
 8008ca8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008cac:	462b      	mov	r3, r5
 8008cae:	eb49 0303 	adc.w	r3, r9, r3
 8008cb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008cc2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008cc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008cca:	460b      	mov	r3, r1
 8008ccc:	18db      	adds	r3, r3, r3
 8008cce:	653b      	str	r3, [r7, #80]	; 0x50
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	eb42 0303 	adc.w	r3, r2, r3
 8008cd6:	657b      	str	r3, [r7, #84]	; 0x54
 8008cd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008cdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008ce0:	f7f7 fdd4 	bl	800088c <__aeabi_uldivmod>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	4b61      	ldr	r3, [pc, #388]	; (8008e70 <UART_SetConfig+0x2d4>)
 8008cea:	fba3 2302 	umull	r2, r3, r3, r2
 8008cee:	095b      	lsrs	r3, r3, #5
 8008cf0:	011c      	lsls	r4, r3, #4
 8008cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008cfc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008d00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008d04:	4642      	mov	r2, r8
 8008d06:	464b      	mov	r3, r9
 8008d08:	1891      	adds	r1, r2, r2
 8008d0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8008d0c:	415b      	adcs	r3, r3
 8008d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008d14:	4641      	mov	r1, r8
 8008d16:	eb12 0a01 	adds.w	sl, r2, r1
 8008d1a:	4649      	mov	r1, r9
 8008d1c:	eb43 0b01 	adc.w	fp, r3, r1
 8008d20:	f04f 0200 	mov.w	r2, #0
 8008d24:	f04f 0300 	mov.w	r3, #0
 8008d28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d34:	4692      	mov	sl, r2
 8008d36:	469b      	mov	fp, r3
 8008d38:	4643      	mov	r3, r8
 8008d3a:	eb1a 0303 	adds.w	r3, sl, r3
 8008d3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d42:	464b      	mov	r3, r9
 8008d44:	eb4b 0303 	adc.w	r3, fp, r3
 8008d48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008d5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008d60:	460b      	mov	r3, r1
 8008d62:	18db      	adds	r3, r3, r3
 8008d64:	643b      	str	r3, [r7, #64]	; 0x40
 8008d66:	4613      	mov	r3, r2
 8008d68:	eb42 0303 	adc.w	r3, r2, r3
 8008d6c:	647b      	str	r3, [r7, #68]	; 0x44
 8008d6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008d72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008d76:	f7f7 fd89 	bl	800088c <__aeabi_uldivmod>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	4611      	mov	r1, r2
 8008d80:	4b3b      	ldr	r3, [pc, #236]	; (8008e70 <UART_SetConfig+0x2d4>)
 8008d82:	fba3 2301 	umull	r2, r3, r3, r1
 8008d86:	095b      	lsrs	r3, r3, #5
 8008d88:	2264      	movs	r2, #100	; 0x64
 8008d8a:	fb02 f303 	mul.w	r3, r2, r3
 8008d8e:	1acb      	subs	r3, r1, r3
 8008d90:	00db      	lsls	r3, r3, #3
 8008d92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008d96:	4b36      	ldr	r3, [pc, #216]	; (8008e70 <UART_SetConfig+0x2d4>)
 8008d98:	fba3 2302 	umull	r2, r3, r3, r2
 8008d9c:	095b      	lsrs	r3, r3, #5
 8008d9e:	005b      	lsls	r3, r3, #1
 8008da0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008da4:	441c      	add	r4, r3
 8008da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008daa:	2200      	movs	r2, #0
 8008dac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008db0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008db4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008db8:	4642      	mov	r2, r8
 8008dba:	464b      	mov	r3, r9
 8008dbc:	1891      	adds	r1, r2, r2
 8008dbe:	63b9      	str	r1, [r7, #56]	; 0x38
 8008dc0:	415b      	adcs	r3, r3
 8008dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008dc8:	4641      	mov	r1, r8
 8008dca:	1851      	adds	r1, r2, r1
 8008dcc:	6339      	str	r1, [r7, #48]	; 0x30
 8008dce:	4649      	mov	r1, r9
 8008dd0:	414b      	adcs	r3, r1
 8008dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8008dd4:	f04f 0200 	mov.w	r2, #0
 8008dd8:	f04f 0300 	mov.w	r3, #0
 8008ddc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008de0:	4659      	mov	r1, fp
 8008de2:	00cb      	lsls	r3, r1, #3
 8008de4:	4651      	mov	r1, sl
 8008de6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008dea:	4651      	mov	r1, sl
 8008dec:	00ca      	lsls	r2, r1, #3
 8008dee:	4610      	mov	r0, r2
 8008df0:	4619      	mov	r1, r3
 8008df2:	4603      	mov	r3, r0
 8008df4:	4642      	mov	r2, r8
 8008df6:	189b      	adds	r3, r3, r2
 8008df8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008dfc:	464b      	mov	r3, r9
 8008dfe:	460a      	mov	r2, r1
 8008e00:	eb42 0303 	adc.w	r3, r2, r3
 8008e04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008e18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	18db      	adds	r3, r3, r3
 8008e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e22:	4613      	mov	r3, r2
 8008e24:	eb42 0303 	adc.w	r3, r2, r3
 8008e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008e32:	f7f7 fd2b 	bl	800088c <__aeabi_uldivmod>
 8008e36:	4602      	mov	r2, r0
 8008e38:	460b      	mov	r3, r1
 8008e3a:	4b0d      	ldr	r3, [pc, #52]	; (8008e70 <UART_SetConfig+0x2d4>)
 8008e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8008e40:	095b      	lsrs	r3, r3, #5
 8008e42:	2164      	movs	r1, #100	; 0x64
 8008e44:	fb01 f303 	mul.w	r3, r1, r3
 8008e48:	1ad3      	subs	r3, r2, r3
 8008e4a:	00db      	lsls	r3, r3, #3
 8008e4c:	3332      	adds	r3, #50	; 0x32
 8008e4e:	4a08      	ldr	r2, [pc, #32]	; (8008e70 <UART_SetConfig+0x2d4>)
 8008e50:	fba2 2303 	umull	r2, r3, r2, r3
 8008e54:	095b      	lsrs	r3, r3, #5
 8008e56:	f003 0207 	and.w	r2, r3, #7
 8008e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4422      	add	r2, r4
 8008e62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008e64:	e105      	b.n	8009072 <UART_SetConfig+0x4d6>
 8008e66:	bf00      	nop
 8008e68:	40011000 	.word	0x40011000
 8008e6c:	40011400 	.word	0x40011400
 8008e70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008e7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008e82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008e86:	4642      	mov	r2, r8
 8008e88:	464b      	mov	r3, r9
 8008e8a:	1891      	adds	r1, r2, r2
 8008e8c:	6239      	str	r1, [r7, #32]
 8008e8e:	415b      	adcs	r3, r3
 8008e90:	627b      	str	r3, [r7, #36]	; 0x24
 8008e92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e96:	4641      	mov	r1, r8
 8008e98:	1854      	adds	r4, r2, r1
 8008e9a:	4649      	mov	r1, r9
 8008e9c:	eb43 0501 	adc.w	r5, r3, r1
 8008ea0:	f04f 0200 	mov.w	r2, #0
 8008ea4:	f04f 0300 	mov.w	r3, #0
 8008ea8:	00eb      	lsls	r3, r5, #3
 8008eaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008eae:	00e2      	lsls	r2, r4, #3
 8008eb0:	4614      	mov	r4, r2
 8008eb2:	461d      	mov	r5, r3
 8008eb4:	4643      	mov	r3, r8
 8008eb6:	18e3      	adds	r3, r4, r3
 8008eb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008ebc:	464b      	mov	r3, r9
 8008ebe:	eb45 0303 	adc.w	r3, r5, r3
 8008ec2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ed2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008ed6:	f04f 0200 	mov.w	r2, #0
 8008eda:	f04f 0300 	mov.w	r3, #0
 8008ede:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008ee2:	4629      	mov	r1, r5
 8008ee4:	008b      	lsls	r3, r1, #2
 8008ee6:	4621      	mov	r1, r4
 8008ee8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008eec:	4621      	mov	r1, r4
 8008eee:	008a      	lsls	r2, r1, #2
 8008ef0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008ef4:	f7f7 fcca 	bl	800088c <__aeabi_uldivmod>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	460b      	mov	r3, r1
 8008efc:	4b60      	ldr	r3, [pc, #384]	; (8009080 <UART_SetConfig+0x4e4>)
 8008efe:	fba3 2302 	umull	r2, r3, r3, r2
 8008f02:	095b      	lsrs	r3, r3, #5
 8008f04:	011c      	lsls	r4, r3, #4
 8008f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008f10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008f14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008f18:	4642      	mov	r2, r8
 8008f1a:	464b      	mov	r3, r9
 8008f1c:	1891      	adds	r1, r2, r2
 8008f1e:	61b9      	str	r1, [r7, #24]
 8008f20:	415b      	adcs	r3, r3
 8008f22:	61fb      	str	r3, [r7, #28]
 8008f24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f28:	4641      	mov	r1, r8
 8008f2a:	1851      	adds	r1, r2, r1
 8008f2c:	6139      	str	r1, [r7, #16]
 8008f2e:	4649      	mov	r1, r9
 8008f30:	414b      	adcs	r3, r1
 8008f32:	617b      	str	r3, [r7, #20]
 8008f34:	f04f 0200 	mov.w	r2, #0
 8008f38:	f04f 0300 	mov.w	r3, #0
 8008f3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f40:	4659      	mov	r1, fp
 8008f42:	00cb      	lsls	r3, r1, #3
 8008f44:	4651      	mov	r1, sl
 8008f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f4a:	4651      	mov	r1, sl
 8008f4c:	00ca      	lsls	r2, r1, #3
 8008f4e:	4610      	mov	r0, r2
 8008f50:	4619      	mov	r1, r3
 8008f52:	4603      	mov	r3, r0
 8008f54:	4642      	mov	r2, r8
 8008f56:	189b      	adds	r3, r3, r2
 8008f58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f5c:	464b      	mov	r3, r9
 8008f5e:	460a      	mov	r2, r1
 8008f60:	eb42 0303 	adc.w	r3, r2, r3
 8008f64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008f74:	f04f 0200 	mov.w	r2, #0
 8008f78:	f04f 0300 	mov.w	r3, #0
 8008f7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008f80:	4649      	mov	r1, r9
 8008f82:	008b      	lsls	r3, r1, #2
 8008f84:	4641      	mov	r1, r8
 8008f86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f8a:	4641      	mov	r1, r8
 8008f8c:	008a      	lsls	r2, r1, #2
 8008f8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008f92:	f7f7 fc7b 	bl	800088c <__aeabi_uldivmod>
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	4b39      	ldr	r3, [pc, #228]	; (8009080 <UART_SetConfig+0x4e4>)
 8008f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8008fa0:	095b      	lsrs	r3, r3, #5
 8008fa2:	2164      	movs	r1, #100	; 0x64
 8008fa4:	fb01 f303 	mul.w	r3, r1, r3
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	011b      	lsls	r3, r3, #4
 8008fac:	3332      	adds	r3, #50	; 0x32
 8008fae:	4a34      	ldr	r2, [pc, #208]	; (8009080 <UART_SetConfig+0x4e4>)
 8008fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8008fb4:	095b      	lsrs	r3, r3, #5
 8008fb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fba:	441c      	add	r4, r3
 8008fbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	673b      	str	r3, [r7, #112]	; 0x70
 8008fc4:	677a      	str	r2, [r7, #116]	; 0x74
 8008fc6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008fca:	4642      	mov	r2, r8
 8008fcc:	464b      	mov	r3, r9
 8008fce:	1891      	adds	r1, r2, r2
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	415b      	adcs	r3, r3
 8008fd4:	60fb      	str	r3, [r7, #12]
 8008fd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008fda:	4641      	mov	r1, r8
 8008fdc:	1851      	adds	r1, r2, r1
 8008fde:	6039      	str	r1, [r7, #0]
 8008fe0:	4649      	mov	r1, r9
 8008fe2:	414b      	adcs	r3, r1
 8008fe4:	607b      	str	r3, [r7, #4]
 8008fe6:	f04f 0200 	mov.w	r2, #0
 8008fea:	f04f 0300 	mov.w	r3, #0
 8008fee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008ff2:	4659      	mov	r1, fp
 8008ff4:	00cb      	lsls	r3, r1, #3
 8008ff6:	4651      	mov	r1, sl
 8008ff8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ffc:	4651      	mov	r1, sl
 8008ffe:	00ca      	lsls	r2, r1, #3
 8009000:	4610      	mov	r0, r2
 8009002:	4619      	mov	r1, r3
 8009004:	4603      	mov	r3, r0
 8009006:	4642      	mov	r2, r8
 8009008:	189b      	adds	r3, r3, r2
 800900a:	66bb      	str	r3, [r7, #104]	; 0x68
 800900c:	464b      	mov	r3, r9
 800900e:	460a      	mov	r2, r1
 8009010:	eb42 0303 	adc.w	r3, r2, r3
 8009014:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	663b      	str	r3, [r7, #96]	; 0x60
 8009020:	667a      	str	r2, [r7, #100]	; 0x64
 8009022:	f04f 0200 	mov.w	r2, #0
 8009026:	f04f 0300 	mov.w	r3, #0
 800902a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800902e:	4649      	mov	r1, r9
 8009030:	008b      	lsls	r3, r1, #2
 8009032:	4641      	mov	r1, r8
 8009034:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009038:	4641      	mov	r1, r8
 800903a:	008a      	lsls	r2, r1, #2
 800903c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009040:	f7f7 fc24 	bl	800088c <__aeabi_uldivmod>
 8009044:	4602      	mov	r2, r0
 8009046:	460b      	mov	r3, r1
 8009048:	4b0d      	ldr	r3, [pc, #52]	; (8009080 <UART_SetConfig+0x4e4>)
 800904a:	fba3 1302 	umull	r1, r3, r3, r2
 800904e:	095b      	lsrs	r3, r3, #5
 8009050:	2164      	movs	r1, #100	; 0x64
 8009052:	fb01 f303 	mul.w	r3, r1, r3
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	011b      	lsls	r3, r3, #4
 800905a:	3332      	adds	r3, #50	; 0x32
 800905c:	4a08      	ldr	r2, [pc, #32]	; (8009080 <UART_SetConfig+0x4e4>)
 800905e:	fba2 2303 	umull	r2, r3, r2, r3
 8009062:	095b      	lsrs	r3, r3, #5
 8009064:	f003 020f 	and.w	r2, r3, #15
 8009068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4422      	add	r2, r4
 8009070:	609a      	str	r2, [r3, #8]
}
 8009072:	bf00      	nop
 8009074:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009078:	46bd      	mov	sp, r7
 800907a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800907e:	bf00      	nop
 8009080:	51eb851f 	.word	0x51eb851f

08009084 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009084:	b084      	sub	sp, #16
 8009086:	b580      	push	{r7, lr}
 8009088:	b084      	sub	sp, #16
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	f107 001c 	add.w	r0, r7, #28
 8009092:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009098:	2b01      	cmp	r3, #1
 800909a:	d122      	bne.n	80090e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80090b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80090c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d105      	bne.n	80090d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 f9c0 	bl	800945c <USB_CoreReset>
 80090dc:	4603      	mov	r3, r0
 80090de:	73fb      	strb	r3, [r7, #15]
 80090e0:	e01a      	b.n	8009118 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f9b4 	bl	800945c <USB_CoreReset>
 80090f4:	4603      	mov	r3, r0
 80090f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80090f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d106      	bne.n	800910c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009102:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	639a      	str	r2, [r3, #56]	; 0x38
 800910a:	e005      	b.n	8009118 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009110:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911a:	2b01      	cmp	r3, #1
 800911c:	d10b      	bne.n	8009136 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	f043 0206 	orr.w	r2, r3, #6
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	f043 0220 	orr.w	r2, r3, #32
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009136:	7bfb      	ldrb	r3, [r7, #15]
}
 8009138:	4618      	mov	r0, r3
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009142:	b004      	add	sp, #16
 8009144:	4770      	bx	lr

08009146 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009146:	b480      	push	{r7}
 8009148:	b083      	sub	sp, #12
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	f043 0201 	orr.w	r2, r3, #1
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	f023 0201 	bic.w	r2, r3, #1
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	370c      	adds	r7, #12
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr

0800918a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b084      	sub	sp, #16
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
 8009192:	460b      	mov	r3, r1
 8009194:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009196:	2300      	movs	r3, #0
 8009198:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80091a6:	78fb      	ldrb	r3, [r7, #3]
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d115      	bne.n	80091d8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80091b8:	2001      	movs	r0, #1
 80091ba:	f7fa fc85 	bl	8003ac8 <HAL_Delay>
      ms++;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	3301      	adds	r3, #1
 80091c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 f93a 	bl	800943e <USB_GetMode>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d01e      	beq.n	800920e <USB_SetCurrentMode+0x84>
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2b31      	cmp	r3, #49	; 0x31
 80091d4:	d9f0      	bls.n	80091b8 <USB_SetCurrentMode+0x2e>
 80091d6:	e01a      	b.n	800920e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80091d8:	78fb      	ldrb	r3, [r7, #3]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d115      	bne.n	800920a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80091ea:	2001      	movs	r0, #1
 80091ec:	f7fa fc6c 	bl	8003ac8 <HAL_Delay>
      ms++;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	3301      	adds	r3, #1
 80091f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 f921 	bl	800943e <USB_GetMode>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d005      	beq.n	800920e <USB_SetCurrentMode+0x84>
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2b31      	cmp	r3, #49	; 0x31
 8009206:	d9f0      	bls.n	80091ea <USB_SetCurrentMode+0x60>
 8009208:	e001      	b.n	800920e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800920a:	2301      	movs	r3, #1
 800920c:	e005      	b.n	800921a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2b32      	cmp	r3, #50	; 0x32
 8009212:	d101      	bne.n	8009218 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	e000      	b.n	800921a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
	...

08009224 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009224:	b480      	push	{r7}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800922e:	2300      	movs	r3, #0
 8009230:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	3301      	adds	r3, #1
 8009236:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	4a13      	ldr	r2, [pc, #76]	; (8009288 <USB_FlushTxFifo+0x64>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d901      	bls.n	8009244 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009240:	2303      	movs	r3, #3
 8009242:	e01b      	b.n	800927c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	691b      	ldr	r3, [r3, #16]
 8009248:	2b00      	cmp	r3, #0
 800924a:	daf2      	bge.n	8009232 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800924c:	2300      	movs	r3, #0
 800924e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	019b      	lsls	r3, r3, #6
 8009254:	f043 0220 	orr.w	r2, r3, #32
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	3301      	adds	r3, #1
 8009260:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	4a08      	ldr	r2, [pc, #32]	; (8009288 <USB_FlushTxFifo+0x64>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d901      	bls.n	800926e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800926a:	2303      	movs	r3, #3
 800926c:	e006      	b.n	800927c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	f003 0320 	and.w	r3, r3, #32
 8009276:	2b20      	cmp	r3, #32
 8009278:	d0f0      	beq.n	800925c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3714      	adds	r7, #20
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr
 8009288:	00030d40 	.word	0x00030d40

0800928c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009294:	2300      	movs	r3, #0
 8009296:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	3301      	adds	r3, #1
 800929c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	4a11      	ldr	r2, [pc, #68]	; (80092e8 <USB_FlushRxFifo+0x5c>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d901      	bls.n	80092aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80092a6:	2303      	movs	r3, #3
 80092a8:	e018      	b.n	80092dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	daf2      	bge.n	8009298 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80092b2:	2300      	movs	r3, #0
 80092b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2210      	movs	r2, #16
 80092ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	3301      	adds	r3, #1
 80092c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	4a08      	ldr	r2, [pc, #32]	; (80092e8 <USB_FlushRxFifo+0x5c>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d901      	bls.n	80092ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80092ca:	2303      	movs	r3, #3
 80092cc:	e006      	b.n	80092dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	f003 0310 	and.w	r3, r3, #16
 80092d6:	2b10      	cmp	r3, #16
 80092d8:	d0f0      	beq.n	80092bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3714      	adds	r7, #20
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	00030d40 	.word	0x00030d40

080092ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b089      	sub	sp, #36	; 0x24
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	4611      	mov	r1, r2
 80092f8:	461a      	mov	r2, r3
 80092fa:	460b      	mov	r3, r1
 80092fc:	71fb      	strb	r3, [r7, #7]
 80092fe:	4613      	mov	r3, r2
 8009300:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800930a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800930e:	2b00      	cmp	r3, #0
 8009310:	d123      	bne.n	800935a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009312:	88bb      	ldrh	r3, [r7, #4]
 8009314:	3303      	adds	r3, #3
 8009316:	089b      	lsrs	r3, r3, #2
 8009318:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800931a:	2300      	movs	r3, #0
 800931c:	61bb      	str	r3, [r7, #24]
 800931e:	e018      	b.n	8009352 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009320:	79fb      	ldrb	r3, [r7, #7]
 8009322:	031a      	lsls	r2, r3, #12
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	4413      	add	r3, r2
 8009328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800932c:	461a      	mov	r2, r3
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	3301      	adds	r3, #1
 8009338:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	3301      	adds	r3, #1
 800933e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	3301      	adds	r3, #1
 8009344:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	3301      	adds	r3, #1
 800934a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	3301      	adds	r3, #1
 8009350:	61bb      	str	r3, [r7, #24]
 8009352:	69ba      	ldr	r2, [r7, #24]
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	429a      	cmp	r2, r3
 8009358:	d3e2      	bcc.n	8009320 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	4618      	mov	r0, r3
 800935e:	3724      	adds	r7, #36	; 0x24
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009368:	b480      	push	{r7}
 800936a:	b08b      	sub	sp, #44	; 0x2c
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	4613      	mov	r3, r2
 8009374:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800937e:	88fb      	ldrh	r3, [r7, #6]
 8009380:	089b      	lsrs	r3, r3, #2
 8009382:	b29b      	uxth	r3, r3
 8009384:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009386:	88fb      	ldrh	r3, [r7, #6]
 8009388:	f003 0303 	and.w	r3, r3, #3
 800938c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800938e:	2300      	movs	r3, #0
 8009390:	623b      	str	r3, [r7, #32]
 8009392:	e014      	b.n	80093be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009394:	69bb      	ldr	r3, [r7, #24]
 8009396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	601a      	str	r2, [r3, #0]
    pDest++;
 80093a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a2:	3301      	adds	r3, #1
 80093a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80093a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a8:	3301      	adds	r3, #1
 80093aa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80093ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ae:	3301      	adds	r3, #1
 80093b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80093b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b4:	3301      	adds	r3, #1
 80093b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80093b8:	6a3b      	ldr	r3, [r7, #32]
 80093ba:	3301      	adds	r3, #1
 80093bc:	623b      	str	r3, [r7, #32]
 80093be:	6a3a      	ldr	r2, [r7, #32]
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d3e6      	bcc.n	8009394 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80093c6:	8bfb      	ldrh	r3, [r7, #30]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d01e      	beq.n	800940a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80093cc:	2300      	movs	r3, #0
 80093ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093d6:	461a      	mov	r2, r3
 80093d8:	f107 0310 	add.w	r3, r7, #16
 80093dc:	6812      	ldr	r2, [r2, #0]
 80093de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80093e0:	693a      	ldr	r2, [r7, #16]
 80093e2:	6a3b      	ldr	r3, [r7, #32]
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	00db      	lsls	r3, r3, #3
 80093e8:	fa22 f303 	lsr.w	r3, r2, r3
 80093ec:	b2da      	uxtb	r2, r3
 80093ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f0:	701a      	strb	r2, [r3, #0]
      i++;
 80093f2:	6a3b      	ldr	r3, [r7, #32]
 80093f4:	3301      	adds	r3, #1
 80093f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80093f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fa:	3301      	adds	r3, #1
 80093fc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80093fe:	8bfb      	ldrh	r3, [r7, #30]
 8009400:	3b01      	subs	r3, #1
 8009402:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009404:	8bfb      	ldrh	r3, [r7, #30]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d1ea      	bne.n	80093e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800940a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800940c:	4618      	mov	r0, r3
 800940e:	372c      	adds	r7, #44	; 0x2c
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009418:	b480      	push	{r7}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	695b      	ldr	r3, [r3, #20]
 8009424:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	699b      	ldr	r3, [r3, #24]
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	4013      	ands	r3, r2
 800942e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009430:	68fb      	ldr	r3, [r7, #12]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3714      	adds	r7, #20
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800943e:	b480      	push	{r7}
 8009440:	b083      	sub	sp, #12
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	695b      	ldr	r3, [r3, #20]
 800944a:	f003 0301 	and.w	r3, r3, #1
}
 800944e:	4618      	mov	r0, r3
 8009450:	370c      	adds	r7, #12
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr
	...

0800945c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009464:	2300      	movs	r3, #0
 8009466:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	3301      	adds	r3, #1
 800946c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	4a13      	ldr	r2, [pc, #76]	; (80094c0 <USB_CoreReset+0x64>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d901      	bls.n	800947a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009476:	2303      	movs	r3, #3
 8009478:	e01b      	b.n	80094b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	2b00      	cmp	r3, #0
 8009480:	daf2      	bge.n	8009468 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009482:	2300      	movs	r3, #0
 8009484:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	691b      	ldr	r3, [r3, #16]
 800948a:	f043 0201 	orr.w	r2, r3, #1
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	3301      	adds	r3, #1
 8009496:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	4a09      	ldr	r2, [pc, #36]	; (80094c0 <USB_CoreReset+0x64>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d901      	bls.n	80094a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80094a0:	2303      	movs	r3, #3
 80094a2:	e006      	b.n	80094b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	691b      	ldr	r3, [r3, #16]
 80094a8:	f003 0301 	and.w	r3, r3, #1
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d0f0      	beq.n	8009492 <USB_CoreReset+0x36>

  return HAL_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3714      	adds	r7, #20
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	00030d40 	.word	0x00030d40

080094c4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094c4:	b084      	sub	sp, #16
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b086      	sub	sp, #24
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
 80094ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80094d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80094d6:	2300      	movs	r3, #0
 80094d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094e4:	461a      	mov	r2, r3
 80094e6:	2300      	movs	r3, #0
 80094e8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009506:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009516:	2b00      	cmp	r3, #0
 8009518:	d018      	beq.n	800954c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800951a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951c:	2b01      	cmp	r3, #1
 800951e:	d10a      	bne.n	8009536 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800952e:	f043 0304 	orr.w	r3, r3, #4
 8009532:	6013      	str	r3, [r2, #0]
 8009534:	e014      	b.n	8009560 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009544:	f023 0304 	bic.w	r3, r3, #4
 8009548:	6013      	str	r3, [r2, #0]
 800954a:	e009      	b.n	8009560 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800955a:	f023 0304 	bic.w	r3, r3, #4
 800955e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009560:	2110      	movs	r1, #16
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f7ff fe5e 	bl	8009224 <USB_FlushTxFifo>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f7ff fe8a 	bl	800928c <USB_FlushRxFifo>
 8009578:	4603      	mov	r3, r0
 800957a:	2b00      	cmp	r3, #0
 800957c:	d001      	beq.n	8009582 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009582:	2300      	movs	r3, #0
 8009584:	613b      	str	r3, [r7, #16]
 8009586:	e015      	b.n	80095b4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	015a      	lsls	r2, r3, #5
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	4413      	add	r3, r2
 8009590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009594:	461a      	mov	r2, r3
 8009596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800959a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	015a      	lsls	r2, r3, #5
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	4413      	add	r3, r2
 80095a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095a8:	461a      	mov	r2, r3
 80095aa:	2300      	movs	r3, #0
 80095ac:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	3301      	adds	r3, #1
 80095b2:	613b      	str	r3, [r7, #16]
 80095b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b6:	693a      	ldr	r2, [r7, #16]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d3e5      	bcc.n	8009588 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095c8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00b      	beq.n	80095ee <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095dc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4a13      	ldr	r2, [pc, #76]	; (8009630 <USB_HostInit+0x16c>)
 80095e2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	4a13      	ldr	r2, [pc, #76]	; (8009634 <USB_HostInit+0x170>)
 80095e8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80095ec:	e009      	b.n	8009602 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2280      	movs	r2, #128	; 0x80
 80095f2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4a10      	ldr	r2, [pc, #64]	; (8009638 <USB_HostInit+0x174>)
 80095f8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a0f      	ldr	r2, [pc, #60]	; (800963c <USB_HostInit+0x178>)
 80095fe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009604:	2b00      	cmp	r3, #0
 8009606:	d105      	bne.n	8009614 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	699b      	ldr	r3, [r3, #24]
 800960c:	f043 0210 	orr.w	r2, r3, #16
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	699a      	ldr	r2, [r3, #24]
 8009618:	4b09      	ldr	r3, [pc, #36]	; (8009640 <USB_HostInit+0x17c>)
 800961a:	4313      	orrs	r3, r2
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009620:	7dfb      	ldrb	r3, [r7, #23]
}
 8009622:	4618      	mov	r0, r3
 8009624:	3718      	adds	r7, #24
 8009626:	46bd      	mov	sp, r7
 8009628:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800962c:	b004      	add	sp, #16
 800962e:	4770      	bx	lr
 8009630:	01000200 	.word	0x01000200
 8009634:	00e00300 	.word	0x00e00300
 8009638:	00600080 	.word	0x00600080
 800963c:	004000e0 	.word	0x004000e0
 8009640:	a3200008 	.word	0xa3200008

08009644 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	460b      	mov	r3, r1
 800964e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009662:	f023 0303 	bic.w	r3, r3, #3
 8009666:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	78fb      	ldrb	r3, [r7, #3]
 8009672:	f003 0303 	and.w	r3, r3, #3
 8009676:	68f9      	ldr	r1, [r7, #12]
 8009678:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800967c:	4313      	orrs	r3, r2
 800967e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009680:	78fb      	ldrb	r3, [r7, #3]
 8009682:	2b01      	cmp	r3, #1
 8009684:	d107      	bne.n	8009696 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800968c:	461a      	mov	r2, r3
 800968e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009692:	6053      	str	r3, [r2, #4]
 8009694:	e009      	b.n	80096aa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009696:	78fb      	ldrb	r3, [r7, #3]
 8009698:	2b02      	cmp	r3, #2
 800969a:	d106      	bne.n	80096aa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096a2:	461a      	mov	r2, r3
 80096a4:	f241 7370 	movw	r3, #6000	; 0x1770
 80096a8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3714      	adds	r7, #20
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80096c4:	2300      	movs	r3, #0
 80096c6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80096d8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80096e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096e6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80096e8:	2064      	movs	r0, #100	; 0x64
 80096ea:	f7fa f9ed 	bl	8003ac8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80096f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096fa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80096fc:	200a      	movs	r0, #10
 80096fe:	f7fa f9e3 	bl	8003ac8 <HAL_Delay>

  return HAL_OK;
 8009702:	2300      	movs	r3, #0
}
 8009704:	4618      	mov	r0, r3
 8009706:	3710      	adds	r7, #16
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800970c:	b480      	push	{r7}
 800970e:	b085      	sub	sp, #20
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	460b      	mov	r3, r1
 8009716:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800971c:	2300      	movs	r3, #0
 800971e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009730:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009738:	2b00      	cmp	r3, #0
 800973a:	d109      	bne.n	8009750 <USB_DriveVbus+0x44>
 800973c:	78fb      	ldrb	r3, [r7, #3]
 800973e:	2b01      	cmp	r3, #1
 8009740:	d106      	bne.n	8009750 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800974a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800974e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800975a:	d109      	bne.n	8009770 <USB_DriveVbus+0x64>
 800975c:	78fb      	ldrb	r3, [r7, #3]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d106      	bne.n	8009770 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800976a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800976e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009770:	2300      	movs	r3, #0
}
 8009772:	4618      	mov	r0, r3
 8009774:	3714      	adds	r7, #20
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr

0800977e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800977e:	b480      	push	{r7}
 8009780:	b085      	sub	sp, #20
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800978a:	2300      	movs	r3, #0
 800978c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	0c5b      	lsrs	r3, r3, #17
 800979c:	f003 0303 	and.w	r3, r3, #3
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3714      	adds	r7, #20
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	b29b      	uxth	r3, r3
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3714      	adds	r7, #20
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr
	...

080097d0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b088      	sub	sp, #32
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	4608      	mov	r0, r1
 80097da:	4611      	mov	r1, r2
 80097dc:	461a      	mov	r2, r3
 80097de:	4603      	mov	r3, r0
 80097e0:	70fb      	strb	r3, [r7, #3]
 80097e2:	460b      	mov	r3, r1
 80097e4:	70bb      	strb	r3, [r7, #2]
 80097e6:	4613      	mov	r3, r2
 80097e8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80097ea:	2300      	movs	r3, #0
 80097ec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80097f2:	78fb      	ldrb	r3, [r7, #3]
 80097f4:	015a      	lsls	r2, r3, #5
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	4413      	add	r3, r2
 80097fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097fe:	461a      	mov	r2, r3
 8009800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009804:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009806:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800980a:	2b03      	cmp	r3, #3
 800980c:	d87e      	bhi.n	800990c <USB_HC_Init+0x13c>
 800980e:	a201      	add	r2, pc, #4	; (adr r2, 8009814 <USB_HC_Init+0x44>)
 8009810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009814:	08009825 	.word	0x08009825
 8009818:	080098cf 	.word	0x080098cf
 800981c:	08009825 	.word	0x08009825
 8009820:	08009891 	.word	0x08009891
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009824:	78fb      	ldrb	r3, [r7, #3]
 8009826:	015a      	lsls	r2, r3, #5
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	4413      	add	r3, r2
 800982c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009830:	461a      	mov	r2, r3
 8009832:	f240 439d 	movw	r3, #1181	; 0x49d
 8009836:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009838:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800983c:	2b00      	cmp	r3, #0
 800983e:	da10      	bge.n	8009862 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009840:	78fb      	ldrb	r3, [r7, #3]
 8009842:	015a      	lsls	r2, r3, #5
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	4413      	add	r3, r2
 8009848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	78fa      	ldrb	r2, [r7, #3]
 8009850:	0151      	lsls	r1, r2, #5
 8009852:	693a      	ldr	r2, [r7, #16]
 8009854:	440a      	add	r2, r1
 8009856:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800985a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800985e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009860:	e057      	b.n	8009912 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800986a:	2b00      	cmp	r3, #0
 800986c:	d051      	beq.n	8009912 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800986e:	78fb      	ldrb	r3, [r7, #3]
 8009870:	015a      	lsls	r2, r3, #5
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	4413      	add	r3, r2
 8009876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	78fa      	ldrb	r2, [r7, #3]
 800987e:	0151      	lsls	r1, r2, #5
 8009880:	693a      	ldr	r2, [r7, #16]
 8009882:	440a      	add	r2, r1
 8009884:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009888:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800988c:	60d3      	str	r3, [r2, #12]
      break;
 800988e:	e040      	b.n	8009912 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009890:	78fb      	ldrb	r3, [r7, #3]
 8009892:	015a      	lsls	r2, r3, #5
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	4413      	add	r3, r2
 8009898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800989c:	461a      	mov	r2, r3
 800989e:	f240 639d 	movw	r3, #1693	; 0x69d
 80098a2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80098a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	da34      	bge.n	8009916 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80098ac:	78fb      	ldrb	r3, [r7, #3]
 80098ae:	015a      	lsls	r2, r3, #5
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	4413      	add	r3, r2
 80098b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	78fa      	ldrb	r2, [r7, #3]
 80098bc:	0151      	lsls	r1, r2, #5
 80098be:	693a      	ldr	r2, [r7, #16]
 80098c0:	440a      	add	r2, r1
 80098c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098ca:	60d3      	str	r3, [r2, #12]
      }

      break;
 80098cc:	e023      	b.n	8009916 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80098ce:	78fb      	ldrb	r3, [r7, #3]
 80098d0:	015a      	lsls	r2, r3, #5
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	4413      	add	r3, r2
 80098d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098da:	461a      	mov	r2, r3
 80098dc:	f240 2325 	movw	r3, #549	; 0x225
 80098e0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80098e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	da17      	bge.n	800991a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80098ea:	78fb      	ldrb	r3, [r7, #3]
 80098ec:	015a      	lsls	r2, r3, #5
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	4413      	add	r3, r2
 80098f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	78fa      	ldrb	r2, [r7, #3]
 80098fa:	0151      	lsls	r1, r2, #5
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	440a      	add	r2, r1
 8009900:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009904:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009908:	60d3      	str	r3, [r2, #12]
      }
      break;
 800990a:	e006      	b.n	800991a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800990c:	2301      	movs	r3, #1
 800990e:	77fb      	strb	r3, [r7, #31]
      break;
 8009910:	e004      	b.n	800991c <USB_HC_Init+0x14c>
      break;
 8009912:	bf00      	nop
 8009914:	e002      	b.n	800991c <USB_HC_Init+0x14c>
      break;
 8009916:	bf00      	nop
 8009918:	e000      	b.n	800991c <USB_HC_Init+0x14c>
      break;
 800991a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800991c:	78fb      	ldrb	r3, [r7, #3]
 800991e:	015a      	lsls	r2, r3, #5
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	4413      	add	r3, r2
 8009924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009928:	68db      	ldr	r3, [r3, #12]
 800992a:	78fa      	ldrb	r2, [r7, #3]
 800992c:	0151      	lsls	r1, r2, #5
 800992e:	693a      	ldr	r2, [r7, #16]
 8009930:	440a      	add	r2, r1
 8009932:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009936:	f043 0302 	orr.w	r3, r3, #2
 800993a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009942:	699a      	ldr	r2, [r3, #24]
 8009944:	78fb      	ldrb	r3, [r7, #3]
 8009946:	f003 030f 	and.w	r3, r3, #15
 800994a:	2101      	movs	r1, #1
 800994c:	fa01 f303 	lsl.w	r3, r1, r3
 8009950:	6939      	ldr	r1, [r7, #16]
 8009952:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009956:	4313      	orrs	r3, r2
 8009958:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	699b      	ldr	r3, [r3, #24]
 800995e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009966:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800996a:	2b00      	cmp	r3, #0
 800996c:	da03      	bge.n	8009976 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800996e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009972:	61bb      	str	r3, [r7, #24]
 8009974:	e001      	b.n	800997a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8009976:	2300      	movs	r3, #0
 8009978:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f7ff feff 	bl	800977e <USB_GetHostSpeed>
 8009980:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009982:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009986:	2b02      	cmp	r3, #2
 8009988:	d106      	bne.n	8009998 <USB_HC_Init+0x1c8>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2b02      	cmp	r3, #2
 800998e:	d003      	beq.n	8009998 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009990:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009994:	617b      	str	r3, [r7, #20]
 8009996:	e001      	b.n	800999c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009998:	2300      	movs	r3, #0
 800999a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800999c:	787b      	ldrb	r3, [r7, #1]
 800999e:	059b      	lsls	r3, r3, #22
 80099a0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80099a4:	78bb      	ldrb	r3, [r7, #2]
 80099a6:	02db      	lsls	r3, r3, #11
 80099a8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80099ac:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80099ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80099b2:	049b      	lsls	r3, r3, #18
 80099b4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80099b8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80099ba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80099bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80099c0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80099c6:	78fb      	ldrb	r3, [r7, #3]
 80099c8:	0159      	lsls	r1, r3, #5
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	440b      	add	r3, r1
 80099ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099d2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80099d8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80099da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80099de:	2b03      	cmp	r3, #3
 80099e0:	d003      	beq.n	80099ea <USB_HC_Init+0x21a>
 80099e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d10f      	bne.n	8009a0a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80099ea:	78fb      	ldrb	r3, [r7, #3]
 80099ec:	015a      	lsls	r2, r3, #5
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	4413      	add	r3, r2
 80099f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	78fa      	ldrb	r2, [r7, #3]
 80099fa:	0151      	lsls	r1, r2, #5
 80099fc:	693a      	ldr	r2, [r7, #16]
 80099fe:	440a      	add	r2, r1
 8009a00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a08:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009a0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3720      	adds	r7, #32
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b08c      	sub	sp, #48	; 0x30
 8009a18:	af02      	add	r7, sp, #8
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	4613      	mov	r3, r2
 8009a20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	785b      	ldrb	r3, [r3, #1]
 8009a2a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009a2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a30:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d02d      	beq.n	8009a9a <USB_HC_StartXfer+0x86>
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	791b      	ldrb	r3, [r3, #4]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d129      	bne.n	8009a9a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009a46:	79fb      	ldrb	r3, [r7, #7]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d117      	bne.n	8009a7c <USB_HC_StartXfer+0x68>
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	79db      	ldrb	r3, [r3, #7]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d003      	beq.n	8009a5c <USB_HC_StartXfer+0x48>
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	79db      	ldrb	r3, [r3, #7]
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	d10f      	bne.n	8009a7c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	015a      	lsls	r2, r3, #5
 8009a60:	6a3b      	ldr	r3, [r7, #32]
 8009a62:	4413      	add	r3, r2
 8009a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	69fa      	ldr	r2, [r7, #28]
 8009a6c:	0151      	lsls	r1, r2, #5
 8009a6e:	6a3a      	ldr	r2, [r7, #32]
 8009a70:	440a      	add	r2, r1
 8009a72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a7a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009a7c:	79fb      	ldrb	r3, [r7, #7]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d10b      	bne.n	8009a9a <USB_HC_StartXfer+0x86>
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	795b      	ldrb	r3, [r3, #5]
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d107      	bne.n	8009a9a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	785b      	ldrb	r3, [r3, #1]
 8009a8e:	4619      	mov	r1, r3
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	f000 fa0f 	bl	8009eb4 <USB_DoPing>
      return HAL_OK;
 8009a96:	2300      	movs	r3, #0
 8009a98:	e0f8      	b.n	8009c8c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	695b      	ldr	r3, [r3, #20]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d018      	beq.n	8009ad4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	695b      	ldr	r3, [r3, #20]
 8009aa6:	68ba      	ldr	r2, [r7, #8]
 8009aa8:	8912      	ldrh	r2, [r2, #8]
 8009aaa:	4413      	add	r3, r2
 8009aac:	3b01      	subs	r3, #1
 8009aae:	68ba      	ldr	r2, [r7, #8]
 8009ab0:	8912      	ldrh	r2, [r2, #8]
 8009ab2:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ab6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009ab8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009aba:	8b7b      	ldrh	r3, [r7, #26]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d90b      	bls.n	8009ad8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009ac0:	8b7b      	ldrh	r3, [r7, #26]
 8009ac2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009ac4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ac6:	68ba      	ldr	r2, [r7, #8]
 8009ac8:	8912      	ldrh	r2, [r2, #8]
 8009aca:	fb03 f202 	mul.w	r2, r3, r2
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	611a      	str	r2, [r3, #16]
 8009ad2:	e001      	b.n	8009ad8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	78db      	ldrb	r3, [r3, #3]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d007      	beq.n	8009af0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009ae0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ae2:	68ba      	ldr	r2, [r7, #8]
 8009ae4:	8912      	ldrh	r2, [r2, #8]
 8009ae6:	fb03 f202 	mul.w	r2, r3, r2
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	611a      	str	r2, [r3, #16]
 8009aee:	e003      	b.n	8009af8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	695a      	ldr	r2, [r3, #20]
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	691b      	ldr	r3, [r3, #16]
 8009afc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009b00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009b02:	04d9      	lsls	r1, r3, #19
 8009b04:	4b63      	ldr	r3, [pc, #396]	; (8009c94 <USB_HC_StartXfer+0x280>)
 8009b06:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009b08:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	7a9b      	ldrb	r3, [r3, #10]
 8009b0e:	075b      	lsls	r3, r3, #29
 8009b10:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009b14:	69f9      	ldr	r1, [r7, #28]
 8009b16:	0148      	lsls	r0, r1, #5
 8009b18:	6a39      	ldr	r1, [r7, #32]
 8009b1a:	4401      	add	r1, r0
 8009b1c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009b20:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009b22:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009b24:	79fb      	ldrb	r3, [r7, #7]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d009      	beq.n	8009b3e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	68d9      	ldr	r1, [r3, #12]
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	015a      	lsls	r2, r3, #5
 8009b32:	6a3b      	ldr	r3, [r7, #32]
 8009b34:	4413      	add	r3, r2
 8009b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b3a:	460a      	mov	r2, r1
 8009b3c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009b3e:	6a3b      	ldr	r3, [r7, #32]
 8009b40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	f003 0301 	and.w	r3, r3, #1
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	bf0c      	ite	eq
 8009b4e:	2301      	moveq	r3, #1
 8009b50:	2300      	movne	r3, #0
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009b56:	69fb      	ldr	r3, [r7, #28]
 8009b58:	015a      	lsls	r2, r3, #5
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	69fa      	ldr	r2, [r7, #28]
 8009b66:	0151      	lsls	r1, r2, #5
 8009b68:	6a3a      	ldr	r2, [r7, #32]
 8009b6a:	440a      	add	r2, r1
 8009b6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b70:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009b74:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	015a      	lsls	r2, r3, #5
 8009b7a:	6a3b      	ldr	r3, [r7, #32]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	7e7b      	ldrb	r3, [r7, #25]
 8009b86:	075b      	lsls	r3, r3, #29
 8009b88:	69f9      	ldr	r1, [r7, #28]
 8009b8a:	0148      	lsls	r0, r1, #5
 8009b8c:	6a39      	ldr	r1, [r7, #32]
 8009b8e:	4401      	add	r1, r0
 8009b90:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009b94:	4313      	orrs	r3, r2
 8009b96:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	015a      	lsls	r2, r3, #5
 8009b9c:	6a3b      	ldr	r3, [r7, #32]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009bae:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	78db      	ldrb	r3, [r3, #3]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d004      	beq.n	8009bc2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bbe:	613b      	str	r3, [r7, #16]
 8009bc0:	e003      	b.n	8009bca <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009bc8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009bd0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	015a      	lsls	r2, r3, #5
 8009bd6:	6a3b      	ldr	r3, [r7, #32]
 8009bd8:	4413      	add	r3, r2
 8009bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bde:	461a      	mov	r2, r3
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009be4:	79fb      	ldrb	r3, [r7, #7]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d001      	beq.n	8009bee <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009bea:	2300      	movs	r3, #0
 8009bec:	e04e      	b.n	8009c8c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	78db      	ldrb	r3, [r3, #3]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d149      	bne.n	8009c8a <USB_HC_StartXfer+0x276>
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	695b      	ldr	r3, [r3, #20]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d045      	beq.n	8009c8a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	79db      	ldrb	r3, [r3, #7]
 8009c02:	2b03      	cmp	r3, #3
 8009c04:	d830      	bhi.n	8009c68 <USB_HC_StartXfer+0x254>
 8009c06:	a201      	add	r2, pc, #4	; (adr r2, 8009c0c <USB_HC_StartXfer+0x1f8>)
 8009c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c0c:	08009c1d 	.word	0x08009c1d
 8009c10:	08009c41 	.word	0x08009c41
 8009c14:	08009c1d 	.word	0x08009c1d
 8009c18:	08009c41 	.word	0x08009c41
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	695b      	ldr	r3, [r3, #20]
 8009c20:	3303      	adds	r3, #3
 8009c22:	089b      	lsrs	r3, r3, #2
 8009c24:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009c26:	8afa      	ldrh	r2, [r7, #22]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d91c      	bls.n	8009c6c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	699b      	ldr	r3, [r3, #24]
 8009c36:	f043 0220 	orr.w	r2, r3, #32
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	619a      	str	r2, [r3, #24]
        }
        break;
 8009c3e:	e015      	b.n	8009c6c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	695b      	ldr	r3, [r3, #20]
 8009c44:	3303      	adds	r3, #3
 8009c46:	089b      	lsrs	r3, r3, #2
 8009c48:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009c4a:	8afa      	ldrh	r2, [r7, #22]
 8009c4c:	6a3b      	ldr	r3, [r7, #32]
 8009c4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c52:	691b      	ldr	r3, [r3, #16]
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d90a      	bls.n	8009c70 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	699b      	ldr	r3, [r3, #24]
 8009c5e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	619a      	str	r2, [r3, #24]
        }
        break;
 8009c66:	e003      	b.n	8009c70 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009c68:	bf00      	nop
 8009c6a:	e002      	b.n	8009c72 <USB_HC_StartXfer+0x25e>
        break;
 8009c6c:	bf00      	nop
 8009c6e:	e000      	b.n	8009c72 <USB_HC_StartXfer+0x25e>
        break;
 8009c70:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	68d9      	ldr	r1, [r3, #12]
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	785a      	ldrb	r2, [r3, #1]
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	695b      	ldr	r3, [r3, #20]
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	2000      	movs	r0, #0
 8009c82:	9000      	str	r0, [sp, #0]
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f7ff fb31 	bl	80092ec <USB_WritePacket>
  }

  return HAL_OK;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3728      	adds	r7, #40	; 0x28
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	1ff80000 	.word	0x1ff80000

08009c98 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009caa:	695b      	ldr	r3, [r3, #20]
 8009cac:	b29b      	uxth	r3, r3
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3714      	adds	r7, #20
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr

08009cba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009cba:	b480      	push	{r7}
 8009cbc:	b089      	sub	sp, #36	; 0x24
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009cca:	78fb      	ldrb	r3, [r7, #3]
 8009ccc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	015a      	lsls	r2, r3, #5
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	4413      	add	r3, r2
 8009cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	0c9b      	lsrs	r3, r3, #18
 8009ce2:	f003 0303 	and.w	r3, r3, #3
 8009ce6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	015a      	lsls	r2, r3, #5
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	4413      	add	r3, r2
 8009cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	0fdb      	lsrs	r3, r3, #31
 8009cf8:	f003 0301 	and.w	r3, r3, #1
 8009cfc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	f003 0320 	and.w	r3, r3, #32
 8009d06:	2b20      	cmp	r3, #32
 8009d08:	d104      	bne.n	8009d14 <USB_HC_Halt+0x5a>
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d101      	bne.n	8009d14 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009d10:	2300      	movs	r3, #0
 8009d12:	e0c8      	b.n	8009ea6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d002      	beq.n	8009d20 <USB_HC_Halt+0x66>
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	d163      	bne.n	8009de8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	015a      	lsls	r2, r3, #5
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	4413      	add	r3, r2
 8009d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	69ba      	ldr	r2, [r7, #24]
 8009d30:	0151      	lsls	r1, r2, #5
 8009d32:	69fa      	ldr	r2, [r7, #28]
 8009d34:	440a      	add	r2, r1
 8009d36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d3e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	f003 0320 	and.w	r3, r3, #32
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	f040 80ab 	bne.w	8009ea4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d133      	bne.n	8009dc2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	015a      	lsls	r2, r3, #5
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	4413      	add	r3, r2
 8009d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	69ba      	ldr	r2, [r7, #24]
 8009d6a:	0151      	lsls	r1, r2, #5
 8009d6c:	69fa      	ldr	r2, [r7, #28]
 8009d6e:	440a      	add	r2, r1
 8009d70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d78:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	015a      	lsls	r2, r3, #5
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	4413      	add	r3, r2
 8009d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	69ba      	ldr	r2, [r7, #24]
 8009d8a:	0151      	lsls	r1, r2, #5
 8009d8c:	69fa      	ldr	r2, [r7, #28]
 8009d8e:	440a      	add	r2, r1
 8009d90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009d98:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009da6:	d81d      	bhi.n	8009de4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	015a      	lsls	r2, r3, #5
 8009dac:	69fb      	ldr	r3, [r7, #28]
 8009dae:	4413      	add	r3, r2
 8009db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009dba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009dbe:	d0ec      	beq.n	8009d9a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009dc0:	e070      	b.n	8009ea4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	015a      	lsls	r2, r3, #5
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	4413      	add	r3, r2
 8009dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	69ba      	ldr	r2, [r7, #24]
 8009dd2:	0151      	lsls	r1, r2, #5
 8009dd4:	69fa      	ldr	r2, [r7, #28]
 8009dd6:	440a      	add	r2, r1
 8009dd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ddc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009de0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009de2:	e05f      	b.n	8009ea4 <USB_HC_Halt+0x1ea>
            break;
 8009de4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009de6:	e05d      	b.n	8009ea4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	015a      	lsls	r2, r3, #5
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	4413      	add	r3, r2
 8009df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	69ba      	ldr	r2, [r7, #24]
 8009df8:	0151      	lsls	r1, r2, #5
 8009dfa:	69fa      	ldr	r2, [r7, #28]
 8009dfc:	440a      	add	r2, r1
 8009dfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e06:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d133      	bne.n	8009e80 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	015a      	lsls	r2, r3, #5
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	4413      	add	r3, r2
 8009e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	69ba      	ldr	r2, [r7, #24]
 8009e28:	0151      	lsls	r1, r2, #5
 8009e2a:	69fa      	ldr	r2, [r7, #28]
 8009e2c:	440a      	add	r2, r1
 8009e2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e36:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	015a      	lsls	r2, r3, #5
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	4413      	add	r3, r2
 8009e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	69ba      	ldr	r2, [r7, #24]
 8009e48:	0151      	lsls	r1, r2, #5
 8009e4a:	69fa      	ldr	r2, [r7, #28]
 8009e4c:	440a      	add	r2, r1
 8009e4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e56:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e64:	d81d      	bhi.n	8009ea2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	015a      	lsls	r2, r3, #5
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e7c:	d0ec      	beq.n	8009e58 <USB_HC_Halt+0x19e>
 8009e7e:	e011      	b.n	8009ea4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009e80:	69bb      	ldr	r3, [r7, #24]
 8009e82:	015a      	lsls	r2, r3, #5
 8009e84:	69fb      	ldr	r3, [r7, #28]
 8009e86:	4413      	add	r3, r2
 8009e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	69ba      	ldr	r2, [r7, #24]
 8009e90:	0151      	lsls	r1, r2, #5
 8009e92:	69fa      	ldr	r2, [r7, #28]
 8009e94:	440a      	add	r2, r1
 8009e96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e9e:	6013      	str	r3, [r2, #0]
 8009ea0:	e000      	b.n	8009ea4 <USB_HC_Halt+0x1ea>
          break;
 8009ea2:	bf00      	nop
    }
  }

  return HAL_OK;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3724      	adds	r7, #36	; 0x24
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr
	...

08009eb4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b087      	sub	sp, #28
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009ec4:	78fb      	ldrb	r3, [r7, #3]
 8009ec6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	04da      	lsls	r2, r3, #19
 8009ed0:	4b15      	ldr	r3, [pc, #84]	; (8009f28 <USB_DoPing+0x74>)
 8009ed2:	4013      	ands	r3, r2
 8009ed4:	693a      	ldr	r2, [r7, #16]
 8009ed6:	0151      	lsls	r1, r2, #5
 8009ed8:	697a      	ldr	r2, [r7, #20]
 8009eda:	440a      	add	r2, r1
 8009edc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ee0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ee4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	015a      	lsls	r2, r3, #5
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	4413      	add	r3, r2
 8009eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009efc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f04:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	015a      	lsls	r2, r3, #5
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f12:	461a      	mov	r2, r3
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	371c      	adds	r7, #28
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop
 8009f28:	1ff80000 	.word	0x1ff80000

08009f2c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b088      	sub	sp, #32
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009f34:	2300      	movs	r3, #0
 8009f36:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f7ff f911 	bl	8009168 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009f46:	2110      	movs	r1, #16
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f7ff f96b 	bl	8009224 <USB_FlushTxFifo>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d001      	beq.n	8009f58 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009f54:	2301      	movs	r3, #1
 8009f56:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f7ff f997 	bl	800928c <USB_FlushRxFifo>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d001      	beq.n	8009f68 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009f64:	2301      	movs	r3, #1
 8009f66:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009f68:	2300      	movs	r3, #0
 8009f6a:	61bb      	str	r3, [r7, #24]
 8009f6c:	e01f      	b.n	8009fae <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	015a      	lsls	r2, r3, #5
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	4413      	add	r3, r2
 8009f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f84:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f8c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009f94:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009f96:	69bb      	ldr	r3, [r7, #24]
 8009f98:	015a      	lsls	r2, r3, #5
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	3301      	adds	r3, #1
 8009fac:	61bb      	str	r3, [r7, #24]
 8009fae:	69bb      	ldr	r3, [r7, #24]
 8009fb0:	2b0f      	cmp	r3, #15
 8009fb2:	d9dc      	bls.n	8009f6e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	61bb      	str	r3, [r7, #24]
 8009fb8:	e034      	b.n	800a024 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	015a      	lsls	r2, r3, #5
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fd0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009fd8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009fe0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	015a      	lsls	r2, r3, #5
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	4413      	add	r3, r2
 8009fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fee:	461a      	mov	r2, r3
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a000:	d80c      	bhi.n	800a01c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a002:	69bb      	ldr	r3, [r7, #24]
 800a004:	015a      	lsls	r2, r3, #5
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	4413      	add	r3, r2
 800a00a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a014:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a018:	d0ec      	beq.n	8009ff4 <USB_StopHost+0xc8>
 800a01a:	e000      	b.n	800a01e <USB_StopHost+0xf2>
        break;
 800a01c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	3301      	adds	r3, #1
 800a022:	61bb      	str	r3, [r7, #24]
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	2b0f      	cmp	r3, #15
 800a028:	d9c7      	bls.n	8009fba <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a030:	461a      	mov	r2, r3
 800a032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a036:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a03e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f7ff f880 	bl	8009146 <USB_EnableGlobalInt>

  return ret;
 800a046:	7ffb      	ldrb	r3, [r7, #31]
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3720      	adds	r7, #32
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a054:	4904      	ldr	r1, [pc, #16]	; (800a068 <MX_FATFS_Init+0x18>)
 800a056:	4805      	ldr	r0, [pc, #20]	; (800a06c <MX_FATFS_Init+0x1c>)
 800a058:	f002 f948 	bl	800c2ec <FATFS_LinkDriver>
 800a05c:	4603      	mov	r3, r0
 800a05e:	461a      	mov	r2, r3
 800a060:	4b03      	ldr	r3, [pc, #12]	; (800a070 <MX_FATFS_Init+0x20>)
 800a062:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a064:	bf00      	nop
 800a066:	bd80      	pop	{r7, pc}
 800a068:	2000088c 	.word	0x2000088c
 800a06c:	20000010 	.word	0x20000010
 800a070:	20000888 	.word	0x20000888

0800a074 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	4603      	mov	r3, r0
 800a07c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
	 HAL_UART_Transmit(&huart3,(uint8_t*)"USER_initialize\n\r",17,0x1000);
 800a07e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a082:	2211      	movs	r2, #17
 800a084:	490c      	ldr	r1, [pc, #48]	; (800a0b8 <USER_initialize+0x44>)
 800a086:	480d      	ldr	r0, [pc, #52]	; (800a0bc <USER_initialize+0x48>)
 800a088:	f7fd ff8d 	bl	8007fa6 <HAL_UART_Transmit>

	 SD_PowerOn();
 800a08c:	f7f9 fab0 	bl	80035f0 <SD_PowerOn>
	 if(sd_ini()==0) {Stat &= ~STA_NOINIT;} 		//Сбросим статус STA_NOINIT
 800a090:	f7f9 fb2c 	bl	80036ec <sd_ini>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d107      	bne.n	800a0aa <USER_initialize+0x36>
 800a09a:	4b09      	ldr	r3, [pc, #36]	; (800a0c0 <USER_initialize+0x4c>)
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	f023 0301 	bic.w	r3, r3, #1
 800a0a4:	b2da      	uxtb	r2, r3
 800a0a6:	4b06      	ldr	r3, [pc, #24]	; (800a0c0 <USER_initialize+0x4c>)
 800a0a8:	701a      	strb	r2, [r3, #0]
    return Stat;
 800a0aa:	4b05      	ldr	r3, [pc, #20]	; (800a0c0 <USER_initialize+0x4c>)
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3708      	adds	r7, #8
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	0800d2dc 	.word	0x0800d2dc
 800a0bc:	200007f8 	.word	0x200007f8
 800a0c0:	2000000d 	.word	0x2000000d

0800a0c4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
	//HAL_UART_Transmit(&huart3,(uint8_t*)"USER_status\n\r",13,0x1000);
	if (pdrv) return STA_NOINIT;
 800a0ce:	79fb      	ldrb	r3, [r7, #7]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d001      	beq.n	800a0d8 <USER_status+0x14>
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e002      	b.n	800a0de <USER_status+0x1a>
    return Stat;
 800a0d8:	4b04      	ldr	r3, [pc, #16]	; (800a0ec <USER_status+0x28>)
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	370c      	adds	r7, #12
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr
 800a0ea:	bf00      	nop
 800a0ec:	2000000d 	.word	0x2000000d

0800a0f0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	60b9      	str	r1, [r7, #8]
 800a0f8:	607a      	str	r2, [r7, #4]
 800a0fa:	603b      	str	r3, [r7, #0]
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//	HAL_UART_Transmit(&huart3,(uint8_t*)"USER_read\n\r",11,0x1000);
//	sprintf(str1,"sector: %lu; count: %d\n\r",sector, count);
//	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);

	if (pdrv || !count) return RES_PARERR;
 800a100:	7bfb      	ldrb	r3, [r7, #15]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d102      	bne.n	800a10c <USER_read+0x1c>
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d101      	bne.n	800a110 <USER_read+0x20>
 800a10c:	2304      	movs	r3, #4
 800a10e:	e023      	b.n	800a158 <USER_read+0x68>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a110:	4b13      	ldr	r3, [pc, #76]	; (800a160 <USER_read+0x70>)
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	b2db      	uxtb	r3, r3
 800a116:	f003 0301 	and.w	r3, r3, #1
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d001      	beq.n	800a122 <USER_read+0x32>
 800a11e:	2303      	movs	r3, #3
 800a120:	e01a      	b.n	800a158 <USER_read+0x68>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 800a122:	4b10      	ldr	r3, [pc, #64]	; (800a164 <USER_read+0x74>)
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	b2db      	uxtb	r3, r3
 800a128:	f003 0304 	and.w	r3, r3, #4
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d102      	bne.n	800a136 <USER_read+0x46>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	025b      	lsls	r3, r3, #9
 800a134:	607b      	str	r3, [r7, #4]
	if (count == 1) /* Single block read */
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d105      	bne.n	800a148 <USER_read+0x58>
	{
		SD_Read_Block(buff,sector); //Считаем блок в буфер
 800a13c:	6879      	ldr	r1, [r7, #4]
 800a13e:	68b8      	ldr	r0, [r7, #8]
 800a140:	f7f9 fa12 	bl	8003568 <SD_Read_Block>
		count = 0;
 800a144:	2300      	movs	r3, #0
 800a146:	603b      	str	r3, [r7, #0]
	else /* Multiple block read */
	{

	}

	SPI_Release();
 800a148:	f7f9 fbfa 	bl	8003940 <SPI_Release>

	return count ? RES_ERROR : RES_OK;
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	bf14      	ite	ne
 800a152:	2301      	movne	r3, #1
 800a154:	2300      	moveq	r3, #0
 800a156:	b2db      	uxtb	r3, r3

   // return RES_OK;
  /* USER CODE END READ */
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	2000000d 	.word	0x2000000d
 800a164:	20000844 	.word	0x20000844

0800a168 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	60b9      	str	r1, [r7, #8]
 800a170:	607a      	str	r2, [r7, #4]
 800a172:	603b      	str	r3, [r7, #0]
 800a174:	4603      	mov	r3, r0
 800a176:	73fb      	strb	r3, [r7, #15]
  /* USER CODE HERE */
//	HAL_UART_Transmit(&huart3,(uint8_t*)"USER_write\n\r",12,0x1000);
//	sprintf(str1,"sector: %lu\n\r",sector);
//	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);

		if (pdrv || !count) return RES_PARERR;
 800a178:	7bfb      	ldrb	r3, [r7, #15]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d102      	bne.n	800a184 <USER_write+0x1c>
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d101      	bne.n	800a188 <USER_write+0x20>
 800a184:	2304      	movs	r3, #4
 800a186:	e02c      	b.n	800a1e2 <USER_write+0x7a>
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a188:	4b18      	ldr	r3, [pc, #96]	; (800a1ec <USER_write+0x84>)
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	f003 0301 	and.w	r3, r3, #1
 800a192:	2b00      	cmp	r3, #0
 800a194:	d001      	beq.n	800a19a <USER_write+0x32>
 800a196:	2303      	movs	r3, #3
 800a198:	e023      	b.n	800a1e2 <USER_write+0x7a>
		if (Stat & STA_PROTECT) return RES_WRPRT;
 800a19a:	4b14      	ldr	r3, [pc, #80]	; (800a1ec <USER_write+0x84>)
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	f003 0304 	and.w	r3, r3, #4
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d001      	beq.n	800a1ac <USER_write+0x44>
 800a1a8:	2302      	movs	r3, #2
 800a1aa:	e01a      	b.n	800a1e2 <USER_write+0x7a>
		if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 800a1ac:	4b10      	ldr	r3, [pc, #64]	; (800a1f0 <USER_write+0x88>)
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	f003 0304 	and.w	r3, r3, #4
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d102      	bne.n	800a1c0 <USER_write+0x58>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	025b      	lsls	r3, r3, #9
 800a1be:	607b      	str	r3, [r7, #4]

		if (count == 1) /* Single block read */
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d105      	bne.n	800a1d2 <USER_write+0x6a>
		{
			SD_Write_Block((BYTE*)buff,sector); //Считаем блок в буфер
 800a1c6:	6879      	ldr	r1, [r7, #4]
 800a1c8:	68b8      	ldr	r0, [r7, #8]
 800a1ca:	f7f9 f97b 	bl	80034c4 <SD_Write_Block>
		    count = 0;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	603b      	str	r3, [r7, #0]
		}
		else /* Multiple block read */
		{

		}
		SPI_Release();
 800a1d2:	f7f9 fbb5 	bl	8003940 <SPI_Release>

		return count ? RES_ERROR : RES_OK;
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	bf14      	ite	ne
 800a1dc:	2301      	movne	r3, #1
 800a1de:	2300      	moveq	r3, #0
 800a1e0:	b2db      	uxtb	r3, r3

    //return RES_OK;
  /* USER CODE END WRITE */
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	2000000d 	.word	0x2000000d
 800a1f0:	20000844 	.word	0x20000844

0800a1f4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	603a      	str	r2, [r7, #0]
 800a1fe:	71fb      	strb	r3, [r7, #7]
 800a200:	460b      	mov	r3, r1
 800a202:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
//    HAL_UART_Transmit(&huart3,(uint8_t*)"USER_ioctl\n\r",12,0x1000);
//    sprintf(str1,"cmd: %d\n\r",cmd);
//    HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);

    if (pdrv) return RES_PARERR;
 800a204:	79fb      	ldrb	r3, [r7, #7]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d001      	beq.n	800a20e <USER_ioctl+0x1a>
 800a20a:	2304      	movs	r3, #4
 800a20c:	e02b      	b.n	800a266 <USER_ioctl+0x72>
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a20e:	4b18      	ldr	r3, [pc, #96]	; (800a270 <USER_ioctl+0x7c>)
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	b2db      	uxtb	r3, r3
 800a214:	f003 0301 	and.w	r3, r3, #1
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d001      	beq.n	800a220 <USER_ioctl+0x2c>
 800a21c:	2303      	movs	r3, #3
 800a21e:	e022      	b.n	800a266 <USER_ioctl+0x72>
    res = RES_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	73fb      	strb	r3, [r7, #15]

    switch (cmd)
 800a224:	79bb      	ldrb	r3, [r7, #6]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d002      	beq.n	800a230 <USER_ioctl+0x3c>
 800a22a:	2b02      	cmp	r3, #2
 800a22c:	d00d      	beq.n	800a24a <USER_ioctl+0x56>
 800a22e:	e013      	b.n	800a258 <USER_ioctl+0x64>
    {
    	case CTRL_SYNC : /* Flush dirty buffer if present */
    		SS_SD_SELECT();
 800a230:	2200      	movs	r2, #0
 800a232:	2108      	movs	r1, #8
 800a234:	480f      	ldr	r0, [pc, #60]	; (800a274 <USER_ioctl+0x80>)
 800a236:	f7fa fb1b 	bl	8004870 <HAL_GPIO_WritePin>
    		if (SPI_wait_ready() == 0xFF)
 800a23a:	f7f9 fb88 	bl	800394e <SPI_wait_ready>
 800a23e:	4603      	mov	r3, r0
 800a240:	2bff      	cmp	r3, #255	; 0xff
 800a242:	d10c      	bne.n	800a25e <USER_ioctl+0x6a>
    			res = RES_OK;
 800a244:	2300      	movs	r3, #0
 800a246:	73fb      	strb	r3, [r7, #15]
    		break;
 800a248:	e009      	b.n	800a25e <USER_ioctl+0x6a>

    	case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
    		*(WORD*)buff = 512;
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a250:	801a      	strh	r2, [r3, #0]
    		res = RES_OK;
 800a252:	2300      	movs	r3, #0
 800a254:	73fb      	strb	r3, [r7, #15]
    		break;
 800a256:	e003      	b.n	800a260 <USER_ioctl+0x6c>

    	default:
    		res = RES_PARERR;
 800a258:	2304      	movs	r3, #4
 800a25a:	73fb      	strb	r3, [r7, #15]
 800a25c:	e000      	b.n	800a260 <USER_ioctl+0x6c>
    		break;
 800a25e:	bf00      	nop
    }

    SPI_Release();
 800a260:	f7f9 fb6e 	bl	8003940 <SPI_Release>

    return res;
 800a264:	7bfb      	ldrb	r3, [r7, #15]
   // return res;
  /* USER CODE END IOCTL */
}
 800a266:	4618      	mov	r0, r3
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	2000000d 	.word	0x2000000d
 800a274:	40020000 	.word	0x40020000

0800a278 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a278:	b590      	push	{r4, r7, lr}
 800a27a:	b089      	sub	sp, #36	; 0x24
 800a27c:	af04      	add	r7, sp, #16
 800a27e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a280:	2301      	movs	r3, #1
 800a282:	2202      	movs	r2, #2
 800a284:	2102      	movs	r1, #2
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 fc66 	bl	800ab58 <USBH_FindInterface>
 800a28c:	4603      	mov	r3, r0
 800a28e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a290:	7bfb      	ldrb	r3, [r7, #15]
 800a292:	2bff      	cmp	r3, #255	; 0xff
 800a294:	d002      	beq.n	800a29c <USBH_CDC_InterfaceInit+0x24>
 800a296:	7bfb      	ldrb	r3, [r7, #15]
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d901      	bls.n	800a2a0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a29c:	2302      	movs	r3, #2
 800a29e:	e13d      	b.n	800a51c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a2a0:	7bfb      	ldrb	r3, [r7, #15]
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 fc3b 	bl	800ab20 <USBH_SelectInterface>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a2ae:	7bbb      	ldrb	r3, [r7, #14]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d001      	beq.n	800a2b8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a2b4:	2302      	movs	r3, #2
 800a2b6:	e131      	b.n	800a51c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a2be:	2050      	movs	r0, #80	; 0x50
 800a2c0:	f002 fb56 	bl	800c970 <malloc>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a2ce:	69db      	ldr	r3, [r3, #28]
 800a2d0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d101      	bne.n	800a2dc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a2d8:	2302      	movs	r3, #2
 800a2da:	e11f      	b.n	800a51c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a2dc:	2250      	movs	r2, #80	; 0x50
 800a2de:	2100      	movs	r1, #0
 800a2e0:	68b8      	ldr	r0, [r7, #8]
 800a2e2:	f002 fb63 	bl	800c9ac <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a2e6:	7bfb      	ldrb	r3, [r7, #15]
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	211a      	movs	r1, #26
 800a2ec:	fb01 f303 	mul.w	r3, r1, r3
 800a2f0:	4413      	add	r3, r2
 800a2f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	b25b      	sxtb	r3, r3
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	da15      	bge.n	800a32a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a2fe:	7bfb      	ldrb	r3, [r7, #15]
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	211a      	movs	r1, #26
 800a304:	fb01 f303 	mul.w	r3, r1, r3
 800a308:	4413      	add	r3, r2
 800a30a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a30e:	781a      	ldrb	r2, [r3, #0]
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a314:	7bfb      	ldrb	r3, [r7, #15]
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	211a      	movs	r1, #26
 800a31a:	fb01 f303 	mul.w	r3, r1, r3
 800a31e:	4413      	add	r3, r2
 800a320:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a324:	881a      	ldrh	r2, [r3, #0]
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	785b      	ldrb	r3, [r3, #1]
 800a32e:	4619      	mov	r1, r3
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f001 ff2c 	bl	800c18e <USBH_AllocPipe>
 800a336:	4603      	mov	r3, r0
 800a338:	461a      	mov	r2, r3
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	7819      	ldrb	r1, [r3, #0]
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	7858      	ldrb	r0, [r3, #1]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a352:	68ba      	ldr	r2, [r7, #8]
 800a354:	8952      	ldrh	r2, [r2, #10]
 800a356:	9202      	str	r2, [sp, #8]
 800a358:	2203      	movs	r2, #3
 800a35a:	9201      	str	r2, [sp, #4]
 800a35c:	9300      	str	r3, [sp, #0]
 800a35e:	4623      	mov	r3, r4
 800a360:	4602      	mov	r2, r0
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f001 fee4 	bl	800c130 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	2200      	movs	r2, #0
 800a36e:	4619      	mov	r1, r3
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f002 fa4f 	bl	800c814 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a376:	2300      	movs	r3, #0
 800a378:	2200      	movs	r2, #0
 800a37a:	210a      	movs	r1, #10
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 fbeb 	bl	800ab58 <USBH_FindInterface>
 800a382:	4603      	mov	r3, r0
 800a384:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a386:	7bfb      	ldrb	r3, [r7, #15]
 800a388:	2bff      	cmp	r3, #255	; 0xff
 800a38a:	d002      	beq.n	800a392 <USBH_CDC_InterfaceInit+0x11a>
 800a38c:	7bfb      	ldrb	r3, [r7, #15]
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d901      	bls.n	800a396 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a392:	2302      	movs	r3, #2
 800a394:	e0c2      	b.n	800a51c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a396:	7bfb      	ldrb	r3, [r7, #15]
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	211a      	movs	r1, #26
 800a39c:	fb01 f303 	mul.w	r3, r1, r3
 800a3a0:	4413      	add	r3, r2
 800a3a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	b25b      	sxtb	r3, r3
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	da16      	bge.n	800a3dc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a3ae:	7bfb      	ldrb	r3, [r7, #15]
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	211a      	movs	r1, #26
 800a3b4:	fb01 f303 	mul.w	r3, r1, r3
 800a3b8:	4413      	add	r3, r2
 800a3ba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a3be:	781a      	ldrb	r2, [r3, #0]
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a3c4:	7bfb      	ldrb	r3, [r7, #15]
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	211a      	movs	r1, #26
 800a3ca:	fb01 f303 	mul.w	r3, r1, r3
 800a3ce:	4413      	add	r3, r2
 800a3d0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a3d4:	881a      	ldrh	r2, [r3, #0]
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	835a      	strh	r2, [r3, #26]
 800a3da:	e015      	b.n	800a408 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a3dc:	7bfb      	ldrb	r3, [r7, #15]
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	211a      	movs	r1, #26
 800a3e2:	fb01 f303 	mul.w	r3, r1, r3
 800a3e6:	4413      	add	r3, r2
 800a3e8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a3ec:	781a      	ldrb	r2, [r3, #0]
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a3f2:	7bfb      	ldrb	r3, [r7, #15]
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	211a      	movs	r1, #26
 800a3f8:	fb01 f303 	mul.w	r3, r1, r3
 800a3fc:	4413      	add	r3, r2
 800a3fe:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a402:	881a      	ldrh	r2, [r3, #0]
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a408:	7bfb      	ldrb	r3, [r7, #15]
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	211a      	movs	r1, #26
 800a40e:	fb01 f303 	mul.w	r3, r1, r3
 800a412:	4413      	add	r3, r2
 800a414:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	b25b      	sxtb	r3, r3
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	da16      	bge.n	800a44e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a420:	7bfb      	ldrb	r3, [r7, #15]
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	211a      	movs	r1, #26
 800a426:	fb01 f303 	mul.w	r3, r1, r3
 800a42a:	4413      	add	r3, r2
 800a42c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a430:	781a      	ldrb	r2, [r3, #0]
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a436:	7bfb      	ldrb	r3, [r7, #15]
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	211a      	movs	r1, #26
 800a43c:	fb01 f303 	mul.w	r3, r1, r3
 800a440:	4413      	add	r3, r2
 800a442:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a446:	881a      	ldrh	r2, [r3, #0]
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	835a      	strh	r2, [r3, #26]
 800a44c:	e015      	b.n	800a47a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a44e:	7bfb      	ldrb	r3, [r7, #15]
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	211a      	movs	r1, #26
 800a454:	fb01 f303 	mul.w	r3, r1, r3
 800a458:	4413      	add	r3, r2
 800a45a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a45e:	781a      	ldrb	r2, [r3, #0]
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a464:	7bfb      	ldrb	r3, [r7, #15]
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	211a      	movs	r1, #26
 800a46a:	fb01 f303 	mul.w	r3, r1, r3
 800a46e:	4413      	add	r3, r2
 800a470:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a474:	881a      	ldrh	r2, [r3, #0]
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	7b9b      	ldrb	r3, [r3, #14]
 800a47e:	4619      	mov	r1, r3
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f001 fe84 	bl	800c18e <USBH_AllocPipe>
 800a486:	4603      	mov	r3, r0
 800a488:	461a      	mov	r2, r3
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	7bdb      	ldrb	r3, [r3, #15]
 800a492:	4619      	mov	r1, r3
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f001 fe7a 	bl	800c18e <USBH_AllocPipe>
 800a49a:	4603      	mov	r3, r0
 800a49c:	461a      	mov	r2, r3
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	7b59      	ldrb	r1, [r3, #13]
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	7b98      	ldrb	r0, [r3, #14]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a4b6:	68ba      	ldr	r2, [r7, #8]
 800a4b8:	8b12      	ldrh	r2, [r2, #24]
 800a4ba:	9202      	str	r2, [sp, #8]
 800a4bc:	2202      	movs	r2, #2
 800a4be:	9201      	str	r2, [sp, #4]
 800a4c0:	9300      	str	r3, [sp, #0]
 800a4c2:	4623      	mov	r3, r4
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f001 fe32 	bl	800c130 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	7b19      	ldrb	r1, [r3, #12]
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	7bd8      	ldrb	r0, [r3, #15]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a4e0:	68ba      	ldr	r2, [r7, #8]
 800a4e2:	8b52      	ldrh	r2, [r2, #26]
 800a4e4:	9202      	str	r2, [sp, #8]
 800a4e6:	2202      	movs	r2, #2
 800a4e8:	9201      	str	r2, [sp, #4]
 800a4ea:	9300      	str	r3, [sp, #0]
 800a4ec:	4623      	mov	r3, r4
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f001 fe1d 	bl	800c130 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	7b5b      	ldrb	r3, [r3, #13]
 800a502:	2200      	movs	r2, #0
 800a504:	4619      	mov	r1, r3
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f002 f984 	bl	800c814 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	7b1b      	ldrb	r3, [r3, #12]
 800a510:	2200      	movs	r2, #0
 800a512:	4619      	mov	r1, r3
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f002 f97d 	bl	800c814 <USBH_LL_SetToggle>

  return USBH_OK;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3714      	adds	r7, #20
 800a520:	46bd      	mov	sp, r7
 800a522:	bd90      	pop	{r4, r7, pc}

0800a524 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a532:	69db      	ldr	r3, [r3, #28]
 800a534:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00e      	beq.n	800a55c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	4619      	mov	r1, r3
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f001 fe12 	bl	800c16e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	4619      	mov	r1, r3
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f001 fe3d 	bl	800c1d0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2200      	movs	r2, #0
 800a55a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	7b1b      	ldrb	r3, [r3, #12]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00e      	beq.n	800a582 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	7b1b      	ldrb	r3, [r3, #12]
 800a568:	4619      	mov	r1, r3
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f001 fdff 	bl	800c16e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	7b1b      	ldrb	r3, [r3, #12]
 800a574:	4619      	mov	r1, r3
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f001 fe2a 	bl	800c1d0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2200      	movs	r2, #0
 800a580:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	7b5b      	ldrb	r3, [r3, #13]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00e      	beq.n	800a5a8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	7b5b      	ldrb	r3, [r3, #13]
 800a58e:	4619      	mov	r1, r3
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f001 fdec 	bl	800c16e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	7b5b      	ldrb	r3, [r3, #13]
 800a59a:	4619      	mov	r1, r3
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f001 fe17 	bl	800c1d0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5ae:	69db      	ldr	r3, [r3, #28]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d00b      	beq.n	800a5cc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5ba:	69db      	ldr	r3, [r3, #28]
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f002 f9df 	bl	800c980 <free>
    phost->pActiveClass->pData = 0U;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a5cc:	2300      	movs	r3, #0
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3710      	adds	r7, #16
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}

0800a5d6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a5d6:	b580      	push	{r7, lr}
 800a5d8:	b084      	sub	sp, #16
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5e4:	69db      	ldr	r3, [r3, #28]
 800a5e6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	3340      	adds	r3, #64	; 0x40
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 f8b1 	bl	800a756 <GetLineCoding>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a5f8:	7afb      	ldrb	r3, [r7, #11]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d105      	bne.n	800a60a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a604:	2102      	movs	r1, #2
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a60a:	7afb      	ldrb	r3, [r7, #11]
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a61c:	2301      	movs	r3, #1
 800a61e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a620:	2300      	movs	r3, #0
 800a622:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a62a:	69db      	ldr	r3, [r3, #28]
 800a62c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a634:	2b04      	cmp	r3, #4
 800a636:	d877      	bhi.n	800a728 <USBH_CDC_Process+0x114>
 800a638:	a201      	add	r2, pc, #4	; (adr r2, 800a640 <USBH_CDC_Process+0x2c>)
 800a63a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a63e:	bf00      	nop
 800a640:	0800a655 	.word	0x0800a655
 800a644:	0800a65b 	.word	0x0800a65b
 800a648:	0800a68b 	.word	0x0800a68b
 800a64c:	0800a6ff 	.word	0x0800a6ff
 800a650:	0800a70d 	.word	0x0800a70d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a654:	2300      	movs	r3, #0
 800a656:	73fb      	strb	r3, [r7, #15]
      break;
 800a658:	e06d      	b.n	800a736 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a65e:	4619      	mov	r1, r3
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 f897 	bl	800a794 <SetLineCoding>
 800a666:	4603      	mov	r3, r0
 800a668:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a66a:	7bbb      	ldrb	r3, [r7, #14]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d104      	bne.n	800a67a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	2202      	movs	r2, #2
 800a674:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a678:	e058      	b.n	800a72c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a67a:	7bbb      	ldrb	r3, [r7, #14]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d055      	beq.n	800a72c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	2204      	movs	r2, #4
 800a684:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a688:	e050      	b.n	800a72c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	3340      	adds	r3, #64	; 0x40
 800a68e:	4619      	mov	r1, r3
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 f860 	bl	800a756 <GetLineCoding>
 800a696:	4603      	mov	r3, r0
 800a698:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a69a:	7bbb      	ldrb	r3, [r7, #14]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d126      	bne.n	800a6ee <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6b2:	791b      	ldrb	r3, [r3, #4]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d13b      	bne.n	800a730 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6c2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d133      	bne.n	800a730 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6d2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d12b      	bne.n	800a730 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6e0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d124      	bne.n	800a730 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 f958 	bl	800a99c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a6ec:	e020      	b.n	800a730 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800a6ee:	7bbb      	ldrb	r3, [r7, #14]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d01d      	beq.n	800a730 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	2204      	movs	r2, #4
 800a6f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a6fc:	e018      	b.n	800a730 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 f867 	bl	800a7d2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 f8da 	bl	800a8be <CDC_ProcessReception>
      break;
 800a70a:	e014      	b.n	800a736 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800a70c:	2100      	movs	r1, #0
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 ffef 	bl	800b6f2 <USBH_ClrFeature>
 800a714:	4603      	mov	r3, r0
 800a716:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a718:	7bbb      	ldrb	r3, [r7, #14]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d10a      	bne.n	800a734 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	2200      	movs	r2, #0
 800a722:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800a726:	e005      	b.n	800a734 <USBH_CDC_Process+0x120>

    default:
      break;
 800a728:	bf00      	nop
 800a72a:	e004      	b.n	800a736 <USBH_CDC_Process+0x122>
      break;
 800a72c:	bf00      	nop
 800a72e:	e002      	b.n	800a736 <USBH_CDC_Process+0x122>
      break;
 800a730:	bf00      	nop
 800a732:	e000      	b.n	800a736 <USBH_CDC_Process+0x122>
      break;
 800a734:	bf00      	nop

  }

  return status;
 800a736:	7bfb      	ldrb	r3, [r7, #15]
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3710      	adds	r7, #16
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a740:	b480      	push	{r7}
 800a742:	b083      	sub	sp, #12
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a748:	2300      	movs	r3, #0
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	370c      	adds	r7, #12
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr

0800a756 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b082      	sub	sp, #8
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
 800a75e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	22a1      	movs	r2, #161	; 0xa1
 800a764:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2221      	movs	r2, #33	; 0x21
 800a76a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2207      	movs	r2, #7
 800a77c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	2207      	movs	r2, #7
 800a782:	4619      	mov	r1, r3
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f001 fa81 	bl	800bc8c <USBH_CtlReq>
 800a78a:	4603      	mov	r3, r0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3708      	adds	r7, #8
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2221      	movs	r2, #33	; 0x21
 800a7a2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2220      	movs	r2, #32
 800a7a8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2207      	movs	r2, #7
 800a7ba:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	2207      	movs	r2, #7
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f001 fa62 	bl	800bc8c <USBH_CtlReq>
 800a7c8:	4603      	mov	r3, r0
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3708      	adds	r7, #8
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b086      	sub	sp, #24
 800a7d6:	af02      	add	r7, sp, #8
 800a7d8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7e0:	69db      	ldr	r3, [r3, #28]
 800a7e2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d002      	beq.n	800a7f8 <CDC_ProcessTransmission+0x26>
 800a7f2:	2b02      	cmp	r3, #2
 800a7f4:	d023      	beq.n	800a83e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800a7f6:	e05e      	b.n	800a8b6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7fc:	68fa      	ldr	r2, [r7, #12]
 800a7fe:	8b12      	ldrh	r2, [r2, #24]
 800a800:	4293      	cmp	r3, r2
 800a802:	d90b      	bls.n	800a81c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	69d9      	ldr	r1, [r3, #28]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	8b1a      	ldrh	r2, [r3, #24]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	7b5b      	ldrb	r3, [r3, #13]
 800a810:	2001      	movs	r0, #1
 800a812:	9000      	str	r0, [sp, #0]
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f001 fc48 	bl	800c0aa <USBH_BulkSendData>
 800a81a:	e00b      	b.n	800a834 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800a824:	b29a      	uxth	r2, r3
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	7b5b      	ldrb	r3, [r3, #13]
 800a82a:	2001      	movs	r0, #1
 800a82c:	9000      	str	r0, [sp, #0]
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f001 fc3b 	bl	800c0aa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2202      	movs	r2, #2
 800a838:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a83c:	e03b      	b.n	800a8b6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	7b5b      	ldrb	r3, [r3, #13]
 800a842:	4619      	mov	r1, r3
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f001 ffbb 	bl	800c7c0 <USBH_LL_GetURBState>
 800a84a:	4603      	mov	r3, r0
 800a84c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a84e:	7afb      	ldrb	r3, [r7, #11]
 800a850:	2b01      	cmp	r3, #1
 800a852:	d128      	bne.n	800a8a6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	8b12      	ldrh	r2, [r2, #24]
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d90e      	bls.n	800a87e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a864:	68fa      	ldr	r2, [r7, #12]
 800a866:	8b12      	ldrh	r2, [r2, #24]
 800a868:	1a9a      	subs	r2, r3, r2
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	69db      	ldr	r3, [r3, #28]
 800a872:	68fa      	ldr	r2, [r7, #12]
 800a874:	8b12      	ldrh	r2, [r2, #24]
 800a876:	441a      	add	r2, r3
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	61da      	str	r2, [r3, #28]
 800a87c:	e002      	b.n	800a884 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2200      	movs	r2, #0
 800a882:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d004      	beq.n	800a896 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2201      	movs	r2, #1
 800a890:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a894:	e00e      	b.n	800a8b4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2200      	movs	r2, #0
 800a89a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f868 	bl	800a974 <USBH_CDC_TransmitCallback>
      break;
 800a8a4:	e006      	b.n	800a8b4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a8a6:	7afb      	ldrb	r3, [r7, #11]
 800a8a8:	2b02      	cmp	r3, #2
 800a8aa:	d103      	bne.n	800a8b4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a8b4:	bf00      	nop
  }
}
 800a8b6:	bf00      	nop
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a8be:	b580      	push	{r7, lr}
 800a8c0:	b086      	sub	sp, #24
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8cc:	69db      	ldr	r3, [r3, #28]
 800a8ce:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a8da:	2b03      	cmp	r3, #3
 800a8dc:	d002      	beq.n	800a8e4 <CDC_ProcessReception+0x26>
 800a8de:	2b04      	cmp	r3, #4
 800a8e0:	d00e      	beq.n	800a900 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a8e2:	e043      	b.n	800a96c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	6a19      	ldr	r1, [r3, #32]
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	8b5a      	ldrh	r2, [r3, #26]
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	7b1b      	ldrb	r3, [r3, #12]
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f001 fbff 	bl	800c0f4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	2204      	movs	r2, #4
 800a8fa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a8fe:	e035      	b.n	800a96c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	7b1b      	ldrb	r3, [r3, #12]
 800a904:	4619      	mov	r1, r3
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f001 ff5a 	bl	800c7c0 <USBH_LL_GetURBState>
 800a90c:	4603      	mov	r3, r0
 800a90e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a910:	7cfb      	ldrb	r3, [r7, #19]
 800a912:	2b01      	cmp	r3, #1
 800a914:	d129      	bne.n	800a96a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	7b1b      	ldrb	r3, [r3, #12]
 800a91a:	4619      	mov	r1, r3
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f001 febd 	bl	800c69c <USBH_LL_GetLastXferSize>
 800a922:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d016      	beq.n	800a95c <CDC_ProcessReception+0x9e>
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	8b5b      	ldrh	r3, [r3, #26]
 800a932:	461a      	mov	r2, r3
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	4293      	cmp	r3, r2
 800a938:	d910      	bls.n	800a95c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	1ad2      	subs	r2, r2, r3
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	6a1a      	ldr	r2, [r3, #32]
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	441a      	add	r2, r3
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	2203      	movs	r2, #3
 800a956:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a95a:	e006      	b.n	800a96a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	2200      	movs	r2, #0
 800a960:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 f80f 	bl	800a988 <USBH_CDC_ReceiveCallback>
      break;
 800a96a:	bf00      	nop
  }
}
 800a96c:	bf00      	nop
 800a96e:	3718      	adds	r7, #24
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a974:	b480      	push	{r7}
 800a976:	b083      	sub	sp, #12
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a97c:	bf00      	nop
 800a97e:	370c      	adds	r7, #12
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr

0800a988 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a988:	b480      	push	{r7}
 800a98a:	b083      	sub	sp, #12
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a990:	bf00      	nop
 800a992:	370c      	adds	r7, #12
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr

0800a99c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a9a4:	bf00      	nop
 800a9a6:	370c      	adds	r7, #12
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	4613      	mov	r3, r2
 800a9bc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d101      	bne.n	800a9c8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	e029      	b.n	800aa1c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	79fa      	ldrb	r2, [r7, #7]
 800a9cc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	f000 f81f 	bl	800aa24 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d003      	beq.n	800aa14 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	68ba      	ldr	r2, [r7, #8]
 800aa10:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800aa14:	68f8      	ldr	r0, [r7, #12]
 800aa16:	f001 fd8d 	bl	800c534 <USBH_LL_Init>

  return USBH_OK;
 800aa1a:	2300      	movs	r3, #0
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3710      	adds	r7, #16
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aa30:	2300      	movs	r3, #0
 800aa32:	60fb      	str	r3, [r7, #12]
 800aa34:	e009      	b.n	800aa4a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	33e0      	adds	r3, #224	; 0xe0
 800aa3c:	009b      	lsls	r3, r3, #2
 800aa3e:	4413      	add	r3, r2
 800aa40:	2200      	movs	r2, #0
 800aa42:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	3301      	adds	r3, #1
 800aa48:	60fb      	str	r3, [r7, #12]
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2b0f      	cmp	r3, #15
 800aa4e:	d9f2      	bls.n	800aa36 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aa50:	2300      	movs	r3, #0
 800aa52:	60fb      	str	r3, [r7, #12]
 800aa54:	e009      	b.n	800aa6a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	4413      	add	r3, r2
 800aa5c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800aa60:	2200      	movs	r2, #0
 800aa62:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	3301      	adds	r3, #1
 800aa68:	60fb      	str	r3, [r7, #12]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa70:	d3f1      	bcc.n	800aa56 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2201      	movs	r2, #1
 800aa82:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2240      	movs	r2, #64	; 0x40
 800aa96:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2200      	movs	r2, #0
 800aaba:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3714      	adds	r7, #20
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800aacc:	b480      	push	{r7}
 800aace:	b085      	sub	sp, #20
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800aad6:	2300      	movs	r3, #0
 800aad8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d016      	beq.n	800ab0e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d10e      	bne.n	800ab08 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800aaf0:	1c59      	adds	r1, r3, #1
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	33de      	adds	r3, #222	; 0xde
 800aafc:	6839      	ldr	r1, [r7, #0]
 800aafe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ab02:	2300      	movs	r3, #0
 800ab04:	73fb      	strb	r3, [r7, #15]
 800ab06:	e004      	b.n	800ab12 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ab08:	2302      	movs	r3, #2
 800ab0a:	73fb      	strb	r3, [r7, #15]
 800ab0c:	e001      	b.n	800ab12 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ab0e:	2302      	movs	r3, #2
 800ab10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ab12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3714      	adds	r7, #20
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	460b      	mov	r3, r1
 800ab2a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800ab36:	78fa      	ldrb	r2, [r7, #3]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d204      	bcs.n	800ab46 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	78fa      	ldrb	r2, [r7, #3]
 800ab40:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800ab44:	e001      	b.n	800ab4a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ab46:	2302      	movs	r3, #2
 800ab48:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ab4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3714      	adds	r7, #20
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b087      	sub	sp, #28
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	4608      	mov	r0, r1
 800ab62:	4611      	mov	r1, r2
 800ab64:	461a      	mov	r2, r3
 800ab66:	4603      	mov	r3, r0
 800ab68:	70fb      	strb	r3, [r7, #3]
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	70bb      	strb	r3, [r7, #2]
 800ab6e:	4613      	mov	r3, r2
 800ab70:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ab72:	2300      	movs	r3, #0
 800ab74:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ab76:	2300      	movs	r3, #0
 800ab78:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ab80:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ab82:	e025      	b.n	800abd0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ab84:	7dfb      	ldrb	r3, [r7, #23]
 800ab86:	221a      	movs	r2, #26
 800ab88:	fb02 f303 	mul.w	r3, r2, r3
 800ab8c:	3308      	adds	r3, #8
 800ab8e:	68fa      	ldr	r2, [r7, #12]
 800ab90:	4413      	add	r3, r2
 800ab92:	3302      	adds	r3, #2
 800ab94:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	795b      	ldrb	r3, [r3, #5]
 800ab9a:	78fa      	ldrb	r2, [r7, #3]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d002      	beq.n	800aba6 <USBH_FindInterface+0x4e>
 800aba0:	78fb      	ldrb	r3, [r7, #3]
 800aba2:	2bff      	cmp	r3, #255	; 0xff
 800aba4:	d111      	bne.n	800abca <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800abaa:	78ba      	ldrb	r2, [r7, #2]
 800abac:	429a      	cmp	r2, r3
 800abae:	d002      	beq.n	800abb6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800abb0:	78bb      	ldrb	r3, [r7, #2]
 800abb2:	2bff      	cmp	r3, #255	; 0xff
 800abb4:	d109      	bne.n	800abca <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800abba:	787a      	ldrb	r2, [r7, #1]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d002      	beq.n	800abc6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800abc0:	787b      	ldrb	r3, [r7, #1]
 800abc2:	2bff      	cmp	r3, #255	; 0xff
 800abc4:	d101      	bne.n	800abca <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800abc6:	7dfb      	ldrb	r3, [r7, #23]
 800abc8:	e006      	b.n	800abd8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800abca:	7dfb      	ldrb	r3, [r7, #23]
 800abcc:	3301      	adds	r3, #1
 800abce:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800abd0:	7dfb      	ldrb	r3, [r7, #23]
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d9d6      	bls.n	800ab84 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800abd6:	23ff      	movs	r3, #255	; 0xff
}
 800abd8:	4618      	mov	r0, r3
 800abda:	371c      	adds	r7, #28
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f001 fcdd 	bl	800c5ac <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800abf2:	2101      	movs	r1, #1
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f001 fdf6 	bl	800c7e6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800abfa:	2300      	movs	r3, #0
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3708      	adds	r7, #8
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b088      	sub	sp, #32
 800ac08:	af04      	add	r7, sp, #16
 800ac0a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ac0c:	2302      	movs	r3, #2
 800ac0e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ac10:	2300      	movs	r3, #0
 800ac12:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d102      	bne.n	800ac26 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2203      	movs	r2, #3
 800ac24:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	b2db      	uxtb	r3, r3
 800ac2c:	2b0b      	cmp	r3, #11
 800ac2e:	f200 81be 	bhi.w	800afae <USBH_Process+0x3aa>
 800ac32:	a201      	add	r2, pc, #4	; (adr r2, 800ac38 <USBH_Process+0x34>)
 800ac34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac38:	0800ac69 	.word	0x0800ac69
 800ac3c:	0800ac9b 	.word	0x0800ac9b
 800ac40:	0800ad03 	.word	0x0800ad03
 800ac44:	0800af49 	.word	0x0800af49
 800ac48:	0800afaf 	.word	0x0800afaf
 800ac4c:	0800ada7 	.word	0x0800ada7
 800ac50:	0800aeef 	.word	0x0800aeef
 800ac54:	0800addd 	.word	0x0800addd
 800ac58:	0800adfd 	.word	0x0800adfd
 800ac5c:	0800ae1d 	.word	0x0800ae1d
 800ac60:	0800ae61 	.word	0x0800ae61
 800ac64:	0800af31 	.word	0x0800af31
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f000 819e 	beq.w	800afb2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2201      	movs	r2, #1
 800ac7a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ac7c:	20c8      	movs	r0, #200	; 0xc8
 800ac7e:	f001 fdf9 	bl	800c874 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f001 fcef 	bl	800c666 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2200      	movs	r2, #0
 800ac94:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ac98:	e18b      	b.n	800afb2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d107      	bne.n	800acb4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2202      	movs	r2, #2
 800acb0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800acb2:	e18d      	b.n	800afd0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800acba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acbe:	d914      	bls.n	800acea <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800acc6:	3301      	adds	r3, #1
 800acc8:	b2da      	uxtb	r2, r3
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800acd6:	2b03      	cmp	r3, #3
 800acd8:	d903      	bls.n	800ace2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	220d      	movs	r2, #13
 800acde:	701a      	strb	r2, [r3, #0]
      break;
 800ace0:	e176      	b.n	800afd0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	701a      	strb	r2, [r3, #0]
      break;
 800ace8:	e172      	b.n	800afd0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800acf0:	f103 020a 	add.w	r2, r3, #10
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800acfa:	200a      	movs	r0, #10
 800acfc:	f001 fdba 	bl	800c874 <USBH_Delay>
      break;
 800ad00:	e166      	b.n	800afd0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d005      	beq.n	800ad18 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad12:	2104      	movs	r1, #4
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ad18:	2064      	movs	r0, #100	; 0x64
 800ad1a:	f001 fdab 	bl	800c874 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f001 fc7a 	bl	800c618 <USBH_LL_GetSpeed>
 800ad24:	4603      	mov	r3, r0
 800ad26:	461a      	mov	r2, r3
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2205      	movs	r2, #5
 800ad32:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ad34:	2100      	movs	r1, #0
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f001 fa29 	bl	800c18e <USBH_AllocPipe>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	461a      	mov	r2, r3
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ad44:	2180      	movs	r1, #128	; 0x80
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f001 fa21 	bl	800c18e <USBH_AllocPipe>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	461a      	mov	r2, r3
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	7919      	ldrb	r1, [r3, #4]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ad68:	b292      	uxth	r2, r2
 800ad6a:	9202      	str	r2, [sp, #8]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	9201      	str	r2, [sp, #4]
 800ad70:	9300      	str	r3, [sp, #0]
 800ad72:	4603      	mov	r3, r0
 800ad74:	2280      	movs	r2, #128	; 0x80
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f001 f9da 	bl	800c130 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	7959      	ldrb	r1, [r3, #5]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ad90:	b292      	uxth	r2, r2
 800ad92:	9202      	str	r2, [sp, #8]
 800ad94:	2200      	movs	r2, #0
 800ad96:	9201      	str	r2, [sp, #4]
 800ad98:	9300      	str	r3, [sp, #0]
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f001 f9c6 	bl	800c130 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ada4:	e114      	b.n	800afd0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 f918 	bl	800afdc <USBH_HandleEnum>
 800adac:	4603      	mov	r3, r0
 800adae:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800adb0:	7bbb      	ldrb	r3, [r7, #14]
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f040 80fe 	bne.w	800afb6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d103      	bne.n	800add4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2208      	movs	r2, #8
 800add0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800add2:	e0f0      	b.n	800afb6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2207      	movs	r2, #7
 800add8:	701a      	strb	r2, [r3, #0]
      break;
 800adda:	e0ec      	b.n	800afb6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	f000 80e9 	beq.w	800afba <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800adee:	2101      	movs	r1, #1
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2208      	movs	r2, #8
 800adf8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800adfa:	e0de      	b.n	800afba <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	4619      	mov	r1, r3
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 fc2c 	bl	800b664 <USBH_SetCfg>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f040 80d5 	bne.w	800afbe <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2209      	movs	r2, #9
 800ae18:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ae1a:	e0d0      	b.n	800afbe <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ae22:	f003 0320 	and.w	r3, r3, #32
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d016      	beq.n	800ae58 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800ae2a:	2101      	movs	r1, #1
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 fc3c 	bl	800b6aa <USBH_SetFeature>
 800ae32:	4603      	mov	r3, r0
 800ae34:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ae36:	7bbb      	ldrb	r3, [r7, #14]
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d103      	bne.n	800ae46 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	220a      	movs	r2, #10
 800ae42:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ae44:	e0bd      	b.n	800afc2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800ae46:	7bbb      	ldrb	r3, [r7, #14]
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	2b03      	cmp	r3, #3
 800ae4c:	f040 80b9 	bne.w	800afc2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	220a      	movs	r2, #10
 800ae54:	701a      	strb	r2, [r3, #0]
      break;
 800ae56:	e0b4      	b.n	800afc2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	220a      	movs	r2, #10
 800ae5c:	701a      	strb	r2, [r3, #0]
      break;
 800ae5e:	e0b0      	b.n	800afc2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	f000 80ad 	beq.w	800afc6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ae74:	2300      	movs	r3, #0
 800ae76:	73fb      	strb	r3, [r7, #15]
 800ae78:	e016      	b.n	800aea8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ae7a:	7bfa      	ldrb	r2, [r7, #15]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	32de      	adds	r2, #222	; 0xde
 800ae80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae84:	791a      	ldrb	r2, [r3, #4]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d108      	bne.n	800aea2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800ae90:	7bfa      	ldrb	r2, [r7, #15]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	32de      	adds	r2, #222	; 0xde
 800ae96:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800aea0:	e005      	b.n	800aeae <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800aea2:	7bfb      	ldrb	r3, [r7, #15]
 800aea4:	3301      	adds	r3, #1
 800aea6:	73fb      	strb	r3, [r7, #15]
 800aea8:	7bfb      	ldrb	r3, [r7, #15]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d0e5      	beq.n	800ae7a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d016      	beq.n	800aee6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aebe:	689b      	ldr	r3, [r3, #8]
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	4798      	blx	r3
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d109      	bne.n	800aede <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2206      	movs	r2, #6
 800aece:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aed6:	2103      	movs	r1, #3
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aedc:	e073      	b.n	800afc6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	220d      	movs	r2, #13
 800aee2:	701a      	strb	r2, [r3, #0]
      break;
 800aee4:	e06f      	b.n	800afc6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	220d      	movs	r2, #13
 800aeea:	701a      	strb	r2, [r3, #0]
      break;
 800aeec:	e06b      	b.n	800afc6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d017      	beq.n	800af28 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aefe:	691b      	ldr	r3, [r3, #16]
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	4798      	blx	r3
 800af04:	4603      	mov	r3, r0
 800af06:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800af08:	7bbb      	ldrb	r3, [r7, #14]
 800af0a:	b2db      	uxtb	r3, r3
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d103      	bne.n	800af18 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	220b      	movs	r2, #11
 800af14:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800af16:	e058      	b.n	800afca <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800af18:	7bbb      	ldrb	r3, [r7, #14]
 800af1a:	b2db      	uxtb	r3, r3
 800af1c:	2b02      	cmp	r3, #2
 800af1e:	d154      	bne.n	800afca <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	220d      	movs	r2, #13
 800af24:	701a      	strb	r2, [r3, #0]
      break;
 800af26:	e050      	b.n	800afca <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	220d      	movs	r2, #13
 800af2c:	701a      	strb	r2, [r3, #0]
      break;
 800af2e:	e04c      	b.n	800afca <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af36:	2b00      	cmp	r3, #0
 800af38:	d049      	beq.n	800afce <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af40:	695b      	ldr	r3, [r3, #20]
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	4798      	blx	r3
      }
      break;
 800af46:	e042      	b.n	800afce <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2200      	movs	r2, #0
 800af4c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f7ff fd67 	bl	800aa24 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d009      	beq.n	800af74 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2200      	movs	r2, #0
 800af70:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d005      	beq.n	800af8a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800af84:	2105      	movs	r1, #5
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800af90:	b2db      	uxtb	r3, r3
 800af92:	2b01      	cmp	r3, #1
 800af94:	d107      	bne.n	800afa6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2200      	movs	r2, #0
 800af9a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f7ff fe20 	bl	800abe4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800afa4:	e014      	b.n	800afd0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f001 fb00 	bl	800c5ac <USBH_LL_Start>
      break;
 800afac:	e010      	b.n	800afd0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800afae:	bf00      	nop
 800afb0:	e00e      	b.n	800afd0 <USBH_Process+0x3cc>
      break;
 800afb2:	bf00      	nop
 800afb4:	e00c      	b.n	800afd0 <USBH_Process+0x3cc>
      break;
 800afb6:	bf00      	nop
 800afb8:	e00a      	b.n	800afd0 <USBH_Process+0x3cc>
    break;
 800afba:	bf00      	nop
 800afbc:	e008      	b.n	800afd0 <USBH_Process+0x3cc>
      break;
 800afbe:	bf00      	nop
 800afc0:	e006      	b.n	800afd0 <USBH_Process+0x3cc>
      break;
 800afc2:	bf00      	nop
 800afc4:	e004      	b.n	800afd0 <USBH_Process+0x3cc>
      break;
 800afc6:	bf00      	nop
 800afc8:	e002      	b.n	800afd0 <USBH_Process+0x3cc>
      break;
 800afca:	bf00      	nop
 800afcc:	e000      	b.n	800afd0 <USBH_Process+0x3cc>
      break;
 800afce:	bf00      	nop
  }
  return USBH_OK;
 800afd0:	2300      	movs	r3, #0
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3710      	adds	r7, #16
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop

0800afdc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b088      	sub	sp, #32
 800afe0:	af04      	add	r7, sp, #16
 800afe2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800afe4:	2301      	movs	r3, #1
 800afe6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800afe8:	2301      	movs	r3, #1
 800afea:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	785b      	ldrb	r3, [r3, #1]
 800aff0:	2b07      	cmp	r3, #7
 800aff2:	f200 81c1 	bhi.w	800b378 <USBH_HandleEnum+0x39c>
 800aff6:	a201      	add	r2, pc, #4	; (adr r2, 800affc <USBH_HandleEnum+0x20>)
 800aff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800affc:	0800b01d 	.word	0x0800b01d
 800b000:	0800b0db 	.word	0x0800b0db
 800b004:	0800b145 	.word	0x0800b145
 800b008:	0800b1d3 	.word	0x0800b1d3
 800b00c:	0800b23d 	.word	0x0800b23d
 800b010:	0800b2ad 	.word	0x0800b2ad
 800b014:	0800b2f3 	.word	0x0800b2f3
 800b018:	0800b339 	.word	0x0800b339
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b01c:	2108      	movs	r1, #8
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 fa50 	bl	800b4c4 <USBH_Get_DevDesc>
 800b024:	4603      	mov	r3, r0
 800b026:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b028:	7bbb      	ldrb	r3, [r7, #14]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d130      	bne.n	800b090 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2201      	movs	r2, #1
 800b03c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	7919      	ldrb	r1, [r3, #4]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b052:	b292      	uxth	r2, r2
 800b054:	9202      	str	r2, [sp, #8]
 800b056:	2200      	movs	r2, #0
 800b058:	9201      	str	r2, [sp, #4]
 800b05a:	9300      	str	r3, [sp, #0]
 800b05c:	4603      	mov	r3, r0
 800b05e:	2280      	movs	r2, #128	; 0x80
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f001 f865 	bl	800c130 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	7959      	ldrb	r1, [r3, #5]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b07a:	b292      	uxth	r2, r2
 800b07c:	9202      	str	r2, [sp, #8]
 800b07e:	2200      	movs	r2, #0
 800b080:	9201      	str	r2, [sp, #4]
 800b082:	9300      	str	r3, [sp, #0]
 800b084:	4603      	mov	r3, r0
 800b086:	2200      	movs	r2, #0
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f001 f851 	bl	800c130 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b08e:	e175      	b.n	800b37c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b090:	7bbb      	ldrb	r3, [r7, #14]
 800b092:	2b03      	cmp	r3, #3
 800b094:	f040 8172 	bne.w	800b37c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b09e:	3301      	adds	r3, #1
 800b0a0:	b2da      	uxtb	r2, r3
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b0ae:	2b03      	cmp	r3, #3
 800b0b0:	d903      	bls.n	800b0ba <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	220d      	movs	r2, #13
 800b0b6:	701a      	strb	r2, [r3, #0]
      break;
 800b0b8:	e160      	b.n	800b37c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	795b      	ldrb	r3, [r3, #5]
 800b0be:	4619      	mov	r1, r3
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f001 f885 	bl	800c1d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	791b      	ldrb	r3, [r3, #4]
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f001 f87f 	bl	800c1d0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	701a      	strb	r2, [r3, #0]
      break;
 800b0d8:	e150      	b.n	800b37c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b0da:	2112      	movs	r1, #18
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 f9f1 	bl	800b4c4 <USBH_Get_DevDesc>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b0e6:	7bbb      	ldrb	r3, [r7, #14]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d103      	bne.n	800b0f4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2202      	movs	r2, #2
 800b0f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b0f2:	e145      	b.n	800b380 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b0f4:	7bbb      	ldrb	r3, [r7, #14]
 800b0f6:	2b03      	cmp	r3, #3
 800b0f8:	f040 8142 	bne.w	800b380 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b102:	3301      	adds	r3, #1
 800b104:	b2da      	uxtb	r2, r3
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b112:	2b03      	cmp	r3, #3
 800b114:	d903      	bls.n	800b11e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	220d      	movs	r2, #13
 800b11a:	701a      	strb	r2, [r3, #0]
      break;
 800b11c:	e130      	b.n	800b380 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	795b      	ldrb	r3, [r3, #5]
 800b122:	4619      	mov	r1, r3
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f001 f853 	bl	800c1d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	791b      	ldrb	r3, [r3, #4]
 800b12e:	4619      	mov	r1, r3
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f001 f84d 	bl	800c1d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2200      	movs	r2, #0
 800b13a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2200      	movs	r2, #0
 800b140:	701a      	strb	r2, [r3, #0]
      break;
 800b142:	e11d      	b.n	800b380 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b144:	2101      	movs	r1, #1
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 fa68 	bl	800b61c <USBH_SetAddress>
 800b14c:	4603      	mov	r3, r0
 800b14e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b150:	7bbb      	ldrb	r3, [r7, #14]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d132      	bne.n	800b1bc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b156:	2002      	movs	r0, #2
 800b158:	f001 fb8c 	bl	800c874 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2201      	movs	r2, #1
 800b160:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2203      	movs	r2, #3
 800b168:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	7919      	ldrb	r1, [r3, #4]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b17e:	b292      	uxth	r2, r2
 800b180:	9202      	str	r2, [sp, #8]
 800b182:	2200      	movs	r2, #0
 800b184:	9201      	str	r2, [sp, #4]
 800b186:	9300      	str	r3, [sp, #0]
 800b188:	4603      	mov	r3, r0
 800b18a:	2280      	movs	r2, #128	; 0x80
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f000 ffcf 	bl	800c130 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	7959      	ldrb	r1, [r3, #5]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b1a6:	b292      	uxth	r2, r2
 800b1a8:	9202      	str	r2, [sp, #8]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	9201      	str	r2, [sp, #4]
 800b1ae:	9300      	str	r3, [sp, #0]
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 ffbb 	bl	800c130 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b1ba:	e0e3      	b.n	800b384 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b1bc:	7bbb      	ldrb	r3, [r7, #14]
 800b1be:	2b03      	cmp	r3, #3
 800b1c0:	f040 80e0 	bne.w	800b384 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	220d      	movs	r2, #13
 800b1c8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	705a      	strb	r2, [r3, #1]
      break;
 800b1d0:	e0d8      	b.n	800b384 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b1d2:	2109      	movs	r1, #9
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 f99d 	bl	800b514 <USBH_Get_CfgDesc>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b1de:	7bbb      	ldrb	r3, [r7, #14]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d103      	bne.n	800b1ec <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2204      	movs	r2, #4
 800b1e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b1ea:	e0cd      	b.n	800b388 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b1ec:	7bbb      	ldrb	r3, [r7, #14]
 800b1ee:	2b03      	cmp	r3, #3
 800b1f0:	f040 80ca 	bne.w	800b388 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	b2da      	uxtb	r2, r3
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b20a:	2b03      	cmp	r3, #3
 800b20c:	d903      	bls.n	800b216 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	220d      	movs	r2, #13
 800b212:	701a      	strb	r2, [r3, #0]
      break;
 800b214:	e0b8      	b.n	800b388 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	795b      	ldrb	r3, [r3, #5]
 800b21a:	4619      	mov	r1, r3
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 ffd7 	bl	800c1d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	791b      	ldrb	r3, [r3, #4]
 800b226:	4619      	mov	r1, r3
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 ffd1 	bl	800c1d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2200      	movs	r2, #0
 800b232:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2200      	movs	r2, #0
 800b238:	701a      	strb	r2, [r3, #0]
      break;
 800b23a:	e0a5      	b.n	800b388 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b242:	4619      	mov	r1, r3
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f000 f965 	bl	800b514 <USBH_Get_CfgDesc>
 800b24a:	4603      	mov	r3, r0
 800b24c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b24e:	7bbb      	ldrb	r3, [r7, #14]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d103      	bne.n	800b25c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2205      	movs	r2, #5
 800b258:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b25a:	e097      	b.n	800b38c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b25c:	7bbb      	ldrb	r3, [r7, #14]
 800b25e:	2b03      	cmp	r3, #3
 800b260:	f040 8094 	bne.w	800b38c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b26a:	3301      	adds	r3, #1
 800b26c:	b2da      	uxtb	r2, r3
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b27a:	2b03      	cmp	r3, #3
 800b27c:	d903      	bls.n	800b286 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	220d      	movs	r2, #13
 800b282:	701a      	strb	r2, [r3, #0]
      break;
 800b284:	e082      	b.n	800b38c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	795b      	ldrb	r3, [r3, #5]
 800b28a:	4619      	mov	r1, r3
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 ff9f 	bl	800c1d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	791b      	ldrb	r3, [r3, #4]
 800b296:	4619      	mov	r1, r3
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 ff99 	bl	800c1d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	701a      	strb	r2, [r3, #0]
      break;
 800b2aa:	e06f      	b.n	800b38c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d019      	beq.n	800b2ea <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b2c2:	23ff      	movs	r3, #255	; 0xff
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 f949 	bl	800b55c <USBH_Get_StringDesc>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b2ce:	7bbb      	ldrb	r3, [r7, #14]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d103      	bne.n	800b2dc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2206      	movs	r2, #6
 800b2d8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b2da:	e059      	b.n	800b390 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b2dc:	7bbb      	ldrb	r3, [r7, #14]
 800b2de:	2b03      	cmp	r3, #3
 800b2e0:	d156      	bne.n	800b390 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2206      	movs	r2, #6
 800b2e6:	705a      	strb	r2, [r3, #1]
      break;
 800b2e8:	e052      	b.n	800b390 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2206      	movs	r2, #6
 800b2ee:	705a      	strb	r2, [r3, #1]
      break;
 800b2f0:	e04e      	b.n	800b390 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d019      	beq.n	800b330 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b308:	23ff      	movs	r3, #255	; 0xff
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 f926 	bl	800b55c <USBH_Get_StringDesc>
 800b310:	4603      	mov	r3, r0
 800b312:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b314:	7bbb      	ldrb	r3, [r7, #14]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d103      	bne.n	800b322 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2207      	movs	r2, #7
 800b31e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b320:	e038      	b.n	800b394 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b322:	7bbb      	ldrb	r3, [r7, #14]
 800b324:	2b03      	cmp	r3, #3
 800b326:	d135      	bne.n	800b394 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2207      	movs	r2, #7
 800b32c:	705a      	strb	r2, [r3, #1]
      break;
 800b32e:	e031      	b.n	800b394 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2207      	movs	r2, #7
 800b334:	705a      	strb	r2, [r3, #1]
      break;
 800b336:	e02d      	b.n	800b394 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d017      	beq.n	800b372 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b34e:	23ff      	movs	r3, #255	; 0xff
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 f903 	bl	800b55c <USBH_Get_StringDesc>
 800b356:	4603      	mov	r3, r0
 800b358:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b35a:	7bbb      	ldrb	r3, [r7, #14]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d102      	bne.n	800b366 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b360:	2300      	movs	r3, #0
 800b362:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b364:	e018      	b.n	800b398 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b366:	7bbb      	ldrb	r3, [r7, #14]
 800b368:	2b03      	cmp	r3, #3
 800b36a:	d115      	bne.n	800b398 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b36c:	2300      	movs	r3, #0
 800b36e:	73fb      	strb	r3, [r7, #15]
      break;
 800b370:	e012      	b.n	800b398 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b372:	2300      	movs	r3, #0
 800b374:	73fb      	strb	r3, [r7, #15]
      break;
 800b376:	e00f      	b.n	800b398 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b378:	bf00      	nop
 800b37a:	e00e      	b.n	800b39a <USBH_HandleEnum+0x3be>
      break;
 800b37c:	bf00      	nop
 800b37e:	e00c      	b.n	800b39a <USBH_HandleEnum+0x3be>
      break;
 800b380:	bf00      	nop
 800b382:	e00a      	b.n	800b39a <USBH_HandleEnum+0x3be>
      break;
 800b384:	bf00      	nop
 800b386:	e008      	b.n	800b39a <USBH_HandleEnum+0x3be>
      break;
 800b388:	bf00      	nop
 800b38a:	e006      	b.n	800b39a <USBH_HandleEnum+0x3be>
      break;
 800b38c:	bf00      	nop
 800b38e:	e004      	b.n	800b39a <USBH_HandleEnum+0x3be>
      break;
 800b390:	bf00      	nop
 800b392:	e002      	b.n	800b39a <USBH_HandleEnum+0x3be>
      break;
 800b394:	bf00      	nop
 800b396:	e000      	b.n	800b39a <USBH_HandleEnum+0x3be>
      break;
 800b398:	bf00      	nop
  }
  return Status;
 800b39a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3710      	adds	r7, #16
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b083      	sub	sp, #12
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	683a      	ldr	r2, [r7, #0]
 800b3b2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b3b6:	bf00      	nop
 800b3b8:	370c      	adds	r7, #12
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr

0800b3c2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b082      	sub	sp, #8
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b3d0:	1c5a      	adds	r2, r3, #1
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f000 f804 	bl	800b3e6 <USBH_HandleSof>
}
 800b3de:	bf00      	nop
 800b3e0:	3708      	adds	r7, #8
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}

0800b3e6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b3e6:	b580      	push	{r7, lr}
 800b3e8:	b082      	sub	sp, #8
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	2b0b      	cmp	r3, #11
 800b3f6:	d10a      	bne.n	800b40e <USBH_HandleSof+0x28>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d005      	beq.n	800b40e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b408:	699b      	ldr	r3, [r3, #24]
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	4798      	blx	r3
  }
}
 800b40e:	bf00      	nop
 800b410:	3708      	adds	r7, #8
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}

0800b416 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b416:	b480      	push	{r7}
 800b418:	b083      	sub	sp, #12
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2201      	movs	r2, #1
 800b422:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800b426:	bf00      	nop
}
 800b428:	370c      	adds	r7, #12
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr

0800b432 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b432:	b480      	push	{r7}
 800b434:	b083      	sub	sp, #12
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2200      	movs	r2, #0
 800b43e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b442:	bf00      	nop
}
 800b444:	370c      	adds	r7, #12
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr

0800b44e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b44e:	b480      	push	{r7}
 800b450:	b083      	sub	sp, #12
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2201      	movs	r2, #1
 800b45a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2200      	movs	r2, #0
 800b46a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b46e:	2300      	movs	r3, #0
}
 800b470:	4618      	mov	r0, r3
 800b472:	370c      	adds	r7, #12
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b082      	sub	sp, #8
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2201      	movs	r2, #1
 800b488:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2200      	movs	r2, #0
 800b490:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f001 f8a0 	bl	800c5e2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	791b      	ldrb	r3, [r3, #4]
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f000 fe91 	bl	800c1d0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	795b      	ldrb	r3, [r3, #5]
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 fe8b 	bl	800c1d0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b4ba:	2300      	movs	r3, #0
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3708      	adds	r7, #8
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b086      	sub	sp, #24
 800b4c8:	af02      	add	r7, sp, #8
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b4d6:	78fb      	ldrb	r3, [r7, #3]
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	9300      	str	r3, [sp, #0]
 800b4dc:	4613      	mov	r3, r2
 800b4de:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b4e2:	2100      	movs	r1, #0
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 f864 	bl	800b5b2 <USBH_GetDescriptor>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800b4ee:	7bfb      	ldrb	r3, [r7, #15]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d10a      	bne.n	800b50a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b500:	78fa      	ldrb	r2, [r7, #3]
 800b502:	b292      	uxth	r2, r2
 800b504:	4619      	mov	r1, r3
 800b506:	f000 f918 	bl	800b73a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b50a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3710      	adds	r7, #16
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b514:	b580      	push	{r7, lr}
 800b516:	b086      	sub	sp, #24
 800b518:	af02      	add	r7, sp, #8
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	460b      	mov	r3, r1
 800b51e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	331c      	adds	r3, #28
 800b524:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b526:	887b      	ldrh	r3, [r7, #2]
 800b528:	9300      	str	r3, [sp, #0]
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b530:	2100      	movs	r1, #0
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 f83d 	bl	800b5b2 <USBH_GetDescriptor>
 800b538:	4603      	mov	r3, r0
 800b53a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b53c:	7bfb      	ldrb	r3, [r7, #15]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d107      	bne.n	800b552 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b542:	887b      	ldrh	r3, [r7, #2]
 800b544:	461a      	mov	r2, r3
 800b546:	68b9      	ldr	r1, [r7, #8]
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f000 f987 	bl	800b85c <USBH_ParseCfgDesc>
 800b54e:	4603      	mov	r3, r0
 800b550:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b552:	7bfb      	ldrb	r3, [r7, #15]
}
 800b554:	4618      	mov	r0, r3
 800b556:	3710      	adds	r7, #16
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b088      	sub	sp, #32
 800b560:	af02      	add	r7, sp, #8
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	607a      	str	r2, [r7, #4]
 800b566:	461a      	mov	r2, r3
 800b568:	460b      	mov	r3, r1
 800b56a:	72fb      	strb	r3, [r7, #11]
 800b56c:	4613      	mov	r3, r2
 800b56e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800b570:	7afb      	ldrb	r3, [r7, #11]
 800b572:	b29b      	uxth	r3, r3
 800b574:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b578:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b580:	893b      	ldrh	r3, [r7, #8]
 800b582:	9300      	str	r3, [sp, #0]
 800b584:	460b      	mov	r3, r1
 800b586:	2100      	movs	r1, #0
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f000 f812 	bl	800b5b2 <USBH_GetDescriptor>
 800b58e:	4603      	mov	r3, r0
 800b590:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b592:	7dfb      	ldrb	r3, [r7, #23]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d107      	bne.n	800b5a8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b59e:	893a      	ldrh	r2, [r7, #8]
 800b5a0:	6879      	ldr	r1, [r7, #4]
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f000 fb24 	bl	800bbf0 <USBH_ParseStringDesc>
  }

  return status;
 800b5a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3718      	adds	r7, #24
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b5b2:	b580      	push	{r7, lr}
 800b5b4:	b084      	sub	sp, #16
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	60f8      	str	r0, [r7, #12]
 800b5ba:	607b      	str	r3, [r7, #4]
 800b5bc:	460b      	mov	r3, r1
 800b5be:	72fb      	strb	r3, [r7, #11]
 800b5c0:	4613      	mov	r3, r2
 800b5c2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	789b      	ldrb	r3, [r3, #2]
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d11c      	bne.n	800b606 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b5cc:	7afb      	ldrb	r3, [r7, #11]
 800b5ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b5d2:	b2da      	uxtb	r2, r3
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2206      	movs	r2, #6
 800b5dc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	893a      	ldrh	r2, [r7, #8]
 800b5e2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b5e4:	893b      	ldrh	r3, [r7, #8]
 800b5e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b5ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5ee:	d104      	bne.n	800b5fa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f240 4209 	movw	r2, #1033	; 0x409
 800b5f6:	829a      	strh	r2, [r3, #20]
 800b5f8:	e002      	b.n	800b600 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	8b3a      	ldrh	r2, [r7, #24]
 800b604:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b606:	8b3b      	ldrh	r3, [r7, #24]
 800b608:	461a      	mov	r2, r3
 800b60a:	6879      	ldr	r1, [r7, #4]
 800b60c:	68f8      	ldr	r0, [r7, #12]
 800b60e:	f000 fb3d 	bl	800bc8c <USBH_CtlReq>
 800b612:	4603      	mov	r3, r0
}
 800b614:	4618      	mov	r0, r3
 800b616:	3710      	adds	r7, #16
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	460b      	mov	r3, r1
 800b626:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	789b      	ldrb	r3, [r3, #2]
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	d10f      	bne.n	800b650 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2205      	movs	r2, #5
 800b63a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b63c:	78fb      	ldrb	r3, [r7, #3]
 800b63e:	b29a      	uxth	r2, r3
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2200      	movs	r2, #0
 800b648:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2200      	movs	r2, #0
 800b64e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b650:	2200      	movs	r2, #0
 800b652:	2100      	movs	r1, #0
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 fb19 	bl	800bc8c <USBH_CtlReq>
 800b65a:	4603      	mov	r3, r0
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3708      	adds	r7, #8
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}

0800b664 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	460b      	mov	r3, r1
 800b66e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	789b      	ldrb	r3, [r3, #2]
 800b674:	2b01      	cmp	r3, #1
 800b676:	d10e      	bne.n	800b696 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2200      	movs	r2, #0
 800b67c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2209      	movs	r2, #9
 800b682:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	887a      	ldrh	r2, [r7, #2]
 800b688:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2200      	movs	r2, #0
 800b68e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2200      	movs	r2, #0
 800b694:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b696:	2200      	movs	r2, #0
 800b698:	2100      	movs	r1, #0
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 faf6 	bl	800bc8c <USBH_CtlReq>
 800b6a0:	4603      	mov	r3, r0
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3708      	adds	r7, #8
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}

0800b6aa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b6aa:	b580      	push	{r7, lr}
 800b6ac:	b082      	sub	sp, #8
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	789b      	ldrb	r3, [r3, #2]
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d10f      	bne.n	800b6de <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2203      	movs	r2, #3
 800b6c8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b6ca:	78fb      	ldrb	r3, [r7, #3]
 800b6cc:	b29a      	uxth	r2, r3
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b6de:	2200      	movs	r2, #0
 800b6e0:	2100      	movs	r1, #0
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 fad2 	bl	800bc8c <USBH_CtlReq>
 800b6e8:	4603      	mov	r3, r0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3708      	adds	r7, #8
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}

0800b6f2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b6f2:	b580      	push	{r7, lr}
 800b6f4:	b082      	sub	sp, #8
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	789b      	ldrb	r3, [r3, #2]
 800b702:	2b01      	cmp	r3, #1
 800b704:	d10f      	bne.n	800b726 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2202      	movs	r2, #2
 800b70a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2201      	movs	r2, #1
 800b710:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2200      	movs	r2, #0
 800b716:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b718:	78fb      	ldrb	r3, [r7, #3]
 800b71a:	b29a      	uxth	r2, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2200      	movs	r2, #0
 800b724:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800b726:	2200      	movs	r2, #0
 800b728:	2100      	movs	r1, #0
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 faae 	bl	800bc8c <USBH_CtlReq>
 800b730:	4603      	mov	r3, r0
}
 800b732:	4618      	mov	r0, r3
 800b734:	3708      	adds	r7, #8
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}

0800b73a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b73a:	b480      	push	{r7}
 800b73c:	b085      	sub	sp, #20
 800b73e:	af00      	add	r7, sp, #0
 800b740:	60f8      	str	r0, [r7, #12]
 800b742:	60b9      	str	r1, [r7, #8]
 800b744:	4613      	mov	r3, r2
 800b746:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	781a      	ldrb	r2, [r3, #0]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	785a      	ldrb	r2, [r3, #1]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	3302      	adds	r3, #2
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	b29a      	uxth	r2, r3
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	3303      	adds	r3, #3
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	b29b      	uxth	r3, r3
 800b768:	021b      	lsls	r3, r3, #8
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	4313      	orrs	r3, r2
 800b76e:	b29a      	uxth	r2, r3
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	791a      	ldrb	r2, [r3, #4]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	795a      	ldrb	r2, [r3, #5]
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	799a      	ldrb	r2, [r3, #6]
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	79da      	ldrb	r2, [r3, #7]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	79db      	ldrb	r3, [r3, #7]
 800b798:	2b20      	cmp	r3, #32
 800b79a:	dc11      	bgt.n	800b7c0 <USBH_ParseDevDesc+0x86>
 800b79c:	2b08      	cmp	r3, #8
 800b79e:	db16      	blt.n	800b7ce <USBH_ParseDevDesc+0x94>
 800b7a0:	3b08      	subs	r3, #8
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b7a8:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b7ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	bf14      	ite	ne
 800b7b4:	2301      	movne	r3, #1
 800b7b6:	2300      	moveq	r3, #0
 800b7b8:	b2db      	uxtb	r3, r3
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d102      	bne.n	800b7c4 <USBH_ParseDevDesc+0x8a>
 800b7be:	e006      	b.n	800b7ce <USBH_ParseDevDesc+0x94>
 800b7c0:	2b40      	cmp	r3, #64	; 0x40
 800b7c2:	d104      	bne.n	800b7ce <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	79da      	ldrb	r2, [r3, #7]
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	71da      	strb	r2, [r3, #7]
      break;
 800b7cc:	e003      	b.n	800b7d6 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2240      	movs	r2, #64	; 0x40
 800b7d2:	71da      	strb	r2, [r3, #7]
      break;
 800b7d4:	bf00      	nop
  }

  if (length > 8U)
 800b7d6:	88fb      	ldrh	r3, [r7, #6]
 800b7d8:	2b08      	cmp	r3, #8
 800b7da:	d939      	bls.n	800b850 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	3308      	adds	r3, #8
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	b29a      	uxth	r2, r3
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	3309      	adds	r3, #9
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	b29b      	uxth	r3, r3
 800b7ec:	021b      	lsls	r3, r3, #8
 800b7ee:	b29b      	uxth	r3, r3
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	b29a      	uxth	r2, r3
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	330a      	adds	r3, #10
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	b29a      	uxth	r2, r3
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	330b      	adds	r3, #11
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	b29b      	uxth	r3, r3
 800b808:	021b      	lsls	r3, r3, #8
 800b80a:	b29b      	uxth	r3, r3
 800b80c:	4313      	orrs	r3, r2
 800b80e:	b29a      	uxth	r2, r3
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	330c      	adds	r3, #12
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	b29a      	uxth	r2, r3
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	330d      	adds	r3, #13
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	b29b      	uxth	r3, r3
 800b824:	021b      	lsls	r3, r3, #8
 800b826:	b29b      	uxth	r3, r3
 800b828:	4313      	orrs	r3, r2
 800b82a:	b29a      	uxth	r2, r3
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	7b9a      	ldrb	r2, [r3, #14]
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	7bda      	ldrb	r2, [r3, #15]
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	7c1a      	ldrb	r2, [r3, #16]
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	7c5a      	ldrb	r2, [r3, #17]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	745a      	strb	r2, [r3, #17]
  }
}
 800b850:	bf00      	nop
 800b852:	3714      	adds	r7, #20
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b08c      	sub	sp, #48	; 0x30
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	4613      	mov	r3, r2
 800b868:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b870:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b872:	2300      	movs	r3, #0
 800b874:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b87c:	2300      	movs	r3, #0
 800b87e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800b882:	2300      	movs	r3, #0
 800b884:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	781a      	ldrb	r2, [r3, #0]
 800b890:	6a3b      	ldr	r3, [r7, #32]
 800b892:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	785a      	ldrb	r2, [r3, #1]
 800b898:	6a3b      	ldr	r3, [r7, #32]
 800b89a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	3302      	adds	r3, #2
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	b29a      	uxth	r2, r3
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	3303      	adds	r3, #3
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	021b      	lsls	r3, r3, #8
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8b8:	bf28      	it	cs
 800b8ba:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800b8be:	b29a      	uxth	r2, r3
 800b8c0:	6a3b      	ldr	r3, [r7, #32]
 800b8c2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	791a      	ldrb	r2, [r3, #4]
 800b8c8:	6a3b      	ldr	r3, [r7, #32]
 800b8ca:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	795a      	ldrb	r2, [r3, #5]
 800b8d0:	6a3b      	ldr	r3, [r7, #32]
 800b8d2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	799a      	ldrb	r2, [r3, #6]
 800b8d8:	6a3b      	ldr	r3, [r7, #32]
 800b8da:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	79da      	ldrb	r2, [r3, #7]
 800b8e0:	6a3b      	ldr	r3, [r7, #32]
 800b8e2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	7a1a      	ldrb	r2, [r3, #8]
 800b8e8:	6a3b      	ldr	r3, [r7, #32]
 800b8ea:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800b8ec:	6a3b      	ldr	r3, [r7, #32]
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	2b09      	cmp	r3, #9
 800b8f2:	d002      	beq.n	800b8fa <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b8f4:	6a3b      	ldr	r3, [r7, #32]
 800b8f6:	2209      	movs	r2, #9
 800b8f8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b8fa:	88fb      	ldrh	r3, [r7, #6]
 800b8fc:	2b09      	cmp	r3, #9
 800b8fe:	f240 809d 	bls.w	800ba3c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800b902:	2309      	movs	r3, #9
 800b904:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b906:	2300      	movs	r3, #0
 800b908:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b90a:	e081      	b.n	800ba10 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b90c:	f107 0316 	add.w	r3, r7, #22
 800b910:	4619      	mov	r1, r3
 800b912:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b914:	f000 f99f 	bl	800bc56 <USBH_GetNextDesc>
 800b918:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91c:	785b      	ldrb	r3, [r3, #1]
 800b91e:	2b04      	cmp	r3, #4
 800b920:	d176      	bne.n	800ba10 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	2b09      	cmp	r3, #9
 800b928:	d002      	beq.n	800b930 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92c:	2209      	movs	r2, #9
 800b92e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b934:	221a      	movs	r2, #26
 800b936:	fb02 f303 	mul.w	r3, r2, r3
 800b93a:	3308      	adds	r3, #8
 800b93c:	6a3a      	ldr	r2, [r7, #32]
 800b93e:	4413      	add	r3, r2
 800b940:	3302      	adds	r3, #2
 800b942:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b944:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b946:	69f8      	ldr	r0, [r7, #28]
 800b948:	f000 f87e 	bl	800ba48 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b94c:	2300      	movs	r3, #0
 800b94e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b952:	2300      	movs	r3, #0
 800b954:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b956:	e043      	b.n	800b9e0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b958:	f107 0316 	add.w	r3, r7, #22
 800b95c:	4619      	mov	r1, r3
 800b95e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b960:	f000 f979 	bl	800bc56 <USBH_GetNextDesc>
 800b964:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b968:	785b      	ldrb	r3, [r3, #1]
 800b96a:	2b05      	cmp	r3, #5
 800b96c:	d138      	bne.n	800b9e0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800b96e:	69fb      	ldr	r3, [r7, #28]
 800b970:	795b      	ldrb	r3, [r3, #5]
 800b972:	2b01      	cmp	r3, #1
 800b974:	d10f      	bne.n	800b996 <USBH_ParseCfgDesc+0x13a>
 800b976:	69fb      	ldr	r3, [r7, #28]
 800b978:	799b      	ldrb	r3, [r3, #6]
 800b97a:	2b02      	cmp	r3, #2
 800b97c:	d10b      	bne.n	800b996 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b97e:	69fb      	ldr	r3, [r7, #28]
 800b980:	79db      	ldrb	r3, [r3, #7]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d10f      	bne.n	800b9a6 <USBH_ParseCfgDesc+0x14a>
 800b986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	2b09      	cmp	r3, #9
 800b98c:	d00b      	beq.n	800b9a6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800b98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b990:	2209      	movs	r2, #9
 800b992:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b994:	e007      	b.n	800b9a6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800b996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	2b07      	cmp	r3, #7
 800b99c:	d004      	beq.n	800b9a8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a0:	2207      	movs	r2, #7
 800b9a2:	701a      	strb	r2, [r3, #0]
 800b9a4:	e000      	b.n	800b9a8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b9a6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b9a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9ac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b9b0:	3201      	adds	r2, #1
 800b9b2:	00d2      	lsls	r2, r2, #3
 800b9b4:	211a      	movs	r1, #26
 800b9b6:	fb01 f303 	mul.w	r3, r1, r3
 800b9ba:	4413      	add	r3, r2
 800b9bc:	3308      	adds	r3, #8
 800b9be:	6a3a      	ldr	r2, [r7, #32]
 800b9c0:	4413      	add	r3, r2
 800b9c2:	3304      	adds	r3, #4
 800b9c4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b9c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9c8:	69b9      	ldr	r1, [r7, #24]
 800b9ca:	68f8      	ldr	r0, [r7, #12]
 800b9cc:	f000 f86b 	bl	800baa6 <USBH_ParseEPDesc>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800b9d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b9da:	3301      	adds	r3, #1
 800b9dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	791b      	ldrb	r3, [r3, #4]
 800b9e4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d204      	bcs.n	800b9f6 <USBH_ParseCfgDesc+0x19a>
 800b9ec:	6a3b      	ldr	r3, [r7, #32]
 800b9ee:	885a      	ldrh	r2, [r3, #2]
 800b9f0:	8afb      	ldrh	r3, [r7, #22]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d8b0      	bhi.n	800b958 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b9f6:	69fb      	ldr	r3, [r7, #28]
 800b9f8:	791b      	ldrb	r3, [r3, #4]
 800b9fa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d201      	bcs.n	800ba06 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800ba02:	2303      	movs	r3, #3
 800ba04:	e01c      	b.n	800ba40 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800ba06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba0a:	3301      	adds	r3, #1
 800ba0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ba10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d805      	bhi.n	800ba24 <USBH_ParseCfgDesc+0x1c8>
 800ba18:	6a3b      	ldr	r3, [r7, #32]
 800ba1a:	885a      	ldrh	r2, [r3, #2]
 800ba1c:	8afb      	ldrh	r3, [r7, #22]
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	f63f af74 	bhi.w	800b90c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800ba24:	6a3b      	ldr	r3, [r7, #32]
 800ba26:	791b      	ldrb	r3, [r3, #4]
 800ba28:	2b02      	cmp	r3, #2
 800ba2a:	bf28      	it	cs
 800ba2c:	2302      	movcs	r3, #2
 800ba2e:	b2db      	uxtb	r3, r3
 800ba30:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d201      	bcs.n	800ba3c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800ba38:	2303      	movs	r3, #3
 800ba3a:	e001      	b.n	800ba40 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800ba3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3730      	adds	r7, #48	; 0x30
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}

0800ba48 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b083      	sub	sp, #12
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	781a      	ldrb	r2, [r3, #0]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	785a      	ldrb	r2, [r3, #1]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	789a      	ldrb	r2, [r3, #2]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	78da      	ldrb	r2, [r3, #3]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	791a      	ldrb	r2, [r3, #4]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	795a      	ldrb	r2, [r3, #5]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	799a      	ldrb	r2, [r3, #6]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	79da      	ldrb	r2, [r3, #7]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	7a1a      	ldrb	r2, [r3, #8]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	721a      	strb	r2, [r3, #8]
}
 800ba9a:	bf00      	nop
 800ba9c:	370c      	adds	r7, #12
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr

0800baa6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800baa6:	b480      	push	{r7}
 800baa8:	b087      	sub	sp, #28
 800baaa:	af00      	add	r7, sp, #0
 800baac:	60f8      	str	r0, [r7, #12]
 800baae:	60b9      	str	r1, [r7, #8]
 800bab0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800bab2:	2300      	movs	r3, #0
 800bab4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	781a      	ldrb	r2, [r3, #0]
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	785a      	ldrb	r2, [r3, #1]
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	789a      	ldrb	r2, [r3, #2]
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	78da      	ldrb	r2, [r3, #3]
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	3304      	adds	r3, #4
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	b29a      	uxth	r2, r3
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	3305      	adds	r3, #5
 800bae2:	781b      	ldrb	r3, [r3, #0]
 800bae4:	b29b      	uxth	r3, r3
 800bae6:	021b      	lsls	r3, r3, #8
 800bae8:	b29b      	uxth	r3, r3
 800baea:	4313      	orrs	r3, r2
 800baec:	b29a      	uxth	r2, r3
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	799a      	ldrb	r2, [r3, #6]
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	889b      	ldrh	r3, [r3, #4]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d102      	bne.n	800bb08 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800bb02:	2303      	movs	r3, #3
 800bb04:	75fb      	strb	r3, [r7, #23]
 800bb06:	e033      	b.n	800bb70 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	889b      	ldrh	r3, [r3, #4]
 800bb0c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bb10:	f023 0307 	bic.w	r3, r3, #7
 800bb14:	b29a      	uxth	r2, r3
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	889b      	ldrh	r3, [r3, #4]
 800bb1e:	b21a      	sxth	r2, r3
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	3304      	adds	r3, #4
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	b299      	uxth	r1, r3
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	3305      	adds	r3, #5
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	b29b      	uxth	r3, r3
 800bb30:	021b      	lsls	r3, r3, #8
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	430b      	orrs	r3, r1
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d110      	bne.n	800bb62 <USBH_ParseEPDesc+0xbc>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	3304      	adds	r3, #4
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	b299      	uxth	r1, r3
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	3305      	adds	r3, #5
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	021b      	lsls	r3, r3, #8
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	430b      	orrs	r3, r1
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	b21b      	sxth	r3, r3
 800bb5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb5e:	b21b      	sxth	r3, r3
 800bb60:	e001      	b.n	800bb66 <USBH_ParseEPDesc+0xc0>
 800bb62:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb66:	4313      	orrs	r3, r2
 800bb68:	b21b      	sxth	r3, r3
 800bb6a:	b29a      	uxth	r2, r3
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d116      	bne.n	800bba8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	78db      	ldrb	r3, [r3, #3]
 800bb7e:	f003 0303 	and.w	r3, r3, #3
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	d005      	beq.n	800bb92 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	78db      	ldrb	r3, [r3, #3]
 800bb8a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bb8e:	2b03      	cmp	r3, #3
 800bb90:	d127      	bne.n	800bbe2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	799b      	ldrb	r3, [r3, #6]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d003      	beq.n	800bba2 <USBH_ParseEPDesc+0xfc>
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	799b      	ldrb	r3, [r3, #6]
 800bb9e:	2b10      	cmp	r3, #16
 800bba0:	d91f      	bls.n	800bbe2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800bba2:	2303      	movs	r3, #3
 800bba4:	75fb      	strb	r3, [r7, #23]
 800bba6:	e01c      	b.n	800bbe2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	78db      	ldrb	r3, [r3, #3]
 800bbac:	f003 0303 	and.w	r3, r3, #3
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d10a      	bne.n	800bbca <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	799b      	ldrb	r3, [r3, #6]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d003      	beq.n	800bbc4 <USBH_ParseEPDesc+0x11e>
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	799b      	ldrb	r3, [r3, #6]
 800bbc0:	2b10      	cmp	r3, #16
 800bbc2:	d90e      	bls.n	800bbe2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800bbc4:	2303      	movs	r3, #3
 800bbc6:	75fb      	strb	r3, [r7, #23]
 800bbc8:	e00b      	b.n	800bbe2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	78db      	ldrb	r3, [r3, #3]
 800bbce:	f003 0303 	and.w	r3, r3, #3
 800bbd2:	2b03      	cmp	r3, #3
 800bbd4:	d105      	bne.n	800bbe2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	799b      	ldrb	r3, [r3, #6]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d101      	bne.n	800bbe2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800bbde:	2303      	movs	r3, #3
 800bbe0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800bbe2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	371c      	adds	r7, #28
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr

0800bbf0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b087      	sub	sp, #28
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	4613      	mov	r3, r2
 800bbfc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	3301      	adds	r3, #1
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	2b03      	cmp	r3, #3
 800bc06:	d120      	bne.n	800bc4a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	1e9a      	subs	r2, r3, #2
 800bc0e:	88fb      	ldrh	r3, [r7, #6]
 800bc10:	4293      	cmp	r3, r2
 800bc12:	bf28      	it	cs
 800bc14:	4613      	movcs	r3, r2
 800bc16:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	3302      	adds	r3, #2
 800bc1c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800bc1e:	2300      	movs	r3, #0
 800bc20:	82fb      	strh	r3, [r7, #22]
 800bc22:	e00b      	b.n	800bc3c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bc24:	8afb      	ldrh	r3, [r7, #22]
 800bc26:	68fa      	ldr	r2, [r7, #12]
 800bc28:	4413      	add	r3, r2
 800bc2a:	781a      	ldrb	r2, [r3, #0]
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	3301      	adds	r3, #1
 800bc34:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bc36:	8afb      	ldrh	r3, [r7, #22]
 800bc38:	3302      	adds	r3, #2
 800bc3a:	82fb      	strh	r3, [r7, #22]
 800bc3c:	8afa      	ldrh	r2, [r7, #22]
 800bc3e:	8abb      	ldrh	r3, [r7, #20]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d3ef      	bcc.n	800bc24 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	2200      	movs	r2, #0
 800bc48:	701a      	strb	r2, [r3, #0]
  }
}
 800bc4a:	bf00      	nop
 800bc4c:	371c      	adds	r7, #28
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr

0800bc56 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800bc56:	b480      	push	{r7}
 800bc58:	b085      	sub	sp, #20
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
 800bc5e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	881a      	ldrh	r2, [r3, #0]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	781b      	ldrb	r3, [r3, #0]
 800bc68:	b29b      	uxth	r3, r3
 800bc6a:	4413      	add	r3, r2
 800bc6c:	b29a      	uxth	r2, r3
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	4413      	add	r3, r2
 800bc7c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bc7e:	68fb      	ldr	r3, [r7, #12]
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3714      	adds	r7, #20
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr

0800bc8c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b086      	sub	sp, #24
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	60f8      	str	r0, [r7, #12]
 800bc94:	60b9      	str	r1, [r7, #8]
 800bc96:	4613      	mov	r3, r2
 800bc98:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	789b      	ldrb	r3, [r3, #2]
 800bca2:	2b01      	cmp	r3, #1
 800bca4:	d002      	beq.n	800bcac <USBH_CtlReq+0x20>
 800bca6:	2b02      	cmp	r3, #2
 800bca8:	d00f      	beq.n	800bcca <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800bcaa:	e027      	b.n	800bcfc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	68ba      	ldr	r2, [r7, #8]
 800bcb0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	88fa      	ldrh	r2, [r7, #6]
 800bcb6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2202      	movs	r2, #2
 800bcc2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	75fb      	strb	r3, [r7, #23]
      break;
 800bcc8:	e018      	b.n	800bcfc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800bcca:	68f8      	ldr	r0, [r7, #12]
 800bccc:	f000 f81c 	bl	800bd08 <USBH_HandleControl>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800bcd4:	7dfb      	ldrb	r3, [r7, #23]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d002      	beq.n	800bce0 <USBH_CtlReq+0x54>
 800bcda:	7dfb      	ldrb	r3, [r7, #23]
 800bcdc:	2b03      	cmp	r3, #3
 800bcde:	d106      	bne.n	800bcee <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2201      	movs	r2, #1
 800bce4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2200      	movs	r2, #0
 800bcea:	761a      	strb	r2, [r3, #24]
      break;
 800bcec:	e005      	b.n	800bcfa <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800bcee:	7dfb      	ldrb	r3, [r7, #23]
 800bcf0:	2b02      	cmp	r3, #2
 800bcf2:	d102      	bne.n	800bcfa <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	709a      	strb	r2, [r3, #2]
      break;
 800bcfa:	bf00      	nop
  }
  return status;
 800bcfc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3718      	adds	r7, #24
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
	...

0800bd08 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b086      	sub	sp, #24
 800bd0c:	af02      	add	r7, sp, #8
 800bd0e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bd10:	2301      	movs	r3, #1
 800bd12:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bd14:	2300      	movs	r3, #0
 800bd16:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	7e1b      	ldrb	r3, [r3, #24]
 800bd1c:	3b01      	subs	r3, #1
 800bd1e:	2b0a      	cmp	r3, #10
 800bd20:	f200 8156 	bhi.w	800bfd0 <USBH_HandleControl+0x2c8>
 800bd24:	a201      	add	r2, pc, #4	; (adr r2, 800bd2c <USBH_HandleControl+0x24>)
 800bd26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd2a:	bf00      	nop
 800bd2c:	0800bd59 	.word	0x0800bd59
 800bd30:	0800bd73 	.word	0x0800bd73
 800bd34:	0800bddd 	.word	0x0800bddd
 800bd38:	0800be03 	.word	0x0800be03
 800bd3c:	0800be3b 	.word	0x0800be3b
 800bd40:	0800be65 	.word	0x0800be65
 800bd44:	0800beb7 	.word	0x0800beb7
 800bd48:	0800bed9 	.word	0x0800bed9
 800bd4c:	0800bf15 	.word	0x0800bf15
 800bd50:	0800bf3b 	.word	0x0800bf3b
 800bd54:	0800bf79 	.word	0x0800bf79
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f103 0110 	add.w	r1, r3, #16
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	795b      	ldrb	r3, [r3, #5]
 800bd62:	461a      	mov	r2, r3
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f000 f943 	bl	800bff0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2202      	movs	r2, #2
 800bd6e:	761a      	strb	r2, [r3, #24]
      break;
 800bd70:	e139      	b.n	800bfe6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	795b      	ldrb	r3, [r3, #5]
 800bd76:	4619      	mov	r1, r3
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 fd21 	bl	800c7c0 <USBH_LL_GetURBState>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800bd82:	7bbb      	ldrb	r3, [r7, #14]
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	d11e      	bne.n	800bdc6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	7c1b      	ldrb	r3, [r3, #16]
 800bd8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bd90:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	8adb      	ldrh	r3, [r3, #22]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d00a      	beq.n	800bdb0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800bd9a:	7b7b      	ldrb	r3, [r7, #13]
 800bd9c:	2b80      	cmp	r3, #128	; 0x80
 800bd9e:	d103      	bne.n	800bda8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2203      	movs	r2, #3
 800bda4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bda6:	e115      	b.n	800bfd4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2205      	movs	r2, #5
 800bdac:	761a      	strb	r2, [r3, #24]
      break;
 800bdae:	e111      	b.n	800bfd4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800bdb0:	7b7b      	ldrb	r3, [r7, #13]
 800bdb2:	2b80      	cmp	r3, #128	; 0x80
 800bdb4:	d103      	bne.n	800bdbe <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2209      	movs	r2, #9
 800bdba:	761a      	strb	r2, [r3, #24]
      break;
 800bdbc:	e10a      	b.n	800bfd4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2207      	movs	r2, #7
 800bdc2:	761a      	strb	r2, [r3, #24]
      break;
 800bdc4:	e106      	b.n	800bfd4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800bdc6:	7bbb      	ldrb	r3, [r7, #14]
 800bdc8:	2b04      	cmp	r3, #4
 800bdca:	d003      	beq.n	800bdd4 <USBH_HandleControl+0xcc>
 800bdcc:	7bbb      	ldrb	r3, [r7, #14]
 800bdce:	2b02      	cmp	r3, #2
 800bdd0:	f040 8100 	bne.w	800bfd4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	220b      	movs	r2, #11
 800bdd8:	761a      	strb	r2, [r3, #24]
      break;
 800bdda:	e0fb      	b.n	800bfd4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bde2:	b29a      	uxth	r2, r3
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6899      	ldr	r1, [r3, #8]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	899a      	ldrh	r2, [r3, #12]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	791b      	ldrb	r3, [r3, #4]
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 f93a 	bl	800c06e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2204      	movs	r2, #4
 800bdfe:	761a      	strb	r2, [r3, #24]
      break;
 800be00:	e0f1      	b.n	800bfe6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	791b      	ldrb	r3, [r3, #4]
 800be06:	4619      	mov	r1, r3
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f000 fcd9 	bl	800c7c0 <USBH_LL_GetURBState>
 800be0e:	4603      	mov	r3, r0
 800be10:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800be12:	7bbb      	ldrb	r3, [r7, #14]
 800be14:	2b01      	cmp	r3, #1
 800be16:	d102      	bne.n	800be1e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2209      	movs	r2, #9
 800be1c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800be1e:	7bbb      	ldrb	r3, [r7, #14]
 800be20:	2b05      	cmp	r3, #5
 800be22:	d102      	bne.n	800be2a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800be24:	2303      	movs	r3, #3
 800be26:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800be28:	e0d6      	b.n	800bfd8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800be2a:	7bbb      	ldrb	r3, [r7, #14]
 800be2c:	2b04      	cmp	r3, #4
 800be2e:	f040 80d3 	bne.w	800bfd8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	220b      	movs	r2, #11
 800be36:	761a      	strb	r2, [r3, #24]
      break;
 800be38:	e0ce      	b.n	800bfd8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6899      	ldr	r1, [r3, #8]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	899a      	ldrh	r2, [r3, #12]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	795b      	ldrb	r3, [r3, #5]
 800be46:	2001      	movs	r0, #1
 800be48:	9000      	str	r0, [sp, #0]
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 f8ea 	bl	800c024 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800be56:	b29a      	uxth	r2, r3
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2206      	movs	r2, #6
 800be60:	761a      	strb	r2, [r3, #24]
      break;
 800be62:	e0c0      	b.n	800bfe6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	795b      	ldrb	r3, [r3, #5]
 800be68:	4619      	mov	r1, r3
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 fca8 	bl	800c7c0 <USBH_LL_GetURBState>
 800be70:	4603      	mov	r3, r0
 800be72:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800be74:	7bbb      	ldrb	r3, [r7, #14]
 800be76:	2b01      	cmp	r3, #1
 800be78:	d103      	bne.n	800be82 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2207      	movs	r2, #7
 800be7e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800be80:	e0ac      	b.n	800bfdc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800be82:	7bbb      	ldrb	r3, [r7, #14]
 800be84:	2b05      	cmp	r3, #5
 800be86:	d105      	bne.n	800be94 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	220c      	movs	r2, #12
 800be8c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800be8e:	2303      	movs	r3, #3
 800be90:	73fb      	strb	r3, [r7, #15]
      break;
 800be92:	e0a3      	b.n	800bfdc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800be94:	7bbb      	ldrb	r3, [r7, #14]
 800be96:	2b02      	cmp	r3, #2
 800be98:	d103      	bne.n	800bea2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2205      	movs	r2, #5
 800be9e:	761a      	strb	r2, [r3, #24]
      break;
 800bea0:	e09c      	b.n	800bfdc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800bea2:	7bbb      	ldrb	r3, [r7, #14]
 800bea4:	2b04      	cmp	r3, #4
 800bea6:	f040 8099 	bne.w	800bfdc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	220b      	movs	r2, #11
 800beae:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800beb0:	2302      	movs	r3, #2
 800beb2:	73fb      	strb	r3, [r7, #15]
      break;
 800beb4:	e092      	b.n	800bfdc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	791b      	ldrb	r3, [r3, #4]
 800beba:	2200      	movs	r2, #0
 800bebc:	2100      	movs	r1, #0
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 f8d5 	bl	800c06e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800beca:	b29a      	uxth	r2, r3
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2208      	movs	r2, #8
 800bed4:	761a      	strb	r2, [r3, #24]

      break;
 800bed6:	e086      	b.n	800bfe6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	791b      	ldrb	r3, [r3, #4]
 800bedc:	4619      	mov	r1, r3
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 fc6e 	bl	800c7c0 <USBH_LL_GetURBState>
 800bee4:	4603      	mov	r3, r0
 800bee6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bee8:	7bbb      	ldrb	r3, [r7, #14]
 800beea:	2b01      	cmp	r3, #1
 800beec:	d105      	bne.n	800befa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	220d      	movs	r2, #13
 800bef2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bef4:	2300      	movs	r3, #0
 800bef6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bef8:	e072      	b.n	800bfe0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800befa:	7bbb      	ldrb	r3, [r7, #14]
 800befc:	2b04      	cmp	r3, #4
 800befe:	d103      	bne.n	800bf08 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	220b      	movs	r2, #11
 800bf04:	761a      	strb	r2, [r3, #24]
      break;
 800bf06:	e06b      	b.n	800bfe0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800bf08:	7bbb      	ldrb	r3, [r7, #14]
 800bf0a:	2b05      	cmp	r3, #5
 800bf0c:	d168      	bne.n	800bfe0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800bf0e:	2303      	movs	r3, #3
 800bf10:	73fb      	strb	r3, [r7, #15]
      break;
 800bf12:	e065      	b.n	800bfe0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	795b      	ldrb	r3, [r3, #5]
 800bf18:	2201      	movs	r2, #1
 800bf1a:	9200      	str	r2, [sp, #0]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	2100      	movs	r1, #0
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f000 f87f 	bl	800c024 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	220a      	movs	r2, #10
 800bf36:	761a      	strb	r2, [r3, #24]
      break;
 800bf38:	e055      	b.n	800bfe6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	795b      	ldrb	r3, [r3, #5]
 800bf3e:	4619      	mov	r1, r3
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 fc3d 	bl	800c7c0 <USBH_LL_GetURBState>
 800bf46:	4603      	mov	r3, r0
 800bf48:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bf4a:	7bbb      	ldrb	r3, [r7, #14]
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d105      	bne.n	800bf5c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800bf50:	2300      	movs	r3, #0
 800bf52:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	220d      	movs	r2, #13
 800bf58:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bf5a:	e043      	b.n	800bfe4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bf5c:	7bbb      	ldrb	r3, [r7, #14]
 800bf5e:	2b02      	cmp	r3, #2
 800bf60:	d103      	bne.n	800bf6a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2209      	movs	r2, #9
 800bf66:	761a      	strb	r2, [r3, #24]
      break;
 800bf68:	e03c      	b.n	800bfe4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800bf6a:	7bbb      	ldrb	r3, [r7, #14]
 800bf6c:	2b04      	cmp	r3, #4
 800bf6e:	d139      	bne.n	800bfe4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	220b      	movs	r2, #11
 800bf74:	761a      	strb	r2, [r3, #24]
      break;
 800bf76:	e035      	b.n	800bfe4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	7e5b      	ldrb	r3, [r3, #25]
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	b2da      	uxtb	r2, r3
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	765a      	strb	r2, [r3, #25]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	7e5b      	ldrb	r3, [r3, #25]
 800bf88:	2b02      	cmp	r3, #2
 800bf8a:	d806      	bhi.n	800bf9a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2201      	movs	r2, #1
 800bf90:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2201      	movs	r2, #1
 800bf96:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bf98:	e025      	b.n	800bfe6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bfa0:	2106      	movs	r1, #6
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	795b      	ldrb	r3, [r3, #5]
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 f90c 	bl	800c1d0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	791b      	ldrb	r3, [r3, #4]
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 f906 	bl	800c1d0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bfca:	2302      	movs	r3, #2
 800bfcc:	73fb      	strb	r3, [r7, #15]
      break;
 800bfce:	e00a      	b.n	800bfe6 <USBH_HandleControl+0x2de>

    default:
      break;
 800bfd0:	bf00      	nop
 800bfd2:	e008      	b.n	800bfe6 <USBH_HandleControl+0x2de>
      break;
 800bfd4:	bf00      	nop
 800bfd6:	e006      	b.n	800bfe6 <USBH_HandleControl+0x2de>
      break;
 800bfd8:	bf00      	nop
 800bfda:	e004      	b.n	800bfe6 <USBH_HandleControl+0x2de>
      break;
 800bfdc:	bf00      	nop
 800bfde:	e002      	b.n	800bfe6 <USBH_HandleControl+0x2de>
      break;
 800bfe0:	bf00      	nop
 800bfe2:	e000      	b.n	800bfe6 <USBH_HandleControl+0x2de>
      break;
 800bfe4:	bf00      	nop
  }

  return status;
 800bfe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3710      	adds	r7, #16
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b088      	sub	sp, #32
 800bff4:	af04      	add	r7, sp, #16
 800bff6:	60f8      	str	r0, [r7, #12]
 800bff8:	60b9      	str	r1, [r7, #8]
 800bffa:	4613      	mov	r3, r2
 800bffc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bffe:	79f9      	ldrb	r1, [r7, #7]
 800c000:	2300      	movs	r3, #0
 800c002:	9303      	str	r3, [sp, #12]
 800c004:	2308      	movs	r3, #8
 800c006:	9302      	str	r3, [sp, #8]
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	9301      	str	r3, [sp, #4]
 800c00c:	2300      	movs	r3, #0
 800c00e:	9300      	str	r3, [sp, #0]
 800c010:	2300      	movs	r3, #0
 800c012:	2200      	movs	r2, #0
 800c014:	68f8      	ldr	r0, [r7, #12]
 800c016:	f000 fba2 	bl	800c75e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c01a:	2300      	movs	r3, #0
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3710      	adds	r7, #16
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}

0800c024 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b088      	sub	sp, #32
 800c028:	af04      	add	r7, sp, #16
 800c02a:	60f8      	str	r0, [r7, #12]
 800c02c:	60b9      	str	r1, [r7, #8]
 800c02e:	4611      	mov	r1, r2
 800c030:	461a      	mov	r2, r3
 800c032:	460b      	mov	r3, r1
 800c034:	80fb      	strh	r3, [r7, #6]
 800c036:	4613      	mov	r3, r2
 800c038:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c040:	2b00      	cmp	r3, #0
 800c042:	d001      	beq.n	800c048 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c044:	2300      	movs	r3, #0
 800c046:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c048:	7979      	ldrb	r1, [r7, #5]
 800c04a:	7e3b      	ldrb	r3, [r7, #24]
 800c04c:	9303      	str	r3, [sp, #12]
 800c04e:	88fb      	ldrh	r3, [r7, #6]
 800c050:	9302      	str	r3, [sp, #8]
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	9301      	str	r3, [sp, #4]
 800c056:	2301      	movs	r3, #1
 800c058:	9300      	str	r3, [sp, #0]
 800c05a:	2300      	movs	r3, #0
 800c05c:	2200      	movs	r2, #0
 800c05e:	68f8      	ldr	r0, [r7, #12]
 800c060:	f000 fb7d 	bl	800c75e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c064:	2300      	movs	r3, #0
}
 800c066:	4618      	mov	r0, r3
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}

0800c06e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c06e:	b580      	push	{r7, lr}
 800c070:	b088      	sub	sp, #32
 800c072:	af04      	add	r7, sp, #16
 800c074:	60f8      	str	r0, [r7, #12]
 800c076:	60b9      	str	r1, [r7, #8]
 800c078:	4611      	mov	r1, r2
 800c07a:	461a      	mov	r2, r3
 800c07c:	460b      	mov	r3, r1
 800c07e:	80fb      	strh	r3, [r7, #6]
 800c080:	4613      	mov	r3, r2
 800c082:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c084:	7979      	ldrb	r1, [r7, #5]
 800c086:	2300      	movs	r3, #0
 800c088:	9303      	str	r3, [sp, #12]
 800c08a:	88fb      	ldrh	r3, [r7, #6]
 800c08c:	9302      	str	r3, [sp, #8]
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	9301      	str	r3, [sp, #4]
 800c092:	2301      	movs	r3, #1
 800c094:	9300      	str	r3, [sp, #0]
 800c096:	2300      	movs	r3, #0
 800c098:	2201      	movs	r2, #1
 800c09a:	68f8      	ldr	r0, [r7, #12]
 800c09c:	f000 fb5f 	bl	800c75e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c0a0:	2300      	movs	r3, #0

}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3710      	adds	r7, #16
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}

0800c0aa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c0aa:	b580      	push	{r7, lr}
 800c0ac:	b088      	sub	sp, #32
 800c0ae:	af04      	add	r7, sp, #16
 800c0b0:	60f8      	str	r0, [r7, #12]
 800c0b2:	60b9      	str	r1, [r7, #8]
 800c0b4:	4611      	mov	r1, r2
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	80fb      	strh	r3, [r7, #6]
 800c0bc:	4613      	mov	r3, r2
 800c0be:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d001      	beq.n	800c0ce <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c0ce:	7979      	ldrb	r1, [r7, #5]
 800c0d0:	7e3b      	ldrb	r3, [r7, #24]
 800c0d2:	9303      	str	r3, [sp, #12]
 800c0d4:	88fb      	ldrh	r3, [r7, #6]
 800c0d6:	9302      	str	r3, [sp, #8]
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	9301      	str	r3, [sp, #4]
 800c0dc:	2301      	movs	r3, #1
 800c0de:	9300      	str	r3, [sp, #0]
 800c0e0:	2302      	movs	r3, #2
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	68f8      	ldr	r0, [r7, #12]
 800c0e6:	f000 fb3a 	bl	800c75e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c0ea:	2300      	movs	r3, #0
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3710      	adds	r7, #16
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b088      	sub	sp, #32
 800c0f8:	af04      	add	r7, sp, #16
 800c0fa:	60f8      	str	r0, [r7, #12]
 800c0fc:	60b9      	str	r1, [r7, #8]
 800c0fe:	4611      	mov	r1, r2
 800c100:	461a      	mov	r2, r3
 800c102:	460b      	mov	r3, r1
 800c104:	80fb      	strh	r3, [r7, #6]
 800c106:	4613      	mov	r3, r2
 800c108:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c10a:	7979      	ldrb	r1, [r7, #5]
 800c10c:	2300      	movs	r3, #0
 800c10e:	9303      	str	r3, [sp, #12]
 800c110:	88fb      	ldrh	r3, [r7, #6]
 800c112:	9302      	str	r3, [sp, #8]
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	9301      	str	r3, [sp, #4]
 800c118:	2301      	movs	r3, #1
 800c11a:	9300      	str	r3, [sp, #0]
 800c11c:	2302      	movs	r3, #2
 800c11e:	2201      	movs	r2, #1
 800c120:	68f8      	ldr	r0, [r7, #12]
 800c122:	f000 fb1c 	bl	800c75e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c126:	2300      	movs	r3, #0
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3710      	adds	r7, #16
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}

0800c130 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b086      	sub	sp, #24
 800c134:	af04      	add	r7, sp, #16
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	4608      	mov	r0, r1
 800c13a:	4611      	mov	r1, r2
 800c13c:	461a      	mov	r2, r3
 800c13e:	4603      	mov	r3, r0
 800c140:	70fb      	strb	r3, [r7, #3]
 800c142:	460b      	mov	r3, r1
 800c144:	70bb      	strb	r3, [r7, #2]
 800c146:	4613      	mov	r3, r2
 800c148:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c14a:	7878      	ldrb	r0, [r7, #1]
 800c14c:	78ba      	ldrb	r2, [r7, #2]
 800c14e:	78f9      	ldrb	r1, [r7, #3]
 800c150:	8b3b      	ldrh	r3, [r7, #24]
 800c152:	9302      	str	r3, [sp, #8]
 800c154:	7d3b      	ldrb	r3, [r7, #20]
 800c156:	9301      	str	r3, [sp, #4]
 800c158:	7c3b      	ldrb	r3, [r7, #16]
 800c15a:	9300      	str	r3, [sp, #0]
 800c15c:	4603      	mov	r3, r0
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 faaf 	bl	800c6c2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800c164:	2300      	movs	r3, #0
}
 800c166:	4618      	mov	r0, r3
 800c168:	3708      	adds	r7, #8
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}

0800c16e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c16e:	b580      	push	{r7, lr}
 800c170:	b082      	sub	sp, #8
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
 800c176:	460b      	mov	r3, r1
 800c178:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c17a:	78fb      	ldrb	r3, [r7, #3]
 800c17c:	4619      	mov	r1, r3
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 face 	bl	800c720 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c184:	2300      	movs	r3, #0
}
 800c186:	4618      	mov	r0, r3
 800c188:	3708      	adds	r7, #8
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c18e:	b580      	push	{r7, lr}
 800c190:	b084      	sub	sp, #16
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
 800c196:	460b      	mov	r3, r1
 800c198:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 f836 	bl	800c20c <USBH_GetFreePipe>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c1a4:	89fb      	ldrh	r3, [r7, #14]
 800c1a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d00a      	beq.n	800c1c4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c1ae:	78fa      	ldrb	r2, [r7, #3]
 800c1b0:	89fb      	ldrh	r3, [r7, #14]
 800c1b2:	f003 030f 	and.w	r3, r3, #15
 800c1b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c1ba:	6879      	ldr	r1, [r7, #4]
 800c1bc:	33e0      	adds	r3, #224	; 0xe0
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	440b      	add	r3, r1
 800c1c2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c1c4:	89fb      	ldrh	r3, [r7, #14]
 800c1c6:	b2db      	uxtb	r3, r3
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3710      	adds	r7, #16
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	460b      	mov	r3, r1
 800c1da:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c1dc:	78fb      	ldrb	r3, [r7, #3]
 800c1de:	2b0f      	cmp	r3, #15
 800c1e0:	d80d      	bhi.n	800c1fe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c1e2:	78fb      	ldrb	r3, [r7, #3]
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	33e0      	adds	r3, #224	; 0xe0
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	4413      	add	r3, r2
 800c1ec:	685a      	ldr	r2, [r3, #4]
 800c1ee:	78fb      	ldrb	r3, [r7, #3]
 800c1f0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c1f4:	6879      	ldr	r1, [r7, #4]
 800c1f6:	33e0      	adds	r3, #224	; 0xe0
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	440b      	add	r3, r1
 800c1fc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c1fe:	2300      	movs	r3, #0
}
 800c200:	4618      	mov	r0, r3
 800c202:	370c      	adds	r7, #12
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr

0800c20c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b085      	sub	sp, #20
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c214:	2300      	movs	r3, #0
 800c216:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c218:	2300      	movs	r3, #0
 800c21a:	73fb      	strb	r3, [r7, #15]
 800c21c:	e00f      	b.n	800c23e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c21e:	7bfb      	ldrb	r3, [r7, #15]
 800c220:	687a      	ldr	r2, [r7, #4]
 800c222:	33e0      	adds	r3, #224	; 0xe0
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	4413      	add	r3, r2
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d102      	bne.n	800c238 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c232:	7bfb      	ldrb	r3, [r7, #15]
 800c234:	b29b      	uxth	r3, r3
 800c236:	e007      	b.n	800c248 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c238:	7bfb      	ldrb	r3, [r7, #15]
 800c23a:	3301      	adds	r3, #1
 800c23c:	73fb      	strb	r3, [r7, #15]
 800c23e:	7bfb      	ldrb	r3, [r7, #15]
 800c240:	2b0f      	cmp	r3, #15
 800c242:	d9ec      	bls.n	800c21e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c244:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3714      	adds	r7, #20
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr

0800c254 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c254:	b480      	push	{r7}
 800c256:	b087      	sub	sp, #28
 800c258:	af00      	add	r7, sp, #0
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	60b9      	str	r1, [r7, #8]
 800c25e:	4613      	mov	r3, r2
 800c260:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c262:	2301      	movs	r3, #1
 800c264:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c266:	2300      	movs	r3, #0
 800c268:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c26a:	4b1f      	ldr	r3, [pc, #124]	; (800c2e8 <FATFS_LinkDriverEx+0x94>)
 800c26c:	7a5b      	ldrb	r3, [r3, #9]
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	2b00      	cmp	r3, #0
 800c272:	d131      	bne.n	800c2d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c274:	4b1c      	ldr	r3, [pc, #112]	; (800c2e8 <FATFS_LinkDriverEx+0x94>)
 800c276:	7a5b      	ldrb	r3, [r3, #9]
 800c278:	b2db      	uxtb	r3, r3
 800c27a:	461a      	mov	r2, r3
 800c27c:	4b1a      	ldr	r3, [pc, #104]	; (800c2e8 <FATFS_LinkDriverEx+0x94>)
 800c27e:	2100      	movs	r1, #0
 800c280:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c282:	4b19      	ldr	r3, [pc, #100]	; (800c2e8 <FATFS_LinkDriverEx+0x94>)
 800c284:	7a5b      	ldrb	r3, [r3, #9]
 800c286:	b2db      	uxtb	r3, r3
 800c288:	4a17      	ldr	r2, [pc, #92]	; (800c2e8 <FATFS_LinkDriverEx+0x94>)
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	4413      	add	r3, r2
 800c28e:	68fa      	ldr	r2, [r7, #12]
 800c290:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c292:	4b15      	ldr	r3, [pc, #84]	; (800c2e8 <FATFS_LinkDriverEx+0x94>)
 800c294:	7a5b      	ldrb	r3, [r3, #9]
 800c296:	b2db      	uxtb	r3, r3
 800c298:	461a      	mov	r2, r3
 800c29a:	4b13      	ldr	r3, [pc, #76]	; (800c2e8 <FATFS_LinkDriverEx+0x94>)
 800c29c:	4413      	add	r3, r2
 800c29e:	79fa      	ldrb	r2, [r7, #7]
 800c2a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c2a2:	4b11      	ldr	r3, [pc, #68]	; (800c2e8 <FATFS_LinkDriverEx+0x94>)
 800c2a4:	7a5b      	ldrb	r3, [r3, #9]
 800c2a6:	b2db      	uxtb	r3, r3
 800c2a8:	1c5a      	adds	r2, r3, #1
 800c2aa:	b2d1      	uxtb	r1, r2
 800c2ac:	4a0e      	ldr	r2, [pc, #56]	; (800c2e8 <FATFS_LinkDriverEx+0x94>)
 800c2ae:	7251      	strb	r1, [r2, #9]
 800c2b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c2b2:	7dbb      	ldrb	r3, [r7, #22]
 800c2b4:	3330      	adds	r3, #48	; 0x30
 800c2b6:	b2da      	uxtb	r2, r3
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	3301      	adds	r3, #1
 800c2c0:	223a      	movs	r2, #58	; 0x3a
 800c2c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	3302      	adds	r3, #2
 800c2c8:	222f      	movs	r2, #47	; 0x2f
 800c2ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	3303      	adds	r3, #3
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c2d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	371c      	adds	r7, #28
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e4:	4770      	bx	lr
 800c2e6:	bf00      	nop
 800c2e8:	20000890 	.word	0x20000890

0800c2ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	6839      	ldr	r1, [r7, #0]
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f7ff ffaa 	bl	800c254 <FATFS_LinkDriverEx>
 800c300:	4603      	mov	r3, r0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3708      	adds	r7, #8
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
	...

0800c30c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c310:	2201      	movs	r2, #1
 800c312:	490e      	ldr	r1, [pc, #56]	; (800c34c <MX_USB_HOST_Init+0x40>)
 800c314:	480e      	ldr	r0, [pc, #56]	; (800c350 <MX_USB_HOST_Init+0x44>)
 800c316:	f7fe fb4b 	bl	800a9b0 <USBH_Init>
 800c31a:	4603      	mov	r3, r0
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d001      	beq.n	800c324 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c320:	f7f6 fd74 	bl	8002e0c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c324:	490b      	ldr	r1, [pc, #44]	; (800c354 <MX_USB_HOST_Init+0x48>)
 800c326:	480a      	ldr	r0, [pc, #40]	; (800c350 <MX_USB_HOST_Init+0x44>)
 800c328:	f7fe fbd0 	bl	800aacc <USBH_RegisterClass>
 800c32c:	4603      	mov	r3, r0
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d001      	beq.n	800c336 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c332:	f7f6 fd6b 	bl	8002e0c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c336:	4806      	ldr	r0, [pc, #24]	; (800c350 <MX_USB_HOST_Init+0x44>)
 800c338:	f7fe fc54 	bl	800abe4 <USBH_Start>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d001      	beq.n	800c346 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c342:	f7f6 fd63 	bl	8002e0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c346:	bf00      	nop
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	bf00      	nop
 800c34c:	0800c36d 	.word	0x0800c36d
 800c350:	2000089c 	.word	0x2000089c
 800c354:	20000024 	.word	0x20000024

0800c358 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c35c:	4802      	ldr	r0, [pc, #8]	; (800c368 <MX_USB_HOST_Process+0x10>)
 800c35e:	f7fe fc51 	bl	800ac04 <USBH_Process>
}
 800c362:	bf00      	nop
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	2000089c 	.word	0x2000089c

0800c36c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b083      	sub	sp, #12
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	460b      	mov	r3, r1
 800c376:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c378:	78fb      	ldrb	r3, [r7, #3]
 800c37a:	3b01      	subs	r3, #1
 800c37c:	2b04      	cmp	r3, #4
 800c37e:	d819      	bhi.n	800c3b4 <USBH_UserProcess+0x48>
 800c380:	a201      	add	r2, pc, #4	; (adr r2, 800c388 <USBH_UserProcess+0x1c>)
 800c382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c386:	bf00      	nop
 800c388:	0800c3b5 	.word	0x0800c3b5
 800c38c:	0800c3a5 	.word	0x0800c3a5
 800c390:	0800c3b5 	.word	0x0800c3b5
 800c394:	0800c3ad 	.word	0x0800c3ad
 800c398:	0800c39d 	.word	0x0800c39d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c39c:	4b09      	ldr	r3, [pc, #36]	; (800c3c4 <USBH_UserProcess+0x58>)
 800c39e:	2203      	movs	r2, #3
 800c3a0:	701a      	strb	r2, [r3, #0]
  break;
 800c3a2:	e008      	b.n	800c3b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c3a4:	4b07      	ldr	r3, [pc, #28]	; (800c3c4 <USBH_UserProcess+0x58>)
 800c3a6:	2202      	movs	r2, #2
 800c3a8:	701a      	strb	r2, [r3, #0]
  break;
 800c3aa:	e004      	b.n	800c3b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c3ac:	4b05      	ldr	r3, [pc, #20]	; (800c3c4 <USBH_UserProcess+0x58>)
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	701a      	strb	r2, [r3, #0]
  break;
 800c3b2:	e000      	b.n	800c3b6 <USBH_UserProcess+0x4a>

  default:
  break;
 800c3b4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c3b6:	bf00      	nop
 800c3b8:	370c      	adds	r7, #12
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr
 800c3c2:	bf00      	nop
 800c3c4:	20000c74 	.word	0x20000c74

0800c3c8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b08a      	sub	sp, #40	; 0x28
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c3d0:	f107 0314 	add.w	r3, r7, #20
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	601a      	str	r2, [r3, #0]
 800c3d8:	605a      	str	r2, [r3, #4]
 800c3da:	609a      	str	r2, [r3, #8]
 800c3dc:	60da      	str	r2, [r3, #12]
 800c3de:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c3e8:	d147      	bne.n	800c47a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	613b      	str	r3, [r7, #16]
 800c3ee:	4b25      	ldr	r3, [pc, #148]	; (800c484 <HAL_HCD_MspInit+0xbc>)
 800c3f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3f2:	4a24      	ldr	r2, [pc, #144]	; (800c484 <HAL_HCD_MspInit+0xbc>)
 800c3f4:	f043 0301 	orr.w	r3, r3, #1
 800c3f8:	6313      	str	r3, [r2, #48]	; 0x30
 800c3fa:	4b22      	ldr	r3, [pc, #136]	; (800c484 <HAL_HCD_MspInit+0xbc>)
 800c3fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3fe:	f003 0301 	and.w	r3, r3, #1
 800c402:	613b      	str	r3, [r7, #16]
 800c404:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c406:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c40a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c40c:	2300      	movs	r3, #0
 800c40e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c410:	2300      	movs	r3, #0
 800c412:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c414:	f107 0314 	add.w	r3, r7, #20
 800c418:	4619      	mov	r1, r3
 800c41a:	481b      	ldr	r0, [pc, #108]	; (800c488 <HAL_HCD_MspInit+0xc0>)
 800c41c:	f7f8 f88c 	bl	8004538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c420:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c426:	2302      	movs	r3, #2
 800c428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c42a:	2300      	movs	r3, #0
 800c42c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c42e:	2300      	movs	r3, #0
 800c430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c432:	230a      	movs	r3, #10
 800c434:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c436:	f107 0314 	add.w	r3, r7, #20
 800c43a:	4619      	mov	r1, r3
 800c43c:	4812      	ldr	r0, [pc, #72]	; (800c488 <HAL_HCD_MspInit+0xc0>)
 800c43e:	f7f8 f87b 	bl	8004538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c442:	4b10      	ldr	r3, [pc, #64]	; (800c484 <HAL_HCD_MspInit+0xbc>)
 800c444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c446:	4a0f      	ldr	r2, [pc, #60]	; (800c484 <HAL_HCD_MspInit+0xbc>)
 800c448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c44c:	6353      	str	r3, [r2, #52]	; 0x34
 800c44e:	2300      	movs	r3, #0
 800c450:	60fb      	str	r3, [r7, #12]
 800c452:	4b0c      	ldr	r3, [pc, #48]	; (800c484 <HAL_HCD_MspInit+0xbc>)
 800c454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c456:	4a0b      	ldr	r2, [pc, #44]	; (800c484 <HAL_HCD_MspInit+0xbc>)
 800c458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c45c:	6453      	str	r3, [r2, #68]	; 0x44
 800c45e:	4b09      	ldr	r3, [pc, #36]	; (800c484 <HAL_HCD_MspInit+0xbc>)
 800c460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c466:	60fb      	str	r3, [r7, #12]
 800c468:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c46a:	2200      	movs	r2, #0
 800c46c:	2100      	movs	r1, #0
 800c46e:	2043      	movs	r0, #67	; 0x43
 800c470:	f7f7 fc29 	bl	8003cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c474:	2043      	movs	r0, #67	; 0x43
 800c476:	f7f7 fc42 	bl	8003cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c47a:	bf00      	nop
 800c47c:	3728      	adds	r7, #40	; 0x28
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
 800c482:	bf00      	nop
 800c484:	40023800 	.word	0x40023800
 800c488:	40020000 	.word	0x40020000

0800c48c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b082      	sub	sp, #8
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7fe ff91 	bl	800b3c2 <USBH_LL_IncTimer>
}
 800c4a0:	bf00      	nop
 800c4a2:	3708      	adds	r7, #8
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7fe ffc9 	bl	800b44e <USBH_LL_Connect>
}
 800c4bc:	bf00      	nop
 800c4be:	3708      	adds	r7, #8
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f7fe ffd2 	bl	800b47c <USBH_LL_Disconnect>
}
 800c4d8:	bf00      	nop
 800c4da:	3708      	adds	r7, #8
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	70fb      	strb	r3, [r7, #3]
 800c4ec:	4613      	mov	r3, r2
 800c4ee:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c4f0:	bf00      	nop
 800c4f2:	370c      	adds	r7, #12
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr

0800c4fc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c50a:	4618      	mov	r0, r3
 800c50c:	f7fe ff83 	bl	800b416 <USBH_LL_PortEnabled>
}
 800c510:	bf00      	nop
 800c512:	3708      	adds	r7, #8
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800c526:	4618      	mov	r0, r3
 800c528:	f7fe ff83 	bl	800b432 <USBH_LL_PortDisabled>
}
 800c52c:	bf00      	nop
 800c52e:	3708      	adds	r7, #8
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b082      	sub	sp, #8
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c542:	2b01      	cmp	r3, #1
 800c544:	d12a      	bne.n	800c59c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c546:	4a18      	ldr	r2, [pc, #96]	; (800c5a8 <USBH_LL_Init+0x74>)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	4a15      	ldr	r2, [pc, #84]	; (800c5a8 <USBH_LL_Init+0x74>)
 800c552:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c556:	4b14      	ldr	r3, [pc, #80]	; (800c5a8 <USBH_LL_Init+0x74>)
 800c558:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c55c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c55e:	4b12      	ldr	r3, [pc, #72]	; (800c5a8 <USBH_LL_Init+0x74>)
 800c560:	2208      	movs	r2, #8
 800c562:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c564:	4b10      	ldr	r3, [pc, #64]	; (800c5a8 <USBH_LL_Init+0x74>)
 800c566:	2201      	movs	r2, #1
 800c568:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c56a:	4b0f      	ldr	r3, [pc, #60]	; (800c5a8 <USBH_LL_Init+0x74>)
 800c56c:	2200      	movs	r2, #0
 800c56e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c570:	4b0d      	ldr	r3, [pc, #52]	; (800c5a8 <USBH_LL_Init+0x74>)
 800c572:	2202      	movs	r2, #2
 800c574:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c576:	4b0c      	ldr	r3, [pc, #48]	; (800c5a8 <USBH_LL_Init+0x74>)
 800c578:	2200      	movs	r2, #0
 800c57a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c57c:	480a      	ldr	r0, [pc, #40]	; (800c5a8 <USBH_LL_Init+0x74>)
 800c57e:	f7f8 f990 	bl	80048a2 <HAL_HCD_Init>
 800c582:	4603      	mov	r3, r0
 800c584:	2b00      	cmp	r3, #0
 800c586:	d001      	beq.n	800c58c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c588:	f7f6 fc40 	bl	8002e0c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c58c:	4806      	ldr	r0, [pc, #24]	; (800c5a8 <USBH_LL_Init+0x74>)
 800c58e:	f7f8 fd74 	bl	800507a <HAL_HCD_GetCurrentFrame>
 800c592:	4603      	mov	r3, r0
 800c594:	4619      	mov	r1, r3
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f7fe ff04 	bl	800b3a4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3708      	adds	r7, #8
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	20000c78 	.word	0x20000c78

0800c5ac <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b084      	sub	sp, #16
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7f8 fce3 	bl	8004f8e <HAL_HCD_Start>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c5cc:	7bfb      	ldrb	r3, [r7, #15]
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f000 f95c 	bl	800c88c <USBH_Get_USB_Status>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3710      	adds	r7, #16
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}

0800c5e2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c5e2:	b580      	push	{r7, lr}
 800c5e4:	b084      	sub	sp, #16
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f7f8 fceb 	bl	8004fd4 <HAL_HCD_Stop>
 800c5fe:	4603      	mov	r3, r0
 800c600:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c602:	7bfb      	ldrb	r3, [r7, #15]
 800c604:	4618      	mov	r0, r3
 800c606:	f000 f941 	bl	800c88c <USBH_Get_USB_Status>
 800c60a:	4603      	mov	r3, r0
 800c60c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c60e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c610:	4618      	mov	r0, r3
 800c612:	3710      	adds	r7, #16
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}

0800c618 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b084      	sub	sp, #16
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c620:	2301      	movs	r3, #1
 800c622:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c62a:	4618      	mov	r0, r3
 800c62c:	f7f8 fd33 	bl	8005096 <HAL_HCD_GetCurrentSpeed>
 800c630:	4603      	mov	r3, r0
 800c632:	2b02      	cmp	r3, #2
 800c634:	d00c      	beq.n	800c650 <USBH_LL_GetSpeed+0x38>
 800c636:	2b02      	cmp	r3, #2
 800c638:	d80d      	bhi.n	800c656 <USBH_LL_GetSpeed+0x3e>
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d002      	beq.n	800c644 <USBH_LL_GetSpeed+0x2c>
 800c63e:	2b01      	cmp	r3, #1
 800c640:	d003      	beq.n	800c64a <USBH_LL_GetSpeed+0x32>
 800c642:	e008      	b.n	800c656 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c644:	2300      	movs	r3, #0
 800c646:	73fb      	strb	r3, [r7, #15]
    break;
 800c648:	e008      	b.n	800c65c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c64a:	2301      	movs	r3, #1
 800c64c:	73fb      	strb	r3, [r7, #15]
    break;
 800c64e:	e005      	b.n	800c65c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c650:	2302      	movs	r3, #2
 800c652:	73fb      	strb	r3, [r7, #15]
    break;
 800c654:	e002      	b.n	800c65c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c656:	2301      	movs	r3, #1
 800c658:	73fb      	strb	r3, [r7, #15]
    break;
 800c65a:	bf00      	nop
  }
  return  speed;
 800c65c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3710      	adds	r7, #16
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	b084      	sub	sp, #16
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c66e:	2300      	movs	r3, #0
 800c670:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c672:	2300      	movs	r3, #0
 800c674:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7f8 fcc6 	bl	800500e <HAL_HCD_ResetPort>
 800c682:	4603      	mov	r3, r0
 800c684:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c686:	7bfb      	ldrb	r3, [r7, #15]
 800c688:	4618      	mov	r0, r3
 800c68a:	f000 f8ff 	bl	800c88c <USBH_Get_USB_Status>
 800c68e:	4603      	mov	r3, r0
 800c690:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c692:	7bbb      	ldrb	r3, [r7, #14]
}
 800c694:	4618      	mov	r0, r3
 800c696:	3710      	adds	r7, #16
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	460b      	mov	r3, r1
 800c6a6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c6ae:	78fa      	ldrb	r2, [r7, #3]
 800c6b0:	4611      	mov	r1, r2
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7f8 fccd 	bl	8005052 <HAL_HCD_HC_GetXferCount>
 800c6b8:	4603      	mov	r3, r0
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3708      	adds	r7, #8
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}

0800c6c2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c6c2:	b590      	push	{r4, r7, lr}
 800c6c4:	b089      	sub	sp, #36	; 0x24
 800c6c6:	af04      	add	r7, sp, #16
 800c6c8:	6078      	str	r0, [r7, #4]
 800c6ca:	4608      	mov	r0, r1
 800c6cc:	4611      	mov	r1, r2
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	70fb      	strb	r3, [r7, #3]
 800c6d4:	460b      	mov	r3, r1
 800c6d6:	70bb      	strb	r3, [r7, #2]
 800c6d8:	4613      	mov	r3, r2
 800c6da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c6ea:	787c      	ldrb	r4, [r7, #1]
 800c6ec:	78ba      	ldrb	r2, [r7, #2]
 800c6ee:	78f9      	ldrb	r1, [r7, #3]
 800c6f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c6f2:	9302      	str	r3, [sp, #8]
 800c6f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c6f8:	9301      	str	r3, [sp, #4]
 800c6fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c6fe:	9300      	str	r3, [sp, #0]
 800c700:	4623      	mov	r3, r4
 800c702:	f7f8 f930 	bl	8004966 <HAL_HCD_HC_Init>
 800c706:	4603      	mov	r3, r0
 800c708:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c70a:	7bfb      	ldrb	r3, [r7, #15]
 800c70c:	4618      	mov	r0, r3
 800c70e:	f000 f8bd 	bl	800c88c <USBH_Get_USB_Status>
 800c712:	4603      	mov	r3, r0
 800c714:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c716:	7bbb      	ldrb	r3, [r7, #14]
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3714      	adds	r7, #20
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd90      	pop	{r4, r7, pc}

0800c720 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b084      	sub	sp, #16
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	460b      	mov	r3, r1
 800c72a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c72c:	2300      	movs	r3, #0
 800c72e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c730:	2300      	movs	r3, #0
 800c732:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c73a:	78fa      	ldrb	r2, [r7, #3]
 800c73c:	4611      	mov	r1, r2
 800c73e:	4618      	mov	r0, r3
 800c740:	f7f8 f9a0 	bl	8004a84 <HAL_HCD_HC_Halt>
 800c744:	4603      	mov	r3, r0
 800c746:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c748:	7bfb      	ldrb	r3, [r7, #15]
 800c74a:	4618      	mov	r0, r3
 800c74c:	f000 f89e 	bl	800c88c <USBH_Get_USB_Status>
 800c750:	4603      	mov	r3, r0
 800c752:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c754:	7bbb      	ldrb	r3, [r7, #14]
}
 800c756:	4618      	mov	r0, r3
 800c758:	3710      	adds	r7, #16
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}

0800c75e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c75e:	b590      	push	{r4, r7, lr}
 800c760:	b089      	sub	sp, #36	; 0x24
 800c762:	af04      	add	r7, sp, #16
 800c764:	6078      	str	r0, [r7, #4]
 800c766:	4608      	mov	r0, r1
 800c768:	4611      	mov	r1, r2
 800c76a:	461a      	mov	r2, r3
 800c76c:	4603      	mov	r3, r0
 800c76e:	70fb      	strb	r3, [r7, #3]
 800c770:	460b      	mov	r3, r1
 800c772:	70bb      	strb	r3, [r7, #2]
 800c774:	4613      	mov	r3, r2
 800c776:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c778:	2300      	movs	r3, #0
 800c77a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c77c:	2300      	movs	r3, #0
 800c77e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c786:	787c      	ldrb	r4, [r7, #1]
 800c788:	78ba      	ldrb	r2, [r7, #2]
 800c78a:	78f9      	ldrb	r1, [r7, #3]
 800c78c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c790:	9303      	str	r3, [sp, #12]
 800c792:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c794:	9302      	str	r3, [sp, #8]
 800c796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c798:	9301      	str	r3, [sp, #4]
 800c79a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c79e:	9300      	str	r3, [sp, #0]
 800c7a0:	4623      	mov	r3, r4
 800c7a2:	f7f8 f993 	bl	8004acc <HAL_HCD_HC_SubmitRequest>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c7aa:	7bfb      	ldrb	r3, [r7, #15]
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f000 f86d 	bl	800c88c <USBH_Get_USB_Status>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3714      	adds	r7, #20
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd90      	pop	{r4, r7, pc}

0800c7c0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c7d2:	78fa      	ldrb	r2, [r7, #3]
 800c7d4:	4611      	mov	r1, r2
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f7f8 fc27 	bl	800502a <HAL_HCD_HC_GetURBState>
 800c7dc:	4603      	mov	r3, r0
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3708      	adds	r7, #8
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}

0800c7e6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c7e6:	b580      	push	{r7, lr}
 800c7e8:	b082      	sub	sp, #8
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	6078      	str	r0, [r7, #4]
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d103      	bne.n	800c804 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c7fc:	78fb      	ldrb	r3, [r7, #3]
 800c7fe:	4618      	mov	r0, r3
 800c800:	f000 f870 	bl	800c8e4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800c804:	20c8      	movs	r0, #200	; 0xc8
 800c806:	f7f7 f95f 	bl	8003ac8 <HAL_Delay>
  return USBH_OK;
 800c80a:	2300      	movs	r3, #0
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3708      	adds	r7, #8
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}

0800c814 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800c814:	b480      	push	{r7}
 800c816:	b085      	sub	sp, #20
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	460b      	mov	r3, r1
 800c81e:	70fb      	strb	r3, [r7, #3]
 800c820:	4613      	mov	r3, r2
 800c822:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c82a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c82c:	78fb      	ldrb	r3, [r7, #3]
 800c82e:	68fa      	ldr	r2, [r7, #12]
 800c830:	212c      	movs	r1, #44	; 0x2c
 800c832:	fb01 f303 	mul.w	r3, r1, r3
 800c836:	4413      	add	r3, r2
 800c838:	333b      	adds	r3, #59	; 0x3b
 800c83a:	781b      	ldrb	r3, [r3, #0]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d009      	beq.n	800c854 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c840:	78fb      	ldrb	r3, [r7, #3]
 800c842:	68fa      	ldr	r2, [r7, #12]
 800c844:	212c      	movs	r1, #44	; 0x2c
 800c846:	fb01 f303 	mul.w	r3, r1, r3
 800c84a:	4413      	add	r3, r2
 800c84c:	3354      	adds	r3, #84	; 0x54
 800c84e:	78ba      	ldrb	r2, [r7, #2]
 800c850:	701a      	strb	r2, [r3, #0]
 800c852:	e008      	b.n	800c866 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c854:	78fb      	ldrb	r3, [r7, #3]
 800c856:	68fa      	ldr	r2, [r7, #12]
 800c858:	212c      	movs	r1, #44	; 0x2c
 800c85a:	fb01 f303 	mul.w	r3, r1, r3
 800c85e:	4413      	add	r3, r2
 800c860:	3355      	adds	r3, #85	; 0x55
 800c862:	78ba      	ldrb	r2, [r7, #2]
 800c864:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c866:	2300      	movs	r3, #0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3714      	adds	r7, #20
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr

0800c874 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f7f7 f923 	bl	8003ac8 <HAL_Delay>
}
 800c882:	bf00      	nop
 800c884:	3708      	adds	r7, #8
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
	...

0800c88c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b085      	sub	sp, #20
 800c890:	af00      	add	r7, sp, #0
 800c892:	4603      	mov	r3, r0
 800c894:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c896:	2300      	movs	r3, #0
 800c898:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c89a:	79fb      	ldrb	r3, [r7, #7]
 800c89c:	2b03      	cmp	r3, #3
 800c89e:	d817      	bhi.n	800c8d0 <USBH_Get_USB_Status+0x44>
 800c8a0:	a201      	add	r2, pc, #4	; (adr r2, 800c8a8 <USBH_Get_USB_Status+0x1c>)
 800c8a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8a6:	bf00      	nop
 800c8a8:	0800c8b9 	.word	0x0800c8b9
 800c8ac:	0800c8bf 	.word	0x0800c8bf
 800c8b0:	0800c8c5 	.word	0x0800c8c5
 800c8b4:	0800c8cb 	.word	0x0800c8cb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	73fb      	strb	r3, [r7, #15]
    break;
 800c8bc:	e00b      	b.n	800c8d6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c8be:	2302      	movs	r3, #2
 800c8c0:	73fb      	strb	r3, [r7, #15]
    break;
 800c8c2:	e008      	b.n	800c8d6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	73fb      	strb	r3, [r7, #15]
    break;
 800c8c8:	e005      	b.n	800c8d6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c8ca:	2302      	movs	r3, #2
 800c8cc:	73fb      	strb	r3, [r7, #15]
    break;
 800c8ce:	e002      	b.n	800c8d6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c8d0:	2302      	movs	r3, #2
 800c8d2:	73fb      	strb	r3, [r7, #15]
    break;
 800c8d4:	bf00      	nop
  }
  return usb_status;
 800c8d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3714      	adds	r7, #20
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr

0800c8e4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c8ee:	79fb      	ldrb	r3, [r7, #7]
 800c8f0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c8f2:	79fb      	ldrb	r3, [r7, #7]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d102      	bne.n	800c8fe <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	73fb      	strb	r3, [r7, #15]
 800c8fc:	e001      	b.n	800c902 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c8fe:	2301      	movs	r3, #1
 800c900:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c902:	7bfb      	ldrb	r3, [r7, #15]
 800c904:	461a      	mov	r2, r3
 800c906:	2101      	movs	r1, #1
 800c908:	4803      	ldr	r0, [pc, #12]	; (800c918 <MX_DriverVbusFS+0x34>)
 800c90a:	f7f7 ffb1 	bl	8004870 <HAL_GPIO_WritePin>
}
 800c90e:	bf00      	nop
 800c910:	3710      	adds	r7, #16
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop
 800c918:	40020800 	.word	0x40020800

0800c91c <__errno>:
 800c91c:	4b01      	ldr	r3, [pc, #4]	; (800c924 <__errno+0x8>)
 800c91e:	6818      	ldr	r0, [r3, #0]
 800c920:	4770      	bx	lr
 800c922:	bf00      	nop
 800c924:	20000044 	.word	0x20000044

0800c928 <__libc_init_array>:
 800c928:	b570      	push	{r4, r5, r6, lr}
 800c92a:	4d0d      	ldr	r5, [pc, #52]	; (800c960 <__libc_init_array+0x38>)
 800c92c:	4c0d      	ldr	r4, [pc, #52]	; (800c964 <__libc_init_array+0x3c>)
 800c92e:	1b64      	subs	r4, r4, r5
 800c930:	10a4      	asrs	r4, r4, #2
 800c932:	2600      	movs	r6, #0
 800c934:	42a6      	cmp	r6, r4
 800c936:	d109      	bne.n	800c94c <__libc_init_array+0x24>
 800c938:	4d0b      	ldr	r5, [pc, #44]	; (800c968 <__libc_init_array+0x40>)
 800c93a:	4c0c      	ldr	r4, [pc, #48]	; (800c96c <__libc_init_array+0x44>)
 800c93c:	f000 fc9e 	bl	800d27c <_init>
 800c940:	1b64      	subs	r4, r4, r5
 800c942:	10a4      	asrs	r4, r4, #2
 800c944:	2600      	movs	r6, #0
 800c946:	42a6      	cmp	r6, r4
 800c948:	d105      	bne.n	800c956 <__libc_init_array+0x2e>
 800c94a:	bd70      	pop	{r4, r5, r6, pc}
 800c94c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c950:	4798      	blx	r3
 800c952:	3601      	adds	r6, #1
 800c954:	e7ee      	b.n	800c934 <__libc_init_array+0xc>
 800c956:	f855 3b04 	ldr.w	r3, [r5], #4
 800c95a:	4798      	blx	r3
 800c95c:	3601      	adds	r6, #1
 800c95e:	e7f2      	b.n	800c946 <__libc_init_array+0x1e>
 800c960:	0800d350 	.word	0x0800d350
 800c964:	0800d350 	.word	0x0800d350
 800c968:	0800d350 	.word	0x0800d350
 800c96c:	0800d354 	.word	0x0800d354

0800c970 <malloc>:
 800c970:	4b02      	ldr	r3, [pc, #8]	; (800c97c <malloc+0xc>)
 800c972:	4601      	mov	r1, r0
 800c974:	6818      	ldr	r0, [r3, #0]
 800c976:	f000 b88d 	b.w	800ca94 <_malloc_r>
 800c97a:	bf00      	nop
 800c97c:	20000044 	.word	0x20000044

0800c980 <free>:
 800c980:	4b02      	ldr	r3, [pc, #8]	; (800c98c <free+0xc>)
 800c982:	4601      	mov	r1, r0
 800c984:	6818      	ldr	r0, [r3, #0]
 800c986:	f000 b819 	b.w	800c9bc <_free_r>
 800c98a:	bf00      	nop
 800c98c:	20000044 	.word	0x20000044

0800c990 <memcpy>:
 800c990:	440a      	add	r2, r1
 800c992:	4291      	cmp	r1, r2
 800c994:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c998:	d100      	bne.n	800c99c <memcpy+0xc>
 800c99a:	4770      	bx	lr
 800c99c:	b510      	push	{r4, lr}
 800c99e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9a6:	4291      	cmp	r1, r2
 800c9a8:	d1f9      	bne.n	800c99e <memcpy+0xe>
 800c9aa:	bd10      	pop	{r4, pc}

0800c9ac <memset>:
 800c9ac:	4402      	add	r2, r0
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d100      	bne.n	800c9b6 <memset+0xa>
 800c9b4:	4770      	bx	lr
 800c9b6:	f803 1b01 	strb.w	r1, [r3], #1
 800c9ba:	e7f9      	b.n	800c9b0 <memset+0x4>

0800c9bc <_free_r>:
 800c9bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9be:	2900      	cmp	r1, #0
 800c9c0:	d044      	beq.n	800ca4c <_free_r+0x90>
 800c9c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9c6:	9001      	str	r0, [sp, #4]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	f1a1 0404 	sub.w	r4, r1, #4
 800c9ce:	bfb8      	it	lt
 800c9d0:	18e4      	addlt	r4, r4, r3
 800c9d2:	f000 f903 	bl	800cbdc <__malloc_lock>
 800c9d6:	4a1e      	ldr	r2, [pc, #120]	; (800ca50 <_free_r+0x94>)
 800c9d8:	9801      	ldr	r0, [sp, #4]
 800c9da:	6813      	ldr	r3, [r2, #0]
 800c9dc:	b933      	cbnz	r3, 800c9ec <_free_r+0x30>
 800c9de:	6063      	str	r3, [r4, #4]
 800c9e0:	6014      	str	r4, [r2, #0]
 800c9e2:	b003      	add	sp, #12
 800c9e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9e8:	f000 b8fe 	b.w	800cbe8 <__malloc_unlock>
 800c9ec:	42a3      	cmp	r3, r4
 800c9ee:	d908      	bls.n	800ca02 <_free_r+0x46>
 800c9f0:	6825      	ldr	r5, [r4, #0]
 800c9f2:	1961      	adds	r1, r4, r5
 800c9f4:	428b      	cmp	r3, r1
 800c9f6:	bf01      	itttt	eq
 800c9f8:	6819      	ldreq	r1, [r3, #0]
 800c9fa:	685b      	ldreq	r3, [r3, #4]
 800c9fc:	1949      	addeq	r1, r1, r5
 800c9fe:	6021      	streq	r1, [r4, #0]
 800ca00:	e7ed      	b.n	800c9de <_free_r+0x22>
 800ca02:	461a      	mov	r2, r3
 800ca04:	685b      	ldr	r3, [r3, #4]
 800ca06:	b10b      	cbz	r3, 800ca0c <_free_r+0x50>
 800ca08:	42a3      	cmp	r3, r4
 800ca0a:	d9fa      	bls.n	800ca02 <_free_r+0x46>
 800ca0c:	6811      	ldr	r1, [r2, #0]
 800ca0e:	1855      	adds	r5, r2, r1
 800ca10:	42a5      	cmp	r5, r4
 800ca12:	d10b      	bne.n	800ca2c <_free_r+0x70>
 800ca14:	6824      	ldr	r4, [r4, #0]
 800ca16:	4421      	add	r1, r4
 800ca18:	1854      	adds	r4, r2, r1
 800ca1a:	42a3      	cmp	r3, r4
 800ca1c:	6011      	str	r1, [r2, #0]
 800ca1e:	d1e0      	bne.n	800c9e2 <_free_r+0x26>
 800ca20:	681c      	ldr	r4, [r3, #0]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	6053      	str	r3, [r2, #4]
 800ca26:	4421      	add	r1, r4
 800ca28:	6011      	str	r1, [r2, #0]
 800ca2a:	e7da      	b.n	800c9e2 <_free_r+0x26>
 800ca2c:	d902      	bls.n	800ca34 <_free_r+0x78>
 800ca2e:	230c      	movs	r3, #12
 800ca30:	6003      	str	r3, [r0, #0]
 800ca32:	e7d6      	b.n	800c9e2 <_free_r+0x26>
 800ca34:	6825      	ldr	r5, [r4, #0]
 800ca36:	1961      	adds	r1, r4, r5
 800ca38:	428b      	cmp	r3, r1
 800ca3a:	bf04      	itt	eq
 800ca3c:	6819      	ldreq	r1, [r3, #0]
 800ca3e:	685b      	ldreq	r3, [r3, #4]
 800ca40:	6063      	str	r3, [r4, #4]
 800ca42:	bf04      	itt	eq
 800ca44:	1949      	addeq	r1, r1, r5
 800ca46:	6021      	streq	r1, [r4, #0]
 800ca48:	6054      	str	r4, [r2, #4]
 800ca4a:	e7ca      	b.n	800c9e2 <_free_r+0x26>
 800ca4c:	b003      	add	sp, #12
 800ca4e:	bd30      	pop	{r4, r5, pc}
 800ca50:	20000f7c 	.word	0x20000f7c

0800ca54 <sbrk_aligned>:
 800ca54:	b570      	push	{r4, r5, r6, lr}
 800ca56:	4e0e      	ldr	r6, [pc, #56]	; (800ca90 <sbrk_aligned+0x3c>)
 800ca58:	460c      	mov	r4, r1
 800ca5a:	6831      	ldr	r1, [r6, #0]
 800ca5c:	4605      	mov	r5, r0
 800ca5e:	b911      	cbnz	r1, 800ca66 <sbrk_aligned+0x12>
 800ca60:	f000 f88c 	bl	800cb7c <_sbrk_r>
 800ca64:	6030      	str	r0, [r6, #0]
 800ca66:	4621      	mov	r1, r4
 800ca68:	4628      	mov	r0, r5
 800ca6a:	f000 f887 	bl	800cb7c <_sbrk_r>
 800ca6e:	1c43      	adds	r3, r0, #1
 800ca70:	d00a      	beq.n	800ca88 <sbrk_aligned+0x34>
 800ca72:	1cc4      	adds	r4, r0, #3
 800ca74:	f024 0403 	bic.w	r4, r4, #3
 800ca78:	42a0      	cmp	r0, r4
 800ca7a:	d007      	beq.n	800ca8c <sbrk_aligned+0x38>
 800ca7c:	1a21      	subs	r1, r4, r0
 800ca7e:	4628      	mov	r0, r5
 800ca80:	f000 f87c 	bl	800cb7c <_sbrk_r>
 800ca84:	3001      	adds	r0, #1
 800ca86:	d101      	bne.n	800ca8c <sbrk_aligned+0x38>
 800ca88:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	bd70      	pop	{r4, r5, r6, pc}
 800ca90:	20000f80 	.word	0x20000f80

0800ca94 <_malloc_r>:
 800ca94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca98:	1ccd      	adds	r5, r1, #3
 800ca9a:	f025 0503 	bic.w	r5, r5, #3
 800ca9e:	3508      	adds	r5, #8
 800caa0:	2d0c      	cmp	r5, #12
 800caa2:	bf38      	it	cc
 800caa4:	250c      	movcc	r5, #12
 800caa6:	2d00      	cmp	r5, #0
 800caa8:	4607      	mov	r7, r0
 800caaa:	db01      	blt.n	800cab0 <_malloc_r+0x1c>
 800caac:	42a9      	cmp	r1, r5
 800caae:	d905      	bls.n	800cabc <_malloc_r+0x28>
 800cab0:	230c      	movs	r3, #12
 800cab2:	603b      	str	r3, [r7, #0]
 800cab4:	2600      	movs	r6, #0
 800cab6:	4630      	mov	r0, r6
 800cab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cabc:	4e2e      	ldr	r6, [pc, #184]	; (800cb78 <_malloc_r+0xe4>)
 800cabe:	f000 f88d 	bl	800cbdc <__malloc_lock>
 800cac2:	6833      	ldr	r3, [r6, #0]
 800cac4:	461c      	mov	r4, r3
 800cac6:	bb34      	cbnz	r4, 800cb16 <_malloc_r+0x82>
 800cac8:	4629      	mov	r1, r5
 800caca:	4638      	mov	r0, r7
 800cacc:	f7ff ffc2 	bl	800ca54 <sbrk_aligned>
 800cad0:	1c43      	adds	r3, r0, #1
 800cad2:	4604      	mov	r4, r0
 800cad4:	d14d      	bne.n	800cb72 <_malloc_r+0xde>
 800cad6:	6834      	ldr	r4, [r6, #0]
 800cad8:	4626      	mov	r6, r4
 800cada:	2e00      	cmp	r6, #0
 800cadc:	d140      	bne.n	800cb60 <_malloc_r+0xcc>
 800cade:	6823      	ldr	r3, [r4, #0]
 800cae0:	4631      	mov	r1, r6
 800cae2:	4638      	mov	r0, r7
 800cae4:	eb04 0803 	add.w	r8, r4, r3
 800cae8:	f000 f848 	bl	800cb7c <_sbrk_r>
 800caec:	4580      	cmp	r8, r0
 800caee:	d13a      	bne.n	800cb66 <_malloc_r+0xd2>
 800caf0:	6821      	ldr	r1, [r4, #0]
 800caf2:	3503      	adds	r5, #3
 800caf4:	1a6d      	subs	r5, r5, r1
 800caf6:	f025 0503 	bic.w	r5, r5, #3
 800cafa:	3508      	adds	r5, #8
 800cafc:	2d0c      	cmp	r5, #12
 800cafe:	bf38      	it	cc
 800cb00:	250c      	movcc	r5, #12
 800cb02:	4629      	mov	r1, r5
 800cb04:	4638      	mov	r0, r7
 800cb06:	f7ff ffa5 	bl	800ca54 <sbrk_aligned>
 800cb0a:	3001      	adds	r0, #1
 800cb0c:	d02b      	beq.n	800cb66 <_malloc_r+0xd2>
 800cb0e:	6823      	ldr	r3, [r4, #0]
 800cb10:	442b      	add	r3, r5
 800cb12:	6023      	str	r3, [r4, #0]
 800cb14:	e00e      	b.n	800cb34 <_malloc_r+0xa0>
 800cb16:	6822      	ldr	r2, [r4, #0]
 800cb18:	1b52      	subs	r2, r2, r5
 800cb1a:	d41e      	bmi.n	800cb5a <_malloc_r+0xc6>
 800cb1c:	2a0b      	cmp	r2, #11
 800cb1e:	d916      	bls.n	800cb4e <_malloc_r+0xba>
 800cb20:	1961      	adds	r1, r4, r5
 800cb22:	42a3      	cmp	r3, r4
 800cb24:	6025      	str	r5, [r4, #0]
 800cb26:	bf18      	it	ne
 800cb28:	6059      	strne	r1, [r3, #4]
 800cb2a:	6863      	ldr	r3, [r4, #4]
 800cb2c:	bf08      	it	eq
 800cb2e:	6031      	streq	r1, [r6, #0]
 800cb30:	5162      	str	r2, [r4, r5]
 800cb32:	604b      	str	r3, [r1, #4]
 800cb34:	4638      	mov	r0, r7
 800cb36:	f104 060b 	add.w	r6, r4, #11
 800cb3a:	f000 f855 	bl	800cbe8 <__malloc_unlock>
 800cb3e:	f026 0607 	bic.w	r6, r6, #7
 800cb42:	1d23      	adds	r3, r4, #4
 800cb44:	1af2      	subs	r2, r6, r3
 800cb46:	d0b6      	beq.n	800cab6 <_malloc_r+0x22>
 800cb48:	1b9b      	subs	r3, r3, r6
 800cb4a:	50a3      	str	r3, [r4, r2]
 800cb4c:	e7b3      	b.n	800cab6 <_malloc_r+0x22>
 800cb4e:	6862      	ldr	r2, [r4, #4]
 800cb50:	42a3      	cmp	r3, r4
 800cb52:	bf0c      	ite	eq
 800cb54:	6032      	streq	r2, [r6, #0]
 800cb56:	605a      	strne	r2, [r3, #4]
 800cb58:	e7ec      	b.n	800cb34 <_malloc_r+0xa0>
 800cb5a:	4623      	mov	r3, r4
 800cb5c:	6864      	ldr	r4, [r4, #4]
 800cb5e:	e7b2      	b.n	800cac6 <_malloc_r+0x32>
 800cb60:	4634      	mov	r4, r6
 800cb62:	6876      	ldr	r6, [r6, #4]
 800cb64:	e7b9      	b.n	800cada <_malloc_r+0x46>
 800cb66:	230c      	movs	r3, #12
 800cb68:	603b      	str	r3, [r7, #0]
 800cb6a:	4638      	mov	r0, r7
 800cb6c:	f000 f83c 	bl	800cbe8 <__malloc_unlock>
 800cb70:	e7a1      	b.n	800cab6 <_malloc_r+0x22>
 800cb72:	6025      	str	r5, [r4, #0]
 800cb74:	e7de      	b.n	800cb34 <_malloc_r+0xa0>
 800cb76:	bf00      	nop
 800cb78:	20000f7c 	.word	0x20000f7c

0800cb7c <_sbrk_r>:
 800cb7c:	b538      	push	{r3, r4, r5, lr}
 800cb7e:	4d06      	ldr	r5, [pc, #24]	; (800cb98 <_sbrk_r+0x1c>)
 800cb80:	2300      	movs	r3, #0
 800cb82:	4604      	mov	r4, r0
 800cb84:	4608      	mov	r0, r1
 800cb86:	602b      	str	r3, [r5, #0]
 800cb88:	f7f6 fc54 	bl	8003434 <_sbrk>
 800cb8c:	1c43      	adds	r3, r0, #1
 800cb8e:	d102      	bne.n	800cb96 <_sbrk_r+0x1a>
 800cb90:	682b      	ldr	r3, [r5, #0]
 800cb92:	b103      	cbz	r3, 800cb96 <_sbrk_r+0x1a>
 800cb94:	6023      	str	r3, [r4, #0]
 800cb96:	bd38      	pop	{r3, r4, r5, pc}
 800cb98:	20000f84 	.word	0x20000f84

0800cb9c <siprintf>:
 800cb9c:	b40e      	push	{r1, r2, r3}
 800cb9e:	b500      	push	{lr}
 800cba0:	b09c      	sub	sp, #112	; 0x70
 800cba2:	ab1d      	add	r3, sp, #116	; 0x74
 800cba4:	9002      	str	r0, [sp, #8]
 800cba6:	9006      	str	r0, [sp, #24]
 800cba8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cbac:	4809      	ldr	r0, [pc, #36]	; (800cbd4 <siprintf+0x38>)
 800cbae:	9107      	str	r1, [sp, #28]
 800cbb0:	9104      	str	r1, [sp, #16]
 800cbb2:	4909      	ldr	r1, [pc, #36]	; (800cbd8 <siprintf+0x3c>)
 800cbb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbb8:	9105      	str	r1, [sp, #20]
 800cbba:	6800      	ldr	r0, [r0, #0]
 800cbbc:	9301      	str	r3, [sp, #4]
 800cbbe:	a902      	add	r1, sp, #8
 800cbc0:	f000 f874 	bl	800ccac <_svfiprintf_r>
 800cbc4:	9b02      	ldr	r3, [sp, #8]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	701a      	strb	r2, [r3, #0]
 800cbca:	b01c      	add	sp, #112	; 0x70
 800cbcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbd0:	b003      	add	sp, #12
 800cbd2:	4770      	bx	lr
 800cbd4:	20000044 	.word	0x20000044
 800cbd8:	ffff0208 	.word	0xffff0208

0800cbdc <__malloc_lock>:
 800cbdc:	4801      	ldr	r0, [pc, #4]	; (800cbe4 <__malloc_lock+0x8>)
 800cbde:	f000 baf9 	b.w	800d1d4 <__retarget_lock_acquire_recursive>
 800cbe2:	bf00      	nop
 800cbe4:	20000f88 	.word	0x20000f88

0800cbe8 <__malloc_unlock>:
 800cbe8:	4801      	ldr	r0, [pc, #4]	; (800cbf0 <__malloc_unlock+0x8>)
 800cbea:	f000 baf4 	b.w	800d1d6 <__retarget_lock_release_recursive>
 800cbee:	bf00      	nop
 800cbf0:	20000f88 	.word	0x20000f88

0800cbf4 <__ssputs_r>:
 800cbf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbf8:	688e      	ldr	r6, [r1, #8]
 800cbfa:	429e      	cmp	r6, r3
 800cbfc:	4682      	mov	sl, r0
 800cbfe:	460c      	mov	r4, r1
 800cc00:	4690      	mov	r8, r2
 800cc02:	461f      	mov	r7, r3
 800cc04:	d838      	bhi.n	800cc78 <__ssputs_r+0x84>
 800cc06:	898a      	ldrh	r2, [r1, #12]
 800cc08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc0c:	d032      	beq.n	800cc74 <__ssputs_r+0x80>
 800cc0e:	6825      	ldr	r5, [r4, #0]
 800cc10:	6909      	ldr	r1, [r1, #16]
 800cc12:	eba5 0901 	sub.w	r9, r5, r1
 800cc16:	6965      	ldr	r5, [r4, #20]
 800cc18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc20:	3301      	adds	r3, #1
 800cc22:	444b      	add	r3, r9
 800cc24:	106d      	asrs	r5, r5, #1
 800cc26:	429d      	cmp	r5, r3
 800cc28:	bf38      	it	cc
 800cc2a:	461d      	movcc	r5, r3
 800cc2c:	0553      	lsls	r3, r2, #21
 800cc2e:	d531      	bpl.n	800cc94 <__ssputs_r+0xa0>
 800cc30:	4629      	mov	r1, r5
 800cc32:	f7ff ff2f 	bl	800ca94 <_malloc_r>
 800cc36:	4606      	mov	r6, r0
 800cc38:	b950      	cbnz	r0, 800cc50 <__ssputs_r+0x5c>
 800cc3a:	230c      	movs	r3, #12
 800cc3c:	f8ca 3000 	str.w	r3, [sl]
 800cc40:	89a3      	ldrh	r3, [r4, #12]
 800cc42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc46:	81a3      	strh	r3, [r4, #12]
 800cc48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc50:	6921      	ldr	r1, [r4, #16]
 800cc52:	464a      	mov	r2, r9
 800cc54:	f7ff fe9c 	bl	800c990 <memcpy>
 800cc58:	89a3      	ldrh	r3, [r4, #12]
 800cc5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc62:	81a3      	strh	r3, [r4, #12]
 800cc64:	6126      	str	r6, [r4, #16]
 800cc66:	6165      	str	r5, [r4, #20]
 800cc68:	444e      	add	r6, r9
 800cc6a:	eba5 0509 	sub.w	r5, r5, r9
 800cc6e:	6026      	str	r6, [r4, #0]
 800cc70:	60a5      	str	r5, [r4, #8]
 800cc72:	463e      	mov	r6, r7
 800cc74:	42be      	cmp	r6, r7
 800cc76:	d900      	bls.n	800cc7a <__ssputs_r+0x86>
 800cc78:	463e      	mov	r6, r7
 800cc7a:	6820      	ldr	r0, [r4, #0]
 800cc7c:	4632      	mov	r2, r6
 800cc7e:	4641      	mov	r1, r8
 800cc80:	f000 faaa 	bl	800d1d8 <memmove>
 800cc84:	68a3      	ldr	r3, [r4, #8]
 800cc86:	1b9b      	subs	r3, r3, r6
 800cc88:	60a3      	str	r3, [r4, #8]
 800cc8a:	6823      	ldr	r3, [r4, #0]
 800cc8c:	4433      	add	r3, r6
 800cc8e:	6023      	str	r3, [r4, #0]
 800cc90:	2000      	movs	r0, #0
 800cc92:	e7db      	b.n	800cc4c <__ssputs_r+0x58>
 800cc94:	462a      	mov	r2, r5
 800cc96:	f000 fab9 	bl	800d20c <_realloc_r>
 800cc9a:	4606      	mov	r6, r0
 800cc9c:	2800      	cmp	r0, #0
 800cc9e:	d1e1      	bne.n	800cc64 <__ssputs_r+0x70>
 800cca0:	6921      	ldr	r1, [r4, #16]
 800cca2:	4650      	mov	r0, sl
 800cca4:	f7ff fe8a 	bl	800c9bc <_free_r>
 800cca8:	e7c7      	b.n	800cc3a <__ssputs_r+0x46>
	...

0800ccac <_svfiprintf_r>:
 800ccac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb0:	4698      	mov	r8, r3
 800ccb2:	898b      	ldrh	r3, [r1, #12]
 800ccb4:	061b      	lsls	r3, r3, #24
 800ccb6:	b09d      	sub	sp, #116	; 0x74
 800ccb8:	4607      	mov	r7, r0
 800ccba:	460d      	mov	r5, r1
 800ccbc:	4614      	mov	r4, r2
 800ccbe:	d50e      	bpl.n	800ccde <_svfiprintf_r+0x32>
 800ccc0:	690b      	ldr	r3, [r1, #16]
 800ccc2:	b963      	cbnz	r3, 800ccde <_svfiprintf_r+0x32>
 800ccc4:	2140      	movs	r1, #64	; 0x40
 800ccc6:	f7ff fee5 	bl	800ca94 <_malloc_r>
 800ccca:	6028      	str	r0, [r5, #0]
 800cccc:	6128      	str	r0, [r5, #16]
 800ccce:	b920      	cbnz	r0, 800ccda <_svfiprintf_r+0x2e>
 800ccd0:	230c      	movs	r3, #12
 800ccd2:	603b      	str	r3, [r7, #0]
 800ccd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ccd8:	e0d1      	b.n	800ce7e <_svfiprintf_r+0x1d2>
 800ccda:	2340      	movs	r3, #64	; 0x40
 800ccdc:	616b      	str	r3, [r5, #20]
 800ccde:	2300      	movs	r3, #0
 800cce0:	9309      	str	r3, [sp, #36]	; 0x24
 800cce2:	2320      	movs	r3, #32
 800cce4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cce8:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccec:	2330      	movs	r3, #48	; 0x30
 800ccee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ce98 <_svfiprintf_r+0x1ec>
 800ccf2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccf6:	f04f 0901 	mov.w	r9, #1
 800ccfa:	4623      	mov	r3, r4
 800ccfc:	469a      	mov	sl, r3
 800ccfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd02:	b10a      	cbz	r2, 800cd08 <_svfiprintf_r+0x5c>
 800cd04:	2a25      	cmp	r2, #37	; 0x25
 800cd06:	d1f9      	bne.n	800ccfc <_svfiprintf_r+0x50>
 800cd08:	ebba 0b04 	subs.w	fp, sl, r4
 800cd0c:	d00b      	beq.n	800cd26 <_svfiprintf_r+0x7a>
 800cd0e:	465b      	mov	r3, fp
 800cd10:	4622      	mov	r2, r4
 800cd12:	4629      	mov	r1, r5
 800cd14:	4638      	mov	r0, r7
 800cd16:	f7ff ff6d 	bl	800cbf4 <__ssputs_r>
 800cd1a:	3001      	adds	r0, #1
 800cd1c:	f000 80aa 	beq.w	800ce74 <_svfiprintf_r+0x1c8>
 800cd20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd22:	445a      	add	r2, fp
 800cd24:	9209      	str	r2, [sp, #36]	; 0x24
 800cd26:	f89a 3000 	ldrb.w	r3, [sl]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	f000 80a2 	beq.w	800ce74 <_svfiprintf_r+0x1c8>
 800cd30:	2300      	movs	r3, #0
 800cd32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd3a:	f10a 0a01 	add.w	sl, sl, #1
 800cd3e:	9304      	str	r3, [sp, #16]
 800cd40:	9307      	str	r3, [sp, #28]
 800cd42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd46:	931a      	str	r3, [sp, #104]	; 0x68
 800cd48:	4654      	mov	r4, sl
 800cd4a:	2205      	movs	r2, #5
 800cd4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd50:	4851      	ldr	r0, [pc, #324]	; (800ce98 <_svfiprintf_r+0x1ec>)
 800cd52:	f7f3 fa45 	bl	80001e0 <memchr>
 800cd56:	9a04      	ldr	r2, [sp, #16]
 800cd58:	b9d8      	cbnz	r0, 800cd92 <_svfiprintf_r+0xe6>
 800cd5a:	06d0      	lsls	r0, r2, #27
 800cd5c:	bf44      	itt	mi
 800cd5e:	2320      	movmi	r3, #32
 800cd60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd64:	0711      	lsls	r1, r2, #28
 800cd66:	bf44      	itt	mi
 800cd68:	232b      	movmi	r3, #43	; 0x2b
 800cd6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd6e:	f89a 3000 	ldrb.w	r3, [sl]
 800cd72:	2b2a      	cmp	r3, #42	; 0x2a
 800cd74:	d015      	beq.n	800cda2 <_svfiprintf_r+0xf6>
 800cd76:	9a07      	ldr	r2, [sp, #28]
 800cd78:	4654      	mov	r4, sl
 800cd7a:	2000      	movs	r0, #0
 800cd7c:	f04f 0c0a 	mov.w	ip, #10
 800cd80:	4621      	mov	r1, r4
 800cd82:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd86:	3b30      	subs	r3, #48	; 0x30
 800cd88:	2b09      	cmp	r3, #9
 800cd8a:	d94e      	bls.n	800ce2a <_svfiprintf_r+0x17e>
 800cd8c:	b1b0      	cbz	r0, 800cdbc <_svfiprintf_r+0x110>
 800cd8e:	9207      	str	r2, [sp, #28]
 800cd90:	e014      	b.n	800cdbc <_svfiprintf_r+0x110>
 800cd92:	eba0 0308 	sub.w	r3, r0, r8
 800cd96:	fa09 f303 	lsl.w	r3, r9, r3
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	9304      	str	r3, [sp, #16]
 800cd9e:	46a2      	mov	sl, r4
 800cda0:	e7d2      	b.n	800cd48 <_svfiprintf_r+0x9c>
 800cda2:	9b03      	ldr	r3, [sp, #12]
 800cda4:	1d19      	adds	r1, r3, #4
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	9103      	str	r1, [sp, #12]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	bfbb      	ittet	lt
 800cdae:	425b      	neglt	r3, r3
 800cdb0:	f042 0202 	orrlt.w	r2, r2, #2
 800cdb4:	9307      	strge	r3, [sp, #28]
 800cdb6:	9307      	strlt	r3, [sp, #28]
 800cdb8:	bfb8      	it	lt
 800cdba:	9204      	strlt	r2, [sp, #16]
 800cdbc:	7823      	ldrb	r3, [r4, #0]
 800cdbe:	2b2e      	cmp	r3, #46	; 0x2e
 800cdc0:	d10c      	bne.n	800cddc <_svfiprintf_r+0x130>
 800cdc2:	7863      	ldrb	r3, [r4, #1]
 800cdc4:	2b2a      	cmp	r3, #42	; 0x2a
 800cdc6:	d135      	bne.n	800ce34 <_svfiprintf_r+0x188>
 800cdc8:	9b03      	ldr	r3, [sp, #12]
 800cdca:	1d1a      	adds	r2, r3, #4
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	9203      	str	r2, [sp, #12]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	bfb8      	it	lt
 800cdd4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cdd8:	3402      	adds	r4, #2
 800cdda:	9305      	str	r3, [sp, #20]
 800cddc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cea8 <_svfiprintf_r+0x1fc>
 800cde0:	7821      	ldrb	r1, [r4, #0]
 800cde2:	2203      	movs	r2, #3
 800cde4:	4650      	mov	r0, sl
 800cde6:	f7f3 f9fb 	bl	80001e0 <memchr>
 800cdea:	b140      	cbz	r0, 800cdfe <_svfiprintf_r+0x152>
 800cdec:	2340      	movs	r3, #64	; 0x40
 800cdee:	eba0 000a 	sub.w	r0, r0, sl
 800cdf2:	fa03 f000 	lsl.w	r0, r3, r0
 800cdf6:	9b04      	ldr	r3, [sp, #16]
 800cdf8:	4303      	orrs	r3, r0
 800cdfa:	3401      	adds	r4, #1
 800cdfc:	9304      	str	r3, [sp, #16]
 800cdfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce02:	4826      	ldr	r0, [pc, #152]	; (800ce9c <_svfiprintf_r+0x1f0>)
 800ce04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce08:	2206      	movs	r2, #6
 800ce0a:	f7f3 f9e9 	bl	80001e0 <memchr>
 800ce0e:	2800      	cmp	r0, #0
 800ce10:	d038      	beq.n	800ce84 <_svfiprintf_r+0x1d8>
 800ce12:	4b23      	ldr	r3, [pc, #140]	; (800cea0 <_svfiprintf_r+0x1f4>)
 800ce14:	bb1b      	cbnz	r3, 800ce5e <_svfiprintf_r+0x1b2>
 800ce16:	9b03      	ldr	r3, [sp, #12]
 800ce18:	3307      	adds	r3, #7
 800ce1a:	f023 0307 	bic.w	r3, r3, #7
 800ce1e:	3308      	adds	r3, #8
 800ce20:	9303      	str	r3, [sp, #12]
 800ce22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce24:	4433      	add	r3, r6
 800ce26:	9309      	str	r3, [sp, #36]	; 0x24
 800ce28:	e767      	b.n	800ccfa <_svfiprintf_r+0x4e>
 800ce2a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce2e:	460c      	mov	r4, r1
 800ce30:	2001      	movs	r0, #1
 800ce32:	e7a5      	b.n	800cd80 <_svfiprintf_r+0xd4>
 800ce34:	2300      	movs	r3, #0
 800ce36:	3401      	adds	r4, #1
 800ce38:	9305      	str	r3, [sp, #20]
 800ce3a:	4619      	mov	r1, r3
 800ce3c:	f04f 0c0a 	mov.w	ip, #10
 800ce40:	4620      	mov	r0, r4
 800ce42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce46:	3a30      	subs	r2, #48	; 0x30
 800ce48:	2a09      	cmp	r2, #9
 800ce4a:	d903      	bls.n	800ce54 <_svfiprintf_r+0x1a8>
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d0c5      	beq.n	800cddc <_svfiprintf_r+0x130>
 800ce50:	9105      	str	r1, [sp, #20]
 800ce52:	e7c3      	b.n	800cddc <_svfiprintf_r+0x130>
 800ce54:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce58:	4604      	mov	r4, r0
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	e7f0      	b.n	800ce40 <_svfiprintf_r+0x194>
 800ce5e:	ab03      	add	r3, sp, #12
 800ce60:	9300      	str	r3, [sp, #0]
 800ce62:	462a      	mov	r2, r5
 800ce64:	4b0f      	ldr	r3, [pc, #60]	; (800cea4 <_svfiprintf_r+0x1f8>)
 800ce66:	a904      	add	r1, sp, #16
 800ce68:	4638      	mov	r0, r7
 800ce6a:	f3af 8000 	nop.w
 800ce6e:	1c42      	adds	r2, r0, #1
 800ce70:	4606      	mov	r6, r0
 800ce72:	d1d6      	bne.n	800ce22 <_svfiprintf_r+0x176>
 800ce74:	89ab      	ldrh	r3, [r5, #12]
 800ce76:	065b      	lsls	r3, r3, #25
 800ce78:	f53f af2c 	bmi.w	800ccd4 <_svfiprintf_r+0x28>
 800ce7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce7e:	b01d      	add	sp, #116	; 0x74
 800ce80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce84:	ab03      	add	r3, sp, #12
 800ce86:	9300      	str	r3, [sp, #0]
 800ce88:	462a      	mov	r2, r5
 800ce8a:	4b06      	ldr	r3, [pc, #24]	; (800cea4 <_svfiprintf_r+0x1f8>)
 800ce8c:	a904      	add	r1, sp, #16
 800ce8e:	4638      	mov	r0, r7
 800ce90:	f000 f87a 	bl	800cf88 <_printf_i>
 800ce94:	e7eb      	b.n	800ce6e <_svfiprintf_r+0x1c2>
 800ce96:	bf00      	nop
 800ce98:	0800d314 	.word	0x0800d314
 800ce9c:	0800d31e 	.word	0x0800d31e
 800cea0:	00000000 	.word	0x00000000
 800cea4:	0800cbf5 	.word	0x0800cbf5
 800cea8:	0800d31a 	.word	0x0800d31a

0800ceac <_printf_common>:
 800ceac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ceb0:	4616      	mov	r6, r2
 800ceb2:	4699      	mov	r9, r3
 800ceb4:	688a      	ldr	r2, [r1, #8]
 800ceb6:	690b      	ldr	r3, [r1, #16]
 800ceb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cebc:	4293      	cmp	r3, r2
 800cebe:	bfb8      	it	lt
 800cec0:	4613      	movlt	r3, r2
 800cec2:	6033      	str	r3, [r6, #0]
 800cec4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cec8:	4607      	mov	r7, r0
 800ceca:	460c      	mov	r4, r1
 800cecc:	b10a      	cbz	r2, 800ced2 <_printf_common+0x26>
 800cece:	3301      	adds	r3, #1
 800ced0:	6033      	str	r3, [r6, #0]
 800ced2:	6823      	ldr	r3, [r4, #0]
 800ced4:	0699      	lsls	r1, r3, #26
 800ced6:	bf42      	ittt	mi
 800ced8:	6833      	ldrmi	r3, [r6, #0]
 800ceda:	3302      	addmi	r3, #2
 800cedc:	6033      	strmi	r3, [r6, #0]
 800cede:	6825      	ldr	r5, [r4, #0]
 800cee0:	f015 0506 	ands.w	r5, r5, #6
 800cee4:	d106      	bne.n	800cef4 <_printf_common+0x48>
 800cee6:	f104 0a19 	add.w	sl, r4, #25
 800ceea:	68e3      	ldr	r3, [r4, #12]
 800ceec:	6832      	ldr	r2, [r6, #0]
 800ceee:	1a9b      	subs	r3, r3, r2
 800cef0:	42ab      	cmp	r3, r5
 800cef2:	dc26      	bgt.n	800cf42 <_printf_common+0x96>
 800cef4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cef8:	1e13      	subs	r3, r2, #0
 800cefa:	6822      	ldr	r2, [r4, #0]
 800cefc:	bf18      	it	ne
 800cefe:	2301      	movne	r3, #1
 800cf00:	0692      	lsls	r2, r2, #26
 800cf02:	d42b      	bmi.n	800cf5c <_printf_common+0xb0>
 800cf04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf08:	4649      	mov	r1, r9
 800cf0a:	4638      	mov	r0, r7
 800cf0c:	47c0      	blx	r8
 800cf0e:	3001      	adds	r0, #1
 800cf10:	d01e      	beq.n	800cf50 <_printf_common+0xa4>
 800cf12:	6823      	ldr	r3, [r4, #0]
 800cf14:	68e5      	ldr	r5, [r4, #12]
 800cf16:	6832      	ldr	r2, [r6, #0]
 800cf18:	f003 0306 	and.w	r3, r3, #6
 800cf1c:	2b04      	cmp	r3, #4
 800cf1e:	bf08      	it	eq
 800cf20:	1aad      	subeq	r5, r5, r2
 800cf22:	68a3      	ldr	r3, [r4, #8]
 800cf24:	6922      	ldr	r2, [r4, #16]
 800cf26:	bf0c      	ite	eq
 800cf28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf2c:	2500      	movne	r5, #0
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	bfc4      	itt	gt
 800cf32:	1a9b      	subgt	r3, r3, r2
 800cf34:	18ed      	addgt	r5, r5, r3
 800cf36:	2600      	movs	r6, #0
 800cf38:	341a      	adds	r4, #26
 800cf3a:	42b5      	cmp	r5, r6
 800cf3c:	d11a      	bne.n	800cf74 <_printf_common+0xc8>
 800cf3e:	2000      	movs	r0, #0
 800cf40:	e008      	b.n	800cf54 <_printf_common+0xa8>
 800cf42:	2301      	movs	r3, #1
 800cf44:	4652      	mov	r2, sl
 800cf46:	4649      	mov	r1, r9
 800cf48:	4638      	mov	r0, r7
 800cf4a:	47c0      	blx	r8
 800cf4c:	3001      	adds	r0, #1
 800cf4e:	d103      	bne.n	800cf58 <_printf_common+0xac>
 800cf50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf58:	3501      	adds	r5, #1
 800cf5a:	e7c6      	b.n	800ceea <_printf_common+0x3e>
 800cf5c:	18e1      	adds	r1, r4, r3
 800cf5e:	1c5a      	adds	r2, r3, #1
 800cf60:	2030      	movs	r0, #48	; 0x30
 800cf62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf66:	4422      	add	r2, r4
 800cf68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cf6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cf70:	3302      	adds	r3, #2
 800cf72:	e7c7      	b.n	800cf04 <_printf_common+0x58>
 800cf74:	2301      	movs	r3, #1
 800cf76:	4622      	mov	r2, r4
 800cf78:	4649      	mov	r1, r9
 800cf7a:	4638      	mov	r0, r7
 800cf7c:	47c0      	blx	r8
 800cf7e:	3001      	adds	r0, #1
 800cf80:	d0e6      	beq.n	800cf50 <_printf_common+0xa4>
 800cf82:	3601      	adds	r6, #1
 800cf84:	e7d9      	b.n	800cf3a <_printf_common+0x8e>
	...

0800cf88 <_printf_i>:
 800cf88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf8c:	7e0f      	ldrb	r7, [r1, #24]
 800cf8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cf90:	2f78      	cmp	r7, #120	; 0x78
 800cf92:	4691      	mov	r9, r2
 800cf94:	4680      	mov	r8, r0
 800cf96:	460c      	mov	r4, r1
 800cf98:	469a      	mov	sl, r3
 800cf9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cf9e:	d807      	bhi.n	800cfb0 <_printf_i+0x28>
 800cfa0:	2f62      	cmp	r7, #98	; 0x62
 800cfa2:	d80a      	bhi.n	800cfba <_printf_i+0x32>
 800cfa4:	2f00      	cmp	r7, #0
 800cfa6:	f000 80d8 	beq.w	800d15a <_printf_i+0x1d2>
 800cfaa:	2f58      	cmp	r7, #88	; 0x58
 800cfac:	f000 80a3 	beq.w	800d0f6 <_printf_i+0x16e>
 800cfb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cfb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cfb8:	e03a      	b.n	800d030 <_printf_i+0xa8>
 800cfba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cfbe:	2b15      	cmp	r3, #21
 800cfc0:	d8f6      	bhi.n	800cfb0 <_printf_i+0x28>
 800cfc2:	a101      	add	r1, pc, #4	; (adr r1, 800cfc8 <_printf_i+0x40>)
 800cfc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cfc8:	0800d021 	.word	0x0800d021
 800cfcc:	0800d035 	.word	0x0800d035
 800cfd0:	0800cfb1 	.word	0x0800cfb1
 800cfd4:	0800cfb1 	.word	0x0800cfb1
 800cfd8:	0800cfb1 	.word	0x0800cfb1
 800cfdc:	0800cfb1 	.word	0x0800cfb1
 800cfe0:	0800d035 	.word	0x0800d035
 800cfe4:	0800cfb1 	.word	0x0800cfb1
 800cfe8:	0800cfb1 	.word	0x0800cfb1
 800cfec:	0800cfb1 	.word	0x0800cfb1
 800cff0:	0800cfb1 	.word	0x0800cfb1
 800cff4:	0800d141 	.word	0x0800d141
 800cff8:	0800d065 	.word	0x0800d065
 800cffc:	0800d123 	.word	0x0800d123
 800d000:	0800cfb1 	.word	0x0800cfb1
 800d004:	0800cfb1 	.word	0x0800cfb1
 800d008:	0800d163 	.word	0x0800d163
 800d00c:	0800cfb1 	.word	0x0800cfb1
 800d010:	0800d065 	.word	0x0800d065
 800d014:	0800cfb1 	.word	0x0800cfb1
 800d018:	0800cfb1 	.word	0x0800cfb1
 800d01c:	0800d12b 	.word	0x0800d12b
 800d020:	682b      	ldr	r3, [r5, #0]
 800d022:	1d1a      	adds	r2, r3, #4
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	602a      	str	r2, [r5, #0]
 800d028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d02c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d030:	2301      	movs	r3, #1
 800d032:	e0a3      	b.n	800d17c <_printf_i+0x1f4>
 800d034:	6820      	ldr	r0, [r4, #0]
 800d036:	6829      	ldr	r1, [r5, #0]
 800d038:	0606      	lsls	r6, r0, #24
 800d03a:	f101 0304 	add.w	r3, r1, #4
 800d03e:	d50a      	bpl.n	800d056 <_printf_i+0xce>
 800d040:	680e      	ldr	r6, [r1, #0]
 800d042:	602b      	str	r3, [r5, #0]
 800d044:	2e00      	cmp	r6, #0
 800d046:	da03      	bge.n	800d050 <_printf_i+0xc8>
 800d048:	232d      	movs	r3, #45	; 0x2d
 800d04a:	4276      	negs	r6, r6
 800d04c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d050:	485e      	ldr	r0, [pc, #376]	; (800d1cc <_printf_i+0x244>)
 800d052:	230a      	movs	r3, #10
 800d054:	e019      	b.n	800d08a <_printf_i+0x102>
 800d056:	680e      	ldr	r6, [r1, #0]
 800d058:	602b      	str	r3, [r5, #0]
 800d05a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d05e:	bf18      	it	ne
 800d060:	b236      	sxthne	r6, r6
 800d062:	e7ef      	b.n	800d044 <_printf_i+0xbc>
 800d064:	682b      	ldr	r3, [r5, #0]
 800d066:	6820      	ldr	r0, [r4, #0]
 800d068:	1d19      	adds	r1, r3, #4
 800d06a:	6029      	str	r1, [r5, #0]
 800d06c:	0601      	lsls	r1, r0, #24
 800d06e:	d501      	bpl.n	800d074 <_printf_i+0xec>
 800d070:	681e      	ldr	r6, [r3, #0]
 800d072:	e002      	b.n	800d07a <_printf_i+0xf2>
 800d074:	0646      	lsls	r6, r0, #25
 800d076:	d5fb      	bpl.n	800d070 <_printf_i+0xe8>
 800d078:	881e      	ldrh	r6, [r3, #0]
 800d07a:	4854      	ldr	r0, [pc, #336]	; (800d1cc <_printf_i+0x244>)
 800d07c:	2f6f      	cmp	r7, #111	; 0x6f
 800d07e:	bf0c      	ite	eq
 800d080:	2308      	moveq	r3, #8
 800d082:	230a      	movne	r3, #10
 800d084:	2100      	movs	r1, #0
 800d086:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d08a:	6865      	ldr	r5, [r4, #4]
 800d08c:	60a5      	str	r5, [r4, #8]
 800d08e:	2d00      	cmp	r5, #0
 800d090:	bfa2      	ittt	ge
 800d092:	6821      	ldrge	r1, [r4, #0]
 800d094:	f021 0104 	bicge.w	r1, r1, #4
 800d098:	6021      	strge	r1, [r4, #0]
 800d09a:	b90e      	cbnz	r6, 800d0a0 <_printf_i+0x118>
 800d09c:	2d00      	cmp	r5, #0
 800d09e:	d04d      	beq.n	800d13c <_printf_i+0x1b4>
 800d0a0:	4615      	mov	r5, r2
 800d0a2:	fbb6 f1f3 	udiv	r1, r6, r3
 800d0a6:	fb03 6711 	mls	r7, r3, r1, r6
 800d0aa:	5dc7      	ldrb	r7, [r0, r7]
 800d0ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d0b0:	4637      	mov	r7, r6
 800d0b2:	42bb      	cmp	r3, r7
 800d0b4:	460e      	mov	r6, r1
 800d0b6:	d9f4      	bls.n	800d0a2 <_printf_i+0x11a>
 800d0b8:	2b08      	cmp	r3, #8
 800d0ba:	d10b      	bne.n	800d0d4 <_printf_i+0x14c>
 800d0bc:	6823      	ldr	r3, [r4, #0]
 800d0be:	07de      	lsls	r6, r3, #31
 800d0c0:	d508      	bpl.n	800d0d4 <_printf_i+0x14c>
 800d0c2:	6923      	ldr	r3, [r4, #16]
 800d0c4:	6861      	ldr	r1, [r4, #4]
 800d0c6:	4299      	cmp	r1, r3
 800d0c8:	bfde      	ittt	le
 800d0ca:	2330      	movle	r3, #48	; 0x30
 800d0cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d0d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d0d4:	1b52      	subs	r2, r2, r5
 800d0d6:	6122      	str	r2, [r4, #16]
 800d0d8:	f8cd a000 	str.w	sl, [sp]
 800d0dc:	464b      	mov	r3, r9
 800d0de:	aa03      	add	r2, sp, #12
 800d0e0:	4621      	mov	r1, r4
 800d0e2:	4640      	mov	r0, r8
 800d0e4:	f7ff fee2 	bl	800ceac <_printf_common>
 800d0e8:	3001      	adds	r0, #1
 800d0ea:	d14c      	bne.n	800d186 <_printf_i+0x1fe>
 800d0ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0f0:	b004      	add	sp, #16
 800d0f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0f6:	4835      	ldr	r0, [pc, #212]	; (800d1cc <_printf_i+0x244>)
 800d0f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d0fc:	6829      	ldr	r1, [r5, #0]
 800d0fe:	6823      	ldr	r3, [r4, #0]
 800d100:	f851 6b04 	ldr.w	r6, [r1], #4
 800d104:	6029      	str	r1, [r5, #0]
 800d106:	061d      	lsls	r5, r3, #24
 800d108:	d514      	bpl.n	800d134 <_printf_i+0x1ac>
 800d10a:	07df      	lsls	r7, r3, #31
 800d10c:	bf44      	itt	mi
 800d10e:	f043 0320 	orrmi.w	r3, r3, #32
 800d112:	6023      	strmi	r3, [r4, #0]
 800d114:	b91e      	cbnz	r6, 800d11e <_printf_i+0x196>
 800d116:	6823      	ldr	r3, [r4, #0]
 800d118:	f023 0320 	bic.w	r3, r3, #32
 800d11c:	6023      	str	r3, [r4, #0]
 800d11e:	2310      	movs	r3, #16
 800d120:	e7b0      	b.n	800d084 <_printf_i+0xfc>
 800d122:	6823      	ldr	r3, [r4, #0]
 800d124:	f043 0320 	orr.w	r3, r3, #32
 800d128:	6023      	str	r3, [r4, #0]
 800d12a:	2378      	movs	r3, #120	; 0x78
 800d12c:	4828      	ldr	r0, [pc, #160]	; (800d1d0 <_printf_i+0x248>)
 800d12e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d132:	e7e3      	b.n	800d0fc <_printf_i+0x174>
 800d134:	0659      	lsls	r1, r3, #25
 800d136:	bf48      	it	mi
 800d138:	b2b6      	uxthmi	r6, r6
 800d13a:	e7e6      	b.n	800d10a <_printf_i+0x182>
 800d13c:	4615      	mov	r5, r2
 800d13e:	e7bb      	b.n	800d0b8 <_printf_i+0x130>
 800d140:	682b      	ldr	r3, [r5, #0]
 800d142:	6826      	ldr	r6, [r4, #0]
 800d144:	6961      	ldr	r1, [r4, #20]
 800d146:	1d18      	adds	r0, r3, #4
 800d148:	6028      	str	r0, [r5, #0]
 800d14a:	0635      	lsls	r5, r6, #24
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	d501      	bpl.n	800d154 <_printf_i+0x1cc>
 800d150:	6019      	str	r1, [r3, #0]
 800d152:	e002      	b.n	800d15a <_printf_i+0x1d2>
 800d154:	0670      	lsls	r0, r6, #25
 800d156:	d5fb      	bpl.n	800d150 <_printf_i+0x1c8>
 800d158:	8019      	strh	r1, [r3, #0]
 800d15a:	2300      	movs	r3, #0
 800d15c:	6123      	str	r3, [r4, #16]
 800d15e:	4615      	mov	r5, r2
 800d160:	e7ba      	b.n	800d0d8 <_printf_i+0x150>
 800d162:	682b      	ldr	r3, [r5, #0]
 800d164:	1d1a      	adds	r2, r3, #4
 800d166:	602a      	str	r2, [r5, #0]
 800d168:	681d      	ldr	r5, [r3, #0]
 800d16a:	6862      	ldr	r2, [r4, #4]
 800d16c:	2100      	movs	r1, #0
 800d16e:	4628      	mov	r0, r5
 800d170:	f7f3 f836 	bl	80001e0 <memchr>
 800d174:	b108      	cbz	r0, 800d17a <_printf_i+0x1f2>
 800d176:	1b40      	subs	r0, r0, r5
 800d178:	6060      	str	r0, [r4, #4]
 800d17a:	6863      	ldr	r3, [r4, #4]
 800d17c:	6123      	str	r3, [r4, #16]
 800d17e:	2300      	movs	r3, #0
 800d180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d184:	e7a8      	b.n	800d0d8 <_printf_i+0x150>
 800d186:	6923      	ldr	r3, [r4, #16]
 800d188:	462a      	mov	r2, r5
 800d18a:	4649      	mov	r1, r9
 800d18c:	4640      	mov	r0, r8
 800d18e:	47d0      	blx	sl
 800d190:	3001      	adds	r0, #1
 800d192:	d0ab      	beq.n	800d0ec <_printf_i+0x164>
 800d194:	6823      	ldr	r3, [r4, #0]
 800d196:	079b      	lsls	r3, r3, #30
 800d198:	d413      	bmi.n	800d1c2 <_printf_i+0x23a>
 800d19a:	68e0      	ldr	r0, [r4, #12]
 800d19c:	9b03      	ldr	r3, [sp, #12]
 800d19e:	4298      	cmp	r0, r3
 800d1a0:	bfb8      	it	lt
 800d1a2:	4618      	movlt	r0, r3
 800d1a4:	e7a4      	b.n	800d0f0 <_printf_i+0x168>
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	4632      	mov	r2, r6
 800d1aa:	4649      	mov	r1, r9
 800d1ac:	4640      	mov	r0, r8
 800d1ae:	47d0      	blx	sl
 800d1b0:	3001      	adds	r0, #1
 800d1b2:	d09b      	beq.n	800d0ec <_printf_i+0x164>
 800d1b4:	3501      	adds	r5, #1
 800d1b6:	68e3      	ldr	r3, [r4, #12]
 800d1b8:	9903      	ldr	r1, [sp, #12]
 800d1ba:	1a5b      	subs	r3, r3, r1
 800d1bc:	42ab      	cmp	r3, r5
 800d1be:	dcf2      	bgt.n	800d1a6 <_printf_i+0x21e>
 800d1c0:	e7eb      	b.n	800d19a <_printf_i+0x212>
 800d1c2:	2500      	movs	r5, #0
 800d1c4:	f104 0619 	add.w	r6, r4, #25
 800d1c8:	e7f5      	b.n	800d1b6 <_printf_i+0x22e>
 800d1ca:	bf00      	nop
 800d1cc:	0800d325 	.word	0x0800d325
 800d1d0:	0800d336 	.word	0x0800d336

0800d1d4 <__retarget_lock_acquire_recursive>:
 800d1d4:	4770      	bx	lr

0800d1d6 <__retarget_lock_release_recursive>:
 800d1d6:	4770      	bx	lr

0800d1d8 <memmove>:
 800d1d8:	4288      	cmp	r0, r1
 800d1da:	b510      	push	{r4, lr}
 800d1dc:	eb01 0402 	add.w	r4, r1, r2
 800d1e0:	d902      	bls.n	800d1e8 <memmove+0x10>
 800d1e2:	4284      	cmp	r4, r0
 800d1e4:	4623      	mov	r3, r4
 800d1e6:	d807      	bhi.n	800d1f8 <memmove+0x20>
 800d1e8:	1e43      	subs	r3, r0, #1
 800d1ea:	42a1      	cmp	r1, r4
 800d1ec:	d008      	beq.n	800d200 <memmove+0x28>
 800d1ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d1f6:	e7f8      	b.n	800d1ea <memmove+0x12>
 800d1f8:	4402      	add	r2, r0
 800d1fa:	4601      	mov	r1, r0
 800d1fc:	428a      	cmp	r2, r1
 800d1fe:	d100      	bne.n	800d202 <memmove+0x2a>
 800d200:	bd10      	pop	{r4, pc}
 800d202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d206:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d20a:	e7f7      	b.n	800d1fc <memmove+0x24>

0800d20c <_realloc_r>:
 800d20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d210:	4680      	mov	r8, r0
 800d212:	4614      	mov	r4, r2
 800d214:	460e      	mov	r6, r1
 800d216:	b921      	cbnz	r1, 800d222 <_realloc_r+0x16>
 800d218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d21c:	4611      	mov	r1, r2
 800d21e:	f7ff bc39 	b.w	800ca94 <_malloc_r>
 800d222:	b92a      	cbnz	r2, 800d230 <_realloc_r+0x24>
 800d224:	f7ff fbca 	bl	800c9bc <_free_r>
 800d228:	4625      	mov	r5, r4
 800d22a:	4628      	mov	r0, r5
 800d22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d230:	f000 f81b 	bl	800d26a <_malloc_usable_size_r>
 800d234:	4284      	cmp	r4, r0
 800d236:	4607      	mov	r7, r0
 800d238:	d802      	bhi.n	800d240 <_realloc_r+0x34>
 800d23a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d23e:	d812      	bhi.n	800d266 <_realloc_r+0x5a>
 800d240:	4621      	mov	r1, r4
 800d242:	4640      	mov	r0, r8
 800d244:	f7ff fc26 	bl	800ca94 <_malloc_r>
 800d248:	4605      	mov	r5, r0
 800d24a:	2800      	cmp	r0, #0
 800d24c:	d0ed      	beq.n	800d22a <_realloc_r+0x1e>
 800d24e:	42bc      	cmp	r4, r7
 800d250:	4622      	mov	r2, r4
 800d252:	4631      	mov	r1, r6
 800d254:	bf28      	it	cs
 800d256:	463a      	movcs	r2, r7
 800d258:	f7ff fb9a 	bl	800c990 <memcpy>
 800d25c:	4631      	mov	r1, r6
 800d25e:	4640      	mov	r0, r8
 800d260:	f7ff fbac 	bl	800c9bc <_free_r>
 800d264:	e7e1      	b.n	800d22a <_realloc_r+0x1e>
 800d266:	4635      	mov	r5, r6
 800d268:	e7df      	b.n	800d22a <_realloc_r+0x1e>

0800d26a <_malloc_usable_size_r>:
 800d26a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d26e:	1f18      	subs	r0, r3, #4
 800d270:	2b00      	cmp	r3, #0
 800d272:	bfbc      	itt	lt
 800d274:	580b      	ldrlt	r3, [r1, r0]
 800d276:	18c0      	addlt	r0, r0, r3
 800d278:	4770      	bx	lr
	...

0800d27c <_init>:
 800d27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d27e:	bf00      	nop
 800d280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d282:	bc08      	pop	{r3}
 800d284:	469e      	mov	lr, r3
 800d286:	4770      	bx	lr

0800d288 <_fini>:
 800d288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d28a:	bf00      	nop
 800d28c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d28e:	bc08      	pop	{r3}
 800d290:	469e      	mov	lr, r3
 800d292:	4770      	bx	lr
