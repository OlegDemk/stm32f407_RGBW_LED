
lights_RGBW_PWM_DMA_two_chanels2_WORKS7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011acc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e4  08011c5c  08011c5c  00021c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012240  08012240  000300c0  2**0
                  CONTENTS
  4 .ARM          00000008  08012240  08012240  00022240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012248  08012248  000300c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012248  08012248  00022248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801224c  0801224c  0002224c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08012250  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300c0  2**0
                  CONTENTS
 10 .bss          00003538  200000c0  200000c0  000300c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200035f8  200035f8  000300c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022690  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d58  00000000  00000000  00052780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ae8  00000000  00000000  000574d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018f0  00000000  00000000  00058fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027721  00000000  00000000  0005a8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000244af  00000000  00000000  00081fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5826  00000000  00000000  000a6480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017bca6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000075b8  00000000  00000000  0017bcf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c0 	.word	0x200000c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011c44 	.word	0x08011c44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	08011c44 	.word	0x08011c44

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800089c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008a0:	f000 b974 	b.w	8000b8c <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468e      	mov	lr, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d14d      	bne.n	8000966 <__udivmoddi4+0xaa>
 80008ca:	428a      	cmp	r2, r1
 80008cc:	4694      	mov	ip, r2
 80008ce:	d969      	bls.n	80009a4 <__udivmoddi4+0xe8>
 80008d0:	fab2 f282 	clz	r2, r2
 80008d4:	b152      	cbz	r2, 80008ec <__udivmoddi4+0x30>
 80008d6:	fa01 f302 	lsl.w	r3, r1, r2
 80008da:	f1c2 0120 	rsb	r1, r2, #32
 80008de:	fa20 f101 	lsr.w	r1, r0, r1
 80008e2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008e6:	ea41 0e03 	orr.w	lr, r1, r3
 80008ea:	4094      	lsls	r4, r2
 80008ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f0:	0c21      	lsrs	r1, r4, #16
 80008f2:	fbbe f6f8 	udiv	r6, lr, r8
 80008f6:	fa1f f78c 	uxth.w	r7, ip
 80008fa:	fb08 e316 	mls	r3, r8, r6, lr
 80008fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000902:	fb06 f107 	mul.w	r1, r6, r7
 8000906:	4299      	cmp	r1, r3
 8000908:	d90a      	bls.n	8000920 <__udivmoddi4+0x64>
 800090a:	eb1c 0303 	adds.w	r3, ip, r3
 800090e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000912:	f080 811f 	bcs.w	8000b54 <__udivmoddi4+0x298>
 8000916:	4299      	cmp	r1, r3
 8000918:	f240 811c 	bls.w	8000b54 <__udivmoddi4+0x298>
 800091c:	3e02      	subs	r6, #2
 800091e:	4463      	add	r3, ip
 8000920:	1a5b      	subs	r3, r3, r1
 8000922:	b2a4      	uxth	r4, r4
 8000924:	fbb3 f0f8 	udiv	r0, r3, r8
 8000928:	fb08 3310 	mls	r3, r8, r0, r3
 800092c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000930:	fb00 f707 	mul.w	r7, r0, r7
 8000934:	42a7      	cmp	r7, r4
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x92>
 8000938:	eb1c 0404 	adds.w	r4, ip, r4
 800093c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000940:	f080 810a 	bcs.w	8000b58 <__udivmoddi4+0x29c>
 8000944:	42a7      	cmp	r7, r4
 8000946:	f240 8107 	bls.w	8000b58 <__udivmoddi4+0x29c>
 800094a:	4464      	add	r4, ip
 800094c:	3802      	subs	r0, #2
 800094e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000952:	1be4      	subs	r4, r4, r7
 8000954:	2600      	movs	r6, #0
 8000956:	b11d      	cbz	r5, 8000960 <__udivmoddi4+0xa4>
 8000958:	40d4      	lsrs	r4, r2
 800095a:	2300      	movs	r3, #0
 800095c:	e9c5 4300 	strd	r4, r3, [r5]
 8000960:	4631      	mov	r1, r6
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000966:	428b      	cmp	r3, r1
 8000968:	d909      	bls.n	800097e <__udivmoddi4+0xc2>
 800096a:	2d00      	cmp	r5, #0
 800096c:	f000 80ef 	beq.w	8000b4e <__udivmoddi4+0x292>
 8000970:	2600      	movs	r6, #0
 8000972:	e9c5 0100 	strd	r0, r1, [r5]
 8000976:	4630      	mov	r0, r6
 8000978:	4631      	mov	r1, r6
 800097a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800097e:	fab3 f683 	clz	r6, r3
 8000982:	2e00      	cmp	r6, #0
 8000984:	d14a      	bne.n	8000a1c <__udivmoddi4+0x160>
 8000986:	428b      	cmp	r3, r1
 8000988:	d302      	bcc.n	8000990 <__udivmoddi4+0xd4>
 800098a:	4282      	cmp	r2, r0
 800098c:	f200 80f9 	bhi.w	8000b82 <__udivmoddi4+0x2c6>
 8000990:	1a84      	subs	r4, r0, r2
 8000992:	eb61 0303 	sbc.w	r3, r1, r3
 8000996:	2001      	movs	r0, #1
 8000998:	469e      	mov	lr, r3
 800099a:	2d00      	cmp	r5, #0
 800099c:	d0e0      	beq.n	8000960 <__udivmoddi4+0xa4>
 800099e:	e9c5 4e00 	strd	r4, lr, [r5]
 80009a2:	e7dd      	b.n	8000960 <__udivmoddi4+0xa4>
 80009a4:	b902      	cbnz	r2, 80009a8 <__udivmoddi4+0xec>
 80009a6:	deff      	udf	#255	; 0xff
 80009a8:	fab2 f282 	clz	r2, r2
 80009ac:	2a00      	cmp	r2, #0
 80009ae:	f040 8092 	bne.w	8000ad6 <__udivmoddi4+0x21a>
 80009b2:	eba1 010c 	sub.w	r1, r1, ip
 80009b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ba:	fa1f fe8c 	uxth.w	lr, ip
 80009be:	2601      	movs	r6, #1
 80009c0:	0c20      	lsrs	r0, r4, #16
 80009c2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009c6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ce:	fb0e f003 	mul.w	r0, lr, r3
 80009d2:	4288      	cmp	r0, r1
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x12c>
 80009d6:	eb1c 0101 	adds.w	r1, ip, r1
 80009da:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x12a>
 80009e0:	4288      	cmp	r0, r1
 80009e2:	f200 80cb 	bhi.w	8000b7c <__udivmoddi4+0x2c0>
 80009e6:	4643      	mov	r3, r8
 80009e8:	1a09      	subs	r1, r1, r0
 80009ea:	b2a4      	uxth	r4, r4
 80009ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f0:	fb07 1110 	mls	r1, r7, r0, r1
 80009f4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009f8:	fb0e fe00 	mul.w	lr, lr, r0
 80009fc:	45a6      	cmp	lr, r4
 80009fe:	d908      	bls.n	8000a12 <__udivmoddi4+0x156>
 8000a00:	eb1c 0404 	adds.w	r4, ip, r4
 8000a04:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000a08:	d202      	bcs.n	8000a10 <__udivmoddi4+0x154>
 8000a0a:	45a6      	cmp	lr, r4
 8000a0c:	f200 80bb 	bhi.w	8000b86 <__udivmoddi4+0x2ca>
 8000a10:	4608      	mov	r0, r1
 8000a12:	eba4 040e 	sub.w	r4, r4, lr
 8000a16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a1a:	e79c      	b.n	8000956 <__udivmoddi4+0x9a>
 8000a1c:	f1c6 0720 	rsb	r7, r6, #32
 8000a20:	40b3      	lsls	r3, r6
 8000a22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a32:	431c      	orrs	r4, r3
 8000a34:	40f9      	lsrs	r1, r7
 8000a36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a42:	0c20      	lsrs	r0, r4, #16
 8000a44:	fa1f fe8c 	uxth.w	lr, ip
 8000a48:	fb09 1118 	mls	r1, r9, r8, r1
 8000a4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a50:	fb08 f00e 	mul.w	r0, r8, lr
 8000a54:	4288      	cmp	r0, r1
 8000a56:	fa02 f206 	lsl.w	r2, r2, r6
 8000a5a:	d90b      	bls.n	8000a74 <__udivmoddi4+0x1b8>
 8000a5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a60:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000a64:	f080 8088 	bcs.w	8000b78 <__udivmoddi4+0x2bc>
 8000a68:	4288      	cmp	r0, r1
 8000a6a:	f240 8085 	bls.w	8000b78 <__udivmoddi4+0x2bc>
 8000a6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a72:	4461      	add	r1, ip
 8000a74:	1a09      	subs	r1, r1, r0
 8000a76:	b2a4      	uxth	r4, r4
 8000a78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a88:	458e      	cmp	lr, r1
 8000a8a:	d908      	bls.n	8000a9e <__udivmoddi4+0x1e2>
 8000a8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a90:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000a94:	d26c      	bcs.n	8000b70 <__udivmoddi4+0x2b4>
 8000a96:	458e      	cmp	lr, r1
 8000a98:	d96a      	bls.n	8000b70 <__udivmoddi4+0x2b4>
 8000a9a:	3802      	subs	r0, #2
 8000a9c:	4461      	add	r1, ip
 8000a9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aa2:	fba0 9402 	umull	r9, r4, r0, r2
 8000aa6:	eba1 010e 	sub.w	r1, r1, lr
 8000aaa:	42a1      	cmp	r1, r4
 8000aac:	46c8      	mov	r8, r9
 8000aae:	46a6      	mov	lr, r4
 8000ab0:	d356      	bcc.n	8000b60 <__udivmoddi4+0x2a4>
 8000ab2:	d053      	beq.n	8000b5c <__udivmoddi4+0x2a0>
 8000ab4:	b15d      	cbz	r5, 8000ace <__udivmoddi4+0x212>
 8000ab6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aba:	eb61 010e 	sbc.w	r1, r1, lr
 8000abe:	fa01 f707 	lsl.w	r7, r1, r7
 8000ac2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ac6:	40f1      	lsrs	r1, r6
 8000ac8:	431f      	orrs	r7, r3
 8000aca:	e9c5 7100 	strd	r7, r1, [r5]
 8000ace:	2600      	movs	r6, #0
 8000ad0:	4631      	mov	r1, r6
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	40d8      	lsrs	r0, r3
 8000adc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ae4:	4091      	lsls	r1, r2
 8000ae6:	4301      	orrs	r1, r0
 8000ae8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aec:	fa1f fe8c 	uxth.w	lr, ip
 8000af0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000af4:	fb07 3610 	mls	r6, r7, r0, r3
 8000af8:	0c0b      	lsrs	r3, r1, #16
 8000afa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000afe:	fb00 f60e 	mul.w	r6, r0, lr
 8000b02:	429e      	cmp	r6, r3
 8000b04:	fa04 f402 	lsl.w	r4, r4, r2
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x260>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000b12:	d22f      	bcs.n	8000b74 <__udivmoddi4+0x2b8>
 8000b14:	429e      	cmp	r6, r3
 8000b16:	d92d      	bls.n	8000b74 <__udivmoddi4+0x2b8>
 8000b18:	3802      	subs	r0, #2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	1b9b      	subs	r3, r3, r6
 8000b1e:	b289      	uxth	r1, r1
 8000b20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b24:	fb07 3316 	mls	r3, r7, r6, r3
 8000b28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b30:	428b      	cmp	r3, r1
 8000b32:	d908      	bls.n	8000b46 <__udivmoddi4+0x28a>
 8000b34:	eb1c 0101 	adds.w	r1, ip, r1
 8000b38:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000b3c:	d216      	bcs.n	8000b6c <__udivmoddi4+0x2b0>
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d914      	bls.n	8000b6c <__udivmoddi4+0x2b0>
 8000b42:	3e02      	subs	r6, #2
 8000b44:	4461      	add	r1, ip
 8000b46:	1ac9      	subs	r1, r1, r3
 8000b48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b4c:	e738      	b.n	80009c0 <__udivmoddi4+0x104>
 8000b4e:	462e      	mov	r6, r5
 8000b50:	4628      	mov	r0, r5
 8000b52:	e705      	b.n	8000960 <__udivmoddi4+0xa4>
 8000b54:	4606      	mov	r6, r0
 8000b56:	e6e3      	b.n	8000920 <__udivmoddi4+0x64>
 8000b58:	4618      	mov	r0, r3
 8000b5a:	e6f8      	b.n	800094e <__udivmoddi4+0x92>
 8000b5c:	454b      	cmp	r3, r9
 8000b5e:	d2a9      	bcs.n	8000ab4 <__udivmoddi4+0x1f8>
 8000b60:	ebb9 0802 	subs.w	r8, r9, r2
 8000b64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b68:	3801      	subs	r0, #1
 8000b6a:	e7a3      	b.n	8000ab4 <__udivmoddi4+0x1f8>
 8000b6c:	4646      	mov	r6, r8
 8000b6e:	e7ea      	b.n	8000b46 <__udivmoddi4+0x28a>
 8000b70:	4620      	mov	r0, r4
 8000b72:	e794      	b.n	8000a9e <__udivmoddi4+0x1e2>
 8000b74:	4640      	mov	r0, r8
 8000b76:	e7d1      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b78:	46d0      	mov	r8, sl
 8000b7a:	e77b      	b.n	8000a74 <__udivmoddi4+0x1b8>
 8000b7c:	3b02      	subs	r3, #2
 8000b7e:	4461      	add	r1, ip
 8000b80:	e732      	b.n	80009e8 <__udivmoddi4+0x12c>
 8000b82:	4630      	mov	r0, r6
 8000b84:	e709      	b.n	800099a <__udivmoddi4+0xde>
 8000b86:	4464      	add	r4, ip
 8000b88:	3802      	subs	r0, #2
 8000b8a:	e742      	b.n	8000a12 <__udivmoddi4+0x156>

08000b8c <__aeabi_idiv0>:
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <stop_light_turn_on_left>:
#define RIGHT_5_OFF		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3)


// ----------------------------------------------------------------------------------------
void stop_light_turn_on_left(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	LEFT_1_ON; 		LEFT_2_ON;		LEFT_3_ON;		LEFT_4_ON;		LEFT_5_ON;
 8000b94:	2100      	movs	r1, #0
 8000b96:	480a      	ldr	r0, [pc, #40]	; (8000bc0 <stop_light_turn_on_left+0x30>)
 8000b98:	f007 f986 	bl	8007ea8 <HAL_TIM_PWM_Start>
 8000b9c:	2104      	movs	r1, #4
 8000b9e:	4808      	ldr	r0, [pc, #32]	; (8000bc0 <stop_light_turn_on_left+0x30>)
 8000ba0:	f007 f982 	bl	8007ea8 <HAL_TIM_PWM_Start>
 8000ba4:	2108      	movs	r1, #8
 8000ba6:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <stop_light_turn_on_left+0x30>)
 8000ba8:	f007 f97e 	bl	8007ea8 <HAL_TIM_PWM_Start>
 8000bac:	210c      	movs	r1, #12
 8000bae:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <stop_light_turn_on_left+0x30>)
 8000bb0:	f007 f97a 	bl	8007ea8 <HAL_TIM_PWM_Start>
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <stop_light_turn_on_left+0x34>)
 8000bb8:	f007 f976 	bl	8007ea8 <HAL_TIM_PWM_Start>
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20001630 	.word	0x20001630
 8000bc4:	20001678 	.word	0x20001678

08000bc8 <stop_light_turn_on_right>:

// ----------------------------------------------------------------------------------------
void stop_light_turn_on_right(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	RIGHT_1_ON;		RIGHT_2_ON;		RIGHT_3_ON;		RIGHT_4_ON;		RIGHT_5_ON;
 8000bcc:	2104      	movs	r1, #4
 8000bce:	480a      	ldr	r0, [pc, #40]	; (8000bf8 <stop_light_turn_on_right+0x30>)
 8000bd0:	f007 f96a 	bl	8007ea8 <HAL_TIM_PWM_Start>
 8000bd4:	2108      	movs	r1, #8
 8000bd6:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <stop_light_turn_on_right+0x30>)
 8000bd8:	f007 f966 	bl	8007ea8 <HAL_TIM_PWM_Start>
 8000bdc:	210c      	movs	r1, #12
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <stop_light_turn_on_right+0x30>)
 8000be0:	f007 f962 	bl	8007ea8 <HAL_TIM_PWM_Start>
 8000be4:	2104      	movs	r1, #4
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <stop_light_turn_on_right+0x34>)
 8000be8:	f007 f95e 	bl	8007ea8 <HAL_TIM_PWM_Start>
 8000bec:	2108      	movs	r1, #8
 8000bee:	4803      	ldr	r0, [pc, #12]	; (8000bfc <stop_light_turn_on_right+0x34>)
 8000bf0:	f007 f95a 	bl	8007ea8 <HAL_TIM_PWM_Start>
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20001678 	.word	0x20001678
 8000bfc:	200016c0 	.word	0x200016c0

08000c00 <stop_light_turn_off_left>:

// ----------------------------------------------------------------------------------------
void stop_light_turn_off_left(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	LEFT_1_OFF;		LEFT_2_OFF;		LEFT_3_OFF;		LEFT_4_OFF;		LEFT_5_OFF;
 8000c04:	2100      	movs	r1, #0
 8000c06:	480a      	ldr	r0, [pc, #40]	; (8000c30 <stop_light_turn_off_left+0x30>)
 8000c08:	f007 fa16 	bl	8008038 <HAL_TIM_PWM_Stop>
 8000c0c:	2104      	movs	r1, #4
 8000c0e:	4808      	ldr	r0, [pc, #32]	; (8000c30 <stop_light_turn_off_left+0x30>)
 8000c10:	f007 fa12 	bl	8008038 <HAL_TIM_PWM_Stop>
 8000c14:	2108      	movs	r1, #8
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <stop_light_turn_off_left+0x30>)
 8000c18:	f007 fa0e 	bl	8008038 <HAL_TIM_PWM_Stop>
 8000c1c:	210c      	movs	r1, #12
 8000c1e:	4804      	ldr	r0, [pc, #16]	; (8000c30 <stop_light_turn_off_left+0x30>)
 8000c20:	f007 fa0a 	bl	8008038 <HAL_TIM_PWM_Stop>
 8000c24:	2100      	movs	r1, #0
 8000c26:	4803      	ldr	r0, [pc, #12]	; (8000c34 <stop_light_turn_off_left+0x34>)
 8000c28:	f007 fa06 	bl	8008038 <HAL_TIM_PWM_Stop>
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20001630 	.word	0x20001630
 8000c34:	20001678 	.word	0x20001678

08000c38 <stop_light_turn_off_right>:

// ----------------------------------------------------------------------------------------
void stop_light_turn_off_right(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	RIGHT_1_OFF;	RIGHT_2_OFF;	RIGHT_3_OFF;	RIGHT_4_OFF;	RIGHT_5_OFF;
 8000c3c:	2104      	movs	r1, #4
 8000c3e:	480a      	ldr	r0, [pc, #40]	; (8000c68 <stop_light_turn_off_right+0x30>)
 8000c40:	f007 f9fa 	bl	8008038 <HAL_TIM_PWM_Stop>
 8000c44:	2108      	movs	r1, #8
 8000c46:	4808      	ldr	r0, [pc, #32]	; (8000c68 <stop_light_turn_off_right+0x30>)
 8000c48:	f007 f9f6 	bl	8008038 <HAL_TIM_PWM_Stop>
 8000c4c:	210c      	movs	r1, #12
 8000c4e:	4806      	ldr	r0, [pc, #24]	; (8000c68 <stop_light_turn_off_right+0x30>)
 8000c50:	f007 f9f2 	bl	8008038 <HAL_TIM_PWM_Stop>
 8000c54:	2104      	movs	r1, #4
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <stop_light_turn_off_right+0x34>)
 8000c58:	f007 f9ee 	bl	8008038 <HAL_TIM_PWM_Stop>
 8000c5c:	2108      	movs	r1, #8
 8000c5e:	4803      	ldr	r0, [pc, #12]	; (8000c6c <stop_light_turn_off_right+0x34>)
 8000c60:	f007 f9ea 	bl	8008038 <HAL_TIM_PWM_Stop>
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20001678 	.word	0x20001678
 8000c6c:	200016c0 	.word	0x200016c0

08000c70 <set_duty_cycle_stop_left_1>:
	RIGHT_1_ON;
	HAL_Delay(delay);
}
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_left_1(int duty_cycle)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_cycle);
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <set_duty_cycle_stop_left_1+0x1c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	20001678 	.word	0x20001678

08000c90 <set_duty_cycle_stop_left_2>:
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_left_2(int duty_cycle)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, duty_cycle);
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <set_duty_cycle_stop_left_2+0x1c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	20001630 	.word	0x20001630

08000cb0 <set_duty_cycle_stop_left_3>:
// ---------------------------------------------------------------------------------------
void set_duty_cycle_stop_left_3(int duty_cycle)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle);
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <set_duty_cycle_stop_left_3+0x1c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	20001630 	.word	0x20001630

08000cd0 <set_duty_cycle_stop_left_4>:
// ---------------------------------------------------------------------------------------
void set_duty_cycle_stop_left_4(int duty_cycle)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty_cycle);
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <set_duty_cycle_stop_left_4+0x1c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	20001630 	.word	0x20001630

08000cf0 <set_duty_cycle_stop_left_5>:
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_left_5(int duty_cycle)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle);
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <set_duty_cycle_stop_left_5+0x1c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	20001630 	.word	0x20001630

08000d10 <set_duty_cycle_stop_ritht_1>:
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_ritht_1(int duty_cycle)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, duty_cycle);
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <set_duty_cycle_stop_ritht_1+0x1c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	200016c0 	.word	0x200016c0

08000d30 <set_duty_cycle_stop_ritht_2>:
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_ritht_2(int duty_cycle)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, duty_cycle);
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <set_duty_cycle_stop_ritht_2+0x1c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	200016c0 	.word	0x200016c0

08000d50 <set_duty_cycle_stop_ritht_3>:
// ---------------------------------------------------------------------------------------
void set_duty_cycle_stop_ritht_3(int duty_cycle)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, duty_cycle);
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <set_duty_cycle_stop_ritht_3+0x1c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	20001678 	.word	0x20001678

08000d70 <set_duty_cycle_stop_ritht_4>:
// ---------------------------------------------------------------------------------------
void set_duty_cycle_stop_ritht_4(int duty_cycle)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty_cycle);
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <set_duty_cycle_stop_ritht_4+0x1c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	20001678 	.word	0x20001678

08000d90 <set_duty_cycle_stop_ritht_5>:
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_ritht_5(int duty_cycle)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycle);
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <set_duty_cycle_stop_ritht_5+0x1c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	20001678 	.word	0x20001678

08000db0 <stop_light_all_turn_off>:
	stop_light_turn_on_right();
}

// ----------------------------------------------------------------------------------------
void stop_light_all_turn_off(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0

	stop_light_turn_off_left();
 8000db4:	f7ff ff24 	bl	8000c00 <stop_light_turn_off_left>
	stop_light_turn_off_right();
 8000db8:	f7ff ff3e 	bl	8000c38 <stop_light_turn_off_right>
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <test_from_midle_to_corner>:
		}
	}
}
// ----------------------------------------------------------------------------------------
void test_from_midle_to_corner(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
	int delay = 1;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	603b      	str	r3, [r7, #0]
	int duty_cycle = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]

	  // Turn on RED LEDs
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4866      	ldr	r0, [pc, #408]	; (8000f6c <test_from_midle_to_corner+0x1ac>)
 8000dd2:	f007 f869 	bl	8007ea8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000dd6:	2104      	movs	r1, #4
 8000dd8:	4864      	ldr	r0, [pc, #400]	; (8000f6c <test_from_midle_to_corner+0x1ac>)
 8000dda:	f007 f865 	bl	8007ea8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000dde:	2108      	movs	r1, #8
 8000de0:	4862      	ldr	r0, [pc, #392]	; (8000f6c <test_from_midle_to_corner+0x1ac>)
 8000de2:	f007 f861 	bl	8007ea8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000de6:	210c      	movs	r1, #12
 8000de8:	4860      	ldr	r0, [pc, #384]	; (8000f6c <test_from_midle_to_corner+0x1ac>)
 8000dea:	f007 f85d 	bl	8007ea8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000dee:	2100      	movs	r1, #0
 8000df0:	485f      	ldr	r0, [pc, #380]	; (8000f70 <test_from_midle_to_corner+0x1b0>)
 8000df2:	f007 f859 	bl	8007ea8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000df6:	2104      	movs	r1, #4
 8000df8:	485d      	ldr	r0, [pc, #372]	; (8000f70 <test_from_midle_to_corner+0x1b0>)
 8000dfa:	f007 f855 	bl	8007ea8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000dfe:	2108      	movs	r1, #8
 8000e00:	485b      	ldr	r0, [pc, #364]	; (8000f70 <test_from_midle_to_corner+0x1b0>)
 8000e02:	f007 f851 	bl	8007ea8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000e06:	210c      	movs	r1, #12
 8000e08:	4859      	ldr	r0, [pc, #356]	; (8000f70 <test_from_midle_to_corner+0x1b0>)
 8000e0a:	f007 f84d 	bl	8007ea8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000e0e:	2104      	movs	r1, #4
 8000e10:	4858      	ldr	r0, [pc, #352]	; (8000f74 <test_from_midle_to_corner+0x1b4>)
 8000e12:	f007 f849 	bl	8007ea8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000e16:	2108      	movs	r1, #8
 8000e18:	4856      	ldr	r0, [pc, #344]	; (8000f74 <test_from_midle_to_corner+0x1b4>)
 8000e1a:	f007 f845 	bl	8007ea8 <HAL_TIM_PWM_Start>

	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	e010      	b.n	8000e46 <test_from_midle_to_corner+0x86>
	{
		set_duty_cycle_stop_left_1(duty_cycle);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ff23 	bl	8000c70 <set_duty_cycle_stop_left_1>
		set_duty_cycle_stop_ritht_1(duty_cycle);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ff70 	bl	8000d10 <set_duty_cycle_stop_ritht_1>

		stop_light_turn_on_left();
 8000e30:	f7ff feae 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000e34:	f7ff fec8 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f003 fc84 	bl	8004748 <HAL_Delay>
	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3301      	adds	r3, #1
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b64      	cmp	r3, #100	; 0x64
 8000e4a:	ddeb      	ble.n	8000e24 <test_from_midle_to_corner+0x64>
	}

	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	e010      	b.n	8000e74 <test_from_midle_to_corner+0xb4>
	{
		set_duty_cycle_stop_left_2(duty_cycle);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ff1c 	bl	8000c90 <set_duty_cycle_stop_left_2>
		set_duty_cycle_stop_ritht_2(duty_cycle);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff ff69 	bl	8000d30 <set_duty_cycle_stop_ritht_2>

		stop_light_turn_on_left();
 8000e5e:	f7ff fe97 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000e62:	f7ff feb1 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f003 fc6d 	bl	8004748 <HAL_Delay>
	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3301      	adds	r3, #1
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b64      	cmp	r3, #100	; 0x64
 8000e78:	ddeb      	ble.n	8000e52 <test_from_midle_to_corner+0x92>
	}

	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	e010      	b.n	8000ea2 <test_from_midle_to_corner+0xe2>
	{
		set_duty_cycle_stop_left_3(duty_cycle);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff ff15 	bl	8000cb0 <set_duty_cycle_stop_left_3>
		set_duty_cycle_stop_ritht_3(duty_cycle);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ff62 	bl	8000d50 <set_duty_cycle_stop_ritht_3>

		stop_light_turn_on_left();
 8000e8c:	f7ff fe80 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000e90:	f7ff fe9a 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f003 fc56 	bl	8004748 <HAL_Delay>
	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b64      	cmp	r3, #100	; 0x64
 8000ea6:	ddeb      	ble.n	8000e80 <test_from_midle_to_corner+0xc0>
	}

	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	e010      	b.n	8000ed0 <test_from_midle_to_corner+0x110>
	{
		set_duty_cycle_stop_left_4(duty_cycle);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ff0e 	bl	8000cd0 <set_duty_cycle_stop_left_4>
		set_duty_cycle_stop_ritht_4(duty_cycle);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff5b 	bl	8000d70 <set_duty_cycle_stop_ritht_4>

		stop_light_turn_on_left();
 8000eba:	f7ff fe69 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000ebe:	f7ff fe83 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f003 fc3f 	bl	8004748 <HAL_Delay>
	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b64      	cmp	r3, #100	; 0x64
 8000ed4:	ddeb      	ble.n	8000eae <test_from_midle_to_corner+0xee>
	}

	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	e010      	b.n	8000efe <test_from_midle_to_corner+0x13e>
	{
		set_duty_cycle_stop_left_5(duty_cycle);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ff07 	bl	8000cf0 <set_duty_cycle_stop_left_5>
		set_duty_cycle_stop_ritht_5(duty_cycle);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ff54 	bl	8000d90 <set_duty_cycle_stop_ritht_5>

		stop_light_turn_on_left();
 8000ee8:	f7ff fe52 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000eec:	f7ff fe6c 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f003 fc28 	bl	8004748 <HAL_Delay>
	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3301      	adds	r3, #1
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b64      	cmp	r3, #100	; 0x64
 8000f02:	ddeb      	ble.n	8000edc <test_from_midle_to_corner+0x11c>
	}

	for(duty_cycle = MAX_DEMO_BRIGHTNESS; duty_cycle >= 0; duty_cycle--)
 8000f04:	2364      	movs	r3, #100	; 0x64
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	e028      	b.n	8000f5c <test_from_midle_to_corner+0x19c>
	{
		set_duty_cycle_stop_left_1(duty_cycle);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff feb0 	bl	8000c70 <set_duty_cycle_stop_left_1>
		set_duty_cycle_stop_left_2(duty_cycle);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff febd 	bl	8000c90 <set_duty_cycle_stop_left_2>
		set_duty_cycle_stop_left_3(duty_cycle);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff feca 	bl	8000cb0 <set_duty_cycle_stop_left_3>
		set_duty_cycle_stop_left_4(duty_cycle);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff fed7 	bl	8000cd0 <set_duty_cycle_stop_left_4>
		set_duty_cycle_stop_left_5(duty_cycle);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff fee4 	bl	8000cf0 <set_duty_cycle_stop_left_5>

		set_duty_cycle_stop_ritht_1(duty_cycle);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff fef1 	bl	8000d10 <set_duty_cycle_stop_ritht_1>
		set_duty_cycle_stop_ritht_2(duty_cycle);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff fefe 	bl	8000d30 <set_duty_cycle_stop_ritht_2>
		set_duty_cycle_stop_ritht_3(duty_cycle);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff0b 	bl	8000d50 <set_duty_cycle_stop_ritht_3>
		set_duty_cycle_stop_ritht_4(duty_cycle);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ff18 	bl	8000d70 <set_duty_cycle_stop_ritht_4>
		set_duty_cycle_stop_ritht_5(duty_cycle);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ff25 	bl	8000d90 <set_duty_cycle_stop_ritht_5>

		stop_light_turn_on_left();
 8000f46:	f7ff fe23 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000f4a:	f7ff fe3d 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f003 fbf9 	bl	8004748 <HAL_Delay>
	for(duty_cycle = MAX_DEMO_BRIGHTNESS; duty_cycle >= 0; duty_cycle--)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	dad3      	bge.n	8000f0a <test_from_midle_to_corner+0x14a>
	}

}
 8000f62:	bf00      	nop
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20001630 	.word	0x20001630
 8000f70:	20001678 	.word	0x20001678
 8000f74:	200016c0 	.word	0x200016c0

08000f78 <ARGB_Init>:

/**
 * @brief Init timer & prescalers
 * @param none
 */
void ARGB_Init(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
    /* Auto-calculation! */
    u32_t APBfq; // Clock freq
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
 8000f7e:	f006 fb65 	bl	800764c <HAL_RCC_GetPCLK1Freq>
 8000f82:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
 8000f84:	4b36      	ldr	r3, [pc, #216]	; (8001060 <ARGB_Init+0xe8>)
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <ARGB_Init+0x1c>
 8000f90:	2301      	movs	r3, #1
 8000f92:	e000      	b.n	8000f96 <ARGB_Init+0x1e>
 8000f94:	2302      	movs	r3, #2
 8000f96:	461a      	mov	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	fb02 f303 	mul.w	r3, r2, r3
 8000f9e:	607b      	str	r3, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	0a1b      	lsrs	r3, r3, #8
 8000fa4:	4a2f      	ldr	r2, [pc, #188]	; (8001064 <ARGB_Init+0xec>)
 8000fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000faa:	091b      	lsrs	r3, r3, #4
 8000fac:	607b      	str	r3, [r7, #4]
#endif
    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 8000fae:	4b2e      	ldr	r3, [pc, #184]	; (8001068 <ARGB_Init+0xf0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	4b2a      	ldr	r3, [pc, #168]	; (8001068 <ARGB_Init+0xf0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 8000fc4:	4b28      	ldr	r3, [pc, #160]	; (8001068 <ARGB_Init+0xf0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	615a      	str	r2, [r3, #20]
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.56) - 1;     // Log.1 - 56% - 0.70us
    PWM_LO = (u8_t) (APBfq * 0.28) - 1;     // Log.0 - 28% - 0.35us
#endif
#ifdef SK6812
    PWM_HI = (u8_t) (APBfq * 0.50) - 1;     // Log.1 - 48% - 0.60us // v  PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff fbc3 	bl	8000758 <__aeabi_ui2d>
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	4b25      	ldr	r3, [pc, #148]	; (800106c <ARGB_Init+0xf4>)
 8000fd8:	f7ff f952 	bl	8000280 <__aeabi_dmul>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f7ff fc32 	bl	800084c <__aeabi_d2uiz>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	3b01      	subs	r3, #1
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <ARGB_Init+0xf8>)
 8000ff2:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.26) - 1;     // Log.0 - 24% - 0.30us  // PWM_LO = (u8_t) (APBfq * 0.24) - 1;
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff fbaf 	bl	8000758 <__aeabi_ui2d>
 8000ffa:	a317      	add	r3, pc, #92	; (adr r3, 8001058 <ARGB_Init+0xe0>)
 8000ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001000:	f7ff f93e 	bl	8000280 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4610      	mov	r0, r2
 800100a:	4619      	mov	r1, r3
 800100c:	f7ff fc1e 	bl	800084c <__aeabi_d2uiz>
 8001010:	4603      	mov	r3, r0
 8001012:	b2db      	uxtb	r3, r3
 8001014:	3b01      	subs	r3, #1
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4b16      	ldr	r3, [pc, #88]	; (8001074 <ARGB_Init+0xfc>)
 800101a:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST_LEFT = ARGB_READY; // Set Ready Flag
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <ARGB_Init+0x100>)
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH_LEFT, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <ARGB_Init+0xf0>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2201      	movs	r2, #1
 8001028:	2108      	movs	r1, #8
 800102a:	4618      	mov	r0, r3
 800102c:	f007 fe6a 	bl	8008d04 <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8001030:	2001      	movs	r0, #1
 8001032:	f003 fb89 	bl	8004748 <HAL_Delay>
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH_RIGHT, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <ARGB_Init+0xf0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2201      	movs	r2, #1
 800103c:	210c      	movs	r1, #12
 800103e:	4618      	mov	r0, r3
 8001040:	f007 fe60 	bl	8008d04 <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8001044:	2001      	movs	r0, #1
 8001046:	f003 fb7f 	bl	8004748 <HAL_Delay>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	f3af 8000 	nop.w
 8001058:	0a3d70a4 	.word	0x0a3d70a4
 800105c:	3fd0a3d7 	.word	0x3fd0a3d7
 8001060:	40023800 	.word	0x40023800
 8001064:	014f8b59 	.word	0x014f8b59
 8001068:	20001750 	.word	0x20001750
 800106c:	3fe00000 	.word	0x3fe00000
 8001070:	200000dc 	.word	0x200000dc
 8001074:	200000dd 	.word	0x200000dd
 8001078:	2000058c 	.word	0x2000058c

0800107c <ARGB_Clear_left>:
/**
 * @brief Fill ALL LEDs with (0,0,0)
 * @param none
 * @note Update strip after that
 */
void ARGB_Clear_left(void) {
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
    ARGB_FillRGB_left(0, 0, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	2100      	movs	r1, #0
 8001084:	2000      	movs	r0, #0
 8001086:	f000 f95d 	bl	8001344 <ARGB_FillRGB_left>
#ifdef SK6812
    ARGB_FillWhite_left(0);
 800108a:	2000      	movs	r0, #0
 800108c:	f000 f99c 	bl	80013c8 <ARGB_FillWhite_left>
#endif
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}

08001094 <ARGB_Clear_right>:
// -------------------------------------------------------------------------------
void ARGB_Clear_right(void) {
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
    ARGB_FillRGB_right(0, 0, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2100      	movs	r1, #0
 800109c:	2000      	movs	r0, #0
 800109e:	f000 f972 	bl	8001386 <ARGB_FillRGB_right>
#ifdef SK6812
    ARGB_FillWhite_right(0);
 80010a2:	2000      	movs	r0, #0
 80010a4:	f000 f9ad 	bl	8001402 <ARGB_FillWhite_right>
#endif
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}

080010ac <ARGB_SetBrightness>:

/**
 * @brief Set GLOBAL LED brightness
 * @param[in] br Brightness [0..255]
 */
void ARGB_SetBrightness(u8_t br) {
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
    ARGB_BR = br;
 80010b6:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <ARGB_SetBrightness+0x1c>)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	7013      	strb	r3, [r2, #0]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	20000000 	.word	0x20000000

080010cc <ARGB_SetRGB_left>:
 * @param[in] i LED position
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_SetRGB_left(u16_t i, u8_t g, u8_t r, u8_t b) {
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4604      	mov	r4, r0
 80010d4:	4608      	mov	r0, r1
 80010d6:	4611      	mov	r1, r2
 80010d8:	461a      	mov	r2, r3
 80010da:	4623      	mov	r3, r4
 80010dc:	80fb      	strh	r3, [r7, #6]
 80010de:	4603      	mov	r3, r0
 80010e0:	717b      	strb	r3, [r7, #5]
 80010e2:	460b      	mov	r3, r1
 80010e4:	713b      	strb	r3, [r7, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	2b54      	cmp	r3, #84	; 0x54
 80010ee:	d913      	bls.n	8001118 <ARGB_SetRGB_left+0x4c>
        u16_t _i = i / NUM_PIXELS;
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	4a30      	ldr	r2, [pc, #192]	; (80011b4 <ARGB_SetRGB_left+0xe8>)
 80010f4:	fba2 2303 	umull	r2, r3, r2, r3
 80010f8:	099b      	lsrs	r3, r3, #6
 80010fa:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 80010fc:	89fb      	ldrh	r3, [r7, #14]
 80010fe:	461a      	mov	r2, r3
 8001100:	0092      	lsls	r2, r2, #2
 8001102:	4413      	add	r3, r2
 8001104:	461a      	mov	r2, r3
 8001106:	0111      	lsls	r1, r2, #4
 8001108:	461a      	mov	r2, r3
 800110a:	460b      	mov	r3, r1
 800110c:	4413      	add	r3, r2
 800110e:	425b      	negs	r3, r3
 8001110:	b29a      	uxth	r2, r3
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	4413      	add	r3, r2
 8001116:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 8001118:	4b27      	ldr	r3, [pc, #156]	; (80011b8 <ARGB_SetRGB_left+0xec>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	3301      	adds	r3, #1
 8001120:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001124:	fb92 f3f3 	sdiv	r3, r2, r3
 8001128:	793a      	ldrb	r2, [r7, #4]
 800112a:	fb92 f3f3 	sdiv	r3, r2, r3
 800112e:	713b      	strb	r3, [r7, #4]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 8001130:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <ARGB_SetRGB_left+0xec>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	3301      	adds	r3, #1
 8001138:	f44f 7280 	mov.w	r2, #256	; 0x100
 800113c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001140:	797a      	ldrb	r2, [r7, #5]
 8001142:	fb92 f3f3 	sdiv	r3, r2, r3
 8001146:	717b      	strb	r3, [r7, #5]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <ARGB_SetRGB_left+0xec>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	3301      	adds	r3, #1
 8001150:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001154:	fb92 f3f3 	sdiv	r3, r2, r3
 8001158:	78fa      	ldrb	r2, [r7, #3]
 800115a:	fb92 f3f3 	sdiv	r3, r2, r3
 800115e:	70fb      	strb	r3, [r7, #3]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 8001160:	797b      	ldrb	r3, [r7, #5]
 8001162:	21b0      	movs	r1, #176	; 0xb0
 8001164:	4618      	mov	r0, r3
 8001166:	f000 fd01 	bl	8001b6c <scale8>
 800116a:	4603      	mov	r3, r0
 800116c:	717b      	strb	r3, [r7, #5]
    b = scale8(b, 0xF0);
 800116e:	78fb      	ldrb	r3, [r7, #3]
 8001170:	21f0      	movs	r1, #240	; 0xf0
 8001172:	4618      	mov	r0, r3
 8001174:	f000 fcfa 	bl	8001b6c <scale8>
 8001178:	4603      	mov	r3, r0
 800117a:	70fb      	strb	r3, [r7, #3]
#endif
    // Subpixel chain order
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
 800117c:	793b      	ldrb	r3, [r7, #4]
 800117e:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = g;
 8001180:	797b      	ldrb	r3, [r7, #5]
 8001182:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8001184:	78fb      	ldrb	r3, [r7, #3]
 8001186:	72fb      	strb	r3, [r7, #11]
    const u8_t subp2 = r;
    const u8_t subp3 = b;
#endif
    // RGB or RGBW
#ifdef SK6812
    RGB_BUF_LEFT[4 * i] = subp1;     // subpixel 1
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	490b      	ldr	r1, [pc, #44]	; (80011bc <ARGB_SetRGB_left+0xf0>)
 800118e:	7b7a      	ldrb	r2, [r7, #13]
 8001190:	54ca      	strb	r2, [r1, r3]
    RGB_BUF_LEFT[4 * i + 1] = subp2; // subpixel 2
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	3301      	adds	r3, #1
 8001198:	4908      	ldr	r1, [pc, #32]	; (80011bc <ARGB_SetRGB_left+0xf0>)
 800119a:	7b3a      	ldrb	r2, [r7, #12]
 800119c:	54ca      	strb	r2, [r1, r3]
    RGB_BUF_LEFT[4 * i + 2] = subp3; // subpixel 3
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	3302      	adds	r3, #2
 80011a4:	4905      	ldr	r1, [pc, #20]	; (80011bc <ARGB_SetRGB_left+0xf0>)
 80011a6:	7afa      	ldrb	r2, [r7, #11]
 80011a8:	54ca      	strb	r2, [r1, r3]
#else
    RGB_BUF_LEFT[3 * i] = subp1;     // subpixel 1
    RGB_BUF_LEFT[3 * i + 1] = subp2; // subpixel 2
    RGB_BUF_LEFT[3 * i + 2] = subp3; // subpixel 3
#endif
}
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd90      	pop	{r4, r7, pc}
 80011b2:	bf00      	nop
 80011b4:	c0c0c0c1 	.word	0xc0c0c0c1
 80011b8:	20000000 	.word	0x20000000
 80011bc:	200000e0 	.word	0x200000e0

080011c0 <ARGB_SetRGB_right>:
// ----------------------------------------------------------------------------
void ARGB_SetRGB_right(u16_t i, u8_t g, u8_t r, u8_t b) {
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4604      	mov	r4, r0
 80011c8:	4608      	mov	r0, r1
 80011ca:	4611      	mov	r1, r2
 80011cc:	461a      	mov	r2, r3
 80011ce:	4623      	mov	r3, r4
 80011d0:	80fb      	strh	r3, [r7, #6]
 80011d2:	4603      	mov	r3, r0
 80011d4:	717b      	strb	r3, [r7, #5]
 80011d6:	460b      	mov	r3, r1
 80011d8:	713b      	strb	r3, [r7, #4]
 80011da:	4613      	mov	r3, r2
 80011dc:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	2b54      	cmp	r3, #84	; 0x54
 80011e2:	d913      	bls.n	800120c <ARGB_SetRGB_right+0x4c>
        u16_t _i = i / NUM_PIXELS;
 80011e4:	88fb      	ldrh	r3, [r7, #6]
 80011e6:	4a30      	ldr	r2, [pc, #192]	; (80012a8 <ARGB_SetRGB_right+0xe8>)
 80011e8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ec:	099b      	lsrs	r3, r3, #6
 80011ee:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 80011f0:	89fb      	ldrh	r3, [r7, #14]
 80011f2:	461a      	mov	r2, r3
 80011f4:	0092      	lsls	r2, r2, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	461a      	mov	r2, r3
 80011fa:	0111      	lsls	r1, r2, #4
 80011fc:	461a      	mov	r2, r3
 80011fe:	460b      	mov	r3, r1
 8001200:	4413      	add	r3, r2
 8001202:	425b      	negs	r3, r3
 8001204:	b29a      	uxth	r2, r3
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	4413      	add	r3, r2
 800120a:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 800120c:	4b27      	ldr	r3, [pc, #156]	; (80012ac <ARGB_SetRGB_right+0xec>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	3301      	adds	r3, #1
 8001214:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001218:	fb92 f3f3 	sdiv	r3, r2, r3
 800121c:	793a      	ldrb	r2, [r7, #4]
 800121e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001222:	713b      	strb	r3, [r7, #4]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <ARGB_SetRGB_right+0xec>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	3301      	adds	r3, #1
 800122c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001230:	fb92 f3f3 	sdiv	r3, r2, r3
 8001234:	797a      	ldrb	r2, [r7, #5]
 8001236:	fb92 f3f3 	sdiv	r3, r2, r3
 800123a:	717b      	strb	r3, [r7, #5]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <ARGB_SetRGB_right+0xec>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	3301      	adds	r3, #1
 8001244:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001248:	fb92 f3f3 	sdiv	r3, r2, r3
 800124c:	78fa      	ldrb	r2, [r7, #3]
 800124e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001252:	70fb      	strb	r3, [r7, #3]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 8001254:	797b      	ldrb	r3, [r7, #5]
 8001256:	21b0      	movs	r1, #176	; 0xb0
 8001258:	4618      	mov	r0, r3
 800125a:	f000 fc87 	bl	8001b6c <scale8>
 800125e:	4603      	mov	r3, r0
 8001260:	717b      	strb	r3, [r7, #5]
    b = scale8(b, 0xF0);
 8001262:	78fb      	ldrb	r3, [r7, #3]
 8001264:	21f0      	movs	r1, #240	; 0xf0
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fc80 	bl	8001b6c <scale8>
 800126c:	4603      	mov	r3, r0
 800126e:	70fb      	strb	r3, [r7, #3]
#endif
    // Subpixel chain order
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
 8001270:	793b      	ldrb	r3, [r7, #4]
 8001272:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = g;
 8001274:	797b      	ldrb	r3, [r7, #5]
 8001276:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	72fb      	strb	r3, [r7, #11]
    const u8_t subp2 = r;
    const u8_t subp3 = b;
#endif
    // RGB or RGBW
#ifdef SK6812
    RGB_BUF_RIGHT[4 * i] = subp1;     // subpixel 1
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	490b      	ldr	r1, [pc, #44]	; (80012b0 <ARGB_SetRGB_right+0xf0>)
 8001282:	7b7a      	ldrb	r2, [r7, #13]
 8001284:	54ca      	strb	r2, [r1, r3]
    RGB_BUF_RIGHT[4 * i + 1] = subp2; // subpixel 2
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	3301      	adds	r3, #1
 800128c:	4908      	ldr	r1, [pc, #32]	; (80012b0 <ARGB_SetRGB_right+0xf0>)
 800128e:	7b3a      	ldrb	r2, [r7, #12]
 8001290:	54ca      	strb	r2, [r1, r3]
    RGB_BUF_RIGHT[4 * i + 2] = subp3; // subpixel 3
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	4905      	ldr	r1, [pc, #20]	; (80012b0 <ARGB_SetRGB_right+0xf0>)
 800129a:	7afa      	ldrb	r2, [r7, #11]
 800129c:	54ca      	strb	r2, [r1, r3]
#else
    RGB_BUF_RIGHT[3 * i] = subp1;     // subpixel 1
    RGB_BUF_RIGHT[3 * i + 1] = subp2; // subpixel 2
    RGB_BUF_RIGHT[3 * i + 2] = subp3; // subpixel 3
#endif
}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd90      	pop	{r4, r7, pc}
 80012a6:	bf00      	nop
 80012a8:	c0c0c0c1 	.word	0xc0c0c0c1
 80012ac:	20000000 	.word	0x20000000
 80012b0:	20000234 	.word	0x20000234

080012b4 <ARGB_SetWhite_left>:
/**
 * @brief Set White component in strip by index
 * @param[in] i LED position
 * @param[in] w White component [0..255]
 */
void ARGB_SetWhite_left(u16_t i, u8_t w) {
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	460a      	mov	r2, r1
 80012be:	80fb      	strh	r3, [r7, #6]
 80012c0:	4613      	mov	r3, r2
 80012c2:	717b      	strb	r3, [r7, #5]
#ifdef RGB
    return;
#endif
    w /= 256 / ((u16_t) ARGB_BR + 1); 			// set brightness
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <ARGB_SetWhite_left+0x40>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	3301      	adds	r3, #1
 80012cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80012d4:	797a      	ldrb	r2, [r7, #5]
 80012d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80012da:	717b      	strb	r3, [r7, #5]
    RGB_BUF_LEFT[4 * i + 3] = w;                // set white part
 80012dc:	88fb      	ldrh	r3, [r7, #6]
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	3303      	adds	r3, #3
 80012e2:	4905      	ldr	r1, [pc, #20]	; (80012f8 <ARGB_SetWhite_left+0x44>)
 80012e4:	797a      	ldrb	r2, [r7, #5]
 80012e6:	54ca      	strb	r2, [r1, r3]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	20000000 	.word	0x20000000
 80012f8:	200000e0 	.word	0x200000e0

080012fc <ARGB_SetWhite_right>:
// -------------------------------------------------------------------
void ARGB_SetWhite_right(u16_t i, u8_t w) {
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	460a      	mov	r2, r1
 8001306:	80fb      	strh	r3, [r7, #6]
 8001308:	4613      	mov	r3, r2
 800130a:	717b      	strb	r3, [r7, #5]
#ifdef RGB
    return;
#endif
    w /= 256 / ((u16_t) ARGB_BR + 1); 			// set brightness
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <ARGB_SetWhite_right+0x40>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	3301      	adds	r3, #1
 8001314:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001318:	fb92 f3f3 	sdiv	r3, r2, r3
 800131c:	797a      	ldrb	r2, [r7, #5]
 800131e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001322:	717b      	strb	r3, [r7, #5]
    RGB_BUF_RIGHT[4 * i + 3] = w;               // set white part
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	3303      	adds	r3, #3
 800132a:	4905      	ldr	r1, [pc, #20]	; (8001340 <ARGB_SetWhite_right+0x44>)
 800132c:	797a      	ldrb	r2, [r7, #5]
 800132e:	54ca      	strb	r2, [r1, r3]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	20000000 	.word	0x20000000
 8001340:	20000234 	.word	0x20000234

08001344 <ARGB_FillRGB_left>:
 * @brief Fill ALL LEDs with RGB color
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_FillRGB_left(u8_t r, u8_t g, u8_t b) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
 800134e:	460b      	mov	r3, r1
 8001350:	71bb      	strb	r3, [r7, #6]
 8001352:	4613      	mov	r3, r2
 8001354:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8001356:	2300      	movs	r3, #0
 8001358:	81fb      	strh	r3, [r7, #14]
 800135a:	e00b      	b.n	8001374 <ARGB_FillRGB_left+0x30>
        ARGB_SetRGB_left(i, r, g, b);
 800135c:	89fb      	ldrh	r3, [r7, #14]
 800135e:	b298      	uxth	r0, r3
 8001360:	797b      	ldrb	r3, [r7, #5]
 8001362:	79ba      	ldrb	r2, [r7, #6]
 8001364:	79f9      	ldrb	r1, [r7, #7]
 8001366:	f7ff feb1 	bl	80010cc <ARGB_SetRGB_left>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 800136a:	89fb      	ldrh	r3, [r7, #14]
 800136c:	b29b      	uxth	r3, r3
 800136e:	3301      	adds	r3, #1
 8001370:	b29b      	uxth	r3, r3
 8001372:	81fb      	strh	r3, [r7, #14]
 8001374:	89fb      	ldrh	r3, [r7, #14]
 8001376:	b29b      	uxth	r3, r3
 8001378:	2b54      	cmp	r3, #84	; 0x54
 800137a:	d9ef      	bls.n	800135c <ARGB_FillRGB_left+0x18>
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <ARGB_FillRGB_right>:
// --------------------------------------------------------------------------------
void ARGB_FillRGB_right(u8_t r, u8_t g, u8_t b) {
 8001386:	b580      	push	{r7, lr}
 8001388:	b084      	sub	sp, #16
 800138a:	af00      	add	r7, sp, #0
 800138c:	4603      	mov	r3, r0
 800138e:	71fb      	strb	r3, [r7, #7]
 8001390:	460b      	mov	r3, r1
 8001392:	71bb      	strb	r3, [r7, #6]
 8001394:	4613      	mov	r3, r2
 8001396:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8001398:	2300      	movs	r3, #0
 800139a:	81fb      	strh	r3, [r7, #14]
 800139c:	e00b      	b.n	80013b6 <ARGB_FillRGB_right+0x30>
        ARGB_SetRGB_right(i, r, g, b);
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	b298      	uxth	r0, r3
 80013a2:	797b      	ldrb	r3, [r7, #5]
 80013a4:	79ba      	ldrb	r2, [r7, #6]
 80013a6:	79f9      	ldrb	r1, [r7, #7]
 80013a8:	f7ff ff0a 	bl	80011c0 <ARGB_SetRGB_right>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 80013ac:	89fb      	ldrh	r3, [r7, #14]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	3301      	adds	r3, #1
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	81fb      	strh	r3, [r7, #14]
 80013b6:	89fb      	ldrh	r3, [r7, #14]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	2b54      	cmp	r3, #84	; 0x54
 80013bc:	d9ef      	bls.n	800139e <ARGB_FillRGB_right+0x18>
}
 80013be:	bf00      	nop
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <ARGB_FillWhite_left>:

/**
 * @brief Set ALL White components in strip
 * @param[in] w White component [0..255]
 */
void ARGB_FillWhite_left(u8_t w) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	81fb      	strh	r3, [r7, #14]
 80013d6:	e00b      	b.n	80013f0 <ARGB_FillWhite_left+0x28>
        ARGB_SetWhite_left(i, w);
 80013d8:	89fb      	ldrh	r3, [r7, #14]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	79fa      	ldrb	r2, [r7, #7]
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff67 	bl	80012b4 <ARGB_SetWhite_left>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 80013e6:	89fb      	ldrh	r3, [r7, #14]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	3301      	adds	r3, #1
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	81fb      	strh	r3, [r7, #14]
 80013f0:	89fb      	ldrh	r3, [r7, #14]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	2b54      	cmp	r3, #84	; 0x54
 80013f6:	d9ef      	bls.n	80013d8 <ARGB_FillWhite_left+0x10>
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <ARGB_FillWhite_right>:
// --------------------------------------------------------------------------
void ARGB_FillWhite_right(u8_t w) {
 8001402:	b580      	push	{r7, lr}
 8001404:	b084      	sub	sp, #16
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	71fb      	strb	r3, [r7, #7]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 800140c:	2300      	movs	r3, #0
 800140e:	81fb      	strh	r3, [r7, #14]
 8001410:	e00b      	b.n	800142a <ARGB_FillWhite_right+0x28>
        ARGB_SetWhite_right(i, w);
 8001412:	89fb      	ldrh	r3, [r7, #14]
 8001414:	b29b      	uxth	r3, r3
 8001416:	79fa      	ldrb	r2, [r7, #7]
 8001418:	4611      	mov	r1, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff6e 	bl	80012fc <ARGB_SetWhite_right>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8001420:	89fb      	ldrh	r3, [r7, #14]
 8001422:	b29b      	uxth	r3, r3
 8001424:	3301      	adds	r3, #1
 8001426:	b29b      	uxth	r3, r3
 8001428:	81fb      	strh	r3, [r7, #14]
 800142a:	89fb      	ldrh	r3, [r7, #14]
 800142c:	b29b      	uxth	r3, r3
 800142e:	2b54      	cmp	r3, #84	; 0x54
 8001430:	d9ef      	bls.n	8001412 <ARGB_FillWhite_right+0x10>
}
 8001432:	bf00      	nop
 8001434:	bf00      	nop
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <ARGB_Show_left>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show_left(void) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
	ARGB_LOC_ST_LEFT = ARGB_BUSY;
 8001442:	4b9f      	ldr	r3, [pc, #636]	; (80016c0 <ARGB_Show_left+0x284>)
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER_LEFT != 0 || DMA_HANDLE_LEFT.State != HAL_DMA_STATE_READY) {   //////////////////////////////////////   BUF_COUNTER  ?????
 8001448:	4b9e      	ldr	r3, [pc, #632]	; (80016c4 <ARGB_Show_left+0x288>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	b29b      	uxth	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d105      	bne.n	800145e <ARGB_Show_left+0x22>
 8001452:	4b9d      	ldr	r3, [pc, #628]	; (80016c8 <ARGB_Show_left+0x28c>)
 8001454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b01      	cmp	r3, #1
 800145c:	d001      	beq.n	8001462 <ARGB_Show_left+0x26>
        return ARGB_BUSY;
 800145e:	2300      	movs	r3, #0
 8001460:	e1a1      	b.n	80017a6 <ARGB_Show_left+0x36a>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 8001462:	2300      	movs	r3, #0
 8001464:	71fb      	strb	r3, [r7, #7]
 8001466:	e0dc      	b.n	8001622 <ARGB_Show_left+0x1e6>
            // set first transfer from first values
        	PWM_BUF_LEFT[i] = (((RGB_BUF_LEFT[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001468:	4b98      	ldr	r3, [pc, #608]	; (80016cc <ARGB_Show_left+0x290>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	461a      	mov	r2, r3
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147c:	2b00      	cmp	r3, #0
 800147e:	dd04      	ble.n	800148a <ARGB_Show_left+0x4e>
 8001480:	4b93      	ldr	r3, [pc, #588]	; (80016d0 <ARGB_Show_left+0x294>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	461a      	mov	r2, r3
 8001488:	e003      	b.n	8001492 <ARGB_Show_left+0x56>
 800148a:	4b92      	ldr	r3, [pc, #584]	; (80016d4 <ARGB_Show_left+0x298>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	461a      	mov	r2, r3
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	4619      	mov	r1, r3
 8001498:	4b8f      	ldr	r3, [pc, #572]	; (80016d8 <ARGB_Show_left+0x29c>)
 800149a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        	PWM_BUF_LEFT[i + 8] = (((RGB_BUF_LEFT[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800149e:	4b8b      	ldr	r3, [pc, #556]	; (80016cc <ARGB_Show_left+0x290>)
 80014a0:	785b      	ldrb	r3, [r3, #1]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	461a      	mov	r2, r3
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	dd04      	ble.n	80014c0 <ARGB_Show_left+0x84>
 80014b6:	4b86      	ldr	r3, [pc, #536]	; (80016d0 <ARGB_Show_left+0x294>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	4619      	mov	r1, r3
 80014be:	e003      	b.n	80014c8 <ARGB_Show_left+0x8c>
 80014c0:	4b84      	ldr	r3, [pc, #528]	; (80016d4 <ARGB_Show_left+0x298>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	4619      	mov	r1, r3
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	3308      	adds	r3, #8
 80014ce:	4a82      	ldr	r2, [pc, #520]	; (80016d8 <ARGB_Show_left+0x29c>)
 80014d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 16] = (((RGB_BUF_LEFT[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80014d4:	4b7d      	ldr	r3, [pc, #500]	; (80016cc <ARGB_Show_left+0x290>)
 80014d6:	789b      	ldrb	r3, [r3, #2]
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	dd04      	ble.n	80014f6 <ARGB_Show_left+0xba>
 80014ec:	4b78      	ldr	r3, [pc, #480]	; (80016d0 <ARGB_Show_left+0x294>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	4619      	mov	r1, r3
 80014f4:	e003      	b.n	80014fe <ARGB_Show_left+0xc2>
 80014f6:	4b77      	ldr	r3, [pc, #476]	; (80016d4 <ARGB_Show_left+0x298>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	4619      	mov	r1, r3
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	3310      	adds	r3, #16
 8001504:	4a74      	ldr	r2, [pc, #464]	; (80016d8 <ARGB_Show_left+0x29c>)
 8001506:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 24] = (((RGB_BUF_LEFT[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800150a:	4b70      	ldr	r3, [pc, #448]	; (80016cc <ARGB_Show_left+0x290>)
 800150c:	78db      	ldrb	r3, [r3, #3]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151e:	2b00      	cmp	r3, #0
 8001520:	dd04      	ble.n	800152c <ARGB_Show_left+0xf0>
 8001522:	4b6b      	ldr	r3, [pc, #428]	; (80016d0 <ARGB_Show_left+0x294>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	4619      	mov	r1, r3
 800152a:	e003      	b.n	8001534 <ARGB_Show_left+0xf8>
 800152c:	4b69      	ldr	r3, [pc, #420]	; (80016d4 <ARGB_Show_left+0x298>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	4619      	mov	r1, r3
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	3318      	adds	r3, #24
 800153a:	4a67      	ldr	r2, [pc, #412]	; (80016d8 <ARGB_Show_left+0x29c>)
 800153c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 32] = (((RGB_BUF_LEFT[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001540:	4b62      	ldr	r3, [pc, #392]	; (80016cc <ARGB_Show_left+0x290>)
 8001542:	791b      	ldrb	r3, [r3, #4]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	461a      	mov	r2, r3
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001554:	2b00      	cmp	r3, #0
 8001556:	dd04      	ble.n	8001562 <ARGB_Show_left+0x126>
 8001558:	4b5d      	ldr	r3, [pc, #372]	; (80016d0 <ARGB_Show_left+0x294>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	4619      	mov	r1, r3
 8001560:	e003      	b.n	800156a <ARGB_Show_left+0x12e>
 8001562:	4b5c      	ldr	r3, [pc, #368]	; (80016d4 <ARGB_Show_left+0x298>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	4619      	mov	r1, r3
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	3320      	adds	r3, #32
 8001570:	4a59      	ldr	r2, [pc, #356]	; (80016d8 <ARGB_Show_left+0x29c>)
 8001572:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 40] = (((RGB_BUF_LEFT[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001576:	4b55      	ldr	r3, [pc, #340]	; (80016cc <ARGB_Show_left+0x290>)
 8001578:	795b      	ldrb	r3, [r3, #5]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	461a      	mov	r2, r3
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158a:	2b00      	cmp	r3, #0
 800158c:	dd04      	ble.n	8001598 <ARGB_Show_left+0x15c>
 800158e:	4b50      	ldr	r3, [pc, #320]	; (80016d0 <ARGB_Show_left+0x294>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	4619      	mov	r1, r3
 8001596:	e003      	b.n	80015a0 <ARGB_Show_left+0x164>
 8001598:	4b4e      	ldr	r3, [pc, #312]	; (80016d4 <ARGB_Show_left+0x298>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	4619      	mov	r1, r3
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	3328      	adds	r3, #40	; 0x28
 80015a6:	4a4c      	ldr	r2, [pc, #304]	; (80016d8 <ARGB_Show_left+0x29c>)
 80015a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#ifdef SK6812
        	PWM_BUF_LEFT[i + 48] = (((RGB_BUF_LEFT[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80015ac:	4b47      	ldr	r3, [pc, #284]	; (80016cc <ARGB_Show_left+0x290>)
 80015ae:	799b      	ldrb	r3, [r3, #6]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	461a      	mov	r2, r3
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	dd04      	ble.n	80015ce <ARGB_Show_left+0x192>
 80015c4:	4b42      	ldr	r3, [pc, #264]	; (80016d0 <ARGB_Show_left+0x294>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	4619      	mov	r1, r3
 80015cc:	e003      	b.n	80015d6 <ARGB_Show_left+0x19a>
 80015ce:	4b41      	ldr	r3, [pc, #260]	; (80016d4 <ARGB_Show_left+0x298>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	4619      	mov	r1, r3
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	3330      	adds	r3, #48	; 0x30
 80015dc:	4a3e      	ldr	r2, [pc, #248]	; (80016d8 <ARGB_Show_left+0x29c>)
 80015de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 56] = (((RGB_BUF_LEFT[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80015e2:	4b3a      	ldr	r3, [pc, #232]	; (80016cc <ARGB_Show_left+0x290>)
 80015e4:	79db      	ldrb	r3, [r3, #7]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	dd04      	ble.n	8001604 <ARGB_Show_left+0x1c8>
 80015fa:	4b35      	ldr	r3, [pc, #212]	; (80016d0 <ARGB_Show_left+0x294>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	4619      	mov	r1, r3
 8001602:	e003      	b.n	800160c <ARGB_Show_left+0x1d0>
 8001604:	4b33      	ldr	r3, [pc, #204]	; (80016d4 <ARGB_Show_left+0x298>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	4619      	mov	r1, r3
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	3338      	adds	r3, #56	; 0x38
 8001612:	4a31      	ldr	r2, [pc, #196]	; (80016d8 <ARGB_Show_left+0x29c>)
 8001614:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	3301      	adds	r3, #1
 800161e:	b2db      	uxtb	r3, r3
 8001620:	71fb      	strb	r3, [r7, #7]
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b07      	cmp	r3, #7
 8001628:	f67f af1e 	bls.w	8001468 <ARGB_Show_left+0x2c>
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001630:	e0b1      	b.n	8001796 <ARGB_Show_left+0x35a>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH_LEFT) == HAL_TIM_CHANNEL_STATE_BUSY) {
 8001632:	4b2a      	ldr	r3, [pc, #168]	; (80016dc <ARGB_Show_left+0x2a0>)
 8001634:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d102      	bne.n	8001644 <ARGB_Show_left+0x208>
                DMA_Send_Stat = HAL_BUSY;
 800163e:	2302      	movs	r3, #2
 8001640:	73fb      	strb	r3, [r7, #15]
                continue;
 8001642:	e0a8      	b.n	8001796 <ARGB_Show_left+0x35a>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH_LEFT) == HAL_TIM_CHANNEL_STATE_READY) {
 8001644:	4b25      	ldr	r3, [pc, #148]	; (80016dc <ARGB_Show_left+0x2a0>)
 8001646:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b01      	cmp	r3, #1
 800164e:	d11d      	bne.n	800168c <ARGB_Show_left+0x250>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH_LEFT, HAL_TIM_CHANNEL_STATE_BUSY);
 8001650:	4b22      	ldr	r3, [pc, #136]	; (80016dc <ARGB_Show_left+0x2a0>)
 8001652:	2202      	movs	r2, #2
 8001654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#elif TIM_CH_LEFT == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_L]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt_left;
 8001658:	4b20      	ldr	r3, [pc, #128]	; (80016dc <ARGB_Show_left+0x2a0>)
 800165a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165c:	4a20      	ldr	r2, [pc, #128]	; (80016e0 <ARGB_Show_left+0x2a4>)
 800165e:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_L]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt_left;
 8001660:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <ARGB_Show_left+0x2a0>)
 8001662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001664:	4a1f      	ldr	r2, [pc, #124]	; (80016e4 <ARGB_Show_left+0x2a8>)
 8001666:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_L]->XferErrorCallback = TIM_DMAError;
 8001668:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <ARGB_Show_left+0x2a0>)
 800166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166c:	4a1e      	ldr	r2, [pc, #120]	; (80016e8 <ARGB_Show_left+0x2ac>)
 800166e:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_L], (u32_t) PWM_BUF_LEFT,
 8001670:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <ARGB_Show_left+0x2a0>)
 8001672:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001674:	4918      	ldr	r1, [pc, #96]	; (80016d8 <ARGB_Show_left+0x29c>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR_L,
 8001676:	4b19      	ldr	r3, [pc, #100]	; (80016dc <ARGB_Show_left+0x2a0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	333c      	adds	r3, #60	; 0x3c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_L], (u32_t) PWM_BUF_LEFT,
 800167c:	461a      	mov	r2, r3
 800167e:	2340      	movs	r3, #64	; 0x40
 8001680:	f003 fa46 	bl	8004b10 <HAL_DMA_Start_IT>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d006      	beq.n	8001698 <ARGB_Show_left+0x25c>
 800168a:	e002      	b.n	8001692 <ARGB_Show_left+0x256>
                DMA_Send_Stat = HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	73fb      	strb	r3, [r7, #15]
                continue;
 8001690:	e081      	b.n	8001796 <ARGB_Show_left+0x35a>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	73fb      	strb	r3, [r7, #15]
                continue;
 8001696:	e07e      	b.n	8001796 <ARGB_Show_left+0x35a>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC_L);
 8001698:	4b10      	ldr	r3, [pc, #64]	; (80016dc <ARGB_Show_left+0x2a0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <ARGB_Show_left+0x2a0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016a6:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <ARGB_Show_left+0x2a0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0f      	ldr	r2, [pc, #60]	; (80016ec <ARGB_Show_left+0x2b0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d004      	beq.n	80016bc <ARGB_Show_left+0x280>
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <ARGB_Show_left+0x2a0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <ARGB_Show_left+0x2b4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d11b      	bne.n	80016f4 <ARGB_Show_left+0x2b8>
 80016bc:	2301      	movs	r3, #1
 80016be:	e01a      	b.n	80016f6 <ARGB_Show_left+0x2ba>
 80016c0:	2000058c 	.word	0x2000058c
 80016c4:	20000588 	.word	0x20000588
 80016c8:	200017e0 	.word	0x200017e0
 80016cc:	200000e0 	.word	0x200000e0
 80016d0:	200000dc 	.word	0x200000dc
 80016d4:	200000dd 	.word	0x200000dd
 80016d8:	20000388 	.word	0x20000388
 80016dc:	20001750 	.word	0x20001750
 80016e0:	08001b95 	.word	0x08001b95
 80016e4:	08002185 	.word	0x08002185
 80016e8:	0800869f 	.word	0x0800869f
 80016ec:	40010000 	.word	0x40010000
 80016f0:	40010400 	.word	0x40010400
 80016f4:	2300      	movs	r3, #0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d007      	beq.n	800170a <ARGB_Show_left+0x2ce>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 80016fa:	4b2d      	ldr	r3, [pc, #180]	; (80017b0 <ARGB_Show_left+0x374>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001700:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <ARGB_Show_left+0x374>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001708:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 800170a:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <ARGB_Show_left+0x374>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a29      	ldr	r2, [pc, #164]	; (80017b4 <ARGB_Show_left+0x378>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d022      	beq.n	800175a <ARGB_Show_left+0x31e>
 8001714:	4b26      	ldr	r3, [pc, #152]	; (80017b0 <ARGB_Show_left+0x374>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800171c:	d01d      	beq.n	800175a <ARGB_Show_left+0x31e>
 800171e:	4b24      	ldr	r3, [pc, #144]	; (80017b0 <ARGB_Show_left+0x374>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a25      	ldr	r2, [pc, #148]	; (80017b8 <ARGB_Show_left+0x37c>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d018      	beq.n	800175a <ARGB_Show_left+0x31e>
 8001728:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <ARGB_Show_left+0x374>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a23      	ldr	r2, [pc, #140]	; (80017bc <ARGB_Show_left+0x380>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d013      	beq.n	800175a <ARGB_Show_left+0x31e>
 8001732:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <ARGB_Show_left+0x374>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a22      	ldr	r2, [pc, #136]	; (80017c0 <ARGB_Show_left+0x384>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d00e      	beq.n	800175a <ARGB_Show_left+0x31e>
 800173c:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <ARGB_Show_left+0x374>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a20      	ldr	r2, [pc, #128]	; (80017c4 <ARGB_Show_left+0x388>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d009      	beq.n	800175a <ARGB_Show_left+0x31e>
 8001746:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <ARGB_Show_left+0x374>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a1f      	ldr	r2, [pc, #124]	; (80017c8 <ARGB_Show_left+0x38c>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d004      	beq.n	800175a <ARGB_Show_left+0x31e>
 8001750:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <ARGB_Show_left+0x374>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a1d      	ldr	r2, [pc, #116]	; (80017cc <ARGB_Show_left+0x390>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d111      	bne.n	800177e <ARGB_Show_left+0x342>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <ARGB_Show_left+0x374>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b06      	cmp	r3, #6
 800176a:	d011      	beq.n	8001790 <ARGB_Show_left+0x354>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 800176c:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <ARGB_Show_left+0x374>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <ARGB_Show_left+0x374>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0201 	orr.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 800177c:	e008      	b.n	8001790 <ARGB_Show_left+0x354>
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <ARGB_Show_left+0x374>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <ARGB_Show_left+0x374>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f042 0201 	orr.w	r2, r2, #1
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	e000      	b.n	8001792 <ARGB_Show_left+0x356>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001790:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	2b00      	cmp	r3, #0
 800179a:	f47f af4a 	bne.w	8001632 <ARGB_Show_left+0x1f6>
        }
        BUF_COUNTER_LEFT = 2;
 800179e:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <ARGB_Show_left+0x394>)
 80017a0:	2202      	movs	r2, #2
 80017a2:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 80017a4:	2302      	movs	r3, #2
    }
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20001750 	.word	0x20001750
 80017b4:	40010000 	.word	0x40010000
 80017b8:	40000400 	.word	0x40000400
 80017bc:	40000800 	.word	0x40000800
 80017c0:	40000c00 	.word	0x40000c00
 80017c4:	40010400 	.word	0x40010400
 80017c8:	40014000 	.word	0x40014000
 80017cc:	40001800 	.word	0x40001800
 80017d0:	20000588 	.word	0x20000588

080017d4 <ARGB_Show_right>:
// ----------------------------------------------------------------------
ARGB_STATE ARGB_Show_right(void) {             //////////////////////////////////////   BUF_COUNTER  ?????
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
	ARGB_LOC_ST_RIGHT = ARGB_BUSY;
 80017da:	4b9f      	ldr	r3, [pc, #636]	; (8001a58 <ARGB_Show_right+0x284>)
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER_RIGHT != 0 || DMA_HANDLE_RIGHT.State != HAL_DMA_STATE_READY) { // <<<<<<<<<<<<<<<<<<<<<<<<< Зависає тут
 80017e0:	4b9e      	ldr	r3, [pc, #632]	; (8001a5c <ARGB_Show_right+0x288>)
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d105      	bne.n	80017f6 <ARGB_Show_right+0x22>
 80017ea:	4b9d      	ldr	r3, [pc, #628]	; (8001a60 <ARGB_Show_right+0x28c>)
 80017ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d001      	beq.n	80017fa <ARGB_Show_right+0x26>
        return ARGB_BUSY;
 80017f6:	2300      	movs	r3, #0
 80017f8:	e1a1      	b.n	8001b3e <ARGB_Show_right+0x36a>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 80017fa:	2300      	movs	r3, #0
 80017fc:	71fb      	strb	r3, [r7, #7]
 80017fe:	e0dc      	b.n	80019ba <ARGB_Show_right+0x1e6>
            // set first transfer from first values
        	PWM_BUF_RIGHT[i] = (((RGB_BUF_RIGHT[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001800:	4b98      	ldr	r3, [pc, #608]	; (8001a64 <ARGB_Show_right+0x290>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	461a      	mov	r2, r3
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001814:	2b00      	cmp	r3, #0
 8001816:	dd04      	ble.n	8001822 <ARGB_Show_right+0x4e>
 8001818:	4b93      	ldr	r3, [pc, #588]	; (8001a68 <ARGB_Show_right+0x294>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	461a      	mov	r2, r3
 8001820:	e003      	b.n	800182a <ARGB_Show_right+0x56>
 8001822:	4b92      	ldr	r3, [pc, #584]	; (8001a6c <ARGB_Show_right+0x298>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	461a      	mov	r2, r3
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4619      	mov	r1, r3
 8001830:	4b8f      	ldr	r3, [pc, #572]	; (8001a70 <ARGB_Show_right+0x29c>)
 8001832:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        	PWM_BUF_RIGHT[i + 8] = (((RGB_BUF_RIGHT[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001836:	4b8b      	ldr	r3, [pc, #556]	; (8001a64 <ARGB_Show_right+0x290>)
 8001838:	785b      	ldrb	r3, [r3, #1]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	461a      	mov	r2, r3
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	b2db      	uxtb	r3, r3
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184a:	2b00      	cmp	r3, #0
 800184c:	dd04      	ble.n	8001858 <ARGB_Show_right+0x84>
 800184e:	4b86      	ldr	r3, [pc, #536]	; (8001a68 <ARGB_Show_right+0x294>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	4619      	mov	r1, r3
 8001856:	e003      	b.n	8001860 <ARGB_Show_right+0x8c>
 8001858:	4b84      	ldr	r3, [pc, #528]	; (8001a6c <ARGB_Show_right+0x298>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	4619      	mov	r1, r3
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	3308      	adds	r3, #8
 8001866:	4a82      	ldr	r2, [pc, #520]	; (8001a70 <ARGB_Show_right+0x29c>)
 8001868:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 16] = (((RGB_BUF_RIGHT[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800186c:	4b7d      	ldr	r3, [pc, #500]	; (8001a64 <ARGB_Show_right+0x290>)
 800186e:	789b      	ldrb	r3, [r3, #2]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001880:	2b00      	cmp	r3, #0
 8001882:	dd04      	ble.n	800188e <ARGB_Show_right+0xba>
 8001884:	4b78      	ldr	r3, [pc, #480]	; (8001a68 <ARGB_Show_right+0x294>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	4619      	mov	r1, r3
 800188c:	e003      	b.n	8001896 <ARGB_Show_right+0xc2>
 800188e:	4b77      	ldr	r3, [pc, #476]	; (8001a6c <ARGB_Show_right+0x298>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	4619      	mov	r1, r3
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	3310      	adds	r3, #16
 800189c:	4a74      	ldr	r2, [pc, #464]	; (8001a70 <ARGB_Show_right+0x29c>)
 800189e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 24] = (((RGB_BUF_RIGHT[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80018a2:	4b70      	ldr	r3, [pc, #448]	; (8001a64 <ARGB_Show_right+0x290>)
 80018a4:	78db      	ldrb	r3, [r3, #3]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	461a      	mov	r2, r3
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	dd04      	ble.n	80018c4 <ARGB_Show_right+0xf0>
 80018ba:	4b6b      	ldr	r3, [pc, #428]	; (8001a68 <ARGB_Show_right+0x294>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	4619      	mov	r1, r3
 80018c2:	e003      	b.n	80018cc <ARGB_Show_right+0xf8>
 80018c4:	4b69      	ldr	r3, [pc, #420]	; (8001a6c <ARGB_Show_right+0x298>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	4619      	mov	r1, r3
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	3318      	adds	r3, #24
 80018d2:	4a67      	ldr	r2, [pc, #412]	; (8001a70 <ARGB_Show_right+0x29c>)
 80018d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 32] = (((RGB_BUF_RIGHT[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80018d8:	4b62      	ldr	r3, [pc, #392]	; (8001a64 <ARGB_Show_right+0x290>)
 80018da:	791b      	ldrb	r3, [r3, #4]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	461a      	mov	r2, r3
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	dd04      	ble.n	80018fa <ARGB_Show_right+0x126>
 80018f0:	4b5d      	ldr	r3, [pc, #372]	; (8001a68 <ARGB_Show_right+0x294>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	4619      	mov	r1, r3
 80018f8:	e003      	b.n	8001902 <ARGB_Show_right+0x12e>
 80018fa:	4b5c      	ldr	r3, [pc, #368]	; (8001a6c <ARGB_Show_right+0x298>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	4619      	mov	r1, r3
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	3320      	adds	r3, #32
 8001908:	4a59      	ldr	r2, [pc, #356]	; (8001a70 <ARGB_Show_right+0x29c>)
 800190a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 40] = (((RGB_BUF_RIGHT[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800190e:	4b55      	ldr	r3, [pc, #340]	; (8001a64 <ARGB_Show_right+0x290>)
 8001910:	795b      	ldrb	r3, [r3, #5]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	461a      	mov	r2, r3
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001922:	2b00      	cmp	r3, #0
 8001924:	dd04      	ble.n	8001930 <ARGB_Show_right+0x15c>
 8001926:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <ARGB_Show_right+0x294>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	4619      	mov	r1, r3
 800192e:	e003      	b.n	8001938 <ARGB_Show_right+0x164>
 8001930:	4b4e      	ldr	r3, [pc, #312]	; (8001a6c <ARGB_Show_right+0x298>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	4619      	mov	r1, r3
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	3328      	adds	r3, #40	; 0x28
 800193e:	4a4c      	ldr	r2, [pc, #304]	; (8001a70 <ARGB_Show_right+0x29c>)
 8001940:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#ifdef SK6812
        	PWM_BUF_RIGHT[i + 48] = (((RGB_BUF_RIGHT[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001944:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <ARGB_Show_right+0x290>)
 8001946:	799b      	ldrb	r3, [r3, #6]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	461a      	mov	r2, r3
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001958:	2b00      	cmp	r3, #0
 800195a:	dd04      	ble.n	8001966 <ARGB_Show_right+0x192>
 800195c:	4b42      	ldr	r3, [pc, #264]	; (8001a68 <ARGB_Show_right+0x294>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	4619      	mov	r1, r3
 8001964:	e003      	b.n	800196e <ARGB_Show_right+0x19a>
 8001966:	4b41      	ldr	r3, [pc, #260]	; (8001a6c <ARGB_Show_right+0x298>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	4619      	mov	r1, r3
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	3330      	adds	r3, #48	; 0x30
 8001974:	4a3e      	ldr	r2, [pc, #248]	; (8001a70 <ARGB_Show_right+0x29c>)
 8001976:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 56] = (((RGB_BUF_RIGHT[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800197a:	4b3a      	ldr	r3, [pc, #232]	; (8001a64 <ARGB_Show_right+0x290>)
 800197c:	79db      	ldrb	r3, [r3, #7]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	461a      	mov	r2, r3
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198e:	2b00      	cmp	r3, #0
 8001990:	dd04      	ble.n	800199c <ARGB_Show_right+0x1c8>
 8001992:	4b35      	ldr	r3, [pc, #212]	; (8001a68 <ARGB_Show_right+0x294>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	4619      	mov	r1, r3
 800199a:	e003      	b.n	80019a4 <ARGB_Show_right+0x1d0>
 800199c:	4b33      	ldr	r3, [pc, #204]	; (8001a6c <ARGB_Show_right+0x298>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	4619      	mov	r1, r3
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	3338      	adds	r3, #56	; 0x38
 80019aa:	4a31      	ldr	r2, [pc, #196]	; (8001a70 <ARGB_Show_right+0x29c>)
 80019ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	3301      	adds	r3, #1
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	71fb      	strb	r3, [r7, #7]
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b07      	cmp	r3, #7
 80019c0:	f67f af1e 	bls.w	8001800 <ARGB_Show_right+0x2c>
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 80019c8:	e0b1      	b.n	8001b2e <ARGB_Show_right+0x35a>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH_RIGHT) == HAL_TIM_CHANNEL_STATE_BUSY) {
 80019ca:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <ARGB_Show_right+0x2a0>)
 80019cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d102      	bne.n	80019dc <ARGB_Show_right+0x208>
                DMA_Send_Stat = HAL_BUSY;
 80019d6:	2302      	movs	r3, #2
 80019d8:	73fb      	strb	r3, [r7, #15]
                continue;
 80019da:	e0a8      	b.n	8001b2e <ARGB_Show_right+0x35a>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH_RIGHT) == HAL_TIM_CHANNEL_STATE_READY) {
 80019dc:	4b25      	ldr	r3, [pc, #148]	; (8001a74 <ARGB_Show_right+0x2a0>)
 80019de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d11d      	bne.n	8001a24 <ARGB_Show_right+0x250>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH_RIGHT, HAL_TIM_CHANNEL_STATE_BUSY);
 80019e8:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <ARGB_Show_right+0x2a0>)
 80019ea:	2202      	movs	r2, #2
 80019ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#elif TIM_CH_RIGHT == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID_R TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC_R TIM_DMA_CC4
#define ARGB_TIM_CCR_R CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt_right;
 80019f0:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <ARGB_Show_right+0x2a0>)
 80019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f4:	4a20      	ldr	r2, [pc, #128]	; (8001a78 <ARGB_Show_right+0x2a4>)
 80019f6:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt_right;
 80019f8:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <ARGB_Show_right+0x2a0>)
 80019fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fc:	4a1f      	ldr	r2, [pc, #124]	; (8001a7c <ARGB_Show_right+0x2a8>)
 80019fe:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R]->XferErrorCallback = TIM_DMAError;
 8001a00:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <ARGB_Show_right+0x2a0>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	4a1e      	ldr	r2, [pc, #120]	; (8001a80 <ARGB_Show_right+0x2ac>)
 8001a06:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R], (u32_t) PWM_BUF_RIGHT,
 8001a08:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <ARGB_Show_right+0x2a0>)
 8001a0a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001a0c:	4918      	ldr	r1, [pc, #96]	; (8001a70 <ARGB_Show_right+0x29c>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR_R,
 8001a0e:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <ARGB_Show_right+0x2a0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	3340      	adds	r3, #64	; 0x40
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R], (u32_t) PWM_BUF_RIGHT,
 8001a14:	461a      	mov	r2, r3
 8001a16:	2340      	movs	r3, #64	; 0x40
 8001a18:	f003 f87a 	bl	8004b10 <HAL_DMA_Start_IT>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d006      	beq.n	8001a30 <ARGB_Show_right+0x25c>
 8001a22:	e002      	b.n	8001a2a <ARGB_Show_right+0x256>
                DMA_Send_Stat = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
                continue;
 8001a28:	e081      	b.n	8001b2e <ARGB_Show_right+0x35a>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	73fb      	strb	r3, [r7, #15]
                continue;
 8001a2e:	e07e      	b.n	8001b2e <ARGB_Show_right+0x35a>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC_R);
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <ARGB_Show_right+0x2a0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <ARGB_Show_right+0x2a0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a3e:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <ARGB_Show_right+0x2a0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0f      	ldr	r2, [pc, #60]	; (8001a84 <ARGB_Show_right+0x2b0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d004      	beq.n	8001a54 <ARGB_Show_right+0x280>
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <ARGB_Show_right+0x2a0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a0e      	ldr	r2, [pc, #56]	; (8001a88 <ARGB_Show_right+0x2b4>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d11b      	bne.n	8001a8c <ARGB_Show_right+0x2b8>
 8001a54:	2301      	movs	r3, #1
 8001a56:	e01a      	b.n	8001a8e <ARGB_Show_right+0x2ba>
 8001a58:	2000058d 	.word	0x2000058d
 8001a5c:	2000058a 	.word	0x2000058a
 8001a60:	20001840 	.word	0x20001840
 8001a64:	20000234 	.word	0x20000234
 8001a68:	200000dc 	.word	0x200000dc
 8001a6c:	200000dd 	.word	0x200000dd
 8001a70:	20000488 	.word	0x20000488
 8001a74:	20001750 	.word	0x20001750
 8001a78:	08001e8d 	.word	0x08001e8d
 8001a7c:	08002335 	.word	0x08002335
 8001a80:	0800869f 	.word	0x0800869f
 8001a84:	40010000 	.word	0x40010000
 8001a88:	40010400 	.word	0x40010400
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d007      	beq.n	8001aa2 <ARGB_Show_right+0x2ce>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8001a92:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <ARGB_Show_right+0x374>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a98:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <ARGB_Show_right+0x374>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aa0:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001aa2:	4b29      	ldr	r3, [pc, #164]	; (8001b48 <ARGB_Show_right+0x374>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a29      	ldr	r2, [pc, #164]	; (8001b4c <ARGB_Show_right+0x378>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d022      	beq.n	8001af2 <ARGB_Show_right+0x31e>
 8001aac:	4b26      	ldr	r3, [pc, #152]	; (8001b48 <ARGB_Show_right+0x374>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab4:	d01d      	beq.n	8001af2 <ARGB_Show_right+0x31e>
 8001ab6:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <ARGB_Show_right+0x374>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a25      	ldr	r2, [pc, #148]	; (8001b50 <ARGB_Show_right+0x37c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d018      	beq.n	8001af2 <ARGB_Show_right+0x31e>
 8001ac0:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <ARGB_Show_right+0x374>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a23      	ldr	r2, [pc, #140]	; (8001b54 <ARGB_Show_right+0x380>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d013      	beq.n	8001af2 <ARGB_Show_right+0x31e>
 8001aca:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <ARGB_Show_right+0x374>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a22      	ldr	r2, [pc, #136]	; (8001b58 <ARGB_Show_right+0x384>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d00e      	beq.n	8001af2 <ARGB_Show_right+0x31e>
 8001ad4:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <ARGB_Show_right+0x374>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a20      	ldr	r2, [pc, #128]	; (8001b5c <ARGB_Show_right+0x388>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d009      	beq.n	8001af2 <ARGB_Show_right+0x31e>
 8001ade:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <ARGB_Show_right+0x374>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a1f      	ldr	r2, [pc, #124]	; (8001b60 <ARGB_Show_right+0x38c>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d004      	beq.n	8001af2 <ARGB_Show_right+0x31e>
 8001ae8:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <ARGB_Show_right+0x374>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a1d      	ldr	r2, [pc, #116]	; (8001b64 <ARGB_Show_right+0x390>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d111      	bne.n	8001b16 <ARGB_Show_right+0x342>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <ARGB_Show_right+0x374>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2b06      	cmp	r3, #6
 8001b02:	d011      	beq.n	8001b28 <ARGB_Show_right+0x354>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001b04:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <ARGB_Show_right+0x374>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <ARGB_Show_right+0x374>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001b14:	e008      	b.n	8001b28 <ARGB_Show_right+0x354>
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001b16:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <ARGB_Show_right+0x374>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <ARGB_Show_right+0x374>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f042 0201 	orr.w	r2, r2, #1
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	e000      	b.n	8001b2a <ARGB_Show_right+0x356>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001b28:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f47f af4a 	bne.w	80019ca <ARGB_Show_right+0x1f6>
        }
        BUF_COUNTER_RIGHT = 2;
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <ARGB_Show_right+0x394>)
 8001b38:	2202      	movs	r2, #2
 8001b3a:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 8001b3c:	2302      	movs	r3, #2
    }
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20001750 	.word	0x20001750
 8001b4c:	40010000 	.word	0x40010000
 8001b50:	40000400 	.word	0x40000400
 8001b54:	40000800 	.word	0x40000800
 8001b58:	40000c00 	.word	0x40000c00
 8001b5c:	40010400 	.word	0x40010400
 8001b60:	40014000 	.word	0x40014000
 8001b64:	40001800 	.word	0x40001800
 8001b68:	2000058a 	.word	0x2000058a

08001b6c <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	460a      	mov	r2, r1
 8001b76:	71fb      	strb	r3, [r7, #7]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	79ba      	ldrb	r2, [r7, #6]
 8001b80:	fb02 f303 	mul.w	r3, r2, r3
 8001b84:	121b      	asrs	r3, r3, #8
 8001b86:	b2db      	uxtb	r3, r3
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <ARGB_TIM_DMADelayPulseCplt_left>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt_left(DMA_HandleTypeDef *hdma) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba0:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE_LEFT || htim != &TIM_HANDLE) return;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a8c      	ldr	r2, [pc, #560]	; (8001dd8 <ARGB_TIM_DMADelayPulseCplt_left+0x244>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	f040 8168 	bne.w	8001e7c <ARGB_TIM_DMADelayPulseCplt_left+0x2e8>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4a8b      	ldr	r2, [pc, #556]	; (8001ddc <ARGB_TIM_DMADelayPulseCplt_left+0x248>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	f040 8163 	bne.w	8001e7c <ARGB_TIM_DMADelayPulseCplt_left+0x2e8>
    if (BUF_COUNTER_LEFT == 0) return; // if no data to transmit - return
 8001bb6:	4b8a      	ldr	r3, [pc, #552]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 815f 	beq.w	8001e80 <ARGB_TIM_DMADelayPulseCplt_left+0x2ec>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d10b      	bne.n	8001be4 <ARGB_TIM_DMADelayPulseCplt_left+0x50>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d136      	bne.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001be2:	e031      	b.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d10b      	bne.n	8001c06 <ARGB_TIM_DMADelayPulseCplt_left+0x72>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d125      	bne.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c04:	e020      	b.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d10b      	bne.n	8001c28 <ARGB_TIM_DMADelayPulseCplt_left+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2204      	movs	r2, #4
 8001c14:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d114      	bne.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c26:	e00f      	b.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d10a      	bne.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2208      	movs	r2, #8
 8001c36:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d103      	bne.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER_LEFT < NUM_PIXELS) {
 8001c48:	4b65      	ldr	r3, [pc, #404]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	2b54      	cmp	r3, #84	; 0x54
 8001c50:	f200 8094 	bhi.w	8001d7c <ARGB_TIM_DMADelayPulseCplt_left+0x1e8>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001c54:	2300      	movs	r3, #0
 8001c56:	72fb      	strb	r3, [r7, #11]
 8001c58:	e083      	b.n	8001d62 <ARGB_TIM_DMADelayPulseCplt_left+0x1ce>
#ifdef SK6812
        	PWM_BUF_LEFT[i + 32] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001c5a:	4b61      	ldr	r3, [pc, #388]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4a60      	ldr	r2, [pc, #384]	; (8001de4 <ARGB_TIM_DMADelayPulseCplt_left+0x250>)
 8001c64:	5cd3      	ldrb	r3, [r2, r3]
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	7afb      	ldrb	r3, [r7, #11]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	dd04      	ble.n	8001c84 <ARGB_TIM_DMADelayPulseCplt_left+0xf0>
 8001c7a:	4b5b      	ldr	r3, [pc, #364]	; (8001de8 <ARGB_TIM_DMADelayPulseCplt_left+0x254>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	4619      	mov	r1, r3
 8001c82:	e003      	b.n	8001c8c <ARGB_TIM_DMADelayPulseCplt_left+0xf8>
 8001c84:	4b59      	ldr	r3, [pc, #356]	; (8001dec <ARGB_TIM_DMADelayPulseCplt_left+0x258>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	7afb      	ldrb	r3, [r7, #11]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	3320      	adds	r3, #32
 8001c92:	4a57      	ldr	r2, [pc, #348]	; (8001df0 <ARGB_TIM_DMADelayPulseCplt_left+0x25c>)
 8001c94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 40] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001c98:	4b51      	ldr	r3, [pc, #324]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	4a50      	ldr	r2, [pc, #320]	; (8001de4 <ARGB_TIM_DMADelayPulseCplt_left+0x250>)
 8001ca4:	5cd3      	ldrb	r3, [r2, r3]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	7afb      	ldrb	r3, [r7, #11]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	dd04      	ble.n	8001cc4 <ARGB_TIM_DMADelayPulseCplt_left+0x130>
 8001cba:	4b4b      	ldr	r3, [pc, #300]	; (8001de8 <ARGB_TIM_DMADelayPulseCplt_left+0x254>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	e003      	b.n	8001ccc <ARGB_TIM_DMADelayPulseCplt_left+0x138>
 8001cc4:	4b49      	ldr	r3, [pc, #292]	; (8001dec <ARGB_TIM_DMADelayPulseCplt_left+0x258>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	4619      	mov	r1, r3
 8001ccc:	7afb      	ldrb	r3, [r7, #11]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	3328      	adds	r3, #40	; 0x28
 8001cd2:	4a47      	ldr	r2, [pc, #284]	; (8001df0 <ARGB_TIM_DMADelayPulseCplt_left+0x25c>)
 8001cd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 48] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001cd8:	4b41      	ldr	r3, [pc, #260]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	4a40      	ldr	r2, [pc, #256]	; (8001de4 <ARGB_TIM_DMADelayPulseCplt_left+0x250>)
 8001ce4:	5cd3      	ldrb	r3, [r2, r3]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	7afb      	ldrb	r3, [r7, #11]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	dd04      	ble.n	8001d04 <ARGB_TIM_DMADelayPulseCplt_left+0x170>
 8001cfa:	4b3b      	ldr	r3, [pc, #236]	; (8001de8 <ARGB_TIM_DMADelayPulseCplt_left+0x254>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	4619      	mov	r1, r3
 8001d02:	e003      	b.n	8001d0c <ARGB_TIM_DMADelayPulseCplt_left+0x178>
 8001d04:	4b39      	ldr	r3, [pc, #228]	; (8001dec <ARGB_TIM_DMADelayPulseCplt_left+0x258>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	7afb      	ldrb	r3, [r7, #11]
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	3330      	adds	r3, #48	; 0x30
 8001d12:	4a37      	ldr	r2, [pc, #220]	; (8001df0 <ARGB_TIM_DMADelayPulseCplt_left+0x25c>)
 8001d14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 56] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001d18:	4b31      	ldr	r3, [pc, #196]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	3303      	adds	r3, #3
 8001d22:	4a30      	ldr	r2, [pc, #192]	; (8001de4 <ARGB_TIM_DMADelayPulseCplt_left+0x250>)
 8001d24:	5cd3      	ldrb	r3, [r2, r3]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	461a      	mov	r2, r3
 8001d2a:	7afb      	ldrb	r3, [r7, #11]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	dd04      	ble.n	8001d44 <ARGB_TIM_DMADelayPulseCplt_left+0x1b0>
 8001d3a:	4b2b      	ldr	r3, [pc, #172]	; (8001de8 <ARGB_TIM_DMADelayPulseCplt_left+0x254>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	4619      	mov	r1, r3
 8001d42:	e003      	b.n	8001d4c <ARGB_TIM_DMADelayPulseCplt_left+0x1b8>
 8001d44:	4b29      	ldr	r3, [pc, #164]	; (8001dec <ARGB_TIM_DMADelayPulseCplt_left+0x258>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	7afb      	ldrb	r3, [r7, #11]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	3338      	adds	r3, #56	; 0x38
 8001d52:	4a27      	ldr	r2, [pc, #156]	; (8001df0 <ARGB_TIM_DMADelayPulseCplt_left+0x25c>)
 8001d54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001d58:	7afb      	ldrb	r3, [r7, #11]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	72fb      	strb	r3, [r7, #11]
 8001d62:	7afb      	ldrb	r3, [r7, #11]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b07      	cmp	r3, #7
 8001d68:	f67f af77 	bls.w	8001c5a <ARGB_TIM_DMADelayPulseCplt_left+0xc6>
        	PWM_BUF_LEFT[i + 24] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_LEFT[i + 32] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_LEFT[i + 40] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        BUF_COUNTER_LEFT++;
 8001d6c:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	3301      	adds	r3, #1
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001d78:	801a      	strh	r2, [r3, #0]
 8001d7a:	e07b      	b.n	8001e74 <ARGB_TIM_DMADelayPulseCplt_left+0x2e0>
    } else if (BUF_COUNTER_LEFT < NUM_PIXELS + 2) { // if RET transfer
 8001d7c:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	2b56      	cmp	r3, #86	; 0x56
 8001d84:	d80c      	bhi.n	8001da0 <ARGB_TIM_DMADelayPulseCplt_left+0x20c>
        memset((dma_siz *) &PWM_BUF_LEFT[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 8001d86:	2280      	movs	r2, #128	; 0x80
 8001d88:	2100      	movs	r1, #0
 8001d8a:	481a      	ldr	r0, [pc, #104]	; (8001df4 <ARGB_TIM_DMADelayPulseCplt_left+0x260>)
 8001d8c:	f00f fad4 	bl	8011338 <memset>
        BUF_COUNTER_LEFT++;
 8001d90:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	3301      	adds	r3, #1
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001d9c:	801a      	strh	r2, [r3, #0]
 8001d9e:	e069      	b.n	8001e74 <ARGB_TIM_DMADelayPulseCplt_left+0x2e0>
    } else { // if END of transfer
    	BUF_COUNTER_LEFT = 0;
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	801a      	strh	r2, [r3, #0]
#if TIM_CH_LEFT == TIM_CHANNEL_2
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
#endif
#if TIM_CH_LEFT == TIM_CHANNEL_3
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001db4:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f002 ff70 	bl	8004ca0 <HAL_DMA_Abort_IT>
#endif
#if TIM_CH_LEFT == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0c      	ldr	r2, [pc, #48]	; (8001df8 <ARGB_TIM_DMADelayPulseCplt_left+0x264>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d004      	beq.n	8001dd4 <ARGB_TIM_DMADelayPulseCplt_left+0x240>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <ARGB_TIM_DMADelayPulseCplt_left+0x268>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d115      	bne.n	8001e00 <ARGB_TIM_DMADelayPulseCplt_left+0x26c>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e014      	b.n	8001e02 <ARGB_TIM_DMADelayPulseCplt_left+0x26e>
 8001dd8:	200017e0 	.word	0x200017e0
 8001ddc:	20001750 	.word	0x20001750
 8001de0:	20000588 	.word	0x20000588
 8001de4:	200000e0 	.word	0x200000e0
 8001de8:	200000dc 	.word	0x200000dc
 8001dec:	200000dd 	.word	0x200000dd
 8001df0:	20000388 	.word	0x20000388
 8001df4:	20000408 	.word	0x20000408
 8001df8:	40010000 	.word	0x40010000
 8001dfc:	40010400 	.word	0x40010400
 8001e00:	2300      	movs	r3, #0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d017      	beq.n	8001e36 <ARGB_TIM_DMADelayPulseCplt_left+0x2a2>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6a1a      	ldr	r2, [r3, #32]
 8001e0c:	f241 1311 	movw	r3, #4369	; 0x1111
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10f      	bne.n	8001e36 <ARGB_TIM_DMADelayPulseCplt_left+0x2a2>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6a1a      	ldr	r2, [r3, #32]
 8001e1c:	f240 4344 	movw	r3, #1092	; 0x444
 8001e20:	4013      	ands	r3, r2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d107      	bne.n	8001e36 <ARGB_TIM_DMADelayPulseCplt_left+0x2a2>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e34:	645a      	str	r2, [r3, #68]	; 0x44
        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6a1a      	ldr	r2, [r3, #32]
 8001e3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10f      	bne.n	8001e66 <ARGB_TIM_DMADelayPulseCplt_left+0x2d2>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6a1a      	ldr	r2, [r3, #32]
 8001e4c:	f240 4344 	movw	r3, #1092	; 0x444
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d107      	bne.n	8001e66 <ARGB_TIM_DMADelayPulseCplt_left+0x2d2>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0201 	bic.w	r2, r2, #1
 8001e64:	601a      	str	r2, [r3, #0]
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH_LEFT, HAL_TIM_CHANNEL_STATE_READY);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        ARGB_LOC_ST_LEFT = ARGB_READY;
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <ARGB_TIM_DMADelayPulseCplt_left+0x2f4>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	771a      	strb	r2, [r3, #28]
 8001e7a:	e002      	b.n	8001e82 <ARGB_TIM_DMADelayPulseCplt_left+0x2ee>
    if (hdma != &DMA_HANDLE_LEFT || htim != &TIM_HANDLE) return;
 8001e7c:	bf00      	nop
 8001e7e:	e000      	b.n	8001e82 <ARGB_TIM_DMADelayPulseCplt_left+0x2ee>
    if (BUF_COUNTER_LEFT == 0) return; // if no data to transmit - return
 8001e80:	bf00      	nop
}
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	2000058c 	.word	0x2000058c

08001e8c <ARGB_TIM_DMADelayPulseCplt_right>:
// -----------------------------------------------------------------------
static void ARGB_TIM_DMADelayPulseCplt_right(DMA_HandleTypeDef *hdma) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e98:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE_RIGHT || htim != &TIM_HANDLE) return;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a8c      	ldr	r2, [pc, #560]	; (80020d0 <ARGB_TIM_DMADelayPulseCplt_right+0x244>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	f040 8168 	bne.w	8002174 <ARGB_TIM_DMADelayPulseCplt_right+0x2e8>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4a8b      	ldr	r2, [pc, #556]	; (80020d4 <ARGB_TIM_DMADelayPulseCplt_right+0x248>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	f040 8163 	bne.w	8002174 <ARGB_TIM_DMADelayPulseCplt_right+0x2e8>
    if (BUF_COUNTER_RIGHT == 0) return; // if no data to transmit - return    // ,<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 8001eae:	4b8a      	ldr	r3, [pc, #552]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 815f 	beq.w	8002178 <ARGB_TIM_DMADelayPulseCplt_right+0x2ec>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d10b      	bne.n	8001edc <ARGB_TIM_DMADelayPulseCplt_right+0x50>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d136      	bne.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001eda:	e031      	b.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d10b      	bne.n	8001efe <ARGB_TIM_DMADelayPulseCplt_right+0x72>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d125      	bne.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001efc:	e020      	b.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d10b      	bne.n	8001f20 <ARGB_TIM_DMADelayPulseCplt_right+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2204      	movs	r2, #4
 8001f0c:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d114      	bne.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f1e:	e00f      	b.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d10a      	bne.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2208      	movs	r2, #8
 8001f2e:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d103      	bne.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER_RIGHT < NUM_PIXELS) {
 8001f40:	4b65      	ldr	r3, [pc, #404]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	2b54      	cmp	r3, #84	; 0x54
 8001f48:	f200 8094 	bhi.w	8002074 <ARGB_TIM_DMADelayPulseCplt_right+0x1e8>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	72fb      	strb	r3, [r7, #11]
 8001f50:	e083      	b.n	800205a <ARGB_TIM_DMADelayPulseCplt_right+0x1ce>
#ifdef SK6812
        	PWM_BUF_RIGHT[i + 32] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001f52:	4b61      	ldr	r3, [pc, #388]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4a60      	ldr	r2, [pc, #384]	; (80020dc <ARGB_TIM_DMADelayPulseCplt_right+0x250>)
 8001f5c:	5cd3      	ldrb	r3, [r2, r3]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	7afb      	ldrb	r3, [r7, #11]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	dd04      	ble.n	8001f7c <ARGB_TIM_DMADelayPulseCplt_right+0xf0>
 8001f72:	4b5b      	ldr	r3, [pc, #364]	; (80020e0 <ARGB_TIM_DMADelayPulseCplt_right+0x254>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	4619      	mov	r1, r3
 8001f7a:	e003      	b.n	8001f84 <ARGB_TIM_DMADelayPulseCplt_right+0xf8>
 8001f7c:	4b59      	ldr	r3, [pc, #356]	; (80020e4 <ARGB_TIM_DMADelayPulseCplt_right+0x258>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	4619      	mov	r1, r3
 8001f84:	7afb      	ldrb	r3, [r7, #11]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	3320      	adds	r3, #32
 8001f8a:	4a57      	ldr	r2, [pc, #348]	; (80020e8 <ARGB_TIM_DMADelayPulseCplt_right+0x25c>)
 8001f8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 40] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001f90:	4b51      	ldr	r3, [pc, #324]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	3301      	adds	r3, #1
 8001f9a:	4a50      	ldr	r2, [pc, #320]	; (80020dc <ARGB_TIM_DMADelayPulseCplt_right+0x250>)
 8001f9c:	5cd3      	ldrb	r3, [r2, r3]
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	7afb      	ldrb	r3, [r7, #11]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	dd04      	ble.n	8001fbc <ARGB_TIM_DMADelayPulseCplt_right+0x130>
 8001fb2:	4b4b      	ldr	r3, [pc, #300]	; (80020e0 <ARGB_TIM_DMADelayPulseCplt_right+0x254>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	4619      	mov	r1, r3
 8001fba:	e003      	b.n	8001fc4 <ARGB_TIM_DMADelayPulseCplt_right+0x138>
 8001fbc:	4b49      	ldr	r3, [pc, #292]	; (80020e4 <ARGB_TIM_DMADelayPulseCplt_right+0x258>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	7afb      	ldrb	r3, [r7, #11]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	3328      	adds	r3, #40	; 0x28
 8001fca:	4a47      	ldr	r2, [pc, #284]	; (80020e8 <ARGB_TIM_DMADelayPulseCplt_right+0x25c>)
 8001fcc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 48] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001fd0:	4b41      	ldr	r3, [pc, #260]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	3302      	adds	r3, #2
 8001fda:	4a40      	ldr	r2, [pc, #256]	; (80020dc <ARGB_TIM_DMADelayPulseCplt_right+0x250>)
 8001fdc:	5cd3      	ldrb	r3, [r2, r3]
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	7afb      	ldrb	r3, [r7, #11]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	dd04      	ble.n	8001ffc <ARGB_TIM_DMADelayPulseCplt_right+0x170>
 8001ff2:	4b3b      	ldr	r3, [pc, #236]	; (80020e0 <ARGB_TIM_DMADelayPulseCplt_right+0x254>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	e003      	b.n	8002004 <ARGB_TIM_DMADelayPulseCplt_right+0x178>
 8001ffc:	4b39      	ldr	r3, [pc, #228]	; (80020e4 <ARGB_TIM_DMADelayPulseCplt_right+0x258>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	4619      	mov	r1, r3
 8002004:	7afb      	ldrb	r3, [r7, #11]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	3330      	adds	r3, #48	; 0x30
 800200a:	4a37      	ldr	r2, [pc, #220]	; (80020e8 <ARGB_TIM_DMADelayPulseCplt_right+0x25c>)
 800200c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 56] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002010:	4b31      	ldr	r3, [pc, #196]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	b29b      	uxth	r3, r3
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	3303      	adds	r3, #3
 800201a:	4a30      	ldr	r2, [pc, #192]	; (80020dc <ARGB_TIM_DMADelayPulseCplt_right+0x250>)
 800201c:	5cd3      	ldrb	r3, [r2, r3]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	461a      	mov	r2, r3
 8002022:	7afb      	ldrb	r3, [r7, #11]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202e:	2b00      	cmp	r3, #0
 8002030:	dd04      	ble.n	800203c <ARGB_TIM_DMADelayPulseCplt_right+0x1b0>
 8002032:	4b2b      	ldr	r3, [pc, #172]	; (80020e0 <ARGB_TIM_DMADelayPulseCplt_right+0x254>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	4619      	mov	r1, r3
 800203a:	e003      	b.n	8002044 <ARGB_TIM_DMADelayPulseCplt_right+0x1b8>
 800203c:	4b29      	ldr	r3, [pc, #164]	; (80020e4 <ARGB_TIM_DMADelayPulseCplt_right+0x258>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	4619      	mov	r1, r3
 8002044:	7afb      	ldrb	r3, [r7, #11]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	3338      	adds	r3, #56	; 0x38
 800204a:	4a27      	ldr	r2, [pc, #156]	; (80020e8 <ARGB_TIM_DMADelayPulseCplt_right+0x25c>)
 800204c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8002050:	7afb      	ldrb	r3, [r7, #11]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	3301      	adds	r3, #1
 8002056:	b2db      	uxtb	r3, r3
 8002058:	72fb      	strb	r3, [r7, #11]
 800205a:	7afb      	ldrb	r3, [r7, #11]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b07      	cmp	r3, #7
 8002060:	f67f af77 	bls.w	8001f52 <ARGB_TIM_DMADelayPulseCplt_right+0xc6>
        	PWM_BUF_RIGHT[i + 24] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_RIGHT[i + 32] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_RIGHT[i + 40] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        BUF_COUNTER_RIGHT++;
 8002064:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	b29b      	uxth	r3, r3
 800206a:	3301      	adds	r3, #1
 800206c:	b29a      	uxth	r2, r3
 800206e:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8002070:	801a      	strh	r2, [r3, #0]
 8002072:	e07b      	b.n	800216c <ARGB_TIM_DMADelayPulseCplt_right+0x2e0>
    } else if (BUF_COUNTER_RIGHT < NUM_PIXELS + 2) { // if RET transfer
 8002074:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	b29b      	uxth	r3, r3
 800207a:	2b56      	cmp	r3, #86	; 0x56
 800207c:	d80c      	bhi.n	8002098 <ARGB_TIM_DMADelayPulseCplt_right+0x20c>
        memset((dma_siz *) &PWM_BUF_RIGHT[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 800207e:	2280      	movs	r2, #128	; 0x80
 8002080:	2100      	movs	r1, #0
 8002082:	481a      	ldr	r0, [pc, #104]	; (80020ec <ARGB_TIM_DMADelayPulseCplt_right+0x260>)
 8002084:	f00f f958 	bl	8011338 <memset>
        BUF_COUNTER_RIGHT++;
 8002088:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	b29b      	uxth	r3, r3
 800208e:	3301      	adds	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8002094:	801a      	strh	r2, [r3, #0]
 8002096:	e069      	b.n	800216c <ARGB_TIM_DMADelayPulseCplt_right+0x2e0>
    } else { // if END of transfer
    	BUF_COUNTER_RIGHT = 0;
 8002098:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 800209a:	2200      	movs	r2, #0
 800209c:	801a      	strh	r2, [r3, #0]
#if TIM_CH_RIGHT == TIM_CHANNEL_3
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
#endif
#if TIM_CH_RIGHT == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020ac:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4618      	mov	r0, r3
 80020b4:	f002 fdf4 	bl	8004ca0 <HAL_DMA_Abort_IT>
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0c      	ldr	r2, [pc, #48]	; (80020f0 <ARGB_TIM_DMADelayPulseCplt_right+0x264>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d004      	beq.n	80020cc <ARGB_TIM_DMADelayPulseCplt_right+0x240>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <ARGB_TIM_DMADelayPulseCplt_right+0x268>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d115      	bne.n	80020f8 <ARGB_TIM_DMADelayPulseCplt_right+0x26c>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e014      	b.n	80020fa <ARGB_TIM_DMADelayPulseCplt_right+0x26e>
 80020d0:	20001840 	.word	0x20001840
 80020d4:	20001750 	.word	0x20001750
 80020d8:	2000058a 	.word	0x2000058a
 80020dc:	20000234 	.word	0x20000234
 80020e0:	200000dc 	.word	0x200000dc
 80020e4:	200000dd 	.word	0x200000dd
 80020e8:	20000488 	.word	0x20000488
 80020ec:	20000508 	.word	0x20000508
 80020f0:	40010000 	.word	0x40010000
 80020f4:	40010400 	.word	0x40010400
 80020f8:	2300      	movs	r3, #0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d017      	beq.n	800212e <ARGB_TIM_DMADelayPulseCplt_right+0x2a2>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6a1a      	ldr	r2, [r3, #32]
 8002104:	f241 1311 	movw	r3, #4369	; 0x1111
 8002108:	4013      	ands	r3, r2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10f      	bne.n	800212e <ARGB_TIM_DMADelayPulseCplt_right+0x2a2>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6a1a      	ldr	r2, [r3, #32]
 8002114:	f240 4344 	movw	r3, #1092	; 0x444
 8002118:	4013      	ands	r3, r2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d107      	bne.n	800212e <ARGB_TIM_DMADelayPulseCplt_right+0x2a2>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800212c:	645a      	str	r2, [r3, #68]	; 0x44
        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6a1a      	ldr	r2, [r3, #32]
 8002134:	f241 1311 	movw	r3, #4369	; 0x1111
 8002138:	4013      	ands	r3, r2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10f      	bne.n	800215e <ARGB_TIM_DMADelayPulseCplt_right+0x2d2>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6a1a      	ldr	r2, [r3, #32]
 8002144:	f240 4344 	movw	r3, #1092	; 0x444
 8002148:	4013      	ands	r3, r2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d107      	bne.n	800215e <ARGB_TIM_DMADelayPulseCplt_right+0x2d2>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0201 	bic.w	r2, r2, #1
 800215c:	601a      	str	r2, [r3, #0]
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH_RIGHT, HAL_TIM_CHANNEL_STATE_READY);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        ARGB_LOC_ST_RIGHT = ARGB_READY;
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <ARGB_TIM_DMADelayPulseCplt_right+0x2f4>)
 8002168:	2201      	movs	r2, #1
 800216a:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	771a      	strb	r2, [r3, #28]
 8002172:	e002      	b.n	800217a <ARGB_TIM_DMADelayPulseCplt_right+0x2ee>
    if (hdma != &DMA_HANDLE_RIGHT || htim != &TIM_HANDLE) return;
 8002174:	bf00      	nop
 8002176:	e000      	b.n	800217a <ARGB_TIM_DMADelayPulseCplt_right+0x2ee>
    if (BUF_COUNTER_RIGHT == 0) return; // if no data to transmit - return    // ,<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 8002178:	bf00      	nop
}
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	2000058d 	.word	0x2000058d

08002184 <ARGB_TIM_DMADelayPulseHalfCplt_left>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt_left(DMA_HandleTypeDef *hdma) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002190:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE_LEFT || htim != &TIM_HANDLE) return;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a60      	ldr	r2, [pc, #384]	; (8002318 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x194>)
 8002196:	4293      	cmp	r3, r2
 8002198:	f040 80b7 	bne.w	800230a <ARGB_TIM_DMADelayPulseHalfCplt_left+0x186>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4a5f      	ldr	r2, [pc, #380]	; (800231c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x198>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	f040 80b2 	bne.w	800230a <ARGB_TIM_DMADelayPulseHalfCplt_left+0x186>
    if (BUF_COUNTER_LEFT == 0) return; // if no data to transmit - return
 80021a6:	4b5e      	ldr	r3, [pc, #376]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 80ae 	beq.w	800230e <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18a>
    // if data transfer
    if (BUF_COUNTER_LEFT < NUM_PIXELS) {
 80021b2:	4b5b      	ldr	r3, [pc, #364]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	2b54      	cmp	r3, #84	; 0x54
 80021ba:	f200 8094 	bhi.w	80022e6 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x162>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 80021be:	2300      	movs	r3, #0
 80021c0:	72fb      	strb	r3, [r7, #11]
 80021c2:	e083      	b.n	80022cc <ARGB_TIM_DMADelayPulseHalfCplt_left+0x148>
#ifdef SK6812
        	PWM_BUF_LEFT[i] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80021c4:	4b56      	ldr	r3, [pc, #344]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4a55      	ldr	r2, [pc, #340]	; (8002324 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a0>)
 80021ce:	5cd3      	ldrb	r3, [r2, r3]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	7afb      	ldrb	r3, [r7, #11]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	dd04      	ble.n	80021ee <ARGB_TIM_DMADelayPulseHalfCplt_left+0x6a>
 80021e4:	4b50      	ldr	r3, [pc, #320]	; (8002328 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a4>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	e003      	b.n	80021f6 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x72>
 80021ee:	4b4f      	ldr	r3, [pc, #316]	; (800232c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a8>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	7afb      	ldrb	r3, [r7, #11]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	4619      	mov	r1, r3
 80021fc:	4b4c      	ldr	r3, [pc, #304]	; (8002330 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 80021fe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        	PWM_BUF_LEFT[i + 8] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002202:	4b47      	ldr	r3, [pc, #284]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	3301      	adds	r3, #1
 800220c:	4a45      	ldr	r2, [pc, #276]	; (8002324 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a0>)
 800220e:	5cd3      	ldrb	r3, [r2, r3]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	461a      	mov	r2, r3
 8002214:	7afb      	ldrb	r3, [r7, #11]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002220:	2b00      	cmp	r3, #0
 8002222:	dd04      	ble.n	800222e <ARGB_TIM_DMADelayPulseHalfCplt_left+0xaa>
 8002224:	4b40      	ldr	r3, [pc, #256]	; (8002328 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a4>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	4619      	mov	r1, r3
 800222c:	e003      	b.n	8002236 <ARGB_TIM_DMADelayPulseHalfCplt_left+0xb2>
 800222e:	4b3f      	ldr	r3, [pc, #252]	; (800232c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a8>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	b2db      	uxtb	r3, r3
 8002234:	4619      	mov	r1, r3
 8002236:	7afb      	ldrb	r3, [r7, #11]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	3308      	adds	r3, #8
 800223c:	4a3c      	ldr	r2, [pc, #240]	; (8002330 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 800223e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 16] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002242:	4b37      	ldr	r3, [pc, #220]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	b29b      	uxth	r3, r3
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	3302      	adds	r3, #2
 800224c:	4a35      	ldr	r2, [pc, #212]	; (8002324 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a0>)
 800224e:	5cd3      	ldrb	r3, [r2, r3]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	461a      	mov	r2, r3
 8002254:	7afb      	ldrb	r3, [r7, #11]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002260:	2b00      	cmp	r3, #0
 8002262:	dd04      	ble.n	800226e <ARGB_TIM_DMADelayPulseHalfCplt_left+0xea>
 8002264:	4b30      	ldr	r3, [pc, #192]	; (8002328 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a4>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	4619      	mov	r1, r3
 800226c:	e003      	b.n	8002276 <ARGB_TIM_DMADelayPulseHalfCplt_left+0xf2>
 800226e:	4b2f      	ldr	r3, [pc, #188]	; (800232c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a8>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	4619      	mov	r1, r3
 8002276:	7afb      	ldrb	r3, [r7, #11]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	3310      	adds	r3, #16
 800227c:	4a2c      	ldr	r2, [pc, #176]	; (8002330 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 800227e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 24] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
 8002282:	4b27      	ldr	r3, [pc, #156]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	b29b      	uxth	r3, r3
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	3303      	adds	r3, #3
 800228c:	4a25      	ldr	r2, [pc, #148]	; (8002324 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a0>)
 800228e:	5cd3      	ldrb	r3, [r2, r3]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	7afb      	ldrb	r3, [r7, #11]
 8002296:	b2db      	uxtb	r3, r3
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	dd04      	ble.n	80022ae <ARGB_TIM_DMADelayPulseHalfCplt_left+0x12a>
 80022a4:	4b20      	ldr	r3, [pc, #128]	; (8002328 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a4>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	4619      	mov	r1, r3
 80022ac:	e003      	b.n	80022b6 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x132>
 80022ae:	4b1f      	ldr	r3, [pc, #124]	; (800232c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a8>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	4619      	mov	r1, r3
 80022b6:	7afb      	ldrb	r3, [r7, #11]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	3318      	adds	r3, #24
 80022bc:	4a1c      	ldr	r2, [pc, #112]	; (8002330 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 80022be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 80022c2:	7afb      	ldrb	r3, [r7, #11]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	3301      	adds	r3, #1
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	72fb      	strb	r3, [r7, #11]
 80022cc:	7afb      	ldrb	r3, [r7, #11]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b07      	cmp	r3, #7
 80022d2:	f67f af77 	bls.w	80021c4 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x40>
        	PWM_BUF_LEFT[i] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_LEFT[i + 8] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_LEFT[i + 16] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        BUF_COUNTER_LEFT++;
 80022d6:	4b12      	ldr	r3, [pc, #72]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	3301      	adds	r3, #1
 80022de:	b29a      	uxth	r2, r3
 80022e0:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80022e2:	801a      	strh	r2, [r3, #0]
 80022e4:	e014      	b.n	8002310 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18c>
    } else if (BUF_COUNTER_LEFT < NUM_PIXELS + 2) { // if RET transfer
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	2b56      	cmp	r3, #86	; 0x56
 80022ee:	d80f      	bhi.n	8002310 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18c>
        memset((dma_siz *) &PWM_BUF_LEFT[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 80022f0:	2280      	movs	r2, #128	; 0x80
 80022f2:	2100      	movs	r1, #0
 80022f4:	480e      	ldr	r0, [pc, #56]	; (8002330 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 80022f6:	f00f f81f 	bl	8011338 <memset>
        BUF_COUNTER_LEFT++;
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	3301      	adds	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8002306:	801a      	strh	r2, [r3, #0]
 8002308:	e002      	b.n	8002310 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18c>
    if (hdma != &DMA_HANDLE_LEFT || htim != &TIM_HANDLE) return;
 800230a:	bf00      	nop
 800230c:	e000      	b.n	8002310 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18c>
    if (BUF_COUNTER_LEFT == 0) return; // if no data to transmit - return
 800230e:	bf00      	nop
    }
}
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200017e0 	.word	0x200017e0
 800231c:	20001750 	.word	0x20001750
 8002320:	20000588 	.word	0x20000588
 8002324:	200000e0 	.word	0x200000e0
 8002328:	200000dc 	.word	0x200000dc
 800232c:	200000dd 	.word	0x200000dd
 8002330:	20000388 	.word	0x20000388

08002334 <ARGB_TIM_DMADelayPulseHalfCplt_right>:
// -----------------------------------------------------------------------------------
static void ARGB_TIM_DMADelayPulseHalfCplt_right(DMA_HandleTypeDef *hdma) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002340:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE_RIGHT || htim != &TIM_HANDLE) return;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a60      	ldr	r2, [pc, #384]	; (80024c8 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x194>)
 8002346:	4293      	cmp	r3, r2
 8002348:	f040 80b7 	bne.w	80024ba <ARGB_TIM_DMADelayPulseHalfCplt_right+0x186>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4a5f      	ldr	r2, [pc, #380]	; (80024cc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x198>)
 8002350:	4293      	cmp	r3, r2
 8002352:	f040 80b2 	bne.w	80024ba <ARGB_TIM_DMADelayPulseHalfCplt_right+0x186>
    if (BUF_COUNTER_RIGHT == 0) return; // if no data to transmit - return
 8002356:	4b5e      	ldr	r3, [pc, #376]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	b29b      	uxth	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80ae 	beq.w	80024be <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18a>
    // if data transfer
    if (BUF_COUNTER_RIGHT < NUM_PIXELS) {
 8002362:	4b5b      	ldr	r3, [pc, #364]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	2b54      	cmp	r3, #84	; 0x54
 800236a:	f200 8094 	bhi.w	8002496 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x162>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 800236e:	2300      	movs	r3, #0
 8002370:	72fb      	strb	r3, [r7, #11]
 8002372:	e083      	b.n	800247c <ARGB_TIM_DMADelayPulseHalfCplt_right+0x148>
#ifdef SK6812
        	PWM_BUF_RIGHT[i] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002374:	4b56      	ldr	r3, [pc, #344]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	b29b      	uxth	r3, r3
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4a55      	ldr	r2, [pc, #340]	; (80024d4 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a0>)
 800237e:	5cd3      	ldrb	r3, [r2, r3]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	461a      	mov	r2, r3
 8002384:	7afb      	ldrb	r3, [r7, #11]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002390:	2b00      	cmp	r3, #0
 8002392:	dd04      	ble.n	800239e <ARGB_TIM_DMADelayPulseHalfCplt_right+0x6a>
 8002394:	4b50      	ldr	r3, [pc, #320]	; (80024d8 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a4>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	b2db      	uxtb	r3, r3
 800239a:	461a      	mov	r2, r3
 800239c:	e003      	b.n	80023a6 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x72>
 800239e:	4b4f      	ldr	r3, [pc, #316]	; (80024dc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a8>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	7afb      	ldrb	r3, [r7, #11]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	4619      	mov	r1, r3
 80023ac:	4b4c      	ldr	r3, [pc, #304]	; (80024e0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 80023ae:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        	PWM_BUF_RIGHT[i + 8] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80023b2:	4b47      	ldr	r3, [pc, #284]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	3301      	adds	r3, #1
 80023bc:	4a45      	ldr	r2, [pc, #276]	; (80024d4 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a0>)
 80023be:	5cd3      	ldrb	r3, [r2, r3]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	461a      	mov	r2, r3
 80023c4:	7afb      	ldrb	r3, [r7, #11]
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	dd04      	ble.n	80023de <ARGB_TIM_DMADelayPulseHalfCplt_right+0xaa>
 80023d4:	4b40      	ldr	r3, [pc, #256]	; (80024d8 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a4>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	4619      	mov	r1, r3
 80023dc:	e003      	b.n	80023e6 <ARGB_TIM_DMADelayPulseHalfCplt_right+0xb2>
 80023de:	4b3f      	ldr	r3, [pc, #252]	; (80024dc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a8>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	4619      	mov	r1, r3
 80023e6:	7afb      	ldrb	r3, [r7, #11]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	3308      	adds	r3, #8
 80023ec:	4a3c      	ldr	r2, [pc, #240]	; (80024e0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 80023ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 16] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80023f2:	4b37      	ldr	r3, [pc, #220]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	3302      	adds	r3, #2
 80023fc:	4a35      	ldr	r2, [pc, #212]	; (80024d4 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a0>)
 80023fe:	5cd3      	ldrb	r3, [r2, r3]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	7afb      	ldrb	r3, [r7, #11]
 8002406:	b2db      	uxtb	r3, r3
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002410:	2b00      	cmp	r3, #0
 8002412:	dd04      	ble.n	800241e <ARGB_TIM_DMADelayPulseHalfCplt_right+0xea>
 8002414:	4b30      	ldr	r3, [pc, #192]	; (80024d8 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a4>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	4619      	mov	r1, r3
 800241c:	e003      	b.n	8002426 <ARGB_TIM_DMADelayPulseHalfCplt_right+0xf2>
 800241e:	4b2f      	ldr	r3, [pc, #188]	; (80024dc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a8>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	b2db      	uxtb	r3, r3
 8002424:	4619      	mov	r1, r3
 8002426:	7afb      	ldrb	r3, [r7, #11]
 8002428:	b2db      	uxtb	r3, r3
 800242a:	3310      	adds	r3, #16
 800242c:	4a2c      	ldr	r2, [pc, #176]	; (80024e0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 800242e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 24] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
 8002432:	4b27      	ldr	r3, [pc, #156]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	3303      	adds	r3, #3
 800243c:	4a25      	ldr	r2, [pc, #148]	; (80024d4 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a0>)
 800243e:	5cd3      	ldrb	r3, [r2, r3]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	461a      	mov	r2, r3
 8002444:	7afb      	ldrb	r3, [r7, #11]
 8002446:	b2db      	uxtb	r3, r3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002450:	2b00      	cmp	r3, #0
 8002452:	dd04      	ble.n	800245e <ARGB_TIM_DMADelayPulseHalfCplt_right+0x12a>
 8002454:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a4>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	4619      	mov	r1, r3
 800245c:	e003      	b.n	8002466 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x132>
 800245e:	4b1f      	ldr	r3, [pc, #124]	; (80024dc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a8>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	4619      	mov	r1, r3
 8002466:	7afb      	ldrb	r3, [r7, #11]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	3318      	adds	r3, #24
 800246c:	4a1c      	ldr	r2, [pc, #112]	; (80024e0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 800246e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8002472:	7afb      	ldrb	r3, [r7, #11]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	3301      	adds	r3, #1
 8002478:	b2db      	uxtb	r3, r3
 800247a:	72fb      	strb	r3, [r7, #11]
 800247c:	7afb      	ldrb	r3, [r7, #11]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b07      	cmp	r3, #7
 8002482:	f67f af77 	bls.w	8002374 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x40>
        	PWM_BUF_RIGHT[i] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_RIGHT[i + 8] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_RIGHT[i + 16] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        BUF_COUNTER_RIGHT++;
 8002486:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	b29b      	uxth	r3, r3
 800248c:	3301      	adds	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002492:	801a      	strh	r2, [r3, #0]
 8002494:	e014      	b.n	80024c0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18c>
    } else if (BUF_COUNTER_RIGHT < NUM_PIXELS + 2) { // if RET transfer
 8002496:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	b29b      	uxth	r3, r3
 800249c:	2b56      	cmp	r3, #86	; 0x56
 800249e:	d80f      	bhi.n	80024c0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18c>
        memset((dma_siz *) &PWM_BUF_RIGHT[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 80024a0:	2280      	movs	r2, #128	; 0x80
 80024a2:	2100      	movs	r1, #0
 80024a4:	480e      	ldr	r0, [pc, #56]	; (80024e0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 80024a6:	f00e ff47 	bl	8011338 <memset>
        BUF_COUNTER_RIGHT++;
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3301      	adds	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 80024b6:	801a      	strh	r2, [r3, #0]
 80024b8:	e002      	b.n	80024c0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18c>
    if (hdma != &DMA_HANDLE_RIGHT || htim != &TIM_HANDLE) return;
 80024ba:	bf00      	nop
 80024bc:	e000      	b.n	80024c0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18c>
    if (BUF_COUNTER_RIGHT == 0) return; // if no data to transmit - return
 80024be:	bf00      	nop
    }
}
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20001840 	.word	0x20001840
 80024cc:	20001750 	.word	0x20001750
 80024d0:	2000058a 	.word	0x2000058a
 80024d4:	20000234 	.word	0x20000234
 80024d8:	200000dc 	.word	0x200000dc
 80024dc:	200000dd 	.word	0x200000dd
 80024e0:	20000488 	.word	0x20000488

080024e4 <turn_off_left_stript>:

#include "light/led_stript/ARGB.h"

// -----------------------------------------------------------------------------------------------------
void turn_off_left_stript(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
	ARGB_Clear_left(); 			// Clear stirp
 80024e8:	f7fe fdc8 	bl	800107c <ARGB_Clear_left>
	while (ARGB_Show_left() != ARGB_OK); // Update - Option 1
 80024ec:	bf00      	nop
 80024ee:	f7fe ffa5 	bl	800143c <ARGB_Show_left>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d1fa      	bne.n	80024ee <turn_off_left_stript+0xa>
}
 80024f8:	bf00      	nop
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}

080024fe <turn_off_right_stript>:
// -----------------------------------------------------------------------------------------------------
void turn_off_right_stript(void)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	af00      	add	r7, sp, #0
	ARGB_Clear_right();
 8002502:	f7fe fdc7 	bl	8001094 <ARGB_Clear_right>
	while (ARGB_Show_right() != ARGB_OK); // Update - Option 1
 8002506:	bf00      	nop
 8002508:	f7ff f964 	bl	80017d4 <ARGB_Show_right>
 800250c:	4603      	mov	r3, r0
 800250e:	2b02      	cmp	r3, #2
 8002510:	d1fa      	bne.n	8002508 <turn_off_right_stript+0xa>
}
 8002512:	bf00      	nop
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}

08002518 <turn_off_left_and_right_dtript>:
// -----------------------------------------------------------------------------------------------------
void turn_off_left_and_right_dtript(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
	turn_off_left_stript();
 800251c:	f7ff ffe2 	bl	80024e4 <turn_off_left_stript>
	turn_off_right_stript();
 8002520:	f7ff ffed 	bl	80024fe <turn_off_right_stript>
}
 8002524:	bf00      	nop
 8002526:	bd80      	pop	{r7, pc}

08002528 <turn_all_leds_from_centr>:
	}
	while (!ARGB_Show_right());  // Update
}
// -----------------------------------------------------------------------------------------------------
void turn_all_leds_from_centr(u8_t delay, u8_t r, u8_t g, u8_t b)
{
 8002528:	b590      	push	{r4, r7, lr}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	4604      	mov	r4, r0
 8002530:	4608      	mov	r0, r1
 8002532:	4611      	mov	r1, r2
 8002534:	461a      	mov	r2, r3
 8002536:	4623      	mov	r3, r4
 8002538:	71fb      	strb	r3, [r7, #7]
 800253a:	4603      	mov	r3, r0
 800253c:	71bb      	strb	r3, [r7, #6]
 800253e:	460b      	mov	r3, r1
 8002540:	717b      	strb	r3, [r7, #5]
 8002542:	4613      	mov	r3, r2
 8002544:	713b      	strb	r3, [r7, #4]
	uint8_t i =0;
 8002546:	2300      	movs	r3, #0
 8002548:	73fb      	strb	r3, [r7, #15]
	// turn_off_left_stript();

	for( i = 84; i >= 43; i--)
 800254a:	2354      	movs	r3, #84	; 0x54
 800254c:	73fb      	strb	r3, [r7, #15]
 800254e:	e034      	b.n	80025ba <turn_all_leds_from_centr+0x92>
	{
		ARGB_SetRGB_left(i, r, g, b);			// High side
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	b298      	uxth	r0, r3
 8002554:	793b      	ldrb	r3, [r7, #4]
 8002556:	797a      	ldrb	r2, [r7, #5]
 8002558:	79b9      	ldrb	r1, [r7, #6]
 800255a:	f7fe fdb7 	bl	80010cc <ARGB_SetRGB_left>
		ARGB_SetRGB_right(i, r, g, b);
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	b298      	uxth	r0, r3
 8002562:	793b      	ldrb	r3, [r7, #4]
 8002564:	797a      	ldrb	r2, [r7, #5]
 8002566:	79b9      	ldrb	r1, [r7, #6]
 8002568:	f7fe fe2a 	bl	80011c0 <ARGB_SetRGB_right>

		ARGB_SetRGB_left((85 - i), r, g, b);
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	b29b      	uxth	r3, r3
 8002570:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
 8002574:	b298      	uxth	r0, r3
 8002576:	793b      	ldrb	r3, [r7, #4]
 8002578:	797a      	ldrb	r2, [r7, #5]
 800257a:	79b9      	ldrb	r1, [r7, #6]
 800257c:	f7fe fda6 	bl	80010cc <ARGB_SetRGB_left>
		ARGB_SetRGB_right((85 - i), r, g, b);
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	b29b      	uxth	r3, r3
 8002584:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
 8002588:	b298      	uxth	r0, r3
 800258a:	793b      	ldrb	r3, [r7, #4]
 800258c:	797a      	ldrb	r2, [r7, #5]
 800258e:	79b9      	ldrb	r1, [r7, #6]
 8002590:	f7fe fe16 	bl	80011c0 <ARGB_SetRGB_right>

		while (!ARGB_Show_left());  // Update
 8002594:	bf00      	nop
 8002596:	f7fe ff51 	bl	800143c <ARGB_Show_left>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0fa      	beq.n	8002596 <turn_all_leds_from_centr+0x6e>
		while (!ARGB_Show_right());  // Update
 80025a0:	bf00      	nop
 80025a2:	f7ff f917 	bl	80017d4 <ARGB_Show_right>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0fa      	beq.n	80025a2 <turn_all_leds_from_centr+0x7a>
		HAL_Delay(delay);
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f002 f8ca 	bl	8004748 <HAL_Delay>
	for( i = 84; i >= 43; i--)
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	2b2a      	cmp	r3, #42	; 0x2a
 80025be:	d8c7      	bhi.n	8002550 <turn_all_leds_from_centr+0x28>
	}
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd90      	pop	{r4, r7, pc}

080025ca <set_left_one_rgbw_led>:
// -----------------------------------------------------------------------------------------------------
void set_left_one_rgbw_led(uint8_t position, u8_t r, u8_t g, u8_t b, u8_t w)
{
 80025ca:	b590      	push	{r4, r7, lr}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	4604      	mov	r4, r0
 80025d2:	4608      	mov	r0, r1
 80025d4:	4611      	mov	r1, r2
 80025d6:	461a      	mov	r2, r3
 80025d8:	4623      	mov	r3, r4
 80025da:	71fb      	strb	r3, [r7, #7]
 80025dc:	4603      	mov	r3, r0
 80025de:	71bb      	strb	r3, [r7, #6]
 80025e0:	460b      	mov	r3, r1
 80025e2:	717b      	strb	r3, [r7, #5]
 80025e4:	4613      	mov	r3, r2
 80025e6:	713b      	strb	r3, [r7, #4]
	ARGB_SetRGB_left(position, r, g, b);
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	b298      	uxth	r0, r3
 80025ec:	793b      	ldrb	r3, [r7, #4]
 80025ee:	797a      	ldrb	r2, [r7, #5]
 80025f0:	79b9      	ldrb	r1, [r7, #6]
 80025f2:	f7fe fd6b 	bl	80010cc <ARGB_SetRGB_left>
	ARGB_SetWhite_left(position, w);
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	7e3a      	ldrb	r2, [r7, #24]
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fe58 	bl	80012b4 <ARGB_SetWhite_left>
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	bd90      	pop	{r4, r7, pc}

0800260c <set_right_one_rgbw_led>:
// -----------------------------------------------------------------------------------------------------
void set_right_one_rgbw_led(uint8_t position, u8_t r, u8_t g, u8_t b, u8_t w)
{
 800260c:	b590      	push	{r4, r7, lr}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4604      	mov	r4, r0
 8002614:	4608      	mov	r0, r1
 8002616:	4611      	mov	r1, r2
 8002618:	461a      	mov	r2, r3
 800261a:	4623      	mov	r3, r4
 800261c:	71fb      	strb	r3, [r7, #7]
 800261e:	4603      	mov	r3, r0
 8002620:	71bb      	strb	r3, [r7, #6]
 8002622:	460b      	mov	r3, r1
 8002624:	717b      	strb	r3, [r7, #5]
 8002626:	4613      	mov	r3, r2
 8002628:	713b      	strb	r3, [r7, #4]
	ARGB_SetRGB_right(position, r, g, b);
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	b298      	uxth	r0, r3
 800262e:	793b      	ldrb	r3, [r7, #4]
 8002630:	797a      	ldrb	r2, [r7, #5]
 8002632:	79b9      	ldrb	r1, [r7, #6]
 8002634:	f7fe fdc4 	bl	80011c0 <ARGB_SetRGB_right>
	ARGB_SetWhite_right(position, w);
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	b29b      	uxth	r3, r3
 800263c:	7e3a      	ldrb	r2, [r7, #24]
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe fe5b 	bl	80012fc <ARGB_SetWhite_right>
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	bd90      	pop	{r4, r7, pc}
	...

08002650 <init_tim_13>:
static void MX_TIM13_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
void init_tim_13(int msec)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
	msec = msec*10;
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_AUTORELOAD(&htim13, msec-1);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	1e5a      	subs	r2, r3, #1
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <init_tim_13+0x38>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	62da      	str	r2, [r3, #44]	; 0x2c
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3b01      	subs	r3, #1
 8002672:	461a      	mov	r2, r3
 8002674:	4b04      	ldr	r3, [pc, #16]	; (8002688 <init_tim_13+0x38>)
 8002676:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Start_IT(&htim13);
 8002678:	4803      	ldr	r0, [pc, #12]	; (8002688 <init_tim_13+0x38>)
 800267a:	f005 fb55 	bl	8007d28 <HAL_TIM_Base_Start_IT>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20001798 	.word	0x20001798

0800268c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800268c:	b5b0      	push	{r4, r5, r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002692:	f001 ffe7 	bl	8004664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002696:	f000 f90b 	bl	80028b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800269a:	f000 fcad 	bl	8002ff8 <MX_GPIO_Init>
  MX_DMA_Init();
 800269e:	f000 fc83 	bl	8002fa8 <MX_DMA_Init>
  MX_USB_HOST_Init();
 80026a2:	f00e fb07 	bl	8010cb4 <MX_USB_HOST_Init>
  MX_USART3_UART_Init();
 80026a6:	f000 fc55 	bl	8002f54 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80026aa:	f000 f96b 	bl	8002984 <MX_SPI1_Init>
  MX_FATFS_Init();
 80026ae:	f008 fcd3 	bl	800b058 <MX_FATFS_Init>
  MX_TIM2_Init();
 80026b2:	f000 f99d 	bl	80029f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80026b6:	f000 fa31 	bl	8002b1c <MX_TIM3_Init>
  MX_TIM4_Init();
 80026ba:	f000 fac7 	bl	8002c4c <MX_TIM4_Init>
  MX_TIM8_Init();
 80026be:	f000 fb95 	bl	8002dec <MX_TIM8_Init>
  MX_TIM5_Init();
 80026c2:	f000 fb45 	bl	8002d50 <MX_TIM5_Init>
  MX_TIM13_Init();
 80026c6:	f000 fc21 	bl	8002f0c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(100);
 80026ca:	2064      	movs	r0, #100	; 0x64
 80026cc:	f002 f83c 	bl	8004748 <HAL_Delay>

  // LEDs //////////////////////////////////////////////////////////////////
  ARGB_SetBrightness(255); 					 	// Set global brightness to 100%
 80026d0:	20ff      	movs	r0, #255	; 0xff
 80026d2:	f7fe fceb 	bl	80010ac <ARGB_SetBrightness>
  ARGB_Init();  								// Initialization
 80026d6:	f7fe fc4f 	bl	8000f78 <ARGB_Init>
  turn_off_left_and_right_dtript();
 80026da:	f7ff ff1d 	bl	8002518 <turn_off_left_and_right_dtript>
  //////////////////////////////////////////////////////////////////////////

  // SD Card //////////////////////////////////////////////////////////////
  char msg_buf[30] = {0};
 80026de:	2300      	movs	r3, #0
 80026e0:	603b      	str	r3, [r7, #0]
 80026e2:	1d3b      	adds	r3, r7, #4
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]
 80026f0:	615a      	str	r2, [r3, #20]
 80026f2:	831a      	strh	r2, [r3, #24]
  if(disk_initialize(SDFatFs. drv) != 0)
 80026f4:	4b60      	ldr	r3, [pc, #384]	; (8002878 <main+0x1ec>)
 80026f6:	785b      	ldrb	r3, [r3, #1]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f00a fdc5 	bl	800d288 <disk_initialize>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d023      	beq.n	800274c <main+0xc0>
  {
	  while(1)
	  {
		  strcat(msg_buf, "\n\r-> ERROR: NO SD CARD! \n\r");
 8002704:	463b      	mov	r3, r7
 8002706:	4618      	mov	r0, r3
 8002708:	f7fd fd62 	bl	80001d0 <strlen>
 800270c:	4603      	mov	r3, r0
 800270e:	461a      	mov	r2, r3
 8002710:	463b      	mov	r3, r7
 8002712:	4413      	add	r3, r2
 8002714:	4a59      	ldr	r2, [pc, #356]	; (800287c <main+0x1f0>)
 8002716:	461d      	mov	r5, r3
 8002718:	4614      	mov	r4, r2
 800271a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800271c:	6028      	str	r0, [r5, #0]
 800271e:	6069      	str	r1, [r5, #4]
 8002720:	60aa      	str	r2, [r5, #8]
 8002722:	60eb      	str	r3, [r5, #12]
 8002724:	cc03      	ldmia	r4!, {r0, r1}
 8002726:	6128      	str	r0, [r5, #16]
 8002728:	6169      	str	r1, [r5, #20]
 800272a:	8823      	ldrh	r3, [r4, #0]
 800272c:	78a2      	ldrb	r2, [r4, #2]
 800272e:	832b      	strh	r3, [r5, #24]
 8002730:	4613      	mov	r3, r2
 8002732:	76ab      	strb	r3, [r5, #26]
		  HAL_UART_Transmit_IT(&huart3, msg_buf, sizeof(msg_buf));
 8002734:	463b      	mov	r3, r7
 8002736:	221e      	movs	r2, #30
 8002738:	4619      	mov	r1, r3
 800273a:	4851      	ldr	r0, [pc, #324]	; (8002880 <main+0x1f4>)
 800273c:	f006 fcc9 	bl	80090d2 <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 8002740:	2064      	movs	r0, #100	; 0x64
 8002742:	f002 f801 	bl	8004748 <HAL_Delay>

		  all_leds_animantion_error_state();
 8002746:	f000 fe29 	bl	800339c <all_leds_animantion_error_state>
		  strcat(msg_buf, "\n\r-> ERROR: NO SD CARD! \n\r");
 800274a:	e7db      	b.n	8002704 <main+0x78>
	  }
  }
  else
  {
	  SD_SPI_GetFileInfo();
 800274c:	f001 fc54 	bl	8003ff8 <SD_SPI_GetFileInfo>
	  FATFS_UnLinkDriver(USER_Path);
 8002750:	484c      	ldr	r0, [pc, #304]	; (8002884 <main+0x1f8>)
 8002752:	f00e f9db 	bl	8010b0c <FATFS_UnLinkDriver>

	  all_leds_animantion_ok_state();
 8002756:	f000 fe09 	bl	800336c <all_leds_animantion_ok_state>
  }
  //////////////////////////////////////////////////////////////////////////

  // UART //////////////////////////////////////////////////////////////////
  HAL_Delay(100);
 800275a:	2064      	movs	r0, #100	; 0x64
 800275c:	f001 fff4 	bl	8004748 <HAL_Delay>
  HAL_UART_Receive_IT(&huart3, &uart_RX_data, sizeof(uart_RX_data));		// Turn on receive on byte from UART in interrupt mode
 8002760:	2201      	movs	r2, #1
 8002762:	4949      	ldr	r1, [pc, #292]	; (8002888 <main+0x1fc>)
 8002764:	4846      	ldr	r0, [pc, #280]	; (8002880 <main+0x1f4>)
 8002766:	f006 fcf9 	bl	800915c <HAL_UART_Receive_IT>
  //////////////////////////////////////////////////////////////////////////

  HAL_TIM_Base_Start_IT(&htim5);       										//використати цей таймер для синхронізації
 800276a:	4848      	ldr	r0, [pc, #288]	; (800288c <main+0x200>)
 800276c:	f005 fadc 	bl	8007d28 <HAL_TIM_Base_Start_IT>

  init_tim_13(33);				// Set value in milisecond
 8002770:	2021      	movs	r0, #33	; 0x21
 8002772:	f7ff ff6d 	bl	8002650 <init_tim_13>
  while (1)
  {
	  //test_double_buffer();
	  //test_function_generate_delay();

	  if(flag_received_command == true)
 8002776:	4b46      	ldr	r3, [pc, #280]	; (8002890 <main+0x204>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d079      	beq.n	8002872 <main+0x1e6>
	  {
		  static char buf_str[10] = {0};
		  static bool flag_firt_command = true;

		  if(flag_firt_command == true)											// Read file first time
 800277e:	4b45      	ldr	r3, [pc, #276]	; (8002894 <main+0x208>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d018      	beq.n	80027b8 <main+0x12c>
		  {
			  memset(buf_str, 0, sizeof(buf_str));
 8002786:	220a      	movs	r2, #10
 8002788:	2100      	movs	r1, #0
 800278a:	4843      	ldr	r0, [pc, #268]	; (8002898 <main+0x20c>)
 800278c:	f00e fdd4 	bl	8011338 <memset>
			  strcat(buf_str, rx_buf_command);
 8002790:	4942      	ldr	r1, [pc, #264]	; (800289c <main+0x210>)
 8002792:	4841      	ldr	r0, [pc, #260]	; (8002898 <main+0x20c>)
 8002794:	f00e fee8 	bl	8011568 <strcat>
			  strcat(buf_str, ".bin");
 8002798:	483f      	ldr	r0, [pc, #252]	; (8002898 <main+0x20c>)
 800279a:	f7fd fd19 	bl	80001d0 <strlen>
 800279e:	4603      	mov	r3, r0
 80027a0:	461a      	mov	r2, r3
 80027a2:	4b3d      	ldr	r3, [pc, #244]	; (8002898 <main+0x20c>)
 80027a4:	4413      	add	r3, r2
 80027a6:	4a3e      	ldr	r2, [pc, #248]	; (80028a0 <main+0x214>)
 80027a8:	6810      	ldr	r0, [r2, #0]
 80027aa:	6018      	str	r0, [r3, #0]
 80027ac:	7912      	ldrb	r2, [r2, #4]
 80027ae:	711a      	strb	r2, [r3, #4]
			  flag_firt_command = false;
 80027b0:	4b38      	ldr	r3, [pc, #224]	; (8002894 <main+0x208>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
 80027b6:	e05c      	b.n	8002872 <main+0x1e6>
		  }
		  else
		  {
			  static bool print_flag = true;

			  if(open_bin_file(buf_str) == 0)										// Read file
 80027b8:	4837      	ldr	r0, [pc, #220]	; (8002898 <main+0x20c>)
 80027ba:	f001 fd19 	bl	80041f0 <open_bin_file>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d12a      	bne.n	800281a <main+0x18e>
			  {
				  if(print_flag == true)											// Print only one time
 80027c4:	4b37      	ldr	r3, [pc, #220]	; (80028a4 <main+0x218>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d052      	beq.n	8002872 <main+0x1e6>
				  {
					  memset(msg_buf, 0, sizeof(msg_buf));
 80027cc:	463b      	mov	r3, r7
 80027ce:	221e      	movs	r2, #30
 80027d0:	2100      	movs	r1, #0
 80027d2:	4618      	mov	r0, r3
 80027d4:	f00e fdb0 	bl	8011338 <memset>
					  strcat(msg_buf, rx_buf_command);
 80027d8:	463b      	mov	r3, r7
 80027da:	4930      	ldr	r1, [pc, #192]	; (800289c <main+0x210>)
 80027dc:	4618      	mov	r0, r3
 80027de:	f00e fec3 	bl	8011568 <strcat>
					  strcat(msg_buf, ": working...  \n\r");
 80027e2:	463b      	mov	r3, r7
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fd fcf3 	bl	80001d0 <strlen>
 80027ea:	4603      	mov	r3, r0
 80027ec:	461a      	mov	r2, r3
 80027ee:	463b      	mov	r3, r7
 80027f0:	4413      	add	r3, r2
 80027f2:	4a2d      	ldr	r2, [pc, #180]	; (80028a8 <main+0x21c>)
 80027f4:	461d      	mov	r5, r3
 80027f6:	4614      	mov	r4, r2
 80027f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027fa:	6028      	str	r0, [r5, #0]
 80027fc:	6069      	str	r1, [r5, #4]
 80027fe:	60aa      	str	r2, [r5, #8]
 8002800:	60eb      	str	r3, [r5, #12]
 8002802:	7823      	ldrb	r3, [r4, #0]
 8002804:	742b      	strb	r3, [r5, #16]
					  HAL_UART_Transmit_IT(&huart3, msg_buf, sizeof(msg_buf));
 8002806:	463b      	mov	r3, r7
 8002808:	221e      	movs	r2, #30
 800280a:	4619      	mov	r1, r3
 800280c:	481c      	ldr	r0, [pc, #112]	; (8002880 <main+0x1f4>)
 800280e:	f006 fc60 	bl	80090d2 <HAL_UART_Transmit_IT>

					  print_flag = false;
 8002812:	4b24      	ldr	r3, [pc, #144]	; (80028a4 <main+0x218>)
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
 8002818:	e02b      	b.n	8002872 <main+0x1e6>
				  }
			  }
			  else																	// Print "DONE" if all file was read
			  {
				  memset(rx_buf_command, 0, sizeof(rx_buf_command));
 800281a:	220a      	movs	r2, #10
 800281c:	2100      	movs	r1, #0
 800281e:	481f      	ldr	r0, [pc, #124]	; (800289c <main+0x210>)
 8002820:	f00e fd8a 	bl	8011338 <memset>
				  memset(msg_buf, 0, sizeof(msg_buf));
 8002824:	463b      	mov	r3, r7
 8002826:	221e      	movs	r2, #30
 8002828:	2100      	movs	r1, #0
 800282a:	4618      	mov	r0, r3
 800282c:	f00e fd84 	bl	8011338 <memset>
				  strcat(msg_buf, "\n\r DONE \n\r");
 8002830:	463b      	mov	r3, r7
 8002832:	4618      	mov	r0, r3
 8002834:	f7fd fccc 	bl	80001d0 <strlen>
 8002838:	4603      	mov	r3, r0
 800283a:	461a      	mov	r2, r3
 800283c:	463b      	mov	r3, r7
 800283e:	4413      	add	r3, r2
 8002840:	491a      	ldr	r1, [pc, #104]	; (80028ac <main+0x220>)
 8002842:	461a      	mov	r2, r3
 8002844:	460b      	mov	r3, r1
 8002846:	cb03      	ldmia	r3!, {r0, r1}
 8002848:	6010      	str	r0, [r2, #0]
 800284a:	6051      	str	r1, [r2, #4]
 800284c:	8819      	ldrh	r1, [r3, #0]
 800284e:	789b      	ldrb	r3, [r3, #2]
 8002850:	8111      	strh	r1, [r2, #8]
 8002852:	7293      	strb	r3, [r2, #10]
				  HAL_UART_Transmit_IT(&huart3, msg_buf, sizeof(msg_buf));
 8002854:	463b      	mov	r3, r7
 8002856:	221e      	movs	r2, #30
 8002858:	4619      	mov	r1, r3
 800285a:	4809      	ldr	r0, [pc, #36]	; (8002880 <main+0x1f4>)
 800285c:	f006 fc39 	bl	80090d2 <HAL_UART_Transmit_IT>

				  flag_received_command = false;									// Out
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <main+0x204>)
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]
				  flag_firt_command = true;
 8002866:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <main+0x208>)
 8002868:	2201      	movs	r2, #1
 800286a:	701a      	strb	r2, [r3, #0]
				  print_flag = true;
 800286c:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <main+0x218>)
 800286e:	2201      	movs	r2, #1
 8002870:	701a      	strb	r2, [r3, #0]
//	  HAL_Delay(1000);
	  //


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8002872:	f00e fa45 	bl	8010d00 <MX_USB_HOST_Process>
	  if(flag_received_command == true)
 8002876:	e77e      	b.n	8002776 <main+0xea>
 8002878:	20000590 	.word	0x20000590
 800287c:	08011c5c 	.word	0x08011c5c
 8002880:	200018a0 	.word	0x200018a0
 8002884:	200018f4 	.word	0x200018f4
 8002888:	200015c8 	.word	0x200015c8
 800288c:	20001708 	.word	0x20001708
 8002890:	200015c9 	.word	0x200015c9
 8002894:	20000001 	.word	0x20000001
 8002898:	200018e4 	.word	0x200018e4
 800289c:	200015cc 	.word	0x200015cc
 80028a0:	08011c78 	.word	0x08011c78
 80028a4:	20000002 	.word	0x20000002
 80028a8:	08011c80 	.word	0x08011c80
 80028ac:	08011c94 	.word	0x08011c94

080028b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b094      	sub	sp, #80	; 0x50
 80028b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028b6:	f107 0320 	add.w	r3, r7, #32
 80028ba:	2230      	movs	r2, #48	; 0x30
 80028bc:	2100      	movs	r1, #0
 80028be:	4618      	mov	r0, r3
 80028c0:	f00e fd3a 	bl	8011338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028c4:	f107 030c 	add.w	r3, r7, #12
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028d4:	2300      	movs	r3, #0
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	4b28      	ldr	r3, [pc, #160]	; (800297c <SystemClock_Config+0xcc>)
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	4a27      	ldr	r2, [pc, #156]	; (800297c <SystemClock_Config+0xcc>)
 80028de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e2:	6413      	str	r3, [r2, #64]	; 0x40
 80028e4:	4b25      	ldr	r3, [pc, #148]	; (800297c <SystemClock_Config+0xcc>)
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028f0:	2300      	movs	r3, #0
 80028f2:	607b      	str	r3, [r7, #4]
 80028f4:	4b22      	ldr	r3, [pc, #136]	; (8002980 <SystemClock_Config+0xd0>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a21      	ldr	r2, [pc, #132]	; (8002980 <SystemClock_Config+0xd0>)
 80028fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	4b1f      	ldr	r3, [pc, #124]	; (8002980 <SystemClock_Config+0xd0>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002908:	607b      	str	r3, [r7, #4]
 800290a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800290c:	2301      	movs	r3, #1
 800290e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002910:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002916:	2302      	movs	r3, #2
 8002918:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800291a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800291e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002920:	2308      	movs	r3, #8
 8002922:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002924:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002928:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800292a:	2302      	movs	r3, #2
 800292c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800292e:	2307      	movs	r3, #7
 8002930:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002932:	f107 0320 	add.w	r3, r7, #32
 8002936:	4618      	mov	r0, r3
 8002938:	f004 fa18 	bl	8006d6c <HAL_RCC_OscConfig>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002942:	f000 fd64 	bl	800340e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002946:	230f      	movs	r3, #15
 8002948:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800294a:	2302      	movs	r3, #2
 800294c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002952:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002956:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002958:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800295c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800295e:	f107 030c 	add.w	r3, r7, #12
 8002962:	2105      	movs	r1, #5
 8002964:	4618      	mov	r0, r3
 8002966:	f004 fc79 	bl	800725c <HAL_RCC_ClockConfig>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002970:	f000 fd4d 	bl	800340e <Error_Handler>
  }
}
 8002974:	bf00      	nop
 8002976:	3750      	adds	r7, #80	; 0x50
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40023800 	.word	0x40023800
 8002980:	40007000 	.word	0x40007000

08002984 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002988:	4b17      	ldr	r3, [pc, #92]	; (80029e8 <MX_SPI1_Init+0x64>)
 800298a:	4a18      	ldr	r2, [pc, #96]	; (80029ec <MX_SPI1_Init+0x68>)
 800298c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800298e:	4b16      	ldr	r3, [pc, #88]	; (80029e8 <MX_SPI1_Init+0x64>)
 8002990:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002994:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002996:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <MX_SPI1_Init+0x64>)
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800299c:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <MX_SPI1_Init+0x64>)
 800299e:	2200      	movs	r2, #0
 80029a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029a2:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <MX_SPI1_Init+0x64>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029a8:	4b0f      	ldr	r3, [pc, #60]	; (80029e8 <MX_SPI1_Init+0x64>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029ae:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <MX_SPI1_Init+0x64>)
 80029b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80029b6:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <MX_SPI1_Init+0x64>)
 80029b8:	2218      	movs	r2, #24
 80029ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029bc:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <MX_SPI1_Init+0x64>)
 80029be:	2200      	movs	r2, #0
 80029c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029c2:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <MX_SPI1_Init+0x64>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029c8:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <MX_SPI1_Init+0x64>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80029ce:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <MX_SPI1_Init+0x64>)
 80029d0:	220a      	movs	r2, #10
 80029d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029d4:	4804      	ldr	r0, [pc, #16]	; (80029e8 <MX_SPI1_Init+0x64>)
 80029d6:	f004 fe61 	bl	800769c <HAL_SPI_Init>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80029e0:	f000 fd15 	bl	800340e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80029e4:	bf00      	nop
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	200015d8 	.word	0x200015d8
 80029ec:	40013000 	.word	0x40013000

080029f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08e      	sub	sp, #56	; 0x38
 80029f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	605a      	str	r2, [r3, #4]
 8002a00:	609a      	str	r2, [r3, #8]
 8002a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a04:	f107 0320 	add.w	r3, r7, #32
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a0e:	1d3b      	adds	r3, r7, #4
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]
 8002a1c:	615a      	str	r2, [r3, #20]
 8002a1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a20:	4b3d      	ldr	r3, [pc, #244]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002a22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2100-1;
 8002a28:	4b3b      	ldr	r3, [pc, #236]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002a2a:	f640 0233 	movw	r2, #2099	; 0x833
 8002a2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a30:	4b39      	ldr	r3, [pc, #228]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250-1;
 8002a36:	4b38      	ldr	r3, [pc, #224]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002a38:	22f9      	movs	r2, #249	; 0xf9
 8002a3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a3c:	4b36      	ldr	r3, [pc, #216]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a42:	4b35      	ldr	r3, [pc, #212]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a48:	4833      	ldr	r0, [pc, #204]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002a4a:	f005 f91d 	bl	8007c88 <HAL_TIM_Base_Init>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002a54:	f000 fcdb 	bl	800340e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a62:	4619      	mov	r1, r3
 8002a64:	482c      	ldr	r0, [pc, #176]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002a66:	f005 fd21 	bl	80084ac <HAL_TIM_ConfigClockSource>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002a70:	f000 fccd 	bl	800340e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a74:	4828      	ldr	r0, [pc, #160]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002a76:	f005 f9c7 	bl	8007e08 <HAL_TIM_PWM_Init>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002a80:	f000 fcc5 	bl	800340e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a84:	2300      	movs	r3, #0
 8002a86:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a8c:	f107 0320 	add.w	r3, r7, #32
 8002a90:	4619      	mov	r1, r3
 8002a92:	4821      	ldr	r0, [pc, #132]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002a94:	f006 f95c 	bl	8008d50 <HAL_TIMEx_MasterConfigSynchronization>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002a9e:	f000 fcb6 	bl	800340e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aa2:	2360      	movs	r3, #96	; 0x60
 8002aa4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ab2:	1d3b      	adds	r3, r7, #4
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4817      	ldr	r0, [pc, #92]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002aba:	f005 fc35 	bl	8008328 <HAL_TIM_PWM_ConfigChannel>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002ac4:	f000 fca3 	bl	800340e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ac8:	1d3b      	adds	r3, r7, #4
 8002aca:	2204      	movs	r2, #4
 8002acc:	4619      	mov	r1, r3
 8002ace:	4812      	ldr	r0, [pc, #72]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002ad0:	f005 fc2a 	bl	8008328 <HAL_TIM_PWM_ConfigChannel>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002ada:	f000 fc98 	bl	800340e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ade:	1d3b      	adds	r3, r7, #4
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	480c      	ldr	r0, [pc, #48]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002ae6:	f005 fc1f 	bl	8008328 <HAL_TIM_PWM_ConfigChannel>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002af0:	f000 fc8d 	bl	800340e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002af4:	1d3b      	adds	r3, r7, #4
 8002af6:	220c      	movs	r2, #12
 8002af8:	4619      	mov	r1, r3
 8002afa:	4807      	ldr	r0, [pc, #28]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002afc:	f005 fc14 	bl	8008328 <HAL_TIM_PWM_ConfigChannel>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8002b06:	f000 fc82 	bl	800340e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002b0a:	4803      	ldr	r0, [pc, #12]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002b0c:	f000 fe2a 	bl	8003764 <HAL_TIM_MspPostInit>

}
 8002b10:	bf00      	nop
 8002b12:	3738      	adds	r7, #56	; 0x38
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	20001630 	.word	0x20001630

08002b1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08e      	sub	sp, #56	; 0x38
 8002b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	605a      	str	r2, [r3, #4]
 8002b2c:	609a      	str	r2, [r3, #8]
 8002b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b30:	f107 0320 	add.w	r3, r7, #32
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b3a:	1d3b      	adds	r3, r7, #4
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	60da      	str	r2, [r3, #12]
 8002b46:	611a      	str	r2, [r3, #16]
 8002b48:	615a      	str	r2, [r3, #20]
 8002b4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b4c:	4b3d      	ldr	r3, [pc, #244]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002b4e:	4a3e      	ldr	r2, [pc, #248]	; (8002c48 <MX_TIM3_Init+0x12c>)
 8002b50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2100-1;
 8002b52:	4b3c      	ldr	r3, [pc, #240]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002b54:	f640 0233 	movw	r2, #2099	; 0x833
 8002b58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b5a:	4b3a      	ldr	r3, [pc, #232]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 250-1;
 8002b60:	4b38      	ldr	r3, [pc, #224]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002b62:	22f9      	movs	r2, #249	; 0xf9
 8002b64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b66:	4b37      	ldr	r3, [pc, #220]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b6c:	4b35      	ldr	r3, [pc, #212]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b72:	4834      	ldr	r0, [pc, #208]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002b74:	f005 f888 	bl	8007c88 <HAL_TIM_Base_Init>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002b7e:	f000 fc46 	bl	800340e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	482d      	ldr	r0, [pc, #180]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002b90:	f005 fc8c 	bl	80084ac <HAL_TIM_ConfigClockSource>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002b9a:	f000 fc38 	bl	800340e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002b9e:	4829      	ldr	r0, [pc, #164]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002ba0:	f005 f932 	bl	8007e08 <HAL_TIM_PWM_Init>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002baa:	f000 fc30 	bl	800340e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bb6:	f107 0320 	add.w	r3, r7, #32
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4821      	ldr	r0, [pc, #132]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002bbe:	f006 f8c7 	bl	8008d50 <HAL_TIMEx_MasterConfigSynchronization>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002bc8:	f000 fc21 	bl	800340e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bcc:	2360      	movs	r3, #96	; 0x60
 8002bce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bdc:	1d3b      	adds	r3, r7, #4
 8002bde:	2200      	movs	r2, #0
 8002be0:	4619      	mov	r1, r3
 8002be2:	4818      	ldr	r0, [pc, #96]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002be4:	f005 fba0 	bl	8008328 <HAL_TIM_PWM_ConfigChannel>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002bee:	f000 fc0e 	bl	800340e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bf2:	1d3b      	adds	r3, r7, #4
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4812      	ldr	r0, [pc, #72]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002bfa:	f005 fb95 	bl	8008328 <HAL_TIM_PWM_ConfigChannel>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002c04:	f000 fc03 	bl	800340e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c08:	1d3b      	adds	r3, r7, #4
 8002c0a:	2208      	movs	r2, #8
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	480d      	ldr	r0, [pc, #52]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002c10:	f005 fb8a 	bl	8008328 <HAL_TIM_PWM_ConfigChannel>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002c1a:	f000 fbf8 	bl	800340e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c1e:	1d3b      	adds	r3, r7, #4
 8002c20:	220c      	movs	r2, #12
 8002c22:	4619      	mov	r1, r3
 8002c24:	4807      	ldr	r0, [pc, #28]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002c26:	f005 fb7f 	bl	8008328 <HAL_TIM_PWM_ConfigChannel>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002c30:	f000 fbed 	bl	800340e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002c34:	4803      	ldr	r0, [pc, #12]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002c36:	f000 fd95 	bl	8003764 <HAL_TIM_MspPostInit>

}
 8002c3a:	bf00      	nop
 8002c3c:	3738      	adds	r7, #56	; 0x38
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	20001678 	.word	0x20001678
 8002c48:	40000400 	.word	0x40000400

08002c4c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08e      	sub	sp, #56	; 0x38
 8002c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	605a      	str	r2, [r3, #4]
 8002c5c:	609a      	str	r2, [r3, #8]
 8002c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c60:	f107 0320 	add.w	r3, r7, #32
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c6a:	1d3b      	adds	r3, r7, #4
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	60da      	str	r2, [r3, #12]
 8002c76:	611a      	str	r2, [r3, #16]
 8002c78:	615a      	str	r2, [r3, #20]
 8002c7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c7c:	4b32      	ldr	r3, [pc, #200]	; (8002d48 <MX_TIM4_Init+0xfc>)
 8002c7e:	4a33      	ldr	r2, [pc, #204]	; (8002d4c <MX_TIM4_Init+0x100>)
 8002c80:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2100-1;
 8002c82:	4b31      	ldr	r3, [pc, #196]	; (8002d48 <MX_TIM4_Init+0xfc>)
 8002c84:	f640 0233 	movw	r2, #2099	; 0x833
 8002c88:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c8a:	4b2f      	ldr	r3, [pc, #188]	; (8002d48 <MX_TIM4_Init+0xfc>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 250-1;
 8002c90:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <MX_TIM4_Init+0xfc>)
 8002c92:	22f9      	movs	r2, #249	; 0xf9
 8002c94:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c96:	4b2c      	ldr	r3, [pc, #176]	; (8002d48 <MX_TIM4_Init+0xfc>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c9c:	4b2a      	ldr	r3, [pc, #168]	; (8002d48 <MX_TIM4_Init+0xfc>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002ca2:	4829      	ldr	r0, [pc, #164]	; (8002d48 <MX_TIM4_Init+0xfc>)
 8002ca4:	f004 fff0 	bl	8007c88 <HAL_TIM_Base_Init>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002cae:	f000 fbae 	bl	800340e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002cb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4822      	ldr	r0, [pc, #136]	; (8002d48 <MX_TIM4_Init+0xfc>)
 8002cc0:	f005 fbf4 	bl	80084ac <HAL_TIM_ConfigClockSource>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002cca:	f000 fba0 	bl	800340e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002cce:	481e      	ldr	r0, [pc, #120]	; (8002d48 <MX_TIM4_Init+0xfc>)
 8002cd0:	f005 f89a 	bl	8007e08 <HAL_TIM_PWM_Init>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002cda:	f000 fb98 	bl	800340e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ce6:	f107 0320 	add.w	r3, r7, #32
 8002cea:	4619      	mov	r1, r3
 8002cec:	4816      	ldr	r0, [pc, #88]	; (8002d48 <MX_TIM4_Init+0xfc>)
 8002cee:	f006 f82f 	bl	8008d50 <HAL_TIMEx_MasterConfigSynchronization>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002cf8:	f000 fb89 	bl	800340e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cfc:	2360      	movs	r3, #96	; 0x60
 8002cfe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d04:	2300      	movs	r3, #0
 8002d06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d0c:	1d3b      	adds	r3, r7, #4
 8002d0e:	2204      	movs	r2, #4
 8002d10:	4619      	mov	r1, r3
 8002d12:	480d      	ldr	r0, [pc, #52]	; (8002d48 <MX_TIM4_Init+0xfc>)
 8002d14:	f005 fb08 	bl	8008328 <HAL_TIM_PWM_ConfigChannel>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002d1e:	f000 fb76 	bl	800340e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d22:	1d3b      	adds	r3, r7, #4
 8002d24:	2208      	movs	r2, #8
 8002d26:	4619      	mov	r1, r3
 8002d28:	4807      	ldr	r0, [pc, #28]	; (8002d48 <MX_TIM4_Init+0xfc>)
 8002d2a:	f005 fafd 	bl	8008328 <HAL_TIM_PWM_ConfigChannel>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8002d34:	f000 fb6b 	bl	800340e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002d38:	4803      	ldr	r0, [pc, #12]	; (8002d48 <MX_TIM4_Init+0xfc>)
 8002d3a:	f000 fd13 	bl	8003764 <HAL_TIM_MspPostInit>

}
 8002d3e:	bf00      	nop
 8002d40:	3738      	adds	r7, #56	; 0x38
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	200016c0 	.word	0x200016c0
 8002d4c:	40000800 	.word	0x40000800

08002d50 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d56:	f107 0308 	add.w	r3, r7, #8
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	605a      	str	r2, [r3, #4]
 8002d60:	609a      	str	r2, [r3, #8]
 8002d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d64:	463b      	mov	r3, r7
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002d6c:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <MX_TIM5_Init+0x94>)
 8002d6e:	4a1e      	ldr	r2, [pc, #120]	; (8002de8 <MX_TIM5_Init+0x98>)
 8002d70:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8400-1;
 8002d72:	4b1c      	ldr	r3, [pc, #112]	; (8002de4 <MX_TIM5_Init+0x94>)
 8002d74:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002d78:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d7a:	4b1a      	ldr	r3, [pc, #104]	; (8002de4 <MX_TIM5_Init+0x94>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000;
 8002d80:	4b18      	ldr	r3, [pc, #96]	; (8002de4 <MX_TIM5_Init+0x94>)
 8002d82:	f242 7210 	movw	r2, #10000	; 0x2710
 8002d86:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d88:	4b16      	ldr	r3, [pc, #88]	; (8002de4 <MX_TIM5_Init+0x94>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d8e:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <MX_TIM5_Init+0x94>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002d94:	4813      	ldr	r0, [pc, #76]	; (8002de4 <MX_TIM5_Init+0x94>)
 8002d96:	f004 ff77 	bl	8007c88 <HAL_TIM_Base_Init>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002da0:	f000 fb35 	bl	800340e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002da8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002daa:	f107 0308 	add.w	r3, r7, #8
 8002dae:	4619      	mov	r1, r3
 8002db0:	480c      	ldr	r0, [pc, #48]	; (8002de4 <MX_TIM5_Init+0x94>)
 8002db2:	f005 fb7b 	bl	80084ac <HAL_TIM_ConfigClockSource>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002dbc:	f000 fb27 	bl	800340e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002dc8:	463b      	mov	r3, r7
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4805      	ldr	r0, [pc, #20]	; (8002de4 <MX_TIM5_Init+0x94>)
 8002dce:	f005 ffbf 	bl	8008d50 <HAL_TIMEx_MasterConfigSynchronization>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002dd8:	f000 fb19 	bl	800340e <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002ddc:	bf00      	nop
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	20001708 	.word	0x20001708
 8002de8:	40000c00 	.word	0x40000c00

08002dec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b092      	sub	sp, #72	; 0x48
 8002df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002df2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	60da      	str	r2, [r3, #12]
 8002e0a:	611a      	str	r2, [r3, #16]
 8002e0c:	615a      	str	r2, [r3, #20]
 8002e0e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e10:	1d3b      	adds	r3, r7, #4
 8002e12:	2220      	movs	r2, #32
 8002e14:	2100      	movs	r1, #0
 8002e16:	4618      	mov	r0, r3
 8002e18:	f00e fa8e 	bl	8011338 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002e1c:	4b39      	ldr	r3, [pc, #228]	; (8002f04 <MX_TIM8_Init+0x118>)
 8002e1e:	4a3a      	ldr	r2, [pc, #232]	; (8002f08 <MX_TIM8_Init+0x11c>)
 8002e20:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002e22:	4b38      	ldr	r3, [pc, #224]	; (8002f04 <MX_TIM8_Init+0x118>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e28:	4b36      	ldr	r3, [pc, #216]	; (8002f04 <MX_TIM8_Init+0x118>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002e2e:	4b35      	ldr	r3, [pc, #212]	; (8002f04 <MX_TIM8_Init+0x118>)
 8002e30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e34:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e36:	4b33      	ldr	r3, [pc, #204]	; (8002f04 <MX_TIM8_Init+0x118>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002e3c:	4b31      	ldr	r3, [pc, #196]	; (8002f04 <MX_TIM8_Init+0x118>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e42:	4b30      	ldr	r3, [pc, #192]	; (8002f04 <MX_TIM8_Init+0x118>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002e48:	482e      	ldr	r0, [pc, #184]	; (8002f04 <MX_TIM8_Init+0x118>)
 8002e4a:	f004 ffdd 	bl	8007e08 <HAL_TIM_PWM_Init>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002e54:	f000 fadb 	bl	800340e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002e60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e64:	4619      	mov	r1, r3
 8002e66:	4827      	ldr	r0, [pc, #156]	; (8002f04 <MX_TIM8_Init+0x118>)
 8002e68:	f005 ff72 	bl	8008d50 <HAL_TIMEx_MasterConfigSynchronization>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002e72:	f000 facc 	bl	800340e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e76:	2360      	movs	r3, #96	; 0x60
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e82:	2300      	movs	r3, #0
 8002e84:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e86:	2300      	movs	r3, #0
 8002e88:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e96:	2208      	movs	r2, #8
 8002e98:	4619      	mov	r1, r3
 8002e9a:	481a      	ldr	r0, [pc, #104]	; (8002f04 <MX_TIM8_Init+0x118>)
 8002e9c:	f005 fa44 	bl	8008328 <HAL_TIM_PWM_ConfigChannel>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002ea6:	f000 fab2 	bl	800340e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eae:	220c      	movs	r2, #12
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4814      	ldr	r0, [pc, #80]	; (8002f04 <MX_TIM8_Init+0x118>)
 8002eb4:	f005 fa38 	bl	8008328 <HAL_TIM_PWM_ConfigChannel>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8002ebe:	f000 faa6 	bl	800340e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ed6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002eda:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002edc:	2300      	movs	r3, #0
 8002ede:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002ee0:	1d3b      	adds	r3, r7, #4
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4807      	ldr	r0, [pc, #28]	; (8002f04 <MX_TIM8_Init+0x118>)
 8002ee6:	f005 ffaf 	bl	8008e48 <HAL_TIMEx_ConfigBreakDeadTime>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8002ef0:	f000 fa8d 	bl	800340e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002ef4:	4803      	ldr	r0, [pc, #12]	; (8002f04 <MX_TIM8_Init+0x118>)
 8002ef6:	f000 fc35 	bl	8003764 <HAL_TIM_MspPostInit>

}
 8002efa:	bf00      	nop
 8002efc:	3748      	adds	r7, #72	; 0x48
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20001750 	.word	0x20001750
 8002f08:	40010400 	.word	0x40010400

08002f0c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002f10:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <MX_TIM13_Init+0x40>)
 8002f12:	4a0f      	ldr	r2, [pc, #60]	; (8002f50 <MX_TIM13_Init+0x44>)
 8002f14:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8400-1;
 8002f16:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <MX_TIM13_Init+0x40>)
 8002f18:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002f1c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f1e:	4b0b      	ldr	r3, [pc, #44]	; (8002f4c <MX_TIM13_Init+0x40>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 50000;
 8002f24:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <MX_TIM13_Init+0x40>)
 8002f26:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002f2a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f2c:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <MX_TIM13_Init+0x40>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f32:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <MX_TIM13_Init+0x40>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002f38:	4804      	ldr	r0, [pc, #16]	; (8002f4c <MX_TIM13_Init+0x40>)
 8002f3a:	f004 fea5 	bl	8007c88 <HAL_TIM_Base_Init>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8002f44:	f000 fa63 	bl	800340e <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002f48:	bf00      	nop
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20001798 	.word	0x20001798
 8002f50:	40001c00 	.word	0x40001c00

08002f54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f58:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <MX_USART3_UART_Init+0x4c>)
 8002f5a:	4a12      	ldr	r2, [pc, #72]	; (8002fa4 <MX_USART3_UART_Init+0x50>)
 8002f5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002f5e:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <MX_USART3_UART_Init+0x4c>)
 8002f60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f66:	4b0e      	ldr	r3, [pc, #56]	; (8002fa0 <MX_USART3_UART_Init+0x4c>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f6c:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <MX_USART3_UART_Init+0x4c>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f72:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <MX_USART3_UART_Init+0x4c>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f78:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <MX_USART3_UART_Init+0x4c>)
 8002f7a:	220c      	movs	r2, #12
 8002f7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f7e:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <MX_USART3_UART_Init+0x4c>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f84:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <MX_USART3_UART_Init+0x4c>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f8a:	4805      	ldr	r0, [pc, #20]	; (8002fa0 <MX_USART3_UART_Init+0x4c>)
 8002f8c:	f005 ffc2 	bl	8008f14 <HAL_UART_Init>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002f96:	f000 fa3a 	bl	800340e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	200018a0 	.word	0x200018a0
 8002fa4:	40004800 	.word	0x40004800

08002fa8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	607b      	str	r3, [r7, #4]
 8002fb2:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <MX_DMA_Init+0x4c>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	4a0f      	ldr	r2, [pc, #60]	; (8002ff4 <MX_DMA_Init+0x4c>)
 8002fb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fbe:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <MX_DMA_Init+0x4c>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc6:	607b      	str	r3, [r7, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2100      	movs	r1, #0
 8002fce:	203c      	movs	r0, #60	; 0x3c
 8002fd0:	f001 fcb9 	bl	8004946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002fd4:	203c      	movs	r0, #60	; 0x3c
 8002fd6:	f001 fcd2 	bl	800497e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2100      	movs	r1, #0
 8002fde:	2046      	movs	r0, #70	; 0x46
 8002fe0:	f001 fcb1 	bl	8004946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002fe4:	2046      	movs	r0, #70	; 0x46
 8002fe6:	f001 fcca 	bl	800497e <HAL_NVIC_EnableIRQ>

}
 8002fea:	bf00      	nop
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40023800 	.word	0x40023800

08002ff8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08c      	sub	sp, #48	; 0x30
 8002ffc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ffe:	f107 031c 	add.w	r3, r7, #28
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	605a      	str	r2, [r3, #4]
 8003008:	609a      	str	r2, [r3, #8]
 800300a:	60da      	str	r2, [r3, #12]
 800300c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	61bb      	str	r3, [r7, #24]
 8003012:	4ba3      	ldr	r3, [pc, #652]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	4aa2      	ldr	r2, [pc, #648]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 8003018:	f043 0310 	orr.w	r3, r3, #16
 800301c:	6313      	str	r3, [r2, #48]	; 0x30
 800301e:	4ba0      	ldr	r3, [pc, #640]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	61bb      	str	r3, [r7, #24]
 8003028:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	4b9c      	ldr	r3, [pc, #624]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	4a9b      	ldr	r2, [pc, #620]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 8003034:	f043 0304 	orr.w	r3, r3, #4
 8003038:	6313      	str	r3, [r2, #48]	; 0x30
 800303a:	4b99      	ldr	r3, [pc, #612]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	613b      	str	r3, [r7, #16]
 800304a:	4b95      	ldr	r3, [pc, #596]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	4a94      	ldr	r2, [pc, #592]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 8003050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003054:	6313      	str	r3, [r2, #48]	; 0x30
 8003056:	4b92      	ldr	r3, [pc, #584]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	4b8e      	ldr	r3, [pc, #568]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	4a8d      	ldr	r2, [pc, #564]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	6313      	str	r3, [r2, #48]	; 0x30
 8003072:	4b8b      	ldr	r3, [pc, #556]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	4b87      	ldr	r3, [pc, #540]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	4a86      	ldr	r2, [pc, #536]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 8003088:	f043 0302 	orr.w	r3, r3, #2
 800308c:	6313      	str	r3, [r2, #48]	; 0x30
 800308e:	4b84      	ldr	r3, [pc, #528]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	60bb      	str	r3, [r7, #8]
 8003098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	607b      	str	r3, [r7, #4]
 800309e:	4b80      	ldr	r3, [pc, #512]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	4a7f      	ldr	r2, [pc, #508]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 80030a4:	f043 0308 	orr.w	r3, r3, #8
 80030a8:	6313      	str	r3, [r2, #48]	; 0x30
 80030aa:	4b7d      	ldr	r3, [pc, #500]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	607b      	str	r3, [r7, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TEST_OUTPUT_1_Pin|TEST_OUTPUT_2_Pin, GPIO_PIN_RESET);
 80030b6:	2200      	movs	r2, #0
 80030b8:	210c      	movs	r1, #12
 80030ba:	487a      	ldr	r0, [pc, #488]	; (80032a4 <MX_GPIO_Init+0x2ac>)
 80030bc:	f002 fa18 	bl	80054f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80030c0:	2201      	movs	r2, #1
 80030c2:	2101      	movs	r1, #1
 80030c4:	4878      	ldr	r0, [pc, #480]	; (80032a8 <MX_GPIO_Init+0x2b0>)
 80030c6:	f002 fa13 	bl	80054f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_RESET);
 80030ca:	2200      	movs	r2, #0
 80030cc:	2108      	movs	r1, #8
 80030ce:	4877      	ldr	r0, [pc, #476]	; (80032ac <MX_GPIO_Init+0x2b4>)
 80030d0:	f002 fa0e 	bl	80054f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TEST_OUT_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80030d4:	2200      	movs	r2, #0
 80030d6:	f64f 0110 	movw	r1, #63504	; 0xf810
 80030da:	4875      	ldr	r0, [pc, #468]	; (80032b0 <MX_GPIO_Init+0x2b8>)
 80030dc:	f002 fa08 	bl	80054f0 <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : TEST_OUTPUT_1_Pin */
  GPIO_InitStruct.Pin = TEST_OUTPUT_1_Pin;
 80030e0:	2304      	movs	r3, #4
 80030e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030e4:	2301      	movs	r3, #1
 80030e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80030e8:	2302      	movs	r3, #2
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ec:	2303      	movs	r3, #3
 80030ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUTPUT_1_GPIO_Port, &GPIO_InitStruct);
 80030f0:	f107 031c 	add.w	r3, r7, #28
 80030f4:	4619      	mov	r1, r3
 80030f6:	486b      	ldr	r0, [pc, #428]	; (80032a4 <MX_GPIO_Init+0x2ac>)
 80030f8:	f002 f85e 	bl	80051b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUTPUT_2_Pin */
  GPIO_InitStruct.Pin = TEST_OUTPUT_2_Pin;
 80030fc:	2308      	movs	r3, #8
 80030fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003100:	2301      	movs	r3, #1
 8003102:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003104:	2300      	movs	r3, #0
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003108:	2300      	movs	r3, #0
 800310a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUTPUT_2_GPIO_Port, &GPIO_InitStruct);
 800310c:	f107 031c 	add.w	r3, r7, #28
 8003110:	4619      	mov	r1, r3
 8003112:	4864      	ldr	r0, [pc, #400]	; (80032a4 <MX_GPIO_Init+0x2ac>)
 8003114:	f002 f850 	bl	80051b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003118:	2301      	movs	r3, #1
 800311a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800311c:	2301      	movs	r3, #1
 800311e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003120:	2300      	movs	r3, #0
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003124:	2300      	movs	r3, #0
 8003126:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003128:	f107 031c 	add.w	r3, r7, #28
 800312c:	4619      	mov	r1, r3
 800312e:	485e      	ldr	r0, [pc, #376]	; (80032a8 <MX_GPIO_Init+0x2b0>)
 8003130:	f002 f842 	bl	80051b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003134:	2308      	movs	r3, #8
 8003136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003138:	2302      	movs	r3, #2
 800313a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313c:	2300      	movs	r3, #0
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003140:	2300      	movs	r3, #0
 8003142:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003144:	2305      	movs	r3, #5
 8003146:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003148:	f107 031c 	add.w	r3, r7, #28
 800314c:	4619      	mov	r1, r3
 800314e:	4856      	ldr	r0, [pc, #344]	; (80032a8 <MX_GPIO_Init+0x2b0>)
 8003150:	f002 f832 	bl	80051b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003154:	2301      	movs	r3, #1
 8003156:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003158:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800315c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315e:	2300      	movs	r3, #0
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003162:	f107 031c 	add.w	r3, r7, #28
 8003166:	4619      	mov	r1, r3
 8003168:	4850      	ldr	r0, [pc, #320]	; (80032ac <MX_GPIO_Init+0x2b4>)
 800316a:	f002 f825 	bl	80051b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_SD_Pin */
  GPIO_InitStruct.Pin = CS_SD_Pin;
 800316e:	2308      	movs	r3, #8
 8003170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003172:	2301      	movs	r3, #1
 8003174:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	2300      	movs	r3, #0
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800317a:	2302      	movs	r3, #2
 800317c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_SD_GPIO_Port, &GPIO_InitStruct);
 800317e:	f107 031c 	add.w	r3, r7, #28
 8003182:	4619      	mov	r1, r3
 8003184:	4849      	ldr	r0, [pc, #292]	; (80032ac <MX_GPIO_Init+0x2b4>)
 8003186:	f002 f817 	bl	80051b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800318a:	2310      	movs	r3, #16
 800318c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318e:	2302      	movs	r3, #2
 8003190:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003192:	2300      	movs	r3, #0
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003196:	2300      	movs	r3, #0
 8003198:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800319a:	2306      	movs	r3, #6
 800319c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800319e:	f107 031c 	add.w	r3, r7, #28
 80031a2:	4619      	mov	r1, r3
 80031a4:	4841      	ldr	r0, [pc, #260]	; (80032ac <MX_GPIO_Init+0x2b4>)
 80031a6:	f002 f807 	bl	80051b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80031aa:	2304      	movs	r3, #4
 80031ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031ae:	2300      	movs	r3, #0
 80031b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b6:	f107 031c 	add.w	r3, r7, #28
 80031ba:	4619      	mov	r1, r3
 80031bc:	483d      	ldr	r0, [pc, #244]	; (80032b4 <MX_GPIO_Init+0x2bc>)
 80031be:	f001 fffb 	bl	80051b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80031c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c8:	2302      	movs	r3, #2
 80031ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d0:	2300      	movs	r3, #0
 80031d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031d4:	2305      	movs	r3, #5
 80031d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80031d8:	f107 031c 	add.w	r3, r7, #28
 80031dc:	4619      	mov	r1, r3
 80031de:	4835      	ldr	r0, [pc, #212]	; (80032b4 <MX_GPIO_Init+0x2bc>)
 80031e0:	f001 ffea 	bl	80051b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUT_Pin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 80031e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ea:	2301      	movs	r3, #1
 80031ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031ee:	2301      	movs	r3, #1
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f2:	2303      	movs	r3, #3
 80031f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 80031f6:	f107 031c 	add.w	r3, r7, #28
 80031fa:	4619      	mov	r1, r3
 80031fc:	482c      	ldr	r0, [pc, #176]	; (80032b0 <MX_GPIO_Init+0x2b8>)
 80031fe:	f001 ffdb 	bl	80051b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003202:	f24f 0310 	movw	r3, #61456	; 0xf010
 8003206:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003208:	2301      	movs	r3, #1
 800320a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320c:	2300      	movs	r3, #0
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003210:	2300      	movs	r3, #0
 8003212:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003214:	f107 031c 	add.w	r3, r7, #28
 8003218:	4619      	mov	r1, r3
 800321a:	4825      	ldr	r0, [pc, #148]	; (80032b0 <MX_GPIO_Init+0x2b8>)
 800321c:	f001 ffcc 	bl	80051b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003220:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003226:	2302      	movs	r3, #2
 8003228:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322a:	2300      	movs	r3, #0
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322e:	2300      	movs	r3, #0
 8003230:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003232:	2306      	movs	r3, #6
 8003234:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003236:	f107 031c 	add.w	r3, r7, #28
 800323a:	4619      	mov	r1, r3
 800323c:	481a      	ldr	r0, [pc, #104]	; (80032a8 <MX_GPIO_Init+0x2b0>)
 800323e:	f001 ffbb 	bl	80051b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003242:	2320      	movs	r3, #32
 8003244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003246:	2300      	movs	r3, #0
 8003248:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324a:	2300      	movs	r3, #0
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800324e:	f107 031c 	add.w	r3, r7, #28
 8003252:	4619      	mov	r1, r3
 8003254:	4816      	ldr	r0, [pc, #88]	; (80032b0 <MX_GPIO_Init+0x2b8>)
 8003256:	f001 ffaf 	bl	80051b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800325a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800325e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003260:	2312      	movs	r3, #18
 8003262:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003264:	2301      	movs	r3, #1
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003268:	2300      	movs	r3, #0
 800326a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800326c:	2304      	movs	r3, #4
 800326e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003270:	f107 031c 	add.w	r3, r7, #28
 8003274:	4619      	mov	r1, r3
 8003276:	480f      	ldr	r0, [pc, #60]	; (80032b4 <MX_GPIO_Init+0x2bc>)
 8003278:	f001 ff9e 	bl	80051b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800327c:	2302      	movs	r3, #2
 800327e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003280:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003284:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003286:	2300      	movs	r3, #0
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800328a:	f107 031c 	add.w	r3, r7, #28
 800328e:	4619      	mov	r1, r3
 8003290:	4804      	ldr	r0, [pc, #16]	; (80032a4 <MX_GPIO_Init+0x2ac>)
 8003292:	f001 ff91 	bl	80051b8 <HAL_GPIO_Init>

}
 8003296:	bf00      	nop
 8003298:	3730      	adds	r7, #48	; 0x30
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800
 80032a4:	40021000 	.word	0x40021000
 80032a8:	40020800 	.word	0x40020800
 80032ac:	40020000 	.word	0x40020000
 80032b0:	40020c00 	.word	0x40020c00
 80032b4:	40020400 	.word	0x40020400

080032b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// ------------------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
	if(htim == &htim13)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a07      	ldr	r2, [pc, #28]	; (80032e0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d106      	bne.n	80032d6 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		HAL_GPIO_TogglePin(GPIOE, TEST_OUTPUT_2_Pin);
 80032c8:	2108      	movs	r1, #8
 80032ca:	4806      	ldr	r0, [pc, #24]	; (80032e4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80032cc:	f002 f929 	bl	8005522 <HAL_GPIO_TogglePin>
		interrupt_flag = 1;
 80032d0:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80032d2:	2201      	movs	r2, #1
 80032d4:	701a      	strb	r2, [r3, #0]
		//HAL_TIM_Base_Stop_IT(&htim13);
	}
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20001798 	.word	0x20001798
 80032e4:	40021000 	.word	0x40021000
 80032e8:	200015d7 	.word	0x200015d7

080032ec <HAL_UART_RxCpltCallback>:
// ------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART3)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a15      	ldr	r2, [pc, #84]	; (8003350 <HAL_UART_RxCpltCallback+0x64>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d123      	bne.n	8003346 <HAL_UART_RxCpltCallback+0x5a>
	{
		if(uart_RX_data != 13)
 80032fe:	4b15      	ldr	r3, [pc, #84]	; (8003354 <HAL_UART_RxCpltCallback+0x68>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b0d      	cmp	r3, #13
 8003304:	d00d      	beq.n	8003322 <HAL_UART_RxCpltCallback+0x36>
		{
			rx_buf_command[count_chars] = uart_RX_data;
 8003306:	4b14      	ldr	r3, [pc, #80]	; (8003358 <HAL_UART_RxCpltCallback+0x6c>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	461a      	mov	r2, r3
 800330c:	4b11      	ldr	r3, [pc, #68]	; (8003354 <HAL_UART_RxCpltCallback+0x68>)
 800330e:	7819      	ldrb	r1, [r3, #0]
 8003310:	4b12      	ldr	r3, [pc, #72]	; (800335c <HAL_UART_RxCpltCallback+0x70>)
 8003312:	5499      	strb	r1, [r3, r2]
			count_chars++;
 8003314:	4b10      	ldr	r3, [pc, #64]	; (8003358 <HAL_UART_RxCpltCallback+0x6c>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	3301      	adds	r3, #1
 800331a:	b2da      	uxtb	r2, r3
 800331c:	4b0e      	ldr	r3, [pc, #56]	; (8003358 <HAL_UART_RxCpltCallback+0x6c>)
 800331e:	701a      	strb	r2, [r3, #0]
 8003320:	e005      	b.n	800332e <HAL_UART_RxCpltCallback+0x42>
		}
		else
		{
			flag_received_command = true;
 8003322:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <HAL_UART_RxCpltCallback+0x74>)
 8003324:	2201      	movs	r2, #1
 8003326:	701a      	strb	r2, [r3, #0]
			count_chars= 0;
 8003328:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <HAL_UART_RxCpltCallback+0x6c>)
 800332a:	2200      	movs	r2, #0
 800332c:	701a      	strb	r2, [r3, #0]
		}


		if(uart_RX_data == 'z')						// If was sent "STOP animation" command. 'z' key
 800332e:	4b09      	ldr	r3, [pc, #36]	; (8003354 <HAL_UART_RxCpltCallback+0x68>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b7a      	cmp	r3, #122	; 0x7a
 8003334:	d102      	bne.n	800333c <HAL_UART_RxCpltCallback+0x50>
		{
			interrupt_animation_flag = true;
 8003336:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <HAL_UART_RxCpltCallback+0x78>)
 8003338:	2201      	movs	r2, #1
 800333a:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, &uart_RX_data, 1);
 800333c:	2201      	movs	r2, #1
 800333e:	4905      	ldr	r1, [pc, #20]	; (8003354 <HAL_UART_RxCpltCallback+0x68>)
 8003340:	4809      	ldr	r0, [pc, #36]	; (8003368 <HAL_UART_RxCpltCallback+0x7c>)
 8003342:	f005 ff0b 	bl	800915c <HAL_UART_Receive_IT>
		//HAL_UART_Transmit_IT(&huart3, &uart_RX_data, 1);
	}
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40004800 	.word	0x40004800
 8003354:	200015c8 	.word	0x200015c8
 8003358:	200015d6 	.word	0x200015d6
 800335c:	200015cc 	.word	0x200015cc
 8003360:	200015c9 	.word	0x200015c9
 8003364:	200015ca 	.word	0x200015ca
 8003368:	200018a0 	.word	0x200018a0

0800336c <all_leds_animantion_ok_state>:
// ------------------------------------------------------------------------------------
void all_leds_animantion_ok_state(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
	turn_all_leds_from_centr(10, 0, 0, 150);
 8003370:	2396      	movs	r3, #150	; 0x96
 8003372:	2200      	movs	r2, #0
 8003374:	2100      	movs	r1, #0
 8003376:	200a      	movs	r0, #10
 8003378:	f7ff f8d6 	bl	8002528 <turn_all_leds_from_centr>
	test_from_midle_to_corner();
 800337c:	f7fd fd20 	bl	8000dc0 <test_from_midle_to_corner>

	HAL_Delay(500);
 8003380:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003384:	f001 f9e0 	bl	8004748 <HAL_Delay>

	turn_all_leds_from_centr(20, 0, 0, 0);
 8003388:	2300      	movs	r3, #0
 800338a:	2200      	movs	r2, #0
 800338c:	2100      	movs	r1, #0
 800338e:	2014      	movs	r0, #20
 8003390:	f7ff f8ca 	bl	8002528 <turn_all_leds_from_centr>
	stop_light_all_turn_off();
 8003394:	f7fd fd0c 	bl	8000db0 <stop_light_all_turn_off>
}
 8003398:	bf00      	nop
 800339a:	bd80      	pop	{r7, pc}

0800339c <all_leds_animantion_error_state>:
// -----------------------------------------------------------------------------
void all_leds_animantion_error_state(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af02      	add	r7, sp, #8
	turn_all_leds_from_centr(7, 150, 0, 0);
 80033a2:	2300      	movs	r3, #0
 80033a4:	2200      	movs	r2, #0
 80033a6:	2196      	movs	r1, #150	; 0x96
 80033a8:	2007      	movs	r0, #7
 80033aa:	f7ff f8bd 	bl	8002528 <turn_all_leds_from_centr>
	test_from_midle_to_corner();
 80033ae:	f7fd fd07 	bl	8000dc0 <test_from_midle_to_corner>

	for(uint8_t i = 0; i < 85; i ++)
 80033b2:	2300      	movs	r3, #0
 80033b4:	71fb      	strb	r3, [r7, #7]
 80033b6:	e021      	b.n	80033fc <all_leds_animantion_error_state+0x60>
	{
		set_left_one_rgbw_led(i, 0, 0, 0, 0);
 80033b8:	79f8      	ldrb	r0, [r7, #7]
 80033ba:	2300      	movs	r3, #0
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	2300      	movs	r3, #0
 80033c0:	2200      	movs	r2, #0
 80033c2:	2100      	movs	r1, #0
 80033c4:	f7ff f901 	bl	80025ca <set_left_one_rgbw_led>
		set_right_one_rgbw_led(i, 0, 0, 0, 0);
 80033c8:	79f8      	ldrb	r0, [r7, #7]
 80033ca:	2300      	movs	r3, #0
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	2300      	movs	r3, #0
 80033d0:	2200      	movs	r2, #0
 80033d2:	2100      	movs	r1, #0
 80033d4:	f7ff f91a 	bl	800260c <set_right_one_rgbw_led>
		while (!ARGB_Show_left());  			// Update
 80033d8:	bf00      	nop
 80033da:	f7fe f82f 	bl	800143c <ARGB_Show_left>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0fa      	beq.n	80033da <all_leds_animantion_error_state+0x3e>
		while (!ARGB_Show_right());  			// Update
 80033e4:	bf00      	nop
 80033e6:	f7fe f9f5 	bl	80017d4 <ARGB_Show_right>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0fa      	beq.n	80033e6 <all_leds_animantion_error_state+0x4a>
		HAL_Delay(3);
 80033f0:	2003      	movs	r0, #3
 80033f2:	f001 f9a9 	bl	8004748 <HAL_Delay>
	for(uint8_t i = 0; i < 85; i ++)
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	3301      	adds	r3, #1
 80033fa:	71fb      	strb	r3, [r7, #7]
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	2b54      	cmp	r3, #84	; 0x54
 8003400:	d9da      	bls.n	80033b8 <all_leds_animantion_error_state+0x1c>
	}

	stop_light_all_turn_off();
 8003402:	f7fd fcd5 	bl	8000db0 <stop_light_all_turn_off>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800340e:	b480      	push	{r7}
 8003410:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003412:	b672      	cpsid	i
}
 8003414:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003416:	e7fe      	b.n	8003416 <Error_Handler+0x8>

08003418 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800341e:	2300      	movs	r3, #0
 8003420:	607b      	str	r3, [r7, #4]
 8003422:	4b10      	ldr	r3, [pc, #64]	; (8003464 <HAL_MspInit+0x4c>)
 8003424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003426:	4a0f      	ldr	r2, [pc, #60]	; (8003464 <HAL_MspInit+0x4c>)
 8003428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800342c:	6453      	str	r3, [r2, #68]	; 0x44
 800342e:	4b0d      	ldr	r3, [pc, #52]	; (8003464 <HAL_MspInit+0x4c>)
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003436:	607b      	str	r3, [r7, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800343a:	2300      	movs	r3, #0
 800343c:	603b      	str	r3, [r7, #0]
 800343e:	4b09      	ldr	r3, [pc, #36]	; (8003464 <HAL_MspInit+0x4c>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	4a08      	ldr	r2, [pc, #32]	; (8003464 <HAL_MspInit+0x4c>)
 8003444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003448:	6413      	str	r3, [r2, #64]	; 0x40
 800344a:	4b06      	ldr	r3, [pc, #24]	; (8003464 <HAL_MspInit+0x4c>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003456:	2007      	movs	r0, #7
 8003458:	f001 fa6a 	bl	8004930 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800345c:	bf00      	nop
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40023800 	.word	0x40023800

08003468 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08a      	sub	sp, #40	; 0x28
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003470:	f107 0314 	add.w	r3, r7, #20
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	605a      	str	r2, [r3, #4]
 800347a:	609a      	str	r2, [r3, #8]
 800347c:	60da      	str	r2, [r3, #12]
 800347e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a19      	ldr	r2, [pc, #100]	; (80034ec <HAL_SPI_MspInit+0x84>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d12b      	bne.n	80034e2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	4b18      	ldr	r3, [pc, #96]	; (80034f0 <HAL_SPI_MspInit+0x88>)
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	4a17      	ldr	r2, [pc, #92]	; (80034f0 <HAL_SPI_MspInit+0x88>)
 8003494:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003498:	6453      	str	r3, [r2, #68]	; 0x44
 800349a:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <HAL_SPI_MspInit+0x88>)
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <HAL_SPI_MspInit+0x88>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	4a10      	ldr	r2, [pc, #64]	; (80034f0 <HAL_SPI_MspInit+0x88>)
 80034b0:	f043 0301 	orr.w	r3, r3, #1
 80034b4:	6313      	str	r3, [r2, #48]	; 0x30
 80034b6:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <HAL_SPI_MspInit+0x88>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80034c2:	23e0      	movs	r3, #224	; 0xe0
 80034c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c6:	2302      	movs	r3, #2
 80034c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ce:	2303      	movs	r3, #3
 80034d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034d2:	2305      	movs	r3, #5
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d6:	f107 0314 	add.w	r3, r7, #20
 80034da:	4619      	mov	r1, r3
 80034dc:	4805      	ldr	r0, [pc, #20]	; (80034f4 <HAL_SPI_MspInit+0x8c>)
 80034de:	f001 fe6b 	bl	80051b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80034e2:	bf00      	nop
 80034e4:	3728      	adds	r7, #40	; 0x28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40013000 	.word	0x40013000
 80034f0:	40023800 	.word	0x40023800
 80034f4:	40020000 	.word	0x40020000

080034f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b088      	sub	sp, #32
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003508:	d116      	bne.n	8003538 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
 800350e:	4b3c      	ldr	r3, [pc, #240]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	4a3b      	ldr	r2, [pc, #236]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	6413      	str	r3, [r2, #64]	; 0x40
 800351a:	4b39      	ldr	r3, [pc, #228]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	61fb      	str	r3, [r7, #28]
 8003524:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003526:	2200      	movs	r2, #0
 8003528:	2100      	movs	r1, #0
 800352a:	201c      	movs	r0, #28
 800352c:	f001 fa0b 	bl	8004946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003530:	201c      	movs	r0, #28
 8003532:	f001 fa24 	bl	800497e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8003536:	e05e      	b.n	80035f6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM3)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a31      	ldr	r2, [pc, #196]	; (8003604 <HAL_TIM_Base_MspInit+0x10c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d10e      	bne.n	8003560 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003542:	2300      	movs	r3, #0
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	4b2e      	ldr	r3, [pc, #184]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	4a2d      	ldr	r2, [pc, #180]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 800354c:	f043 0302 	orr.w	r3, r3, #2
 8003550:	6413      	str	r3, [r2, #64]	; 0x40
 8003552:	4b2b      	ldr	r3, [pc, #172]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	61bb      	str	r3, [r7, #24]
 800355c:	69bb      	ldr	r3, [r7, #24]
}
 800355e:	e04a      	b.n	80035f6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM4)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a28      	ldr	r2, [pc, #160]	; (8003608 <HAL_TIM_Base_MspInit+0x110>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d10e      	bne.n	8003588 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	4b24      	ldr	r3, [pc, #144]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	4a23      	ldr	r2, [pc, #140]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 8003574:	f043 0304 	orr.w	r3, r3, #4
 8003578:	6413      	str	r3, [r2, #64]	; 0x40
 800357a:	4b21      	ldr	r3, [pc, #132]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f003 0304 	and.w	r3, r3, #4
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	697b      	ldr	r3, [r7, #20]
}
 8003586:	e036      	b.n	80035f6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM5)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a1f      	ldr	r2, [pc, #124]	; (800360c <HAL_TIM_Base_MspInit+0x114>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d116      	bne.n	80035c0 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	613b      	str	r3, [r7, #16]
 8003596:	4b1a      	ldr	r3, [pc, #104]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	4a19      	ldr	r2, [pc, #100]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 800359c:	f043 0308 	orr.w	r3, r3, #8
 80035a0:	6413      	str	r3, [r2, #64]	; 0x40
 80035a2:	4b17      	ldr	r3, [pc, #92]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80035ae:	2200      	movs	r2, #0
 80035b0:	2100      	movs	r1, #0
 80035b2:	2032      	movs	r0, #50	; 0x32
 80035b4:	f001 f9c7 	bl	8004946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80035b8:	2032      	movs	r0, #50	; 0x32
 80035ba:	f001 f9e0 	bl	800497e <HAL_NVIC_EnableIRQ>
}
 80035be:	e01a      	b.n	80035f6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a12      	ldr	r2, [pc, #72]	; (8003610 <HAL_TIM_Base_MspInit+0x118>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d115      	bne.n	80035f6 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	4a0b      	ldr	r2, [pc, #44]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 80035d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035d8:	6413      	str	r3, [r2, #64]	; 0x40
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80035e6:	2200      	movs	r2, #0
 80035e8:	2100      	movs	r1, #0
 80035ea:	202c      	movs	r0, #44	; 0x2c
 80035ec:	f001 f9ab 	bl	8004946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80035f0:	202c      	movs	r0, #44	; 0x2c
 80035f2:	f001 f9c4 	bl	800497e <HAL_NVIC_EnableIRQ>
}
 80035f6:	bf00      	nop
 80035f8:	3720      	adds	r7, #32
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40023800 	.word	0x40023800
 8003604:	40000400 	.word	0x40000400
 8003608:	40000800 	.word	0x40000800
 800360c:	40000c00 	.word	0x40000c00
 8003610:	40001c00 	.word	0x40001c00

08003614 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a4a      	ldr	r2, [pc, #296]	; (800374c <HAL_TIM_PWM_MspInit+0x138>)
 8003622:	4293      	cmp	r3, r2
 8003624:	f040 808e 	bne.w	8003744 <HAL_TIM_PWM_MspInit+0x130>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003628:	2300      	movs	r3, #0
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	4b48      	ldr	r3, [pc, #288]	; (8003750 <HAL_TIM_PWM_MspInit+0x13c>)
 800362e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003630:	4a47      	ldr	r2, [pc, #284]	; (8003750 <HAL_TIM_PWM_MspInit+0x13c>)
 8003632:	f043 0302 	orr.w	r3, r3, #2
 8003636:	6453      	str	r3, [r2, #68]	; 0x44
 8003638:	4b45      	ldr	r3, [pc, #276]	; (8003750 <HAL_TIM_PWM_MspInit+0x13c>)
 800363a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 DMA Init */
    /* TIM8_CH3 Init */
    hdma_tim8_ch3.Instance = DMA2_Stream4;
 8003644:	4b43      	ldr	r3, [pc, #268]	; (8003754 <HAL_TIM_PWM_MspInit+0x140>)
 8003646:	4a44      	ldr	r2, [pc, #272]	; (8003758 <HAL_TIM_PWM_MspInit+0x144>)
 8003648:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch3.Init.Channel = DMA_CHANNEL_7;
 800364a:	4b42      	ldr	r3, [pc, #264]	; (8003754 <HAL_TIM_PWM_MspInit+0x140>)
 800364c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003650:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003652:	4b40      	ldr	r3, [pc, #256]	; (8003754 <HAL_TIM_PWM_MspInit+0x140>)
 8003654:	2240      	movs	r2, #64	; 0x40
 8003656:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003658:	4b3e      	ldr	r3, [pc, #248]	; (8003754 <HAL_TIM_PWM_MspInit+0x140>)
 800365a:	2200      	movs	r2, #0
 800365c:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800365e:	4b3d      	ldr	r3, [pc, #244]	; (8003754 <HAL_TIM_PWM_MspInit+0x140>)
 8003660:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003664:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003666:	4b3b      	ldr	r3, [pc, #236]	; (8003754 <HAL_TIM_PWM_MspInit+0x140>)
 8003668:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800366c:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800366e:	4b39      	ldr	r3, [pc, #228]	; (8003754 <HAL_TIM_PWM_MspInit+0x140>)
 8003670:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003674:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch3.Init.Mode = DMA_CIRCULAR;
 8003676:	4b37      	ldr	r3, [pc, #220]	; (8003754 <HAL_TIM_PWM_MspInit+0x140>)
 8003678:	f44f 7280 	mov.w	r2, #256	; 0x100
 800367c:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 800367e:	4b35      	ldr	r3, [pc, #212]	; (8003754 <HAL_TIM_PWM_MspInit+0x140>)
 8003680:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003684:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003686:	4b33      	ldr	r3, [pc, #204]	; (8003754 <HAL_TIM_PWM_MspInit+0x140>)
 8003688:	2200      	movs	r2, #0
 800368a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch3) != HAL_OK)
 800368c:	4831      	ldr	r0, [pc, #196]	; (8003754 <HAL_TIM_PWM_MspInit+0x140>)
 800368e:	f001 f991 	bl	80049b4 <HAL_DMA_Init>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <HAL_TIM_PWM_MspInit+0x88>
    {
      Error_Handler();
 8003698:	f7ff feb9 	bl	800340e <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a2d      	ldr	r2, [pc, #180]	; (8003754 <HAL_TIM_PWM_MspInit+0x140>)
 80036a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80036a2:	4a2c      	ldr	r2, [pc, #176]	; (8003754 <HAL_TIM_PWM_MspInit+0x140>)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM8_CH4_TRIG_COM Init */
    hdma_tim8_ch4_trig_com.Instance = DMA2_Stream7;
 80036a8:	4b2c      	ldr	r3, [pc, #176]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 80036aa:	4a2d      	ldr	r2, [pc, #180]	; (8003760 <HAL_TIM_PWM_MspInit+0x14c>)
 80036ac:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch4_trig_com.Init.Channel = DMA_CHANNEL_7;
 80036ae:	4b2b      	ldr	r3, [pc, #172]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 80036b0:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80036b4:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036b6:	4b29      	ldr	r3, [pc, #164]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 80036b8:	2240      	movs	r2, #64	; 0x40
 80036ba:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 80036bc:	4b27      	ldr	r3, [pc, #156]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 80036be:	2200      	movs	r2, #0
 80036c0:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 80036c2:	4b26      	ldr	r3, [pc, #152]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 80036c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036c8:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80036ca:	4b24      	ldr	r3, [pc, #144]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 80036cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036d0:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80036d2:	4b22      	ldr	r3, [pc, #136]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 80036d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036d8:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 80036da:	4b20      	ldr	r3, [pc, #128]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 80036dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036e0:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 80036e2:	4b1e      	ldr	r3, [pc, #120]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 80036e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036e8:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036ea:	4b1c      	ldr	r3, [pc, #112]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch4_trig_com) != HAL_OK)
 80036f0:	481a      	ldr	r0, [pc, #104]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 80036f2:	f001 f95f 	bl	80049b4 <HAL_DMA_Init>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_TIM_PWM_MspInit+0xec>
    {
      Error_Handler();
 80036fc:	f7ff fe87 	bl	800340e <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim8_ch4_trig_com);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a16      	ldr	r2, [pc, #88]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 8003704:	631a      	str	r2, [r3, #48]	; 0x30
 8003706:	4a15      	ldr	r2, [pc, #84]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim8_ch4_trig_com);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a13      	ldr	r2, [pc, #76]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 8003710:	639a      	str	r2, [r3, #56]	; 0x38
 8003712:	4a12      	ldr	r2, [pc, #72]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim8_ch4_trig_com);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a10      	ldr	r2, [pc, #64]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 800371c:	635a      	str	r2, [r3, #52]	; 0x34
 800371e:	4a0f      	ldr	r2, [pc, #60]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003724:	2200      	movs	r2, #0
 8003726:	2100      	movs	r1, #0
 8003728:	202c      	movs	r0, #44	; 0x2c
 800372a:	f001 f90c 	bl	8004946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800372e:	202c      	movs	r0, #44	; 0x2c
 8003730:	f001 f925 	bl	800497e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8003734:	2200      	movs	r2, #0
 8003736:	2100      	movs	r1, #0
 8003738:	202d      	movs	r0, #45	; 0x2d
 800373a:	f001 f904 	bl	8004946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800373e:	202d      	movs	r0, #45	; 0x2d
 8003740:	f001 f91d 	bl	800497e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003744:	bf00      	nop
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40010400 	.word	0x40010400
 8003750:	40023800 	.word	0x40023800
 8003754:	200017e0 	.word	0x200017e0
 8003758:	40026470 	.word	0x40026470
 800375c:	20001840 	.word	0x20001840
 8003760:	400264b8 	.word	0x400264b8

08003764 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08e      	sub	sp, #56	; 0x38
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800376c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	609a      	str	r2, [r3, #8]
 8003778:	60da      	str	r2, [r3, #12]
 800377a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003784:	d13e      	bne.n	8003804 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003786:	2300      	movs	r3, #0
 8003788:	623b      	str	r3, [r7, #32]
 800378a:	4b66      	ldr	r3, [pc, #408]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	4a65      	ldr	r2, [pc, #404]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 8003790:	f043 0301 	orr.w	r3, r3, #1
 8003794:	6313      	str	r3, [r2, #48]	; 0x30
 8003796:	4b63      	ldr	r3, [pc, #396]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	623b      	str	r3, [r7, #32]
 80037a0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037a2:	2300      	movs	r3, #0
 80037a4:	61fb      	str	r3, [r7, #28]
 80037a6:	4b5f      	ldr	r3, [pc, #380]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	4a5e      	ldr	r2, [pc, #376]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 80037ac:	f043 0302 	orr.w	r3, r3, #2
 80037b0:	6313      	str	r3, [r2, #48]	; 0x30
 80037b2:	4b5c      	ldr	r3, [pc, #368]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	69fb      	ldr	r3, [r7, #28]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15;
 80037be:	f248 0306 	movw	r3, #32774	; 0x8006
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c4:	2302      	movs	r3, #2
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c8:	2300      	movs	r3, #0
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037cc:	2300      	movs	r3, #0
 80037ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037d0:	2301      	movs	r3, #1
 80037d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037d8:	4619      	mov	r1, r3
 80037da:	4853      	ldr	r0, [pc, #332]	; (8003928 <HAL_TIM_MspPostInit+0x1c4>)
 80037dc:	f001 fcec 	bl	80051b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80037e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e6:	2302      	movs	r3, #2
 80037e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ee:	2300      	movs	r3, #0
 80037f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037f2:	2301      	movs	r3, #1
 80037f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037fa:	4619      	mov	r1, r3
 80037fc:	484b      	ldr	r0, [pc, #300]	; (800392c <HAL_TIM_MspPostInit+0x1c8>)
 80037fe:	f001 fcdb 	bl	80051b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003802:	e08a      	b.n	800391a <HAL_TIM_MspPostInit+0x1b6>
  else if(htim->Instance==TIM3)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a49      	ldr	r2, [pc, #292]	; (8003930 <HAL_TIM_MspPostInit+0x1cc>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d13c      	bne.n	8003888 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	61bb      	str	r3, [r7, #24]
 8003812:	4b44      	ldr	r3, [pc, #272]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	4a43      	ldr	r2, [pc, #268]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 8003818:	f043 0302 	orr.w	r3, r3, #2
 800381c:	6313      	str	r3, [r2, #48]	; 0x30
 800381e:	4b41      	ldr	r3, [pc, #260]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
 800382e:	4b3d      	ldr	r3, [pc, #244]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	4a3c      	ldr	r2, [pc, #240]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 8003834:	f043 0304 	orr.w	r3, r3, #4
 8003838:	6313      	str	r3, [r2, #48]	; 0x30
 800383a:	4b3a      	ldr	r3, [pc, #232]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8003846:	2323      	movs	r3, #35	; 0x23
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384a:	2302      	movs	r3, #2
 800384c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384e:	2300      	movs	r3, #0
 8003850:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003852:	2300      	movs	r3, #0
 8003854:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003856:	2302      	movs	r3, #2
 8003858:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800385a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800385e:	4619      	mov	r1, r3
 8003860:	4832      	ldr	r0, [pc, #200]	; (800392c <HAL_TIM_MspPostInit+0x1c8>)
 8003862:	f001 fca9 	bl	80051b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003866:	2340      	movs	r3, #64	; 0x40
 8003868:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386a:	2302      	movs	r3, #2
 800386c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386e:	2300      	movs	r3, #0
 8003870:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003872:	2300      	movs	r3, #0
 8003874:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003876:	2302      	movs	r3, #2
 8003878:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800387a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800387e:	4619      	mov	r1, r3
 8003880:	482c      	ldr	r0, [pc, #176]	; (8003934 <HAL_TIM_MspPostInit+0x1d0>)
 8003882:	f001 fc99 	bl	80051b8 <HAL_GPIO_Init>
}
 8003886:	e048      	b.n	800391a <HAL_TIM_MspPostInit+0x1b6>
  else if(htim->Instance==TIM4)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a2a      	ldr	r2, [pc, #168]	; (8003938 <HAL_TIM_MspPostInit+0x1d4>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d11f      	bne.n	80038d2 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	613b      	str	r3, [r7, #16]
 8003896:	4b23      	ldr	r3, [pc, #140]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	4a22      	ldr	r2, [pc, #136]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 800389c:	f043 0302 	orr.w	r3, r3, #2
 80038a0:	6313      	str	r3, [r2, #48]	; 0x30
 80038a2:	4b20      	ldr	r3, [pc, #128]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	613b      	str	r3, [r7, #16]
 80038ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80038ae:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b4:	2302      	movs	r3, #2
 80038b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b8:	2300      	movs	r3, #0
 80038ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038bc:	2300      	movs	r3, #0
 80038be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80038c0:	2302      	movs	r3, #2
 80038c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038c8:	4619      	mov	r1, r3
 80038ca:	4818      	ldr	r0, [pc, #96]	; (800392c <HAL_TIM_MspPostInit+0x1c8>)
 80038cc:	f001 fc74 	bl	80051b8 <HAL_GPIO_Init>
}
 80038d0:	e023      	b.n	800391a <HAL_TIM_MspPostInit+0x1b6>
  else if(htim->Instance==TIM8)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a19      	ldr	r2, [pc, #100]	; (800393c <HAL_TIM_MspPostInit+0x1d8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d11e      	bne.n	800391a <HAL_TIM_MspPostInit+0x1b6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038dc:	2300      	movs	r3, #0
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	4b10      	ldr	r3, [pc, #64]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 80038e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e4:	4a0f      	ldr	r2, [pc, #60]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 80038e6:	f043 0304 	orr.w	r3, r3, #4
 80038ea:	6313      	str	r3, [r2, #48]	; 0x30
 80038ec:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80038f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fe:	2302      	movs	r3, #2
 8003900:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003902:	2301      	movs	r3, #1
 8003904:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003906:	2303      	movs	r3, #3
 8003908:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800390a:	2303      	movs	r3, #3
 800390c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800390e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003912:	4619      	mov	r1, r3
 8003914:	4807      	ldr	r0, [pc, #28]	; (8003934 <HAL_TIM_MspPostInit+0x1d0>)
 8003916:	f001 fc4f 	bl	80051b8 <HAL_GPIO_Init>
}
 800391a:	bf00      	nop
 800391c:	3738      	adds	r7, #56	; 0x38
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40023800 	.word	0x40023800
 8003928:	40020000 	.word	0x40020000
 800392c:	40020400 	.word	0x40020400
 8003930:	40000400 	.word	0x40000400
 8003934:	40020800 	.word	0x40020800
 8003938:	40000800 	.word	0x40000800
 800393c:	40010400 	.word	0x40010400

08003940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08a      	sub	sp, #40	; 0x28
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003948:	f107 0314 	add.w	r3, r7, #20
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	605a      	str	r2, [r3, #4]
 8003952:	609a      	str	r2, [r3, #8]
 8003954:	60da      	str	r2, [r3, #12]
 8003956:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a1d      	ldr	r2, [pc, #116]	; (80039d4 <HAL_UART_MspInit+0x94>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d134      	bne.n	80039cc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	4b1c      	ldr	r3, [pc, #112]	; (80039d8 <HAL_UART_MspInit+0x98>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	4a1b      	ldr	r2, [pc, #108]	; (80039d8 <HAL_UART_MspInit+0x98>)
 800396c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003970:	6413      	str	r3, [r2, #64]	; 0x40
 8003972:	4b19      	ldr	r3, [pc, #100]	; (80039d8 <HAL_UART_MspInit+0x98>)
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800397a:	613b      	str	r3, [r7, #16]
 800397c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <HAL_UART_MspInit+0x98>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	4a14      	ldr	r2, [pc, #80]	; (80039d8 <HAL_UART_MspInit+0x98>)
 8003988:	f043 0308 	orr.w	r3, r3, #8
 800398c:	6313      	str	r3, [r2, #48]	; 0x30
 800398e:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <HAL_UART_MspInit+0x98>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800399a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800399e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a0:	2302      	movs	r3, #2
 80039a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a8:	2303      	movs	r3, #3
 80039aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80039ac:	2307      	movs	r3, #7
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039b0:	f107 0314 	add.w	r3, r7, #20
 80039b4:	4619      	mov	r1, r3
 80039b6:	4809      	ldr	r0, [pc, #36]	; (80039dc <HAL_UART_MspInit+0x9c>)
 80039b8:	f001 fbfe 	bl	80051b8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80039bc:	2200      	movs	r2, #0
 80039be:	2100      	movs	r1, #0
 80039c0:	2027      	movs	r0, #39	; 0x27
 80039c2:	f000 ffc0 	bl	8004946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80039c6:	2027      	movs	r0, #39	; 0x27
 80039c8:	f000 ffd9 	bl	800497e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80039cc:	bf00      	nop
 80039ce:	3728      	adds	r7, #40	; 0x28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40004800 	.word	0x40004800
 80039d8:	40023800 	.word	0x40023800
 80039dc:	40020c00 	.word	0x40020c00

080039e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039e4:	e7fe      	b.n	80039e4 <NMI_Handler+0x4>

080039e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039e6:	b480      	push	{r7}
 80039e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039ea:	e7fe      	b.n	80039ea <HardFault_Handler+0x4>

080039ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039f0:	e7fe      	b.n	80039f0 <MemManage_Handler+0x4>

080039f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039f2:	b480      	push	{r7}
 80039f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039f6:	e7fe      	b.n	80039f6 <BusFault_Handler+0x4>

080039f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039fc:	e7fe      	b.n	80039fc <UsageFault_Handler+0x4>

080039fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039fe:	b480      	push	{r7}
 8003a00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a02:	bf00      	nop
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a10:	bf00      	nop
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a1e:	bf00      	nop
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a2c:	f000 fe6c 	bl	8004708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a30:	bf00      	nop
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//HAL_GPIO_TogglePin(GPIOD,LD4_Pin);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a38:	4802      	ldr	r0, [pc, #8]	; (8003a44 <TIM2_IRQHandler+0x10>)
 8003a3a:	f004 fb6d 	bl	8008118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a3e:	bf00      	nop
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20001630 	.word	0x20001630

08003a48 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003a4c:	4802      	ldr	r0, [pc, #8]	; (8003a58 <USART3_IRQHandler+0x10>)
 8003a4e:	f005 fbb5 	bl	80091bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003a52:	bf00      	nop
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	200018a0 	.word	0x200018a0

08003a5c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003a60:	4803      	ldr	r0, [pc, #12]	; (8003a70 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8003a62:	f004 fb59 	bl	8008118 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8003a66:	4803      	ldr	r0, [pc, #12]	; (8003a74 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8003a68:	f004 fb56 	bl	8008118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003a6c:	bf00      	nop
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	20001750 	.word	0x20001750
 8003a74:	20001798 	.word	0x20001798

08003a78 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003a7c:	4802      	ldr	r0, [pc, #8]	; (8003a88 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003a7e:	f004 fb4b 	bl	8008118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20001750 	.word	0x20001750

08003a8c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	//HAL_GPIO_TogglePin(GPIOE, TEST_OUTPUT_Pin);
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003a90:	4802      	ldr	r0, [pc, #8]	; (8003a9c <TIM5_IRQHandler+0x10>)
 8003a92:	f004 fb41 	bl	8008118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003a96:	bf00      	nop
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20001708 	.word	0x20001708

08003aa0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch3);
 8003aa4:	4802      	ldr	r0, [pc, #8]	; (8003ab0 <DMA2_Stream4_IRQHandler+0x10>)
 8003aa6:	f001 f91d 	bl	8004ce4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003aaa:	bf00      	nop
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	200017e0 	.word	0x200017e0

08003ab4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003ab8:	4802      	ldr	r0, [pc, #8]	; (8003ac4 <OTG_FS_IRQHandler+0x10>)
 8003aba:	f001 ffb7 	bl	8005a2c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003abe:	bf00      	nop
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	200032e4 	.word	0x200032e4

08003ac8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch4_trig_com);
 8003acc:	4802      	ldr	r0, [pc, #8]	; (8003ad8 <DMA2_Stream7_IRQHandler+0x10>)
 8003ace:	f001 f909 	bl	8004ce4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003ad2:	bf00      	nop
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20001840 	.word	0x20001840

08003adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ae4:	4a14      	ldr	r2, [pc, #80]	; (8003b38 <_sbrk+0x5c>)
 8003ae6:	4b15      	ldr	r3, [pc, #84]	; (8003b3c <_sbrk+0x60>)
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003af0:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <_sbrk+0x64>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d102      	bne.n	8003afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003af8:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <_sbrk+0x64>)
 8003afa:	4a12      	ldr	r2, [pc, #72]	; (8003b44 <_sbrk+0x68>)
 8003afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003afe:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <_sbrk+0x64>)
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4413      	add	r3, r2
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d207      	bcs.n	8003b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b0c:	f00d fbda 	bl	80112c4 <__errno>
 8003b10:	4603      	mov	r3, r0
 8003b12:	220c      	movs	r2, #12
 8003b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b1a:	e009      	b.n	8003b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b1c:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <_sbrk+0x64>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b22:	4b07      	ldr	r3, [pc, #28]	; (8003b40 <_sbrk+0x64>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4413      	add	r3, r2
 8003b2a:	4a05      	ldr	r2, [pc, #20]	; (8003b40 <_sbrk+0x64>)
 8003b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	20020000 	.word	0x20020000
 8003b3c:	00000400 	.word	0x00000400
 8003b40:	200018f0 	.word	0x200018f0
 8003b44:	200035f8 	.word	0x200035f8

08003b48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b4c:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <SystemInit+0x20>)
 8003b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b52:	4a05      	ldr	r2, [pc, #20]	; (8003b68 <SystemInit+0x20>)
 8003b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b5c:	bf00      	nop
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	e000ed00 	.word	0xe000ed00

08003b6c <SD_SPI_Init>:
void make_delay(int delay);

/***	FUNCTIONS	***********************************************************************************************************************************************************************************/
/******************************************************************************************************************************************************************************************************/
uint8_t SD_SPI_Init(void)
{
 8003b6c:	b590      	push	{r4, r7, lr}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
	uint8_t vCmd;
	int16_t vCounter;
	//uint32_t vTmpPrc;
	sdinfo.type = 0;
 8003b72:	4b6b      	ldr	r3, [pc, #428]	; (8003d20 <SD_SPI_Init+0x1b4>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	701a      	strb	r2, [r3, #0]
	uint8_t aArray[4];

	HAL_Delay(250);														// SD voltage stability delay
 8003b78:	20fa      	movs	r0, #250	; 0xfa
 8003b7a:	f000 fde5 	bl	8004748 <HAL_Delay>

	/*vTmpPrc = hspi2.Init.BaudRatePrescaler;
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128; 		//156.25 kbbs*/

	HAL_SPI_Init(&hspi1);
 8003b7e:	4869      	ldr	r0, [pc, #420]	; (8003d24 <SD_SPI_Init+0x1b8>)
 8003b80:	f003 fd8c 	bl	800769c <HAL_SPI_Init>

	SD_DESELECT;
 8003b84:	2201      	movs	r2, #1
 8003b86:	2108      	movs	r1, #8
 8003b88:	4867      	ldr	r0, [pc, #412]	; (8003d28 <SD_SPI_Init+0x1bc>)
 8003b8a:	f001 fcb1 	bl	80054f0 <HAL_GPIO_WritePin>
	for(vCounter = 0; vCounter<10; vCounter++) // 80 pulse bit. Set SPI as SD card interface
 8003b8e:	2300      	movs	r3, #0
 8003b90:	80bb      	strh	r3, [r7, #4]
 8003b92:	e007      	b.n	8003ba4 <SD_SPI_Init+0x38>
		SPI_Release();
 8003b94:	f000 f902 	bl	8003d9c <SPI_Release>
	for(vCounter = 0; vCounter<10; vCounter++) // 80 pulse bit. Set SPI as SD card interface
 8003b98:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	80bb      	strh	r3, [r7, #4]
 8003ba4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003ba8:	2b09      	cmp	r3, #9
 8003baa:	ddf3      	ble.n	8003b94 <SD_SPI_Init+0x28>

	/*hspi2.Init.BaudRatePrescaler = vTmpPrc;
	HAL_SPI_Init(&hspi2);*/

	SD_SELECT;
 8003bac:	2200      	movs	r2, #0
 8003bae:	2108      	movs	r1, #8
 8003bb0:	485d      	ldr	r0, [pc, #372]	; (8003d28 <SD_SPI_Init+0x1bc>)
 8003bb2:	f001 fc9d 	bl	80054f0 <HAL_GPIO_WritePin>
	if (SD_SPI_Cmd(CMD0, 0) == 1) // Enter Idle state
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	2040      	movs	r0, #64	; 0x40
 8003bba:	f000 f91b 	bl	8003df4 <SD_SPI_Cmd>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	f040 80a5 	bne.w	8003d10 <SD_SPI_Init+0x1a4>
		{
			SPI_Release();
 8003bc6:	f000 f8e9 	bl	8003d9c <SPI_Release>
			if (SD_SPI_Cmd(CMD8, 0x1AA) == 1) // SDv2
 8003bca:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003bce:	2048      	movs	r0, #72	; 0x48
 8003bd0:	f000 f910 	bl	8003df4 <SD_SPI_Cmd>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d162      	bne.n	8003ca0 <SD_SPI_Init+0x134>
				{
					for (vCounter = 0; vCounter < 4; vCounter++)
 8003bda:	2300      	movs	r3, #0
 8003bdc:	80bb      	strh	r3, [r7, #4]
 8003bde:	e010      	b.n	8003c02 <SD_SPI_Init+0x96>
						aArray[vCounter] = SPI_ReceiveByte();
 8003be0:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003be4:	f000 f8cd 	bl	8003d82 <SPI_ReceiveByte>
 8003be8:	4603      	mov	r3, r0
 8003bea:	461a      	mov	r2, r3
 8003bec:	f104 0308 	add.w	r3, r4, #8
 8003bf0:	443b      	add	r3, r7
 8003bf2:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (vCounter = 0; vCounter < 4; vCounter++)
 8003bf6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	80bb      	strh	r3, [r7, #4]
 8003c02:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	ddea      	ble.n	8003be0 <SD_SPI_Init+0x74>
					if (aArray[2] == 0x01 && aArray[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8003c0a:	78bb      	ldrb	r3, [r7, #2]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	f040 8081 	bne.w	8003d14 <SD_SPI_Init+0x1a8>
 8003c12:	78fb      	ldrb	r3, [r7, #3]
 8003c14:	2baa      	cmp	r3, #170	; 0xaa
 8003c16:	d17d      	bne.n	8003d14 <SD_SPI_Init+0x1a8>
						{
							for (vCounter = 12000; (vCounter && SD_SPI_Cmd(ACMD41, 1UL << 30)); vCounter--)	{;}	 // Wait for leaving idle state (ACMD41 with HCS bit)
 8003c18:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8003c1c:	80bb      	strh	r3, [r7, #4]
 8003c1e:	e005      	b.n	8003c2c <SD_SPI_Init+0xc0>
 8003c20:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	80bb      	strh	r3, [r7, #4]
 8003c2c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d007      	beq.n	8003c44 <SD_SPI_Init+0xd8>
 8003c34:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003c38:	20e9      	movs	r0, #233	; 0xe9
 8003c3a:	f000 f8db 	bl	8003df4 <SD_SPI_Cmd>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1ed      	bne.n	8003c20 <SD_SPI_Init+0xb4>
							if (vCounter && SD_SPI_Cmd(CMD58, 0) == 0)
 8003c44:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d063      	beq.n	8003d14 <SD_SPI_Init+0x1a8>
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	207a      	movs	r0, #122	; 0x7a
 8003c50:	f000 f8d0 	bl	8003df4 <SD_SPI_Cmd>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d15c      	bne.n	8003d14 <SD_SPI_Init+0x1a8>
								{ // Check CCS bit in the OCR
									for (vCounter = 0; vCounter < 4; vCounter++) 	aArray[vCounter] = SPI_ReceiveByte();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	80bb      	strh	r3, [r7, #4]
 8003c5e:	e010      	b.n	8003c82 <SD_SPI_Init+0x116>
 8003c60:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003c64:	f000 f88d 	bl	8003d82 <SPI_ReceiveByte>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	f104 0308 	add.w	r3, r4, #8
 8003c70:	443b      	add	r3, r7
 8003c72:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003c76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	80bb      	strh	r3, [r7, #4]
 8003c82:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	ddea      	ble.n	8003c60 <SD_SPI_Init+0xf4>
									sdinfo.type = (aArray[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 8003c8a:	783b      	ldrb	r3, [r7, #0]
 8003c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <SD_SPI_Init+0x12c>
 8003c94:	220c      	movs	r2, #12
 8003c96:	e000      	b.n	8003c9a <SD_SPI_Init+0x12e>
 8003c98:	2204      	movs	r2, #4
 8003c9a:	4b21      	ldr	r3, [pc, #132]	; (8003d20 <SD_SPI_Init+0x1b4>)
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	e039      	b.n	8003d14 <SD_SPI_Init+0x1a8>
								}
						}
				}
			else		//SDv1 or MMCv3
				{
					if (SD_SPI_Cmd(ACMD41, 0) <= 1)
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	20e9      	movs	r0, #233	; 0xe9
 8003ca4:	f000 f8a6 	bl	8003df4 <SD_SPI_Cmd>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d805      	bhi.n	8003cba <SD_SPI_Init+0x14e>
						{
							sdinfo.type = CT_SD1; vCmd = ACMD41; // SDv1
 8003cae:	4b1c      	ldr	r3, [pc, #112]	; (8003d20 <SD_SPI_Init+0x1b4>)
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	701a      	strb	r2, [r3, #0]
 8003cb4:	23e9      	movs	r3, #233	; 0xe9
 8003cb6:	71fb      	strb	r3, [r7, #7]
 8003cb8:	e004      	b.n	8003cc4 <SD_SPI_Init+0x158>
						}
						else
						{
							sdinfo.type = CT_MMC; vCmd = CMD1; // MMCv3
 8003cba:	4b19      	ldr	r3, [pc, #100]	; (8003d20 <SD_SPI_Init+0x1b4>)
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	701a      	strb	r2, [r3, #0]
 8003cc0:	2341      	movs	r3, #65	; 0x41
 8003cc2:	71fb      	strb	r3, [r7, #7]
						}
					for (vCounter = 25000; vCounter && SD_SPI_Cmd(vCmd, 0); vCounter--) ; // Wait for leaving idle state
 8003cc4:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8003cc8:	80bb      	strh	r3, [r7, #4]
 8003cca:	e005      	b.n	8003cd8 <SD_SPI_Init+0x16c>
 8003ccc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	80bb      	strh	r3, [r7, #4]
 8003cd8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d007      	beq.n	8003cf0 <SD_SPI_Init+0x184>
 8003ce0:	79fb      	ldrb	r3, [r7, #7]
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 f885 	bl	8003df4 <SD_SPI_Cmd>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1ed      	bne.n	8003ccc <SD_SPI_Init+0x160>
					if ( ! vCounter || SD_SPI_Cmd(CMD16, 512) != 0) // Set R/W block length to 512
 8003cf0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d007      	beq.n	8003d08 <SD_SPI_Init+0x19c>
 8003cf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003cfc:	2050      	movs	r0, #80	; 0x50
 8003cfe:	f000 f879 	bl	8003df4 <SD_SPI_Cmd>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <SD_SPI_Init+0x1a8>
					sdinfo.type = 0;
 8003d08:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <SD_SPI_Init+0x1b4>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	701a      	strb	r2, [r3, #0]
 8003d0e:	e001      	b.n	8003d14 <SD_SPI_Init+0x1a8>
				}
		}
	else
		{
			return 1;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e000      	b.n	8003d16 <SD_SPI_Init+0x1aa>
		}

	return 0;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd90      	pop	{r4, r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	2000292c 	.word	0x2000292c
 8003d24:	200015d8 	.word	0x200015d8
 8003d28:	40020000 	.word	0x40020000

08003d2c <SPIx_WriteRead>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SPIx_WriteRead(uint8_t byte)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	4603      	mov	r3, r0
 8003d34:	71fb      	strb	r3, [r7, #7]
  uint8_t vReceivedByte = 0;
 8003d36:	2300      	movs	r3, #0
 8003d38:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &byte, (uint8_t*) &vReceivedByte, 1, 0x1000) != HAL_OK)
 8003d3a:	f107 020f 	add.w	r2, r7, #15
 8003d3e:	1df9      	adds	r1, r7, #7
 8003d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	2301      	movs	r3, #1
 8003d48:	4806      	ldr	r0, [pc, #24]	; (8003d64 <SPIx_WriteRead+0x38>)
 8003d4a:	f003 fd30 	bl	80077ae <HAL_SPI_TransmitReceive>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <SPIx_WriteRead+0x2c>
  {
  	SD_Error_Handler();
 8003d54:	f000 fa40 	bl	80041d8 <SD_Error_Handler>
  }
  return vReceivedByte;
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	200015d8 	.word	0x200015d8

08003d68 <SPI_SendByte>:

/****************************************************************************************************************/
/****************************************************************************************************************/
void SPI_SendByte(uint8_t byte)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	71fb      	strb	r3, [r7, #7]
  SPIx_WriteRead(byte);
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff ffd9 	bl	8003d2c <SPIx_WriteRead>
}
 8003d7a:	bf00      	nop
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <SPI_ReceiveByte>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SPI_ReceiveByte(void)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b082      	sub	sp, #8
 8003d86:	af00      	add	r7, sp, #0
  uint8_t byte = SPIx_WriteRead(0xFF);
 8003d88:	20ff      	movs	r0, #255	; 0xff
 8003d8a:	f7ff ffcf 	bl	8003d2c <SPIx_WriteRead>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	71fb      	strb	r3, [r7, #7]
  return byte;
 8003d92:	79fb      	ldrb	r3, [r7, #7]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <SPI_Release>:

/****************************************************************************************************************/
/****************************************************************************************************************/
void SPI_Release(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  SPIx_WriteRead(0xFF);
 8003da0:	20ff      	movs	r0, #255	; 0xff
 8003da2:	f7ff ffc3 	bl	8003d2c <SPIx_WriteRead>
}
 8003da6:	bf00      	nop
 8003da8:	bd80      	pop	{r7, pc}

08003daa <SD_SPI_WaitingForReadiness>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_WaitingForReadiness(void)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
	uint8_t vResult;
	uint16_t vCount = 0;
 8003db0:	2300      	movs	r3, #0
 8003db2:	80fb      	strh	r3, [r7, #6]

	do {
		vResult = SPI_ReceiveByte();
 8003db4:	f7ff ffe5 	bl	8003d82 <SPI_ReceiveByte>
 8003db8:	4603      	mov	r3, r0
 8003dba:	717b      	strb	r3, [r7, #5]
		vCount++;
 8003dbc:	88fb      	ldrh	r3, [r7, #6]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	80fb      	strh	r3, [r7, #6]
	} while ( (vResult != 0xFF) && (vCount < 0xFFFF) );
 8003dc2:	797b      	ldrb	r3, [r7, #5]
 8003dc4:	2bff      	cmp	r3, #255	; 0xff
 8003dc6:	d004      	beq.n	8003dd2 <SD_SPI_WaitingForReadiness+0x28>
 8003dc8:	88fb      	ldrh	r3, [r7, #6]
 8003dca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d1f0      	bne.n	8003db4 <SD_SPI_WaitingForReadiness+0xa>

	if (vCount >= 0xFFFF) return ERROR;
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d101      	bne.n	8003de0 <SD_SPI_WaitingForReadiness+0x36>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e005      	b.n	8003dec <SD_SPI_WaitingForReadiness+0x42>

	  return (vResult == 0xFF) ? OK: ERROR;
 8003de0:	797b      	ldrb	r3, [r7, #5]
 8003de2:	2bff      	cmp	r3, #255	; 0xff
 8003de4:	bf14      	ite	ne
 8003de6:	2301      	movne	r3, #1
 8003de8:	2300      	moveq	r3, #0
 8003dea:	b2db      	uxtb	r3, r3
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <SD_SPI_Cmd>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_Cmd(uint8_t cmd, uint32_t argument)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	6039      	str	r1, [r7, #0]
 8003dfe:	71fb      	strb	r3, [r7, #7]
  uint8_t vByte, vResult;

	// ACMD is the command sequence of CMD55-CMD?
	if (cmd & 0x80)
 8003e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	da0e      	bge.n	8003e26 <SD_SPI_Cmd+0x32>
	{
		cmd &= 0x7F;
 8003e08:	79fb      	ldrb	r3, [r7, #7]
 8003e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e0e:	71fb      	strb	r3, [r7, #7]
		vResult = SD_SPI_Cmd(CMD55, 0);
 8003e10:	2100      	movs	r1, #0
 8003e12:	2077      	movs	r0, #119	; 0x77
 8003e14:	f7ff ffee 	bl	8003df4 <SD_SPI_Cmd>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	73bb      	strb	r3, [r7, #14]
		if (vResult > 1) return vResult;
 8003e1c:	7bbb      	ldrb	r3, [r7, #14]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d901      	bls.n	8003e26 <SD_SPI_Cmd+0x32>
 8003e22:	7bbb      	ldrb	r3, [r7, #14]
 8003e24:	e049      	b.n	8003eba <SD_SPI_Cmd+0xc6>
	}

	// Select the card
	SD_DESELECT;
 8003e26:	2201      	movs	r2, #1
 8003e28:	2108      	movs	r1, #8
 8003e2a:	4826      	ldr	r0, [pc, #152]	; (8003ec4 <SD_SPI_Cmd+0xd0>)
 8003e2c:	f001 fb60 	bl	80054f0 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 8003e30:	f7ff ffa7 	bl	8003d82 <SPI_ReceiveByte>
	SD_SELECT;
 8003e34:	2200      	movs	r2, #0
 8003e36:	2108      	movs	r1, #8
 8003e38:	4822      	ldr	r0, [pc, #136]	; (8003ec4 <SD_SPI_Cmd+0xd0>)
 8003e3a:	f001 fb59 	bl	80054f0 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 8003e3e:	f7ff ffa0 	bl	8003d82 <SPI_ReceiveByte>

	// Send a command packet
	SPI_SendByte(cmd); // Start + Command index
 8003e42:	79fb      	ldrb	r3, [r7, #7]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff ff8f 	bl	8003d68 <SPI_SendByte>
	SPI_SendByte((uint8_t)(argument >> 24)); // Argument[31..24]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	0e1b      	lsrs	r3, r3, #24
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff ff89 	bl	8003d68 <SPI_SendByte>
	SPI_SendByte((uint8_t)(argument >> 16)); // Argument[23..16]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	0c1b      	lsrs	r3, r3, #16
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff ff83 	bl	8003d68 <SPI_SendByte>
	SPI_SendByte((uint8_t)(argument >> 8)); // Argument[15..8]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	0a1b      	lsrs	r3, r3, #8
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff ff7d 	bl	8003d68 <SPI_SendByte>
	SPI_SendByte((uint8_t)argument); // Argument[7..0]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff ff78 	bl	8003d68 <SPI_SendByte>
	vByte = 0x01; // Dummy CRC + Stop
 8003e78:	2301      	movs	r3, #1
 8003e7a:	73fb      	strb	r3, [r7, #15]

	if (cmd == CMD0) {vByte = 0x95;} // Valid CRC for CMD0(0)
 8003e7c:	79fb      	ldrb	r3, [r7, #7]
 8003e7e:	2b40      	cmp	r3, #64	; 0x40
 8003e80:	d101      	bne.n	8003e86 <SD_SPI_Cmd+0x92>
 8003e82:	2395      	movs	r3, #149	; 0x95
 8003e84:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) {vByte = 0x87;} // Valid CRC for CMD8(0x1AA)
 8003e86:	79fb      	ldrb	r3, [r7, #7]
 8003e88:	2b48      	cmp	r3, #72	; 0x48
 8003e8a:	d101      	bne.n	8003e90 <SD_SPI_Cmd+0x9c>
 8003e8c:	2387      	movs	r3, #135	; 0x87
 8003e8e:	73fb      	strb	r3, [r7, #15]
	SPI_SendByte(vByte);
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff ff68 	bl	8003d68 <SPI_SendByte>

  // Receive a command response
  vByte = 10; // Wait for a valid response in timeout of 10 attempts
 8003e98:	230a      	movs	r3, #10
 8003e9a:	73fb      	strb	r3, [r7, #15]
  do {
    		vResult = SPI_ReceiveByte();
 8003e9c:	f7ff ff71 	bl	8003d82 <SPI_ReceiveByte>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	73bb      	strb	r3, [r7, #14]
  } while ((vResult & 0x80) && --vByte);
 8003ea4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	da05      	bge.n	8003eb8 <SD_SPI_Cmd+0xc4>
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	73fb      	strb	r3, [r7, #15]
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1f1      	bne.n	8003e9c <SD_SPI_Cmd+0xa8>

  return vResult;
 8003eb8:	7bbb      	ldrb	r3, [r7, #14]

}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40020000 	.word	0x40020000

08003ec8 <SD_SPI_Read_Block>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_Read_Block(uint8_t *buff, uint32_t lba)
{
 8003ec8:	b590      	push	{r4, r7, lr}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint8_t vResult = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	737b      	strb	r3, [r7, #13]
  uint16_t vCounter = 0;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	81fb      	strh	r3, [r7, #14]

	vResult = SD_SPI_Cmd (CMD17, lba);
 8003eda:	6839      	ldr	r1, [r7, #0]
 8003edc:	2051      	movs	r0, #81	; 0x51
 8003ede:	f7ff ff89 	bl	8003df4 <SD_SPI_Cmd>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	737b      	strb	r3, [r7, #13]
	if (vResult) return 5; //	Error
 8003ee6:	7b7b      	ldrb	r3, [r7, #13]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <SD_SPI_Read_Block+0x28>
 8003eec:	2305      	movs	r3, #5
 8003eee:	e02d      	b.n	8003f4c <SD_SPI_Read_Block+0x84>

	SPI_Release();
 8003ef0:	f7ff ff54 	bl	8003d9c <SPI_Release>

  do{
				vResult=SPI_ReceiveByte();
 8003ef4:	f7ff ff45 	bl	8003d82 <SPI_ReceiveByte>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	737b      	strb	r3, [r7, #13]
				vCounter++;
 8003efc:	89fb      	ldrh	r3, [r7, #14]
 8003efe:	3301      	adds	r3, #1
 8003f00:	81fb      	strh	r3, [r7, #14]
  } while ((vResult != 0xFE) && (vCounter < 0xFFFF)); // Wait till mark(0xFE) is received
 8003f02:	7b7b      	ldrb	r3, [r7, #13]
 8003f04:	2bfe      	cmp	r3, #254	; 0xfe
 8003f06:	d004      	beq.n	8003f12 <SD_SPI_Read_Block+0x4a>
 8003f08:	89fb      	ldrh	r3, [r7, #14]
 8003f0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d1f0      	bne.n	8003ef4 <SD_SPI_Read_Block+0x2c>
  if (vCounter >= 0xFFFF) return 5;	 //	 Error
 8003f12:	89fb      	ldrh	r3, [r7, #14]
 8003f14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d101      	bne.n	8003f20 <SD_SPI_Read_Block+0x58>
 8003f1c:	2305      	movs	r3, #5
 8003f1e:	e015      	b.n	8003f4c <SD_SPI_Read_Block+0x84>

  for (vCounter = 0; vCounter<512; vCounter++) buff[vCounter]=SPI_ReceiveByte(); // Write data to the buffer
 8003f20:	2300      	movs	r3, #0
 8003f22:	81fb      	strh	r3, [r7, #14]
 8003f24:	e009      	b.n	8003f3a <SD_SPI_Read_Block+0x72>
 8003f26:	89fb      	ldrh	r3, [r7, #14]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	18d4      	adds	r4, r2, r3
 8003f2c:	f7ff ff29 	bl	8003d82 <SPI_ReceiveByte>
 8003f30:	4603      	mov	r3, r0
 8003f32:	7023      	strb	r3, [r4, #0]
 8003f34:	89fb      	ldrh	r3, [r7, #14]
 8003f36:	3301      	adds	r3, #1
 8003f38:	81fb      	strh	r3, [r7, #14]
 8003f3a:	89fb      	ldrh	r3, [r7, #14]
 8003f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f40:	d3f1      	bcc.n	8003f26 <SD_SPI_Read_Block+0x5e>
  SPI_Release(); // Skip CRC
 8003f42:	f7ff ff2b 	bl	8003d9c <SPI_Release>
  SPI_Release();
 8003f46:	f7ff ff29 	bl	8003d9c <SPI_Release>

  return 0;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd90      	pop	{r4, r7, pc}

08003f54 <SD_SPI_Write_Block>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_Write_Block (uint8_t *buff, uint32_t lba)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint8_t vResult;
  uint16_t vCounter;

  vResult = SD_SPI_Cmd(CMD24, lba);
 8003f5e:	6839      	ldr	r1, [r7, #0]
 8003f60:	2058      	movs	r0, #88	; 0x58
 8003f62:	f7ff ff47 	bl	8003df4 <SD_SPI_Cmd>
 8003f66:	4603      	mov	r3, r0
 8003f68:	737b      	strb	r3, [r7, #13]

  if(vResult != 0x00) return 6; // Error
 8003f6a:	7b7b      	ldrb	r3, [r7, #13]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <SD_SPI_Write_Block+0x20>
 8003f70:	2306      	movs	r3, #6
 8003f72:	e03d      	b.n	8003ff0 <SD_SPI_Write_Block+0x9c>

  SPI_Release();
 8003f74:	f7ff ff12 	bl	8003d9c <SPI_Release>
  SPI_SendByte (0xFE); // Send transmission start mark
 8003f78:	20fe      	movs	r0, #254	; 0xfe
 8003f7a:	f7ff fef5 	bl	8003d68 <SPI_SendByte>
  for (vCounter = 0; vCounter<512; vCounter++) SPI_SendByte(buff[vCounter]); // Write data to the SD
 8003f7e:	2300      	movs	r3, #0
 8003f80:	81fb      	strh	r3, [r7, #14]
 8003f82:	e009      	b.n	8003f98 <SD_SPI_Write_Block+0x44>
 8003f84:	89fb      	ldrh	r3, [r7, #14]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	4413      	add	r3, r2
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff feeb 	bl	8003d68 <SPI_SendByte>
 8003f92:	89fb      	ldrh	r3, [r7, #14]
 8003f94:	3301      	adds	r3, #1
 8003f96:	81fb      	strh	r3, [r7, #14]
 8003f98:	89fb      	ldrh	r3, [r7, #14]
 8003f9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f9e:	d3f1      	bcc.n	8003f84 <SD_SPI_Write_Block+0x30>
  SPI_Release();  // Skip CRC
 8003fa0:	f7ff fefc 	bl	8003d9c <SPI_Release>
  SPI_Release();
 8003fa4:	f7ff fefa 	bl	8003d9c <SPI_Release>
  vResult = SPI_ReceiveByte();
 8003fa8:	f7ff feeb 	bl	8003d82 <SPI_ReceiveByte>
 8003fac:	4603      	mov	r3, r0
 8003fae:	737b      	strb	r3, [r7, #13]
  if((vResult & 0x05) != 0x05) return 6; // Error  (datasheet p. 111)
 8003fb0:	7b7b      	ldrb	r3, [r7, #13]
 8003fb2:	f003 0305 	and.w	r3, r3, #5
 8003fb6:	2b05      	cmp	r3, #5
 8003fb8:	d001      	beq.n	8003fbe <SD_SPI_Write_Block+0x6a>
 8003fba:	2306      	movs	r3, #6
 8003fbc:	e018      	b.n	8003ff0 <SD_SPI_Write_Block+0x9c>

  vCounter = 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	81fb      	strh	r3, [r7, #14]
  do {
	  vResult=SPI_ReceiveByte();
 8003fc2:	f7ff fede 	bl	8003d82 <SPI_ReceiveByte>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	737b      	strb	r3, [r7, #13]
	  vCounter++;
 8003fca:	89fb      	ldrh	r3, [r7, #14]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	81fb      	strh	r3, [r7, #14]
  } while ( (vResult != 0xFF)&&(vCounter<0xFFFF) );		//Wait till BUSY mode is finished
 8003fd0:	7b7b      	ldrb	r3, [r7, #13]
 8003fd2:	2bff      	cmp	r3, #255	; 0xff
 8003fd4:	d004      	beq.n	8003fe0 <SD_SPI_Write_Block+0x8c>
 8003fd6:	89fb      	ldrh	r3, [r7, #14]
 8003fd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d1f0      	bne.n	8003fc2 <SD_SPI_Write_Block+0x6e>
  if (vCounter>=0xFFFF) return 6;		// Error
 8003fe0:	89fb      	ldrh	r3, [r7, #14]
 8003fe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d101      	bne.n	8003fee <SD_SPI_Write_Block+0x9a>
 8003fea:	2306      	movs	r3, #6
 8003fec:	e000      	b.n	8003ff0 <SD_SPI_Write_Block+0x9c>

  return 0;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <SD_SPI_GetFileInfo>:
}

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_GetFileInfo(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
	uint8_t vResult;
	DWORD free_clusters, free_sectors, total_sectors;

	if(f_mount(&SDFatFs, (TCHAR const*)USER_Path, 0))
 8003ffe:	2200      	movs	r2, #0
 8004000:	4964      	ldr	r1, [pc, #400]	; (8004194 <SD_SPI_GetFileInfo+0x19c>)
 8004002:	4865      	ldr	r0, [pc, #404]	; (8004198 <SD_SPI_GetFileInfo+0x1a0>)
 8004004:	f00b fce8 	bl	800f9d8 <f_mount>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <SD_SPI_GetFileInfo+0x1c>
	{
		SD_Error_Handler();
 800400e:	f000 f8e3 	bl	80041d8 <SD_Error_Handler>
 8004012:	e038      	b.n	8004086 <SD_SPI_GetFileInfo+0x8e>
	}
	else
	{
		vResult = f_opendir(&sDirectory, "/");		// "/" - directory name to open
 8004014:	4961      	ldr	r1, [pc, #388]	; (800419c <SD_SPI_GetFileInfo+0x1a4>)
 8004016:	4862      	ldr	r0, [pc, #392]	; (80041a0 <SD_SPI_GetFileInfo+0x1a8>)
 8004018:	f00c fb1b 	bl	8010652 <f_opendir>
 800401c:	4603      	mov	r3, r0
 800401e:	73fb      	strb	r3, [r7, #15]

		if (vResult == FR_OK)
 8004020:	7bfb      	ldrb	r3, [r7, #15]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d12c      	bne.n	8004080 <SD_SPI_GetFileInfo+0x88>
		{
			while(1)
			{
				vResult = f_readdir(&sDirectory, &sFileInfo);
 8004026:	495f      	ldr	r1, [pc, #380]	; (80041a4 <SD_SPI_GetFileInfo+0x1ac>)
 8004028:	485d      	ldr	r0, [pc, #372]	; (80041a0 <SD_SPI_GetFileInfo+0x1a8>)
 800402a:	f00c fbab 	bl	8010784 <f_readdir>
 800402e:	4603      	mov	r3, r0
 8004030:	73fb      	strb	r3, [r7, #15]

				if ((vResult == FR_OK) && (sFileInfo.fname[0]))
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d123      	bne.n	8004080 <SD_SPI_GetFileInfo+0x88>
 8004038:	4b5a      	ldr	r3, [pc, #360]	; (80041a4 <SD_SPI_GetFileInfo+0x1ac>)
 800403a:	7d9b      	ldrb	r3, [r3, #22]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d01f      	beq.n	8004080 <SD_SPI_GetFileInfo+0x88>
				{
					HAL_UART_Transmit(&huart3, (uint8_t*)sFileInfo.fname, strlen((char*)sFileInfo.fname), 0x1000);
 8004040:	4859      	ldr	r0, [pc, #356]	; (80041a8 <SD_SPI_GetFileInfo+0x1b0>)
 8004042:	f7fc f8c5 	bl	80001d0 <strlen>
 8004046:	4603      	mov	r3, r0
 8004048:	b29a      	uxth	r2, r3
 800404a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800404e:	4956      	ldr	r1, [pc, #344]	; (80041a8 <SD_SPI_GetFileInfo+0x1b0>)
 8004050:	4856      	ldr	r0, [pc, #344]	; (80041ac <SD_SPI_GetFileInfo+0x1b4>)
 8004052:	f004 ffac 	bl	8008fae <HAL_UART_Transmit>

					if(sFileInfo.fattrib & AM_DIR)
 8004056:	4b53      	ldr	r3, [pc, #332]	; (80041a4 <SD_SPI_GetFileInfo+0x1ac>)
 8004058:	7a1b      	ldrb	r3, [r3, #8]
 800405a:	f003 0310 	and.w	r3, r3, #16
 800405e:	2b00      	cmp	r3, #0
 8004060:	d006      	beq.n	8004070 <SD_SPI_GetFileInfo+0x78>
					{
						HAL_UART_Transmit(&huart3, (uint8_t*)"  [DIR]", 7, 0x1000);
 8004062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004066:	2207      	movs	r2, #7
 8004068:	4951      	ldr	r1, [pc, #324]	; (80041b0 <SD_SPI_GetFileInfo+0x1b8>)
 800406a:	4850      	ldr	r0, [pc, #320]	; (80041ac <SD_SPI_GetFileInfo+0x1b4>)
 800406c:	f004 ff9f 	bl	8008fae <HAL_UART_Transmit>
					}
				}
				else break;

				HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, 0x1000);
 8004070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004074:	2202      	movs	r2, #2
 8004076:	494f      	ldr	r1, [pc, #316]	; (80041b4 <SD_SPI_GetFileInfo+0x1bc>)
 8004078:	484c      	ldr	r0, [pc, #304]	; (80041ac <SD_SPI_GetFileInfo+0x1b4>)
 800407a:	f004 ff98 	bl	8008fae <HAL_UART_Transmit>
				vResult = f_readdir(&sDirectory, &sFileInfo);
 800407e:	e7d2      	b.n	8004026 <SD_SPI_GetFileInfo+0x2e>
			}
		}
		f_closedir(&sDirectory);
 8004080:	4847      	ldr	r0, [pc, #284]	; (80041a0 <SD_SPI_GetFileInfo+0x1a8>)
 8004082:	f00c fb59 	bl	8010738 <f_closedir>
	}

	f_getfree("/", &free_clusters, &fs);
 8004086:	463b      	mov	r3, r7
 8004088:	4a4b      	ldr	r2, [pc, #300]	; (80041b8 <SD_SPI_GetFileInfo+0x1c0>)
 800408a:	4619      	mov	r1, r3
 800408c:	4843      	ldr	r0, [pc, #268]	; (800419c <SD_SPI_GetFileInfo+0x1a4>)
 800408e:	f00c fbb6 	bl	80107fe <f_getfree>

	sprintf(aStringBuffer, "free_clusters: %lu\r\n", free_clusters);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	461a      	mov	r2, r3
 8004096:	4949      	ldr	r1, [pc, #292]	; (80041bc <SD_SPI_GetFileInfo+0x1c4>)
 8004098:	4849      	ldr	r0, [pc, #292]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 800409a:	f00d fa45 	bl	8011528 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 800409e:	4848      	ldr	r0, [pc, #288]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 80040a0:	f7fc f896 	bl	80001d0 <strlen>
 80040a4:	4603      	mov	r3, r0
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040ac:	4944      	ldr	r1, [pc, #272]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 80040ae:	483f      	ldr	r0, [pc, #252]	; (80041ac <SD_SPI_GetFileInfo+0x1b4>)
 80040b0:	f004 ff7d 	bl	8008fae <HAL_UART_Transmit>

	sprintf(aStringBuffer,"n_fatent: %lu\r\n",fs->n_fatent);
 80040b4:	4b40      	ldr	r3, [pc, #256]	; (80041b8 <SD_SPI_GetFileInfo+0x1c0>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	461a      	mov	r2, r3
 80040bc:	4941      	ldr	r1, [pc, #260]	; (80041c4 <SD_SPI_GetFileInfo+0x1cc>)
 80040be:	4840      	ldr	r0, [pc, #256]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 80040c0:	f00d fa32 	bl	8011528 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 80040c4:	483e      	ldr	r0, [pc, #248]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 80040c6:	f7fc f883 	bl	80001d0 <strlen>
 80040ca:	4603      	mov	r3, r0
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040d2:	493b      	ldr	r1, [pc, #236]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 80040d4:	4835      	ldr	r0, [pc, #212]	; (80041ac <SD_SPI_GetFileInfo+0x1b4>)
 80040d6:	f004 ff6a 	bl	8008fae <HAL_UART_Transmit>

	sprintf(aStringBuffer,"fs_csize: %d\r\n",fs->csize);
 80040da:	4b37      	ldr	r3, [pc, #220]	; (80041b8 <SD_SPI_GetFileInfo+0x1c0>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	895b      	ldrh	r3, [r3, #10]
 80040e0:	461a      	mov	r2, r3
 80040e2:	4939      	ldr	r1, [pc, #228]	; (80041c8 <SD_SPI_GetFileInfo+0x1d0>)
 80040e4:	4836      	ldr	r0, [pc, #216]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 80040e6:	f00d fa1f 	bl	8011528 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 80040ea:	4835      	ldr	r0, [pc, #212]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 80040ec:	f7fc f870 	bl	80001d0 <strlen>
 80040f0:	4603      	mov	r3, r0
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040f8:	4931      	ldr	r1, [pc, #196]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 80040fa:	482c      	ldr	r0, [pc, #176]	; (80041ac <SD_SPI_GetFileInfo+0x1b4>)
 80040fc:	f004 ff57 	bl	8008fae <HAL_UART_Transmit>

	total_sectors = (fs->n_fatent - 2) * fs->csize;
 8004100:	4b2d      	ldr	r3, [pc, #180]	; (80041b8 <SD_SPI_GetFileInfo+0x1c0>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	3b02      	subs	r3, #2
 8004108:	4a2b      	ldr	r2, [pc, #172]	; (80041b8 <SD_SPI_GetFileInfo+0x1c0>)
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	8952      	ldrh	r2, [r2, #10]
 800410e:	fb02 f303 	mul.w	r3, r2, r3
 8004112:	60bb      	str	r3, [r7, #8]
	sprintf(aStringBuffer, "total_sectors: %lu\r\n", total_sectors);
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	492d      	ldr	r1, [pc, #180]	; (80041cc <SD_SPI_GetFileInfo+0x1d4>)
 8004118:	4829      	ldr	r0, [pc, #164]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 800411a:	f00d fa05 	bl	8011528 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 800411e:	4828      	ldr	r0, [pc, #160]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 8004120:	f7fc f856 	bl	80001d0 <strlen>
 8004124:	4603      	mov	r3, r0
 8004126:	b29a      	uxth	r2, r3
 8004128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800412c:	4924      	ldr	r1, [pc, #144]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 800412e:	481f      	ldr	r0, [pc, #124]	; (80041ac <SD_SPI_GetFileInfo+0x1b4>)
 8004130:	f004 ff3d 	bl	8008fae <HAL_UART_Transmit>

	free_sectors = free_clusters * fs->csize;
 8004134:	4b20      	ldr	r3, [pc, #128]	; (80041b8 <SD_SPI_GetFileInfo+0x1c0>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	895b      	ldrh	r3, [r3, #10]
 800413a:	461a      	mov	r2, r3
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	fb02 f303 	mul.w	r3, r2, r3
 8004142:	607b      	str	r3, [r7, #4]
	sprintf(aStringBuffer, "free_sectors: %lu\r\n", free_sectors);
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	4922      	ldr	r1, [pc, #136]	; (80041d0 <SD_SPI_GetFileInfo+0x1d8>)
 8004148:	481d      	ldr	r0, [pc, #116]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 800414a:	f00d f9ed 	bl	8011528 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 800414e:	481c      	ldr	r0, [pc, #112]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 8004150:	f7fc f83e 	bl	80001d0 <strlen>
 8004154:	4603      	mov	r3, r0
 8004156:	b29a      	uxth	r2, r3
 8004158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800415c:	4918      	ldr	r1, [pc, #96]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 800415e:	4813      	ldr	r0, [pc, #76]	; (80041ac <SD_SPI_GetFileInfo+0x1b4>)
 8004160:	f004 ff25 	bl	8008fae <HAL_UART_Transmit>

	sprintf(aStringBuffer, "%lu KB total drive space.\r\n%lu KB available.\r\n", (free_sectors / 2), (total_sectors / 2));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	085a      	lsrs	r2, r3, #1
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	085b      	lsrs	r3, r3, #1
 800416c:	4919      	ldr	r1, [pc, #100]	; (80041d4 <SD_SPI_GetFileInfo+0x1dc>)
 800416e:	4814      	ldr	r0, [pc, #80]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 8004170:	f00d f9da 	bl	8011528 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 8004174:	4812      	ldr	r0, [pc, #72]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 8004176:	f7fc f82b 	bl	80001d0 <strlen>
 800417a:	4603      	mov	r3, r0
 800417c:	b29a      	uxth	r2, r3
 800417e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004182:	490f      	ldr	r1, [pc, #60]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 8004184:	4809      	ldr	r0, [pc, #36]	; (80041ac <SD_SPI_GetFileInfo+0x1b4>)
 8004186:	f004 ff12 	bl	8008fae <HAL_UART_Transmit>

	return 0;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	200018f4 	.word	0x200018f4
 8004198:	20000590 	.word	0x20000590
 800419c:	08011cb0 	.word	0x08011cb0
 80041a0:	20002a48 	.word	0x20002a48
 80041a4:	20002930 	.word	0x20002930
 80041a8:	20002946 	.word	0x20002946
 80041ac:	200018a0 	.word	0x200018a0
 80041b0:	08011cb4 	.word	0x08011cb4
 80041b4:	08011cbc 	.word	0x08011cbc
 80041b8:	200018f8 	.word	0x200018f8
 80041bc:	08011cc0 	.word	0x08011cc0
 80041c0:	20002a7c 	.word	0x20002a7c
 80041c4:	08011cd8 	.word	0x08011cd8
 80041c8:	08011ce8 	.word	0x08011ce8
 80041cc:	08011cf8 	.word	0x08011cf8
 80041d0:	08011d10 	.word	0x08011d10
 80041d4:	08011d24 	.word	0x08011d24

080041d8 <SD_Error_Handler>:

/****************************************************************************************************************/
/****************************************************************************************************************/
void SD_Error_Handler(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
	LED_Red_ON;
 80041dc:	2201      	movs	r2, #1
 80041de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80041e2:	4802      	ldr	r0, [pc, #8]	; (80041ec <SD_Error_Handler+0x14>)
 80041e4:	f001 f984 	bl	80054f0 <HAL_GPIO_WritePin>
	//while(1);
}
 80041e8:	bf00      	nop
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40020c00 	.word	0x40020c00

080041f0 <open_bin_file>:
// ------------------------------------------------------------------------------------------------
/*
	Open file, calculate how many frames in selected file and show all frames.
 */
uint8_t open_bin_file(char* name)
{
 80041f0:	b5b0      	push	{r4, r5, r7, lr}
 80041f2:	f5ad 7d78 	sub.w	sp, sp, #992	; 0x3e0
 80041f6:	af02      	add	r7, sp, #8
 80041f8:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80041fc:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8004200:	6018      	str	r0, [r3, #0]
	uint16_t vTemp = 0;
 8004202:	2300      	movs	r3, #0
 8004204:	f8a7 33ce 	strh.w	r3, [r7, #974]	; 0x3ce
	uint32_t vIndex = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
	static uint32_t vFileSize = 0;
	uint32_t vBytesReadCounter;

	uint8_t frame_buffer[949] = {0};									// Frame buffer
 800420e:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8004212:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	3304      	adds	r3, #4
 800421c:	f240 32b1 	movw	r2, #945	; 0x3b1
 8004220:	2100      	movs	r1, #0
 8004222:	4618      	mov	r0, r3
 8004224:	f00d f888 	bl	8011338 <memset>
	int size_buf_for_read = sizeof(frame_buffer);
 8004228:	f240 33b5 	movw	r3, #949	; 0x3b5
 800422c:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4

	static int how_many_frames = 0;

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004230:	2100      	movs	r1, #0
 8004232:	4879      	ldr	r0, [pc, #484]	; (8004418 <open_bin_file+0x228>)
 8004234:	f003 fe38 	bl	8007ea8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8004238:	2104      	movs	r1, #4
 800423a:	4877      	ldr	r0, [pc, #476]	; (8004418 <open_bin_file+0x228>)
 800423c:	f003 fe34 	bl	8007ea8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8004240:	2108      	movs	r1, #8
 8004242:	4875      	ldr	r0, [pc, #468]	; (8004418 <open_bin_file+0x228>)
 8004244:	f003 fe30 	bl	8007ea8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8004248:	210c      	movs	r1, #12
 800424a:	4873      	ldr	r0, [pc, #460]	; (8004418 <open_bin_file+0x228>)
 800424c:	f003 fe2c 	bl	8007ea8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004250:	2100      	movs	r1, #0
 8004252:	4872      	ldr	r0, [pc, #456]	; (800441c <open_bin_file+0x22c>)
 8004254:	f003 fe28 	bl	8007ea8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8004258:	2104      	movs	r1, #4
 800425a:	4870      	ldr	r0, [pc, #448]	; (800441c <open_bin_file+0x22c>)
 800425c:	f003 fe24 	bl	8007ea8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8004260:	2108      	movs	r1, #8
 8004262:	486e      	ldr	r0, [pc, #440]	; (800441c <open_bin_file+0x22c>)
 8004264:	f003 fe20 	bl	8007ea8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8004268:	210c      	movs	r1, #12
 800426a:	486c      	ldr	r0, [pc, #432]	; (800441c <open_bin_file+0x22c>)
 800426c:	f003 fe1c 	bl	8007ea8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8004270:	2104      	movs	r1, #4
 8004272:	486b      	ldr	r0, [pc, #428]	; (8004420 <open_bin_file+0x230>)
 8004274:	f003 fe18 	bl	8007ea8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004278:	2108      	movs	r1, #8
 800427a:	4869      	ldr	r0, [pc, #420]	; (8004420 <open_bin_file+0x230>)
 800427c:	f003 fe14 	bl	8007ea8 <HAL_TIM_PWM_Start>


	static bool open_file_flag = false;

	if(open_file_flag == false)		// if file wasn't opened before
 8004280:	4b68      	ldr	r3, [pc, #416]	; (8004424 <open_bin_file+0x234>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	f083 0301 	eor.w	r3, r3, #1
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d02b      	beq.n	80042e6 <open_bin_file+0xf6>
	{
		if(f_mount(&SDFatFs, (TCHAR const*)USER_Path, 0))
 800428e:	2200      	movs	r2, #0
 8004290:	4965      	ldr	r1, [pc, #404]	; (8004428 <open_bin_file+0x238>)
 8004292:	4866      	ldr	r0, [pc, #408]	; (800442c <open_bin_file+0x23c>)
 8004294:	f00b fba0 	bl	800f9d8 <f_mount>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <open_bin_file+0xb4>
		{
			SD_Error_Handler();
 800429e:	f7ff ff9b 	bl	80041d8 <SD_Error_Handler>
 80042a2:	e1a5      	b.n	80045f0 <open_bin_file+0x400>
		}
		else
		{
			if(f_open(&MyFile, name, FA_READ))
 80042a4:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80042a8:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 80042ac:	2201      	movs	r2, #1
 80042ae:	6819      	ldr	r1, [r3, #0]
 80042b0:	485f      	ldr	r0, [pc, #380]	; (8004430 <open_bin_file+0x240>)
 80042b2:	f00b fbd7 	bl	800fa64 <f_open>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <open_bin_file+0xd2>
			{
				SD_Error_Handler();
 80042bc:	f7ff ff8c 	bl	80041d8 <SD_Error_Handler>
 80042c0:	e196      	b.n	80045f0 <open_bin_file+0x400>
			}
			else
			{
				vFileSize = MyFile.obj.objsize;									// Get size of current file
 80042c2:	4b5b      	ldr	r3, [pc, #364]	; (8004430 <open_bin_file+0x240>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	4a5b      	ldr	r2, [pc, #364]	; (8004434 <open_bin_file+0x244>)
 80042c8:	6013      	str	r3, [r2, #0]
				how_many_frames = vFileSize/frame_size;							// How many frames into current file
 80042ca:	4b5a      	ldr	r3, [pc, #360]	; (8004434 <open_bin_file+0x244>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a5a      	ldr	r2, [pc, #360]	; (8004438 <open_bin_file+0x248>)
 80042d0:	6812      	ldr	r2, [r2, #0]
 80042d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80042d6:	461a      	mov	r2, r3
 80042d8:	4b58      	ldr	r3, [pc, #352]	; (800443c <open_bin_file+0x24c>)
 80042da:	601a      	str	r2, [r3, #0]

				open_file_flag = true;
 80042dc:	4b51      	ldr	r3, [pc, #324]	; (8004424 <open_bin_file+0x234>)
 80042de:	2201      	movs	r2, #1
 80042e0:	701a      	strb	r2, [r3, #0]
				return 0;
 80042e2:	2300      	movs	r3, #0
 80042e4:	e184      	b.n	80045f0 <open_bin_file+0x400>
	}
	else
	{
		static int frame = 0;

		if(frame >= how_many_frames)		// If all frames has been read
 80042e6:	4b56      	ldr	r3, [pc, #344]	; (8004440 <open_bin_file+0x250>)
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	4b54      	ldr	r3, [pc, #336]	; (800443c <open_bin_file+0x24c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	f2c0 8171 	blt.w	80045d6 <open_bin_file+0x3e6>
		{
			f_close(&MyFile);
 80042f4:	484e      	ldr	r0, [pc, #312]	; (8004430 <open_bin_file+0x240>)
 80042f6:	f00b ff5e 	bl	80101b6 <f_close>
			open_file_flag = false;
 80042fa:	4b4a      	ldr	r3, [pc, #296]	; (8004424 <open_bin_file+0x234>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	701a      	strb	r2, [r3, #0]
			frame = 0;
 8004300:	4b4f      	ldr	r3, [pc, #316]	; (8004440 <open_bin_file+0x250>)
 8004302:	2200      	movs	r2, #0
 8004304:	601a      	str	r2, [r3, #0]

			return 1;
 8004306:	2301      	movs	r3, #1
 8004308:	e172      	b.n	80045f0 <open_bin_file+0x400>

		for(frame; ((frame < how_many_frames) && (interrupt_flag == 1)); frame++)
		{
			//HAL_GPIO_TogglePin(GPIOE, TEST_OUTPUT_1_Pin);					// For measure

			if(interrupt_animation_flag == true)						// If was sent "STOP animation" command. 'z' key
 800430a:	4b4e      	ldr	r3, [pc, #312]	; (8004444 <open_bin_file+0x254>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <open_bin_file+0x138>
			{
				interrupt_animation_flag = false;
 8004312:	4b4c      	ldr	r3, [pc, #304]	; (8004444 <open_bin_file+0x254>)
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]
				stop_light_all_turn_off();
 8004318:	f7fc fd4a 	bl	8000db0 <stop_light_all_turn_off>
				turn_off_left_and_right_dtript();
 800431c:	f7fe f8fc 	bl	8002518 <turn_off_left_and_right_dtript>
				HAL_Delay(100);
 8004320:	2064      	movs	r0, #100	; 0x64
 8004322:	f000 fa11 	bl	8004748 <HAL_Delay>

				break;
 8004326:	e161      	b.n	80045ec <open_bin_file+0x3fc>
			}

			memset(frame_buffer, 0, sizeof(frame_buffer));		// must be 4 buffer
 8004328:	f107 0308 	add.w	r3, r7, #8
 800432c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8004330:	2100      	movs	r1, #0
 8004332:	4618      	mov	r0, r3
 8004334:	f00d f800 	bl	8011338 <memset>

			f_lseek(&MyFile, frame + ((frame_size - 1)*frame));						// shift on one frame
 8004338:	4b3f      	ldr	r3, [pc, #252]	; (8004438 <open_bin_file+0x248>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3b01      	subs	r3, #1
 800433e:	4a40      	ldr	r2, [pc, #256]	; (8004440 <open_bin_file+0x250>)
 8004340:	6812      	ldr	r2, [r2, #0]
 8004342:	fb03 f202 	mul.w	r2, r3, r2
 8004346:	4b3e      	ldr	r3, [pc, #248]	; (8004440 <open_bin_file+0x250>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4413      	add	r3, r2
 800434c:	4619      	mov	r1, r3
 800434e:	4838      	ldr	r0, [pc, #224]	; (8004430 <open_bin_file+0x240>)
 8004350:	f00b ff5b 	bl	801020a <f_lseek>
			f_read(&MyFile, aBuffer, vTemp, (UINT *)&vBytesReadCounter);
 8004354:	f8b7 23ce 	ldrh.w	r2, [r7, #974]	; 0x3ce
 8004358:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 800435c:	493a      	ldr	r1, [pc, #232]	; (8004448 <open_bin_file+0x258>)
 800435e:	4834      	ldr	r0, [pc, #208]	; (8004430 <open_bin_file+0x240>)
 8004360:	f00b fd4c 	bl	800fdfc <f_read>
			f_gets(frame_buffer, size_buf_for_read, &MyFile);     			// Read one fraime into buffer
 8004364:	f107 0308 	add.w	r3, r7, #8
 8004368:	4a31      	ldr	r2, [pc, #196]	; (8004430 <open_bin_file+0x240>)
 800436a:	f8d7 13c4 	ldr.w	r1, [r7, #964]	; 0x3c4
 800436e:	4618      	mov	r0, r3
 8004370:	f00c fafa 	bl	8010968 <f_gets>
//			{
//				int ggg = 99;
//			}

			// SET Left RGBW LEDs
			uint16_t number_of_rgbw_leds = 0;
 8004374:	2300      	movs	r3, #0
 8004376:	f8a7 33d6 	strh.w	r3, [r7, #982]	; 0x3d6
			int k = 0;
 800437a:	2300      	movs	r3, #0
 800437c:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
			for(k = end_left_led; k >= strat_left_led; k--)		// 84 LEDs
 8004380:	4b32      	ldr	r3, [pc, #200]	; (800444c <open_bin_file+0x25c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 8004388:	e037      	b.n	80043fa <open_bin_file+0x20a>
			{
				if(k%4 == 0)
 800438a:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d12c      	bne.n	80043f0 <open_bin_file+0x200>
				{
					set_left_one_rgbw_led(number_of_rgbw_leds, frame_buffer[k], frame_buffer[k+1], frame_buffer[k+2], frame_buffer[k+3]);
 8004396:	f8b7 33d6 	ldrh.w	r3, [r7, #982]	; 0x3d6
 800439a:	b2d8      	uxtb	r0, r3
 800439c:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 80043a0:	f5a3 7274 	sub.w	r2, r3, #976	; 0x3d0
 80043a4:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 80043a8:	4413      	add	r3, r2
 80043aa:	7819      	ldrb	r1, [r3, #0]
 80043ac:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 80043b0:	3301      	adds	r3, #1
 80043b2:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 80043b6:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 80043ba:	5cd4      	ldrb	r4, [r2, r3]
 80043bc:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 80043c0:	3302      	adds	r3, #2
 80043c2:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 80043c6:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 80043ca:	5cd5      	ldrb	r5, [r2, r3]
 80043cc:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 80043d0:	3303      	adds	r3, #3
 80043d2:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 80043d6:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 80043da:	5cd3      	ldrb	r3, [r2, r3]
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	462b      	mov	r3, r5
 80043e0:	4622      	mov	r2, r4
 80043e2:	f7fe f8f2 	bl	80025ca <set_left_one_rgbw_led>
					number_of_rgbw_leds++;
 80043e6:	f8b7 33d6 	ldrh.w	r3, [r7, #982]	; 0x3d6
 80043ea:	3301      	adds	r3, #1
 80043ec:	f8a7 33d6 	strh.w	r3, [r7, #982]	; 0x3d6
			for(k = end_left_led; k >= strat_left_led; k--)		// 84 LEDs
 80043f0:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 80043f4:	3b01      	subs	r3, #1
 80043f6:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 80043fa:	4b15      	ldr	r3, [pc, #84]	; (8004450 <open_bin_file+0x260>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 8004402:	429a      	cmp	r2, r3
 8004404:	dac1      	bge.n	800438a <open_bin_file+0x19a>
				}
			}

			// SET Right RGBW LEDs
			number_of_rgbw_leds = 0;
 8004406:	2300      	movs	r3, #0
 8004408:	f8a7 33d6 	strh.w	r3, [r7, #982]	; 0x3d6
			for(k = end_ritht_led; k >= strat_right_led; k--)
 800440c:	4b11      	ldr	r3, [pc, #68]	; (8004454 <open_bin_file+0x264>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 8004414:	e058      	b.n	80044c8 <open_bin_file+0x2d8>
 8004416:	bf00      	nop
 8004418:	20001630 	.word	0x20001630
 800441c:	20001678 	.word	0x20001678
 8004420:	200016c0 	.word	0x200016c0
 8004424:	20002cb8 	.word	0x20002cb8
 8004428:	200018f4 	.word	0x200018f4
 800442c:	20000590 	.word	0x20000590
 8004430:	200018fc 	.word	0x200018fc
 8004434:	20002cbc 	.word	0x20002cbc
 8004438:	20000008 	.word	0x20000008
 800443c:	20002cc0 	.word	0x20002cc0
 8004440:	20002cc4 	.word	0x20002cc4
 8004444:	200015ca 	.word	0x200015ca
 8004448:	20002ab8 	.word	0x20002ab8
 800444c:	20000014 	.word	0x20000014
 8004450:	20000010 	.word	0x20000010
 8004454:	2000001c 	.word	0x2000001c
			{
				if(k%4 == 0)
 8004458:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 800445c:	f003 0303 	and.w	r3, r3, #3
 8004460:	2b00      	cmp	r3, #0
 8004462:	d12c      	bne.n	80044be <open_bin_file+0x2ce>
				{
					set_right_one_rgbw_led(number_of_rgbw_leds, frame_buffer[k], frame_buffer[k+1], frame_buffer[k+2], frame_buffer[k+3]);
 8004464:	f8b7 33d6 	ldrh.w	r3, [r7, #982]	; 0x3d6
 8004468:	b2d8      	uxtb	r0, r3
 800446a:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 800446e:	f5a3 7274 	sub.w	r2, r3, #976	; 0x3d0
 8004472:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8004476:	4413      	add	r3, r2
 8004478:	7819      	ldrb	r1, [r3, #0]
 800447a:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 800447e:	3301      	adds	r3, #1
 8004480:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 8004484:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 8004488:	5cd4      	ldrb	r4, [r2, r3]
 800448a:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 800448e:	3302      	adds	r3, #2
 8004490:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 8004494:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 8004498:	5cd5      	ldrb	r5, [r2, r3]
 800449a:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 800449e:	3303      	adds	r3, #3
 80044a0:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 80044a4:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 80044a8:	5cd3      	ldrb	r3, [r2, r3]
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	462b      	mov	r3, r5
 80044ae:	4622      	mov	r2, r4
 80044b0:	f7fe f8ac 	bl	800260c <set_right_one_rgbw_led>
					number_of_rgbw_leds++;
 80044b4:	f8b7 33d6 	ldrh.w	r3, [r7, #982]	; 0x3d6
 80044b8:	3301      	adds	r3, #1
 80044ba:	f8a7 33d6 	strh.w	r3, [r7, #982]	; 0x3d6
			for(k = end_ritht_led; k >= strat_right_led; k--)
 80044be:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 80044c2:	3b01      	subs	r3, #1
 80044c4:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 80044c8:	4b4c      	ldr	r3, [pc, #304]	; (80045fc <open_bin_file+0x40c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 80044d0:	429a      	cmp	r2, r3
 80044d2:	dac1      	bge.n	8004458 <open_bin_file+0x268>
			// make_delay(267);

			// тут чекати на флаг 25 Гц  			// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

			// SET RED LEDs
			set_duty_cycle_stop_left_5(frame_buffer[start_evenled + 16 ]);
 80044d4:	4b4a      	ldr	r3, [pc, #296]	; (8004600 <open_bin_file+0x410>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3310      	adds	r3, #16
 80044da:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 80044de:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 80044e2:	5cd3      	ldrb	r3, [r2, r3]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fc fc03 	bl	8000cf0 <set_duty_cycle_stop_left_5>
			set_duty_cycle_stop_left_4(frame_buffer[start_evenled + 12 ]);
 80044ea:	4b45      	ldr	r3, [pc, #276]	; (8004600 <open_bin_file+0x410>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	330c      	adds	r3, #12
 80044f0:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 80044f4:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 80044f8:	5cd3      	ldrb	r3, [r2, r3]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fc fbe8 	bl	8000cd0 <set_duty_cycle_stop_left_4>
			set_duty_cycle_stop_left_3(frame_buffer[start_evenled + 8 ]);
 8004500:	4b3f      	ldr	r3, [pc, #252]	; (8004600 <open_bin_file+0x410>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3308      	adds	r3, #8
 8004506:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 800450a:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 800450e:	5cd3      	ldrb	r3, [r2, r3]
 8004510:	4618      	mov	r0, r3
 8004512:	f7fc fbcd 	bl	8000cb0 <set_duty_cycle_stop_left_3>
			set_duty_cycle_stop_left_2(frame_buffer[start_evenled + 4 ]);
 8004516:	4b3a      	ldr	r3, [pc, #232]	; (8004600 <open_bin_file+0x410>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	3304      	adds	r3, #4
 800451c:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 8004520:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 8004524:	5cd3      	ldrb	r3, [r2, r3]
 8004526:	4618      	mov	r0, r3
 8004528:	f7fc fbb2 	bl	8000c90 <set_duty_cycle_stop_left_2>
			set_duty_cycle_stop_left_1(frame_buffer[start_evenled]);
 800452c:	4b34      	ldr	r3, [pc, #208]	; (8004600 <open_bin_file+0x410>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 8004534:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 8004538:	5cd3      	ldrb	r3, [r2, r3]
 800453a:	4618      	mov	r0, r3
 800453c:	f7fc fb98 	bl	8000c70 <set_duty_cycle_stop_left_1>

			set_duty_cycle_stop_ritht_1(frame_buffer[start_evenled + 20 ]);
 8004540:	4b2f      	ldr	r3, [pc, #188]	; (8004600 <open_bin_file+0x410>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3314      	adds	r3, #20
 8004546:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 800454a:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 800454e:	5cd3      	ldrb	r3, [r2, r3]
 8004550:	4618      	mov	r0, r3
 8004552:	f7fc fbdd 	bl	8000d10 <set_duty_cycle_stop_ritht_1>
			set_duty_cycle_stop_ritht_2(frame_buffer[start_evenled + 24 ]);
 8004556:	4b2a      	ldr	r3, [pc, #168]	; (8004600 <open_bin_file+0x410>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3318      	adds	r3, #24
 800455c:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 8004560:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 8004564:	5cd3      	ldrb	r3, [r2, r3]
 8004566:	4618      	mov	r0, r3
 8004568:	f7fc fbe2 	bl	8000d30 <set_duty_cycle_stop_ritht_2>
			set_duty_cycle_stop_ritht_3(frame_buffer[start_evenled + 28 ]);
 800456c:	4b24      	ldr	r3, [pc, #144]	; (8004600 <open_bin_file+0x410>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	331c      	adds	r3, #28
 8004572:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 8004576:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 800457a:	5cd3      	ldrb	r3, [r2, r3]
 800457c:	4618      	mov	r0, r3
 800457e:	f7fc fbe7 	bl	8000d50 <set_duty_cycle_stop_ritht_3>
			set_duty_cycle_stop_ritht_4(frame_buffer[start_evenled + 32 ]);
 8004582:	4b1f      	ldr	r3, [pc, #124]	; (8004600 <open_bin_file+0x410>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	3320      	adds	r3, #32
 8004588:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 800458c:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 8004590:	5cd3      	ldrb	r3, [r2, r3]
 8004592:	4618      	mov	r0, r3
 8004594:	f7fc fbec 	bl	8000d70 <set_duty_cycle_stop_ritht_4>
			set_duty_cycle_stop_ritht_5(frame_buffer[start_evenled + 36 ]);
 8004598:	4b19      	ldr	r3, [pc, #100]	; (8004600 <open_bin_file+0x410>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3324      	adds	r3, #36	; 0x24
 800459e:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 80045a2:	f5a2 7274 	sub.w	r2, r2, #976	; 0x3d0
 80045a6:	5cd3      	ldrb	r3, [r2, r3]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fc fbf1 	bl	8000d90 <set_duty_cycle_stop_ritht_5>

			// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

			while (!ARGB_Show_left());  		// Update    	(Takes time around 17 us)
 80045ae:	bf00      	nop
 80045b0:	f7fc ff44 	bl	800143c <ARGB_Show_left>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0fa      	beq.n	80045b0 <open_bin_file+0x3c0>
			while (!ARGB_Show_right());  		// Update		(Takes time around 17 us)
 80045ba:	bf00      	nop
 80045bc:	f7fd f90a 	bl	80017d4 <ARGB_Show_right>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0fa      	beq.n	80045bc <open_bin_file+0x3cc>

			interrupt_flag = 0;				// Tim 13
 80045c6:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <open_bin_file+0x414>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	701a      	strb	r2, [r3, #0]
		for(frame; ((frame < how_many_frames) && (interrupt_flag == 1)); frame++)
 80045cc:	4b0e      	ldr	r3, [pc, #56]	; (8004608 <open_bin_file+0x418>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3301      	adds	r3, #1
 80045d2:	4a0d      	ldr	r2, [pc, #52]	; (8004608 <open_bin_file+0x418>)
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <open_bin_file+0x418>)
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	4b0c      	ldr	r3, [pc, #48]	; (800460c <open_bin_file+0x41c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	da04      	bge.n	80045ec <open_bin_file+0x3fc>
 80045e2:	4b08      	ldr	r3, [pc, #32]	; (8004604 <open_bin_file+0x414>)
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	f43f ae8f 	beq.w	800430a <open_bin_file+0x11a>

			// HAL_GPIO_WritePin(GPIOE, TEST_OUTPUT_2_Pin, GPIO_PIN_SET);
			//HAL_GPIO_TogglePin(GPIOE, TEST_OUTPUT_1_Pin);					// For measure
		}
		return 0;
 80045ec:	2300      	movs	r3, #0
 80045ee:	e7ff      	b.n	80045f0 <open_bin_file+0x400>
	}
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	f507 7776 	add.w	r7, r7, #984	; 0x3d8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bdb0      	pop	{r4, r5, r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20000018 	.word	0x20000018
 8004600:	2000000c 	.word	0x2000000c
 8004604:	200015d7 	.word	0x200015d7
 8004608:	20002cc4 	.word	0x20002cc4
 800460c:	20002cc0 	.word	0x20002cc0

08004610 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004610:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004648 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004614:	480d      	ldr	r0, [pc, #52]	; (800464c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004616:	490e      	ldr	r1, [pc, #56]	; (8004650 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004618:	4a0e      	ldr	r2, [pc, #56]	; (8004654 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800461a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800461c:	e002      	b.n	8004624 <LoopCopyDataInit>

0800461e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800461e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004622:	3304      	adds	r3, #4

08004624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004628:	d3f9      	bcc.n	800461e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800462a:	4a0b      	ldr	r2, [pc, #44]	; (8004658 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800462c:	4c0b      	ldr	r4, [pc, #44]	; (800465c <LoopFillZerobss+0x26>)
  movs r3, #0
 800462e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004630:	e001      	b.n	8004636 <LoopFillZerobss>

08004632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004634:	3204      	adds	r2, #4

08004636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004638:	d3fb      	bcc.n	8004632 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800463a:	f7ff fa85 	bl	8003b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800463e:	f00c fe47 	bl	80112d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004642:	f7fe f823 	bl	800268c <main>
  bx  lr    
 8004646:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004648:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800464c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004650:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8004654:	08012250 	.word	0x08012250
  ldr r2, =_sbss
 8004658:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 800465c:	200035f8 	.word	0x200035f8

08004660 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004660:	e7fe      	b.n	8004660 <ADC_IRQHandler>
	...

08004664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004668:	4b0e      	ldr	r3, [pc, #56]	; (80046a4 <HAL_Init+0x40>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a0d      	ldr	r2, [pc, #52]	; (80046a4 <HAL_Init+0x40>)
 800466e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004672:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004674:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <HAL_Init+0x40>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a0a      	ldr	r2, [pc, #40]	; (80046a4 <HAL_Init+0x40>)
 800467a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800467e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004680:	4b08      	ldr	r3, [pc, #32]	; (80046a4 <HAL_Init+0x40>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a07      	ldr	r2, [pc, #28]	; (80046a4 <HAL_Init+0x40>)
 8004686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800468a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800468c:	2003      	movs	r0, #3
 800468e:	f000 f94f 	bl	8004930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004692:	2000      	movs	r0, #0
 8004694:	f000 f808 	bl	80046a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004698:	f7fe febe 	bl	8003418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40023c00 	.word	0x40023c00

080046a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80046b0:	4b12      	ldr	r3, [pc, #72]	; (80046fc <HAL_InitTick+0x54>)
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	4b12      	ldr	r3, [pc, #72]	; (8004700 <HAL_InitTick+0x58>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	4619      	mov	r1, r3
 80046ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046be:	fbb3 f3f1 	udiv	r3, r3, r1
 80046c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 f967 	bl	800499a <HAL_SYSTICK_Config>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e00e      	b.n	80046f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b0f      	cmp	r3, #15
 80046da:	d80a      	bhi.n	80046f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046dc:	2200      	movs	r2, #0
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046e4:	f000 f92f 	bl	8004946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046e8:	4a06      	ldr	r2, [pc, #24]	; (8004704 <HAL_InitTick+0x5c>)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	e000      	b.n	80046f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	20000004 	.word	0x20000004
 8004700:	20000024 	.word	0x20000024
 8004704:	20000020 	.word	0x20000020

08004708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800470c:	4b06      	ldr	r3, [pc, #24]	; (8004728 <HAL_IncTick+0x20>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	461a      	mov	r2, r3
 8004712:	4b06      	ldr	r3, [pc, #24]	; (800472c <HAL_IncTick+0x24>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4413      	add	r3, r2
 8004718:	4a04      	ldr	r2, [pc, #16]	; (800472c <HAL_IncTick+0x24>)
 800471a:	6013      	str	r3, [r2, #0]
}
 800471c:	bf00      	nop
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	20000024 	.word	0x20000024
 800472c:	20002cc8 	.word	0x20002cc8

08004730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
  return uwTick;
 8004734:	4b03      	ldr	r3, [pc, #12]	; (8004744 <HAL_GetTick+0x14>)
 8004736:	681b      	ldr	r3, [r3, #0]
}
 8004738:	4618      	mov	r0, r3
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	20002cc8 	.word	0x20002cc8

08004748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004750:	f7ff ffee 	bl	8004730 <HAL_GetTick>
 8004754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004760:	d005      	beq.n	800476e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004762:	4b0a      	ldr	r3, [pc, #40]	; (800478c <HAL_Delay+0x44>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4413      	add	r3, r2
 800476c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800476e:	bf00      	nop
 8004770:	f7ff ffde 	bl	8004730 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	429a      	cmp	r2, r3
 800477e:	d8f7      	bhi.n	8004770 <HAL_Delay+0x28>
  {
  }
}
 8004780:	bf00      	nop
 8004782:	bf00      	nop
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	20000024 	.word	0x20000024

08004790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047a0:	4b0c      	ldr	r3, [pc, #48]	; (80047d4 <__NVIC_SetPriorityGrouping+0x44>)
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047ac:	4013      	ands	r3, r2
 80047ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047c2:	4a04      	ldr	r2, [pc, #16]	; (80047d4 <__NVIC_SetPriorityGrouping+0x44>)
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	60d3      	str	r3, [r2, #12]
}
 80047c8:	bf00      	nop
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	e000ed00 	.word	0xe000ed00

080047d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047dc:	4b04      	ldr	r3, [pc, #16]	; (80047f0 <__NVIC_GetPriorityGrouping+0x18>)
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	0a1b      	lsrs	r3, r3, #8
 80047e2:	f003 0307 	and.w	r3, r3, #7
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	e000ed00 	.word	0xe000ed00

080047f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	4603      	mov	r3, r0
 80047fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004802:	2b00      	cmp	r3, #0
 8004804:	db0b      	blt.n	800481e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004806:	79fb      	ldrb	r3, [r7, #7]
 8004808:	f003 021f 	and.w	r2, r3, #31
 800480c:	4907      	ldr	r1, [pc, #28]	; (800482c <__NVIC_EnableIRQ+0x38>)
 800480e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004812:	095b      	lsrs	r3, r3, #5
 8004814:	2001      	movs	r0, #1
 8004816:	fa00 f202 	lsl.w	r2, r0, r2
 800481a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	e000e100 	.word	0xe000e100

08004830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	4603      	mov	r3, r0
 8004838:	6039      	str	r1, [r7, #0]
 800483a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800483c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004840:	2b00      	cmp	r3, #0
 8004842:	db0a      	blt.n	800485a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	b2da      	uxtb	r2, r3
 8004848:	490c      	ldr	r1, [pc, #48]	; (800487c <__NVIC_SetPriority+0x4c>)
 800484a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800484e:	0112      	lsls	r2, r2, #4
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	440b      	add	r3, r1
 8004854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004858:	e00a      	b.n	8004870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	b2da      	uxtb	r2, r3
 800485e:	4908      	ldr	r1, [pc, #32]	; (8004880 <__NVIC_SetPriority+0x50>)
 8004860:	79fb      	ldrb	r3, [r7, #7]
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	3b04      	subs	r3, #4
 8004868:	0112      	lsls	r2, r2, #4
 800486a:	b2d2      	uxtb	r2, r2
 800486c:	440b      	add	r3, r1
 800486e:	761a      	strb	r2, [r3, #24]
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	e000e100 	.word	0xe000e100
 8004880:	e000ed00 	.word	0xe000ed00

08004884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004884:	b480      	push	{r7}
 8004886:	b089      	sub	sp, #36	; 0x24
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	f1c3 0307 	rsb	r3, r3, #7
 800489e:	2b04      	cmp	r3, #4
 80048a0:	bf28      	it	cs
 80048a2:	2304      	movcs	r3, #4
 80048a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	3304      	adds	r3, #4
 80048aa:	2b06      	cmp	r3, #6
 80048ac:	d902      	bls.n	80048b4 <NVIC_EncodePriority+0x30>
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	3b03      	subs	r3, #3
 80048b2:	e000      	b.n	80048b6 <NVIC_EncodePriority+0x32>
 80048b4:	2300      	movs	r3, #0
 80048b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	43da      	mvns	r2, r3
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	401a      	ands	r2, r3
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	fa01 f303 	lsl.w	r3, r1, r3
 80048d6:	43d9      	mvns	r1, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048dc:	4313      	orrs	r3, r2
         );
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3724      	adds	r7, #36	; 0x24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
	...

080048ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048fc:	d301      	bcc.n	8004902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048fe:	2301      	movs	r3, #1
 8004900:	e00f      	b.n	8004922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004902:	4a0a      	ldr	r2, [pc, #40]	; (800492c <SysTick_Config+0x40>)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3b01      	subs	r3, #1
 8004908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800490a:	210f      	movs	r1, #15
 800490c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004910:	f7ff ff8e 	bl	8004830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004914:	4b05      	ldr	r3, [pc, #20]	; (800492c <SysTick_Config+0x40>)
 8004916:	2200      	movs	r2, #0
 8004918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800491a:	4b04      	ldr	r3, [pc, #16]	; (800492c <SysTick_Config+0x40>)
 800491c:	2207      	movs	r2, #7
 800491e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	e000e010 	.word	0xe000e010

08004930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7ff ff29 	bl	8004790 <__NVIC_SetPriorityGrouping>
}
 800493e:	bf00      	nop
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004946:	b580      	push	{r7, lr}
 8004948:	b086      	sub	sp, #24
 800494a:	af00      	add	r7, sp, #0
 800494c:	4603      	mov	r3, r0
 800494e:	60b9      	str	r1, [r7, #8]
 8004950:	607a      	str	r2, [r7, #4]
 8004952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004954:	2300      	movs	r3, #0
 8004956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004958:	f7ff ff3e 	bl	80047d8 <__NVIC_GetPriorityGrouping>
 800495c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	68b9      	ldr	r1, [r7, #8]
 8004962:	6978      	ldr	r0, [r7, #20]
 8004964:	f7ff ff8e 	bl	8004884 <NVIC_EncodePriority>
 8004968:	4602      	mov	r2, r0
 800496a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800496e:	4611      	mov	r1, r2
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff ff5d 	bl	8004830 <__NVIC_SetPriority>
}
 8004976:	bf00      	nop
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b082      	sub	sp, #8
 8004982:	af00      	add	r7, sp, #0
 8004984:	4603      	mov	r3, r0
 8004986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff ff31 	bl	80047f4 <__NVIC_EnableIRQ>
}
 8004992:	bf00      	nop
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7ff ffa2 	bl	80048ec <SysTick_Config>
 80049a8:	4603      	mov	r3, r0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
	...

080049b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80049c0:	f7ff feb6 	bl	8004730 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e099      	b.n	8004b04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2202      	movs	r2, #2
 80049d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 0201 	bic.w	r2, r2, #1
 80049ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049f0:	e00f      	b.n	8004a12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049f2:	f7ff fe9d 	bl	8004730 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b05      	cmp	r3, #5
 80049fe:	d908      	bls.n	8004a12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2220      	movs	r2, #32
 8004a04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2203      	movs	r2, #3
 8004a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e078      	b.n	8004b04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e8      	bne.n	80049f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4b38      	ldr	r3, [pc, #224]	; (8004b0c <HAL_DMA_Init+0x158>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d107      	bne.n	8004a7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a74:	4313      	orrs	r3, r2
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f023 0307 	bic.w	r3, r3, #7
 8004a92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d117      	bne.n	8004ad6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00e      	beq.n	8004ad6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 fb01 	bl	80050c0 <DMA_CheckFifoParam>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d008      	beq.n	8004ad6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2240      	movs	r2, #64	; 0x40
 8004ac8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e016      	b.n	8004b04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 fab8 	bl	8005054 <DMA_CalcBaseAndBitshift>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aec:	223f      	movs	r2, #63	; 0x3f
 8004aee:	409a      	lsls	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	f010803f 	.word	0xf010803f

08004b10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
 8004b1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d101      	bne.n	8004b36 <HAL_DMA_Start_IT+0x26>
 8004b32:	2302      	movs	r3, #2
 8004b34:	e040      	b.n	8004bb8 <HAL_DMA_Start_IT+0xa8>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d12f      	bne.n	8004baa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	68b9      	ldr	r1, [r7, #8]
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 fa4a 	bl	8004ff8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b68:	223f      	movs	r2, #63	; 0x3f
 8004b6a:	409a      	lsls	r2, r3
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f042 0216 	orr.w	r2, r2, #22
 8004b7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d007      	beq.n	8004b98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0208 	orr.w	r2, r2, #8
 8004b96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0201 	orr.w	r2, r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	e005      	b.n	8004bb6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bcc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004bce:	f7ff fdaf 	bl	8004730 <HAL_GetTick>
 8004bd2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d008      	beq.n	8004bf2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2280      	movs	r2, #128	; 0x80
 8004be4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e052      	b.n	8004c98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0216 	bic.w	r2, r2, #22
 8004c00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695a      	ldr	r2, [r3, #20]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d103      	bne.n	8004c22 <HAL_DMA_Abort+0x62>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d007      	beq.n	8004c32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0208 	bic.w	r2, r2, #8
 8004c30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0201 	bic.w	r2, r2, #1
 8004c40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c42:	e013      	b.n	8004c6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c44:	f7ff fd74 	bl	8004730 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b05      	cmp	r3, #5
 8004c50:	d90c      	bls.n	8004c6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2220      	movs	r2, #32
 8004c56:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2203      	movs	r2, #3
 8004c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e015      	b.n	8004c98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1e4      	bne.n	8004c44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c7e:	223f      	movs	r2, #63	; 0x3f
 8004c80:	409a      	lsls	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d004      	beq.n	8004cbe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2280      	movs	r2, #128	; 0x80
 8004cb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e00c      	b.n	8004cd8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2205      	movs	r2, #5
 8004cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 0201 	bic.w	r2, r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004cf0:	4b8e      	ldr	r3, [pc, #568]	; (8004f2c <HAL_DMA_IRQHandler+0x248>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a8e      	ldr	r2, [pc, #568]	; (8004f30 <HAL_DMA_IRQHandler+0x24c>)
 8004cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfa:	0a9b      	lsrs	r3, r3, #10
 8004cfc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d0e:	2208      	movs	r2, #8
 8004d10:	409a      	lsls	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4013      	ands	r3, r2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d01a      	beq.n	8004d50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d013      	beq.n	8004d50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0204 	bic.w	r2, r2, #4
 8004d36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d3c:	2208      	movs	r2, #8
 8004d3e:	409a      	lsls	r2, r3
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d48:	f043 0201 	orr.w	r2, r3, #1
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d54:	2201      	movs	r2, #1
 8004d56:	409a      	lsls	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d012      	beq.n	8004d86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00b      	beq.n	8004d86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d72:	2201      	movs	r2, #1
 8004d74:	409a      	lsls	r2, r3
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7e:	f043 0202 	orr.w	r2, r3, #2
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d8a:	2204      	movs	r2, #4
 8004d8c:	409a      	lsls	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	4013      	ands	r3, r2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d012      	beq.n	8004dbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00b      	beq.n	8004dbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da8:	2204      	movs	r2, #4
 8004daa:	409a      	lsls	r2, r3
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db4:	f043 0204 	orr.w	r2, r3, #4
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc0:	2210      	movs	r2, #16
 8004dc2:	409a      	lsls	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d043      	beq.n	8004e54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d03c      	beq.n	8004e54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dde:	2210      	movs	r2, #16
 8004de0:	409a      	lsls	r2, r3
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d018      	beq.n	8004e26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d108      	bne.n	8004e14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d024      	beq.n	8004e54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	4798      	blx	r3
 8004e12:	e01f      	b.n	8004e54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d01b      	beq.n	8004e54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	4798      	blx	r3
 8004e24:	e016      	b.n	8004e54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d107      	bne.n	8004e44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0208 	bic.w	r2, r2, #8
 8004e42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e58:	2220      	movs	r2, #32
 8004e5a:	409a      	lsls	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 808f 	beq.w	8004f84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0310 	and.w	r3, r3, #16
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 8087 	beq.w	8004f84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	409a      	lsls	r2, r3
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b05      	cmp	r3, #5
 8004e8c:	d136      	bne.n	8004efc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0216 	bic.w	r2, r2, #22
 8004e9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	695a      	ldr	r2, [r3, #20]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004eac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d103      	bne.n	8004ebe <HAL_DMA_IRQHandler+0x1da>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d007      	beq.n	8004ece <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0208 	bic.w	r2, r2, #8
 8004ecc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed2:	223f      	movs	r2, #63	; 0x3f
 8004ed4:	409a      	lsls	r2, r3
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d07e      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	4798      	blx	r3
        }
        return;
 8004efa:	e079      	b.n	8004ff0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d01d      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10d      	bne.n	8004f34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d031      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	4798      	blx	r3
 8004f28:	e02c      	b.n	8004f84 <HAL_DMA_IRQHandler+0x2a0>
 8004f2a:	bf00      	nop
 8004f2c:	20000004 	.word	0x20000004
 8004f30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d023      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	4798      	blx	r3
 8004f44:	e01e      	b.n	8004f84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10f      	bne.n	8004f74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0210 	bic.w	r2, r2, #16
 8004f62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d032      	beq.n	8004ff2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d022      	beq.n	8004fde <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2205      	movs	r2, #5
 8004f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0201 	bic.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	60bb      	str	r3, [r7, #8]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d307      	bcc.n	8004fcc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1f2      	bne.n	8004fb0 <HAL_DMA_IRQHandler+0x2cc>
 8004fca:	e000      	b.n	8004fce <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004fcc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d005      	beq.n	8004ff2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	4798      	blx	r3
 8004fee:	e000      	b.n	8004ff2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ff0:	bf00      	nop
    }
  }
}
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
 8005004:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005014:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	2b40      	cmp	r3, #64	; 0x40
 8005024:	d108      	bne.n	8005038 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005036:	e007      	b.n	8005048 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	60da      	str	r2, [r3, #12]
}
 8005048:	bf00      	nop
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	b2db      	uxtb	r3, r3
 8005062:	3b10      	subs	r3, #16
 8005064:	4a14      	ldr	r2, [pc, #80]	; (80050b8 <DMA_CalcBaseAndBitshift+0x64>)
 8005066:	fba2 2303 	umull	r2, r3, r2, r3
 800506a:	091b      	lsrs	r3, r3, #4
 800506c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800506e:	4a13      	ldr	r2, [pc, #76]	; (80050bc <DMA_CalcBaseAndBitshift+0x68>)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4413      	add	r3, r2
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	461a      	mov	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2b03      	cmp	r3, #3
 8005080:	d909      	bls.n	8005096 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800508a:	f023 0303 	bic.w	r3, r3, #3
 800508e:	1d1a      	adds	r2, r3, #4
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	659a      	str	r2, [r3, #88]	; 0x58
 8005094:	e007      	b.n	80050a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800509e:	f023 0303 	bic.w	r3, r3, #3
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	aaaaaaab 	.word	0xaaaaaaab
 80050bc:	08011dc4 	.word	0x08011dc4

080050c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050c8:	2300      	movs	r3, #0
 80050ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d11f      	bne.n	800511a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b03      	cmp	r3, #3
 80050de:	d856      	bhi.n	800518e <DMA_CheckFifoParam+0xce>
 80050e0:	a201      	add	r2, pc, #4	; (adr r2, 80050e8 <DMA_CheckFifoParam+0x28>)
 80050e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e6:	bf00      	nop
 80050e8:	080050f9 	.word	0x080050f9
 80050ec:	0800510b 	.word	0x0800510b
 80050f0:	080050f9 	.word	0x080050f9
 80050f4:	0800518f 	.word	0x0800518f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d046      	beq.n	8005192 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005108:	e043      	b.n	8005192 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005112:	d140      	bne.n	8005196 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005118:	e03d      	b.n	8005196 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005122:	d121      	bne.n	8005168 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2b03      	cmp	r3, #3
 8005128:	d837      	bhi.n	800519a <DMA_CheckFifoParam+0xda>
 800512a:	a201      	add	r2, pc, #4	; (adr r2, 8005130 <DMA_CheckFifoParam+0x70>)
 800512c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005130:	08005141 	.word	0x08005141
 8005134:	08005147 	.word	0x08005147
 8005138:	08005141 	.word	0x08005141
 800513c:	08005159 	.word	0x08005159
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	73fb      	strb	r3, [r7, #15]
      break;
 8005144:	e030      	b.n	80051a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d025      	beq.n	800519e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005156:	e022      	b.n	800519e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005160:	d11f      	bne.n	80051a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005166:	e01c      	b.n	80051a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b02      	cmp	r3, #2
 800516c:	d903      	bls.n	8005176 <DMA_CheckFifoParam+0xb6>
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2b03      	cmp	r3, #3
 8005172:	d003      	beq.n	800517c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005174:	e018      	b.n	80051a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	73fb      	strb	r3, [r7, #15]
      break;
 800517a:	e015      	b.n	80051a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00e      	beq.n	80051a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	73fb      	strb	r3, [r7, #15]
      break;
 800518c:	e00b      	b.n	80051a6 <DMA_CheckFifoParam+0xe6>
      break;
 800518e:	bf00      	nop
 8005190:	e00a      	b.n	80051a8 <DMA_CheckFifoParam+0xe8>
      break;
 8005192:	bf00      	nop
 8005194:	e008      	b.n	80051a8 <DMA_CheckFifoParam+0xe8>
      break;
 8005196:	bf00      	nop
 8005198:	e006      	b.n	80051a8 <DMA_CheckFifoParam+0xe8>
      break;
 800519a:	bf00      	nop
 800519c:	e004      	b.n	80051a8 <DMA_CheckFifoParam+0xe8>
      break;
 800519e:	bf00      	nop
 80051a0:	e002      	b.n	80051a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80051a2:	bf00      	nop
 80051a4:	e000      	b.n	80051a8 <DMA_CheckFifoParam+0xe8>
      break;
 80051a6:	bf00      	nop
    }
  } 
  
  return status; 
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop

080051b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b089      	sub	sp, #36	; 0x24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051ce:	2300      	movs	r3, #0
 80051d0:	61fb      	str	r3, [r7, #28]
 80051d2:	e16b      	b.n	80054ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051d4:	2201      	movs	r2, #1
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	fa02 f303 	lsl.w	r3, r2, r3
 80051dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	4013      	ands	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	f040 815a 	bne.w	80054a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d005      	beq.n	800520a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005206:	2b02      	cmp	r3, #2
 8005208:	d130      	bne.n	800526c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	2203      	movs	r2, #3
 8005216:	fa02 f303 	lsl.w	r3, r2, r3
 800521a:	43db      	mvns	r3, r3
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	4013      	ands	r3, r2
 8005220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	68da      	ldr	r2, [r3, #12]
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	fa02 f303 	lsl.w	r3, r2, r3
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	4313      	orrs	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005240:	2201      	movs	r2, #1
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	fa02 f303 	lsl.w	r3, r2, r3
 8005248:	43db      	mvns	r3, r3
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	4013      	ands	r3, r2
 800524e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	091b      	lsrs	r3, r3, #4
 8005256:	f003 0201 	and.w	r2, r3, #1
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	fa02 f303 	lsl.w	r3, r2, r3
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	4313      	orrs	r3, r2
 8005264:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f003 0303 	and.w	r3, r3, #3
 8005274:	2b03      	cmp	r3, #3
 8005276:	d017      	beq.n	80052a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	2203      	movs	r2, #3
 8005284:	fa02 f303 	lsl.w	r3, r2, r3
 8005288:	43db      	mvns	r3, r3
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	4013      	ands	r3, r2
 800528e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	fa02 f303 	lsl.w	r3, r2, r3
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	4313      	orrs	r3, r2
 80052a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f003 0303 	and.w	r3, r3, #3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d123      	bne.n	80052fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	08da      	lsrs	r2, r3, #3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3208      	adds	r2, #8
 80052bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	f003 0307 	and.w	r3, r3, #7
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	220f      	movs	r2, #15
 80052cc:	fa02 f303 	lsl.w	r3, r2, r3
 80052d0:	43db      	mvns	r3, r3
 80052d2:	69ba      	ldr	r2, [r7, #24]
 80052d4:	4013      	ands	r3, r2
 80052d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	691a      	ldr	r2, [r3, #16]
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	fa02 f303 	lsl.w	r3, r2, r3
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	08da      	lsrs	r2, r3, #3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	3208      	adds	r2, #8
 80052f6:	69b9      	ldr	r1, [r7, #24]
 80052f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	2203      	movs	r2, #3
 8005308:	fa02 f303 	lsl.w	r3, r2, r3
 800530c:	43db      	mvns	r3, r3
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	4013      	ands	r3, r2
 8005312:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f003 0203 	and.w	r2, r3, #3
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	fa02 f303 	lsl.w	r3, r2, r3
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	4313      	orrs	r3, r2
 8005328:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 80b4 	beq.w	80054a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800533e:	2300      	movs	r3, #0
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	4b60      	ldr	r3, [pc, #384]	; (80054c4 <HAL_GPIO_Init+0x30c>)
 8005344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005346:	4a5f      	ldr	r2, [pc, #380]	; (80054c4 <HAL_GPIO_Init+0x30c>)
 8005348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800534c:	6453      	str	r3, [r2, #68]	; 0x44
 800534e:	4b5d      	ldr	r3, [pc, #372]	; (80054c4 <HAL_GPIO_Init+0x30c>)
 8005350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800535a:	4a5b      	ldr	r2, [pc, #364]	; (80054c8 <HAL_GPIO_Init+0x310>)
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	089b      	lsrs	r3, r3, #2
 8005360:	3302      	adds	r3, #2
 8005362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005366:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f003 0303 	and.w	r3, r3, #3
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	220f      	movs	r2, #15
 8005372:	fa02 f303 	lsl.w	r3, r2, r3
 8005376:	43db      	mvns	r3, r3
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	4013      	ands	r3, r2
 800537c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a52      	ldr	r2, [pc, #328]	; (80054cc <HAL_GPIO_Init+0x314>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d02b      	beq.n	80053de <HAL_GPIO_Init+0x226>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a51      	ldr	r2, [pc, #324]	; (80054d0 <HAL_GPIO_Init+0x318>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d025      	beq.n	80053da <HAL_GPIO_Init+0x222>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a50      	ldr	r2, [pc, #320]	; (80054d4 <HAL_GPIO_Init+0x31c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d01f      	beq.n	80053d6 <HAL_GPIO_Init+0x21e>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a4f      	ldr	r2, [pc, #316]	; (80054d8 <HAL_GPIO_Init+0x320>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d019      	beq.n	80053d2 <HAL_GPIO_Init+0x21a>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a4e      	ldr	r2, [pc, #312]	; (80054dc <HAL_GPIO_Init+0x324>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d013      	beq.n	80053ce <HAL_GPIO_Init+0x216>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a4d      	ldr	r2, [pc, #308]	; (80054e0 <HAL_GPIO_Init+0x328>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d00d      	beq.n	80053ca <HAL_GPIO_Init+0x212>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a4c      	ldr	r2, [pc, #304]	; (80054e4 <HAL_GPIO_Init+0x32c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d007      	beq.n	80053c6 <HAL_GPIO_Init+0x20e>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a4b      	ldr	r2, [pc, #300]	; (80054e8 <HAL_GPIO_Init+0x330>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d101      	bne.n	80053c2 <HAL_GPIO_Init+0x20a>
 80053be:	2307      	movs	r3, #7
 80053c0:	e00e      	b.n	80053e0 <HAL_GPIO_Init+0x228>
 80053c2:	2308      	movs	r3, #8
 80053c4:	e00c      	b.n	80053e0 <HAL_GPIO_Init+0x228>
 80053c6:	2306      	movs	r3, #6
 80053c8:	e00a      	b.n	80053e0 <HAL_GPIO_Init+0x228>
 80053ca:	2305      	movs	r3, #5
 80053cc:	e008      	b.n	80053e0 <HAL_GPIO_Init+0x228>
 80053ce:	2304      	movs	r3, #4
 80053d0:	e006      	b.n	80053e0 <HAL_GPIO_Init+0x228>
 80053d2:	2303      	movs	r3, #3
 80053d4:	e004      	b.n	80053e0 <HAL_GPIO_Init+0x228>
 80053d6:	2302      	movs	r3, #2
 80053d8:	e002      	b.n	80053e0 <HAL_GPIO_Init+0x228>
 80053da:	2301      	movs	r3, #1
 80053dc:	e000      	b.n	80053e0 <HAL_GPIO_Init+0x228>
 80053de:	2300      	movs	r3, #0
 80053e0:	69fa      	ldr	r2, [r7, #28]
 80053e2:	f002 0203 	and.w	r2, r2, #3
 80053e6:	0092      	lsls	r2, r2, #2
 80053e8:	4093      	lsls	r3, r2
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053f0:	4935      	ldr	r1, [pc, #212]	; (80054c8 <HAL_GPIO_Init+0x310>)
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	089b      	lsrs	r3, r3, #2
 80053f6:	3302      	adds	r3, #2
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053fe:	4b3b      	ldr	r3, [pc, #236]	; (80054ec <HAL_GPIO_Init+0x334>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	43db      	mvns	r3, r3
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	4013      	ands	r3, r2
 800540c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	4313      	orrs	r3, r2
 8005420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005422:	4a32      	ldr	r2, [pc, #200]	; (80054ec <HAL_GPIO_Init+0x334>)
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005428:	4b30      	ldr	r3, [pc, #192]	; (80054ec <HAL_GPIO_Init+0x334>)
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	43db      	mvns	r3, r3
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	4013      	ands	r3, r2
 8005436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d003      	beq.n	800544c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800544c:	4a27      	ldr	r2, [pc, #156]	; (80054ec <HAL_GPIO_Init+0x334>)
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005452:	4b26      	ldr	r3, [pc, #152]	; (80054ec <HAL_GPIO_Init+0x334>)
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	43db      	mvns	r3, r3
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	4013      	ands	r3, r2
 8005460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	4313      	orrs	r3, r2
 8005474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005476:	4a1d      	ldr	r2, [pc, #116]	; (80054ec <HAL_GPIO_Init+0x334>)
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800547c:	4b1b      	ldr	r3, [pc, #108]	; (80054ec <HAL_GPIO_Init+0x334>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	43db      	mvns	r3, r3
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	4013      	ands	r3, r2
 800548a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	4313      	orrs	r3, r2
 800549e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80054a0:	4a12      	ldr	r2, [pc, #72]	; (80054ec <HAL_GPIO_Init+0x334>)
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	3301      	adds	r3, #1
 80054aa:	61fb      	str	r3, [r7, #28]
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	2b0f      	cmp	r3, #15
 80054b0:	f67f ae90 	bls.w	80051d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80054b4:	bf00      	nop
 80054b6:	bf00      	nop
 80054b8:	3724      	adds	r7, #36	; 0x24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	40023800 	.word	0x40023800
 80054c8:	40013800 	.word	0x40013800
 80054cc:	40020000 	.word	0x40020000
 80054d0:	40020400 	.word	0x40020400
 80054d4:	40020800 	.word	0x40020800
 80054d8:	40020c00 	.word	0x40020c00
 80054dc:	40021000 	.word	0x40021000
 80054e0:	40021400 	.word	0x40021400
 80054e4:	40021800 	.word	0x40021800
 80054e8:	40021c00 	.word	0x40021c00
 80054ec:	40013c00 	.word	0x40013c00

080054f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	460b      	mov	r3, r1
 80054fa:	807b      	strh	r3, [r7, #2]
 80054fc:	4613      	mov	r3, r2
 80054fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005500:	787b      	ldrb	r3, [r7, #1]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005506:	887a      	ldrh	r2, [r7, #2]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800550c:	e003      	b.n	8005516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800550e:	887b      	ldrh	r3, [r7, #2]
 8005510:	041a      	lsls	r2, r3, #16
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	619a      	str	r2, [r3, #24]
}
 8005516:	bf00      	nop
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005522:	b480      	push	{r7}
 8005524:	b085      	sub	sp, #20
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
 800552a:	460b      	mov	r3, r1
 800552c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005534:	887a      	ldrh	r2, [r7, #2]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	4013      	ands	r3, r2
 800553a:	041a      	lsls	r2, r3, #16
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	43d9      	mvns	r1, r3
 8005540:	887b      	ldrh	r3, [r7, #2]
 8005542:	400b      	ands	r3, r1
 8005544:	431a      	orrs	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	619a      	str	r2, [r3, #24]
}
 800554a:	bf00      	nop
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005556:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005558:	b08f      	sub	sp, #60	; 0x3c
 800555a:	af0a      	add	r7, sp, #40	; 0x28
 800555c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e054      	b.n	8005612 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d106      	bne.n	8005588 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f00b fbf4 	bl	8010d70 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2203      	movs	r2, #3
 800558c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005598:	2b00      	cmp	r3, #0
 800559a:	d102      	bne.n	80055a2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f004 fde2 	bl	800a170 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	603b      	str	r3, [r7, #0]
 80055b2:	687e      	ldr	r6, [r7, #4]
 80055b4:	466d      	mov	r5, sp
 80055b6:	f106 0410 	add.w	r4, r6, #16
 80055ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80055c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80055ca:	1d33      	adds	r3, r6, #4
 80055cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055ce:	6838      	ldr	r0, [r7, #0]
 80055d0:	f004 fd5c 	bl	800a08c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2101      	movs	r1, #1
 80055da:	4618      	mov	r0, r3
 80055dc:	f004 fdd9 	bl	800a192 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	603b      	str	r3, [r7, #0]
 80055e6:	687e      	ldr	r6, [r7, #4]
 80055e8:	466d      	mov	r5, sp
 80055ea:	f106 0410 	add.w	r4, r6, #16
 80055ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80055fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80055fe:	1d33      	adds	r3, r6, #4
 8005600:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005602:	6838      	ldr	r0, [r7, #0]
 8005604:	f004 ff62 	bl	800a4cc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800561a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800561a:	b590      	push	{r4, r7, lr}
 800561c:	b089      	sub	sp, #36	; 0x24
 800561e:	af04      	add	r7, sp, #16
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	4608      	mov	r0, r1
 8005624:	4611      	mov	r1, r2
 8005626:	461a      	mov	r2, r3
 8005628:	4603      	mov	r3, r0
 800562a:	70fb      	strb	r3, [r7, #3]
 800562c:	460b      	mov	r3, r1
 800562e:	70bb      	strb	r3, [r7, #2]
 8005630:	4613      	mov	r3, r2
 8005632:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800563a:	2b01      	cmp	r3, #1
 800563c:	d101      	bne.n	8005642 <HAL_HCD_HC_Init+0x28>
 800563e:	2302      	movs	r3, #2
 8005640:	e076      	b.n	8005730 <HAL_HCD_HC_Init+0x116>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800564a:	78fb      	ldrb	r3, [r7, #3]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	212c      	movs	r1, #44	; 0x2c
 8005650:	fb01 f303 	mul.w	r3, r1, r3
 8005654:	4413      	add	r3, r2
 8005656:	333d      	adds	r3, #61	; 0x3d
 8005658:	2200      	movs	r2, #0
 800565a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800565c:	78fb      	ldrb	r3, [r7, #3]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	212c      	movs	r1, #44	; 0x2c
 8005662:	fb01 f303 	mul.w	r3, r1, r3
 8005666:	4413      	add	r3, r2
 8005668:	3338      	adds	r3, #56	; 0x38
 800566a:	787a      	ldrb	r2, [r7, #1]
 800566c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800566e:	78fb      	ldrb	r3, [r7, #3]
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	212c      	movs	r1, #44	; 0x2c
 8005674:	fb01 f303 	mul.w	r3, r1, r3
 8005678:	4413      	add	r3, r2
 800567a:	3340      	adds	r3, #64	; 0x40
 800567c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800567e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	212c      	movs	r1, #44	; 0x2c
 8005686:	fb01 f303 	mul.w	r3, r1, r3
 800568a:	4413      	add	r3, r2
 800568c:	3339      	adds	r3, #57	; 0x39
 800568e:	78fa      	ldrb	r2, [r7, #3]
 8005690:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8005692:	78fb      	ldrb	r3, [r7, #3]
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	212c      	movs	r1, #44	; 0x2c
 8005698:	fb01 f303 	mul.w	r3, r1, r3
 800569c:	4413      	add	r3, r2
 800569e:	333f      	adds	r3, #63	; 0x3f
 80056a0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80056a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80056a6:	78fb      	ldrb	r3, [r7, #3]
 80056a8:	78ba      	ldrb	r2, [r7, #2]
 80056aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056ae:	b2d0      	uxtb	r0, r2
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	212c      	movs	r1, #44	; 0x2c
 80056b4:	fb01 f303 	mul.w	r3, r1, r3
 80056b8:	4413      	add	r3, r2
 80056ba:	333a      	adds	r3, #58	; 0x3a
 80056bc:	4602      	mov	r2, r0
 80056be:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80056c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	da09      	bge.n	80056dc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80056c8:	78fb      	ldrb	r3, [r7, #3]
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	212c      	movs	r1, #44	; 0x2c
 80056ce:	fb01 f303 	mul.w	r3, r1, r3
 80056d2:	4413      	add	r3, r2
 80056d4:	333b      	adds	r3, #59	; 0x3b
 80056d6:	2201      	movs	r2, #1
 80056d8:	701a      	strb	r2, [r3, #0]
 80056da:	e008      	b.n	80056ee <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	212c      	movs	r1, #44	; 0x2c
 80056e2:	fb01 f303 	mul.w	r3, r1, r3
 80056e6:	4413      	add	r3, r2
 80056e8:	333b      	adds	r3, #59	; 0x3b
 80056ea:	2200      	movs	r2, #0
 80056ec:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80056ee:	78fb      	ldrb	r3, [r7, #3]
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	212c      	movs	r1, #44	; 0x2c
 80056f4:	fb01 f303 	mul.w	r3, r1, r3
 80056f8:	4413      	add	r3, r2
 80056fa:	333c      	adds	r3, #60	; 0x3c
 80056fc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005700:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6818      	ldr	r0, [r3, #0]
 8005706:	787c      	ldrb	r4, [r7, #1]
 8005708:	78ba      	ldrb	r2, [r7, #2]
 800570a:	78f9      	ldrb	r1, [r7, #3]
 800570c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800570e:	9302      	str	r3, [sp, #8]
 8005710:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005714:	9301      	str	r3, [sp, #4]
 8005716:	f897 3020 	ldrb.w	r3, [r7, #32]
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	4623      	mov	r3, r4
 800571e:	f005 f85b 	bl	800a7d8 <USB_HC_Init>
 8005722:	4603      	mov	r3, r0
 8005724:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800572e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	bd90      	pop	{r4, r7, pc}

08005738 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	460b      	mov	r3, r1
 8005742:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005744:	2300      	movs	r3, #0
 8005746:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800574e:	2b01      	cmp	r3, #1
 8005750:	d101      	bne.n	8005756 <HAL_HCD_HC_Halt+0x1e>
 8005752:	2302      	movs	r3, #2
 8005754:	e00f      	b.n	8005776 <HAL_HCD_HC_Halt+0x3e>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	78fa      	ldrb	r2, [r7, #3]
 8005764:	4611      	mov	r1, r2
 8005766:	4618      	mov	r0, r3
 8005768:	f005 faab 	bl	800acc2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005774:	7bfb      	ldrb	r3, [r7, #15]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
	...

08005780 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	4608      	mov	r0, r1
 800578a:	4611      	mov	r1, r2
 800578c:	461a      	mov	r2, r3
 800578e:	4603      	mov	r3, r0
 8005790:	70fb      	strb	r3, [r7, #3]
 8005792:	460b      	mov	r3, r1
 8005794:	70bb      	strb	r3, [r7, #2]
 8005796:	4613      	mov	r3, r2
 8005798:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800579a:	78fb      	ldrb	r3, [r7, #3]
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	212c      	movs	r1, #44	; 0x2c
 80057a0:	fb01 f303 	mul.w	r3, r1, r3
 80057a4:	4413      	add	r3, r2
 80057a6:	333b      	adds	r3, #59	; 0x3b
 80057a8:	78ba      	ldrb	r2, [r7, #2]
 80057aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80057ac:	78fb      	ldrb	r3, [r7, #3]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	212c      	movs	r1, #44	; 0x2c
 80057b2:	fb01 f303 	mul.w	r3, r1, r3
 80057b6:	4413      	add	r3, r2
 80057b8:	333f      	adds	r3, #63	; 0x3f
 80057ba:	787a      	ldrb	r2, [r7, #1]
 80057bc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80057be:	7c3b      	ldrb	r3, [r7, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d112      	bne.n	80057ea <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80057c4:	78fb      	ldrb	r3, [r7, #3]
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	212c      	movs	r1, #44	; 0x2c
 80057ca:	fb01 f303 	mul.w	r3, r1, r3
 80057ce:	4413      	add	r3, r2
 80057d0:	3342      	adds	r3, #66	; 0x42
 80057d2:	2203      	movs	r2, #3
 80057d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80057d6:	78fb      	ldrb	r3, [r7, #3]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	212c      	movs	r1, #44	; 0x2c
 80057dc:	fb01 f303 	mul.w	r3, r1, r3
 80057e0:	4413      	add	r3, r2
 80057e2:	333d      	adds	r3, #61	; 0x3d
 80057e4:	7f3a      	ldrb	r2, [r7, #28]
 80057e6:	701a      	strb	r2, [r3, #0]
 80057e8:	e008      	b.n	80057fc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80057ea:	78fb      	ldrb	r3, [r7, #3]
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	212c      	movs	r1, #44	; 0x2c
 80057f0:	fb01 f303 	mul.w	r3, r1, r3
 80057f4:	4413      	add	r3, r2
 80057f6:	3342      	adds	r3, #66	; 0x42
 80057f8:	2202      	movs	r2, #2
 80057fa:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80057fc:	787b      	ldrb	r3, [r7, #1]
 80057fe:	2b03      	cmp	r3, #3
 8005800:	f200 80c6 	bhi.w	8005990 <HAL_HCD_HC_SubmitRequest+0x210>
 8005804:	a201      	add	r2, pc, #4	; (adr r2, 800580c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8005806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580a:	bf00      	nop
 800580c:	0800581d 	.word	0x0800581d
 8005810:	0800597d 	.word	0x0800597d
 8005814:	08005881 	.word	0x08005881
 8005818:	080058ff 	.word	0x080058ff
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800581c:	7c3b      	ldrb	r3, [r7, #16]
 800581e:	2b01      	cmp	r3, #1
 8005820:	f040 80b8 	bne.w	8005994 <HAL_HCD_HC_SubmitRequest+0x214>
 8005824:	78bb      	ldrb	r3, [r7, #2]
 8005826:	2b00      	cmp	r3, #0
 8005828:	f040 80b4 	bne.w	8005994 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800582c:	8b3b      	ldrh	r3, [r7, #24]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d108      	bne.n	8005844 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8005832:	78fb      	ldrb	r3, [r7, #3]
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	212c      	movs	r1, #44	; 0x2c
 8005838:	fb01 f303 	mul.w	r3, r1, r3
 800583c:	4413      	add	r3, r2
 800583e:	3355      	adds	r3, #85	; 0x55
 8005840:	2201      	movs	r2, #1
 8005842:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005844:	78fb      	ldrb	r3, [r7, #3]
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	212c      	movs	r1, #44	; 0x2c
 800584a:	fb01 f303 	mul.w	r3, r1, r3
 800584e:	4413      	add	r3, r2
 8005850:	3355      	adds	r3, #85	; 0x55
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d109      	bne.n	800586c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005858:	78fb      	ldrb	r3, [r7, #3]
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	212c      	movs	r1, #44	; 0x2c
 800585e:	fb01 f303 	mul.w	r3, r1, r3
 8005862:	4413      	add	r3, r2
 8005864:	3342      	adds	r3, #66	; 0x42
 8005866:	2200      	movs	r2, #0
 8005868:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800586a:	e093      	b.n	8005994 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800586c:	78fb      	ldrb	r3, [r7, #3]
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	212c      	movs	r1, #44	; 0x2c
 8005872:	fb01 f303 	mul.w	r3, r1, r3
 8005876:	4413      	add	r3, r2
 8005878:	3342      	adds	r3, #66	; 0x42
 800587a:	2202      	movs	r2, #2
 800587c:	701a      	strb	r2, [r3, #0]
      break;
 800587e:	e089      	b.n	8005994 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005880:	78bb      	ldrb	r3, [r7, #2]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d11d      	bne.n	80058c2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005886:	78fb      	ldrb	r3, [r7, #3]
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	212c      	movs	r1, #44	; 0x2c
 800588c:	fb01 f303 	mul.w	r3, r1, r3
 8005890:	4413      	add	r3, r2
 8005892:	3355      	adds	r3, #85	; 0x55
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d109      	bne.n	80058ae <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800589a:	78fb      	ldrb	r3, [r7, #3]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	212c      	movs	r1, #44	; 0x2c
 80058a0:	fb01 f303 	mul.w	r3, r1, r3
 80058a4:	4413      	add	r3, r2
 80058a6:	3342      	adds	r3, #66	; 0x42
 80058a8:	2200      	movs	r2, #0
 80058aa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80058ac:	e073      	b.n	8005996 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80058ae:	78fb      	ldrb	r3, [r7, #3]
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	212c      	movs	r1, #44	; 0x2c
 80058b4:	fb01 f303 	mul.w	r3, r1, r3
 80058b8:	4413      	add	r3, r2
 80058ba:	3342      	adds	r3, #66	; 0x42
 80058bc:	2202      	movs	r2, #2
 80058be:	701a      	strb	r2, [r3, #0]
      break;
 80058c0:	e069      	b.n	8005996 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80058c2:	78fb      	ldrb	r3, [r7, #3]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	212c      	movs	r1, #44	; 0x2c
 80058c8:	fb01 f303 	mul.w	r3, r1, r3
 80058cc:	4413      	add	r3, r2
 80058ce:	3354      	adds	r3, #84	; 0x54
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d109      	bne.n	80058ea <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80058d6:	78fb      	ldrb	r3, [r7, #3]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	212c      	movs	r1, #44	; 0x2c
 80058dc:	fb01 f303 	mul.w	r3, r1, r3
 80058e0:	4413      	add	r3, r2
 80058e2:	3342      	adds	r3, #66	; 0x42
 80058e4:	2200      	movs	r2, #0
 80058e6:	701a      	strb	r2, [r3, #0]
      break;
 80058e8:	e055      	b.n	8005996 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80058ea:	78fb      	ldrb	r3, [r7, #3]
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	212c      	movs	r1, #44	; 0x2c
 80058f0:	fb01 f303 	mul.w	r3, r1, r3
 80058f4:	4413      	add	r3, r2
 80058f6:	3342      	adds	r3, #66	; 0x42
 80058f8:	2202      	movs	r2, #2
 80058fa:	701a      	strb	r2, [r3, #0]
      break;
 80058fc:	e04b      	b.n	8005996 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80058fe:	78bb      	ldrb	r3, [r7, #2]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d11d      	bne.n	8005940 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005904:	78fb      	ldrb	r3, [r7, #3]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	212c      	movs	r1, #44	; 0x2c
 800590a:	fb01 f303 	mul.w	r3, r1, r3
 800590e:	4413      	add	r3, r2
 8005910:	3355      	adds	r3, #85	; 0x55
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d109      	bne.n	800592c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005918:	78fb      	ldrb	r3, [r7, #3]
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	212c      	movs	r1, #44	; 0x2c
 800591e:	fb01 f303 	mul.w	r3, r1, r3
 8005922:	4413      	add	r3, r2
 8005924:	3342      	adds	r3, #66	; 0x42
 8005926:	2200      	movs	r2, #0
 8005928:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800592a:	e034      	b.n	8005996 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800592c:	78fb      	ldrb	r3, [r7, #3]
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	212c      	movs	r1, #44	; 0x2c
 8005932:	fb01 f303 	mul.w	r3, r1, r3
 8005936:	4413      	add	r3, r2
 8005938:	3342      	adds	r3, #66	; 0x42
 800593a:	2202      	movs	r2, #2
 800593c:	701a      	strb	r2, [r3, #0]
      break;
 800593e:	e02a      	b.n	8005996 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005940:	78fb      	ldrb	r3, [r7, #3]
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	212c      	movs	r1, #44	; 0x2c
 8005946:	fb01 f303 	mul.w	r3, r1, r3
 800594a:	4413      	add	r3, r2
 800594c:	3354      	adds	r3, #84	; 0x54
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d109      	bne.n	8005968 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005954:	78fb      	ldrb	r3, [r7, #3]
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	212c      	movs	r1, #44	; 0x2c
 800595a:	fb01 f303 	mul.w	r3, r1, r3
 800595e:	4413      	add	r3, r2
 8005960:	3342      	adds	r3, #66	; 0x42
 8005962:	2200      	movs	r2, #0
 8005964:	701a      	strb	r2, [r3, #0]
      break;
 8005966:	e016      	b.n	8005996 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005968:	78fb      	ldrb	r3, [r7, #3]
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	212c      	movs	r1, #44	; 0x2c
 800596e:	fb01 f303 	mul.w	r3, r1, r3
 8005972:	4413      	add	r3, r2
 8005974:	3342      	adds	r3, #66	; 0x42
 8005976:	2202      	movs	r2, #2
 8005978:	701a      	strb	r2, [r3, #0]
      break;
 800597a:	e00c      	b.n	8005996 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800597c:	78fb      	ldrb	r3, [r7, #3]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	212c      	movs	r1, #44	; 0x2c
 8005982:	fb01 f303 	mul.w	r3, r1, r3
 8005986:	4413      	add	r3, r2
 8005988:	3342      	adds	r3, #66	; 0x42
 800598a:	2200      	movs	r2, #0
 800598c:	701a      	strb	r2, [r3, #0]
      break;
 800598e:	e002      	b.n	8005996 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8005990:	bf00      	nop
 8005992:	e000      	b.n	8005996 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8005994:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005996:	78fb      	ldrb	r3, [r7, #3]
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	212c      	movs	r1, #44	; 0x2c
 800599c:	fb01 f303 	mul.w	r3, r1, r3
 80059a0:	4413      	add	r3, r2
 80059a2:	3344      	adds	r3, #68	; 0x44
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80059a8:	78fb      	ldrb	r3, [r7, #3]
 80059aa:	8b3a      	ldrh	r2, [r7, #24]
 80059ac:	6879      	ldr	r1, [r7, #4]
 80059ae:	202c      	movs	r0, #44	; 0x2c
 80059b0:	fb00 f303 	mul.w	r3, r0, r3
 80059b4:	440b      	add	r3, r1
 80059b6:	334c      	adds	r3, #76	; 0x4c
 80059b8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80059ba:	78fb      	ldrb	r3, [r7, #3]
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	212c      	movs	r1, #44	; 0x2c
 80059c0:	fb01 f303 	mul.w	r3, r1, r3
 80059c4:	4413      	add	r3, r2
 80059c6:	3360      	adds	r3, #96	; 0x60
 80059c8:	2200      	movs	r2, #0
 80059ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80059cc:	78fb      	ldrb	r3, [r7, #3]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	212c      	movs	r1, #44	; 0x2c
 80059d2:	fb01 f303 	mul.w	r3, r1, r3
 80059d6:	4413      	add	r3, r2
 80059d8:	3350      	adds	r3, #80	; 0x50
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80059de:	78fb      	ldrb	r3, [r7, #3]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	212c      	movs	r1, #44	; 0x2c
 80059e4:	fb01 f303 	mul.w	r3, r1, r3
 80059e8:	4413      	add	r3, r2
 80059ea:	3339      	adds	r3, #57	; 0x39
 80059ec:	78fa      	ldrb	r2, [r7, #3]
 80059ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	212c      	movs	r1, #44	; 0x2c
 80059f6:	fb01 f303 	mul.w	r3, r1, r3
 80059fa:	4413      	add	r3, r2
 80059fc:	3361      	adds	r3, #97	; 0x61
 80059fe:	2200      	movs	r2, #0
 8005a00:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6818      	ldr	r0, [r3, #0]
 8005a06:	78fb      	ldrb	r3, [r7, #3]
 8005a08:	222c      	movs	r2, #44	; 0x2c
 8005a0a:	fb02 f303 	mul.w	r3, r2, r3
 8005a0e:	3338      	adds	r3, #56	; 0x38
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	18d1      	adds	r1, r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	f004 fffe 	bl	800aa1c <USB_HC_StartXfer>
 8005a20:	4603      	mov	r3, r0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop

08005a2c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f004 fcff 	bl	800a446 <USB_GetMode>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	f040 80f6 	bne.w	8005c3c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f004 fce3 	bl	800a420 <USB_ReadInterrupts>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 80ec 	beq.w	8005c3a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f004 fcda 	bl	800a420 <USB_ReadInterrupts>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a76:	d104      	bne.n	8005a82 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005a80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f004 fcca 	bl	800a420 <USB_ReadInterrupts>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a96:	d104      	bne.n	8005aa2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005aa0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f004 fcba 	bl	800a420 <USB_ReadInterrupts>
 8005aac:	4603      	mov	r3, r0
 8005aae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ab2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ab6:	d104      	bne.n	8005ac2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005ac0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f004 fcaa 	bl	800a420 <USB_ReadInterrupts>
 8005acc:	4603      	mov	r3, r0
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d103      	bne.n	8005ade <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2202      	movs	r2, #2
 8005adc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f004 fc9c 	bl	800a420 <USB_ReadInterrupts>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005af2:	d11c      	bne.n	8005b2e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005afc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10f      	bne.n	8005b2e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8005b0e:	2110      	movs	r1, #16
 8005b10:	6938      	ldr	r0, [r7, #16]
 8005b12:	f004 fb8b 	bl	800a22c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8005b16:	6938      	ldr	r0, [r7, #16]
 8005b18:	f004 fbbc 	bl	800a294 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2101      	movs	r1, #1
 8005b22:	4618      	mov	r0, r3
 8005b24:	f004 fd92 	bl	800a64c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f00b f99f 	bl	8010e6c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f004 fc74 	bl	800a420 <USB_ReadInterrupts>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b42:	d102      	bne.n	8005b4a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f001 f89e 	bl	8006c86 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f004 fc66 	bl	800a420 <USB_ReadInterrupts>
 8005b54:	4603      	mov	r3, r0
 8005b56:	f003 0308 	and.w	r3, r3, #8
 8005b5a:	2b08      	cmp	r3, #8
 8005b5c:	d106      	bne.n	8005b6c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f00b f968 	bl	8010e34 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2208      	movs	r2, #8
 8005b6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4618      	mov	r0, r3
 8005b72:	f004 fc55 	bl	800a420 <USB_ReadInterrupts>
 8005b76:	4603      	mov	r3, r0
 8005b78:	f003 0310 	and.w	r3, r3, #16
 8005b7c:	2b10      	cmp	r3, #16
 8005b7e:	d101      	bne.n	8005b84 <HAL_HCD_IRQHandler+0x158>
 8005b80:	2301      	movs	r3, #1
 8005b82:	e000      	b.n	8005b86 <HAL_HCD_IRQHandler+0x15a>
 8005b84:	2300      	movs	r3, #0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d012      	beq.n	8005bb0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	699a      	ldr	r2, [r3, #24]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 0210 	bic.w	r2, r2, #16
 8005b98:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 ffa1 	bl	8006ae2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	699a      	ldr	r2, [r3, #24]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f042 0210 	orr.w	r2, r2, #16
 8005bae:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f004 fc33 	bl	800a420 <USB_ReadInterrupts>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bc4:	d13a      	bne.n	8005c3c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f005 f868 	bl	800aca0 <USB_HC_ReadInterrupt>
 8005bd0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	617b      	str	r3, [r7, #20]
 8005bd6:	e025      	b.n	8005c24 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f003 030f 	and.w	r3, r3, #15
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	fa22 f303 	lsr.w	r3, r2, r3
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d018      	beq.n	8005c1e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c02:	d106      	bne.n	8005c12 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f8ab 	bl	8005d66 <HCD_HC_IN_IRQHandler>
 8005c10:	e005      	b.n	8005c1e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	4619      	mov	r1, r3
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 fbf9 	bl	8006410 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	3301      	adds	r3, #1
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d3d4      	bcc.n	8005bd8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c36:	615a      	str	r2, [r3, #20]
 8005c38:	e000      	b.n	8005c3c <HAL_HCD_IRQHandler+0x210>
      return;
 8005c3a:	bf00      	nop
    }
  }
}
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b082      	sub	sp, #8
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d101      	bne.n	8005c58 <HAL_HCD_Start+0x16>
 8005c54:	2302      	movs	r3, #2
 8005c56:	e013      	b.n	8005c80 <HAL_HCD_Start+0x3e>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2101      	movs	r1, #1
 8005c66:	4618      	mov	r0, r3
 8005c68:	f004 fd54 	bl	800a714 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f004 fa6c 	bl	800a14e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d101      	bne.n	8005c9e <HAL_HCD_Stop+0x16>
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	e00d      	b.n	8005cba <HAL_HCD_Stop+0x32>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f005 f942 	bl	800af34 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b082      	sub	sp, #8
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f004 fcf6 	bl	800a6c0 <USB_ResetPort>
 8005cd4:	4603      	mov	r3, r0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b083      	sub	sp, #12
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005cea:	78fb      	ldrb	r3, [r7, #3]
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	212c      	movs	r1, #44	; 0x2c
 8005cf0:	fb01 f303 	mul.w	r3, r1, r3
 8005cf4:	4413      	add	r3, r2
 8005cf6:	3360      	adds	r3, #96	; 0x60
 8005cf8:	781b      	ldrb	r3, [r3, #0]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b083      	sub	sp, #12
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	460b      	mov	r3, r1
 8005d10:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005d12:	78fb      	ldrb	r3, [r7, #3]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	212c      	movs	r1, #44	; 0x2c
 8005d18:	fb01 f303 	mul.w	r3, r1, r3
 8005d1c:	4413      	add	r3, r2
 8005d1e:	3350      	adds	r3, #80	; 0x50
 8005d20:	681b      	ldr	r3, [r3, #0]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b082      	sub	sp, #8
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f004 fd3a 	bl	800a7b4 <USB_GetCurrentFrame>
 8005d40:	4603      	mov	r3, r0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b082      	sub	sp, #8
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f004 fd15 	bl	800a786 <USB_GetHostSpeed>
 8005d5c:	4603      	mov	r3, r0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b086      	sub	sp, #24
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	460b      	mov	r3, r1
 8005d70:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005d7c:	78fb      	ldrb	r3, [r7, #3]
 8005d7e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f003 0304 	and.w	r3, r3, #4
 8005d92:	2b04      	cmp	r3, #4
 8005d94:	d11a      	bne.n	8005dcc <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da2:	461a      	mov	r2, r3
 8005da4:	2304      	movs	r3, #4
 8005da6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	212c      	movs	r1, #44	; 0x2c
 8005dae:	fb01 f303 	mul.w	r3, r1, r3
 8005db2:	4413      	add	r3, r2
 8005db4:	3361      	adds	r3, #97	; 0x61
 8005db6:	2206      	movs	r2, #6
 8005db8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	b2d2      	uxtb	r2, r2
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f004 ff7c 	bl	800acc2 <USB_HC_Halt>
 8005dca:	e0af      	b.n	8005f2c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005de2:	d11b      	bne.n	8005e1c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df0:	461a      	mov	r2, r3
 8005df2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005df6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	212c      	movs	r1, #44	; 0x2c
 8005dfe:	fb01 f303 	mul.w	r3, r1, r3
 8005e02:	4413      	add	r3, r2
 8005e04:	3361      	adds	r3, #97	; 0x61
 8005e06:	2207      	movs	r2, #7
 8005e08:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	b2d2      	uxtb	r2, r2
 8005e12:	4611      	mov	r1, r2
 8005e14:	4618      	mov	r0, r3
 8005e16:	f004 ff54 	bl	800acc2 <USB_HC_Halt>
 8005e1a:	e087      	b.n	8005f2c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f003 0320 	and.w	r3, r3, #32
 8005e2e:	2b20      	cmp	r3, #32
 8005e30:	d109      	bne.n	8005e46 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e3e:	461a      	mov	r2, r3
 8005e40:	2320      	movs	r3, #32
 8005e42:	6093      	str	r3, [r2, #8]
 8005e44:	e072      	b.n	8005f2c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f003 0308 	and.w	r3, r3, #8
 8005e58:	2b08      	cmp	r3, #8
 8005e5a:	d11a      	bne.n	8005e92 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e68:	461a      	mov	r2, r3
 8005e6a:	2308      	movs	r3, #8
 8005e6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	212c      	movs	r1, #44	; 0x2c
 8005e74:	fb01 f303 	mul.w	r3, r1, r3
 8005e78:	4413      	add	r3, r2
 8005e7a:	3361      	adds	r3, #97	; 0x61
 8005e7c:	2205      	movs	r2, #5
 8005e7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	b2d2      	uxtb	r2, r2
 8005e88:	4611      	mov	r1, r2
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f004 ff19 	bl	800acc2 <USB_HC_Halt>
 8005e90:	e04c      	b.n	8005f2c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ea8:	d11b      	bne.n	8005ee2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ebc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	212c      	movs	r1, #44	; 0x2c
 8005ec4:	fb01 f303 	mul.w	r3, r1, r3
 8005ec8:	4413      	add	r3, r2
 8005eca:	3361      	adds	r3, #97	; 0x61
 8005ecc:	2208      	movs	r2, #8
 8005ece:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	4611      	mov	r1, r2
 8005eda:	4618      	mov	r0, r3
 8005edc:	f004 fef1 	bl	800acc2 <USB_HC_Halt>
 8005ee0:	e024      	b.n	8005f2c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef4:	2b80      	cmp	r3, #128	; 0x80
 8005ef6:	d119      	bne.n	8005f2c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f04:	461a      	mov	r2, r3
 8005f06:	2380      	movs	r3, #128	; 0x80
 8005f08:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	212c      	movs	r1, #44	; 0x2c
 8005f10:	fb01 f303 	mul.w	r3, r1, r3
 8005f14:	4413      	add	r3, r2
 8005f16:	3361      	adds	r3, #97	; 0x61
 8005f18:	2206      	movs	r2, #6
 8005f1a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	b2d2      	uxtb	r2, r2
 8005f24:	4611      	mov	r1, r2
 8005f26:	4618      	mov	r0, r3
 8005f28:	f004 fecb 	bl	800acc2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f42:	d112      	bne.n	8005f6a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	b2d2      	uxtb	r2, r2
 8005f4c:	4611      	mov	r1, r2
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f004 feb7 	bl	800acc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f60:	461a      	mov	r2, r3
 8005f62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f66:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005f68:	e24e      	b.n	8006408 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	f040 80df 	bne.w	8006140 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d019      	beq.n	8005fbe <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	212c      	movs	r1, #44	; 0x2c
 8005f90:	fb01 f303 	mul.w	r3, r1, r3
 8005f94:	4413      	add	r3, r2
 8005f96:	3348      	adds	r3, #72	; 0x48
 8005f98:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	0159      	lsls	r1, r3, #5
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	440b      	add	r3, r1
 8005fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005fac:	1ad2      	subs	r2, r2, r3
 8005fae:	6879      	ldr	r1, [r7, #4]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	202c      	movs	r0, #44	; 0x2c
 8005fb4:	fb00 f303 	mul.w	r3, r0, r3
 8005fb8:	440b      	add	r3, r1
 8005fba:	3350      	adds	r3, #80	; 0x50
 8005fbc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	212c      	movs	r1, #44	; 0x2c
 8005fc4:	fb01 f303 	mul.w	r3, r1, r3
 8005fc8:	4413      	add	r3, r2
 8005fca:	3361      	adds	r3, #97	; 0x61
 8005fcc:	2201      	movs	r2, #1
 8005fce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	212c      	movs	r1, #44	; 0x2c
 8005fd6:	fb01 f303 	mul.w	r3, r1, r3
 8005fda:	4413      	add	r3, r2
 8005fdc:	335c      	adds	r3, #92	; 0x5c
 8005fde:	2200      	movs	r2, #0
 8005fe0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fee:	461a      	mov	r2, r3
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	212c      	movs	r1, #44	; 0x2c
 8005ffa:	fb01 f303 	mul.w	r3, r1, r3
 8005ffe:	4413      	add	r3, r2
 8006000:	333f      	adds	r3, #63	; 0x3f
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d009      	beq.n	800601c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	212c      	movs	r1, #44	; 0x2c
 800600e:	fb01 f303 	mul.w	r3, r1, r3
 8006012:	4413      	add	r3, r2
 8006014:	333f      	adds	r3, #63	; 0x3f
 8006016:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006018:	2b02      	cmp	r3, #2
 800601a:	d111      	bne.n	8006040 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	4611      	mov	r1, r2
 8006026:	4618      	mov	r0, r3
 8006028:	f004 fe4b 	bl	800acc2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	4413      	add	r3, r2
 8006034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006038:	461a      	mov	r2, r3
 800603a:	2310      	movs	r3, #16
 800603c:	6093      	str	r3, [r2, #8]
 800603e:	e03a      	b.n	80060b6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	212c      	movs	r1, #44	; 0x2c
 8006046:	fb01 f303 	mul.w	r3, r1, r3
 800604a:	4413      	add	r3, r2
 800604c:	333f      	adds	r3, #63	; 0x3f
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b03      	cmp	r3, #3
 8006052:	d009      	beq.n	8006068 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	212c      	movs	r1, #44	; 0x2c
 800605a:	fb01 f303 	mul.w	r3, r1, r3
 800605e:	4413      	add	r3, r2
 8006060:	333f      	adds	r3, #63	; 0x3f
 8006062:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8006064:	2b01      	cmp	r3, #1
 8006066:	d126      	bne.n	80060b6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	4413      	add	r3, r2
 8006070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	0151      	lsls	r1, r2, #5
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	440a      	add	r2, r1
 800607e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006082:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006086:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	212c      	movs	r1, #44	; 0x2c
 800608e:	fb01 f303 	mul.w	r3, r1, r3
 8006092:	4413      	add	r3, r2
 8006094:	3360      	adds	r3, #96	; 0x60
 8006096:	2201      	movs	r2, #1
 8006098:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	b2d9      	uxtb	r1, r3
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	202c      	movs	r0, #44	; 0x2c
 80060a4:	fb00 f303 	mul.w	r3, r0, r3
 80060a8:	4413      	add	r3, r2
 80060aa:	3360      	adds	r3, #96	; 0x60
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f00a fee9 	bl	8010e88 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d12b      	bne.n	8006116 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	212c      	movs	r1, #44	; 0x2c
 80060c4:	fb01 f303 	mul.w	r3, r1, r3
 80060c8:	4413      	add	r3, r2
 80060ca:	3348      	adds	r3, #72	; 0x48
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6879      	ldr	r1, [r7, #4]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	202c      	movs	r0, #44	; 0x2c
 80060d4:	fb00 f202 	mul.w	r2, r0, r2
 80060d8:	440a      	add	r2, r1
 80060da:	3240      	adds	r2, #64	; 0x40
 80060dc:	8812      	ldrh	r2, [r2, #0]
 80060de:	fbb3 f3f2 	udiv	r3, r3, r2
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f000 818e 	beq.w	8006408 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	212c      	movs	r1, #44	; 0x2c
 80060f2:	fb01 f303 	mul.w	r3, r1, r3
 80060f6:	4413      	add	r3, r2
 80060f8:	3354      	adds	r3, #84	; 0x54
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	f083 0301 	eor.w	r3, r3, #1
 8006100:	b2d8      	uxtb	r0, r3
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	212c      	movs	r1, #44	; 0x2c
 8006108:	fb01 f303 	mul.w	r3, r1, r3
 800610c:	4413      	add	r3, r2
 800610e:	3354      	adds	r3, #84	; 0x54
 8006110:	4602      	mov	r2, r0
 8006112:	701a      	strb	r2, [r3, #0]
}
 8006114:	e178      	b.n	8006408 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	212c      	movs	r1, #44	; 0x2c
 800611c:	fb01 f303 	mul.w	r3, r1, r3
 8006120:	4413      	add	r3, r2
 8006122:	3354      	adds	r3, #84	; 0x54
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	f083 0301 	eor.w	r3, r3, #1
 800612a:	b2d8      	uxtb	r0, r3
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	212c      	movs	r1, #44	; 0x2c
 8006132:	fb01 f303 	mul.w	r3, r1, r3
 8006136:	4413      	add	r3, r2
 8006138:	3354      	adds	r3, #84	; 0x54
 800613a:	4602      	mov	r2, r0
 800613c:	701a      	strb	r2, [r3, #0]
}
 800613e:	e163      	b.n	8006408 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	4413      	add	r3, r2
 8006148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b02      	cmp	r3, #2
 8006154:	f040 80f6 	bne.w	8006344 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	212c      	movs	r1, #44	; 0x2c
 800615e:	fb01 f303 	mul.w	r3, r1, r3
 8006162:	4413      	add	r3, r2
 8006164:	3361      	adds	r3, #97	; 0x61
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d109      	bne.n	8006180 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	212c      	movs	r1, #44	; 0x2c
 8006172:	fb01 f303 	mul.w	r3, r1, r3
 8006176:	4413      	add	r3, r2
 8006178:	3360      	adds	r3, #96	; 0x60
 800617a:	2201      	movs	r2, #1
 800617c:	701a      	strb	r2, [r3, #0]
 800617e:	e0c9      	b.n	8006314 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	212c      	movs	r1, #44	; 0x2c
 8006186:	fb01 f303 	mul.w	r3, r1, r3
 800618a:	4413      	add	r3, r2
 800618c:	3361      	adds	r3, #97	; 0x61
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	2b05      	cmp	r3, #5
 8006192:	d109      	bne.n	80061a8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	212c      	movs	r1, #44	; 0x2c
 800619a:	fb01 f303 	mul.w	r3, r1, r3
 800619e:	4413      	add	r3, r2
 80061a0:	3360      	adds	r3, #96	; 0x60
 80061a2:	2205      	movs	r2, #5
 80061a4:	701a      	strb	r2, [r3, #0]
 80061a6:	e0b5      	b.n	8006314 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	212c      	movs	r1, #44	; 0x2c
 80061ae:	fb01 f303 	mul.w	r3, r1, r3
 80061b2:	4413      	add	r3, r2
 80061b4:	3361      	adds	r3, #97	; 0x61
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	2b06      	cmp	r3, #6
 80061ba:	d009      	beq.n	80061d0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	212c      	movs	r1, #44	; 0x2c
 80061c2:	fb01 f303 	mul.w	r3, r1, r3
 80061c6:	4413      	add	r3, r2
 80061c8:	3361      	adds	r3, #97	; 0x61
 80061ca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80061cc:	2b08      	cmp	r3, #8
 80061ce:	d150      	bne.n	8006272 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	212c      	movs	r1, #44	; 0x2c
 80061d6:	fb01 f303 	mul.w	r3, r1, r3
 80061da:	4413      	add	r3, r2
 80061dc:	335c      	adds	r3, #92	; 0x5c
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	6879      	ldr	r1, [r7, #4]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	202c      	movs	r0, #44	; 0x2c
 80061e8:	fb00 f303 	mul.w	r3, r0, r3
 80061ec:	440b      	add	r3, r1
 80061ee:	335c      	adds	r3, #92	; 0x5c
 80061f0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	212c      	movs	r1, #44	; 0x2c
 80061f8:	fb01 f303 	mul.w	r3, r1, r3
 80061fc:	4413      	add	r3, r2
 80061fe:	335c      	adds	r3, #92	; 0x5c
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b02      	cmp	r3, #2
 8006204:	d912      	bls.n	800622c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	212c      	movs	r1, #44	; 0x2c
 800620c:	fb01 f303 	mul.w	r3, r1, r3
 8006210:	4413      	add	r3, r2
 8006212:	335c      	adds	r3, #92	; 0x5c
 8006214:	2200      	movs	r2, #0
 8006216:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	212c      	movs	r1, #44	; 0x2c
 800621e:	fb01 f303 	mul.w	r3, r1, r3
 8006222:	4413      	add	r3, r2
 8006224:	3360      	adds	r3, #96	; 0x60
 8006226:	2204      	movs	r2, #4
 8006228:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800622a:	e073      	b.n	8006314 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	212c      	movs	r1, #44	; 0x2c
 8006232:	fb01 f303 	mul.w	r3, r1, r3
 8006236:	4413      	add	r3, r2
 8006238:	3360      	adds	r3, #96	; 0x60
 800623a:	2202      	movs	r2, #2
 800623c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	4413      	add	r3, r2
 8006246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006254:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800625c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	4413      	add	r3, r2
 8006266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800626a:	461a      	mov	r2, r3
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006270:	e050      	b.n	8006314 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	212c      	movs	r1, #44	; 0x2c
 8006278:	fb01 f303 	mul.w	r3, r1, r3
 800627c:	4413      	add	r3, r2
 800627e:	3361      	adds	r3, #97	; 0x61
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	2b03      	cmp	r3, #3
 8006284:	d122      	bne.n	80062cc <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	212c      	movs	r1, #44	; 0x2c
 800628c:	fb01 f303 	mul.w	r3, r1, r3
 8006290:	4413      	add	r3, r2
 8006292:	3360      	adds	r3, #96	; 0x60
 8006294:	2202      	movs	r2, #2
 8006296:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062ae:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062b6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c4:	461a      	mov	r2, r3
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	6013      	str	r3, [r2, #0]
 80062ca:	e023      	b.n	8006314 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	212c      	movs	r1, #44	; 0x2c
 80062d2:	fb01 f303 	mul.w	r3, r1, r3
 80062d6:	4413      	add	r3, r2
 80062d8:	3361      	adds	r3, #97	; 0x61
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	2b07      	cmp	r3, #7
 80062de:	d119      	bne.n	8006314 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	212c      	movs	r1, #44	; 0x2c
 80062e6:	fb01 f303 	mul.w	r3, r1, r3
 80062ea:	4413      	add	r3, r2
 80062ec:	335c      	adds	r3, #92	; 0x5c
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	1c5a      	adds	r2, r3, #1
 80062f2:	6879      	ldr	r1, [r7, #4]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	202c      	movs	r0, #44	; 0x2c
 80062f8:	fb00 f303 	mul.w	r3, r0, r3
 80062fc:	440b      	add	r3, r1
 80062fe:	335c      	adds	r3, #92	; 0x5c
 8006300:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	212c      	movs	r1, #44	; 0x2c
 8006308:	fb01 f303 	mul.w	r3, r1, r3
 800630c:	4413      	add	r3, r2
 800630e:	3360      	adds	r3, #96	; 0x60
 8006310:	2204      	movs	r2, #4
 8006312:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	4413      	add	r3, r2
 800631c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006320:	461a      	mov	r2, r3
 8006322:	2302      	movs	r3, #2
 8006324:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	b2d9      	uxtb	r1, r3
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	202c      	movs	r0, #44	; 0x2c
 8006330:	fb00 f303 	mul.w	r3, r0, r3
 8006334:	4413      	add	r3, r2
 8006336:	3360      	adds	r3, #96	; 0x60
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	461a      	mov	r2, r3
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f00a fda3 	bl	8010e88 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006342:	e061      	b.n	8006408 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	4413      	add	r3, r2
 800634c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f003 0310 	and.w	r3, r3, #16
 8006356:	2b10      	cmp	r3, #16
 8006358:	d156      	bne.n	8006408 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	212c      	movs	r1, #44	; 0x2c
 8006360:	fb01 f303 	mul.w	r3, r1, r3
 8006364:	4413      	add	r3, r2
 8006366:	333f      	adds	r3, #63	; 0x3f
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	2b03      	cmp	r3, #3
 800636c:	d111      	bne.n	8006392 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	212c      	movs	r1, #44	; 0x2c
 8006374:	fb01 f303 	mul.w	r3, r1, r3
 8006378:	4413      	add	r3, r2
 800637a:	335c      	adds	r3, #92	; 0x5c
 800637c:	2200      	movs	r2, #0
 800637e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	b2d2      	uxtb	r2, r2
 8006388:	4611      	mov	r1, r2
 800638a:	4618      	mov	r0, r3
 800638c:	f004 fc99 	bl	800acc2 <USB_HC_Halt>
 8006390:	e031      	b.n	80063f6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	212c      	movs	r1, #44	; 0x2c
 8006398:	fb01 f303 	mul.w	r3, r1, r3
 800639c:	4413      	add	r3, r2
 800639e:	333f      	adds	r3, #63	; 0x3f
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d009      	beq.n	80063ba <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	212c      	movs	r1, #44	; 0x2c
 80063ac:	fb01 f303 	mul.w	r3, r1, r3
 80063b0:	4413      	add	r3, r2
 80063b2:	333f      	adds	r3, #63	; 0x3f
 80063b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d11d      	bne.n	80063f6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	212c      	movs	r1, #44	; 0x2c
 80063c0:	fb01 f303 	mul.w	r3, r1, r3
 80063c4:	4413      	add	r3, r2
 80063c6:	335c      	adds	r3, #92	; 0x5c
 80063c8:	2200      	movs	r2, #0
 80063ca:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d110      	bne.n	80063f6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	212c      	movs	r1, #44	; 0x2c
 80063da:	fb01 f303 	mul.w	r3, r1, r3
 80063de:	4413      	add	r3, r2
 80063e0:	3361      	adds	r3, #97	; 0x61
 80063e2:	2203      	movs	r2, #3
 80063e4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	b2d2      	uxtb	r2, r2
 80063ee:	4611      	mov	r1, r2
 80063f0:	4618      	mov	r0, r3
 80063f2:	f004 fc66 	bl	800acc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006402:	461a      	mov	r2, r3
 8006404:	2310      	movs	r3, #16
 8006406:	6093      	str	r3, [r2, #8]
}
 8006408:	bf00      	nop
 800640a:	3718      	adds	r7, #24
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b088      	sub	sp, #32
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	460b      	mov	r3, r1
 800641a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8006426:	78fb      	ldrb	r3, [r7, #3]
 8006428:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	4413      	add	r3, r2
 8006432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f003 0304 	and.w	r3, r3, #4
 800643c:	2b04      	cmp	r3, #4
 800643e:	d11a      	bne.n	8006476 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	4413      	add	r3, r2
 8006448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800644c:	461a      	mov	r2, r3
 800644e:	2304      	movs	r3, #4
 8006450:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	212c      	movs	r1, #44	; 0x2c
 8006458:	fb01 f303 	mul.w	r3, r1, r3
 800645c:	4413      	add	r3, r2
 800645e:	3361      	adds	r3, #97	; 0x61
 8006460:	2206      	movs	r2, #6
 8006462:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	b2d2      	uxtb	r2, r2
 800646c:	4611      	mov	r1, r2
 800646e:	4618      	mov	r0, r3
 8006470:	f004 fc27 	bl	800acc2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8006474:	e331      	b.n	8006ada <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	4413      	add	r3, r2
 800647e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f003 0320 	and.w	r3, r3, #32
 8006488:	2b20      	cmp	r3, #32
 800648a:	d12e      	bne.n	80064ea <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	4413      	add	r3, r2
 8006494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006498:	461a      	mov	r2, r3
 800649a:	2320      	movs	r3, #32
 800649c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	212c      	movs	r1, #44	; 0x2c
 80064a4:	fb01 f303 	mul.w	r3, r1, r3
 80064a8:	4413      	add	r3, r2
 80064aa:	333d      	adds	r3, #61	; 0x3d
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	f040 8313 	bne.w	8006ada <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	212c      	movs	r1, #44	; 0x2c
 80064ba:	fb01 f303 	mul.w	r3, r1, r3
 80064be:	4413      	add	r3, r2
 80064c0:	333d      	adds	r3, #61	; 0x3d
 80064c2:	2200      	movs	r2, #0
 80064c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	212c      	movs	r1, #44	; 0x2c
 80064cc:	fb01 f303 	mul.w	r3, r1, r3
 80064d0:	4413      	add	r3, r2
 80064d2:	3360      	adds	r3, #96	; 0x60
 80064d4:	2202      	movs	r2, #2
 80064d6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	4611      	mov	r1, r2
 80064e2:	4618      	mov	r0, r3
 80064e4:	f004 fbed 	bl	800acc2 <USB_HC_Halt>
}
 80064e8:	e2f7      	b.n	8006ada <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006500:	d112      	bne.n	8006528 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	4413      	add	r3, r2
 800650a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800650e:	461a      	mov	r2, r3
 8006510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006514:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	b2d2      	uxtb	r2, r2
 800651e:	4611      	mov	r1, r2
 8006520:	4618      	mov	r0, r3
 8006522:	f004 fbce 	bl	800acc2 <USB_HC_Halt>
}
 8006526:	e2d8      	b.n	8006ada <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	4413      	add	r3, r2
 8006530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b01      	cmp	r3, #1
 800653c:	d140      	bne.n	80065c0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	212c      	movs	r1, #44	; 0x2c
 8006544:	fb01 f303 	mul.w	r3, r1, r3
 8006548:	4413      	add	r3, r2
 800654a:	335c      	adds	r3, #92	; 0x5c
 800654c:	2200      	movs	r2, #0
 800654e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	4413      	add	r3, r2
 8006558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006562:	2b40      	cmp	r3, #64	; 0x40
 8006564:	d111      	bne.n	800658a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	212c      	movs	r1, #44	; 0x2c
 800656c:	fb01 f303 	mul.w	r3, r1, r3
 8006570:	4413      	add	r3, r2
 8006572:	333d      	adds	r3, #61	; 0x3d
 8006574:	2201      	movs	r2, #1
 8006576:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	4413      	add	r3, r2
 8006580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006584:	461a      	mov	r2, r3
 8006586:	2340      	movs	r3, #64	; 0x40
 8006588:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	4413      	add	r3, r2
 8006592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006596:	461a      	mov	r2, r3
 8006598:	2301      	movs	r3, #1
 800659a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	212c      	movs	r1, #44	; 0x2c
 80065a2:	fb01 f303 	mul.w	r3, r1, r3
 80065a6:	4413      	add	r3, r2
 80065a8:	3361      	adds	r3, #97	; 0x61
 80065aa:	2201      	movs	r2, #1
 80065ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	b2d2      	uxtb	r2, r2
 80065b6:	4611      	mov	r1, r2
 80065b8:	4618      	mov	r0, r3
 80065ba:	f004 fb82 	bl	800acc2 <USB_HC_Halt>
}
 80065be:	e28c      	b.n	8006ada <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d2:	2b40      	cmp	r3, #64	; 0x40
 80065d4:	d12c      	bne.n	8006630 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	212c      	movs	r1, #44	; 0x2c
 80065dc:	fb01 f303 	mul.w	r3, r1, r3
 80065e0:	4413      	add	r3, r2
 80065e2:	3361      	adds	r3, #97	; 0x61
 80065e4:	2204      	movs	r2, #4
 80065e6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	212c      	movs	r1, #44	; 0x2c
 80065ee:	fb01 f303 	mul.w	r3, r1, r3
 80065f2:	4413      	add	r3, r2
 80065f4:	333d      	adds	r3, #61	; 0x3d
 80065f6:	2201      	movs	r2, #1
 80065f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	212c      	movs	r1, #44	; 0x2c
 8006600:	fb01 f303 	mul.w	r3, r1, r3
 8006604:	4413      	add	r3, r2
 8006606:	335c      	adds	r3, #92	; 0x5c
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	b2d2      	uxtb	r2, r2
 8006614:	4611      	mov	r1, r2
 8006616:	4618      	mov	r0, r3
 8006618:	f004 fb53 	bl	800acc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	4413      	add	r3, r2
 8006624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006628:	461a      	mov	r2, r3
 800662a:	2340      	movs	r3, #64	; 0x40
 800662c:	6093      	str	r3, [r2, #8]
}
 800662e:	e254      	b.n	8006ada <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	4413      	add	r3, r2
 8006638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f003 0308 	and.w	r3, r3, #8
 8006642:	2b08      	cmp	r3, #8
 8006644:	d11a      	bne.n	800667c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	4413      	add	r3, r2
 800664e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006652:	461a      	mov	r2, r3
 8006654:	2308      	movs	r3, #8
 8006656:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	212c      	movs	r1, #44	; 0x2c
 800665e:	fb01 f303 	mul.w	r3, r1, r3
 8006662:	4413      	add	r3, r2
 8006664:	3361      	adds	r3, #97	; 0x61
 8006666:	2205      	movs	r2, #5
 8006668:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	b2d2      	uxtb	r2, r2
 8006672:	4611      	mov	r1, r2
 8006674:	4618      	mov	r0, r3
 8006676:	f004 fb24 	bl	800acc2 <USB_HC_Halt>
}
 800667a:	e22e      	b.n	8006ada <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	4413      	add	r3, r2
 8006684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f003 0310 	and.w	r3, r3, #16
 800668e:	2b10      	cmp	r3, #16
 8006690:	d140      	bne.n	8006714 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	212c      	movs	r1, #44	; 0x2c
 8006698:	fb01 f303 	mul.w	r3, r1, r3
 800669c:	4413      	add	r3, r2
 800669e:	335c      	adds	r3, #92	; 0x5c
 80066a0:	2200      	movs	r2, #0
 80066a2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	212c      	movs	r1, #44	; 0x2c
 80066aa:	fb01 f303 	mul.w	r3, r1, r3
 80066ae:	4413      	add	r3, r2
 80066b0:	3361      	adds	r3, #97	; 0x61
 80066b2:	2203      	movs	r2, #3
 80066b4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	212c      	movs	r1, #44	; 0x2c
 80066bc:	fb01 f303 	mul.w	r3, r1, r3
 80066c0:	4413      	add	r3, r2
 80066c2:	333d      	adds	r3, #61	; 0x3d
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d112      	bne.n	80066f0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	212c      	movs	r1, #44	; 0x2c
 80066d0:	fb01 f303 	mul.w	r3, r1, r3
 80066d4:	4413      	add	r3, r2
 80066d6:	333c      	adds	r3, #60	; 0x3c
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d108      	bne.n	80066f0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	212c      	movs	r1, #44	; 0x2c
 80066e4:	fb01 f303 	mul.w	r3, r1, r3
 80066e8:	4413      	add	r3, r2
 80066ea:	333d      	adds	r3, #61	; 0x3d
 80066ec:	2201      	movs	r2, #1
 80066ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	b2d2      	uxtb	r2, r2
 80066f8:	4611      	mov	r1, r2
 80066fa:	4618      	mov	r0, r3
 80066fc:	f004 fae1 	bl	800acc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	4413      	add	r3, r2
 8006708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800670c:	461a      	mov	r2, r3
 800670e:	2310      	movs	r3, #16
 8006710:	6093      	str	r3, [r2, #8]
}
 8006712:	e1e2      	b.n	8006ada <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	4413      	add	r3, r2
 800671c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006726:	2b80      	cmp	r3, #128	; 0x80
 8006728:	d164      	bne.n	80067f4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d111      	bne.n	8006756 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	212c      	movs	r1, #44	; 0x2c
 8006738:	fb01 f303 	mul.w	r3, r1, r3
 800673c:	4413      	add	r3, r2
 800673e:	3361      	adds	r3, #97	; 0x61
 8006740:	2206      	movs	r2, #6
 8006742:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	b2d2      	uxtb	r2, r2
 800674c:	4611      	mov	r1, r2
 800674e:	4618      	mov	r0, r3
 8006750:	f004 fab7 	bl	800acc2 <USB_HC_Halt>
 8006754:	e044      	b.n	80067e0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	212c      	movs	r1, #44	; 0x2c
 800675c:	fb01 f303 	mul.w	r3, r1, r3
 8006760:	4413      	add	r3, r2
 8006762:	335c      	adds	r3, #92	; 0x5c
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	6879      	ldr	r1, [r7, #4]
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	202c      	movs	r0, #44	; 0x2c
 800676e:	fb00 f303 	mul.w	r3, r0, r3
 8006772:	440b      	add	r3, r1
 8006774:	335c      	adds	r3, #92	; 0x5c
 8006776:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	212c      	movs	r1, #44	; 0x2c
 800677e:	fb01 f303 	mul.w	r3, r1, r3
 8006782:	4413      	add	r3, r2
 8006784:	335c      	adds	r3, #92	; 0x5c
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b02      	cmp	r3, #2
 800678a:	d920      	bls.n	80067ce <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	212c      	movs	r1, #44	; 0x2c
 8006792:	fb01 f303 	mul.w	r3, r1, r3
 8006796:	4413      	add	r3, r2
 8006798:	335c      	adds	r3, #92	; 0x5c
 800679a:	2200      	movs	r2, #0
 800679c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	212c      	movs	r1, #44	; 0x2c
 80067a4:	fb01 f303 	mul.w	r3, r1, r3
 80067a8:	4413      	add	r3, r2
 80067aa:	3360      	adds	r3, #96	; 0x60
 80067ac:	2204      	movs	r2, #4
 80067ae:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	b2d9      	uxtb	r1, r3
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	202c      	movs	r0, #44	; 0x2c
 80067ba:	fb00 f303 	mul.w	r3, r0, r3
 80067be:	4413      	add	r3, r2
 80067c0:	3360      	adds	r3, #96	; 0x60
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	461a      	mov	r2, r3
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f00a fb5e 	bl	8010e88 <HAL_HCD_HC_NotifyURBChange_Callback>
 80067cc:	e008      	b.n	80067e0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	212c      	movs	r1, #44	; 0x2c
 80067d4:	fb01 f303 	mul.w	r3, r1, r3
 80067d8:	4413      	add	r3, r2
 80067da:	3360      	adds	r3, #96	; 0x60
 80067dc:	2202      	movs	r2, #2
 80067de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ec:	461a      	mov	r2, r3
 80067ee:	2380      	movs	r3, #128	; 0x80
 80067f0:	6093      	str	r3, [r2, #8]
}
 80067f2:	e172      	b.n	8006ada <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800680a:	d11b      	bne.n	8006844 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	212c      	movs	r1, #44	; 0x2c
 8006812:	fb01 f303 	mul.w	r3, r1, r3
 8006816:	4413      	add	r3, r2
 8006818:	3361      	adds	r3, #97	; 0x61
 800681a:	2208      	movs	r2, #8
 800681c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	b2d2      	uxtb	r2, r2
 8006826:	4611      	mov	r1, r2
 8006828:	4618      	mov	r0, r3
 800682a:	f004 fa4a 	bl	800acc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	4413      	add	r3, r2
 8006836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683a:	461a      	mov	r2, r3
 800683c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006840:	6093      	str	r3, [r2, #8]
}
 8006842:	e14a      	b.n	8006ada <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	4413      	add	r3, r2
 800684c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	2b02      	cmp	r3, #2
 8006858:	f040 813f 	bne.w	8006ada <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	212c      	movs	r1, #44	; 0x2c
 8006862:	fb01 f303 	mul.w	r3, r1, r3
 8006866:	4413      	add	r3, r2
 8006868:	3361      	adds	r3, #97	; 0x61
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d17d      	bne.n	800696c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	212c      	movs	r1, #44	; 0x2c
 8006876:	fb01 f303 	mul.w	r3, r1, r3
 800687a:	4413      	add	r3, r2
 800687c:	3360      	adds	r3, #96	; 0x60
 800687e:	2201      	movs	r2, #1
 8006880:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	212c      	movs	r1, #44	; 0x2c
 8006888:	fb01 f303 	mul.w	r3, r1, r3
 800688c:	4413      	add	r3, r2
 800688e:	333f      	adds	r3, #63	; 0x3f
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	2b02      	cmp	r3, #2
 8006894:	d00a      	beq.n	80068ac <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	212c      	movs	r1, #44	; 0x2c
 800689c:	fb01 f303 	mul.w	r3, r1, r3
 80068a0:	4413      	add	r3, r2
 80068a2:	333f      	adds	r3, #63	; 0x3f
 80068a4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80068a6:	2b03      	cmp	r3, #3
 80068a8:	f040 8100 	bne.w	8006aac <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d113      	bne.n	80068dc <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	212c      	movs	r1, #44	; 0x2c
 80068ba:	fb01 f303 	mul.w	r3, r1, r3
 80068be:	4413      	add	r3, r2
 80068c0:	3355      	adds	r3, #85	; 0x55
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	f083 0301 	eor.w	r3, r3, #1
 80068c8:	b2d8      	uxtb	r0, r3
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	212c      	movs	r1, #44	; 0x2c
 80068d0:	fb01 f303 	mul.w	r3, r1, r3
 80068d4:	4413      	add	r3, r2
 80068d6:	3355      	adds	r3, #85	; 0x55
 80068d8:	4602      	mov	r2, r0
 80068da:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	f040 80e3 	bne.w	8006aac <HCD_HC_OUT_IRQHandler+0x69c>
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	212c      	movs	r1, #44	; 0x2c
 80068ec:	fb01 f303 	mul.w	r3, r1, r3
 80068f0:	4413      	add	r3, r2
 80068f2:	334c      	adds	r3, #76	; 0x4c
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 80d8 	beq.w	8006aac <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	212c      	movs	r1, #44	; 0x2c
 8006902:	fb01 f303 	mul.w	r3, r1, r3
 8006906:	4413      	add	r3, r2
 8006908:	334c      	adds	r3, #76	; 0x4c
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6879      	ldr	r1, [r7, #4]
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	202c      	movs	r0, #44	; 0x2c
 8006912:	fb00 f202 	mul.w	r2, r0, r2
 8006916:	440a      	add	r2, r1
 8006918:	3240      	adds	r2, #64	; 0x40
 800691a:	8812      	ldrh	r2, [r2, #0]
 800691c:	4413      	add	r3, r2
 800691e:	3b01      	subs	r3, #1
 8006920:	6879      	ldr	r1, [r7, #4]
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	202c      	movs	r0, #44	; 0x2c
 8006926:	fb00 f202 	mul.w	r2, r0, r2
 800692a:	440a      	add	r2, r1
 800692c:	3240      	adds	r2, #64	; 0x40
 800692e:	8812      	ldrh	r2, [r2, #0]
 8006930:	fbb3 f3f2 	udiv	r3, r3, r2
 8006934:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 80b5 	beq.w	8006aac <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	212c      	movs	r1, #44	; 0x2c
 8006948:	fb01 f303 	mul.w	r3, r1, r3
 800694c:	4413      	add	r3, r2
 800694e:	3355      	adds	r3, #85	; 0x55
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	f083 0301 	eor.w	r3, r3, #1
 8006956:	b2d8      	uxtb	r0, r3
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	212c      	movs	r1, #44	; 0x2c
 800695e:	fb01 f303 	mul.w	r3, r1, r3
 8006962:	4413      	add	r3, r2
 8006964:	3355      	adds	r3, #85	; 0x55
 8006966:	4602      	mov	r2, r0
 8006968:	701a      	strb	r2, [r3, #0]
 800696a:	e09f      	b.n	8006aac <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	212c      	movs	r1, #44	; 0x2c
 8006972:	fb01 f303 	mul.w	r3, r1, r3
 8006976:	4413      	add	r3, r2
 8006978:	3361      	adds	r3, #97	; 0x61
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	2b03      	cmp	r3, #3
 800697e:	d109      	bne.n	8006994 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	212c      	movs	r1, #44	; 0x2c
 8006986:	fb01 f303 	mul.w	r3, r1, r3
 800698a:	4413      	add	r3, r2
 800698c:	3360      	adds	r3, #96	; 0x60
 800698e:	2202      	movs	r2, #2
 8006990:	701a      	strb	r2, [r3, #0]
 8006992:	e08b      	b.n	8006aac <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	212c      	movs	r1, #44	; 0x2c
 800699a:	fb01 f303 	mul.w	r3, r1, r3
 800699e:	4413      	add	r3, r2
 80069a0:	3361      	adds	r3, #97	; 0x61
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	2b04      	cmp	r3, #4
 80069a6:	d109      	bne.n	80069bc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	212c      	movs	r1, #44	; 0x2c
 80069ae:	fb01 f303 	mul.w	r3, r1, r3
 80069b2:	4413      	add	r3, r2
 80069b4:	3360      	adds	r3, #96	; 0x60
 80069b6:	2202      	movs	r2, #2
 80069b8:	701a      	strb	r2, [r3, #0]
 80069ba:	e077      	b.n	8006aac <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	212c      	movs	r1, #44	; 0x2c
 80069c2:	fb01 f303 	mul.w	r3, r1, r3
 80069c6:	4413      	add	r3, r2
 80069c8:	3361      	adds	r3, #97	; 0x61
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	2b05      	cmp	r3, #5
 80069ce:	d109      	bne.n	80069e4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	212c      	movs	r1, #44	; 0x2c
 80069d6:	fb01 f303 	mul.w	r3, r1, r3
 80069da:	4413      	add	r3, r2
 80069dc:	3360      	adds	r3, #96	; 0x60
 80069de:	2205      	movs	r2, #5
 80069e0:	701a      	strb	r2, [r3, #0]
 80069e2:	e063      	b.n	8006aac <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	212c      	movs	r1, #44	; 0x2c
 80069ea:	fb01 f303 	mul.w	r3, r1, r3
 80069ee:	4413      	add	r3, r2
 80069f0:	3361      	adds	r3, #97	; 0x61
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	2b06      	cmp	r3, #6
 80069f6:	d009      	beq.n	8006a0c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	212c      	movs	r1, #44	; 0x2c
 80069fe:	fb01 f303 	mul.w	r3, r1, r3
 8006a02:	4413      	add	r3, r2
 8006a04:	3361      	adds	r3, #97	; 0x61
 8006a06:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006a08:	2b08      	cmp	r3, #8
 8006a0a:	d14f      	bne.n	8006aac <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	212c      	movs	r1, #44	; 0x2c
 8006a12:	fb01 f303 	mul.w	r3, r1, r3
 8006a16:	4413      	add	r3, r2
 8006a18:	335c      	adds	r3, #92	; 0x5c
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	1c5a      	adds	r2, r3, #1
 8006a1e:	6879      	ldr	r1, [r7, #4]
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	202c      	movs	r0, #44	; 0x2c
 8006a24:	fb00 f303 	mul.w	r3, r0, r3
 8006a28:	440b      	add	r3, r1
 8006a2a:	335c      	adds	r3, #92	; 0x5c
 8006a2c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	212c      	movs	r1, #44	; 0x2c
 8006a34:	fb01 f303 	mul.w	r3, r1, r3
 8006a38:	4413      	add	r3, r2
 8006a3a:	335c      	adds	r3, #92	; 0x5c
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d912      	bls.n	8006a68 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	212c      	movs	r1, #44	; 0x2c
 8006a48:	fb01 f303 	mul.w	r3, r1, r3
 8006a4c:	4413      	add	r3, r2
 8006a4e:	335c      	adds	r3, #92	; 0x5c
 8006a50:	2200      	movs	r2, #0
 8006a52:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	212c      	movs	r1, #44	; 0x2c
 8006a5a:	fb01 f303 	mul.w	r3, r1, r3
 8006a5e:	4413      	add	r3, r2
 8006a60:	3360      	adds	r3, #96	; 0x60
 8006a62:	2204      	movs	r2, #4
 8006a64:	701a      	strb	r2, [r3, #0]
 8006a66:	e021      	b.n	8006aac <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	212c      	movs	r1, #44	; 0x2c
 8006a6e:	fb01 f303 	mul.w	r3, r1, r3
 8006a72:	4413      	add	r3, r2
 8006a74:	3360      	adds	r3, #96	; 0x60
 8006a76:	2202      	movs	r2, #2
 8006a78:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	015a      	lsls	r2, r3, #5
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	4413      	add	r3, r2
 8006a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a90:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a98:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	015a      	lsls	r2, r3, #5
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ab8:	461a      	mov	r2, r3
 8006aba:	2302      	movs	r3, #2
 8006abc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	b2d9      	uxtb	r1, r3
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	202c      	movs	r0, #44	; 0x2c
 8006ac8:	fb00 f303 	mul.w	r3, r0, r3
 8006acc:	4413      	add	r3, r2
 8006ace:	3360      	adds	r3, #96	; 0x60
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f00a f9d7 	bl	8010e88 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006ada:	bf00      	nop
 8006adc:	3720      	adds	r7, #32
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b08a      	sub	sp, #40	; 0x28
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	f003 030f 	and.w	r3, r3, #15
 8006b02:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	0c5b      	lsrs	r3, r3, #17
 8006b08:	f003 030f 	and.w	r3, r3, #15
 8006b0c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	091b      	lsrs	r3, r3, #4
 8006b12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b16:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d004      	beq.n	8006b28 <HCD_RXQLVL_IRQHandler+0x46>
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	2b05      	cmp	r3, #5
 8006b22:	f000 80a9 	beq.w	8006c78 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006b26:	e0aa      	b.n	8006c7e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f000 80a6 	beq.w	8006c7c <HCD_RXQLVL_IRQHandler+0x19a>
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	212c      	movs	r1, #44	; 0x2c
 8006b36:	fb01 f303 	mul.w	r3, r1, r3
 8006b3a:	4413      	add	r3, r2
 8006b3c:	3344      	adds	r3, #68	; 0x44
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 809b 	beq.w	8006c7c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	212c      	movs	r1, #44	; 0x2c
 8006b4c:	fb01 f303 	mul.w	r3, r1, r3
 8006b50:	4413      	add	r3, r2
 8006b52:	3350      	adds	r3, #80	; 0x50
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	441a      	add	r2, r3
 8006b5a:	6879      	ldr	r1, [r7, #4]
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	202c      	movs	r0, #44	; 0x2c
 8006b60:	fb00 f303 	mul.w	r3, r0, r3
 8006b64:	440b      	add	r3, r1
 8006b66:	334c      	adds	r3, #76	; 0x4c
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d87a      	bhi.n	8006c64 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6818      	ldr	r0, [r3, #0]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	212c      	movs	r1, #44	; 0x2c
 8006b78:	fb01 f303 	mul.w	r3, r1, r3
 8006b7c:	4413      	add	r3, r2
 8006b7e:	3344      	adds	r3, #68	; 0x44
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	b292      	uxth	r2, r2
 8006b86:	4619      	mov	r1, r3
 8006b88:	f003 fbf2 	bl	800a370 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	212c      	movs	r1, #44	; 0x2c
 8006b92:	fb01 f303 	mul.w	r3, r1, r3
 8006b96:	4413      	add	r3, r2
 8006b98:	3344      	adds	r3, #68	; 0x44
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	441a      	add	r2, r3
 8006ba0:	6879      	ldr	r1, [r7, #4]
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	202c      	movs	r0, #44	; 0x2c
 8006ba6:	fb00 f303 	mul.w	r3, r0, r3
 8006baa:	440b      	add	r3, r1
 8006bac:	3344      	adds	r3, #68	; 0x44
 8006bae:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	212c      	movs	r1, #44	; 0x2c
 8006bb6:	fb01 f303 	mul.w	r3, r1, r3
 8006bba:	4413      	add	r3, r2
 8006bbc:	3350      	adds	r3, #80	; 0x50
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	441a      	add	r2, r3
 8006bc4:	6879      	ldr	r1, [r7, #4]
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	202c      	movs	r0, #44	; 0x2c
 8006bca:	fb00 f303 	mul.w	r3, r0, r3
 8006bce:	440b      	add	r3, r1
 8006bd0:	3350      	adds	r3, #80	; 0x50
 8006bd2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	0cdb      	lsrs	r3, r3, #19
 8006be4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006be8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	212c      	movs	r1, #44	; 0x2c
 8006bf0:	fb01 f303 	mul.w	r3, r1, r3
 8006bf4:	4413      	add	r3, r2
 8006bf6:	3340      	adds	r3, #64	; 0x40
 8006bf8:	881b      	ldrh	r3, [r3, #0]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d13c      	bne.n	8006c7c <HCD_RXQLVL_IRQHandler+0x19a>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d039      	beq.n	8006c7c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	015a      	lsls	r2, r3, #5
 8006c0c:	6a3b      	ldr	r3, [r7, #32]
 8006c0e:	4413      	add	r3, r2
 8006c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c1e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c26:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	6a3b      	ldr	r3, [r7, #32]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c34:	461a      	mov	r2, r3
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	212c      	movs	r1, #44	; 0x2c
 8006c40:	fb01 f303 	mul.w	r3, r1, r3
 8006c44:	4413      	add	r3, r2
 8006c46:	3354      	adds	r3, #84	; 0x54
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	f083 0301 	eor.w	r3, r3, #1
 8006c4e:	b2d8      	uxtb	r0, r3
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	212c      	movs	r1, #44	; 0x2c
 8006c56:	fb01 f303 	mul.w	r3, r1, r3
 8006c5a:	4413      	add	r3, r2
 8006c5c:	3354      	adds	r3, #84	; 0x54
 8006c5e:	4602      	mov	r2, r0
 8006c60:	701a      	strb	r2, [r3, #0]
      break;
 8006c62:	e00b      	b.n	8006c7c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	212c      	movs	r1, #44	; 0x2c
 8006c6a:	fb01 f303 	mul.w	r3, r1, r3
 8006c6e:	4413      	add	r3, r2
 8006c70:	3360      	adds	r3, #96	; 0x60
 8006c72:	2204      	movs	r2, #4
 8006c74:	701a      	strb	r2, [r3, #0]
      break;
 8006c76:	e001      	b.n	8006c7c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006c78:	bf00      	nop
 8006c7a:	e000      	b.n	8006c7e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006c7c:	bf00      	nop
  }
}
 8006c7e:	bf00      	nop
 8006c80:	3728      	adds	r7, #40	; 0x28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b086      	sub	sp, #24
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006cb2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f003 0302 	and.w	r3, r3, #2
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d10b      	bne.n	8006cd6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d102      	bne.n	8006cce <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f00a f8c1 	bl	8010e50 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	f043 0302 	orr.w	r3, r3, #2
 8006cd4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f003 0308 	and.w	r3, r3, #8
 8006cdc:	2b08      	cmp	r3, #8
 8006cde:	d132      	bne.n	8006d46 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	f043 0308 	orr.w	r3, r3, #8
 8006ce6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f003 0304 	and.w	r3, r3, #4
 8006cee:	2b04      	cmp	r3, #4
 8006cf0:	d126      	bne.n	8006d40 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d113      	bne.n	8006d22 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006d00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d04:	d106      	bne.n	8006d14 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2102      	movs	r1, #2
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f003 fc9d 	bl	800a64c <USB_InitFSLSPClkSel>
 8006d12:	e011      	b.n	8006d38 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2101      	movs	r1, #1
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f003 fc96 	bl	800a64c <USB_InitFSLSPClkSel>
 8006d20:	e00a      	b.n	8006d38 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d106      	bne.n	8006d38 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d30:	461a      	mov	r2, r3
 8006d32:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006d36:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f00a f8b3 	bl	8010ea4 <HAL_HCD_PortEnabled_Callback>
 8006d3e:	e002      	b.n	8006d46 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f00a f8bd 	bl	8010ec0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f003 0320 	and.w	r3, r3, #32
 8006d4c:	2b20      	cmp	r3, #32
 8006d4e:	d103      	bne.n	8006d58 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	f043 0320 	orr.w	r3, r3, #32
 8006d56:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006d5e:	461a      	mov	r2, r3
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	6013      	str	r3, [r2, #0]
}
 8006d64:	bf00      	nop
 8006d66:	3718      	adds	r7, #24
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b086      	sub	sp, #24
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e267      	b.n	800724e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d075      	beq.n	8006e76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d8a:	4b88      	ldr	r3, [pc, #544]	; (8006fac <HAL_RCC_OscConfig+0x240>)
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f003 030c 	and.w	r3, r3, #12
 8006d92:	2b04      	cmp	r3, #4
 8006d94:	d00c      	beq.n	8006db0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d96:	4b85      	ldr	r3, [pc, #532]	; (8006fac <HAL_RCC_OscConfig+0x240>)
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d9e:	2b08      	cmp	r3, #8
 8006da0:	d112      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006da2:	4b82      	ldr	r3, [pc, #520]	; (8006fac <HAL_RCC_OscConfig+0x240>)
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006daa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dae:	d10b      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006db0:	4b7e      	ldr	r3, [pc, #504]	; (8006fac <HAL_RCC_OscConfig+0x240>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d05b      	beq.n	8006e74 <HAL_RCC_OscConfig+0x108>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d157      	bne.n	8006e74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e242      	b.n	800724e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dd0:	d106      	bne.n	8006de0 <HAL_RCC_OscConfig+0x74>
 8006dd2:	4b76      	ldr	r3, [pc, #472]	; (8006fac <HAL_RCC_OscConfig+0x240>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a75      	ldr	r2, [pc, #468]	; (8006fac <HAL_RCC_OscConfig+0x240>)
 8006dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ddc:	6013      	str	r3, [r2, #0]
 8006dde:	e01d      	b.n	8006e1c <HAL_RCC_OscConfig+0xb0>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006de8:	d10c      	bne.n	8006e04 <HAL_RCC_OscConfig+0x98>
 8006dea:	4b70      	ldr	r3, [pc, #448]	; (8006fac <HAL_RCC_OscConfig+0x240>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a6f      	ldr	r2, [pc, #444]	; (8006fac <HAL_RCC_OscConfig+0x240>)
 8006df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006df4:	6013      	str	r3, [r2, #0]
 8006df6:	4b6d      	ldr	r3, [pc, #436]	; (8006fac <HAL_RCC_OscConfig+0x240>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a6c      	ldr	r2, [pc, #432]	; (8006fac <HAL_RCC_OscConfig+0x240>)
 8006dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e00:	6013      	str	r3, [r2, #0]
 8006e02:	e00b      	b.n	8006e1c <HAL_RCC_OscConfig+0xb0>
 8006e04:	4b69      	ldr	r3, [pc, #420]	; (8006fac <HAL_RCC_OscConfig+0x240>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a68      	ldr	r2, [pc, #416]	; (8006fac <HAL_RCC_OscConfig+0x240>)
 8006e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e0e:	6013      	str	r3, [r2, #0]
 8006e10:	4b66      	ldr	r3, [pc, #408]	; (8006fac <HAL_RCC_OscConfig+0x240>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a65      	ldr	r2, [pc, #404]	; (8006fac <HAL_RCC_OscConfig+0x240>)
 8006e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d013      	beq.n	8006e4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e24:	f7fd fc84 	bl	8004730 <HAL_GetTick>
 8006e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e2a:	e008      	b.n	8006e3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e2c:	f7fd fc80 	bl	8004730 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	2b64      	cmp	r3, #100	; 0x64
 8006e38:	d901      	bls.n	8006e3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e207      	b.n	800724e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e3e:	4b5b      	ldr	r3, [pc, #364]	; (8006fac <HAL_RCC_OscConfig+0x240>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d0f0      	beq.n	8006e2c <HAL_RCC_OscConfig+0xc0>
 8006e4a:	e014      	b.n	8006e76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e4c:	f7fd fc70 	bl	8004730 <HAL_GetTick>
 8006e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e52:	e008      	b.n	8006e66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e54:	f7fd fc6c 	bl	8004730 <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	2b64      	cmp	r3, #100	; 0x64
 8006e60:	d901      	bls.n	8006e66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e1f3      	b.n	800724e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e66:	4b51      	ldr	r3, [pc, #324]	; (8006fac <HAL_RCC_OscConfig+0x240>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1f0      	bne.n	8006e54 <HAL_RCC_OscConfig+0xe8>
 8006e72:	e000      	b.n	8006e76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d063      	beq.n	8006f4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e82:	4b4a      	ldr	r3, [pc, #296]	; (8006fac <HAL_RCC_OscConfig+0x240>)
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f003 030c 	and.w	r3, r3, #12
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00b      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e8e:	4b47      	ldr	r3, [pc, #284]	; (8006fac <HAL_RCC_OscConfig+0x240>)
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e96:	2b08      	cmp	r3, #8
 8006e98:	d11c      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e9a:	4b44      	ldr	r3, [pc, #272]	; (8006fac <HAL_RCC_OscConfig+0x240>)
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d116      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ea6:	4b41      	ldr	r3, [pc, #260]	; (8006fac <HAL_RCC_OscConfig+0x240>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0302 	and.w	r3, r3, #2
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d005      	beq.n	8006ebe <HAL_RCC_OscConfig+0x152>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d001      	beq.n	8006ebe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e1c7      	b.n	800724e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ebe:	4b3b      	ldr	r3, [pc, #236]	; (8006fac <HAL_RCC_OscConfig+0x240>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	00db      	lsls	r3, r3, #3
 8006ecc:	4937      	ldr	r1, [pc, #220]	; (8006fac <HAL_RCC_OscConfig+0x240>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ed2:	e03a      	b.n	8006f4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d020      	beq.n	8006f1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006edc:	4b34      	ldr	r3, [pc, #208]	; (8006fb0 <HAL_RCC_OscConfig+0x244>)
 8006ede:	2201      	movs	r2, #1
 8006ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee2:	f7fd fc25 	bl	8004730 <HAL_GetTick>
 8006ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ee8:	e008      	b.n	8006efc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006eea:	f7fd fc21 	bl	8004730 <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d901      	bls.n	8006efc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e1a8      	b.n	800724e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006efc:	4b2b      	ldr	r3, [pc, #172]	; (8006fac <HAL_RCC_OscConfig+0x240>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0302 	and.w	r3, r3, #2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d0f0      	beq.n	8006eea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f08:	4b28      	ldr	r3, [pc, #160]	; (8006fac <HAL_RCC_OscConfig+0x240>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	00db      	lsls	r3, r3, #3
 8006f16:	4925      	ldr	r1, [pc, #148]	; (8006fac <HAL_RCC_OscConfig+0x240>)
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	600b      	str	r3, [r1, #0]
 8006f1c:	e015      	b.n	8006f4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f1e:	4b24      	ldr	r3, [pc, #144]	; (8006fb0 <HAL_RCC_OscConfig+0x244>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f24:	f7fd fc04 	bl	8004730 <HAL_GetTick>
 8006f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f2a:	e008      	b.n	8006f3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f2c:	f7fd fc00 	bl	8004730 <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d901      	bls.n	8006f3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e187      	b.n	800724e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f3e:	4b1b      	ldr	r3, [pc, #108]	; (8006fac <HAL_RCC_OscConfig+0x240>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1f0      	bne.n	8006f2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0308 	and.w	r3, r3, #8
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d036      	beq.n	8006fc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d016      	beq.n	8006f8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f5e:	4b15      	ldr	r3, [pc, #84]	; (8006fb4 <HAL_RCC_OscConfig+0x248>)
 8006f60:	2201      	movs	r2, #1
 8006f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f64:	f7fd fbe4 	bl	8004730 <HAL_GetTick>
 8006f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f6a:	e008      	b.n	8006f7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f6c:	f7fd fbe0 	bl	8004730 <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d901      	bls.n	8006f7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e167      	b.n	800724e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f7e:	4b0b      	ldr	r3, [pc, #44]	; (8006fac <HAL_RCC_OscConfig+0x240>)
 8006f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d0f0      	beq.n	8006f6c <HAL_RCC_OscConfig+0x200>
 8006f8a:	e01b      	b.n	8006fc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f8c:	4b09      	ldr	r3, [pc, #36]	; (8006fb4 <HAL_RCC_OscConfig+0x248>)
 8006f8e:	2200      	movs	r2, #0
 8006f90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f92:	f7fd fbcd 	bl	8004730 <HAL_GetTick>
 8006f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f98:	e00e      	b.n	8006fb8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f9a:	f7fd fbc9 	bl	8004730 <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d907      	bls.n	8006fb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e150      	b.n	800724e <HAL_RCC_OscConfig+0x4e2>
 8006fac:	40023800 	.word	0x40023800
 8006fb0:	42470000 	.word	0x42470000
 8006fb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fb8:	4b88      	ldr	r3, [pc, #544]	; (80071dc <HAL_RCC_OscConfig+0x470>)
 8006fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fbc:	f003 0302 	and.w	r3, r3, #2
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1ea      	bne.n	8006f9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0304 	and.w	r3, r3, #4
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 8097 	beq.w	8007100 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fd6:	4b81      	ldr	r3, [pc, #516]	; (80071dc <HAL_RCC_OscConfig+0x470>)
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10f      	bne.n	8007002 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60bb      	str	r3, [r7, #8]
 8006fe6:	4b7d      	ldr	r3, [pc, #500]	; (80071dc <HAL_RCC_OscConfig+0x470>)
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fea:	4a7c      	ldr	r2, [pc, #496]	; (80071dc <HAL_RCC_OscConfig+0x470>)
 8006fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8006ff2:	4b7a      	ldr	r3, [pc, #488]	; (80071dc <HAL_RCC_OscConfig+0x470>)
 8006ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ffa:	60bb      	str	r3, [r7, #8]
 8006ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ffe:	2301      	movs	r3, #1
 8007000:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007002:	4b77      	ldr	r3, [pc, #476]	; (80071e0 <HAL_RCC_OscConfig+0x474>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800700a:	2b00      	cmp	r3, #0
 800700c:	d118      	bne.n	8007040 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800700e:	4b74      	ldr	r3, [pc, #464]	; (80071e0 <HAL_RCC_OscConfig+0x474>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a73      	ldr	r2, [pc, #460]	; (80071e0 <HAL_RCC_OscConfig+0x474>)
 8007014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800701a:	f7fd fb89 	bl	8004730 <HAL_GetTick>
 800701e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007020:	e008      	b.n	8007034 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007022:	f7fd fb85 	bl	8004730 <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	2b02      	cmp	r3, #2
 800702e:	d901      	bls.n	8007034 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e10c      	b.n	800724e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007034:	4b6a      	ldr	r3, [pc, #424]	; (80071e0 <HAL_RCC_OscConfig+0x474>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800703c:	2b00      	cmp	r3, #0
 800703e:	d0f0      	beq.n	8007022 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d106      	bne.n	8007056 <HAL_RCC_OscConfig+0x2ea>
 8007048:	4b64      	ldr	r3, [pc, #400]	; (80071dc <HAL_RCC_OscConfig+0x470>)
 800704a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800704c:	4a63      	ldr	r2, [pc, #396]	; (80071dc <HAL_RCC_OscConfig+0x470>)
 800704e:	f043 0301 	orr.w	r3, r3, #1
 8007052:	6713      	str	r3, [r2, #112]	; 0x70
 8007054:	e01c      	b.n	8007090 <HAL_RCC_OscConfig+0x324>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	2b05      	cmp	r3, #5
 800705c:	d10c      	bne.n	8007078 <HAL_RCC_OscConfig+0x30c>
 800705e:	4b5f      	ldr	r3, [pc, #380]	; (80071dc <HAL_RCC_OscConfig+0x470>)
 8007060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007062:	4a5e      	ldr	r2, [pc, #376]	; (80071dc <HAL_RCC_OscConfig+0x470>)
 8007064:	f043 0304 	orr.w	r3, r3, #4
 8007068:	6713      	str	r3, [r2, #112]	; 0x70
 800706a:	4b5c      	ldr	r3, [pc, #368]	; (80071dc <HAL_RCC_OscConfig+0x470>)
 800706c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800706e:	4a5b      	ldr	r2, [pc, #364]	; (80071dc <HAL_RCC_OscConfig+0x470>)
 8007070:	f043 0301 	orr.w	r3, r3, #1
 8007074:	6713      	str	r3, [r2, #112]	; 0x70
 8007076:	e00b      	b.n	8007090 <HAL_RCC_OscConfig+0x324>
 8007078:	4b58      	ldr	r3, [pc, #352]	; (80071dc <HAL_RCC_OscConfig+0x470>)
 800707a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800707c:	4a57      	ldr	r2, [pc, #348]	; (80071dc <HAL_RCC_OscConfig+0x470>)
 800707e:	f023 0301 	bic.w	r3, r3, #1
 8007082:	6713      	str	r3, [r2, #112]	; 0x70
 8007084:	4b55      	ldr	r3, [pc, #340]	; (80071dc <HAL_RCC_OscConfig+0x470>)
 8007086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007088:	4a54      	ldr	r2, [pc, #336]	; (80071dc <HAL_RCC_OscConfig+0x470>)
 800708a:	f023 0304 	bic.w	r3, r3, #4
 800708e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d015      	beq.n	80070c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007098:	f7fd fb4a 	bl	8004730 <HAL_GetTick>
 800709c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800709e:	e00a      	b.n	80070b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070a0:	f7fd fb46 	bl	8004730 <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d901      	bls.n	80070b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e0cb      	b.n	800724e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070b6:	4b49      	ldr	r3, [pc, #292]	; (80071dc <HAL_RCC_OscConfig+0x470>)
 80070b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ba:	f003 0302 	and.w	r3, r3, #2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d0ee      	beq.n	80070a0 <HAL_RCC_OscConfig+0x334>
 80070c2:	e014      	b.n	80070ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070c4:	f7fd fb34 	bl	8004730 <HAL_GetTick>
 80070c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070ca:	e00a      	b.n	80070e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070cc:	f7fd fb30 	bl	8004730 <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80070da:	4293      	cmp	r3, r2
 80070dc:	d901      	bls.n	80070e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e0b5      	b.n	800724e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070e2:	4b3e      	ldr	r3, [pc, #248]	; (80071dc <HAL_RCC_OscConfig+0x470>)
 80070e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1ee      	bne.n	80070cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070ee:	7dfb      	ldrb	r3, [r7, #23]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d105      	bne.n	8007100 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070f4:	4b39      	ldr	r3, [pc, #228]	; (80071dc <HAL_RCC_OscConfig+0x470>)
 80070f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f8:	4a38      	ldr	r2, [pc, #224]	; (80071dc <HAL_RCC_OscConfig+0x470>)
 80070fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 80a1 	beq.w	800724c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800710a:	4b34      	ldr	r3, [pc, #208]	; (80071dc <HAL_RCC_OscConfig+0x470>)
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f003 030c 	and.w	r3, r3, #12
 8007112:	2b08      	cmp	r3, #8
 8007114:	d05c      	beq.n	80071d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	2b02      	cmp	r3, #2
 800711c:	d141      	bne.n	80071a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800711e:	4b31      	ldr	r3, [pc, #196]	; (80071e4 <HAL_RCC_OscConfig+0x478>)
 8007120:	2200      	movs	r2, #0
 8007122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007124:	f7fd fb04 	bl	8004730 <HAL_GetTick>
 8007128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800712a:	e008      	b.n	800713e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800712c:	f7fd fb00 	bl	8004730 <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	2b02      	cmp	r3, #2
 8007138:	d901      	bls.n	800713e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e087      	b.n	800724e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800713e:	4b27      	ldr	r3, [pc, #156]	; (80071dc <HAL_RCC_OscConfig+0x470>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1f0      	bne.n	800712c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	69da      	ldr	r2, [r3, #28]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	431a      	orrs	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007158:	019b      	lsls	r3, r3, #6
 800715a:	431a      	orrs	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007160:	085b      	lsrs	r3, r3, #1
 8007162:	3b01      	subs	r3, #1
 8007164:	041b      	lsls	r3, r3, #16
 8007166:	431a      	orrs	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716c:	061b      	lsls	r3, r3, #24
 800716e:	491b      	ldr	r1, [pc, #108]	; (80071dc <HAL_RCC_OscConfig+0x470>)
 8007170:	4313      	orrs	r3, r2
 8007172:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007174:	4b1b      	ldr	r3, [pc, #108]	; (80071e4 <HAL_RCC_OscConfig+0x478>)
 8007176:	2201      	movs	r2, #1
 8007178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800717a:	f7fd fad9 	bl	8004730 <HAL_GetTick>
 800717e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007180:	e008      	b.n	8007194 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007182:	f7fd fad5 	bl	8004730 <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	2b02      	cmp	r3, #2
 800718e:	d901      	bls.n	8007194 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007190:	2303      	movs	r3, #3
 8007192:	e05c      	b.n	800724e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007194:	4b11      	ldr	r3, [pc, #68]	; (80071dc <HAL_RCC_OscConfig+0x470>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d0f0      	beq.n	8007182 <HAL_RCC_OscConfig+0x416>
 80071a0:	e054      	b.n	800724c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071a2:	4b10      	ldr	r3, [pc, #64]	; (80071e4 <HAL_RCC_OscConfig+0x478>)
 80071a4:	2200      	movs	r2, #0
 80071a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071a8:	f7fd fac2 	bl	8004730 <HAL_GetTick>
 80071ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ae:	e008      	b.n	80071c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071b0:	f7fd fabe 	bl	8004730 <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d901      	bls.n	80071c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e045      	b.n	800724e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071c2:	4b06      	ldr	r3, [pc, #24]	; (80071dc <HAL_RCC_OscConfig+0x470>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1f0      	bne.n	80071b0 <HAL_RCC_OscConfig+0x444>
 80071ce:	e03d      	b.n	800724c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d107      	bne.n	80071e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e038      	b.n	800724e <HAL_RCC_OscConfig+0x4e2>
 80071dc:	40023800 	.word	0x40023800
 80071e0:	40007000 	.word	0x40007000
 80071e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80071e8:	4b1b      	ldr	r3, [pc, #108]	; (8007258 <HAL_RCC_OscConfig+0x4ec>)
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d028      	beq.n	8007248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007200:	429a      	cmp	r2, r3
 8007202:	d121      	bne.n	8007248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800720e:	429a      	cmp	r2, r3
 8007210:	d11a      	bne.n	8007248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007218:	4013      	ands	r3, r2
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800721e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007220:	4293      	cmp	r3, r2
 8007222:	d111      	bne.n	8007248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722e:	085b      	lsrs	r3, r3, #1
 8007230:	3b01      	subs	r3, #1
 8007232:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007234:	429a      	cmp	r2, r3
 8007236:	d107      	bne.n	8007248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007242:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007244:	429a      	cmp	r2, r3
 8007246:	d001      	beq.n	800724c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e000      	b.n	800724e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3718      	adds	r7, #24
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	40023800 	.word	0x40023800

0800725c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d101      	bne.n	8007270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e0cc      	b.n	800740a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007270:	4b68      	ldr	r3, [pc, #416]	; (8007414 <HAL_RCC_ClockConfig+0x1b8>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0307 	and.w	r3, r3, #7
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	429a      	cmp	r2, r3
 800727c:	d90c      	bls.n	8007298 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800727e:	4b65      	ldr	r3, [pc, #404]	; (8007414 <HAL_RCC_ClockConfig+0x1b8>)
 8007280:	683a      	ldr	r2, [r7, #0]
 8007282:	b2d2      	uxtb	r2, r2
 8007284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007286:	4b63      	ldr	r3, [pc, #396]	; (8007414 <HAL_RCC_ClockConfig+0x1b8>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0307 	and.w	r3, r3, #7
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	429a      	cmp	r2, r3
 8007292:	d001      	beq.n	8007298 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e0b8      	b.n	800740a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0302 	and.w	r3, r3, #2
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d020      	beq.n	80072e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0304 	and.w	r3, r3, #4
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d005      	beq.n	80072bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072b0:	4b59      	ldr	r3, [pc, #356]	; (8007418 <HAL_RCC_ClockConfig+0x1bc>)
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	4a58      	ldr	r2, [pc, #352]	; (8007418 <HAL_RCC_ClockConfig+0x1bc>)
 80072b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80072ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0308 	and.w	r3, r3, #8
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d005      	beq.n	80072d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072c8:	4b53      	ldr	r3, [pc, #332]	; (8007418 <HAL_RCC_ClockConfig+0x1bc>)
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	4a52      	ldr	r2, [pc, #328]	; (8007418 <HAL_RCC_ClockConfig+0x1bc>)
 80072ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80072d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072d4:	4b50      	ldr	r3, [pc, #320]	; (8007418 <HAL_RCC_ClockConfig+0x1bc>)
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	494d      	ldr	r1, [pc, #308]	; (8007418 <HAL_RCC_ClockConfig+0x1bc>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d044      	beq.n	800737c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d107      	bne.n	800730a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072fa:	4b47      	ldr	r3, [pc, #284]	; (8007418 <HAL_RCC_ClockConfig+0x1bc>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d119      	bne.n	800733a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e07f      	b.n	800740a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	2b02      	cmp	r3, #2
 8007310:	d003      	beq.n	800731a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007316:	2b03      	cmp	r3, #3
 8007318:	d107      	bne.n	800732a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800731a:	4b3f      	ldr	r3, [pc, #252]	; (8007418 <HAL_RCC_ClockConfig+0x1bc>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d109      	bne.n	800733a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e06f      	b.n	800740a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800732a:	4b3b      	ldr	r3, [pc, #236]	; (8007418 <HAL_RCC_ClockConfig+0x1bc>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0302 	and.w	r3, r3, #2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e067      	b.n	800740a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800733a:	4b37      	ldr	r3, [pc, #220]	; (8007418 <HAL_RCC_ClockConfig+0x1bc>)
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f023 0203 	bic.w	r2, r3, #3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	4934      	ldr	r1, [pc, #208]	; (8007418 <HAL_RCC_ClockConfig+0x1bc>)
 8007348:	4313      	orrs	r3, r2
 800734a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800734c:	f7fd f9f0 	bl	8004730 <HAL_GetTick>
 8007350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007352:	e00a      	b.n	800736a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007354:	f7fd f9ec 	bl	8004730 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007362:	4293      	cmp	r3, r2
 8007364:	d901      	bls.n	800736a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e04f      	b.n	800740a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800736a:	4b2b      	ldr	r3, [pc, #172]	; (8007418 <HAL_RCC_ClockConfig+0x1bc>)
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f003 020c 	and.w	r2, r3, #12
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	429a      	cmp	r2, r3
 800737a:	d1eb      	bne.n	8007354 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800737c:	4b25      	ldr	r3, [pc, #148]	; (8007414 <HAL_RCC_ClockConfig+0x1b8>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0307 	and.w	r3, r3, #7
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	429a      	cmp	r2, r3
 8007388:	d20c      	bcs.n	80073a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800738a:	4b22      	ldr	r3, [pc, #136]	; (8007414 <HAL_RCC_ClockConfig+0x1b8>)
 800738c:	683a      	ldr	r2, [r7, #0]
 800738e:	b2d2      	uxtb	r2, r2
 8007390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007392:	4b20      	ldr	r3, [pc, #128]	; (8007414 <HAL_RCC_ClockConfig+0x1b8>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 0307 	and.w	r3, r3, #7
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	429a      	cmp	r2, r3
 800739e:	d001      	beq.n	80073a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e032      	b.n	800740a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0304 	and.w	r3, r3, #4
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d008      	beq.n	80073c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073b0:	4b19      	ldr	r3, [pc, #100]	; (8007418 <HAL_RCC_ClockConfig+0x1bc>)
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	4916      	ldr	r1, [pc, #88]	; (8007418 <HAL_RCC_ClockConfig+0x1bc>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0308 	and.w	r3, r3, #8
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d009      	beq.n	80073e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073ce:	4b12      	ldr	r3, [pc, #72]	; (8007418 <HAL_RCC_ClockConfig+0x1bc>)
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	00db      	lsls	r3, r3, #3
 80073dc:	490e      	ldr	r1, [pc, #56]	; (8007418 <HAL_RCC_ClockConfig+0x1bc>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80073e2:	f000 f821 	bl	8007428 <HAL_RCC_GetSysClockFreq>
 80073e6:	4602      	mov	r2, r0
 80073e8:	4b0b      	ldr	r3, [pc, #44]	; (8007418 <HAL_RCC_ClockConfig+0x1bc>)
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	091b      	lsrs	r3, r3, #4
 80073ee:	f003 030f 	and.w	r3, r3, #15
 80073f2:	490a      	ldr	r1, [pc, #40]	; (800741c <HAL_RCC_ClockConfig+0x1c0>)
 80073f4:	5ccb      	ldrb	r3, [r1, r3]
 80073f6:	fa22 f303 	lsr.w	r3, r2, r3
 80073fa:	4a09      	ldr	r2, [pc, #36]	; (8007420 <HAL_RCC_ClockConfig+0x1c4>)
 80073fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80073fe:	4b09      	ldr	r3, [pc, #36]	; (8007424 <HAL_RCC_ClockConfig+0x1c8>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4618      	mov	r0, r3
 8007404:	f7fd f950 	bl	80046a8 <HAL_InitTick>

  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	40023c00 	.word	0x40023c00
 8007418:	40023800 	.word	0x40023800
 800741c:	08011dac 	.word	0x08011dac
 8007420:	20000004 	.word	0x20000004
 8007424:	20000020 	.word	0x20000020

08007428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800742c:	b094      	sub	sp, #80	; 0x50
 800742e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007430:	2300      	movs	r3, #0
 8007432:	647b      	str	r3, [r7, #68]	; 0x44
 8007434:	2300      	movs	r3, #0
 8007436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007438:	2300      	movs	r3, #0
 800743a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800743c:	2300      	movs	r3, #0
 800743e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007440:	4b79      	ldr	r3, [pc, #484]	; (8007628 <HAL_RCC_GetSysClockFreq+0x200>)
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	f003 030c 	and.w	r3, r3, #12
 8007448:	2b08      	cmp	r3, #8
 800744a:	d00d      	beq.n	8007468 <HAL_RCC_GetSysClockFreq+0x40>
 800744c:	2b08      	cmp	r3, #8
 800744e:	f200 80e1 	bhi.w	8007614 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007452:	2b00      	cmp	r3, #0
 8007454:	d002      	beq.n	800745c <HAL_RCC_GetSysClockFreq+0x34>
 8007456:	2b04      	cmp	r3, #4
 8007458:	d003      	beq.n	8007462 <HAL_RCC_GetSysClockFreq+0x3a>
 800745a:	e0db      	b.n	8007614 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800745c:	4b73      	ldr	r3, [pc, #460]	; (800762c <HAL_RCC_GetSysClockFreq+0x204>)
 800745e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007460:	e0db      	b.n	800761a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007462:	4b73      	ldr	r3, [pc, #460]	; (8007630 <HAL_RCC_GetSysClockFreq+0x208>)
 8007464:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007466:	e0d8      	b.n	800761a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007468:	4b6f      	ldr	r3, [pc, #444]	; (8007628 <HAL_RCC_GetSysClockFreq+0x200>)
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007470:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007472:	4b6d      	ldr	r3, [pc, #436]	; (8007628 <HAL_RCC_GetSysClockFreq+0x200>)
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800747a:	2b00      	cmp	r3, #0
 800747c:	d063      	beq.n	8007546 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800747e:	4b6a      	ldr	r3, [pc, #424]	; (8007628 <HAL_RCC_GetSysClockFreq+0x200>)
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	099b      	lsrs	r3, r3, #6
 8007484:	2200      	movs	r2, #0
 8007486:	63bb      	str	r3, [r7, #56]	; 0x38
 8007488:	63fa      	str	r2, [r7, #60]	; 0x3c
 800748a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007490:	633b      	str	r3, [r7, #48]	; 0x30
 8007492:	2300      	movs	r3, #0
 8007494:	637b      	str	r3, [r7, #52]	; 0x34
 8007496:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800749a:	4622      	mov	r2, r4
 800749c:	462b      	mov	r3, r5
 800749e:	f04f 0000 	mov.w	r0, #0
 80074a2:	f04f 0100 	mov.w	r1, #0
 80074a6:	0159      	lsls	r1, r3, #5
 80074a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074ac:	0150      	lsls	r0, r2, #5
 80074ae:	4602      	mov	r2, r0
 80074b0:	460b      	mov	r3, r1
 80074b2:	4621      	mov	r1, r4
 80074b4:	1a51      	subs	r1, r2, r1
 80074b6:	6139      	str	r1, [r7, #16]
 80074b8:	4629      	mov	r1, r5
 80074ba:	eb63 0301 	sbc.w	r3, r3, r1
 80074be:	617b      	str	r3, [r7, #20]
 80074c0:	f04f 0200 	mov.w	r2, #0
 80074c4:	f04f 0300 	mov.w	r3, #0
 80074c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074cc:	4659      	mov	r1, fp
 80074ce:	018b      	lsls	r3, r1, #6
 80074d0:	4651      	mov	r1, sl
 80074d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80074d6:	4651      	mov	r1, sl
 80074d8:	018a      	lsls	r2, r1, #6
 80074da:	4651      	mov	r1, sl
 80074dc:	ebb2 0801 	subs.w	r8, r2, r1
 80074e0:	4659      	mov	r1, fp
 80074e2:	eb63 0901 	sbc.w	r9, r3, r1
 80074e6:	f04f 0200 	mov.w	r2, #0
 80074ea:	f04f 0300 	mov.w	r3, #0
 80074ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074fa:	4690      	mov	r8, r2
 80074fc:	4699      	mov	r9, r3
 80074fe:	4623      	mov	r3, r4
 8007500:	eb18 0303 	adds.w	r3, r8, r3
 8007504:	60bb      	str	r3, [r7, #8]
 8007506:	462b      	mov	r3, r5
 8007508:	eb49 0303 	adc.w	r3, r9, r3
 800750c:	60fb      	str	r3, [r7, #12]
 800750e:	f04f 0200 	mov.w	r2, #0
 8007512:	f04f 0300 	mov.w	r3, #0
 8007516:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800751a:	4629      	mov	r1, r5
 800751c:	024b      	lsls	r3, r1, #9
 800751e:	4621      	mov	r1, r4
 8007520:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007524:	4621      	mov	r1, r4
 8007526:	024a      	lsls	r2, r1, #9
 8007528:	4610      	mov	r0, r2
 800752a:	4619      	mov	r1, r3
 800752c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800752e:	2200      	movs	r2, #0
 8007530:	62bb      	str	r3, [r7, #40]	; 0x28
 8007532:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007534:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007538:	f7f9 f9a8 	bl	800088c <__aeabi_uldivmod>
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	4613      	mov	r3, r2
 8007542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007544:	e058      	b.n	80075f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007546:	4b38      	ldr	r3, [pc, #224]	; (8007628 <HAL_RCC_GetSysClockFreq+0x200>)
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	099b      	lsrs	r3, r3, #6
 800754c:	2200      	movs	r2, #0
 800754e:	4618      	mov	r0, r3
 8007550:	4611      	mov	r1, r2
 8007552:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007556:	623b      	str	r3, [r7, #32]
 8007558:	2300      	movs	r3, #0
 800755a:	627b      	str	r3, [r7, #36]	; 0x24
 800755c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007560:	4642      	mov	r2, r8
 8007562:	464b      	mov	r3, r9
 8007564:	f04f 0000 	mov.w	r0, #0
 8007568:	f04f 0100 	mov.w	r1, #0
 800756c:	0159      	lsls	r1, r3, #5
 800756e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007572:	0150      	lsls	r0, r2, #5
 8007574:	4602      	mov	r2, r0
 8007576:	460b      	mov	r3, r1
 8007578:	4641      	mov	r1, r8
 800757a:	ebb2 0a01 	subs.w	sl, r2, r1
 800757e:	4649      	mov	r1, r9
 8007580:	eb63 0b01 	sbc.w	fp, r3, r1
 8007584:	f04f 0200 	mov.w	r2, #0
 8007588:	f04f 0300 	mov.w	r3, #0
 800758c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007590:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007594:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007598:	ebb2 040a 	subs.w	r4, r2, sl
 800759c:	eb63 050b 	sbc.w	r5, r3, fp
 80075a0:	f04f 0200 	mov.w	r2, #0
 80075a4:	f04f 0300 	mov.w	r3, #0
 80075a8:	00eb      	lsls	r3, r5, #3
 80075aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075ae:	00e2      	lsls	r2, r4, #3
 80075b0:	4614      	mov	r4, r2
 80075b2:	461d      	mov	r5, r3
 80075b4:	4643      	mov	r3, r8
 80075b6:	18e3      	adds	r3, r4, r3
 80075b8:	603b      	str	r3, [r7, #0]
 80075ba:	464b      	mov	r3, r9
 80075bc:	eb45 0303 	adc.w	r3, r5, r3
 80075c0:	607b      	str	r3, [r7, #4]
 80075c2:	f04f 0200 	mov.w	r2, #0
 80075c6:	f04f 0300 	mov.w	r3, #0
 80075ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80075ce:	4629      	mov	r1, r5
 80075d0:	028b      	lsls	r3, r1, #10
 80075d2:	4621      	mov	r1, r4
 80075d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80075d8:	4621      	mov	r1, r4
 80075da:	028a      	lsls	r2, r1, #10
 80075dc:	4610      	mov	r0, r2
 80075de:	4619      	mov	r1, r3
 80075e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075e2:	2200      	movs	r2, #0
 80075e4:	61bb      	str	r3, [r7, #24]
 80075e6:	61fa      	str	r2, [r7, #28]
 80075e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075ec:	f7f9 f94e 	bl	800088c <__aeabi_uldivmod>
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	4613      	mov	r3, r2
 80075f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80075f8:	4b0b      	ldr	r3, [pc, #44]	; (8007628 <HAL_RCC_GetSysClockFreq+0x200>)
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	0c1b      	lsrs	r3, r3, #16
 80075fe:	f003 0303 	and.w	r3, r3, #3
 8007602:	3301      	adds	r3, #1
 8007604:	005b      	lsls	r3, r3, #1
 8007606:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007608:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800760a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800760c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007610:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007612:	e002      	b.n	800761a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007614:	4b05      	ldr	r3, [pc, #20]	; (800762c <HAL_RCC_GetSysClockFreq+0x204>)
 8007616:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007618:	bf00      	nop
    }
  }
  return sysclockfreq;
 800761a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800761c:	4618      	mov	r0, r3
 800761e:	3750      	adds	r7, #80	; 0x50
 8007620:	46bd      	mov	sp, r7
 8007622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007626:	bf00      	nop
 8007628:	40023800 	.word	0x40023800
 800762c:	00f42400 	.word	0x00f42400
 8007630:	007a1200 	.word	0x007a1200

08007634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007634:	b480      	push	{r7}
 8007636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007638:	4b03      	ldr	r3, [pc, #12]	; (8007648 <HAL_RCC_GetHCLKFreq+0x14>)
 800763a:	681b      	ldr	r3, [r3, #0]
}
 800763c:	4618      	mov	r0, r3
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	20000004 	.word	0x20000004

0800764c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007650:	f7ff fff0 	bl	8007634 <HAL_RCC_GetHCLKFreq>
 8007654:	4602      	mov	r2, r0
 8007656:	4b05      	ldr	r3, [pc, #20]	; (800766c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	0a9b      	lsrs	r3, r3, #10
 800765c:	f003 0307 	and.w	r3, r3, #7
 8007660:	4903      	ldr	r1, [pc, #12]	; (8007670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007662:	5ccb      	ldrb	r3, [r1, r3]
 8007664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007668:	4618      	mov	r0, r3
 800766a:	bd80      	pop	{r7, pc}
 800766c:	40023800 	.word	0x40023800
 8007670:	08011dbc 	.word	0x08011dbc

08007674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007678:	f7ff ffdc 	bl	8007634 <HAL_RCC_GetHCLKFreq>
 800767c:	4602      	mov	r2, r0
 800767e:	4b05      	ldr	r3, [pc, #20]	; (8007694 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	0b5b      	lsrs	r3, r3, #13
 8007684:	f003 0307 	and.w	r3, r3, #7
 8007688:	4903      	ldr	r1, [pc, #12]	; (8007698 <HAL_RCC_GetPCLK2Freq+0x24>)
 800768a:	5ccb      	ldrb	r3, [r1, r3]
 800768c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007690:	4618      	mov	r0, r3
 8007692:	bd80      	pop	{r7, pc}
 8007694:	40023800 	.word	0x40023800
 8007698:	08011dbc 	.word	0x08011dbc

0800769c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d101      	bne.n	80076ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e07b      	b.n	80077a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d108      	bne.n	80076c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076be:	d009      	beq.n	80076d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	61da      	str	r2, [r3, #28]
 80076c6:	e005      	b.n	80076d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d106      	bne.n	80076f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7fb feba 	bl	8003468 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2202      	movs	r2, #2
 80076f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800770a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800771c:	431a      	orrs	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007726:	431a      	orrs	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	f003 0302 	and.w	r3, r3, #2
 8007730:	431a      	orrs	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	f003 0301 	and.w	r3, r3, #1
 800773a:	431a      	orrs	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007744:	431a      	orrs	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800774e:	431a      	orrs	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a1b      	ldr	r3, [r3, #32]
 8007754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007758:	ea42 0103 	orr.w	r1, r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007760:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	430a      	orrs	r2, r1
 800776a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	0c1b      	lsrs	r3, r3, #16
 8007772:	f003 0104 	and.w	r1, r3, #4
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777a:	f003 0210 	and.w	r2, r3, #16
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	430a      	orrs	r2, r1
 8007784:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	69da      	ldr	r2, [r3, #28]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007794:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b08c      	sub	sp, #48	; 0x30
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	60f8      	str	r0, [r7, #12]
 80077b6:	60b9      	str	r1, [r7, #8]
 80077b8:	607a      	str	r2, [r7, #4]
 80077ba:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80077bc:	2301      	movs	r3, #1
 80077be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80077c0:	2300      	movs	r3, #0
 80077c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d101      	bne.n	80077d4 <HAL_SPI_TransmitReceive+0x26>
 80077d0:	2302      	movs	r3, #2
 80077d2:	e18a      	b.n	8007aea <HAL_SPI_TransmitReceive+0x33c>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077dc:	f7fc ffa8 	bl	8004730 <HAL_GetTick>
 80077e0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80077f2:	887b      	ldrh	r3, [r7, #2]
 80077f4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80077f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d00f      	beq.n	800781e <HAL_SPI_TransmitReceive+0x70>
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007804:	d107      	bne.n	8007816 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d103      	bne.n	8007816 <HAL_SPI_TransmitReceive+0x68>
 800780e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007812:	2b04      	cmp	r3, #4
 8007814:	d003      	beq.n	800781e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007816:	2302      	movs	r3, #2
 8007818:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800781c:	e15b      	b.n	8007ad6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d005      	beq.n	8007830 <HAL_SPI_TransmitReceive+0x82>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d002      	beq.n	8007830 <HAL_SPI_TransmitReceive+0x82>
 800782a:	887b      	ldrh	r3, [r7, #2]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d103      	bne.n	8007838 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007836:	e14e      	b.n	8007ad6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800783e:	b2db      	uxtb	r3, r3
 8007840:	2b04      	cmp	r3, #4
 8007842:	d003      	beq.n	800784c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2205      	movs	r2, #5
 8007848:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	887a      	ldrh	r2, [r7, #2]
 800785c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	887a      	ldrh	r2, [r7, #2]
 8007862:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	887a      	ldrh	r2, [r7, #2]
 800786e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	887a      	ldrh	r2, [r7, #2]
 8007874:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800788c:	2b40      	cmp	r3, #64	; 0x40
 800788e:	d007      	beq.n	80078a0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800789e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078a8:	d178      	bne.n	800799c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d002      	beq.n	80078b8 <HAL_SPI_TransmitReceive+0x10a>
 80078b2:	8b7b      	ldrh	r3, [r7, #26]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d166      	bne.n	8007986 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078bc:	881a      	ldrh	r2, [r3, #0]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c8:	1c9a      	adds	r2, r3, #2
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	3b01      	subs	r3, #1
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078dc:	e053      	b.n	8007986 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f003 0302 	and.w	r3, r3, #2
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d11b      	bne.n	8007924 <HAL_SPI_TransmitReceive+0x176>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d016      	beq.n	8007924 <HAL_SPI_TransmitReceive+0x176>
 80078f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d113      	bne.n	8007924 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007900:	881a      	ldrh	r2, [r3, #0]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790c:	1c9a      	adds	r2, r3, #2
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007916:	b29b      	uxth	r3, r3
 8007918:	3b01      	subs	r3, #1
 800791a:	b29a      	uxth	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007920:	2300      	movs	r3, #0
 8007922:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b01      	cmp	r3, #1
 8007930:	d119      	bne.n	8007966 <HAL_SPI_TransmitReceive+0x1b8>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007936:	b29b      	uxth	r3, r3
 8007938:	2b00      	cmp	r3, #0
 800793a:	d014      	beq.n	8007966 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68da      	ldr	r2, [r3, #12]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007946:	b292      	uxth	r2, r2
 8007948:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794e:	1c9a      	adds	r2, r3, #2
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007958:	b29b      	uxth	r3, r3
 800795a:	3b01      	subs	r3, #1
 800795c:	b29a      	uxth	r2, r3
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007962:	2301      	movs	r3, #1
 8007964:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007966:	f7fc fee3 	bl	8004730 <HAL_GetTick>
 800796a:	4602      	mov	r2, r0
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007972:	429a      	cmp	r2, r3
 8007974:	d807      	bhi.n	8007986 <HAL_SPI_TransmitReceive+0x1d8>
 8007976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800797c:	d003      	beq.n	8007986 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800797e:	2303      	movs	r3, #3
 8007980:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007984:	e0a7      	b.n	8007ad6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800798a:	b29b      	uxth	r3, r3
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1a6      	bne.n	80078de <HAL_SPI_TransmitReceive+0x130>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007994:	b29b      	uxth	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1a1      	bne.n	80078de <HAL_SPI_TransmitReceive+0x130>
 800799a:	e07c      	b.n	8007a96 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d002      	beq.n	80079aa <HAL_SPI_TransmitReceive+0x1fc>
 80079a4:	8b7b      	ldrh	r3, [r7, #26]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d16b      	bne.n	8007a82 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	330c      	adds	r3, #12
 80079b4:	7812      	ldrb	r2, [r2, #0]
 80079b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079bc:	1c5a      	adds	r2, r3, #1
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	3b01      	subs	r3, #1
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079d0:	e057      	b.n	8007a82 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f003 0302 	and.w	r3, r3, #2
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d11c      	bne.n	8007a1a <HAL_SPI_TransmitReceive+0x26c>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d017      	beq.n	8007a1a <HAL_SPI_TransmitReceive+0x26c>
 80079ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d114      	bne.n	8007a1a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	330c      	adds	r3, #12
 80079fa:	7812      	ldrb	r2, [r2, #0]
 80079fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a02:	1c5a      	adds	r2, r3, #1
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a16:	2300      	movs	r3, #0
 8007a18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d119      	bne.n	8007a5c <HAL_SPI_TransmitReceive+0x2ae>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d014      	beq.n	8007a5c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68da      	ldr	r2, [r3, #12]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3c:	b2d2      	uxtb	r2, r2
 8007a3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a44:	1c5a      	adds	r2, r3, #1
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	3b01      	subs	r3, #1
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007a5c:	f7fc fe68 	bl	8004730 <HAL_GetTick>
 8007a60:	4602      	mov	r2, r0
 8007a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d803      	bhi.n	8007a74 <HAL_SPI_TransmitReceive+0x2c6>
 8007a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a72:	d102      	bne.n	8007a7a <HAL_SPI_TransmitReceive+0x2cc>
 8007a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d103      	bne.n	8007a82 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007a80:	e029      	b.n	8007ad6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1a2      	bne.n	80079d2 <HAL_SPI_TransmitReceive+0x224>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d19d      	bne.n	80079d2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f000 f8b2 	bl	8007c04 <SPI_EndRxTxTransaction>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d006      	beq.n	8007ab4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2220      	movs	r2, #32
 8007ab0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007ab2:	e010      	b.n	8007ad6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10b      	bne.n	8007ad4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007abc:	2300      	movs	r3, #0
 8007abe:	617b      	str	r3, [r7, #20]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	617b      	str	r3, [r7, #20]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	617b      	str	r3, [r7, #20]
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	e000      	b.n	8007ad6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007ad4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007ae6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3730      	adds	r7, #48	; 0x30
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
	...

08007af4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b088      	sub	sp, #32
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	603b      	str	r3, [r7, #0]
 8007b00:	4613      	mov	r3, r2
 8007b02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b04:	f7fc fe14 	bl	8004730 <HAL_GetTick>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0c:	1a9b      	subs	r3, r3, r2
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	4413      	add	r3, r2
 8007b12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b14:	f7fc fe0c 	bl	8004730 <HAL_GetTick>
 8007b18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b1a:	4b39      	ldr	r3, [pc, #228]	; (8007c00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	015b      	lsls	r3, r3, #5
 8007b20:	0d1b      	lsrs	r3, r3, #20
 8007b22:	69fa      	ldr	r2, [r7, #28]
 8007b24:	fb02 f303 	mul.w	r3, r2, r3
 8007b28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b2a:	e054      	b.n	8007bd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b32:	d050      	beq.n	8007bd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b34:	f7fc fdfc 	bl	8004730 <HAL_GetTick>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	69fa      	ldr	r2, [r7, #28]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d902      	bls.n	8007b4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d13d      	bne.n	8007bc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	685a      	ldr	r2, [r3, #4]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b62:	d111      	bne.n	8007b88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b6c:	d004      	beq.n	8007b78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b76:	d107      	bne.n	8007b88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b90:	d10f      	bne.n	8007bb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ba0:	601a      	str	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e017      	b.n	8007bf6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d101      	bne.n	8007bd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	689a      	ldr	r2, [r3, #8]
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	4013      	ands	r3, r2
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	bf0c      	ite	eq
 8007be6:	2301      	moveq	r3, #1
 8007be8:	2300      	movne	r3, #0
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	461a      	mov	r2, r3
 8007bee:	79fb      	ldrb	r3, [r7, #7]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d19b      	bne.n	8007b2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3720      	adds	r7, #32
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	20000004 	.word	0x20000004

08007c04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b088      	sub	sp, #32
 8007c08:	af02      	add	r7, sp, #8
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007c10:	4b1b      	ldr	r3, [pc, #108]	; (8007c80 <SPI_EndRxTxTransaction+0x7c>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a1b      	ldr	r2, [pc, #108]	; (8007c84 <SPI_EndRxTxTransaction+0x80>)
 8007c16:	fba2 2303 	umull	r2, r3, r2, r3
 8007c1a:	0d5b      	lsrs	r3, r3, #21
 8007c1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c20:	fb02 f303 	mul.w	r3, r2, r3
 8007c24:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c2e:	d112      	bne.n	8007c56 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2200      	movs	r2, #0
 8007c38:	2180      	movs	r1, #128	; 0x80
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f7ff ff5a 	bl	8007af4 <SPI_WaitFlagStateUntilTimeout>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d016      	beq.n	8007c74 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c4a:	f043 0220 	orr.w	r2, r3, #32
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e00f      	b.n	8007c76 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00a      	beq.n	8007c72 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c6c:	2b80      	cmp	r3, #128	; 0x80
 8007c6e:	d0f2      	beq.n	8007c56 <SPI_EndRxTxTransaction+0x52>
 8007c70:	e000      	b.n	8007c74 <SPI_EndRxTxTransaction+0x70>
        break;
 8007c72:	bf00      	nop
  }

  return HAL_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3718      	adds	r7, #24
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	20000004 	.word	0x20000004
 8007c84:	165e9f81 	.word	0x165e9f81

08007c88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d101      	bne.n	8007c9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e041      	b.n	8007d1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d106      	bne.n	8007cb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f7fb fc22 	bl	80034f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2202      	movs	r2, #2
 8007cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	3304      	adds	r3, #4
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	4610      	mov	r0, r2
 8007cc8:	f000 fd32 	bl	8008730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
	...

08007d28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d001      	beq.n	8007d40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e04e      	b.n	8007dde <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2202      	movs	r2, #2
 8007d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68da      	ldr	r2, [r3, #12]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f042 0201 	orr.w	r2, r2, #1
 8007d56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a23      	ldr	r2, [pc, #140]	; (8007dec <HAL_TIM_Base_Start_IT+0xc4>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d022      	beq.n	8007da8 <HAL_TIM_Base_Start_IT+0x80>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d6a:	d01d      	beq.n	8007da8 <HAL_TIM_Base_Start_IT+0x80>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a1f      	ldr	r2, [pc, #124]	; (8007df0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d018      	beq.n	8007da8 <HAL_TIM_Base_Start_IT+0x80>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a1e      	ldr	r2, [pc, #120]	; (8007df4 <HAL_TIM_Base_Start_IT+0xcc>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d013      	beq.n	8007da8 <HAL_TIM_Base_Start_IT+0x80>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a1c      	ldr	r2, [pc, #112]	; (8007df8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d00e      	beq.n	8007da8 <HAL_TIM_Base_Start_IT+0x80>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a1b      	ldr	r2, [pc, #108]	; (8007dfc <HAL_TIM_Base_Start_IT+0xd4>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d009      	beq.n	8007da8 <HAL_TIM_Base_Start_IT+0x80>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a19      	ldr	r2, [pc, #100]	; (8007e00 <HAL_TIM_Base_Start_IT+0xd8>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d004      	beq.n	8007da8 <HAL_TIM_Base_Start_IT+0x80>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a18      	ldr	r2, [pc, #96]	; (8007e04 <HAL_TIM_Base_Start_IT+0xdc>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d111      	bne.n	8007dcc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f003 0307 	and.w	r3, r3, #7
 8007db2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2b06      	cmp	r3, #6
 8007db8:	d010      	beq.n	8007ddc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f042 0201 	orr.w	r2, r2, #1
 8007dc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dca:	e007      	b.n	8007ddc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f042 0201 	orr.w	r2, r2, #1
 8007dda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3714      	adds	r7, #20
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	40010000 	.word	0x40010000
 8007df0:	40000400 	.word	0x40000400
 8007df4:	40000800 	.word	0x40000800
 8007df8:	40000c00 	.word	0x40000c00
 8007dfc:	40010400 	.word	0x40010400
 8007e00:	40014000 	.word	0x40014000
 8007e04:	40001800 	.word	0x40001800

08007e08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e041      	b.n	8007e9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d106      	bne.n	8007e34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7fb fbf0 	bl	8003614 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2202      	movs	r2, #2
 8007e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	3304      	adds	r3, #4
 8007e44:	4619      	mov	r1, r3
 8007e46:	4610      	mov	r0, r2
 8007e48:	f000 fc72 	bl	8008730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
	...

08007ea8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d109      	bne.n	8007ecc <HAL_TIM_PWM_Start+0x24>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	bf14      	ite	ne
 8007ec4:	2301      	movne	r3, #1
 8007ec6:	2300      	moveq	r3, #0
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	e022      	b.n	8007f12 <HAL_TIM_PWM_Start+0x6a>
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	2b04      	cmp	r3, #4
 8007ed0:	d109      	bne.n	8007ee6 <HAL_TIM_PWM_Start+0x3e>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	bf14      	ite	ne
 8007ede:	2301      	movne	r3, #1
 8007ee0:	2300      	moveq	r3, #0
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	e015      	b.n	8007f12 <HAL_TIM_PWM_Start+0x6a>
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	2b08      	cmp	r3, #8
 8007eea:	d109      	bne.n	8007f00 <HAL_TIM_PWM_Start+0x58>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	bf14      	ite	ne
 8007ef8:	2301      	movne	r3, #1
 8007efa:	2300      	moveq	r3, #0
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	e008      	b.n	8007f12 <HAL_TIM_PWM_Start+0x6a>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	bf14      	ite	ne
 8007f0c:	2301      	movne	r3, #1
 8007f0e:	2300      	moveq	r3, #0
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d001      	beq.n	8007f1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e07c      	b.n	8008014 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d104      	bne.n	8007f2a <HAL_TIM_PWM_Start+0x82>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2202      	movs	r2, #2
 8007f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f28:	e013      	b.n	8007f52 <HAL_TIM_PWM_Start+0xaa>
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	2b04      	cmp	r3, #4
 8007f2e:	d104      	bne.n	8007f3a <HAL_TIM_PWM_Start+0x92>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2202      	movs	r2, #2
 8007f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f38:	e00b      	b.n	8007f52 <HAL_TIM_PWM_Start+0xaa>
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	2b08      	cmp	r3, #8
 8007f3e:	d104      	bne.n	8007f4a <HAL_TIM_PWM_Start+0xa2>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2202      	movs	r2, #2
 8007f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f48:	e003      	b.n	8007f52 <HAL_TIM_PWM_Start+0xaa>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2201      	movs	r2, #1
 8007f58:	6839      	ldr	r1, [r7, #0]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f000 fed2 	bl	8008d04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a2d      	ldr	r2, [pc, #180]	; (800801c <HAL_TIM_PWM_Start+0x174>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d004      	beq.n	8007f74 <HAL_TIM_PWM_Start+0xcc>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a2c      	ldr	r2, [pc, #176]	; (8008020 <HAL_TIM_PWM_Start+0x178>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d101      	bne.n	8007f78 <HAL_TIM_PWM_Start+0xd0>
 8007f74:	2301      	movs	r3, #1
 8007f76:	e000      	b.n	8007f7a <HAL_TIM_PWM_Start+0xd2>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d007      	beq.n	8007f8e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a22      	ldr	r2, [pc, #136]	; (800801c <HAL_TIM_PWM_Start+0x174>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d022      	beq.n	8007fde <HAL_TIM_PWM_Start+0x136>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fa0:	d01d      	beq.n	8007fde <HAL_TIM_PWM_Start+0x136>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a1f      	ldr	r2, [pc, #124]	; (8008024 <HAL_TIM_PWM_Start+0x17c>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d018      	beq.n	8007fde <HAL_TIM_PWM_Start+0x136>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a1d      	ldr	r2, [pc, #116]	; (8008028 <HAL_TIM_PWM_Start+0x180>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d013      	beq.n	8007fde <HAL_TIM_PWM_Start+0x136>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a1c      	ldr	r2, [pc, #112]	; (800802c <HAL_TIM_PWM_Start+0x184>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d00e      	beq.n	8007fde <HAL_TIM_PWM_Start+0x136>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a16      	ldr	r2, [pc, #88]	; (8008020 <HAL_TIM_PWM_Start+0x178>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d009      	beq.n	8007fde <HAL_TIM_PWM_Start+0x136>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a18      	ldr	r2, [pc, #96]	; (8008030 <HAL_TIM_PWM_Start+0x188>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d004      	beq.n	8007fde <HAL_TIM_PWM_Start+0x136>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a16      	ldr	r2, [pc, #88]	; (8008034 <HAL_TIM_PWM_Start+0x18c>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d111      	bne.n	8008002 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	f003 0307 	and.w	r3, r3, #7
 8007fe8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2b06      	cmp	r3, #6
 8007fee:	d010      	beq.n	8008012 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f042 0201 	orr.w	r2, r2, #1
 8007ffe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008000:	e007      	b.n	8008012 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f042 0201 	orr.w	r2, r2, #1
 8008010:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	40010000 	.word	0x40010000
 8008020:	40010400 	.word	0x40010400
 8008024:	40000400 	.word	0x40000400
 8008028:	40000800 	.word	0x40000800
 800802c:	40000c00 	.word	0x40000c00
 8008030:	40014000 	.word	0x40014000
 8008034:	40001800 	.word	0x40001800

08008038 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2200      	movs	r2, #0
 8008048:	6839      	ldr	r1, [r7, #0]
 800804a:	4618      	mov	r0, r3
 800804c:	f000 fe5a 	bl	8008d04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a2e      	ldr	r2, [pc, #184]	; (8008110 <HAL_TIM_PWM_Stop+0xd8>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d004      	beq.n	8008064 <HAL_TIM_PWM_Stop+0x2c>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a2d      	ldr	r2, [pc, #180]	; (8008114 <HAL_TIM_PWM_Stop+0xdc>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d101      	bne.n	8008068 <HAL_TIM_PWM_Stop+0x30>
 8008064:	2301      	movs	r3, #1
 8008066:	e000      	b.n	800806a <HAL_TIM_PWM_Stop+0x32>
 8008068:	2300      	movs	r3, #0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d017      	beq.n	800809e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	6a1a      	ldr	r2, [r3, #32]
 8008074:	f241 1311 	movw	r3, #4369	; 0x1111
 8008078:	4013      	ands	r3, r2
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10f      	bne.n	800809e <HAL_TIM_PWM_Stop+0x66>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6a1a      	ldr	r2, [r3, #32]
 8008084:	f240 4344 	movw	r3, #1092	; 0x444
 8008088:	4013      	ands	r3, r2
 800808a:	2b00      	cmp	r3, #0
 800808c:	d107      	bne.n	800809e <HAL_TIM_PWM_Stop+0x66>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800809c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	6a1a      	ldr	r2, [r3, #32]
 80080a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80080a8:	4013      	ands	r3, r2
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10f      	bne.n	80080ce <HAL_TIM_PWM_Stop+0x96>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	6a1a      	ldr	r2, [r3, #32]
 80080b4:	f240 4344 	movw	r3, #1092	; 0x444
 80080b8:	4013      	ands	r3, r2
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d107      	bne.n	80080ce <HAL_TIM_PWM_Stop+0x96>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f022 0201 	bic.w	r2, r2, #1
 80080cc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d104      	bne.n	80080de <HAL_TIM_PWM_Stop+0xa6>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080dc:	e013      	b.n	8008106 <HAL_TIM_PWM_Stop+0xce>
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2b04      	cmp	r3, #4
 80080e2:	d104      	bne.n	80080ee <HAL_TIM_PWM_Stop+0xb6>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080ec:	e00b      	b.n	8008106 <HAL_TIM_PWM_Stop+0xce>
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	2b08      	cmp	r3, #8
 80080f2:	d104      	bne.n	80080fe <HAL_TIM_PWM_Stop+0xc6>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080fc:	e003      	b.n	8008106 <HAL_TIM_PWM_Stop+0xce>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	40010000 	.word	0x40010000
 8008114:	40010400 	.word	0x40010400

08008118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	2b02      	cmp	r3, #2
 800812c:	d122      	bne.n	8008174 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	f003 0302 	and.w	r3, r3, #2
 8008138:	2b02      	cmp	r3, #2
 800813a:	d11b      	bne.n	8008174 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f06f 0202 	mvn.w	r2, #2
 8008144:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	f003 0303 	and.w	r3, r3, #3
 8008156:	2b00      	cmp	r3, #0
 8008158:	d003      	beq.n	8008162 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fa77 	bl	800864e <HAL_TIM_IC_CaptureCallback>
 8008160:	e005      	b.n	800816e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fa69 	bl	800863a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 fa7a 	bl	8008662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	f003 0304 	and.w	r3, r3, #4
 800817e:	2b04      	cmp	r3, #4
 8008180:	d122      	bne.n	80081c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	f003 0304 	and.w	r3, r3, #4
 800818c:	2b04      	cmp	r3, #4
 800818e:	d11b      	bne.n	80081c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f06f 0204 	mvn.w	r2, #4
 8008198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2202      	movs	r2, #2
 800819e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d003      	beq.n	80081b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fa4d 	bl	800864e <HAL_TIM_IC_CaptureCallback>
 80081b4:	e005      	b.n	80081c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fa3f 	bl	800863a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fa50 	bl	8008662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	f003 0308 	and.w	r3, r3, #8
 80081d2:	2b08      	cmp	r3, #8
 80081d4:	d122      	bne.n	800821c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	f003 0308 	and.w	r3, r3, #8
 80081e0:	2b08      	cmp	r3, #8
 80081e2:	d11b      	bne.n	800821c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f06f 0208 	mvn.w	r2, #8
 80081ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2204      	movs	r2, #4
 80081f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	69db      	ldr	r3, [r3, #28]
 80081fa:	f003 0303 	and.w	r3, r3, #3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d003      	beq.n	800820a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 fa23 	bl	800864e <HAL_TIM_IC_CaptureCallback>
 8008208:	e005      	b.n	8008216 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fa15 	bl	800863a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 fa26 	bl	8008662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	f003 0310 	and.w	r3, r3, #16
 8008226:	2b10      	cmp	r3, #16
 8008228:	d122      	bne.n	8008270 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	f003 0310 	and.w	r3, r3, #16
 8008234:	2b10      	cmp	r3, #16
 8008236:	d11b      	bne.n	8008270 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f06f 0210 	mvn.w	r2, #16
 8008240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2208      	movs	r2, #8
 8008246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	69db      	ldr	r3, [r3, #28]
 800824e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008252:	2b00      	cmp	r3, #0
 8008254:	d003      	beq.n	800825e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f9f9 	bl	800864e <HAL_TIM_IC_CaptureCallback>
 800825c:	e005      	b.n	800826a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f9eb 	bl	800863a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f9fc 	bl	8008662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	f003 0301 	and.w	r3, r3, #1
 800827a:	2b01      	cmp	r3, #1
 800827c:	d10e      	bne.n	800829c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	f003 0301 	and.w	r3, r3, #1
 8008288:	2b01      	cmp	r3, #1
 800828a:	d107      	bne.n	800829c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f06f 0201 	mvn.w	r2, #1
 8008294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f7fb f80e 	bl	80032b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082a6:	2b80      	cmp	r3, #128	; 0x80
 80082a8:	d10e      	bne.n	80082c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082b4:	2b80      	cmp	r3, #128	; 0x80
 80082b6:	d107      	bne.n	80082c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80082c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fe1c 	bl	8008f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d2:	2b40      	cmp	r3, #64	; 0x40
 80082d4:	d10e      	bne.n	80082f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e0:	2b40      	cmp	r3, #64	; 0x40
 80082e2:	d107      	bne.n	80082f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f9c1 	bl	8008676 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	f003 0320 	and.w	r3, r3, #32
 80082fe:	2b20      	cmp	r3, #32
 8008300:	d10e      	bne.n	8008320 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	f003 0320 	and.w	r3, r3, #32
 800830c:	2b20      	cmp	r3, #32
 800830e:	d107      	bne.n	8008320 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f06f 0220 	mvn.w	r2, #32
 8008318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fde6 	bl	8008eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008320:	bf00      	nop
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008334:	2300      	movs	r3, #0
 8008336:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800833e:	2b01      	cmp	r3, #1
 8008340:	d101      	bne.n	8008346 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008342:	2302      	movs	r3, #2
 8008344:	e0ae      	b.n	80084a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2201      	movs	r2, #1
 800834a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2b0c      	cmp	r3, #12
 8008352:	f200 809f 	bhi.w	8008494 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008356:	a201      	add	r2, pc, #4	; (adr r2, 800835c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835c:	08008391 	.word	0x08008391
 8008360:	08008495 	.word	0x08008495
 8008364:	08008495 	.word	0x08008495
 8008368:	08008495 	.word	0x08008495
 800836c:	080083d1 	.word	0x080083d1
 8008370:	08008495 	.word	0x08008495
 8008374:	08008495 	.word	0x08008495
 8008378:	08008495 	.word	0x08008495
 800837c:	08008413 	.word	0x08008413
 8008380:	08008495 	.word	0x08008495
 8008384:	08008495 	.word	0x08008495
 8008388:	08008495 	.word	0x08008495
 800838c:	08008453 	.word	0x08008453
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68b9      	ldr	r1, [r7, #8]
 8008396:	4618      	mov	r0, r3
 8008398:	f000 fa6a 	bl	8008870 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	699a      	ldr	r2, [r3, #24]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f042 0208 	orr.w	r2, r2, #8
 80083aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	699a      	ldr	r2, [r3, #24]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f022 0204 	bic.w	r2, r2, #4
 80083ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6999      	ldr	r1, [r3, #24]
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	691a      	ldr	r2, [r3, #16]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	430a      	orrs	r2, r1
 80083cc:	619a      	str	r2, [r3, #24]
      break;
 80083ce:	e064      	b.n	800849a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68b9      	ldr	r1, [r7, #8]
 80083d6:	4618      	mov	r0, r3
 80083d8:	f000 faba 	bl	8008950 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	699a      	ldr	r2, [r3, #24]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	699a      	ldr	r2, [r3, #24]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	6999      	ldr	r1, [r3, #24]
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	021a      	lsls	r2, r3, #8
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	430a      	orrs	r2, r1
 800840e:	619a      	str	r2, [r3, #24]
      break;
 8008410:	e043      	b.n	800849a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68b9      	ldr	r1, [r7, #8]
 8008418:	4618      	mov	r0, r3
 800841a:	f000 fb0f 	bl	8008a3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	69da      	ldr	r2, [r3, #28]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f042 0208 	orr.w	r2, r2, #8
 800842c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	69da      	ldr	r2, [r3, #28]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f022 0204 	bic.w	r2, r2, #4
 800843c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	69d9      	ldr	r1, [r3, #28]
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	691a      	ldr	r2, [r3, #16]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	430a      	orrs	r2, r1
 800844e:	61da      	str	r2, [r3, #28]
      break;
 8008450:	e023      	b.n	800849a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68b9      	ldr	r1, [r7, #8]
 8008458:	4618      	mov	r0, r3
 800845a:	f000 fb63 	bl	8008b24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	69da      	ldr	r2, [r3, #28]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800846c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	69da      	ldr	r2, [r3, #28]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800847c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	69d9      	ldr	r1, [r3, #28]
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	021a      	lsls	r2, r3, #8
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	430a      	orrs	r2, r1
 8008490:	61da      	str	r2, [r3, #28]
      break;
 8008492:	e002      	b.n	800849a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	75fb      	strb	r3, [r7, #23]
      break;
 8008498:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3718      	adds	r7, #24
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084b6:	2300      	movs	r3, #0
 80084b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d101      	bne.n	80084c8 <HAL_TIM_ConfigClockSource+0x1c>
 80084c4:	2302      	movs	r3, #2
 80084c6:	e0b4      	b.n	8008632 <HAL_TIM_ConfigClockSource+0x186>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2202      	movs	r2, #2
 80084d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80084e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68ba      	ldr	r2, [r7, #8]
 80084f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008500:	d03e      	beq.n	8008580 <HAL_TIM_ConfigClockSource+0xd4>
 8008502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008506:	f200 8087 	bhi.w	8008618 <HAL_TIM_ConfigClockSource+0x16c>
 800850a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800850e:	f000 8086 	beq.w	800861e <HAL_TIM_ConfigClockSource+0x172>
 8008512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008516:	d87f      	bhi.n	8008618 <HAL_TIM_ConfigClockSource+0x16c>
 8008518:	2b70      	cmp	r3, #112	; 0x70
 800851a:	d01a      	beq.n	8008552 <HAL_TIM_ConfigClockSource+0xa6>
 800851c:	2b70      	cmp	r3, #112	; 0x70
 800851e:	d87b      	bhi.n	8008618 <HAL_TIM_ConfigClockSource+0x16c>
 8008520:	2b60      	cmp	r3, #96	; 0x60
 8008522:	d050      	beq.n	80085c6 <HAL_TIM_ConfigClockSource+0x11a>
 8008524:	2b60      	cmp	r3, #96	; 0x60
 8008526:	d877      	bhi.n	8008618 <HAL_TIM_ConfigClockSource+0x16c>
 8008528:	2b50      	cmp	r3, #80	; 0x50
 800852a:	d03c      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0xfa>
 800852c:	2b50      	cmp	r3, #80	; 0x50
 800852e:	d873      	bhi.n	8008618 <HAL_TIM_ConfigClockSource+0x16c>
 8008530:	2b40      	cmp	r3, #64	; 0x40
 8008532:	d058      	beq.n	80085e6 <HAL_TIM_ConfigClockSource+0x13a>
 8008534:	2b40      	cmp	r3, #64	; 0x40
 8008536:	d86f      	bhi.n	8008618 <HAL_TIM_ConfigClockSource+0x16c>
 8008538:	2b30      	cmp	r3, #48	; 0x30
 800853a:	d064      	beq.n	8008606 <HAL_TIM_ConfigClockSource+0x15a>
 800853c:	2b30      	cmp	r3, #48	; 0x30
 800853e:	d86b      	bhi.n	8008618 <HAL_TIM_ConfigClockSource+0x16c>
 8008540:	2b20      	cmp	r3, #32
 8008542:	d060      	beq.n	8008606 <HAL_TIM_ConfigClockSource+0x15a>
 8008544:	2b20      	cmp	r3, #32
 8008546:	d867      	bhi.n	8008618 <HAL_TIM_ConfigClockSource+0x16c>
 8008548:	2b00      	cmp	r3, #0
 800854a:	d05c      	beq.n	8008606 <HAL_TIM_ConfigClockSource+0x15a>
 800854c:	2b10      	cmp	r3, #16
 800854e:	d05a      	beq.n	8008606 <HAL_TIM_ConfigClockSource+0x15a>
 8008550:	e062      	b.n	8008618 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6818      	ldr	r0, [r3, #0]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	6899      	ldr	r1, [r3, #8]
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	685a      	ldr	r2, [r3, #4]
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	f000 fbaf 	bl	8008cc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008574:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	609a      	str	r2, [r3, #8]
      break;
 800857e:	e04f      	b.n	8008620 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6818      	ldr	r0, [r3, #0]
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	6899      	ldr	r1, [r3, #8]
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	685a      	ldr	r2, [r3, #4]
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	f000 fb98 	bl	8008cc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	689a      	ldr	r2, [r3, #8]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085a2:	609a      	str	r2, [r3, #8]
      break;
 80085a4:	e03c      	b.n	8008620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6818      	ldr	r0, [r3, #0]
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	6859      	ldr	r1, [r3, #4]
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	461a      	mov	r2, r3
 80085b4:	f000 fb0c 	bl	8008bd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2150      	movs	r1, #80	; 0x50
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 fb65 	bl	8008c8e <TIM_ITRx_SetConfig>
      break;
 80085c4:	e02c      	b.n	8008620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6818      	ldr	r0, [r3, #0]
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	6859      	ldr	r1, [r3, #4]
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	461a      	mov	r2, r3
 80085d4:	f000 fb2b 	bl	8008c2e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2160      	movs	r1, #96	; 0x60
 80085de:	4618      	mov	r0, r3
 80085e0:	f000 fb55 	bl	8008c8e <TIM_ITRx_SetConfig>
      break;
 80085e4:	e01c      	b.n	8008620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6818      	ldr	r0, [r3, #0]
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	6859      	ldr	r1, [r3, #4]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	461a      	mov	r2, r3
 80085f4:	f000 faec 	bl	8008bd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2140      	movs	r1, #64	; 0x40
 80085fe:	4618      	mov	r0, r3
 8008600:	f000 fb45 	bl	8008c8e <TIM_ITRx_SetConfig>
      break;
 8008604:	e00c      	b.n	8008620 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4619      	mov	r1, r3
 8008610:	4610      	mov	r0, r2
 8008612:	f000 fb3c 	bl	8008c8e <TIM_ITRx_SetConfig>
      break;
 8008616:	e003      	b.n	8008620 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	73fb      	strb	r3, [r7, #15]
      break;
 800861c:	e000      	b.n	8008620 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800861e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008630:	7bfb      	ldrb	r3, [r7, #15]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800863a:	b480      	push	{r7}
 800863c:	b083      	sub	sp, #12
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008642:	bf00      	nop
 8008644:	370c      	adds	r7, #12
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr

0800864e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800864e:	b480      	push	{r7}
 8008650:	b083      	sub	sp, #12
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008656:	bf00      	nop
 8008658:	370c      	adds	r7, #12
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr

08008662 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008662:	b480      	push	{r7}
 8008664:	b083      	sub	sp, #12
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800866a:	bf00      	nop
 800866c:	370c      	adds	r7, #12
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008676:	b480      	push	{r7}
 8008678:	b083      	sub	sp, #12
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800867e:	bf00      	nop
 8008680:	370c      	adds	r7, #12
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr

0800868a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800868a:	b480      	push	{r7}
 800868c:	b083      	sub	sp, #12
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008692:	bf00      	nop
 8008694:	370c      	adds	r7, #12
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr

0800869e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b084      	sub	sp, #16
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086aa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d107      	bne.n	80086c6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2201      	movs	r2, #1
 80086ba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086c4:	e02a      	b.n	800871c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d107      	bne.n	80086e0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2202      	movs	r2, #2
 80086d4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2201      	movs	r2, #1
 80086da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086de:	e01d      	b.n	800871c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d107      	bne.n	80086fa <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2204      	movs	r2, #4
 80086ee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086f8:	e010      	b.n	800871c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	429a      	cmp	r2, r3
 8008702:	d107      	bne.n	8008714 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2208      	movs	r2, #8
 8008708:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008712:	e003      	b.n	800871c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	f7ff ffb4 	bl	800868a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2200      	movs	r2, #0
 8008726:	771a      	strb	r2, [r3, #28]
}
 8008728:	bf00      	nop
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a40      	ldr	r2, [pc, #256]	; (8008844 <TIM_Base_SetConfig+0x114>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d013      	beq.n	8008770 <TIM_Base_SetConfig+0x40>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800874e:	d00f      	beq.n	8008770 <TIM_Base_SetConfig+0x40>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a3d      	ldr	r2, [pc, #244]	; (8008848 <TIM_Base_SetConfig+0x118>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d00b      	beq.n	8008770 <TIM_Base_SetConfig+0x40>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a3c      	ldr	r2, [pc, #240]	; (800884c <TIM_Base_SetConfig+0x11c>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d007      	beq.n	8008770 <TIM_Base_SetConfig+0x40>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a3b      	ldr	r2, [pc, #236]	; (8008850 <TIM_Base_SetConfig+0x120>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d003      	beq.n	8008770 <TIM_Base_SetConfig+0x40>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a3a      	ldr	r2, [pc, #232]	; (8008854 <TIM_Base_SetConfig+0x124>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d108      	bne.n	8008782 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	4313      	orrs	r3, r2
 8008780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a2f      	ldr	r2, [pc, #188]	; (8008844 <TIM_Base_SetConfig+0x114>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d02b      	beq.n	80087e2 <TIM_Base_SetConfig+0xb2>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008790:	d027      	beq.n	80087e2 <TIM_Base_SetConfig+0xb2>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a2c      	ldr	r2, [pc, #176]	; (8008848 <TIM_Base_SetConfig+0x118>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d023      	beq.n	80087e2 <TIM_Base_SetConfig+0xb2>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a2b      	ldr	r2, [pc, #172]	; (800884c <TIM_Base_SetConfig+0x11c>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d01f      	beq.n	80087e2 <TIM_Base_SetConfig+0xb2>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4a2a      	ldr	r2, [pc, #168]	; (8008850 <TIM_Base_SetConfig+0x120>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d01b      	beq.n	80087e2 <TIM_Base_SetConfig+0xb2>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4a29      	ldr	r2, [pc, #164]	; (8008854 <TIM_Base_SetConfig+0x124>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d017      	beq.n	80087e2 <TIM_Base_SetConfig+0xb2>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a28      	ldr	r2, [pc, #160]	; (8008858 <TIM_Base_SetConfig+0x128>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d013      	beq.n	80087e2 <TIM_Base_SetConfig+0xb2>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a27      	ldr	r2, [pc, #156]	; (800885c <TIM_Base_SetConfig+0x12c>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d00f      	beq.n	80087e2 <TIM_Base_SetConfig+0xb2>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a26      	ldr	r2, [pc, #152]	; (8008860 <TIM_Base_SetConfig+0x130>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d00b      	beq.n	80087e2 <TIM_Base_SetConfig+0xb2>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a25      	ldr	r2, [pc, #148]	; (8008864 <TIM_Base_SetConfig+0x134>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d007      	beq.n	80087e2 <TIM_Base_SetConfig+0xb2>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a24      	ldr	r2, [pc, #144]	; (8008868 <TIM_Base_SetConfig+0x138>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d003      	beq.n	80087e2 <TIM_Base_SetConfig+0xb2>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a23      	ldr	r2, [pc, #140]	; (800886c <TIM_Base_SetConfig+0x13c>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d108      	bne.n	80087f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	4313      	orrs	r3, r2
 8008800:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	689a      	ldr	r2, [r3, #8]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a0a      	ldr	r2, [pc, #40]	; (8008844 <TIM_Base_SetConfig+0x114>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d003      	beq.n	8008828 <TIM_Base_SetConfig+0xf8>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4a0c      	ldr	r2, [pc, #48]	; (8008854 <TIM_Base_SetConfig+0x124>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d103      	bne.n	8008830 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	691a      	ldr	r2, [r3, #16]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	615a      	str	r2, [r3, #20]
}
 8008836:	bf00      	nop
 8008838:	3714      	adds	r7, #20
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	40010000 	.word	0x40010000
 8008848:	40000400 	.word	0x40000400
 800884c:	40000800 	.word	0x40000800
 8008850:	40000c00 	.word	0x40000c00
 8008854:	40010400 	.word	0x40010400
 8008858:	40014000 	.word	0x40014000
 800885c:	40014400 	.word	0x40014400
 8008860:	40014800 	.word	0x40014800
 8008864:	40001800 	.word	0x40001800
 8008868:	40001c00 	.word	0x40001c00
 800886c:	40002000 	.word	0x40002000

08008870 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008870:	b480      	push	{r7}
 8008872:	b087      	sub	sp, #28
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	f023 0201 	bic.w	r2, r3, #1
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a1b      	ldr	r3, [r3, #32]
 800888a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	699b      	ldr	r3, [r3, #24]
 8008896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800889e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f023 0303 	bic.w	r3, r3, #3
 80088a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68fa      	ldr	r2, [r7, #12]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	f023 0302 	bic.w	r3, r3, #2
 80088b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	697a      	ldr	r2, [r7, #20]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a20      	ldr	r2, [pc, #128]	; (8008948 <TIM_OC1_SetConfig+0xd8>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d003      	beq.n	80088d4 <TIM_OC1_SetConfig+0x64>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a1f      	ldr	r2, [pc, #124]	; (800894c <TIM_OC1_SetConfig+0xdc>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d10c      	bne.n	80088ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	f023 0308 	bic.w	r3, r3, #8
 80088da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	697a      	ldr	r2, [r7, #20]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	f023 0304 	bic.w	r3, r3, #4
 80088ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4a15      	ldr	r2, [pc, #84]	; (8008948 <TIM_OC1_SetConfig+0xd8>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d003      	beq.n	80088fe <TIM_OC1_SetConfig+0x8e>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4a14      	ldr	r2, [pc, #80]	; (800894c <TIM_OC1_SetConfig+0xdc>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d111      	bne.n	8008922 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008904:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800890c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	695b      	ldr	r3, [r3, #20]
 8008912:	693a      	ldr	r2, [r7, #16]
 8008914:	4313      	orrs	r3, r2
 8008916:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	699b      	ldr	r3, [r3, #24]
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	4313      	orrs	r3, r2
 8008920:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	693a      	ldr	r2, [r7, #16]
 8008926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	68fa      	ldr	r2, [r7, #12]
 800892c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	685a      	ldr	r2, [r3, #4]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	697a      	ldr	r2, [r7, #20]
 800893a:	621a      	str	r2, [r3, #32]
}
 800893c:	bf00      	nop
 800893e:	371c      	adds	r7, #28
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr
 8008948:	40010000 	.word	0x40010000
 800894c:	40010400 	.word	0x40010400

08008950 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008950:	b480      	push	{r7}
 8008952:	b087      	sub	sp, #28
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	f023 0210 	bic.w	r2, r3, #16
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a1b      	ldr	r3, [r3, #32]
 800896a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	699b      	ldr	r3, [r3, #24]
 8008976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800897e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	021b      	lsls	r3, r3, #8
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	4313      	orrs	r3, r2
 8008992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	f023 0320 	bic.w	r3, r3, #32
 800899a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	011b      	lsls	r3, r3, #4
 80089a2:	697a      	ldr	r2, [r7, #20]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4a22      	ldr	r2, [pc, #136]	; (8008a34 <TIM_OC2_SetConfig+0xe4>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d003      	beq.n	80089b8 <TIM_OC2_SetConfig+0x68>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a21      	ldr	r2, [pc, #132]	; (8008a38 <TIM_OC2_SetConfig+0xe8>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d10d      	bne.n	80089d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	011b      	lsls	r3, r3, #4
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a17      	ldr	r2, [pc, #92]	; (8008a34 <TIM_OC2_SetConfig+0xe4>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d003      	beq.n	80089e4 <TIM_OC2_SetConfig+0x94>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4a16      	ldr	r2, [pc, #88]	; (8008a38 <TIM_OC2_SetConfig+0xe8>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d113      	bne.n	8008a0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	695b      	ldr	r3, [r3, #20]
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	693a      	ldr	r2, [r7, #16]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	699b      	ldr	r3, [r3, #24]
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	693a      	ldr	r2, [r7, #16]
 8008a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	685a      	ldr	r2, [r3, #4]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	621a      	str	r2, [r3, #32]
}
 8008a26:	bf00      	nop
 8008a28:	371c      	adds	r7, #28
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	40010000 	.word	0x40010000
 8008a38:	40010400 	.word	0x40010400

08008a3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b087      	sub	sp, #28
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a1b      	ldr	r3, [r3, #32]
 8008a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	69db      	ldr	r3, [r3, #28]
 8008a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f023 0303 	bic.w	r3, r3, #3
 8008a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	021b      	lsls	r3, r3, #8
 8008a8c:	697a      	ldr	r2, [r7, #20]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a21      	ldr	r2, [pc, #132]	; (8008b1c <TIM_OC3_SetConfig+0xe0>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d003      	beq.n	8008aa2 <TIM_OC3_SetConfig+0x66>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a20      	ldr	r2, [pc, #128]	; (8008b20 <TIM_OC3_SetConfig+0xe4>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d10d      	bne.n	8008abe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008aa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	021b      	lsls	r3, r3, #8
 8008ab0:	697a      	ldr	r2, [r7, #20]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a16      	ldr	r2, [pc, #88]	; (8008b1c <TIM_OC3_SetConfig+0xe0>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d003      	beq.n	8008ace <TIM_OC3_SetConfig+0x92>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a15      	ldr	r2, [pc, #84]	; (8008b20 <TIM_OC3_SetConfig+0xe4>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d113      	bne.n	8008af6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	011b      	lsls	r3, r3, #4
 8008ae4:	693a      	ldr	r2, [r7, #16]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	699b      	ldr	r3, [r3, #24]
 8008aee:	011b      	lsls	r3, r3, #4
 8008af0:	693a      	ldr	r2, [r7, #16]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	693a      	ldr	r2, [r7, #16]
 8008afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	685a      	ldr	r2, [r3, #4]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	697a      	ldr	r2, [r7, #20]
 8008b0e:	621a      	str	r2, [r3, #32]
}
 8008b10:	bf00      	nop
 8008b12:	371c      	adds	r7, #28
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	40010000 	.word	0x40010000
 8008b20:	40010400 	.word	0x40010400

08008b24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b087      	sub	sp, #28
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a1b      	ldr	r3, [r3, #32]
 8008b32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
 8008b3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	69db      	ldr	r3, [r3, #28]
 8008b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	021b      	lsls	r3, r3, #8
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	031b      	lsls	r3, r3, #12
 8008b76:	693a      	ldr	r2, [r7, #16]
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a12      	ldr	r2, [pc, #72]	; (8008bc8 <TIM_OC4_SetConfig+0xa4>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d003      	beq.n	8008b8c <TIM_OC4_SetConfig+0x68>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a11      	ldr	r2, [pc, #68]	; (8008bcc <TIM_OC4_SetConfig+0xa8>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d109      	bne.n	8008ba0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	695b      	ldr	r3, [r3, #20]
 8008b98:	019b      	lsls	r3, r3, #6
 8008b9a:	697a      	ldr	r2, [r7, #20]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	697a      	ldr	r2, [r7, #20]
 8008ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	685a      	ldr	r2, [r3, #4]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	693a      	ldr	r2, [r7, #16]
 8008bb8:	621a      	str	r2, [r3, #32]
}
 8008bba:	bf00      	nop
 8008bbc:	371c      	adds	r7, #28
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	40010000 	.word	0x40010000
 8008bcc:	40010400 	.word	0x40010400

08008bd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b087      	sub	sp, #28
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6a1b      	ldr	r3, [r3, #32]
 8008be0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6a1b      	ldr	r3, [r3, #32]
 8008be6:	f023 0201 	bic.w	r2, r3, #1
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	011b      	lsls	r3, r3, #4
 8008c00:	693a      	ldr	r2, [r7, #16]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	f023 030a 	bic.w	r3, r3, #10
 8008c0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c0e:	697a      	ldr	r2, [r7, #20]
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	693a      	ldr	r2, [r7, #16]
 8008c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	621a      	str	r2, [r3, #32]
}
 8008c22:	bf00      	nop
 8008c24:	371c      	adds	r7, #28
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr

08008c2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c2e:	b480      	push	{r7}
 8008c30:	b087      	sub	sp, #28
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	60f8      	str	r0, [r7, #12]
 8008c36:	60b9      	str	r1, [r7, #8]
 8008c38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6a1b      	ldr	r3, [r3, #32]
 8008c3e:	f023 0210 	bic.w	r2, r3, #16
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6a1b      	ldr	r3, [r3, #32]
 8008c50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	031b      	lsls	r3, r3, #12
 8008c5e:	697a      	ldr	r2, [r7, #20]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	011b      	lsls	r3, r3, #4
 8008c70:	693a      	ldr	r2, [r7, #16]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	621a      	str	r2, [r3, #32]
}
 8008c82:	bf00      	nop
 8008c84:	371c      	adds	r7, #28
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b085      	sub	sp, #20
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ca4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ca6:	683a      	ldr	r2, [r7, #0]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	f043 0307 	orr.w	r3, r3, #7
 8008cb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	609a      	str	r2, [r3, #8]
}
 8008cb8:	bf00      	nop
 8008cba:	3714      	adds	r7, #20
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b087      	sub	sp, #28
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
 8008cd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	021a      	lsls	r2, r3, #8
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	431a      	orrs	r2, r3
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	697a      	ldr	r2, [r7, #20]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	697a      	ldr	r2, [r7, #20]
 8008cf6:	609a      	str	r2, [r3, #8]
}
 8008cf8:	bf00      	nop
 8008cfa:	371c      	adds	r7, #28
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b087      	sub	sp, #28
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	f003 031f 	and.w	r3, r3, #31
 8008d16:	2201      	movs	r2, #1
 8008d18:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6a1a      	ldr	r2, [r3, #32]
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	43db      	mvns	r3, r3
 8008d26:	401a      	ands	r2, r3
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6a1a      	ldr	r2, [r3, #32]
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	f003 031f 	and.w	r3, r3, #31
 8008d36:	6879      	ldr	r1, [r7, #4]
 8008d38:	fa01 f303 	lsl.w	r3, r1, r3
 8008d3c:	431a      	orrs	r2, r3
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	621a      	str	r2, [r3, #32]
}
 8008d42:	bf00      	nop
 8008d44:	371c      	adds	r7, #28
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
	...

08008d50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d101      	bne.n	8008d68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d64:	2302      	movs	r3, #2
 8008d66:	e05a      	b.n	8008e1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2202      	movs	r2, #2
 8008d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a21      	ldr	r2, [pc, #132]	; (8008e2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d022      	beq.n	8008df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008db4:	d01d      	beq.n	8008df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a1d      	ldr	r2, [pc, #116]	; (8008e30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d018      	beq.n	8008df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a1b      	ldr	r2, [pc, #108]	; (8008e34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d013      	beq.n	8008df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a1a      	ldr	r2, [pc, #104]	; (8008e38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d00e      	beq.n	8008df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a18      	ldr	r2, [pc, #96]	; (8008e3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d009      	beq.n	8008df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a17      	ldr	r2, [pc, #92]	; (8008e40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d004      	beq.n	8008df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a15      	ldr	r2, [pc, #84]	; (8008e44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d10c      	bne.n	8008e0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008df8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68ba      	ldr	r2, [r7, #8]
 8008e0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3714      	adds	r7, #20
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	40010000 	.word	0x40010000
 8008e30:	40000400 	.word	0x40000400
 8008e34:	40000800 	.word	0x40000800
 8008e38:	40000c00 	.word	0x40000c00
 8008e3c:	40010400 	.word	0x40010400
 8008e40:	40014000 	.word	0x40014000
 8008e44:	40001800 	.word	0x40001800

08008e48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008e52:	2300      	movs	r3, #0
 8008e54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d101      	bne.n	8008e64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008e60:	2302      	movs	r3, #2
 8008e62:	e03d      	b.n	8008ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	4313      	orrs	r3, r2
 8008e78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	695b      	ldr	r3, [r3, #20]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	69db      	ldr	r3, [r3, #28]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d101      	bne.n	8008f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e03f      	b.n	8008fa6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d106      	bne.n	8008f40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f7fa fd00 	bl	8003940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2224      	movs	r2, #36	; 0x24
 8008f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68da      	ldr	r2, [r3, #12]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 fe23 	bl	8009ba4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	691a      	ldr	r2, [r3, #16]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	695a      	ldr	r2, [r3, #20]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68da      	ldr	r2, [r3, #12]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2220      	movs	r2, #32
 8008f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2220      	movs	r2, #32
 8008fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3708      	adds	r7, #8
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b08a      	sub	sp, #40	; 0x28
 8008fb2:	af02      	add	r7, sp, #8
 8008fb4:	60f8      	str	r0, [r7, #12]
 8008fb6:	60b9      	str	r1, [r7, #8]
 8008fb8:	603b      	str	r3, [r7, #0]
 8008fba:	4613      	mov	r3, r2
 8008fbc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	2b20      	cmp	r3, #32
 8008fcc:	d17c      	bne.n	80090c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d002      	beq.n	8008fda <HAL_UART_Transmit+0x2c>
 8008fd4:	88fb      	ldrh	r3, [r7, #6]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d101      	bne.n	8008fde <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e075      	b.n	80090ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d101      	bne.n	8008fec <HAL_UART_Transmit+0x3e>
 8008fe8:	2302      	movs	r3, #2
 8008fea:	e06e      	b.n	80090ca <HAL_UART_Transmit+0x11c>
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2221      	movs	r2, #33	; 0x21
 8008ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009002:	f7fb fb95 	bl	8004730 <HAL_GetTick>
 8009006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	88fa      	ldrh	r2, [r7, #6]
 800900c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	88fa      	ldrh	r2, [r7, #6]
 8009012:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800901c:	d108      	bne.n	8009030 <HAL_UART_Transmit+0x82>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d104      	bne.n	8009030 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009026:	2300      	movs	r3, #0
 8009028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	61bb      	str	r3, [r7, #24]
 800902e:	e003      	b.n	8009038 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009034:	2300      	movs	r3, #0
 8009036:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2200      	movs	r2, #0
 800903c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009040:	e02a      	b.n	8009098 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	2200      	movs	r2, #0
 800904a:	2180      	movs	r1, #128	; 0x80
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	f000 fb63 	bl	8009718 <UART_WaitOnFlagUntilTimeout>
 8009052:	4603      	mov	r3, r0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d001      	beq.n	800905c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009058:	2303      	movs	r3, #3
 800905a:	e036      	b.n	80090ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10b      	bne.n	800907a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	881b      	ldrh	r3, [r3, #0]
 8009066:	461a      	mov	r2, r3
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009070:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	3302      	adds	r3, #2
 8009076:	61bb      	str	r3, [r7, #24]
 8009078:	e007      	b.n	800908a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	781a      	ldrb	r2, [r3, #0]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	3301      	adds	r3, #1
 8009088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800908e:	b29b      	uxth	r3, r3
 8009090:	3b01      	subs	r3, #1
 8009092:	b29a      	uxth	r2, r3
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800909c:	b29b      	uxth	r3, r3
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1cf      	bne.n	8009042 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	9300      	str	r3, [sp, #0]
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	2200      	movs	r2, #0
 80090aa:	2140      	movs	r1, #64	; 0x40
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f000 fb33 	bl	8009718 <UART_WaitOnFlagUntilTimeout>
 80090b2:	4603      	mov	r3, r0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d001      	beq.n	80090bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80090b8:	2303      	movs	r3, #3
 80090ba:	e006      	b.n	80090ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2220      	movs	r2, #32
 80090c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	e000      	b.n	80090ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80090c8:	2302      	movs	r3, #2
  }
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3720      	adds	r7, #32
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80090d2:	b480      	push	{r7}
 80090d4:	b085      	sub	sp, #20
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	60f8      	str	r0, [r7, #12]
 80090da:	60b9      	str	r1, [r7, #8]
 80090dc:	4613      	mov	r3, r2
 80090de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	2b20      	cmp	r3, #32
 80090ea:	d130      	bne.n	800914e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d002      	beq.n	80090f8 <HAL_UART_Transmit_IT+0x26>
 80090f2:	88fb      	ldrh	r3, [r7, #6]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d101      	bne.n	80090fc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	e029      	b.n	8009150 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009102:	2b01      	cmp	r3, #1
 8009104:	d101      	bne.n	800910a <HAL_UART_Transmit_IT+0x38>
 8009106:	2302      	movs	r3, #2
 8009108:	e022      	b.n	8009150 <HAL_UART_Transmit_IT+0x7e>
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2201      	movs	r2, #1
 800910e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	68ba      	ldr	r2, [r7, #8]
 8009116:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	88fa      	ldrh	r2, [r7, #6]
 800911c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	88fa      	ldrh	r2, [r7, #6]
 8009122:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2221      	movs	r2, #33	; 0x21
 800912e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2200      	movs	r2, #0
 8009136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68da      	ldr	r2, [r3, #12]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009148:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800914a:	2300      	movs	r3, #0
 800914c:	e000      	b.n	8009150 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800914e:	2302      	movs	r3, #2
  }
}
 8009150:	4618      	mov	r0, r3
 8009152:	3714      	adds	r7, #20
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	4613      	mov	r3, r2
 8009168:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009170:	b2db      	uxtb	r3, r3
 8009172:	2b20      	cmp	r3, #32
 8009174:	d11d      	bne.n	80091b2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d002      	beq.n	8009182 <HAL_UART_Receive_IT+0x26>
 800917c:	88fb      	ldrh	r3, [r7, #6]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d101      	bne.n	8009186 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e016      	b.n	80091b4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800918c:	2b01      	cmp	r3, #1
 800918e:	d101      	bne.n	8009194 <HAL_UART_Receive_IT+0x38>
 8009190:	2302      	movs	r3, #2
 8009192:	e00f      	b.n	80091b4 <HAL_UART_Receive_IT+0x58>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2200      	movs	r2, #0
 80091a0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80091a2:	88fb      	ldrh	r3, [r7, #6]
 80091a4:	461a      	mov	r2, r3
 80091a6:	68b9      	ldr	r1, [r7, #8]
 80091a8:	68f8      	ldr	r0, [r7, #12]
 80091aa:	f000 fb23 	bl	80097f4 <UART_Start_Receive_IT>
 80091ae:	4603      	mov	r3, r0
 80091b0:	e000      	b.n	80091b4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80091b2:	2302      	movs	r3, #2
  }
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3710      	adds	r7, #16
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b0ba      	sub	sp, #232	; 0xe8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	695b      	ldr	r3, [r3, #20]
 80091de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80091e2:	2300      	movs	r3, #0
 80091e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80091e8:	2300      	movs	r3, #0
 80091ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80091ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091f2:	f003 030f 	and.w	r3, r3, #15
 80091f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80091fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10f      	bne.n	8009222 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009206:	f003 0320 	and.w	r3, r3, #32
 800920a:	2b00      	cmp	r3, #0
 800920c:	d009      	beq.n	8009222 <HAL_UART_IRQHandler+0x66>
 800920e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009212:	f003 0320 	and.w	r3, r3, #32
 8009216:	2b00      	cmp	r3, #0
 8009218:	d003      	beq.n	8009222 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 fc07 	bl	8009a2e <UART_Receive_IT>
      return;
 8009220:	e256      	b.n	80096d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009222:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009226:	2b00      	cmp	r3, #0
 8009228:	f000 80de 	beq.w	80093e8 <HAL_UART_IRQHandler+0x22c>
 800922c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009230:	f003 0301 	and.w	r3, r3, #1
 8009234:	2b00      	cmp	r3, #0
 8009236:	d106      	bne.n	8009246 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800923c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009240:	2b00      	cmp	r3, #0
 8009242:	f000 80d1 	beq.w	80093e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800924a:	f003 0301 	and.w	r3, r3, #1
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00b      	beq.n	800926a <HAL_UART_IRQHandler+0xae>
 8009252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800925a:	2b00      	cmp	r3, #0
 800925c:	d005      	beq.n	800926a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009262:	f043 0201 	orr.w	r2, r3, #1
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800926a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800926e:	f003 0304 	and.w	r3, r3, #4
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00b      	beq.n	800928e <HAL_UART_IRQHandler+0xd2>
 8009276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800927a:	f003 0301 	and.w	r3, r3, #1
 800927e:	2b00      	cmp	r3, #0
 8009280:	d005      	beq.n	800928e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009286:	f043 0202 	orr.w	r2, r3, #2
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800928e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009292:	f003 0302 	and.w	r3, r3, #2
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00b      	beq.n	80092b2 <HAL_UART_IRQHandler+0xf6>
 800929a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800929e:	f003 0301 	and.w	r3, r3, #1
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d005      	beq.n	80092b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092aa:	f043 0204 	orr.w	r2, r3, #4
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80092b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092b6:	f003 0308 	and.w	r3, r3, #8
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d011      	beq.n	80092e2 <HAL_UART_IRQHandler+0x126>
 80092be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092c2:	f003 0320 	and.w	r3, r3, #32
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d105      	bne.n	80092d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80092ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092ce:	f003 0301 	and.w	r3, r3, #1
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d005      	beq.n	80092e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092da:	f043 0208 	orr.w	r2, r3, #8
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	f000 81ed 	beq.w	80096c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80092ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092f0:	f003 0320 	and.w	r3, r3, #32
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d008      	beq.n	800930a <HAL_UART_IRQHandler+0x14e>
 80092f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092fc:	f003 0320 	and.w	r3, r3, #32
 8009300:	2b00      	cmp	r3, #0
 8009302:	d002      	beq.n	800930a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 fb92 	bl	8009a2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	695b      	ldr	r3, [r3, #20]
 8009310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009314:	2b40      	cmp	r3, #64	; 0x40
 8009316:	bf0c      	ite	eq
 8009318:	2301      	moveq	r3, #1
 800931a:	2300      	movne	r3, #0
 800931c:	b2db      	uxtb	r3, r3
 800931e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009326:	f003 0308 	and.w	r3, r3, #8
 800932a:	2b00      	cmp	r3, #0
 800932c:	d103      	bne.n	8009336 <HAL_UART_IRQHandler+0x17a>
 800932e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009332:	2b00      	cmp	r3, #0
 8009334:	d04f      	beq.n	80093d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fa9a 	bl	8009870 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	695b      	ldr	r3, [r3, #20]
 8009342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009346:	2b40      	cmp	r3, #64	; 0x40
 8009348:	d141      	bne.n	80093ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	3314      	adds	r3, #20
 8009350:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009354:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009358:	e853 3f00 	ldrex	r3, [r3]
 800935c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009360:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009368:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	3314      	adds	r3, #20
 8009372:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009376:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800937a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009382:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009386:	e841 2300 	strex	r3, r2, [r1]
 800938a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800938e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1d9      	bne.n	800934a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800939a:	2b00      	cmp	r3, #0
 800939c:	d013      	beq.n	80093c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a2:	4a7d      	ldr	r2, [pc, #500]	; (8009598 <HAL_UART_IRQHandler+0x3dc>)
 80093a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fb fc78 	bl	8004ca0 <HAL_DMA_Abort_IT>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d016      	beq.n	80093e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80093c0:	4610      	mov	r0, r2
 80093c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093c4:	e00e      	b.n	80093e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f990 	bl	80096ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093cc:	e00a      	b.n	80093e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f98c 	bl	80096ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093d4:	e006      	b.n	80093e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 f988 	bl	80096ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80093e2:	e170      	b.n	80096c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093e4:	bf00      	nop
    return;
 80093e6:	e16e      	b.n	80096c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	f040 814a 	bne.w	8009686 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80093f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093f6:	f003 0310 	and.w	r3, r3, #16
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f000 8143 	beq.w	8009686 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009404:	f003 0310 	and.w	r3, r3, #16
 8009408:	2b00      	cmp	r3, #0
 800940a:	f000 813c 	beq.w	8009686 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800940e:	2300      	movs	r3, #0
 8009410:	60bb      	str	r3, [r7, #8]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	60bb      	str	r3, [r7, #8]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	60bb      	str	r3, [r7, #8]
 8009422:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	695b      	ldr	r3, [r3, #20]
 800942a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800942e:	2b40      	cmp	r3, #64	; 0x40
 8009430:	f040 80b4 	bne.w	800959c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009440:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009444:	2b00      	cmp	r3, #0
 8009446:	f000 8140 	beq.w	80096ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800944e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009452:	429a      	cmp	r2, r3
 8009454:	f080 8139 	bcs.w	80096ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800945e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009464:	69db      	ldr	r3, [r3, #28]
 8009466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800946a:	f000 8088 	beq.w	800957e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	330c      	adds	r3, #12
 8009474:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009478:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800947c:	e853 3f00 	ldrex	r3, [r3]
 8009480:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009484:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800948c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	330c      	adds	r3, #12
 8009496:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800949a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800949e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80094a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80094aa:	e841 2300 	strex	r3, r2, [r1]
 80094ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80094b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1d9      	bne.n	800946e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	3314      	adds	r3, #20
 80094c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094c4:	e853 3f00 	ldrex	r3, [r3]
 80094c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80094ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094cc:	f023 0301 	bic.w	r3, r3, #1
 80094d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	3314      	adds	r3, #20
 80094da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80094de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80094e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80094e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80094ea:	e841 2300 	strex	r3, r2, [r1]
 80094ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80094f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1e1      	bne.n	80094ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	3314      	adds	r3, #20
 80094fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009500:	e853 3f00 	ldrex	r3, [r3]
 8009504:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009508:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800950c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	3314      	adds	r3, #20
 8009516:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800951a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800951c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009520:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009522:	e841 2300 	strex	r3, r2, [r1]
 8009526:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1e3      	bne.n	80094f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2220      	movs	r2, #32
 8009532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	330c      	adds	r3, #12
 8009542:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009546:	e853 3f00 	ldrex	r3, [r3]
 800954a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800954c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800954e:	f023 0310 	bic.w	r3, r3, #16
 8009552:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	330c      	adds	r3, #12
 800955c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009560:	65ba      	str	r2, [r7, #88]	; 0x58
 8009562:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009564:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009566:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009568:	e841 2300 	strex	r3, r2, [r1]
 800956c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800956e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1e3      	bne.n	800953c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009578:	4618      	mov	r0, r3
 800957a:	f7fb fb21 	bl	8004bc0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009586:	b29b      	uxth	r3, r3
 8009588:	1ad3      	subs	r3, r2, r3
 800958a:	b29b      	uxth	r3, r3
 800958c:	4619      	mov	r1, r3
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 f8b6 	bl	8009700 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009594:	e099      	b.n	80096ca <HAL_UART_IRQHandler+0x50e>
 8009596:	bf00      	nop
 8009598:	08009937 	.word	0x08009937
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f000 808b 	beq.w	80096ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80095b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f000 8086 	beq.w	80096ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	330c      	adds	r3, #12
 80095c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095cc:	e853 3f00 	ldrex	r3, [r3]
 80095d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80095d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	330c      	adds	r3, #12
 80095e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80095e6:	647a      	str	r2, [r7, #68]	; 0x44
 80095e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80095ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095ee:	e841 2300 	strex	r3, r2, [r1]
 80095f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80095f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d1e3      	bne.n	80095c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	3314      	adds	r3, #20
 8009600:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009604:	e853 3f00 	ldrex	r3, [r3]
 8009608:	623b      	str	r3, [r7, #32]
   return(result);
 800960a:	6a3b      	ldr	r3, [r7, #32]
 800960c:	f023 0301 	bic.w	r3, r3, #1
 8009610:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	3314      	adds	r3, #20
 800961a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800961e:	633a      	str	r2, [r7, #48]	; 0x30
 8009620:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009622:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009626:	e841 2300 	strex	r3, r2, [r1]
 800962a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800962c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1e3      	bne.n	80095fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2220      	movs	r2, #32
 8009636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	330c      	adds	r3, #12
 8009646:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	e853 3f00 	ldrex	r3, [r3]
 800964e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f023 0310 	bic.w	r3, r3, #16
 8009656:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	330c      	adds	r3, #12
 8009660:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009664:	61fa      	str	r2, [r7, #28]
 8009666:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009668:	69b9      	ldr	r1, [r7, #24]
 800966a:	69fa      	ldr	r2, [r7, #28]
 800966c:	e841 2300 	strex	r3, r2, [r1]
 8009670:	617b      	str	r3, [r7, #20]
   return(result);
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d1e3      	bne.n	8009640 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009678:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800967c:	4619      	mov	r1, r3
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f83e 	bl	8009700 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009684:	e023      	b.n	80096ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800968a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800968e:	2b00      	cmp	r3, #0
 8009690:	d009      	beq.n	80096a6 <HAL_UART_IRQHandler+0x4ea>
 8009692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800969a:	2b00      	cmp	r3, #0
 800969c:	d003      	beq.n	80096a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 f95d 	bl	800995e <UART_Transmit_IT>
    return;
 80096a4:	e014      	b.n	80096d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80096a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d00e      	beq.n	80096d0 <HAL_UART_IRQHandler+0x514>
 80096b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d008      	beq.n	80096d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 f99d 	bl	80099fe <UART_EndTransmit_IT>
    return;
 80096c4:	e004      	b.n	80096d0 <HAL_UART_IRQHandler+0x514>
    return;
 80096c6:	bf00      	nop
 80096c8:	e002      	b.n	80096d0 <HAL_UART_IRQHandler+0x514>
      return;
 80096ca:	bf00      	nop
 80096cc:	e000      	b.n	80096d0 <HAL_UART_IRQHandler+0x514>
      return;
 80096ce:	bf00      	nop
  }
}
 80096d0:	37e8      	adds	r7, #232	; 0xe8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop

080096d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80096e0:	bf00      	nop
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80096f4:	bf00      	nop
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	460b      	mov	r3, r1
 800970a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800970c:	bf00      	nop
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b090      	sub	sp, #64	; 0x40
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	603b      	str	r3, [r7, #0]
 8009724:	4613      	mov	r3, r2
 8009726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009728:	e050      	b.n	80097cc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800972a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800972c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009730:	d04c      	beq.n	80097cc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009734:	2b00      	cmp	r3, #0
 8009736:	d007      	beq.n	8009748 <UART_WaitOnFlagUntilTimeout+0x30>
 8009738:	f7fa fffa 	bl	8004730 <HAL_GetTick>
 800973c:	4602      	mov	r2, r0
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009744:	429a      	cmp	r2, r3
 8009746:	d241      	bcs.n	80097cc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	330c      	adds	r3, #12
 800974e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009752:	e853 3f00 	ldrex	r3, [r3]
 8009756:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800975e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	330c      	adds	r3, #12
 8009766:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009768:	637a      	str	r2, [r7, #52]	; 0x34
 800976a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800976e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009770:	e841 2300 	strex	r3, r2, [r1]
 8009774:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009778:	2b00      	cmp	r3, #0
 800977a:	d1e5      	bne.n	8009748 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3314      	adds	r3, #20
 8009782:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	e853 3f00 	ldrex	r3, [r3]
 800978a:	613b      	str	r3, [r7, #16]
   return(result);
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	f023 0301 	bic.w	r3, r3, #1
 8009792:	63bb      	str	r3, [r7, #56]	; 0x38
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	3314      	adds	r3, #20
 800979a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800979c:	623a      	str	r2, [r7, #32]
 800979e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a0:	69f9      	ldr	r1, [r7, #28]
 80097a2:	6a3a      	ldr	r2, [r7, #32]
 80097a4:	e841 2300 	strex	r3, r2, [r1]
 80097a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d1e5      	bne.n	800977c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2220      	movs	r2, #32
 80097b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2220      	movs	r2, #32
 80097bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80097c8:	2303      	movs	r3, #3
 80097ca:	e00f      	b.n	80097ec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	4013      	ands	r3, r2
 80097d6:	68ba      	ldr	r2, [r7, #8]
 80097d8:	429a      	cmp	r2, r3
 80097da:	bf0c      	ite	eq
 80097dc:	2301      	moveq	r3, #1
 80097de:	2300      	movne	r3, #0
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	461a      	mov	r2, r3
 80097e4:	79fb      	ldrb	r3, [r7, #7]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d09f      	beq.n	800972a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3740      	adds	r7, #64	; 0x40
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	4613      	mov	r3, r2
 8009800:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	88fa      	ldrh	r2, [r7, #6]
 800980c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	88fa      	ldrh	r2, [r7, #6]
 8009812:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2200      	movs	r2, #0
 8009818:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2222      	movs	r2, #34	; 0x22
 800981e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2200      	movs	r2, #0
 8009826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	691b      	ldr	r3, [r3, #16]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d007      	beq.n	8009842 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	68da      	ldr	r2, [r3, #12]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009840:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	695a      	ldr	r2, [r3, #20]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f042 0201 	orr.w	r2, r2, #1
 8009850:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	68da      	ldr	r2, [r3, #12]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f042 0220 	orr.w	r2, r2, #32
 8009860:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009862:	2300      	movs	r3, #0
}
 8009864:	4618      	mov	r0, r3
 8009866:	3714      	adds	r7, #20
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009870:	b480      	push	{r7}
 8009872:	b095      	sub	sp, #84	; 0x54
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	330c      	adds	r3, #12
 800987e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009882:	e853 3f00 	ldrex	r3, [r3]
 8009886:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800988e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	330c      	adds	r3, #12
 8009896:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009898:	643a      	str	r2, [r7, #64]	; 0x40
 800989a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800989e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80098a0:	e841 2300 	strex	r3, r2, [r1]
 80098a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80098a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d1e5      	bne.n	8009878 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	3314      	adds	r3, #20
 80098b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b4:	6a3b      	ldr	r3, [r7, #32]
 80098b6:	e853 3f00 	ldrex	r3, [r3]
 80098ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80098bc:	69fb      	ldr	r3, [r7, #28]
 80098be:	f023 0301 	bic.w	r3, r3, #1
 80098c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	3314      	adds	r3, #20
 80098ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80098ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098d4:	e841 2300 	strex	r3, r2, [r1]
 80098d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1e5      	bne.n	80098ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d119      	bne.n	800991c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	330c      	adds	r3, #12
 80098ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	e853 3f00 	ldrex	r3, [r3]
 80098f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	f023 0310 	bic.w	r3, r3, #16
 80098fe:	647b      	str	r3, [r7, #68]	; 0x44
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	330c      	adds	r3, #12
 8009906:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009908:	61ba      	str	r2, [r7, #24]
 800990a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990c:	6979      	ldr	r1, [r7, #20]
 800990e:	69ba      	ldr	r2, [r7, #24]
 8009910:	e841 2300 	strex	r3, r2, [r1]
 8009914:	613b      	str	r3, [r7, #16]
   return(result);
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d1e5      	bne.n	80098e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2220      	movs	r2, #32
 8009920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	631a      	str	r2, [r3, #48]	; 0x30
}
 800992a:	bf00      	nop
 800992c:	3754      	adds	r7, #84	; 0x54
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr

08009936 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b084      	sub	sp, #16
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009942:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2200      	movs	r2, #0
 8009948:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2200      	movs	r2, #0
 800994e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f7ff fecb 	bl	80096ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009956:	bf00      	nop
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800995e:	b480      	push	{r7}
 8009960:	b085      	sub	sp, #20
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b21      	cmp	r3, #33	; 0x21
 8009970:	d13e      	bne.n	80099f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800997a:	d114      	bne.n	80099a6 <UART_Transmit_IT+0x48>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	691b      	ldr	r3, [r3, #16]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d110      	bne.n	80099a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6a1b      	ldr	r3, [r3, #32]
 8009988:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	881b      	ldrh	r3, [r3, #0]
 800998e:	461a      	mov	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009998:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a1b      	ldr	r3, [r3, #32]
 800999e:	1c9a      	adds	r2, r3, #2
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	621a      	str	r2, [r3, #32]
 80099a4:	e008      	b.n	80099b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a1b      	ldr	r3, [r3, #32]
 80099aa:	1c59      	adds	r1, r3, #1
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	6211      	str	r1, [r2, #32]
 80099b0:	781a      	ldrb	r2, [r3, #0]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80099bc:	b29b      	uxth	r3, r3
 80099be:	3b01      	subs	r3, #1
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	4619      	mov	r1, r3
 80099c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d10f      	bne.n	80099ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68da      	ldr	r2, [r3, #12]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80099da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	68da      	ldr	r2, [r3, #12]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80099ec:	2300      	movs	r3, #0
 80099ee:	e000      	b.n	80099f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80099f0:	2302      	movs	r3, #2
  }
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr

080099fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b082      	sub	sp, #8
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	68da      	ldr	r2, [r3, #12]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2220      	movs	r2, #32
 8009a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f7ff fe5a 	bl	80096d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3708      	adds	r7, #8
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b08c      	sub	sp, #48	; 0x30
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	2b22      	cmp	r3, #34	; 0x22
 8009a40:	f040 80ab 	bne.w	8009b9a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a4c:	d117      	bne.n	8009a7e <UART_Receive_IT+0x50>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d113      	bne.n	8009a7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009a56:	2300      	movs	r3, #0
 8009a58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a5e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a76:	1c9a      	adds	r2, r3, #2
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	629a      	str	r2, [r3, #40]	; 0x28
 8009a7c:	e026      	b.n	8009acc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009a84:	2300      	movs	r3, #0
 8009a86:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a90:	d007      	beq.n	8009aa2 <UART_Receive_IT+0x74>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d10a      	bne.n	8009ab0 <UART_Receive_IT+0x82>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d106      	bne.n	8009ab0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	b2da      	uxtb	r2, r3
 8009aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aac:	701a      	strb	r2, [r3, #0]
 8009aae:	e008      	b.n	8009ac2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009abc:	b2da      	uxtb	r2, r3
 8009abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac6:	1c5a      	adds	r2, r3, #1
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	4619      	mov	r1, r3
 8009ada:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d15a      	bne.n	8009b96 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	68da      	ldr	r2, [r3, #12]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f022 0220 	bic.w	r2, r2, #32
 8009aee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68da      	ldr	r2, [r3, #12]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009afe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	695a      	ldr	r2, [r3, #20]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f022 0201 	bic.w	r2, r2, #1
 8009b0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2220      	movs	r2, #32
 8009b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d135      	bne.n	8009b8c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	330c      	adds	r3, #12
 8009b2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	e853 3f00 	ldrex	r3, [r3]
 8009b34:	613b      	str	r3, [r7, #16]
   return(result);
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	f023 0310 	bic.w	r3, r3, #16
 8009b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	330c      	adds	r3, #12
 8009b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b46:	623a      	str	r2, [r7, #32]
 8009b48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b4a:	69f9      	ldr	r1, [r7, #28]
 8009b4c:	6a3a      	ldr	r2, [r7, #32]
 8009b4e:	e841 2300 	strex	r3, r2, [r1]
 8009b52:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d1e5      	bne.n	8009b26 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f003 0310 	and.w	r3, r3, #16
 8009b64:	2b10      	cmp	r3, #16
 8009b66:	d10a      	bne.n	8009b7e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b68:	2300      	movs	r3, #0
 8009b6a:	60fb      	str	r3, [r7, #12]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	60fb      	str	r3, [r7, #12]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	60fb      	str	r3, [r7, #12]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009b82:	4619      	mov	r1, r3
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f7ff fdbb 	bl	8009700 <HAL_UARTEx_RxEventCallback>
 8009b8a:	e002      	b.n	8009b92 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f7f9 fbad 	bl	80032ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009b92:	2300      	movs	r3, #0
 8009b94:	e002      	b.n	8009b9c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009b96:	2300      	movs	r3, #0
 8009b98:	e000      	b.n	8009b9c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009b9a:	2302      	movs	r3, #2
  }
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3730      	adds	r7, #48	; 0x30
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ba8:	b0c0      	sub	sp, #256	; 0x100
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	691b      	ldr	r3, [r3, #16]
 8009bb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bc0:	68d9      	ldr	r1, [r3, #12]
 8009bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	ea40 0301 	orr.w	r3, r0, r1
 8009bcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bd2:	689a      	ldr	r2, [r3, #8]
 8009bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	431a      	orrs	r2, r3
 8009bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009be0:	695b      	ldr	r3, [r3, #20]
 8009be2:	431a      	orrs	r2, r3
 8009be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009be8:	69db      	ldr	r3, [r3, #28]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009bfc:	f021 010c 	bic.w	r1, r1, #12
 8009c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009c0a:	430b      	orrs	r3, r1
 8009c0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	695b      	ldr	r3, [r3, #20]
 8009c16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c1e:	6999      	ldr	r1, [r3, #24]
 8009c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	ea40 0301 	orr.w	r3, r0, r1
 8009c2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	4b8f      	ldr	r3, [pc, #572]	; (8009e70 <UART_SetConfig+0x2cc>)
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d005      	beq.n	8009c44 <UART_SetConfig+0xa0>
 8009c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	4b8d      	ldr	r3, [pc, #564]	; (8009e74 <UART_SetConfig+0x2d0>)
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d104      	bne.n	8009c4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009c44:	f7fd fd16 	bl	8007674 <HAL_RCC_GetPCLK2Freq>
 8009c48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009c4c:	e003      	b.n	8009c56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009c4e:	f7fd fcfd 	bl	800764c <HAL_RCC_GetPCLK1Freq>
 8009c52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c5a:	69db      	ldr	r3, [r3, #28]
 8009c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c60:	f040 810c 	bne.w	8009e7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009c64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c68:	2200      	movs	r2, #0
 8009c6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009c6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009c72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009c76:	4622      	mov	r2, r4
 8009c78:	462b      	mov	r3, r5
 8009c7a:	1891      	adds	r1, r2, r2
 8009c7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8009c7e:	415b      	adcs	r3, r3
 8009c80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009c86:	4621      	mov	r1, r4
 8009c88:	eb12 0801 	adds.w	r8, r2, r1
 8009c8c:	4629      	mov	r1, r5
 8009c8e:	eb43 0901 	adc.w	r9, r3, r1
 8009c92:	f04f 0200 	mov.w	r2, #0
 8009c96:	f04f 0300 	mov.w	r3, #0
 8009c9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009c9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009ca2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009ca6:	4690      	mov	r8, r2
 8009ca8:	4699      	mov	r9, r3
 8009caa:	4623      	mov	r3, r4
 8009cac:	eb18 0303 	adds.w	r3, r8, r3
 8009cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009cb4:	462b      	mov	r3, r5
 8009cb6:	eb49 0303 	adc.w	r3, r9, r3
 8009cba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009cca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009cce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	18db      	adds	r3, r3, r3
 8009cd6:	653b      	str	r3, [r7, #80]	; 0x50
 8009cd8:	4613      	mov	r3, r2
 8009cda:	eb42 0303 	adc.w	r3, r2, r3
 8009cde:	657b      	str	r3, [r7, #84]	; 0x54
 8009ce0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009ce4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009ce8:	f7f6 fdd0 	bl	800088c <__aeabi_uldivmod>
 8009cec:	4602      	mov	r2, r0
 8009cee:	460b      	mov	r3, r1
 8009cf0:	4b61      	ldr	r3, [pc, #388]	; (8009e78 <UART_SetConfig+0x2d4>)
 8009cf2:	fba3 2302 	umull	r2, r3, r3, r2
 8009cf6:	095b      	lsrs	r3, r3, #5
 8009cf8:	011c      	lsls	r4, r3, #4
 8009cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009d08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009d0c:	4642      	mov	r2, r8
 8009d0e:	464b      	mov	r3, r9
 8009d10:	1891      	adds	r1, r2, r2
 8009d12:	64b9      	str	r1, [r7, #72]	; 0x48
 8009d14:	415b      	adcs	r3, r3
 8009d16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009d1c:	4641      	mov	r1, r8
 8009d1e:	eb12 0a01 	adds.w	sl, r2, r1
 8009d22:	4649      	mov	r1, r9
 8009d24:	eb43 0b01 	adc.w	fp, r3, r1
 8009d28:	f04f 0200 	mov.w	r2, #0
 8009d2c:	f04f 0300 	mov.w	r3, #0
 8009d30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009d34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009d38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d3c:	4692      	mov	sl, r2
 8009d3e:	469b      	mov	fp, r3
 8009d40:	4643      	mov	r3, r8
 8009d42:	eb1a 0303 	adds.w	r3, sl, r3
 8009d46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d4a:	464b      	mov	r3, r9
 8009d4c:	eb4b 0303 	adc.w	r3, fp, r3
 8009d50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009d60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009d64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009d68:	460b      	mov	r3, r1
 8009d6a:	18db      	adds	r3, r3, r3
 8009d6c:	643b      	str	r3, [r7, #64]	; 0x40
 8009d6e:	4613      	mov	r3, r2
 8009d70:	eb42 0303 	adc.w	r3, r2, r3
 8009d74:	647b      	str	r3, [r7, #68]	; 0x44
 8009d76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009d7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009d7e:	f7f6 fd85 	bl	800088c <__aeabi_uldivmod>
 8009d82:	4602      	mov	r2, r0
 8009d84:	460b      	mov	r3, r1
 8009d86:	4611      	mov	r1, r2
 8009d88:	4b3b      	ldr	r3, [pc, #236]	; (8009e78 <UART_SetConfig+0x2d4>)
 8009d8a:	fba3 2301 	umull	r2, r3, r3, r1
 8009d8e:	095b      	lsrs	r3, r3, #5
 8009d90:	2264      	movs	r2, #100	; 0x64
 8009d92:	fb02 f303 	mul.w	r3, r2, r3
 8009d96:	1acb      	subs	r3, r1, r3
 8009d98:	00db      	lsls	r3, r3, #3
 8009d9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009d9e:	4b36      	ldr	r3, [pc, #216]	; (8009e78 <UART_SetConfig+0x2d4>)
 8009da0:	fba3 2302 	umull	r2, r3, r3, r2
 8009da4:	095b      	lsrs	r3, r3, #5
 8009da6:	005b      	lsls	r3, r3, #1
 8009da8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009dac:	441c      	add	r4, r3
 8009dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009db2:	2200      	movs	r2, #0
 8009db4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009db8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009dbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009dc0:	4642      	mov	r2, r8
 8009dc2:	464b      	mov	r3, r9
 8009dc4:	1891      	adds	r1, r2, r2
 8009dc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8009dc8:	415b      	adcs	r3, r3
 8009dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009dcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009dd0:	4641      	mov	r1, r8
 8009dd2:	1851      	adds	r1, r2, r1
 8009dd4:	6339      	str	r1, [r7, #48]	; 0x30
 8009dd6:	4649      	mov	r1, r9
 8009dd8:	414b      	adcs	r3, r1
 8009dda:	637b      	str	r3, [r7, #52]	; 0x34
 8009ddc:	f04f 0200 	mov.w	r2, #0
 8009de0:	f04f 0300 	mov.w	r3, #0
 8009de4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009de8:	4659      	mov	r1, fp
 8009dea:	00cb      	lsls	r3, r1, #3
 8009dec:	4651      	mov	r1, sl
 8009dee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009df2:	4651      	mov	r1, sl
 8009df4:	00ca      	lsls	r2, r1, #3
 8009df6:	4610      	mov	r0, r2
 8009df8:	4619      	mov	r1, r3
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	4642      	mov	r2, r8
 8009dfe:	189b      	adds	r3, r3, r2
 8009e00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009e04:	464b      	mov	r3, r9
 8009e06:	460a      	mov	r2, r1
 8009e08:	eb42 0303 	adc.w	r3, r2, r3
 8009e0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009e1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009e20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009e24:	460b      	mov	r3, r1
 8009e26:	18db      	adds	r3, r3, r3
 8009e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	eb42 0303 	adc.w	r3, r2, r3
 8009e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009e3a:	f7f6 fd27 	bl	800088c <__aeabi_uldivmod>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	460b      	mov	r3, r1
 8009e42:	4b0d      	ldr	r3, [pc, #52]	; (8009e78 <UART_SetConfig+0x2d4>)
 8009e44:	fba3 1302 	umull	r1, r3, r3, r2
 8009e48:	095b      	lsrs	r3, r3, #5
 8009e4a:	2164      	movs	r1, #100	; 0x64
 8009e4c:	fb01 f303 	mul.w	r3, r1, r3
 8009e50:	1ad3      	subs	r3, r2, r3
 8009e52:	00db      	lsls	r3, r3, #3
 8009e54:	3332      	adds	r3, #50	; 0x32
 8009e56:	4a08      	ldr	r2, [pc, #32]	; (8009e78 <UART_SetConfig+0x2d4>)
 8009e58:	fba2 2303 	umull	r2, r3, r2, r3
 8009e5c:	095b      	lsrs	r3, r3, #5
 8009e5e:	f003 0207 	and.w	r2, r3, #7
 8009e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4422      	add	r2, r4
 8009e6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009e6c:	e105      	b.n	800a07a <UART_SetConfig+0x4d6>
 8009e6e:	bf00      	nop
 8009e70:	40011000 	.word	0x40011000
 8009e74:	40011400 	.word	0x40011400
 8009e78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e80:	2200      	movs	r2, #0
 8009e82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009e86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009e8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009e8e:	4642      	mov	r2, r8
 8009e90:	464b      	mov	r3, r9
 8009e92:	1891      	adds	r1, r2, r2
 8009e94:	6239      	str	r1, [r7, #32]
 8009e96:	415b      	adcs	r3, r3
 8009e98:	627b      	str	r3, [r7, #36]	; 0x24
 8009e9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e9e:	4641      	mov	r1, r8
 8009ea0:	1854      	adds	r4, r2, r1
 8009ea2:	4649      	mov	r1, r9
 8009ea4:	eb43 0501 	adc.w	r5, r3, r1
 8009ea8:	f04f 0200 	mov.w	r2, #0
 8009eac:	f04f 0300 	mov.w	r3, #0
 8009eb0:	00eb      	lsls	r3, r5, #3
 8009eb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009eb6:	00e2      	lsls	r2, r4, #3
 8009eb8:	4614      	mov	r4, r2
 8009eba:	461d      	mov	r5, r3
 8009ebc:	4643      	mov	r3, r8
 8009ebe:	18e3      	adds	r3, r4, r3
 8009ec0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009ec4:	464b      	mov	r3, r9
 8009ec6:	eb45 0303 	adc.w	r3, r5, r3
 8009eca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009eda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009ede:	f04f 0200 	mov.w	r2, #0
 8009ee2:	f04f 0300 	mov.w	r3, #0
 8009ee6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009eea:	4629      	mov	r1, r5
 8009eec:	008b      	lsls	r3, r1, #2
 8009eee:	4621      	mov	r1, r4
 8009ef0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ef4:	4621      	mov	r1, r4
 8009ef6:	008a      	lsls	r2, r1, #2
 8009ef8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009efc:	f7f6 fcc6 	bl	800088c <__aeabi_uldivmod>
 8009f00:	4602      	mov	r2, r0
 8009f02:	460b      	mov	r3, r1
 8009f04:	4b60      	ldr	r3, [pc, #384]	; (800a088 <UART_SetConfig+0x4e4>)
 8009f06:	fba3 2302 	umull	r2, r3, r3, r2
 8009f0a:	095b      	lsrs	r3, r3, #5
 8009f0c:	011c      	lsls	r4, r3, #4
 8009f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f12:	2200      	movs	r2, #0
 8009f14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009f18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009f1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009f20:	4642      	mov	r2, r8
 8009f22:	464b      	mov	r3, r9
 8009f24:	1891      	adds	r1, r2, r2
 8009f26:	61b9      	str	r1, [r7, #24]
 8009f28:	415b      	adcs	r3, r3
 8009f2a:	61fb      	str	r3, [r7, #28]
 8009f2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f30:	4641      	mov	r1, r8
 8009f32:	1851      	adds	r1, r2, r1
 8009f34:	6139      	str	r1, [r7, #16]
 8009f36:	4649      	mov	r1, r9
 8009f38:	414b      	adcs	r3, r1
 8009f3a:	617b      	str	r3, [r7, #20]
 8009f3c:	f04f 0200 	mov.w	r2, #0
 8009f40:	f04f 0300 	mov.w	r3, #0
 8009f44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009f48:	4659      	mov	r1, fp
 8009f4a:	00cb      	lsls	r3, r1, #3
 8009f4c:	4651      	mov	r1, sl
 8009f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f52:	4651      	mov	r1, sl
 8009f54:	00ca      	lsls	r2, r1, #3
 8009f56:	4610      	mov	r0, r2
 8009f58:	4619      	mov	r1, r3
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	4642      	mov	r2, r8
 8009f5e:	189b      	adds	r3, r3, r2
 8009f60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f64:	464b      	mov	r3, r9
 8009f66:	460a      	mov	r2, r1
 8009f68:	eb42 0303 	adc.w	r3, r2, r3
 8009f6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	67bb      	str	r3, [r7, #120]	; 0x78
 8009f7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009f7c:	f04f 0200 	mov.w	r2, #0
 8009f80:	f04f 0300 	mov.w	r3, #0
 8009f84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009f88:	4649      	mov	r1, r9
 8009f8a:	008b      	lsls	r3, r1, #2
 8009f8c:	4641      	mov	r1, r8
 8009f8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f92:	4641      	mov	r1, r8
 8009f94:	008a      	lsls	r2, r1, #2
 8009f96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009f9a:	f7f6 fc77 	bl	800088c <__aeabi_uldivmod>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	4b39      	ldr	r3, [pc, #228]	; (800a088 <UART_SetConfig+0x4e4>)
 8009fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8009fa8:	095b      	lsrs	r3, r3, #5
 8009faa:	2164      	movs	r1, #100	; 0x64
 8009fac:	fb01 f303 	mul.w	r3, r1, r3
 8009fb0:	1ad3      	subs	r3, r2, r3
 8009fb2:	011b      	lsls	r3, r3, #4
 8009fb4:	3332      	adds	r3, #50	; 0x32
 8009fb6:	4a34      	ldr	r2, [pc, #208]	; (800a088 <UART_SetConfig+0x4e4>)
 8009fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8009fbc:	095b      	lsrs	r3, r3, #5
 8009fbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009fc2:	441c      	add	r4, r3
 8009fc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fc8:	2200      	movs	r2, #0
 8009fca:	673b      	str	r3, [r7, #112]	; 0x70
 8009fcc:	677a      	str	r2, [r7, #116]	; 0x74
 8009fce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009fd2:	4642      	mov	r2, r8
 8009fd4:	464b      	mov	r3, r9
 8009fd6:	1891      	adds	r1, r2, r2
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	415b      	adcs	r3, r3
 8009fdc:	60fb      	str	r3, [r7, #12]
 8009fde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009fe2:	4641      	mov	r1, r8
 8009fe4:	1851      	adds	r1, r2, r1
 8009fe6:	6039      	str	r1, [r7, #0]
 8009fe8:	4649      	mov	r1, r9
 8009fea:	414b      	adcs	r3, r1
 8009fec:	607b      	str	r3, [r7, #4]
 8009fee:	f04f 0200 	mov.w	r2, #0
 8009ff2:	f04f 0300 	mov.w	r3, #0
 8009ff6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009ffa:	4659      	mov	r1, fp
 8009ffc:	00cb      	lsls	r3, r1, #3
 8009ffe:	4651      	mov	r1, sl
 800a000:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a004:	4651      	mov	r1, sl
 800a006:	00ca      	lsls	r2, r1, #3
 800a008:	4610      	mov	r0, r2
 800a00a:	4619      	mov	r1, r3
 800a00c:	4603      	mov	r3, r0
 800a00e:	4642      	mov	r2, r8
 800a010:	189b      	adds	r3, r3, r2
 800a012:	66bb      	str	r3, [r7, #104]	; 0x68
 800a014:	464b      	mov	r3, r9
 800a016:	460a      	mov	r2, r1
 800a018:	eb42 0303 	adc.w	r3, r2, r3
 800a01c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a01e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	663b      	str	r3, [r7, #96]	; 0x60
 800a028:	667a      	str	r2, [r7, #100]	; 0x64
 800a02a:	f04f 0200 	mov.w	r2, #0
 800a02e:	f04f 0300 	mov.w	r3, #0
 800a032:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a036:	4649      	mov	r1, r9
 800a038:	008b      	lsls	r3, r1, #2
 800a03a:	4641      	mov	r1, r8
 800a03c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a040:	4641      	mov	r1, r8
 800a042:	008a      	lsls	r2, r1, #2
 800a044:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a048:	f7f6 fc20 	bl	800088c <__aeabi_uldivmod>
 800a04c:	4602      	mov	r2, r0
 800a04e:	460b      	mov	r3, r1
 800a050:	4b0d      	ldr	r3, [pc, #52]	; (800a088 <UART_SetConfig+0x4e4>)
 800a052:	fba3 1302 	umull	r1, r3, r3, r2
 800a056:	095b      	lsrs	r3, r3, #5
 800a058:	2164      	movs	r1, #100	; 0x64
 800a05a:	fb01 f303 	mul.w	r3, r1, r3
 800a05e:	1ad3      	subs	r3, r2, r3
 800a060:	011b      	lsls	r3, r3, #4
 800a062:	3332      	adds	r3, #50	; 0x32
 800a064:	4a08      	ldr	r2, [pc, #32]	; (800a088 <UART_SetConfig+0x4e4>)
 800a066:	fba2 2303 	umull	r2, r3, r2, r3
 800a06a:	095b      	lsrs	r3, r3, #5
 800a06c:	f003 020f 	and.w	r2, r3, #15
 800a070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4422      	add	r2, r4
 800a078:	609a      	str	r2, [r3, #8]
}
 800a07a:	bf00      	nop
 800a07c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a080:	46bd      	mov	sp, r7
 800a082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a086:	bf00      	nop
 800a088:	51eb851f 	.word	0x51eb851f

0800a08c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a08c:	b084      	sub	sp, #16
 800a08e:	b580      	push	{r7, lr}
 800a090:	b084      	sub	sp, #16
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	f107 001c 	add.w	r0, r7, #28
 800a09a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d122      	bne.n	800a0ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a0b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a0cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d105      	bne.n	800a0de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 f9c0 	bl	800a464 <USB_CoreReset>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	73fb      	strb	r3, [r7, #15]
 800a0e8:	e01a      	b.n	800a120 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	68db      	ldr	r3, [r3, #12]
 800a0ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 f9b4 	bl	800a464 <USB_CoreReset>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a102:	2b00      	cmp	r3, #0
 800a104:	d106      	bne.n	800a114 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a10a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	639a      	str	r2, [r3, #56]	; 0x38
 800a112:	e005      	b.n	800a120 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a118:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a122:	2b01      	cmp	r3, #1
 800a124:	d10b      	bne.n	800a13e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	f043 0206 	orr.w	r2, r3, #6
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	f043 0220 	orr.w	r2, r3, #32
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a140:	4618      	mov	r0, r3
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a14a:	b004      	add	sp, #16
 800a14c:	4770      	bx	lr

0800a14e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a14e:	b480      	push	{r7}
 800a150:	b083      	sub	sp, #12
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	f043 0201 	orr.w	r2, r3, #1
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	370c      	adds	r7, #12
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	f023 0201 	bic.w	r2, r3, #1
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	370c      	adds	r7, #12
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr

0800a192 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b084      	sub	sp, #16
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
 800a19a:	460b      	mov	r3, r1
 800a19c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a1ae:	78fb      	ldrb	r3, [r7, #3]
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d115      	bne.n	800a1e0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a1c0:	2001      	movs	r0, #1
 800a1c2:	f7fa fac1 	bl	8004748 <HAL_Delay>
      ms++;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 f93a 	bl	800a446 <USB_GetMode>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d01e      	beq.n	800a216 <USB_SetCurrentMode+0x84>
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2b31      	cmp	r3, #49	; 0x31
 800a1dc:	d9f0      	bls.n	800a1c0 <USB_SetCurrentMode+0x2e>
 800a1de:	e01a      	b.n	800a216 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a1e0:	78fb      	ldrb	r3, [r7, #3]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d115      	bne.n	800a212 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a1f2:	2001      	movs	r0, #1
 800a1f4:	f7fa faa8 	bl	8004748 <HAL_Delay>
      ms++;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 f921 	bl	800a446 <USB_GetMode>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d005      	beq.n	800a216 <USB_SetCurrentMode+0x84>
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2b31      	cmp	r3, #49	; 0x31
 800a20e:	d9f0      	bls.n	800a1f2 <USB_SetCurrentMode+0x60>
 800a210:	e001      	b.n	800a216 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a212:	2301      	movs	r3, #1
 800a214:	e005      	b.n	800a222 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2b32      	cmp	r3, #50	; 0x32
 800a21a:	d101      	bne.n	800a220 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a21c:	2301      	movs	r3, #1
 800a21e:	e000      	b.n	800a222 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
	...

0800a22c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b085      	sub	sp, #20
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a236:	2300      	movs	r3, #0
 800a238:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	3301      	adds	r3, #1
 800a23e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	4a13      	ldr	r2, [pc, #76]	; (800a290 <USB_FlushTxFifo+0x64>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d901      	bls.n	800a24c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a248:	2303      	movs	r3, #3
 800a24a:	e01b      	b.n	800a284 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	691b      	ldr	r3, [r3, #16]
 800a250:	2b00      	cmp	r3, #0
 800a252:	daf2      	bge.n	800a23a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a254:	2300      	movs	r3, #0
 800a256:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	019b      	lsls	r3, r3, #6
 800a25c:	f043 0220 	orr.w	r2, r3, #32
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	3301      	adds	r3, #1
 800a268:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	4a08      	ldr	r2, [pc, #32]	; (800a290 <USB_FlushTxFifo+0x64>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d901      	bls.n	800a276 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a272:	2303      	movs	r3, #3
 800a274:	e006      	b.n	800a284 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	691b      	ldr	r3, [r3, #16]
 800a27a:	f003 0320 	and.w	r3, r3, #32
 800a27e:	2b20      	cmp	r3, #32
 800a280:	d0f0      	beq.n	800a264 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	3714      	adds	r7, #20
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr
 800a290:	00030d40 	.word	0x00030d40

0800a294 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a294:	b480      	push	{r7}
 800a296:	b085      	sub	sp, #20
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a29c:	2300      	movs	r3, #0
 800a29e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	4a11      	ldr	r2, [pc, #68]	; (800a2f0 <USB_FlushRxFifo+0x5c>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d901      	bls.n	800a2b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a2ae:	2303      	movs	r3, #3
 800a2b0:	e018      	b.n	800a2e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	691b      	ldr	r3, [r3, #16]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	daf2      	bge.n	800a2a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2210      	movs	r2, #16
 800a2c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	4a08      	ldr	r2, [pc, #32]	; (800a2f0 <USB_FlushRxFifo+0x5c>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d901      	bls.n	800a2d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a2d2:	2303      	movs	r3, #3
 800a2d4:	e006      	b.n	800a2e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	691b      	ldr	r3, [r3, #16]
 800a2da:	f003 0310 	and.w	r3, r3, #16
 800a2de:	2b10      	cmp	r3, #16
 800a2e0:	d0f0      	beq.n	800a2c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3714      	adds	r7, #20
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr
 800a2f0:	00030d40 	.word	0x00030d40

0800a2f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b089      	sub	sp, #36	; 0x24
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	60f8      	str	r0, [r7, #12]
 800a2fc:	60b9      	str	r1, [r7, #8]
 800a2fe:	4611      	mov	r1, r2
 800a300:	461a      	mov	r2, r3
 800a302:	460b      	mov	r3, r1
 800a304:	71fb      	strb	r3, [r7, #7]
 800a306:	4613      	mov	r3, r2
 800a308:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a312:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a316:	2b00      	cmp	r3, #0
 800a318:	d123      	bne.n	800a362 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a31a:	88bb      	ldrh	r3, [r7, #4]
 800a31c:	3303      	adds	r3, #3
 800a31e:	089b      	lsrs	r3, r3, #2
 800a320:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a322:	2300      	movs	r3, #0
 800a324:	61bb      	str	r3, [r7, #24]
 800a326:	e018      	b.n	800a35a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a328:	79fb      	ldrb	r3, [r7, #7]
 800a32a:	031a      	lsls	r2, r3, #12
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	4413      	add	r3, r2
 800a330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a334:	461a      	mov	r2, r3
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	3301      	adds	r3, #1
 800a340:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	3301      	adds	r3, #1
 800a346:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a348:	69fb      	ldr	r3, [r7, #28]
 800a34a:	3301      	adds	r3, #1
 800a34c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	3301      	adds	r3, #1
 800a352:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a354:	69bb      	ldr	r3, [r7, #24]
 800a356:	3301      	adds	r3, #1
 800a358:	61bb      	str	r3, [r7, #24]
 800a35a:	69ba      	ldr	r2, [r7, #24]
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	429a      	cmp	r2, r3
 800a360:	d3e2      	bcc.n	800a328 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	3724      	adds	r7, #36	; 0x24
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a370:	b480      	push	{r7}
 800a372:	b08b      	sub	sp, #44	; 0x2c
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	4613      	mov	r3, r2
 800a37c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a386:	88fb      	ldrh	r3, [r7, #6]
 800a388:	089b      	lsrs	r3, r3, #2
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a38e:	88fb      	ldrh	r3, [r7, #6]
 800a390:	f003 0303 	and.w	r3, r3, #3
 800a394:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a396:	2300      	movs	r3, #0
 800a398:	623b      	str	r3, [r7, #32]
 800a39a:	e014      	b.n	800a3c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a39c:	69bb      	ldr	r3, [r7, #24]
 800a39e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a6:	601a      	str	r2, [r3, #0]
    pDest++;
 800a3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3bc:	3301      	adds	r3, #1
 800a3be:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a3c0:	6a3b      	ldr	r3, [r7, #32]
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	623b      	str	r3, [r7, #32]
 800a3c6:	6a3a      	ldr	r2, [r7, #32]
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d3e6      	bcc.n	800a39c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a3ce:	8bfb      	ldrh	r3, [r7, #30]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d01e      	beq.n	800a412 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a3d8:	69bb      	ldr	r3, [r7, #24]
 800a3da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3de:	461a      	mov	r2, r3
 800a3e0:	f107 0310 	add.w	r3, r7, #16
 800a3e4:	6812      	ldr	r2, [r2, #0]
 800a3e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a3e8:	693a      	ldr	r2, [r7, #16]
 800a3ea:	6a3b      	ldr	r3, [r7, #32]
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	00db      	lsls	r3, r3, #3
 800a3f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f8:	701a      	strb	r2, [r3, #0]
      i++;
 800a3fa:	6a3b      	ldr	r3, [r7, #32]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	623b      	str	r3, [r7, #32]
      pDest++;
 800a400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a402:	3301      	adds	r3, #1
 800a404:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a406:	8bfb      	ldrh	r3, [r7, #30]
 800a408:	3b01      	subs	r3, #1
 800a40a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a40c:	8bfb      	ldrh	r3, [r7, #30]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1ea      	bne.n	800a3e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a414:	4618      	mov	r0, r3
 800a416:	372c      	adds	r7, #44	; 0x2c
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a420:	b480      	push	{r7}
 800a422:	b085      	sub	sp, #20
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	695b      	ldr	r3, [r3, #20]
 800a42c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	699b      	ldr	r3, [r3, #24]
 800a432:	68fa      	ldr	r2, [r7, #12]
 800a434:	4013      	ands	r3, r2
 800a436:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a438:	68fb      	ldr	r3, [r7, #12]
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3714      	adds	r7, #20
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr

0800a446 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a446:	b480      	push	{r7}
 800a448:	b083      	sub	sp, #12
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	695b      	ldr	r3, [r3, #20]
 800a452:	f003 0301 	and.w	r3, r3, #1
}
 800a456:	4618      	mov	r0, r3
 800a458:	370c      	adds	r7, #12
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr
	...

0800a464 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a46c:	2300      	movs	r3, #0
 800a46e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	3301      	adds	r3, #1
 800a474:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	4a13      	ldr	r2, [pc, #76]	; (800a4c8 <USB_CoreReset+0x64>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d901      	bls.n	800a482 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a47e:	2303      	movs	r3, #3
 800a480:	e01b      	b.n	800a4ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	2b00      	cmp	r3, #0
 800a488:	daf2      	bge.n	800a470 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a48a:	2300      	movs	r3, #0
 800a48c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	691b      	ldr	r3, [r3, #16]
 800a492:	f043 0201 	orr.w	r2, r3, #1
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	3301      	adds	r3, #1
 800a49e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	4a09      	ldr	r2, [pc, #36]	; (800a4c8 <USB_CoreReset+0x64>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d901      	bls.n	800a4ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a4a8:	2303      	movs	r3, #3
 800a4aa:	e006      	b.n	800a4ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	691b      	ldr	r3, [r3, #16]
 800a4b0:	f003 0301 	and.w	r3, r3, #1
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d0f0      	beq.n	800a49a <USB_CoreReset+0x36>

  return HAL_OK;
 800a4b8:	2300      	movs	r3, #0
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3714      	adds	r7, #20
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr
 800a4c6:	bf00      	nop
 800a4c8:	00030d40 	.word	0x00030d40

0800a4cc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a4cc:	b084      	sub	sp, #16
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b086      	sub	sp, #24
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
 800a4d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a4da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a502:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a50e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a51a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d018      	beq.n	800a554 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a524:	2b01      	cmp	r3, #1
 800a526:	d10a      	bne.n	800a53e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	68fa      	ldr	r2, [r7, #12]
 800a532:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a536:	f043 0304 	orr.w	r3, r3, #4
 800a53a:	6013      	str	r3, [r2, #0]
 800a53c:	e014      	b.n	800a568 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a54c:	f023 0304 	bic.w	r3, r3, #4
 800a550:	6013      	str	r3, [r2, #0]
 800a552:	e009      	b.n	800a568 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	68fa      	ldr	r2, [r7, #12]
 800a55e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a562:	f023 0304 	bic.w	r3, r3, #4
 800a566:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a568:	2110      	movs	r1, #16
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f7ff fe5e 	bl	800a22c <USB_FlushTxFifo>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d001      	beq.n	800a57a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f7ff fe8a 	bl	800a294 <USB_FlushRxFifo>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d001      	beq.n	800a58a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800a586:	2301      	movs	r3, #1
 800a588:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a58a:	2300      	movs	r3, #0
 800a58c:	613b      	str	r3, [r7, #16]
 800a58e:	e015      	b.n	800a5bc <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	015a      	lsls	r2, r3, #5
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	4413      	add	r3, r2
 800a598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a59c:	461a      	mov	r2, r3
 800a59e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5a2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	015a      	lsls	r2, r3, #5
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	613b      	str	r3, [r7, #16]
 800a5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5be:	693a      	ldr	r2, [r7, #16]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d3e5      	bcc.n	800a590 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5d0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d00b      	beq.n	800a5f6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a5e4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	4a13      	ldr	r2, [pc, #76]	; (800a638 <USB_HostInit+0x16c>)
 800a5ea:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a13      	ldr	r2, [pc, #76]	; (800a63c <USB_HostInit+0x170>)
 800a5f0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a5f4:	e009      	b.n	800a60a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2280      	movs	r2, #128	; 0x80
 800a5fa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4a10      	ldr	r2, [pc, #64]	; (800a640 <USB_HostInit+0x174>)
 800a600:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4a0f      	ldr	r2, [pc, #60]	; (800a644 <USB_HostInit+0x178>)
 800a606:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d105      	bne.n	800a61c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	699b      	ldr	r3, [r3, #24]
 800a614:	f043 0210 	orr.w	r2, r3, #16
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	699a      	ldr	r2, [r3, #24]
 800a620:	4b09      	ldr	r3, [pc, #36]	; (800a648 <USB_HostInit+0x17c>)
 800a622:	4313      	orrs	r3, r2
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800a628:	7dfb      	ldrb	r3, [r7, #23]
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3718      	adds	r7, #24
 800a62e:	46bd      	mov	sp, r7
 800a630:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a634:	b004      	add	sp, #16
 800a636:	4770      	bx	lr
 800a638:	01000200 	.word	0x01000200
 800a63c:	00e00300 	.word	0x00e00300
 800a640:	00600080 	.word	0x00600080
 800a644:	004000e0 	.word	0x004000e0
 800a648:	a3200008 	.word	0xa3200008

0800a64c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b085      	sub	sp, #20
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	460b      	mov	r3, r1
 800a656:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a66a:	f023 0303 	bic.w	r3, r3, #3
 800a66e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	78fb      	ldrb	r3, [r7, #3]
 800a67a:	f003 0303 	and.w	r3, r3, #3
 800a67e:	68f9      	ldr	r1, [r7, #12]
 800a680:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a684:	4313      	orrs	r3, r2
 800a686:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a688:	78fb      	ldrb	r3, [r7, #3]
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d107      	bne.n	800a69e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a694:	461a      	mov	r2, r3
 800a696:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a69a:	6053      	str	r3, [r2, #4]
 800a69c:	e009      	b.n	800a6b2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a69e:	78fb      	ldrb	r3, [r7, #3]
 800a6a0:	2b02      	cmp	r3, #2
 800a6a2:	d106      	bne.n	800a6b2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	f241 7370 	movw	r3, #6000	; 0x1770
 800a6b0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a6b2:	2300      	movs	r3, #0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3714      	adds	r7, #20
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a6e0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	68fa      	ldr	r2, [r7, #12]
 800a6e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a6ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6ee:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a6f0:	2064      	movs	r0, #100	; 0x64
 800a6f2:	f7fa f829 	bl	8004748 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a6fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a702:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a704:	200a      	movs	r0, #10
 800a706:	f7fa f81f 	bl	8004748 <HAL_Delay>

  return HAL_OK;
 800a70a:	2300      	movs	r3, #0
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3710      	adds	r7, #16
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a714:	b480      	push	{r7}
 800a716:	b085      	sub	sp, #20
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	460b      	mov	r3, r1
 800a71e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a724:	2300      	movs	r3, #0
 800a726:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a738:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a740:	2b00      	cmp	r3, #0
 800a742:	d109      	bne.n	800a758 <USB_DriveVbus+0x44>
 800a744:	78fb      	ldrb	r3, [r7, #3]
 800a746:	2b01      	cmp	r3, #1
 800a748:	d106      	bne.n	800a758 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a752:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a756:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a75e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a762:	d109      	bne.n	800a778 <USB_DriveVbus+0x64>
 800a764:	78fb      	ldrb	r3, [r7, #3]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d106      	bne.n	800a778 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a772:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a776:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3714      	adds	r7, #20
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr

0800a786 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a786:	b480      	push	{r7}
 800a788:	b085      	sub	sp, #20
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a792:	2300      	movs	r3, #0
 800a794:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	0c5b      	lsrs	r3, r3, #17
 800a7a4:	f003 0303 	and.w	r3, r3, #3
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3714      	adds	r7, #20
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr

0800a7b4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b085      	sub	sp, #20
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	b29b      	uxth	r3, r3
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3714      	adds	r7, #20
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr
	...

0800a7d8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b088      	sub	sp, #32
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	4608      	mov	r0, r1
 800a7e2:	4611      	mov	r1, r2
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	70fb      	strb	r3, [r7, #3]
 800a7ea:	460b      	mov	r3, r1
 800a7ec:	70bb      	strb	r3, [r7, #2]
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800a7fa:	78fb      	ldrb	r3, [r7, #3]
 800a7fc:	015a      	lsls	r2, r3, #5
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	4413      	add	r3, r2
 800a802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a806:	461a      	mov	r2, r3
 800a808:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a80c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a80e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a812:	2b03      	cmp	r3, #3
 800a814:	d87e      	bhi.n	800a914 <USB_HC_Init+0x13c>
 800a816:	a201      	add	r2, pc, #4	; (adr r2, 800a81c <USB_HC_Init+0x44>)
 800a818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a81c:	0800a82d 	.word	0x0800a82d
 800a820:	0800a8d7 	.word	0x0800a8d7
 800a824:	0800a82d 	.word	0x0800a82d
 800a828:	0800a899 	.word	0x0800a899
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a82c:	78fb      	ldrb	r3, [r7, #3]
 800a82e:	015a      	lsls	r2, r3, #5
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	4413      	add	r3, r2
 800a834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a838:	461a      	mov	r2, r3
 800a83a:	f240 439d 	movw	r3, #1181	; 0x49d
 800a83e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a840:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a844:	2b00      	cmp	r3, #0
 800a846:	da10      	bge.n	800a86a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a848:	78fb      	ldrb	r3, [r7, #3]
 800a84a:	015a      	lsls	r2, r3, #5
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	4413      	add	r3, r2
 800a850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a854:	68db      	ldr	r3, [r3, #12]
 800a856:	78fa      	ldrb	r2, [r7, #3]
 800a858:	0151      	lsls	r1, r2, #5
 800a85a:	693a      	ldr	r2, [r7, #16]
 800a85c:	440a      	add	r2, r1
 800a85e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a866:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800a868:	e057      	b.n	800a91a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a86e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a872:	2b00      	cmp	r3, #0
 800a874:	d051      	beq.n	800a91a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a876:	78fb      	ldrb	r3, [r7, #3]
 800a878:	015a      	lsls	r2, r3, #5
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	4413      	add	r3, r2
 800a87e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a882:	68db      	ldr	r3, [r3, #12]
 800a884:	78fa      	ldrb	r2, [r7, #3]
 800a886:	0151      	lsls	r1, r2, #5
 800a888:	693a      	ldr	r2, [r7, #16]
 800a88a:	440a      	add	r2, r1
 800a88c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a890:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a894:	60d3      	str	r3, [r2, #12]
      break;
 800a896:	e040      	b.n	800a91a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a898:	78fb      	ldrb	r3, [r7, #3]
 800a89a:	015a      	lsls	r2, r3, #5
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	4413      	add	r3, r2
 800a8a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	f240 639d 	movw	r3, #1693	; 0x69d
 800a8aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a8ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	da34      	bge.n	800a91e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a8b4:	78fb      	ldrb	r3, [r7, #3]
 800a8b6:	015a      	lsls	r2, r3, #5
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	4413      	add	r3, r2
 800a8bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8c0:	68db      	ldr	r3, [r3, #12]
 800a8c2:	78fa      	ldrb	r2, [r7, #3]
 800a8c4:	0151      	lsls	r1, r2, #5
 800a8c6:	693a      	ldr	r2, [r7, #16]
 800a8c8:	440a      	add	r2, r1
 800a8ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8d2:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a8d4:	e023      	b.n	800a91e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a8d6:	78fb      	ldrb	r3, [r7, #3]
 800a8d8:	015a      	lsls	r2, r3, #5
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	4413      	add	r3, r2
 800a8de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	f240 2325 	movw	r3, #549	; 0x225
 800a8e8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a8ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	da17      	bge.n	800a922 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a8f2:	78fb      	ldrb	r3, [r7, #3]
 800a8f4:	015a      	lsls	r2, r3, #5
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	78fa      	ldrb	r2, [r7, #3]
 800a902:	0151      	lsls	r1, r2, #5
 800a904:	693a      	ldr	r2, [r7, #16]
 800a906:	440a      	add	r2, r1
 800a908:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a90c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a910:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a912:	e006      	b.n	800a922 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a914:	2301      	movs	r3, #1
 800a916:	77fb      	strb	r3, [r7, #31]
      break;
 800a918:	e004      	b.n	800a924 <USB_HC_Init+0x14c>
      break;
 800a91a:	bf00      	nop
 800a91c:	e002      	b.n	800a924 <USB_HC_Init+0x14c>
      break;
 800a91e:	bf00      	nop
 800a920:	e000      	b.n	800a924 <USB_HC_Init+0x14c>
      break;
 800a922:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a924:	78fb      	ldrb	r3, [r7, #3]
 800a926:	015a      	lsls	r2, r3, #5
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	4413      	add	r3, r2
 800a92c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a930:	68db      	ldr	r3, [r3, #12]
 800a932:	78fa      	ldrb	r2, [r7, #3]
 800a934:	0151      	lsls	r1, r2, #5
 800a936:	693a      	ldr	r2, [r7, #16]
 800a938:	440a      	add	r2, r1
 800a93a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a93e:	f043 0302 	orr.w	r3, r3, #2
 800a942:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a94a:	699a      	ldr	r2, [r3, #24]
 800a94c:	78fb      	ldrb	r3, [r7, #3]
 800a94e:	f003 030f 	and.w	r3, r3, #15
 800a952:	2101      	movs	r1, #1
 800a954:	fa01 f303 	lsl.w	r3, r1, r3
 800a958:	6939      	ldr	r1, [r7, #16]
 800a95a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a95e:	4313      	orrs	r3, r2
 800a960:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	699b      	ldr	r3, [r3, #24]
 800a966:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a96e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a972:	2b00      	cmp	r3, #0
 800a974:	da03      	bge.n	800a97e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a97a:	61bb      	str	r3, [r7, #24]
 800a97c:	e001      	b.n	800a982 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800a97e:	2300      	movs	r3, #0
 800a980:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f7ff feff 	bl	800a786 <USB_GetHostSpeed>
 800a988:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a98a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a98e:	2b02      	cmp	r3, #2
 800a990:	d106      	bne.n	800a9a0 <USB_HC_Init+0x1c8>
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2b02      	cmp	r3, #2
 800a996:	d003      	beq.n	800a9a0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a998:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a99c:	617b      	str	r3, [r7, #20]
 800a99e:	e001      	b.n	800a9a4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a9a4:	787b      	ldrb	r3, [r7, #1]
 800a9a6:	059b      	lsls	r3, r3, #22
 800a9a8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a9ac:	78bb      	ldrb	r3, [r7, #2]
 800a9ae:	02db      	lsls	r3, r3, #11
 800a9b0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a9b4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a9b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a9ba:	049b      	lsls	r3, r3, #18
 800a9bc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a9c0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a9c2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a9c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a9c8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a9ce:	78fb      	ldrb	r3, [r7, #3]
 800a9d0:	0159      	lsls	r1, r3, #5
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	440b      	add	r3, r1
 800a9d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9da:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a9e0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a9e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a9e6:	2b03      	cmp	r3, #3
 800a9e8:	d003      	beq.n	800a9f2 <USB_HC_Init+0x21a>
 800a9ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	d10f      	bne.n	800aa12 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a9f2:	78fb      	ldrb	r3, [r7, #3]
 800a9f4:	015a      	lsls	r2, r3, #5
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	78fa      	ldrb	r2, [r7, #3]
 800aa02:	0151      	lsls	r1, r2, #5
 800aa04:	693a      	ldr	r2, [r7, #16]
 800aa06:	440a      	add	r2, r1
 800aa08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aa10:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800aa12:	7ffb      	ldrb	r3, [r7, #31]
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3720      	adds	r7, #32
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b08c      	sub	sp, #48	; 0x30
 800aa20:	af02      	add	r7, sp, #8
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	4613      	mov	r3, r2
 800aa28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	785b      	ldrb	r3, [r3, #1]
 800aa32:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800aa34:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa38:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d02d      	beq.n	800aaa2 <USB_HC_StartXfer+0x86>
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	791b      	ldrb	r3, [r3, #4]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d129      	bne.n	800aaa2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800aa4e:	79fb      	ldrb	r3, [r7, #7]
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d117      	bne.n	800aa84 <USB_HC_StartXfer+0x68>
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	79db      	ldrb	r3, [r3, #7]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d003      	beq.n	800aa64 <USB_HC_StartXfer+0x48>
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	79db      	ldrb	r3, [r3, #7]
 800aa60:	2b02      	cmp	r3, #2
 800aa62:	d10f      	bne.n	800aa84 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800aa64:	69fb      	ldr	r3, [r7, #28]
 800aa66:	015a      	lsls	r2, r3, #5
 800aa68:	6a3b      	ldr	r3, [r7, #32]
 800aa6a:	4413      	add	r3, r2
 800aa6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	69fa      	ldr	r2, [r7, #28]
 800aa74:	0151      	lsls	r1, r2, #5
 800aa76:	6a3a      	ldr	r2, [r7, #32]
 800aa78:	440a      	add	r2, r1
 800aa7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa82:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800aa84:	79fb      	ldrb	r3, [r7, #7]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d10b      	bne.n	800aaa2 <USB_HC_StartXfer+0x86>
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	795b      	ldrb	r3, [r3, #5]
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d107      	bne.n	800aaa2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	785b      	ldrb	r3, [r3, #1]
 800aa96:	4619      	mov	r1, r3
 800aa98:	68f8      	ldr	r0, [r7, #12]
 800aa9a:	f000 fa0f 	bl	800aebc <USB_DoPing>
      return HAL_OK;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	e0f8      	b.n	800ac94 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	695b      	ldr	r3, [r3, #20]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d018      	beq.n	800aadc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	695b      	ldr	r3, [r3, #20]
 800aaae:	68ba      	ldr	r2, [r7, #8]
 800aab0:	8912      	ldrh	r2, [r2, #8]
 800aab2:	4413      	add	r3, r2
 800aab4:	3b01      	subs	r3, #1
 800aab6:	68ba      	ldr	r2, [r7, #8]
 800aab8:	8912      	ldrh	r2, [r2, #8]
 800aaba:	fbb3 f3f2 	udiv	r3, r3, r2
 800aabe:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800aac0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800aac2:	8b7b      	ldrh	r3, [r7, #26]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d90b      	bls.n	800aae0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800aac8:	8b7b      	ldrh	r3, [r7, #26]
 800aaca:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800aacc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aace:	68ba      	ldr	r2, [r7, #8]
 800aad0:	8912      	ldrh	r2, [r2, #8]
 800aad2:	fb03 f202 	mul.w	r2, r3, r2
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	611a      	str	r2, [r3, #16]
 800aada:	e001      	b.n	800aae0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800aadc:	2301      	movs	r3, #1
 800aade:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	78db      	ldrb	r3, [r3, #3]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d007      	beq.n	800aaf8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800aae8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aaea:	68ba      	ldr	r2, [r7, #8]
 800aaec:	8912      	ldrh	r2, [r2, #8]
 800aaee:	fb03 f202 	mul.w	r2, r3, r2
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	611a      	str	r2, [r3, #16]
 800aaf6:	e003      	b.n	800ab00 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	695a      	ldr	r2, [r3, #20]
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	691b      	ldr	r3, [r3, #16]
 800ab04:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ab08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ab0a:	04d9      	lsls	r1, r3, #19
 800ab0c:	4b63      	ldr	r3, [pc, #396]	; (800ac9c <USB_HC_StartXfer+0x280>)
 800ab0e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ab10:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	7a9b      	ldrb	r3, [r3, #10]
 800ab16:	075b      	lsls	r3, r3, #29
 800ab18:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ab1c:	69f9      	ldr	r1, [r7, #28]
 800ab1e:	0148      	lsls	r0, r1, #5
 800ab20:	6a39      	ldr	r1, [r7, #32]
 800ab22:	4401      	add	r1, r0
 800ab24:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ab28:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ab2a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800ab2c:	79fb      	ldrb	r3, [r7, #7]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d009      	beq.n	800ab46 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	68d9      	ldr	r1, [r3, #12]
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	015a      	lsls	r2, r3, #5
 800ab3a:	6a3b      	ldr	r3, [r7, #32]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab42:	460a      	mov	r2, r1
 800ab44:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800ab46:	6a3b      	ldr	r3, [r7, #32]
 800ab48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab4c:	689b      	ldr	r3, [r3, #8]
 800ab4e:	f003 0301 	and.w	r3, r3, #1
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	bf0c      	ite	eq
 800ab56:	2301      	moveq	r3, #1
 800ab58:	2300      	movne	r3, #0
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	015a      	lsls	r2, r3, #5
 800ab62:	6a3b      	ldr	r3, [r7, #32]
 800ab64:	4413      	add	r3, r2
 800ab66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	69fa      	ldr	r2, [r7, #28]
 800ab6e:	0151      	lsls	r1, r2, #5
 800ab70:	6a3a      	ldr	r2, [r7, #32]
 800ab72:	440a      	add	r2, r1
 800ab74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab78:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ab7c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	015a      	lsls	r2, r3, #5
 800ab82:	6a3b      	ldr	r3, [r7, #32]
 800ab84:	4413      	add	r3, r2
 800ab86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	7e7b      	ldrb	r3, [r7, #25]
 800ab8e:	075b      	lsls	r3, r3, #29
 800ab90:	69f9      	ldr	r1, [r7, #28]
 800ab92:	0148      	lsls	r0, r1, #5
 800ab94:	6a39      	ldr	r1, [r7, #32]
 800ab96:	4401      	add	r1, r0
 800ab98:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	015a      	lsls	r2, r3, #5
 800aba4:	6a3b      	ldr	r3, [r7, #32]
 800aba6:	4413      	add	r3, r2
 800aba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800abb6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	78db      	ldrb	r3, [r3, #3]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d004      	beq.n	800abca <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abc6:	613b      	str	r3, [r7, #16]
 800abc8:	e003      	b.n	800abd2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800abd0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800abd8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	015a      	lsls	r2, r3, #5
 800abde:	6a3b      	ldr	r3, [r7, #32]
 800abe0:	4413      	add	r3, r2
 800abe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abe6:	461a      	mov	r2, r3
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800abec:	79fb      	ldrb	r3, [r7, #7]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d001      	beq.n	800abf6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800abf2:	2300      	movs	r3, #0
 800abf4:	e04e      	b.n	800ac94 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	78db      	ldrb	r3, [r3, #3]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d149      	bne.n	800ac92 <USB_HC_StartXfer+0x276>
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	695b      	ldr	r3, [r3, #20]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d045      	beq.n	800ac92 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	79db      	ldrb	r3, [r3, #7]
 800ac0a:	2b03      	cmp	r3, #3
 800ac0c:	d830      	bhi.n	800ac70 <USB_HC_StartXfer+0x254>
 800ac0e:	a201      	add	r2, pc, #4	; (adr r2, 800ac14 <USB_HC_StartXfer+0x1f8>)
 800ac10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac14:	0800ac25 	.word	0x0800ac25
 800ac18:	0800ac49 	.word	0x0800ac49
 800ac1c:	0800ac25 	.word	0x0800ac25
 800ac20:	0800ac49 	.word	0x0800ac49
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	695b      	ldr	r3, [r3, #20]
 800ac28:	3303      	adds	r3, #3
 800ac2a:	089b      	lsrs	r3, r3, #2
 800ac2c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800ac2e:	8afa      	ldrh	r2, [r7, #22]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d91c      	bls.n	800ac74 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	699b      	ldr	r3, [r3, #24]
 800ac3e:	f043 0220 	orr.w	r2, r3, #32
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	619a      	str	r2, [r3, #24]
        }
        break;
 800ac46:	e015      	b.n	800ac74 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	695b      	ldr	r3, [r3, #20]
 800ac4c:	3303      	adds	r3, #3
 800ac4e:	089b      	lsrs	r3, r3, #2
 800ac50:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ac52:	8afa      	ldrh	r2, [r7, #22]
 800ac54:	6a3b      	ldr	r3, [r7, #32]
 800ac56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac5a:	691b      	ldr	r3, [r3, #16]
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d90a      	bls.n	800ac78 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	699b      	ldr	r3, [r3, #24]
 800ac66:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	619a      	str	r2, [r3, #24]
        }
        break;
 800ac6e:	e003      	b.n	800ac78 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800ac70:	bf00      	nop
 800ac72:	e002      	b.n	800ac7a <USB_HC_StartXfer+0x25e>
        break;
 800ac74:	bf00      	nop
 800ac76:	e000      	b.n	800ac7a <USB_HC_StartXfer+0x25e>
        break;
 800ac78:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	68d9      	ldr	r1, [r3, #12]
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	785a      	ldrb	r2, [r3, #1]
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	695b      	ldr	r3, [r3, #20]
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	2000      	movs	r0, #0
 800ac8a:	9000      	str	r0, [sp, #0]
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	f7ff fb31 	bl	800a2f4 <USB_WritePacket>
  }

  return HAL_OK;
 800ac92:	2300      	movs	r3, #0
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3728      	adds	r7, #40	; 0x28
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}
 800ac9c:	1ff80000 	.word	0x1ff80000

0800aca0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800acb2:	695b      	ldr	r3, [r3, #20]
 800acb4:	b29b      	uxth	r3, r3
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3714      	adds	r7, #20
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr

0800acc2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800acc2:	b480      	push	{r7}
 800acc4:	b089      	sub	sp, #36	; 0x24
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
 800acca:	460b      	mov	r3, r1
 800accc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800acd2:	78fb      	ldrb	r3, [r7, #3]
 800acd4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800acd6:	2300      	movs	r3, #0
 800acd8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800acda:	69bb      	ldr	r3, [r7, #24]
 800acdc:	015a      	lsls	r2, r3, #5
 800acde:	69fb      	ldr	r3, [r7, #28]
 800ace0:	4413      	add	r3, r2
 800ace2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	0c9b      	lsrs	r3, r3, #18
 800acea:	f003 0303 	and.w	r3, r3, #3
 800acee:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	015a      	lsls	r2, r3, #5
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	4413      	add	r3, r2
 800acf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	0fdb      	lsrs	r3, r3, #31
 800ad00:	f003 0301 	and.w	r3, r3, #1
 800ad04:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	689b      	ldr	r3, [r3, #8]
 800ad0a:	f003 0320 	and.w	r3, r3, #32
 800ad0e:	2b20      	cmp	r3, #32
 800ad10:	d104      	bne.n	800ad1c <USB_HC_Halt+0x5a>
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d101      	bne.n	800ad1c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	e0c8      	b.n	800aeae <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d002      	beq.n	800ad28 <USB_HC_Halt+0x66>
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	2b02      	cmp	r3, #2
 800ad26:	d163      	bne.n	800adf0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	015a      	lsls	r2, r3, #5
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	4413      	add	r3, r2
 800ad30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	69ba      	ldr	r2, [r7, #24]
 800ad38:	0151      	lsls	r1, r2, #5
 800ad3a:	69fa      	ldr	r2, [r7, #28]
 800ad3c:	440a      	add	r2, r1
 800ad3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad46:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	689b      	ldr	r3, [r3, #8]
 800ad4c:	f003 0320 	and.w	r3, r3, #32
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	f040 80ab 	bne.w	800aeac <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad5a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d133      	bne.n	800adca <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	015a      	lsls	r2, r3, #5
 800ad66:	69fb      	ldr	r3, [r7, #28]
 800ad68:	4413      	add	r3, r2
 800ad6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	69ba      	ldr	r2, [r7, #24]
 800ad72:	0151      	lsls	r1, r2, #5
 800ad74:	69fa      	ldr	r2, [r7, #28]
 800ad76:	440a      	add	r2, r1
 800ad78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad80:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ad82:	69bb      	ldr	r3, [r7, #24]
 800ad84:	015a      	lsls	r2, r3, #5
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	4413      	add	r3, r2
 800ad8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	69ba      	ldr	r2, [r7, #24]
 800ad92:	0151      	lsls	r1, r2, #5
 800ad94:	69fa      	ldr	r2, [r7, #28]
 800ad96:	440a      	add	r2, r1
 800ad98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ada0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	3301      	adds	r3, #1
 800ada6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800adae:	d81d      	bhi.n	800adec <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800adb0:	69bb      	ldr	r3, [r7, #24]
 800adb2:	015a      	lsls	r2, r3, #5
 800adb4:	69fb      	ldr	r3, [r7, #28]
 800adb6:	4413      	add	r3, r2
 800adb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800adc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800adc6:	d0ec      	beq.n	800ada2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800adc8:	e070      	b.n	800aeac <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	015a      	lsls	r2, r3, #5
 800adce:	69fb      	ldr	r3, [r7, #28]
 800add0:	4413      	add	r3, r2
 800add2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	69ba      	ldr	r2, [r7, #24]
 800adda:	0151      	lsls	r1, r2, #5
 800addc:	69fa      	ldr	r2, [r7, #28]
 800adde:	440a      	add	r2, r1
 800ade0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ade4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ade8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800adea:	e05f      	b.n	800aeac <USB_HC_Halt+0x1ea>
            break;
 800adec:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800adee:	e05d      	b.n	800aeac <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	015a      	lsls	r2, r3, #5
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	4413      	add	r3, r2
 800adf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	69ba      	ldr	r2, [r7, #24]
 800ae00:	0151      	lsls	r1, r2, #5
 800ae02:	69fa      	ldr	r2, [r7, #28]
 800ae04:	440a      	add	r2, r1
 800ae06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae0e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae16:	691b      	ldr	r3, [r3, #16]
 800ae18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d133      	bne.n	800ae88 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	015a      	lsls	r2, r3, #5
 800ae24:	69fb      	ldr	r3, [r7, #28]
 800ae26:	4413      	add	r3, r2
 800ae28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	69ba      	ldr	r2, [r7, #24]
 800ae30:	0151      	lsls	r1, r2, #5
 800ae32:	69fa      	ldr	r2, [r7, #28]
 800ae34:	440a      	add	r2, r1
 800ae36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae3e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ae40:	69bb      	ldr	r3, [r7, #24]
 800ae42:	015a      	lsls	r2, r3, #5
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	4413      	add	r3, r2
 800ae48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	69ba      	ldr	r2, [r7, #24]
 800ae50:	0151      	lsls	r1, r2, #5
 800ae52:	69fa      	ldr	r2, [r7, #28]
 800ae54:	440a      	add	r2, r1
 800ae56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae5e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	3301      	adds	r3, #1
 800ae64:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae6c:	d81d      	bhi.n	800aeaa <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	015a      	lsls	r2, r3, #5
 800ae72:	69fb      	ldr	r3, [r7, #28]
 800ae74:	4413      	add	r3, r2
 800ae76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae84:	d0ec      	beq.n	800ae60 <USB_HC_Halt+0x19e>
 800ae86:	e011      	b.n	800aeac <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ae88:	69bb      	ldr	r3, [r7, #24]
 800ae8a:	015a      	lsls	r2, r3, #5
 800ae8c:	69fb      	ldr	r3, [r7, #28]
 800ae8e:	4413      	add	r3, r2
 800ae90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	69ba      	ldr	r2, [r7, #24]
 800ae98:	0151      	lsls	r1, r2, #5
 800ae9a:	69fa      	ldr	r2, [r7, #28]
 800ae9c:	440a      	add	r2, r1
 800ae9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aea2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aea6:	6013      	str	r3, [r2, #0]
 800aea8:	e000      	b.n	800aeac <USB_HC_Halt+0x1ea>
          break;
 800aeaa:	bf00      	nop
    }
  }

  return HAL_OK;
 800aeac:	2300      	movs	r3, #0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3724      	adds	r7, #36	; 0x24
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr
	...

0800aebc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b087      	sub	sp, #28
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	460b      	mov	r3, r1
 800aec6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800aecc:	78fb      	ldrb	r3, [r7, #3]
 800aece:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800aed0:	2301      	movs	r3, #1
 800aed2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	04da      	lsls	r2, r3, #19
 800aed8:	4b15      	ldr	r3, [pc, #84]	; (800af30 <USB_DoPing+0x74>)
 800aeda:	4013      	ands	r3, r2
 800aedc:	693a      	ldr	r2, [r7, #16]
 800aede:	0151      	lsls	r1, r2, #5
 800aee0:	697a      	ldr	r2, [r7, #20]
 800aee2:	440a      	add	r2, r1
 800aee4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aee8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aeec:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	015a      	lsls	r2, r3, #5
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	4413      	add	r3, r2
 800aef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800af04:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af0c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	015a      	lsls	r2, r3, #5
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	4413      	add	r3, r2
 800af16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af1a:	461a      	mov	r2, r3
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800af20:	2300      	movs	r3, #0
}
 800af22:	4618      	mov	r0, r3
 800af24:	371c      	adds	r7, #28
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr
 800af2e:	bf00      	nop
 800af30:	1ff80000 	.word	0x1ff80000

0800af34 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b088      	sub	sp, #32
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800af3c:	2300      	movs	r3, #0
 800af3e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800af44:	2300      	movs	r3, #0
 800af46:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f7ff f911 	bl	800a170 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800af4e:	2110      	movs	r1, #16
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f7ff f96b 	bl	800a22c <USB_FlushTxFifo>
 800af56:	4603      	mov	r3, r0
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d001      	beq.n	800af60 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800af5c:	2301      	movs	r3, #1
 800af5e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f7ff f997 	bl	800a294 <USB_FlushRxFifo>
 800af66:	4603      	mov	r3, r0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d001      	beq.n	800af70 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800af6c:	2301      	movs	r3, #1
 800af6e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800af70:	2300      	movs	r3, #0
 800af72:	61bb      	str	r3, [r7, #24]
 800af74:	e01f      	b.n	800afb6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	015a      	lsls	r2, r3, #5
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	4413      	add	r3, r2
 800af7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af8c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af94:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800af9c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800af9e:	69bb      	ldr	r3, [r7, #24]
 800afa0:	015a      	lsls	r2, r3, #5
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	4413      	add	r3, r2
 800afa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afaa:	461a      	mov	r2, r3
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	3301      	adds	r3, #1
 800afb4:	61bb      	str	r3, [r7, #24]
 800afb6:	69bb      	ldr	r3, [r7, #24]
 800afb8:	2b0f      	cmp	r3, #15
 800afba:	d9dc      	bls.n	800af76 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800afbc:	2300      	movs	r3, #0
 800afbe:	61bb      	str	r3, [r7, #24]
 800afc0:	e034      	b.n	800b02c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	015a      	lsls	r2, r3, #5
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	4413      	add	r3, r2
 800afca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800afd8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800afe0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800afe8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	015a      	lsls	r2, r3, #5
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	4413      	add	r3, r2
 800aff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aff6:	461a      	mov	r2, r3
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	3301      	adds	r3, #1
 800b000:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b008:	d80c      	bhi.n	800b024 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b00a:	69bb      	ldr	r3, [r7, #24]
 800b00c:	015a      	lsls	r2, r3, #5
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	4413      	add	r3, r2
 800b012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b01c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b020:	d0ec      	beq.n	800affc <USB_StopHost+0xc8>
 800b022:	e000      	b.n	800b026 <USB_StopHost+0xf2>
        break;
 800b024:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	3301      	adds	r3, #1
 800b02a:	61bb      	str	r3, [r7, #24]
 800b02c:	69bb      	ldr	r3, [r7, #24]
 800b02e:	2b0f      	cmp	r3, #15
 800b030:	d9c7      	bls.n	800afc2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b038:	461a      	mov	r2, r3
 800b03a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b03e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b046:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f7ff f880 	bl	800a14e <USB_EnableGlobalInt>

  return ret;
 800b04e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b050:	4618      	mov	r0, r3
 800b052:	3720      	adds	r7, #32
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b05c:	4904      	ldr	r1, [pc, #16]	; (800b070 <MX_FATFS_Init+0x18>)
 800b05e:	4805      	ldr	r0, [pc, #20]	; (800b074 <MX_FATFS_Init+0x1c>)
 800b060:	f005 fd0c 	bl	8010a7c <FATFS_LinkDriver>
 800b064:	4603      	mov	r3, r0
 800b066:	461a      	mov	r2, r3
 800b068:	4b03      	ldr	r3, [pc, #12]	; (800b078 <MX_FATFS_Init+0x20>)
 800b06a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b06c:	bf00      	nop
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	20002cd0 	.word	0x20002cd0
 800b074:	20000028 	.word	0x20000028
 800b078:	20002ccc 	.word	0x20002ccc

0800b07c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b07c:	b480      	push	{r7}
 800b07e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b080:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b082:	4618      	mov	r0, r3
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr

0800b08c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	4603      	mov	r3, r0
 800b094:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
	Stat = (SD_SPI_Init()) ? STA_NOINIT : RES_OK;
 800b096:	f7f8 fd69 	bl	8003b6c <SD_SPI_Init>
 800b09a:	4603      	mov	r3, r0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	bf14      	ite	ne
 800b0a0:	2301      	movne	r3, #1
 800b0a2:	2300      	moveq	r3, #0
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	4b04      	ldr	r3, [pc, #16]	; (800b0bc <USER_initialize+0x30>)
 800b0aa:	701a      	strb	r2, [r3, #0]
//	 HAL_UART_Transmit(&huart3,(uint8_t*)"USER_initialize\n\r",17,0x1000);
//
//	 SD_PowerOn();
//	 if(sd_ini()==0) {Stat &= ~STA_NOINIT;} 		//Сбросим статус STA_NOINIT
    return Stat;
 800b0ac:	4b03      	ldr	r3, [pc, #12]	; (800b0bc <USER_initialize+0x30>)
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3708      	adds	r7, #8
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	20000025 	.word	0x20000025

0800b0c0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
	//HAL_UART_Transmit(&huart3,(uint8_t*)"USER_status\n\r",13,0x1000);
	if (pdrv) return STA_NOINIT;
 800b0ca:	79fb      	ldrb	r3, [r7, #7]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d001      	beq.n	800b0d4 <USER_status+0x14>
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	e002      	b.n	800b0da <USER_status+0x1a>
    return Stat;
 800b0d4:	4b04      	ldr	r3, [pc, #16]	; (800b0e8 <USER_status+0x28>)
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	370c      	adds	r7, #12
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr
 800b0e6:	bf00      	nop
 800b0e8:	20000025 	.word	0x20000025

0800b0ec <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60b9      	str	r1, [r7, #8]
 800b0f4:	607a      	str	r2, [r7, #4]
 800b0f6:	603b      	str	r3, [r7, #0]
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	73fb      	strb	r3, [r7, #15]
//
//	SPI_Release();
//
//	return count ? RES_ERROR : RES_OK;

	if (pdrv || ( ! count)) return RES_PARERR;
 800b0fc:	7bfb      	ldrb	r3, [r7, #15]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d102      	bne.n	800b108 <USER_read+0x1c>
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d101      	bne.n	800b10c <USER_read+0x20>
 800b108:	2304      	movs	r3, #4
 800b10a:	e023      	b.n	800b154 <USER_read+0x68>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b10c:	4b13      	ldr	r3, [pc, #76]	; (800b15c <USER_read+0x70>)
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	b2db      	uxtb	r3, r3
 800b112:	f003 0301 	and.w	r3, r3, #1
 800b116:	2b00      	cmp	r3, #0
 800b118:	d001      	beq.n	800b11e <USER_read+0x32>
 800b11a:	2303      	movs	r3, #3
 800b11c:	e01a      	b.n	800b154 <USER_read+0x68>

			if ( ! (sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 800b11e:	4b10      	ldr	r3, [pc, #64]	; (800b160 <USER_read+0x74>)
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	b2db      	uxtb	r3, r3
 800b124:	f003 0304 	and.w	r3, r3, #4
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d102      	bne.n	800b132 <USER_read+0x46>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	025b      	lsls	r3, r3, #9
 800b130:	607b      	str	r3, [r7, #4]
			if (count == 1) /* Single block read */
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	2b01      	cmp	r3, #1
 800b136:	d105      	bne.n	800b144 <USER_read+0x58>
			{
				SD_SPI_Read_Block(buff, sector);
 800b138:	6879      	ldr	r1, [r7, #4]
 800b13a:	68b8      	ldr	r0, [r7, #8]
 800b13c:	f7f8 fec4 	bl	8003ec8 <SD_SPI_Read_Block>
				count = 0;
 800b140:	2300      	movs	r3, #0
 800b142:	603b      	str	r3, [r7, #0]
			}
			else /* Multiple block read */
			{
			}
			SPI_Release();
 800b144:	f7f8 fe2a 	bl	8003d9c <SPI_Release>
			return count ? RES_ERROR : RES_OK;
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	bf14      	ite	ne
 800b14e:	2301      	movne	r3, #1
 800b150:	2300      	moveq	r3, #0
 800b152:	b2db      	uxtb	r3, r3

   // return RES_OK;
  /* USER CODE END READ */
}
 800b154:	4618      	mov	r0, r3
 800b156:	3710      	adds	r7, #16
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}
 800b15c:	20000025 	.word	0x20000025
 800b160:	2000292c 	.word	0x2000292c

0800b164 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60b9      	str	r1, [r7, #8]
 800b16c:	607a      	str	r2, [r7, #4]
 800b16e:	603b      	str	r3, [r7, #0]
 800b170:	4603      	mov	r3, r0
 800b172:	73fb      	strb	r3, [r7, #15]
  /* USER CODE HERE */
//	HAL_UART_Transmit(&huart3,(uint8_t*)"USER_write\n\r",12,0x1000);
//	sprintf(str1,"sector: %lu\n\r",sector);
//	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);

	if (pdrv || !count) return RES_PARERR;
 800b174:	7bfb      	ldrb	r3, [r7, #15]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d102      	bne.n	800b180 <USER_write+0x1c>
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d101      	bne.n	800b184 <USER_write+0x20>
 800b180:	2304      	movs	r3, #4
 800b182:	e02c      	b.n	800b1de <USER_write+0x7a>
			if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b184:	4b18      	ldr	r3, [pc, #96]	; (800b1e8 <USER_write+0x84>)
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	f003 0301 	and.w	r3, r3, #1
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d001      	beq.n	800b196 <USER_write+0x32>
 800b192:	2303      	movs	r3, #3
 800b194:	e023      	b.n	800b1de <USER_write+0x7a>
			if (Stat & STA_PROTECT) return RES_WRPRT;
 800b196:	4b14      	ldr	r3, [pc, #80]	; (800b1e8 <USER_write+0x84>)
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	b2db      	uxtb	r3, r3
 800b19c:	f003 0304 	and.w	r3, r3, #4
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d001      	beq.n	800b1a8 <USER_write+0x44>
 800b1a4:	2302      	movs	r3, #2
 800b1a6:	e01a      	b.n	800b1de <USER_write+0x7a>
			if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 800b1a8:	4b10      	ldr	r3, [pc, #64]	; (800b1ec <USER_write+0x88>)
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	f003 0304 	and.w	r3, r3, #4
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d102      	bne.n	800b1bc <USER_write+0x58>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	025b      	lsls	r3, r3, #9
 800b1ba:	607b      	str	r3, [r7, #4]
			if (count == 1) /* Single block read */
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d105      	bne.n	800b1ce <USER_write+0x6a>
			{
				SD_SPI_Write_Block((BYTE*)buff, sector);
 800b1c2:	6879      	ldr	r1, [r7, #4]
 800b1c4:	68b8      	ldr	r0, [r7, #8]
 800b1c6:	f7f8 fec5 	bl	8003f54 <SD_SPI_Write_Block>
				count = 0;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	603b      	str	r3, [r7, #0]
			}
			else /* Multiple block read */
			{
			}
			SPI_Release();
 800b1ce:	f7f8 fde5 	bl	8003d9c <SPI_Release>
			return count ? RES_ERROR : RES_OK;
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	bf14      	ite	ne
 800b1d8:	2301      	movne	r3, #1
 800b1da:	2300      	moveq	r3, #0
 800b1dc:	b2db      	uxtb	r3, r3

    //return RES_OK;
  /* USER CODE END WRITE */
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3710      	adds	r7, #16
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	20000025 	.word	0x20000025
 800b1ec:	2000292c 	.word	0x2000292c

0800b1f0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	603a      	str	r2, [r7, #0]
 800b1fa:	71fb      	strb	r3, [r7, #7]
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	71bb      	strb	r3, [r7, #6]
//
//    SPI_Release();
//
//    return res;

	DRESULT vResult = RES_ERROR;
 800b200:	2301      	movs	r3, #1
 800b202:	73fb      	strb	r3, [r7, #15]

		    if (pdrv) return RES_PARERR;
 800b204:	79fb      	ldrb	r3, [r7, #7]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d001      	beq.n	800b20e <USER_ioctl+0x1e>
 800b20a:	2304      	movs	r3, #4
 800b20c:	e02b      	b.n	800b266 <USER_ioctl+0x76>
				if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b20e:	4b18      	ldr	r3, [pc, #96]	; (800b270 <USER_ioctl+0x80>)
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	b2db      	uxtb	r3, r3
 800b214:	f003 0301 	and.w	r3, r3, #1
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d001      	beq.n	800b220 <USER_ioctl+0x30>
 800b21c:	2303      	movs	r3, #3
 800b21e:	e022      	b.n	800b266 <USER_ioctl+0x76>
				vResult = RES_ERROR;
 800b220:	2301      	movs	r3, #1
 800b222:	73fb      	strb	r3, [r7, #15]

				switch (cmd)
 800b224:	79bb      	ldrb	r3, [r7, #6]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d002      	beq.n	800b230 <USER_ioctl+0x40>
 800b22a:	2b02      	cmp	r3, #2
 800b22c:	d00d      	beq.n	800b24a <USER_ioctl+0x5a>
 800b22e:	e013      	b.n	800b258 <USER_ioctl+0x68>
				{
					case CTRL_SYNC : /* Flush dirty buffer if present */
									SD_SELECT;
 800b230:	2200      	movs	r2, #0
 800b232:	2108      	movs	r1, #8
 800b234:	480f      	ldr	r0, [pc, #60]	; (800b274 <USER_ioctl+0x84>)
 800b236:	f7fa f95b 	bl	80054f0 <HAL_GPIO_WritePin>
									if ( ! SD_SPI_WaitingForReadiness())
 800b23a:	f7f8 fdb6 	bl	8003daa <SD_SPI_WaitingForReadiness>
 800b23e:	4603      	mov	r3, r0
 800b240:	2b00      	cmp	r3, #0
 800b242:	d10c      	bne.n	800b25e <USER_ioctl+0x6e>
									vResult = RES_OK;
 800b244:	2300      	movs	r3, #0
 800b246:	73fb      	strb	r3, [r7, #15]
										break;
 800b248:	e009      	b.n	800b25e <USER_ioctl+0x6e>

					case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
									*(WORD*)buff = 512;
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b250:	801a      	strh	r2, [r3, #0]
									vResult = RES_OK;
 800b252:	2300      	movs	r3, #0
 800b254:	73fb      	strb	r3, [r7, #15]
										break;
 800b256:	e003      	b.n	800b260 <USER_ioctl+0x70>

					default:
						vResult = RES_PARERR;
 800b258:	2304      	movs	r3, #4
 800b25a:	73fb      	strb	r3, [r7, #15]
 800b25c:	e000      	b.n	800b260 <USER_ioctl+0x70>
										break;
 800b25e:	bf00      	nop
				}

				SPI_Release();
 800b260:	f7f8 fd9c 	bl	8003d9c <SPI_Release>

				return vResult;
 800b264:	7bfb      	ldrb	r3, [r7, #15]
   // return res;
  /* USER CODE END IOCTL */
}
 800b266:	4618      	mov	r0, r3
 800b268:	3710      	adds	r7, #16
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	20000025 	.word	0x20000025
 800b274:	40020000 	.word	0x40020000

0800b278 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b278:	b590      	push	{r4, r7, lr}
 800b27a:	b089      	sub	sp, #36	; 0x24
 800b27c:	af04      	add	r7, sp, #16
 800b27e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800b280:	2301      	movs	r3, #1
 800b282:	2202      	movs	r2, #2
 800b284:	2102      	movs	r1, #2
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 fc66 	bl	800bb58 <USBH_FindInterface>
 800b28c:	4603      	mov	r3, r0
 800b28e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b290:	7bfb      	ldrb	r3, [r7, #15]
 800b292:	2bff      	cmp	r3, #255	; 0xff
 800b294:	d002      	beq.n	800b29c <USBH_CDC_InterfaceInit+0x24>
 800b296:	7bfb      	ldrb	r3, [r7, #15]
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d901      	bls.n	800b2a0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b29c:	2302      	movs	r3, #2
 800b29e:	e13d      	b.n	800b51c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800b2a0:	7bfb      	ldrb	r3, [r7, #15]
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 fc3b 	bl	800bb20 <USBH_SelectInterface>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b2ae:	7bbb      	ldrb	r3, [r7, #14]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d001      	beq.n	800b2b8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800b2b4:	2302      	movs	r3, #2
 800b2b6:	e131      	b.n	800b51c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b2be:	2050      	movs	r0, #80	; 0x50
 800b2c0:	f006 f82a 	bl	8011318 <malloc>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2ce:	69db      	ldr	r3, [r3, #28]
 800b2d0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d101      	bne.n	800b2dc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800b2d8:	2302      	movs	r3, #2
 800b2da:	e11f      	b.n	800b51c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800b2dc:	2250      	movs	r2, #80	; 0x50
 800b2de:	2100      	movs	r1, #0
 800b2e0:	68b8      	ldr	r0, [r7, #8]
 800b2e2:	f006 f829 	bl	8011338 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800b2e6:	7bfb      	ldrb	r3, [r7, #15]
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	211a      	movs	r1, #26
 800b2ec:	fb01 f303 	mul.w	r3, r1, r3
 800b2f0:	4413      	add	r3, r2
 800b2f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	b25b      	sxtb	r3, r3
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	da15      	bge.n	800b32a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b2fe:	7bfb      	ldrb	r3, [r7, #15]
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	211a      	movs	r1, #26
 800b304:	fb01 f303 	mul.w	r3, r1, r3
 800b308:	4413      	add	r3, r2
 800b30a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b30e:	781a      	ldrb	r2, [r3, #0]
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b314:	7bfb      	ldrb	r3, [r7, #15]
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	211a      	movs	r1, #26
 800b31a:	fb01 f303 	mul.w	r3, r1, r3
 800b31e:	4413      	add	r3, r2
 800b320:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b324:	881a      	ldrh	r2, [r3, #0]
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	785b      	ldrb	r3, [r3, #1]
 800b32e:	4619      	mov	r1, r3
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f001 ff2c 	bl	800d18e <USBH_AllocPipe>
 800b336:	4603      	mov	r3, r0
 800b338:	461a      	mov	r2, r3
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	7819      	ldrb	r1, [r3, #0]
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	7858      	ldrb	r0, [r3, #1]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b352:	68ba      	ldr	r2, [r7, #8]
 800b354:	8952      	ldrh	r2, [r2, #10]
 800b356:	9202      	str	r2, [sp, #8]
 800b358:	2203      	movs	r2, #3
 800b35a:	9201      	str	r2, [sp, #4]
 800b35c:	9300      	str	r3, [sp, #0]
 800b35e:	4623      	mov	r3, r4
 800b360:	4602      	mov	r2, r0
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f001 fee4 	bl	800d130 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	2200      	movs	r2, #0
 800b36e:	4619      	mov	r1, r3
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f005 ff23 	bl	80111bc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800b376:	2300      	movs	r3, #0
 800b378:	2200      	movs	r2, #0
 800b37a:	210a      	movs	r1, #10
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 fbeb 	bl	800bb58 <USBH_FindInterface>
 800b382:	4603      	mov	r3, r0
 800b384:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b386:	7bfb      	ldrb	r3, [r7, #15]
 800b388:	2bff      	cmp	r3, #255	; 0xff
 800b38a:	d002      	beq.n	800b392 <USBH_CDC_InterfaceInit+0x11a>
 800b38c:	7bfb      	ldrb	r3, [r7, #15]
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d901      	bls.n	800b396 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b392:	2302      	movs	r3, #2
 800b394:	e0c2      	b.n	800b51c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800b396:	7bfb      	ldrb	r3, [r7, #15]
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	211a      	movs	r1, #26
 800b39c:	fb01 f303 	mul.w	r3, r1, r3
 800b3a0:	4413      	add	r3, r2
 800b3a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	b25b      	sxtb	r3, r3
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	da16      	bge.n	800b3dc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b3ae:	7bfb      	ldrb	r3, [r7, #15]
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	211a      	movs	r1, #26
 800b3b4:	fb01 f303 	mul.w	r3, r1, r3
 800b3b8:	4413      	add	r3, r2
 800b3ba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b3be:	781a      	ldrb	r2, [r3, #0]
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b3c4:	7bfb      	ldrb	r3, [r7, #15]
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	211a      	movs	r1, #26
 800b3ca:	fb01 f303 	mul.w	r3, r1, r3
 800b3ce:	4413      	add	r3, r2
 800b3d0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b3d4:	881a      	ldrh	r2, [r3, #0]
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	835a      	strh	r2, [r3, #26]
 800b3da:	e015      	b.n	800b408 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b3dc:	7bfb      	ldrb	r3, [r7, #15]
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	211a      	movs	r1, #26
 800b3e2:	fb01 f303 	mul.w	r3, r1, r3
 800b3e6:	4413      	add	r3, r2
 800b3e8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b3ec:	781a      	ldrb	r2, [r3, #0]
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b3f2:	7bfb      	ldrb	r3, [r7, #15]
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	211a      	movs	r1, #26
 800b3f8:	fb01 f303 	mul.w	r3, r1, r3
 800b3fc:	4413      	add	r3, r2
 800b3fe:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b402:	881a      	ldrh	r2, [r3, #0]
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800b408:	7bfb      	ldrb	r3, [r7, #15]
 800b40a:	687a      	ldr	r2, [r7, #4]
 800b40c:	211a      	movs	r1, #26
 800b40e:	fb01 f303 	mul.w	r3, r1, r3
 800b412:	4413      	add	r3, r2
 800b414:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	b25b      	sxtb	r3, r3
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	da16      	bge.n	800b44e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b420:	7bfb      	ldrb	r3, [r7, #15]
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	211a      	movs	r1, #26
 800b426:	fb01 f303 	mul.w	r3, r1, r3
 800b42a:	4413      	add	r3, r2
 800b42c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b430:	781a      	ldrb	r2, [r3, #0]
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b436:	7bfb      	ldrb	r3, [r7, #15]
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	211a      	movs	r1, #26
 800b43c:	fb01 f303 	mul.w	r3, r1, r3
 800b440:	4413      	add	r3, r2
 800b442:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b446:	881a      	ldrh	r2, [r3, #0]
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	835a      	strh	r2, [r3, #26]
 800b44c:	e015      	b.n	800b47a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b44e:	7bfb      	ldrb	r3, [r7, #15]
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	211a      	movs	r1, #26
 800b454:	fb01 f303 	mul.w	r3, r1, r3
 800b458:	4413      	add	r3, r2
 800b45a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b45e:	781a      	ldrb	r2, [r3, #0]
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b464:	7bfb      	ldrb	r3, [r7, #15]
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	211a      	movs	r1, #26
 800b46a:	fb01 f303 	mul.w	r3, r1, r3
 800b46e:	4413      	add	r3, r2
 800b470:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b474:	881a      	ldrh	r2, [r3, #0]
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	7b9b      	ldrb	r3, [r3, #14]
 800b47e:	4619      	mov	r1, r3
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f001 fe84 	bl	800d18e <USBH_AllocPipe>
 800b486:	4603      	mov	r3, r0
 800b488:	461a      	mov	r2, r3
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	7bdb      	ldrb	r3, [r3, #15]
 800b492:	4619      	mov	r1, r3
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f001 fe7a 	bl	800d18e <USBH_AllocPipe>
 800b49a:	4603      	mov	r3, r0
 800b49c:	461a      	mov	r2, r3
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	7b59      	ldrb	r1, [r3, #13]
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	7b98      	ldrb	r0, [r3, #14]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b4b6:	68ba      	ldr	r2, [r7, #8]
 800b4b8:	8b12      	ldrh	r2, [r2, #24]
 800b4ba:	9202      	str	r2, [sp, #8]
 800b4bc:	2202      	movs	r2, #2
 800b4be:	9201      	str	r2, [sp, #4]
 800b4c0:	9300      	str	r3, [sp, #0]
 800b4c2:	4623      	mov	r3, r4
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f001 fe32 	bl	800d130 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	7b19      	ldrb	r1, [r3, #12]
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	7bd8      	ldrb	r0, [r3, #15]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b4e0:	68ba      	ldr	r2, [r7, #8]
 800b4e2:	8b52      	ldrh	r2, [r2, #26]
 800b4e4:	9202      	str	r2, [sp, #8]
 800b4e6:	2202      	movs	r2, #2
 800b4e8:	9201      	str	r2, [sp, #4]
 800b4ea:	9300      	str	r3, [sp, #0]
 800b4ec:	4623      	mov	r3, r4
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f001 fe1d 	bl	800d130 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	7b5b      	ldrb	r3, [r3, #13]
 800b502:	2200      	movs	r2, #0
 800b504:	4619      	mov	r1, r3
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f005 fe58 	bl	80111bc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	7b1b      	ldrb	r3, [r3, #12]
 800b510:	2200      	movs	r2, #0
 800b512:	4619      	mov	r1, r3
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f005 fe51 	bl	80111bc <USBH_LL_SetToggle>

  return USBH_OK;
 800b51a:	2300      	movs	r3, #0
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3714      	adds	r7, #20
 800b520:	46bd      	mov	sp, r7
 800b522:	bd90      	pop	{r4, r7, pc}

0800b524 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b532:	69db      	ldr	r3, [r3, #28]
 800b534:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d00e      	beq.n	800b55c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	4619      	mov	r1, r3
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f001 fe12 	bl	800d16e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	4619      	mov	r1, r3
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f001 fe3d 	bl	800d1d0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2200      	movs	r2, #0
 800b55a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	7b1b      	ldrb	r3, [r3, #12]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d00e      	beq.n	800b582 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	7b1b      	ldrb	r3, [r3, #12]
 800b568:	4619      	mov	r1, r3
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f001 fdff 	bl	800d16e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	7b1b      	ldrb	r3, [r3, #12]
 800b574:	4619      	mov	r1, r3
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f001 fe2a 	bl	800d1d0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2200      	movs	r2, #0
 800b580:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	7b5b      	ldrb	r3, [r3, #13]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d00e      	beq.n	800b5a8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	7b5b      	ldrb	r3, [r3, #13]
 800b58e:	4619      	mov	r1, r3
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f001 fdec 	bl	800d16e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	7b5b      	ldrb	r3, [r3, #13]
 800b59a:	4619      	mov	r1, r3
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f001 fe17 	bl	800d1d0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5ae:	69db      	ldr	r3, [r3, #28]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d00b      	beq.n	800b5cc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5ba:	69db      	ldr	r3, [r3, #28]
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f005 feb3 	bl	8011328 <free>
    phost->pActiveClass->pData = 0U;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b5cc:	2300      	movs	r3, #0
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3710      	adds	r7, #16
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}

0800b5d6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b5d6:	b580      	push	{r7, lr}
 800b5d8:	b084      	sub	sp, #16
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5e4:	69db      	ldr	r3, [r3, #28]
 800b5e6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	3340      	adds	r3, #64	; 0x40
 800b5ec:	4619      	mov	r1, r3
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 f8b1 	bl	800b756 <GetLineCoding>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800b5f8:	7afb      	ldrb	r3, [r7, #11]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d105      	bne.n	800b60a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b604:	2102      	movs	r1, #2
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800b60a:	7afb      	ldrb	r3, [r7, #11]
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3710      	adds	r7, #16
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b084      	sub	sp, #16
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b61c:	2301      	movs	r3, #1
 800b61e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800b620:	2300      	movs	r3, #0
 800b622:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b62a:	69db      	ldr	r3, [r3, #28]
 800b62c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b634:	2b04      	cmp	r3, #4
 800b636:	d877      	bhi.n	800b728 <USBH_CDC_Process+0x114>
 800b638:	a201      	add	r2, pc, #4	; (adr r2, 800b640 <USBH_CDC_Process+0x2c>)
 800b63a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b63e:	bf00      	nop
 800b640:	0800b655 	.word	0x0800b655
 800b644:	0800b65b 	.word	0x0800b65b
 800b648:	0800b68b 	.word	0x0800b68b
 800b64c:	0800b6ff 	.word	0x0800b6ff
 800b650:	0800b70d 	.word	0x0800b70d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800b654:	2300      	movs	r3, #0
 800b656:	73fb      	strb	r3, [r7, #15]
      break;
 800b658:	e06d      	b.n	800b736 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b65e:	4619      	mov	r1, r3
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 f897 	bl	800b794 <SetLineCoding>
 800b666:	4603      	mov	r3, r0
 800b668:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b66a:	7bbb      	ldrb	r3, [r7, #14]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d104      	bne.n	800b67a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	2202      	movs	r2, #2
 800b674:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b678:	e058      	b.n	800b72c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800b67a:	7bbb      	ldrb	r3, [r7, #14]
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d055      	beq.n	800b72c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	2204      	movs	r2, #4
 800b684:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b688:	e050      	b.n	800b72c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	3340      	adds	r3, #64	; 0x40
 800b68e:	4619      	mov	r1, r3
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 f860 	bl	800b756 <GetLineCoding>
 800b696:	4603      	mov	r3, r0
 800b698:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b69a:	7bbb      	ldrb	r3, [r7, #14]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d126      	bne.n	800b6ee <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6b2:	791b      	ldrb	r3, [r3, #4]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d13b      	bne.n	800b730 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6c2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d133      	bne.n	800b730 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6d2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d12b      	bne.n	800b730 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6e0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d124      	bne.n	800b730 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 f958 	bl	800b99c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b6ec:	e020      	b.n	800b730 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800b6ee:	7bbb      	ldrb	r3, [r7, #14]
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d01d      	beq.n	800b730 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	2204      	movs	r2, #4
 800b6f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b6fc:	e018      	b.n	800b730 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 f867 	bl	800b7d2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f000 f8da 	bl	800b8be <CDC_ProcessReception>
      break;
 800b70a:	e014      	b.n	800b736 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800b70c:	2100      	movs	r1, #0
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 ffef 	bl	800c6f2 <USBH_ClrFeature>
 800b714:	4603      	mov	r3, r0
 800b716:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b718:	7bbb      	ldrb	r3, [r7, #14]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d10a      	bne.n	800b734 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	2200      	movs	r2, #0
 800b722:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800b726:	e005      	b.n	800b734 <USBH_CDC_Process+0x120>

    default:
      break;
 800b728:	bf00      	nop
 800b72a:	e004      	b.n	800b736 <USBH_CDC_Process+0x122>
      break;
 800b72c:	bf00      	nop
 800b72e:	e002      	b.n	800b736 <USBH_CDC_Process+0x122>
      break;
 800b730:	bf00      	nop
 800b732:	e000      	b.n	800b736 <USBH_CDC_Process+0x122>
      break;
 800b734:	bf00      	nop

  }

  return status;
 800b736:	7bfb      	ldrb	r3, [r7, #15]
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3710      	adds	r7, #16
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b748:	2300      	movs	r3, #0
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	370c      	adds	r7, #12
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr

0800b756 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800b756:	b580      	push	{r7, lr}
 800b758:	b082      	sub	sp, #8
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
 800b75e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	22a1      	movs	r2, #161	; 0xa1
 800b764:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2221      	movs	r2, #33	; 0x21
 800b76a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2200      	movs	r2, #0
 800b776:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2207      	movs	r2, #7
 800b77c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	2207      	movs	r2, #7
 800b782:	4619      	mov	r1, r3
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f001 fa81 	bl	800cc8c <USBH_CtlReq>
 800b78a:	4603      	mov	r3, r0
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3708      	adds	r7, #8
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2221      	movs	r2, #33	; 0x21
 800b7a2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2220      	movs	r2, #32
 800b7a8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2207      	movs	r2, #7
 800b7ba:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	2207      	movs	r2, #7
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f001 fa62 	bl	800cc8c <USBH_CtlReq>
 800b7c8:	4603      	mov	r3, r0
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3708      	adds	r7, #8
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}

0800b7d2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800b7d2:	b580      	push	{r7, lr}
 800b7d4:	b086      	sub	sp, #24
 800b7d6:	af02      	add	r7, sp, #8
 800b7d8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7e0:	69db      	ldr	r3, [r3, #28]
 800b7e2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d002      	beq.n	800b7f8 <CDC_ProcessTransmission+0x26>
 800b7f2:	2b02      	cmp	r3, #2
 800b7f4:	d023      	beq.n	800b83e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800b7f6:	e05e      	b.n	800b8b6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fc:	68fa      	ldr	r2, [r7, #12]
 800b7fe:	8b12      	ldrh	r2, [r2, #24]
 800b800:	4293      	cmp	r3, r2
 800b802:	d90b      	bls.n	800b81c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	69d9      	ldr	r1, [r3, #28]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	8b1a      	ldrh	r2, [r3, #24]
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	7b5b      	ldrb	r3, [r3, #13]
 800b810:	2001      	movs	r0, #1
 800b812:	9000      	str	r0, [sp, #0]
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f001 fc48 	bl	800d0aa <USBH_BulkSendData>
 800b81a:	e00b      	b.n	800b834 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800b824:	b29a      	uxth	r2, r3
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	7b5b      	ldrb	r3, [r3, #13]
 800b82a:	2001      	movs	r0, #1
 800b82c:	9000      	str	r0, [sp, #0]
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f001 fc3b 	bl	800d0aa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2202      	movs	r2, #2
 800b838:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b83c:	e03b      	b.n	800b8b6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	7b5b      	ldrb	r3, [r3, #13]
 800b842:	4619      	mov	r1, r3
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f005 fc8f 	bl	8011168 <USBH_LL_GetURBState>
 800b84a:	4603      	mov	r3, r0
 800b84c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800b84e:	7afb      	ldrb	r3, [r7, #11]
 800b850:	2b01      	cmp	r3, #1
 800b852:	d128      	bne.n	800b8a6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b858:	68fa      	ldr	r2, [r7, #12]
 800b85a:	8b12      	ldrh	r2, [r2, #24]
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d90e      	bls.n	800b87e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	8b12      	ldrh	r2, [r2, #24]
 800b868:	1a9a      	subs	r2, r3, r2
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	69db      	ldr	r3, [r3, #28]
 800b872:	68fa      	ldr	r2, [r7, #12]
 800b874:	8b12      	ldrh	r2, [r2, #24]
 800b876:	441a      	add	r2, r3
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	61da      	str	r2, [r3, #28]
 800b87c:	e002      	b.n	800b884 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2200      	movs	r2, #0
 800b882:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d004      	beq.n	800b896 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2201      	movs	r2, #1
 800b890:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b894:	e00e      	b.n	800b8b4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2200      	movs	r2, #0
 800b89a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 f868 	bl	800b974 <USBH_CDC_TransmitCallback>
      break;
 800b8a4:	e006      	b.n	800b8b4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800b8a6:	7afb      	ldrb	r3, [r7, #11]
 800b8a8:	2b02      	cmp	r3, #2
 800b8aa:	d103      	bne.n	800b8b4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b8b4:	bf00      	nop
  }
}
 800b8b6:	bf00      	nop
 800b8b8:	3710      	adds	r7, #16
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}

0800b8be <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800b8be:	b580      	push	{r7, lr}
 800b8c0:	b086      	sub	sp, #24
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8cc:	69db      	ldr	r3, [r3, #28]
 800b8ce:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800b8da:	2b03      	cmp	r3, #3
 800b8dc:	d002      	beq.n	800b8e4 <CDC_ProcessReception+0x26>
 800b8de:	2b04      	cmp	r3, #4
 800b8e0:	d00e      	beq.n	800b900 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800b8e2:	e043      	b.n	800b96c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	6a19      	ldr	r1, [r3, #32]
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	8b5a      	ldrh	r2, [r3, #26]
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	7b1b      	ldrb	r3, [r3, #12]
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f001 fbff 	bl	800d0f4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	2204      	movs	r2, #4
 800b8fa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b8fe:	e035      	b.n	800b96c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	7b1b      	ldrb	r3, [r3, #12]
 800b904:	4619      	mov	r1, r3
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f005 fc2e 	bl	8011168 <USBH_LL_GetURBState>
 800b90c:	4603      	mov	r3, r0
 800b90e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800b910:	7cfb      	ldrb	r3, [r7, #19]
 800b912:	2b01      	cmp	r3, #1
 800b914:	d129      	bne.n	800b96a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	7b1b      	ldrb	r3, [r3, #12]
 800b91a:	4619      	mov	r1, r3
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f005 fb91 	bl	8011044 <USBH_LL_GetLastXferSize>
 800b922:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b928:	68fa      	ldr	r2, [r7, #12]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d016      	beq.n	800b95c <CDC_ProcessReception+0x9e>
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	8b5b      	ldrh	r3, [r3, #26]
 800b932:	461a      	mov	r2, r3
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	4293      	cmp	r3, r2
 800b938:	d910      	bls.n	800b95c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	1ad2      	subs	r2, r2, r3
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	6a1a      	ldr	r2, [r3, #32]
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	441a      	add	r2, r3
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	2203      	movs	r2, #3
 800b956:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b95a:	e006      	b.n	800b96a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	2200      	movs	r2, #0
 800b960:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f000 f80f 	bl	800b988 <USBH_CDC_ReceiveCallback>
      break;
 800b96a:	bf00      	nop
  }
}
 800b96c:	bf00      	nop
 800b96e:	3718      	adds	r7, #24
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800b974:	b480      	push	{r7}
 800b976:	b083      	sub	sp, #12
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b97c:	bf00      	nop
 800b97e:	370c      	adds	r7, #12
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr

0800b988 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800b988:	b480      	push	{r7}
 800b98a:	b083      	sub	sp, #12
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b990:	bf00      	nop
 800b992:	370c      	adds	r7, #12
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr

0800b99c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b083      	sub	sp, #12
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b9a4:	bf00      	nop
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b084      	sub	sp, #16
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	60b9      	str	r1, [r7, #8]
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d101      	bne.n	800b9c8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b9c4:	2302      	movs	r3, #2
 800b9c6:	e029      	b.n	800ba1c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	79fa      	ldrb	r2, [r7, #7]
 800b9cc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b9e0:	68f8      	ldr	r0, [r7, #12]
 800b9e2:	f000 f81f 	bl	800ba24 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2200      	movs	r2, #0
 800ba02:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d003      	beq.n	800ba14 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	68ba      	ldr	r2, [r7, #8]
 800ba10:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800ba14:	68f8      	ldr	r0, [r7, #12]
 800ba16:	f005 fa61 	bl	8010edc <USBH_LL_Init>

  return USBH_OK;
 800ba1a:	2300      	movs	r3, #0
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3710      	adds	r7, #16
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ba24:	b480      	push	{r7}
 800ba26:	b085      	sub	sp, #20
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ba30:	2300      	movs	r3, #0
 800ba32:	60fb      	str	r3, [r7, #12]
 800ba34:	e009      	b.n	800ba4a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ba36:	687a      	ldr	r2, [r7, #4]
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	33e0      	adds	r3, #224	; 0xe0
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	4413      	add	r3, r2
 800ba40:	2200      	movs	r2, #0
 800ba42:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	3301      	adds	r3, #1
 800ba48:	60fb      	str	r3, [r7, #12]
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2b0f      	cmp	r3, #15
 800ba4e:	d9f2      	bls.n	800ba36 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ba50:	2300      	movs	r3, #0
 800ba52:	60fb      	str	r3, [r7, #12]
 800ba54:	e009      	b.n	800ba6a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	4413      	add	r3, r2
 800ba5c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ba60:	2200      	movs	r2, #0
 800ba62:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	3301      	adds	r3, #1
 800ba68:	60fb      	str	r3, [r7, #12]
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba70:	d3f1      	bcc.n	800ba56 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2200      	movs	r2, #0
 800ba76:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2201      	movs	r2, #1
 800ba82:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2200      	movs	r2, #0
 800ba88:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2240      	movs	r2, #64	; 0x40
 800ba96:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2200      	movs	r2, #0
 800baa2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2201      	movs	r2, #1
 800baaa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2200      	movs	r2, #0
 800bab2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2200      	movs	r2, #0
 800baba:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800babe:	2300      	movs	r3, #0
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3714      	adds	r7, #20
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr

0800bacc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800bacc:	b480      	push	{r7}
 800bace:	b085      	sub	sp, #20
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800bad6:	2300      	movs	r3, #0
 800bad8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d016      	beq.n	800bb0e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d10e      	bne.n	800bb08 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800baf0:	1c59      	adds	r1, r3, #1
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	33de      	adds	r3, #222	; 0xde
 800bafc:	6839      	ldr	r1, [r7, #0]
 800bafe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800bb02:	2300      	movs	r3, #0
 800bb04:	73fb      	strb	r3, [r7, #15]
 800bb06:	e004      	b.n	800bb12 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800bb08:	2302      	movs	r3, #2
 800bb0a:	73fb      	strb	r3, [r7, #15]
 800bb0c:	e001      	b.n	800bb12 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800bb0e:	2302      	movs	r3, #2
 800bb10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bb12:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3714      	adds	r7, #20
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b085      	sub	sp, #20
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	460b      	mov	r3, r1
 800bb2a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800bb36:	78fa      	ldrb	r2, [r7, #3]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d204      	bcs.n	800bb46 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	78fa      	ldrb	r2, [r7, #3]
 800bb40:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800bb44:	e001      	b.n	800bb4a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800bb46:	2302      	movs	r3, #2
 800bb48:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bb4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3714      	adds	r7, #20
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr

0800bb58 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b087      	sub	sp, #28
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	4608      	mov	r0, r1
 800bb62:	4611      	mov	r1, r2
 800bb64:	461a      	mov	r2, r3
 800bb66:	4603      	mov	r3, r0
 800bb68:	70fb      	strb	r3, [r7, #3]
 800bb6a:	460b      	mov	r3, r1
 800bb6c:	70bb      	strb	r3, [r7, #2]
 800bb6e:	4613      	mov	r3, r2
 800bb70:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800bb72:	2300      	movs	r3, #0
 800bb74:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bb76:	2300      	movs	r3, #0
 800bb78:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bb80:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bb82:	e025      	b.n	800bbd0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800bb84:	7dfb      	ldrb	r3, [r7, #23]
 800bb86:	221a      	movs	r2, #26
 800bb88:	fb02 f303 	mul.w	r3, r2, r3
 800bb8c:	3308      	adds	r3, #8
 800bb8e:	68fa      	ldr	r2, [r7, #12]
 800bb90:	4413      	add	r3, r2
 800bb92:	3302      	adds	r3, #2
 800bb94:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	795b      	ldrb	r3, [r3, #5]
 800bb9a:	78fa      	ldrb	r2, [r7, #3]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d002      	beq.n	800bba6 <USBH_FindInterface+0x4e>
 800bba0:	78fb      	ldrb	r3, [r7, #3]
 800bba2:	2bff      	cmp	r3, #255	; 0xff
 800bba4:	d111      	bne.n	800bbca <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bbaa:	78ba      	ldrb	r2, [r7, #2]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d002      	beq.n	800bbb6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bbb0:	78bb      	ldrb	r3, [r7, #2]
 800bbb2:	2bff      	cmp	r3, #255	; 0xff
 800bbb4:	d109      	bne.n	800bbca <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bbba:	787a      	ldrb	r2, [r7, #1]
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d002      	beq.n	800bbc6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bbc0:	787b      	ldrb	r3, [r7, #1]
 800bbc2:	2bff      	cmp	r3, #255	; 0xff
 800bbc4:	d101      	bne.n	800bbca <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800bbc6:	7dfb      	ldrb	r3, [r7, #23]
 800bbc8:	e006      	b.n	800bbd8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800bbca:	7dfb      	ldrb	r3, [r7, #23]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bbd0:	7dfb      	ldrb	r3, [r7, #23]
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d9d6      	bls.n	800bb84 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800bbd6:	23ff      	movs	r3, #255	; 0xff
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	371c      	adds	r7, #28
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr

0800bbe4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f005 f9b1 	bl	8010f54 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800bbf2:	2101      	movs	r1, #1
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f005 faca 	bl	801118e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3708      	adds	r7, #8
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b088      	sub	sp, #32
 800bc08:	af04      	add	r7, sp, #16
 800bc0a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800bc0c:	2302      	movs	r3, #2
 800bc0e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800bc10:	2300      	movs	r3, #0
 800bc12:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800bc1a:	b2db      	uxtb	r3, r3
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d102      	bne.n	800bc26 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2203      	movs	r2, #3
 800bc24:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	2b0b      	cmp	r3, #11
 800bc2e:	f200 81be 	bhi.w	800bfae <USBH_Process+0x3aa>
 800bc32:	a201      	add	r2, pc, #4	; (adr r2, 800bc38 <USBH_Process+0x34>)
 800bc34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc38:	0800bc69 	.word	0x0800bc69
 800bc3c:	0800bc9b 	.word	0x0800bc9b
 800bc40:	0800bd03 	.word	0x0800bd03
 800bc44:	0800bf49 	.word	0x0800bf49
 800bc48:	0800bfaf 	.word	0x0800bfaf
 800bc4c:	0800bda7 	.word	0x0800bda7
 800bc50:	0800beef 	.word	0x0800beef
 800bc54:	0800bddd 	.word	0x0800bddd
 800bc58:	0800bdfd 	.word	0x0800bdfd
 800bc5c:	0800be1d 	.word	0x0800be1d
 800bc60:	0800be61 	.word	0x0800be61
 800bc64:	0800bf31 	.word	0x0800bf31
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	f000 819e 	beq.w	800bfb2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2201      	movs	r2, #1
 800bc7a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800bc7c:	20c8      	movs	r0, #200	; 0xc8
 800bc7e:	f005 facd 	bl	801121c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f005 f9c3 	bl	801100e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2200      	movs	r2, #0
 800bc94:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bc98:	e18b      	b.n	800bfb2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d107      	bne.n	800bcb4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2202      	movs	r2, #2
 800bcb0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bcb2:	e18d      	b.n	800bfd0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bcba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bcbe:	d914      	bls.n	800bcea <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	b2da      	uxtb	r2, r3
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bcd6:	2b03      	cmp	r3, #3
 800bcd8:	d903      	bls.n	800bce2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	220d      	movs	r2, #13
 800bcde:	701a      	strb	r2, [r3, #0]
      break;
 800bce0:	e176      	b.n	800bfd0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2200      	movs	r2, #0
 800bce6:	701a      	strb	r2, [r3, #0]
      break;
 800bce8:	e172      	b.n	800bfd0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bcf0:	f103 020a 	add.w	r2, r3, #10
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800bcfa:	200a      	movs	r0, #10
 800bcfc:	f005 fa8e 	bl	801121c <USBH_Delay>
      break;
 800bd00:	e166      	b.n	800bfd0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d005      	beq.n	800bd18 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bd12:	2104      	movs	r1, #4
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800bd18:	2064      	movs	r0, #100	; 0x64
 800bd1a:	f005 fa7f 	bl	801121c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f005 f94e 	bl	8010fc0 <USBH_LL_GetSpeed>
 800bd24:	4603      	mov	r3, r0
 800bd26:	461a      	mov	r2, r3
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2205      	movs	r2, #5
 800bd32:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800bd34:	2100      	movs	r1, #0
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f001 fa29 	bl	800d18e <USBH_AllocPipe>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	461a      	mov	r2, r3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800bd44:	2180      	movs	r1, #128	; 0x80
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f001 fa21 	bl	800d18e <USBH_AllocPipe>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	461a      	mov	r2, r3
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	7919      	ldrb	r1, [r3, #4]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bd68:	b292      	uxth	r2, r2
 800bd6a:	9202      	str	r2, [sp, #8]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	9201      	str	r2, [sp, #4]
 800bd70:	9300      	str	r3, [sp, #0]
 800bd72:	4603      	mov	r3, r0
 800bd74:	2280      	movs	r2, #128	; 0x80
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f001 f9da 	bl	800d130 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	7959      	ldrb	r1, [r3, #5]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bd90:	b292      	uxth	r2, r2
 800bd92:	9202      	str	r2, [sp, #8]
 800bd94:	2200      	movs	r2, #0
 800bd96:	9201      	str	r2, [sp, #4]
 800bd98:	9300      	str	r3, [sp, #0]
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f001 f9c6 	bl	800d130 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bda4:	e114      	b.n	800bfd0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f000 f918 	bl	800bfdc <USBH_HandleEnum>
 800bdac:	4603      	mov	r3, r0
 800bdae:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800bdb0:	7bbb      	ldrb	r3, [r7, #14]
 800bdb2:	b2db      	uxtb	r3, r3
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	f040 80fe 	bne.w	800bfb6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800bdc8:	2b01      	cmp	r3, #1
 800bdca:	d103      	bne.n	800bdd4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2208      	movs	r2, #8
 800bdd0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bdd2:	e0f0      	b.n	800bfb6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2207      	movs	r2, #7
 800bdd8:	701a      	strb	r2, [r3, #0]
      break;
 800bdda:	e0ec      	b.n	800bfb6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	f000 80e9 	beq.w	800bfba <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bdee:	2101      	movs	r1, #1
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2208      	movs	r2, #8
 800bdf8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800bdfa:	e0de      	b.n	800bfba <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800be02:	b29b      	uxth	r3, r3
 800be04:	4619      	mov	r1, r3
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f000 fc2c 	bl	800c664 <USBH_SetCfg>
 800be0c:	4603      	mov	r3, r0
 800be0e:	2b00      	cmp	r3, #0
 800be10:	f040 80d5 	bne.w	800bfbe <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2209      	movs	r2, #9
 800be18:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800be1a:	e0d0      	b.n	800bfbe <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800be22:	f003 0320 	and.w	r3, r3, #32
 800be26:	2b00      	cmp	r3, #0
 800be28:	d016      	beq.n	800be58 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800be2a:	2101      	movs	r1, #1
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 fc3c 	bl	800c6aa <USBH_SetFeature>
 800be32:	4603      	mov	r3, r0
 800be34:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800be36:	7bbb      	ldrb	r3, [r7, #14]
 800be38:	b2db      	uxtb	r3, r3
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d103      	bne.n	800be46 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	220a      	movs	r2, #10
 800be42:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800be44:	e0bd      	b.n	800bfc2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800be46:	7bbb      	ldrb	r3, [r7, #14]
 800be48:	b2db      	uxtb	r3, r3
 800be4a:	2b03      	cmp	r3, #3
 800be4c:	f040 80b9 	bne.w	800bfc2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	220a      	movs	r2, #10
 800be54:	701a      	strb	r2, [r3, #0]
      break;
 800be56:	e0b4      	b.n	800bfc2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	220a      	movs	r2, #10
 800be5c:	701a      	strb	r2, [r3, #0]
      break;
 800be5e:	e0b0      	b.n	800bfc2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800be66:	2b00      	cmp	r3, #0
 800be68:	f000 80ad 	beq.w	800bfc6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800be74:	2300      	movs	r3, #0
 800be76:	73fb      	strb	r3, [r7, #15]
 800be78:	e016      	b.n	800bea8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800be7a:	7bfa      	ldrb	r2, [r7, #15]
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	32de      	adds	r2, #222	; 0xde
 800be80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be84:	791a      	ldrb	r2, [r3, #4]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d108      	bne.n	800bea2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800be90:	7bfa      	ldrb	r2, [r7, #15]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	32de      	adds	r2, #222	; 0xde
 800be96:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800bea0:	e005      	b.n	800beae <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bea2:	7bfb      	ldrb	r3, [r7, #15]
 800bea4:	3301      	adds	r3, #1
 800bea6:	73fb      	strb	r3, [r7, #15]
 800bea8:	7bfb      	ldrb	r3, [r7, #15]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d0e5      	beq.n	800be7a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d016      	beq.n	800bee6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bebe:	689b      	ldr	r3, [r3, #8]
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	4798      	blx	r3
 800bec4:	4603      	mov	r3, r0
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d109      	bne.n	800bede <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2206      	movs	r2, #6
 800bece:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bed6:	2103      	movs	r1, #3
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bedc:	e073      	b.n	800bfc6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	220d      	movs	r2, #13
 800bee2:	701a      	strb	r2, [r3, #0]
      break;
 800bee4:	e06f      	b.n	800bfc6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	220d      	movs	r2, #13
 800beea:	701a      	strb	r2, [r3, #0]
      break;
 800beec:	e06b      	b.n	800bfc6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d017      	beq.n	800bf28 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800befe:	691b      	ldr	r3, [r3, #16]
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	4798      	blx	r3
 800bf04:	4603      	mov	r3, r0
 800bf06:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800bf08:	7bbb      	ldrb	r3, [r7, #14]
 800bf0a:	b2db      	uxtb	r3, r3
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d103      	bne.n	800bf18 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	220b      	movs	r2, #11
 800bf14:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bf16:	e058      	b.n	800bfca <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800bf18:	7bbb      	ldrb	r3, [r7, #14]
 800bf1a:	b2db      	uxtb	r3, r3
 800bf1c:	2b02      	cmp	r3, #2
 800bf1e:	d154      	bne.n	800bfca <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	220d      	movs	r2, #13
 800bf24:	701a      	strb	r2, [r3, #0]
      break;
 800bf26:	e050      	b.n	800bfca <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	220d      	movs	r2, #13
 800bf2c:	701a      	strb	r2, [r3, #0]
      break;
 800bf2e:	e04c      	b.n	800bfca <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d049      	beq.n	800bfce <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf40:	695b      	ldr	r3, [r3, #20]
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	4798      	blx	r3
      }
      break;
 800bf46:	e042      	b.n	800bfce <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f7ff fd67 	bl	800ba24 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d009      	beq.n	800bf74 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf66:	68db      	ldr	r3, [r3, #12]
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d005      	beq.n	800bf8a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bf84:	2105      	movs	r1, #5
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800bf90:	b2db      	uxtb	r3, r3
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	d107      	bne.n	800bfa6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f7ff fe20 	bl	800bbe4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bfa4:	e014      	b.n	800bfd0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f004 ffd4 	bl	8010f54 <USBH_LL_Start>
      break;
 800bfac:	e010      	b.n	800bfd0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800bfae:	bf00      	nop
 800bfb0:	e00e      	b.n	800bfd0 <USBH_Process+0x3cc>
      break;
 800bfb2:	bf00      	nop
 800bfb4:	e00c      	b.n	800bfd0 <USBH_Process+0x3cc>
      break;
 800bfb6:	bf00      	nop
 800bfb8:	e00a      	b.n	800bfd0 <USBH_Process+0x3cc>
    break;
 800bfba:	bf00      	nop
 800bfbc:	e008      	b.n	800bfd0 <USBH_Process+0x3cc>
      break;
 800bfbe:	bf00      	nop
 800bfc0:	e006      	b.n	800bfd0 <USBH_Process+0x3cc>
      break;
 800bfc2:	bf00      	nop
 800bfc4:	e004      	b.n	800bfd0 <USBH_Process+0x3cc>
      break;
 800bfc6:	bf00      	nop
 800bfc8:	e002      	b.n	800bfd0 <USBH_Process+0x3cc>
      break;
 800bfca:	bf00      	nop
 800bfcc:	e000      	b.n	800bfd0 <USBH_Process+0x3cc>
      break;
 800bfce:	bf00      	nop
  }
  return USBH_OK;
 800bfd0:	2300      	movs	r3, #0
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop

0800bfdc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b088      	sub	sp, #32
 800bfe0:	af04      	add	r7, sp, #16
 800bfe2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800bfe8:	2301      	movs	r3, #1
 800bfea:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	785b      	ldrb	r3, [r3, #1]
 800bff0:	2b07      	cmp	r3, #7
 800bff2:	f200 81c1 	bhi.w	800c378 <USBH_HandleEnum+0x39c>
 800bff6:	a201      	add	r2, pc, #4	; (adr r2, 800bffc <USBH_HandleEnum+0x20>)
 800bff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bffc:	0800c01d 	.word	0x0800c01d
 800c000:	0800c0db 	.word	0x0800c0db
 800c004:	0800c145 	.word	0x0800c145
 800c008:	0800c1d3 	.word	0x0800c1d3
 800c00c:	0800c23d 	.word	0x0800c23d
 800c010:	0800c2ad 	.word	0x0800c2ad
 800c014:	0800c2f3 	.word	0x0800c2f3
 800c018:	0800c339 	.word	0x0800c339
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c01c:	2108      	movs	r1, #8
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 fa50 	bl	800c4c4 <USBH_Get_DevDesc>
 800c024:	4603      	mov	r3, r0
 800c026:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c028:	7bbb      	ldrb	r3, [r7, #14]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d130      	bne.n	800c090 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2201      	movs	r2, #1
 800c03c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	7919      	ldrb	r1, [r3, #4]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c04e:	687a      	ldr	r2, [r7, #4]
 800c050:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c052:	b292      	uxth	r2, r2
 800c054:	9202      	str	r2, [sp, #8]
 800c056:	2200      	movs	r2, #0
 800c058:	9201      	str	r2, [sp, #4]
 800c05a:	9300      	str	r3, [sp, #0]
 800c05c:	4603      	mov	r3, r0
 800c05e:	2280      	movs	r2, #128	; 0x80
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f001 f865 	bl	800d130 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	7959      	ldrb	r1, [r3, #5]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c076:	687a      	ldr	r2, [r7, #4]
 800c078:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c07a:	b292      	uxth	r2, r2
 800c07c:	9202      	str	r2, [sp, #8]
 800c07e:	2200      	movs	r2, #0
 800c080:	9201      	str	r2, [sp, #4]
 800c082:	9300      	str	r3, [sp, #0]
 800c084:	4603      	mov	r3, r0
 800c086:	2200      	movs	r2, #0
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f001 f851 	bl	800d130 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c08e:	e175      	b.n	800c37c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c090:	7bbb      	ldrb	r3, [r7, #14]
 800c092:	2b03      	cmp	r3, #3
 800c094:	f040 8172 	bne.w	800c37c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c09e:	3301      	adds	r3, #1
 800c0a0:	b2da      	uxtb	r2, r3
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c0ae:	2b03      	cmp	r3, #3
 800c0b0:	d903      	bls.n	800c0ba <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	220d      	movs	r2, #13
 800c0b6:	701a      	strb	r2, [r3, #0]
      break;
 800c0b8:	e160      	b.n	800c37c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	795b      	ldrb	r3, [r3, #5]
 800c0be:	4619      	mov	r1, r3
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f001 f885 	bl	800d1d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	791b      	ldrb	r3, [r3, #4]
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f001 f87f 	bl	800d1d0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	701a      	strb	r2, [r3, #0]
      break;
 800c0d8:	e150      	b.n	800c37c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c0da:	2112      	movs	r1, #18
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 f9f1 	bl	800c4c4 <USBH_Get_DevDesc>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c0e6:	7bbb      	ldrb	r3, [r7, #14]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d103      	bne.n	800c0f4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2202      	movs	r2, #2
 800c0f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c0f2:	e145      	b.n	800c380 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c0f4:	7bbb      	ldrb	r3, [r7, #14]
 800c0f6:	2b03      	cmp	r3, #3
 800c0f8:	f040 8142 	bne.w	800c380 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c102:	3301      	adds	r3, #1
 800c104:	b2da      	uxtb	r2, r3
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c112:	2b03      	cmp	r3, #3
 800c114:	d903      	bls.n	800c11e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	220d      	movs	r2, #13
 800c11a:	701a      	strb	r2, [r3, #0]
      break;
 800c11c:	e130      	b.n	800c380 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	795b      	ldrb	r3, [r3, #5]
 800c122:	4619      	mov	r1, r3
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f001 f853 	bl	800d1d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	791b      	ldrb	r3, [r3, #4]
 800c12e:	4619      	mov	r1, r3
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f001 f84d 	bl	800d1d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2200      	movs	r2, #0
 800c13a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2200      	movs	r2, #0
 800c140:	701a      	strb	r2, [r3, #0]
      break;
 800c142:	e11d      	b.n	800c380 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c144:	2101      	movs	r1, #1
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f000 fa68 	bl	800c61c <USBH_SetAddress>
 800c14c:	4603      	mov	r3, r0
 800c14e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c150:	7bbb      	ldrb	r3, [r7, #14]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d132      	bne.n	800c1bc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c156:	2002      	movs	r0, #2
 800c158:	f005 f860 	bl	801121c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2201      	movs	r2, #1
 800c160:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2203      	movs	r2, #3
 800c168:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	7919      	ldrb	r1, [r3, #4]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c17e:	b292      	uxth	r2, r2
 800c180:	9202      	str	r2, [sp, #8]
 800c182:	2200      	movs	r2, #0
 800c184:	9201      	str	r2, [sp, #4]
 800c186:	9300      	str	r3, [sp, #0]
 800c188:	4603      	mov	r3, r0
 800c18a:	2280      	movs	r2, #128	; 0x80
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f000 ffcf 	bl	800d130 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	7959      	ldrb	r1, [r3, #5]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c1a6:	b292      	uxth	r2, r2
 800c1a8:	9202      	str	r2, [sp, #8]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	9201      	str	r2, [sp, #4]
 800c1ae:	9300      	str	r3, [sp, #0]
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f000 ffbb 	bl	800d130 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c1ba:	e0e3      	b.n	800c384 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c1bc:	7bbb      	ldrb	r3, [r7, #14]
 800c1be:	2b03      	cmp	r3, #3
 800c1c0:	f040 80e0 	bne.w	800c384 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	220d      	movs	r2, #13
 800c1c8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	705a      	strb	r2, [r3, #1]
      break;
 800c1d0:	e0d8      	b.n	800c384 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c1d2:	2109      	movs	r1, #9
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f000 f99d 	bl	800c514 <USBH_Get_CfgDesc>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c1de:	7bbb      	ldrb	r3, [r7, #14]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d103      	bne.n	800c1ec <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2204      	movs	r2, #4
 800c1e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c1ea:	e0cd      	b.n	800c388 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c1ec:	7bbb      	ldrb	r3, [r7, #14]
 800c1ee:	2b03      	cmp	r3, #3
 800c1f0:	f040 80ca 	bne.w	800c388 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c1fa:	3301      	adds	r3, #1
 800c1fc:	b2da      	uxtb	r2, r3
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c20a:	2b03      	cmp	r3, #3
 800c20c:	d903      	bls.n	800c216 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	220d      	movs	r2, #13
 800c212:	701a      	strb	r2, [r3, #0]
      break;
 800c214:	e0b8      	b.n	800c388 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	795b      	ldrb	r3, [r3, #5]
 800c21a:	4619      	mov	r1, r3
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 ffd7 	bl	800d1d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	791b      	ldrb	r3, [r3, #4]
 800c226:	4619      	mov	r1, r3
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 ffd1 	bl	800d1d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2200      	movs	r2, #0
 800c232:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2200      	movs	r2, #0
 800c238:	701a      	strb	r2, [r3, #0]
      break;
 800c23a:	e0a5      	b.n	800c388 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c242:	4619      	mov	r1, r3
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 f965 	bl	800c514 <USBH_Get_CfgDesc>
 800c24a:	4603      	mov	r3, r0
 800c24c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c24e:	7bbb      	ldrb	r3, [r7, #14]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d103      	bne.n	800c25c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2205      	movs	r2, #5
 800c258:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c25a:	e097      	b.n	800c38c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c25c:	7bbb      	ldrb	r3, [r7, #14]
 800c25e:	2b03      	cmp	r3, #3
 800c260:	f040 8094 	bne.w	800c38c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c26a:	3301      	adds	r3, #1
 800c26c:	b2da      	uxtb	r2, r3
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c27a:	2b03      	cmp	r3, #3
 800c27c:	d903      	bls.n	800c286 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	220d      	movs	r2, #13
 800c282:	701a      	strb	r2, [r3, #0]
      break;
 800c284:	e082      	b.n	800c38c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	795b      	ldrb	r3, [r3, #5]
 800c28a:	4619      	mov	r1, r3
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f000 ff9f 	bl	800d1d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	791b      	ldrb	r3, [r3, #4]
 800c296:	4619      	mov	r1, r3
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f000 ff99 	bl	800d1d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	701a      	strb	r2, [r3, #0]
      break;
 800c2aa:	e06f      	b.n	800c38c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d019      	beq.n	800c2ea <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c2c2:	23ff      	movs	r3, #255	; 0xff
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 f949 	bl	800c55c <USBH_Get_StringDesc>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c2ce:	7bbb      	ldrb	r3, [r7, #14]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d103      	bne.n	800c2dc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2206      	movs	r2, #6
 800c2d8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c2da:	e059      	b.n	800c390 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c2dc:	7bbb      	ldrb	r3, [r7, #14]
 800c2de:	2b03      	cmp	r3, #3
 800c2e0:	d156      	bne.n	800c390 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2206      	movs	r2, #6
 800c2e6:	705a      	strb	r2, [r3, #1]
      break;
 800c2e8:	e052      	b.n	800c390 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2206      	movs	r2, #6
 800c2ee:	705a      	strb	r2, [r3, #1]
      break;
 800c2f0:	e04e      	b.n	800c390 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d019      	beq.n	800c330 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c308:	23ff      	movs	r3, #255	; 0xff
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 f926 	bl	800c55c <USBH_Get_StringDesc>
 800c310:	4603      	mov	r3, r0
 800c312:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c314:	7bbb      	ldrb	r3, [r7, #14]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d103      	bne.n	800c322 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2207      	movs	r2, #7
 800c31e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c320:	e038      	b.n	800c394 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c322:	7bbb      	ldrb	r3, [r7, #14]
 800c324:	2b03      	cmp	r3, #3
 800c326:	d135      	bne.n	800c394 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2207      	movs	r2, #7
 800c32c:	705a      	strb	r2, [r3, #1]
      break;
 800c32e:	e031      	b.n	800c394 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2207      	movs	r2, #7
 800c334:	705a      	strb	r2, [r3, #1]
      break;
 800c336:	e02d      	b.n	800c394 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d017      	beq.n	800c372 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c34e:	23ff      	movs	r3, #255	; 0xff
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f000 f903 	bl	800c55c <USBH_Get_StringDesc>
 800c356:	4603      	mov	r3, r0
 800c358:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c35a:	7bbb      	ldrb	r3, [r7, #14]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d102      	bne.n	800c366 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c360:	2300      	movs	r3, #0
 800c362:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c364:	e018      	b.n	800c398 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c366:	7bbb      	ldrb	r3, [r7, #14]
 800c368:	2b03      	cmp	r3, #3
 800c36a:	d115      	bne.n	800c398 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800c36c:	2300      	movs	r3, #0
 800c36e:	73fb      	strb	r3, [r7, #15]
      break;
 800c370:	e012      	b.n	800c398 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800c372:	2300      	movs	r3, #0
 800c374:	73fb      	strb	r3, [r7, #15]
      break;
 800c376:	e00f      	b.n	800c398 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800c378:	bf00      	nop
 800c37a:	e00e      	b.n	800c39a <USBH_HandleEnum+0x3be>
      break;
 800c37c:	bf00      	nop
 800c37e:	e00c      	b.n	800c39a <USBH_HandleEnum+0x3be>
      break;
 800c380:	bf00      	nop
 800c382:	e00a      	b.n	800c39a <USBH_HandleEnum+0x3be>
      break;
 800c384:	bf00      	nop
 800c386:	e008      	b.n	800c39a <USBH_HandleEnum+0x3be>
      break;
 800c388:	bf00      	nop
 800c38a:	e006      	b.n	800c39a <USBH_HandleEnum+0x3be>
      break;
 800c38c:	bf00      	nop
 800c38e:	e004      	b.n	800c39a <USBH_HandleEnum+0x3be>
      break;
 800c390:	bf00      	nop
 800c392:	e002      	b.n	800c39a <USBH_HandleEnum+0x3be>
      break;
 800c394:	bf00      	nop
 800c396:	e000      	b.n	800c39a <USBH_HandleEnum+0x3be>
      break;
 800c398:	bf00      	nop
  }
  return Status;
 800c39a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3710      	adds	r7, #16
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b083      	sub	sp, #12
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	683a      	ldr	r2, [r7, #0]
 800c3b2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c3b6:	bf00      	nop
 800c3b8:	370c      	adds	r7, #12
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr

0800c3c2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b082      	sub	sp, #8
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c3d0:	1c5a      	adds	r2, r3, #1
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f000 f804 	bl	800c3e6 <USBH_HandleSof>
}
 800c3de:	bf00      	nop
 800c3e0:	3708      	adds	r7, #8
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b082      	sub	sp, #8
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	2b0b      	cmp	r3, #11
 800c3f6:	d10a      	bne.n	800c40e <USBH_HandleSof+0x28>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d005      	beq.n	800c40e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c408:	699b      	ldr	r3, [r3, #24]
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	4798      	blx	r3
  }
}
 800c40e:	bf00      	nop
 800c410:	3708      	adds	r7, #8
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}

0800c416 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c416:	b480      	push	{r7}
 800c418:	b083      	sub	sp, #12
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2201      	movs	r2, #1
 800c422:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800c426:	bf00      	nop
}
 800c428:	370c      	adds	r7, #12
 800c42a:	46bd      	mov	sp, r7
 800c42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c430:	4770      	bx	lr

0800c432 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c432:	b480      	push	{r7}
 800c434:	b083      	sub	sp, #12
 800c436:	af00      	add	r7, sp, #0
 800c438:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2200      	movs	r2, #0
 800c43e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c442:	bf00      	nop
}
 800c444:	370c      	adds	r7, #12
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr

0800c44e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c44e:	b480      	push	{r7}
 800c450:	b083      	sub	sp, #12
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2201      	movs	r2, #1
 800c45a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2200      	movs	r2, #0
 800c462:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2200      	movs	r2, #0
 800c46a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c46e:	2300      	movs	r3, #0
}
 800c470:	4618      	mov	r0, r3
 800c472:	370c      	adds	r7, #12
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr

0800c47c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2201      	movs	r2, #1
 800c488:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2200      	movs	r2, #0
 800c490:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2200      	movs	r2, #0
 800c498:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f004 fd74 	bl	8010f8a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	791b      	ldrb	r3, [r3, #4]
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f000 fe91 	bl	800d1d0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	795b      	ldrb	r3, [r3, #5]
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f000 fe8b 	bl	800d1d0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c4ba:	2300      	movs	r3, #0
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3708      	adds	r7, #8
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b086      	sub	sp, #24
 800c4c8:	af02      	add	r7, sp, #8
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c4d6:	78fb      	ldrb	r3, [r7, #3]
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	9300      	str	r3, [sp, #0]
 800c4dc:	4613      	mov	r3, r2
 800c4de:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c4e2:	2100      	movs	r1, #0
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f000 f864 	bl	800c5b2 <USBH_GetDescriptor>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800c4ee:	7bfb      	ldrb	r3, [r7, #15]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d10a      	bne.n	800c50a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c500:	78fa      	ldrb	r2, [r7, #3]
 800c502:	b292      	uxth	r2, r2
 800c504:	4619      	mov	r1, r3
 800c506:	f000 f918 	bl	800c73a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c50a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3710      	adds	r7, #16
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}

0800c514 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c514:	b580      	push	{r7, lr}
 800c516:	b086      	sub	sp, #24
 800c518:	af02      	add	r7, sp, #8
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	460b      	mov	r3, r1
 800c51e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	331c      	adds	r3, #28
 800c524:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c526:	887b      	ldrh	r3, [r7, #2]
 800c528:	9300      	str	r3, [sp, #0]
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c530:	2100      	movs	r1, #0
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f000 f83d 	bl	800c5b2 <USBH_GetDescriptor>
 800c538:	4603      	mov	r3, r0
 800c53a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800c53c:	7bfb      	ldrb	r3, [r7, #15]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d107      	bne.n	800c552 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800c542:	887b      	ldrh	r3, [r7, #2]
 800c544:	461a      	mov	r2, r3
 800c546:	68b9      	ldr	r1, [r7, #8]
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f000 f987 	bl	800c85c <USBH_ParseCfgDesc>
 800c54e:	4603      	mov	r3, r0
 800c550:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c552:	7bfb      	ldrb	r3, [r7, #15]
}
 800c554:	4618      	mov	r0, r3
 800c556:	3710      	adds	r7, #16
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}

0800c55c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b088      	sub	sp, #32
 800c560:	af02      	add	r7, sp, #8
 800c562:	60f8      	str	r0, [r7, #12]
 800c564:	607a      	str	r2, [r7, #4]
 800c566:	461a      	mov	r2, r3
 800c568:	460b      	mov	r3, r1
 800c56a:	72fb      	strb	r3, [r7, #11]
 800c56c:	4613      	mov	r3, r2
 800c56e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800c570:	7afb      	ldrb	r3, [r7, #11]
 800c572:	b29b      	uxth	r3, r3
 800c574:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c578:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c580:	893b      	ldrh	r3, [r7, #8]
 800c582:	9300      	str	r3, [sp, #0]
 800c584:	460b      	mov	r3, r1
 800c586:	2100      	movs	r1, #0
 800c588:	68f8      	ldr	r0, [r7, #12]
 800c58a:	f000 f812 	bl	800c5b2 <USBH_GetDescriptor>
 800c58e:	4603      	mov	r3, r0
 800c590:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c592:	7dfb      	ldrb	r3, [r7, #23]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d107      	bne.n	800c5a8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c59e:	893a      	ldrh	r2, [r7, #8]
 800c5a0:	6879      	ldr	r1, [r7, #4]
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f000 fb24 	bl	800cbf0 <USBH_ParseStringDesc>
  }

  return status;
 800c5a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3718      	adds	r7, #24
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}

0800c5b2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c5b2:	b580      	push	{r7, lr}
 800c5b4:	b084      	sub	sp, #16
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	60f8      	str	r0, [r7, #12]
 800c5ba:	607b      	str	r3, [r7, #4]
 800c5bc:	460b      	mov	r3, r1
 800c5be:	72fb      	strb	r3, [r7, #11]
 800c5c0:	4613      	mov	r3, r2
 800c5c2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	789b      	ldrb	r3, [r3, #2]
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d11c      	bne.n	800c606 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c5cc:	7afb      	ldrb	r3, [r7, #11]
 800c5ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c5d2:	b2da      	uxtb	r2, r3
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2206      	movs	r2, #6
 800c5dc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	893a      	ldrh	r2, [r7, #8]
 800c5e2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c5e4:	893b      	ldrh	r3, [r7, #8]
 800c5e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c5ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c5ee:	d104      	bne.n	800c5fa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f240 4209 	movw	r2, #1033	; 0x409
 800c5f6:	829a      	strh	r2, [r3, #20]
 800c5f8:	e002      	b.n	800c600 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	8b3a      	ldrh	r2, [r7, #24]
 800c604:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c606:	8b3b      	ldrh	r3, [r7, #24]
 800c608:	461a      	mov	r2, r3
 800c60a:	6879      	ldr	r1, [r7, #4]
 800c60c:	68f8      	ldr	r0, [r7, #12]
 800c60e:	f000 fb3d 	bl	800cc8c <USBH_CtlReq>
 800c612:	4603      	mov	r3, r0
}
 800c614:	4618      	mov	r0, r3
 800c616:	3710      	adds	r7, #16
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	460b      	mov	r3, r1
 800c626:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	789b      	ldrb	r3, [r3, #2]
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	d10f      	bne.n	800c650 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2200      	movs	r2, #0
 800c634:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2205      	movs	r2, #5
 800c63a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c63c:	78fb      	ldrb	r3, [r7, #3]
 800c63e:	b29a      	uxth	r2, r3
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2200      	movs	r2, #0
 800c648:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c650:	2200      	movs	r2, #0
 800c652:	2100      	movs	r1, #0
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f000 fb19 	bl	800cc8c <USBH_CtlReq>
 800c65a:	4603      	mov	r3, r0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3708      	adds	r7, #8
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b082      	sub	sp, #8
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	460b      	mov	r3, r1
 800c66e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	789b      	ldrb	r3, [r3, #2]
 800c674:	2b01      	cmp	r3, #1
 800c676:	d10e      	bne.n	800c696 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2200      	movs	r2, #0
 800c67c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2209      	movs	r2, #9
 800c682:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	887a      	ldrh	r2, [r7, #2]
 800c688:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2200      	movs	r2, #0
 800c68e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2200      	movs	r2, #0
 800c694:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c696:	2200      	movs	r2, #0
 800c698:	2100      	movs	r1, #0
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f000 faf6 	bl	800cc8c <USBH_CtlReq>
 800c6a0:	4603      	mov	r3, r0
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3708      	adds	r7, #8
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}

0800c6aa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c6aa:	b580      	push	{r7, lr}
 800c6ac:	b082      	sub	sp, #8
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	6078      	str	r0, [r7, #4]
 800c6b2:	460b      	mov	r3, r1
 800c6b4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	789b      	ldrb	r3, [r3, #2]
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d10f      	bne.n	800c6de <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2203      	movs	r2, #3
 800c6c8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c6ca:	78fb      	ldrb	r3, [r7, #3]
 800c6cc:	b29a      	uxth	r2, r3
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c6de:	2200      	movs	r2, #0
 800c6e0:	2100      	movs	r1, #0
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 fad2 	bl	800cc8c <USBH_CtlReq>
 800c6e8:	4603      	mov	r3, r0
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3708      	adds	r7, #8
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}

0800c6f2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c6f2:	b580      	push	{r7, lr}
 800c6f4:	b082      	sub	sp, #8
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
 800c6fa:	460b      	mov	r3, r1
 800c6fc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	789b      	ldrb	r3, [r3, #2]
 800c702:	2b01      	cmp	r3, #1
 800c704:	d10f      	bne.n	800c726 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2202      	movs	r2, #2
 800c70a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2201      	movs	r2, #1
 800c710:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2200      	movs	r2, #0
 800c716:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c718:	78fb      	ldrb	r3, [r7, #3]
 800c71a:	b29a      	uxth	r2, r3
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2200      	movs	r2, #0
 800c724:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800c726:	2200      	movs	r2, #0
 800c728:	2100      	movs	r1, #0
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f000 faae 	bl	800cc8c <USBH_CtlReq>
 800c730:	4603      	mov	r3, r0
}
 800c732:	4618      	mov	r0, r3
 800c734:	3708      	adds	r7, #8
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}

0800c73a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c73a:	b480      	push	{r7}
 800c73c:	b085      	sub	sp, #20
 800c73e:	af00      	add	r7, sp, #0
 800c740:	60f8      	str	r0, [r7, #12]
 800c742:	60b9      	str	r1, [r7, #8]
 800c744:	4613      	mov	r3, r2
 800c746:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	781a      	ldrb	r2, [r3, #0]
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	785a      	ldrb	r2, [r3, #1]
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	3302      	adds	r3, #2
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	b29a      	uxth	r2, r3
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	3303      	adds	r3, #3
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	b29b      	uxth	r3, r3
 800c768:	021b      	lsls	r3, r3, #8
 800c76a:	b29b      	uxth	r3, r3
 800c76c:	4313      	orrs	r3, r2
 800c76e:	b29a      	uxth	r2, r3
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	791a      	ldrb	r2, [r3, #4]
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	795a      	ldrb	r2, [r3, #5]
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	799a      	ldrb	r2, [r3, #6]
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	79da      	ldrb	r2, [r3, #7]
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	79db      	ldrb	r3, [r3, #7]
 800c798:	2b20      	cmp	r3, #32
 800c79a:	dc11      	bgt.n	800c7c0 <USBH_ParseDevDesc+0x86>
 800c79c:	2b08      	cmp	r3, #8
 800c79e:	db16      	blt.n	800c7ce <USBH_ParseDevDesc+0x94>
 800c7a0:	3b08      	subs	r3, #8
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	fa02 f303 	lsl.w	r3, r2, r3
 800c7a8:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800c7ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	bf14      	ite	ne
 800c7b4:	2301      	movne	r3, #1
 800c7b6:	2300      	moveq	r3, #0
 800c7b8:	b2db      	uxtb	r3, r3
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d102      	bne.n	800c7c4 <USBH_ParseDevDesc+0x8a>
 800c7be:	e006      	b.n	800c7ce <USBH_ParseDevDesc+0x94>
 800c7c0:	2b40      	cmp	r3, #64	; 0x40
 800c7c2:	d104      	bne.n	800c7ce <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	79da      	ldrb	r2, [r3, #7]
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	71da      	strb	r2, [r3, #7]
      break;
 800c7cc:	e003      	b.n	800c7d6 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2240      	movs	r2, #64	; 0x40
 800c7d2:	71da      	strb	r2, [r3, #7]
      break;
 800c7d4:	bf00      	nop
  }

  if (length > 8U)
 800c7d6:	88fb      	ldrh	r3, [r7, #6]
 800c7d8:	2b08      	cmp	r3, #8
 800c7da:	d939      	bls.n	800c850 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	3308      	adds	r3, #8
 800c7e0:	781b      	ldrb	r3, [r3, #0]
 800c7e2:	b29a      	uxth	r2, r3
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	3309      	adds	r3, #9
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	021b      	lsls	r3, r3, #8
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	4313      	orrs	r3, r2
 800c7f2:	b29a      	uxth	r2, r3
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	330a      	adds	r3, #10
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	b29a      	uxth	r2, r3
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	330b      	adds	r3, #11
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	b29b      	uxth	r3, r3
 800c808:	021b      	lsls	r3, r3, #8
 800c80a:	b29b      	uxth	r3, r3
 800c80c:	4313      	orrs	r3, r2
 800c80e:	b29a      	uxth	r2, r3
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	330c      	adds	r3, #12
 800c818:	781b      	ldrb	r3, [r3, #0]
 800c81a:	b29a      	uxth	r2, r3
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	330d      	adds	r3, #13
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	b29b      	uxth	r3, r3
 800c824:	021b      	lsls	r3, r3, #8
 800c826:	b29b      	uxth	r3, r3
 800c828:	4313      	orrs	r3, r2
 800c82a:	b29a      	uxth	r2, r3
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	7b9a      	ldrb	r2, [r3, #14]
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	7bda      	ldrb	r2, [r3, #15]
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	7c1a      	ldrb	r2, [r3, #16]
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	7c5a      	ldrb	r2, [r3, #17]
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	745a      	strb	r2, [r3, #17]
  }
}
 800c850:	bf00      	nop
 800c852:	3714      	adds	r7, #20
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr

0800c85c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b08c      	sub	sp, #48	; 0x30
 800c860:	af00      	add	r7, sp, #0
 800c862:	60f8      	str	r0, [r7, #12]
 800c864:	60b9      	str	r1, [r7, #8]
 800c866:	4613      	mov	r3, r2
 800c868:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c870:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c872:	2300      	movs	r3, #0
 800c874:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c87c:	2300      	movs	r3, #0
 800c87e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800c882:	2300      	movs	r3, #0
 800c884:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	781a      	ldrb	r2, [r3, #0]
 800c890:	6a3b      	ldr	r3, [r7, #32]
 800c892:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	785a      	ldrb	r2, [r3, #1]
 800c898:	6a3b      	ldr	r3, [r7, #32]
 800c89a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	3302      	adds	r3, #2
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	b29a      	uxth	r2, r3
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	3303      	adds	r3, #3
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	021b      	lsls	r3, r3, #8
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	4313      	orrs	r3, r2
 800c8b2:	b29b      	uxth	r3, r3
 800c8b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8b8:	bf28      	it	cs
 800c8ba:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800c8be:	b29a      	uxth	r2, r3
 800c8c0:	6a3b      	ldr	r3, [r7, #32]
 800c8c2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	791a      	ldrb	r2, [r3, #4]
 800c8c8:	6a3b      	ldr	r3, [r7, #32]
 800c8ca:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	795a      	ldrb	r2, [r3, #5]
 800c8d0:	6a3b      	ldr	r3, [r7, #32]
 800c8d2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	799a      	ldrb	r2, [r3, #6]
 800c8d8:	6a3b      	ldr	r3, [r7, #32]
 800c8da:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	79da      	ldrb	r2, [r3, #7]
 800c8e0:	6a3b      	ldr	r3, [r7, #32]
 800c8e2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	7a1a      	ldrb	r2, [r3, #8]
 800c8e8:	6a3b      	ldr	r3, [r7, #32]
 800c8ea:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800c8ec:	6a3b      	ldr	r3, [r7, #32]
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	2b09      	cmp	r3, #9
 800c8f2:	d002      	beq.n	800c8fa <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c8f4:	6a3b      	ldr	r3, [r7, #32]
 800c8f6:	2209      	movs	r2, #9
 800c8f8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c8fa:	88fb      	ldrh	r3, [r7, #6]
 800c8fc:	2b09      	cmp	r3, #9
 800c8fe:	f240 809d 	bls.w	800ca3c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800c902:	2309      	movs	r3, #9
 800c904:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c906:	2300      	movs	r3, #0
 800c908:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c90a:	e081      	b.n	800ca10 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c90c:	f107 0316 	add.w	r3, r7, #22
 800c910:	4619      	mov	r1, r3
 800c912:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c914:	f000 f99f 	bl	800cc56 <USBH_GetNextDesc>
 800c918:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c91c:	785b      	ldrb	r3, [r3, #1]
 800c91e:	2b04      	cmp	r3, #4
 800c920:	d176      	bne.n	800ca10 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	2b09      	cmp	r3, #9
 800c928:	d002      	beq.n	800c930 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92c:	2209      	movs	r2, #9
 800c92e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c934:	221a      	movs	r2, #26
 800c936:	fb02 f303 	mul.w	r3, r2, r3
 800c93a:	3308      	adds	r3, #8
 800c93c:	6a3a      	ldr	r2, [r7, #32]
 800c93e:	4413      	add	r3, r2
 800c940:	3302      	adds	r3, #2
 800c942:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c944:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c946:	69f8      	ldr	r0, [r7, #28]
 800c948:	f000 f87e 	bl	800ca48 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c94c:	2300      	movs	r3, #0
 800c94e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c952:	2300      	movs	r3, #0
 800c954:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c956:	e043      	b.n	800c9e0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c958:	f107 0316 	add.w	r3, r7, #22
 800c95c:	4619      	mov	r1, r3
 800c95e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c960:	f000 f979 	bl	800cc56 <USBH_GetNextDesc>
 800c964:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c968:	785b      	ldrb	r3, [r3, #1]
 800c96a:	2b05      	cmp	r3, #5
 800c96c:	d138      	bne.n	800c9e0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800c96e:	69fb      	ldr	r3, [r7, #28]
 800c970:	795b      	ldrb	r3, [r3, #5]
 800c972:	2b01      	cmp	r3, #1
 800c974:	d10f      	bne.n	800c996 <USBH_ParseCfgDesc+0x13a>
 800c976:	69fb      	ldr	r3, [r7, #28]
 800c978:	799b      	ldrb	r3, [r3, #6]
 800c97a:	2b02      	cmp	r3, #2
 800c97c:	d10b      	bne.n	800c996 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c97e:	69fb      	ldr	r3, [r7, #28]
 800c980:	79db      	ldrb	r3, [r3, #7]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d10f      	bne.n	800c9a6 <USBH_ParseCfgDesc+0x14a>
 800c986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	2b09      	cmp	r3, #9
 800c98c:	d00b      	beq.n	800c9a6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800c98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c990:	2209      	movs	r2, #9
 800c992:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c994:	e007      	b.n	800c9a6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800c996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	2b07      	cmp	r3, #7
 800c99c:	d004      	beq.n	800c9a8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a0:	2207      	movs	r2, #7
 800c9a2:	701a      	strb	r2, [r3, #0]
 800c9a4:	e000      	b.n	800c9a8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c9a6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c9a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9ac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c9b0:	3201      	adds	r2, #1
 800c9b2:	00d2      	lsls	r2, r2, #3
 800c9b4:	211a      	movs	r1, #26
 800c9b6:	fb01 f303 	mul.w	r3, r1, r3
 800c9ba:	4413      	add	r3, r2
 800c9bc:	3308      	adds	r3, #8
 800c9be:	6a3a      	ldr	r2, [r7, #32]
 800c9c0:	4413      	add	r3, r2
 800c9c2:	3304      	adds	r3, #4
 800c9c4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c9c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9c8:	69b9      	ldr	r1, [r7, #24]
 800c9ca:	68f8      	ldr	r0, [r7, #12]
 800c9cc:	f000 f86b 	bl	800caa6 <USBH_ParseEPDesc>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800c9d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c9da:	3301      	adds	r3, #1
 800c9dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c9e0:	69fb      	ldr	r3, [r7, #28]
 800c9e2:	791b      	ldrb	r3, [r3, #4]
 800c9e4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d204      	bcs.n	800c9f6 <USBH_ParseCfgDesc+0x19a>
 800c9ec:	6a3b      	ldr	r3, [r7, #32]
 800c9ee:	885a      	ldrh	r2, [r3, #2]
 800c9f0:	8afb      	ldrh	r3, [r7, #22]
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d8b0      	bhi.n	800c958 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c9f6:	69fb      	ldr	r3, [r7, #28]
 800c9f8:	791b      	ldrb	r3, [r3, #4]
 800c9fa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d201      	bcs.n	800ca06 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800ca02:	2303      	movs	r3, #3
 800ca04:	e01c      	b.n	800ca40 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800ca06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ca10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d805      	bhi.n	800ca24 <USBH_ParseCfgDesc+0x1c8>
 800ca18:	6a3b      	ldr	r3, [r7, #32]
 800ca1a:	885a      	ldrh	r2, [r3, #2]
 800ca1c:	8afb      	ldrh	r3, [r7, #22]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	f63f af74 	bhi.w	800c90c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800ca24:	6a3b      	ldr	r3, [r7, #32]
 800ca26:	791b      	ldrb	r3, [r3, #4]
 800ca28:	2b02      	cmp	r3, #2
 800ca2a:	bf28      	it	cs
 800ca2c:	2302      	movcs	r3, #2
 800ca2e:	b2db      	uxtb	r3, r3
 800ca30:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d201      	bcs.n	800ca3c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800ca38:	2303      	movs	r3, #3
 800ca3a:	e001      	b.n	800ca40 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800ca3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3730      	adds	r7, #48	; 0x30
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b083      	sub	sp, #12
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	781a      	ldrb	r2, [r3, #0]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	785a      	ldrb	r2, [r3, #1]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	789a      	ldrb	r2, [r3, #2]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	78da      	ldrb	r2, [r3, #3]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	791a      	ldrb	r2, [r3, #4]
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	795a      	ldrb	r2, [r3, #5]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	799a      	ldrb	r2, [r3, #6]
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	79da      	ldrb	r2, [r3, #7]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	7a1a      	ldrb	r2, [r3, #8]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	721a      	strb	r2, [r3, #8]
}
 800ca9a:	bf00      	nop
 800ca9c:	370c      	adds	r7, #12
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr

0800caa6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800caa6:	b480      	push	{r7}
 800caa8:	b087      	sub	sp, #28
 800caaa:	af00      	add	r7, sp, #0
 800caac:	60f8      	str	r0, [r7, #12]
 800caae:	60b9      	str	r1, [r7, #8]
 800cab0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800cab2:	2300      	movs	r3, #0
 800cab4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	781a      	ldrb	r2, [r3, #0]
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	785a      	ldrb	r2, [r3, #1]
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	789a      	ldrb	r2, [r3, #2]
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	78da      	ldrb	r2, [r3, #3]
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	3304      	adds	r3, #4
 800cada:	781b      	ldrb	r3, [r3, #0]
 800cadc:	b29a      	uxth	r2, r3
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	3305      	adds	r3, #5
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	021b      	lsls	r3, r3, #8
 800cae8:	b29b      	uxth	r3, r3
 800caea:	4313      	orrs	r3, r2
 800caec:	b29a      	uxth	r2, r3
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	799a      	ldrb	r2, [r3, #6]
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	889b      	ldrh	r3, [r3, #4]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d102      	bne.n	800cb08 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800cb02:	2303      	movs	r3, #3
 800cb04:	75fb      	strb	r3, [r7, #23]
 800cb06:	e033      	b.n	800cb70 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	889b      	ldrh	r3, [r3, #4]
 800cb0c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800cb10:	f023 0307 	bic.w	r3, r3, #7
 800cb14:	b29a      	uxth	r2, r3
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	889b      	ldrh	r3, [r3, #4]
 800cb1e:	b21a      	sxth	r2, r3
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	3304      	adds	r3, #4
 800cb24:	781b      	ldrb	r3, [r3, #0]
 800cb26:	b299      	uxth	r1, r3
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	3305      	adds	r3, #5
 800cb2c:	781b      	ldrb	r3, [r3, #0]
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	021b      	lsls	r3, r3, #8
 800cb32:	b29b      	uxth	r3, r3
 800cb34:	430b      	orrs	r3, r1
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d110      	bne.n	800cb62 <USBH_ParseEPDesc+0xbc>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	3304      	adds	r3, #4
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	b299      	uxth	r1, r3
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	3305      	adds	r3, #5
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	b29b      	uxth	r3, r3
 800cb50:	021b      	lsls	r3, r3, #8
 800cb52:	b29b      	uxth	r3, r3
 800cb54:	430b      	orrs	r3, r1
 800cb56:	b29b      	uxth	r3, r3
 800cb58:	b21b      	sxth	r3, r3
 800cb5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb5e:	b21b      	sxth	r3, r3
 800cb60:	e001      	b.n	800cb66 <USBH_ParseEPDesc+0xc0>
 800cb62:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb66:	4313      	orrs	r3, r2
 800cb68:	b21b      	sxth	r3, r3
 800cb6a:	b29a      	uxth	r2, r3
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d116      	bne.n	800cba8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	78db      	ldrb	r3, [r3, #3]
 800cb7e:	f003 0303 	and.w	r3, r3, #3
 800cb82:	2b01      	cmp	r3, #1
 800cb84:	d005      	beq.n	800cb92 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	78db      	ldrb	r3, [r3, #3]
 800cb8a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800cb8e:	2b03      	cmp	r3, #3
 800cb90:	d127      	bne.n	800cbe2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	799b      	ldrb	r3, [r3, #6]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d003      	beq.n	800cba2 <USBH_ParseEPDesc+0xfc>
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	799b      	ldrb	r3, [r3, #6]
 800cb9e:	2b10      	cmp	r3, #16
 800cba0:	d91f      	bls.n	800cbe2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800cba2:	2303      	movs	r3, #3
 800cba4:	75fb      	strb	r3, [r7, #23]
 800cba6:	e01c      	b.n	800cbe2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	78db      	ldrb	r3, [r3, #3]
 800cbac:	f003 0303 	and.w	r3, r3, #3
 800cbb0:	2b01      	cmp	r3, #1
 800cbb2:	d10a      	bne.n	800cbca <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	799b      	ldrb	r3, [r3, #6]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d003      	beq.n	800cbc4 <USBH_ParseEPDesc+0x11e>
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	799b      	ldrb	r3, [r3, #6]
 800cbc0:	2b10      	cmp	r3, #16
 800cbc2:	d90e      	bls.n	800cbe2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800cbc4:	2303      	movs	r3, #3
 800cbc6:	75fb      	strb	r3, [r7, #23]
 800cbc8:	e00b      	b.n	800cbe2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	78db      	ldrb	r3, [r3, #3]
 800cbce:	f003 0303 	and.w	r3, r3, #3
 800cbd2:	2b03      	cmp	r3, #3
 800cbd4:	d105      	bne.n	800cbe2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	799b      	ldrb	r3, [r3, #6]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d101      	bne.n	800cbe2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800cbde:	2303      	movs	r3, #3
 800cbe0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800cbe2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	371c      	adds	r7, #28
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr

0800cbf0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b087      	sub	sp, #28
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	60f8      	str	r0, [r7, #12]
 800cbf8:	60b9      	str	r1, [r7, #8]
 800cbfa:	4613      	mov	r3, r2
 800cbfc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	3301      	adds	r3, #1
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	2b03      	cmp	r3, #3
 800cc06:	d120      	bne.n	800cc4a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	1e9a      	subs	r2, r3, #2
 800cc0e:	88fb      	ldrh	r3, [r7, #6]
 800cc10:	4293      	cmp	r3, r2
 800cc12:	bf28      	it	cs
 800cc14:	4613      	movcs	r3, r2
 800cc16:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	3302      	adds	r3, #2
 800cc1c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800cc1e:	2300      	movs	r3, #0
 800cc20:	82fb      	strh	r3, [r7, #22]
 800cc22:	e00b      	b.n	800cc3c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800cc24:	8afb      	ldrh	r3, [r7, #22]
 800cc26:	68fa      	ldr	r2, [r7, #12]
 800cc28:	4413      	add	r3, r2
 800cc2a:	781a      	ldrb	r2, [r3, #0]
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	3301      	adds	r3, #1
 800cc34:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800cc36:	8afb      	ldrh	r3, [r7, #22]
 800cc38:	3302      	adds	r3, #2
 800cc3a:	82fb      	strh	r3, [r7, #22]
 800cc3c:	8afa      	ldrh	r2, [r7, #22]
 800cc3e:	8abb      	ldrh	r3, [r7, #20]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d3ef      	bcc.n	800cc24 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	2200      	movs	r2, #0
 800cc48:	701a      	strb	r2, [r3, #0]
  }
}
 800cc4a:	bf00      	nop
 800cc4c:	371c      	adds	r7, #28
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc54:	4770      	bx	lr

0800cc56 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800cc56:	b480      	push	{r7}
 800cc58:	b085      	sub	sp, #20
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	6078      	str	r0, [r7, #4]
 800cc5e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	881a      	ldrh	r2, [r3, #0]
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	b29b      	uxth	r3, r3
 800cc6a:	4413      	add	r3, r2
 800cc6c:	b29a      	uxth	r2, r3
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	781b      	ldrb	r3, [r3, #0]
 800cc76:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	4413      	add	r3, r2
 800cc7c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cc7e:	68fb      	ldr	r3, [r7, #12]
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3714      	adds	r7, #20
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr

0800cc8c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b086      	sub	sp, #24
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	60f8      	str	r0, [r7, #12]
 800cc94:	60b9      	str	r1, [r7, #8]
 800cc96:	4613      	mov	r3, r2
 800cc98:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	789b      	ldrb	r3, [r3, #2]
 800cca2:	2b01      	cmp	r3, #1
 800cca4:	d002      	beq.n	800ccac <USBH_CtlReq+0x20>
 800cca6:	2b02      	cmp	r3, #2
 800cca8:	d00f      	beq.n	800ccca <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ccaa:	e027      	b.n	800ccfc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	68ba      	ldr	r2, [r7, #8]
 800ccb0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	88fa      	ldrh	r2, [r7, #6]
 800ccb6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2201      	movs	r2, #1
 800ccbc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	2202      	movs	r2, #2
 800ccc2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	75fb      	strb	r3, [r7, #23]
      break;
 800ccc8:	e018      	b.n	800ccfc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ccca:	68f8      	ldr	r0, [r7, #12]
 800cccc:	f000 f81c 	bl	800cd08 <USBH_HandleControl>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ccd4:	7dfb      	ldrb	r3, [r7, #23]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d002      	beq.n	800cce0 <USBH_CtlReq+0x54>
 800ccda:	7dfb      	ldrb	r3, [r7, #23]
 800ccdc:	2b03      	cmp	r3, #3
 800ccde:	d106      	bne.n	800ccee <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	2201      	movs	r2, #1
 800cce4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2200      	movs	r2, #0
 800ccea:	761a      	strb	r2, [r3, #24]
      break;
 800ccec:	e005      	b.n	800ccfa <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ccee:	7dfb      	ldrb	r3, [r7, #23]
 800ccf0:	2b02      	cmp	r3, #2
 800ccf2:	d102      	bne.n	800ccfa <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	2201      	movs	r2, #1
 800ccf8:	709a      	strb	r2, [r3, #2]
      break;
 800ccfa:	bf00      	nop
  }
  return status;
 800ccfc:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3718      	adds	r7, #24
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
	...

0800cd08 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b086      	sub	sp, #24
 800cd0c:	af02      	add	r7, sp, #8
 800cd0e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800cd10:	2301      	movs	r3, #1
 800cd12:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cd14:	2300      	movs	r3, #0
 800cd16:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	7e1b      	ldrb	r3, [r3, #24]
 800cd1c:	3b01      	subs	r3, #1
 800cd1e:	2b0a      	cmp	r3, #10
 800cd20:	f200 8156 	bhi.w	800cfd0 <USBH_HandleControl+0x2c8>
 800cd24:	a201      	add	r2, pc, #4	; (adr r2, 800cd2c <USBH_HandleControl+0x24>)
 800cd26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd2a:	bf00      	nop
 800cd2c:	0800cd59 	.word	0x0800cd59
 800cd30:	0800cd73 	.word	0x0800cd73
 800cd34:	0800cddd 	.word	0x0800cddd
 800cd38:	0800ce03 	.word	0x0800ce03
 800cd3c:	0800ce3b 	.word	0x0800ce3b
 800cd40:	0800ce65 	.word	0x0800ce65
 800cd44:	0800ceb7 	.word	0x0800ceb7
 800cd48:	0800ced9 	.word	0x0800ced9
 800cd4c:	0800cf15 	.word	0x0800cf15
 800cd50:	0800cf3b 	.word	0x0800cf3b
 800cd54:	0800cf79 	.word	0x0800cf79
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f103 0110 	add.w	r1, r3, #16
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	795b      	ldrb	r3, [r3, #5]
 800cd62:	461a      	mov	r2, r3
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f000 f943 	bl	800cff0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2202      	movs	r2, #2
 800cd6e:	761a      	strb	r2, [r3, #24]
      break;
 800cd70:	e139      	b.n	800cfe6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	795b      	ldrb	r3, [r3, #5]
 800cd76:	4619      	mov	r1, r3
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f004 f9f5 	bl	8011168 <USBH_LL_GetURBState>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800cd82:	7bbb      	ldrb	r3, [r7, #14]
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d11e      	bne.n	800cdc6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	7c1b      	ldrb	r3, [r3, #16]
 800cd8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cd90:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	8adb      	ldrh	r3, [r3, #22]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d00a      	beq.n	800cdb0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800cd9a:	7b7b      	ldrb	r3, [r7, #13]
 800cd9c:	2b80      	cmp	r3, #128	; 0x80
 800cd9e:	d103      	bne.n	800cda8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2203      	movs	r2, #3
 800cda4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cda6:	e115      	b.n	800cfd4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2205      	movs	r2, #5
 800cdac:	761a      	strb	r2, [r3, #24]
      break;
 800cdae:	e111      	b.n	800cfd4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800cdb0:	7b7b      	ldrb	r3, [r7, #13]
 800cdb2:	2b80      	cmp	r3, #128	; 0x80
 800cdb4:	d103      	bne.n	800cdbe <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2209      	movs	r2, #9
 800cdba:	761a      	strb	r2, [r3, #24]
      break;
 800cdbc:	e10a      	b.n	800cfd4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2207      	movs	r2, #7
 800cdc2:	761a      	strb	r2, [r3, #24]
      break;
 800cdc4:	e106      	b.n	800cfd4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800cdc6:	7bbb      	ldrb	r3, [r7, #14]
 800cdc8:	2b04      	cmp	r3, #4
 800cdca:	d003      	beq.n	800cdd4 <USBH_HandleControl+0xcc>
 800cdcc:	7bbb      	ldrb	r3, [r7, #14]
 800cdce:	2b02      	cmp	r3, #2
 800cdd0:	f040 8100 	bne.w	800cfd4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	220b      	movs	r2, #11
 800cdd8:	761a      	strb	r2, [r3, #24]
      break;
 800cdda:	e0fb      	b.n	800cfd4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cde2:	b29a      	uxth	r2, r3
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6899      	ldr	r1, [r3, #8]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	899a      	ldrh	r2, [r3, #12]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	791b      	ldrb	r3, [r3, #4]
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f000 f93a 	bl	800d06e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2204      	movs	r2, #4
 800cdfe:	761a      	strb	r2, [r3, #24]
      break;
 800ce00:	e0f1      	b.n	800cfe6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	791b      	ldrb	r3, [r3, #4]
 800ce06:	4619      	mov	r1, r3
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f004 f9ad 	bl	8011168 <USBH_LL_GetURBState>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ce12:	7bbb      	ldrb	r3, [r7, #14]
 800ce14:	2b01      	cmp	r3, #1
 800ce16:	d102      	bne.n	800ce1e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2209      	movs	r2, #9
 800ce1c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ce1e:	7bbb      	ldrb	r3, [r7, #14]
 800ce20:	2b05      	cmp	r3, #5
 800ce22:	d102      	bne.n	800ce2a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ce24:	2303      	movs	r3, #3
 800ce26:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ce28:	e0d6      	b.n	800cfd8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ce2a:	7bbb      	ldrb	r3, [r7, #14]
 800ce2c:	2b04      	cmp	r3, #4
 800ce2e:	f040 80d3 	bne.w	800cfd8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	220b      	movs	r2, #11
 800ce36:	761a      	strb	r2, [r3, #24]
      break;
 800ce38:	e0ce      	b.n	800cfd8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6899      	ldr	r1, [r3, #8]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	899a      	ldrh	r2, [r3, #12]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	795b      	ldrb	r3, [r3, #5]
 800ce46:	2001      	movs	r0, #1
 800ce48:	9000      	str	r0, [sp, #0]
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f000 f8ea 	bl	800d024 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ce56:	b29a      	uxth	r2, r3
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2206      	movs	r2, #6
 800ce60:	761a      	strb	r2, [r3, #24]
      break;
 800ce62:	e0c0      	b.n	800cfe6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	795b      	ldrb	r3, [r3, #5]
 800ce68:	4619      	mov	r1, r3
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f004 f97c 	bl	8011168 <USBH_LL_GetURBState>
 800ce70:	4603      	mov	r3, r0
 800ce72:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ce74:	7bbb      	ldrb	r3, [r7, #14]
 800ce76:	2b01      	cmp	r3, #1
 800ce78:	d103      	bne.n	800ce82 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2207      	movs	r2, #7
 800ce7e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ce80:	e0ac      	b.n	800cfdc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ce82:	7bbb      	ldrb	r3, [r7, #14]
 800ce84:	2b05      	cmp	r3, #5
 800ce86:	d105      	bne.n	800ce94 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	220c      	movs	r2, #12
 800ce8c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ce8e:	2303      	movs	r3, #3
 800ce90:	73fb      	strb	r3, [r7, #15]
      break;
 800ce92:	e0a3      	b.n	800cfdc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ce94:	7bbb      	ldrb	r3, [r7, #14]
 800ce96:	2b02      	cmp	r3, #2
 800ce98:	d103      	bne.n	800cea2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2205      	movs	r2, #5
 800ce9e:	761a      	strb	r2, [r3, #24]
      break;
 800cea0:	e09c      	b.n	800cfdc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800cea2:	7bbb      	ldrb	r3, [r7, #14]
 800cea4:	2b04      	cmp	r3, #4
 800cea6:	f040 8099 	bne.w	800cfdc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	220b      	movs	r2, #11
 800ceae:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ceb0:	2302      	movs	r3, #2
 800ceb2:	73fb      	strb	r3, [r7, #15]
      break;
 800ceb4:	e092      	b.n	800cfdc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	791b      	ldrb	r3, [r3, #4]
 800ceba:	2200      	movs	r2, #0
 800cebc:	2100      	movs	r1, #0
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f000 f8d5 	bl	800d06e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ceca:	b29a      	uxth	r2, r3
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2208      	movs	r2, #8
 800ced4:	761a      	strb	r2, [r3, #24]

      break;
 800ced6:	e086      	b.n	800cfe6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	791b      	ldrb	r3, [r3, #4]
 800cedc:	4619      	mov	r1, r3
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f004 f942 	bl	8011168 <USBH_LL_GetURBState>
 800cee4:	4603      	mov	r3, r0
 800cee6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cee8:	7bbb      	ldrb	r3, [r7, #14]
 800ceea:	2b01      	cmp	r3, #1
 800ceec:	d105      	bne.n	800cefa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	220d      	movs	r2, #13
 800cef2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800cef4:	2300      	movs	r3, #0
 800cef6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cef8:	e072      	b.n	800cfe0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800cefa:	7bbb      	ldrb	r3, [r7, #14]
 800cefc:	2b04      	cmp	r3, #4
 800cefe:	d103      	bne.n	800cf08 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	220b      	movs	r2, #11
 800cf04:	761a      	strb	r2, [r3, #24]
      break;
 800cf06:	e06b      	b.n	800cfe0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800cf08:	7bbb      	ldrb	r3, [r7, #14]
 800cf0a:	2b05      	cmp	r3, #5
 800cf0c:	d168      	bne.n	800cfe0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800cf0e:	2303      	movs	r3, #3
 800cf10:	73fb      	strb	r3, [r7, #15]
      break;
 800cf12:	e065      	b.n	800cfe0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	795b      	ldrb	r3, [r3, #5]
 800cf18:	2201      	movs	r2, #1
 800cf1a:	9200      	str	r2, [sp, #0]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	2100      	movs	r1, #0
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f000 f87f 	bl	800d024 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cf2c:	b29a      	uxth	r2, r3
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	220a      	movs	r2, #10
 800cf36:	761a      	strb	r2, [r3, #24]
      break;
 800cf38:	e055      	b.n	800cfe6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	795b      	ldrb	r3, [r3, #5]
 800cf3e:	4619      	mov	r1, r3
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f004 f911 	bl	8011168 <USBH_LL_GetURBState>
 800cf46:	4603      	mov	r3, r0
 800cf48:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800cf4a:	7bbb      	ldrb	r3, [r7, #14]
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d105      	bne.n	800cf5c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800cf50:	2300      	movs	r3, #0
 800cf52:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	220d      	movs	r2, #13
 800cf58:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cf5a:	e043      	b.n	800cfe4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cf5c:	7bbb      	ldrb	r3, [r7, #14]
 800cf5e:	2b02      	cmp	r3, #2
 800cf60:	d103      	bne.n	800cf6a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2209      	movs	r2, #9
 800cf66:	761a      	strb	r2, [r3, #24]
      break;
 800cf68:	e03c      	b.n	800cfe4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800cf6a:	7bbb      	ldrb	r3, [r7, #14]
 800cf6c:	2b04      	cmp	r3, #4
 800cf6e:	d139      	bne.n	800cfe4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	220b      	movs	r2, #11
 800cf74:	761a      	strb	r2, [r3, #24]
      break;
 800cf76:	e035      	b.n	800cfe4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	7e5b      	ldrb	r3, [r3, #25]
 800cf7c:	3301      	adds	r3, #1
 800cf7e:	b2da      	uxtb	r2, r3
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	765a      	strb	r2, [r3, #25]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	7e5b      	ldrb	r3, [r3, #25]
 800cf88:	2b02      	cmp	r3, #2
 800cf8a:	d806      	bhi.n	800cf9a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2201      	movs	r2, #1
 800cf90:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2201      	movs	r2, #1
 800cf96:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800cf98:	e025      	b.n	800cfe6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cfa0:	2106      	movs	r1, #6
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	795b      	ldrb	r3, [r3, #5]
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f000 f90c 	bl	800d1d0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	791b      	ldrb	r3, [r3, #4]
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f000 f906 	bl	800d1d0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800cfca:	2302      	movs	r3, #2
 800cfcc:	73fb      	strb	r3, [r7, #15]
      break;
 800cfce:	e00a      	b.n	800cfe6 <USBH_HandleControl+0x2de>

    default:
      break;
 800cfd0:	bf00      	nop
 800cfd2:	e008      	b.n	800cfe6 <USBH_HandleControl+0x2de>
      break;
 800cfd4:	bf00      	nop
 800cfd6:	e006      	b.n	800cfe6 <USBH_HandleControl+0x2de>
      break;
 800cfd8:	bf00      	nop
 800cfda:	e004      	b.n	800cfe6 <USBH_HandleControl+0x2de>
      break;
 800cfdc:	bf00      	nop
 800cfde:	e002      	b.n	800cfe6 <USBH_HandleControl+0x2de>
      break;
 800cfe0:	bf00      	nop
 800cfe2:	e000      	b.n	800cfe6 <USBH_HandleControl+0x2de>
      break;
 800cfe4:	bf00      	nop
  }

  return status;
 800cfe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3710      	adds	r7, #16
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}

0800cff0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b088      	sub	sp, #32
 800cff4:	af04      	add	r7, sp, #16
 800cff6:	60f8      	str	r0, [r7, #12]
 800cff8:	60b9      	str	r1, [r7, #8]
 800cffa:	4613      	mov	r3, r2
 800cffc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cffe:	79f9      	ldrb	r1, [r7, #7]
 800d000:	2300      	movs	r3, #0
 800d002:	9303      	str	r3, [sp, #12]
 800d004:	2308      	movs	r3, #8
 800d006:	9302      	str	r3, [sp, #8]
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	9301      	str	r3, [sp, #4]
 800d00c:	2300      	movs	r3, #0
 800d00e:	9300      	str	r3, [sp, #0]
 800d010:	2300      	movs	r3, #0
 800d012:	2200      	movs	r2, #0
 800d014:	68f8      	ldr	r0, [r7, #12]
 800d016:	f004 f876 	bl	8011106 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800d01a:	2300      	movs	r3, #0
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3710      	adds	r7, #16
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b088      	sub	sp, #32
 800d028:	af04      	add	r7, sp, #16
 800d02a:	60f8      	str	r0, [r7, #12]
 800d02c:	60b9      	str	r1, [r7, #8]
 800d02e:	4611      	mov	r1, r2
 800d030:	461a      	mov	r2, r3
 800d032:	460b      	mov	r3, r1
 800d034:	80fb      	strh	r3, [r7, #6]
 800d036:	4613      	mov	r3, r2
 800d038:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d040:	2b00      	cmp	r3, #0
 800d042:	d001      	beq.n	800d048 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d044:	2300      	movs	r3, #0
 800d046:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d048:	7979      	ldrb	r1, [r7, #5]
 800d04a:	7e3b      	ldrb	r3, [r7, #24]
 800d04c:	9303      	str	r3, [sp, #12]
 800d04e:	88fb      	ldrh	r3, [r7, #6]
 800d050:	9302      	str	r3, [sp, #8]
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	9301      	str	r3, [sp, #4]
 800d056:	2301      	movs	r3, #1
 800d058:	9300      	str	r3, [sp, #0]
 800d05a:	2300      	movs	r3, #0
 800d05c:	2200      	movs	r2, #0
 800d05e:	68f8      	ldr	r0, [r7, #12]
 800d060:	f004 f851 	bl	8011106 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d064:	2300      	movs	r3, #0
}
 800d066:	4618      	mov	r0, r3
 800d068:	3710      	adds	r7, #16
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}

0800d06e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d06e:	b580      	push	{r7, lr}
 800d070:	b088      	sub	sp, #32
 800d072:	af04      	add	r7, sp, #16
 800d074:	60f8      	str	r0, [r7, #12]
 800d076:	60b9      	str	r1, [r7, #8]
 800d078:	4611      	mov	r1, r2
 800d07a:	461a      	mov	r2, r3
 800d07c:	460b      	mov	r3, r1
 800d07e:	80fb      	strh	r3, [r7, #6]
 800d080:	4613      	mov	r3, r2
 800d082:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d084:	7979      	ldrb	r1, [r7, #5]
 800d086:	2300      	movs	r3, #0
 800d088:	9303      	str	r3, [sp, #12]
 800d08a:	88fb      	ldrh	r3, [r7, #6]
 800d08c:	9302      	str	r3, [sp, #8]
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	9301      	str	r3, [sp, #4]
 800d092:	2301      	movs	r3, #1
 800d094:	9300      	str	r3, [sp, #0]
 800d096:	2300      	movs	r3, #0
 800d098:	2201      	movs	r2, #1
 800d09a:	68f8      	ldr	r0, [r7, #12]
 800d09c:	f004 f833 	bl	8011106 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d0a0:	2300      	movs	r3, #0

}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3710      	adds	r7, #16
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}

0800d0aa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d0aa:	b580      	push	{r7, lr}
 800d0ac:	b088      	sub	sp, #32
 800d0ae:	af04      	add	r7, sp, #16
 800d0b0:	60f8      	str	r0, [r7, #12]
 800d0b2:	60b9      	str	r1, [r7, #8]
 800d0b4:	4611      	mov	r1, r2
 800d0b6:	461a      	mov	r2, r3
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	80fb      	strh	r3, [r7, #6]
 800d0bc:	4613      	mov	r3, r2
 800d0be:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d001      	beq.n	800d0ce <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d0ce:	7979      	ldrb	r1, [r7, #5]
 800d0d0:	7e3b      	ldrb	r3, [r7, #24]
 800d0d2:	9303      	str	r3, [sp, #12]
 800d0d4:	88fb      	ldrh	r3, [r7, #6]
 800d0d6:	9302      	str	r3, [sp, #8]
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	9301      	str	r3, [sp, #4]
 800d0dc:	2301      	movs	r3, #1
 800d0de:	9300      	str	r3, [sp, #0]
 800d0e0:	2302      	movs	r3, #2
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	68f8      	ldr	r0, [r7, #12]
 800d0e6:	f004 f80e 	bl	8011106 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d0ea:	2300      	movs	r3, #0
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	3710      	adds	r7, #16
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}

0800d0f4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b088      	sub	sp, #32
 800d0f8:	af04      	add	r7, sp, #16
 800d0fa:	60f8      	str	r0, [r7, #12]
 800d0fc:	60b9      	str	r1, [r7, #8]
 800d0fe:	4611      	mov	r1, r2
 800d100:	461a      	mov	r2, r3
 800d102:	460b      	mov	r3, r1
 800d104:	80fb      	strh	r3, [r7, #6]
 800d106:	4613      	mov	r3, r2
 800d108:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d10a:	7979      	ldrb	r1, [r7, #5]
 800d10c:	2300      	movs	r3, #0
 800d10e:	9303      	str	r3, [sp, #12]
 800d110:	88fb      	ldrh	r3, [r7, #6]
 800d112:	9302      	str	r3, [sp, #8]
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	9301      	str	r3, [sp, #4]
 800d118:	2301      	movs	r3, #1
 800d11a:	9300      	str	r3, [sp, #0]
 800d11c:	2302      	movs	r3, #2
 800d11e:	2201      	movs	r2, #1
 800d120:	68f8      	ldr	r0, [r7, #12]
 800d122:	f003 fff0 	bl	8011106 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d126:	2300      	movs	r3, #0
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3710      	adds	r7, #16
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}

0800d130 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b086      	sub	sp, #24
 800d134:	af04      	add	r7, sp, #16
 800d136:	6078      	str	r0, [r7, #4]
 800d138:	4608      	mov	r0, r1
 800d13a:	4611      	mov	r1, r2
 800d13c:	461a      	mov	r2, r3
 800d13e:	4603      	mov	r3, r0
 800d140:	70fb      	strb	r3, [r7, #3]
 800d142:	460b      	mov	r3, r1
 800d144:	70bb      	strb	r3, [r7, #2]
 800d146:	4613      	mov	r3, r2
 800d148:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d14a:	7878      	ldrb	r0, [r7, #1]
 800d14c:	78ba      	ldrb	r2, [r7, #2]
 800d14e:	78f9      	ldrb	r1, [r7, #3]
 800d150:	8b3b      	ldrh	r3, [r7, #24]
 800d152:	9302      	str	r3, [sp, #8]
 800d154:	7d3b      	ldrb	r3, [r7, #20]
 800d156:	9301      	str	r3, [sp, #4]
 800d158:	7c3b      	ldrb	r3, [r7, #16]
 800d15a:	9300      	str	r3, [sp, #0]
 800d15c:	4603      	mov	r3, r0
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f003 ff83 	bl	801106a <USBH_LL_OpenPipe>

  return USBH_OK;
 800d164:	2300      	movs	r3, #0
}
 800d166:	4618      	mov	r0, r3
 800d168:	3708      	adds	r7, #8
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}

0800d16e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d16e:	b580      	push	{r7, lr}
 800d170:	b082      	sub	sp, #8
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
 800d176:	460b      	mov	r3, r1
 800d178:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d17a:	78fb      	ldrb	r3, [r7, #3]
 800d17c:	4619      	mov	r1, r3
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f003 ffa2 	bl	80110c8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d184:	2300      	movs	r3, #0
}
 800d186:	4618      	mov	r0, r3
 800d188:	3708      	adds	r7, #8
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}

0800d18e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d18e:	b580      	push	{r7, lr}
 800d190:	b084      	sub	sp, #16
 800d192:	af00      	add	r7, sp, #0
 800d194:	6078      	str	r0, [r7, #4]
 800d196:	460b      	mov	r3, r1
 800d198:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f000 f836 	bl	800d20c <USBH_GetFreePipe>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d1a4:	89fb      	ldrh	r3, [r7, #14]
 800d1a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d00a      	beq.n	800d1c4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d1ae:	78fa      	ldrb	r2, [r7, #3]
 800d1b0:	89fb      	ldrh	r3, [r7, #14]
 800d1b2:	f003 030f 	and.w	r3, r3, #15
 800d1b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d1ba:	6879      	ldr	r1, [r7, #4]
 800d1bc:	33e0      	adds	r3, #224	; 0xe0
 800d1be:	009b      	lsls	r3, r3, #2
 800d1c0:	440b      	add	r3, r1
 800d1c2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d1c4:	89fb      	ldrh	r3, [r7, #14]
 800d1c6:	b2db      	uxtb	r3, r3
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3710      	adds	r7, #16
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}

0800d1d0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b083      	sub	sp, #12
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	460b      	mov	r3, r1
 800d1da:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d1dc:	78fb      	ldrb	r3, [r7, #3]
 800d1de:	2b0f      	cmp	r3, #15
 800d1e0:	d80d      	bhi.n	800d1fe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d1e2:	78fb      	ldrb	r3, [r7, #3]
 800d1e4:	687a      	ldr	r2, [r7, #4]
 800d1e6:	33e0      	adds	r3, #224	; 0xe0
 800d1e8:	009b      	lsls	r3, r3, #2
 800d1ea:	4413      	add	r3, r2
 800d1ec:	685a      	ldr	r2, [r3, #4]
 800d1ee:	78fb      	ldrb	r3, [r7, #3]
 800d1f0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d1f4:	6879      	ldr	r1, [r7, #4]
 800d1f6:	33e0      	adds	r3, #224	; 0xe0
 800d1f8:	009b      	lsls	r3, r3, #2
 800d1fa:	440b      	add	r3, r1
 800d1fc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d1fe:	2300      	movs	r3, #0
}
 800d200:	4618      	mov	r0, r3
 800d202:	370c      	adds	r7, #12
 800d204:	46bd      	mov	sp, r7
 800d206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20a:	4770      	bx	lr

0800d20c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b085      	sub	sp, #20
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d214:	2300      	movs	r3, #0
 800d216:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d218:	2300      	movs	r3, #0
 800d21a:	73fb      	strb	r3, [r7, #15]
 800d21c:	e00f      	b.n	800d23e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d21e:	7bfb      	ldrb	r3, [r7, #15]
 800d220:	687a      	ldr	r2, [r7, #4]
 800d222:	33e0      	adds	r3, #224	; 0xe0
 800d224:	009b      	lsls	r3, r3, #2
 800d226:	4413      	add	r3, r2
 800d228:	685b      	ldr	r3, [r3, #4]
 800d22a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d102      	bne.n	800d238 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d232:	7bfb      	ldrb	r3, [r7, #15]
 800d234:	b29b      	uxth	r3, r3
 800d236:	e007      	b.n	800d248 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d238:	7bfb      	ldrb	r3, [r7, #15]
 800d23a:	3301      	adds	r3, #1
 800d23c:	73fb      	strb	r3, [r7, #15]
 800d23e:	7bfb      	ldrb	r3, [r7, #15]
 800d240:	2b0f      	cmp	r3, #15
 800d242:	d9ec      	bls.n	800d21e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d244:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d248:	4618      	mov	r0, r3
 800d24a:	3714      	adds	r7, #20
 800d24c:	46bd      	mov	sp, r7
 800d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d252:	4770      	bx	lr

0800d254 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b084      	sub	sp, #16
 800d258:	af00      	add	r7, sp, #0
 800d25a:	4603      	mov	r3, r0
 800d25c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d25e:	79fb      	ldrb	r3, [r7, #7]
 800d260:	4a08      	ldr	r2, [pc, #32]	; (800d284 <disk_status+0x30>)
 800d262:	009b      	lsls	r3, r3, #2
 800d264:	4413      	add	r3, r2
 800d266:	685b      	ldr	r3, [r3, #4]
 800d268:	685b      	ldr	r3, [r3, #4]
 800d26a:	79fa      	ldrb	r2, [r7, #7]
 800d26c:	4905      	ldr	r1, [pc, #20]	; (800d284 <disk_status+0x30>)
 800d26e:	440a      	add	r2, r1
 800d270:	7a12      	ldrb	r2, [r2, #8]
 800d272:	4610      	mov	r0, r2
 800d274:	4798      	blx	r3
 800d276:	4603      	mov	r3, r0
 800d278:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d27a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3710      	adds	r7, #16
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}
 800d284:	20002efc 	.word	0x20002efc

0800d288 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b084      	sub	sp, #16
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	4603      	mov	r3, r0
 800d290:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d292:	2300      	movs	r3, #0
 800d294:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d296:	79fb      	ldrb	r3, [r7, #7]
 800d298:	4a0d      	ldr	r2, [pc, #52]	; (800d2d0 <disk_initialize+0x48>)
 800d29a:	5cd3      	ldrb	r3, [r2, r3]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d111      	bne.n	800d2c4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d2a0:	79fb      	ldrb	r3, [r7, #7]
 800d2a2:	4a0b      	ldr	r2, [pc, #44]	; (800d2d0 <disk_initialize+0x48>)
 800d2a4:	2101      	movs	r1, #1
 800d2a6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d2a8:	79fb      	ldrb	r3, [r7, #7]
 800d2aa:	4a09      	ldr	r2, [pc, #36]	; (800d2d0 <disk_initialize+0x48>)
 800d2ac:	009b      	lsls	r3, r3, #2
 800d2ae:	4413      	add	r3, r2
 800d2b0:	685b      	ldr	r3, [r3, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	79fa      	ldrb	r2, [r7, #7]
 800d2b6:	4906      	ldr	r1, [pc, #24]	; (800d2d0 <disk_initialize+0x48>)
 800d2b8:	440a      	add	r2, r1
 800d2ba:	7a12      	ldrb	r2, [r2, #8]
 800d2bc:	4610      	mov	r0, r2
 800d2be:	4798      	blx	r3
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d2c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3710      	adds	r7, #16
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}
 800d2ce:	bf00      	nop
 800d2d0:	20002efc 	.word	0x20002efc

0800d2d4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d2d4:	b590      	push	{r4, r7, lr}
 800d2d6:	b087      	sub	sp, #28
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	60b9      	str	r1, [r7, #8]
 800d2dc:	607a      	str	r2, [r7, #4]
 800d2de:	603b      	str	r3, [r7, #0]
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d2e4:	7bfb      	ldrb	r3, [r7, #15]
 800d2e6:	4a0a      	ldr	r2, [pc, #40]	; (800d310 <disk_read+0x3c>)
 800d2e8:	009b      	lsls	r3, r3, #2
 800d2ea:	4413      	add	r3, r2
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	689c      	ldr	r4, [r3, #8]
 800d2f0:	7bfb      	ldrb	r3, [r7, #15]
 800d2f2:	4a07      	ldr	r2, [pc, #28]	; (800d310 <disk_read+0x3c>)
 800d2f4:	4413      	add	r3, r2
 800d2f6:	7a18      	ldrb	r0, [r3, #8]
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	687a      	ldr	r2, [r7, #4]
 800d2fc:	68b9      	ldr	r1, [r7, #8]
 800d2fe:	47a0      	blx	r4
 800d300:	4603      	mov	r3, r0
 800d302:	75fb      	strb	r3, [r7, #23]
  return res;
 800d304:	7dfb      	ldrb	r3, [r7, #23]
}
 800d306:	4618      	mov	r0, r3
 800d308:	371c      	adds	r7, #28
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd90      	pop	{r4, r7, pc}
 800d30e:	bf00      	nop
 800d310:	20002efc 	.word	0x20002efc

0800d314 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d314:	b590      	push	{r4, r7, lr}
 800d316:	b087      	sub	sp, #28
 800d318:	af00      	add	r7, sp, #0
 800d31a:	60b9      	str	r1, [r7, #8]
 800d31c:	607a      	str	r2, [r7, #4]
 800d31e:	603b      	str	r3, [r7, #0]
 800d320:	4603      	mov	r3, r0
 800d322:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d324:	7bfb      	ldrb	r3, [r7, #15]
 800d326:	4a0a      	ldr	r2, [pc, #40]	; (800d350 <disk_write+0x3c>)
 800d328:	009b      	lsls	r3, r3, #2
 800d32a:	4413      	add	r3, r2
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	68dc      	ldr	r4, [r3, #12]
 800d330:	7bfb      	ldrb	r3, [r7, #15]
 800d332:	4a07      	ldr	r2, [pc, #28]	; (800d350 <disk_write+0x3c>)
 800d334:	4413      	add	r3, r2
 800d336:	7a18      	ldrb	r0, [r3, #8]
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	687a      	ldr	r2, [r7, #4]
 800d33c:	68b9      	ldr	r1, [r7, #8]
 800d33e:	47a0      	blx	r4
 800d340:	4603      	mov	r3, r0
 800d342:	75fb      	strb	r3, [r7, #23]
  return res;
 800d344:	7dfb      	ldrb	r3, [r7, #23]
}
 800d346:	4618      	mov	r0, r3
 800d348:	371c      	adds	r7, #28
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd90      	pop	{r4, r7, pc}
 800d34e:	bf00      	nop
 800d350:	20002efc 	.word	0x20002efc

0800d354 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b084      	sub	sp, #16
 800d358:	af00      	add	r7, sp, #0
 800d35a:	4603      	mov	r3, r0
 800d35c:	603a      	str	r2, [r7, #0]
 800d35e:	71fb      	strb	r3, [r7, #7]
 800d360:	460b      	mov	r3, r1
 800d362:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d364:	79fb      	ldrb	r3, [r7, #7]
 800d366:	4a09      	ldr	r2, [pc, #36]	; (800d38c <disk_ioctl+0x38>)
 800d368:	009b      	lsls	r3, r3, #2
 800d36a:	4413      	add	r3, r2
 800d36c:	685b      	ldr	r3, [r3, #4]
 800d36e:	691b      	ldr	r3, [r3, #16]
 800d370:	79fa      	ldrb	r2, [r7, #7]
 800d372:	4906      	ldr	r1, [pc, #24]	; (800d38c <disk_ioctl+0x38>)
 800d374:	440a      	add	r2, r1
 800d376:	7a10      	ldrb	r0, [r2, #8]
 800d378:	79b9      	ldrb	r1, [r7, #6]
 800d37a:	683a      	ldr	r2, [r7, #0]
 800d37c:	4798      	blx	r3
 800d37e:	4603      	mov	r3, r0
 800d380:	73fb      	strb	r3, [r7, #15]
  return res;
 800d382:	7bfb      	ldrb	r3, [r7, #15]
}
 800d384:	4618      	mov	r0, r3
 800d386:	3710      	adds	r7, #16
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}
 800d38c:	20002efc 	.word	0x20002efc

0800d390 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d390:	b480      	push	{r7}
 800d392:	b085      	sub	sp, #20
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	3301      	adds	r3, #1
 800d39c:	781b      	ldrb	r3, [r3, #0]
 800d39e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d3a0:	89fb      	ldrh	r3, [r7, #14]
 800d3a2:	021b      	lsls	r3, r3, #8
 800d3a4:	b21a      	sxth	r2, r3
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	b21b      	sxth	r3, r3
 800d3ac:	4313      	orrs	r3, r2
 800d3ae:	b21b      	sxth	r3, r3
 800d3b0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d3b2:	89fb      	ldrh	r3, [r7, #14]
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3714      	adds	r7, #20
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr

0800d3c0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b085      	sub	sp, #20
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	3303      	adds	r3, #3
 800d3cc:	781b      	ldrb	r3, [r3, #0]
 800d3ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	021b      	lsls	r3, r3, #8
 800d3d4:	687a      	ldr	r2, [r7, #4]
 800d3d6:	3202      	adds	r2, #2
 800d3d8:	7812      	ldrb	r2, [r2, #0]
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	021b      	lsls	r3, r3, #8
 800d3e2:	687a      	ldr	r2, [r7, #4]
 800d3e4:	3201      	adds	r2, #1
 800d3e6:	7812      	ldrb	r2, [r2, #0]
 800d3e8:	4313      	orrs	r3, r2
 800d3ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	021b      	lsls	r3, r3, #8
 800d3f0:	687a      	ldr	r2, [r7, #4]
 800d3f2:	7812      	ldrb	r2, [r2, #0]
 800d3f4:	4313      	orrs	r3, r2
 800d3f6:	60fb      	str	r3, [r7, #12]
	return rv;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3714      	adds	r7, #20
 800d3fe:	46bd      	mov	sp, r7
 800d400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d404:	4770      	bx	lr

0800d406 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d406:	b480      	push	{r7}
 800d408:	b083      	sub	sp, #12
 800d40a:	af00      	add	r7, sp, #0
 800d40c:	6078      	str	r0, [r7, #4]
 800d40e:	460b      	mov	r3, r1
 800d410:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	1c5a      	adds	r2, r3, #1
 800d416:	607a      	str	r2, [r7, #4]
 800d418:	887a      	ldrh	r2, [r7, #2]
 800d41a:	b2d2      	uxtb	r2, r2
 800d41c:	701a      	strb	r2, [r3, #0]
 800d41e:	887b      	ldrh	r3, [r7, #2]
 800d420:	0a1b      	lsrs	r3, r3, #8
 800d422:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	1c5a      	adds	r2, r3, #1
 800d428:	607a      	str	r2, [r7, #4]
 800d42a:	887a      	ldrh	r2, [r7, #2]
 800d42c:	b2d2      	uxtb	r2, r2
 800d42e:	701a      	strb	r2, [r3, #0]
}
 800d430:	bf00      	nop
 800d432:	370c      	adds	r7, #12
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr

0800d43c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d43c:	b480      	push	{r7}
 800d43e:	b083      	sub	sp, #12
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	1c5a      	adds	r2, r3, #1
 800d44a:	607a      	str	r2, [r7, #4]
 800d44c:	683a      	ldr	r2, [r7, #0]
 800d44e:	b2d2      	uxtb	r2, r2
 800d450:	701a      	strb	r2, [r3, #0]
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	0a1b      	lsrs	r3, r3, #8
 800d456:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	1c5a      	adds	r2, r3, #1
 800d45c:	607a      	str	r2, [r7, #4]
 800d45e:	683a      	ldr	r2, [r7, #0]
 800d460:	b2d2      	uxtb	r2, r2
 800d462:	701a      	strb	r2, [r3, #0]
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	0a1b      	lsrs	r3, r3, #8
 800d468:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	1c5a      	adds	r2, r3, #1
 800d46e:	607a      	str	r2, [r7, #4]
 800d470:	683a      	ldr	r2, [r7, #0]
 800d472:	b2d2      	uxtb	r2, r2
 800d474:	701a      	strb	r2, [r3, #0]
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	0a1b      	lsrs	r3, r3, #8
 800d47a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	1c5a      	adds	r2, r3, #1
 800d480:	607a      	str	r2, [r7, #4]
 800d482:	683a      	ldr	r2, [r7, #0]
 800d484:	b2d2      	uxtb	r2, r2
 800d486:	701a      	strb	r2, [r3, #0]
}
 800d488:	bf00      	nop
 800d48a:	370c      	adds	r7, #12
 800d48c:	46bd      	mov	sp, r7
 800d48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d492:	4770      	bx	lr

0800d494 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d494:	b480      	push	{r7}
 800d496:	b087      	sub	sp, #28
 800d498:	af00      	add	r7, sp, #0
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d00d      	beq.n	800d4ca <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d4ae:	693a      	ldr	r2, [r7, #16]
 800d4b0:	1c53      	adds	r3, r2, #1
 800d4b2:	613b      	str	r3, [r7, #16]
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	1c59      	adds	r1, r3, #1
 800d4b8:	6179      	str	r1, [r7, #20]
 800d4ba:	7812      	ldrb	r2, [r2, #0]
 800d4bc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	3b01      	subs	r3, #1
 800d4c2:	607b      	str	r3, [r7, #4]
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d1f1      	bne.n	800d4ae <mem_cpy+0x1a>
	}
}
 800d4ca:	bf00      	nop
 800d4cc:	371c      	adds	r7, #28
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d4:	4770      	bx	lr

0800d4d6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d4d6:	b480      	push	{r7}
 800d4d8:	b087      	sub	sp, #28
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	60f8      	str	r0, [r7, #12]
 800d4de:	60b9      	str	r1, [r7, #8]
 800d4e0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	1c5a      	adds	r2, r3, #1
 800d4ea:	617a      	str	r2, [r7, #20]
 800d4ec:	68ba      	ldr	r2, [r7, #8]
 800d4ee:	b2d2      	uxtb	r2, r2
 800d4f0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	3b01      	subs	r3, #1
 800d4f6:	607b      	str	r3, [r7, #4]
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d1f3      	bne.n	800d4e6 <mem_set+0x10>
}
 800d4fe:	bf00      	nop
 800d500:	bf00      	nop
 800d502:	371c      	adds	r7, #28
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr

0800d50c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d50c:	b480      	push	{r7}
 800d50e:	b089      	sub	sp, #36	; 0x24
 800d510:	af00      	add	r7, sp, #0
 800d512:	60f8      	str	r0, [r7, #12]
 800d514:	60b9      	str	r1, [r7, #8]
 800d516:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	61fb      	str	r3, [r7, #28]
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d520:	2300      	movs	r3, #0
 800d522:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d524:	69fb      	ldr	r3, [r7, #28]
 800d526:	1c5a      	adds	r2, r3, #1
 800d528:	61fa      	str	r2, [r7, #28]
 800d52a:	781b      	ldrb	r3, [r3, #0]
 800d52c:	4619      	mov	r1, r3
 800d52e:	69bb      	ldr	r3, [r7, #24]
 800d530:	1c5a      	adds	r2, r3, #1
 800d532:	61ba      	str	r2, [r7, #24]
 800d534:	781b      	ldrb	r3, [r3, #0]
 800d536:	1acb      	subs	r3, r1, r3
 800d538:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	3b01      	subs	r3, #1
 800d53e:	607b      	str	r3, [r7, #4]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d002      	beq.n	800d54c <mem_cmp+0x40>
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d0eb      	beq.n	800d524 <mem_cmp+0x18>

	return r;
 800d54c:	697b      	ldr	r3, [r7, #20]
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3724      	adds	r7, #36	; 0x24
 800d552:	46bd      	mov	sp, r7
 800d554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d558:	4770      	bx	lr

0800d55a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d55a:	b480      	push	{r7}
 800d55c:	b083      	sub	sp, #12
 800d55e:	af00      	add	r7, sp, #0
 800d560:	6078      	str	r0, [r7, #4]
 800d562:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d564:	e002      	b.n	800d56c <chk_chr+0x12>
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	3301      	adds	r3, #1
 800d56a:	607b      	str	r3, [r7, #4]
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d005      	beq.n	800d580 <chk_chr+0x26>
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	781b      	ldrb	r3, [r3, #0]
 800d578:	461a      	mov	r2, r3
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	4293      	cmp	r3, r2
 800d57e:	d1f2      	bne.n	800d566 <chk_chr+0xc>
	return *str;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	781b      	ldrb	r3, [r3, #0]
}
 800d584:	4618      	mov	r0, r3
 800d586:	370c      	adds	r7, #12
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr

0800d590 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d590:	b480      	push	{r7}
 800d592:	b085      	sub	sp, #20
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d59a:	2300      	movs	r3, #0
 800d59c:	60bb      	str	r3, [r7, #8]
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	60fb      	str	r3, [r7, #12]
 800d5a2:	e029      	b.n	800d5f8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d5a4:	4a27      	ldr	r2, [pc, #156]	; (800d644 <chk_lock+0xb4>)
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	011b      	lsls	r3, r3, #4
 800d5aa:	4413      	add	r3, r2
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d01d      	beq.n	800d5ee <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d5b2:	4a24      	ldr	r2, [pc, #144]	; (800d644 <chk_lock+0xb4>)
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	011b      	lsls	r3, r3, #4
 800d5b8:	4413      	add	r3, r2
 800d5ba:	681a      	ldr	r2, [r3, #0]
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d116      	bne.n	800d5f2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d5c4:	4a1f      	ldr	r2, [pc, #124]	; (800d644 <chk_lock+0xb4>)
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	011b      	lsls	r3, r3, #4
 800d5ca:	4413      	add	r3, r2
 800d5cc:	3304      	adds	r3, #4
 800d5ce:	681a      	ldr	r2, [r3, #0]
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d10c      	bne.n	800d5f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d5d8:	4a1a      	ldr	r2, [pc, #104]	; (800d644 <chk_lock+0xb4>)
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	011b      	lsls	r3, r3, #4
 800d5de:	4413      	add	r3, r2
 800d5e0:	3308      	adds	r3, #8
 800d5e2:	681a      	ldr	r2, [r3, #0]
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d102      	bne.n	800d5f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d5ec:	e007      	b.n	800d5fe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	60fb      	str	r3, [r7, #12]
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2b01      	cmp	r3, #1
 800d5fc:	d9d2      	bls.n	800d5a4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	2b02      	cmp	r3, #2
 800d602:	d109      	bne.n	800d618 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d102      	bne.n	800d610 <chk_lock+0x80>
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	2b02      	cmp	r3, #2
 800d60e:	d101      	bne.n	800d614 <chk_lock+0x84>
 800d610:	2300      	movs	r3, #0
 800d612:	e010      	b.n	800d636 <chk_lock+0xa6>
 800d614:	2312      	movs	r3, #18
 800d616:	e00e      	b.n	800d636 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d108      	bne.n	800d630 <chk_lock+0xa0>
 800d61e:	4a09      	ldr	r2, [pc, #36]	; (800d644 <chk_lock+0xb4>)
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	011b      	lsls	r3, r3, #4
 800d624:	4413      	add	r3, r2
 800d626:	330c      	adds	r3, #12
 800d628:	881b      	ldrh	r3, [r3, #0]
 800d62a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d62e:	d101      	bne.n	800d634 <chk_lock+0xa4>
 800d630:	2310      	movs	r3, #16
 800d632:	e000      	b.n	800d636 <chk_lock+0xa6>
 800d634:	2300      	movs	r3, #0
}
 800d636:	4618      	mov	r0, r3
 800d638:	3714      	adds	r7, #20
 800d63a:	46bd      	mov	sp, r7
 800d63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d640:	4770      	bx	lr
 800d642:	bf00      	nop
 800d644:	20002cdc 	.word	0x20002cdc

0800d648 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d648:	b480      	push	{r7}
 800d64a:	b083      	sub	sp, #12
 800d64c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d64e:	2300      	movs	r3, #0
 800d650:	607b      	str	r3, [r7, #4]
 800d652:	e002      	b.n	800d65a <enq_lock+0x12>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	3301      	adds	r3, #1
 800d658:	607b      	str	r3, [r7, #4]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	d806      	bhi.n	800d66e <enq_lock+0x26>
 800d660:	4a09      	ldr	r2, [pc, #36]	; (800d688 <enq_lock+0x40>)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	011b      	lsls	r3, r3, #4
 800d666:	4413      	add	r3, r2
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d1f2      	bne.n	800d654 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2b02      	cmp	r3, #2
 800d672:	bf14      	ite	ne
 800d674:	2301      	movne	r3, #1
 800d676:	2300      	moveq	r3, #0
 800d678:	b2db      	uxtb	r3, r3
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	370c      	adds	r7, #12
 800d67e:	46bd      	mov	sp, r7
 800d680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d684:	4770      	bx	lr
 800d686:	bf00      	nop
 800d688:	20002cdc 	.word	0x20002cdc

0800d68c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d68c:	b480      	push	{r7}
 800d68e:	b085      	sub	sp, #20
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d696:	2300      	movs	r3, #0
 800d698:	60fb      	str	r3, [r7, #12]
 800d69a:	e01f      	b.n	800d6dc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d69c:	4a41      	ldr	r2, [pc, #260]	; (800d7a4 <inc_lock+0x118>)
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	011b      	lsls	r3, r3, #4
 800d6a2:	4413      	add	r3, r2
 800d6a4:	681a      	ldr	r2, [r3, #0]
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	d113      	bne.n	800d6d6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d6ae:	4a3d      	ldr	r2, [pc, #244]	; (800d7a4 <inc_lock+0x118>)
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	011b      	lsls	r3, r3, #4
 800d6b4:	4413      	add	r3, r2
 800d6b6:	3304      	adds	r3, #4
 800d6b8:	681a      	ldr	r2, [r3, #0]
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	d109      	bne.n	800d6d6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d6c2:	4a38      	ldr	r2, [pc, #224]	; (800d7a4 <inc_lock+0x118>)
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	011b      	lsls	r3, r3, #4
 800d6c8:	4413      	add	r3, r2
 800d6ca:	3308      	adds	r3, #8
 800d6cc:	681a      	ldr	r2, [r3, #0]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d006      	beq.n	800d6e4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	3301      	adds	r3, #1
 800d6da:	60fb      	str	r3, [r7, #12]
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	2b01      	cmp	r3, #1
 800d6e0:	d9dc      	bls.n	800d69c <inc_lock+0x10>
 800d6e2:	e000      	b.n	800d6e6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d6e4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	2b02      	cmp	r3, #2
 800d6ea:	d132      	bne.n	800d752 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	60fb      	str	r3, [r7, #12]
 800d6f0:	e002      	b.n	800d6f8 <inc_lock+0x6c>
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	60fb      	str	r3, [r7, #12]
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d806      	bhi.n	800d70c <inc_lock+0x80>
 800d6fe:	4a29      	ldr	r2, [pc, #164]	; (800d7a4 <inc_lock+0x118>)
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	011b      	lsls	r3, r3, #4
 800d704:	4413      	add	r3, r2
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d1f2      	bne.n	800d6f2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	2b02      	cmp	r3, #2
 800d710:	d101      	bne.n	800d716 <inc_lock+0x8a>
 800d712:	2300      	movs	r3, #0
 800d714:	e040      	b.n	800d798 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681a      	ldr	r2, [r3, #0]
 800d71a:	4922      	ldr	r1, [pc, #136]	; (800d7a4 <inc_lock+0x118>)
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	011b      	lsls	r3, r3, #4
 800d720:	440b      	add	r3, r1
 800d722:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	689a      	ldr	r2, [r3, #8]
 800d728:	491e      	ldr	r1, [pc, #120]	; (800d7a4 <inc_lock+0x118>)
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	011b      	lsls	r3, r3, #4
 800d72e:	440b      	add	r3, r1
 800d730:	3304      	adds	r3, #4
 800d732:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	695a      	ldr	r2, [r3, #20]
 800d738:	491a      	ldr	r1, [pc, #104]	; (800d7a4 <inc_lock+0x118>)
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	011b      	lsls	r3, r3, #4
 800d73e:	440b      	add	r3, r1
 800d740:	3308      	adds	r3, #8
 800d742:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d744:	4a17      	ldr	r2, [pc, #92]	; (800d7a4 <inc_lock+0x118>)
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	011b      	lsls	r3, r3, #4
 800d74a:	4413      	add	r3, r2
 800d74c:	330c      	adds	r3, #12
 800d74e:	2200      	movs	r2, #0
 800d750:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d009      	beq.n	800d76c <inc_lock+0xe0>
 800d758:	4a12      	ldr	r2, [pc, #72]	; (800d7a4 <inc_lock+0x118>)
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	011b      	lsls	r3, r3, #4
 800d75e:	4413      	add	r3, r2
 800d760:	330c      	adds	r3, #12
 800d762:	881b      	ldrh	r3, [r3, #0]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d001      	beq.n	800d76c <inc_lock+0xe0>
 800d768:	2300      	movs	r3, #0
 800d76a:	e015      	b.n	800d798 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d108      	bne.n	800d784 <inc_lock+0xf8>
 800d772:	4a0c      	ldr	r2, [pc, #48]	; (800d7a4 <inc_lock+0x118>)
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	011b      	lsls	r3, r3, #4
 800d778:	4413      	add	r3, r2
 800d77a:	330c      	adds	r3, #12
 800d77c:	881b      	ldrh	r3, [r3, #0]
 800d77e:	3301      	adds	r3, #1
 800d780:	b29a      	uxth	r2, r3
 800d782:	e001      	b.n	800d788 <inc_lock+0xfc>
 800d784:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d788:	4906      	ldr	r1, [pc, #24]	; (800d7a4 <inc_lock+0x118>)
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	011b      	lsls	r3, r3, #4
 800d78e:	440b      	add	r3, r1
 800d790:	330c      	adds	r3, #12
 800d792:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	3301      	adds	r3, #1
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3714      	adds	r7, #20
 800d79c:	46bd      	mov	sp, r7
 800d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a2:	4770      	bx	lr
 800d7a4:	20002cdc 	.word	0x20002cdc

0800d7a8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b085      	sub	sp, #20
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	3b01      	subs	r3, #1
 800d7b4:	607b      	str	r3, [r7, #4]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2b01      	cmp	r3, #1
 800d7ba:	d825      	bhi.n	800d808 <dec_lock+0x60>
		n = Files[i].ctr;
 800d7bc:	4a17      	ldr	r2, [pc, #92]	; (800d81c <dec_lock+0x74>)
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	011b      	lsls	r3, r3, #4
 800d7c2:	4413      	add	r3, r2
 800d7c4:	330c      	adds	r3, #12
 800d7c6:	881b      	ldrh	r3, [r3, #0]
 800d7c8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d7ca:	89fb      	ldrh	r3, [r7, #14]
 800d7cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7d0:	d101      	bne.n	800d7d6 <dec_lock+0x2e>
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d7d6:	89fb      	ldrh	r3, [r7, #14]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d002      	beq.n	800d7e2 <dec_lock+0x3a>
 800d7dc:	89fb      	ldrh	r3, [r7, #14]
 800d7de:	3b01      	subs	r3, #1
 800d7e0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d7e2:	4a0e      	ldr	r2, [pc, #56]	; (800d81c <dec_lock+0x74>)
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	011b      	lsls	r3, r3, #4
 800d7e8:	4413      	add	r3, r2
 800d7ea:	330c      	adds	r3, #12
 800d7ec:	89fa      	ldrh	r2, [r7, #14]
 800d7ee:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d7f0:	89fb      	ldrh	r3, [r7, #14]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d105      	bne.n	800d802 <dec_lock+0x5a>
 800d7f6:	4a09      	ldr	r2, [pc, #36]	; (800d81c <dec_lock+0x74>)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	011b      	lsls	r3, r3, #4
 800d7fc:	4413      	add	r3, r2
 800d7fe:	2200      	movs	r2, #0
 800d800:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d802:	2300      	movs	r3, #0
 800d804:	737b      	strb	r3, [r7, #13]
 800d806:	e001      	b.n	800d80c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d808:	2302      	movs	r3, #2
 800d80a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d80c:	7b7b      	ldrb	r3, [r7, #13]
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3714      	adds	r7, #20
 800d812:	46bd      	mov	sp, r7
 800d814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d818:	4770      	bx	lr
 800d81a:	bf00      	nop
 800d81c:	20002cdc 	.word	0x20002cdc

0800d820 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d820:	b480      	push	{r7}
 800d822:	b085      	sub	sp, #20
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d828:	2300      	movs	r3, #0
 800d82a:	60fb      	str	r3, [r7, #12]
 800d82c:	e010      	b.n	800d850 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d82e:	4a0d      	ldr	r2, [pc, #52]	; (800d864 <clear_lock+0x44>)
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	011b      	lsls	r3, r3, #4
 800d834:	4413      	add	r3, r2
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	687a      	ldr	r2, [r7, #4]
 800d83a:	429a      	cmp	r2, r3
 800d83c:	d105      	bne.n	800d84a <clear_lock+0x2a>
 800d83e:	4a09      	ldr	r2, [pc, #36]	; (800d864 <clear_lock+0x44>)
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	011b      	lsls	r3, r3, #4
 800d844:	4413      	add	r3, r2
 800d846:	2200      	movs	r2, #0
 800d848:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	3301      	adds	r3, #1
 800d84e:	60fb      	str	r3, [r7, #12]
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	2b01      	cmp	r3, #1
 800d854:	d9eb      	bls.n	800d82e <clear_lock+0xe>
	}
}
 800d856:	bf00      	nop
 800d858:	bf00      	nop
 800d85a:	3714      	adds	r7, #20
 800d85c:	46bd      	mov	sp, r7
 800d85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d862:	4770      	bx	lr
 800d864:	20002cdc 	.word	0x20002cdc

0800d868 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b086      	sub	sp, #24
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d870:	2300      	movs	r3, #0
 800d872:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	78db      	ldrb	r3, [r3, #3]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d034      	beq.n	800d8e6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d880:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	7858      	ldrb	r0, [r3, #1]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d88c:	2301      	movs	r3, #1
 800d88e:	697a      	ldr	r2, [r7, #20]
 800d890:	f7ff fd40 	bl	800d314 <disk_write>
 800d894:	4603      	mov	r3, r0
 800d896:	2b00      	cmp	r3, #0
 800d898:	d002      	beq.n	800d8a0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d89a:	2301      	movs	r3, #1
 800d89c:	73fb      	strb	r3, [r7, #15]
 800d89e:	e022      	b.n	800d8e6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8aa:	697a      	ldr	r2, [r7, #20]
 800d8ac:	1ad2      	subs	r2, r2, r3
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6a1b      	ldr	r3, [r3, #32]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d217      	bcs.n	800d8e6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	789b      	ldrb	r3, [r3, #2]
 800d8ba:	613b      	str	r3, [r7, #16]
 800d8bc:	e010      	b.n	800d8e0 <sync_window+0x78>
					wsect += fs->fsize;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6a1b      	ldr	r3, [r3, #32]
 800d8c2:	697a      	ldr	r2, [r7, #20]
 800d8c4:	4413      	add	r3, r2
 800d8c6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	7858      	ldrb	r0, [r3, #1]
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	697a      	ldr	r2, [r7, #20]
 800d8d6:	f7ff fd1d 	bl	800d314 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	3b01      	subs	r3, #1
 800d8de:	613b      	str	r3, [r7, #16]
 800d8e0:	693b      	ldr	r3, [r7, #16]
 800d8e2:	2b01      	cmp	r3, #1
 800d8e4:	d8eb      	bhi.n	800d8be <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d8e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3718      	adds	r7, #24
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b084      	sub	sp, #16
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d902:	683a      	ldr	r2, [r7, #0]
 800d904:	429a      	cmp	r2, r3
 800d906:	d01b      	beq.n	800d940 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f7ff ffad 	bl	800d868 <sync_window>
 800d90e:	4603      	mov	r3, r0
 800d910:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d912:	7bfb      	ldrb	r3, [r7, #15]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d113      	bne.n	800d940 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	7858      	ldrb	r0, [r3, #1]
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d922:	2301      	movs	r3, #1
 800d924:	683a      	ldr	r2, [r7, #0]
 800d926:	f7ff fcd5 	bl	800d2d4 <disk_read>
 800d92a:	4603      	mov	r3, r0
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d004      	beq.n	800d93a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d934:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d936:	2301      	movs	r3, #1
 800d938:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	683a      	ldr	r2, [r7, #0]
 800d93e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800d940:	7bfb      	ldrb	r3, [r7, #15]
}
 800d942:	4618      	mov	r0, r3
 800d944:	3710      	adds	r7, #16
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}
	...

0800d94c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b084      	sub	sp, #16
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f7ff ff87 	bl	800d868 <sync_window>
 800d95a:	4603      	mov	r3, r0
 800d95c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d95e:	7bfb      	ldrb	r3, [r7, #15]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d159      	bne.n	800da18 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	781b      	ldrb	r3, [r3, #0]
 800d968:	2b03      	cmp	r3, #3
 800d96a:	d149      	bne.n	800da00 <sync_fs+0xb4>
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	791b      	ldrb	r3, [r3, #4]
 800d970:	2b01      	cmp	r3, #1
 800d972:	d145      	bne.n	800da00 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	899b      	ldrh	r3, [r3, #12]
 800d97e:	461a      	mov	r2, r3
 800d980:	2100      	movs	r1, #0
 800d982:	f7ff fda8 	bl	800d4d6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	3338      	adds	r3, #56	; 0x38
 800d98a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d98e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d992:	4618      	mov	r0, r3
 800d994:	f7ff fd37 	bl	800d406 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	3338      	adds	r3, #56	; 0x38
 800d99c:	4921      	ldr	r1, [pc, #132]	; (800da24 <sync_fs+0xd8>)
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7ff fd4c 	bl	800d43c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	3338      	adds	r3, #56	; 0x38
 800d9a8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d9ac:	491e      	ldr	r1, [pc, #120]	; (800da28 <sync_fs+0xdc>)
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7ff fd44 	bl	800d43c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	3338      	adds	r3, #56	; 0x38
 800d9b8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	699b      	ldr	r3, [r3, #24]
 800d9c0:	4619      	mov	r1, r3
 800d9c2:	4610      	mov	r0, r2
 800d9c4:	f7ff fd3a 	bl	800d43c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	3338      	adds	r3, #56	; 0x38
 800d9cc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	695b      	ldr	r3, [r3, #20]
 800d9d4:	4619      	mov	r1, r3
 800d9d6:	4610      	mov	r0, r2
 800d9d8:	f7ff fd30 	bl	800d43c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9e0:	1c5a      	adds	r2, r3, #1
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	7858      	ldrb	r0, [r3, #1]
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	f7ff fc8d 	bl	800d314 <disk_write>
			fs->fsi_flag = 0;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	785b      	ldrb	r3, [r3, #1]
 800da04:	2200      	movs	r2, #0
 800da06:	2100      	movs	r1, #0
 800da08:	4618      	mov	r0, r3
 800da0a:	f7ff fca3 	bl	800d354 <disk_ioctl>
 800da0e:	4603      	mov	r3, r0
 800da10:	2b00      	cmp	r3, #0
 800da12:	d001      	beq.n	800da18 <sync_fs+0xcc>
 800da14:	2301      	movs	r3, #1
 800da16:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800da18:	7bfb      	ldrb	r3, [r7, #15]
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3710      	adds	r7, #16
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
 800da22:	bf00      	nop
 800da24:	41615252 	.word	0x41615252
 800da28:	61417272 	.word	0x61417272

0800da2c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800da2c:	b480      	push	{r7}
 800da2e:	b083      	sub	sp, #12
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	3b02      	subs	r3, #2
 800da3a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	69db      	ldr	r3, [r3, #28]
 800da40:	3b02      	subs	r3, #2
 800da42:	683a      	ldr	r2, [r7, #0]
 800da44:	429a      	cmp	r2, r3
 800da46:	d301      	bcc.n	800da4c <clust2sect+0x20>
 800da48:	2300      	movs	r3, #0
 800da4a:	e008      	b.n	800da5e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	895b      	ldrh	r3, [r3, #10]
 800da50:	461a      	mov	r2, r3
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	fb03 f202 	mul.w	r2, r3, r2
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da5c:	4413      	add	r3, r2
}
 800da5e:	4618      	mov	r0, r3
 800da60:	370c      	adds	r7, #12
 800da62:	46bd      	mov	sp, r7
 800da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da68:	4770      	bx	lr

0800da6a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800da6a:	b580      	push	{r7, lr}
 800da6c:	b086      	sub	sp, #24
 800da6e:	af00      	add	r7, sp, #0
 800da70:	6078      	str	r0, [r7, #4]
 800da72:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	2b01      	cmp	r3, #1
 800da7e:	d904      	bls.n	800da8a <get_fat+0x20>
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	69db      	ldr	r3, [r3, #28]
 800da84:	683a      	ldr	r2, [r7, #0]
 800da86:	429a      	cmp	r2, r3
 800da88:	d302      	bcc.n	800da90 <get_fat+0x26>
		val = 1;	/* Internal error */
 800da8a:	2301      	movs	r3, #1
 800da8c:	617b      	str	r3, [r7, #20]
 800da8e:	e0bb      	b.n	800dc08 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800da90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da94:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	781b      	ldrb	r3, [r3, #0]
 800da9a:	2b03      	cmp	r3, #3
 800da9c:	f000 8083 	beq.w	800dba6 <get_fat+0x13c>
 800daa0:	2b03      	cmp	r3, #3
 800daa2:	f300 80a7 	bgt.w	800dbf4 <get_fat+0x18a>
 800daa6:	2b01      	cmp	r3, #1
 800daa8:	d002      	beq.n	800dab0 <get_fat+0x46>
 800daaa:	2b02      	cmp	r3, #2
 800daac:	d056      	beq.n	800db5c <get_fat+0xf2>
 800daae:	e0a1      	b.n	800dbf4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	60fb      	str	r3, [r7, #12]
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	085b      	lsrs	r3, r3, #1
 800dab8:	68fa      	ldr	r2, [r7, #12]
 800daba:	4413      	add	r3, r2
 800dabc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	899b      	ldrh	r3, [r3, #12]
 800dac6:	4619      	mov	r1, r3
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	fbb3 f3f1 	udiv	r3, r3, r1
 800dace:	4413      	add	r3, r2
 800dad0:	4619      	mov	r1, r3
 800dad2:	6938      	ldr	r0, [r7, #16]
 800dad4:	f7ff ff0c 	bl	800d8f0 <move_window>
 800dad8:	4603      	mov	r3, r0
 800dada:	2b00      	cmp	r3, #0
 800dadc:	f040 808d 	bne.w	800dbfa <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	1c5a      	adds	r2, r3, #1
 800dae4:	60fa      	str	r2, [r7, #12]
 800dae6:	693a      	ldr	r2, [r7, #16]
 800dae8:	8992      	ldrh	r2, [r2, #12]
 800daea:	fbb3 f1f2 	udiv	r1, r3, r2
 800daee:	fb01 f202 	mul.w	r2, r1, r2
 800daf2:	1a9b      	subs	r3, r3, r2
 800daf4:	693a      	ldr	r2, [r7, #16]
 800daf6:	4413      	add	r3, r2
 800daf8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dafc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db02:	693b      	ldr	r3, [r7, #16]
 800db04:	899b      	ldrh	r3, [r3, #12]
 800db06:	4619      	mov	r1, r3
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	fbb3 f3f1 	udiv	r3, r3, r1
 800db0e:	4413      	add	r3, r2
 800db10:	4619      	mov	r1, r3
 800db12:	6938      	ldr	r0, [r7, #16]
 800db14:	f7ff feec 	bl	800d8f0 <move_window>
 800db18:	4603      	mov	r3, r0
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d16f      	bne.n	800dbfe <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	899b      	ldrh	r3, [r3, #12]
 800db22:	461a      	mov	r2, r3
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	fbb3 f1f2 	udiv	r1, r3, r2
 800db2a:	fb01 f202 	mul.w	r2, r1, r2
 800db2e:	1a9b      	subs	r3, r3, r2
 800db30:	693a      	ldr	r2, [r7, #16]
 800db32:	4413      	add	r3, r2
 800db34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800db38:	021b      	lsls	r3, r3, #8
 800db3a:	461a      	mov	r2, r3
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	4313      	orrs	r3, r2
 800db40:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	f003 0301 	and.w	r3, r3, #1
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d002      	beq.n	800db52 <get_fat+0xe8>
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	091b      	lsrs	r3, r3, #4
 800db50:	e002      	b.n	800db58 <get_fat+0xee>
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800db58:	617b      	str	r3, [r7, #20]
			break;
 800db5a:	e055      	b.n	800dc08 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db60:	693b      	ldr	r3, [r7, #16]
 800db62:	899b      	ldrh	r3, [r3, #12]
 800db64:	085b      	lsrs	r3, r3, #1
 800db66:	b29b      	uxth	r3, r3
 800db68:	4619      	mov	r1, r3
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	fbb3 f3f1 	udiv	r3, r3, r1
 800db70:	4413      	add	r3, r2
 800db72:	4619      	mov	r1, r3
 800db74:	6938      	ldr	r0, [r7, #16]
 800db76:	f7ff febb 	bl	800d8f0 <move_window>
 800db7a:	4603      	mov	r3, r0
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d140      	bne.n	800dc02 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800db80:	693b      	ldr	r3, [r7, #16]
 800db82:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	005b      	lsls	r3, r3, #1
 800db8a:	693a      	ldr	r2, [r7, #16]
 800db8c:	8992      	ldrh	r2, [r2, #12]
 800db8e:	fbb3 f0f2 	udiv	r0, r3, r2
 800db92:	fb00 f202 	mul.w	r2, r0, r2
 800db96:	1a9b      	subs	r3, r3, r2
 800db98:	440b      	add	r3, r1
 800db9a:	4618      	mov	r0, r3
 800db9c:	f7ff fbf8 	bl	800d390 <ld_word>
 800dba0:	4603      	mov	r3, r0
 800dba2:	617b      	str	r3, [r7, #20]
			break;
 800dba4:	e030      	b.n	800dc08 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	899b      	ldrh	r3, [r3, #12]
 800dbae:	089b      	lsrs	r3, r3, #2
 800dbb0:	b29b      	uxth	r3, r3
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	fbb3 f3f1 	udiv	r3, r3, r1
 800dbba:	4413      	add	r3, r2
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	6938      	ldr	r0, [r7, #16]
 800dbc0:	f7ff fe96 	bl	800d8f0 <move_window>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d11d      	bne.n	800dc06 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	009b      	lsls	r3, r3, #2
 800dbd4:	693a      	ldr	r2, [r7, #16]
 800dbd6:	8992      	ldrh	r2, [r2, #12]
 800dbd8:	fbb3 f0f2 	udiv	r0, r3, r2
 800dbdc:	fb00 f202 	mul.w	r2, r0, r2
 800dbe0:	1a9b      	subs	r3, r3, r2
 800dbe2:	440b      	add	r3, r1
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f7ff fbeb 	bl	800d3c0 <ld_dword>
 800dbea:	4603      	mov	r3, r0
 800dbec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800dbf0:	617b      	str	r3, [r7, #20]
			break;
 800dbf2:	e009      	b.n	800dc08 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	617b      	str	r3, [r7, #20]
 800dbf8:	e006      	b.n	800dc08 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dbfa:	bf00      	nop
 800dbfc:	e004      	b.n	800dc08 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dbfe:	bf00      	nop
 800dc00:	e002      	b.n	800dc08 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dc02:	bf00      	nop
 800dc04:	e000      	b.n	800dc08 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dc06:	bf00      	nop
		}
	}

	return val;
 800dc08:	697b      	ldr	r3, [r7, #20]
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3718      	adds	r7, #24
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800dc12:	b590      	push	{r4, r7, lr}
 800dc14:	b089      	sub	sp, #36	; 0x24
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	60f8      	str	r0, [r7, #12]
 800dc1a:	60b9      	str	r1, [r7, #8]
 800dc1c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800dc1e:	2302      	movs	r3, #2
 800dc20:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	f240 8102 	bls.w	800de2e <put_fat+0x21c>
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	69db      	ldr	r3, [r3, #28]
 800dc2e:	68ba      	ldr	r2, [r7, #8]
 800dc30:	429a      	cmp	r2, r3
 800dc32:	f080 80fc 	bcs.w	800de2e <put_fat+0x21c>
		switch (fs->fs_type) {
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	781b      	ldrb	r3, [r3, #0]
 800dc3a:	2b03      	cmp	r3, #3
 800dc3c:	f000 80b6 	beq.w	800ddac <put_fat+0x19a>
 800dc40:	2b03      	cmp	r3, #3
 800dc42:	f300 80fd 	bgt.w	800de40 <put_fat+0x22e>
 800dc46:	2b01      	cmp	r3, #1
 800dc48:	d003      	beq.n	800dc52 <put_fat+0x40>
 800dc4a:	2b02      	cmp	r3, #2
 800dc4c:	f000 8083 	beq.w	800dd56 <put_fat+0x144>
 800dc50:	e0f6      	b.n	800de40 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	61bb      	str	r3, [r7, #24]
 800dc56:	69bb      	ldr	r3, [r7, #24]
 800dc58:	085b      	lsrs	r3, r3, #1
 800dc5a:	69ba      	ldr	r2, [r7, #24]
 800dc5c:	4413      	add	r3, r2
 800dc5e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	899b      	ldrh	r3, [r3, #12]
 800dc68:	4619      	mov	r1, r3
 800dc6a:	69bb      	ldr	r3, [r7, #24]
 800dc6c:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc70:	4413      	add	r3, r2
 800dc72:	4619      	mov	r1, r3
 800dc74:	68f8      	ldr	r0, [r7, #12]
 800dc76:	f7ff fe3b 	bl	800d8f0 <move_window>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dc7e:	7ffb      	ldrb	r3, [r7, #31]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	f040 80d6 	bne.w	800de32 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dc8c:	69bb      	ldr	r3, [r7, #24]
 800dc8e:	1c5a      	adds	r2, r3, #1
 800dc90:	61ba      	str	r2, [r7, #24]
 800dc92:	68fa      	ldr	r2, [r7, #12]
 800dc94:	8992      	ldrh	r2, [r2, #12]
 800dc96:	fbb3 f0f2 	udiv	r0, r3, r2
 800dc9a:	fb00 f202 	mul.w	r2, r0, r2
 800dc9e:	1a9b      	subs	r3, r3, r2
 800dca0:	440b      	add	r3, r1
 800dca2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	f003 0301 	and.w	r3, r3, #1
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d00d      	beq.n	800dcca <put_fat+0xb8>
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	781b      	ldrb	r3, [r3, #0]
 800dcb2:	b25b      	sxtb	r3, r3
 800dcb4:	f003 030f 	and.w	r3, r3, #15
 800dcb8:	b25a      	sxtb	r2, r3
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	b2db      	uxtb	r3, r3
 800dcbe:	011b      	lsls	r3, r3, #4
 800dcc0:	b25b      	sxtb	r3, r3
 800dcc2:	4313      	orrs	r3, r2
 800dcc4:	b25b      	sxtb	r3, r3
 800dcc6:	b2db      	uxtb	r3, r3
 800dcc8:	e001      	b.n	800dcce <put_fat+0xbc>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	b2db      	uxtb	r3, r3
 800dcce:	697a      	ldr	r2, [r7, #20]
 800dcd0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	2201      	movs	r2, #1
 800dcd6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	899b      	ldrh	r3, [r3, #12]
 800dce0:	4619      	mov	r1, r3
 800dce2:	69bb      	ldr	r3, [r7, #24]
 800dce4:	fbb3 f3f1 	udiv	r3, r3, r1
 800dce8:	4413      	add	r3, r2
 800dcea:	4619      	mov	r1, r3
 800dcec:	68f8      	ldr	r0, [r7, #12]
 800dcee:	f7ff fdff 	bl	800d8f0 <move_window>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dcf6:	7ffb      	ldrb	r3, [r7, #31]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	f040 809c 	bne.w	800de36 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	899b      	ldrh	r3, [r3, #12]
 800dd08:	461a      	mov	r2, r3
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	fbb3 f0f2 	udiv	r0, r3, r2
 800dd10:	fb00 f202 	mul.w	r2, r0, r2
 800dd14:	1a9b      	subs	r3, r3, r2
 800dd16:	440b      	add	r3, r1
 800dd18:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	f003 0301 	and.w	r3, r3, #1
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d003      	beq.n	800dd2c <put_fat+0x11a>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	091b      	lsrs	r3, r3, #4
 800dd28:	b2db      	uxtb	r3, r3
 800dd2a:	e00e      	b.n	800dd4a <put_fat+0x138>
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	781b      	ldrb	r3, [r3, #0]
 800dd30:	b25b      	sxtb	r3, r3
 800dd32:	f023 030f 	bic.w	r3, r3, #15
 800dd36:	b25a      	sxtb	r2, r3
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	0a1b      	lsrs	r3, r3, #8
 800dd3c:	b25b      	sxtb	r3, r3
 800dd3e:	f003 030f 	and.w	r3, r3, #15
 800dd42:	b25b      	sxtb	r3, r3
 800dd44:	4313      	orrs	r3, r2
 800dd46:	b25b      	sxtb	r3, r3
 800dd48:	b2db      	uxtb	r3, r3
 800dd4a:	697a      	ldr	r2, [r7, #20]
 800dd4c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	2201      	movs	r2, #1
 800dd52:	70da      	strb	r2, [r3, #3]
			break;
 800dd54:	e074      	b.n	800de40 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	899b      	ldrh	r3, [r3, #12]
 800dd5e:	085b      	lsrs	r3, r3, #1
 800dd60:	b29b      	uxth	r3, r3
 800dd62:	4619      	mov	r1, r3
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd6a:	4413      	add	r3, r2
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	68f8      	ldr	r0, [r7, #12]
 800dd70:	f7ff fdbe 	bl	800d8f0 <move_window>
 800dd74:	4603      	mov	r3, r0
 800dd76:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd78:	7ffb      	ldrb	r3, [r7, #31]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d15d      	bne.n	800de3a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	005b      	lsls	r3, r3, #1
 800dd88:	68fa      	ldr	r2, [r7, #12]
 800dd8a:	8992      	ldrh	r2, [r2, #12]
 800dd8c:	fbb3 f0f2 	udiv	r0, r3, r2
 800dd90:	fb00 f202 	mul.w	r2, r0, r2
 800dd94:	1a9b      	subs	r3, r3, r2
 800dd96:	440b      	add	r3, r1
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	b292      	uxth	r2, r2
 800dd9c:	4611      	mov	r1, r2
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f7ff fb31 	bl	800d406 <st_word>
			fs->wflag = 1;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	2201      	movs	r2, #1
 800dda8:	70da      	strb	r2, [r3, #3]
			break;
 800ddaa:	e049      	b.n	800de40 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	899b      	ldrh	r3, [r3, #12]
 800ddb4:	089b      	lsrs	r3, r3, #2
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	4619      	mov	r1, r3
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	fbb3 f3f1 	udiv	r3, r3, r1
 800ddc0:	4413      	add	r3, r2
 800ddc2:	4619      	mov	r1, r3
 800ddc4:	68f8      	ldr	r0, [r7, #12]
 800ddc6:	f7ff fd93 	bl	800d8f0 <move_window>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ddce:	7ffb      	ldrb	r3, [r7, #31]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d134      	bne.n	800de3e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	009b      	lsls	r3, r3, #2
 800dde4:	68fa      	ldr	r2, [r7, #12]
 800dde6:	8992      	ldrh	r2, [r2, #12]
 800dde8:	fbb3 f0f2 	udiv	r0, r3, r2
 800ddec:	fb00 f202 	mul.w	r2, r0, r2
 800ddf0:	1a9b      	subs	r3, r3, r2
 800ddf2:	440b      	add	r3, r1
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7ff fae3 	bl	800d3c0 <ld_dword>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800de00:	4323      	orrs	r3, r4
 800de02:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	009b      	lsls	r3, r3, #2
 800de0e:	68fa      	ldr	r2, [r7, #12]
 800de10:	8992      	ldrh	r2, [r2, #12]
 800de12:	fbb3 f0f2 	udiv	r0, r3, r2
 800de16:	fb00 f202 	mul.w	r2, r0, r2
 800de1a:	1a9b      	subs	r3, r3, r2
 800de1c:	440b      	add	r3, r1
 800de1e:	6879      	ldr	r1, [r7, #4]
 800de20:	4618      	mov	r0, r3
 800de22:	f7ff fb0b 	bl	800d43c <st_dword>
			fs->wflag = 1;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	2201      	movs	r2, #1
 800de2a:	70da      	strb	r2, [r3, #3]
			break;
 800de2c:	e008      	b.n	800de40 <put_fat+0x22e>
		}
	}
 800de2e:	bf00      	nop
 800de30:	e006      	b.n	800de40 <put_fat+0x22e>
			if (res != FR_OK) break;
 800de32:	bf00      	nop
 800de34:	e004      	b.n	800de40 <put_fat+0x22e>
			if (res != FR_OK) break;
 800de36:	bf00      	nop
 800de38:	e002      	b.n	800de40 <put_fat+0x22e>
			if (res != FR_OK) break;
 800de3a:	bf00      	nop
 800de3c:	e000      	b.n	800de40 <put_fat+0x22e>
			if (res != FR_OK) break;
 800de3e:	bf00      	nop
	return res;
 800de40:	7ffb      	ldrb	r3, [r7, #31]
}
 800de42:	4618      	mov	r0, r3
 800de44:	3724      	adds	r7, #36	; 0x24
 800de46:	46bd      	mov	sp, r7
 800de48:	bd90      	pop	{r4, r7, pc}

0800de4a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800de4a:	b580      	push	{r7, lr}
 800de4c:	b088      	sub	sp, #32
 800de4e:	af00      	add	r7, sp, #0
 800de50:	60f8      	str	r0, [r7, #12]
 800de52:	60b9      	str	r1, [r7, #8]
 800de54:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800de56:	2300      	movs	r3, #0
 800de58:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	2b01      	cmp	r3, #1
 800de64:	d904      	bls.n	800de70 <remove_chain+0x26>
 800de66:	69bb      	ldr	r3, [r7, #24]
 800de68:	69db      	ldr	r3, [r3, #28]
 800de6a:	68ba      	ldr	r2, [r7, #8]
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d301      	bcc.n	800de74 <remove_chain+0x2a>
 800de70:	2302      	movs	r3, #2
 800de72:	e04b      	b.n	800df0c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d00c      	beq.n	800de94 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800de7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de7e:	6879      	ldr	r1, [r7, #4]
 800de80:	69b8      	ldr	r0, [r7, #24]
 800de82:	f7ff fec6 	bl	800dc12 <put_fat>
 800de86:	4603      	mov	r3, r0
 800de88:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800de8a:	7ffb      	ldrb	r3, [r7, #31]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d001      	beq.n	800de94 <remove_chain+0x4a>
 800de90:	7ffb      	ldrb	r3, [r7, #31]
 800de92:	e03b      	b.n	800df0c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800de94:	68b9      	ldr	r1, [r7, #8]
 800de96:	68f8      	ldr	r0, [r7, #12]
 800de98:	f7ff fde7 	bl	800da6a <get_fat>
 800de9c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d031      	beq.n	800df08 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800dea4:	697b      	ldr	r3, [r7, #20]
 800dea6:	2b01      	cmp	r3, #1
 800dea8:	d101      	bne.n	800deae <remove_chain+0x64>
 800deaa:	2302      	movs	r3, #2
 800deac:	e02e      	b.n	800df0c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800deb4:	d101      	bne.n	800deba <remove_chain+0x70>
 800deb6:	2301      	movs	r3, #1
 800deb8:	e028      	b.n	800df0c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800deba:	2200      	movs	r2, #0
 800debc:	68b9      	ldr	r1, [r7, #8]
 800debe:	69b8      	ldr	r0, [r7, #24]
 800dec0:	f7ff fea7 	bl	800dc12 <put_fat>
 800dec4:	4603      	mov	r3, r0
 800dec6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800dec8:	7ffb      	ldrb	r3, [r7, #31]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d001      	beq.n	800ded2 <remove_chain+0x88>
 800dece:	7ffb      	ldrb	r3, [r7, #31]
 800ded0:	e01c      	b.n	800df0c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ded2:	69bb      	ldr	r3, [r7, #24]
 800ded4:	699a      	ldr	r2, [r3, #24]
 800ded6:	69bb      	ldr	r3, [r7, #24]
 800ded8:	69db      	ldr	r3, [r3, #28]
 800deda:	3b02      	subs	r3, #2
 800dedc:	429a      	cmp	r2, r3
 800dede:	d20b      	bcs.n	800def8 <remove_chain+0xae>
			fs->free_clst++;
 800dee0:	69bb      	ldr	r3, [r7, #24]
 800dee2:	699b      	ldr	r3, [r3, #24]
 800dee4:	1c5a      	adds	r2, r3, #1
 800dee6:	69bb      	ldr	r3, [r7, #24]
 800dee8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800deea:	69bb      	ldr	r3, [r7, #24]
 800deec:	791b      	ldrb	r3, [r3, #4]
 800deee:	f043 0301 	orr.w	r3, r3, #1
 800def2:	b2da      	uxtb	r2, r3
 800def4:	69bb      	ldr	r3, [r7, #24]
 800def6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800defc:	69bb      	ldr	r3, [r7, #24]
 800defe:	69db      	ldr	r3, [r3, #28]
 800df00:	68ba      	ldr	r2, [r7, #8]
 800df02:	429a      	cmp	r2, r3
 800df04:	d3c6      	bcc.n	800de94 <remove_chain+0x4a>
 800df06:	e000      	b.n	800df0a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800df08:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800df0a:	2300      	movs	r3, #0
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3720      	adds	r7, #32
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}

0800df14 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b088      	sub	sp, #32
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
 800df1c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d10d      	bne.n	800df46 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	695b      	ldr	r3, [r3, #20]
 800df2e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800df30:	69bb      	ldr	r3, [r7, #24]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d004      	beq.n	800df40 <create_chain+0x2c>
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	69db      	ldr	r3, [r3, #28]
 800df3a:	69ba      	ldr	r2, [r7, #24]
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d31b      	bcc.n	800df78 <create_chain+0x64>
 800df40:	2301      	movs	r3, #1
 800df42:	61bb      	str	r3, [r7, #24]
 800df44:	e018      	b.n	800df78 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800df46:	6839      	ldr	r1, [r7, #0]
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f7ff fd8e 	bl	800da6a <get_fat>
 800df4e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	2b01      	cmp	r3, #1
 800df54:	d801      	bhi.n	800df5a <create_chain+0x46>
 800df56:	2301      	movs	r3, #1
 800df58:	e070      	b.n	800e03c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df60:	d101      	bne.n	800df66 <create_chain+0x52>
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	e06a      	b.n	800e03c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800df66:	693b      	ldr	r3, [r7, #16]
 800df68:	69db      	ldr	r3, [r3, #28]
 800df6a:	68fa      	ldr	r2, [r7, #12]
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d201      	bcs.n	800df74 <create_chain+0x60>
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	e063      	b.n	800e03c <create_chain+0x128>
		scl = clst;
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800df78:	69bb      	ldr	r3, [r7, #24]
 800df7a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800df7c:	69fb      	ldr	r3, [r7, #28]
 800df7e:	3301      	adds	r3, #1
 800df80:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800df82:	693b      	ldr	r3, [r7, #16]
 800df84:	69db      	ldr	r3, [r3, #28]
 800df86:	69fa      	ldr	r2, [r7, #28]
 800df88:	429a      	cmp	r2, r3
 800df8a:	d307      	bcc.n	800df9c <create_chain+0x88>
				ncl = 2;
 800df8c:	2302      	movs	r3, #2
 800df8e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800df90:	69fa      	ldr	r2, [r7, #28]
 800df92:	69bb      	ldr	r3, [r7, #24]
 800df94:	429a      	cmp	r2, r3
 800df96:	d901      	bls.n	800df9c <create_chain+0x88>
 800df98:	2300      	movs	r3, #0
 800df9a:	e04f      	b.n	800e03c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800df9c:	69f9      	ldr	r1, [r7, #28]
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f7ff fd63 	bl	800da6a <get_fat>
 800dfa4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d00e      	beq.n	800dfca <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2b01      	cmp	r3, #1
 800dfb0:	d003      	beq.n	800dfba <create_chain+0xa6>
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfb8:	d101      	bne.n	800dfbe <create_chain+0xaa>
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	e03e      	b.n	800e03c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800dfbe:	69fa      	ldr	r2, [r7, #28]
 800dfc0:	69bb      	ldr	r3, [r7, #24]
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	d1da      	bne.n	800df7c <create_chain+0x68>
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	e038      	b.n	800e03c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800dfca:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dfcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfd0:	69f9      	ldr	r1, [r7, #28]
 800dfd2:	6938      	ldr	r0, [r7, #16]
 800dfd4:	f7ff fe1d 	bl	800dc12 <put_fat>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800dfdc:	7dfb      	ldrb	r3, [r7, #23]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d109      	bne.n	800dff6 <create_chain+0xe2>
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d006      	beq.n	800dff6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800dfe8:	69fa      	ldr	r2, [r7, #28]
 800dfea:	6839      	ldr	r1, [r7, #0]
 800dfec:	6938      	ldr	r0, [r7, #16]
 800dfee:	f7ff fe10 	bl	800dc12 <put_fat>
 800dff2:	4603      	mov	r3, r0
 800dff4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800dff6:	7dfb      	ldrb	r3, [r7, #23]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d116      	bne.n	800e02a <create_chain+0x116>
		fs->last_clst = ncl;
 800dffc:	693b      	ldr	r3, [r7, #16]
 800dffe:	69fa      	ldr	r2, [r7, #28]
 800e000:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e002:	693b      	ldr	r3, [r7, #16]
 800e004:	699a      	ldr	r2, [r3, #24]
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	69db      	ldr	r3, [r3, #28]
 800e00a:	3b02      	subs	r3, #2
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d804      	bhi.n	800e01a <create_chain+0x106>
 800e010:	693b      	ldr	r3, [r7, #16]
 800e012:	699b      	ldr	r3, [r3, #24]
 800e014:	1e5a      	subs	r2, r3, #1
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	791b      	ldrb	r3, [r3, #4]
 800e01e:	f043 0301 	orr.w	r3, r3, #1
 800e022:	b2da      	uxtb	r2, r3
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	711a      	strb	r2, [r3, #4]
 800e028:	e007      	b.n	800e03a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e02a:	7dfb      	ldrb	r3, [r7, #23]
 800e02c:	2b01      	cmp	r3, #1
 800e02e:	d102      	bne.n	800e036 <create_chain+0x122>
 800e030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e034:	e000      	b.n	800e038 <create_chain+0x124>
 800e036:	2301      	movs	r3, #1
 800e038:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e03a:	69fb      	ldr	r3, [r7, #28]
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3720      	adds	r7, #32
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e044:	b480      	push	{r7}
 800e046:	b087      	sub	sp, #28
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
 800e04c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e058:	3304      	adds	r3, #4
 800e05a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	899b      	ldrh	r3, [r3, #12]
 800e060:	461a      	mov	r2, r3
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	fbb3 f3f2 	udiv	r3, r3, r2
 800e068:	68fa      	ldr	r2, [r7, #12]
 800e06a:	8952      	ldrh	r2, [r2, #10]
 800e06c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e070:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	1d1a      	adds	r2, r3, #4
 800e076:	613a      	str	r2, [r7, #16]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d101      	bne.n	800e086 <clmt_clust+0x42>
 800e082:	2300      	movs	r3, #0
 800e084:	e010      	b.n	800e0a8 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800e086:	697a      	ldr	r2, [r7, #20]
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d307      	bcc.n	800e09e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800e08e:	697a      	ldr	r2, [r7, #20]
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	1ad3      	subs	r3, r2, r3
 800e094:	617b      	str	r3, [r7, #20]
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	3304      	adds	r3, #4
 800e09a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e09c:	e7e9      	b.n	800e072 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800e09e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	681a      	ldr	r2, [r3, #0]
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	4413      	add	r3, r2
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	371c      	adds	r7, #28
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr

0800e0b4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b086      	sub	sp, #24
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
 800e0bc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e0ca:	d204      	bcs.n	800e0d6 <dir_sdi+0x22>
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	f003 031f 	and.w	r3, r3, #31
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d001      	beq.n	800e0da <dir_sdi+0x26>
		return FR_INT_ERR;
 800e0d6:	2302      	movs	r3, #2
 800e0d8:	e071      	b.n	800e1be <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	683a      	ldr	r2, [r7, #0]
 800e0de:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	689b      	ldr	r3, [r3, #8]
 800e0e4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d106      	bne.n	800e0fa <dir_sdi+0x46>
 800e0ec:	693b      	ldr	r3, [r7, #16]
 800e0ee:	781b      	ldrb	r3, [r3, #0]
 800e0f0:	2b02      	cmp	r3, #2
 800e0f2:	d902      	bls.n	800e0fa <dir_sdi+0x46>
		clst = fs->dirbase;
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0f8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d10c      	bne.n	800e11a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	095b      	lsrs	r3, r3, #5
 800e104:	693a      	ldr	r2, [r7, #16]
 800e106:	8912      	ldrh	r2, [r2, #8]
 800e108:	4293      	cmp	r3, r2
 800e10a:	d301      	bcc.n	800e110 <dir_sdi+0x5c>
 800e10c:	2302      	movs	r3, #2
 800e10e:	e056      	b.n	800e1be <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800e110:	693b      	ldr	r3, [r7, #16]
 800e112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	61da      	str	r2, [r3, #28]
 800e118:	e02d      	b.n	800e176 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	895b      	ldrh	r3, [r3, #10]
 800e11e:	461a      	mov	r2, r3
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	899b      	ldrh	r3, [r3, #12]
 800e124:	fb02 f303 	mul.w	r3, r2, r3
 800e128:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e12a:	e019      	b.n	800e160 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6979      	ldr	r1, [r7, #20]
 800e130:	4618      	mov	r0, r3
 800e132:	f7ff fc9a 	bl	800da6a <get_fat>
 800e136:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e13e:	d101      	bne.n	800e144 <dir_sdi+0x90>
 800e140:	2301      	movs	r3, #1
 800e142:	e03c      	b.n	800e1be <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	2b01      	cmp	r3, #1
 800e148:	d904      	bls.n	800e154 <dir_sdi+0xa0>
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	69db      	ldr	r3, [r3, #28]
 800e14e:	697a      	ldr	r2, [r7, #20]
 800e150:	429a      	cmp	r2, r3
 800e152:	d301      	bcc.n	800e158 <dir_sdi+0xa4>
 800e154:	2302      	movs	r3, #2
 800e156:	e032      	b.n	800e1be <dir_sdi+0x10a>
			ofs -= csz;
 800e158:	683a      	ldr	r2, [r7, #0]
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	1ad3      	subs	r3, r2, r3
 800e15e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e160:	683a      	ldr	r2, [r7, #0]
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	429a      	cmp	r2, r3
 800e166:	d2e1      	bcs.n	800e12c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800e168:	6979      	ldr	r1, [r7, #20]
 800e16a:	6938      	ldr	r0, [r7, #16]
 800e16c:	f7ff fc5e 	bl	800da2c <clust2sect>
 800e170:	4602      	mov	r2, r0
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	697a      	ldr	r2, [r7, #20]
 800e17a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	69db      	ldr	r3, [r3, #28]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d101      	bne.n	800e188 <dir_sdi+0xd4>
 800e184:	2302      	movs	r3, #2
 800e186:	e01a      	b.n	800e1be <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	69da      	ldr	r2, [r3, #28]
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	899b      	ldrh	r3, [r3, #12]
 800e190:	4619      	mov	r1, r3
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	fbb3 f3f1 	udiv	r3, r3, r1
 800e198:	441a      	add	r2, r3
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	899b      	ldrh	r3, [r3, #12]
 800e1a8:	461a      	mov	r2, r3
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	fbb3 f0f2 	udiv	r0, r3, r2
 800e1b0:	fb00 f202 	mul.w	r2, r0, r2
 800e1b4:	1a9b      	subs	r3, r3, r2
 800e1b6:	18ca      	adds	r2, r1, r3
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e1bc:	2300      	movs	r3, #0
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3718      	adds	r7, #24
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}

0800e1c6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e1c6:	b580      	push	{r7, lr}
 800e1c8:	b086      	sub	sp, #24
 800e1ca:	af00      	add	r7, sp, #0
 800e1cc:	6078      	str	r0, [r7, #4]
 800e1ce:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	695b      	ldr	r3, [r3, #20]
 800e1da:	3320      	adds	r3, #32
 800e1dc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	69db      	ldr	r3, [r3, #28]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d003      	beq.n	800e1ee <dir_next+0x28>
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e1ec:	d301      	bcc.n	800e1f2 <dir_next+0x2c>
 800e1ee:	2304      	movs	r3, #4
 800e1f0:	e0bb      	b.n	800e36a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	899b      	ldrh	r3, [r3, #12]
 800e1f6:	461a      	mov	r2, r3
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	fbb3 f1f2 	udiv	r1, r3, r2
 800e1fe:	fb01 f202 	mul.w	r2, r1, r2
 800e202:	1a9b      	subs	r3, r3, r2
 800e204:	2b00      	cmp	r3, #0
 800e206:	f040 809d 	bne.w	800e344 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	69db      	ldr	r3, [r3, #28]
 800e20e:	1c5a      	adds	r2, r3, #1
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	699b      	ldr	r3, [r3, #24]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d10b      	bne.n	800e234 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	095b      	lsrs	r3, r3, #5
 800e220:	68fa      	ldr	r2, [r7, #12]
 800e222:	8912      	ldrh	r2, [r2, #8]
 800e224:	4293      	cmp	r3, r2
 800e226:	f0c0 808d 	bcc.w	800e344 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2200      	movs	r2, #0
 800e22e:	61da      	str	r2, [r3, #28]
 800e230:	2304      	movs	r3, #4
 800e232:	e09a      	b.n	800e36a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	899b      	ldrh	r3, [r3, #12]
 800e238:	461a      	mov	r2, r3
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e240:	68fa      	ldr	r2, [r7, #12]
 800e242:	8952      	ldrh	r2, [r2, #10]
 800e244:	3a01      	subs	r2, #1
 800e246:	4013      	ands	r3, r2
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d17b      	bne.n	800e344 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e24c:	687a      	ldr	r2, [r7, #4]
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	699b      	ldr	r3, [r3, #24]
 800e252:	4619      	mov	r1, r3
 800e254:	4610      	mov	r0, r2
 800e256:	f7ff fc08 	bl	800da6a <get_fat>
 800e25a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	2b01      	cmp	r3, #1
 800e260:	d801      	bhi.n	800e266 <dir_next+0xa0>
 800e262:	2302      	movs	r3, #2
 800e264:	e081      	b.n	800e36a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e26c:	d101      	bne.n	800e272 <dir_next+0xac>
 800e26e:	2301      	movs	r3, #1
 800e270:	e07b      	b.n	800e36a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	69db      	ldr	r3, [r3, #28]
 800e276:	697a      	ldr	r2, [r7, #20]
 800e278:	429a      	cmp	r2, r3
 800e27a:	d359      	bcc.n	800e330 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d104      	bne.n	800e28c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2200      	movs	r2, #0
 800e286:	61da      	str	r2, [r3, #28]
 800e288:	2304      	movs	r3, #4
 800e28a:	e06e      	b.n	800e36a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e28c:	687a      	ldr	r2, [r7, #4]
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	699b      	ldr	r3, [r3, #24]
 800e292:	4619      	mov	r1, r3
 800e294:	4610      	mov	r0, r2
 800e296:	f7ff fe3d 	bl	800df14 <create_chain>
 800e29a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d101      	bne.n	800e2a6 <dir_next+0xe0>
 800e2a2:	2307      	movs	r3, #7
 800e2a4:	e061      	b.n	800e36a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e2a6:	697b      	ldr	r3, [r7, #20]
 800e2a8:	2b01      	cmp	r3, #1
 800e2aa:	d101      	bne.n	800e2b0 <dir_next+0xea>
 800e2ac:	2302      	movs	r3, #2
 800e2ae:	e05c      	b.n	800e36a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e2b0:	697b      	ldr	r3, [r7, #20]
 800e2b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2b6:	d101      	bne.n	800e2bc <dir_next+0xf6>
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	e056      	b.n	800e36a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e2bc:	68f8      	ldr	r0, [r7, #12]
 800e2be:	f7ff fad3 	bl	800d868 <sync_window>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d001      	beq.n	800e2cc <dir_next+0x106>
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	e04e      	b.n	800e36a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	899b      	ldrh	r3, [r3, #12]
 800e2d6:	461a      	mov	r2, r3
 800e2d8:	2100      	movs	r1, #0
 800e2da:	f7ff f8fc 	bl	800d4d6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e2de:	2300      	movs	r3, #0
 800e2e0:	613b      	str	r3, [r7, #16]
 800e2e2:	6979      	ldr	r1, [r7, #20]
 800e2e4:	68f8      	ldr	r0, [r7, #12]
 800e2e6:	f7ff fba1 	bl	800da2c <clust2sect>
 800e2ea:	4602      	mov	r2, r0
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	635a      	str	r2, [r3, #52]	; 0x34
 800e2f0:	e012      	b.n	800e318 <dir_next+0x152>
						fs->wflag = 1;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	2201      	movs	r2, #1
 800e2f6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e2f8:	68f8      	ldr	r0, [r7, #12]
 800e2fa:	f7ff fab5 	bl	800d868 <sync_window>
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	d001      	beq.n	800e308 <dir_next+0x142>
 800e304:	2301      	movs	r3, #1
 800e306:	e030      	b.n	800e36a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e308:	693b      	ldr	r3, [r7, #16]
 800e30a:	3301      	adds	r3, #1
 800e30c:	613b      	str	r3, [r7, #16]
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e312:	1c5a      	adds	r2, r3, #1
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	635a      	str	r2, [r3, #52]	; 0x34
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	895b      	ldrh	r3, [r3, #10]
 800e31c:	461a      	mov	r2, r3
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	4293      	cmp	r3, r2
 800e322:	d3e6      	bcc.n	800e2f2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e328:	693b      	ldr	r3, [r7, #16]
 800e32a:	1ad2      	subs	r2, r2, r3
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	697a      	ldr	r2, [r7, #20]
 800e334:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e336:	6979      	ldr	r1, [r7, #20]
 800e338:	68f8      	ldr	r0, [r7, #12]
 800e33a:	f7ff fb77 	bl	800da2c <clust2sect>
 800e33e:	4602      	mov	r2, r0
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	68ba      	ldr	r2, [r7, #8]
 800e348:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	899b      	ldrh	r3, [r3, #12]
 800e354:	461a      	mov	r2, r3
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	fbb3 f0f2 	udiv	r0, r3, r2
 800e35c:	fb00 f202 	mul.w	r2, r0, r2
 800e360:	1a9b      	subs	r3, r3, r2
 800e362:	18ca      	adds	r2, r1, r3
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e368:	2300      	movs	r3, #0
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3718      	adds	r7, #24
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}

0800e372 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e372:	b580      	push	{r7, lr}
 800e374:	b086      	sub	sp, #24
 800e376:	af00      	add	r7, sp, #0
 800e378:	6078      	str	r0, [r7, #4]
 800e37a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e382:	2100      	movs	r1, #0
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f7ff fe95 	bl	800e0b4 <dir_sdi>
 800e38a:	4603      	mov	r3, r0
 800e38c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e38e:	7dfb      	ldrb	r3, [r7, #23]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d12b      	bne.n	800e3ec <dir_alloc+0x7a>
		n = 0;
 800e394:	2300      	movs	r3, #0
 800e396:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	69db      	ldr	r3, [r3, #28]
 800e39c:	4619      	mov	r1, r3
 800e39e:	68f8      	ldr	r0, [r7, #12]
 800e3a0:	f7ff faa6 	bl	800d8f0 <move_window>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e3a8:	7dfb      	ldrb	r3, [r7, #23]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d11d      	bne.n	800e3ea <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6a1b      	ldr	r3, [r3, #32]
 800e3b2:	781b      	ldrb	r3, [r3, #0]
 800e3b4:	2be5      	cmp	r3, #229	; 0xe5
 800e3b6:	d004      	beq.n	800e3c2 <dir_alloc+0x50>
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6a1b      	ldr	r3, [r3, #32]
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d107      	bne.n	800e3d2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e3c2:	693b      	ldr	r3, [r7, #16]
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	613b      	str	r3, [r7, #16]
 800e3c8:	693a      	ldr	r2, [r7, #16]
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	429a      	cmp	r2, r3
 800e3ce:	d102      	bne.n	800e3d6 <dir_alloc+0x64>
 800e3d0:	e00c      	b.n	800e3ec <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e3d6:	2101      	movs	r1, #1
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f7ff fef4 	bl	800e1c6 <dir_next>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e3e2:	7dfb      	ldrb	r3, [r7, #23]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d0d7      	beq.n	800e398 <dir_alloc+0x26>
 800e3e8:	e000      	b.n	800e3ec <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e3ea:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e3ec:	7dfb      	ldrb	r3, [r7, #23]
 800e3ee:	2b04      	cmp	r3, #4
 800e3f0:	d101      	bne.n	800e3f6 <dir_alloc+0x84>
 800e3f2:	2307      	movs	r3, #7
 800e3f4:	75fb      	strb	r3, [r7, #23]
	return res;
 800e3f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3718      	adds	r7, #24
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}

0800e400 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b084      	sub	sp, #16
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
 800e408:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	331a      	adds	r3, #26
 800e40e:	4618      	mov	r0, r3
 800e410:	f7fe ffbe 	bl	800d390 <ld_word>
 800e414:	4603      	mov	r3, r0
 800e416:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	2b03      	cmp	r3, #3
 800e41e:	d109      	bne.n	800e434 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	3314      	adds	r3, #20
 800e424:	4618      	mov	r0, r3
 800e426:	f7fe ffb3 	bl	800d390 <ld_word>
 800e42a:	4603      	mov	r3, r0
 800e42c:	041b      	lsls	r3, r3, #16
 800e42e:	68fa      	ldr	r2, [r7, #12]
 800e430:	4313      	orrs	r3, r2
 800e432:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e434:	68fb      	ldr	r3, [r7, #12]
}
 800e436:	4618      	mov	r0, r3
 800e438:	3710      	adds	r7, #16
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}

0800e43e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e43e:	b580      	push	{r7, lr}
 800e440:	b084      	sub	sp, #16
 800e442:	af00      	add	r7, sp, #0
 800e444:	60f8      	str	r0, [r7, #12]
 800e446:	60b9      	str	r1, [r7, #8]
 800e448:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	331a      	adds	r3, #26
 800e44e:	687a      	ldr	r2, [r7, #4]
 800e450:	b292      	uxth	r2, r2
 800e452:	4611      	mov	r1, r2
 800e454:	4618      	mov	r0, r3
 800e456:	f7fe ffd6 	bl	800d406 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	781b      	ldrb	r3, [r3, #0]
 800e45e:	2b03      	cmp	r3, #3
 800e460:	d109      	bne.n	800e476 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	f103 0214 	add.w	r2, r3, #20
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	0c1b      	lsrs	r3, r3, #16
 800e46c:	b29b      	uxth	r3, r3
 800e46e:	4619      	mov	r1, r3
 800e470:	4610      	mov	r0, r2
 800e472:	f7fe ffc8 	bl	800d406 <st_word>
	}
}
 800e476:	bf00      	nop
 800e478:	3710      	adds	r7, #16
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}
	...

0800e480 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e480:	b590      	push	{r4, r7, lr}
 800e482:	b087      	sub	sp, #28
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	331a      	adds	r3, #26
 800e48e:	4618      	mov	r0, r3
 800e490:	f7fe ff7e 	bl	800d390 <ld_word>
 800e494:	4603      	mov	r3, r0
 800e496:	2b00      	cmp	r3, #0
 800e498:	d001      	beq.n	800e49e <cmp_lfn+0x1e>
 800e49a:	2300      	movs	r3, #0
 800e49c:	e059      	b.n	800e552 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	781b      	ldrb	r3, [r3, #0]
 800e4a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e4a6:	1e5a      	subs	r2, r3, #1
 800e4a8:	4613      	mov	r3, r2
 800e4aa:	005b      	lsls	r3, r3, #1
 800e4ac:	4413      	add	r3, r2
 800e4ae:	009b      	lsls	r3, r3, #2
 800e4b0:	4413      	add	r3, r2
 800e4b2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	81fb      	strh	r3, [r7, #14]
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	613b      	str	r3, [r7, #16]
 800e4bc:	e033      	b.n	800e526 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e4be:	4a27      	ldr	r2, [pc, #156]	; (800e55c <cmp_lfn+0xdc>)
 800e4c0:	693b      	ldr	r3, [r7, #16]
 800e4c2:	4413      	add	r3, r2
 800e4c4:	781b      	ldrb	r3, [r3, #0]
 800e4c6:	461a      	mov	r2, r3
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	4413      	add	r3, r2
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f7fe ff5f 	bl	800d390 <ld_word>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e4d6:	89fb      	ldrh	r3, [r7, #14]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d01a      	beq.n	800e512 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	2bfe      	cmp	r3, #254	; 0xfe
 800e4e0:	d812      	bhi.n	800e508 <cmp_lfn+0x88>
 800e4e2:	89bb      	ldrh	r3, [r7, #12]
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f002 fb5b 	bl	8010ba0 <ff_wtoupper>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	461c      	mov	r4, r3
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	1c5a      	adds	r2, r3, #1
 800e4f2:	617a      	str	r2, [r7, #20]
 800e4f4:	005b      	lsls	r3, r3, #1
 800e4f6:	687a      	ldr	r2, [r7, #4]
 800e4f8:	4413      	add	r3, r2
 800e4fa:	881b      	ldrh	r3, [r3, #0]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f002 fb4f 	bl	8010ba0 <ff_wtoupper>
 800e502:	4603      	mov	r3, r0
 800e504:	429c      	cmp	r4, r3
 800e506:	d001      	beq.n	800e50c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e508:	2300      	movs	r3, #0
 800e50a:	e022      	b.n	800e552 <cmp_lfn+0xd2>
			}
			wc = uc;
 800e50c:	89bb      	ldrh	r3, [r7, #12]
 800e50e:	81fb      	strh	r3, [r7, #14]
 800e510:	e006      	b.n	800e520 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e512:	89bb      	ldrh	r3, [r7, #12]
 800e514:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e518:	4293      	cmp	r3, r2
 800e51a:	d001      	beq.n	800e520 <cmp_lfn+0xa0>
 800e51c:	2300      	movs	r3, #0
 800e51e:	e018      	b.n	800e552 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	3301      	adds	r3, #1
 800e524:	613b      	str	r3, [r7, #16]
 800e526:	693b      	ldr	r3, [r7, #16]
 800e528:	2b0c      	cmp	r3, #12
 800e52a:	d9c8      	bls.n	800e4be <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	781b      	ldrb	r3, [r3, #0]
 800e530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e534:	2b00      	cmp	r3, #0
 800e536:	d00b      	beq.n	800e550 <cmp_lfn+0xd0>
 800e538:	89fb      	ldrh	r3, [r7, #14]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d008      	beq.n	800e550 <cmp_lfn+0xd0>
 800e53e:	697b      	ldr	r3, [r7, #20]
 800e540:	005b      	lsls	r3, r3, #1
 800e542:	687a      	ldr	r2, [r7, #4]
 800e544:	4413      	add	r3, r2
 800e546:	881b      	ldrh	r3, [r3, #0]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d001      	beq.n	800e550 <cmp_lfn+0xd0>
 800e54c:	2300      	movs	r3, #0
 800e54e:	e000      	b.n	800e552 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e550:	2301      	movs	r3, #1
}
 800e552:	4618      	mov	r0, r3
 800e554:	371c      	adds	r7, #28
 800e556:	46bd      	mov	sp, r7
 800e558:	bd90      	pop	{r4, r7, pc}
 800e55a:	bf00      	nop
 800e55c:	08011e4c 	.word	0x08011e4c

0800e560 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b086      	sub	sp, #24
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
 800e568:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	331a      	adds	r3, #26
 800e56e:	4618      	mov	r0, r3
 800e570:	f7fe ff0e 	bl	800d390 <ld_word>
 800e574:	4603      	mov	r3, r0
 800e576:	2b00      	cmp	r3, #0
 800e578:	d001      	beq.n	800e57e <pick_lfn+0x1e>
 800e57a:	2300      	movs	r3, #0
 800e57c:	e04d      	b.n	800e61a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e586:	1e5a      	subs	r2, r3, #1
 800e588:	4613      	mov	r3, r2
 800e58a:	005b      	lsls	r3, r3, #1
 800e58c:	4413      	add	r3, r2
 800e58e:	009b      	lsls	r3, r3, #2
 800e590:	4413      	add	r3, r2
 800e592:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e594:	2301      	movs	r3, #1
 800e596:	81fb      	strh	r3, [r7, #14]
 800e598:	2300      	movs	r3, #0
 800e59a:	613b      	str	r3, [r7, #16]
 800e59c:	e028      	b.n	800e5f0 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e59e:	4a21      	ldr	r2, [pc, #132]	; (800e624 <pick_lfn+0xc4>)
 800e5a0:	693b      	ldr	r3, [r7, #16]
 800e5a2:	4413      	add	r3, r2
 800e5a4:	781b      	ldrb	r3, [r3, #0]
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	4413      	add	r3, r2
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f7fe feef 	bl	800d390 <ld_word>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e5b6:	89fb      	ldrh	r3, [r7, #14]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d00f      	beq.n	800e5dc <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	2bfe      	cmp	r3, #254	; 0xfe
 800e5c0:	d901      	bls.n	800e5c6 <pick_lfn+0x66>
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	e029      	b.n	800e61a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800e5c6:	89bb      	ldrh	r3, [r7, #12]
 800e5c8:	81fb      	strh	r3, [r7, #14]
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	1c5a      	adds	r2, r3, #1
 800e5ce:	617a      	str	r2, [r7, #20]
 800e5d0:	005b      	lsls	r3, r3, #1
 800e5d2:	687a      	ldr	r2, [r7, #4]
 800e5d4:	4413      	add	r3, r2
 800e5d6:	89fa      	ldrh	r2, [r7, #14]
 800e5d8:	801a      	strh	r2, [r3, #0]
 800e5da:	e006      	b.n	800e5ea <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e5dc:	89bb      	ldrh	r3, [r7, #12]
 800e5de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e5e2:	4293      	cmp	r3, r2
 800e5e4:	d001      	beq.n	800e5ea <pick_lfn+0x8a>
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	e017      	b.n	800e61a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e5ea:	693b      	ldr	r3, [r7, #16]
 800e5ec:	3301      	adds	r3, #1
 800e5ee:	613b      	str	r3, [r7, #16]
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	2b0c      	cmp	r3, #12
 800e5f4:	d9d3      	bls.n	800e59e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	781b      	ldrb	r3, [r3, #0]
 800e5fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d00a      	beq.n	800e618 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	2bfe      	cmp	r3, #254	; 0xfe
 800e606:	d901      	bls.n	800e60c <pick_lfn+0xac>
 800e608:	2300      	movs	r3, #0
 800e60a:	e006      	b.n	800e61a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	005b      	lsls	r3, r3, #1
 800e610:	687a      	ldr	r2, [r7, #4]
 800e612:	4413      	add	r3, r2
 800e614:	2200      	movs	r2, #0
 800e616:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800e618:	2301      	movs	r3, #1
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	3718      	adds	r7, #24
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}
 800e622:	bf00      	nop
 800e624:	08011e4c 	.word	0x08011e4c

0800e628 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b088      	sub	sp, #32
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	60f8      	str	r0, [r7, #12]
 800e630:	60b9      	str	r1, [r7, #8]
 800e632:	4611      	mov	r1, r2
 800e634:	461a      	mov	r2, r3
 800e636:	460b      	mov	r3, r1
 800e638:	71fb      	strb	r3, [r7, #7]
 800e63a:	4613      	mov	r3, r2
 800e63c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	330d      	adds	r3, #13
 800e642:	79ba      	ldrb	r2, [r7, #6]
 800e644:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e646:	68bb      	ldr	r3, [r7, #8]
 800e648:	330b      	adds	r3, #11
 800e64a:	220f      	movs	r2, #15
 800e64c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	330c      	adds	r3, #12
 800e652:	2200      	movs	r2, #0
 800e654:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	331a      	adds	r3, #26
 800e65a:	2100      	movs	r1, #0
 800e65c:	4618      	mov	r0, r3
 800e65e:	f7fe fed2 	bl	800d406 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e662:	79fb      	ldrb	r3, [r7, #7]
 800e664:	1e5a      	subs	r2, r3, #1
 800e666:	4613      	mov	r3, r2
 800e668:	005b      	lsls	r3, r3, #1
 800e66a:	4413      	add	r3, r2
 800e66c:	009b      	lsls	r3, r3, #2
 800e66e:	4413      	add	r3, r2
 800e670:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e672:	2300      	movs	r3, #0
 800e674:	82fb      	strh	r3, [r7, #22]
 800e676:	2300      	movs	r3, #0
 800e678:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e67a:	8afb      	ldrh	r3, [r7, #22]
 800e67c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e680:	4293      	cmp	r3, r2
 800e682:	d007      	beq.n	800e694 <put_lfn+0x6c>
 800e684:	69fb      	ldr	r3, [r7, #28]
 800e686:	1c5a      	adds	r2, r3, #1
 800e688:	61fa      	str	r2, [r7, #28]
 800e68a:	005b      	lsls	r3, r3, #1
 800e68c:	68fa      	ldr	r2, [r7, #12]
 800e68e:	4413      	add	r3, r2
 800e690:	881b      	ldrh	r3, [r3, #0]
 800e692:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e694:	4a17      	ldr	r2, [pc, #92]	; (800e6f4 <put_lfn+0xcc>)
 800e696:	69bb      	ldr	r3, [r7, #24]
 800e698:	4413      	add	r3, r2
 800e69a:	781b      	ldrb	r3, [r3, #0]
 800e69c:	461a      	mov	r2, r3
 800e69e:	68bb      	ldr	r3, [r7, #8]
 800e6a0:	4413      	add	r3, r2
 800e6a2:	8afa      	ldrh	r2, [r7, #22]
 800e6a4:	4611      	mov	r1, r2
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f7fe fead 	bl	800d406 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e6ac:	8afb      	ldrh	r3, [r7, #22]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d102      	bne.n	800e6b8 <put_lfn+0x90>
 800e6b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e6b6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e6b8:	69bb      	ldr	r3, [r7, #24]
 800e6ba:	3301      	adds	r3, #1
 800e6bc:	61bb      	str	r3, [r7, #24]
 800e6be:	69bb      	ldr	r3, [r7, #24]
 800e6c0:	2b0c      	cmp	r3, #12
 800e6c2:	d9da      	bls.n	800e67a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e6c4:	8afb      	ldrh	r3, [r7, #22]
 800e6c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6ca:	4293      	cmp	r3, r2
 800e6cc:	d006      	beq.n	800e6dc <put_lfn+0xb4>
 800e6ce:	69fb      	ldr	r3, [r7, #28]
 800e6d0:	005b      	lsls	r3, r3, #1
 800e6d2:	68fa      	ldr	r2, [r7, #12]
 800e6d4:	4413      	add	r3, r2
 800e6d6:	881b      	ldrh	r3, [r3, #0]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d103      	bne.n	800e6e4 <put_lfn+0xbc>
 800e6dc:	79fb      	ldrb	r3, [r7, #7]
 800e6de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6e2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	79fa      	ldrb	r2, [r7, #7]
 800e6e8:	701a      	strb	r2, [r3, #0]
}
 800e6ea:	bf00      	nop
 800e6ec:	3720      	adds	r7, #32
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	08011e4c 	.word	0x08011e4c

0800e6f8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b08c      	sub	sp, #48	; 0x30
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	60f8      	str	r0, [r7, #12]
 800e700:	60b9      	str	r1, [r7, #8]
 800e702:	607a      	str	r2, [r7, #4]
 800e704:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e706:	220b      	movs	r2, #11
 800e708:	68b9      	ldr	r1, [r7, #8]
 800e70a:	68f8      	ldr	r0, [r7, #12]
 800e70c:	f7fe fec2 	bl	800d494 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	2b05      	cmp	r3, #5
 800e714:	d92b      	bls.n	800e76e <gen_numname+0x76>
		sr = seq;
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e71a:	e022      	b.n	800e762 <gen_numname+0x6a>
			wc = *lfn++;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	1c9a      	adds	r2, r3, #2
 800e720:	607a      	str	r2, [r7, #4]
 800e722:	881b      	ldrh	r3, [r3, #0]
 800e724:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e726:	2300      	movs	r3, #0
 800e728:	62bb      	str	r3, [r7, #40]	; 0x28
 800e72a:	e017      	b.n	800e75c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e72c:	69fb      	ldr	r3, [r7, #28]
 800e72e:	005a      	lsls	r2, r3, #1
 800e730:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e732:	f003 0301 	and.w	r3, r3, #1
 800e736:	4413      	add	r3, r2
 800e738:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e73a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e73c:	085b      	lsrs	r3, r3, #1
 800e73e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e740:	69fb      	ldr	r3, [r7, #28]
 800e742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e746:	2b00      	cmp	r3, #0
 800e748:	d005      	beq.n	800e756 <gen_numname+0x5e>
 800e74a:	69fb      	ldr	r3, [r7, #28]
 800e74c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800e750:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800e754:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e758:	3301      	adds	r3, #1
 800e75a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e75e:	2b0f      	cmp	r3, #15
 800e760:	d9e4      	bls.n	800e72c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	881b      	ldrh	r3, [r3, #0]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d1d8      	bne.n	800e71c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e76a:	69fb      	ldr	r3, [r7, #28]
 800e76c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e76e:	2307      	movs	r3, #7
 800e770:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	b2db      	uxtb	r3, r3
 800e776:	f003 030f 	and.w	r3, r3, #15
 800e77a:	b2db      	uxtb	r3, r3
 800e77c:	3330      	adds	r3, #48	; 0x30
 800e77e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e782:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e786:	2b39      	cmp	r3, #57	; 0x39
 800e788:	d904      	bls.n	800e794 <gen_numname+0x9c>
 800e78a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e78e:	3307      	adds	r3, #7
 800e790:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e796:	1e5a      	subs	r2, r3, #1
 800e798:	62ba      	str	r2, [r7, #40]	; 0x28
 800e79a:	3330      	adds	r3, #48	; 0x30
 800e79c:	443b      	add	r3, r7
 800e79e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e7a2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	091b      	lsrs	r3, r3, #4
 800e7aa:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d1df      	bne.n	800e772 <gen_numname+0x7a>
	ns[i] = '~';
 800e7b2:	f107 0214 	add.w	r2, r7, #20
 800e7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b8:	4413      	add	r3, r2
 800e7ba:	227e      	movs	r2, #126	; 0x7e
 800e7bc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e7be:	2300      	movs	r3, #0
 800e7c0:	627b      	str	r3, [r7, #36]	; 0x24
 800e7c2:	e002      	b.n	800e7ca <gen_numname+0xd2>
 800e7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c6:	3301      	adds	r3, #1
 800e7c8:	627b      	str	r3, [r7, #36]	; 0x24
 800e7ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	d205      	bcs.n	800e7de <gen_numname+0xe6>
 800e7d2:	68fa      	ldr	r2, [r7, #12]
 800e7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d6:	4413      	add	r3, r2
 800e7d8:	781b      	ldrb	r3, [r3, #0]
 800e7da:	2b20      	cmp	r3, #32
 800e7dc:	d1f2      	bne.n	800e7c4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e0:	2b07      	cmp	r3, #7
 800e7e2:	d807      	bhi.n	800e7f4 <gen_numname+0xfc>
 800e7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e6:	1c5a      	adds	r2, r3, #1
 800e7e8:	62ba      	str	r2, [r7, #40]	; 0x28
 800e7ea:	3330      	adds	r3, #48	; 0x30
 800e7ec:	443b      	add	r3, r7
 800e7ee:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e7f2:	e000      	b.n	800e7f6 <gen_numname+0xfe>
 800e7f4:	2120      	movs	r1, #32
 800e7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f8:	1c5a      	adds	r2, r3, #1
 800e7fa:	627a      	str	r2, [r7, #36]	; 0x24
 800e7fc:	68fa      	ldr	r2, [r7, #12]
 800e7fe:	4413      	add	r3, r2
 800e800:	460a      	mov	r2, r1
 800e802:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e806:	2b07      	cmp	r3, #7
 800e808:	d9e9      	bls.n	800e7de <gen_numname+0xe6>
}
 800e80a:	bf00      	nop
 800e80c:	bf00      	nop
 800e80e:	3730      	adds	r7, #48	; 0x30
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}

0800e814 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e814:	b480      	push	{r7}
 800e816:	b085      	sub	sp, #20
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e81c:	2300      	movs	r3, #0
 800e81e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e820:	230b      	movs	r3, #11
 800e822:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e824:	7bfb      	ldrb	r3, [r7, #15]
 800e826:	b2da      	uxtb	r2, r3
 800e828:	0852      	lsrs	r2, r2, #1
 800e82a:	01db      	lsls	r3, r3, #7
 800e82c:	4313      	orrs	r3, r2
 800e82e:	b2da      	uxtb	r2, r3
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	1c59      	adds	r1, r3, #1
 800e834:	6079      	str	r1, [r7, #4]
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	4413      	add	r3, r2
 800e83a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	3b01      	subs	r3, #1
 800e840:	60bb      	str	r3, [r7, #8]
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d1ed      	bne.n	800e824 <sum_sfn+0x10>
	return sum;
 800e848:	7bfb      	ldrb	r3, [r7, #15]
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	3714      	adds	r7, #20
 800e84e:	46bd      	mov	sp, r7
 800e850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e854:	4770      	bx	lr

0800e856 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e856:	b580      	push	{r7, lr}
 800e858:	b086      	sub	sp, #24
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	6078      	str	r0, [r7, #4]
 800e85e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e860:	2304      	movs	r3, #4
 800e862:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800e86a:	23ff      	movs	r3, #255	; 0xff
 800e86c:	757b      	strb	r3, [r7, #21]
 800e86e:	23ff      	movs	r3, #255	; 0xff
 800e870:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800e872:	e081      	b.n	800e978 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	69db      	ldr	r3, [r3, #28]
 800e878:	4619      	mov	r1, r3
 800e87a:	6938      	ldr	r0, [r7, #16]
 800e87c:	f7ff f838 	bl	800d8f0 <move_window>
 800e880:	4603      	mov	r3, r0
 800e882:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e884:	7dfb      	ldrb	r3, [r7, #23]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d17c      	bne.n	800e984 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6a1b      	ldr	r3, [r3, #32]
 800e88e:	781b      	ldrb	r3, [r3, #0]
 800e890:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800e892:	7dbb      	ldrb	r3, [r7, #22]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d102      	bne.n	800e89e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e898:	2304      	movs	r3, #4
 800e89a:	75fb      	strb	r3, [r7, #23]
 800e89c:	e077      	b.n	800e98e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	6a1b      	ldr	r3, [r3, #32]
 800e8a2:	330b      	adds	r3, #11
 800e8a4:	781b      	ldrb	r3, [r3, #0]
 800e8a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e8aa:	73fb      	strb	r3, [r7, #15]
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	7bfa      	ldrb	r2, [r7, #15]
 800e8b0:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800e8b2:	7dbb      	ldrb	r3, [r7, #22]
 800e8b4:	2be5      	cmp	r3, #229	; 0xe5
 800e8b6:	d00e      	beq.n	800e8d6 <dir_read+0x80>
 800e8b8:	7dbb      	ldrb	r3, [r7, #22]
 800e8ba:	2b2e      	cmp	r3, #46	; 0x2e
 800e8bc:	d00b      	beq.n	800e8d6 <dir_read+0x80>
 800e8be:	7bfb      	ldrb	r3, [r7, #15]
 800e8c0:	f023 0320 	bic.w	r3, r3, #32
 800e8c4:	2b08      	cmp	r3, #8
 800e8c6:	bf0c      	ite	eq
 800e8c8:	2301      	moveq	r3, #1
 800e8ca:	2300      	movne	r3, #0
 800e8cc:	b2db      	uxtb	r3, r3
 800e8ce:	461a      	mov	r2, r3
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d002      	beq.n	800e8dc <dir_read+0x86>
				ord = 0xFF;
 800e8d6:	23ff      	movs	r3, #255	; 0xff
 800e8d8:	757b      	strb	r3, [r7, #21]
 800e8da:	e044      	b.n	800e966 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800e8dc:	7bfb      	ldrb	r3, [r7, #15]
 800e8de:	2b0f      	cmp	r3, #15
 800e8e0:	d12f      	bne.n	800e942 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800e8e2:	7dbb      	ldrb	r3, [r7, #22]
 800e8e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d00d      	beq.n	800e908 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6a1b      	ldr	r3, [r3, #32]
 800e8f0:	7b5b      	ldrb	r3, [r3, #13]
 800e8f2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800e8f4:	7dbb      	ldrb	r3, [r7, #22]
 800e8f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e8fa:	75bb      	strb	r3, [r7, #22]
 800e8fc:	7dbb      	ldrb	r3, [r7, #22]
 800e8fe:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	695a      	ldr	r2, [r3, #20]
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e908:	7dba      	ldrb	r2, [r7, #22]
 800e90a:	7d7b      	ldrb	r3, [r7, #21]
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d115      	bne.n	800e93c <dir_read+0xe6>
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	6a1b      	ldr	r3, [r3, #32]
 800e914:	330d      	adds	r3, #13
 800e916:	781b      	ldrb	r3, [r3, #0]
 800e918:	7d3a      	ldrb	r2, [r7, #20]
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d10e      	bne.n	800e93c <dir_read+0xe6>
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	691a      	ldr	r2, [r3, #16]
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6a1b      	ldr	r3, [r3, #32]
 800e926:	4619      	mov	r1, r3
 800e928:	4610      	mov	r0, r2
 800e92a:	f7ff fe19 	bl	800e560 <pick_lfn>
 800e92e:	4603      	mov	r3, r0
 800e930:	2b00      	cmp	r3, #0
 800e932:	d003      	beq.n	800e93c <dir_read+0xe6>
 800e934:	7d7b      	ldrb	r3, [r7, #21]
 800e936:	3b01      	subs	r3, #1
 800e938:	b2db      	uxtb	r3, r3
 800e93a:	e000      	b.n	800e93e <dir_read+0xe8>
 800e93c:	23ff      	movs	r3, #255	; 0xff
 800e93e:	757b      	strb	r3, [r7, #21]
 800e940:	e011      	b.n	800e966 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800e942:	7d7b      	ldrb	r3, [r7, #21]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d109      	bne.n	800e95c <dir_read+0x106>
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6a1b      	ldr	r3, [r3, #32]
 800e94c:	4618      	mov	r0, r3
 800e94e:	f7ff ff61 	bl	800e814 <sum_sfn>
 800e952:	4603      	mov	r3, r0
 800e954:	461a      	mov	r2, r3
 800e956:	7d3b      	ldrb	r3, [r7, #20]
 800e958:	4293      	cmp	r3, r2
 800e95a:	d015      	beq.n	800e988 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e962:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800e964:	e010      	b.n	800e988 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e966:	2100      	movs	r1, #0
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f7ff fc2c 	bl	800e1c6 <dir_next>
 800e96e:	4603      	mov	r3, r0
 800e970:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e972:	7dfb      	ldrb	r3, [r7, #23]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d109      	bne.n	800e98c <dir_read+0x136>
	while (dp->sect) {
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	69db      	ldr	r3, [r3, #28]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	f47f af79 	bne.w	800e874 <dir_read+0x1e>
 800e982:	e004      	b.n	800e98e <dir_read+0x138>
		if (res != FR_OK) break;
 800e984:	bf00      	nop
 800e986:	e002      	b.n	800e98e <dir_read+0x138>
					break;
 800e988:	bf00      	nop
 800e98a:	e000      	b.n	800e98e <dir_read+0x138>
		if (res != FR_OK) break;
 800e98c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e98e:	7dfb      	ldrb	r3, [r7, #23]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d002      	beq.n	800e99a <dir_read+0x144>
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2200      	movs	r2, #0
 800e998:	61da      	str	r2, [r3, #28]
	return res;
 800e99a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	3718      	adds	r7, #24
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}

0800e9a4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b086      	sub	sp, #24
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e9b2:	2100      	movs	r1, #0
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f7ff fb7d 	bl	800e0b4 <dir_sdi>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e9be:	7dfb      	ldrb	r3, [r7, #23]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d001      	beq.n	800e9c8 <dir_find+0x24>
 800e9c4:	7dfb      	ldrb	r3, [r7, #23]
 800e9c6:	e0a9      	b.n	800eb1c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e9c8:	23ff      	movs	r3, #255	; 0xff
 800e9ca:	753b      	strb	r3, [r7, #20]
 800e9cc:	7d3b      	ldrb	r3, [r7, #20]
 800e9ce:	757b      	strb	r3, [r7, #21]
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e9d6:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	69db      	ldr	r3, [r3, #28]
 800e9dc:	4619      	mov	r1, r3
 800e9de:	6938      	ldr	r0, [r7, #16]
 800e9e0:	f7fe ff86 	bl	800d8f0 <move_window>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e9e8:	7dfb      	ldrb	r3, [r7, #23]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	f040 8090 	bne.w	800eb10 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6a1b      	ldr	r3, [r3, #32]
 800e9f4:	781b      	ldrb	r3, [r3, #0]
 800e9f6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e9f8:	7dbb      	ldrb	r3, [r7, #22]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d102      	bne.n	800ea04 <dir_find+0x60>
 800e9fe:	2304      	movs	r3, #4
 800ea00:	75fb      	strb	r3, [r7, #23]
 800ea02:	e08a      	b.n	800eb1a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6a1b      	ldr	r3, [r3, #32]
 800ea08:	330b      	adds	r3, #11
 800ea0a:	781b      	ldrb	r3, [r3, #0]
 800ea0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea10:	73fb      	strb	r3, [r7, #15]
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	7bfa      	ldrb	r2, [r7, #15]
 800ea16:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ea18:	7dbb      	ldrb	r3, [r7, #22]
 800ea1a:	2be5      	cmp	r3, #229	; 0xe5
 800ea1c:	d007      	beq.n	800ea2e <dir_find+0x8a>
 800ea1e:	7bfb      	ldrb	r3, [r7, #15]
 800ea20:	f003 0308 	and.w	r3, r3, #8
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d009      	beq.n	800ea3c <dir_find+0x98>
 800ea28:	7bfb      	ldrb	r3, [r7, #15]
 800ea2a:	2b0f      	cmp	r3, #15
 800ea2c:	d006      	beq.n	800ea3c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ea2e:	23ff      	movs	r3, #255	; 0xff
 800ea30:	757b      	strb	r3, [r7, #21]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ea38:	631a      	str	r2, [r3, #48]	; 0x30
 800ea3a:	e05e      	b.n	800eafa <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ea3c:	7bfb      	ldrb	r3, [r7, #15]
 800ea3e:	2b0f      	cmp	r3, #15
 800ea40:	d136      	bne.n	800eab0 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ea48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d154      	bne.n	800eafa <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ea50:	7dbb      	ldrb	r3, [r7, #22]
 800ea52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d00d      	beq.n	800ea76 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6a1b      	ldr	r3, [r3, #32]
 800ea5e:	7b5b      	ldrb	r3, [r3, #13]
 800ea60:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ea62:	7dbb      	ldrb	r3, [r7, #22]
 800ea64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea68:	75bb      	strb	r3, [r7, #22]
 800ea6a:	7dbb      	ldrb	r3, [r7, #22]
 800ea6c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	695a      	ldr	r2, [r3, #20]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ea76:	7dba      	ldrb	r2, [r7, #22]
 800ea78:	7d7b      	ldrb	r3, [r7, #21]
 800ea7a:	429a      	cmp	r2, r3
 800ea7c:	d115      	bne.n	800eaaa <dir_find+0x106>
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6a1b      	ldr	r3, [r3, #32]
 800ea82:	330d      	adds	r3, #13
 800ea84:	781b      	ldrb	r3, [r3, #0]
 800ea86:	7d3a      	ldrb	r2, [r7, #20]
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d10e      	bne.n	800eaaa <dir_find+0x106>
 800ea8c:	693b      	ldr	r3, [r7, #16]
 800ea8e:	691a      	ldr	r2, [r3, #16]
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	6a1b      	ldr	r3, [r3, #32]
 800ea94:	4619      	mov	r1, r3
 800ea96:	4610      	mov	r0, r2
 800ea98:	f7ff fcf2 	bl	800e480 <cmp_lfn>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d003      	beq.n	800eaaa <dir_find+0x106>
 800eaa2:	7d7b      	ldrb	r3, [r7, #21]
 800eaa4:	3b01      	subs	r3, #1
 800eaa6:	b2db      	uxtb	r3, r3
 800eaa8:	e000      	b.n	800eaac <dir_find+0x108>
 800eaaa:	23ff      	movs	r3, #255	; 0xff
 800eaac:	757b      	strb	r3, [r7, #21]
 800eaae:	e024      	b.n	800eafa <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800eab0:	7d7b      	ldrb	r3, [r7, #21]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d109      	bne.n	800eaca <dir_find+0x126>
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	6a1b      	ldr	r3, [r3, #32]
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7ff feaa 	bl	800e814 <sum_sfn>
 800eac0:	4603      	mov	r3, r0
 800eac2:	461a      	mov	r2, r3
 800eac4:	7d3b      	ldrb	r3, [r7, #20]
 800eac6:	4293      	cmp	r3, r2
 800eac8:	d024      	beq.n	800eb14 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ead0:	f003 0301 	and.w	r3, r3, #1
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d10a      	bne.n	800eaee <dir_find+0x14a>
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6a18      	ldr	r0, [r3, #32]
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	3324      	adds	r3, #36	; 0x24
 800eae0:	220b      	movs	r2, #11
 800eae2:	4619      	mov	r1, r3
 800eae4:	f7fe fd12 	bl	800d50c <mem_cmp>
 800eae8:	4603      	mov	r3, r0
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d014      	beq.n	800eb18 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800eaee:	23ff      	movs	r3, #255	; 0xff
 800eaf0:	757b      	strb	r3, [r7, #21]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eaf8:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800eafa:	2100      	movs	r1, #0
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f7ff fb62 	bl	800e1c6 <dir_next>
 800eb02:	4603      	mov	r3, r0
 800eb04:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800eb06:	7dfb      	ldrb	r3, [r7, #23]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	f43f af65 	beq.w	800e9d8 <dir_find+0x34>
 800eb0e:	e004      	b.n	800eb1a <dir_find+0x176>
		if (res != FR_OK) break;
 800eb10:	bf00      	nop
 800eb12:	e002      	b.n	800eb1a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800eb14:	bf00      	nop
 800eb16:	e000      	b.n	800eb1a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800eb18:	bf00      	nop

	return res;
 800eb1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3718      	adds	r7, #24
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b08c      	sub	sp, #48	; 0x30
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eb38:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d001      	beq.n	800eb44 <dir_register+0x20>
 800eb40:	2306      	movs	r3, #6
 800eb42:	e0e0      	b.n	800ed06 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800eb44:	2300      	movs	r3, #0
 800eb46:	627b      	str	r3, [r7, #36]	; 0x24
 800eb48:	e002      	b.n	800eb50 <dir_register+0x2c>
 800eb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb4c:	3301      	adds	r3, #1
 800eb4e:	627b      	str	r3, [r7, #36]	; 0x24
 800eb50:	69fb      	ldr	r3, [r7, #28]
 800eb52:	691a      	ldr	r2, [r3, #16]
 800eb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb56:	005b      	lsls	r3, r3, #1
 800eb58:	4413      	add	r3, r2
 800eb5a:	881b      	ldrh	r3, [r3, #0]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d1f4      	bne.n	800eb4a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800eb66:	f107 030c 	add.w	r3, r7, #12
 800eb6a:	220c      	movs	r2, #12
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f7fe fc91 	bl	800d494 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800eb72:	7dfb      	ldrb	r3, [r7, #23]
 800eb74:	f003 0301 	and.w	r3, r3, #1
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d032      	beq.n	800ebe2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2240      	movs	r2, #64	; 0x40
 800eb80:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800eb84:	2301      	movs	r3, #1
 800eb86:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb88:	e016      	b.n	800ebb8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800eb90:	69fb      	ldr	r3, [r7, #28]
 800eb92:	691a      	ldr	r2, [r3, #16]
 800eb94:	f107 010c 	add.w	r1, r7, #12
 800eb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb9a:	f7ff fdad 	bl	800e6f8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f7ff ff00 	bl	800e9a4 <dir_find>
 800eba4:	4603      	mov	r3, r0
 800eba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ebaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d106      	bne.n	800ebc0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ebb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb4:	3301      	adds	r3, #1
 800ebb6:	62bb      	str	r3, [r7, #40]	; 0x28
 800ebb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebba:	2b63      	cmp	r3, #99	; 0x63
 800ebbc:	d9e5      	bls.n	800eb8a <dir_register+0x66>
 800ebbe:	e000      	b.n	800ebc2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800ebc0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ebc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc4:	2b64      	cmp	r3, #100	; 0x64
 800ebc6:	d101      	bne.n	800ebcc <dir_register+0xa8>
 800ebc8:	2307      	movs	r3, #7
 800ebca:	e09c      	b.n	800ed06 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ebcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ebd0:	2b04      	cmp	r3, #4
 800ebd2:	d002      	beq.n	800ebda <dir_register+0xb6>
 800ebd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ebd8:	e095      	b.n	800ed06 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ebda:	7dfa      	ldrb	r2, [r7, #23]
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ebe2:	7dfb      	ldrb	r3, [r7, #23]
 800ebe4:	f003 0302 	and.w	r3, r3, #2
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d007      	beq.n	800ebfc <dir_register+0xd8>
 800ebec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebee:	330c      	adds	r3, #12
 800ebf0:	4a47      	ldr	r2, [pc, #284]	; (800ed10 <dir_register+0x1ec>)
 800ebf2:	fba2 2303 	umull	r2, r3, r2, r3
 800ebf6:	089b      	lsrs	r3, r3, #2
 800ebf8:	3301      	adds	r3, #1
 800ebfa:	e000      	b.n	800ebfe <dir_register+0xda>
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ec00:	6a39      	ldr	r1, [r7, #32]
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f7ff fbb5 	bl	800e372 <dir_alloc>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ec0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d148      	bne.n	800eca8 <dir_register+0x184>
 800ec16:	6a3b      	ldr	r3, [r7, #32]
 800ec18:	3b01      	subs	r3, #1
 800ec1a:	623b      	str	r3, [r7, #32]
 800ec1c:	6a3b      	ldr	r3, [r7, #32]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d042      	beq.n	800eca8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	695a      	ldr	r2, [r3, #20]
 800ec26:	6a3b      	ldr	r3, [r7, #32]
 800ec28:	015b      	lsls	r3, r3, #5
 800ec2a:	1ad3      	subs	r3, r2, r3
 800ec2c:	4619      	mov	r1, r3
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f7ff fa40 	bl	800e0b4 <dir_sdi>
 800ec34:	4603      	mov	r3, r0
 800ec36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ec3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d132      	bne.n	800eca8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	3324      	adds	r3, #36	; 0x24
 800ec46:	4618      	mov	r0, r3
 800ec48:	f7ff fde4 	bl	800e814 <sum_sfn>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	69db      	ldr	r3, [r3, #28]
 800ec54:	4619      	mov	r1, r3
 800ec56:	69f8      	ldr	r0, [r7, #28]
 800ec58:	f7fe fe4a 	bl	800d8f0 <move_window>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800ec62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d11d      	bne.n	800eca6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ec6a:	69fb      	ldr	r3, [r7, #28]
 800ec6c:	6918      	ldr	r0, [r3, #16]
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	6a19      	ldr	r1, [r3, #32]
 800ec72:	6a3b      	ldr	r3, [r7, #32]
 800ec74:	b2da      	uxtb	r2, r3
 800ec76:	7efb      	ldrb	r3, [r7, #27]
 800ec78:	f7ff fcd6 	bl	800e628 <put_lfn>
				fs->wflag = 1;
 800ec7c:	69fb      	ldr	r3, [r7, #28]
 800ec7e:	2201      	movs	r2, #1
 800ec80:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ec82:	2100      	movs	r1, #0
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f7ff fa9e 	bl	800e1c6 <dir_next>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800ec90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d107      	bne.n	800eca8 <dir_register+0x184>
 800ec98:	6a3b      	ldr	r3, [r7, #32]
 800ec9a:	3b01      	subs	r3, #1
 800ec9c:	623b      	str	r3, [r7, #32]
 800ec9e:	6a3b      	ldr	r3, [r7, #32]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d1d5      	bne.n	800ec50 <dir_register+0x12c>
 800eca4:	e000      	b.n	800eca8 <dir_register+0x184>
				if (res != FR_OK) break;
 800eca6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800eca8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d128      	bne.n	800ed02 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	69db      	ldr	r3, [r3, #28]
 800ecb4:	4619      	mov	r1, r3
 800ecb6:	69f8      	ldr	r0, [r7, #28]
 800ecb8:	f7fe fe1a 	bl	800d8f0 <move_window>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ecc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d11b      	bne.n	800ed02 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6a1b      	ldr	r3, [r3, #32]
 800ecce:	2220      	movs	r2, #32
 800ecd0:	2100      	movs	r1, #0
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f7fe fbff 	bl	800d4d6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	6a18      	ldr	r0, [r3, #32]
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	3324      	adds	r3, #36	; 0x24
 800ece0:	220b      	movs	r2, #11
 800ece2:	4619      	mov	r1, r3
 800ece4:	f7fe fbd6 	bl	800d494 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	6a1b      	ldr	r3, [r3, #32]
 800ecf2:	330c      	adds	r3, #12
 800ecf4:	f002 0218 	and.w	r2, r2, #24
 800ecf8:	b2d2      	uxtb	r2, r2
 800ecfa:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ecfc:	69fb      	ldr	r3, [r7, #28]
 800ecfe:	2201      	movs	r2, #1
 800ed00:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ed02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	3730      	adds	r7, #48	; 0x30
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}
 800ed0e:	bf00      	nop
 800ed10:	4ec4ec4f 	.word	0x4ec4ec4f

0800ed14 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b088      	sub	sp, #32
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	2200      	movs	r2, #0
 800ed28:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	69db      	ldr	r3, [r3, #28]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	f000 80c9 	beq.w	800eec6 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed3c:	d032      	beq.n	800eda4 <get_fileinfo+0x90>
			i = j = 0;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	61bb      	str	r3, [r7, #24]
 800ed42:	69bb      	ldr	r3, [r7, #24]
 800ed44:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ed46:	e01b      	b.n	800ed80 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800ed48:	89fb      	ldrh	r3, [r7, #14]
 800ed4a:	2100      	movs	r1, #0
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	f001 feeb 	bl	8010b28 <ff_convert>
 800ed52:	4603      	mov	r3, r0
 800ed54:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800ed56:	89fb      	ldrh	r3, [r7, #14]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d102      	bne.n	800ed62 <get_fileinfo+0x4e>
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	61fb      	str	r3, [r7, #28]
 800ed60:	e01a      	b.n	800ed98 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800ed62:	69fb      	ldr	r3, [r7, #28]
 800ed64:	2bfe      	cmp	r3, #254	; 0xfe
 800ed66:	d902      	bls.n	800ed6e <get_fileinfo+0x5a>
 800ed68:	2300      	movs	r3, #0
 800ed6a:	61fb      	str	r3, [r7, #28]
 800ed6c:	e014      	b.n	800ed98 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800ed6e:	69fb      	ldr	r3, [r7, #28]
 800ed70:	1c5a      	adds	r2, r3, #1
 800ed72:	61fa      	str	r2, [r7, #28]
 800ed74:	89fa      	ldrh	r2, [r7, #14]
 800ed76:	b2d1      	uxtb	r1, r2
 800ed78:	683a      	ldr	r2, [r7, #0]
 800ed7a:	4413      	add	r3, r2
 800ed7c:	460a      	mov	r2, r1
 800ed7e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	691a      	ldr	r2, [r3, #16]
 800ed84:	69bb      	ldr	r3, [r7, #24]
 800ed86:	1c59      	adds	r1, r3, #1
 800ed88:	61b9      	str	r1, [r7, #24]
 800ed8a:	005b      	lsls	r3, r3, #1
 800ed8c:	4413      	add	r3, r2
 800ed8e:	881b      	ldrh	r3, [r3, #0]
 800ed90:	81fb      	strh	r3, [r7, #14]
 800ed92:	89fb      	ldrh	r3, [r7, #14]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d1d7      	bne.n	800ed48 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800ed98:	683a      	ldr	r2, [r7, #0]
 800ed9a:	69fb      	ldr	r3, [r7, #28]
 800ed9c:	4413      	add	r3, r2
 800ed9e:	3316      	adds	r3, #22
 800eda0:	2200      	movs	r2, #0
 800eda2:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800eda4:	2300      	movs	r3, #0
 800eda6:	61bb      	str	r3, [r7, #24]
 800eda8:	69bb      	ldr	r3, [r7, #24]
 800edaa:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800edac:	683a      	ldr	r2, [r7, #0]
 800edae:	69fb      	ldr	r3, [r7, #28]
 800edb0:	4413      	add	r3, r2
 800edb2:	3316      	adds	r3, #22
 800edb4:	781b      	ldrb	r3, [r3, #0]
 800edb6:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800edb8:	e04c      	b.n	800ee54 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6a1a      	ldr	r2, [r3, #32]
 800edbe:	69fb      	ldr	r3, [r7, #28]
 800edc0:	1c59      	adds	r1, r3, #1
 800edc2:	61f9      	str	r1, [r7, #28]
 800edc4:	4413      	add	r3, r2
 800edc6:	781b      	ldrb	r3, [r3, #0]
 800edc8:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800edca:	7dfb      	ldrb	r3, [r7, #23]
 800edcc:	2b20      	cmp	r3, #32
 800edce:	d100      	bne.n	800edd2 <get_fileinfo+0xbe>
 800edd0:	e040      	b.n	800ee54 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800edd2:	7dfb      	ldrb	r3, [r7, #23]
 800edd4:	2b05      	cmp	r3, #5
 800edd6:	d101      	bne.n	800eddc <get_fileinfo+0xc8>
 800edd8:	23e5      	movs	r3, #229	; 0xe5
 800edda:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800eddc:	69fb      	ldr	r3, [r7, #28]
 800edde:	2b09      	cmp	r3, #9
 800ede0:	d10f      	bne.n	800ee02 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800ede2:	89bb      	ldrh	r3, [r7, #12]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d105      	bne.n	800edf4 <get_fileinfo+0xe0>
 800ede8:	683a      	ldr	r2, [r7, #0]
 800edea:	69bb      	ldr	r3, [r7, #24]
 800edec:	4413      	add	r3, r2
 800edee:	3316      	adds	r3, #22
 800edf0:	222e      	movs	r2, #46	; 0x2e
 800edf2:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800edf4:	69bb      	ldr	r3, [r7, #24]
 800edf6:	1c5a      	adds	r2, r3, #1
 800edf8:	61ba      	str	r2, [r7, #24]
 800edfa:	683a      	ldr	r2, [r7, #0]
 800edfc:	4413      	add	r3, r2
 800edfe:	222e      	movs	r2, #46	; 0x2e
 800ee00:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800ee02:	683a      	ldr	r2, [r7, #0]
 800ee04:	69bb      	ldr	r3, [r7, #24]
 800ee06:	4413      	add	r3, r2
 800ee08:	3309      	adds	r3, #9
 800ee0a:	7dfa      	ldrb	r2, [r7, #23]
 800ee0c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800ee0e:	89bb      	ldrh	r3, [r7, #12]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d11c      	bne.n	800ee4e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800ee14:	7dfb      	ldrb	r3, [r7, #23]
 800ee16:	2b40      	cmp	r3, #64	; 0x40
 800ee18:	d913      	bls.n	800ee42 <get_fileinfo+0x12e>
 800ee1a:	7dfb      	ldrb	r3, [r7, #23]
 800ee1c:	2b5a      	cmp	r3, #90	; 0x5a
 800ee1e:	d810      	bhi.n	800ee42 <get_fileinfo+0x12e>
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	6a1b      	ldr	r3, [r3, #32]
 800ee24:	330c      	adds	r3, #12
 800ee26:	781b      	ldrb	r3, [r3, #0]
 800ee28:	461a      	mov	r2, r3
 800ee2a:	69fb      	ldr	r3, [r7, #28]
 800ee2c:	2b08      	cmp	r3, #8
 800ee2e:	d901      	bls.n	800ee34 <get_fileinfo+0x120>
 800ee30:	2310      	movs	r3, #16
 800ee32:	e000      	b.n	800ee36 <get_fileinfo+0x122>
 800ee34:	2308      	movs	r3, #8
 800ee36:	4013      	ands	r3, r2
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d002      	beq.n	800ee42 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800ee3c:	7dfb      	ldrb	r3, [r7, #23]
 800ee3e:	3320      	adds	r3, #32
 800ee40:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800ee42:	683a      	ldr	r2, [r7, #0]
 800ee44:	69bb      	ldr	r3, [r7, #24]
 800ee46:	4413      	add	r3, r2
 800ee48:	3316      	adds	r3, #22
 800ee4a:	7dfa      	ldrb	r2, [r7, #23]
 800ee4c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800ee4e:	69bb      	ldr	r3, [r7, #24]
 800ee50:	3301      	adds	r3, #1
 800ee52:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800ee54:	69fb      	ldr	r3, [r7, #28]
 800ee56:	2b0a      	cmp	r3, #10
 800ee58:	d9af      	bls.n	800edba <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800ee5a:	89bb      	ldrh	r3, [r7, #12]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d10d      	bne.n	800ee7c <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800ee60:	683a      	ldr	r2, [r7, #0]
 800ee62:	69bb      	ldr	r3, [r7, #24]
 800ee64:	4413      	add	r3, r2
 800ee66:	3316      	adds	r3, #22
 800ee68:	2200      	movs	r2, #0
 800ee6a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	6a1b      	ldr	r3, [r3, #32]
 800ee70:	330c      	adds	r3, #12
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d101      	bne.n	800ee7c <get_fileinfo+0x168>
 800ee78:	2300      	movs	r3, #0
 800ee7a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800ee7c:	683a      	ldr	r2, [r7, #0]
 800ee7e:	69bb      	ldr	r3, [r7, #24]
 800ee80:	4413      	add	r3, r2
 800ee82:	3309      	adds	r3, #9
 800ee84:	2200      	movs	r2, #0
 800ee86:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6a1b      	ldr	r3, [r3, #32]
 800ee8c:	7ada      	ldrb	r2, [r3, #11]
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	6a1b      	ldr	r3, [r3, #32]
 800ee96:	331c      	adds	r3, #28
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f7fe fa91 	bl	800d3c0 <ld_dword>
 800ee9e:	4602      	mov	r2, r0
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6a1b      	ldr	r3, [r3, #32]
 800eea8:	3316      	adds	r3, #22
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f7fe fa88 	bl	800d3c0 <ld_dword>
 800eeb0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	b29a      	uxth	r2, r3
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	80da      	strh	r2, [r3, #6]
 800eeba:	68bb      	ldr	r3, [r7, #8]
 800eebc:	0c1b      	lsrs	r3, r3, #16
 800eebe:	b29a      	uxth	r2, r3
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	809a      	strh	r2, [r3, #4]
 800eec4:	e000      	b.n	800eec8 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800eec6:	bf00      	nop
}
 800eec8:	3720      	adds	r7, #32
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd80      	pop	{r7, pc}
	...

0800eed0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b08a      	sub	sp, #40	; 0x28
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	613b      	str	r3, [r7, #16]
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	691b      	ldr	r3, [r3, #16]
 800eee6:	60fb      	str	r3, [r7, #12]
 800eee8:	2300      	movs	r3, #0
 800eeea:	617b      	str	r3, [r7, #20]
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800eef0:	69bb      	ldr	r3, [r7, #24]
 800eef2:	1c5a      	adds	r2, r3, #1
 800eef4:	61ba      	str	r2, [r7, #24]
 800eef6:	693a      	ldr	r2, [r7, #16]
 800eef8:	4413      	add	r3, r2
 800eefa:	781b      	ldrb	r3, [r3, #0]
 800eefc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800eefe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef00:	2b1f      	cmp	r3, #31
 800ef02:	d940      	bls.n	800ef86 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ef04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef06:	2b2f      	cmp	r3, #47	; 0x2f
 800ef08:	d006      	beq.n	800ef18 <create_name+0x48>
 800ef0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef0c:	2b5c      	cmp	r3, #92	; 0x5c
 800ef0e:	d110      	bne.n	800ef32 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ef10:	e002      	b.n	800ef18 <create_name+0x48>
 800ef12:	69bb      	ldr	r3, [r7, #24]
 800ef14:	3301      	adds	r3, #1
 800ef16:	61bb      	str	r3, [r7, #24]
 800ef18:	693a      	ldr	r2, [r7, #16]
 800ef1a:	69bb      	ldr	r3, [r7, #24]
 800ef1c:	4413      	add	r3, r2
 800ef1e:	781b      	ldrb	r3, [r3, #0]
 800ef20:	2b2f      	cmp	r3, #47	; 0x2f
 800ef22:	d0f6      	beq.n	800ef12 <create_name+0x42>
 800ef24:	693a      	ldr	r2, [r7, #16]
 800ef26:	69bb      	ldr	r3, [r7, #24]
 800ef28:	4413      	add	r3, r2
 800ef2a:	781b      	ldrb	r3, [r3, #0]
 800ef2c:	2b5c      	cmp	r3, #92	; 0x5c
 800ef2e:	d0f0      	beq.n	800ef12 <create_name+0x42>
			break;
 800ef30:	e02a      	b.n	800ef88 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	2bfe      	cmp	r3, #254	; 0xfe
 800ef36:	d901      	bls.n	800ef3c <create_name+0x6c>
 800ef38:	2306      	movs	r3, #6
 800ef3a:	e17d      	b.n	800f238 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ef3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef3e:	b2db      	uxtb	r3, r3
 800ef40:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ef42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef44:	2101      	movs	r1, #1
 800ef46:	4618      	mov	r0, r3
 800ef48:	f001 fdee 	bl	8010b28 <ff_convert>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ef50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d101      	bne.n	800ef5a <create_name+0x8a>
 800ef56:	2306      	movs	r3, #6
 800ef58:	e16e      	b.n	800f238 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ef5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef5c:	2b7f      	cmp	r3, #127	; 0x7f
 800ef5e:	d809      	bhi.n	800ef74 <create_name+0xa4>
 800ef60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef62:	4619      	mov	r1, r3
 800ef64:	488d      	ldr	r0, [pc, #564]	; (800f19c <create_name+0x2cc>)
 800ef66:	f7fe faf8 	bl	800d55a <chk_chr>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d001      	beq.n	800ef74 <create_name+0xa4>
 800ef70:	2306      	movs	r3, #6
 800ef72:	e161      	b.n	800f238 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800ef74:	697b      	ldr	r3, [r7, #20]
 800ef76:	1c5a      	adds	r2, r3, #1
 800ef78:	617a      	str	r2, [r7, #20]
 800ef7a:	005b      	lsls	r3, r3, #1
 800ef7c:	68fa      	ldr	r2, [r7, #12]
 800ef7e:	4413      	add	r3, r2
 800ef80:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ef82:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ef84:	e7b4      	b.n	800eef0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ef86:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ef88:	693a      	ldr	r2, [r7, #16]
 800ef8a:	69bb      	ldr	r3, [r7, #24]
 800ef8c:	441a      	add	r2, r3
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ef92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef94:	2b1f      	cmp	r3, #31
 800ef96:	d801      	bhi.n	800ef9c <create_name+0xcc>
 800ef98:	2304      	movs	r3, #4
 800ef9a:	e000      	b.n	800ef9e <create_name+0xce>
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800efa2:	e011      	b.n	800efc8 <create_name+0xf8>
		w = lfn[di - 1];
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800efaa:	3b01      	subs	r3, #1
 800efac:	005b      	lsls	r3, r3, #1
 800efae:	68fa      	ldr	r2, [r7, #12]
 800efb0:	4413      	add	r3, r2
 800efb2:	881b      	ldrh	r3, [r3, #0]
 800efb4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800efb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efb8:	2b20      	cmp	r3, #32
 800efba:	d002      	beq.n	800efc2 <create_name+0xf2>
 800efbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efbe:	2b2e      	cmp	r3, #46	; 0x2e
 800efc0:	d106      	bne.n	800efd0 <create_name+0x100>
		di--;
 800efc2:	697b      	ldr	r3, [r7, #20]
 800efc4:	3b01      	subs	r3, #1
 800efc6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d1ea      	bne.n	800efa4 <create_name+0xd4>
 800efce:	e000      	b.n	800efd2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800efd0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800efd2:	697b      	ldr	r3, [r7, #20]
 800efd4:	005b      	lsls	r3, r3, #1
 800efd6:	68fa      	ldr	r2, [r7, #12]
 800efd8:	4413      	add	r3, r2
 800efda:	2200      	movs	r2, #0
 800efdc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d101      	bne.n	800efe8 <create_name+0x118>
 800efe4:	2306      	movs	r3, #6
 800efe6:	e127      	b.n	800f238 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	3324      	adds	r3, #36	; 0x24
 800efec:	220b      	movs	r2, #11
 800efee:	2120      	movs	r1, #32
 800eff0:	4618      	mov	r0, r3
 800eff2:	f7fe fa70 	bl	800d4d6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800eff6:	2300      	movs	r3, #0
 800eff8:	61bb      	str	r3, [r7, #24]
 800effa:	e002      	b.n	800f002 <create_name+0x132>
 800effc:	69bb      	ldr	r3, [r7, #24]
 800effe:	3301      	adds	r3, #1
 800f000:	61bb      	str	r3, [r7, #24]
 800f002:	69bb      	ldr	r3, [r7, #24]
 800f004:	005b      	lsls	r3, r3, #1
 800f006:	68fa      	ldr	r2, [r7, #12]
 800f008:	4413      	add	r3, r2
 800f00a:	881b      	ldrh	r3, [r3, #0]
 800f00c:	2b20      	cmp	r3, #32
 800f00e:	d0f5      	beq.n	800effc <create_name+0x12c>
 800f010:	69bb      	ldr	r3, [r7, #24]
 800f012:	005b      	lsls	r3, r3, #1
 800f014:	68fa      	ldr	r2, [r7, #12]
 800f016:	4413      	add	r3, r2
 800f018:	881b      	ldrh	r3, [r3, #0]
 800f01a:	2b2e      	cmp	r3, #46	; 0x2e
 800f01c:	d0ee      	beq.n	800effc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f01e:	69bb      	ldr	r3, [r7, #24]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d009      	beq.n	800f038 <create_name+0x168>
 800f024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f028:	f043 0303 	orr.w	r3, r3, #3
 800f02c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f030:	e002      	b.n	800f038 <create_name+0x168>
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	3b01      	subs	r3, #1
 800f036:	617b      	str	r3, [r7, #20]
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d009      	beq.n	800f052 <create_name+0x182>
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f044:	3b01      	subs	r3, #1
 800f046:	005b      	lsls	r3, r3, #1
 800f048:	68fa      	ldr	r2, [r7, #12]
 800f04a:	4413      	add	r3, r2
 800f04c:	881b      	ldrh	r3, [r3, #0]
 800f04e:	2b2e      	cmp	r3, #46	; 0x2e
 800f050:	d1ef      	bne.n	800f032 <create_name+0x162>

	i = b = 0; ni = 8;
 800f052:	2300      	movs	r3, #0
 800f054:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f058:	2300      	movs	r3, #0
 800f05a:	623b      	str	r3, [r7, #32]
 800f05c:	2308      	movs	r3, #8
 800f05e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f060:	69bb      	ldr	r3, [r7, #24]
 800f062:	1c5a      	adds	r2, r3, #1
 800f064:	61ba      	str	r2, [r7, #24]
 800f066:	005b      	lsls	r3, r3, #1
 800f068:	68fa      	ldr	r2, [r7, #12]
 800f06a:	4413      	add	r3, r2
 800f06c:	881b      	ldrh	r3, [r3, #0]
 800f06e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f070:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f072:	2b00      	cmp	r3, #0
 800f074:	f000 8090 	beq.w	800f198 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f078:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f07a:	2b20      	cmp	r3, #32
 800f07c:	d006      	beq.n	800f08c <create_name+0x1bc>
 800f07e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f080:	2b2e      	cmp	r3, #46	; 0x2e
 800f082:	d10a      	bne.n	800f09a <create_name+0x1ca>
 800f084:	69ba      	ldr	r2, [r7, #24]
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	429a      	cmp	r2, r3
 800f08a:	d006      	beq.n	800f09a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800f08c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f090:	f043 0303 	orr.w	r3, r3, #3
 800f094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f098:	e07d      	b.n	800f196 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f09a:	6a3a      	ldr	r2, [r7, #32]
 800f09c:	69fb      	ldr	r3, [r7, #28]
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	d203      	bcs.n	800f0aa <create_name+0x1da>
 800f0a2:	69ba      	ldr	r2, [r7, #24]
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d123      	bne.n	800f0f2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800f0aa:	69fb      	ldr	r3, [r7, #28]
 800f0ac:	2b0b      	cmp	r3, #11
 800f0ae:	d106      	bne.n	800f0be <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f0b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0b4:	f043 0303 	orr.w	r3, r3, #3
 800f0b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f0bc:	e075      	b.n	800f1aa <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f0be:	69ba      	ldr	r2, [r7, #24]
 800f0c0:	697b      	ldr	r3, [r7, #20]
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d005      	beq.n	800f0d2 <create_name+0x202>
 800f0c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0ca:	f043 0303 	orr.w	r3, r3, #3
 800f0ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f0d2:	69ba      	ldr	r2, [r7, #24]
 800f0d4:	697b      	ldr	r3, [r7, #20]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d866      	bhi.n	800f1a8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f0da:	697b      	ldr	r3, [r7, #20]
 800f0dc:	61bb      	str	r3, [r7, #24]
 800f0de:	2308      	movs	r3, #8
 800f0e0:	623b      	str	r3, [r7, #32]
 800f0e2:	230b      	movs	r3, #11
 800f0e4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f0e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f0ea:	009b      	lsls	r3, r3, #2
 800f0ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f0f0:	e051      	b.n	800f196 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f0f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0f4:	2b7f      	cmp	r3, #127	; 0x7f
 800f0f6:	d914      	bls.n	800f122 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f0f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0fa:	2100      	movs	r1, #0
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f001 fd13 	bl	8010b28 <ff_convert>
 800f102:	4603      	mov	r3, r0
 800f104:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d004      	beq.n	800f116 <create_name+0x246>
 800f10c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f10e:	3b80      	subs	r3, #128	; 0x80
 800f110:	4a23      	ldr	r2, [pc, #140]	; (800f1a0 <create_name+0x2d0>)
 800f112:	5cd3      	ldrb	r3, [r2, r3]
 800f114:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f116:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f11a:	f043 0302 	orr.w	r3, r3, #2
 800f11e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f122:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f124:	2b00      	cmp	r3, #0
 800f126:	d007      	beq.n	800f138 <create_name+0x268>
 800f128:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f12a:	4619      	mov	r1, r3
 800f12c:	481d      	ldr	r0, [pc, #116]	; (800f1a4 <create_name+0x2d4>)
 800f12e:	f7fe fa14 	bl	800d55a <chk_chr>
 800f132:	4603      	mov	r3, r0
 800f134:	2b00      	cmp	r3, #0
 800f136:	d008      	beq.n	800f14a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f138:	235f      	movs	r3, #95	; 0x5f
 800f13a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f13c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f140:	f043 0303 	orr.w	r3, r3, #3
 800f144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f148:	e01b      	b.n	800f182 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f14a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f14c:	2b40      	cmp	r3, #64	; 0x40
 800f14e:	d909      	bls.n	800f164 <create_name+0x294>
 800f150:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f152:	2b5a      	cmp	r3, #90	; 0x5a
 800f154:	d806      	bhi.n	800f164 <create_name+0x294>
					b |= 2;
 800f156:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f15a:	f043 0302 	orr.w	r3, r3, #2
 800f15e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f162:	e00e      	b.n	800f182 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f164:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f166:	2b60      	cmp	r3, #96	; 0x60
 800f168:	d90b      	bls.n	800f182 <create_name+0x2b2>
 800f16a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f16c:	2b7a      	cmp	r3, #122	; 0x7a
 800f16e:	d808      	bhi.n	800f182 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f170:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f174:	f043 0301 	orr.w	r3, r3, #1
 800f178:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f17c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f17e:	3b20      	subs	r3, #32
 800f180:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f182:	6a3b      	ldr	r3, [r7, #32]
 800f184:	1c5a      	adds	r2, r3, #1
 800f186:	623a      	str	r2, [r7, #32]
 800f188:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f18a:	b2d1      	uxtb	r1, r2
 800f18c:	687a      	ldr	r2, [r7, #4]
 800f18e:	4413      	add	r3, r2
 800f190:	460a      	mov	r2, r1
 800f192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800f196:	e763      	b.n	800f060 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f198:	bf00      	nop
 800f19a:	e006      	b.n	800f1aa <create_name+0x2da>
 800f19c:	08011d64 	.word	0x08011d64
 800f1a0:	08011dcc 	.word	0x08011dcc
 800f1a4:	08011d70 	.word	0x08011d70
			if (si > di) break;			/* No extension */
 800f1a8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f1b0:	2be5      	cmp	r3, #229	; 0xe5
 800f1b2:	d103      	bne.n	800f1bc <create_name+0x2ec>
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2205      	movs	r2, #5
 800f1b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800f1bc:	69fb      	ldr	r3, [r7, #28]
 800f1be:	2b08      	cmp	r3, #8
 800f1c0:	d104      	bne.n	800f1cc <create_name+0x2fc>
 800f1c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f1c6:	009b      	lsls	r3, r3, #2
 800f1c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f1cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f1d0:	f003 030c 	and.w	r3, r3, #12
 800f1d4:	2b0c      	cmp	r3, #12
 800f1d6:	d005      	beq.n	800f1e4 <create_name+0x314>
 800f1d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f1dc:	f003 0303 	and.w	r3, r3, #3
 800f1e0:	2b03      	cmp	r3, #3
 800f1e2:	d105      	bne.n	800f1f0 <create_name+0x320>
 800f1e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1e8:	f043 0302 	orr.w	r3, r3, #2
 800f1ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f1f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1f4:	f003 0302 	and.w	r3, r3, #2
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d117      	bne.n	800f22c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f1fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f200:	f003 0303 	and.w	r3, r3, #3
 800f204:	2b01      	cmp	r3, #1
 800f206:	d105      	bne.n	800f214 <create_name+0x344>
 800f208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f20c:	f043 0310 	orr.w	r3, r3, #16
 800f210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f214:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f218:	f003 030c 	and.w	r3, r3, #12
 800f21c:	2b04      	cmp	r3, #4
 800f21e:	d105      	bne.n	800f22c <create_name+0x35c>
 800f220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f224:	f043 0308 	orr.w	r3, r3, #8
 800f228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f232:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800f236:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f238:	4618      	mov	r0, r3
 800f23a:	3728      	adds	r7, #40	; 0x28
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}

0800f240 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b086      	sub	sp, #24
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
 800f248:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f24e:	693b      	ldr	r3, [r7, #16]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f254:	e002      	b.n	800f25c <follow_path+0x1c>
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	3301      	adds	r3, #1
 800f25a:	603b      	str	r3, [r7, #0]
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	781b      	ldrb	r3, [r3, #0]
 800f260:	2b2f      	cmp	r3, #47	; 0x2f
 800f262:	d0f8      	beq.n	800f256 <follow_path+0x16>
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	781b      	ldrb	r3, [r3, #0]
 800f268:	2b5c      	cmp	r3, #92	; 0x5c
 800f26a:	d0f4      	beq.n	800f256 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f26c:	693b      	ldr	r3, [r7, #16]
 800f26e:	2200      	movs	r2, #0
 800f270:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	781b      	ldrb	r3, [r3, #0]
 800f276:	2b1f      	cmp	r3, #31
 800f278:	d80a      	bhi.n	800f290 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	2280      	movs	r2, #128	; 0x80
 800f27e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f282:	2100      	movs	r1, #0
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f7fe ff15 	bl	800e0b4 <dir_sdi>
 800f28a:	4603      	mov	r3, r0
 800f28c:	75fb      	strb	r3, [r7, #23]
 800f28e:	e048      	b.n	800f322 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f290:	463b      	mov	r3, r7
 800f292:	4619      	mov	r1, r3
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f7ff fe1b 	bl	800eed0 <create_name>
 800f29a:	4603      	mov	r3, r0
 800f29c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f29e:	7dfb      	ldrb	r3, [r7, #23]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d139      	bne.n	800f318 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f7ff fb7d 	bl	800e9a4 <dir_find>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f2b4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f2b6:	7dfb      	ldrb	r3, [r7, #23]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d00a      	beq.n	800f2d2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f2bc:	7dfb      	ldrb	r3, [r7, #23]
 800f2be:	2b04      	cmp	r3, #4
 800f2c0:	d12c      	bne.n	800f31c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f2c2:	7afb      	ldrb	r3, [r7, #11]
 800f2c4:	f003 0304 	and.w	r3, r3, #4
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d127      	bne.n	800f31c <follow_path+0xdc>
 800f2cc:	2305      	movs	r3, #5
 800f2ce:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f2d0:	e024      	b.n	800f31c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f2d2:	7afb      	ldrb	r3, [r7, #11]
 800f2d4:	f003 0304 	and.w	r3, r3, #4
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d121      	bne.n	800f320 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f2dc:	693b      	ldr	r3, [r7, #16]
 800f2de:	799b      	ldrb	r3, [r3, #6]
 800f2e0:	f003 0310 	and.w	r3, r3, #16
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d102      	bne.n	800f2ee <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f2e8:	2305      	movs	r3, #5
 800f2ea:	75fb      	strb	r3, [r7, #23]
 800f2ec:	e019      	b.n	800f322 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	695b      	ldr	r3, [r3, #20]
 800f2f8:	68fa      	ldr	r2, [r7, #12]
 800f2fa:	8992      	ldrh	r2, [r2, #12]
 800f2fc:	fbb3 f0f2 	udiv	r0, r3, r2
 800f300:	fb00 f202 	mul.w	r2, r0, r2
 800f304:	1a9b      	subs	r3, r3, r2
 800f306:	440b      	add	r3, r1
 800f308:	4619      	mov	r1, r3
 800f30a:	68f8      	ldr	r0, [r7, #12]
 800f30c:	f7ff f878 	bl	800e400 <ld_clust>
 800f310:	4602      	mov	r2, r0
 800f312:	693b      	ldr	r3, [r7, #16]
 800f314:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f316:	e7bb      	b.n	800f290 <follow_path+0x50>
			if (res != FR_OK) break;
 800f318:	bf00      	nop
 800f31a:	e002      	b.n	800f322 <follow_path+0xe2>
				break;
 800f31c:	bf00      	nop
 800f31e:	e000      	b.n	800f322 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f320:	bf00      	nop
			}
		}
	}

	return res;
 800f322:	7dfb      	ldrb	r3, [r7, #23]
}
 800f324:	4618      	mov	r0, r3
 800f326:	3718      	adds	r7, #24
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}

0800f32c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f32c:	b480      	push	{r7}
 800f32e:	b087      	sub	sp, #28
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f334:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f338:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d031      	beq.n	800f3a6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	617b      	str	r3, [r7, #20]
 800f348:	e002      	b.n	800f350 <get_ldnumber+0x24>
 800f34a:	697b      	ldr	r3, [r7, #20]
 800f34c:	3301      	adds	r3, #1
 800f34e:	617b      	str	r3, [r7, #20]
 800f350:	697b      	ldr	r3, [r7, #20]
 800f352:	781b      	ldrb	r3, [r3, #0]
 800f354:	2b1f      	cmp	r3, #31
 800f356:	d903      	bls.n	800f360 <get_ldnumber+0x34>
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	781b      	ldrb	r3, [r3, #0]
 800f35c:	2b3a      	cmp	r3, #58	; 0x3a
 800f35e:	d1f4      	bne.n	800f34a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f360:	697b      	ldr	r3, [r7, #20]
 800f362:	781b      	ldrb	r3, [r3, #0]
 800f364:	2b3a      	cmp	r3, #58	; 0x3a
 800f366:	d11c      	bne.n	800f3a2 <get_ldnumber+0x76>
			tp = *path;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	1c5a      	adds	r2, r3, #1
 800f372:	60fa      	str	r2, [r7, #12]
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	3b30      	subs	r3, #48	; 0x30
 800f378:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	2b09      	cmp	r3, #9
 800f37e:	d80e      	bhi.n	800f39e <get_ldnumber+0x72>
 800f380:	68fa      	ldr	r2, [r7, #12]
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	429a      	cmp	r2, r3
 800f386:	d10a      	bne.n	800f39e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d107      	bne.n	800f39e <get_ldnumber+0x72>
					vol = (int)i;
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	3301      	adds	r3, #1
 800f396:	617b      	str	r3, [r7, #20]
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	697a      	ldr	r2, [r7, #20]
 800f39c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f39e:	693b      	ldr	r3, [r7, #16]
 800f3a0:	e002      	b.n	800f3a8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f3a6:	693b      	ldr	r3, [r7, #16]
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	371c      	adds	r7, #28
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b2:	4770      	bx	lr

0800f3b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b082      	sub	sp, #8
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
 800f3bc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	70da      	strb	r2, [r3, #3]
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f3ca:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f3cc:	6839      	ldr	r1, [r7, #0]
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f7fe fa8e 	bl	800d8f0 <move_window>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d001      	beq.n	800f3de <check_fs+0x2a>
 800f3da:	2304      	movs	r3, #4
 800f3dc:	e038      	b.n	800f450 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	3338      	adds	r3, #56	; 0x38
 800f3e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f7fd ffd2 	bl	800d390 <ld_word>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	461a      	mov	r2, r3
 800f3f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f3f4:	429a      	cmp	r2, r3
 800f3f6:	d001      	beq.n	800f3fc <check_fs+0x48>
 800f3f8:	2303      	movs	r3, #3
 800f3fa:	e029      	b.n	800f450 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f402:	2be9      	cmp	r3, #233	; 0xe9
 800f404:	d009      	beq.n	800f41a <check_fs+0x66>
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f40c:	2beb      	cmp	r3, #235	; 0xeb
 800f40e:	d11e      	bne.n	800f44e <check_fs+0x9a>
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f416:	2b90      	cmp	r3, #144	; 0x90
 800f418:	d119      	bne.n	800f44e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	3338      	adds	r3, #56	; 0x38
 800f41e:	3336      	adds	r3, #54	; 0x36
 800f420:	4618      	mov	r0, r3
 800f422:	f7fd ffcd 	bl	800d3c0 <ld_dword>
 800f426:	4603      	mov	r3, r0
 800f428:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f42c:	4a0a      	ldr	r2, [pc, #40]	; (800f458 <check_fs+0xa4>)
 800f42e:	4293      	cmp	r3, r2
 800f430:	d101      	bne.n	800f436 <check_fs+0x82>
 800f432:	2300      	movs	r3, #0
 800f434:	e00c      	b.n	800f450 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	3338      	adds	r3, #56	; 0x38
 800f43a:	3352      	adds	r3, #82	; 0x52
 800f43c:	4618      	mov	r0, r3
 800f43e:	f7fd ffbf 	bl	800d3c0 <ld_dword>
 800f442:	4603      	mov	r3, r0
 800f444:	4a05      	ldr	r2, [pc, #20]	; (800f45c <check_fs+0xa8>)
 800f446:	4293      	cmp	r3, r2
 800f448:	d101      	bne.n	800f44e <check_fs+0x9a>
 800f44a:	2300      	movs	r3, #0
 800f44c:	e000      	b.n	800f450 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f44e:	2302      	movs	r3, #2
}
 800f450:	4618      	mov	r0, r3
 800f452:	3708      	adds	r7, #8
 800f454:	46bd      	mov	sp, r7
 800f456:	bd80      	pop	{r7, pc}
 800f458:	00544146 	.word	0x00544146
 800f45c:	33544146 	.word	0x33544146

0800f460 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b096      	sub	sp, #88	; 0x58
 800f464:	af00      	add	r7, sp, #0
 800f466:	60f8      	str	r0, [r7, #12]
 800f468:	60b9      	str	r1, [r7, #8]
 800f46a:	4613      	mov	r3, r2
 800f46c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	2200      	movs	r2, #0
 800f472:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f474:	68f8      	ldr	r0, [r7, #12]
 800f476:	f7ff ff59 	bl	800f32c <get_ldnumber>
 800f47a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f47c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f47e:	2b00      	cmp	r3, #0
 800f480:	da01      	bge.n	800f486 <find_volume+0x26>
 800f482:	230b      	movs	r3, #11
 800f484:	e265      	b.n	800f952 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f486:	4a9f      	ldr	r2, [pc, #636]	; (800f704 <find_volume+0x2a4>)
 800f488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f48a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f48e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f492:	2b00      	cmp	r3, #0
 800f494:	d101      	bne.n	800f49a <find_volume+0x3a>
 800f496:	230c      	movs	r3, #12
 800f498:	e25b      	b.n	800f952 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f49e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f4a0:	79fb      	ldrb	r3, [r7, #7]
 800f4a2:	f023 0301 	bic.w	r3, r3, #1
 800f4a6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4aa:	781b      	ldrb	r3, [r3, #0]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d01a      	beq.n	800f4e6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4b2:	785b      	ldrb	r3, [r3, #1]
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f7fd fecd 	bl	800d254 <disk_status>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f4c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f4c4:	f003 0301 	and.w	r3, r3, #1
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d10c      	bne.n	800f4e6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f4cc:	79fb      	ldrb	r3, [r7, #7]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d007      	beq.n	800f4e2 <find_volume+0x82>
 800f4d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f4d6:	f003 0304 	and.w	r3, r3, #4
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d001      	beq.n	800f4e2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f4de:	230a      	movs	r3, #10
 800f4e0:	e237      	b.n	800f952 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	e235      	b.n	800f952 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f4ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4ee:	b2da      	uxtb	r2, r3
 800f4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4f2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4f6:	785b      	ldrb	r3, [r3, #1]
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f7fd fec5 	bl	800d288 <disk_initialize>
 800f4fe:	4603      	mov	r3, r0
 800f500:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f504:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f508:	f003 0301 	and.w	r3, r3, #1
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d001      	beq.n	800f514 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f510:	2303      	movs	r3, #3
 800f512:	e21e      	b.n	800f952 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f514:	79fb      	ldrb	r3, [r7, #7]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d007      	beq.n	800f52a <find_volume+0xca>
 800f51a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f51e:	f003 0304 	and.w	r3, r3, #4
 800f522:	2b00      	cmp	r3, #0
 800f524:	d001      	beq.n	800f52a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f526:	230a      	movs	r3, #10
 800f528:	e213      	b.n	800f952 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f52c:	7858      	ldrb	r0, [r3, #1]
 800f52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f530:	330c      	adds	r3, #12
 800f532:	461a      	mov	r2, r3
 800f534:	2102      	movs	r1, #2
 800f536:	f7fd ff0d 	bl	800d354 <disk_ioctl>
 800f53a:	4603      	mov	r3, r0
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d001      	beq.n	800f544 <find_volume+0xe4>
 800f540:	2301      	movs	r3, #1
 800f542:	e206      	b.n	800f952 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f546:	899b      	ldrh	r3, [r3, #12]
 800f548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f54c:	d80d      	bhi.n	800f56a <find_volume+0x10a>
 800f54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f550:	899b      	ldrh	r3, [r3, #12]
 800f552:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f556:	d308      	bcc.n	800f56a <find_volume+0x10a>
 800f558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f55a:	899b      	ldrh	r3, [r3, #12]
 800f55c:	461a      	mov	r2, r3
 800f55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f560:	899b      	ldrh	r3, [r3, #12]
 800f562:	3b01      	subs	r3, #1
 800f564:	4013      	ands	r3, r2
 800f566:	2b00      	cmp	r3, #0
 800f568:	d001      	beq.n	800f56e <find_volume+0x10e>
 800f56a:	2301      	movs	r3, #1
 800f56c:	e1f1      	b.n	800f952 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f56e:	2300      	movs	r3, #0
 800f570:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f572:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f574:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f576:	f7ff ff1d 	bl	800f3b4 <check_fs>
 800f57a:	4603      	mov	r3, r0
 800f57c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f580:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f584:	2b02      	cmp	r3, #2
 800f586:	d149      	bne.n	800f61c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f588:	2300      	movs	r3, #0
 800f58a:	643b      	str	r3, [r7, #64]	; 0x40
 800f58c:	e01e      	b.n	800f5cc <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f590:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f596:	011b      	lsls	r3, r3, #4
 800f598:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f59c:	4413      	add	r3, r2
 800f59e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5a2:	3304      	adds	r3, #4
 800f5a4:	781b      	ldrb	r3, [r3, #0]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d006      	beq.n	800f5b8 <find_volume+0x158>
 800f5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ac:	3308      	adds	r3, #8
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7fd ff06 	bl	800d3c0 <ld_dword>
 800f5b4:	4602      	mov	r2, r0
 800f5b6:	e000      	b.n	800f5ba <find_volume+0x15a>
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5bc:	009b      	lsls	r3, r3, #2
 800f5be:	3358      	adds	r3, #88	; 0x58
 800f5c0:	443b      	add	r3, r7
 800f5c2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f5c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5c8:	3301      	adds	r3, #1
 800f5ca:	643b      	str	r3, [r7, #64]	; 0x40
 800f5cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5ce:	2b03      	cmp	r3, #3
 800f5d0:	d9dd      	bls.n	800f58e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f5d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d002      	beq.n	800f5e2 <find_volume+0x182>
 800f5dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5de:	3b01      	subs	r3, #1
 800f5e0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f5e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5e4:	009b      	lsls	r3, r3, #2
 800f5e6:	3358      	adds	r3, #88	; 0x58
 800f5e8:	443b      	add	r3, r7
 800f5ea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f5ee:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f5f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d005      	beq.n	800f602 <find_volume+0x1a2>
 800f5f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f5f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f5fa:	f7ff fedb 	bl	800f3b4 <check_fs>
 800f5fe:	4603      	mov	r3, r0
 800f600:	e000      	b.n	800f604 <find_volume+0x1a4>
 800f602:	2303      	movs	r3, #3
 800f604:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f608:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f60c:	2b01      	cmp	r3, #1
 800f60e:	d905      	bls.n	800f61c <find_volume+0x1bc>
 800f610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f612:	3301      	adds	r3, #1
 800f614:	643b      	str	r3, [r7, #64]	; 0x40
 800f616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f618:	2b03      	cmp	r3, #3
 800f61a:	d9e2      	bls.n	800f5e2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f61c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f620:	2b04      	cmp	r3, #4
 800f622:	d101      	bne.n	800f628 <find_volume+0x1c8>
 800f624:	2301      	movs	r3, #1
 800f626:	e194      	b.n	800f952 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f628:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f62c:	2b01      	cmp	r3, #1
 800f62e:	d901      	bls.n	800f634 <find_volume+0x1d4>
 800f630:	230d      	movs	r3, #13
 800f632:	e18e      	b.n	800f952 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f636:	3338      	adds	r3, #56	; 0x38
 800f638:	330b      	adds	r3, #11
 800f63a:	4618      	mov	r0, r3
 800f63c:	f7fd fea8 	bl	800d390 <ld_word>
 800f640:	4603      	mov	r3, r0
 800f642:	461a      	mov	r2, r3
 800f644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f646:	899b      	ldrh	r3, [r3, #12]
 800f648:	429a      	cmp	r2, r3
 800f64a:	d001      	beq.n	800f650 <find_volume+0x1f0>
 800f64c:	230d      	movs	r3, #13
 800f64e:	e180      	b.n	800f952 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f652:	3338      	adds	r3, #56	; 0x38
 800f654:	3316      	adds	r3, #22
 800f656:	4618      	mov	r0, r3
 800f658:	f7fd fe9a 	bl	800d390 <ld_word>
 800f65c:	4603      	mov	r3, r0
 800f65e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f662:	2b00      	cmp	r3, #0
 800f664:	d106      	bne.n	800f674 <find_volume+0x214>
 800f666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f668:	3338      	adds	r3, #56	; 0x38
 800f66a:	3324      	adds	r3, #36	; 0x24
 800f66c:	4618      	mov	r0, r3
 800f66e:	f7fd fea7 	bl	800d3c0 <ld_dword>
 800f672:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f676:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f678:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f67c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f682:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f686:	789b      	ldrb	r3, [r3, #2]
 800f688:	2b01      	cmp	r3, #1
 800f68a:	d005      	beq.n	800f698 <find_volume+0x238>
 800f68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f68e:	789b      	ldrb	r3, [r3, #2]
 800f690:	2b02      	cmp	r3, #2
 800f692:	d001      	beq.n	800f698 <find_volume+0x238>
 800f694:	230d      	movs	r3, #13
 800f696:	e15c      	b.n	800f952 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f69a:	789b      	ldrb	r3, [r3, #2]
 800f69c:	461a      	mov	r2, r3
 800f69e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6a0:	fb02 f303 	mul.w	r3, r2, r3
 800f6a4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f6ac:	b29a      	uxth	r2, r3
 800f6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b4:	895b      	ldrh	r3, [r3, #10]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d008      	beq.n	800f6cc <find_volume+0x26c>
 800f6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6bc:	895b      	ldrh	r3, [r3, #10]
 800f6be:	461a      	mov	r2, r3
 800f6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6c2:	895b      	ldrh	r3, [r3, #10]
 800f6c4:	3b01      	subs	r3, #1
 800f6c6:	4013      	ands	r3, r2
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d001      	beq.n	800f6d0 <find_volume+0x270>
 800f6cc:	230d      	movs	r3, #13
 800f6ce:	e140      	b.n	800f952 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6d2:	3338      	adds	r3, #56	; 0x38
 800f6d4:	3311      	adds	r3, #17
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f7fd fe5a 	bl	800d390 <ld_word>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	461a      	mov	r2, r3
 800f6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e6:	891b      	ldrh	r3, [r3, #8]
 800f6e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f6ea:	8992      	ldrh	r2, [r2, #12]
 800f6ec:	0952      	lsrs	r2, r2, #5
 800f6ee:	b292      	uxth	r2, r2
 800f6f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800f6f4:	fb01 f202 	mul.w	r2, r1, r2
 800f6f8:	1a9b      	subs	r3, r3, r2
 800f6fa:	b29b      	uxth	r3, r3
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d003      	beq.n	800f708 <find_volume+0x2a8>
 800f700:	230d      	movs	r3, #13
 800f702:	e126      	b.n	800f952 <find_volume+0x4f2>
 800f704:	20002cd4 	.word	0x20002cd4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f70a:	3338      	adds	r3, #56	; 0x38
 800f70c:	3313      	adds	r3, #19
 800f70e:	4618      	mov	r0, r3
 800f710:	f7fd fe3e 	bl	800d390 <ld_word>
 800f714:	4603      	mov	r3, r0
 800f716:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d106      	bne.n	800f72c <find_volume+0x2cc>
 800f71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f720:	3338      	adds	r3, #56	; 0x38
 800f722:	3320      	adds	r3, #32
 800f724:	4618      	mov	r0, r3
 800f726:	f7fd fe4b 	bl	800d3c0 <ld_dword>
 800f72a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f72e:	3338      	adds	r3, #56	; 0x38
 800f730:	330e      	adds	r3, #14
 800f732:	4618      	mov	r0, r3
 800f734:	f7fd fe2c 	bl	800d390 <ld_word>
 800f738:	4603      	mov	r3, r0
 800f73a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f73c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d101      	bne.n	800f746 <find_volume+0x2e6>
 800f742:	230d      	movs	r3, #13
 800f744:	e105      	b.n	800f952 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f746:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f74a:	4413      	add	r3, r2
 800f74c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f74e:	8911      	ldrh	r1, [r2, #8]
 800f750:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f752:	8992      	ldrh	r2, [r2, #12]
 800f754:	0952      	lsrs	r2, r2, #5
 800f756:	b292      	uxth	r2, r2
 800f758:	fbb1 f2f2 	udiv	r2, r1, r2
 800f75c:	b292      	uxth	r2, r2
 800f75e:	4413      	add	r3, r2
 800f760:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f762:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f766:	429a      	cmp	r2, r3
 800f768:	d201      	bcs.n	800f76e <find_volume+0x30e>
 800f76a:	230d      	movs	r3, #13
 800f76c:	e0f1      	b.n	800f952 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f76e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f772:	1ad3      	subs	r3, r2, r3
 800f774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f776:	8952      	ldrh	r2, [r2, #10]
 800f778:	fbb3 f3f2 	udiv	r3, r3, r2
 800f77c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f780:	2b00      	cmp	r3, #0
 800f782:	d101      	bne.n	800f788 <find_volume+0x328>
 800f784:	230d      	movs	r3, #13
 800f786:	e0e4      	b.n	800f952 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800f788:	2303      	movs	r3, #3
 800f78a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f790:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f794:	4293      	cmp	r3, r2
 800f796:	d802      	bhi.n	800f79e <find_volume+0x33e>
 800f798:	2302      	movs	r3, #2
 800f79a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f7a4:	4293      	cmp	r3, r2
 800f7a6:	d802      	bhi.n	800f7ae <find_volume+0x34e>
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b0:	1c9a      	adds	r2, r3, #2
 800f7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7b4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800f7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f7ba:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f7bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f7be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7c0:	441a      	add	r2, r3
 800f7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800f7c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ca:	441a      	add	r2, r3
 800f7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ce:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800f7d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f7d4:	2b03      	cmp	r3, #3
 800f7d6:	d11e      	bne.n	800f816 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7da:	3338      	adds	r3, #56	; 0x38
 800f7dc:	332a      	adds	r3, #42	; 0x2a
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f7fd fdd6 	bl	800d390 <ld_word>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d001      	beq.n	800f7ee <find_volume+0x38e>
 800f7ea:	230d      	movs	r3, #13
 800f7ec:	e0b1      	b.n	800f952 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7f0:	891b      	ldrh	r3, [r3, #8]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d001      	beq.n	800f7fa <find_volume+0x39a>
 800f7f6:	230d      	movs	r3, #13
 800f7f8:	e0ab      	b.n	800f952 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7fc:	3338      	adds	r3, #56	; 0x38
 800f7fe:	332c      	adds	r3, #44	; 0x2c
 800f800:	4618      	mov	r0, r3
 800f802:	f7fd fddd 	bl	800d3c0 <ld_dword>
 800f806:	4602      	mov	r2, r0
 800f808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f80a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f80e:	69db      	ldr	r3, [r3, #28]
 800f810:	009b      	lsls	r3, r3, #2
 800f812:	647b      	str	r3, [r7, #68]	; 0x44
 800f814:	e01f      	b.n	800f856 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f818:	891b      	ldrh	r3, [r3, #8]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d101      	bne.n	800f822 <find_volume+0x3c2>
 800f81e:	230d      	movs	r3, #13
 800f820:	e097      	b.n	800f952 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f828:	441a      	add	r2, r3
 800f82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f82c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f82e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f832:	2b02      	cmp	r3, #2
 800f834:	d103      	bne.n	800f83e <find_volume+0x3de>
 800f836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f838:	69db      	ldr	r3, [r3, #28]
 800f83a:	005b      	lsls	r3, r3, #1
 800f83c:	e00a      	b.n	800f854 <find_volume+0x3f4>
 800f83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f840:	69da      	ldr	r2, [r3, #28]
 800f842:	4613      	mov	r3, r2
 800f844:	005b      	lsls	r3, r3, #1
 800f846:	4413      	add	r3, r2
 800f848:	085a      	lsrs	r2, r3, #1
 800f84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f84c:	69db      	ldr	r3, [r3, #28]
 800f84e:	f003 0301 	and.w	r3, r3, #1
 800f852:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f854:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f858:	6a1a      	ldr	r2, [r3, #32]
 800f85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f85c:	899b      	ldrh	r3, [r3, #12]
 800f85e:	4619      	mov	r1, r3
 800f860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f862:	440b      	add	r3, r1
 800f864:	3b01      	subs	r3, #1
 800f866:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f868:	8989      	ldrh	r1, [r1, #12]
 800f86a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f86e:	429a      	cmp	r2, r3
 800f870:	d201      	bcs.n	800f876 <find_volume+0x416>
 800f872:	230d      	movs	r3, #13
 800f874:	e06d      	b.n	800f952 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f87c:	619a      	str	r2, [r3, #24]
 800f87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f880:	699a      	ldr	r2, [r3, #24]
 800f882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f884:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800f886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f888:	2280      	movs	r2, #128	; 0x80
 800f88a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f88c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f890:	2b03      	cmp	r3, #3
 800f892:	d149      	bne.n	800f928 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f896:	3338      	adds	r3, #56	; 0x38
 800f898:	3330      	adds	r3, #48	; 0x30
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7fd fd78 	bl	800d390 <ld_word>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	2b01      	cmp	r3, #1
 800f8a4:	d140      	bne.n	800f928 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f8a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	4619      	mov	r1, r3
 800f8ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f8ae:	f7fe f81f 	bl	800d8f0 <move_window>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d137      	bne.n	800f928 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800f8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c0:	3338      	adds	r3, #56	; 0x38
 800f8c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f7fd fd62 	bl	800d390 <ld_word>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	461a      	mov	r2, r3
 800f8d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f8d4:	429a      	cmp	r2, r3
 800f8d6:	d127      	bne.n	800f928 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8da:	3338      	adds	r3, #56	; 0x38
 800f8dc:	4618      	mov	r0, r3
 800f8de:	f7fd fd6f 	bl	800d3c0 <ld_dword>
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	4a1d      	ldr	r2, [pc, #116]	; (800f95c <find_volume+0x4fc>)
 800f8e6:	4293      	cmp	r3, r2
 800f8e8:	d11e      	bne.n	800f928 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ec:	3338      	adds	r3, #56	; 0x38
 800f8ee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f7fd fd64 	bl	800d3c0 <ld_dword>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	4a19      	ldr	r2, [pc, #100]	; (800f960 <find_volume+0x500>)
 800f8fc:	4293      	cmp	r3, r2
 800f8fe:	d113      	bne.n	800f928 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f902:	3338      	adds	r3, #56	; 0x38
 800f904:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f908:	4618      	mov	r0, r3
 800f90a:	f7fd fd59 	bl	800d3c0 <ld_dword>
 800f90e:	4602      	mov	r2, r0
 800f910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f912:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f916:	3338      	adds	r3, #56	; 0x38
 800f918:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f91c:	4618      	mov	r0, r3
 800f91e:	f7fd fd4f 	bl	800d3c0 <ld_dword>
 800f922:	4602      	mov	r2, r0
 800f924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f926:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f92a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f92e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f930:	4b0c      	ldr	r3, [pc, #48]	; (800f964 <find_volume+0x504>)
 800f932:	881b      	ldrh	r3, [r3, #0]
 800f934:	3301      	adds	r3, #1
 800f936:	b29a      	uxth	r2, r3
 800f938:	4b0a      	ldr	r3, [pc, #40]	; (800f964 <find_volume+0x504>)
 800f93a:	801a      	strh	r2, [r3, #0]
 800f93c:	4b09      	ldr	r3, [pc, #36]	; (800f964 <find_volume+0x504>)
 800f93e:	881a      	ldrh	r2, [r3, #0]
 800f940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f942:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f946:	4a08      	ldr	r2, [pc, #32]	; (800f968 <find_volume+0x508>)
 800f948:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f94a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f94c:	f7fd ff68 	bl	800d820 <clear_lock>
#endif
	return FR_OK;
 800f950:	2300      	movs	r3, #0
}
 800f952:	4618      	mov	r0, r3
 800f954:	3758      	adds	r7, #88	; 0x58
 800f956:	46bd      	mov	sp, r7
 800f958:	bd80      	pop	{r7, pc}
 800f95a:	bf00      	nop
 800f95c:	41615252 	.word	0x41615252
 800f960:	61417272 	.word	0x61417272
 800f964:	20002cd8 	.word	0x20002cd8
 800f968:	20002cfc 	.word	0x20002cfc

0800f96c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b084      	sub	sp, #16
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
 800f974:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f976:	2309      	movs	r3, #9
 800f978:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d01c      	beq.n	800f9ba <validate+0x4e>
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d018      	beq.n	800f9ba <validate+0x4e>
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	781b      	ldrb	r3, [r3, #0]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d013      	beq.n	800f9ba <validate+0x4e>
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	889a      	ldrh	r2, [r3, #4]
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	88db      	ldrh	r3, [r3, #6]
 800f99c:	429a      	cmp	r2, r3
 800f99e:	d10c      	bne.n	800f9ba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	785b      	ldrb	r3, [r3, #1]
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f7fd fc54 	bl	800d254 <disk_status>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	f003 0301 	and.w	r3, r3, #1
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d101      	bne.n	800f9ba <validate+0x4e>
			res = FR_OK;
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f9ba:	7bfb      	ldrb	r3, [r7, #15]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d102      	bne.n	800f9c6 <validate+0x5a>
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	e000      	b.n	800f9c8 <validate+0x5c>
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	683a      	ldr	r2, [r7, #0]
 800f9ca:	6013      	str	r3, [r2, #0]
	return res;
 800f9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	3710      	adds	r7, #16
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}
	...

0800f9d8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b088      	sub	sp, #32
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	60f8      	str	r0, [r7, #12]
 800f9e0:	60b9      	str	r1, [r7, #8]
 800f9e2:	4613      	mov	r3, r2
 800f9e4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f9e6:	68bb      	ldr	r3, [r7, #8]
 800f9e8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f9ea:	f107 0310 	add.w	r3, r7, #16
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f7ff fc9c 	bl	800f32c <get_ldnumber>
 800f9f4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f9f6:	69fb      	ldr	r3, [r7, #28]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	da01      	bge.n	800fa00 <f_mount+0x28>
 800f9fc:	230b      	movs	r3, #11
 800f9fe:	e02b      	b.n	800fa58 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fa00:	4a17      	ldr	r2, [pc, #92]	; (800fa60 <f_mount+0x88>)
 800fa02:	69fb      	ldr	r3, [r7, #28]
 800fa04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa08:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fa0a:	69bb      	ldr	r3, [r7, #24]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d005      	beq.n	800fa1c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fa10:	69b8      	ldr	r0, [r7, #24]
 800fa12:	f7fd ff05 	bl	800d820 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fa16:	69bb      	ldr	r3, [r7, #24]
 800fa18:	2200      	movs	r2, #0
 800fa1a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d002      	beq.n	800fa28 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	2200      	movs	r2, #0
 800fa26:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fa28:	68fa      	ldr	r2, [r7, #12]
 800fa2a:	490d      	ldr	r1, [pc, #52]	; (800fa60 <f_mount+0x88>)
 800fa2c:	69fb      	ldr	r3, [r7, #28]
 800fa2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d002      	beq.n	800fa3e <f_mount+0x66>
 800fa38:	79fb      	ldrb	r3, [r7, #7]
 800fa3a:	2b01      	cmp	r3, #1
 800fa3c:	d001      	beq.n	800fa42 <f_mount+0x6a>
 800fa3e:	2300      	movs	r3, #0
 800fa40:	e00a      	b.n	800fa58 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fa42:	f107 010c 	add.w	r1, r7, #12
 800fa46:	f107 0308 	add.w	r3, r7, #8
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	f7ff fd07 	bl	800f460 <find_volume>
 800fa52:	4603      	mov	r3, r0
 800fa54:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fa56:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa58:	4618      	mov	r0, r3
 800fa5a:	3720      	adds	r7, #32
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}
 800fa60:	20002cd4 	.word	0x20002cd4

0800fa64 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b09a      	sub	sp, #104	; 0x68
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	60f8      	str	r0, [r7, #12]
 800fa6c:	60b9      	str	r1, [r7, #8]
 800fa6e:	4613      	mov	r3, r2
 800fa70:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d101      	bne.n	800fa7c <f_open+0x18>
 800fa78:	2309      	movs	r3, #9
 800fa7a:	e1bb      	b.n	800fdf4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fa7c:	79fb      	ldrb	r3, [r7, #7]
 800fa7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa82:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800fa84:	79fa      	ldrb	r2, [r7, #7]
 800fa86:	f107 0114 	add.w	r1, r7, #20
 800fa8a:	f107 0308 	add.w	r3, r7, #8
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f7ff fce6 	bl	800f460 <find_volume>
 800fa94:	4603      	mov	r3, r0
 800fa96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800fa9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	f040 819f 	bne.w	800fde2 <f_open+0x37e>
		dj.obj.fs = fs;
 800faa4:	697b      	ldr	r3, [r7, #20]
 800faa6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800faa8:	68ba      	ldr	r2, [r7, #8]
 800faaa:	f107 0318 	add.w	r3, r7, #24
 800faae:	4611      	mov	r1, r2
 800fab0:	4618      	mov	r0, r3
 800fab2:	f7ff fbc5 	bl	800f240 <follow_path>
 800fab6:	4603      	mov	r3, r0
 800fab8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fabc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d11a      	bne.n	800fafa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fac4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800fac8:	b25b      	sxtb	r3, r3
 800faca:	2b00      	cmp	r3, #0
 800facc:	da03      	bge.n	800fad6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800face:	2306      	movs	r3, #6
 800fad0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fad4:	e011      	b.n	800fafa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fad6:	79fb      	ldrb	r3, [r7, #7]
 800fad8:	f023 0301 	bic.w	r3, r3, #1
 800fadc:	2b00      	cmp	r3, #0
 800fade:	bf14      	ite	ne
 800fae0:	2301      	movne	r3, #1
 800fae2:	2300      	moveq	r3, #0
 800fae4:	b2db      	uxtb	r3, r3
 800fae6:	461a      	mov	r2, r3
 800fae8:	f107 0318 	add.w	r3, r7, #24
 800faec:	4611      	mov	r1, r2
 800faee:	4618      	mov	r0, r3
 800faf0:	f7fd fd4e 	bl	800d590 <chk_lock>
 800faf4:	4603      	mov	r3, r0
 800faf6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fafa:	79fb      	ldrb	r3, [r7, #7]
 800fafc:	f003 031c 	and.w	r3, r3, #28
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d07f      	beq.n	800fc04 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800fb04:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d017      	beq.n	800fb3c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fb0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fb10:	2b04      	cmp	r3, #4
 800fb12:	d10e      	bne.n	800fb32 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fb14:	f7fd fd98 	bl	800d648 <enq_lock>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d006      	beq.n	800fb2c <f_open+0xc8>
 800fb1e:	f107 0318 	add.w	r3, r7, #24
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7fe fffe 	bl	800eb24 <dir_register>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	e000      	b.n	800fb2e <f_open+0xca>
 800fb2c:	2312      	movs	r3, #18
 800fb2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fb32:	79fb      	ldrb	r3, [r7, #7]
 800fb34:	f043 0308 	orr.w	r3, r3, #8
 800fb38:	71fb      	strb	r3, [r7, #7]
 800fb3a:	e010      	b.n	800fb5e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fb3c:	7fbb      	ldrb	r3, [r7, #30]
 800fb3e:	f003 0311 	and.w	r3, r3, #17
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d003      	beq.n	800fb4e <f_open+0xea>
					res = FR_DENIED;
 800fb46:	2307      	movs	r3, #7
 800fb48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fb4c:	e007      	b.n	800fb5e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fb4e:	79fb      	ldrb	r3, [r7, #7]
 800fb50:	f003 0304 	and.w	r3, r3, #4
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d002      	beq.n	800fb5e <f_open+0xfa>
 800fb58:	2308      	movs	r3, #8
 800fb5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fb5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d168      	bne.n	800fc38 <f_open+0x1d4>
 800fb66:	79fb      	ldrb	r3, [r7, #7]
 800fb68:	f003 0308 	and.w	r3, r3, #8
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d063      	beq.n	800fc38 <f_open+0x1d4>
				dw = GET_FATTIME();
 800fb70:	f7fb fa84 	bl	800b07c <get_fattime>
 800fb74:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fb76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb78:	330e      	adds	r3, #14
 800fb7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f7fd fc5d 	bl	800d43c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fb82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb84:	3316      	adds	r3, #22
 800fb86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f7fd fc57 	bl	800d43c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb90:	330b      	adds	r3, #11
 800fb92:	2220      	movs	r2, #32
 800fb94:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fb96:	697b      	ldr	r3, [r7, #20]
 800fb98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb9a:	4611      	mov	r1, r2
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f7fe fc2f 	bl	800e400 <ld_clust>
 800fba2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fba4:	697b      	ldr	r3, [r7, #20]
 800fba6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fba8:	2200      	movs	r2, #0
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f7fe fc47 	bl	800e43e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbb2:	331c      	adds	r3, #28
 800fbb4:	2100      	movs	r1, #0
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	f7fd fc40 	bl	800d43c <st_dword>
					fs->wflag = 1;
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	2201      	movs	r2, #1
 800fbc0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fbc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d037      	beq.n	800fc38 <f_open+0x1d4>
						dw = fs->winsect;
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbcc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800fbce:	f107 0318 	add.w	r3, r7, #24
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7fe f937 	bl	800de4a <remove_chain>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800fbe2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d126      	bne.n	800fc38 <f_open+0x1d4>
							res = move_window(fs, dw);
 800fbea:	697b      	ldr	r3, [r7, #20]
 800fbec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f7fd fe7e 	bl	800d8f0 <move_window>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fbfe:	3a01      	subs	r2, #1
 800fc00:	615a      	str	r2, [r3, #20]
 800fc02:	e019      	b.n	800fc38 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fc04:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d115      	bne.n	800fc38 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fc0c:	7fbb      	ldrb	r3, [r7, #30]
 800fc0e:	f003 0310 	and.w	r3, r3, #16
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d003      	beq.n	800fc1e <f_open+0x1ba>
					res = FR_NO_FILE;
 800fc16:	2304      	movs	r3, #4
 800fc18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fc1c:	e00c      	b.n	800fc38 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fc1e:	79fb      	ldrb	r3, [r7, #7]
 800fc20:	f003 0302 	and.w	r3, r3, #2
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d007      	beq.n	800fc38 <f_open+0x1d4>
 800fc28:	7fbb      	ldrb	r3, [r7, #30]
 800fc2a:	f003 0301 	and.w	r3, r3, #1
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d002      	beq.n	800fc38 <f_open+0x1d4>
						res = FR_DENIED;
 800fc32:	2307      	movs	r3, #7
 800fc34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800fc38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d128      	bne.n	800fc92 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fc40:	79fb      	ldrb	r3, [r7, #7]
 800fc42:	f003 0308 	and.w	r3, r3, #8
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d003      	beq.n	800fc52 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800fc4a:	79fb      	ldrb	r3, [r7, #7]
 800fc4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc50:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fc52:	697b      	ldr	r3, [r7, #20]
 800fc54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800fc5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fc60:	79fb      	ldrb	r3, [r7, #7]
 800fc62:	f023 0301 	bic.w	r3, r3, #1
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	bf14      	ite	ne
 800fc6a:	2301      	movne	r3, #1
 800fc6c:	2300      	moveq	r3, #0
 800fc6e:	b2db      	uxtb	r3, r3
 800fc70:	461a      	mov	r2, r3
 800fc72:	f107 0318 	add.w	r3, r7, #24
 800fc76:	4611      	mov	r1, r2
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7fd fd07 	bl	800d68c <inc_lock>
 800fc7e:	4602      	mov	r2, r0
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	691b      	ldr	r3, [r3, #16]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d102      	bne.n	800fc92 <f_open+0x22e>
 800fc8c:	2302      	movs	r3, #2
 800fc8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fc92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	f040 80a3 	bne.w	800fde2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fc9c:	697b      	ldr	r3, [r7, #20]
 800fc9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fca0:	4611      	mov	r1, r2
 800fca2:	4618      	mov	r0, r3
 800fca4:	f7fe fbac 	bl	800e400 <ld_clust>
 800fca8:	4602      	mov	r2, r0
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fcae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb0:	331c      	adds	r3, #28
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7fd fb84 	bl	800d3c0 <ld_dword>
 800fcb8:	4602      	mov	r2, r0
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fcc4:	697a      	ldr	r2, [r7, #20]
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fcca:	697b      	ldr	r3, [r7, #20]
 800fccc:	88da      	ldrh	r2, [r3, #6]
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	79fa      	ldrb	r2, [r7, #7]
 800fcd6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	2200      	movs	r2, #0
 800fce2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	2200      	movs	r2, #0
 800fce8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	3330      	adds	r3, #48	; 0x30
 800fcee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fcf2:	2100      	movs	r1, #0
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	f7fd fbee 	bl	800d4d6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fcfa:	79fb      	ldrb	r3, [r7, #7]
 800fcfc:	f003 0320 	and.w	r3, r3, #32
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d06e      	beq.n	800fde2 <f_open+0x37e>
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	68db      	ldr	r3, [r3, #12]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d06a      	beq.n	800fde2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	68da      	ldr	r2, [r3, #12]
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fd14:	697b      	ldr	r3, [r7, #20]
 800fd16:	895b      	ldrh	r3, [r3, #10]
 800fd18:	461a      	mov	r2, r3
 800fd1a:	697b      	ldr	r3, [r7, #20]
 800fd1c:	899b      	ldrh	r3, [r3, #12]
 800fd1e:	fb02 f303 	mul.w	r3, r2, r3
 800fd22:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	689b      	ldr	r3, [r3, #8]
 800fd28:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	68db      	ldr	r3, [r3, #12]
 800fd2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fd30:	e016      	b.n	800fd60 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7fd fe97 	bl	800da6a <get_fat>
 800fd3c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800fd3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd40:	2b01      	cmp	r3, #1
 800fd42:	d802      	bhi.n	800fd4a <f_open+0x2e6>
 800fd44:	2302      	movs	r3, #2
 800fd46:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fd4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd50:	d102      	bne.n	800fd58 <f_open+0x2f4>
 800fd52:	2301      	movs	r3, #1
 800fd54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fd58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fd5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd5c:	1ad3      	subs	r3, r2, r3
 800fd5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fd60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d103      	bne.n	800fd70 <f_open+0x30c>
 800fd68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fd6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd6c:	429a      	cmp	r2, r3
 800fd6e:	d8e0      	bhi.n	800fd32 <f_open+0x2ce>
				}
				fp->clust = clst;
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fd74:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fd76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d131      	bne.n	800fde2 <f_open+0x37e>
 800fd7e:	697b      	ldr	r3, [r7, #20]
 800fd80:	899b      	ldrh	r3, [r3, #12]
 800fd82:	461a      	mov	r2, r3
 800fd84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd86:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd8a:	fb01 f202 	mul.w	r2, r1, r2
 800fd8e:	1a9b      	subs	r3, r3, r2
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d026      	beq.n	800fde2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fd94:	697b      	ldr	r3, [r7, #20]
 800fd96:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f7fd fe47 	bl	800da2c <clust2sect>
 800fd9e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fda0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d103      	bne.n	800fdae <f_open+0x34a>
						res = FR_INT_ERR;
 800fda6:	2302      	movs	r3, #2
 800fda8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fdac:	e019      	b.n	800fde2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fdae:	697b      	ldr	r3, [r7, #20]
 800fdb0:	899b      	ldrh	r3, [r3, #12]
 800fdb2:	461a      	mov	r2, r3
 800fdb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fdb6:	fbb3 f2f2 	udiv	r2, r3, r2
 800fdba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fdbc:	441a      	add	r2, r3
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	7858      	ldrb	r0, [r3, #1]
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	6a1a      	ldr	r2, [r3, #32]
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	f7fd fa7f 	bl	800d2d4 <disk_read>
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d002      	beq.n	800fde2 <f_open+0x37e>
 800fddc:	2301      	movs	r3, #1
 800fdde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fde2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d002      	beq.n	800fdf0 <f_open+0x38c>
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	2200      	movs	r2, #0
 800fdee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fdf0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3768      	adds	r7, #104	; 0x68
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}

0800fdfc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b08e      	sub	sp, #56	; 0x38
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	60f8      	str	r0, [r7, #12]
 800fe04:	60b9      	str	r1, [r7, #8]
 800fe06:	607a      	str	r2, [r7, #4]
 800fe08:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800fe0a:	68bb      	ldr	r3, [r7, #8]
 800fe0c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	2200      	movs	r2, #0
 800fe12:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	f107 0214 	add.w	r2, r7, #20
 800fe1a:	4611      	mov	r1, r2
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f7ff fda5 	bl	800f96c <validate>
 800fe22:	4603      	mov	r3, r0
 800fe24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fe28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d107      	bne.n	800fe40 <f_read+0x44>
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	7d5b      	ldrb	r3, [r3, #21]
 800fe34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fe38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d002      	beq.n	800fe46 <f_read+0x4a>
 800fe40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe44:	e135      	b.n	80100b2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	7d1b      	ldrb	r3, [r3, #20]
 800fe4a:	f003 0301 	and.w	r3, r3, #1
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d101      	bne.n	800fe56 <f_read+0x5a>
 800fe52:	2307      	movs	r3, #7
 800fe54:	e12d      	b.n	80100b2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	68da      	ldr	r2, [r3, #12]
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	699b      	ldr	r3, [r3, #24]
 800fe5e:	1ad3      	subs	r3, r2, r3
 800fe60:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800fe62:	687a      	ldr	r2, [r7, #4]
 800fe64:	6a3b      	ldr	r3, [r7, #32]
 800fe66:	429a      	cmp	r2, r3
 800fe68:	f240 811e 	bls.w	80100a8 <f_read+0x2ac>
 800fe6c:	6a3b      	ldr	r3, [r7, #32]
 800fe6e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800fe70:	e11a      	b.n	80100a8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	699b      	ldr	r3, [r3, #24]
 800fe76:	697a      	ldr	r2, [r7, #20]
 800fe78:	8992      	ldrh	r2, [r2, #12]
 800fe7a:	fbb3 f1f2 	udiv	r1, r3, r2
 800fe7e:	fb01 f202 	mul.w	r2, r1, r2
 800fe82:	1a9b      	subs	r3, r3, r2
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	f040 80d5 	bne.w	8010034 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	699b      	ldr	r3, [r3, #24]
 800fe8e:	697a      	ldr	r2, [r7, #20]
 800fe90:	8992      	ldrh	r2, [r2, #12]
 800fe92:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe96:	697a      	ldr	r2, [r7, #20]
 800fe98:	8952      	ldrh	r2, [r2, #10]
 800fe9a:	3a01      	subs	r2, #1
 800fe9c:	4013      	ands	r3, r2
 800fe9e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800fea0:	69fb      	ldr	r3, [r7, #28]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d12f      	bne.n	800ff06 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	699b      	ldr	r3, [r3, #24]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d103      	bne.n	800feb6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	689b      	ldr	r3, [r3, #8]
 800feb2:	633b      	str	r3, [r7, #48]	; 0x30
 800feb4:	e013      	b.n	800fede <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feba:	2b00      	cmp	r3, #0
 800febc:	d007      	beq.n	800fece <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	699b      	ldr	r3, [r3, #24]
 800fec2:	4619      	mov	r1, r3
 800fec4:	68f8      	ldr	r0, [r7, #12]
 800fec6:	f7fe f8bd 	bl	800e044 <clmt_clust>
 800feca:	6338      	str	r0, [r7, #48]	; 0x30
 800fecc:	e007      	b.n	800fede <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800fece:	68fa      	ldr	r2, [r7, #12]
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	69db      	ldr	r3, [r3, #28]
 800fed4:	4619      	mov	r1, r3
 800fed6:	4610      	mov	r0, r2
 800fed8:	f7fd fdc7 	bl	800da6a <get_fat>
 800fedc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800fede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fee0:	2b01      	cmp	r3, #1
 800fee2:	d804      	bhi.n	800feee <f_read+0xf2>
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	2202      	movs	r2, #2
 800fee8:	755a      	strb	r2, [r3, #21]
 800feea:	2302      	movs	r3, #2
 800feec:	e0e1      	b.n	80100b2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800feee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fef4:	d104      	bne.n	800ff00 <f_read+0x104>
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	2201      	movs	r2, #1
 800fefa:	755a      	strb	r2, [r3, #21]
 800fefc:	2301      	movs	r3, #1
 800fefe:	e0d8      	b.n	80100b2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff04:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ff06:	697a      	ldr	r2, [r7, #20]
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	69db      	ldr	r3, [r3, #28]
 800ff0c:	4619      	mov	r1, r3
 800ff0e:	4610      	mov	r0, r2
 800ff10:	f7fd fd8c 	bl	800da2c <clust2sect>
 800ff14:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ff16:	69bb      	ldr	r3, [r7, #24]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d104      	bne.n	800ff26 <f_read+0x12a>
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	2202      	movs	r2, #2
 800ff20:	755a      	strb	r2, [r3, #21]
 800ff22:	2302      	movs	r3, #2
 800ff24:	e0c5      	b.n	80100b2 <f_read+0x2b6>
			sect += csect;
 800ff26:	69ba      	ldr	r2, [r7, #24]
 800ff28:	69fb      	ldr	r3, [r7, #28]
 800ff2a:	4413      	add	r3, r2
 800ff2c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ff2e:	697b      	ldr	r3, [r7, #20]
 800ff30:	899b      	ldrh	r3, [r3, #12]
 800ff32:	461a      	mov	r2, r3
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff3a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ff3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d041      	beq.n	800ffc6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ff42:	69fa      	ldr	r2, [r7, #28]
 800ff44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff46:	4413      	add	r3, r2
 800ff48:	697a      	ldr	r2, [r7, #20]
 800ff4a:	8952      	ldrh	r2, [r2, #10]
 800ff4c:	4293      	cmp	r3, r2
 800ff4e:	d905      	bls.n	800ff5c <f_read+0x160>
					cc = fs->csize - csect;
 800ff50:	697b      	ldr	r3, [r7, #20]
 800ff52:	895b      	ldrh	r3, [r3, #10]
 800ff54:	461a      	mov	r2, r3
 800ff56:	69fb      	ldr	r3, [r7, #28]
 800ff58:	1ad3      	subs	r3, r2, r3
 800ff5a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	7858      	ldrb	r0, [r3, #1]
 800ff60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff62:	69ba      	ldr	r2, [r7, #24]
 800ff64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ff66:	f7fd f9b5 	bl	800d2d4 <disk_read>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d004      	beq.n	800ff7a <f_read+0x17e>
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	2201      	movs	r2, #1
 800ff74:	755a      	strb	r2, [r3, #21]
 800ff76:	2301      	movs	r3, #1
 800ff78:	e09b      	b.n	80100b2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	7d1b      	ldrb	r3, [r3, #20]
 800ff7e:	b25b      	sxtb	r3, r3
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	da18      	bge.n	800ffb6 <f_read+0x1ba>
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	6a1a      	ldr	r2, [r3, #32]
 800ff88:	69bb      	ldr	r3, [r7, #24]
 800ff8a:	1ad3      	subs	r3, r2, r3
 800ff8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff8e:	429a      	cmp	r2, r3
 800ff90:	d911      	bls.n	800ffb6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	6a1a      	ldr	r2, [r3, #32]
 800ff96:	69bb      	ldr	r3, [r7, #24]
 800ff98:	1ad3      	subs	r3, r2, r3
 800ff9a:	697a      	ldr	r2, [r7, #20]
 800ff9c:	8992      	ldrh	r2, [r2, #12]
 800ff9e:	fb02 f303 	mul.w	r3, r2, r3
 800ffa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffa4:	18d0      	adds	r0, r2, r3
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ffac:	697b      	ldr	r3, [r7, #20]
 800ffae:	899b      	ldrh	r3, [r3, #12]
 800ffb0:	461a      	mov	r2, r3
 800ffb2:	f7fd fa6f 	bl	800d494 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ffb6:	697b      	ldr	r3, [r7, #20]
 800ffb8:	899b      	ldrh	r3, [r3, #12]
 800ffba:	461a      	mov	r2, r3
 800ffbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffbe:	fb02 f303 	mul.w	r3, r2, r3
 800ffc2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ffc4:	e05c      	b.n	8010080 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	6a1b      	ldr	r3, [r3, #32]
 800ffca:	69ba      	ldr	r2, [r7, #24]
 800ffcc:	429a      	cmp	r2, r3
 800ffce:	d02e      	beq.n	801002e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	7d1b      	ldrb	r3, [r3, #20]
 800ffd4:	b25b      	sxtb	r3, r3
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	da18      	bge.n	801000c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ffda:	697b      	ldr	r3, [r7, #20]
 800ffdc:	7858      	ldrb	r0, [r3, #1]
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	6a1a      	ldr	r2, [r3, #32]
 800ffe8:	2301      	movs	r3, #1
 800ffea:	f7fd f993 	bl	800d314 <disk_write>
 800ffee:	4603      	mov	r3, r0
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d004      	beq.n	800fffe <f_read+0x202>
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	2201      	movs	r2, #1
 800fff8:	755a      	strb	r2, [r3, #21]
 800fffa:	2301      	movs	r3, #1
 800fffc:	e059      	b.n	80100b2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	7d1b      	ldrb	r3, [r3, #20]
 8010002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010006:	b2da      	uxtb	r2, r3
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801000c:	697b      	ldr	r3, [r7, #20]
 801000e:	7858      	ldrb	r0, [r3, #1]
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010016:	2301      	movs	r3, #1
 8010018:	69ba      	ldr	r2, [r7, #24]
 801001a:	f7fd f95b 	bl	800d2d4 <disk_read>
 801001e:	4603      	mov	r3, r0
 8010020:	2b00      	cmp	r3, #0
 8010022:	d004      	beq.n	801002e <f_read+0x232>
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	2201      	movs	r2, #1
 8010028:	755a      	strb	r2, [r3, #21]
 801002a:	2301      	movs	r3, #1
 801002c:	e041      	b.n	80100b2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	69ba      	ldr	r2, [r7, #24]
 8010032:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010034:	697b      	ldr	r3, [r7, #20]
 8010036:	899b      	ldrh	r3, [r3, #12]
 8010038:	4618      	mov	r0, r3
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	699b      	ldr	r3, [r3, #24]
 801003e:	697a      	ldr	r2, [r7, #20]
 8010040:	8992      	ldrh	r2, [r2, #12]
 8010042:	fbb3 f1f2 	udiv	r1, r3, r2
 8010046:	fb01 f202 	mul.w	r2, r1, r2
 801004a:	1a9b      	subs	r3, r3, r2
 801004c:	1ac3      	subs	r3, r0, r3
 801004e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	429a      	cmp	r2, r3
 8010056:	d901      	bls.n	801005c <f_read+0x260>
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	699b      	ldr	r3, [r3, #24]
 8010066:	697a      	ldr	r2, [r7, #20]
 8010068:	8992      	ldrh	r2, [r2, #12]
 801006a:	fbb3 f0f2 	udiv	r0, r3, r2
 801006e:	fb00 f202 	mul.w	r2, r0, r2
 8010072:	1a9b      	subs	r3, r3, r2
 8010074:	440b      	add	r3, r1
 8010076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010078:	4619      	mov	r1, r3
 801007a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801007c:	f7fd fa0a 	bl	800d494 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010084:	4413      	add	r3, r2
 8010086:	627b      	str	r3, [r7, #36]	; 0x24
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	699a      	ldr	r2, [r3, #24]
 801008c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801008e:	441a      	add	r2, r3
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	619a      	str	r2, [r3, #24]
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	681a      	ldr	r2, [r3, #0]
 8010098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801009a:	441a      	add	r2, r3
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	601a      	str	r2, [r3, #0]
 80100a0:	687a      	ldr	r2, [r7, #4]
 80100a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100a4:	1ad3      	subs	r3, r2, r3
 80100a6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	f47f aee1 	bne.w	800fe72 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80100b0:	2300      	movs	r3, #0
}
 80100b2:	4618      	mov	r0, r3
 80100b4:	3738      	adds	r7, #56	; 0x38
 80100b6:	46bd      	mov	sp, r7
 80100b8:	bd80      	pop	{r7, pc}

080100ba <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80100ba:	b580      	push	{r7, lr}
 80100bc:	b086      	sub	sp, #24
 80100be:	af00      	add	r7, sp, #0
 80100c0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	f107 0208 	add.w	r2, r7, #8
 80100c8:	4611      	mov	r1, r2
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7ff fc4e 	bl	800f96c <validate>
 80100d0:	4603      	mov	r3, r0
 80100d2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80100d4:	7dfb      	ldrb	r3, [r7, #23]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d168      	bne.n	80101ac <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	7d1b      	ldrb	r3, [r3, #20]
 80100de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d062      	beq.n	80101ac <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	7d1b      	ldrb	r3, [r3, #20]
 80100ea:	b25b      	sxtb	r3, r3
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	da15      	bge.n	801011c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	7858      	ldrb	r0, [r3, #1]
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	6a1a      	ldr	r2, [r3, #32]
 80100fe:	2301      	movs	r3, #1
 8010100:	f7fd f908 	bl	800d314 <disk_write>
 8010104:	4603      	mov	r3, r0
 8010106:	2b00      	cmp	r3, #0
 8010108:	d001      	beq.n	801010e <f_sync+0x54>
 801010a:	2301      	movs	r3, #1
 801010c:	e04f      	b.n	80101ae <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	7d1b      	ldrb	r3, [r3, #20]
 8010112:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010116:	b2da      	uxtb	r2, r3
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801011c:	f7fa ffae 	bl	800b07c <get_fattime>
 8010120:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010122:	68ba      	ldr	r2, [r7, #8]
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010128:	4619      	mov	r1, r3
 801012a:	4610      	mov	r0, r2
 801012c:	f7fd fbe0 	bl	800d8f0 <move_window>
 8010130:	4603      	mov	r3, r0
 8010132:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010134:	7dfb      	ldrb	r3, [r7, #23]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d138      	bne.n	80101ac <f_sync+0xf2>
					dir = fp->dir_ptr;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801013e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	330b      	adds	r3, #11
 8010144:	781a      	ldrb	r2, [r3, #0]
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	330b      	adds	r3, #11
 801014a:	f042 0220 	orr.w	r2, r2, #32
 801014e:	b2d2      	uxtb	r2, r2
 8010150:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	6818      	ldr	r0, [r3, #0]
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	689b      	ldr	r3, [r3, #8]
 801015a:	461a      	mov	r2, r3
 801015c:	68f9      	ldr	r1, [r7, #12]
 801015e:	f7fe f96e 	bl	800e43e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	f103 021c 	add.w	r2, r3, #28
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	68db      	ldr	r3, [r3, #12]
 801016c:	4619      	mov	r1, r3
 801016e:	4610      	mov	r0, r2
 8010170:	f7fd f964 	bl	800d43c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	3316      	adds	r3, #22
 8010178:	6939      	ldr	r1, [r7, #16]
 801017a:	4618      	mov	r0, r3
 801017c:	f7fd f95e 	bl	800d43c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	3312      	adds	r3, #18
 8010184:	2100      	movs	r1, #0
 8010186:	4618      	mov	r0, r3
 8010188:	f7fd f93d 	bl	800d406 <st_word>
					fs->wflag = 1;
 801018c:	68bb      	ldr	r3, [r7, #8]
 801018e:	2201      	movs	r2, #1
 8010190:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010192:	68bb      	ldr	r3, [r7, #8]
 8010194:	4618      	mov	r0, r3
 8010196:	f7fd fbd9 	bl	800d94c <sync_fs>
 801019a:	4603      	mov	r3, r0
 801019c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	7d1b      	ldrb	r3, [r3, #20]
 80101a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80101a6:	b2da      	uxtb	r2, r3
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80101ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80101ae:	4618      	mov	r0, r3
 80101b0:	3718      	adds	r7, #24
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bd80      	pop	{r7, pc}

080101b6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80101b6:	b580      	push	{r7, lr}
 80101b8:	b084      	sub	sp, #16
 80101ba:	af00      	add	r7, sp, #0
 80101bc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80101be:	6878      	ldr	r0, [r7, #4]
 80101c0:	f7ff ff7b 	bl	80100ba <f_sync>
 80101c4:	4603      	mov	r3, r0
 80101c6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80101c8:	7bfb      	ldrb	r3, [r7, #15]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d118      	bne.n	8010200 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f107 0208 	add.w	r2, r7, #8
 80101d4:	4611      	mov	r1, r2
 80101d6:	4618      	mov	r0, r3
 80101d8:	f7ff fbc8 	bl	800f96c <validate>
 80101dc:	4603      	mov	r3, r0
 80101de:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80101e0:	7bfb      	ldrb	r3, [r7, #15]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d10c      	bne.n	8010200 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	691b      	ldr	r3, [r3, #16]
 80101ea:	4618      	mov	r0, r3
 80101ec:	f7fd fadc 	bl	800d7a8 <dec_lock>
 80101f0:	4603      	mov	r3, r0
 80101f2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80101f4:	7bfb      	ldrb	r3, [r7, #15]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d102      	bne.n	8010200 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	2200      	movs	r2, #0
 80101fe:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010200:	7bfb      	ldrb	r3, [r7, #15]
}
 8010202:	4618      	mov	r0, r3
 8010204:	3710      	adds	r7, #16
 8010206:	46bd      	mov	sp, r7
 8010208:	bd80      	pop	{r7, pc}

0801020a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801020a:	b580      	push	{r7, lr}
 801020c:	b090      	sub	sp, #64	; 0x40
 801020e:	af00      	add	r7, sp, #0
 8010210:	6078      	str	r0, [r7, #4]
 8010212:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	f107 0208 	add.w	r2, r7, #8
 801021a:	4611      	mov	r1, r2
 801021c:	4618      	mov	r0, r3
 801021e:	f7ff fba5 	bl	800f96c <validate>
 8010222:	4603      	mov	r3, r0
 8010224:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010228:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801022c:	2b00      	cmp	r3, #0
 801022e:	d103      	bne.n	8010238 <f_lseek+0x2e>
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	7d5b      	ldrb	r3, [r3, #21]
 8010234:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010238:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801023c:	2b00      	cmp	r3, #0
 801023e:	d002      	beq.n	8010246 <f_lseek+0x3c>
 8010240:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010244:	e201      	b.n	801064a <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801024a:	2b00      	cmp	r3, #0
 801024c:	f000 80d9 	beq.w	8010402 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010250:	683b      	ldr	r3, [r7, #0]
 8010252:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010256:	d15a      	bne.n	801030e <f_lseek+0x104>
			tbl = fp->cltbl;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801025c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801025e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010260:	1d1a      	adds	r2, r3, #4
 8010262:	627a      	str	r2, [r7, #36]	; 0x24
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	617b      	str	r3, [r7, #20]
 8010268:	2302      	movs	r3, #2
 801026a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	689b      	ldr	r3, [r3, #8]
 8010270:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8010272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010274:	2b00      	cmp	r3, #0
 8010276:	d03a      	beq.n	80102ee <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801027a:	613b      	str	r3, [r7, #16]
 801027c:	2300      	movs	r3, #0
 801027e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010282:	3302      	adds	r3, #2
 8010284:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8010286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010288:	60fb      	str	r3, [r7, #12]
 801028a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801028c:	3301      	adds	r3, #1
 801028e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010294:	4618      	mov	r0, r3
 8010296:	f7fd fbe8 	bl	800da6a <get_fat>
 801029a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801029c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801029e:	2b01      	cmp	r3, #1
 80102a0:	d804      	bhi.n	80102ac <f_lseek+0xa2>
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2202      	movs	r2, #2
 80102a6:	755a      	strb	r2, [r3, #21]
 80102a8:	2302      	movs	r3, #2
 80102aa:	e1ce      	b.n	801064a <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80102ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80102b2:	d104      	bne.n	80102be <f_lseek+0xb4>
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2201      	movs	r2, #1
 80102b8:	755a      	strb	r2, [r3, #21]
 80102ba:	2301      	movs	r3, #1
 80102bc:	e1c5      	b.n	801064a <f_lseek+0x440>
					} while (cl == pcl + 1);
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	3301      	adds	r3, #1
 80102c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102c4:	429a      	cmp	r2, r3
 80102c6:	d0de      	beq.n	8010286 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80102c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80102ca:	697b      	ldr	r3, [r7, #20]
 80102cc:	429a      	cmp	r2, r3
 80102ce:	d809      	bhi.n	80102e4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80102d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102d2:	1d1a      	adds	r2, r3, #4
 80102d4:	627a      	str	r2, [r7, #36]	; 0x24
 80102d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80102d8:	601a      	str	r2, [r3, #0]
 80102da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102dc:	1d1a      	adds	r2, r3, #4
 80102de:	627a      	str	r2, [r7, #36]	; 0x24
 80102e0:	693a      	ldr	r2, [r7, #16]
 80102e2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80102e4:	68bb      	ldr	r3, [r7, #8]
 80102e6:	69db      	ldr	r3, [r3, #28]
 80102e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102ea:	429a      	cmp	r2, r3
 80102ec:	d3c4      	bcc.n	8010278 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80102f4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80102f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80102f8:	697b      	ldr	r3, [r7, #20]
 80102fa:	429a      	cmp	r2, r3
 80102fc:	d803      	bhi.n	8010306 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80102fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010300:	2200      	movs	r2, #0
 8010302:	601a      	str	r2, [r3, #0]
 8010304:	e19f      	b.n	8010646 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010306:	2311      	movs	r3, #17
 8010308:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801030c:	e19b      	b.n	8010646 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	68db      	ldr	r3, [r3, #12]
 8010312:	683a      	ldr	r2, [r7, #0]
 8010314:	429a      	cmp	r2, r3
 8010316:	d902      	bls.n	801031e <f_lseek+0x114>
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	68db      	ldr	r3, [r3, #12]
 801031c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	683a      	ldr	r2, [r7, #0]
 8010322:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	2b00      	cmp	r3, #0
 8010328:	f000 818d 	beq.w	8010646 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	3b01      	subs	r3, #1
 8010330:	4619      	mov	r1, r3
 8010332:	6878      	ldr	r0, [r7, #4]
 8010334:	f7fd fe86 	bl	800e044 <clmt_clust>
 8010338:	4602      	mov	r2, r0
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801033e:	68ba      	ldr	r2, [r7, #8]
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	69db      	ldr	r3, [r3, #28]
 8010344:	4619      	mov	r1, r3
 8010346:	4610      	mov	r0, r2
 8010348:	f7fd fb70 	bl	800da2c <clust2sect>
 801034c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801034e:	69bb      	ldr	r3, [r7, #24]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d104      	bne.n	801035e <f_lseek+0x154>
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2202      	movs	r2, #2
 8010358:	755a      	strb	r2, [r3, #21]
 801035a:	2302      	movs	r3, #2
 801035c:	e175      	b.n	801064a <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801035e:	683b      	ldr	r3, [r7, #0]
 8010360:	3b01      	subs	r3, #1
 8010362:	68ba      	ldr	r2, [r7, #8]
 8010364:	8992      	ldrh	r2, [r2, #12]
 8010366:	fbb3 f3f2 	udiv	r3, r3, r2
 801036a:	68ba      	ldr	r2, [r7, #8]
 801036c:	8952      	ldrh	r2, [r2, #10]
 801036e:	3a01      	subs	r2, #1
 8010370:	4013      	ands	r3, r2
 8010372:	69ba      	ldr	r2, [r7, #24]
 8010374:	4413      	add	r3, r2
 8010376:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	699b      	ldr	r3, [r3, #24]
 801037c:	68ba      	ldr	r2, [r7, #8]
 801037e:	8992      	ldrh	r2, [r2, #12]
 8010380:	fbb3 f1f2 	udiv	r1, r3, r2
 8010384:	fb01 f202 	mul.w	r2, r1, r2
 8010388:	1a9b      	subs	r3, r3, r2
 801038a:	2b00      	cmp	r3, #0
 801038c:	f000 815b 	beq.w	8010646 <f_lseek+0x43c>
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	6a1b      	ldr	r3, [r3, #32]
 8010394:	69ba      	ldr	r2, [r7, #24]
 8010396:	429a      	cmp	r2, r3
 8010398:	f000 8155 	beq.w	8010646 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	7d1b      	ldrb	r3, [r3, #20]
 80103a0:	b25b      	sxtb	r3, r3
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	da18      	bge.n	80103d8 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80103a6:	68bb      	ldr	r3, [r7, #8]
 80103a8:	7858      	ldrb	r0, [r3, #1]
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	6a1a      	ldr	r2, [r3, #32]
 80103b4:	2301      	movs	r3, #1
 80103b6:	f7fc ffad 	bl	800d314 <disk_write>
 80103ba:	4603      	mov	r3, r0
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d004      	beq.n	80103ca <f_lseek+0x1c0>
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2201      	movs	r2, #1
 80103c4:	755a      	strb	r2, [r3, #21]
 80103c6:	2301      	movs	r3, #1
 80103c8:	e13f      	b.n	801064a <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	7d1b      	ldrb	r3, [r3, #20]
 80103ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80103d2:	b2da      	uxtb	r2, r3
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	7858      	ldrb	r0, [r3, #1]
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80103e2:	2301      	movs	r3, #1
 80103e4:	69ba      	ldr	r2, [r7, #24]
 80103e6:	f7fc ff75 	bl	800d2d4 <disk_read>
 80103ea:	4603      	mov	r3, r0
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d004      	beq.n	80103fa <f_lseek+0x1f0>
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2201      	movs	r2, #1
 80103f4:	755a      	strb	r2, [r3, #21]
 80103f6:	2301      	movs	r3, #1
 80103f8:	e127      	b.n	801064a <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	69ba      	ldr	r2, [r7, #24]
 80103fe:	621a      	str	r2, [r3, #32]
 8010400:	e121      	b.n	8010646 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	68db      	ldr	r3, [r3, #12]
 8010406:	683a      	ldr	r2, [r7, #0]
 8010408:	429a      	cmp	r2, r3
 801040a:	d908      	bls.n	801041e <f_lseek+0x214>
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	7d1b      	ldrb	r3, [r3, #20]
 8010410:	f003 0302 	and.w	r3, r3, #2
 8010414:	2b00      	cmp	r3, #0
 8010416:	d102      	bne.n	801041e <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	68db      	ldr	r3, [r3, #12]
 801041c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	699b      	ldr	r3, [r3, #24]
 8010422:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010424:	2300      	movs	r3, #0
 8010426:	637b      	str	r3, [r7, #52]	; 0x34
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801042c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	2b00      	cmp	r3, #0
 8010432:	f000 80b5 	beq.w	80105a0 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010436:	68bb      	ldr	r3, [r7, #8]
 8010438:	895b      	ldrh	r3, [r3, #10]
 801043a:	461a      	mov	r2, r3
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	899b      	ldrh	r3, [r3, #12]
 8010440:	fb02 f303 	mul.w	r3, r2, r3
 8010444:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010446:	6a3b      	ldr	r3, [r7, #32]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d01b      	beq.n	8010484 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	1e5a      	subs	r2, r3, #1
 8010450:	69fb      	ldr	r3, [r7, #28]
 8010452:	fbb2 f2f3 	udiv	r2, r2, r3
 8010456:	6a3b      	ldr	r3, [r7, #32]
 8010458:	1e59      	subs	r1, r3, #1
 801045a:	69fb      	ldr	r3, [r7, #28]
 801045c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010460:	429a      	cmp	r2, r3
 8010462:	d30f      	bcc.n	8010484 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010464:	6a3b      	ldr	r3, [r7, #32]
 8010466:	1e5a      	subs	r2, r3, #1
 8010468:	69fb      	ldr	r3, [r7, #28]
 801046a:	425b      	negs	r3, r3
 801046c:	401a      	ands	r2, r3
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	699b      	ldr	r3, [r3, #24]
 8010476:	683a      	ldr	r2, [r7, #0]
 8010478:	1ad3      	subs	r3, r2, r3
 801047a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	69db      	ldr	r3, [r3, #28]
 8010480:	63bb      	str	r3, [r7, #56]	; 0x38
 8010482:	e022      	b.n	80104ca <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	689b      	ldr	r3, [r3, #8]
 8010488:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801048a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801048c:	2b00      	cmp	r3, #0
 801048e:	d119      	bne.n	80104c4 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2100      	movs	r1, #0
 8010494:	4618      	mov	r0, r3
 8010496:	f7fd fd3d 	bl	800df14 <create_chain>
 801049a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801049c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801049e:	2b01      	cmp	r3, #1
 80104a0:	d104      	bne.n	80104ac <f_lseek+0x2a2>
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	2202      	movs	r2, #2
 80104a6:	755a      	strb	r2, [r3, #21]
 80104a8:	2302      	movs	r3, #2
 80104aa:	e0ce      	b.n	801064a <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80104ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80104b2:	d104      	bne.n	80104be <f_lseek+0x2b4>
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	2201      	movs	r2, #1
 80104b8:	755a      	strb	r2, [r3, #21]
 80104ba:	2301      	movs	r3, #1
 80104bc:	e0c5      	b.n	801064a <f_lseek+0x440>
					fp->obj.sclust = clst;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104c2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104c8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80104ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d067      	beq.n	80105a0 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80104d0:	e03a      	b.n	8010548 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80104d2:	683a      	ldr	r2, [r7, #0]
 80104d4:	69fb      	ldr	r3, [r7, #28]
 80104d6:	1ad3      	subs	r3, r2, r3
 80104d8:	603b      	str	r3, [r7, #0]
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	699a      	ldr	r2, [r3, #24]
 80104de:	69fb      	ldr	r3, [r7, #28]
 80104e0:	441a      	add	r2, r3
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	7d1b      	ldrb	r3, [r3, #20]
 80104ea:	f003 0302 	and.w	r3, r3, #2
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d00b      	beq.n	801050a <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80104f6:	4618      	mov	r0, r3
 80104f8:	f7fd fd0c 	bl	800df14 <create_chain>
 80104fc:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80104fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010500:	2b00      	cmp	r3, #0
 8010502:	d108      	bne.n	8010516 <f_lseek+0x30c>
							ofs = 0; break;
 8010504:	2300      	movs	r3, #0
 8010506:	603b      	str	r3, [r7, #0]
 8010508:	e022      	b.n	8010550 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801050e:	4618      	mov	r0, r3
 8010510:	f7fd faab 	bl	800da6a <get_fat>
 8010514:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010518:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801051c:	d104      	bne.n	8010528 <f_lseek+0x31e>
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2201      	movs	r2, #1
 8010522:	755a      	strb	r2, [r3, #21]
 8010524:	2301      	movs	r3, #1
 8010526:	e090      	b.n	801064a <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801052a:	2b01      	cmp	r3, #1
 801052c:	d904      	bls.n	8010538 <f_lseek+0x32e>
 801052e:	68bb      	ldr	r3, [r7, #8]
 8010530:	69db      	ldr	r3, [r3, #28]
 8010532:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010534:	429a      	cmp	r2, r3
 8010536:	d304      	bcc.n	8010542 <f_lseek+0x338>
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2202      	movs	r2, #2
 801053c:	755a      	strb	r2, [r3, #21]
 801053e:	2302      	movs	r3, #2
 8010540:	e083      	b.n	801064a <f_lseek+0x440>
					fp->clust = clst;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010546:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010548:	683a      	ldr	r2, [r7, #0]
 801054a:	69fb      	ldr	r3, [r7, #28]
 801054c:	429a      	cmp	r2, r3
 801054e:	d8c0      	bhi.n	80104d2 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	699a      	ldr	r2, [r3, #24]
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	441a      	add	r2, r3
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801055c:	68bb      	ldr	r3, [r7, #8]
 801055e:	899b      	ldrh	r3, [r3, #12]
 8010560:	461a      	mov	r2, r3
 8010562:	683b      	ldr	r3, [r7, #0]
 8010564:	fbb3 f1f2 	udiv	r1, r3, r2
 8010568:	fb01 f202 	mul.w	r2, r1, r2
 801056c:	1a9b      	subs	r3, r3, r2
 801056e:	2b00      	cmp	r3, #0
 8010570:	d016      	beq.n	80105a0 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010572:	68bb      	ldr	r3, [r7, #8]
 8010574:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010576:	4618      	mov	r0, r3
 8010578:	f7fd fa58 	bl	800da2c <clust2sect>
 801057c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801057e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010580:	2b00      	cmp	r3, #0
 8010582:	d104      	bne.n	801058e <f_lseek+0x384>
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2202      	movs	r2, #2
 8010588:	755a      	strb	r2, [r3, #21]
 801058a:	2302      	movs	r3, #2
 801058c:	e05d      	b.n	801064a <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	899b      	ldrh	r3, [r3, #12]
 8010592:	461a      	mov	r2, r3
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	fbb3 f3f2 	udiv	r3, r3, r2
 801059a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801059c:	4413      	add	r3, r2
 801059e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	699a      	ldr	r2, [r3, #24]
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	68db      	ldr	r3, [r3, #12]
 80105a8:	429a      	cmp	r2, r3
 80105aa:	d90a      	bls.n	80105c2 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	699a      	ldr	r2, [r3, #24]
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	7d1b      	ldrb	r3, [r3, #20]
 80105b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105bc:	b2da      	uxtb	r2, r3
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	699b      	ldr	r3, [r3, #24]
 80105c6:	68ba      	ldr	r2, [r7, #8]
 80105c8:	8992      	ldrh	r2, [r2, #12]
 80105ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80105ce:	fb01 f202 	mul.w	r2, r1, r2
 80105d2:	1a9b      	subs	r3, r3, r2
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d036      	beq.n	8010646 <f_lseek+0x43c>
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	6a1b      	ldr	r3, [r3, #32]
 80105dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80105de:	429a      	cmp	r2, r3
 80105e0:	d031      	beq.n	8010646 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	7d1b      	ldrb	r3, [r3, #20]
 80105e6:	b25b      	sxtb	r3, r3
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	da18      	bge.n	801061e <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80105ec:	68bb      	ldr	r3, [r7, #8]
 80105ee:	7858      	ldrb	r0, [r3, #1]
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	6a1a      	ldr	r2, [r3, #32]
 80105fa:	2301      	movs	r3, #1
 80105fc:	f7fc fe8a 	bl	800d314 <disk_write>
 8010600:	4603      	mov	r3, r0
 8010602:	2b00      	cmp	r3, #0
 8010604:	d004      	beq.n	8010610 <f_lseek+0x406>
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2201      	movs	r2, #1
 801060a:	755a      	strb	r2, [r3, #21]
 801060c:	2301      	movs	r3, #1
 801060e:	e01c      	b.n	801064a <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	7d1b      	ldrb	r3, [r3, #20]
 8010614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010618:	b2da      	uxtb	r2, r3
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801061e:	68bb      	ldr	r3, [r7, #8]
 8010620:	7858      	ldrb	r0, [r3, #1]
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010628:	2301      	movs	r3, #1
 801062a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801062c:	f7fc fe52 	bl	800d2d4 <disk_read>
 8010630:	4603      	mov	r3, r0
 8010632:	2b00      	cmp	r3, #0
 8010634:	d004      	beq.n	8010640 <f_lseek+0x436>
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	2201      	movs	r2, #1
 801063a:	755a      	strb	r2, [r3, #21]
 801063c:	2301      	movs	r3, #1
 801063e:	e004      	b.n	801064a <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010644:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010646:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801064a:	4618      	mov	r0, r3
 801064c:	3740      	adds	r7, #64	; 0x40
 801064e:	46bd      	mov	sp, r7
 8010650:	bd80      	pop	{r7, pc}

08010652 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010652:	b580      	push	{r7, lr}
 8010654:	b086      	sub	sp, #24
 8010656:	af00      	add	r7, sp, #0
 8010658:	6078      	str	r0, [r7, #4]
 801065a:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d101      	bne.n	8010666 <f_opendir+0x14>
 8010662:	2309      	movs	r3, #9
 8010664:	e064      	b.n	8010730 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801066a:	f107 010c 	add.w	r1, r7, #12
 801066e:	463b      	mov	r3, r7
 8010670:	2200      	movs	r2, #0
 8010672:	4618      	mov	r0, r3
 8010674:	f7fe fef4 	bl	800f460 <find_volume>
 8010678:	4603      	mov	r3, r0
 801067a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801067c:	7dfb      	ldrb	r3, [r7, #23]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d14f      	bne.n	8010722 <f_opendir+0xd0>
		obj->fs = fs;
 8010682:	68fa      	ldr	r2, [r7, #12]
 8010684:	693b      	ldr	r3, [r7, #16]
 8010686:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8010688:	683b      	ldr	r3, [r7, #0]
 801068a:	4619      	mov	r1, r3
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	f7fe fdd7 	bl	800f240 <follow_path>
 8010692:	4603      	mov	r3, r0
 8010694:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8010696:	7dfb      	ldrb	r3, [r7, #23]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d13d      	bne.n	8010718 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80106a2:	b25b      	sxtb	r3, r3
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	db12      	blt.n	80106ce <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80106a8:	693b      	ldr	r3, [r7, #16]
 80106aa:	799b      	ldrb	r3, [r3, #6]
 80106ac:	f003 0310 	and.w	r3, r3, #16
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d00a      	beq.n	80106ca <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80106b4:	68fa      	ldr	r2, [r7, #12]
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	6a1b      	ldr	r3, [r3, #32]
 80106ba:	4619      	mov	r1, r3
 80106bc:	4610      	mov	r0, r2
 80106be:	f7fd fe9f 	bl	800e400 <ld_clust>
 80106c2:	4602      	mov	r2, r0
 80106c4:	693b      	ldr	r3, [r7, #16]
 80106c6:	609a      	str	r2, [r3, #8]
 80106c8:	e001      	b.n	80106ce <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80106ca:	2305      	movs	r3, #5
 80106cc:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80106ce:	7dfb      	ldrb	r3, [r7, #23]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d121      	bne.n	8010718 <f_opendir+0xc6>
				obj->id = fs->id;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	88da      	ldrh	r2, [r3, #6]
 80106d8:	693b      	ldr	r3, [r7, #16]
 80106da:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80106dc:	2100      	movs	r1, #0
 80106de:	6878      	ldr	r0, [r7, #4]
 80106e0:	f7fd fce8 	bl	800e0b4 <dir_sdi>
 80106e4:	4603      	mov	r3, r0
 80106e6:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80106e8:	7dfb      	ldrb	r3, [r7, #23]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d114      	bne.n	8010718 <f_opendir+0xc6>
					if (obj->sclust) {
 80106ee:	693b      	ldr	r3, [r7, #16]
 80106f0:	689b      	ldr	r3, [r3, #8]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d00d      	beq.n	8010712 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80106f6:	2100      	movs	r1, #0
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f7fc ffc7 	bl	800d68c <inc_lock>
 80106fe:	4602      	mov	r2, r0
 8010700:	693b      	ldr	r3, [r7, #16]
 8010702:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8010704:	693b      	ldr	r3, [r7, #16]
 8010706:	691b      	ldr	r3, [r3, #16]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d105      	bne.n	8010718 <f_opendir+0xc6>
 801070c:	2312      	movs	r3, #18
 801070e:	75fb      	strb	r3, [r7, #23]
 8010710:	e002      	b.n	8010718 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8010712:	693b      	ldr	r3, [r7, #16]
 8010714:	2200      	movs	r2, #0
 8010716:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010718:	7dfb      	ldrb	r3, [r7, #23]
 801071a:	2b04      	cmp	r3, #4
 801071c:	d101      	bne.n	8010722 <f_opendir+0xd0>
 801071e:	2305      	movs	r3, #5
 8010720:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8010722:	7dfb      	ldrb	r3, [r7, #23]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d002      	beq.n	801072e <f_opendir+0xdc>
 8010728:	693b      	ldr	r3, [r7, #16]
 801072a:	2200      	movs	r2, #0
 801072c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801072e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010730:	4618      	mov	r0, r3
 8010732:	3718      	adds	r7, #24
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}

08010738 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b084      	sub	sp, #16
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	f107 0208 	add.w	r2, r7, #8
 8010746:	4611      	mov	r1, r2
 8010748:	4618      	mov	r0, r3
 801074a:	f7ff f90f 	bl	800f96c <validate>
 801074e:	4603      	mov	r3, r0
 8010750:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010752:	7bfb      	ldrb	r3, [r7, #15]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d110      	bne.n	801077a <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	691b      	ldr	r3, [r3, #16]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d006      	beq.n	801076e <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	691b      	ldr	r3, [r3, #16]
 8010764:	4618      	mov	r0, r3
 8010766:	f7fd f81f 	bl	800d7a8 <dec_lock>
 801076a:	4603      	mov	r3, r0
 801076c:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 801076e:	7bfb      	ldrb	r3, [r7, #15]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d102      	bne.n	801077a <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2200      	movs	r2, #0
 8010778:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801077a:	7bfb      	ldrb	r3, [r7, #15]
}
 801077c:	4618      	mov	r0, r3
 801077e:	3710      	adds	r7, #16
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}

08010784 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b084      	sub	sp, #16
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
 801078c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f107 0208 	add.w	r2, r7, #8
 8010794:	4611      	mov	r1, r2
 8010796:	4618      	mov	r0, r3
 8010798:	f7ff f8e8 	bl	800f96c <validate>
 801079c:	4603      	mov	r3, r0
 801079e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80107a0:	7bfb      	ldrb	r3, [r7, #15]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d126      	bne.n	80107f4 <f_readdir+0x70>
		if (!fno) {
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d106      	bne.n	80107ba <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80107ac:	2100      	movs	r1, #0
 80107ae:	6878      	ldr	r0, [r7, #4]
 80107b0:	f7fd fc80 	bl	800e0b4 <dir_sdi>
 80107b4:	4603      	mov	r3, r0
 80107b6:	73fb      	strb	r3, [r7, #15]
 80107b8:	e01c      	b.n	80107f4 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80107ba:	2100      	movs	r1, #0
 80107bc:	6878      	ldr	r0, [r7, #4]
 80107be:	f7fe f84a 	bl	800e856 <dir_read>
 80107c2:	4603      	mov	r3, r0
 80107c4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80107c6:	7bfb      	ldrb	r3, [r7, #15]
 80107c8:	2b04      	cmp	r3, #4
 80107ca:	d101      	bne.n	80107d0 <f_readdir+0x4c>
 80107cc:	2300      	movs	r3, #0
 80107ce:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80107d0:	7bfb      	ldrb	r3, [r7, #15]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d10e      	bne.n	80107f4 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80107d6:	6839      	ldr	r1, [r7, #0]
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f7fe fa9b 	bl	800ed14 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80107de:	2100      	movs	r1, #0
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f7fd fcf0 	bl	800e1c6 <dir_next>
 80107e6:	4603      	mov	r3, r0
 80107e8:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80107ea:	7bfb      	ldrb	r3, [r7, #15]
 80107ec:	2b04      	cmp	r3, #4
 80107ee:	d101      	bne.n	80107f4 <f_readdir+0x70>
 80107f0:	2300      	movs	r3, #0
 80107f2:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80107f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3710      	adds	r7, #16
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}

080107fe <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80107fe:	b580      	push	{r7, lr}
 8010800:	b092      	sub	sp, #72	; 0x48
 8010802:	af00      	add	r7, sp, #0
 8010804:	60f8      	str	r0, [r7, #12]
 8010806:	60b9      	str	r1, [r7, #8]
 8010808:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801080a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801080e:	f107 030c 	add.w	r3, r7, #12
 8010812:	2200      	movs	r2, #0
 8010814:	4618      	mov	r0, r3
 8010816:	f7fe fe23 	bl	800f460 <find_volume>
 801081a:	4603      	mov	r3, r0
 801081c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8010820:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010824:	2b00      	cmp	r3, #0
 8010826:	f040 8099 	bne.w	801095c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 801082a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8010830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010832:	699a      	ldr	r2, [r3, #24]
 8010834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010836:	69db      	ldr	r3, [r3, #28]
 8010838:	3b02      	subs	r3, #2
 801083a:	429a      	cmp	r2, r3
 801083c:	d804      	bhi.n	8010848 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 801083e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010840:	699a      	ldr	r2, [r3, #24]
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	601a      	str	r2, [r3, #0]
 8010846:	e089      	b.n	801095c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8010848:	2300      	movs	r3, #0
 801084a:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 801084c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801084e:	781b      	ldrb	r3, [r3, #0]
 8010850:	2b01      	cmp	r3, #1
 8010852:	d128      	bne.n	80108a6 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8010854:	2302      	movs	r3, #2
 8010856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801085a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 801085c:	f107 0314 	add.w	r3, r7, #20
 8010860:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010862:	4618      	mov	r0, r3
 8010864:	f7fd f901 	bl	800da6a <get_fat>
 8010868:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 801086a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801086c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010870:	d103      	bne.n	801087a <f_getfree+0x7c>
 8010872:	2301      	movs	r3, #1
 8010874:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8010878:	e063      	b.n	8010942 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 801087a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801087c:	2b01      	cmp	r3, #1
 801087e:	d103      	bne.n	8010888 <f_getfree+0x8a>
 8010880:	2302      	movs	r3, #2
 8010882:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8010886:	e05c      	b.n	8010942 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8010888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801088a:	2b00      	cmp	r3, #0
 801088c:	d102      	bne.n	8010894 <f_getfree+0x96>
 801088e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010890:	3301      	adds	r3, #1
 8010892:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8010894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010896:	3301      	adds	r3, #1
 8010898:	63fb      	str	r3, [r7, #60]	; 0x3c
 801089a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801089c:	69db      	ldr	r3, [r3, #28]
 801089e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80108a0:	429a      	cmp	r2, r3
 80108a2:	d3db      	bcc.n	801085c <f_getfree+0x5e>
 80108a4:	e04d      	b.n	8010942 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80108a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108a8:	69db      	ldr	r3, [r3, #28]
 80108aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80108ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108b0:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80108b2:	2300      	movs	r3, #0
 80108b4:	637b      	str	r3, [r7, #52]	; 0x34
 80108b6:	2300      	movs	r3, #0
 80108b8:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80108ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d113      	bne.n	80108e8 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80108c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108c4:	1c5a      	adds	r2, r3, #1
 80108c6:	63ba      	str	r2, [r7, #56]	; 0x38
 80108c8:	4619      	mov	r1, r3
 80108ca:	f7fd f811 	bl	800d8f0 <move_window>
 80108ce:	4603      	mov	r3, r0
 80108d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80108d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d131      	bne.n	8010940 <f_getfree+0x142>
							p = fs->win;
 80108dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108de:	3338      	adds	r3, #56	; 0x38
 80108e0:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80108e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e4:	899b      	ldrh	r3, [r3, #12]
 80108e6:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80108e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ea:	781b      	ldrb	r3, [r3, #0]
 80108ec:	2b02      	cmp	r3, #2
 80108ee:	d10f      	bne.n	8010910 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80108f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108f2:	f7fc fd4d 	bl	800d390 <ld_word>
 80108f6:	4603      	mov	r3, r0
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d102      	bne.n	8010902 <f_getfree+0x104>
 80108fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108fe:	3301      	adds	r3, #1
 8010900:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8010902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010904:	3302      	adds	r3, #2
 8010906:	633b      	str	r3, [r7, #48]	; 0x30
 8010908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801090a:	3b02      	subs	r3, #2
 801090c:	637b      	str	r3, [r7, #52]	; 0x34
 801090e:	e010      	b.n	8010932 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8010910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010912:	f7fc fd55 	bl	800d3c0 <ld_dword>
 8010916:	4603      	mov	r3, r0
 8010918:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801091c:	2b00      	cmp	r3, #0
 801091e:	d102      	bne.n	8010926 <f_getfree+0x128>
 8010920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010922:	3301      	adds	r3, #1
 8010924:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8010926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010928:	3304      	adds	r3, #4
 801092a:	633b      	str	r3, [r7, #48]	; 0x30
 801092c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801092e:	3b04      	subs	r3, #4
 8010930:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8010932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010934:	3b01      	subs	r3, #1
 8010936:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801093a:	2b00      	cmp	r3, #0
 801093c:	d1bd      	bne.n	80108ba <f_getfree+0xbc>
 801093e:	e000      	b.n	8010942 <f_getfree+0x144>
							if (res != FR_OK) break;
 8010940:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010946:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8010948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801094a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801094c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 801094e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010950:	791a      	ldrb	r2, [r3, #4]
 8010952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010954:	f042 0201 	orr.w	r2, r2, #1
 8010958:	b2d2      	uxtb	r2, r2
 801095a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 801095c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8010960:	4618      	mov	r0, r3
 8010962:	3748      	adds	r7, #72	; 0x48
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}

08010968 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8010968:	b580      	push	{r7, lr}
 801096a:	b088      	sub	sp, #32
 801096c:	af00      	add	r7, sp, #0
 801096e:	60f8      	str	r0, [r7, #12]
 8010970:	60b9      	str	r1, [r7, #8]
 8010972:	607a      	str	r2, [r7, #4]
	int n = 0;
 8010974:	2300      	movs	r3, #0
 8010976:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801097c:	e01b      	b.n	80109b6 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801097e:	f107 0310 	add.w	r3, r7, #16
 8010982:	f107 0114 	add.w	r1, r7, #20
 8010986:	2201      	movs	r2, #1
 8010988:	6878      	ldr	r0, [r7, #4]
 801098a:	f7ff fa37 	bl	800fdfc <f_read>
		if (rc != 1) break;
 801098e:	693b      	ldr	r3, [r7, #16]
 8010990:	2b01      	cmp	r3, #1
 8010992:	d116      	bne.n	80109c2 <f_gets+0x5a>
		c = s[0];
 8010994:	7d3b      	ldrb	r3, [r7, #20]
 8010996:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8010998:	7dfb      	ldrb	r3, [r7, #23]
 801099a:	2b0d      	cmp	r3, #13
 801099c:	d100      	bne.n	80109a0 <f_gets+0x38>
 801099e:	e00a      	b.n	80109b6 <f_gets+0x4e>
		*p++ = c;
 80109a0:	69bb      	ldr	r3, [r7, #24]
 80109a2:	1c5a      	adds	r2, r3, #1
 80109a4:	61ba      	str	r2, [r7, #24]
 80109a6:	7dfa      	ldrb	r2, [r7, #23]
 80109a8:	701a      	strb	r2, [r3, #0]
		n++;
 80109aa:	69fb      	ldr	r3, [r7, #28]
 80109ac:	3301      	adds	r3, #1
 80109ae:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80109b0:	7dfb      	ldrb	r3, [r7, #23]
 80109b2:	2b0a      	cmp	r3, #10
 80109b4:	d007      	beq.n	80109c6 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80109b6:	68bb      	ldr	r3, [r7, #8]
 80109b8:	3b01      	subs	r3, #1
 80109ba:	69fa      	ldr	r2, [r7, #28]
 80109bc:	429a      	cmp	r2, r3
 80109be:	dbde      	blt.n	801097e <f_gets+0x16>
 80109c0:	e002      	b.n	80109c8 <f_gets+0x60>
		if (rc != 1) break;
 80109c2:	bf00      	nop
 80109c4:	e000      	b.n	80109c8 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80109c6:	bf00      	nop
	}
	*p = 0;
 80109c8:	69bb      	ldr	r3, [r7, #24]
 80109ca:	2200      	movs	r2, #0
 80109cc:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80109ce:	69fb      	ldr	r3, [r7, #28]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d001      	beq.n	80109d8 <f_gets+0x70>
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	e000      	b.n	80109da <f_gets+0x72>
 80109d8:	2300      	movs	r3, #0
}
 80109da:	4618      	mov	r0, r3
 80109dc:	3720      	adds	r7, #32
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}
	...

080109e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80109e4:	b480      	push	{r7}
 80109e6:	b087      	sub	sp, #28
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	60f8      	str	r0, [r7, #12]
 80109ec:	60b9      	str	r1, [r7, #8]
 80109ee:	4613      	mov	r3, r2
 80109f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80109f2:	2301      	movs	r3, #1
 80109f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80109f6:	2300      	movs	r3, #0
 80109f8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80109fa:	4b1f      	ldr	r3, [pc, #124]	; (8010a78 <FATFS_LinkDriverEx+0x94>)
 80109fc:	7a5b      	ldrb	r3, [r3, #9]
 80109fe:	b2db      	uxtb	r3, r3
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d131      	bne.n	8010a68 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010a04:	4b1c      	ldr	r3, [pc, #112]	; (8010a78 <FATFS_LinkDriverEx+0x94>)
 8010a06:	7a5b      	ldrb	r3, [r3, #9]
 8010a08:	b2db      	uxtb	r3, r3
 8010a0a:	461a      	mov	r2, r3
 8010a0c:	4b1a      	ldr	r3, [pc, #104]	; (8010a78 <FATFS_LinkDriverEx+0x94>)
 8010a0e:	2100      	movs	r1, #0
 8010a10:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010a12:	4b19      	ldr	r3, [pc, #100]	; (8010a78 <FATFS_LinkDriverEx+0x94>)
 8010a14:	7a5b      	ldrb	r3, [r3, #9]
 8010a16:	b2db      	uxtb	r3, r3
 8010a18:	4a17      	ldr	r2, [pc, #92]	; (8010a78 <FATFS_LinkDriverEx+0x94>)
 8010a1a:	009b      	lsls	r3, r3, #2
 8010a1c:	4413      	add	r3, r2
 8010a1e:	68fa      	ldr	r2, [r7, #12]
 8010a20:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010a22:	4b15      	ldr	r3, [pc, #84]	; (8010a78 <FATFS_LinkDriverEx+0x94>)
 8010a24:	7a5b      	ldrb	r3, [r3, #9]
 8010a26:	b2db      	uxtb	r3, r3
 8010a28:	461a      	mov	r2, r3
 8010a2a:	4b13      	ldr	r3, [pc, #76]	; (8010a78 <FATFS_LinkDriverEx+0x94>)
 8010a2c:	4413      	add	r3, r2
 8010a2e:	79fa      	ldrb	r2, [r7, #7]
 8010a30:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010a32:	4b11      	ldr	r3, [pc, #68]	; (8010a78 <FATFS_LinkDriverEx+0x94>)
 8010a34:	7a5b      	ldrb	r3, [r3, #9]
 8010a36:	b2db      	uxtb	r3, r3
 8010a38:	1c5a      	adds	r2, r3, #1
 8010a3a:	b2d1      	uxtb	r1, r2
 8010a3c:	4a0e      	ldr	r2, [pc, #56]	; (8010a78 <FATFS_LinkDriverEx+0x94>)
 8010a3e:	7251      	strb	r1, [r2, #9]
 8010a40:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010a42:	7dbb      	ldrb	r3, [r7, #22]
 8010a44:	3330      	adds	r3, #48	; 0x30
 8010a46:	b2da      	uxtb	r2, r3
 8010a48:	68bb      	ldr	r3, [r7, #8]
 8010a4a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	3301      	adds	r3, #1
 8010a50:	223a      	movs	r2, #58	; 0x3a
 8010a52:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	3302      	adds	r3, #2
 8010a58:	222f      	movs	r2, #47	; 0x2f
 8010a5a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010a5c:	68bb      	ldr	r3, [r7, #8]
 8010a5e:	3303      	adds	r3, #3
 8010a60:	2200      	movs	r2, #0
 8010a62:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010a64:	2300      	movs	r3, #0
 8010a66:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	371c      	adds	r7, #28
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a74:	4770      	bx	lr
 8010a76:	bf00      	nop
 8010a78:	20002efc 	.word	0x20002efc

08010a7c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b082      	sub	sp, #8
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
 8010a84:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010a86:	2200      	movs	r2, #0
 8010a88:	6839      	ldr	r1, [r7, #0]
 8010a8a:	6878      	ldr	r0, [r7, #4]
 8010a8c:	f7ff ffaa 	bl	80109e4 <FATFS_LinkDriverEx>
 8010a90:	4603      	mov	r3, r0
}
 8010a92:	4618      	mov	r0, r3
 8010a94:	3708      	adds	r7, #8
 8010a96:	46bd      	mov	sp, r7
 8010a98:	bd80      	pop	{r7, pc}
	...

08010a9c <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8010a9c:	b480      	push	{r7}
 8010a9e:	b085      	sub	sp, #20
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
 8010aa4:	460b      	mov	r3, r1
 8010aa6:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8010aac:	2301      	movs	r3, #1
 8010aae:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8010ab0:	4b15      	ldr	r3, [pc, #84]	; (8010b08 <FATFS_UnLinkDriverEx+0x6c>)
 8010ab2:	7a5b      	ldrb	r3, [r3, #9]
 8010ab4:	b2db      	uxtb	r3, r3
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d01e      	beq.n	8010af8 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	781b      	ldrb	r3, [r3, #0]
 8010abe:	3b30      	subs	r3, #48	; 0x30
 8010ac0:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 8010ac2:	7bbb      	ldrb	r3, [r7, #14]
 8010ac4:	4a10      	ldr	r2, [pc, #64]	; (8010b08 <FATFS_UnLinkDriverEx+0x6c>)
 8010ac6:	009b      	lsls	r3, r3, #2
 8010ac8:	4413      	add	r3, r2
 8010aca:	685b      	ldr	r3, [r3, #4]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d013      	beq.n	8010af8 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8010ad0:	7bbb      	ldrb	r3, [r7, #14]
 8010ad2:	4a0d      	ldr	r2, [pc, #52]	; (8010b08 <FATFS_UnLinkDriverEx+0x6c>)
 8010ad4:	009b      	lsls	r3, r3, #2
 8010ad6:	4413      	add	r3, r2
 8010ad8:	2200      	movs	r2, #0
 8010ada:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8010adc:	7bbb      	ldrb	r3, [r7, #14]
 8010ade:	4a0a      	ldr	r2, [pc, #40]	; (8010b08 <FATFS_UnLinkDriverEx+0x6c>)
 8010ae0:	4413      	add	r3, r2
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8010ae6:	4b08      	ldr	r3, [pc, #32]	; (8010b08 <FATFS_UnLinkDriverEx+0x6c>)
 8010ae8:	7a5b      	ldrb	r3, [r3, #9]
 8010aea:	b2db      	uxtb	r3, r3
 8010aec:	3b01      	subs	r3, #1
 8010aee:	b2da      	uxtb	r2, r3
 8010af0:	4b05      	ldr	r3, [pc, #20]	; (8010b08 <FATFS_UnLinkDriverEx+0x6c>)
 8010af2:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8010af4:	2300      	movs	r3, #0
 8010af6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8010af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	3714      	adds	r7, #20
 8010afe:	46bd      	mov	sp, r7
 8010b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b04:	4770      	bx	lr
 8010b06:	bf00      	nop
 8010b08:	20002efc 	.word	0x20002efc

08010b0c <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b082      	sub	sp, #8
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8010b14:	2100      	movs	r1, #0
 8010b16:	6878      	ldr	r0, [r7, #4]
 8010b18:	f7ff ffc0 	bl	8010a9c <FATFS_UnLinkDriverEx>
 8010b1c:	4603      	mov	r3, r0
}
 8010b1e:	4618      	mov	r0, r3
 8010b20:	3708      	adds	r7, #8
 8010b22:	46bd      	mov	sp, r7
 8010b24:	bd80      	pop	{r7, pc}
	...

08010b28 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010b28:	b480      	push	{r7}
 8010b2a:	b085      	sub	sp, #20
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	4603      	mov	r3, r0
 8010b30:	6039      	str	r1, [r7, #0]
 8010b32:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010b34:	88fb      	ldrh	r3, [r7, #6]
 8010b36:	2b7f      	cmp	r3, #127	; 0x7f
 8010b38:	d802      	bhi.n	8010b40 <ff_convert+0x18>
		c = chr;
 8010b3a:	88fb      	ldrh	r3, [r7, #6]
 8010b3c:	81fb      	strh	r3, [r7, #14]
 8010b3e:	e025      	b.n	8010b8c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010b40:	683b      	ldr	r3, [r7, #0]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d00b      	beq.n	8010b5e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010b46:	88fb      	ldrh	r3, [r7, #6]
 8010b48:	2bff      	cmp	r3, #255	; 0xff
 8010b4a:	d805      	bhi.n	8010b58 <ff_convert+0x30>
 8010b4c:	88fb      	ldrh	r3, [r7, #6]
 8010b4e:	3b80      	subs	r3, #128	; 0x80
 8010b50:	4a12      	ldr	r2, [pc, #72]	; (8010b9c <ff_convert+0x74>)
 8010b52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b56:	e000      	b.n	8010b5a <ff_convert+0x32>
 8010b58:	2300      	movs	r3, #0
 8010b5a:	81fb      	strh	r3, [r7, #14]
 8010b5c:	e016      	b.n	8010b8c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010b5e:	2300      	movs	r3, #0
 8010b60:	81fb      	strh	r3, [r7, #14]
 8010b62:	e009      	b.n	8010b78 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010b64:	89fb      	ldrh	r3, [r7, #14]
 8010b66:	4a0d      	ldr	r2, [pc, #52]	; (8010b9c <ff_convert+0x74>)
 8010b68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b6c:	88fa      	ldrh	r2, [r7, #6]
 8010b6e:	429a      	cmp	r2, r3
 8010b70:	d006      	beq.n	8010b80 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010b72:	89fb      	ldrh	r3, [r7, #14]
 8010b74:	3301      	adds	r3, #1
 8010b76:	81fb      	strh	r3, [r7, #14]
 8010b78:	89fb      	ldrh	r3, [r7, #14]
 8010b7a:	2b7f      	cmp	r3, #127	; 0x7f
 8010b7c:	d9f2      	bls.n	8010b64 <ff_convert+0x3c>
 8010b7e:	e000      	b.n	8010b82 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010b80:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010b82:	89fb      	ldrh	r3, [r7, #14]
 8010b84:	3380      	adds	r3, #128	; 0x80
 8010b86:	b29b      	uxth	r3, r3
 8010b88:	b2db      	uxtb	r3, r3
 8010b8a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010b8c:	89fb      	ldrh	r3, [r7, #14]
}
 8010b8e:	4618      	mov	r0, r3
 8010b90:	3714      	adds	r7, #20
 8010b92:	46bd      	mov	sp, r7
 8010b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b98:	4770      	bx	lr
 8010b9a:	bf00      	nop
 8010b9c:	08011e5c 	.word	0x08011e5c

08010ba0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010ba0:	b480      	push	{r7}
 8010ba2:	b087      	sub	sp, #28
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010baa:	88fb      	ldrh	r3, [r7, #6]
 8010bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010bb0:	d201      	bcs.n	8010bb6 <ff_wtoupper+0x16>
 8010bb2:	4b3e      	ldr	r3, [pc, #248]	; (8010cac <ff_wtoupper+0x10c>)
 8010bb4:	e000      	b.n	8010bb8 <ff_wtoupper+0x18>
 8010bb6:	4b3e      	ldr	r3, [pc, #248]	; (8010cb0 <ff_wtoupper+0x110>)
 8010bb8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	1c9a      	adds	r2, r3, #2
 8010bbe:	617a      	str	r2, [r7, #20]
 8010bc0:	881b      	ldrh	r3, [r3, #0]
 8010bc2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010bc4:	8a7b      	ldrh	r3, [r7, #18]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d068      	beq.n	8010c9c <ff_wtoupper+0xfc>
 8010bca:	88fa      	ldrh	r2, [r7, #6]
 8010bcc:	8a7b      	ldrh	r3, [r7, #18]
 8010bce:	429a      	cmp	r2, r3
 8010bd0:	d364      	bcc.n	8010c9c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010bd2:	697b      	ldr	r3, [r7, #20]
 8010bd4:	1c9a      	adds	r2, r3, #2
 8010bd6:	617a      	str	r2, [r7, #20]
 8010bd8:	881b      	ldrh	r3, [r3, #0]
 8010bda:	823b      	strh	r3, [r7, #16]
 8010bdc:	8a3b      	ldrh	r3, [r7, #16]
 8010bde:	0a1b      	lsrs	r3, r3, #8
 8010be0:	81fb      	strh	r3, [r7, #14]
 8010be2:	8a3b      	ldrh	r3, [r7, #16]
 8010be4:	b2db      	uxtb	r3, r3
 8010be6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010be8:	88fa      	ldrh	r2, [r7, #6]
 8010bea:	8a79      	ldrh	r1, [r7, #18]
 8010bec:	8a3b      	ldrh	r3, [r7, #16]
 8010bee:	440b      	add	r3, r1
 8010bf0:	429a      	cmp	r2, r3
 8010bf2:	da49      	bge.n	8010c88 <ff_wtoupper+0xe8>
			switch (cmd) {
 8010bf4:	89fb      	ldrh	r3, [r7, #14]
 8010bf6:	2b08      	cmp	r3, #8
 8010bf8:	d84f      	bhi.n	8010c9a <ff_wtoupper+0xfa>
 8010bfa:	a201      	add	r2, pc, #4	; (adr r2, 8010c00 <ff_wtoupper+0x60>)
 8010bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c00:	08010c25 	.word	0x08010c25
 8010c04:	08010c37 	.word	0x08010c37
 8010c08:	08010c4d 	.word	0x08010c4d
 8010c0c:	08010c55 	.word	0x08010c55
 8010c10:	08010c5d 	.word	0x08010c5d
 8010c14:	08010c65 	.word	0x08010c65
 8010c18:	08010c6d 	.word	0x08010c6d
 8010c1c:	08010c75 	.word	0x08010c75
 8010c20:	08010c7d 	.word	0x08010c7d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010c24:	88fa      	ldrh	r2, [r7, #6]
 8010c26:	8a7b      	ldrh	r3, [r7, #18]
 8010c28:	1ad3      	subs	r3, r2, r3
 8010c2a:	005b      	lsls	r3, r3, #1
 8010c2c:	697a      	ldr	r2, [r7, #20]
 8010c2e:	4413      	add	r3, r2
 8010c30:	881b      	ldrh	r3, [r3, #0]
 8010c32:	80fb      	strh	r3, [r7, #6]
 8010c34:	e027      	b.n	8010c86 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010c36:	88fa      	ldrh	r2, [r7, #6]
 8010c38:	8a7b      	ldrh	r3, [r7, #18]
 8010c3a:	1ad3      	subs	r3, r2, r3
 8010c3c:	b29b      	uxth	r3, r3
 8010c3e:	f003 0301 	and.w	r3, r3, #1
 8010c42:	b29b      	uxth	r3, r3
 8010c44:	88fa      	ldrh	r2, [r7, #6]
 8010c46:	1ad3      	subs	r3, r2, r3
 8010c48:	80fb      	strh	r3, [r7, #6]
 8010c4a:	e01c      	b.n	8010c86 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010c4c:	88fb      	ldrh	r3, [r7, #6]
 8010c4e:	3b10      	subs	r3, #16
 8010c50:	80fb      	strh	r3, [r7, #6]
 8010c52:	e018      	b.n	8010c86 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010c54:	88fb      	ldrh	r3, [r7, #6]
 8010c56:	3b20      	subs	r3, #32
 8010c58:	80fb      	strh	r3, [r7, #6]
 8010c5a:	e014      	b.n	8010c86 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010c5c:	88fb      	ldrh	r3, [r7, #6]
 8010c5e:	3b30      	subs	r3, #48	; 0x30
 8010c60:	80fb      	strh	r3, [r7, #6]
 8010c62:	e010      	b.n	8010c86 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010c64:	88fb      	ldrh	r3, [r7, #6]
 8010c66:	3b1a      	subs	r3, #26
 8010c68:	80fb      	strh	r3, [r7, #6]
 8010c6a:	e00c      	b.n	8010c86 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010c6c:	88fb      	ldrh	r3, [r7, #6]
 8010c6e:	3308      	adds	r3, #8
 8010c70:	80fb      	strh	r3, [r7, #6]
 8010c72:	e008      	b.n	8010c86 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010c74:	88fb      	ldrh	r3, [r7, #6]
 8010c76:	3b50      	subs	r3, #80	; 0x50
 8010c78:	80fb      	strh	r3, [r7, #6]
 8010c7a:	e004      	b.n	8010c86 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010c7c:	88fb      	ldrh	r3, [r7, #6]
 8010c7e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010c82:	80fb      	strh	r3, [r7, #6]
 8010c84:	bf00      	nop
			}
			break;
 8010c86:	e008      	b.n	8010c9a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010c88:	89fb      	ldrh	r3, [r7, #14]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d195      	bne.n	8010bba <ff_wtoupper+0x1a>
 8010c8e:	8a3b      	ldrh	r3, [r7, #16]
 8010c90:	005b      	lsls	r3, r3, #1
 8010c92:	697a      	ldr	r2, [r7, #20]
 8010c94:	4413      	add	r3, r2
 8010c96:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010c98:	e78f      	b.n	8010bba <ff_wtoupper+0x1a>
			break;
 8010c9a:	bf00      	nop
	}

	return chr;
 8010c9c:	88fb      	ldrh	r3, [r7, #6]
}
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	371c      	adds	r7, #28
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca8:	4770      	bx	lr
 8010caa:	bf00      	nop
 8010cac:	08011f5c 	.word	0x08011f5c
 8010cb0:	08012150 	.word	0x08012150

08010cb4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010cb8:	2201      	movs	r2, #1
 8010cba:	490e      	ldr	r1, [pc, #56]	; (8010cf4 <MX_USB_HOST_Init+0x40>)
 8010cbc:	480e      	ldr	r0, [pc, #56]	; (8010cf8 <MX_USB_HOST_Init+0x44>)
 8010cbe:	f7fa fe77 	bl	800b9b0 <USBH_Init>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d001      	beq.n	8010ccc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010cc8:	f7f2 fba1 	bl	800340e <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8010ccc:	490b      	ldr	r1, [pc, #44]	; (8010cfc <MX_USB_HOST_Init+0x48>)
 8010cce:	480a      	ldr	r0, [pc, #40]	; (8010cf8 <MX_USB_HOST_Init+0x44>)
 8010cd0:	f7fa fefc 	bl	800bacc <USBH_RegisterClass>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d001      	beq.n	8010cde <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010cda:	f7f2 fb98 	bl	800340e <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010cde:	4806      	ldr	r0, [pc, #24]	; (8010cf8 <MX_USB_HOST_Init+0x44>)
 8010ce0:	f7fa ff80 	bl	800bbe4 <USBH_Start>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d001      	beq.n	8010cee <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010cea:	f7f2 fb90 	bl	800340e <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010cee:	bf00      	nop
 8010cf0:	bd80      	pop	{r7, pc}
 8010cf2:	bf00      	nop
 8010cf4:	08010d15 	.word	0x08010d15
 8010cf8:	20002f08 	.word	0x20002f08
 8010cfc:	2000003c 	.word	0x2000003c

08010d00 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8010d04:	4802      	ldr	r0, [pc, #8]	; (8010d10 <MX_USB_HOST_Process+0x10>)
 8010d06:	f7fa ff7d 	bl	800bc04 <USBH_Process>
}
 8010d0a:	bf00      	nop
 8010d0c:	bd80      	pop	{r7, pc}
 8010d0e:	bf00      	nop
 8010d10:	20002f08 	.word	0x20002f08

08010d14 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010d14:	b480      	push	{r7}
 8010d16:	b083      	sub	sp, #12
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
 8010d1c:	460b      	mov	r3, r1
 8010d1e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010d20:	78fb      	ldrb	r3, [r7, #3]
 8010d22:	3b01      	subs	r3, #1
 8010d24:	2b04      	cmp	r3, #4
 8010d26:	d819      	bhi.n	8010d5c <USBH_UserProcess+0x48>
 8010d28:	a201      	add	r2, pc, #4	; (adr r2, 8010d30 <USBH_UserProcess+0x1c>)
 8010d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d2e:	bf00      	nop
 8010d30:	08010d5d 	.word	0x08010d5d
 8010d34:	08010d4d 	.word	0x08010d4d
 8010d38:	08010d5d 	.word	0x08010d5d
 8010d3c:	08010d55 	.word	0x08010d55
 8010d40:	08010d45 	.word	0x08010d45
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010d44:	4b09      	ldr	r3, [pc, #36]	; (8010d6c <USBH_UserProcess+0x58>)
 8010d46:	2203      	movs	r2, #3
 8010d48:	701a      	strb	r2, [r3, #0]
  break;
 8010d4a:	e008      	b.n	8010d5e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010d4c:	4b07      	ldr	r3, [pc, #28]	; (8010d6c <USBH_UserProcess+0x58>)
 8010d4e:	2202      	movs	r2, #2
 8010d50:	701a      	strb	r2, [r3, #0]
  break;
 8010d52:	e004      	b.n	8010d5e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010d54:	4b05      	ldr	r3, [pc, #20]	; (8010d6c <USBH_UserProcess+0x58>)
 8010d56:	2201      	movs	r2, #1
 8010d58:	701a      	strb	r2, [r3, #0]
  break;
 8010d5a:	e000      	b.n	8010d5e <USBH_UserProcess+0x4a>

  default:
  break;
 8010d5c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010d5e:	bf00      	nop
 8010d60:	370c      	adds	r7, #12
 8010d62:	46bd      	mov	sp, r7
 8010d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d68:	4770      	bx	lr
 8010d6a:	bf00      	nop
 8010d6c:	200032e0 	.word	0x200032e0

08010d70 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b08a      	sub	sp, #40	; 0x28
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010d78:	f107 0314 	add.w	r3, r7, #20
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	601a      	str	r2, [r3, #0]
 8010d80:	605a      	str	r2, [r3, #4]
 8010d82:	609a      	str	r2, [r3, #8]
 8010d84:	60da      	str	r2, [r3, #12]
 8010d86:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010d90:	d147      	bne.n	8010e22 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010d92:	2300      	movs	r3, #0
 8010d94:	613b      	str	r3, [r7, #16]
 8010d96:	4b25      	ldr	r3, [pc, #148]	; (8010e2c <HAL_HCD_MspInit+0xbc>)
 8010d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d9a:	4a24      	ldr	r2, [pc, #144]	; (8010e2c <HAL_HCD_MspInit+0xbc>)
 8010d9c:	f043 0301 	orr.w	r3, r3, #1
 8010da0:	6313      	str	r3, [r2, #48]	; 0x30
 8010da2:	4b22      	ldr	r3, [pc, #136]	; (8010e2c <HAL_HCD_MspInit+0xbc>)
 8010da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010da6:	f003 0301 	and.w	r3, r3, #1
 8010daa:	613b      	str	r3, [r7, #16]
 8010dac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8010dae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010db4:	2300      	movs	r3, #0
 8010db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010db8:	2300      	movs	r3, #0
 8010dba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8010dbc:	f107 0314 	add.w	r3, r7, #20
 8010dc0:	4619      	mov	r1, r3
 8010dc2:	481b      	ldr	r0, [pc, #108]	; (8010e30 <HAL_HCD_MspInit+0xc0>)
 8010dc4:	f7f4 f9f8 	bl	80051b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8010dc8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8010dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010dce:	2302      	movs	r3, #2
 8010dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010dda:	230a      	movs	r3, #10
 8010ddc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010dde:	f107 0314 	add.w	r3, r7, #20
 8010de2:	4619      	mov	r1, r3
 8010de4:	4812      	ldr	r0, [pc, #72]	; (8010e30 <HAL_HCD_MspInit+0xc0>)
 8010de6:	f7f4 f9e7 	bl	80051b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010dea:	4b10      	ldr	r3, [pc, #64]	; (8010e2c <HAL_HCD_MspInit+0xbc>)
 8010dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dee:	4a0f      	ldr	r2, [pc, #60]	; (8010e2c <HAL_HCD_MspInit+0xbc>)
 8010df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010df4:	6353      	str	r3, [r2, #52]	; 0x34
 8010df6:	2300      	movs	r3, #0
 8010df8:	60fb      	str	r3, [r7, #12]
 8010dfa:	4b0c      	ldr	r3, [pc, #48]	; (8010e2c <HAL_HCD_MspInit+0xbc>)
 8010dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010dfe:	4a0b      	ldr	r2, [pc, #44]	; (8010e2c <HAL_HCD_MspInit+0xbc>)
 8010e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010e04:	6453      	str	r3, [r2, #68]	; 0x44
 8010e06:	4b09      	ldr	r3, [pc, #36]	; (8010e2c <HAL_HCD_MspInit+0xbc>)
 8010e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010e0e:	60fb      	str	r3, [r7, #12]
 8010e10:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010e12:	2200      	movs	r2, #0
 8010e14:	2100      	movs	r1, #0
 8010e16:	2043      	movs	r0, #67	; 0x43
 8010e18:	f7f3 fd95 	bl	8004946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010e1c:	2043      	movs	r0, #67	; 0x43
 8010e1e:	f7f3 fdae 	bl	800497e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010e22:	bf00      	nop
 8010e24:	3728      	adds	r7, #40	; 0x28
 8010e26:	46bd      	mov	sp, r7
 8010e28:	bd80      	pop	{r7, pc}
 8010e2a:	bf00      	nop
 8010e2c:	40023800 	.word	0x40023800
 8010e30:	40020000 	.word	0x40020000

08010e34 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b082      	sub	sp, #8
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010e42:	4618      	mov	r0, r3
 8010e44:	f7fb fabd 	bl	800c3c2 <USBH_LL_IncTimer>
}
 8010e48:	bf00      	nop
 8010e4a:	3708      	adds	r7, #8
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd80      	pop	{r7, pc}

08010e50 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b082      	sub	sp, #8
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f7fb faf5 	bl	800c44e <USBH_LL_Connect>
}
 8010e64:	bf00      	nop
 8010e66:	3708      	adds	r7, #8
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	bd80      	pop	{r7, pc}

08010e6c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b082      	sub	sp, #8
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f7fb fafe 	bl	800c47c <USBH_LL_Disconnect>
}
 8010e80:	bf00      	nop
 8010e82:	3708      	adds	r7, #8
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}

08010e88 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010e88:	b480      	push	{r7}
 8010e8a:	b083      	sub	sp, #12
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
 8010e90:	460b      	mov	r3, r1
 8010e92:	70fb      	strb	r3, [r7, #3]
 8010e94:	4613      	mov	r3, r2
 8010e96:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8010e98:	bf00      	nop
 8010e9a:	370c      	adds	r7, #12
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea2:	4770      	bx	lr

08010ea4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b082      	sub	sp, #8
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f7fb faaf 	bl	800c416 <USBH_LL_PortEnabled>
}
 8010eb8:	bf00      	nop
 8010eba:	3708      	adds	r7, #8
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	bd80      	pop	{r7, pc}

08010ec0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b082      	sub	sp, #8
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f7fb faaf 	bl	800c432 <USBH_LL_PortDisabled>
}
 8010ed4:	bf00      	nop
 8010ed6:	3708      	adds	r7, #8
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd80      	pop	{r7, pc}

08010edc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b082      	sub	sp, #8
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010eea:	2b01      	cmp	r3, #1
 8010eec:	d12a      	bne.n	8010f44 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010eee:	4a18      	ldr	r2, [pc, #96]	; (8010f50 <USBH_LL_Init+0x74>)
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	4a15      	ldr	r2, [pc, #84]	; (8010f50 <USBH_LL_Init+0x74>)
 8010efa:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010efe:	4b14      	ldr	r3, [pc, #80]	; (8010f50 <USBH_LL_Init+0x74>)
 8010f00:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010f04:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010f06:	4b12      	ldr	r3, [pc, #72]	; (8010f50 <USBH_LL_Init+0x74>)
 8010f08:	2208      	movs	r2, #8
 8010f0a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010f0c:	4b10      	ldr	r3, [pc, #64]	; (8010f50 <USBH_LL_Init+0x74>)
 8010f0e:	2201      	movs	r2, #1
 8010f10:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010f12:	4b0f      	ldr	r3, [pc, #60]	; (8010f50 <USBH_LL_Init+0x74>)
 8010f14:	2200      	movs	r2, #0
 8010f16:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010f18:	4b0d      	ldr	r3, [pc, #52]	; (8010f50 <USBH_LL_Init+0x74>)
 8010f1a:	2202      	movs	r2, #2
 8010f1c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010f1e:	4b0c      	ldr	r3, [pc, #48]	; (8010f50 <USBH_LL_Init+0x74>)
 8010f20:	2200      	movs	r2, #0
 8010f22:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010f24:	480a      	ldr	r0, [pc, #40]	; (8010f50 <USBH_LL_Init+0x74>)
 8010f26:	f7f4 fb16 	bl	8005556 <HAL_HCD_Init>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d001      	beq.n	8010f34 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010f30:	f7f2 fa6d 	bl	800340e <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010f34:	4806      	ldr	r0, [pc, #24]	; (8010f50 <USBH_LL_Init+0x74>)
 8010f36:	f7f4 fefa 	bl	8005d2e <HAL_HCD_GetCurrentFrame>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	4619      	mov	r1, r3
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f7fb fa30 	bl	800c3a4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010f44:	2300      	movs	r3, #0
}
 8010f46:	4618      	mov	r0, r3
 8010f48:	3708      	adds	r7, #8
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}
 8010f4e:	bf00      	nop
 8010f50:	200032e4 	.word	0x200032e4

08010f54 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b084      	sub	sp, #16
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010f60:	2300      	movs	r3, #0
 8010f62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f7f4 fe69 	bl	8005c42 <HAL_HCD_Start>
 8010f70:	4603      	mov	r3, r0
 8010f72:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010f74:	7bfb      	ldrb	r3, [r7, #15]
 8010f76:	4618      	mov	r0, r3
 8010f78:	f000 f95c 	bl	8011234 <USBH_Get_USB_Status>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f80:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f82:	4618      	mov	r0, r3
 8010f84:	3710      	adds	r7, #16
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bd80      	pop	{r7, pc}

08010f8a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010f8a:	b580      	push	{r7, lr}
 8010f8c:	b084      	sub	sp, #16
 8010f8e:	af00      	add	r7, sp, #0
 8010f90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f92:	2300      	movs	r3, #0
 8010f94:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010f96:	2300      	movs	r3, #0
 8010f98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	f7f4 fe71 	bl	8005c88 <HAL_HCD_Stop>
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010faa:	7bfb      	ldrb	r3, [r7, #15]
 8010fac:	4618      	mov	r0, r3
 8010fae:	f000 f941 	bl	8011234 <USBH_Get_USB_Status>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010fb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8010fb8:	4618      	mov	r0, r3
 8010fba:	3710      	adds	r7, #16
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bd80      	pop	{r7, pc}

08010fc0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b084      	sub	sp, #16
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010fc8:	2301      	movs	r3, #1
 8010fca:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f7f4 feb9 	bl	8005d4a <HAL_HCD_GetCurrentSpeed>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	2b02      	cmp	r3, #2
 8010fdc:	d00c      	beq.n	8010ff8 <USBH_LL_GetSpeed+0x38>
 8010fde:	2b02      	cmp	r3, #2
 8010fe0:	d80d      	bhi.n	8010ffe <USBH_LL_GetSpeed+0x3e>
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d002      	beq.n	8010fec <USBH_LL_GetSpeed+0x2c>
 8010fe6:	2b01      	cmp	r3, #1
 8010fe8:	d003      	beq.n	8010ff2 <USBH_LL_GetSpeed+0x32>
 8010fea:	e008      	b.n	8010ffe <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010fec:	2300      	movs	r3, #0
 8010fee:	73fb      	strb	r3, [r7, #15]
    break;
 8010ff0:	e008      	b.n	8011004 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010ff2:	2301      	movs	r3, #1
 8010ff4:	73fb      	strb	r3, [r7, #15]
    break;
 8010ff6:	e005      	b.n	8011004 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010ff8:	2302      	movs	r3, #2
 8010ffa:	73fb      	strb	r3, [r7, #15]
    break;
 8010ffc:	e002      	b.n	8011004 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010ffe:	2301      	movs	r3, #1
 8011000:	73fb      	strb	r3, [r7, #15]
    break;
 8011002:	bf00      	nop
  }
  return  speed;
 8011004:	7bfb      	ldrb	r3, [r7, #15]
}
 8011006:	4618      	mov	r0, r3
 8011008:	3710      	adds	r7, #16
 801100a:	46bd      	mov	sp, r7
 801100c:	bd80      	pop	{r7, pc}

0801100e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801100e:	b580      	push	{r7, lr}
 8011010:	b084      	sub	sp, #16
 8011012:	af00      	add	r7, sp, #0
 8011014:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011016:	2300      	movs	r3, #0
 8011018:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801101a:	2300      	movs	r3, #0
 801101c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011024:	4618      	mov	r0, r3
 8011026:	f7f4 fe4c 	bl	8005cc2 <HAL_HCD_ResetPort>
 801102a:	4603      	mov	r3, r0
 801102c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801102e:	7bfb      	ldrb	r3, [r7, #15]
 8011030:	4618      	mov	r0, r3
 8011032:	f000 f8ff 	bl	8011234 <USBH_Get_USB_Status>
 8011036:	4603      	mov	r3, r0
 8011038:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801103a:	7bbb      	ldrb	r3, [r7, #14]
}
 801103c:	4618      	mov	r0, r3
 801103e:	3710      	adds	r7, #16
 8011040:	46bd      	mov	sp, r7
 8011042:	bd80      	pop	{r7, pc}

08011044 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011044:	b580      	push	{r7, lr}
 8011046:	b082      	sub	sp, #8
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
 801104c:	460b      	mov	r3, r1
 801104e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011056:	78fa      	ldrb	r2, [r7, #3]
 8011058:	4611      	mov	r1, r2
 801105a:	4618      	mov	r0, r3
 801105c:	f7f4 fe53 	bl	8005d06 <HAL_HCD_HC_GetXferCount>
 8011060:	4603      	mov	r3, r0
}
 8011062:	4618      	mov	r0, r3
 8011064:	3708      	adds	r7, #8
 8011066:	46bd      	mov	sp, r7
 8011068:	bd80      	pop	{r7, pc}

0801106a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801106a:	b590      	push	{r4, r7, lr}
 801106c:	b089      	sub	sp, #36	; 0x24
 801106e:	af04      	add	r7, sp, #16
 8011070:	6078      	str	r0, [r7, #4]
 8011072:	4608      	mov	r0, r1
 8011074:	4611      	mov	r1, r2
 8011076:	461a      	mov	r2, r3
 8011078:	4603      	mov	r3, r0
 801107a:	70fb      	strb	r3, [r7, #3]
 801107c:	460b      	mov	r3, r1
 801107e:	70bb      	strb	r3, [r7, #2]
 8011080:	4613      	mov	r3, r2
 8011082:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011084:	2300      	movs	r3, #0
 8011086:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011088:	2300      	movs	r3, #0
 801108a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011092:	787c      	ldrb	r4, [r7, #1]
 8011094:	78ba      	ldrb	r2, [r7, #2]
 8011096:	78f9      	ldrb	r1, [r7, #3]
 8011098:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801109a:	9302      	str	r3, [sp, #8]
 801109c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80110a0:	9301      	str	r3, [sp, #4]
 80110a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80110a6:	9300      	str	r3, [sp, #0]
 80110a8:	4623      	mov	r3, r4
 80110aa:	f7f4 fab6 	bl	800561a <HAL_HCD_HC_Init>
 80110ae:	4603      	mov	r3, r0
 80110b0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80110b2:	7bfb      	ldrb	r3, [r7, #15]
 80110b4:	4618      	mov	r0, r3
 80110b6:	f000 f8bd 	bl	8011234 <USBH_Get_USB_Status>
 80110ba:	4603      	mov	r3, r0
 80110bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80110be:	7bbb      	ldrb	r3, [r7, #14]
}
 80110c0:	4618      	mov	r0, r3
 80110c2:	3714      	adds	r7, #20
 80110c4:	46bd      	mov	sp, r7
 80110c6:	bd90      	pop	{r4, r7, pc}

080110c8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b084      	sub	sp, #16
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
 80110d0:	460b      	mov	r3, r1
 80110d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110d4:	2300      	movs	r3, #0
 80110d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80110d8:	2300      	movs	r3, #0
 80110da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80110e2:	78fa      	ldrb	r2, [r7, #3]
 80110e4:	4611      	mov	r1, r2
 80110e6:	4618      	mov	r0, r3
 80110e8:	f7f4 fb26 	bl	8005738 <HAL_HCD_HC_Halt>
 80110ec:	4603      	mov	r3, r0
 80110ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80110f0:	7bfb      	ldrb	r3, [r7, #15]
 80110f2:	4618      	mov	r0, r3
 80110f4:	f000 f89e 	bl	8011234 <USBH_Get_USB_Status>
 80110f8:	4603      	mov	r3, r0
 80110fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80110fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80110fe:	4618      	mov	r0, r3
 8011100:	3710      	adds	r7, #16
 8011102:	46bd      	mov	sp, r7
 8011104:	bd80      	pop	{r7, pc}

08011106 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8011106:	b590      	push	{r4, r7, lr}
 8011108:	b089      	sub	sp, #36	; 0x24
 801110a:	af04      	add	r7, sp, #16
 801110c:	6078      	str	r0, [r7, #4]
 801110e:	4608      	mov	r0, r1
 8011110:	4611      	mov	r1, r2
 8011112:	461a      	mov	r2, r3
 8011114:	4603      	mov	r3, r0
 8011116:	70fb      	strb	r3, [r7, #3]
 8011118:	460b      	mov	r3, r1
 801111a:	70bb      	strb	r3, [r7, #2]
 801111c:	4613      	mov	r3, r2
 801111e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011120:	2300      	movs	r3, #0
 8011122:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011124:	2300      	movs	r3, #0
 8011126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801112e:	787c      	ldrb	r4, [r7, #1]
 8011130:	78ba      	ldrb	r2, [r7, #2]
 8011132:	78f9      	ldrb	r1, [r7, #3]
 8011134:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011138:	9303      	str	r3, [sp, #12]
 801113a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801113c:	9302      	str	r3, [sp, #8]
 801113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011140:	9301      	str	r3, [sp, #4]
 8011142:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011146:	9300      	str	r3, [sp, #0]
 8011148:	4623      	mov	r3, r4
 801114a:	f7f4 fb19 	bl	8005780 <HAL_HCD_HC_SubmitRequest>
 801114e:	4603      	mov	r3, r0
 8011150:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8011152:	7bfb      	ldrb	r3, [r7, #15]
 8011154:	4618      	mov	r0, r3
 8011156:	f000 f86d 	bl	8011234 <USBH_Get_USB_Status>
 801115a:	4603      	mov	r3, r0
 801115c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801115e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011160:	4618      	mov	r0, r3
 8011162:	3714      	adds	r7, #20
 8011164:	46bd      	mov	sp, r7
 8011166:	bd90      	pop	{r4, r7, pc}

08011168 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b082      	sub	sp, #8
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
 8011170:	460b      	mov	r3, r1
 8011172:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801117a:	78fa      	ldrb	r2, [r7, #3]
 801117c:	4611      	mov	r1, r2
 801117e:	4618      	mov	r0, r3
 8011180:	f7f4 fdad 	bl	8005cde <HAL_HCD_HC_GetURBState>
 8011184:	4603      	mov	r3, r0
}
 8011186:	4618      	mov	r0, r3
 8011188:	3708      	adds	r7, #8
 801118a:	46bd      	mov	sp, r7
 801118c:	bd80      	pop	{r7, pc}

0801118e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801118e:	b580      	push	{r7, lr}
 8011190:	b082      	sub	sp, #8
 8011192:	af00      	add	r7, sp, #0
 8011194:	6078      	str	r0, [r7, #4]
 8011196:	460b      	mov	r3, r1
 8011198:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80111a0:	2b01      	cmp	r3, #1
 80111a2:	d103      	bne.n	80111ac <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80111a4:	78fb      	ldrb	r3, [r7, #3]
 80111a6:	4618      	mov	r0, r3
 80111a8:	f000 f870 	bl	801128c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80111ac:	20c8      	movs	r0, #200	; 0xc8
 80111ae:	f7f3 facb 	bl	8004748 <HAL_Delay>
  return USBH_OK;
 80111b2:	2300      	movs	r3, #0
}
 80111b4:	4618      	mov	r0, r3
 80111b6:	3708      	adds	r7, #8
 80111b8:	46bd      	mov	sp, r7
 80111ba:	bd80      	pop	{r7, pc}

080111bc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80111bc:	b480      	push	{r7}
 80111be:	b085      	sub	sp, #20
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
 80111c4:	460b      	mov	r3, r1
 80111c6:	70fb      	strb	r3, [r7, #3]
 80111c8:	4613      	mov	r3, r2
 80111ca:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80111d2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80111d4:	78fb      	ldrb	r3, [r7, #3]
 80111d6:	68fa      	ldr	r2, [r7, #12]
 80111d8:	212c      	movs	r1, #44	; 0x2c
 80111da:	fb01 f303 	mul.w	r3, r1, r3
 80111de:	4413      	add	r3, r2
 80111e0:	333b      	adds	r3, #59	; 0x3b
 80111e2:	781b      	ldrb	r3, [r3, #0]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d009      	beq.n	80111fc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80111e8:	78fb      	ldrb	r3, [r7, #3]
 80111ea:	68fa      	ldr	r2, [r7, #12]
 80111ec:	212c      	movs	r1, #44	; 0x2c
 80111ee:	fb01 f303 	mul.w	r3, r1, r3
 80111f2:	4413      	add	r3, r2
 80111f4:	3354      	adds	r3, #84	; 0x54
 80111f6:	78ba      	ldrb	r2, [r7, #2]
 80111f8:	701a      	strb	r2, [r3, #0]
 80111fa:	e008      	b.n	801120e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80111fc:	78fb      	ldrb	r3, [r7, #3]
 80111fe:	68fa      	ldr	r2, [r7, #12]
 8011200:	212c      	movs	r1, #44	; 0x2c
 8011202:	fb01 f303 	mul.w	r3, r1, r3
 8011206:	4413      	add	r3, r2
 8011208:	3355      	adds	r3, #85	; 0x55
 801120a:	78ba      	ldrb	r2, [r7, #2]
 801120c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801120e:	2300      	movs	r3, #0
}
 8011210:	4618      	mov	r0, r3
 8011212:	3714      	adds	r7, #20
 8011214:	46bd      	mov	sp, r7
 8011216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121a:	4770      	bx	lr

0801121c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b082      	sub	sp, #8
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8011224:	6878      	ldr	r0, [r7, #4]
 8011226:	f7f3 fa8f 	bl	8004748 <HAL_Delay>
}
 801122a:	bf00      	nop
 801122c:	3708      	adds	r7, #8
 801122e:	46bd      	mov	sp, r7
 8011230:	bd80      	pop	{r7, pc}
	...

08011234 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011234:	b480      	push	{r7}
 8011236:	b085      	sub	sp, #20
 8011238:	af00      	add	r7, sp, #0
 801123a:	4603      	mov	r3, r0
 801123c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801123e:	2300      	movs	r3, #0
 8011240:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011242:	79fb      	ldrb	r3, [r7, #7]
 8011244:	2b03      	cmp	r3, #3
 8011246:	d817      	bhi.n	8011278 <USBH_Get_USB_Status+0x44>
 8011248:	a201      	add	r2, pc, #4	; (adr r2, 8011250 <USBH_Get_USB_Status+0x1c>)
 801124a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801124e:	bf00      	nop
 8011250:	08011261 	.word	0x08011261
 8011254:	08011267 	.word	0x08011267
 8011258:	0801126d 	.word	0x0801126d
 801125c:	08011273 	.word	0x08011273
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011260:	2300      	movs	r3, #0
 8011262:	73fb      	strb	r3, [r7, #15]
    break;
 8011264:	e00b      	b.n	801127e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8011266:	2302      	movs	r3, #2
 8011268:	73fb      	strb	r3, [r7, #15]
    break;
 801126a:	e008      	b.n	801127e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801126c:	2301      	movs	r3, #1
 801126e:	73fb      	strb	r3, [r7, #15]
    break;
 8011270:	e005      	b.n	801127e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011272:	2302      	movs	r3, #2
 8011274:	73fb      	strb	r3, [r7, #15]
    break;
 8011276:	e002      	b.n	801127e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011278:	2302      	movs	r3, #2
 801127a:	73fb      	strb	r3, [r7, #15]
    break;
 801127c:	bf00      	nop
  }
  return usb_status;
 801127e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011280:	4618      	mov	r0, r3
 8011282:	3714      	adds	r7, #20
 8011284:	46bd      	mov	sp, r7
 8011286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128a:	4770      	bx	lr

0801128c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b084      	sub	sp, #16
 8011290:	af00      	add	r7, sp, #0
 8011292:	4603      	mov	r3, r0
 8011294:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8011296:	79fb      	ldrb	r3, [r7, #7]
 8011298:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801129a:	79fb      	ldrb	r3, [r7, #7]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d102      	bne.n	80112a6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80112a0:	2300      	movs	r3, #0
 80112a2:	73fb      	strb	r3, [r7, #15]
 80112a4:	e001      	b.n	80112aa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80112a6:	2301      	movs	r3, #1
 80112a8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80112aa:	7bfb      	ldrb	r3, [r7, #15]
 80112ac:	461a      	mov	r2, r3
 80112ae:	2101      	movs	r1, #1
 80112b0:	4803      	ldr	r0, [pc, #12]	; (80112c0 <MX_DriverVbusFS+0x34>)
 80112b2:	f7f4 f91d 	bl	80054f0 <HAL_GPIO_WritePin>
}
 80112b6:	bf00      	nop
 80112b8:	3710      	adds	r7, #16
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bd80      	pop	{r7, pc}
 80112be:	bf00      	nop
 80112c0:	40020800 	.word	0x40020800

080112c4 <__errno>:
 80112c4:	4b01      	ldr	r3, [pc, #4]	; (80112cc <__errno+0x8>)
 80112c6:	6818      	ldr	r0, [r3, #0]
 80112c8:	4770      	bx	lr
 80112ca:	bf00      	nop
 80112cc:	2000005c 	.word	0x2000005c

080112d0 <__libc_init_array>:
 80112d0:	b570      	push	{r4, r5, r6, lr}
 80112d2:	4d0d      	ldr	r5, [pc, #52]	; (8011308 <__libc_init_array+0x38>)
 80112d4:	4c0d      	ldr	r4, [pc, #52]	; (801130c <__libc_init_array+0x3c>)
 80112d6:	1b64      	subs	r4, r4, r5
 80112d8:	10a4      	asrs	r4, r4, #2
 80112da:	2600      	movs	r6, #0
 80112dc:	42a6      	cmp	r6, r4
 80112de:	d109      	bne.n	80112f4 <__libc_init_array+0x24>
 80112e0:	4d0b      	ldr	r5, [pc, #44]	; (8011310 <__libc_init_array+0x40>)
 80112e2:	4c0c      	ldr	r4, [pc, #48]	; (8011314 <__libc_init_array+0x44>)
 80112e4:	f000 fcae 	bl	8011c44 <_init>
 80112e8:	1b64      	subs	r4, r4, r5
 80112ea:	10a4      	asrs	r4, r4, #2
 80112ec:	2600      	movs	r6, #0
 80112ee:	42a6      	cmp	r6, r4
 80112f0:	d105      	bne.n	80112fe <__libc_init_array+0x2e>
 80112f2:	bd70      	pop	{r4, r5, r6, pc}
 80112f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80112f8:	4798      	blx	r3
 80112fa:	3601      	adds	r6, #1
 80112fc:	e7ee      	b.n	80112dc <__libc_init_array+0xc>
 80112fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8011302:	4798      	blx	r3
 8011304:	3601      	adds	r6, #1
 8011306:	e7f2      	b.n	80112ee <__libc_init_array+0x1e>
 8011308:	08012248 	.word	0x08012248
 801130c:	08012248 	.word	0x08012248
 8011310:	08012248 	.word	0x08012248
 8011314:	0801224c 	.word	0x0801224c

08011318 <malloc>:
 8011318:	4b02      	ldr	r3, [pc, #8]	; (8011324 <malloc+0xc>)
 801131a:	4601      	mov	r1, r0
 801131c:	6818      	ldr	r0, [r3, #0]
 801131e:	f000 b87f 	b.w	8011420 <_malloc_r>
 8011322:	bf00      	nop
 8011324:	2000005c 	.word	0x2000005c

08011328 <free>:
 8011328:	4b02      	ldr	r3, [pc, #8]	; (8011334 <free+0xc>)
 801132a:	4601      	mov	r1, r0
 801132c:	6818      	ldr	r0, [r3, #0]
 801132e:	f000 b80b 	b.w	8011348 <_free_r>
 8011332:	bf00      	nop
 8011334:	2000005c 	.word	0x2000005c

08011338 <memset>:
 8011338:	4402      	add	r2, r0
 801133a:	4603      	mov	r3, r0
 801133c:	4293      	cmp	r3, r2
 801133e:	d100      	bne.n	8011342 <memset+0xa>
 8011340:	4770      	bx	lr
 8011342:	f803 1b01 	strb.w	r1, [r3], #1
 8011346:	e7f9      	b.n	801133c <memset+0x4>

08011348 <_free_r>:
 8011348:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801134a:	2900      	cmp	r1, #0
 801134c:	d044      	beq.n	80113d8 <_free_r+0x90>
 801134e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011352:	9001      	str	r0, [sp, #4]
 8011354:	2b00      	cmp	r3, #0
 8011356:	f1a1 0404 	sub.w	r4, r1, #4
 801135a:	bfb8      	it	lt
 801135c:	18e4      	addlt	r4, r4, r3
 801135e:	f000 f913 	bl	8011588 <__malloc_lock>
 8011362:	4a1e      	ldr	r2, [pc, #120]	; (80113dc <_free_r+0x94>)
 8011364:	9801      	ldr	r0, [sp, #4]
 8011366:	6813      	ldr	r3, [r2, #0]
 8011368:	b933      	cbnz	r3, 8011378 <_free_r+0x30>
 801136a:	6063      	str	r3, [r4, #4]
 801136c:	6014      	str	r4, [r2, #0]
 801136e:	b003      	add	sp, #12
 8011370:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011374:	f000 b90e 	b.w	8011594 <__malloc_unlock>
 8011378:	42a3      	cmp	r3, r4
 801137a:	d908      	bls.n	801138e <_free_r+0x46>
 801137c:	6825      	ldr	r5, [r4, #0]
 801137e:	1961      	adds	r1, r4, r5
 8011380:	428b      	cmp	r3, r1
 8011382:	bf01      	itttt	eq
 8011384:	6819      	ldreq	r1, [r3, #0]
 8011386:	685b      	ldreq	r3, [r3, #4]
 8011388:	1949      	addeq	r1, r1, r5
 801138a:	6021      	streq	r1, [r4, #0]
 801138c:	e7ed      	b.n	801136a <_free_r+0x22>
 801138e:	461a      	mov	r2, r3
 8011390:	685b      	ldr	r3, [r3, #4]
 8011392:	b10b      	cbz	r3, 8011398 <_free_r+0x50>
 8011394:	42a3      	cmp	r3, r4
 8011396:	d9fa      	bls.n	801138e <_free_r+0x46>
 8011398:	6811      	ldr	r1, [r2, #0]
 801139a:	1855      	adds	r5, r2, r1
 801139c:	42a5      	cmp	r5, r4
 801139e:	d10b      	bne.n	80113b8 <_free_r+0x70>
 80113a0:	6824      	ldr	r4, [r4, #0]
 80113a2:	4421      	add	r1, r4
 80113a4:	1854      	adds	r4, r2, r1
 80113a6:	42a3      	cmp	r3, r4
 80113a8:	6011      	str	r1, [r2, #0]
 80113aa:	d1e0      	bne.n	801136e <_free_r+0x26>
 80113ac:	681c      	ldr	r4, [r3, #0]
 80113ae:	685b      	ldr	r3, [r3, #4]
 80113b0:	6053      	str	r3, [r2, #4]
 80113b2:	4421      	add	r1, r4
 80113b4:	6011      	str	r1, [r2, #0]
 80113b6:	e7da      	b.n	801136e <_free_r+0x26>
 80113b8:	d902      	bls.n	80113c0 <_free_r+0x78>
 80113ba:	230c      	movs	r3, #12
 80113bc:	6003      	str	r3, [r0, #0]
 80113be:	e7d6      	b.n	801136e <_free_r+0x26>
 80113c0:	6825      	ldr	r5, [r4, #0]
 80113c2:	1961      	adds	r1, r4, r5
 80113c4:	428b      	cmp	r3, r1
 80113c6:	bf04      	itt	eq
 80113c8:	6819      	ldreq	r1, [r3, #0]
 80113ca:	685b      	ldreq	r3, [r3, #4]
 80113cc:	6063      	str	r3, [r4, #4]
 80113ce:	bf04      	itt	eq
 80113d0:	1949      	addeq	r1, r1, r5
 80113d2:	6021      	streq	r1, [r4, #0]
 80113d4:	6054      	str	r4, [r2, #4]
 80113d6:	e7ca      	b.n	801136e <_free_r+0x26>
 80113d8:	b003      	add	sp, #12
 80113da:	bd30      	pop	{r4, r5, pc}
 80113dc:	200035e8 	.word	0x200035e8

080113e0 <sbrk_aligned>:
 80113e0:	b570      	push	{r4, r5, r6, lr}
 80113e2:	4e0e      	ldr	r6, [pc, #56]	; (801141c <sbrk_aligned+0x3c>)
 80113e4:	460c      	mov	r4, r1
 80113e6:	6831      	ldr	r1, [r6, #0]
 80113e8:	4605      	mov	r5, r0
 80113ea:	b911      	cbnz	r1, 80113f2 <sbrk_aligned+0x12>
 80113ec:	f000 f88c 	bl	8011508 <_sbrk_r>
 80113f0:	6030      	str	r0, [r6, #0]
 80113f2:	4621      	mov	r1, r4
 80113f4:	4628      	mov	r0, r5
 80113f6:	f000 f887 	bl	8011508 <_sbrk_r>
 80113fa:	1c43      	adds	r3, r0, #1
 80113fc:	d00a      	beq.n	8011414 <sbrk_aligned+0x34>
 80113fe:	1cc4      	adds	r4, r0, #3
 8011400:	f024 0403 	bic.w	r4, r4, #3
 8011404:	42a0      	cmp	r0, r4
 8011406:	d007      	beq.n	8011418 <sbrk_aligned+0x38>
 8011408:	1a21      	subs	r1, r4, r0
 801140a:	4628      	mov	r0, r5
 801140c:	f000 f87c 	bl	8011508 <_sbrk_r>
 8011410:	3001      	adds	r0, #1
 8011412:	d101      	bne.n	8011418 <sbrk_aligned+0x38>
 8011414:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011418:	4620      	mov	r0, r4
 801141a:	bd70      	pop	{r4, r5, r6, pc}
 801141c:	200035ec 	.word	0x200035ec

08011420 <_malloc_r>:
 8011420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011424:	1ccd      	adds	r5, r1, #3
 8011426:	f025 0503 	bic.w	r5, r5, #3
 801142a:	3508      	adds	r5, #8
 801142c:	2d0c      	cmp	r5, #12
 801142e:	bf38      	it	cc
 8011430:	250c      	movcc	r5, #12
 8011432:	2d00      	cmp	r5, #0
 8011434:	4607      	mov	r7, r0
 8011436:	db01      	blt.n	801143c <_malloc_r+0x1c>
 8011438:	42a9      	cmp	r1, r5
 801143a:	d905      	bls.n	8011448 <_malloc_r+0x28>
 801143c:	230c      	movs	r3, #12
 801143e:	603b      	str	r3, [r7, #0]
 8011440:	2600      	movs	r6, #0
 8011442:	4630      	mov	r0, r6
 8011444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011448:	4e2e      	ldr	r6, [pc, #184]	; (8011504 <_malloc_r+0xe4>)
 801144a:	f000 f89d 	bl	8011588 <__malloc_lock>
 801144e:	6833      	ldr	r3, [r6, #0]
 8011450:	461c      	mov	r4, r3
 8011452:	bb34      	cbnz	r4, 80114a2 <_malloc_r+0x82>
 8011454:	4629      	mov	r1, r5
 8011456:	4638      	mov	r0, r7
 8011458:	f7ff ffc2 	bl	80113e0 <sbrk_aligned>
 801145c:	1c43      	adds	r3, r0, #1
 801145e:	4604      	mov	r4, r0
 8011460:	d14d      	bne.n	80114fe <_malloc_r+0xde>
 8011462:	6834      	ldr	r4, [r6, #0]
 8011464:	4626      	mov	r6, r4
 8011466:	2e00      	cmp	r6, #0
 8011468:	d140      	bne.n	80114ec <_malloc_r+0xcc>
 801146a:	6823      	ldr	r3, [r4, #0]
 801146c:	4631      	mov	r1, r6
 801146e:	4638      	mov	r0, r7
 8011470:	eb04 0803 	add.w	r8, r4, r3
 8011474:	f000 f848 	bl	8011508 <_sbrk_r>
 8011478:	4580      	cmp	r8, r0
 801147a:	d13a      	bne.n	80114f2 <_malloc_r+0xd2>
 801147c:	6821      	ldr	r1, [r4, #0]
 801147e:	3503      	adds	r5, #3
 8011480:	1a6d      	subs	r5, r5, r1
 8011482:	f025 0503 	bic.w	r5, r5, #3
 8011486:	3508      	adds	r5, #8
 8011488:	2d0c      	cmp	r5, #12
 801148a:	bf38      	it	cc
 801148c:	250c      	movcc	r5, #12
 801148e:	4629      	mov	r1, r5
 8011490:	4638      	mov	r0, r7
 8011492:	f7ff ffa5 	bl	80113e0 <sbrk_aligned>
 8011496:	3001      	adds	r0, #1
 8011498:	d02b      	beq.n	80114f2 <_malloc_r+0xd2>
 801149a:	6823      	ldr	r3, [r4, #0]
 801149c:	442b      	add	r3, r5
 801149e:	6023      	str	r3, [r4, #0]
 80114a0:	e00e      	b.n	80114c0 <_malloc_r+0xa0>
 80114a2:	6822      	ldr	r2, [r4, #0]
 80114a4:	1b52      	subs	r2, r2, r5
 80114a6:	d41e      	bmi.n	80114e6 <_malloc_r+0xc6>
 80114a8:	2a0b      	cmp	r2, #11
 80114aa:	d916      	bls.n	80114da <_malloc_r+0xba>
 80114ac:	1961      	adds	r1, r4, r5
 80114ae:	42a3      	cmp	r3, r4
 80114b0:	6025      	str	r5, [r4, #0]
 80114b2:	bf18      	it	ne
 80114b4:	6059      	strne	r1, [r3, #4]
 80114b6:	6863      	ldr	r3, [r4, #4]
 80114b8:	bf08      	it	eq
 80114ba:	6031      	streq	r1, [r6, #0]
 80114bc:	5162      	str	r2, [r4, r5]
 80114be:	604b      	str	r3, [r1, #4]
 80114c0:	4638      	mov	r0, r7
 80114c2:	f104 060b 	add.w	r6, r4, #11
 80114c6:	f000 f865 	bl	8011594 <__malloc_unlock>
 80114ca:	f026 0607 	bic.w	r6, r6, #7
 80114ce:	1d23      	adds	r3, r4, #4
 80114d0:	1af2      	subs	r2, r6, r3
 80114d2:	d0b6      	beq.n	8011442 <_malloc_r+0x22>
 80114d4:	1b9b      	subs	r3, r3, r6
 80114d6:	50a3      	str	r3, [r4, r2]
 80114d8:	e7b3      	b.n	8011442 <_malloc_r+0x22>
 80114da:	6862      	ldr	r2, [r4, #4]
 80114dc:	42a3      	cmp	r3, r4
 80114de:	bf0c      	ite	eq
 80114e0:	6032      	streq	r2, [r6, #0]
 80114e2:	605a      	strne	r2, [r3, #4]
 80114e4:	e7ec      	b.n	80114c0 <_malloc_r+0xa0>
 80114e6:	4623      	mov	r3, r4
 80114e8:	6864      	ldr	r4, [r4, #4]
 80114ea:	e7b2      	b.n	8011452 <_malloc_r+0x32>
 80114ec:	4634      	mov	r4, r6
 80114ee:	6876      	ldr	r6, [r6, #4]
 80114f0:	e7b9      	b.n	8011466 <_malloc_r+0x46>
 80114f2:	230c      	movs	r3, #12
 80114f4:	603b      	str	r3, [r7, #0]
 80114f6:	4638      	mov	r0, r7
 80114f8:	f000 f84c 	bl	8011594 <__malloc_unlock>
 80114fc:	e7a1      	b.n	8011442 <_malloc_r+0x22>
 80114fe:	6025      	str	r5, [r4, #0]
 8011500:	e7de      	b.n	80114c0 <_malloc_r+0xa0>
 8011502:	bf00      	nop
 8011504:	200035e8 	.word	0x200035e8

08011508 <_sbrk_r>:
 8011508:	b538      	push	{r3, r4, r5, lr}
 801150a:	4d06      	ldr	r5, [pc, #24]	; (8011524 <_sbrk_r+0x1c>)
 801150c:	2300      	movs	r3, #0
 801150e:	4604      	mov	r4, r0
 8011510:	4608      	mov	r0, r1
 8011512:	602b      	str	r3, [r5, #0]
 8011514:	f7f2 fae2 	bl	8003adc <_sbrk>
 8011518:	1c43      	adds	r3, r0, #1
 801151a:	d102      	bne.n	8011522 <_sbrk_r+0x1a>
 801151c:	682b      	ldr	r3, [r5, #0]
 801151e:	b103      	cbz	r3, 8011522 <_sbrk_r+0x1a>
 8011520:	6023      	str	r3, [r4, #0]
 8011522:	bd38      	pop	{r3, r4, r5, pc}
 8011524:	200035f0 	.word	0x200035f0

08011528 <siprintf>:
 8011528:	b40e      	push	{r1, r2, r3}
 801152a:	b500      	push	{lr}
 801152c:	b09c      	sub	sp, #112	; 0x70
 801152e:	ab1d      	add	r3, sp, #116	; 0x74
 8011530:	9002      	str	r0, [sp, #8]
 8011532:	9006      	str	r0, [sp, #24]
 8011534:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011538:	4809      	ldr	r0, [pc, #36]	; (8011560 <siprintf+0x38>)
 801153a:	9107      	str	r1, [sp, #28]
 801153c:	9104      	str	r1, [sp, #16]
 801153e:	4909      	ldr	r1, [pc, #36]	; (8011564 <siprintf+0x3c>)
 8011540:	f853 2b04 	ldr.w	r2, [r3], #4
 8011544:	9105      	str	r1, [sp, #20]
 8011546:	6800      	ldr	r0, [r0, #0]
 8011548:	9301      	str	r3, [sp, #4]
 801154a:	a902      	add	r1, sp, #8
 801154c:	f000 f884 	bl	8011658 <_svfiprintf_r>
 8011550:	9b02      	ldr	r3, [sp, #8]
 8011552:	2200      	movs	r2, #0
 8011554:	701a      	strb	r2, [r3, #0]
 8011556:	b01c      	add	sp, #112	; 0x70
 8011558:	f85d eb04 	ldr.w	lr, [sp], #4
 801155c:	b003      	add	sp, #12
 801155e:	4770      	bx	lr
 8011560:	2000005c 	.word	0x2000005c
 8011564:	ffff0208 	.word	0xffff0208

08011568 <strcat>:
 8011568:	b510      	push	{r4, lr}
 801156a:	4602      	mov	r2, r0
 801156c:	7814      	ldrb	r4, [r2, #0]
 801156e:	4613      	mov	r3, r2
 8011570:	3201      	adds	r2, #1
 8011572:	2c00      	cmp	r4, #0
 8011574:	d1fa      	bne.n	801156c <strcat+0x4>
 8011576:	3b01      	subs	r3, #1
 8011578:	f811 2b01 	ldrb.w	r2, [r1], #1
 801157c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011580:	2a00      	cmp	r2, #0
 8011582:	d1f9      	bne.n	8011578 <strcat+0x10>
 8011584:	bd10      	pop	{r4, pc}
	...

08011588 <__malloc_lock>:
 8011588:	4801      	ldr	r0, [pc, #4]	; (8011590 <__malloc_lock+0x8>)
 801158a:	f000 baf9 	b.w	8011b80 <__retarget_lock_acquire_recursive>
 801158e:	bf00      	nop
 8011590:	200035f4 	.word	0x200035f4

08011594 <__malloc_unlock>:
 8011594:	4801      	ldr	r0, [pc, #4]	; (801159c <__malloc_unlock+0x8>)
 8011596:	f000 baf4 	b.w	8011b82 <__retarget_lock_release_recursive>
 801159a:	bf00      	nop
 801159c:	200035f4 	.word	0x200035f4

080115a0 <__ssputs_r>:
 80115a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115a4:	688e      	ldr	r6, [r1, #8]
 80115a6:	429e      	cmp	r6, r3
 80115a8:	4682      	mov	sl, r0
 80115aa:	460c      	mov	r4, r1
 80115ac:	4690      	mov	r8, r2
 80115ae:	461f      	mov	r7, r3
 80115b0:	d838      	bhi.n	8011624 <__ssputs_r+0x84>
 80115b2:	898a      	ldrh	r2, [r1, #12]
 80115b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80115b8:	d032      	beq.n	8011620 <__ssputs_r+0x80>
 80115ba:	6825      	ldr	r5, [r4, #0]
 80115bc:	6909      	ldr	r1, [r1, #16]
 80115be:	eba5 0901 	sub.w	r9, r5, r1
 80115c2:	6965      	ldr	r5, [r4, #20]
 80115c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80115c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80115cc:	3301      	adds	r3, #1
 80115ce:	444b      	add	r3, r9
 80115d0:	106d      	asrs	r5, r5, #1
 80115d2:	429d      	cmp	r5, r3
 80115d4:	bf38      	it	cc
 80115d6:	461d      	movcc	r5, r3
 80115d8:	0553      	lsls	r3, r2, #21
 80115da:	d531      	bpl.n	8011640 <__ssputs_r+0xa0>
 80115dc:	4629      	mov	r1, r5
 80115de:	f7ff ff1f 	bl	8011420 <_malloc_r>
 80115e2:	4606      	mov	r6, r0
 80115e4:	b950      	cbnz	r0, 80115fc <__ssputs_r+0x5c>
 80115e6:	230c      	movs	r3, #12
 80115e8:	f8ca 3000 	str.w	r3, [sl]
 80115ec:	89a3      	ldrh	r3, [r4, #12]
 80115ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115f2:	81a3      	strh	r3, [r4, #12]
 80115f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80115f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115fc:	6921      	ldr	r1, [r4, #16]
 80115fe:	464a      	mov	r2, r9
 8011600:	f000 fac0 	bl	8011b84 <memcpy>
 8011604:	89a3      	ldrh	r3, [r4, #12]
 8011606:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801160a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801160e:	81a3      	strh	r3, [r4, #12]
 8011610:	6126      	str	r6, [r4, #16]
 8011612:	6165      	str	r5, [r4, #20]
 8011614:	444e      	add	r6, r9
 8011616:	eba5 0509 	sub.w	r5, r5, r9
 801161a:	6026      	str	r6, [r4, #0]
 801161c:	60a5      	str	r5, [r4, #8]
 801161e:	463e      	mov	r6, r7
 8011620:	42be      	cmp	r6, r7
 8011622:	d900      	bls.n	8011626 <__ssputs_r+0x86>
 8011624:	463e      	mov	r6, r7
 8011626:	6820      	ldr	r0, [r4, #0]
 8011628:	4632      	mov	r2, r6
 801162a:	4641      	mov	r1, r8
 801162c:	f000 fab8 	bl	8011ba0 <memmove>
 8011630:	68a3      	ldr	r3, [r4, #8]
 8011632:	1b9b      	subs	r3, r3, r6
 8011634:	60a3      	str	r3, [r4, #8]
 8011636:	6823      	ldr	r3, [r4, #0]
 8011638:	4433      	add	r3, r6
 801163a:	6023      	str	r3, [r4, #0]
 801163c:	2000      	movs	r0, #0
 801163e:	e7db      	b.n	80115f8 <__ssputs_r+0x58>
 8011640:	462a      	mov	r2, r5
 8011642:	f000 fac7 	bl	8011bd4 <_realloc_r>
 8011646:	4606      	mov	r6, r0
 8011648:	2800      	cmp	r0, #0
 801164a:	d1e1      	bne.n	8011610 <__ssputs_r+0x70>
 801164c:	6921      	ldr	r1, [r4, #16]
 801164e:	4650      	mov	r0, sl
 8011650:	f7ff fe7a 	bl	8011348 <_free_r>
 8011654:	e7c7      	b.n	80115e6 <__ssputs_r+0x46>
	...

08011658 <_svfiprintf_r>:
 8011658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801165c:	4698      	mov	r8, r3
 801165e:	898b      	ldrh	r3, [r1, #12]
 8011660:	061b      	lsls	r3, r3, #24
 8011662:	b09d      	sub	sp, #116	; 0x74
 8011664:	4607      	mov	r7, r0
 8011666:	460d      	mov	r5, r1
 8011668:	4614      	mov	r4, r2
 801166a:	d50e      	bpl.n	801168a <_svfiprintf_r+0x32>
 801166c:	690b      	ldr	r3, [r1, #16]
 801166e:	b963      	cbnz	r3, 801168a <_svfiprintf_r+0x32>
 8011670:	2140      	movs	r1, #64	; 0x40
 8011672:	f7ff fed5 	bl	8011420 <_malloc_r>
 8011676:	6028      	str	r0, [r5, #0]
 8011678:	6128      	str	r0, [r5, #16]
 801167a:	b920      	cbnz	r0, 8011686 <_svfiprintf_r+0x2e>
 801167c:	230c      	movs	r3, #12
 801167e:	603b      	str	r3, [r7, #0]
 8011680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011684:	e0d1      	b.n	801182a <_svfiprintf_r+0x1d2>
 8011686:	2340      	movs	r3, #64	; 0x40
 8011688:	616b      	str	r3, [r5, #20]
 801168a:	2300      	movs	r3, #0
 801168c:	9309      	str	r3, [sp, #36]	; 0x24
 801168e:	2320      	movs	r3, #32
 8011690:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011694:	f8cd 800c 	str.w	r8, [sp, #12]
 8011698:	2330      	movs	r3, #48	; 0x30
 801169a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011844 <_svfiprintf_r+0x1ec>
 801169e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80116a2:	f04f 0901 	mov.w	r9, #1
 80116a6:	4623      	mov	r3, r4
 80116a8:	469a      	mov	sl, r3
 80116aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80116ae:	b10a      	cbz	r2, 80116b4 <_svfiprintf_r+0x5c>
 80116b0:	2a25      	cmp	r2, #37	; 0x25
 80116b2:	d1f9      	bne.n	80116a8 <_svfiprintf_r+0x50>
 80116b4:	ebba 0b04 	subs.w	fp, sl, r4
 80116b8:	d00b      	beq.n	80116d2 <_svfiprintf_r+0x7a>
 80116ba:	465b      	mov	r3, fp
 80116bc:	4622      	mov	r2, r4
 80116be:	4629      	mov	r1, r5
 80116c0:	4638      	mov	r0, r7
 80116c2:	f7ff ff6d 	bl	80115a0 <__ssputs_r>
 80116c6:	3001      	adds	r0, #1
 80116c8:	f000 80aa 	beq.w	8011820 <_svfiprintf_r+0x1c8>
 80116cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80116ce:	445a      	add	r2, fp
 80116d0:	9209      	str	r2, [sp, #36]	; 0x24
 80116d2:	f89a 3000 	ldrb.w	r3, [sl]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	f000 80a2 	beq.w	8011820 <_svfiprintf_r+0x1c8>
 80116dc:	2300      	movs	r3, #0
 80116de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80116e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80116e6:	f10a 0a01 	add.w	sl, sl, #1
 80116ea:	9304      	str	r3, [sp, #16]
 80116ec:	9307      	str	r3, [sp, #28]
 80116ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80116f2:	931a      	str	r3, [sp, #104]	; 0x68
 80116f4:	4654      	mov	r4, sl
 80116f6:	2205      	movs	r2, #5
 80116f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116fc:	4851      	ldr	r0, [pc, #324]	; (8011844 <_svfiprintf_r+0x1ec>)
 80116fe:	f7ee fd6f 	bl	80001e0 <memchr>
 8011702:	9a04      	ldr	r2, [sp, #16]
 8011704:	b9d8      	cbnz	r0, 801173e <_svfiprintf_r+0xe6>
 8011706:	06d0      	lsls	r0, r2, #27
 8011708:	bf44      	itt	mi
 801170a:	2320      	movmi	r3, #32
 801170c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011710:	0711      	lsls	r1, r2, #28
 8011712:	bf44      	itt	mi
 8011714:	232b      	movmi	r3, #43	; 0x2b
 8011716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801171a:	f89a 3000 	ldrb.w	r3, [sl]
 801171e:	2b2a      	cmp	r3, #42	; 0x2a
 8011720:	d015      	beq.n	801174e <_svfiprintf_r+0xf6>
 8011722:	9a07      	ldr	r2, [sp, #28]
 8011724:	4654      	mov	r4, sl
 8011726:	2000      	movs	r0, #0
 8011728:	f04f 0c0a 	mov.w	ip, #10
 801172c:	4621      	mov	r1, r4
 801172e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011732:	3b30      	subs	r3, #48	; 0x30
 8011734:	2b09      	cmp	r3, #9
 8011736:	d94e      	bls.n	80117d6 <_svfiprintf_r+0x17e>
 8011738:	b1b0      	cbz	r0, 8011768 <_svfiprintf_r+0x110>
 801173a:	9207      	str	r2, [sp, #28]
 801173c:	e014      	b.n	8011768 <_svfiprintf_r+0x110>
 801173e:	eba0 0308 	sub.w	r3, r0, r8
 8011742:	fa09 f303 	lsl.w	r3, r9, r3
 8011746:	4313      	orrs	r3, r2
 8011748:	9304      	str	r3, [sp, #16]
 801174a:	46a2      	mov	sl, r4
 801174c:	e7d2      	b.n	80116f4 <_svfiprintf_r+0x9c>
 801174e:	9b03      	ldr	r3, [sp, #12]
 8011750:	1d19      	adds	r1, r3, #4
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	9103      	str	r1, [sp, #12]
 8011756:	2b00      	cmp	r3, #0
 8011758:	bfbb      	ittet	lt
 801175a:	425b      	neglt	r3, r3
 801175c:	f042 0202 	orrlt.w	r2, r2, #2
 8011760:	9307      	strge	r3, [sp, #28]
 8011762:	9307      	strlt	r3, [sp, #28]
 8011764:	bfb8      	it	lt
 8011766:	9204      	strlt	r2, [sp, #16]
 8011768:	7823      	ldrb	r3, [r4, #0]
 801176a:	2b2e      	cmp	r3, #46	; 0x2e
 801176c:	d10c      	bne.n	8011788 <_svfiprintf_r+0x130>
 801176e:	7863      	ldrb	r3, [r4, #1]
 8011770:	2b2a      	cmp	r3, #42	; 0x2a
 8011772:	d135      	bne.n	80117e0 <_svfiprintf_r+0x188>
 8011774:	9b03      	ldr	r3, [sp, #12]
 8011776:	1d1a      	adds	r2, r3, #4
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	9203      	str	r2, [sp, #12]
 801177c:	2b00      	cmp	r3, #0
 801177e:	bfb8      	it	lt
 8011780:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011784:	3402      	adds	r4, #2
 8011786:	9305      	str	r3, [sp, #20]
 8011788:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011854 <_svfiprintf_r+0x1fc>
 801178c:	7821      	ldrb	r1, [r4, #0]
 801178e:	2203      	movs	r2, #3
 8011790:	4650      	mov	r0, sl
 8011792:	f7ee fd25 	bl	80001e0 <memchr>
 8011796:	b140      	cbz	r0, 80117aa <_svfiprintf_r+0x152>
 8011798:	2340      	movs	r3, #64	; 0x40
 801179a:	eba0 000a 	sub.w	r0, r0, sl
 801179e:	fa03 f000 	lsl.w	r0, r3, r0
 80117a2:	9b04      	ldr	r3, [sp, #16]
 80117a4:	4303      	orrs	r3, r0
 80117a6:	3401      	adds	r4, #1
 80117a8:	9304      	str	r3, [sp, #16]
 80117aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117ae:	4826      	ldr	r0, [pc, #152]	; (8011848 <_svfiprintf_r+0x1f0>)
 80117b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80117b4:	2206      	movs	r2, #6
 80117b6:	f7ee fd13 	bl	80001e0 <memchr>
 80117ba:	2800      	cmp	r0, #0
 80117bc:	d038      	beq.n	8011830 <_svfiprintf_r+0x1d8>
 80117be:	4b23      	ldr	r3, [pc, #140]	; (801184c <_svfiprintf_r+0x1f4>)
 80117c0:	bb1b      	cbnz	r3, 801180a <_svfiprintf_r+0x1b2>
 80117c2:	9b03      	ldr	r3, [sp, #12]
 80117c4:	3307      	adds	r3, #7
 80117c6:	f023 0307 	bic.w	r3, r3, #7
 80117ca:	3308      	adds	r3, #8
 80117cc:	9303      	str	r3, [sp, #12]
 80117ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117d0:	4433      	add	r3, r6
 80117d2:	9309      	str	r3, [sp, #36]	; 0x24
 80117d4:	e767      	b.n	80116a6 <_svfiprintf_r+0x4e>
 80117d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80117da:	460c      	mov	r4, r1
 80117dc:	2001      	movs	r0, #1
 80117de:	e7a5      	b.n	801172c <_svfiprintf_r+0xd4>
 80117e0:	2300      	movs	r3, #0
 80117e2:	3401      	adds	r4, #1
 80117e4:	9305      	str	r3, [sp, #20]
 80117e6:	4619      	mov	r1, r3
 80117e8:	f04f 0c0a 	mov.w	ip, #10
 80117ec:	4620      	mov	r0, r4
 80117ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80117f2:	3a30      	subs	r2, #48	; 0x30
 80117f4:	2a09      	cmp	r2, #9
 80117f6:	d903      	bls.n	8011800 <_svfiprintf_r+0x1a8>
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d0c5      	beq.n	8011788 <_svfiprintf_r+0x130>
 80117fc:	9105      	str	r1, [sp, #20]
 80117fe:	e7c3      	b.n	8011788 <_svfiprintf_r+0x130>
 8011800:	fb0c 2101 	mla	r1, ip, r1, r2
 8011804:	4604      	mov	r4, r0
 8011806:	2301      	movs	r3, #1
 8011808:	e7f0      	b.n	80117ec <_svfiprintf_r+0x194>
 801180a:	ab03      	add	r3, sp, #12
 801180c:	9300      	str	r3, [sp, #0]
 801180e:	462a      	mov	r2, r5
 8011810:	4b0f      	ldr	r3, [pc, #60]	; (8011850 <_svfiprintf_r+0x1f8>)
 8011812:	a904      	add	r1, sp, #16
 8011814:	4638      	mov	r0, r7
 8011816:	f3af 8000 	nop.w
 801181a:	1c42      	adds	r2, r0, #1
 801181c:	4606      	mov	r6, r0
 801181e:	d1d6      	bne.n	80117ce <_svfiprintf_r+0x176>
 8011820:	89ab      	ldrh	r3, [r5, #12]
 8011822:	065b      	lsls	r3, r3, #25
 8011824:	f53f af2c 	bmi.w	8011680 <_svfiprintf_r+0x28>
 8011828:	9809      	ldr	r0, [sp, #36]	; 0x24
 801182a:	b01d      	add	sp, #116	; 0x74
 801182c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011830:	ab03      	add	r3, sp, #12
 8011832:	9300      	str	r3, [sp, #0]
 8011834:	462a      	mov	r2, r5
 8011836:	4b06      	ldr	r3, [pc, #24]	; (8011850 <_svfiprintf_r+0x1f8>)
 8011838:	a904      	add	r1, sp, #16
 801183a:	4638      	mov	r0, r7
 801183c:	f000 f87a 	bl	8011934 <_printf_i>
 8011840:	e7eb      	b.n	801181a <_svfiprintf_r+0x1c2>
 8011842:	bf00      	nop
 8011844:	0801220c 	.word	0x0801220c
 8011848:	08012216 	.word	0x08012216
 801184c:	00000000 	.word	0x00000000
 8011850:	080115a1 	.word	0x080115a1
 8011854:	08012212 	.word	0x08012212

08011858 <_printf_common>:
 8011858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801185c:	4616      	mov	r6, r2
 801185e:	4699      	mov	r9, r3
 8011860:	688a      	ldr	r2, [r1, #8]
 8011862:	690b      	ldr	r3, [r1, #16]
 8011864:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011868:	4293      	cmp	r3, r2
 801186a:	bfb8      	it	lt
 801186c:	4613      	movlt	r3, r2
 801186e:	6033      	str	r3, [r6, #0]
 8011870:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011874:	4607      	mov	r7, r0
 8011876:	460c      	mov	r4, r1
 8011878:	b10a      	cbz	r2, 801187e <_printf_common+0x26>
 801187a:	3301      	adds	r3, #1
 801187c:	6033      	str	r3, [r6, #0]
 801187e:	6823      	ldr	r3, [r4, #0]
 8011880:	0699      	lsls	r1, r3, #26
 8011882:	bf42      	ittt	mi
 8011884:	6833      	ldrmi	r3, [r6, #0]
 8011886:	3302      	addmi	r3, #2
 8011888:	6033      	strmi	r3, [r6, #0]
 801188a:	6825      	ldr	r5, [r4, #0]
 801188c:	f015 0506 	ands.w	r5, r5, #6
 8011890:	d106      	bne.n	80118a0 <_printf_common+0x48>
 8011892:	f104 0a19 	add.w	sl, r4, #25
 8011896:	68e3      	ldr	r3, [r4, #12]
 8011898:	6832      	ldr	r2, [r6, #0]
 801189a:	1a9b      	subs	r3, r3, r2
 801189c:	42ab      	cmp	r3, r5
 801189e:	dc26      	bgt.n	80118ee <_printf_common+0x96>
 80118a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80118a4:	1e13      	subs	r3, r2, #0
 80118a6:	6822      	ldr	r2, [r4, #0]
 80118a8:	bf18      	it	ne
 80118aa:	2301      	movne	r3, #1
 80118ac:	0692      	lsls	r2, r2, #26
 80118ae:	d42b      	bmi.n	8011908 <_printf_common+0xb0>
 80118b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80118b4:	4649      	mov	r1, r9
 80118b6:	4638      	mov	r0, r7
 80118b8:	47c0      	blx	r8
 80118ba:	3001      	adds	r0, #1
 80118bc:	d01e      	beq.n	80118fc <_printf_common+0xa4>
 80118be:	6823      	ldr	r3, [r4, #0]
 80118c0:	68e5      	ldr	r5, [r4, #12]
 80118c2:	6832      	ldr	r2, [r6, #0]
 80118c4:	f003 0306 	and.w	r3, r3, #6
 80118c8:	2b04      	cmp	r3, #4
 80118ca:	bf08      	it	eq
 80118cc:	1aad      	subeq	r5, r5, r2
 80118ce:	68a3      	ldr	r3, [r4, #8]
 80118d0:	6922      	ldr	r2, [r4, #16]
 80118d2:	bf0c      	ite	eq
 80118d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80118d8:	2500      	movne	r5, #0
 80118da:	4293      	cmp	r3, r2
 80118dc:	bfc4      	itt	gt
 80118de:	1a9b      	subgt	r3, r3, r2
 80118e0:	18ed      	addgt	r5, r5, r3
 80118e2:	2600      	movs	r6, #0
 80118e4:	341a      	adds	r4, #26
 80118e6:	42b5      	cmp	r5, r6
 80118e8:	d11a      	bne.n	8011920 <_printf_common+0xc8>
 80118ea:	2000      	movs	r0, #0
 80118ec:	e008      	b.n	8011900 <_printf_common+0xa8>
 80118ee:	2301      	movs	r3, #1
 80118f0:	4652      	mov	r2, sl
 80118f2:	4649      	mov	r1, r9
 80118f4:	4638      	mov	r0, r7
 80118f6:	47c0      	blx	r8
 80118f8:	3001      	adds	r0, #1
 80118fa:	d103      	bne.n	8011904 <_printf_common+0xac>
 80118fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011904:	3501      	adds	r5, #1
 8011906:	e7c6      	b.n	8011896 <_printf_common+0x3e>
 8011908:	18e1      	adds	r1, r4, r3
 801190a:	1c5a      	adds	r2, r3, #1
 801190c:	2030      	movs	r0, #48	; 0x30
 801190e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011912:	4422      	add	r2, r4
 8011914:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011918:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801191c:	3302      	adds	r3, #2
 801191e:	e7c7      	b.n	80118b0 <_printf_common+0x58>
 8011920:	2301      	movs	r3, #1
 8011922:	4622      	mov	r2, r4
 8011924:	4649      	mov	r1, r9
 8011926:	4638      	mov	r0, r7
 8011928:	47c0      	blx	r8
 801192a:	3001      	adds	r0, #1
 801192c:	d0e6      	beq.n	80118fc <_printf_common+0xa4>
 801192e:	3601      	adds	r6, #1
 8011930:	e7d9      	b.n	80118e6 <_printf_common+0x8e>
	...

08011934 <_printf_i>:
 8011934:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011938:	7e0f      	ldrb	r7, [r1, #24]
 801193a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801193c:	2f78      	cmp	r7, #120	; 0x78
 801193e:	4691      	mov	r9, r2
 8011940:	4680      	mov	r8, r0
 8011942:	460c      	mov	r4, r1
 8011944:	469a      	mov	sl, r3
 8011946:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801194a:	d807      	bhi.n	801195c <_printf_i+0x28>
 801194c:	2f62      	cmp	r7, #98	; 0x62
 801194e:	d80a      	bhi.n	8011966 <_printf_i+0x32>
 8011950:	2f00      	cmp	r7, #0
 8011952:	f000 80d8 	beq.w	8011b06 <_printf_i+0x1d2>
 8011956:	2f58      	cmp	r7, #88	; 0x58
 8011958:	f000 80a3 	beq.w	8011aa2 <_printf_i+0x16e>
 801195c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011960:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011964:	e03a      	b.n	80119dc <_printf_i+0xa8>
 8011966:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801196a:	2b15      	cmp	r3, #21
 801196c:	d8f6      	bhi.n	801195c <_printf_i+0x28>
 801196e:	a101      	add	r1, pc, #4	; (adr r1, 8011974 <_printf_i+0x40>)
 8011970:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011974:	080119cd 	.word	0x080119cd
 8011978:	080119e1 	.word	0x080119e1
 801197c:	0801195d 	.word	0x0801195d
 8011980:	0801195d 	.word	0x0801195d
 8011984:	0801195d 	.word	0x0801195d
 8011988:	0801195d 	.word	0x0801195d
 801198c:	080119e1 	.word	0x080119e1
 8011990:	0801195d 	.word	0x0801195d
 8011994:	0801195d 	.word	0x0801195d
 8011998:	0801195d 	.word	0x0801195d
 801199c:	0801195d 	.word	0x0801195d
 80119a0:	08011aed 	.word	0x08011aed
 80119a4:	08011a11 	.word	0x08011a11
 80119a8:	08011acf 	.word	0x08011acf
 80119ac:	0801195d 	.word	0x0801195d
 80119b0:	0801195d 	.word	0x0801195d
 80119b4:	08011b0f 	.word	0x08011b0f
 80119b8:	0801195d 	.word	0x0801195d
 80119bc:	08011a11 	.word	0x08011a11
 80119c0:	0801195d 	.word	0x0801195d
 80119c4:	0801195d 	.word	0x0801195d
 80119c8:	08011ad7 	.word	0x08011ad7
 80119cc:	682b      	ldr	r3, [r5, #0]
 80119ce:	1d1a      	adds	r2, r3, #4
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	602a      	str	r2, [r5, #0]
 80119d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80119d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80119dc:	2301      	movs	r3, #1
 80119de:	e0a3      	b.n	8011b28 <_printf_i+0x1f4>
 80119e0:	6820      	ldr	r0, [r4, #0]
 80119e2:	6829      	ldr	r1, [r5, #0]
 80119e4:	0606      	lsls	r6, r0, #24
 80119e6:	f101 0304 	add.w	r3, r1, #4
 80119ea:	d50a      	bpl.n	8011a02 <_printf_i+0xce>
 80119ec:	680e      	ldr	r6, [r1, #0]
 80119ee:	602b      	str	r3, [r5, #0]
 80119f0:	2e00      	cmp	r6, #0
 80119f2:	da03      	bge.n	80119fc <_printf_i+0xc8>
 80119f4:	232d      	movs	r3, #45	; 0x2d
 80119f6:	4276      	negs	r6, r6
 80119f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119fc:	485e      	ldr	r0, [pc, #376]	; (8011b78 <_printf_i+0x244>)
 80119fe:	230a      	movs	r3, #10
 8011a00:	e019      	b.n	8011a36 <_printf_i+0x102>
 8011a02:	680e      	ldr	r6, [r1, #0]
 8011a04:	602b      	str	r3, [r5, #0]
 8011a06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011a0a:	bf18      	it	ne
 8011a0c:	b236      	sxthne	r6, r6
 8011a0e:	e7ef      	b.n	80119f0 <_printf_i+0xbc>
 8011a10:	682b      	ldr	r3, [r5, #0]
 8011a12:	6820      	ldr	r0, [r4, #0]
 8011a14:	1d19      	adds	r1, r3, #4
 8011a16:	6029      	str	r1, [r5, #0]
 8011a18:	0601      	lsls	r1, r0, #24
 8011a1a:	d501      	bpl.n	8011a20 <_printf_i+0xec>
 8011a1c:	681e      	ldr	r6, [r3, #0]
 8011a1e:	e002      	b.n	8011a26 <_printf_i+0xf2>
 8011a20:	0646      	lsls	r6, r0, #25
 8011a22:	d5fb      	bpl.n	8011a1c <_printf_i+0xe8>
 8011a24:	881e      	ldrh	r6, [r3, #0]
 8011a26:	4854      	ldr	r0, [pc, #336]	; (8011b78 <_printf_i+0x244>)
 8011a28:	2f6f      	cmp	r7, #111	; 0x6f
 8011a2a:	bf0c      	ite	eq
 8011a2c:	2308      	moveq	r3, #8
 8011a2e:	230a      	movne	r3, #10
 8011a30:	2100      	movs	r1, #0
 8011a32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011a36:	6865      	ldr	r5, [r4, #4]
 8011a38:	60a5      	str	r5, [r4, #8]
 8011a3a:	2d00      	cmp	r5, #0
 8011a3c:	bfa2      	ittt	ge
 8011a3e:	6821      	ldrge	r1, [r4, #0]
 8011a40:	f021 0104 	bicge.w	r1, r1, #4
 8011a44:	6021      	strge	r1, [r4, #0]
 8011a46:	b90e      	cbnz	r6, 8011a4c <_printf_i+0x118>
 8011a48:	2d00      	cmp	r5, #0
 8011a4a:	d04d      	beq.n	8011ae8 <_printf_i+0x1b4>
 8011a4c:	4615      	mov	r5, r2
 8011a4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011a52:	fb03 6711 	mls	r7, r3, r1, r6
 8011a56:	5dc7      	ldrb	r7, [r0, r7]
 8011a58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011a5c:	4637      	mov	r7, r6
 8011a5e:	42bb      	cmp	r3, r7
 8011a60:	460e      	mov	r6, r1
 8011a62:	d9f4      	bls.n	8011a4e <_printf_i+0x11a>
 8011a64:	2b08      	cmp	r3, #8
 8011a66:	d10b      	bne.n	8011a80 <_printf_i+0x14c>
 8011a68:	6823      	ldr	r3, [r4, #0]
 8011a6a:	07de      	lsls	r6, r3, #31
 8011a6c:	d508      	bpl.n	8011a80 <_printf_i+0x14c>
 8011a6e:	6923      	ldr	r3, [r4, #16]
 8011a70:	6861      	ldr	r1, [r4, #4]
 8011a72:	4299      	cmp	r1, r3
 8011a74:	bfde      	ittt	le
 8011a76:	2330      	movle	r3, #48	; 0x30
 8011a78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011a7c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011a80:	1b52      	subs	r2, r2, r5
 8011a82:	6122      	str	r2, [r4, #16]
 8011a84:	f8cd a000 	str.w	sl, [sp]
 8011a88:	464b      	mov	r3, r9
 8011a8a:	aa03      	add	r2, sp, #12
 8011a8c:	4621      	mov	r1, r4
 8011a8e:	4640      	mov	r0, r8
 8011a90:	f7ff fee2 	bl	8011858 <_printf_common>
 8011a94:	3001      	adds	r0, #1
 8011a96:	d14c      	bne.n	8011b32 <_printf_i+0x1fe>
 8011a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a9c:	b004      	add	sp, #16
 8011a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011aa2:	4835      	ldr	r0, [pc, #212]	; (8011b78 <_printf_i+0x244>)
 8011aa4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011aa8:	6829      	ldr	r1, [r5, #0]
 8011aaa:	6823      	ldr	r3, [r4, #0]
 8011aac:	f851 6b04 	ldr.w	r6, [r1], #4
 8011ab0:	6029      	str	r1, [r5, #0]
 8011ab2:	061d      	lsls	r5, r3, #24
 8011ab4:	d514      	bpl.n	8011ae0 <_printf_i+0x1ac>
 8011ab6:	07df      	lsls	r7, r3, #31
 8011ab8:	bf44      	itt	mi
 8011aba:	f043 0320 	orrmi.w	r3, r3, #32
 8011abe:	6023      	strmi	r3, [r4, #0]
 8011ac0:	b91e      	cbnz	r6, 8011aca <_printf_i+0x196>
 8011ac2:	6823      	ldr	r3, [r4, #0]
 8011ac4:	f023 0320 	bic.w	r3, r3, #32
 8011ac8:	6023      	str	r3, [r4, #0]
 8011aca:	2310      	movs	r3, #16
 8011acc:	e7b0      	b.n	8011a30 <_printf_i+0xfc>
 8011ace:	6823      	ldr	r3, [r4, #0]
 8011ad0:	f043 0320 	orr.w	r3, r3, #32
 8011ad4:	6023      	str	r3, [r4, #0]
 8011ad6:	2378      	movs	r3, #120	; 0x78
 8011ad8:	4828      	ldr	r0, [pc, #160]	; (8011b7c <_printf_i+0x248>)
 8011ada:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011ade:	e7e3      	b.n	8011aa8 <_printf_i+0x174>
 8011ae0:	0659      	lsls	r1, r3, #25
 8011ae2:	bf48      	it	mi
 8011ae4:	b2b6      	uxthmi	r6, r6
 8011ae6:	e7e6      	b.n	8011ab6 <_printf_i+0x182>
 8011ae8:	4615      	mov	r5, r2
 8011aea:	e7bb      	b.n	8011a64 <_printf_i+0x130>
 8011aec:	682b      	ldr	r3, [r5, #0]
 8011aee:	6826      	ldr	r6, [r4, #0]
 8011af0:	6961      	ldr	r1, [r4, #20]
 8011af2:	1d18      	adds	r0, r3, #4
 8011af4:	6028      	str	r0, [r5, #0]
 8011af6:	0635      	lsls	r5, r6, #24
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	d501      	bpl.n	8011b00 <_printf_i+0x1cc>
 8011afc:	6019      	str	r1, [r3, #0]
 8011afe:	e002      	b.n	8011b06 <_printf_i+0x1d2>
 8011b00:	0670      	lsls	r0, r6, #25
 8011b02:	d5fb      	bpl.n	8011afc <_printf_i+0x1c8>
 8011b04:	8019      	strh	r1, [r3, #0]
 8011b06:	2300      	movs	r3, #0
 8011b08:	6123      	str	r3, [r4, #16]
 8011b0a:	4615      	mov	r5, r2
 8011b0c:	e7ba      	b.n	8011a84 <_printf_i+0x150>
 8011b0e:	682b      	ldr	r3, [r5, #0]
 8011b10:	1d1a      	adds	r2, r3, #4
 8011b12:	602a      	str	r2, [r5, #0]
 8011b14:	681d      	ldr	r5, [r3, #0]
 8011b16:	6862      	ldr	r2, [r4, #4]
 8011b18:	2100      	movs	r1, #0
 8011b1a:	4628      	mov	r0, r5
 8011b1c:	f7ee fb60 	bl	80001e0 <memchr>
 8011b20:	b108      	cbz	r0, 8011b26 <_printf_i+0x1f2>
 8011b22:	1b40      	subs	r0, r0, r5
 8011b24:	6060      	str	r0, [r4, #4]
 8011b26:	6863      	ldr	r3, [r4, #4]
 8011b28:	6123      	str	r3, [r4, #16]
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b30:	e7a8      	b.n	8011a84 <_printf_i+0x150>
 8011b32:	6923      	ldr	r3, [r4, #16]
 8011b34:	462a      	mov	r2, r5
 8011b36:	4649      	mov	r1, r9
 8011b38:	4640      	mov	r0, r8
 8011b3a:	47d0      	blx	sl
 8011b3c:	3001      	adds	r0, #1
 8011b3e:	d0ab      	beq.n	8011a98 <_printf_i+0x164>
 8011b40:	6823      	ldr	r3, [r4, #0]
 8011b42:	079b      	lsls	r3, r3, #30
 8011b44:	d413      	bmi.n	8011b6e <_printf_i+0x23a>
 8011b46:	68e0      	ldr	r0, [r4, #12]
 8011b48:	9b03      	ldr	r3, [sp, #12]
 8011b4a:	4298      	cmp	r0, r3
 8011b4c:	bfb8      	it	lt
 8011b4e:	4618      	movlt	r0, r3
 8011b50:	e7a4      	b.n	8011a9c <_printf_i+0x168>
 8011b52:	2301      	movs	r3, #1
 8011b54:	4632      	mov	r2, r6
 8011b56:	4649      	mov	r1, r9
 8011b58:	4640      	mov	r0, r8
 8011b5a:	47d0      	blx	sl
 8011b5c:	3001      	adds	r0, #1
 8011b5e:	d09b      	beq.n	8011a98 <_printf_i+0x164>
 8011b60:	3501      	adds	r5, #1
 8011b62:	68e3      	ldr	r3, [r4, #12]
 8011b64:	9903      	ldr	r1, [sp, #12]
 8011b66:	1a5b      	subs	r3, r3, r1
 8011b68:	42ab      	cmp	r3, r5
 8011b6a:	dcf2      	bgt.n	8011b52 <_printf_i+0x21e>
 8011b6c:	e7eb      	b.n	8011b46 <_printf_i+0x212>
 8011b6e:	2500      	movs	r5, #0
 8011b70:	f104 0619 	add.w	r6, r4, #25
 8011b74:	e7f5      	b.n	8011b62 <_printf_i+0x22e>
 8011b76:	bf00      	nop
 8011b78:	0801221d 	.word	0x0801221d
 8011b7c:	0801222e 	.word	0x0801222e

08011b80 <__retarget_lock_acquire_recursive>:
 8011b80:	4770      	bx	lr

08011b82 <__retarget_lock_release_recursive>:
 8011b82:	4770      	bx	lr

08011b84 <memcpy>:
 8011b84:	440a      	add	r2, r1
 8011b86:	4291      	cmp	r1, r2
 8011b88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011b8c:	d100      	bne.n	8011b90 <memcpy+0xc>
 8011b8e:	4770      	bx	lr
 8011b90:	b510      	push	{r4, lr}
 8011b92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011b96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011b9a:	4291      	cmp	r1, r2
 8011b9c:	d1f9      	bne.n	8011b92 <memcpy+0xe>
 8011b9e:	bd10      	pop	{r4, pc}

08011ba0 <memmove>:
 8011ba0:	4288      	cmp	r0, r1
 8011ba2:	b510      	push	{r4, lr}
 8011ba4:	eb01 0402 	add.w	r4, r1, r2
 8011ba8:	d902      	bls.n	8011bb0 <memmove+0x10>
 8011baa:	4284      	cmp	r4, r0
 8011bac:	4623      	mov	r3, r4
 8011bae:	d807      	bhi.n	8011bc0 <memmove+0x20>
 8011bb0:	1e43      	subs	r3, r0, #1
 8011bb2:	42a1      	cmp	r1, r4
 8011bb4:	d008      	beq.n	8011bc8 <memmove+0x28>
 8011bb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011bba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011bbe:	e7f8      	b.n	8011bb2 <memmove+0x12>
 8011bc0:	4402      	add	r2, r0
 8011bc2:	4601      	mov	r1, r0
 8011bc4:	428a      	cmp	r2, r1
 8011bc6:	d100      	bne.n	8011bca <memmove+0x2a>
 8011bc8:	bd10      	pop	{r4, pc}
 8011bca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011bce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011bd2:	e7f7      	b.n	8011bc4 <memmove+0x24>

08011bd4 <_realloc_r>:
 8011bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bd8:	4680      	mov	r8, r0
 8011bda:	4614      	mov	r4, r2
 8011bdc:	460e      	mov	r6, r1
 8011bde:	b921      	cbnz	r1, 8011bea <_realloc_r+0x16>
 8011be0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011be4:	4611      	mov	r1, r2
 8011be6:	f7ff bc1b 	b.w	8011420 <_malloc_r>
 8011bea:	b92a      	cbnz	r2, 8011bf8 <_realloc_r+0x24>
 8011bec:	f7ff fbac 	bl	8011348 <_free_r>
 8011bf0:	4625      	mov	r5, r4
 8011bf2:	4628      	mov	r0, r5
 8011bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bf8:	f000 f81b 	bl	8011c32 <_malloc_usable_size_r>
 8011bfc:	4284      	cmp	r4, r0
 8011bfe:	4607      	mov	r7, r0
 8011c00:	d802      	bhi.n	8011c08 <_realloc_r+0x34>
 8011c02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011c06:	d812      	bhi.n	8011c2e <_realloc_r+0x5a>
 8011c08:	4621      	mov	r1, r4
 8011c0a:	4640      	mov	r0, r8
 8011c0c:	f7ff fc08 	bl	8011420 <_malloc_r>
 8011c10:	4605      	mov	r5, r0
 8011c12:	2800      	cmp	r0, #0
 8011c14:	d0ed      	beq.n	8011bf2 <_realloc_r+0x1e>
 8011c16:	42bc      	cmp	r4, r7
 8011c18:	4622      	mov	r2, r4
 8011c1a:	4631      	mov	r1, r6
 8011c1c:	bf28      	it	cs
 8011c1e:	463a      	movcs	r2, r7
 8011c20:	f7ff ffb0 	bl	8011b84 <memcpy>
 8011c24:	4631      	mov	r1, r6
 8011c26:	4640      	mov	r0, r8
 8011c28:	f7ff fb8e 	bl	8011348 <_free_r>
 8011c2c:	e7e1      	b.n	8011bf2 <_realloc_r+0x1e>
 8011c2e:	4635      	mov	r5, r6
 8011c30:	e7df      	b.n	8011bf2 <_realloc_r+0x1e>

08011c32 <_malloc_usable_size_r>:
 8011c32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c36:	1f18      	subs	r0, r3, #4
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	bfbc      	itt	lt
 8011c3c:	580b      	ldrlt	r3, [r1, r0]
 8011c3e:	18c0      	addlt	r0, r0, r3
 8011c40:	4770      	bx	lr
	...

08011c44 <_init>:
 8011c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c46:	bf00      	nop
 8011c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c4a:	bc08      	pop	{r3}
 8011c4c:	469e      	mov	lr, r3
 8011c4e:	4770      	bx	lr

08011c50 <_fini>:
 8011c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c52:	bf00      	nop
 8011c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c56:	bc08      	pop	{r3}
 8011c58:	469e      	mov	lr, r3
 8011c5a:	4770      	bx	lr
