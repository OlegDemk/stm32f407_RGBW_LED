
lights_RGBW_PWM_DMA_two_chanels2_WORKS7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012364  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  080124f4  080124f4  000224f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b44  08012b44  000300c0  2**0
                  CONTENTS
  4 .ARM          00000008  08012b44  08012b44  00022b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b4c  08012b4c  000300c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b4c  08012b4c  00022b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012b50  08012b50  00022b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08012b54  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300c0  2**0
                  CONTENTS
 10 .bss          000038ac  200000c0  200000c0  000300c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000396c  2000396c  000300c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022d99  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f3e  00000000  00000000  00052e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b90  00000000  00000000  00057dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001988  00000000  00000000  00059958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002811a  00000000  00000000  0005b2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024ad0  00000000  00000000  000833fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6a1d  00000000  00000000  000a7eca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017e8e7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007dc0  00000000  00000000  0017e938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c0 	.word	0x200000c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080124dc 	.word	0x080124dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	080124dc 	.word	0x080124dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800089c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008a0:	f000 b974 	b.w	8000b8c <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468e      	mov	lr, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d14d      	bne.n	8000966 <__udivmoddi4+0xaa>
 80008ca:	428a      	cmp	r2, r1
 80008cc:	4694      	mov	ip, r2
 80008ce:	d969      	bls.n	80009a4 <__udivmoddi4+0xe8>
 80008d0:	fab2 f282 	clz	r2, r2
 80008d4:	b152      	cbz	r2, 80008ec <__udivmoddi4+0x30>
 80008d6:	fa01 f302 	lsl.w	r3, r1, r2
 80008da:	f1c2 0120 	rsb	r1, r2, #32
 80008de:	fa20 f101 	lsr.w	r1, r0, r1
 80008e2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008e6:	ea41 0e03 	orr.w	lr, r1, r3
 80008ea:	4094      	lsls	r4, r2
 80008ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f0:	0c21      	lsrs	r1, r4, #16
 80008f2:	fbbe f6f8 	udiv	r6, lr, r8
 80008f6:	fa1f f78c 	uxth.w	r7, ip
 80008fa:	fb08 e316 	mls	r3, r8, r6, lr
 80008fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000902:	fb06 f107 	mul.w	r1, r6, r7
 8000906:	4299      	cmp	r1, r3
 8000908:	d90a      	bls.n	8000920 <__udivmoddi4+0x64>
 800090a:	eb1c 0303 	adds.w	r3, ip, r3
 800090e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000912:	f080 811f 	bcs.w	8000b54 <__udivmoddi4+0x298>
 8000916:	4299      	cmp	r1, r3
 8000918:	f240 811c 	bls.w	8000b54 <__udivmoddi4+0x298>
 800091c:	3e02      	subs	r6, #2
 800091e:	4463      	add	r3, ip
 8000920:	1a5b      	subs	r3, r3, r1
 8000922:	b2a4      	uxth	r4, r4
 8000924:	fbb3 f0f8 	udiv	r0, r3, r8
 8000928:	fb08 3310 	mls	r3, r8, r0, r3
 800092c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000930:	fb00 f707 	mul.w	r7, r0, r7
 8000934:	42a7      	cmp	r7, r4
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x92>
 8000938:	eb1c 0404 	adds.w	r4, ip, r4
 800093c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000940:	f080 810a 	bcs.w	8000b58 <__udivmoddi4+0x29c>
 8000944:	42a7      	cmp	r7, r4
 8000946:	f240 8107 	bls.w	8000b58 <__udivmoddi4+0x29c>
 800094a:	4464      	add	r4, ip
 800094c:	3802      	subs	r0, #2
 800094e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000952:	1be4      	subs	r4, r4, r7
 8000954:	2600      	movs	r6, #0
 8000956:	b11d      	cbz	r5, 8000960 <__udivmoddi4+0xa4>
 8000958:	40d4      	lsrs	r4, r2
 800095a:	2300      	movs	r3, #0
 800095c:	e9c5 4300 	strd	r4, r3, [r5]
 8000960:	4631      	mov	r1, r6
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000966:	428b      	cmp	r3, r1
 8000968:	d909      	bls.n	800097e <__udivmoddi4+0xc2>
 800096a:	2d00      	cmp	r5, #0
 800096c:	f000 80ef 	beq.w	8000b4e <__udivmoddi4+0x292>
 8000970:	2600      	movs	r6, #0
 8000972:	e9c5 0100 	strd	r0, r1, [r5]
 8000976:	4630      	mov	r0, r6
 8000978:	4631      	mov	r1, r6
 800097a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800097e:	fab3 f683 	clz	r6, r3
 8000982:	2e00      	cmp	r6, #0
 8000984:	d14a      	bne.n	8000a1c <__udivmoddi4+0x160>
 8000986:	428b      	cmp	r3, r1
 8000988:	d302      	bcc.n	8000990 <__udivmoddi4+0xd4>
 800098a:	4282      	cmp	r2, r0
 800098c:	f200 80f9 	bhi.w	8000b82 <__udivmoddi4+0x2c6>
 8000990:	1a84      	subs	r4, r0, r2
 8000992:	eb61 0303 	sbc.w	r3, r1, r3
 8000996:	2001      	movs	r0, #1
 8000998:	469e      	mov	lr, r3
 800099a:	2d00      	cmp	r5, #0
 800099c:	d0e0      	beq.n	8000960 <__udivmoddi4+0xa4>
 800099e:	e9c5 4e00 	strd	r4, lr, [r5]
 80009a2:	e7dd      	b.n	8000960 <__udivmoddi4+0xa4>
 80009a4:	b902      	cbnz	r2, 80009a8 <__udivmoddi4+0xec>
 80009a6:	deff      	udf	#255	; 0xff
 80009a8:	fab2 f282 	clz	r2, r2
 80009ac:	2a00      	cmp	r2, #0
 80009ae:	f040 8092 	bne.w	8000ad6 <__udivmoddi4+0x21a>
 80009b2:	eba1 010c 	sub.w	r1, r1, ip
 80009b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ba:	fa1f fe8c 	uxth.w	lr, ip
 80009be:	2601      	movs	r6, #1
 80009c0:	0c20      	lsrs	r0, r4, #16
 80009c2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009c6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ce:	fb0e f003 	mul.w	r0, lr, r3
 80009d2:	4288      	cmp	r0, r1
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x12c>
 80009d6:	eb1c 0101 	adds.w	r1, ip, r1
 80009da:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x12a>
 80009e0:	4288      	cmp	r0, r1
 80009e2:	f200 80cb 	bhi.w	8000b7c <__udivmoddi4+0x2c0>
 80009e6:	4643      	mov	r3, r8
 80009e8:	1a09      	subs	r1, r1, r0
 80009ea:	b2a4      	uxth	r4, r4
 80009ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f0:	fb07 1110 	mls	r1, r7, r0, r1
 80009f4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009f8:	fb0e fe00 	mul.w	lr, lr, r0
 80009fc:	45a6      	cmp	lr, r4
 80009fe:	d908      	bls.n	8000a12 <__udivmoddi4+0x156>
 8000a00:	eb1c 0404 	adds.w	r4, ip, r4
 8000a04:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000a08:	d202      	bcs.n	8000a10 <__udivmoddi4+0x154>
 8000a0a:	45a6      	cmp	lr, r4
 8000a0c:	f200 80bb 	bhi.w	8000b86 <__udivmoddi4+0x2ca>
 8000a10:	4608      	mov	r0, r1
 8000a12:	eba4 040e 	sub.w	r4, r4, lr
 8000a16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a1a:	e79c      	b.n	8000956 <__udivmoddi4+0x9a>
 8000a1c:	f1c6 0720 	rsb	r7, r6, #32
 8000a20:	40b3      	lsls	r3, r6
 8000a22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a32:	431c      	orrs	r4, r3
 8000a34:	40f9      	lsrs	r1, r7
 8000a36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a42:	0c20      	lsrs	r0, r4, #16
 8000a44:	fa1f fe8c 	uxth.w	lr, ip
 8000a48:	fb09 1118 	mls	r1, r9, r8, r1
 8000a4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a50:	fb08 f00e 	mul.w	r0, r8, lr
 8000a54:	4288      	cmp	r0, r1
 8000a56:	fa02 f206 	lsl.w	r2, r2, r6
 8000a5a:	d90b      	bls.n	8000a74 <__udivmoddi4+0x1b8>
 8000a5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a60:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000a64:	f080 8088 	bcs.w	8000b78 <__udivmoddi4+0x2bc>
 8000a68:	4288      	cmp	r0, r1
 8000a6a:	f240 8085 	bls.w	8000b78 <__udivmoddi4+0x2bc>
 8000a6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a72:	4461      	add	r1, ip
 8000a74:	1a09      	subs	r1, r1, r0
 8000a76:	b2a4      	uxth	r4, r4
 8000a78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a88:	458e      	cmp	lr, r1
 8000a8a:	d908      	bls.n	8000a9e <__udivmoddi4+0x1e2>
 8000a8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a90:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000a94:	d26c      	bcs.n	8000b70 <__udivmoddi4+0x2b4>
 8000a96:	458e      	cmp	lr, r1
 8000a98:	d96a      	bls.n	8000b70 <__udivmoddi4+0x2b4>
 8000a9a:	3802      	subs	r0, #2
 8000a9c:	4461      	add	r1, ip
 8000a9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aa2:	fba0 9402 	umull	r9, r4, r0, r2
 8000aa6:	eba1 010e 	sub.w	r1, r1, lr
 8000aaa:	42a1      	cmp	r1, r4
 8000aac:	46c8      	mov	r8, r9
 8000aae:	46a6      	mov	lr, r4
 8000ab0:	d356      	bcc.n	8000b60 <__udivmoddi4+0x2a4>
 8000ab2:	d053      	beq.n	8000b5c <__udivmoddi4+0x2a0>
 8000ab4:	b15d      	cbz	r5, 8000ace <__udivmoddi4+0x212>
 8000ab6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aba:	eb61 010e 	sbc.w	r1, r1, lr
 8000abe:	fa01 f707 	lsl.w	r7, r1, r7
 8000ac2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ac6:	40f1      	lsrs	r1, r6
 8000ac8:	431f      	orrs	r7, r3
 8000aca:	e9c5 7100 	strd	r7, r1, [r5]
 8000ace:	2600      	movs	r6, #0
 8000ad0:	4631      	mov	r1, r6
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	40d8      	lsrs	r0, r3
 8000adc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ae4:	4091      	lsls	r1, r2
 8000ae6:	4301      	orrs	r1, r0
 8000ae8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aec:	fa1f fe8c 	uxth.w	lr, ip
 8000af0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000af4:	fb07 3610 	mls	r6, r7, r0, r3
 8000af8:	0c0b      	lsrs	r3, r1, #16
 8000afa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000afe:	fb00 f60e 	mul.w	r6, r0, lr
 8000b02:	429e      	cmp	r6, r3
 8000b04:	fa04 f402 	lsl.w	r4, r4, r2
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x260>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000b12:	d22f      	bcs.n	8000b74 <__udivmoddi4+0x2b8>
 8000b14:	429e      	cmp	r6, r3
 8000b16:	d92d      	bls.n	8000b74 <__udivmoddi4+0x2b8>
 8000b18:	3802      	subs	r0, #2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	1b9b      	subs	r3, r3, r6
 8000b1e:	b289      	uxth	r1, r1
 8000b20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b24:	fb07 3316 	mls	r3, r7, r6, r3
 8000b28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b30:	428b      	cmp	r3, r1
 8000b32:	d908      	bls.n	8000b46 <__udivmoddi4+0x28a>
 8000b34:	eb1c 0101 	adds.w	r1, ip, r1
 8000b38:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000b3c:	d216      	bcs.n	8000b6c <__udivmoddi4+0x2b0>
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d914      	bls.n	8000b6c <__udivmoddi4+0x2b0>
 8000b42:	3e02      	subs	r6, #2
 8000b44:	4461      	add	r1, ip
 8000b46:	1ac9      	subs	r1, r1, r3
 8000b48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b4c:	e738      	b.n	80009c0 <__udivmoddi4+0x104>
 8000b4e:	462e      	mov	r6, r5
 8000b50:	4628      	mov	r0, r5
 8000b52:	e705      	b.n	8000960 <__udivmoddi4+0xa4>
 8000b54:	4606      	mov	r6, r0
 8000b56:	e6e3      	b.n	8000920 <__udivmoddi4+0x64>
 8000b58:	4618      	mov	r0, r3
 8000b5a:	e6f8      	b.n	800094e <__udivmoddi4+0x92>
 8000b5c:	454b      	cmp	r3, r9
 8000b5e:	d2a9      	bcs.n	8000ab4 <__udivmoddi4+0x1f8>
 8000b60:	ebb9 0802 	subs.w	r8, r9, r2
 8000b64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b68:	3801      	subs	r0, #1
 8000b6a:	e7a3      	b.n	8000ab4 <__udivmoddi4+0x1f8>
 8000b6c:	4646      	mov	r6, r8
 8000b6e:	e7ea      	b.n	8000b46 <__udivmoddi4+0x28a>
 8000b70:	4620      	mov	r0, r4
 8000b72:	e794      	b.n	8000a9e <__udivmoddi4+0x1e2>
 8000b74:	4640      	mov	r0, r8
 8000b76:	e7d1      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b78:	46d0      	mov	r8, sl
 8000b7a:	e77b      	b.n	8000a74 <__udivmoddi4+0x1b8>
 8000b7c:	3b02      	subs	r3, #2
 8000b7e:	4461      	add	r1, ip
 8000b80:	e732      	b.n	80009e8 <__udivmoddi4+0x12c>
 8000b82:	4630      	mov	r0, r6
 8000b84:	e709      	b.n	800099a <__udivmoddi4+0xde>
 8000b86:	4464      	add	r4, ip
 8000b88:	3802      	subs	r0, #2
 8000b8a:	e742      	b.n	8000a12 <__udivmoddi4+0x156>

08000b8c <__aeabi_idiv0>:
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <stop_light_turn_on_left>:
#define RIGHT_5_OFF		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3)


// ----------------------------------------------------------------------------------------
void stop_light_turn_on_left(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	LEFT_1_ON; 		LEFT_2_ON;		LEFT_3_ON;		LEFT_4_ON;		LEFT_5_ON;
 8000b94:	2100      	movs	r1, #0
 8000b96:	480a      	ldr	r0, [pc, #40]	; (8000bc0 <stop_light_turn_on_left+0x30>)
 8000b98:	f007 f91a 	bl	8007dd0 <HAL_TIM_PWM_Start>
 8000b9c:	2104      	movs	r1, #4
 8000b9e:	4808      	ldr	r0, [pc, #32]	; (8000bc0 <stop_light_turn_on_left+0x30>)
 8000ba0:	f007 f916 	bl	8007dd0 <HAL_TIM_PWM_Start>
 8000ba4:	2108      	movs	r1, #8
 8000ba6:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <stop_light_turn_on_left+0x30>)
 8000ba8:	f007 f912 	bl	8007dd0 <HAL_TIM_PWM_Start>
 8000bac:	210c      	movs	r1, #12
 8000bae:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <stop_light_turn_on_left+0x30>)
 8000bb0:	f007 f90e 	bl	8007dd0 <HAL_TIM_PWM_Start>
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <stop_light_turn_on_left+0x34>)
 8000bb8:	f007 f90a 	bl	8007dd0 <HAL_TIM_PWM_Start>
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200019ec 	.word	0x200019ec
 8000bc4:	20001a34 	.word	0x20001a34

08000bc8 <stop_light_turn_on_right>:

// ----------------------------------------------------------------------------------------
void stop_light_turn_on_right(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	RIGHT_1_ON;		RIGHT_2_ON;		RIGHT_3_ON;		RIGHT_4_ON;		RIGHT_5_ON;
 8000bcc:	2104      	movs	r1, #4
 8000bce:	480a      	ldr	r0, [pc, #40]	; (8000bf8 <stop_light_turn_on_right+0x30>)
 8000bd0:	f007 f8fe 	bl	8007dd0 <HAL_TIM_PWM_Start>
 8000bd4:	2108      	movs	r1, #8
 8000bd6:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <stop_light_turn_on_right+0x30>)
 8000bd8:	f007 f8fa 	bl	8007dd0 <HAL_TIM_PWM_Start>
 8000bdc:	210c      	movs	r1, #12
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <stop_light_turn_on_right+0x30>)
 8000be0:	f007 f8f6 	bl	8007dd0 <HAL_TIM_PWM_Start>
 8000be4:	2104      	movs	r1, #4
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <stop_light_turn_on_right+0x34>)
 8000be8:	f007 f8f2 	bl	8007dd0 <HAL_TIM_PWM_Start>
 8000bec:	2108      	movs	r1, #8
 8000bee:	4803      	ldr	r0, [pc, #12]	; (8000bfc <stop_light_turn_on_right+0x34>)
 8000bf0:	f007 f8ee 	bl	8007dd0 <HAL_TIM_PWM_Start>
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20001a34 	.word	0x20001a34
 8000bfc:	20001a7c 	.word	0x20001a7c

08000c00 <stop_light_turn_off_left>:

// ----------------------------------------------------------------------------------------
void stop_light_turn_off_left(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	LEFT_1_OFF;		LEFT_2_OFF;		LEFT_3_OFF;		LEFT_4_OFF;		LEFT_5_OFF;
 8000c04:	2100      	movs	r1, #0
 8000c06:	480a      	ldr	r0, [pc, #40]	; (8000c30 <stop_light_turn_off_left+0x30>)
 8000c08:	f007 f9aa 	bl	8007f60 <HAL_TIM_PWM_Stop>
 8000c0c:	2104      	movs	r1, #4
 8000c0e:	4808      	ldr	r0, [pc, #32]	; (8000c30 <stop_light_turn_off_left+0x30>)
 8000c10:	f007 f9a6 	bl	8007f60 <HAL_TIM_PWM_Stop>
 8000c14:	2108      	movs	r1, #8
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <stop_light_turn_off_left+0x30>)
 8000c18:	f007 f9a2 	bl	8007f60 <HAL_TIM_PWM_Stop>
 8000c1c:	210c      	movs	r1, #12
 8000c1e:	4804      	ldr	r0, [pc, #16]	; (8000c30 <stop_light_turn_off_left+0x30>)
 8000c20:	f007 f99e 	bl	8007f60 <HAL_TIM_PWM_Stop>
 8000c24:	2100      	movs	r1, #0
 8000c26:	4803      	ldr	r0, [pc, #12]	; (8000c34 <stop_light_turn_off_left+0x34>)
 8000c28:	f007 f99a 	bl	8007f60 <HAL_TIM_PWM_Stop>
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200019ec 	.word	0x200019ec
 8000c34:	20001a34 	.word	0x20001a34

08000c38 <stop_light_turn_off_right>:

// ----------------------------------------------------------------------------------------
void stop_light_turn_off_right(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	RIGHT_1_OFF;	RIGHT_2_OFF;	RIGHT_3_OFF;	RIGHT_4_OFF;	RIGHT_5_OFF;
 8000c3c:	2104      	movs	r1, #4
 8000c3e:	480a      	ldr	r0, [pc, #40]	; (8000c68 <stop_light_turn_off_right+0x30>)
 8000c40:	f007 f98e 	bl	8007f60 <HAL_TIM_PWM_Stop>
 8000c44:	2108      	movs	r1, #8
 8000c46:	4808      	ldr	r0, [pc, #32]	; (8000c68 <stop_light_turn_off_right+0x30>)
 8000c48:	f007 f98a 	bl	8007f60 <HAL_TIM_PWM_Stop>
 8000c4c:	210c      	movs	r1, #12
 8000c4e:	4806      	ldr	r0, [pc, #24]	; (8000c68 <stop_light_turn_off_right+0x30>)
 8000c50:	f007 f986 	bl	8007f60 <HAL_TIM_PWM_Stop>
 8000c54:	2104      	movs	r1, #4
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <stop_light_turn_off_right+0x34>)
 8000c58:	f007 f982 	bl	8007f60 <HAL_TIM_PWM_Stop>
 8000c5c:	2108      	movs	r1, #8
 8000c5e:	4803      	ldr	r0, [pc, #12]	; (8000c6c <stop_light_turn_off_right+0x34>)
 8000c60:	f007 f97e 	bl	8007f60 <HAL_TIM_PWM_Stop>
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20001a34 	.word	0x20001a34
 8000c6c:	20001a7c 	.word	0x20001a7c

08000c70 <set_duty_cycle_stop_left_1>:
	RIGHT_1_ON;
	HAL_Delay(delay);
}
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_left_1(int duty_cycle)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_cycle);
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <set_duty_cycle_stop_left_1+0x1c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	20001a34 	.word	0x20001a34

08000c90 <set_duty_cycle_stop_left_2>:
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_left_2(int duty_cycle)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, duty_cycle);
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <set_duty_cycle_stop_left_2+0x1c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	200019ec 	.word	0x200019ec

08000cb0 <set_duty_cycle_stop_left_3>:
// ---------------------------------------------------------------------------------------
void set_duty_cycle_stop_left_3(int duty_cycle)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle);
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <set_duty_cycle_stop_left_3+0x1c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	200019ec 	.word	0x200019ec

08000cd0 <set_duty_cycle_stop_left_4>:
// ---------------------------------------------------------------------------------------
void set_duty_cycle_stop_left_4(int duty_cycle)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty_cycle);
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <set_duty_cycle_stop_left_4+0x1c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	200019ec 	.word	0x200019ec

08000cf0 <set_duty_cycle_stop_left_5>:
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_left_5(int duty_cycle)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle);
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <set_duty_cycle_stop_left_5+0x1c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	200019ec 	.word	0x200019ec

08000d10 <set_duty_cycle_stop_ritht_1>:
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_ritht_1(int duty_cycle)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, duty_cycle);
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <set_duty_cycle_stop_ritht_1+0x1c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	20001a7c 	.word	0x20001a7c

08000d30 <set_duty_cycle_stop_ritht_2>:
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_ritht_2(int duty_cycle)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, duty_cycle);
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <set_duty_cycle_stop_ritht_2+0x1c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	20001a7c 	.word	0x20001a7c

08000d50 <set_duty_cycle_stop_ritht_3>:
// ---------------------------------------------------------------------------------------
void set_duty_cycle_stop_ritht_3(int duty_cycle)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, duty_cycle);
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <set_duty_cycle_stop_ritht_3+0x1c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	20001a34 	.word	0x20001a34

08000d70 <set_duty_cycle_stop_ritht_4>:
// ---------------------------------------------------------------------------------------
void set_duty_cycle_stop_ritht_4(int duty_cycle)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty_cycle);
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <set_duty_cycle_stop_ritht_4+0x1c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	20001a34 	.word	0x20001a34

08000d90 <set_duty_cycle_stop_ritht_5>:
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_ritht_5(int duty_cycle)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycle);
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <set_duty_cycle_stop_ritht_5+0x1c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	20001a34 	.word	0x20001a34

08000db0 <stop_light_all_turn_off>:
	stop_light_turn_on_right();
}

// ----------------------------------------------------------------------------------------
void stop_light_all_turn_off(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0

	stop_light_turn_off_left();
 8000db4:	f7ff ff24 	bl	8000c00 <stop_light_turn_off_left>
	stop_light_turn_off_right();
 8000db8:	f7ff ff3e 	bl	8000c38 <stop_light_turn_off_right>
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <test_from_midle_to_corner>:
		}
	}
}
// ----------------------------------------------------------------------------------------
void test_from_midle_to_corner(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
	int delay = 1;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	603b      	str	r3, [r7, #0]
	int duty_cycle = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]

	  // Turn on RED LEDs
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4866      	ldr	r0, [pc, #408]	; (8000f6c <test_from_midle_to_corner+0x1ac>)
 8000dd2:	f006 fffd 	bl	8007dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000dd6:	2104      	movs	r1, #4
 8000dd8:	4864      	ldr	r0, [pc, #400]	; (8000f6c <test_from_midle_to_corner+0x1ac>)
 8000dda:	f006 fff9 	bl	8007dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000dde:	2108      	movs	r1, #8
 8000de0:	4862      	ldr	r0, [pc, #392]	; (8000f6c <test_from_midle_to_corner+0x1ac>)
 8000de2:	f006 fff5 	bl	8007dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000de6:	210c      	movs	r1, #12
 8000de8:	4860      	ldr	r0, [pc, #384]	; (8000f6c <test_from_midle_to_corner+0x1ac>)
 8000dea:	f006 fff1 	bl	8007dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000dee:	2100      	movs	r1, #0
 8000df0:	485f      	ldr	r0, [pc, #380]	; (8000f70 <test_from_midle_to_corner+0x1b0>)
 8000df2:	f006 ffed 	bl	8007dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000df6:	2104      	movs	r1, #4
 8000df8:	485d      	ldr	r0, [pc, #372]	; (8000f70 <test_from_midle_to_corner+0x1b0>)
 8000dfa:	f006 ffe9 	bl	8007dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000dfe:	2108      	movs	r1, #8
 8000e00:	485b      	ldr	r0, [pc, #364]	; (8000f70 <test_from_midle_to_corner+0x1b0>)
 8000e02:	f006 ffe5 	bl	8007dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000e06:	210c      	movs	r1, #12
 8000e08:	4859      	ldr	r0, [pc, #356]	; (8000f70 <test_from_midle_to_corner+0x1b0>)
 8000e0a:	f006 ffe1 	bl	8007dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000e0e:	2104      	movs	r1, #4
 8000e10:	4858      	ldr	r0, [pc, #352]	; (8000f74 <test_from_midle_to_corner+0x1b4>)
 8000e12:	f006 ffdd 	bl	8007dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000e16:	2108      	movs	r1, #8
 8000e18:	4856      	ldr	r0, [pc, #344]	; (8000f74 <test_from_midle_to_corner+0x1b4>)
 8000e1a:	f006 ffd9 	bl	8007dd0 <HAL_TIM_PWM_Start>

	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	e010      	b.n	8000e46 <test_from_midle_to_corner+0x86>
	{
		set_duty_cycle_stop_left_1(duty_cycle);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ff23 	bl	8000c70 <set_duty_cycle_stop_left_1>
		set_duty_cycle_stop_ritht_1(duty_cycle);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ff70 	bl	8000d10 <set_duty_cycle_stop_ritht_1>

		stop_light_turn_on_left();
 8000e30:	f7ff feae 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000e34:	f7ff fec8 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f003 fbea 	bl	8004614 <HAL_Delay>
	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3301      	adds	r3, #1
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b64      	cmp	r3, #100	; 0x64
 8000e4a:	ddeb      	ble.n	8000e24 <test_from_midle_to_corner+0x64>
	}

	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	e010      	b.n	8000e74 <test_from_midle_to_corner+0xb4>
	{
		set_duty_cycle_stop_left_2(duty_cycle);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ff1c 	bl	8000c90 <set_duty_cycle_stop_left_2>
		set_duty_cycle_stop_ritht_2(duty_cycle);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff ff69 	bl	8000d30 <set_duty_cycle_stop_ritht_2>

		stop_light_turn_on_left();
 8000e5e:	f7ff fe97 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000e62:	f7ff feb1 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f003 fbd3 	bl	8004614 <HAL_Delay>
	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3301      	adds	r3, #1
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b64      	cmp	r3, #100	; 0x64
 8000e78:	ddeb      	ble.n	8000e52 <test_from_midle_to_corner+0x92>
	}

	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	e010      	b.n	8000ea2 <test_from_midle_to_corner+0xe2>
	{
		set_duty_cycle_stop_left_3(duty_cycle);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff ff15 	bl	8000cb0 <set_duty_cycle_stop_left_3>
		set_duty_cycle_stop_ritht_3(duty_cycle);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ff62 	bl	8000d50 <set_duty_cycle_stop_ritht_3>

		stop_light_turn_on_left();
 8000e8c:	f7ff fe80 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000e90:	f7ff fe9a 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f003 fbbc 	bl	8004614 <HAL_Delay>
	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b64      	cmp	r3, #100	; 0x64
 8000ea6:	ddeb      	ble.n	8000e80 <test_from_midle_to_corner+0xc0>
	}

	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	e010      	b.n	8000ed0 <test_from_midle_to_corner+0x110>
	{
		set_duty_cycle_stop_left_4(duty_cycle);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ff0e 	bl	8000cd0 <set_duty_cycle_stop_left_4>
		set_duty_cycle_stop_ritht_4(duty_cycle);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff5b 	bl	8000d70 <set_duty_cycle_stop_ritht_4>

		stop_light_turn_on_left();
 8000eba:	f7ff fe69 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000ebe:	f7ff fe83 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f003 fba5 	bl	8004614 <HAL_Delay>
	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b64      	cmp	r3, #100	; 0x64
 8000ed4:	ddeb      	ble.n	8000eae <test_from_midle_to_corner+0xee>
	}

	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	e010      	b.n	8000efe <test_from_midle_to_corner+0x13e>
	{
		set_duty_cycle_stop_left_5(duty_cycle);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ff07 	bl	8000cf0 <set_duty_cycle_stop_left_5>
		set_duty_cycle_stop_ritht_5(duty_cycle);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ff54 	bl	8000d90 <set_duty_cycle_stop_ritht_5>

		stop_light_turn_on_left();
 8000ee8:	f7ff fe52 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000eec:	f7ff fe6c 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f003 fb8e 	bl	8004614 <HAL_Delay>
	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3301      	adds	r3, #1
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b64      	cmp	r3, #100	; 0x64
 8000f02:	ddeb      	ble.n	8000edc <test_from_midle_to_corner+0x11c>
	}

	for(duty_cycle = MAX_DEMO_BRIGHTNESS; duty_cycle >= 0; duty_cycle--)
 8000f04:	2364      	movs	r3, #100	; 0x64
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	e028      	b.n	8000f5c <test_from_midle_to_corner+0x19c>
	{
		set_duty_cycle_stop_left_1(duty_cycle);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff feb0 	bl	8000c70 <set_duty_cycle_stop_left_1>
		set_duty_cycle_stop_left_2(duty_cycle);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff febd 	bl	8000c90 <set_duty_cycle_stop_left_2>
		set_duty_cycle_stop_left_3(duty_cycle);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff feca 	bl	8000cb0 <set_duty_cycle_stop_left_3>
		set_duty_cycle_stop_left_4(duty_cycle);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff fed7 	bl	8000cd0 <set_duty_cycle_stop_left_4>
		set_duty_cycle_stop_left_5(duty_cycle);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff fee4 	bl	8000cf0 <set_duty_cycle_stop_left_5>

		set_duty_cycle_stop_ritht_1(duty_cycle);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff fef1 	bl	8000d10 <set_duty_cycle_stop_ritht_1>
		set_duty_cycle_stop_ritht_2(duty_cycle);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff fefe 	bl	8000d30 <set_duty_cycle_stop_ritht_2>
		set_duty_cycle_stop_ritht_3(duty_cycle);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff0b 	bl	8000d50 <set_duty_cycle_stop_ritht_3>
		set_duty_cycle_stop_ritht_4(duty_cycle);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ff18 	bl	8000d70 <set_duty_cycle_stop_ritht_4>
		set_duty_cycle_stop_ritht_5(duty_cycle);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ff25 	bl	8000d90 <set_duty_cycle_stop_ritht_5>

		stop_light_turn_on_left();
 8000f46:	f7ff fe23 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000f4a:	f7ff fe3d 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f003 fb5f 	bl	8004614 <HAL_Delay>
	for(duty_cycle = MAX_DEMO_BRIGHTNESS; duty_cycle >= 0; duty_cycle--)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	dad3      	bge.n	8000f0a <test_from_midle_to_corner+0x14a>
	}

}
 8000f62:	bf00      	nop
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200019ec 	.word	0x200019ec
 8000f70:	20001a34 	.word	0x20001a34
 8000f74:	20001a7c 	.word	0x20001a7c

08000f78 <ARGB_Init>:

/**
 * @brief Init timer & prescalers
 * @param none
 */
void ARGB_Init(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
    /* Auto-calculation! */
    u32_t APBfq; // Clock freq
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
 8000f7e:	f006 facb 	bl	8007518 <HAL_RCC_GetPCLK1Freq>
 8000f82:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
 8000f84:	4b36      	ldr	r3, [pc, #216]	; (8001060 <ARGB_Init+0xe8>)
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <ARGB_Init+0x1c>
 8000f90:	2301      	movs	r3, #1
 8000f92:	e000      	b.n	8000f96 <ARGB_Init+0x1e>
 8000f94:	2302      	movs	r3, #2
 8000f96:	461a      	mov	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	fb02 f303 	mul.w	r3, r2, r3
 8000f9e:	607b      	str	r3, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	0a1b      	lsrs	r3, r3, #8
 8000fa4:	4a2f      	ldr	r2, [pc, #188]	; (8001064 <ARGB_Init+0xec>)
 8000fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000faa:	091b      	lsrs	r3, r3, #4
 8000fac:	607b      	str	r3, [r7, #4]
#endif
    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 8000fae:	4b2e      	ldr	r3, [pc, #184]	; (8001068 <ARGB_Init+0xf0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	4b2a      	ldr	r3, [pc, #168]	; (8001068 <ARGB_Init+0xf0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 8000fc4:	4b28      	ldr	r3, [pc, #160]	; (8001068 <ARGB_Init+0xf0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	615a      	str	r2, [r3, #20]
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.56) - 1;     // Log.1 - 56% - 0.70us
    PWM_LO = (u8_t) (APBfq * 0.28) - 1;     // Log.0 - 28% - 0.35us
#endif
#ifdef SK6812
    PWM_HI = (u8_t) (APBfq * 0.50) - 1;     // Log.1 - 48% - 0.60us // v  PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff fbc3 	bl	8000758 <__aeabi_ui2d>
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	4b25      	ldr	r3, [pc, #148]	; (800106c <ARGB_Init+0xf4>)
 8000fd8:	f7ff f952 	bl	8000280 <__aeabi_dmul>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f7ff fc32 	bl	800084c <__aeabi_d2uiz>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	3b01      	subs	r3, #1
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <ARGB_Init+0xf8>)
 8000ff2:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.26) - 1;     // Log.0 - 24% - 0.30us  // PWM_LO = (u8_t) (APBfq * 0.24) - 1;
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff fbaf 	bl	8000758 <__aeabi_ui2d>
 8000ffa:	a317      	add	r3, pc, #92	; (adr r3, 8001058 <ARGB_Init+0xe0>)
 8000ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001000:	f7ff f93e 	bl	8000280 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4610      	mov	r0, r2
 800100a:	4619      	mov	r1, r3
 800100c:	f7ff fc1e 	bl	800084c <__aeabi_d2uiz>
 8001010:	4603      	mov	r3, r0
 8001012:	b2db      	uxtb	r3, r3
 8001014:	3b01      	subs	r3, #1
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4b16      	ldr	r3, [pc, #88]	; (8001074 <ARGB_Init+0xfc>)
 800101a:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST_LEFT = ARGB_READY; // Set Ready Flag
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <ARGB_Init+0x100>)
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH_LEFT, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <ARGB_Init+0xf0>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2201      	movs	r2, #1
 8001028:	2108      	movs	r1, #8
 800102a:	4618      	mov	r0, r3
 800102c:	f007 fdfe 	bl	8008c2c <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8001030:	2001      	movs	r0, #1
 8001032:	f003 faef 	bl	8004614 <HAL_Delay>
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH_RIGHT, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <ARGB_Init+0xf0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2201      	movs	r2, #1
 800103c:	210c      	movs	r1, #12
 800103e:	4618      	mov	r0, r3
 8001040:	f007 fdf4 	bl	8008c2c <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8001044:	2001      	movs	r0, #1
 8001046:	f003 fae5 	bl	8004614 <HAL_Delay>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	f3af 8000 	nop.w
 8001058:	0a3d70a4 	.word	0x0a3d70a4
 800105c:	3fd0a3d7 	.word	0x3fd0a3d7
 8001060:	40023800 	.word	0x40023800
 8001064:	014f8b59 	.word	0x014f8b59
 8001068:	20001ac4 	.word	0x20001ac4
 800106c:	3fe00000 	.word	0x3fe00000
 8001070:	200000dc 	.word	0x200000dc
 8001074:	200000dd 	.word	0x200000dd
 8001078:	2000058c 	.word	0x2000058c

0800107c <ARGB_Clear_left>:
/**
 * @brief Fill ALL LEDs with (0,0,0)
 * @param none
 * @note Update strip after that
 */
void ARGB_Clear_left(void) {
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
    ARGB_FillRGB_left(0, 0, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	2100      	movs	r1, #0
 8001084:	2000      	movs	r0, #0
 8001086:	f000 f95d 	bl	8001344 <ARGB_FillRGB_left>
#ifdef SK6812
    ARGB_FillWhite_left(0);
 800108a:	2000      	movs	r0, #0
 800108c:	f000 f99c 	bl	80013c8 <ARGB_FillWhite_left>
#endif
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}

08001094 <ARGB_Clear_right>:
// -------------------------------------------------------------------------------
void ARGB_Clear_right(void) {
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
    ARGB_FillRGB_right(0, 0, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2100      	movs	r1, #0
 800109c:	2000      	movs	r0, #0
 800109e:	f000 f972 	bl	8001386 <ARGB_FillRGB_right>
#ifdef SK6812
    ARGB_FillWhite_right(0);
 80010a2:	2000      	movs	r0, #0
 80010a4:	f000 f9ad 	bl	8001402 <ARGB_FillWhite_right>
#endif
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}

080010ac <ARGB_SetBrightness>:

/**
 * @brief Set GLOBAL LED brightness
 * @param[in] br Brightness [0..255]
 */
void ARGB_SetBrightness(u8_t br) {
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
    ARGB_BR = br;
 80010b6:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <ARGB_SetBrightness+0x1c>)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	7013      	strb	r3, [r2, #0]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	20000000 	.word	0x20000000

080010cc <ARGB_SetRGB_left>:
 * @param[in] i LED position
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_SetRGB_left(u16_t i, u8_t g, u8_t r, u8_t b) {
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4604      	mov	r4, r0
 80010d4:	4608      	mov	r0, r1
 80010d6:	4611      	mov	r1, r2
 80010d8:	461a      	mov	r2, r3
 80010da:	4623      	mov	r3, r4
 80010dc:	80fb      	strh	r3, [r7, #6]
 80010de:	4603      	mov	r3, r0
 80010e0:	717b      	strb	r3, [r7, #5]
 80010e2:	460b      	mov	r3, r1
 80010e4:	713b      	strb	r3, [r7, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	2b54      	cmp	r3, #84	; 0x54
 80010ee:	d913      	bls.n	8001118 <ARGB_SetRGB_left+0x4c>
        u16_t _i = i / NUM_PIXELS;
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	4a30      	ldr	r2, [pc, #192]	; (80011b4 <ARGB_SetRGB_left+0xe8>)
 80010f4:	fba2 2303 	umull	r2, r3, r2, r3
 80010f8:	099b      	lsrs	r3, r3, #6
 80010fa:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 80010fc:	89fb      	ldrh	r3, [r7, #14]
 80010fe:	461a      	mov	r2, r3
 8001100:	0092      	lsls	r2, r2, #2
 8001102:	4413      	add	r3, r2
 8001104:	461a      	mov	r2, r3
 8001106:	0111      	lsls	r1, r2, #4
 8001108:	461a      	mov	r2, r3
 800110a:	460b      	mov	r3, r1
 800110c:	4413      	add	r3, r2
 800110e:	425b      	negs	r3, r3
 8001110:	b29a      	uxth	r2, r3
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	4413      	add	r3, r2
 8001116:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 8001118:	4b27      	ldr	r3, [pc, #156]	; (80011b8 <ARGB_SetRGB_left+0xec>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	3301      	adds	r3, #1
 8001120:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001124:	fb92 f3f3 	sdiv	r3, r2, r3
 8001128:	793a      	ldrb	r2, [r7, #4]
 800112a:	fb92 f3f3 	sdiv	r3, r2, r3
 800112e:	713b      	strb	r3, [r7, #4]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 8001130:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <ARGB_SetRGB_left+0xec>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	3301      	adds	r3, #1
 8001138:	f44f 7280 	mov.w	r2, #256	; 0x100
 800113c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001140:	797a      	ldrb	r2, [r7, #5]
 8001142:	fb92 f3f3 	sdiv	r3, r2, r3
 8001146:	717b      	strb	r3, [r7, #5]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <ARGB_SetRGB_left+0xec>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	3301      	adds	r3, #1
 8001150:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001154:	fb92 f3f3 	sdiv	r3, r2, r3
 8001158:	78fa      	ldrb	r2, [r7, #3]
 800115a:	fb92 f3f3 	sdiv	r3, r2, r3
 800115e:	70fb      	strb	r3, [r7, #3]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 8001160:	797b      	ldrb	r3, [r7, #5]
 8001162:	21b0      	movs	r1, #176	; 0xb0
 8001164:	4618      	mov	r0, r3
 8001166:	f000 fd01 	bl	8001b6c <scale8>
 800116a:	4603      	mov	r3, r0
 800116c:	717b      	strb	r3, [r7, #5]
    b = scale8(b, 0xF0);
 800116e:	78fb      	ldrb	r3, [r7, #3]
 8001170:	21f0      	movs	r1, #240	; 0xf0
 8001172:	4618      	mov	r0, r3
 8001174:	f000 fcfa 	bl	8001b6c <scale8>
 8001178:	4603      	mov	r3, r0
 800117a:	70fb      	strb	r3, [r7, #3]
#endif
    // Subpixel chain order
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
 800117c:	793b      	ldrb	r3, [r7, #4]
 800117e:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = g;
 8001180:	797b      	ldrb	r3, [r7, #5]
 8001182:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8001184:	78fb      	ldrb	r3, [r7, #3]
 8001186:	72fb      	strb	r3, [r7, #11]
    const u8_t subp2 = r;
    const u8_t subp3 = b;
#endif
    // RGB or RGBW
#ifdef SK6812
    RGB_BUF_LEFT[4 * i] = subp1;     // subpixel 1
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	490b      	ldr	r1, [pc, #44]	; (80011bc <ARGB_SetRGB_left+0xf0>)
 800118e:	7b7a      	ldrb	r2, [r7, #13]
 8001190:	54ca      	strb	r2, [r1, r3]
    RGB_BUF_LEFT[4 * i + 1] = subp2; // subpixel 2
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	3301      	adds	r3, #1
 8001198:	4908      	ldr	r1, [pc, #32]	; (80011bc <ARGB_SetRGB_left+0xf0>)
 800119a:	7b3a      	ldrb	r2, [r7, #12]
 800119c:	54ca      	strb	r2, [r1, r3]
    RGB_BUF_LEFT[4 * i + 2] = subp3; // subpixel 3
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	3302      	adds	r3, #2
 80011a4:	4905      	ldr	r1, [pc, #20]	; (80011bc <ARGB_SetRGB_left+0xf0>)
 80011a6:	7afa      	ldrb	r2, [r7, #11]
 80011a8:	54ca      	strb	r2, [r1, r3]
#else
    RGB_BUF_LEFT[3 * i] = subp1;     // subpixel 1
    RGB_BUF_LEFT[3 * i + 1] = subp2; // subpixel 2
    RGB_BUF_LEFT[3 * i + 2] = subp3; // subpixel 3
#endif
}
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd90      	pop	{r4, r7, pc}
 80011b2:	bf00      	nop
 80011b4:	c0c0c0c1 	.word	0xc0c0c0c1
 80011b8:	20000000 	.word	0x20000000
 80011bc:	200000e0 	.word	0x200000e0

080011c0 <ARGB_SetRGB_right>:
// ----------------------------------------------------------------------------
void ARGB_SetRGB_right(u16_t i, u8_t g, u8_t r, u8_t b) {
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4604      	mov	r4, r0
 80011c8:	4608      	mov	r0, r1
 80011ca:	4611      	mov	r1, r2
 80011cc:	461a      	mov	r2, r3
 80011ce:	4623      	mov	r3, r4
 80011d0:	80fb      	strh	r3, [r7, #6]
 80011d2:	4603      	mov	r3, r0
 80011d4:	717b      	strb	r3, [r7, #5]
 80011d6:	460b      	mov	r3, r1
 80011d8:	713b      	strb	r3, [r7, #4]
 80011da:	4613      	mov	r3, r2
 80011dc:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	2b54      	cmp	r3, #84	; 0x54
 80011e2:	d913      	bls.n	800120c <ARGB_SetRGB_right+0x4c>
        u16_t _i = i / NUM_PIXELS;
 80011e4:	88fb      	ldrh	r3, [r7, #6]
 80011e6:	4a30      	ldr	r2, [pc, #192]	; (80012a8 <ARGB_SetRGB_right+0xe8>)
 80011e8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ec:	099b      	lsrs	r3, r3, #6
 80011ee:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 80011f0:	89fb      	ldrh	r3, [r7, #14]
 80011f2:	461a      	mov	r2, r3
 80011f4:	0092      	lsls	r2, r2, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	461a      	mov	r2, r3
 80011fa:	0111      	lsls	r1, r2, #4
 80011fc:	461a      	mov	r2, r3
 80011fe:	460b      	mov	r3, r1
 8001200:	4413      	add	r3, r2
 8001202:	425b      	negs	r3, r3
 8001204:	b29a      	uxth	r2, r3
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	4413      	add	r3, r2
 800120a:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 800120c:	4b27      	ldr	r3, [pc, #156]	; (80012ac <ARGB_SetRGB_right+0xec>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	3301      	adds	r3, #1
 8001214:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001218:	fb92 f3f3 	sdiv	r3, r2, r3
 800121c:	793a      	ldrb	r2, [r7, #4]
 800121e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001222:	713b      	strb	r3, [r7, #4]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <ARGB_SetRGB_right+0xec>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	3301      	adds	r3, #1
 800122c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001230:	fb92 f3f3 	sdiv	r3, r2, r3
 8001234:	797a      	ldrb	r2, [r7, #5]
 8001236:	fb92 f3f3 	sdiv	r3, r2, r3
 800123a:	717b      	strb	r3, [r7, #5]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <ARGB_SetRGB_right+0xec>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	3301      	adds	r3, #1
 8001244:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001248:	fb92 f3f3 	sdiv	r3, r2, r3
 800124c:	78fa      	ldrb	r2, [r7, #3]
 800124e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001252:	70fb      	strb	r3, [r7, #3]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 8001254:	797b      	ldrb	r3, [r7, #5]
 8001256:	21b0      	movs	r1, #176	; 0xb0
 8001258:	4618      	mov	r0, r3
 800125a:	f000 fc87 	bl	8001b6c <scale8>
 800125e:	4603      	mov	r3, r0
 8001260:	717b      	strb	r3, [r7, #5]
    b = scale8(b, 0xF0);
 8001262:	78fb      	ldrb	r3, [r7, #3]
 8001264:	21f0      	movs	r1, #240	; 0xf0
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fc80 	bl	8001b6c <scale8>
 800126c:	4603      	mov	r3, r0
 800126e:	70fb      	strb	r3, [r7, #3]
#endif
    // Subpixel chain order
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
 8001270:	793b      	ldrb	r3, [r7, #4]
 8001272:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = g;
 8001274:	797b      	ldrb	r3, [r7, #5]
 8001276:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	72fb      	strb	r3, [r7, #11]
    const u8_t subp2 = r;
    const u8_t subp3 = b;
#endif
    // RGB or RGBW
#ifdef SK6812
    RGB_BUF_RIGHT[4 * i] = subp1;     // subpixel 1
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	490b      	ldr	r1, [pc, #44]	; (80012b0 <ARGB_SetRGB_right+0xf0>)
 8001282:	7b7a      	ldrb	r2, [r7, #13]
 8001284:	54ca      	strb	r2, [r1, r3]
    RGB_BUF_RIGHT[4 * i + 1] = subp2; // subpixel 2
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	3301      	adds	r3, #1
 800128c:	4908      	ldr	r1, [pc, #32]	; (80012b0 <ARGB_SetRGB_right+0xf0>)
 800128e:	7b3a      	ldrb	r2, [r7, #12]
 8001290:	54ca      	strb	r2, [r1, r3]
    RGB_BUF_RIGHT[4 * i + 2] = subp3; // subpixel 3
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	4905      	ldr	r1, [pc, #20]	; (80012b0 <ARGB_SetRGB_right+0xf0>)
 800129a:	7afa      	ldrb	r2, [r7, #11]
 800129c:	54ca      	strb	r2, [r1, r3]
#else
    RGB_BUF_RIGHT[3 * i] = subp1;     // subpixel 1
    RGB_BUF_RIGHT[3 * i + 1] = subp2; // subpixel 2
    RGB_BUF_RIGHT[3 * i + 2] = subp3; // subpixel 3
#endif
}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd90      	pop	{r4, r7, pc}
 80012a6:	bf00      	nop
 80012a8:	c0c0c0c1 	.word	0xc0c0c0c1
 80012ac:	20000000 	.word	0x20000000
 80012b0:	20000234 	.word	0x20000234

080012b4 <ARGB_SetWhite_left>:
/**
 * @brief Set White component in strip by index
 * @param[in] i LED position
 * @param[in] w White component [0..255]
 */
void ARGB_SetWhite_left(u16_t i, u8_t w) {
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	460a      	mov	r2, r1
 80012be:	80fb      	strh	r3, [r7, #6]
 80012c0:	4613      	mov	r3, r2
 80012c2:	717b      	strb	r3, [r7, #5]
#ifdef RGB
    return;
#endif
    w /= 256 / ((u16_t) ARGB_BR + 1); 			// set brightness
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <ARGB_SetWhite_left+0x40>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	3301      	adds	r3, #1
 80012cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80012d4:	797a      	ldrb	r2, [r7, #5]
 80012d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80012da:	717b      	strb	r3, [r7, #5]
    RGB_BUF_LEFT[4 * i + 3] = w;                // set white part
 80012dc:	88fb      	ldrh	r3, [r7, #6]
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	3303      	adds	r3, #3
 80012e2:	4905      	ldr	r1, [pc, #20]	; (80012f8 <ARGB_SetWhite_left+0x44>)
 80012e4:	797a      	ldrb	r2, [r7, #5]
 80012e6:	54ca      	strb	r2, [r1, r3]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	20000000 	.word	0x20000000
 80012f8:	200000e0 	.word	0x200000e0

080012fc <ARGB_SetWhite_right>:
// -------------------------------------------------------------------
void ARGB_SetWhite_right(u16_t i, u8_t w) {
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	460a      	mov	r2, r1
 8001306:	80fb      	strh	r3, [r7, #6]
 8001308:	4613      	mov	r3, r2
 800130a:	717b      	strb	r3, [r7, #5]
#ifdef RGB
    return;
#endif
    w /= 256 / ((u16_t) ARGB_BR + 1); 			// set brightness
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <ARGB_SetWhite_right+0x40>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	3301      	adds	r3, #1
 8001314:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001318:	fb92 f3f3 	sdiv	r3, r2, r3
 800131c:	797a      	ldrb	r2, [r7, #5]
 800131e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001322:	717b      	strb	r3, [r7, #5]
    RGB_BUF_RIGHT[4 * i + 3] = w;               // set white part
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	3303      	adds	r3, #3
 800132a:	4905      	ldr	r1, [pc, #20]	; (8001340 <ARGB_SetWhite_right+0x44>)
 800132c:	797a      	ldrb	r2, [r7, #5]
 800132e:	54ca      	strb	r2, [r1, r3]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	20000000 	.word	0x20000000
 8001340:	20000234 	.word	0x20000234

08001344 <ARGB_FillRGB_left>:
 * @brief Fill ALL LEDs with RGB color
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_FillRGB_left(u8_t r, u8_t g, u8_t b) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
 800134e:	460b      	mov	r3, r1
 8001350:	71bb      	strb	r3, [r7, #6]
 8001352:	4613      	mov	r3, r2
 8001354:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8001356:	2300      	movs	r3, #0
 8001358:	81fb      	strh	r3, [r7, #14]
 800135a:	e00b      	b.n	8001374 <ARGB_FillRGB_left+0x30>
        ARGB_SetRGB_left(i, r, g, b);
 800135c:	89fb      	ldrh	r3, [r7, #14]
 800135e:	b298      	uxth	r0, r3
 8001360:	797b      	ldrb	r3, [r7, #5]
 8001362:	79ba      	ldrb	r2, [r7, #6]
 8001364:	79f9      	ldrb	r1, [r7, #7]
 8001366:	f7ff feb1 	bl	80010cc <ARGB_SetRGB_left>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 800136a:	89fb      	ldrh	r3, [r7, #14]
 800136c:	b29b      	uxth	r3, r3
 800136e:	3301      	adds	r3, #1
 8001370:	b29b      	uxth	r3, r3
 8001372:	81fb      	strh	r3, [r7, #14]
 8001374:	89fb      	ldrh	r3, [r7, #14]
 8001376:	b29b      	uxth	r3, r3
 8001378:	2b54      	cmp	r3, #84	; 0x54
 800137a:	d9ef      	bls.n	800135c <ARGB_FillRGB_left+0x18>
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <ARGB_FillRGB_right>:
// --------------------------------------------------------------------------------
void ARGB_FillRGB_right(u8_t r, u8_t g, u8_t b) {
 8001386:	b580      	push	{r7, lr}
 8001388:	b084      	sub	sp, #16
 800138a:	af00      	add	r7, sp, #0
 800138c:	4603      	mov	r3, r0
 800138e:	71fb      	strb	r3, [r7, #7]
 8001390:	460b      	mov	r3, r1
 8001392:	71bb      	strb	r3, [r7, #6]
 8001394:	4613      	mov	r3, r2
 8001396:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8001398:	2300      	movs	r3, #0
 800139a:	81fb      	strh	r3, [r7, #14]
 800139c:	e00b      	b.n	80013b6 <ARGB_FillRGB_right+0x30>
        ARGB_SetRGB_right(i, r, g, b);
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	b298      	uxth	r0, r3
 80013a2:	797b      	ldrb	r3, [r7, #5]
 80013a4:	79ba      	ldrb	r2, [r7, #6]
 80013a6:	79f9      	ldrb	r1, [r7, #7]
 80013a8:	f7ff ff0a 	bl	80011c0 <ARGB_SetRGB_right>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 80013ac:	89fb      	ldrh	r3, [r7, #14]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	3301      	adds	r3, #1
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	81fb      	strh	r3, [r7, #14]
 80013b6:	89fb      	ldrh	r3, [r7, #14]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	2b54      	cmp	r3, #84	; 0x54
 80013bc:	d9ef      	bls.n	800139e <ARGB_FillRGB_right+0x18>
}
 80013be:	bf00      	nop
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <ARGB_FillWhite_left>:

/**
 * @brief Set ALL White components in strip
 * @param[in] w White component [0..255]
 */
void ARGB_FillWhite_left(u8_t w) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	81fb      	strh	r3, [r7, #14]
 80013d6:	e00b      	b.n	80013f0 <ARGB_FillWhite_left+0x28>
        ARGB_SetWhite_left(i, w);
 80013d8:	89fb      	ldrh	r3, [r7, #14]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	79fa      	ldrb	r2, [r7, #7]
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff67 	bl	80012b4 <ARGB_SetWhite_left>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 80013e6:	89fb      	ldrh	r3, [r7, #14]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	3301      	adds	r3, #1
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	81fb      	strh	r3, [r7, #14]
 80013f0:	89fb      	ldrh	r3, [r7, #14]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	2b54      	cmp	r3, #84	; 0x54
 80013f6:	d9ef      	bls.n	80013d8 <ARGB_FillWhite_left+0x10>
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <ARGB_FillWhite_right>:
// --------------------------------------------------------------------------
void ARGB_FillWhite_right(u8_t w) {
 8001402:	b580      	push	{r7, lr}
 8001404:	b084      	sub	sp, #16
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	71fb      	strb	r3, [r7, #7]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 800140c:	2300      	movs	r3, #0
 800140e:	81fb      	strh	r3, [r7, #14]
 8001410:	e00b      	b.n	800142a <ARGB_FillWhite_right+0x28>
        ARGB_SetWhite_right(i, w);
 8001412:	89fb      	ldrh	r3, [r7, #14]
 8001414:	b29b      	uxth	r3, r3
 8001416:	79fa      	ldrb	r2, [r7, #7]
 8001418:	4611      	mov	r1, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff6e 	bl	80012fc <ARGB_SetWhite_right>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8001420:	89fb      	ldrh	r3, [r7, #14]
 8001422:	b29b      	uxth	r3, r3
 8001424:	3301      	adds	r3, #1
 8001426:	b29b      	uxth	r3, r3
 8001428:	81fb      	strh	r3, [r7, #14]
 800142a:	89fb      	ldrh	r3, [r7, #14]
 800142c:	b29b      	uxth	r3, r3
 800142e:	2b54      	cmp	r3, #84	; 0x54
 8001430:	d9ef      	bls.n	8001412 <ARGB_FillWhite_right+0x10>
}
 8001432:	bf00      	nop
 8001434:	bf00      	nop
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <ARGB_Show_left>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show_left(void) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
	ARGB_LOC_ST_LEFT = ARGB_BUSY;
 8001442:	4b9f      	ldr	r3, [pc, #636]	; (80016c0 <ARGB_Show_left+0x284>)
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER_LEFT != 0 || DMA_HANDLE_LEFT.State != HAL_DMA_STATE_READY) {   //////////////////////////////////////   BUF_COUNTER  ?????
 8001448:	4b9e      	ldr	r3, [pc, #632]	; (80016c4 <ARGB_Show_left+0x288>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	b29b      	uxth	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d105      	bne.n	800145e <ARGB_Show_left+0x22>
 8001452:	4b9d      	ldr	r3, [pc, #628]	; (80016c8 <ARGB_Show_left+0x28c>)
 8001454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b01      	cmp	r3, #1
 800145c:	d001      	beq.n	8001462 <ARGB_Show_left+0x26>
        return ARGB_BUSY;
 800145e:	2300      	movs	r3, #0
 8001460:	e1a1      	b.n	80017a6 <ARGB_Show_left+0x36a>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 8001462:	2300      	movs	r3, #0
 8001464:	71fb      	strb	r3, [r7, #7]
 8001466:	e0dc      	b.n	8001622 <ARGB_Show_left+0x1e6>
            // set first transfer from first values
        	PWM_BUF_LEFT[i] = (((RGB_BUF_LEFT[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001468:	4b98      	ldr	r3, [pc, #608]	; (80016cc <ARGB_Show_left+0x290>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	461a      	mov	r2, r3
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147c:	2b00      	cmp	r3, #0
 800147e:	dd04      	ble.n	800148a <ARGB_Show_left+0x4e>
 8001480:	4b93      	ldr	r3, [pc, #588]	; (80016d0 <ARGB_Show_left+0x294>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	461a      	mov	r2, r3
 8001488:	e003      	b.n	8001492 <ARGB_Show_left+0x56>
 800148a:	4b92      	ldr	r3, [pc, #584]	; (80016d4 <ARGB_Show_left+0x298>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	461a      	mov	r2, r3
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	4619      	mov	r1, r3
 8001498:	4b8f      	ldr	r3, [pc, #572]	; (80016d8 <ARGB_Show_left+0x29c>)
 800149a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        	PWM_BUF_LEFT[i + 8] = (((RGB_BUF_LEFT[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800149e:	4b8b      	ldr	r3, [pc, #556]	; (80016cc <ARGB_Show_left+0x290>)
 80014a0:	785b      	ldrb	r3, [r3, #1]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	461a      	mov	r2, r3
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	dd04      	ble.n	80014c0 <ARGB_Show_left+0x84>
 80014b6:	4b86      	ldr	r3, [pc, #536]	; (80016d0 <ARGB_Show_left+0x294>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	4619      	mov	r1, r3
 80014be:	e003      	b.n	80014c8 <ARGB_Show_left+0x8c>
 80014c0:	4b84      	ldr	r3, [pc, #528]	; (80016d4 <ARGB_Show_left+0x298>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	4619      	mov	r1, r3
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	3308      	adds	r3, #8
 80014ce:	4a82      	ldr	r2, [pc, #520]	; (80016d8 <ARGB_Show_left+0x29c>)
 80014d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 16] = (((RGB_BUF_LEFT[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80014d4:	4b7d      	ldr	r3, [pc, #500]	; (80016cc <ARGB_Show_left+0x290>)
 80014d6:	789b      	ldrb	r3, [r3, #2]
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	dd04      	ble.n	80014f6 <ARGB_Show_left+0xba>
 80014ec:	4b78      	ldr	r3, [pc, #480]	; (80016d0 <ARGB_Show_left+0x294>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	4619      	mov	r1, r3
 80014f4:	e003      	b.n	80014fe <ARGB_Show_left+0xc2>
 80014f6:	4b77      	ldr	r3, [pc, #476]	; (80016d4 <ARGB_Show_left+0x298>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	4619      	mov	r1, r3
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	3310      	adds	r3, #16
 8001504:	4a74      	ldr	r2, [pc, #464]	; (80016d8 <ARGB_Show_left+0x29c>)
 8001506:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 24] = (((RGB_BUF_LEFT[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800150a:	4b70      	ldr	r3, [pc, #448]	; (80016cc <ARGB_Show_left+0x290>)
 800150c:	78db      	ldrb	r3, [r3, #3]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151e:	2b00      	cmp	r3, #0
 8001520:	dd04      	ble.n	800152c <ARGB_Show_left+0xf0>
 8001522:	4b6b      	ldr	r3, [pc, #428]	; (80016d0 <ARGB_Show_left+0x294>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	4619      	mov	r1, r3
 800152a:	e003      	b.n	8001534 <ARGB_Show_left+0xf8>
 800152c:	4b69      	ldr	r3, [pc, #420]	; (80016d4 <ARGB_Show_left+0x298>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	4619      	mov	r1, r3
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	3318      	adds	r3, #24
 800153a:	4a67      	ldr	r2, [pc, #412]	; (80016d8 <ARGB_Show_left+0x29c>)
 800153c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 32] = (((RGB_BUF_LEFT[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001540:	4b62      	ldr	r3, [pc, #392]	; (80016cc <ARGB_Show_left+0x290>)
 8001542:	791b      	ldrb	r3, [r3, #4]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	461a      	mov	r2, r3
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001554:	2b00      	cmp	r3, #0
 8001556:	dd04      	ble.n	8001562 <ARGB_Show_left+0x126>
 8001558:	4b5d      	ldr	r3, [pc, #372]	; (80016d0 <ARGB_Show_left+0x294>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	4619      	mov	r1, r3
 8001560:	e003      	b.n	800156a <ARGB_Show_left+0x12e>
 8001562:	4b5c      	ldr	r3, [pc, #368]	; (80016d4 <ARGB_Show_left+0x298>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	4619      	mov	r1, r3
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	3320      	adds	r3, #32
 8001570:	4a59      	ldr	r2, [pc, #356]	; (80016d8 <ARGB_Show_left+0x29c>)
 8001572:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 40] = (((RGB_BUF_LEFT[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001576:	4b55      	ldr	r3, [pc, #340]	; (80016cc <ARGB_Show_left+0x290>)
 8001578:	795b      	ldrb	r3, [r3, #5]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	461a      	mov	r2, r3
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158a:	2b00      	cmp	r3, #0
 800158c:	dd04      	ble.n	8001598 <ARGB_Show_left+0x15c>
 800158e:	4b50      	ldr	r3, [pc, #320]	; (80016d0 <ARGB_Show_left+0x294>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	4619      	mov	r1, r3
 8001596:	e003      	b.n	80015a0 <ARGB_Show_left+0x164>
 8001598:	4b4e      	ldr	r3, [pc, #312]	; (80016d4 <ARGB_Show_left+0x298>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	4619      	mov	r1, r3
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	3328      	adds	r3, #40	; 0x28
 80015a6:	4a4c      	ldr	r2, [pc, #304]	; (80016d8 <ARGB_Show_left+0x29c>)
 80015a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#ifdef SK6812
        	PWM_BUF_LEFT[i + 48] = (((RGB_BUF_LEFT[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80015ac:	4b47      	ldr	r3, [pc, #284]	; (80016cc <ARGB_Show_left+0x290>)
 80015ae:	799b      	ldrb	r3, [r3, #6]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	461a      	mov	r2, r3
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	dd04      	ble.n	80015ce <ARGB_Show_left+0x192>
 80015c4:	4b42      	ldr	r3, [pc, #264]	; (80016d0 <ARGB_Show_left+0x294>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	4619      	mov	r1, r3
 80015cc:	e003      	b.n	80015d6 <ARGB_Show_left+0x19a>
 80015ce:	4b41      	ldr	r3, [pc, #260]	; (80016d4 <ARGB_Show_left+0x298>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	4619      	mov	r1, r3
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	3330      	adds	r3, #48	; 0x30
 80015dc:	4a3e      	ldr	r2, [pc, #248]	; (80016d8 <ARGB_Show_left+0x29c>)
 80015de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 56] = (((RGB_BUF_LEFT[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80015e2:	4b3a      	ldr	r3, [pc, #232]	; (80016cc <ARGB_Show_left+0x290>)
 80015e4:	79db      	ldrb	r3, [r3, #7]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	dd04      	ble.n	8001604 <ARGB_Show_left+0x1c8>
 80015fa:	4b35      	ldr	r3, [pc, #212]	; (80016d0 <ARGB_Show_left+0x294>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	4619      	mov	r1, r3
 8001602:	e003      	b.n	800160c <ARGB_Show_left+0x1d0>
 8001604:	4b33      	ldr	r3, [pc, #204]	; (80016d4 <ARGB_Show_left+0x298>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	4619      	mov	r1, r3
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	3338      	adds	r3, #56	; 0x38
 8001612:	4a31      	ldr	r2, [pc, #196]	; (80016d8 <ARGB_Show_left+0x29c>)
 8001614:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	3301      	adds	r3, #1
 800161e:	b2db      	uxtb	r3, r3
 8001620:	71fb      	strb	r3, [r7, #7]
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b07      	cmp	r3, #7
 8001628:	f67f af1e 	bls.w	8001468 <ARGB_Show_left+0x2c>
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001630:	e0b1      	b.n	8001796 <ARGB_Show_left+0x35a>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH_LEFT) == HAL_TIM_CHANNEL_STATE_BUSY) {
 8001632:	4b2a      	ldr	r3, [pc, #168]	; (80016dc <ARGB_Show_left+0x2a0>)
 8001634:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d102      	bne.n	8001644 <ARGB_Show_left+0x208>
                DMA_Send_Stat = HAL_BUSY;
 800163e:	2302      	movs	r3, #2
 8001640:	73fb      	strb	r3, [r7, #15]
                continue;
 8001642:	e0a8      	b.n	8001796 <ARGB_Show_left+0x35a>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH_LEFT) == HAL_TIM_CHANNEL_STATE_READY) {
 8001644:	4b25      	ldr	r3, [pc, #148]	; (80016dc <ARGB_Show_left+0x2a0>)
 8001646:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b01      	cmp	r3, #1
 800164e:	d11d      	bne.n	800168c <ARGB_Show_left+0x250>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH_LEFT, HAL_TIM_CHANNEL_STATE_BUSY);
 8001650:	4b22      	ldr	r3, [pc, #136]	; (80016dc <ARGB_Show_left+0x2a0>)
 8001652:	2202      	movs	r2, #2
 8001654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#elif TIM_CH_LEFT == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_L]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt_left;
 8001658:	4b20      	ldr	r3, [pc, #128]	; (80016dc <ARGB_Show_left+0x2a0>)
 800165a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165c:	4a20      	ldr	r2, [pc, #128]	; (80016e0 <ARGB_Show_left+0x2a4>)
 800165e:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_L]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt_left;
 8001660:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <ARGB_Show_left+0x2a0>)
 8001662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001664:	4a1f      	ldr	r2, [pc, #124]	; (80016e4 <ARGB_Show_left+0x2a8>)
 8001666:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_L]->XferErrorCallback = TIM_DMAError;
 8001668:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <ARGB_Show_left+0x2a0>)
 800166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166c:	4a1e      	ldr	r2, [pc, #120]	; (80016e8 <ARGB_Show_left+0x2ac>)
 800166e:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_L], (u32_t) PWM_BUF_LEFT,
 8001670:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <ARGB_Show_left+0x2a0>)
 8001672:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001674:	4918      	ldr	r1, [pc, #96]	; (80016d8 <ARGB_Show_left+0x29c>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR_L,
 8001676:	4b19      	ldr	r3, [pc, #100]	; (80016dc <ARGB_Show_left+0x2a0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	333c      	adds	r3, #60	; 0x3c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_L], (u32_t) PWM_BUF_LEFT,
 800167c:	461a      	mov	r2, r3
 800167e:	2340      	movs	r3, #64	; 0x40
 8001680:	f003 f9ac 	bl	80049dc <HAL_DMA_Start_IT>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d006      	beq.n	8001698 <ARGB_Show_left+0x25c>
 800168a:	e002      	b.n	8001692 <ARGB_Show_left+0x256>
                DMA_Send_Stat = HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	73fb      	strb	r3, [r7, #15]
                continue;
 8001690:	e081      	b.n	8001796 <ARGB_Show_left+0x35a>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	73fb      	strb	r3, [r7, #15]
                continue;
 8001696:	e07e      	b.n	8001796 <ARGB_Show_left+0x35a>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC_L);
 8001698:	4b10      	ldr	r3, [pc, #64]	; (80016dc <ARGB_Show_left+0x2a0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <ARGB_Show_left+0x2a0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016a6:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <ARGB_Show_left+0x2a0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0f      	ldr	r2, [pc, #60]	; (80016ec <ARGB_Show_left+0x2b0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d004      	beq.n	80016bc <ARGB_Show_left+0x280>
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <ARGB_Show_left+0x2a0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <ARGB_Show_left+0x2b4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d11b      	bne.n	80016f4 <ARGB_Show_left+0x2b8>
 80016bc:	2301      	movs	r3, #1
 80016be:	e01a      	b.n	80016f6 <ARGB_Show_left+0x2ba>
 80016c0:	2000058c 	.word	0x2000058c
 80016c4:	20000588 	.word	0x20000588
 80016c8:	20001b54 	.word	0x20001b54
 80016cc:	200000e0 	.word	0x200000e0
 80016d0:	200000dc 	.word	0x200000dc
 80016d4:	200000dd 	.word	0x200000dd
 80016d8:	20000388 	.word	0x20000388
 80016dc:	20001ac4 	.word	0x20001ac4
 80016e0:	08001b95 	.word	0x08001b95
 80016e4:	08002185 	.word	0x08002185
 80016e8:	080085c7 	.word	0x080085c7
 80016ec:	40010000 	.word	0x40010000
 80016f0:	40010400 	.word	0x40010400
 80016f4:	2300      	movs	r3, #0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d007      	beq.n	800170a <ARGB_Show_left+0x2ce>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 80016fa:	4b2d      	ldr	r3, [pc, #180]	; (80017b0 <ARGB_Show_left+0x374>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001700:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <ARGB_Show_left+0x374>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001708:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 800170a:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <ARGB_Show_left+0x374>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a29      	ldr	r2, [pc, #164]	; (80017b4 <ARGB_Show_left+0x378>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d022      	beq.n	800175a <ARGB_Show_left+0x31e>
 8001714:	4b26      	ldr	r3, [pc, #152]	; (80017b0 <ARGB_Show_left+0x374>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800171c:	d01d      	beq.n	800175a <ARGB_Show_left+0x31e>
 800171e:	4b24      	ldr	r3, [pc, #144]	; (80017b0 <ARGB_Show_left+0x374>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a25      	ldr	r2, [pc, #148]	; (80017b8 <ARGB_Show_left+0x37c>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d018      	beq.n	800175a <ARGB_Show_left+0x31e>
 8001728:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <ARGB_Show_left+0x374>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a23      	ldr	r2, [pc, #140]	; (80017bc <ARGB_Show_left+0x380>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d013      	beq.n	800175a <ARGB_Show_left+0x31e>
 8001732:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <ARGB_Show_left+0x374>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a22      	ldr	r2, [pc, #136]	; (80017c0 <ARGB_Show_left+0x384>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d00e      	beq.n	800175a <ARGB_Show_left+0x31e>
 800173c:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <ARGB_Show_left+0x374>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a20      	ldr	r2, [pc, #128]	; (80017c4 <ARGB_Show_left+0x388>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d009      	beq.n	800175a <ARGB_Show_left+0x31e>
 8001746:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <ARGB_Show_left+0x374>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a1f      	ldr	r2, [pc, #124]	; (80017c8 <ARGB_Show_left+0x38c>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d004      	beq.n	800175a <ARGB_Show_left+0x31e>
 8001750:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <ARGB_Show_left+0x374>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a1d      	ldr	r2, [pc, #116]	; (80017cc <ARGB_Show_left+0x390>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d111      	bne.n	800177e <ARGB_Show_left+0x342>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <ARGB_Show_left+0x374>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b06      	cmp	r3, #6
 800176a:	d011      	beq.n	8001790 <ARGB_Show_left+0x354>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 800176c:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <ARGB_Show_left+0x374>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <ARGB_Show_left+0x374>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0201 	orr.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 800177c:	e008      	b.n	8001790 <ARGB_Show_left+0x354>
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <ARGB_Show_left+0x374>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <ARGB_Show_left+0x374>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f042 0201 	orr.w	r2, r2, #1
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	e000      	b.n	8001792 <ARGB_Show_left+0x356>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001790:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	2b00      	cmp	r3, #0
 800179a:	f47f af4a 	bne.w	8001632 <ARGB_Show_left+0x1f6>
        }
        BUF_COUNTER_LEFT = 2;
 800179e:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <ARGB_Show_left+0x394>)
 80017a0:	2202      	movs	r2, #2
 80017a2:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 80017a4:	2302      	movs	r3, #2
    }
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20001ac4 	.word	0x20001ac4
 80017b4:	40010000 	.word	0x40010000
 80017b8:	40000400 	.word	0x40000400
 80017bc:	40000800 	.word	0x40000800
 80017c0:	40000c00 	.word	0x40000c00
 80017c4:	40010400 	.word	0x40010400
 80017c8:	40014000 	.word	0x40014000
 80017cc:	40001800 	.word	0x40001800
 80017d0:	20000588 	.word	0x20000588

080017d4 <ARGB_Show_right>:
// ----------------------------------------------------------------------
ARGB_STATE ARGB_Show_right(void) {             //////////////////////////////////////   BUF_COUNTER  ?????
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
	ARGB_LOC_ST_RIGHT = ARGB_BUSY;
 80017da:	4b9f      	ldr	r3, [pc, #636]	; (8001a58 <ARGB_Show_right+0x284>)
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER_RIGHT != 0 || DMA_HANDLE_RIGHT.State != HAL_DMA_STATE_READY) { // <<<<<<<<<<<<<<<<<<<<<<<<< Зависає тут
 80017e0:	4b9e      	ldr	r3, [pc, #632]	; (8001a5c <ARGB_Show_right+0x288>)
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d105      	bne.n	80017f6 <ARGB_Show_right+0x22>
 80017ea:	4b9d      	ldr	r3, [pc, #628]	; (8001a60 <ARGB_Show_right+0x28c>)
 80017ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d001      	beq.n	80017fa <ARGB_Show_right+0x26>
        return ARGB_BUSY;
 80017f6:	2300      	movs	r3, #0
 80017f8:	e1a1      	b.n	8001b3e <ARGB_Show_right+0x36a>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 80017fa:	2300      	movs	r3, #0
 80017fc:	71fb      	strb	r3, [r7, #7]
 80017fe:	e0dc      	b.n	80019ba <ARGB_Show_right+0x1e6>
            // set first transfer from first values
        	PWM_BUF_RIGHT[i] = (((RGB_BUF_RIGHT[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001800:	4b98      	ldr	r3, [pc, #608]	; (8001a64 <ARGB_Show_right+0x290>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	461a      	mov	r2, r3
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001814:	2b00      	cmp	r3, #0
 8001816:	dd04      	ble.n	8001822 <ARGB_Show_right+0x4e>
 8001818:	4b93      	ldr	r3, [pc, #588]	; (8001a68 <ARGB_Show_right+0x294>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	461a      	mov	r2, r3
 8001820:	e003      	b.n	800182a <ARGB_Show_right+0x56>
 8001822:	4b92      	ldr	r3, [pc, #584]	; (8001a6c <ARGB_Show_right+0x298>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	461a      	mov	r2, r3
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4619      	mov	r1, r3
 8001830:	4b8f      	ldr	r3, [pc, #572]	; (8001a70 <ARGB_Show_right+0x29c>)
 8001832:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        	PWM_BUF_RIGHT[i + 8] = (((RGB_BUF_RIGHT[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001836:	4b8b      	ldr	r3, [pc, #556]	; (8001a64 <ARGB_Show_right+0x290>)
 8001838:	785b      	ldrb	r3, [r3, #1]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	461a      	mov	r2, r3
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	b2db      	uxtb	r3, r3
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184a:	2b00      	cmp	r3, #0
 800184c:	dd04      	ble.n	8001858 <ARGB_Show_right+0x84>
 800184e:	4b86      	ldr	r3, [pc, #536]	; (8001a68 <ARGB_Show_right+0x294>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	4619      	mov	r1, r3
 8001856:	e003      	b.n	8001860 <ARGB_Show_right+0x8c>
 8001858:	4b84      	ldr	r3, [pc, #528]	; (8001a6c <ARGB_Show_right+0x298>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	4619      	mov	r1, r3
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	3308      	adds	r3, #8
 8001866:	4a82      	ldr	r2, [pc, #520]	; (8001a70 <ARGB_Show_right+0x29c>)
 8001868:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 16] = (((RGB_BUF_RIGHT[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800186c:	4b7d      	ldr	r3, [pc, #500]	; (8001a64 <ARGB_Show_right+0x290>)
 800186e:	789b      	ldrb	r3, [r3, #2]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001880:	2b00      	cmp	r3, #0
 8001882:	dd04      	ble.n	800188e <ARGB_Show_right+0xba>
 8001884:	4b78      	ldr	r3, [pc, #480]	; (8001a68 <ARGB_Show_right+0x294>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	4619      	mov	r1, r3
 800188c:	e003      	b.n	8001896 <ARGB_Show_right+0xc2>
 800188e:	4b77      	ldr	r3, [pc, #476]	; (8001a6c <ARGB_Show_right+0x298>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	4619      	mov	r1, r3
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	3310      	adds	r3, #16
 800189c:	4a74      	ldr	r2, [pc, #464]	; (8001a70 <ARGB_Show_right+0x29c>)
 800189e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 24] = (((RGB_BUF_RIGHT[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80018a2:	4b70      	ldr	r3, [pc, #448]	; (8001a64 <ARGB_Show_right+0x290>)
 80018a4:	78db      	ldrb	r3, [r3, #3]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	461a      	mov	r2, r3
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	dd04      	ble.n	80018c4 <ARGB_Show_right+0xf0>
 80018ba:	4b6b      	ldr	r3, [pc, #428]	; (8001a68 <ARGB_Show_right+0x294>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	4619      	mov	r1, r3
 80018c2:	e003      	b.n	80018cc <ARGB_Show_right+0xf8>
 80018c4:	4b69      	ldr	r3, [pc, #420]	; (8001a6c <ARGB_Show_right+0x298>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	4619      	mov	r1, r3
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	3318      	adds	r3, #24
 80018d2:	4a67      	ldr	r2, [pc, #412]	; (8001a70 <ARGB_Show_right+0x29c>)
 80018d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 32] = (((RGB_BUF_RIGHT[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80018d8:	4b62      	ldr	r3, [pc, #392]	; (8001a64 <ARGB_Show_right+0x290>)
 80018da:	791b      	ldrb	r3, [r3, #4]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	461a      	mov	r2, r3
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	dd04      	ble.n	80018fa <ARGB_Show_right+0x126>
 80018f0:	4b5d      	ldr	r3, [pc, #372]	; (8001a68 <ARGB_Show_right+0x294>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	4619      	mov	r1, r3
 80018f8:	e003      	b.n	8001902 <ARGB_Show_right+0x12e>
 80018fa:	4b5c      	ldr	r3, [pc, #368]	; (8001a6c <ARGB_Show_right+0x298>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	4619      	mov	r1, r3
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	3320      	adds	r3, #32
 8001908:	4a59      	ldr	r2, [pc, #356]	; (8001a70 <ARGB_Show_right+0x29c>)
 800190a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 40] = (((RGB_BUF_RIGHT[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800190e:	4b55      	ldr	r3, [pc, #340]	; (8001a64 <ARGB_Show_right+0x290>)
 8001910:	795b      	ldrb	r3, [r3, #5]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	461a      	mov	r2, r3
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001922:	2b00      	cmp	r3, #0
 8001924:	dd04      	ble.n	8001930 <ARGB_Show_right+0x15c>
 8001926:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <ARGB_Show_right+0x294>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	4619      	mov	r1, r3
 800192e:	e003      	b.n	8001938 <ARGB_Show_right+0x164>
 8001930:	4b4e      	ldr	r3, [pc, #312]	; (8001a6c <ARGB_Show_right+0x298>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	4619      	mov	r1, r3
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	3328      	adds	r3, #40	; 0x28
 800193e:	4a4c      	ldr	r2, [pc, #304]	; (8001a70 <ARGB_Show_right+0x29c>)
 8001940:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#ifdef SK6812
        	PWM_BUF_RIGHT[i + 48] = (((RGB_BUF_RIGHT[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001944:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <ARGB_Show_right+0x290>)
 8001946:	799b      	ldrb	r3, [r3, #6]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	461a      	mov	r2, r3
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001958:	2b00      	cmp	r3, #0
 800195a:	dd04      	ble.n	8001966 <ARGB_Show_right+0x192>
 800195c:	4b42      	ldr	r3, [pc, #264]	; (8001a68 <ARGB_Show_right+0x294>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	4619      	mov	r1, r3
 8001964:	e003      	b.n	800196e <ARGB_Show_right+0x19a>
 8001966:	4b41      	ldr	r3, [pc, #260]	; (8001a6c <ARGB_Show_right+0x298>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	4619      	mov	r1, r3
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	3330      	adds	r3, #48	; 0x30
 8001974:	4a3e      	ldr	r2, [pc, #248]	; (8001a70 <ARGB_Show_right+0x29c>)
 8001976:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 56] = (((RGB_BUF_RIGHT[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800197a:	4b3a      	ldr	r3, [pc, #232]	; (8001a64 <ARGB_Show_right+0x290>)
 800197c:	79db      	ldrb	r3, [r3, #7]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	461a      	mov	r2, r3
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198e:	2b00      	cmp	r3, #0
 8001990:	dd04      	ble.n	800199c <ARGB_Show_right+0x1c8>
 8001992:	4b35      	ldr	r3, [pc, #212]	; (8001a68 <ARGB_Show_right+0x294>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	4619      	mov	r1, r3
 800199a:	e003      	b.n	80019a4 <ARGB_Show_right+0x1d0>
 800199c:	4b33      	ldr	r3, [pc, #204]	; (8001a6c <ARGB_Show_right+0x298>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	4619      	mov	r1, r3
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	3338      	adds	r3, #56	; 0x38
 80019aa:	4a31      	ldr	r2, [pc, #196]	; (8001a70 <ARGB_Show_right+0x29c>)
 80019ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	3301      	adds	r3, #1
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	71fb      	strb	r3, [r7, #7]
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b07      	cmp	r3, #7
 80019c0:	f67f af1e 	bls.w	8001800 <ARGB_Show_right+0x2c>
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 80019c8:	e0b1      	b.n	8001b2e <ARGB_Show_right+0x35a>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH_RIGHT) == HAL_TIM_CHANNEL_STATE_BUSY) {
 80019ca:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <ARGB_Show_right+0x2a0>)
 80019cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d102      	bne.n	80019dc <ARGB_Show_right+0x208>
                DMA_Send_Stat = HAL_BUSY;
 80019d6:	2302      	movs	r3, #2
 80019d8:	73fb      	strb	r3, [r7, #15]
                continue;
 80019da:	e0a8      	b.n	8001b2e <ARGB_Show_right+0x35a>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH_RIGHT) == HAL_TIM_CHANNEL_STATE_READY) {
 80019dc:	4b25      	ldr	r3, [pc, #148]	; (8001a74 <ARGB_Show_right+0x2a0>)
 80019de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d11d      	bne.n	8001a24 <ARGB_Show_right+0x250>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH_RIGHT, HAL_TIM_CHANNEL_STATE_BUSY);
 80019e8:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <ARGB_Show_right+0x2a0>)
 80019ea:	2202      	movs	r2, #2
 80019ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#elif TIM_CH_RIGHT == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID_R TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC_R TIM_DMA_CC4
#define ARGB_TIM_CCR_R CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt_right;
 80019f0:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <ARGB_Show_right+0x2a0>)
 80019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f4:	4a20      	ldr	r2, [pc, #128]	; (8001a78 <ARGB_Show_right+0x2a4>)
 80019f6:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt_right;
 80019f8:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <ARGB_Show_right+0x2a0>)
 80019fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fc:	4a1f      	ldr	r2, [pc, #124]	; (8001a7c <ARGB_Show_right+0x2a8>)
 80019fe:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R]->XferErrorCallback = TIM_DMAError;
 8001a00:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <ARGB_Show_right+0x2a0>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	4a1e      	ldr	r2, [pc, #120]	; (8001a80 <ARGB_Show_right+0x2ac>)
 8001a06:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R], (u32_t) PWM_BUF_RIGHT,
 8001a08:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <ARGB_Show_right+0x2a0>)
 8001a0a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001a0c:	4918      	ldr	r1, [pc, #96]	; (8001a70 <ARGB_Show_right+0x29c>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR_R,
 8001a0e:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <ARGB_Show_right+0x2a0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	3340      	adds	r3, #64	; 0x40
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R], (u32_t) PWM_BUF_RIGHT,
 8001a14:	461a      	mov	r2, r3
 8001a16:	2340      	movs	r3, #64	; 0x40
 8001a18:	f002 ffe0 	bl	80049dc <HAL_DMA_Start_IT>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d006      	beq.n	8001a30 <ARGB_Show_right+0x25c>
 8001a22:	e002      	b.n	8001a2a <ARGB_Show_right+0x256>
                DMA_Send_Stat = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
                continue;
 8001a28:	e081      	b.n	8001b2e <ARGB_Show_right+0x35a>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	73fb      	strb	r3, [r7, #15]
                continue;
 8001a2e:	e07e      	b.n	8001b2e <ARGB_Show_right+0x35a>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC_R);
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <ARGB_Show_right+0x2a0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <ARGB_Show_right+0x2a0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a3e:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <ARGB_Show_right+0x2a0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0f      	ldr	r2, [pc, #60]	; (8001a84 <ARGB_Show_right+0x2b0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d004      	beq.n	8001a54 <ARGB_Show_right+0x280>
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <ARGB_Show_right+0x2a0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a0e      	ldr	r2, [pc, #56]	; (8001a88 <ARGB_Show_right+0x2b4>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d11b      	bne.n	8001a8c <ARGB_Show_right+0x2b8>
 8001a54:	2301      	movs	r3, #1
 8001a56:	e01a      	b.n	8001a8e <ARGB_Show_right+0x2ba>
 8001a58:	2000058d 	.word	0x2000058d
 8001a5c:	2000058a 	.word	0x2000058a
 8001a60:	20001bb4 	.word	0x20001bb4
 8001a64:	20000234 	.word	0x20000234
 8001a68:	200000dc 	.word	0x200000dc
 8001a6c:	200000dd 	.word	0x200000dd
 8001a70:	20000488 	.word	0x20000488
 8001a74:	20001ac4 	.word	0x20001ac4
 8001a78:	08001e8d 	.word	0x08001e8d
 8001a7c:	08002335 	.word	0x08002335
 8001a80:	080085c7 	.word	0x080085c7
 8001a84:	40010000 	.word	0x40010000
 8001a88:	40010400 	.word	0x40010400
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d007      	beq.n	8001aa2 <ARGB_Show_right+0x2ce>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8001a92:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <ARGB_Show_right+0x374>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a98:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <ARGB_Show_right+0x374>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aa0:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001aa2:	4b29      	ldr	r3, [pc, #164]	; (8001b48 <ARGB_Show_right+0x374>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a29      	ldr	r2, [pc, #164]	; (8001b4c <ARGB_Show_right+0x378>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d022      	beq.n	8001af2 <ARGB_Show_right+0x31e>
 8001aac:	4b26      	ldr	r3, [pc, #152]	; (8001b48 <ARGB_Show_right+0x374>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab4:	d01d      	beq.n	8001af2 <ARGB_Show_right+0x31e>
 8001ab6:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <ARGB_Show_right+0x374>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a25      	ldr	r2, [pc, #148]	; (8001b50 <ARGB_Show_right+0x37c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d018      	beq.n	8001af2 <ARGB_Show_right+0x31e>
 8001ac0:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <ARGB_Show_right+0x374>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a23      	ldr	r2, [pc, #140]	; (8001b54 <ARGB_Show_right+0x380>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d013      	beq.n	8001af2 <ARGB_Show_right+0x31e>
 8001aca:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <ARGB_Show_right+0x374>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a22      	ldr	r2, [pc, #136]	; (8001b58 <ARGB_Show_right+0x384>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d00e      	beq.n	8001af2 <ARGB_Show_right+0x31e>
 8001ad4:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <ARGB_Show_right+0x374>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a20      	ldr	r2, [pc, #128]	; (8001b5c <ARGB_Show_right+0x388>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d009      	beq.n	8001af2 <ARGB_Show_right+0x31e>
 8001ade:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <ARGB_Show_right+0x374>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a1f      	ldr	r2, [pc, #124]	; (8001b60 <ARGB_Show_right+0x38c>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d004      	beq.n	8001af2 <ARGB_Show_right+0x31e>
 8001ae8:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <ARGB_Show_right+0x374>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a1d      	ldr	r2, [pc, #116]	; (8001b64 <ARGB_Show_right+0x390>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d111      	bne.n	8001b16 <ARGB_Show_right+0x342>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <ARGB_Show_right+0x374>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2b06      	cmp	r3, #6
 8001b02:	d011      	beq.n	8001b28 <ARGB_Show_right+0x354>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001b04:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <ARGB_Show_right+0x374>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <ARGB_Show_right+0x374>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001b14:	e008      	b.n	8001b28 <ARGB_Show_right+0x354>
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001b16:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <ARGB_Show_right+0x374>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <ARGB_Show_right+0x374>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f042 0201 	orr.w	r2, r2, #1
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	e000      	b.n	8001b2a <ARGB_Show_right+0x356>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001b28:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f47f af4a 	bne.w	80019ca <ARGB_Show_right+0x1f6>
        }
        BUF_COUNTER_RIGHT = 2;
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <ARGB_Show_right+0x394>)
 8001b38:	2202      	movs	r2, #2
 8001b3a:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 8001b3c:	2302      	movs	r3, #2
    }
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20001ac4 	.word	0x20001ac4
 8001b4c:	40010000 	.word	0x40010000
 8001b50:	40000400 	.word	0x40000400
 8001b54:	40000800 	.word	0x40000800
 8001b58:	40000c00 	.word	0x40000c00
 8001b5c:	40010400 	.word	0x40010400
 8001b60:	40014000 	.word	0x40014000
 8001b64:	40001800 	.word	0x40001800
 8001b68:	2000058a 	.word	0x2000058a

08001b6c <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	460a      	mov	r2, r1
 8001b76:	71fb      	strb	r3, [r7, #7]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	79ba      	ldrb	r2, [r7, #6]
 8001b80:	fb02 f303 	mul.w	r3, r2, r3
 8001b84:	121b      	asrs	r3, r3, #8
 8001b86:	b2db      	uxtb	r3, r3
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <ARGB_TIM_DMADelayPulseCplt_left>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt_left(DMA_HandleTypeDef *hdma) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba0:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE_LEFT || htim != &TIM_HANDLE) return;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a8c      	ldr	r2, [pc, #560]	; (8001dd8 <ARGB_TIM_DMADelayPulseCplt_left+0x244>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	f040 8168 	bne.w	8001e7c <ARGB_TIM_DMADelayPulseCplt_left+0x2e8>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4a8b      	ldr	r2, [pc, #556]	; (8001ddc <ARGB_TIM_DMADelayPulseCplt_left+0x248>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	f040 8163 	bne.w	8001e7c <ARGB_TIM_DMADelayPulseCplt_left+0x2e8>
    if (BUF_COUNTER_LEFT == 0) return; // if no data to transmit - return
 8001bb6:	4b8a      	ldr	r3, [pc, #552]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 815f 	beq.w	8001e80 <ARGB_TIM_DMADelayPulseCplt_left+0x2ec>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d10b      	bne.n	8001be4 <ARGB_TIM_DMADelayPulseCplt_left+0x50>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d136      	bne.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001be2:	e031      	b.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d10b      	bne.n	8001c06 <ARGB_TIM_DMADelayPulseCplt_left+0x72>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d125      	bne.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c04:	e020      	b.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d10b      	bne.n	8001c28 <ARGB_TIM_DMADelayPulseCplt_left+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2204      	movs	r2, #4
 8001c14:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d114      	bne.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c26:	e00f      	b.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d10a      	bne.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2208      	movs	r2, #8
 8001c36:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d103      	bne.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER_LEFT < NUM_PIXELS) {
 8001c48:	4b65      	ldr	r3, [pc, #404]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	2b54      	cmp	r3, #84	; 0x54
 8001c50:	f200 8094 	bhi.w	8001d7c <ARGB_TIM_DMADelayPulseCplt_left+0x1e8>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001c54:	2300      	movs	r3, #0
 8001c56:	72fb      	strb	r3, [r7, #11]
 8001c58:	e083      	b.n	8001d62 <ARGB_TIM_DMADelayPulseCplt_left+0x1ce>
#ifdef SK6812
        	PWM_BUF_LEFT[i + 32] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001c5a:	4b61      	ldr	r3, [pc, #388]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4a60      	ldr	r2, [pc, #384]	; (8001de4 <ARGB_TIM_DMADelayPulseCplt_left+0x250>)
 8001c64:	5cd3      	ldrb	r3, [r2, r3]
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	7afb      	ldrb	r3, [r7, #11]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	dd04      	ble.n	8001c84 <ARGB_TIM_DMADelayPulseCplt_left+0xf0>
 8001c7a:	4b5b      	ldr	r3, [pc, #364]	; (8001de8 <ARGB_TIM_DMADelayPulseCplt_left+0x254>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	4619      	mov	r1, r3
 8001c82:	e003      	b.n	8001c8c <ARGB_TIM_DMADelayPulseCplt_left+0xf8>
 8001c84:	4b59      	ldr	r3, [pc, #356]	; (8001dec <ARGB_TIM_DMADelayPulseCplt_left+0x258>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	7afb      	ldrb	r3, [r7, #11]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	3320      	adds	r3, #32
 8001c92:	4a57      	ldr	r2, [pc, #348]	; (8001df0 <ARGB_TIM_DMADelayPulseCplt_left+0x25c>)
 8001c94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 40] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001c98:	4b51      	ldr	r3, [pc, #324]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	4a50      	ldr	r2, [pc, #320]	; (8001de4 <ARGB_TIM_DMADelayPulseCplt_left+0x250>)
 8001ca4:	5cd3      	ldrb	r3, [r2, r3]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	7afb      	ldrb	r3, [r7, #11]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	dd04      	ble.n	8001cc4 <ARGB_TIM_DMADelayPulseCplt_left+0x130>
 8001cba:	4b4b      	ldr	r3, [pc, #300]	; (8001de8 <ARGB_TIM_DMADelayPulseCplt_left+0x254>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	e003      	b.n	8001ccc <ARGB_TIM_DMADelayPulseCplt_left+0x138>
 8001cc4:	4b49      	ldr	r3, [pc, #292]	; (8001dec <ARGB_TIM_DMADelayPulseCplt_left+0x258>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	4619      	mov	r1, r3
 8001ccc:	7afb      	ldrb	r3, [r7, #11]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	3328      	adds	r3, #40	; 0x28
 8001cd2:	4a47      	ldr	r2, [pc, #284]	; (8001df0 <ARGB_TIM_DMADelayPulseCplt_left+0x25c>)
 8001cd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 48] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001cd8:	4b41      	ldr	r3, [pc, #260]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	4a40      	ldr	r2, [pc, #256]	; (8001de4 <ARGB_TIM_DMADelayPulseCplt_left+0x250>)
 8001ce4:	5cd3      	ldrb	r3, [r2, r3]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	7afb      	ldrb	r3, [r7, #11]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	dd04      	ble.n	8001d04 <ARGB_TIM_DMADelayPulseCplt_left+0x170>
 8001cfa:	4b3b      	ldr	r3, [pc, #236]	; (8001de8 <ARGB_TIM_DMADelayPulseCplt_left+0x254>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	4619      	mov	r1, r3
 8001d02:	e003      	b.n	8001d0c <ARGB_TIM_DMADelayPulseCplt_left+0x178>
 8001d04:	4b39      	ldr	r3, [pc, #228]	; (8001dec <ARGB_TIM_DMADelayPulseCplt_left+0x258>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	7afb      	ldrb	r3, [r7, #11]
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	3330      	adds	r3, #48	; 0x30
 8001d12:	4a37      	ldr	r2, [pc, #220]	; (8001df0 <ARGB_TIM_DMADelayPulseCplt_left+0x25c>)
 8001d14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 56] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001d18:	4b31      	ldr	r3, [pc, #196]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	3303      	adds	r3, #3
 8001d22:	4a30      	ldr	r2, [pc, #192]	; (8001de4 <ARGB_TIM_DMADelayPulseCplt_left+0x250>)
 8001d24:	5cd3      	ldrb	r3, [r2, r3]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	461a      	mov	r2, r3
 8001d2a:	7afb      	ldrb	r3, [r7, #11]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	dd04      	ble.n	8001d44 <ARGB_TIM_DMADelayPulseCplt_left+0x1b0>
 8001d3a:	4b2b      	ldr	r3, [pc, #172]	; (8001de8 <ARGB_TIM_DMADelayPulseCplt_left+0x254>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	4619      	mov	r1, r3
 8001d42:	e003      	b.n	8001d4c <ARGB_TIM_DMADelayPulseCplt_left+0x1b8>
 8001d44:	4b29      	ldr	r3, [pc, #164]	; (8001dec <ARGB_TIM_DMADelayPulseCplt_left+0x258>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	7afb      	ldrb	r3, [r7, #11]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	3338      	adds	r3, #56	; 0x38
 8001d52:	4a27      	ldr	r2, [pc, #156]	; (8001df0 <ARGB_TIM_DMADelayPulseCplt_left+0x25c>)
 8001d54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001d58:	7afb      	ldrb	r3, [r7, #11]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	72fb      	strb	r3, [r7, #11]
 8001d62:	7afb      	ldrb	r3, [r7, #11]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b07      	cmp	r3, #7
 8001d68:	f67f af77 	bls.w	8001c5a <ARGB_TIM_DMADelayPulseCplt_left+0xc6>
        	PWM_BUF_LEFT[i + 24] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_LEFT[i + 32] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_LEFT[i + 40] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        BUF_COUNTER_LEFT++;
 8001d6c:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	3301      	adds	r3, #1
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001d78:	801a      	strh	r2, [r3, #0]
 8001d7a:	e07b      	b.n	8001e74 <ARGB_TIM_DMADelayPulseCplt_left+0x2e0>
    } else if (BUF_COUNTER_LEFT < NUM_PIXELS + 2) { // if RET transfer
 8001d7c:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	2b56      	cmp	r3, #86	; 0x56
 8001d84:	d80c      	bhi.n	8001da0 <ARGB_TIM_DMADelayPulseCplt_left+0x20c>
        memset((dma_siz *) &PWM_BUF_LEFT[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 8001d86:	2280      	movs	r2, #128	; 0x80
 8001d88:	2100      	movs	r1, #0
 8001d8a:	481a      	ldr	r0, [pc, #104]	; (8001df4 <ARGB_TIM_DMADelayPulseCplt_left+0x260>)
 8001d8c:	f00f fa24 	bl	80111d8 <memset>
        BUF_COUNTER_LEFT++;
 8001d90:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	3301      	adds	r3, #1
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001d9c:	801a      	strh	r2, [r3, #0]
 8001d9e:	e069      	b.n	8001e74 <ARGB_TIM_DMADelayPulseCplt_left+0x2e0>
    } else { // if END of transfer
    	BUF_COUNTER_LEFT = 0;
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	801a      	strh	r2, [r3, #0]
#if TIM_CH_LEFT == TIM_CHANNEL_2
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
#endif
#if TIM_CH_LEFT == TIM_CHANNEL_3
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001db4:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f002 fed6 	bl	8004b6c <HAL_DMA_Abort_IT>
#endif
#if TIM_CH_LEFT == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0c      	ldr	r2, [pc, #48]	; (8001df8 <ARGB_TIM_DMADelayPulseCplt_left+0x264>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d004      	beq.n	8001dd4 <ARGB_TIM_DMADelayPulseCplt_left+0x240>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <ARGB_TIM_DMADelayPulseCplt_left+0x268>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d115      	bne.n	8001e00 <ARGB_TIM_DMADelayPulseCplt_left+0x26c>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e014      	b.n	8001e02 <ARGB_TIM_DMADelayPulseCplt_left+0x26e>
 8001dd8:	20001b54 	.word	0x20001b54
 8001ddc:	20001ac4 	.word	0x20001ac4
 8001de0:	20000588 	.word	0x20000588
 8001de4:	200000e0 	.word	0x200000e0
 8001de8:	200000dc 	.word	0x200000dc
 8001dec:	200000dd 	.word	0x200000dd
 8001df0:	20000388 	.word	0x20000388
 8001df4:	20000408 	.word	0x20000408
 8001df8:	40010000 	.word	0x40010000
 8001dfc:	40010400 	.word	0x40010400
 8001e00:	2300      	movs	r3, #0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d017      	beq.n	8001e36 <ARGB_TIM_DMADelayPulseCplt_left+0x2a2>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6a1a      	ldr	r2, [r3, #32]
 8001e0c:	f241 1311 	movw	r3, #4369	; 0x1111
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10f      	bne.n	8001e36 <ARGB_TIM_DMADelayPulseCplt_left+0x2a2>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6a1a      	ldr	r2, [r3, #32]
 8001e1c:	f240 4344 	movw	r3, #1092	; 0x444
 8001e20:	4013      	ands	r3, r2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d107      	bne.n	8001e36 <ARGB_TIM_DMADelayPulseCplt_left+0x2a2>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e34:	645a      	str	r2, [r3, #68]	; 0x44
        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6a1a      	ldr	r2, [r3, #32]
 8001e3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10f      	bne.n	8001e66 <ARGB_TIM_DMADelayPulseCplt_left+0x2d2>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6a1a      	ldr	r2, [r3, #32]
 8001e4c:	f240 4344 	movw	r3, #1092	; 0x444
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d107      	bne.n	8001e66 <ARGB_TIM_DMADelayPulseCplt_left+0x2d2>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0201 	bic.w	r2, r2, #1
 8001e64:	601a      	str	r2, [r3, #0]
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH_LEFT, HAL_TIM_CHANNEL_STATE_READY);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        ARGB_LOC_ST_LEFT = ARGB_READY;
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <ARGB_TIM_DMADelayPulseCplt_left+0x2f4>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	771a      	strb	r2, [r3, #28]
 8001e7a:	e002      	b.n	8001e82 <ARGB_TIM_DMADelayPulseCplt_left+0x2ee>
    if (hdma != &DMA_HANDLE_LEFT || htim != &TIM_HANDLE) return;
 8001e7c:	bf00      	nop
 8001e7e:	e000      	b.n	8001e82 <ARGB_TIM_DMADelayPulseCplt_left+0x2ee>
    if (BUF_COUNTER_LEFT == 0) return; // if no data to transmit - return
 8001e80:	bf00      	nop
}
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	2000058c 	.word	0x2000058c

08001e8c <ARGB_TIM_DMADelayPulseCplt_right>:
// -----------------------------------------------------------------------
static void ARGB_TIM_DMADelayPulseCplt_right(DMA_HandleTypeDef *hdma) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e98:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE_RIGHT || htim != &TIM_HANDLE) return;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a8c      	ldr	r2, [pc, #560]	; (80020d0 <ARGB_TIM_DMADelayPulseCplt_right+0x244>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	f040 8168 	bne.w	8002174 <ARGB_TIM_DMADelayPulseCplt_right+0x2e8>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4a8b      	ldr	r2, [pc, #556]	; (80020d4 <ARGB_TIM_DMADelayPulseCplt_right+0x248>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	f040 8163 	bne.w	8002174 <ARGB_TIM_DMADelayPulseCplt_right+0x2e8>
    if (BUF_COUNTER_RIGHT == 0) return; // if no data to transmit - return    // ,<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 8001eae:	4b8a      	ldr	r3, [pc, #552]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 815f 	beq.w	8002178 <ARGB_TIM_DMADelayPulseCplt_right+0x2ec>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d10b      	bne.n	8001edc <ARGB_TIM_DMADelayPulseCplt_right+0x50>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d136      	bne.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001eda:	e031      	b.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d10b      	bne.n	8001efe <ARGB_TIM_DMADelayPulseCplt_right+0x72>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d125      	bne.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001efc:	e020      	b.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d10b      	bne.n	8001f20 <ARGB_TIM_DMADelayPulseCplt_right+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2204      	movs	r2, #4
 8001f0c:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d114      	bne.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f1e:	e00f      	b.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d10a      	bne.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2208      	movs	r2, #8
 8001f2e:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d103      	bne.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER_RIGHT < NUM_PIXELS) {
 8001f40:	4b65      	ldr	r3, [pc, #404]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	2b54      	cmp	r3, #84	; 0x54
 8001f48:	f200 8094 	bhi.w	8002074 <ARGB_TIM_DMADelayPulseCplt_right+0x1e8>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	72fb      	strb	r3, [r7, #11]
 8001f50:	e083      	b.n	800205a <ARGB_TIM_DMADelayPulseCplt_right+0x1ce>
#ifdef SK6812
        	PWM_BUF_RIGHT[i + 32] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001f52:	4b61      	ldr	r3, [pc, #388]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4a60      	ldr	r2, [pc, #384]	; (80020dc <ARGB_TIM_DMADelayPulseCplt_right+0x250>)
 8001f5c:	5cd3      	ldrb	r3, [r2, r3]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	7afb      	ldrb	r3, [r7, #11]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	dd04      	ble.n	8001f7c <ARGB_TIM_DMADelayPulseCplt_right+0xf0>
 8001f72:	4b5b      	ldr	r3, [pc, #364]	; (80020e0 <ARGB_TIM_DMADelayPulseCplt_right+0x254>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	4619      	mov	r1, r3
 8001f7a:	e003      	b.n	8001f84 <ARGB_TIM_DMADelayPulseCplt_right+0xf8>
 8001f7c:	4b59      	ldr	r3, [pc, #356]	; (80020e4 <ARGB_TIM_DMADelayPulseCplt_right+0x258>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	4619      	mov	r1, r3
 8001f84:	7afb      	ldrb	r3, [r7, #11]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	3320      	adds	r3, #32
 8001f8a:	4a57      	ldr	r2, [pc, #348]	; (80020e8 <ARGB_TIM_DMADelayPulseCplt_right+0x25c>)
 8001f8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 40] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001f90:	4b51      	ldr	r3, [pc, #324]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	3301      	adds	r3, #1
 8001f9a:	4a50      	ldr	r2, [pc, #320]	; (80020dc <ARGB_TIM_DMADelayPulseCplt_right+0x250>)
 8001f9c:	5cd3      	ldrb	r3, [r2, r3]
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	7afb      	ldrb	r3, [r7, #11]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	dd04      	ble.n	8001fbc <ARGB_TIM_DMADelayPulseCplt_right+0x130>
 8001fb2:	4b4b      	ldr	r3, [pc, #300]	; (80020e0 <ARGB_TIM_DMADelayPulseCplt_right+0x254>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	4619      	mov	r1, r3
 8001fba:	e003      	b.n	8001fc4 <ARGB_TIM_DMADelayPulseCplt_right+0x138>
 8001fbc:	4b49      	ldr	r3, [pc, #292]	; (80020e4 <ARGB_TIM_DMADelayPulseCplt_right+0x258>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	7afb      	ldrb	r3, [r7, #11]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	3328      	adds	r3, #40	; 0x28
 8001fca:	4a47      	ldr	r2, [pc, #284]	; (80020e8 <ARGB_TIM_DMADelayPulseCplt_right+0x25c>)
 8001fcc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 48] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001fd0:	4b41      	ldr	r3, [pc, #260]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	3302      	adds	r3, #2
 8001fda:	4a40      	ldr	r2, [pc, #256]	; (80020dc <ARGB_TIM_DMADelayPulseCplt_right+0x250>)
 8001fdc:	5cd3      	ldrb	r3, [r2, r3]
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	7afb      	ldrb	r3, [r7, #11]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	dd04      	ble.n	8001ffc <ARGB_TIM_DMADelayPulseCplt_right+0x170>
 8001ff2:	4b3b      	ldr	r3, [pc, #236]	; (80020e0 <ARGB_TIM_DMADelayPulseCplt_right+0x254>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	e003      	b.n	8002004 <ARGB_TIM_DMADelayPulseCplt_right+0x178>
 8001ffc:	4b39      	ldr	r3, [pc, #228]	; (80020e4 <ARGB_TIM_DMADelayPulseCplt_right+0x258>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	4619      	mov	r1, r3
 8002004:	7afb      	ldrb	r3, [r7, #11]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	3330      	adds	r3, #48	; 0x30
 800200a:	4a37      	ldr	r2, [pc, #220]	; (80020e8 <ARGB_TIM_DMADelayPulseCplt_right+0x25c>)
 800200c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 56] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002010:	4b31      	ldr	r3, [pc, #196]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	b29b      	uxth	r3, r3
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	3303      	adds	r3, #3
 800201a:	4a30      	ldr	r2, [pc, #192]	; (80020dc <ARGB_TIM_DMADelayPulseCplt_right+0x250>)
 800201c:	5cd3      	ldrb	r3, [r2, r3]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	461a      	mov	r2, r3
 8002022:	7afb      	ldrb	r3, [r7, #11]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202e:	2b00      	cmp	r3, #0
 8002030:	dd04      	ble.n	800203c <ARGB_TIM_DMADelayPulseCplt_right+0x1b0>
 8002032:	4b2b      	ldr	r3, [pc, #172]	; (80020e0 <ARGB_TIM_DMADelayPulseCplt_right+0x254>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	4619      	mov	r1, r3
 800203a:	e003      	b.n	8002044 <ARGB_TIM_DMADelayPulseCplt_right+0x1b8>
 800203c:	4b29      	ldr	r3, [pc, #164]	; (80020e4 <ARGB_TIM_DMADelayPulseCplt_right+0x258>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	4619      	mov	r1, r3
 8002044:	7afb      	ldrb	r3, [r7, #11]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	3338      	adds	r3, #56	; 0x38
 800204a:	4a27      	ldr	r2, [pc, #156]	; (80020e8 <ARGB_TIM_DMADelayPulseCplt_right+0x25c>)
 800204c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8002050:	7afb      	ldrb	r3, [r7, #11]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	3301      	adds	r3, #1
 8002056:	b2db      	uxtb	r3, r3
 8002058:	72fb      	strb	r3, [r7, #11]
 800205a:	7afb      	ldrb	r3, [r7, #11]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b07      	cmp	r3, #7
 8002060:	f67f af77 	bls.w	8001f52 <ARGB_TIM_DMADelayPulseCplt_right+0xc6>
        	PWM_BUF_RIGHT[i + 24] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_RIGHT[i + 32] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_RIGHT[i + 40] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        BUF_COUNTER_RIGHT++;
 8002064:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	b29b      	uxth	r3, r3
 800206a:	3301      	adds	r3, #1
 800206c:	b29a      	uxth	r2, r3
 800206e:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8002070:	801a      	strh	r2, [r3, #0]
 8002072:	e07b      	b.n	800216c <ARGB_TIM_DMADelayPulseCplt_right+0x2e0>
    } else if (BUF_COUNTER_RIGHT < NUM_PIXELS + 2) { // if RET transfer
 8002074:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	b29b      	uxth	r3, r3
 800207a:	2b56      	cmp	r3, #86	; 0x56
 800207c:	d80c      	bhi.n	8002098 <ARGB_TIM_DMADelayPulseCplt_right+0x20c>
        memset((dma_siz *) &PWM_BUF_RIGHT[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 800207e:	2280      	movs	r2, #128	; 0x80
 8002080:	2100      	movs	r1, #0
 8002082:	481a      	ldr	r0, [pc, #104]	; (80020ec <ARGB_TIM_DMADelayPulseCplt_right+0x260>)
 8002084:	f00f f8a8 	bl	80111d8 <memset>
        BUF_COUNTER_RIGHT++;
 8002088:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	b29b      	uxth	r3, r3
 800208e:	3301      	adds	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8002094:	801a      	strh	r2, [r3, #0]
 8002096:	e069      	b.n	800216c <ARGB_TIM_DMADelayPulseCplt_right+0x2e0>
    } else { // if END of transfer
    	BUF_COUNTER_RIGHT = 0;
 8002098:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 800209a:	2200      	movs	r2, #0
 800209c:	801a      	strh	r2, [r3, #0]
#if TIM_CH_RIGHT == TIM_CHANNEL_3
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
#endif
#if TIM_CH_RIGHT == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020ac:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4618      	mov	r0, r3
 80020b4:	f002 fd5a 	bl	8004b6c <HAL_DMA_Abort_IT>
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0c      	ldr	r2, [pc, #48]	; (80020f0 <ARGB_TIM_DMADelayPulseCplt_right+0x264>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d004      	beq.n	80020cc <ARGB_TIM_DMADelayPulseCplt_right+0x240>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <ARGB_TIM_DMADelayPulseCplt_right+0x268>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d115      	bne.n	80020f8 <ARGB_TIM_DMADelayPulseCplt_right+0x26c>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e014      	b.n	80020fa <ARGB_TIM_DMADelayPulseCplt_right+0x26e>
 80020d0:	20001bb4 	.word	0x20001bb4
 80020d4:	20001ac4 	.word	0x20001ac4
 80020d8:	2000058a 	.word	0x2000058a
 80020dc:	20000234 	.word	0x20000234
 80020e0:	200000dc 	.word	0x200000dc
 80020e4:	200000dd 	.word	0x200000dd
 80020e8:	20000488 	.word	0x20000488
 80020ec:	20000508 	.word	0x20000508
 80020f0:	40010000 	.word	0x40010000
 80020f4:	40010400 	.word	0x40010400
 80020f8:	2300      	movs	r3, #0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d017      	beq.n	800212e <ARGB_TIM_DMADelayPulseCplt_right+0x2a2>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6a1a      	ldr	r2, [r3, #32]
 8002104:	f241 1311 	movw	r3, #4369	; 0x1111
 8002108:	4013      	ands	r3, r2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10f      	bne.n	800212e <ARGB_TIM_DMADelayPulseCplt_right+0x2a2>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6a1a      	ldr	r2, [r3, #32]
 8002114:	f240 4344 	movw	r3, #1092	; 0x444
 8002118:	4013      	ands	r3, r2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d107      	bne.n	800212e <ARGB_TIM_DMADelayPulseCplt_right+0x2a2>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800212c:	645a      	str	r2, [r3, #68]	; 0x44
        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6a1a      	ldr	r2, [r3, #32]
 8002134:	f241 1311 	movw	r3, #4369	; 0x1111
 8002138:	4013      	ands	r3, r2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10f      	bne.n	800215e <ARGB_TIM_DMADelayPulseCplt_right+0x2d2>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6a1a      	ldr	r2, [r3, #32]
 8002144:	f240 4344 	movw	r3, #1092	; 0x444
 8002148:	4013      	ands	r3, r2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d107      	bne.n	800215e <ARGB_TIM_DMADelayPulseCplt_right+0x2d2>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0201 	bic.w	r2, r2, #1
 800215c:	601a      	str	r2, [r3, #0]
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH_RIGHT, HAL_TIM_CHANNEL_STATE_READY);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        ARGB_LOC_ST_RIGHT = ARGB_READY;
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <ARGB_TIM_DMADelayPulseCplt_right+0x2f4>)
 8002168:	2201      	movs	r2, #1
 800216a:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	771a      	strb	r2, [r3, #28]
 8002172:	e002      	b.n	800217a <ARGB_TIM_DMADelayPulseCplt_right+0x2ee>
    if (hdma != &DMA_HANDLE_RIGHT || htim != &TIM_HANDLE) return;
 8002174:	bf00      	nop
 8002176:	e000      	b.n	800217a <ARGB_TIM_DMADelayPulseCplt_right+0x2ee>
    if (BUF_COUNTER_RIGHT == 0) return; // if no data to transmit - return    // ,<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 8002178:	bf00      	nop
}
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	2000058d 	.word	0x2000058d

08002184 <ARGB_TIM_DMADelayPulseHalfCplt_left>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt_left(DMA_HandleTypeDef *hdma) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002190:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE_LEFT || htim != &TIM_HANDLE) return;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a60      	ldr	r2, [pc, #384]	; (8002318 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x194>)
 8002196:	4293      	cmp	r3, r2
 8002198:	f040 80b7 	bne.w	800230a <ARGB_TIM_DMADelayPulseHalfCplt_left+0x186>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4a5f      	ldr	r2, [pc, #380]	; (800231c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x198>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	f040 80b2 	bne.w	800230a <ARGB_TIM_DMADelayPulseHalfCplt_left+0x186>
    if (BUF_COUNTER_LEFT == 0) return; // if no data to transmit - return
 80021a6:	4b5e      	ldr	r3, [pc, #376]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 80ae 	beq.w	800230e <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18a>
    // if data transfer
    if (BUF_COUNTER_LEFT < NUM_PIXELS) {
 80021b2:	4b5b      	ldr	r3, [pc, #364]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	2b54      	cmp	r3, #84	; 0x54
 80021ba:	f200 8094 	bhi.w	80022e6 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x162>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 80021be:	2300      	movs	r3, #0
 80021c0:	72fb      	strb	r3, [r7, #11]
 80021c2:	e083      	b.n	80022cc <ARGB_TIM_DMADelayPulseHalfCplt_left+0x148>
#ifdef SK6812
        	PWM_BUF_LEFT[i] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80021c4:	4b56      	ldr	r3, [pc, #344]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4a55      	ldr	r2, [pc, #340]	; (8002324 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a0>)
 80021ce:	5cd3      	ldrb	r3, [r2, r3]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	7afb      	ldrb	r3, [r7, #11]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	dd04      	ble.n	80021ee <ARGB_TIM_DMADelayPulseHalfCplt_left+0x6a>
 80021e4:	4b50      	ldr	r3, [pc, #320]	; (8002328 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a4>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	e003      	b.n	80021f6 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x72>
 80021ee:	4b4f      	ldr	r3, [pc, #316]	; (800232c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a8>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	7afb      	ldrb	r3, [r7, #11]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	4619      	mov	r1, r3
 80021fc:	4b4c      	ldr	r3, [pc, #304]	; (8002330 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 80021fe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        	PWM_BUF_LEFT[i + 8] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002202:	4b47      	ldr	r3, [pc, #284]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	3301      	adds	r3, #1
 800220c:	4a45      	ldr	r2, [pc, #276]	; (8002324 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a0>)
 800220e:	5cd3      	ldrb	r3, [r2, r3]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	461a      	mov	r2, r3
 8002214:	7afb      	ldrb	r3, [r7, #11]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002220:	2b00      	cmp	r3, #0
 8002222:	dd04      	ble.n	800222e <ARGB_TIM_DMADelayPulseHalfCplt_left+0xaa>
 8002224:	4b40      	ldr	r3, [pc, #256]	; (8002328 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a4>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	4619      	mov	r1, r3
 800222c:	e003      	b.n	8002236 <ARGB_TIM_DMADelayPulseHalfCplt_left+0xb2>
 800222e:	4b3f      	ldr	r3, [pc, #252]	; (800232c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a8>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	b2db      	uxtb	r3, r3
 8002234:	4619      	mov	r1, r3
 8002236:	7afb      	ldrb	r3, [r7, #11]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	3308      	adds	r3, #8
 800223c:	4a3c      	ldr	r2, [pc, #240]	; (8002330 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 800223e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 16] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002242:	4b37      	ldr	r3, [pc, #220]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	b29b      	uxth	r3, r3
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	3302      	adds	r3, #2
 800224c:	4a35      	ldr	r2, [pc, #212]	; (8002324 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a0>)
 800224e:	5cd3      	ldrb	r3, [r2, r3]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	461a      	mov	r2, r3
 8002254:	7afb      	ldrb	r3, [r7, #11]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002260:	2b00      	cmp	r3, #0
 8002262:	dd04      	ble.n	800226e <ARGB_TIM_DMADelayPulseHalfCplt_left+0xea>
 8002264:	4b30      	ldr	r3, [pc, #192]	; (8002328 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a4>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	4619      	mov	r1, r3
 800226c:	e003      	b.n	8002276 <ARGB_TIM_DMADelayPulseHalfCplt_left+0xf2>
 800226e:	4b2f      	ldr	r3, [pc, #188]	; (800232c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a8>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	4619      	mov	r1, r3
 8002276:	7afb      	ldrb	r3, [r7, #11]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	3310      	adds	r3, #16
 800227c:	4a2c      	ldr	r2, [pc, #176]	; (8002330 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 800227e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 24] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
 8002282:	4b27      	ldr	r3, [pc, #156]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	b29b      	uxth	r3, r3
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	3303      	adds	r3, #3
 800228c:	4a25      	ldr	r2, [pc, #148]	; (8002324 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a0>)
 800228e:	5cd3      	ldrb	r3, [r2, r3]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	7afb      	ldrb	r3, [r7, #11]
 8002296:	b2db      	uxtb	r3, r3
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	dd04      	ble.n	80022ae <ARGB_TIM_DMADelayPulseHalfCplt_left+0x12a>
 80022a4:	4b20      	ldr	r3, [pc, #128]	; (8002328 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a4>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	4619      	mov	r1, r3
 80022ac:	e003      	b.n	80022b6 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x132>
 80022ae:	4b1f      	ldr	r3, [pc, #124]	; (800232c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a8>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	4619      	mov	r1, r3
 80022b6:	7afb      	ldrb	r3, [r7, #11]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	3318      	adds	r3, #24
 80022bc:	4a1c      	ldr	r2, [pc, #112]	; (8002330 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 80022be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 80022c2:	7afb      	ldrb	r3, [r7, #11]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	3301      	adds	r3, #1
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	72fb      	strb	r3, [r7, #11]
 80022cc:	7afb      	ldrb	r3, [r7, #11]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b07      	cmp	r3, #7
 80022d2:	f67f af77 	bls.w	80021c4 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x40>
        	PWM_BUF_LEFT[i] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_LEFT[i + 8] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_LEFT[i + 16] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        BUF_COUNTER_LEFT++;
 80022d6:	4b12      	ldr	r3, [pc, #72]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	3301      	adds	r3, #1
 80022de:	b29a      	uxth	r2, r3
 80022e0:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80022e2:	801a      	strh	r2, [r3, #0]
 80022e4:	e014      	b.n	8002310 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18c>
    } else if (BUF_COUNTER_LEFT < NUM_PIXELS + 2) { // if RET transfer
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	2b56      	cmp	r3, #86	; 0x56
 80022ee:	d80f      	bhi.n	8002310 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18c>
        memset((dma_siz *) &PWM_BUF_LEFT[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 80022f0:	2280      	movs	r2, #128	; 0x80
 80022f2:	2100      	movs	r1, #0
 80022f4:	480e      	ldr	r0, [pc, #56]	; (8002330 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 80022f6:	f00e ff6f 	bl	80111d8 <memset>
        BUF_COUNTER_LEFT++;
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	3301      	adds	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8002306:	801a      	strh	r2, [r3, #0]
 8002308:	e002      	b.n	8002310 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18c>
    if (hdma != &DMA_HANDLE_LEFT || htim != &TIM_HANDLE) return;
 800230a:	bf00      	nop
 800230c:	e000      	b.n	8002310 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18c>
    if (BUF_COUNTER_LEFT == 0) return; // if no data to transmit - return
 800230e:	bf00      	nop
    }
}
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20001b54 	.word	0x20001b54
 800231c:	20001ac4 	.word	0x20001ac4
 8002320:	20000588 	.word	0x20000588
 8002324:	200000e0 	.word	0x200000e0
 8002328:	200000dc 	.word	0x200000dc
 800232c:	200000dd 	.word	0x200000dd
 8002330:	20000388 	.word	0x20000388

08002334 <ARGB_TIM_DMADelayPulseHalfCplt_right>:
// -----------------------------------------------------------------------------------
static void ARGB_TIM_DMADelayPulseHalfCplt_right(DMA_HandleTypeDef *hdma) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002340:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE_RIGHT || htim != &TIM_HANDLE) return;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a60      	ldr	r2, [pc, #384]	; (80024c8 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x194>)
 8002346:	4293      	cmp	r3, r2
 8002348:	f040 80b7 	bne.w	80024ba <ARGB_TIM_DMADelayPulseHalfCplt_right+0x186>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4a5f      	ldr	r2, [pc, #380]	; (80024cc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x198>)
 8002350:	4293      	cmp	r3, r2
 8002352:	f040 80b2 	bne.w	80024ba <ARGB_TIM_DMADelayPulseHalfCplt_right+0x186>
    if (BUF_COUNTER_RIGHT == 0) return; // if no data to transmit - return
 8002356:	4b5e      	ldr	r3, [pc, #376]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	b29b      	uxth	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80ae 	beq.w	80024be <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18a>
    // if data transfer
    if (BUF_COUNTER_RIGHT < NUM_PIXELS) {
 8002362:	4b5b      	ldr	r3, [pc, #364]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	2b54      	cmp	r3, #84	; 0x54
 800236a:	f200 8094 	bhi.w	8002496 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x162>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 800236e:	2300      	movs	r3, #0
 8002370:	72fb      	strb	r3, [r7, #11]
 8002372:	e083      	b.n	800247c <ARGB_TIM_DMADelayPulseHalfCplt_right+0x148>
#ifdef SK6812
        	PWM_BUF_RIGHT[i] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002374:	4b56      	ldr	r3, [pc, #344]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	b29b      	uxth	r3, r3
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4a55      	ldr	r2, [pc, #340]	; (80024d4 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a0>)
 800237e:	5cd3      	ldrb	r3, [r2, r3]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	461a      	mov	r2, r3
 8002384:	7afb      	ldrb	r3, [r7, #11]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002390:	2b00      	cmp	r3, #0
 8002392:	dd04      	ble.n	800239e <ARGB_TIM_DMADelayPulseHalfCplt_right+0x6a>
 8002394:	4b50      	ldr	r3, [pc, #320]	; (80024d8 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a4>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	b2db      	uxtb	r3, r3
 800239a:	461a      	mov	r2, r3
 800239c:	e003      	b.n	80023a6 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x72>
 800239e:	4b4f      	ldr	r3, [pc, #316]	; (80024dc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a8>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	7afb      	ldrb	r3, [r7, #11]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	4619      	mov	r1, r3
 80023ac:	4b4c      	ldr	r3, [pc, #304]	; (80024e0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 80023ae:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        	PWM_BUF_RIGHT[i + 8] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80023b2:	4b47      	ldr	r3, [pc, #284]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	3301      	adds	r3, #1
 80023bc:	4a45      	ldr	r2, [pc, #276]	; (80024d4 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a0>)
 80023be:	5cd3      	ldrb	r3, [r2, r3]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	461a      	mov	r2, r3
 80023c4:	7afb      	ldrb	r3, [r7, #11]
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	dd04      	ble.n	80023de <ARGB_TIM_DMADelayPulseHalfCplt_right+0xaa>
 80023d4:	4b40      	ldr	r3, [pc, #256]	; (80024d8 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a4>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	4619      	mov	r1, r3
 80023dc:	e003      	b.n	80023e6 <ARGB_TIM_DMADelayPulseHalfCplt_right+0xb2>
 80023de:	4b3f      	ldr	r3, [pc, #252]	; (80024dc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a8>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	4619      	mov	r1, r3
 80023e6:	7afb      	ldrb	r3, [r7, #11]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	3308      	adds	r3, #8
 80023ec:	4a3c      	ldr	r2, [pc, #240]	; (80024e0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 80023ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 16] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80023f2:	4b37      	ldr	r3, [pc, #220]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	3302      	adds	r3, #2
 80023fc:	4a35      	ldr	r2, [pc, #212]	; (80024d4 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a0>)
 80023fe:	5cd3      	ldrb	r3, [r2, r3]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	7afb      	ldrb	r3, [r7, #11]
 8002406:	b2db      	uxtb	r3, r3
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002410:	2b00      	cmp	r3, #0
 8002412:	dd04      	ble.n	800241e <ARGB_TIM_DMADelayPulseHalfCplt_right+0xea>
 8002414:	4b30      	ldr	r3, [pc, #192]	; (80024d8 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a4>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	4619      	mov	r1, r3
 800241c:	e003      	b.n	8002426 <ARGB_TIM_DMADelayPulseHalfCplt_right+0xf2>
 800241e:	4b2f      	ldr	r3, [pc, #188]	; (80024dc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a8>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	b2db      	uxtb	r3, r3
 8002424:	4619      	mov	r1, r3
 8002426:	7afb      	ldrb	r3, [r7, #11]
 8002428:	b2db      	uxtb	r3, r3
 800242a:	3310      	adds	r3, #16
 800242c:	4a2c      	ldr	r2, [pc, #176]	; (80024e0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 800242e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 24] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
 8002432:	4b27      	ldr	r3, [pc, #156]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	3303      	adds	r3, #3
 800243c:	4a25      	ldr	r2, [pc, #148]	; (80024d4 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a0>)
 800243e:	5cd3      	ldrb	r3, [r2, r3]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	461a      	mov	r2, r3
 8002444:	7afb      	ldrb	r3, [r7, #11]
 8002446:	b2db      	uxtb	r3, r3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002450:	2b00      	cmp	r3, #0
 8002452:	dd04      	ble.n	800245e <ARGB_TIM_DMADelayPulseHalfCplt_right+0x12a>
 8002454:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a4>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	4619      	mov	r1, r3
 800245c:	e003      	b.n	8002466 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x132>
 800245e:	4b1f      	ldr	r3, [pc, #124]	; (80024dc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a8>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	4619      	mov	r1, r3
 8002466:	7afb      	ldrb	r3, [r7, #11]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	3318      	adds	r3, #24
 800246c:	4a1c      	ldr	r2, [pc, #112]	; (80024e0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 800246e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8002472:	7afb      	ldrb	r3, [r7, #11]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	3301      	adds	r3, #1
 8002478:	b2db      	uxtb	r3, r3
 800247a:	72fb      	strb	r3, [r7, #11]
 800247c:	7afb      	ldrb	r3, [r7, #11]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b07      	cmp	r3, #7
 8002482:	f67f af77 	bls.w	8002374 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x40>
        	PWM_BUF_RIGHT[i] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_RIGHT[i + 8] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_RIGHT[i + 16] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        BUF_COUNTER_RIGHT++;
 8002486:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	b29b      	uxth	r3, r3
 800248c:	3301      	adds	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002492:	801a      	strh	r2, [r3, #0]
 8002494:	e014      	b.n	80024c0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18c>
    } else if (BUF_COUNTER_RIGHT < NUM_PIXELS + 2) { // if RET transfer
 8002496:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	b29b      	uxth	r3, r3
 800249c:	2b56      	cmp	r3, #86	; 0x56
 800249e:	d80f      	bhi.n	80024c0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18c>
        memset((dma_siz *) &PWM_BUF_RIGHT[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 80024a0:	2280      	movs	r2, #128	; 0x80
 80024a2:	2100      	movs	r1, #0
 80024a4:	480e      	ldr	r0, [pc, #56]	; (80024e0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 80024a6:	f00e fe97 	bl	80111d8 <memset>
        BUF_COUNTER_RIGHT++;
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3301      	adds	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 80024b6:	801a      	strh	r2, [r3, #0]
 80024b8:	e002      	b.n	80024c0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18c>
    if (hdma != &DMA_HANDLE_RIGHT || htim != &TIM_HANDLE) return;
 80024ba:	bf00      	nop
 80024bc:	e000      	b.n	80024c0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18c>
    if (BUF_COUNTER_RIGHT == 0) return; // if no data to transmit - return
 80024be:	bf00      	nop
    }
}
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20001bb4 	.word	0x20001bb4
 80024cc:	20001ac4 	.word	0x20001ac4
 80024d0:	2000058a 	.word	0x2000058a
 80024d4:	20000234 	.word	0x20000234
 80024d8:	200000dc 	.word	0x200000dc
 80024dc:	200000dd 	.word	0x200000dd
 80024e0:	20000488 	.word	0x20000488

080024e4 <turn_off_left_stript>:

#include "light/led_stript/ARGB.h"

// -----------------------------------------------------------------------------------------------------
void turn_off_left_stript(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
	ARGB_Clear_left(); 			// Clear stirp
 80024e8:	f7fe fdc8 	bl	800107c <ARGB_Clear_left>
	while (ARGB_Show_left() != ARGB_OK); // Update - Option 1
 80024ec:	bf00      	nop
 80024ee:	f7fe ffa5 	bl	800143c <ARGB_Show_left>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d1fa      	bne.n	80024ee <turn_off_left_stript+0xa>
}
 80024f8:	bf00      	nop
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}

080024fe <turn_off_right_stript>:
// -----------------------------------------------------------------------------------------------------
void turn_off_right_stript(void)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	af00      	add	r7, sp, #0
	ARGB_Clear_right();
 8002502:	f7fe fdc7 	bl	8001094 <ARGB_Clear_right>
	while (ARGB_Show_right() != ARGB_OK); // Update - Option 1
 8002506:	bf00      	nop
 8002508:	f7ff f964 	bl	80017d4 <ARGB_Show_right>
 800250c:	4603      	mov	r3, r0
 800250e:	2b02      	cmp	r3, #2
 8002510:	d1fa      	bne.n	8002508 <turn_off_right_stript+0xa>
}
 8002512:	bf00      	nop
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}

08002518 <turn_off_left_and_right_dtript>:
// -----------------------------------------------------------------------------------------------------
void turn_off_left_and_right_dtript(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
	turn_off_left_stript();
 800251c:	f7ff ffe2 	bl	80024e4 <turn_off_left_stript>
	turn_off_right_stript();
 8002520:	f7ff ffed 	bl	80024fe <turn_off_right_stript>
}
 8002524:	bf00      	nop
 8002526:	bd80      	pop	{r7, pc}

08002528 <turn_all_leds_from_centr>:
	}
	while (!ARGB_Show_right());  // Update
}
// -----------------------------------------------------------------------------------------------------
void turn_all_leds_from_centr(u8_t delay, u8_t r, u8_t g, u8_t b)
{
 8002528:	b590      	push	{r4, r7, lr}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	4604      	mov	r4, r0
 8002530:	4608      	mov	r0, r1
 8002532:	4611      	mov	r1, r2
 8002534:	461a      	mov	r2, r3
 8002536:	4623      	mov	r3, r4
 8002538:	71fb      	strb	r3, [r7, #7]
 800253a:	4603      	mov	r3, r0
 800253c:	71bb      	strb	r3, [r7, #6]
 800253e:	460b      	mov	r3, r1
 8002540:	717b      	strb	r3, [r7, #5]
 8002542:	4613      	mov	r3, r2
 8002544:	713b      	strb	r3, [r7, #4]
	uint8_t i =0;
 8002546:	2300      	movs	r3, #0
 8002548:	73fb      	strb	r3, [r7, #15]
	// turn_off_left_stript();

	for( i = 84; i >= 43; i--)
 800254a:	2354      	movs	r3, #84	; 0x54
 800254c:	73fb      	strb	r3, [r7, #15]
 800254e:	e034      	b.n	80025ba <turn_all_leds_from_centr+0x92>
	{
		ARGB_SetRGB_left(i, r, g, b);			// High side
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	b298      	uxth	r0, r3
 8002554:	793b      	ldrb	r3, [r7, #4]
 8002556:	797a      	ldrb	r2, [r7, #5]
 8002558:	79b9      	ldrb	r1, [r7, #6]
 800255a:	f7fe fdb7 	bl	80010cc <ARGB_SetRGB_left>
		ARGB_SetRGB_right(i, r, g, b);
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	b298      	uxth	r0, r3
 8002562:	793b      	ldrb	r3, [r7, #4]
 8002564:	797a      	ldrb	r2, [r7, #5]
 8002566:	79b9      	ldrb	r1, [r7, #6]
 8002568:	f7fe fe2a 	bl	80011c0 <ARGB_SetRGB_right>

		ARGB_SetRGB_left((85 - i), r, g, b);
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	b29b      	uxth	r3, r3
 8002570:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
 8002574:	b298      	uxth	r0, r3
 8002576:	793b      	ldrb	r3, [r7, #4]
 8002578:	797a      	ldrb	r2, [r7, #5]
 800257a:	79b9      	ldrb	r1, [r7, #6]
 800257c:	f7fe fda6 	bl	80010cc <ARGB_SetRGB_left>
		ARGB_SetRGB_right((85 - i), r, g, b);
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	b29b      	uxth	r3, r3
 8002584:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
 8002588:	b298      	uxth	r0, r3
 800258a:	793b      	ldrb	r3, [r7, #4]
 800258c:	797a      	ldrb	r2, [r7, #5]
 800258e:	79b9      	ldrb	r1, [r7, #6]
 8002590:	f7fe fe16 	bl	80011c0 <ARGB_SetRGB_right>

		while (!ARGB_Show_left());  // Update
 8002594:	bf00      	nop
 8002596:	f7fe ff51 	bl	800143c <ARGB_Show_left>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0fa      	beq.n	8002596 <turn_all_leds_from_centr+0x6e>
		while (!ARGB_Show_right());  // Update
 80025a0:	bf00      	nop
 80025a2:	f7ff f917 	bl	80017d4 <ARGB_Show_right>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0fa      	beq.n	80025a2 <turn_all_leds_from_centr+0x7a>
		HAL_Delay(delay);
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f002 f830 	bl	8004614 <HAL_Delay>
	for( i = 84; i >= 43; i--)
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	2b2a      	cmp	r3, #42	; 0x2a
 80025be:	d8c7      	bhi.n	8002550 <turn_all_leds_from_centr+0x28>
	}
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd90      	pop	{r4, r7, pc}

080025ca <set_left_one_rgbw_led>:
// -----------------------------------------------------------------------------------------------------
void set_left_one_rgbw_led(uint8_t position, u8_t r, u8_t g, u8_t b, u8_t w)
{
 80025ca:	b590      	push	{r4, r7, lr}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	4604      	mov	r4, r0
 80025d2:	4608      	mov	r0, r1
 80025d4:	4611      	mov	r1, r2
 80025d6:	461a      	mov	r2, r3
 80025d8:	4623      	mov	r3, r4
 80025da:	71fb      	strb	r3, [r7, #7]
 80025dc:	4603      	mov	r3, r0
 80025de:	71bb      	strb	r3, [r7, #6]
 80025e0:	460b      	mov	r3, r1
 80025e2:	717b      	strb	r3, [r7, #5]
 80025e4:	4613      	mov	r3, r2
 80025e6:	713b      	strb	r3, [r7, #4]
	ARGB_SetRGB_left(position, r, g, b);
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	b298      	uxth	r0, r3
 80025ec:	793b      	ldrb	r3, [r7, #4]
 80025ee:	797a      	ldrb	r2, [r7, #5]
 80025f0:	79b9      	ldrb	r1, [r7, #6]
 80025f2:	f7fe fd6b 	bl	80010cc <ARGB_SetRGB_left>
	ARGB_SetWhite_left(position, w);
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	7e3a      	ldrb	r2, [r7, #24]
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fe58 	bl	80012b4 <ARGB_SetWhite_left>
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	bd90      	pop	{r4, r7, pc}

0800260c <set_right_one_rgbw_led>:
// -----------------------------------------------------------------------------------------------------
void set_right_one_rgbw_led(uint8_t position, u8_t r, u8_t g, u8_t b, u8_t w)
{
 800260c:	b590      	push	{r4, r7, lr}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4604      	mov	r4, r0
 8002614:	4608      	mov	r0, r1
 8002616:	4611      	mov	r1, r2
 8002618:	461a      	mov	r2, r3
 800261a:	4623      	mov	r3, r4
 800261c:	71fb      	strb	r3, [r7, #7]
 800261e:	4603      	mov	r3, r0
 8002620:	71bb      	strb	r3, [r7, #6]
 8002622:	460b      	mov	r3, r1
 8002624:	717b      	strb	r3, [r7, #5]
 8002626:	4613      	mov	r3, r2
 8002628:	713b      	strb	r3, [r7, #4]
	ARGB_SetRGB_right(position, r, g, b);
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	b298      	uxth	r0, r3
 800262e:	793b      	ldrb	r3, [r7, #4]
 8002630:	797a      	ldrb	r2, [r7, #5]
 8002632:	79b9      	ldrb	r1, [r7, #6]
 8002634:	f7fe fdc4 	bl	80011c0 <ARGB_SetRGB_right>
	ARGB_SetWhite_right(position, w);
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	b29b      	uxth	r3, r3
 800263c:	7e3a      	ldrb	r2, [r7, #24]
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe fe5b 	bl	80012fc <ARGB_SetWhite_right>
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	bd90      	pop	{r4, r7, pc}
	...

08002650 <start_and_init_25_hz>:
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
// ----------------------------------------------------------------------------
void start_and_init_25_hz(int msec)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
	msec = msec*10;
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_AUTORELOAD(&htim13, msec-1);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	1e5a      	subs	r2, r3, #1
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <start_and_init_25_hz+0x38>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	62da      	str	r2, [r3, #44]	; 0x2c
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3b01      	subs	r3, #1
 8002672:	461a      	mov	r2, r3
 8002674:	4b04      	ldr	r3, [pc, #16]	; (8002688 <start_and_init_25_hz+0x38>)
 8002676:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Start_IT(&htim13);
 8002678:	4803      	ldr	r0, [pc, #12]	; (8002688 <start_and_init_25_hz+0x38>)
 800267a:	f005 fabb 	bl	8007bf4 <HAL_TIM_Base_Start_IT>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20001b0c 	.word	0x20001b0c

0800268c <stop_25_hz>:
// ----------------------------------------------------------------------------
void stop_25_hz(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim13);
 8002690:	4802      	ldr	r0, [pc, #8]	; (800269c <stop_25_hz+0x10>)
 8002692:	f005 fb1f 	bl	8007cd4 <HAL_TIM_Base_Stop_IT>
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20001b0c 	.word	0x20001b0c

080026a0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80026a8:	1d39      	adds	r1, r7, #4
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026ae:	2201      	movs	r2, #1
 80026b0:	4803      	ldr	r0, [pc, #12]	; (80026c0 <__io_putchar+0x20>)
 80026b2:	f006 fc10 	bl	8008ed6 <HAL_UART_Transmit>
  return ch;
 80026b6:	687b      	ldr	r3, [r7, #4]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20001c14 	.word	0x20001c14

080026c4 <read_framesfrom_bin_file>:
// ----------------------------------------------------------------------------
uint8_t read_framesfrom_bin_file(char* name)
{
 80026c4:	b5b0      	push	{r4, r5, r7, lr}
 80026c6:	b08a      	sub	sp, #40	; 0x28
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	6078      	str	r0, [r7, #4]
	uint16_t vTemp = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	82fb      	strh	r3, [r7, #22]
	uint32_t vIndex = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	613b      	str	r3, [r7, #16]
	static uint32_t vFileSize = 0;
	uint32_t vBytesReadCounter;

	int size_buf_for_read = sizeof(frame_buffer);
 80026d4:	f240 33b5 	movw	r3, #949	; 0x3b5
 80026d8:	60fb      	str	r3, [r7, #12]

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80026da:	2100      	movs	r1, #0
 80026dc:	4886      	ldr	r0, [pc, #536]	; (80028f8 <read_framesfrom_bin_file+0x234>)
 80026de:	f005 fb77 	bl	8007dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80026e2:	2104      	movs	r1, #4
 80026e4:	4884      	ldr	r0, [pc, #528]	; (80028f8 <read_framesfrom_bin_file+0x234>)
 80026e6:	f005 fb73 	bl	8007dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80026ea:	2108      	movs	r1, #8
 80026ec:	4882      	ldr	r0, [pc, #520]	; (80028f8 <read_framesfrom_bin_file+0x234>)
 80026ee:	f005 fb6f 	bl	8007dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80026f2:	210c      	movs	r1, #12
 80026f4:	4880      	ldr	r0, [pc, #512]	; (80028f8 <read_framesfrom_bin_file+0x234>)
 80026f6:	f005 fb6b 	bl	8007dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80026fa:	2100      	movs	r1, #0
 80026fc:	487f      	ldr	r0, [pc, #508]	; (80028fc <read_framesfrom_bin_file+0x238>)
 80026fe:	f005 fb67 	bl	8007dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002702:	2104      	movs	r1, #4
 8002704:	487d      	ldr	r0, [pc, #500]	; (80028fc <read_framesfrom_bin_file+0x238>)
 8002706:	f005 fb63 	bl	8007dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800270a:	2108      	movs	r1, #8
 800270c:	487b      	ldr	r0, [pc, #492]	; (80028fc <read_framesfrom_bin_file+0x238>)
 800270e:	f005 fb5f 	bl	8007dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002712:	210c      	movs	r1, #12
 8002714:	4879      	ldr	r0, [pc, #484]	; (80028fc <read_framesfrom_bin_file+0x238>)
 8002716:	f005 fb5b 	bl	8007dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800271a:	2104      	movs	r1, #4
 800271c:	4878      	ldr	r0, [pc, #480]	; (8002900 <read_framesfrom_bin_file+0x23c>)
 800271e:	f005 fb57 	bl	8007dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002722:	2108      	movs	r1, #8
 8002724:	4876      	ldr	r0, [pc, #472]	; (8002900 <read_framesfrom_bin_file+0x23c>)
 8002726:	f005 fb53 	bl	8007dd0 <HAL_TIM_PWM_Start>

	static bool open_file_flag = false;

	if(open_file_flag == false)		// if file wasn't opened before
 800272a:	4b76      	ldr	r3, [pc, #472]	; (8002904 <read_framesfrom_bin_file+0x240>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	f083 0301 	eor.w	r3, r3, #1
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	d027      	beq.n	8002788 <read_framesfrom_bin_file+0xc4>
	{
		if(f_mount(&SDFatFs, (TCHAR const*)USER_Path, 0))
 8002738:	2200      	movs	r2, #0
 800273a:	4973      	ldr	r1, [pc, #460]	; (8002908 <read_framesfrom_bin_file+0x244>)
 800273c:	4873      	ldr	r0, [pc, #460]	; (800290c <read_framesfrom_bin_file+0x248>)
 800273e:	f00d f89b 	bl	800f878 <f_mount>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <read_framesfrom_bin_file+0x8a>
		{
			SD_Error_Handler();
 8002748:	f001 fe4e 	bl	80043e8 <SD_Error_Handler>
 800274c:	e0cf      	b.n	80028ee <read_framesfrom_bin_file+0x22a>
	  	}
		else
		{
			if(f_open(&MyFile, name, FA_READ))
 800274e:	2201      	movs	r2, #1
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	486f      	ldr	r0, [pc, #444]	; (8002910 <read_framesfrom_bin_file+0x24c>)
 8002754:	f00d f8d6 	bl	800f904 <f_open>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <read_framesfrom_bin_file+0xa0>
			{
				SD_Error_Handler();
 800275e:	f001 fe43 	bl	80043e8 <SD_Error_Handler>
 8002762:	e0c4      	b.n	80028ee <read_framesfrom_bin_file+0x22a>
	  		}
			else
			{
				vFileSize = MyFile.obj.objsize;									// Get size of current file
 8002764:	4b6a      	ldr	r3, [pc, #424]	; (8002910 <read_framesfrom_bin_file+0x24c>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4a6a      	ldr	r2, [pc, #424]	; (8002914 <read_framesfrom_bin_file+0x250>)
 800276a:	6013      	str	r3, [r2, #0]
				how_many_frames = vFileSize/frame_size;							// How many frames into current file
 800276c:	4b69      	ldr	r3, [pc, #420]	; (8002914 <read_framesfrom_bin_file+0x250>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a69      	ldr	r2, [pc, #420]	; (8002918 <read_framesfrom_bin_file+0x254>)
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	fbb3 f3f2 	udiv	r3, r3, r2
 8002778:	461a      	mov	r2, r3
 800277a:	4b68      	ldr	r3, [pc, #416]	; (800291c <read_framesfrom_bin_file+0x258>)
 800277c:	601a      	str	r2, [r3, #0]

				open_file_flag = true;
 800277e:	4b61      	ldr	r3, [pc, #388]	; (8002904 <read_framesfrom_bin_file+0x240>)
 8002780:	2201      	movs	r2, #1
 8002782:	701a      	strb	r2, [r3, #0]
				return 0;
 8002784:	2300      	movs	r3, #0
 8002786:	e0b2      	b.n	80028ee <read_framesfrom_bin_file+0x22a>
	}
	else
	{
		static int frame = 0;

		if(frame > how_many_frames)				// If all frames has been read
 8002788:	4b65      	ldr	r3, [pc, #404]	; (8002920 <read_framesfrom_bin_file+0x25c>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b63      	ldr	r3, [pc, #396]	; (800291c <read_framesfrom_bin_file+0x258>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	f340 809f 	ble.w	80028d4 <read_framesfrom_bin_file+0x210>
		{
			f_close(&MyFile);
 8002796:	485e      	ldr	r0, [pc, #376]	; (8002910 <read_framesfrom_bin_file+0x24c>)
 8002798:	f00d fc5d 	bl	8010056 <f_close>
			open_file_flag = false;
 800279c:	4b59      	ldr	r3, [pc, #356]	; (8002904 <read_framesfrom_bin_file+0x240>)
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
			frame = 0;
 80027a2:	4b5f      	ldr	r3, [pc, #380]	; (8002920 <read_framesfrom_bin_file+0x25c>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]

			return 1;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0a0      	b.n	80028ee <read_framesfrom_bin_file+0x22a>
			for(frame; ((frame <= how_many_frames) && (data_write_flag == true)); frame++)
			{
				//HAL_GPIO_TogglePin(GPIOE, TEST_OUTPUT_1_Pin);					// For measure

				// INTERRUPT DOESNT WORK !!!!!!!!!!!!!!!!!!!!!!!!!!!!<<<<<<<<<<<<<<<<<<<<<<<<
				if(interrupt_animation_flag == true)						// If was sent "STOP animation" command. 'z' key
 80027ac:	4b5d      	ldr	r3, [pc, #372]	; (8002924 <read_framesfrom_bin_file+0x260>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00a      	beq.n	80027ca <read_framesfrom_bin_file+0x106>
				{
					interrupt_animation_flag = false;
 80027b4:	4b5b      	ldr	r3, [pc, #364]	; (8002924 <read_framesfrom_bin_file+0x260>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]
					stop_light_all_turn_off();
 80027ba:	f7fe faf9 	bl	8000db0 <stop_light_all_turn_off>
					turn_off_left_and_right_dtript();
 80027be:	f7ff feab 	bl	8002518 <turn_off_left_and_right_dtript>
					HAL_Delay(100);
 80027c2:	2064      	movs	r0, #100	; 0x64
 80027c4:	f001 ff26 	bl	8004614 <HAL_Delay>

					break;
 80027c8:	e08f      	b.n	80028ea <read_framesfrom_bin_file+0x226>
				}

				memset(frame_buffer, 0, sizeof(frame_buffer));							// must be 4 buffer
 80027ca:	f240 32b5 	movw	r2, #949	; 0x3b5
 80027ce:	2100      	movs	r1, #0
 80027d0:	4855      	ldr	r0, [pc, #340]	; (8002928 <read_framesfrom_bin_file+0x264>)
 80027d2:	f00e fd01 	bl	80111d8 <memset>

				f_lseek(&MyFile, frame + ((frame_size - 1)*frame));						// shift on one frame
 80027d6:	4b50      	ldr	r3, [pc, #320]	; (8002918 <read_framesfrom_bin_file+0x254>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	3b01      	subs	r3, #1
 80027dc:	4a50      	ldr	r2, [pc, #320]	; (8002920 <read_framesfrom_bin_file+0x25c>)
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	fb03 f202 	mul.w	r2, r3, r2
 80027e4:	4b4e      	ldr	r3, [pc, #312]	; (8002920 <read_framesfrom_bin_file+0x25c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4413      	add	r3, r2
 80027ea:	4619      	mov	r1, r3
 80027ec:	4848      	ldr	r0, [pc, #288]	; (8002910 <read_framesfrom_bin_file+0x24c>)
 80027ee:	f00d fc5c 	bl	80100aa <f_lseek>
				f_read(&MyFile, aBuffer, vTemp, (UINT *)&vBytesReadCounter);
 80027f2:	8afa      	ldrh	r2, [r7, #22]
 80027f4:	f107 0308 	add.w	r3, r7, #8
 80027f8:	494c      	ldr	r1, [pc, #304]	; (800292c <read_framesfrom_bin_file+0x268>)
 80027fa:	4845      	ldr	r0, [pc, #276]	; (8002910 <read_framesfrom_bin_file+0x24c>)
 80027fc:	f00d fa4e 	bl	800fc9c <f_read>
				f_gets(frame_buffer, size_buf_for_read, &MyFile);     					// Read one fraime into buffer
 8002800:	4a43      	ldr	r2, [pc, #268]	; (8002910 <read_framesfrom_bin_file+0x24c>)
 8002802:	68f9      	ldr	r1, [r7, #12]
 8002804:	4848      	ldr	r0, [pc, #288]	; (8002928 <read_framesfrom_bin_file+0x264>)
 8002806:	f00d ffff 	bl	8010808 <f_gets>

				// SET Left RGBW LEDs
				uint16_t number_of_rgbw_leds = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	83fb      	strh	r3, [r7, #30]
				int k = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	61bb      	str	r3, [r7, #24]
				for(k = end_left_led; k >= strat_left_led; k--)		// 84 LEDs
 8002812:	4b47      	ldr	r3, [pc, #284]	; (8002930 <read_framesfrom_bin_file+0x26c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	61bb      	str	r3, [r7, #24]
 8002818:	e020      	b.n	800285c <read_framesfrom_bin_file+0x198>
				{
					if(k%4 == 0)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d118      	bne.n	8002856 <read_framesfrom_bin_file+0x192>
					{
						set_left_one_rgbw_led(number_of_rgbw_leds, frame_buffer[k], frame_buffer[k+1], frame_buffer[k+2], frame_buffer[k+3]);
 8002824:	8bfb      	ldrh	r3, [r7, #30]
 8002826:	b2d8      	uxtb	r0, r3
 8002828:	4a3f      	ldr	r2, [pc, #252]	; (8002928 <read_framesfrom_bin_file+0x264>)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	4413      	add	r3, r2
 800282e:	7819      	ldrb	r1, [r3, #0]
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	3301      	adds	r3, #1
 8002834:	4a3c      	ldr	r2, [pc, #240]	; (8002928 <read_framesfrom_bin_file+0x264>)
 8002836:	5cd2      	ldrb	r2, [r2, r3]
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	3302      	adds	r3, #2
 800283c:	4c3a      	ldr	r4, [pc, #232]	; (8002928 <read_framesfrom_bin_file+0x264>)
 800283e:	5ce4      	ldrb	r4, [r4, r3]
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	3303      	adds	r3, #3
 8002844:	4d38      	ldr	r5, [pc, #224]	; (8002928 <read_framesfrom_bin_file+0x264>)
 8002846:	5ceb      	ldrb	r3, [r5, r3]
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	4623      	mov	r3, r4
 800284c:	f7ff febd 	bl	80025ca <set_left_one_rgbw_led>
						number_of_rgbw_leds++;
 8002850:	8bfb      	ldrh	r3, [r7, #30]
 8002852:	3301      	adds	r3, #1
 8002854:	83fb      	strh	r3, [r7, #30]
				for(k = end_left_led; k >= strat_left_led; k--)		// 84 LEDs
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	3b01      	subs	r3, #1
 800285a:	61bb      	str	r3, [r7, #24]
 800285c:	4b35      	ldr	r3, [pc, #212]	; (8002934 <read_framesfrom_bin_file+0x270>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	429a      	cmp	r2, r3
 8002864:	dad9      	bge.n	800281a <read_framesfrom_bin_file+0x156>
					}
				}

				// SET Right RGBW LEDs
				number_of_rgbw_leds = 0;
 8002866:	2300      	movs	r3, #0
 8002868:	83fb      	strh	r3, [r7, #30]
				for(k = end_ritht_led; k >= strat_right_led; k--)
 800286a:	4b33      	ldr	r3, [pc, #204]	; (8002938 <read_framesfrom_bin_file+0x274>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	61bb      	str	r3, [r7, #24]
 8002870:	e020      	b.n	80028b4 <read_framesfrom_bin_file+0x1f0>
				{
					if(k%4 == 0)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	f003 0303 	and.w	r3, r3, #3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d118      	bne.n	80028ae <read_framesfrom_bin_file+0x1ea>
					{
						set_right_one_rgbw_led(number_of_rgbw_leds, frame_buffer[k], frame_buffer[k+1], frame_buffer[k+2], frame_buffer[k+3]);
 800287c:	8bfb      	ldrh	r3, [r7, #30]
 800287e:	b2d8      	uxtb	r0, r3
 8002880:	4a29      	ldr	r2, [pc, #164]	; (8002928 <read_framesfrom_bin_file+0x264>)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	4413      	add	r3, r2
 8002886:	7819      	ldrb	r1, [r3, #0]
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	3301      	adds	r3, #1
 800288c:	4a26      	ldr	r2, [pc, #152]	; (8002928 <read_framesfrom_bin_file+0x264>)
 800288e:	5cd2      	ldrb	r2, [r2, r3]
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	3302      	adds	r3, #2
 8002894:	4c24      	ldr	r4, [pc, #144]	; (8002928 <read_framesfrom_bin_file+0x264>)
 8002896:	5ce4      	ldrb	r4, [r4, r3]
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	3303      	adds	r3, #3
 800289c:	4d22      	ldr	r5, [pc, #136]	; (8002928 <read_framesfrom_bin_file+0x264>)
 800289e:	5ceb      	ldrb	r3, [r5, r3]
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	4623      	mov	r3, r4
 80028a4:	f7ff feb2 	bl	800260c <set_right_one_rgbw_led>
						number_of_rgbw_leds++;
 80028a8:	8bfb      	ldrh	r3, [r7, #30]
 80028aa:	3301      	adds	r3, #1
 80028ac:	83fb      	strh	r3, [r7, #30]
				for(k = end_ritht_led; k >= strat_right_led; k--)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	3b01      	subs	r3, #1
 80028b2:	61bb      	str	r3, [r7, #24]
 80028b4:	4b21      	ldr	r3, [pc, #132]	; (800293c <read_framesfrom_bin_file+0x278>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	dad9      	bge.n	8002872 <read_framesfrom_bin_file+0x1ae>
					}
				}

				// Setting flags that data was loaded and ready to be show
				data_write_flag = false;
 80028be:	4b20      	ldr	r3, [pc, #128]	; (8002940 <read_framesfrom_bin_file+0x27c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]
				data_ready_flag = true;
 80028c4:	4b1f      	ldr	r3, [pc, #124]	; (8002944 <read_framesfrom_bin_file+0x280>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	701a      	strb	r2, [r3, #0]
			for(frame; ((frame <= how_many_frames) && (data_write_flag == true)); frame++)
 80028ca:	4b15      	ldr	r3, [pc, #84]	; (8002920 <read_framesfrom_bin_file+0x25c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	3301      	adds	r3, #1
 80028d0:	4a13      	ldr	r2, [pc, #76]	; (8002920 <read_framesfrom_bin_file+0x25c>)
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	4b12      	ldr	r3, [pc, #72]	; (8002920 <read_framesfrom_bin_file+0x25c>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4b10      	ldr	r3, [pc, #64]	; (800291c <read_framesfrom_bin_file+0x258>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	dc04      	bgt.n	80028ea <read_framesfrom_bin_file+0x226>
 80028e0:	4b17      	ldr	r3, [pc, #92]	; (8002940 <read_framesfrom_bin_file+0x27c>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f47f af61 	bne.w	80027ac <read_framesfrom_bin_file+0xe8>

			}
//		}

	  	return 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	e7ff      	b.n	80028ee <read_framesfrom_bin_file+0x22a>
	}
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3720      	adds	r7, #32
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bdb0      	pop	{r4, r5, r7, pc}
 80028f6:	bf00      	nop
 80028f8:	200019ec 	.word	0x200019ec
 80028fc:	20001a34 	.word	0x20001a34
 8002900:	20001a7c 	.word	0x20001a7c
 8002904:	20001c58 	.word	0x20001c58
 8002908:	20001c74 	.word	0x20001c74
 800290c:	20000590 	.word	0x20000590
 8002910:	20001c7c 	.word	0x20001c7c
 8002914:	20001c5c 	.word	0x20001c5c
 8002918:	20000008 	.word	0x20000008
 800291c:	20003038 	.word	0x20003038
 8002920:	20001c60 	.word	0x20001c60
 8002924:	200015ca 	.word	0x200015ca
 8002928:	200015dc 	.word	0x200015dc
 800292c:	20002e38 	.word	0x20002e38
 8002930:	20000014 	.word	0x20000014
 8002934:	20000010 	.word	0x20000010
 8002938:	2000001c 	.word	0x2000001c
 800293c:	20000018 	.word	0x20000018
 8002940:	20000001 	.word	0x20000001
 8002944:	200015d8 	.word	0x200015d8

08002948 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800294e:	f001 fdef 	bl	8004530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002952:	f000 f8bd 	bl	8002ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002956:	f000 fc11 	bl	800317c <MX_GPIO_Init>
  MX_DMA_Init();
 800295a:	f000 fbe7 	bl	800312c <MX_DMA_Init>
  MX_USB_HOST_Init();
 800295e:	f00e f8f9 	bl	8010b54 <MX_USB_HOST_Init>
  MX_USART3_UART_Init();
 8002962:	f000 fbb9 	bl	80030d8 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8002966:	f000 f91d 	bl	8002ba4 <MX_SPI1_Init>
  MX_FATFS_Init();
 800296a:	f008 fac5 	bl	800aef8 <MX_FATFS_Init>
  MX_TIM2_Init();
 800296e:	f000 f94f 	bl	8002c10 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002972:	f000 f9e3 	bl	8002d3c <MX_TIM3_Init>
  MX_TIM4_Init();
 8002976:	f000 fa79 	bl	8002e6c <MX_TIM4_Init>
  MX_TIM8_Init();
 800297a:	f000 faf9 	bl	8002f70 <MX_TIM8_Init>
  MX_TIM13_Init();
 800297e:	f000 fb87 	bl	8003090 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(100);
 8002982:	2064      	movs	r0, #100	; 0x64
 8002984:	f001 fe46 	bl	8004614 <HAL_Delay>

  // RGBW LEDs //////////////////////////////////////////////////////////////////
  ARGB_SetBrightness(255); 					 	// Set global brightness to 100%
 8002988:	20ff      	movs	r0, #255	; 0xff
 800298a:	f7fe fb8f 	bl	80010ac <ARGB_SetBrightness>
  ARGB_Init();  								// Initialization
 800298e:	f7fe faf3 	bl	8000f78 <ARGB_Init>
  turn_off_left_and_right_dtript();
 8002992:	f7ff fdc1 	bl	8002518 <turn_off_left_and_right_dtript>
  //////////////////////////////////////////////////////////////////////////

  // SD Card //////////////////////////////////////////////////////////////
  char msg_buf[30] = {0};
 8002996:	2300      	movs	r3, #0
 8002998:	603b      	str	r3, [r7, #0]
 800299a:	1d3b      	adds	r3, r7, #4
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	611a      	str	r2, [r3, #16]
 80029a8:	615a      	str	r2, [r3, #20]
 80029aa:	831a      	strh	r2, [r3, #24]
  if(disk_initialize(SDFatFs. drv) != 0)
 80029ac:	4b38      	ldr	r3, [pc, #224]	; (8002a90 <main+0x148>)
 80029ae:	785b      	ldrb	r3, [r3, #1]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f00a fbb9 	bl	800d128 <disk_initialize>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d005      	beq.n	80029c8 <main+0x80>
  {
	  while(1)
	  {
		  printf("\n\r-> ERROR: NO SD CARD! \n\r");
 80029bc:	4835      	ldr	r0, [pc, #212]	; (8002a94 <main+0x14c>)
 80029be:	f00e fcf3 	bl	80113a8 <iprintf>
		  all_leds_animantion_error_state();
 80029c2:	f000 fdad 	bl	8003520 <all_leds_animantion_error_state>
		  printf("\n\r-> ERROR: NO SD CARD! \n\r");
 80029c6:	e7f9      	b.n	80029bc <main+0x74>
	  }
  }
  else
  {
	  SD_SPI_GetFileInfo();
 80029c8:	f001 fc1e 	bl	8004208 <SD_SPI_GetFileInfo>
	  FATFS_UnLinkDriver(USER_Path);
 80029cc:	4832      	ldr	r0, [pc, #200]	; (8002a98 <main+0x150>)
 80029ce:	f00d ffed 	bl	80109ac <FATFS_UnLinkDriver>

	  all_leds_animantion_ok_state();
 80029d2:	f000 fd8d 	bl	80034f0 <all_leds_animantion_ok_state>
  }
  //////////////////////////////////////////////////////////////////////////

  // UART //////////////////////////////////////////////////////////////////
  HAL_UART_Receive_IT(&huart3, &uart_RX_data, sizeof(uart_RX_data));		// Turn on receive on byte from UART in interrupt mode
 80029d6:	2201      	movs	r2, #1
 80029d8:	4930      	ldr	r1, [pc, #192]	; (8002a9c <main+0x154>)
 80029da:	4831      	ldr	r0, [pc, #196]	; (8002aa0 <main+0x158>)
 80029dc:	f006 fb0d 	bl	8008ffa <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  if(flag_received_command == true)
 80029e0:	4b30      	ldr	r3, [pc, #192]	; (8002aa4 <main+0x15c>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d03f      	beq.n	8002a68 <main+0x120>
	  {
		  static char buf_str[10] = {0};
		  static bool flag_firt_command = true;

		  if(flag_firt_command == true)												// Read file first time
 80029e8:	4b2f      	ldr	r3, [pc, #188]	; (8002aa8 <main+0x160>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d01b      	beq.n	8002a28 <main+0xe0>
		  {
			  memset(buf_str, 0, sizeof(buf_str));
 80029f0:	220a      	movs	r2, #10
 80029f2:	2100      	movs	r1, #0
 80029f4:	482d      	ldr	r0, [pc, #180]	; (8002aac <main+0x164>)
 80029f6:	f00e fbef 	bl	80111d8 <memset>
			  strcat(buf_str, rx_buf_command);
 80029fa:	492d      	ldr	r1, [pc, #180]	; (8002ab0 <main+0x168>)
 80029fc:	482b      	ldr	r0, [pc, #172]	; (8002aac <main+0x164>)
 80029fe:	f00e fd1b 	bl	8011438 <strcat>
			  strcat(buf_str, ".bin");
 8002a02:	482a      	ldr	r0, [pc, #168]	; (8002aac <main+0x164>)
 8002a04:	f7fd fbe4 	bl	80001d0 <strlen>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4b27      	ldr	r3, [pc, #156]	; (8002aac <main+0x164>)
 8002a0e:	4413      	add	r3, r2
 8002a10:	4a28      	ldr	r2, [pc, #160]	; (8002ab4 <main+0x16c>)
 8002a12:	6810      	ldr	r0, [r2, #0]
 8002a14:	6018      	str	r0, [r3, #0]
 8002a16:	7912      	ldrb	r2, [r2, #4]
 8002a18:	711a      	strb	r2, [r3, #4]

			  start_and_init_25_hz(40);												// turn on 25 Hz interrupt
 8002a1a:	2028      	movs	r0, #40	; 0x28
 8002a1c:	f7ff fe18 	bl	8002650 <start_and_init_25_hz>

			  flag_firt_command = false;
 8002a20:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <main+0x160>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	701a      	strb	r2, [r3, #0]
 8002a26:	e01f      	b.n	8002a68 <main+0x120>
		  }
		  else
		  {
			  static bool print_flag = true;

			  if(read_framesfrom_bin_file(buf_str) == 0)							// Read file
 8002a28:	4820      	ldr	r0, [pc, #128]	; (8002aac <main+0x164>)
 8002a2a:	f7ff fe4b 	bl	80026c4 <read_framesfrom_bin_file>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10b      	bne.n	8002a4c <main+0x104>
			  {
				  if(print_flag == true)											// If file was opened first time
 8002a34:	4b20      	ldr	r3, [pc, #128]	; (8002ab8 <main+0x170>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d015      	beq.n	8002a68 <main+0x120>
				  {

					  printf("File %s is working...  \n\r", rx_buf_command);
 8002a3c:	491c      	ldr	r1, [pc, #112]	; (8002ab0 <main+0x168>)
 8002a3e:	481f      	ldr	r0, [pc, #124]	; (8002abc <main+0x174>)
 8002a40:	f00e fcb2 	bl	80113a8 <iprintf>

					  print_flag = false;
 8002a44:	4b1c      	ldr	r3, [pc, #112]	; (8002ab8 <main+0x170>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	701a      	strb	r2, [r3, #0]
 8002a4a:	e00d      	b.n	8002a68 <main+0x120>
				  }
			  }
			  else																	// Print "DONE" if all file was read
			  {
				  printf("\n\r DONE \n\r");
 8002a4c:	481c      	ldr	r0, [pc, #112]	; (8002ac0 <main+0x178>)
 8002a4e:	f00e fcab 	bl	80113a8 <iprintf>

				  stop_25_hz();
 8002a52:	f7ff fe1b 	bl	800268c <stop_25_hz>

				  flag_received_command = false;									// Out (set flag that file was read)
 8002a56:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <main+0x15c>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]
				  flag_firt_command = true;
 8002a5c:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <main+0x160>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	701a      	strb	r2, [r3, #0]
				  print_flag = true;
 8002a62:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <main+0x170>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	701a      	strb	r2, [r3, #0]

	  }

	  // If data is ready and time is = 25 Hz - show it
//	  Якщо дані в черзі є, вивести їх
	  if((interrupt_flag == true) && (data_ready_flag == true))
 8002a68:	4b16      	ldr	r3, [pc, #88]	; (8002ac4 <main+0x17c>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00b      	beq.n	8002a88 <main+0x140>
 8002a70:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <main+0x180>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d007      	beq.n	8002a88 <main+0x140>
	  {
		  update_all_leds();
 8002a78:	f001 fcc2 	bl	8004400 <update_all_leds>

		  data_ready_flag = false;					// Data was showed
 8002a7c:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <main+0x180>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	701a      	strb	r2, [r3, #0]
		  data_write_flag = true;					// allow read next frame
 8002a82:	4b12      	ldr	r3, [pc, #72]	; (8002acc <main+0x184>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	701a      	strb	r2, [r3, #0]
	  }


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8002a88:	f00e f88a 	bl	8010ba0 <MX_USB_HOST_Process>
	  if(flag_received_command == true)
 8002a8c:	e7a8      	b.n	80029e0 <main+0x98>
 8002a8e:	bf00      	nop
 8002a90:	20000590 	.word	0x20000590
 8002a94:	080124f4 	.word	0x080124f4
 8002a98:	20001c74 	.word	0x20001c74
 8002a9c:	200015c8 	.word	0x200015c8
 8002aa0:	20001c14 	.word	0x20001c14
 8002aa4:	200015c9 	.word	0x200015c9
 8002aa8:	20000002 	.word	0x20000002
 8002aac:	20001c64 	.word	0x20001c64
 8002ab0:	200015cc 	.word	0x200015cc
 8002ab4:	08012510 	.word	0x08012510
 8002ab8:	20000003 	.word	0x20000003
 8002abc:	08012518 	.word	0x08012518
 8002ac0:	08012534 	.word	0x08012534
 8002ac4:	200015d7 	.word	0x200015d7
 8002ac8:	200015d8 	.word	0x200015d8
 8002acc:	20000001 	.word	0x20000001

08002ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b094      	sub	sp, #80	; 0x50
 8002ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ad6:	f107 0320 	add.w	r3, r7, #32
 8002ada:	2230      	movs	r2, #48	; 0x30
 8002adc:	2100      	movs	r1, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f00e fb7a 	bl	80111d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ae4:	f107 030c 	add.w	r3, r7, #12
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002af4:	2300      	movs	r3, #0
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	4b28      	ldr	r3, [pc, #160]	; (8002b9c <SystemClock_Config+0xcc>)
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	4a27      	ldr	r2, [pc, #156]	; (8002b9c <SystemClock_Config+0xcc>)
 8002afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b02:	6413      	str	r3, [r2, #64]	; 0x40
 8002b04:	4b25      	ldr	r3, [pc, #148]	; (8002b9c <SystemClock_Config+0xcc>)
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b10:	2300      	movs	r3, #0
 8002b12:	607b      	str	r3, [r7, #4]
 8002b14:	4b22      	ldr	r3, [pc, #136]	; (8002ba0 <SystemClock_Config+0xd0>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a21      	ldr	r2, [pc, #132]	; (8002ba0 <SystemClock_Config+0xd0>)
 8002b1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	4b1f      	ldr	r3, [pc, #124]	; (8002ba0 <SystemClock_Config+0xd0>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b28:	607b      	str	r3, [r7, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b36:	2302      	movs	r3, #2
 8002b38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002b40:	2308      	movs	r3, #8
 8002b42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002b44:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002b48:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002b4e:	2307      	movs	r3, #7
 8002b50:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b52:	f107 0320 	add.w	r3, r7, #32
 8002b56:	4618      	mov	r0, r3
 8002b58:	f004 f86e 	bl	8006c38 <HAL_RCC_OscConfig>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002b62:	f000 fd16 	bl	8003592 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b66:	230f      	movs	r3, #15
 8002b68:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b72:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002b78:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b7c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002b7e:	f107 030c 	add.w	r3, r7, #12
 8002b82:	2105      	movs	r1, #5
 8002b84:	4618      	mov	r0, r3
 8002b86:	f004 facf 	bl	8007128 <HAL_RCC_ClockConfig>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002b90:	f000 fcff 	bl	8003592 <Error_Handler>
  }
}
 8002b94:	bf00      	nop
 8002b96:	3750      	adds	r7, #80	; 0x50
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	40007000 	.word	0x40007000

08002ba4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ba8:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <MX_SPI1_Init+0x64>)
 8002baa:	4a18      	ldr	r2, [pc, #96]	; (8002c0c <MX_SPI1_Init+0x68>)
 8002bac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bae:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <MX_SPI1_Init+0x64>)
 8002bb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002bb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002bb6:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <MX_SPI1_Init+0x64>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bbc:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <MX_SPI1_Init+0x64>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <MX_SPI1_Init+0x64>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bc8:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <MX_SPI1_Init+0x64>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bce:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <MX_SPI1_Init+0x64>)
 8002bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bd4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002bd6:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <MX_SPI1_Init+0x64>)
 8002bd8:	2218      	movs	r2, #24
 8002bda:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <MX_SPI1_Init+0x64>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002be2:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <MX_SPI1_Init+0x64>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002be8:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <MX_SPI1_Init+0x64>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002bee:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <MX_SPI1_Init+0x64>)
 8002bf0:	220a      	movs	r2, #10
 8002bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bf4:	4804      	ldr	r0, [pc, #16]	; (8002c08 <MX_SPI1_Init+0x64>)
 8002bf6:	f004 fcb7 	bl	8007568 <HAL_SPI_Init>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c00:	f000 fcc7 	bl	8003592 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c04:	bf00      	nop
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20001994 	.word	0x20001994
 8002c0c:	40013000 	.word	0x40013000

08002c10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08e      	sub	sp, #56	; 0x38
 8002c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	605a      	str	r2, [r3, #4]
 8002c20:	609a      	str	r2, [r3, #8]
 8002c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c24:	f107 0320 	add.w	r3, r7, #32
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c2e:	1d3b      	adds	r3, r7, #4
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	611a      	str	r2, [r3, #16]
 8002c3c:	615a      	str	r2, [r3, #20]
 8002c3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c40:	4b3d      	ldr	r3, [pc, #244]	; (8002d38 <MX_TIM2_Init+0x128>)
 8002c42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2100-1;
 8002c48:	4b3b      	ldr	r3, [pc, #236]	; (8002d38 <MX_TIM2_Init+0x128>)
 8002c4a:	f640 0233 	movw	r2, #2099	; 0x833
 8002c4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c50:	4b39      	ldr	r3, [pc, #228]	; (8002d38 <MX_TIM2_Init+0x128>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250-1;
 8002c56:	4b38      	ldr	r3, [pc, #224]	; (8002d38 <MX_TIM2_Init+0x128>)
 8002c58:	22f9      	movs	r2, #249	; 0xf9
 8002c5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c5c:	4b36      	ldr	r3, [pc, #216]	; (8002d38 <MX_TIM2_Init+0x128>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c62:	4b35      	ldr	r3, [pc, #212]	; (8002d38 <MX_TIM2_Init+0x128>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c68:	4833      	ldr	r0, [pc, #204]	; (8002d38 <MX_TIM2_Init+0x128>)
 8002c6a:	f004 ff73 	bl	8007b54 <HAL_TIM_Base_Init>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002c74:	f000 fc8d 	bl	8003592 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c82:	4619      	mov	r1, r3
 8002c84:	482c      	ldr	r0, [pc, #176]	; (8002d38 <MX_TIM2_Init+0x128>)
 8002c86:	f005 fba5 	bl	80083d4 <HAL_TIM_ConfigClockSource>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002c90:	f000 fc7f 	bl	8003592 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002c94:	4828      	ldr	r0, [pc, #160]	; (8002d38 <MX_TIM2_Init+0x128>)
 8002c96:	f005 f84c 	bl	8007d32 <HAL_TIM_PWM_Init>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002ca0:	f000 fc77 	bl	8003592 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cac:	f107 0320 	add.w	r3, r7, #32
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4821      	ldr	r0, [pc, #132]	; (8002d38 <MX_TIM2_Init+0x128>)
 8002cb4:	f005 ffe0 	bl	8008c78 <HAL_TIMEx_MasterConfigSynchronization>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002cbe:	f000 fc68 	bl	8003592 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cc2:	2360      	movs	r3, #96	; 0x60
 8002cc4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cd2:	1d3b      	adds	r3, r7, #4
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4817      	ldr	r0, [pc, #92]	; (8002d38 <MX_TIM2_Init+0x128>)
 8002cda:	f005 fab9 	bl	8008250 <HAL_TIM_PWM_ConfigChannel>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002ce4:	f000 fc55 	bl	8003592 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ce8:	1d3b      	adds	r3, r7, #4
 8002cea:	2204      	movs	r2, #4
 8002cec:	4619      	mov	r1, r3
 8002cee:	4812      	ldr	r0, [pc, #72]	; (8002d38 <MX_TIM2_Init+0x128>)
 8002cf0:	f005 faae 	bl	8008250 <HAL_TIM_PWM_ConfigChannel>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002cfa:	f000 fc4a 	bl	8003592 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002cfe:	1d3b      	adds	r3, r7, #4
 8002d00:	2208      	movs	r2, #8
 8002d02:	4619      	mov	r1, r3
 8002d04:	480c      	ldr	r0, [pc, #48]	; (8002d38 <MX_TIM2_Init+0x128>)
 8002d06:	f005 faa3 	bl	8008250 <HAL_TIM_PWM_ConfigChannel>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002d10:	f000 fc3f 	bl	8003592 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d14:	1d3b      	adds	r3, r7, #4
 8002d16:	220c      	movs	r2, #12
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4807      	ldr	r0, [pc, #28]	; (8002d38 <MX_TIM2_Init+0x128>)
 8002d1c:	f005 fa98 	bl	8008250 <HAL_TIM_PWM_ConfigChannel>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8002d26:	f000 fc34 	bl	8003592 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002d2a:	4803      	ldr	r0, [pc, #12]	; (8002d38 <MX_TIM2_Init+0x128>)
 8002d2c:	f000 fdbe 	bl	80038ac <HAL_TIM_MspPostInit>

}
 8002d30:	bf00      	nop
 8002d32:	3738      	adds	r7, #56	; 0x38
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	200019ec 	.word	0x200019ec

08002d3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08e      	sub	sp, #56	; 0x38
 8002d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	605a      	str	r2, [r3, #4]
 8002d4c:	609a      	str	r2, [r3, #8]
 8002d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d50:	f107 0320 	add.w	r3, r7, #32
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d5a:	1d3b      	adds	r3, r7, #4
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	605a      	str	r2, [r3, #4]
 8002d62:	609a      	str	r2, [r3, #8]
 8002d64:	60da      	str	r2, [r3, #12]
 8002d66:	611a      	str	r2, [r3, #16]
 8002d68:	615a      	str	r2, [r3, #20]
 8002d6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d6c:	4b3d      	ldr	r3, [pc, #244]	; (8002e64 <MX_TIM3_Init+0x128>)
 8002d6e:	4a3e      	ldr	r2, [pc, #248]	; (8002e68 <MX_TIM3_Init+0x12c>)
 8002d70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2100-1;
 8002d72:	4b3c      	ldr	r3, [pc, #240]	; (8002e64 <MX_TIM3_Init+0x128>)
 8002d74:	f640 0233 	movw	r2, #2099	; 0x833
 8002d78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d7a:	4b3a      	ldr	r3, [pc, #232]	; (8002e64 <MX_TIM3_Init+0x128>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 250-1;
 8002d80:	4b38      	ldr	r3, [pc, #224]	; (8002e64 <MX_TIM3_Init+0x128>)
 8002d82:	22f9      	movs	r2, #249	; 0xf9
 8002d84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d86:	4b37      	ldr	r3, [pc, #220]	; (8002e64 <MX_TIM3_Init+0x128>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d8c:	4b35      	ldr	r3, [pc, #212]	; (8002e64 <MX_TIM3_Init+0x128>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d92:	4834      	ldr	r0, [pc, #208]	; (8002e64 <MX_TIM3_Init+0x128>)
 8002d94:	f004 fede 	bl	8007b54 <HAL_TIM_Base_Init>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002d9e:	f000 fbf8 	bl	8003592 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002da6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002da8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dac:	4619      	mov	r1, r3
 8002dae:	482d      	ldr	r0, [pc, #180]	; (8002e64 <MX_TIM3_Init+0x128>)
 8002db0:	f005 fb10 	bl	80083d4 <HAL_TIM_ConfigClockSource>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002dba:	f000 fbea 	bl	8003592 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002dbe:	4829      	ldr	r0, [pc, #164]	; (8002e64 <MX_TIM3_Init+0x128>)
 8002dc0:	f004 ffb7 	bl	8007d32 <HAL_TIM_PWM_Init>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002dca:	f000 fbe2 	bl	8003592 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002dd6:	f107 0320 	add.w	r3, r7, #32
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4821      	ldr	r0, [pc, #132]	; (8002e64 <MX_TIM3_Init+0x128>)
 8002dde:	f005 ff4b 	bl	8008c78 <HAL_TIMEx_MasterConfigSynchronization>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002de8:	f000 fbd3 	bl	8003592 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dec:	2360      	movs	r3, #96	; 0x60
 8002dee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dfc:	1d3b      	adds	r3, r7, #4
 8002dfe:	2200      	movs	r2, #0
 8002e00:	4619      	mov	r1, r3
 8002e02:	4818      	ldr	r0, [pc, #96]	; (8002e64 <MX_TIM3_Init+0x128>)
 8002e04:	f005 fa24 	bl	8008250 <HAL_TIM_PWM_ConfigChannel>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002e0e:	f000 fbc0 	bl	8003592 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e12:	1d3b      	adds	r3, r7, #4
 8002e14:	2204      	movs	r2, #4
 8002e16:	4619      	mov	r1, r3
 8002e18:	4812      	ldr	r0, [pc, #72]	; (8002e64 <MX_TIM3_Init+0x128>)
 8002e1a:	f005 fa19 	bl	8008250 <HAL_TIM_PWM_ConfigChannel>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002e24:	f000 fbb5 	bl	8003592 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e28:	1d3b      	adds	r3, r7, #4
 8002e2a:	2208      	movs	r2, #8
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	480d      	ldr	r0, [pc, #52]	; (8002e64 <MX_TIM3_Init+0x128>)
 8002e30:	f005 fa0e 	bl	8008250 <HAL_TIM_PWM_ConfigChannel>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002e3a:	f000 fbaa 	bl	8003592 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e3e:	1d3b      	adds	r3, r7, #4
 8002e40:	220c      	movs	r2, #12
 8002e42:	4619      	mov	r1, r3
 8002e44:	4807      	ldr	r0, [pc, #28]	; (8002e64 <MX_TIM3_Init+0x128>)
 8002e46:	f005 fa03 	bl	8008250 <HAL_TIM_PWM_ConfigChannel>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002e50:	f000 fb9f 	bl	8003592 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002e54:	4803      	ldr	r0, [pc, #12]	; (8002e64 <MX_TIM3_Init+0x128>)
 8002e56:	f000 fd29 	bl	80038ac <HAL_TIM_MspPostInit>

}
 8002e5a:	bf00      	nop
 8002e5c:	3738      	adds	r7, #56	; 0x38
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20001a34 	.word	0x20001a34
 8002e68:	40000400 	.word	0x40000400

08002e6c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08e      	sub	sp, #56	; 0x38
 8002e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	605a      	str	r2, [r3, #4]
 8002e7c:	609a      	str	r2, [r3, #8]
 8002e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e80:	f107 0320 	add.w	r3, r7, #32
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e8a:	1d3b      	adds	r3, r7, #4
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	609a      	str	r2, [r3, #8]
 8002e94:	60da      	str	r2, [r3, #12]
 8002e96:	611a      	str	r2, [r3, #16]
 8002e98:	615a      	str	r2, [r3, #20]
 8002e9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e9c:	4b32      	ldr	r3, [pc, #200]	; (8002f68 <MX_TIM4_Init+0xfc>)
 8002e9e:	4a33      	ldr	r2, [pc, #204]	; (8002f6c <MX_TIM4_Init+0x100>)
 8002ea0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2100-1;
 8002ea2:	4b31      	ldr	r3, [pc, #196]	; (8002f68 <MX_TIM4_Init+0xfc>)
 8002ea4:	f640 0233 	movw	r2, #2099	; 0x833
 8002ea8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eaa:	4b2f      	ldr	r3, [pc, #188]	; (8002f68 <MX_TIM4_Init+0xfc>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 250-1;
 8002eb0:	4b2d      	ldr	r3, [pc, #180]	; (8002f68 <MX_TIM4_Init+0xfc>)
 8002eb2:	22f9      	movs	r2, #249	; 0xf9
 8002eb4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eb6:	4b2c      	ldr	r3, [pc, #176]	; (8002f68 <MX_TIM4_Init+0xfc>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ebc:	4b2a      	ldr	r3, [pc, #168]	; (8002f68 <MX_TIM4_Init+0xfc>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002ec2:	4829      	ldr	r0, [pc, #164]	; (8002f68 <MX_TIM4_Init+0xfc>)
 8002ec4:	f004 fe46 	bl	8007b54 <HAL_TIM_Base_Init>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002ece:	f000 fb60 	bl	8003592 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ed8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002edc:	4619      	mov	r1, r3
 8002ede:	4822      	ldr	r0, [pc, #136]	; (8002f68 <MX_TIM4_Init+0xfc>)
 8002ee0:	f005 fa78 	bl	80083d4 <HAL_TIM_ConfigClockSource>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002eea:	f000 fb52 	bl	8003592 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002eee:	481e      	ldr	r0, [pc, #120]	; (8002f68 <MX_TIM4_Init+0xfc>)
 8002ef0:	f004 ff1f 	bl	8007d32 <HAL_TIM_PWM_Init>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002efa:	f000 fb4a 	bl	8003592 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002efe:	2300      	movs	r3, #0
 8002f00:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f02:	2300      	movs	r3, #0
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f06:	f107 0320 	add.w	r3, r7, #32
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4816      	ldr	r0, [pc, #88]	; (8002f68 <MX_TIM4_Init+0xfc>)
 8002f0e:	f005 feb3 	bl	8008c78 <HAL_TIMEx_MasterConfigSynchronization>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002f18:	f000 fb3b 	bl	8003592 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f1c:	2360      	movs	r3, #96	; 0x60
 8002f1e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f24:	2300      	movs	r3, #0
 8002f26:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f2c:	1d3b      	adds	r3, r7, #4
 8002f2e:	2204      	movs	r2, #4
 8002f30:	4619      	mov	r1, r3
 8002f32:	480d      	ldr	r0, [pc, #52]	; (8002f68 <MX_TIM4_Init+0xfc>)
 8002f34:	f005 f98c 	bl	8008250 <HAL_TIM_PWM_ConfigChannel>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002f3e:	f000 fb28 	bl	8003592 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f42:	1d3b      	adds	r3, r7, #4
 8002f44:	2208      	movs	r2, #8
 8002f46:	4619      	mov	r1, r3
 8002f48:	4807      	ldr	r0, [pc, #28]	; (8002f68 <MX_TIM4_Init+0xfc>)
 8002f4a:	f005 f981 	bl	8008250 <HAL_TIM_PWM_ConfigChannel>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8002f54:	f000 fb1d 	bl	8003592 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002f58:	4803      	ldr	r0, [pc, #12]	; (8002f68 <MX_TIM4_Init+0xfc>)
 8002f5a:	f000 fca7 	bl	80038ac <HAL_TIM_MspPostInit>

}
 8002f5e:	bf00      	nop
 8002f60:	3738      	adds	r7, #56	; 0x38
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20001a7c 	.word	0x20001a7c
 8002f6c:	40000800 	.word	0x40000800

08002f70 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b092      	sub	sp, #72	; 0x48
 8002f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	605a      	str	r2, [r3, #4]
 8002f8a:	609a      	str	r2, [r3, #8]
 8002f8c:	60da      	str	r2, [r3, #12]
 8002f8e:	611a      	str	r2, [r3, #16]
 8002f90:	615a      	str	r2, [r3, #20]
 8002f92:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f94:	1d3b      	adds	r3, r7, #4
 8002f96:	2220      	movs	r2, #32
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f00e f91c 	bl	80111d8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002fa0:	4b39      	ldr	r3, [pc, #228]	; (8003088 <MX_TIM8_Init+0x118>)
 8002fa2:	4a3a      	ldr	r2, [pc, #232]	; (800308c <MX_TIM8_Init+0x11c>)
 8002fa4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002fa6:	4b38      	ldr	r3, [pc, #224]	; (8003088 <MX_TIM8_Init+0x118>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fac:	4b36      	ldr	r3, [pc, #216]	; (8003088 <MX_TIM8_Init+0x118>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002fb2:	4b35      	ldr	r3, [pc, #212]	; (8003088 <MX_TIM8_Init+0x118>)
 8002fb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fb8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fba:	4b33      	ldr	r3, [pc, #204]	; (8003088 <MX_TIM8_Init+0x118>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002fc0:	4b31      	ldr	r3, [pc, #196]	; (8003088 <MX_TIM8_Init+0x118>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fc6:	4b30      	ldr	r3, [pc, #192]	; (8003088 <MX_TIM8_Init+0x118>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002fcc:	482e      	ldr	r0, [pc, #184]	; (8003088 <MX_TIM8_Init+0x118>)
 8002fce:	f004 feb0 	bl	8007d32 <HAL_TIM_PWM_Init>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002fd8:	f000 fadb 	bl	8003592 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002fe4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4827      	ldr	r0, [pc, #156]	; (8003088 <MX_TIM8_Init+0x118>)
 8002fec:	f005 fe44 	bl	8008c78 <HAL_TIMEx_MasterConfigSynchronization>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002ff6:	f000 facc 	bl	8003592 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ffa:	2360      	movs	r3, #96	; 0x60
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003002:	2300      	movs	r3, #0
 8003004:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003006:	2300      	movs	r3, #0
 8003008:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800300a:	2300      	movs	r3, #0
 800300c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800300e:	2300      	movs	r3, #0
 8003010:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003012:	2300      	movs	r3, #0
 8003014:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800301a:	2208      	movs	r2, #8
 800301c:	4619      	mov	r1, r3
 800301e:	481a      	ldr	r0, [pc, #104]	; (8003088 <MX_TIM8_Init+0x118>)
 8003020:	f005 f916 	bl	8008250 <HAL_TIM_PWM_ConfigChannel>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800302a:	f000 fab2 	bl	8003592 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800302e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003032:	220c      	movs	r2, #12
 8003034:	4619      	mov	r1, r3
 8003036:	4814      	ldr	r0, [pc, #80]	; (8003088 <MX_TIM8_Init+0x118>)
 8003038:	f005 f90a 	bl	8008250 <HAL_TIM_PWM_ConfigChannel>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8003042:	f000 faa6 	bl	8003592 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003046:	2300      	movs	r3, #0
 8003048:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800304a:	2300      	movs	r3, #0
 800304c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003052:	2300      	movs	r3, #0
 8003054:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800305a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800305e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003060:	2300      	movs	r3, #0
 8003062:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003064:	1d3b      	adds	r3, r7, #4
 8003066:	4619      	mov	r1, r3
 8003068:	4807      	ldr	r0, [pc, #28]	; (8003088 <MX_TIM8_Init+0x118>)
 800306a:	f005 fe81 	bl	8008d70 <HAL_TIMEx_ConfigBreakDeadTime>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8003074:	f000 fa8d 	bl	8003592 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003078:	4803      	ldr	r0, [pc, #12]	; (8003088 <MX_TIM8_Init+0x118>)
 800307a:	f000 fc17 	bl	80038ac <HAL_TIM_MspPostInit>

}
 800307e:	bf00      	nop
 8003080:	3748      	adds	r7, #72	; 0x48
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20001ac4 	.word	0x20001ac4
 800308c:	40010400 	.word	0x40010400

08003090 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003094:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <MX_TIM13_Init+0x40>)
 8003096:	4a0f      	ldr	r2, [pc, #60]	; (80030d4 <MX_TIM13_Init+0x44>)
 8003098:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8400-1;
 800309a:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <MX_TIM13_Init+0x40>)
 800309c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80030a0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030a2:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <MX_TIM13_Init+0x40>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 50000;
 80030a8:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <MX_TIM13_Init+0x40>)
 80030aa:	f24c 3250 	movw	r2, #50000	; 0xc350
 80030ae:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030b0:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <MX_TIM13_Init+0x40>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030b6:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <MX_TIM13_Init+0x40>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80030bc:	4804      	ldr	r0, [pc, #16]	; (80030d0 <MX_TIM13_Init+0x40>)
 80030be:	f004 fd49 	bl	8007b54 <HAL_TIM_Base_Init>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 80030c8:	f000 fa63 	bl	8003592 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80030cc:	bf00      	nop
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	20001b0c 	.word	0x20001b0c
 80030d4:	40001c00 	.word	0x40001c00

080030d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80030dc:	4b11      	ldr	r3, [pc, #68]	; (8003124 <MX_USART3_UART_Init+0x4c>)
 80030de:	4a12      	ldr	r2, [pc, #72]	; (8003128 <MX_USART3_UART_Init+0x50>)
 80030e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80030e2:	4b10      	ldr	r3, [pc, #64]	; (8003124 <MX_USART3_UART_Init+0x4c>)
 80030e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80030ea:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <MX_USART3_UART_Init+0x4c>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80030f0:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <MX_USART3_UART_Init+0x4c>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80030f6:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <MX_USART3_UART_Init+0x4c>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80030fc:	4b09      	ldr	r3, [pc, #36]	; (8003124 <MX_USART3_UART_Init+0x4c>)
 80030fe:	220c      	movs	r2, #12
 8003100:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003102:	4b08      	ldr	r3, [pc, #32]	; (8003124 <MX_USART3_UART_Init+0x4c>)
 8003104:	2200      	movs	r2, #0
 8003106:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003108:	4b06      	ldr	r3, [pc, #24]	; (8003124 <MX_USART3_UART_Init+0x4c>)
 800310a:	2200      	movs	r2, #0
 800310c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800310e:	4805      	ldr	r0, [pc, #20]	; (8003124 <MX_USART3_UART_Init+0x4c>)
 8003110:	f005 fe94 	bl	8008e3c <HAL_UART_Init>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800311a:	f000 fa3a 	bl	8003592 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800311e:	bf00      	nop
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20001c14 	.word	0x20001c14
 8003128:	40004800 	.word	0x40004800

0800312c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	607b      	str	r3, [r7, #4]
 8003136:	4b10      	ldr	r3, [pc, #64]	; (8003178 <MX_DMA_Init+0x4c>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	4a0f      	ldr	r2, [pc, #60]	; (8003178 <MX_DMA_Init+0x4c>)
 800313c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003140:	6313      	str	r3, [r2, #48]	; 0x30
 8003142:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <MX_DMA_Init+0x4c>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800314a:	607b      	str	r3, [r7, #4]
 800314c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800314e:	2200      	movs	r2, #0
 8003150:	2100      	movs	r1, #0
 8003152:	203c      	movs	r0, #60	; 0x3c
 8003154:	f001 fb5d 	bl	8004812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8003158:	203c      	movs	r0, #60	; 0x3c
 800315a:	f001 fb76 	bl	800484a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800315e:	2200      	movs	r2, #0
 8003160:	2100      	movs	r1, #0
 8003162:	2046      	movs	r0, #70	; 0x46
 8003164:	f001 fb55 	bl	8004812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003168:	2046      	movs	r0, #70	; 0x46
 800316a:	f001 fb6e 	bl	800484a <HAL_NVIC_EnableIRQ>

}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40023800 	.word	0x40023800

0800317c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08c      	sub	sp, #48	; 0x30
 8003180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003182:	f107 031c 	add.w	r3, r7, #28
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	605a      	str	r2, [r3, #4]
 800318c:	609a      	str	r2, [r3, #8]
 800318e:	60da      	str	r2, [r3, #12]
 8003190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	61bb      	str	r3, [r7, #24]
 8003196:	4ba3      	ldr	r3, [pc, #652]	; (8003424 <MX_GPIO_Init+0x2a8>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	4aa2      	ldr	r2, [pc, #648]	; (8003424 <MX_GPIO_Init+0x2a8>)
 800319c:	f043 0310 	orr.w	r3, r3, #16
 80031a0:	6313      	str	r3, [r2, #48]	; 0x30
 80031a2:	4ba0      	ldr	r3, [pc, #640]	; (8003424 <MX_GPIO_Init+0x2a8>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	61bb      	str	r3, [r7, #24]
 80031ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	4b9c      	ldr	r3, [pc, #624]	; (8003424 <MX_GPIO_Init+0x2a8>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	4a9b      	ldr	r2, [pc, #620]	; (8003424 <MX_GPIO_Init+0x2a8>)
 80031b8:	f043 0304 	orr.w	r3, r3, #4
 80031bc:	6313      	str	r3, [r2, #48]	; 0x30
 80031be:	4b99      	ldr	r3, [pc, #612]	; (8003424 <MX_GPIO_Init+0x2a8>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	4b95      	ldr	r3, [pc, #596]	; (8003424 <MX_GPIO_Init+0x2a8>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	4a94      	ldr	r2, [pc, #592]	; (8003424 <MX_GPIO_Init+0x2a8>)
 80031d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031d8:	6313      	str	r3, [r2, #48]	; 0x30
 80031da:	4b92      	ldr	r3, [pc, #584]	; (8003424 <MX_GPIO_Init+0x2a8>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	4b8e      	ldr	r3, [pc, #568]	; (8003424 <MX_GPIO_Init+0x2a8>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	4a8d      	ldr	r2, [pc, #564]	; (8003424 <MX_GPIO_Init+0x2a8>)
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	6313      	str	r3, [r2, #48]	; 0x30
 80031f6:	4b8b      	ldr	r3, [pc, #556]	; (8003424 <MX_GPIO_Init+0x2a8>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	4b87      	ldr	r3, [pc, #540]	; (8003424 <MX_GPIO_Init+0x2a8>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	4a86      	ldr	r2, [pc, #536]	; (8003424 <MX_GPIO_Init+0x2a8>)
 800320c:	f043 0302 	orr.w	r3, r3, #2
 8003210:	6313      	str	r3, [r2, #48]	; 0x30
 8003212:	4b84      	ldr	r3, [pc, #528]	; (8003424 <MX_GPIO_Init+0x2a8>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	60bb      	str	r3, [r7, #8]
 800321c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800321e:	2300      	movs	r3, #0
 8003220:	607b      	str	r3, [r7, #4]
 8003222:	4b80      	ldr	r3, [pc, #512]	; (8003424 <MX_GPIO_Init+0x2a8>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	4a7f      	ldr	r2, [pc, #508]	; (8003424 <MX_GPIO_Init+0x2a8>)
 8003228:	f043 0308 	orr.w	r3, r3, #8
 800322c:	6313      	str	r3, [r2, #48]	; 0x30
 800322e:	4b7d      	ldr	r3, [pc, #500]	; (8003424 <MX_GPIO_Init+0x2a8>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	607b      	str	r3, [r7, #4]
 8003238:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TEST_OUTPUT_1_Pin|TEST_OUTPUT_2_Pin, GPIO_PIN_RESET);
 800323a:	2200      	movs	r2, #0
 800323c:	210c      	movs	r1, #12
 800323e:	487a      	ldr	r0, [pc, #488]	; (8003428 <MX_GPIO_Init+0x2ac>)
 8003240:	f002 f8bc 	bl	80053bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003244:	2201      	movs	r2, #1
 8003246:	2101      	movs	r1, #1
 8003248:	4878      	ldr	r0, [pc, #480]	; (800342c <MX_GPIO_Init+0x2b0>)
 800324a:	f002 f8b7 	bl	80053bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_RESET);
 800324e:	2200      	movs	r2, #0
 8003250:	2108      	movs	r1, #8
 8003252:	4877      	ldr	r0, [pc, #476]	; (8003430 <MX_GPIO_Init+0x2b4>)
 8003254:	f002 f8b2 	bl	80053bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TEST_OUT_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8003258:	2200      	movs	r2, #0
 800325a:	f64f 0110 	movw	r1, #63504	; 0xf810
 800325e:	4875      	ldr	r0, [pc, #468]	; (8003434 <MX_GPIO_Init+0x2b8>)
 8003260:	f002 f8ac 	bl	80053bc <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : TEST_OUTPUT_1_Pin */
  GPIO_InitStruct.Pin = TEST_OUTPUT_1_Pin;
 8003264:	2304      	movs	r3, #4
 8003266:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003268:	2301      	movs	r3, #1
 800326a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800326c:	2302      	movs	r3, #2
 800326e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003270:	2303      	movs	r3, #3
 8003272:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUTPUT_1_GPIO_Port, &GPIO_InitStruct);
 8003274:	f107 031c 	add.w	r3, r7, #28
 8003278:	4619      	mov	r1, r3
 800327a:	486b      	ldr	r0, [pc, #428]	; (8003428 <MX_GPIO_Init+0x2ac>)
 800327c:	f001 ff02 	bl	8005084 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUTPUT_2_Pin */
  GPIO_InitStruct.Pin = TEST_OUTPUT_2_Pin;
 8003280:	2308      	movs	r3, #8
 8003282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003284:	2301      	movs	r3, #1
 8003286:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003288:	2300      	movs	r3, #0
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328c:	2300      	movs	r3, #0
 800328e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUTPUT_2_GPIO_Port, &GPIO_InitStruct);
 8003290:	f107 031c 	add.w	r3, r7, #28
 8003294:	4619      	mov	r1, r3
 8003296:	4864      	ldr	r0, [pc, #400]	; (8003428 <MX_GPIO_Init+0x2ac>)
 8003298:	f001 fef4 	bl	8005084 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800329c:	2301      	movs	r3, #1
 800329e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032a0:	2301      	movs	r3, #1
 80032a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a8:	2300      	movs	r3, #0
 80032aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80032ac:	f107 031c 	add.w	r3, r7, #28
 80032b0:	4619      	mov	r1, r3
 80032b2:	485e      	ldr	r0, [pc, #376]	; (800342c <MX_GPIO_Init+0x2b0>)
 80032b4:	f001 fee6 	bl	8005084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80032b8:	2308      	movs	r3, #8
 80032ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032bc:	2302      	movs	r3, #2
 80032be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c4:	2300      	movs	r3, #0
 80032c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032c8:	2305      	movs	r3, #5
 80032ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80032cc:	f107 031c 	add.w	r3, r7, #28
 80032d0:	4619      	mov	r1, r3
 80032d2:	4856      	ldr	r0, [pc, #344]	; (800342c <MX_GPIO_Init+0x2b0>)
 80032d4:	f001 fed6 	bl	8005084 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80032d8:	2301      	movs	r3, #1
 80032da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80032dc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80032e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80032e6:	f107 031c 	add.w	r3, r7, #28
 80032ea:	4619      	mov	r1, r3
 80032ec:	4850      	ldr	r0, [pc, #320]	; (8003430 <MX_GPIO_Init+0x2b4>)
 80032ee:	f001 fec9 	bl	8005084 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_SD_Pin */
  GPIO_InitStruct.Pin = CS_SD_Pin;
 80032f2:	2308      	movs	r3, #8
 80032f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032f6:	2301      	movs	r3, #1
 80032f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032fe:	2302      	movs	r3, #2
 8003300:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_SD_GPIO_Port, &GPIO_InitStruct);
 8003302:	f107 031c 	add.w	r3, r7, #28
 8003306:	4619      	mov	r1, r3
 8003308:	4849      	ldr	r0, [pc, #292]	; (8003430 <MX_GPIO_Init+0x2b4>)
 800330a:	f001 febb 	bl	8005084 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800330e:	2310      	movs	r3, #16
 8003310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003312:	2302      	movs	r3, #2
 8003314:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003316:	2300      	movs	r3, #0
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331a:	2300      	movs	r3, #0
 800331c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800331e:	2306      	movs	r3, #6
 8003320:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003322:	f107 031c 	add.w	r3, r7, #28
 8003326:	4619      	mov	r1, r3
 8003328:	4841      	ldr	r0, [pc, #260]	; (8003430 <MX_GPIO_Init+0x2b4>)
 800332a:	f001 feab 	bl	8005084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800332e:	2304      	movs	r3, #4
 8003330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003332:	2300      	movs	r3, #0
 8003334:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003336:	2300      	movs	r3, #0
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800333a:	f107 031c 	add.w	r3, r7, #28
 800333e:	4619      	mov	r1, r3
 8003340:	483d      	ldr	r0, [pc, #244]	; (8003438 <MX_GPIO_Init+0x2bc>)
 8003342:	f001 fe9f 	bl	8005084 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8003346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800334a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334c:	2302      	movs	r3, #2
 800334e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	2300      	movs	r3, #0
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003354:	2300      	movs	r3, #0
 8003356:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003358:	2305      	movs	r3, #5
 800335a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800335c:	f107 031c 	add.w	r3, r7, #28
 8003360:	4619      	mov	r1, r3
 8003362:	4835      	ldr	r0, [pc, #212]	; (8003438 <MX_GPIO_Init+0x2bc>)
 8003364:	f001 fe8e 	bl	8005084 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUT_Pin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 8003368:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800336c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800336e:	2301      	movs	r3, #1
 8003370:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003372:	2301      	movs	r3, #1
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003376:	2303      	movs	r3, #3
 8003378:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 800337a:	f107 031c 	add.w	r3, r7, #28
 800337e:	4619      	mov	r1, r3
 8003380:	482c      	ldr	r0, [pc, #176]	; (8003434 <MX_GPIO_Init+0x2b8>)
 8003382:	f001 fe7f 	bl	8005084 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003386:	f24f 0310 	movw	r3, #61456	; 0xf010
 800338a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800338c:	2301      	movs	r3, #1
 800338e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003390:	2300      	movs	r3, #0
 8003392:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003394:	2300      	movs	r3, #0
 8003396:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003398:	f107 031c 	add.w	r3, r7, #28
 800339c:	4619      	mov	r1, r3
 800339e:	4825      	ldr	r0, [pc, #148]	; (8003434 <MX_GPIO_Init+0x2b8>)
 80033a0:	f001 fe70 	bl	8005084 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80033a4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80033a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033aa:	2302      	movs	r3, #2
 80033ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ae:	2300      	movs	r3, #0
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b2:	2300      	movs	r3, #0
 80033b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80033b6:	2306      	movs	r3, #6
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033ba:	f107 031c 	add.w	r3, r7, #28
 80033be:	4619      	mov	r1, r3
 80033c0:	481a      	ldr	r0, [pc, #104]	; (800342c <MX_GPIO_Init+0x2b0>)
 80033c2:	f001 fe5f 	bl	8005084 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80033c6:	2320      	movs	r3, #32
 80033c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033ca:	2300      	movs	r3, #0
 80033cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80033d2:	f107 031c 	add.w	r3, r7, #28
 80033d6:	4619      	mov	r1, r3
 80033d8:	4816      	ldr	r0, [pc, #88]	; (8003434 <MX_GPIO_Init+0x2b8>)
 80033da:	f001 fe53 	bl	8005084 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80033de:	f44f 7310 	mov.w	r3, #576	; 0x240
 80033e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033e4:	2312      	movs	r3, #18
 80033e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033e8:	2301      	movs	r3, #1
 80033ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ec:	2300      	movs	r3, #0
 80033ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033f0:	2304      	movs	r3, #4
 80033f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033f4:	f107 031c 	add.w	r3, r7, #28
 80033f8:	4619      	mov	r1, r3
 80033fa:	480f      	ldr	r0, [pc, #60]	; (8003438 <MX_GPIO_Init+0x2bc>)
 80033fc:	f001 fe42 	bl	8005084 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003400:	2302      	movs	r3, #2
 8003402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003404:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003408:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340a:	2300      	movs	r3, #0
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800340e:	f107 031c 	add.w	r3, r7, #28
 8003412:	4619      	mov	r1, r3
 8003414:	4804      	ldr	r0, [pc, #16]	; (8003428 <MX_GPIO_Init+0x2ac>)
 8003416:	f001 fe35 	bl	8005084 <HAL_GPIO_Init>

}
 800341a:	bf00      	nop
 800341c:	3730      	adds	r7, #48	; 0x30
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40023800 	.word	0x40023800
 8003428:	40021000 	.word	0x40021000
 800342c:	40020800 	.word	0x40020800
 8003430:	40020000 	.word	0x40020000
 8003434:	40020c00 	.word	0x40020c00
 8003438:	40020400 	.word	0x40020400

0800343c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// ------------------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
	if(htim == &htim13)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a07      	ldr	r2, [pc, #28]	; (8003464 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d106      	bne.n	800345a <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		HAL_GPIO_TogglePin(GPIOE, TEST_OUTPUT_2_Pin);
 800344c:	2108      	movs	r1, #8
 800344e:	4806      	ldr	r0, [pc, #24]	; (8003468 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003450:	f001 ffcd 	bl	80053ee <HAL_GPIO_TogglePin>
		interrupt_flag = true;
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003456:	2201      	movs	r2, #1
 8003458:	701a      	strb	r2, [r3, #0]
		//HAL_TIM_Base_Stop_IT(&htim13);
	}
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20001b0c 	.word	0x20001b0c
 8003468:	40021000 	.word	0x40021000
 800346c:	200015d7 	.word	0x200015d7

08003470 <HAL_UART_RxCpltCallback>:
// ------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART3)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a15      	ldr	r2, [pc, #84]	; (80034d4 <HAL_UART_RxCpltCallback+0x64>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d123      	bne.n	80034ca <HAL_UART_RxCpltCallback+0x5a>
	{
		if(uart_RX_data != 13)
 8003482:	4b15      	ldr	r3, [pc, #84]	; (80034d8 <HAL_UART_RxCpltCallback+0x68>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b0d      	cmp	r3, #13
 8003488:	d00d      	beq.n	80034a6 <HAL_UART_RxCpltCallback+0x36>
		{
			rx_buf_command[count_chars] = uart_RX_data;
 800348a:	4b14      	ldr	r3, [pc, #80]	; (80034dc <HAL_UART_RxCpltCallback+0x6c>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <HAL_UART_RxCpltCallback+0x68>)
 8003492:	7819      	ldrb	r1, [r3, #0]
 8003494:	4b12      	ldr	r3, [pc, #72]	; (80034e0 <HAL_UART_RxCpltCallback+0x70>)
 8003496:	5499      	strb	r1, [r3, r2]
			count_chars++;
 8003498:	4b10      	ldr	r3, [pc, #64]	; (80034dc <HAL_UART_RxCpltCallback+0x6c>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	3301      	adds	r3, #1
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	4b0e      	ldr	r3, [pc, #56]	; (80034dc <HAL_UART_RxCpltCallback+0x6c>)
 80034a2:	701a      	strb	r2, [r3, #0]
 80034a4:	e005      	b.n	80034b2 <HAL_UART_RxCpltCallback+0x42>
		}
		else
		{
			flag_received_command = true;
 80034a6:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <HAL_UART_RxCpltCallback+0x74>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	701a      	strb	r2, [r3, #0]
			count_chars= 0;
 80034ac:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <HAL_UART_RxCpltCallback+0x6c>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	701a      	strb	r2, [r3, #0]
		}


		if(uart_RX_data == 'z')						// If was sent "STOP animation" command. 'z' key
 80034b2:	4b09      	ldr	r3, [pc, #36]	; (80034d8 <HAL_UART_RxCpltCallback+0x68>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b7a      	cmp	r3, #122	; 0x7a
 80034b8:	d102      	bne.n	80034c0 <HAL_UART_RxCpltCallback+0x50>
		{
			interrupt_animation_flag = true;
 80034ba:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <HAL_UART_RxCpltCallback+0x78>)
 80034bc:	2201      	movs	r2, #1
 80034be:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, &uart_RX_data, 1);
 80034c0:	2201      	movs	r2, #1
 80034c2:	4905      	ldr	r1, [pc, #20]	; (80034d8 <HAL_UART_RxCpltCallback+0x68>)
 80034c4:	4809      	ldr	r0, [pc, #36]	; (80034ec <HAL_UART_RxCpltCallback+0x7c>)
 80034c6:	f005 fd98 	bl	8008ffa <HAL_UART_Receive_IT>
		//HAL_UART_Transmit_IT(&huart3, &uart_RX_data, 1);
	}
}
 80034ca:	bf00      	nop
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40004800 	.word	0x40004800
 80034d8:	200015c8 	.word	0x200015c8
 80034dc:	200015d6 	.word	0x200015d6
 80034e0:	200015cc 	.word	0x200015cc
 80034e4:	200015c9 	.word	0x200015c9
 80034e8:	200015ca 	.word	0x200015ca
 80034ec:	20001c14 	.word	0x20001c14

080034f0 <all_leds_animantion_ok_state>:
// ------------------------------------------------------------------------------------
void all_leds_animantion_ok_state(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
	turn_all_leds_from_centr(10, 0, 0, 150);
 80034f4:	2396      	movs	r3, #150	; 0x96
 80034f6:	2200      	movs	r2, #0
 80034f8:	2100      	movs	r1, #0
 80034fa:	200a      	movs	r0, #10
 80034fc:	f7ff f814 	bl	8002528 <turn_all_leds_from_centr>
	test_from_midle_to_corner();
 8003500:	f7fd fc5e 	bl	8000dc0 <test_from_midle_to_corner>

	HAL_Delay(500);
 8003504:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003508:	f001 f884 	bl	8004614 <HAL_Delay>

	turn_all_leds_from_centr(20, 0, 0, 0);
 800350c:	2300      	movs	r3, #0
 800350e:	2200      	movs	r2, #0
 8003510:	2100      	movs	r1, #0
 8003512:	2014      	movs	r0, #20
 8003514:	f7ff f808 	bl	8002528 <turn_all_leds_from_centr>
	stop_light_all_turn_off();
 8003518:	f7fd fc4a 	bl	8000db0 <stop_light_all_turn_off>
}
 800351c:	bf00      	nop
 800351e:	bd80      	pop	{r7, pc}

08003520 <all_leds_animantion_error_state>:
// -----------------------------------------------------------------------------
void all_leds_animantion_error_state(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af02      	add	r7, sp, #8
	turn_all_leds_from_centr(7, 150, 0, 0);
 8003526:	2300      	movs	r3, #0
 8003528:	2200      	movs	r2, #0
 800352a:	2196      	movs	r1, #150	; 0x96
 800352c:	2007      	movs	r0, #7
 800352e:	f7fe fffb 	bl	8002528 <turn_all_leds_from_centr>
	test_from_midle_to_corner();
 8003532:	f7fd fc45 	bl	8000dc0 <test_from_midle_to_corner>

	for(uint8_t i = 0; i < 85; i ++)
 8003536:	2300      	movs	r3, #0
 8003538:	71fb      	strb	r3, [r7, #7]
 800353a:	e021      	b.n	8003580 <all_leds_animantion_error_state+0x60>
	{
		set_left_one_rgbw_led(i, 0, 0, 0, 0);
 800353c:	79f8      	ldrb	r0, [r7, #7]
 800353e:	2300      	movs	r3, #0
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	2300      	movs	r3, #0
 8003544:	2200      	movs	r2, #0
 8003546:	2100      	movs	r1, #0
 8003548:	f7ff f83f 	bl	80025ca <set_left_one_rgbw_led>
		set_right_one_rgbw_led(i, 0, 0, 0, 0);
 800354c:	79f8      	ldrb	r0, [r7, #7]
 800354e:	2300      	movs	r3, #0
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	2300      	movs	r3, #0
 8003554:	2200      	movs	r2, #0
 8003556:	2100      	movs	r1, #0
 8003558:	f7ff f858 	bl	800260c <set_right_one_rgbw_led>
		while (!ARGB_Show_left());  			// Update
 800355c:	bf00      	nop
 800355e:	f7fd ff6d 	bl	800143c <ARGB_Show_left>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0fa      	beq.n	800355e <all_leds_animantion_error_state+0x3e>
		while (!ARGB_Show_right());  			// Update
 8003568:	bf00      	nop
 800356a:	f7fe f933 	bl	80017d4 <ARGB_Show_right>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0fa      	beq.n	800356a <all_leds_animantion_error_state+0x4a>
		HAL_Delay(3);
 8003574:	2003      	movs	r0, #3
 8003576:	f001 f84d 	bl	8004614 <HAL_Delay>
	for(uint8_t i = 0; i < 85; i ++)
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	3301      	adds	r3, #1
 800357e:	71fb      	strb	r3, [r7, #7]
 8003580:	79fb      	ldrb	r3, [r7, #7]
 8003582:	2b54      	cmp	r3, #84	; 0x54
 8003584:	d9da      	bls.n	800353c <all_leds_animantion_error_state+0x1c>
	}

	stop_light_all_turn_off();
 8003586:	f7fd fc13 	bl	8000db0 <stop_light_all_turn_off>
}
 800358a:	bf00      	nop
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003592:	b480      	push	{r7}
 8003594:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003596:	b672      	cpsid	i
}
 8003598:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800359a:	e7fe      	b.n	800359a <Error_Handler+0x8>

0800359c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	607b      	str	r3, [r7, #4]
 80035a6:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <HAL_MspInit+0x4c>)
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	4a0f      	ldr	r2, [pc, #60]	; (80035e8 <HAL_MspInit+0x4c>)
 80035ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035b0:	6453      	str	r3, [r2, #68]	; 0x44
 80035b2:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <HAL_MspInit+0x4c>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ba:	607b      	str	r3, [r7, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <HAL_MspInit+0x4c>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	4a08      	ldr	r2, [pc, #32]	; (80035e8 <HAL_MspInit+0x4c>)
 80035c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035cc:	6413      	str	r3, [r2, #64]	; 0x40
 80035ce:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <HAL_MspInit+0x4c>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d6:	603b      	str	r3, [r7, #0]
 80035d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80035da:	2007      	movs	r0, #7
 80035dc:	f001 f90e 	bl	80047fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035e0:	bf00      	nop
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40023800 	.word	0x40023800

080035ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08a      	sub	sp, #40	; 0x28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f4:	f107 0314 	add.w	r3, r7, #20
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	605a      	str	r2, [r3, #4]
 80035fe:	609a      	str	r2, [r3, #8]
 8003600:	60da      	str	r2, [r3, #12]
 8003602:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a19      	ldr	r2, [pc, #100]	; (8003670 <HAL_SPI_MspInit+0x84>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d12b      	bne.n	8003666 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800360e:	2300      	movs	r3, #0
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	4b18      	ldr	r3, [pc, #96]	; (8003674 <HAL_SPI_MspInit+0x88>)
 8003614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003616:	4a17      	ldr	r2, [pc, #92]	; (8003674 <HAL_SPI_MspInit+0x88>)
 8003618:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800361c:	6453      	str	r3, [r2, #68]	; 0x44
 800361e:	4b15      	ldr	r3, [pc, #84]	; (8003674 <HAL_SPI_MspInit+0x88>)
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003622:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003626:	613b      	str	r3, [r7, #16]
 8003628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	4b11      	ldr	r3, [pc, #68]	; (8003674 <HAL_SPI_MspInit+0x88>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	4a10      	ldr	r2, [pc, #64]	; (8003674 <HAL_SPI_MspInit+0x88>)
 8003634:	f043 0301 	orr.w	r3, r3, #1
 8003638:	6313      	str	r3, [r2, #48]	; 0x30
 800363a:	4b0e      	ldr	r3, [pc, #56]	; (8003674 <HAL_SPI_MspInit+0x88>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003646:	23e0      	movs	r3, #224	; 0xe0
 8003648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800364a:	2302      	movs	r3, #2
 800364c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364e:	2300      	movs	r3, #0
 8003650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003652:	2303      	movs	r3, #3
 8003654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003656:	2305      	movs	r3, #5
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800365a:	f107 0314 	add.w	r3, r7, #20
 800365e:	4619      	mov	r1, r3
 8003660:	4805      	ldr	r0, [pc, #20]	; (8003678 <HAL_SPI_MspInit+0x8c>)
 8003662:	f001 fd0f 	bl	8005084 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003666:	bf00      	nop
 8003668:	3728      	adds	r7, #40	; 0x28
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40013000 	.word	0x40013000
 8003674:	40023800 	.word	0x40023800
 8003678:	40020000 	.word	0x40020000

0800367c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368c:	d116      	bne.n	80036bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	4b2e      	ldr	r3, [pc, #184]	; (800374c <HAL_TIM_Base_MspInit+0xd0>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	4a2d      	ldr	r2, [pc, #180]	; (800374c <HAL_TIM_Base_MspInit+0xd0>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	6413      	str	r3, [r2, #64]	; 0x40
 800369e:	4b2b      	ldr	r3, [pc, #172]	; (800374c <HAL_TIM_Base_MspInit+0xd0>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80036aa:	2200      	movs	r2, #0
 80036ac:	2100      	movs	r1, #0
 80036ae:	201c      	movs	r0, #28
 80036b0:	f001 f8af 	bl	8004812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80036b4:	201c      	movs	r0, #28
 80036b6:	f001 f8c8 	bl	800484a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80036ba:	e042      	b.n	8003742 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a23      	ldr	r2, [pc, #140]	; (8003750 <HAL_TIM_Base_MspInit+0xd4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d10e      	bne.n	80036e4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036c6:	2300      	movs	r3, #0
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	4b20      	ldr	r3, [pc, #128]	; (800374c <HAL_TIM_Base_MspInit+0xd0>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	4a1f      	ldr	r2, [pc, #124]	; (800374c <HAL_TIM_Base_MspInit+0xd0>)
 80036d0:	f043 0302 	orr.w	r3, r3, #2
 80036d4:	6413      	str	r3, [r2, #64]	; 0x40
 80036d6:	4b1d      	ldr	r3, [pc, #116]	; (800374c <HAL_TIM_Base_MspInit+0xd0>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	693b      	ldr	r3, [r7, #16]
}
 80036e2:	e02e      	b.n	8003742 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a1a      	ldr	r2, [pc, #104]	; (8003754 <HAL_TIM_Base_MspInit+0xd8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d10e      	bne.n	800370c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	4b16      	ldr	r3, [pc, #88]	; (800374c <HAL_TIM_Base_MspInit+0xd0>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	4a15      	ldr	r2, [pc, #84]	; (800374c <HAL_TIM_Base_MspInit+0xd0>)
 80036f8:	f043 0304 	orr.w	r3, r3, #4
 80036fc:	6413      	str	r3, [r2, #64]	; 0x40
 80036fe:	4b13      	ldr	r3, [pc, #76]	; (800374c <HAL_TIM_Base_MspInit+0xd0>)
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	68fb      	ldr	r3, [r7, #12]
}
 800370a:	e01a      	b.n	8003742 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM13)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a11      	ldr	r2, [pc, #68]	; (8003758 <HAL_TIM_Base_MspInit+0xdc>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d115      	bne.n	8003742 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003716:	2300      	movs	r3, #0
 8003718:	60bb      	str	r3, [r7, #8]
 800371a:	4b0c      	ldr	r3, [pc, #48]	; (800374c <HAL_TIM_Base_MspInit+0xd0>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	4a0b      	ldr	r2, [pc, #44]	; (800374c <HAL_TIM_Base_MspInit+0xd0>)
 8003720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003724:	6413      	str	r3, [r2, #64]	; 0x40
 8003726:	4b09      	ldr	r3, [pc, #36]	; (800374c <HAL_TIM_Base_MspInit+0xd0>)
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372e:	60bb      	str	r3, [r7, #8]
 8003730:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003732:	2200      	movs	r2, #0
 8003734:	2100      	movs	r1, #0
 8003736:	202c      	movs	r0, #44	; 0x2c
 8003738:	f001 f86b 	bl	8004812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800373c:	202c      	movs	r0, #44	; 0x2c
 800373e:	f001 f884 	bl	800484a <HAL_NVIC_EnableIRQ>
}
 8003742:	bf00      	nop
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40023800 	.word	0x40023800
 8003750:	40000400 	.word	0x40000400
 8003754:	40000800 	.word	0x40000800
 8003758:	40001c00 	.word	0x40001c00

0800375c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a4a      	ldr	r2, [pc, #296]	; (8003894 <HAL_TIM_PWM_MspInit+0x138>)
 800376a:	4293      	cmp	r3, r2
 800376c:	f040 808e 	bne.w	800388c <HAL_TIM_PWM_MspInit+0x130>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003770:	2300      	movs	r3, #0
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	4b48      	ldr	r3, [pc, #288]	; (8003898 <HAL_TIM_PWM_MspInit+0x13c>)
 8003776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003778:	4a47      	ldr	r2, [pc, #284]	; (8003898 <HAL_TIM_PWM_MspInit+0x13c>)
 800377a:	f043 0302 	orr.w	r3, r3, #2
 800377e:	6453      	str	r3, [r2, #68]	; 0x44
 8003780:	4b45      	ldr	r3, [pc, #276]	; (8003898 <HAL_TIM_PWM_MspInit+0x13c>)
 8003782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 DMA Init */
    /* TIM8_CH3 Init */
    hdma_tim8_ch3.Instance = DMA2_Stream4;
 800378c:	4b43      	ldr	r3, [pc, #268]	; (800389c <HAL_TIM_PWM_MspInit+0x140>)
 800378e:	4a44      	ldr	r2, [pc, #272]	; (80038a0 <HAL_TIM_PWM_MspInit+0x144>)
 8003790:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch3.Init.Channel = DMA_CHANNEL_7;
 8003792:	4b42      	ldr	r3, [pc, #264]	; (800389c <HAL_TIM_PWM_MspInit+0x140>)
 8003794:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003798:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800379a:	4b40      	ldr	r3, [pc, #256]	; (800389c <HAL_TIM_PWM_MspInit+0x140>)
 800379c:	2240      	movs	r2, #64	; 0x40
 800379e:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80037a0:	4b3e      	ldr	r3, [pc, #248]	; (800389c <HAL_TIM_PWM_MspInit+0x140>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80037a6:	4b3d      	ldr	r3, [pc, #244]	; (800389c <HAL_TIM_PWM_MspInit+0x140>)
 80037a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037ac:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80037ae:	4b3b      	ldr	r3, [pc, #236]	; (800389c <HAL_TIM_PWM_MspInit+0x140>)
 80037b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037b4:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80037b6:	4b39      	ldr	r3, [pc, #228]	; (800389c <HAL_TIM_PWM_MspInit+0x140>)
 80037b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037bc:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch3.Init.Mode = DMA_CIRCULAR;
 80037be:	4b37      	ldr	r3, [pc, #220]	; (800389c <HAL_TIM_PWM_MspInit+0x140>)
 80037c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037c4:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 80037c6:	4b35      	ldr	r3, [pc, #212]	; (800389c <HAL_TIM_PWM_MspInit+0x140>)
 80037c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037cc:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037ce:	4b33      	ldr	r3, [pc, #204]	; (800389c <HAL_TIM_PWM_MspInit+0x140>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch3) != HAL_OK)
 80037d4:	4831      	ldr	r0, [pc, #196]	; (800389c <HAL_TIM_PWM_MspInit+0x140>)
 80037d6:	f001 f853 	bl	8004880 <HAL_DMA_Init>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <HAL_TIM_PWM_MspInit+0x88>
    {
      Error_Handler();
 80037e0:	f7ff fed7 	bl	8003592 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a2d      	ldr	r2, [pc, #180]	; (800389c <HAL_TIM_PWM_MspInit+0x140>)
 80037e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80037ea:	4a2c      	ldr	r2, [pc, #176]	; (800389c <HAL_TIM_PWM_MspInit+0x140>)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM8_CH4_TRIG_COM Init */
    hdma_tim8_ch4_trig_com.Instance = DMA2_Stream7;
 80037f0:	4b2c      	ldr	r3, [pc, #176]	; (80038a4 <HAL_TIM_PWM_MspInit+0x148>)
 80037f2:	4a2d      	ldr	r2, [pc, #180]	; (80038a8 <HAL_TIM_PWM_MspInit+0x14c>)
 80037f4:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch4_trig_com.Init.Channel = DMA_CHANNEL_7;
 80037f6:	4b2b      	ldr	r3, [pc, #172]	; (80038a4 <HAL_TIM_PWM_MspInit+0x148>)
 80037f8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80037fc:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037fe:	4b29      	ldr	r3, [pc, #164]	; (80038a4 <HAL_TIM_PWM_MspInit+0x148>)
 8003800:	2240      	movs	r2, #64	; 0x40
 8003802:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8003804:	4b27      	ldr	r3, [pc, #156]	; (80038a4 <HAL_TIM_PWM_MspInit+0x148>)
 8003806:	2200      	movs	r2, #0
 8003808:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 800380a:	4b26      	ldr	r3, [pc, #152]	; (80038a4 <HAL_TIM_PWM_MspInit+0x148>)
 800380c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003810:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003812:	4b24      	ldr	r3, [pc, #144]	; (80038a4 <HAL_TIM_PWM_MspInit+0x148>)
 8003814:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003818:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800381a:	4b22      	ldr	r3, [pc, #136]	; (80038a4 <HAL_TIM_PWM_MspInit+0x148>)
 800381c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003820:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 8003822:	4b20      	ldr	r3, [pc, #128]	; (80038a4 <HAL_TIM_PWM_MspInit+0x148>)
 8003824:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003828:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 800382a:	4b1e      	ldr	r3, [pc, #120]	; (80038a4 <HAL_TIM_PWM_MspInit+0x148>)
 800382c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003830:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003832:	4b1c      	ldr	r3, [pc, #112]	; (80038a4 <HAL_TIM_PWM_MspInit+0x148>)
 8003834:	2200      	movs	r2, #0
 8003836:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch4_trig_com) != HAL_OK)
 8003838:	481a      	ldr	r0, [pc, #104]	; (80038a4 <HAL_TIM_PWM_MspInit+0x148>)
 800383a:	f001 f821 	bl	8004880 <HAL_DMA_Init>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <HAL_TIM_PWM_MspInit+0xec>
    {
      Error_Handler();
 8003844:	f7ff fea5 	bl	8003592 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim8_ch4_trig_com);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a16      	ldr	r2, [pc, #88]	; (80038a4 <HAL_TIM_PWM_MspInit+0x148>)
 800384c:	631a      	str	r2, [r3, #48]	; 0x30
 800384e:	4a15      	ldr	r2, [pc, #84]	; (80038a4 <HAL_TIM_PWM_MspInit+0x148>)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim8_ch4_trig_com);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a13      	ldr	r2, [pc, #76]	; (80038a4 <HAL_TIM_PWM_MspInit+0x148>)
 8003858:	639a      	str	r2, [r3, #56]	; 0x38
 800385a:	4a12      	ldr	r2, [pc, #72]	; (80038a4 <HAL_TIM_PWM_MspInit+0x148>)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim8_ch4_trig_com);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a10      	ldr	r2, [pc, #64]	; (80038a4 <HAL_TIM_PWM_MspInit+0x148>)
 8003864:	635a      	str	r2, [r3, #52]	; 0x34
 8003866:	4a0f      	ldr	r2, [pc, #60]	; (80038a4 <HAL_TIM_PWM_MspInit+0x148>)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800386c:	2200      	movs	r2, #0
 800386e:	2100      	movs	r1, #0
 8003870:	202c      	movs	r0, #44	; 0x2c
 8003872:	f000 ffce 	bl	8004812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003876:	202c      	movs	r0, #44	; 0x2c
 8003878:	f000 ffe7 	bl	800484a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800387c:	2200      	movs	r2, #0
 800387e:	2100      	movs	r1, #0
 8003880:	202d      	movs	r0, #45	; 0x2d
 8003882:	f000 ffc6 	bl	8004812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003886:	202d      	movs	r0, #45	; 0x2d
 8003888:	f000 ffdf 	bl	800484a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800388c:	bf00      	nop
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40010400 	.word	0x40010400
 8003898:	40023800 	.word	0x40023800
 800389c:	20001b54 	.word	0x20001b54
 80038a0:	40026470 	.word	0x40026470
 80038a4:	20001bb4 	.word	0x20001bb4
 80038a8:	400264b8 	.word	0x400264b8

080038ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08e      	sub	sp, #56	; 0x38
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	605a      	str	r2, [r3, #4]
 80038be:	609a      	str	r2, [r3, #8]
 80038c0:	60da      	str	r2, [r3, #12]
 80038c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038cc:	d13e      	bne.n	800394c <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ce:	2300      	movs	r3, #0
 80038d0:	623b      	str	r3, [r7, #32]
 80038d2:	4b66      	ldr	r3, [pc, #408]	; (8003a6c <HAL_TIM_MspPostInit+0x1c0>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	4a65      	ldr	r2, [pc, #404]	; (8003a6c <HAL_TIM_MspPostInit+0x1c0>)
 80038d8:	f043 0301 	orr.w	r3, r3, #1
 80038dc:	6313      	str	r3, [r2, #48]	; 0x30
 80038de:	4b63      	ldr	r3, [pc, #396]	; (8003a6c <HAL_TIM_MspPostInit+0x1c0>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	623b      	str	r3, [r7, #32]
 80038e8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ea:	2300      	movs	r3, #0
 80038ec:	61fb      	str	r3, [r7, #28]
 80038ee:	4b5f      	ldr	r3, [pc, #380]	; (8003a6c <HAL_TIM_MspPostInit+0x1c0>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	4a5e      	ldr	r2, [pc, #376]	; (8003a6c <HAL_TIM_MspPostInit+0x1c0>)
 80038f4:	f043 0302 	orr.w	r3, r3, #2
 80038f8:	6313      	str	r3, [r2, #48]	; 0x30
 80038fa:	4b5c      	ldr	r3, [pc, #368]	; (8003a6c <HAL_TIM_MspPostInit+0x1c0>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	61fb      	str	r3, [r7, #28]
 8003904:	69fb      	ldr	r3, [r7, #28]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15;
 8003906:	f248 0306 	movw	r3, #32774	; 0x8006
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390c:	2302      	movs	r3, #2
 800390e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003910:	2300      	movs	r3, #0
 8003912:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003914:	2300      	movs	r3, #0
 8003916:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003918:	2301      	movs	r3, #1
 800391a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800391c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003920:	4619      	mov	r1, r3
 8003922:	4853      	ldr	r0, [pc, #332]	; (8003a70 <HAL_TIM_MspPostInit+0x1c4>)
 8003924:	f001 fbae 	bl	8005084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003928:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800392e:	2302      	movs	r3, #2
 8003930:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003932:	2300      	movs	r3, #0
 8003934:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003936:	2300      	movs	r3, #0
 8003938:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800393a:	2301      	movs	r3, #1
 800393c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800393e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003942:	4619      	mov	r1, r3
 8003944:	484b      	ldr	r0, [pc, #300]	; (8003a74 <HAL_TIM_MspPostInit+0x1c8>)
 8003946:	f001 fb9d 	bl	8005084 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800394a:	e08a      	b.n	8003a62 <HAL_TIM_MspPostInit+0x1b6>
  else if(htim->Instance==TIM3)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a49      	ldr	r2, [pc, #292]	; (8003a78 <HAL_TIM_MspPostInit+0x1cc>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d13c      	bne.n	80039d0 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	61bb      	str	r3, [r7, #24]
 800395a:	4b44      	ldr	r3, [pc, #272]	; (8003a6c <HAL_TIM_MspPostInit+0x1c0>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	4a43      	ldr	r2, [pc, #268]	; (8003a6c <HAL_TIM_MspPostInit+0x1c0>)
 8003960:	f043 0302 	orr.w	r3, r3, #2
 8003964:	6313      	str	r3, [r2, #48]	; 0x30
 8003966:	4b41      	ldr	r3, [pc, #260]	; (8003a6c <HAL_TIM_MspPostInit+0x1c0>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	61bb      	str	r3, [r7, #24]
 8003970:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	4b3d      	ldr	r3, [pc, #244]	; (8003a6c <HAL_TIM_MspPostInit+0x1c0>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	4a3c      	ldr	r2, [pc, #240]	; (8003a6c <HAL_TIM_MspPostInit+0x1c0>)
 800397c:	f043 0304 	orr.w	r3, r3, #4
 8003980:	6313      	str	r3, [r2, #48]	; 0x30
 8003982:	4b3a      	ldr	r3, [pc, #232]	; (8003a6c <HAL_TIM_MspPostInit+0x1c0>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 800398e:	2323      	movs	r3, #35	; 0x23
 8003990:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003992:	2302      	movs	r3, #2
 8003994:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003996:	2300      	movs	r3, #0
 8003998:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399a:	2300      	movs	r3, #0
 800399c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800399e:	2302      	movs	r3, #2
 80039a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039a6:	4619      	mov	r1, r3
 80039a8:	4832      	ldr	r0, [pc, #200]	; (8003a74 <HAL_TIM_MspPostInit+0x1c8>)
 80039aa:	f001 fb6b 	bl	8005084 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80039ae:	2340      	movs	r3, #64	; 0x40
 80039b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b2:	2302      	movs	r3, #2
 80039b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ba:	2300      	movs	r3, #0
 80039bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80039be:	2302      	movs	r3, #2
 80039c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039c6:	4619      	mov	r1, r3
 80039c8:	482c      	ldr	r0, [pc, #176]	; (8003a7c <HAL_TIM_MspPostInit+0x1d0>)
 80039ca:	f001 fb5b 	bl	8005084 <HAL_GPIO_Init>
}
 80039ce:	e048      	b.n	8003a62 <HAL_TIM_MspPostInit+0x1b6>
  else if(htim->Instance==TIM4)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a2a      	ldr	r2, [pc, #168]	; (8003a80 <HAL_TIM_MspPostInit+0x1d4>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d11f      	bne.n	8003a1a <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039da:	2300      	movs	r3, #0
 80039dc:	613b      	str	r3, [r7, #16]
 80039de:	4b23      	ldr	r3, [pc, #140]	; (8003a6c <HAL_TIM_MspPostInit+0x1c0>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	4a22      	ldr	r2, [pc, #136]	; (8003a6c <HAL_TIM_MspPostInit+0x1c0>)
 80039e4:	f043 0302 	orr.w	r3, r3, #2
 80039e8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ea:	4b20      	ldr	r3, [pc, #128]	; (8003a6c <HAL_TIM_MspPostInit+0x1c0>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80039f6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fc:	2302      	movs	r3, #2
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a04:	2300      	movs	r3, #0
 8003a06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003a08:	2302      	movs	r3, #2
 8003a0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a10:	4619      	mov	r1, r3
 8003a12:	4818      	ldr	r0, [pc, #96]	; (8003a74 <HAL_TIM_MspPostInit+0x1c8>)
 8003a14:	f001 fb36 	bl	8005084 <HAL_GPIO_Init>
}
 8003a18:	e023      	b.n	8003a62 <HAL_TIM_MspPostInit+0x1b6>
  else if(htim->Instance==TIM8)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a19      	ldr	r2, [pc, #100]	; (8003a84 <HAL_TIM_MspPostInit+0x1d8>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d11e      	bne.n	8003a62 <HAL_TIM_MspPostInit+0x1b6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a24:	2300      	movs	r3, #0
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	4b10      	ldr	r3, [pc, #64]	; (8003a6c <HAL_TIM_MspPostInit+0x1c0>)
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2c:	4a0f      	ldr	r2, [pc, #60]	; (8003a6c <HAL_TIM_MspPostInit+0x1c0>)
 8003a2e:	f043 0304 	orr.w	r3, r3, #4
 8003a32:	6313      	str	r3, [r2, #48]	; 0x30
 8003a34:	4b0d      	ldr	r3, [pc, #52]	; (8003a6c <HAL_TIM_MspPostInit+0x1c0>)
 8003a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a40:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a46:	2302      	movs	r3, #2
 8003a48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003a52:	2303      	movs	r3, #3
 8003a54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4807      	ldr	r0, [pc, #28]	; (8003a7c <HAL_TIM_MspPostInit+0x1d0>)
 8003a5e:	f001 fb11 	bl	8005084 <HAL_GPIO_Init>
}
 8003a62:	bf00      	nop
 8003a64:	3738      	adds	r7, #56	; 0x38
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	40020000 	.word	0x40020000
 8003a74:	40020400 	.word	0x40020400
 8003a78:	40000400 	.word	0x40000400
 8003a7c:	40020800 	.word	0x40020800
 8003a80:	40000800 	.word	0x40000800
 8003a84:	40010400 	.word	0x40010400

08003a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08a      	sub	sp, #40	; 0x28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a90:	f107 0314 	add.w	r3, r7, #20
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	605a      	str	r2, [r3, #4]
 8003a9a:	609a      	str	r2, [r3, #8]
 8003a9c:	60da      	str	r2, [r3, #12]
 8003a9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a1d      	ldr	r2, [pc, #116]	; (8003b1c <HAL_UART_MspInit+0x94>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d134      	bne.n	8003b14 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003aaa:	2300      	movs	r3, #0
 8003aac:	613b      	str	r3, [r7, #16]
 8003aae:	4b1c      	ldr	r3, [pc, #112]	; (8003b20 <HAL_UART_MspInit+0x98>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	4a1b      	ldr	r2, [pc, #108]	; (8003b20 <HAL_UART_MspInit+0x98>)
 8003ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8003aba:	4b19      	ldr	r3, [pc, #100]	; (8003b20 <HAL_UART_MspInit+0x98>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	4b15      	ldr	r3, [pc, #84]	; (8003b20 <HAL_UART_MspInit+0x98>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	4a14      	ldr	r2, [pc, #80]	; (8003b20 <HAL_UART_MspInit+0x98>)
 8003ad0:	f043 0308 	orr.w	r3, r3, #8
 8003ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad6:	4b12      	ldr	r3, [pc, #72]	; (8003b20 <HAL_UART_MspInit+0x98>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003ae2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae8:	2302      	movs	r3, #2
 8003aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af0:	2303      	movs	r3, #3
 8003af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003af4:	2307      	movs	r3, #7
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003af8:	f107 0314 	add.w	r3, r7, #20
 8003afc:	4619      	mov	r1, r3
 8003afe:	4809      	ldr	r0, [pc, #36]	; (8003b24 <HAL_UART_MspInit+0x9c>)
 8003b00:	f001 fac0 	bl	8005084 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003b04:	2200      	movs	r2, #0
 8003b06:	2100      	movs	r1, #0
 8003b08:	2027      	movs	r0, #39	; 0x27
 8003b0a:	f000 fe82 	bl	8004812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003b0e:	2027      	movs	r0, #39	; 0x27
 8003b10:	f000 fe9b 	bl	800484a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003b14:	bf00      	nop
 8003b16:	3728      	adds	r7, #40	; 0x28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40004800 	.word	0x40004800
 8003b20:	40023800 	.word	0x40023800
 8003b24:	40020c00 	.word	0x40020c00

08003b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b2c:	e7fe      	b.n	8003b2c <NMI_Handler+0x4>

08003b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b32:	e7fe      	b.n	8003b32 <HardFault_Handler+0x4>

08003b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b38:	e7fe      	b.n	8003b38 <MemManage_Handler+0x4>

08003b3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b3e:	e7fe      	b.n	8003b3e <BusFault_Handler+0x4>

08003b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b44:	e7fe      	b.n	8003b44 <UsageFault_Handler+0x4>

08003b46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b46:	b480      	push	{r7}
 8003b48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b4a:	bf00      	nop
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b58:	bf00      	nop
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b62:	b480      	push	{r7}
 8003b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b66:	bf00      	nop
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b74:	f000 fd2e 	bl	80045d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b78:	bf00      	nop
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//HAL_GPIO_TogglePin(GPIOD,LD4_Pin);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003b80:	4802      	ldr	r0, [pc, #8]	; (8003b8c <TIM2_IRQHandler+0x10>)
 8003b82:	f004 fa5d 	bl	8008040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003b86:	bf00      	nop
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	200019ec 	.word	0x200019ec

08003b90 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003b94:	4802      	ldr	r0, [pc, #8]	; (8003ba0 <USART3_IRQHandler+0x10>)
 8003b96:	f005 fa61 	bl	800905c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003b9a:	bf00      	nop
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20001c14 	.word	0x20001c14

08003ba4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003ba8:	4803      	ldr	r0, [pc, #12]	; (8003bb8 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8003baa:	f004 fa49 	bl	8008040 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8003bae:	4803      	ldr	r0, [pc, #12]	; (8003bbc <TIM8_UP_TIM13_IRQHandler+0x18>)
 8003bb0:	f004 fa46 	bl	8008040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003bb4:	bf00      	nop
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	20001ac4 	.word	0x20001ac4
 8003bbc:	20001b0c 	.word	0x20001b0c

08003bc0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003bc4:	4802      	ldr	r0, [pc, #8]	; (8003bd0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003bc6:	f004 fa3b 	bl	8008040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003bca:	bf00      	nop
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20001ac4 	.word	0x20001ac4

08003bd4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch3);
 8003bd8:	4802      	ldr	r0, [pc, #8]	; (8003be4 <DMA2_Stream4_IRQHandler+0x10>)
 8003bda:	f000 ffe9 	bl	8004bb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20001b54 	.word	0x20001b54

08003be8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003bec:	4802      	ldr	r0, [pc, #8]	; (8003bf8 <OTG_FS_IRQHandler+0x10>)
 8003bee:	f001 fe83 	bl	80058f8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003bf2:	bf00      	nop
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	20003658 	.word	0x20003658

08003bfc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch4_trig_com);
 8003c00:	4802      	ldr	r0, [pc, #8]	; (8003c0c <DMA2_Stream7_IRQHandler+0x10>)
 8003c02:	f000 ffd5 	bl	8004bb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003c06:	bf00      	nop
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20001bb4 	.word	0x20001bb4

08003c10 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	e00a      	b.n	8003c38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c22:	f3af 8000 	nop.w
 8003c26:	4601      	mov	r1, r0
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	60ba      	str	r2, [r7, #8]
 8003c2e:	b2ca      	uxtb	r2, r1
 8003c30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	3301      	adds	r3, #1
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	dbf0      	blt.n	8003c22 <_read+0x12>
	}

return len;
 8003c40:	687b      	ldr	r3, [r7, #4]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b086      	sub	sp, #24
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	e009      	b.n	8003c70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	60ba      	str	r2, [r7, #8]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fe fd1b 	bl	80026a0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	dbf1      	blt.n	8003c5c <_write+0x12>
	}
	return len;
 8003c78:	687b      	ldr	r3, [r7, #4]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <_close>:

int _close(int file)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
	return -1;
 8003c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003caa:	605a      	str	r2, [r3, #4]
	return 0;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <_isatty>:

int _isatty(int file)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
	return 1;
 8003cc2:	2301      	movs	r3, #1
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
	return 0;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
	...

08003cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cf4:	4a14      	ldr	r2, [pc, #80]	; (8003d48 <_sbrk+0x5c>)
 8003cf6:	4b15      	ldr	r3, [pc, #84]	; (8003d4c <_sbrk+0x60>)
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d00:	4b13      	ldr	r3, [pc, #76]	; (8003d50 <_sbrk+0x64>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d102      	bne.n	8003d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d08:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <_sbrk+0x64>)
 8003d0a:	4a12      	ldr	r2, [pc, #72]	; (8003d54 <_sbrk+0x68>)
 8003d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d0e:	4b10      	ldr	r3, [pc, #64]	; (8003d50 <_sbrk+0x64>)
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4413      	add	r3, r2
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d207      	bcs.n	8003d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d1c:	f00d fa22 	bl	8011164 <__errno>
 8003d20:	4603      	mov	r3, r0
 8003d22:	220c      	movs	r2, #12
 8003d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d2a:	e009      	b.n	8003d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d2c:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <_sbrk+0x64>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d32:	4b07      	ldr	r3, [pc, #28]	; (8003d50 <_sbrk+0x64>)
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4413      	add	r3, r2
 8003d3a:	4a05      	ldr	r2, [pc, #20]	; (8003d50 <_sbrk+0x64>)
 8003d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	20020000 	.word	0x20020000
 8003d4c:	00000400 	.word	0x00000400
 8003d50:	20001c70 	.word	0x20001c70
 8003d54:	20003970 	.word	0x20003970

08003d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d5c:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <SystemInit+0x20>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	4a05      	ldr	r2, [pc, #20]	; (8003d78 <SystemInit+0x20>)
 8003d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d6c:	bf00      	nop
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	e000ed00 	.word	0xe000ed00

08003d7c <SD_SPI_Init>:
extern uint8_t frame_buffer[949];

/***	FUNCTIONS	***********************************************************************************************************************************************************************************/
/******************************************************************************************************************************************************************************************************/
uint8_t SD_SPI_Init(void)
{
 8003d7c:	b590      	push	{r4, r7, lr}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
	uint8_t vCmd;
	int16_t vCounter;
	//uint32_t vTmpPrc;
	sdinfo.type = 0;
 8003d82:	4b6b      	ldr	r3, [pc, #428]	; (8003f30 <SD_SPI_Init+0x1b4>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	701a      	strb	r2, [r3, #0]
	uint8_t aArray[4];

	HAL_Delay(250);														// SD voltage stability delay
 8003d88:	20fa      	movs	r0, #250	; 0xfa
 8003d8a:	f000 fc43 	bl	8004614 <HAL_Delay>

	/*vTmpPrc = hspi2.Init.BaudRatePrescaler;
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128; 		//156.25 kbbs*/

	HAL_SPI_Init(&hspi1);
 8003d8e:	4869      	ldr	r0, [pc, #420]	; (8003f34 <SD_SPI_Init+0x1b8>)
 8003d90:	f003 fbea 	bl	8007568 <HAL_SPI_Init>

	SD_DESELECT;
 8003d94:	2201      	movs	r2, #1
 8003d96:	2108      	movs	r1, #8
 8003d98:	4867      	ldr	r0, [pc, #412]	; (8003f38 <SD_SPI_Init+0x1bc>)
 8003d9a:	f001 fb0f 	bl	80053bc <HAL_GPIO_WritePin>
	for(vCounter = 0; vCounter<10; vCounter++) // 80 pulse bit. Set SPI as SD card interface
 8003d9e:	2300      	movs	r3, #0
 8003da0:	80bb      	strh	r3, [r7, #4]
 8003da2:	e007      	b.n	8003db4 <SD_SPI_Init+0x38>
		SPI_Release();
 8003da4:	f000 f902 	bl	8003fac <SPI_Release>
	for(vCounter = 0; vCounter<10; vCounter++) // 80 pulse bit. Set SPI as SD card interface
 8003da8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	3301      	adds	r3, #1
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	80bb      	strh	r3, [r7, #4]
 8003db4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003db8:	2b09      	cmp	r3, #9
 8003dba:	ddf3      	ble.n	8003da4 <SD_SPI_Init+0x28>

	/*hspi2.Init.BaudRatePrescaler = vTmpPrc;
	HAL_SPI_Init(&hspi2);*/

	SD_SELECT;
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	2108      	movs	r1, #8
 8003dc0:	485d      	ldr	r0, [pc, #372]	; (8003f38 <SD_SPI_Init+0x1bc>)
 8003dc2:	f001 fafb 	bl	80053bc <HAL_GPIO_WritePin>
	if (SD_SPI_Cmd(CMD0, 0) == 1) // Enter Idle state
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	2040      	movs	r0, #64	; 0x40
 8003dca:	f000 f91b 	bl	8004004 <SD_SPI_Cmd>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	f040 80a5 	bne.w	8003f20 <SD_SPI_Init+0x1a4>
		{
			SPI_Release();
 8003dd6:	f000 f8e9 	bl	8003fac <SPI_Release>
			if (SD_SPI_Cmd(CMD8, 0x1AA) == 1) // SDv2
 8003dda:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003dde:	2048      	movs	r0, #72	; 0x48
 8003de0:	f000 f910 	bl	8004004 <SD_SPI_Cmd>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d162      	bne.n	8003eb0 <SD_SPI_Init+0x134>
				{
					for (vCounter = 0; vCounter < 4; vCounter++)
 8003dea:	2300      	movs	r3, #0
 8003dec:	80bb      	strh	r3, [r7, #4]
 8003dee:	e010      	b.n	8003e12 <SD_SPI_Init+0x96>
						aArray[vCounter] = SPI_ReceiveByte();
 8003df0:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003df4:	f000 f8cd 	bl	8003f92 <SPI_ReceiveByte>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	f104 0308 	add.w	r3, r4, #8
 8003e00:	443b      	add	r3, r7
 8003e02:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (vCounter = 0; vCounter < 4; vCounter++)
 8003e06:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	80bb      	strh	r3, [r7, #4]
 8003e12:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e16:	2b03      	cmp	r3, #3
 8003e18:	ddea      	ble.n	8003df0 <SD_SPI_Init+0x74>
					if (aArray[2] == 0x01 && aArray[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8003e1a:	78bb      	ldrb	r3, [r7, #2]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	f040 8081 	bne.w	8003f24 <SD_SPI_Init+0x1a8>
 8003e22:	78fb      	ldrb	r3, [r7, #3]
 8003e24:	2baa      	cmp	r3, #170	; 0xaa
 8003e26:	d17d      	bne.n	8003f24 <SD_SPI_Init+0x1a8>
						{
							for (vCounter = 12000; (vCounter && SD_SPI_Cmd(ACMD41, 1UL << 30)); vCounter--)	{;}	 // Wait for leaving idle state (ACMD41 with HCS bit)
 8003e28:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8003e2c:	80bb      	strh	r3, [r7, #4]
 8003e2e:	e005      	b.n	8003e3c <SD_SPI_Init+0xc0>
 8003e30:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	3b01      	subs	r3, #1
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	80bb      	strh	r3, [r7, #4]
 8003e3c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d007      	beq.n	8003e54 <SD_SPI_Init+0xd8>
 8003e44:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003e48:	20e9      	movs	r0, #233	; 0xe9
 8003e4a:	f000 f8db 	bl	8004004 <SD_SPI_Cmd>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1ed      	bne.n	8003e30 <SD_SPI_Init+0xb4>
							if (vCounter && SD_SPI_Cmd(CMD58, 0) == 0)
 8003e54:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d063      	beq.n	8003f24 <SD_SPI_Init+0x1a8>
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	207a      	movs	r0, #122	; 0x7a
 8003e60:	f000 f8d0 	bl	8004004 <SD_SPI_Cmd>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d15c      	bne.n	8003f24 <SD_SPI_Init+0x1a8>
								{ // Check CCS bit in the OCR
									for (vCounter = 0; vCounter < 4; vCounter++) 	aArray[vCounter] = SPI_ReceiveByte();
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	80bb      	strh	r3, [r7, #4]
 8003e6e:	e010      	b.n	8003e92 <SD_SPI_Init+0x116>
 8003e70:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003e74:	f000 f88d 	bl	8003f92 <SPI_ReceiveByte>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f104 0308 	add.w	r3, r4, #8
 8003e80:	443b      	add	r3, r7
 8003e82:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003e86:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	80bb      	strh	r3, [r7, #4]
 8003e92:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	ddea      	ble.n	8003e70 <SD_SPI_Init+0xf4>
									sdinfo.type = (aArray[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 8003e9a:	783b      	ldrb	r3, [r7, #0]
 8003e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <SD_SPI_Init+0x12c>
 8003ea4:	220c      	movs	r2, #12
 8003ea6:	e000      	b.n	8003eaa <SD_SPI_Init+0x12e>
 8003ea8:	2204      	movs	r2, #4
 8003eaa:	4b21      	ldr	r3, [pc, #132]	; (8003f30 <SD_SPI_Init+0x1b4>)
 8003eac:	701a      	strb	r2, [r3, #0]
 8003eae:	e039      	b.n	8003f24 <SD_SPI_Init+0x1a8>
								}
						}
				}
			else		//SDv1 or MMCv3
				{
					if (SD_SPI_Cmd(ACMD41, 0) <= 1)
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	20e9      	movs	r0, #233	; 0xe9
 8003eb4:	f000 f8a6 	bl	8004004 <SD_SPI_Cmd>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d805      	bhi.n	8003eca <SD_SPI_Init+0x14e>
						{
							sdinfo.type = CT_SD1; vCmd = ACMD41; // SDv1
 8003ebe:	4b1c      	ldr	r3, [pc, #112]	; (8003f30 <SD_SPI_Init+0x1b4>)
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	701a      	strb	r2, [r3, #0]
 8003ec4:	23e9      	movs	r3, #233	; 0xe9
 8003ec6:	71fb      	strb	r3, [r7, #7]
 8003ec8:	e004      	b.n	8003ed4 <SD_SPI_Init+0x158>
						}
						else
						{
							sdinfo.type = CT_MMC; vCmd = CMD1; // MMCv3
 8003eca:	4b19      	ldr	r3, [pc, #100]	; (8003f30 <SD_SPI_Init+0x1b4>)
 8003ecc:	2201      	movs	r2, #1
 8003ece:	701a      	strb	r2, [r3, #0]
 8003ed0:	2341      	movs	r3, #65	; 0x41
 8003ed2:	71fb      	strb	r3, [r7, #7]
						}
					for (vCounter = 25000; vCounter && SD_SPI_Cmd(vCmd, 0); vCounter--) ; // Wait for leaving idle state
 8003ed4:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8003ed8:	80bb      	strh	r3, [r7, #4]
 8003eda:	e005      	b.n	8003ee8 <SD_SPI_Init+0x16c>
 8003edc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	80bb      	strh	r3, [r7, #4]
 8003ee8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d007      	beq.n	8003f00 <SD_SPI_Init+0x184>
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 f885 	bl	8004004 <SD_SPI_Cmd>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1ed      	bne.n	8003edc <SD_SPI_Init+0x160>
					if ( ! vCounter || SD_SPI_Cmd(CMD16, 512) != 0) // Set R/W block length to 512
 8003f00:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d007      	beq.n	8003f18 <SD_SPI_Init+0x19c>
 8003f08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f0c:	2050      	movs	r0, #80	; 0x50
 8003f0e:	f000 f879 	bl	8004004 <SD_SPI_Cmd>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <SD_SPI_Init+0x1a8>
					sdinfo.type = 0;
 8003f18:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <SD_SPI_Init+0x1b4>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	701a      	strb	r2, [r3, #0]
 8003f1e:	e001      	b.n	8003f24 <SD_SPI_Init+0x1a8>
				}
		}
	else
		{
			return 1;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e000      	b.n	8003f26 <SD_SPI_Init+0x1aa>
		}

	return 0;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd90      	pop	{r4, r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	20002cac 	.word	0x20002cac
 8003f34:	20001994 	.word	0x20001994
 8003f38:	40020000 	.word	0x40020000

08003f3c <SPIx_WriteRead>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SPIx_WriteRead(uint8_t byte)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af02      	add	r7, sp, #8
 8003f42:	4603      	mov	r3, r0
 8003f44:	71fb      	strb	r3, [r7, #7]
  uint8_t vReceivedByte = 0;
 8003f46:	2300      	movs	r3, #0
 8003f48:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &byte, (uint8_t*) &vReceivedByte, 1, 0x1000) != HAL_OK)
 8003f4a:	f107 020f 	add.w	r2, r7, #15
 8003f4e:	1df9      	adds	r1, r7, #7
 8003f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	2301      	movs	r3, #1
 8003f58:	4806      	ldr	r0, [pc, #24]	; (8003f74 <SPIx_WriteRead+0x38>)
 8003f5a:	f003 fb8e 	bl	800767a <HAL_SPI_TransmitReceive>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <SPIx_WriteRead+0x2c>
  {
  	SD_Error_Handler();
 8003f64:	f000 fa40 	bl	80043e8 <SD_Error_Handler>
  }
  return vReceivedByte;
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20001994 	.word	0x20001994

08003f78 <SPI_SendByte>:

/****************************************************************************************************************/
/****************************************************************************************************************/
void SPI_SendByte(uint8_t byte)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	4603      	mov	r3, r0
 8003f80:	71fb      	strb	r3, [r7, #7]
  SPIx_WriteRead(byte);
 8003f82:	79fb      	ldrb	r3, [r7, #7]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff ffd9 	bl	8003f3c <SPIx_WriteRead>
}
 8003f8a:	bf00      	nop
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <SPI_ReceiveByte>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SPI_ReceiveByte(void)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
  uint8_t byte = SPIx_WriteRead(0xFF);
 8003f98:	20ff      	movs	r0, #255	; 0xff
 8003f9a:	f7ff ffcf 	bl	8003f3c <SPIx_WriteRead>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	71fb      	strb	r3, [r7, #7]
  return byte;
 8003fa2:	79fb      	ldrb	r3, [r7, #7]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <SPI_Release>:

/****************************************************************************************************************/
/****************************************************************************************************************/
void SPI_Release(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  SPIx_WriteRead(0xFF);
 8003fb0:	20ff      	movs	r0, #255	; 0xff
 8003fb2:	f7ff ffc3 	bl	8003f3c <SPIx_WriteRead>
}
 8003fb6:	bf00      	nop
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <SD_SPI_WaitingForReadiness>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_WaitingForReadiness(void)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b082      	sub	sp, #8
 8003fbe:	af00      	add	r7, sp, #0
	uint8_t vResult;
	uint16_t vCount = 0;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	80fb      	strh	r3, [r7, #6]

	do {
		vResult = SPI_ReceiveByte();
 8003fc4:	f7ff ffe5 	bl	8003f92 <SPI_ReceiveByte>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	717b      	strb	r3, [r7, #5]
		vCount++;
 8003fcc:	88fb      	ldrh	r3, [r7, #6]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	80fb      	strh	r3, [r7, #6]
	} while ( (vResult != 0xFF) && (vCount < 0xFFFF) );
 8003fd2:	797b      	ldrb	r3, [r7, #5]
 8003fd4:	2bff      	cmp	r3, #255	; 0xff
 8003fd6:	d004      	beq.n	8003fe2 <SD_SPI_WaitingForReadiness+0x28>
 8003fd8:	88fb      	ldrh	r3, [r7, #6]
 8003fda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d1f0      	bne.n	8003fc4 <SD_SPI_WaitingForReadiness+0xa>

	if (vCount >= 0xFFFF) return ERROR;
 8003fe2:	88fb      	ldrh	r3, [r7, #6]
 8003fe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d101      	bne.n	8003ff0 <SD_SPI_WaitingForReadiness+0x36>
 8003fec:	2301      	movs	r3, #1
 8003fee:	e005      	b.n	8003ffc <SD_SPI_WaitingForReadiness+0x42>

	  return (vResult == 0xFF) ? OK: ERROR;
 8003ff0:	797b      	ldrb	r3, [r7, #5]
 8003ff2:	2bff      	cmp	r3, #255	; 0xff
 8003ff4:	bf14      	ite	ne
 8003ff6:	2301      	movne	r3, #1
 8003ff8:	2300      	moveq	r3, #0
 8003ffa:	b2db      	uxtb	r3, r3
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <SD_SPI_Cmd>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_Cmd(uint8_t cmd, uint32_t argument)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	4603      	mov	r3, r0
 800400c:	6039      	str	r1, [r7, #0]
 800400e:	71fb      	strb	r3, [r7, #7]
  uint8_t vByte, vResult;

	// ACMD is the command sequence of CMD55-CMD?
	if (cmd & 0x80)
 8004010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004014:	2b00      	cmp	r3, #0
 8004016:	da0e      	bge.n	8004036 <SD_SPI_Cmd+0x32>
	{
		cmd &= 0x7F;
 8004018:	79fb      	ldrb	r3, [r7, #7]
 800401a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800401e:	71fb      	strb	r3, [r7, #7]
		vResult = SD_SPI_Cmd(CMD55, 0);
 8004020:	2100      	movs	r1, #0
 8004022:	2077      	movs	r0, #119	; 0x77
 8004024:	f7ff ffee 	bl	8004004 <SD_SPI_Cmd>
 8004028:	4603      	mov	r3, r0
 800402a:	73bb      	strb	r3, [r7, #14]
		if (vResult > 1) return vResult;
 800402c:	7bbb      	ldrb	r3, [r7, #14]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d901      	bls.n	8004036 <SD_SPI_Cmd+0x32>
 8004032:	7bbb      	ldrb	r3, [r7, #14]
 8004034:	e049      	b.n	80040ca <SD_SPI_Cmd+0xc6>
	}

	// Select the card
	SD_DESELECT;
 8004036:	2201      	movs	r2, #1
 8004038:	2108      	movs	r1, #8
 800403a:	4826      	ldr	r0, [pc, #152]	; (80040d4 <SD_SPI_Cmd+0xd0>)
 800403c:	f001 f9be 	bl	80053bc <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 8004040:	f7ff ffa7 	bl	8003f92 <SPI_ReceiveByte>
	SD_SELECT;
 8004044:	2200      	movs	r2, #0
 8004046:	2108      	movs	r1, #8
 8004048:	4822      	ldr	r0, [pc, #136]	; (80040d4 <SD_SPI_Cmd+0xd0>)
 800404a:	f001 f9b7 	bl	80053bc <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 800404e:	f7ff ffa0 	bl	8003f92 <SPI_ReceiveByte>

	// Send a command packet
	SPI_SendByte(cmd); // Start + Command index
 8004052:	79fb      	ldrb	r3, [r7, #7]
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff ff8f 	bl	8003f78 <SPI_SendByte>
	SPI_SendByte((uint8_t)(argument >> 24)); // Argument[31..24]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	0e1b      	lsrs	r3, r3, #24
 800405e:	b2db      	uxtb	r3, r3
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff ff89 	bl	8003f78 <SPI_SendByte>
	SPI_SendByte((uint8_t)(argument >> 16)); // Argument[23..16]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	0c1b      	lsrs	r3, r3, #16
 800406a:	b2db      	uxtb	r3, r3
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff ff83 	bl	8003f78 <SPI_SendByte>
	SPI_SendByte((uint8_t)(argument >> 8)); // Argument[15..8]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	0a1b      	lsrs	r3, r3, #8
 8004076:	b2db      	uxtb	r3, r3
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff ff7d 	bl	8003f78 <SPI_SendByte>
	SPI_SendByte((uint8_t)argument); // Argument[7..0]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	b2db      	uxtb	r3, r3
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff ff78 	bl	8003f78 <SPI_SendByte>
	vByte = 0x01; // Dummy CRC + Stop
 8004088:	2301      	movs	r3, #1
 800408a:	73fb      	strb	r3, [r7, #15]

	if (cmd == CMD0) {vByte = 0x95;} // Valid CRC for CMD0(0)
 800408c:	79fb      	ldrb	r3, [r7, #7]
 800408e:	2b40      	cmp	r3, #64	; 0x40
 8004090:	d101      	bne.n	8004096 <SD_SPI_Cmd+0x92>
 8004092:	2395      	movs	r3, #149	; 0x95
 8004094:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) {vByte = 0x87;} // Valid CRC for CMD8(0x1AA)
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	2b48      	cmp	r3, #72	; 0x48
 800409a:	d101      	bne.n	80040a0 <SD_SPI_Cmd+0x9c>
 800409c:	2387      	movs	r3, #135	; 0x87
 800409e:	73fb      	strb	r3, [r7, #15]
	SPI_SendByte(vByte);
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7ff ff68 	bl	8003f78 <SPI_SendByte>

  // Receive a command response
  vByte = 10; // Wait for a valid response in timeout of 10 attempts
 80040a8:	230a      	movs	r3, #10
 80040aa:	73fb      	strb	r3, [r7, #15]
  do {
    		vResult = SPI_ReceiveByte();
 80040ac:	f7ff ff71 	bl	8003f92 <SPI_ReceiveByte>
 80040b0:	4603      	mov	r3, r0
 80040b2:	73bb      	strb	r3, [r7, #14]
  } while ((vResult & 0x80) && --vByte);
 80040b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	da05      	bge.n	80040c8 <SD_SPI_Cmd+0xc4>
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
 80040be:	3b01      	subs	r3, #1
 80040c0:	73fb      	strb	r3, [r7, #15]
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1f1      	bne.n	80040ac <SD_SPI_Cmd+0xa8>

  return vResult;
 80040c8:	7bbb      	ldrb	r3, [r7, #14]

}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	40020000 	.word	0x40020000

080040d8 <SD_SPI_Read_Block>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_Read_Block(uint8_t *buff, uint32_t lba)
{
 80040d8:	b590      	push	{r4, r7, lr}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint8_t vResult = 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	737b      	strb	r3, [r7, #13]
  uint16_t vCounter = 0;
 80040e6:	2300      	movs	r3, #0
 80040e8:	81fb      	strh	r3, [r7, #14]

	vResult = SD_SPI_Cmd (CMD17, lba);
 80040ea:	6839      	ldr	r1, [r7, #0]
 80040ec:	2051      	movs	r0, #81	; 0x51
 80040ee:	f7ff ff89 	bl	8004004 <SD_SPI_Cmd>
 80040f2:	4603      	mov	r3, r0
 80040f4:	737b      	strb	r3, [r7, #13]
	if (vResult) return 5; //	Error
 80040f6:	7b7b      	ldrb	r3, [r7, #13]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <SD_SPI_Read_Block+0x28>
 80040fc:	2305      	movs	r3, #5
 80040fe:	e02d      	b.n	800415c <SD_SPI_Read_Block+0x84>

	SPI_Release();
 8004100:	f7ff ff54 	bl	8003fac <SPI_Release>

  do{
				vResult=SPI_ReceiveByte();
 8004104:	f7ff ff45 	bl	8003f92 <SPI_ReceiveByte>
 8004108:	4603      	mov	r3, r0
 800410a:	737b      	strb	r3, [r7, #13]
				vCounter++;
 800410c:	89fb      	ldrh	r3, [r7, #14]
 800410e:	3301      	adds	r3, #1
 8004110:	81fb      	strh	r3, [r7, #14]
  } while ((vResult != 0xFE) && (vCounter < 0xFFFF)); // Wait till mark(0xFE) is received
 8004112:	7b7b      	ldrb	r3, [r7, #13]
 8004114:	2bfe      	cmp	r3, #254	; 0xfe
 8004116:	d004      	beq.n	8004122 <SD_SPI_Read_Block+0x4a>
 8004118:	89fb      	ldrh	r3, [r7, #14]
 800411a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800411e:	4293      	cmp	r3, r2
 8004120:	d1f0      	bne.n	8004104 <SD_SPI_Read_Block+0x2c>
  if (vCounter >= 0xFFFF) return 5;	 //	 Error
 8004122:	89fb      	ldrh	r3, [r7, #14]
 8004124:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004128:	4293      	cmp	r3, r2
 800412a:	d101      	bne.n	8004130 <SD_SPI_Read_Block+0x58>
 800412c:	2305      	movs	r3, #5
 800412e:	e015      	b.n	800415c <SD_SPI_Read_Block+0x84>

  for (vCounter = 0; vCounter<512; vCounter++) buff[vCounter]=SPI_ReceiveByte(); // Write data to the buffer
 8004130:	2300      	movs	r3, #0
 8004132:	81fb      	strh	r3, [r7, #14]
 8004134:	e009      	b.n	800414a <SD_SPI_Read_Block+0x72>
 8004136:	89fb      	ldrh	r3, [r7, #14]
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	18d4      	adds	r4, r2, r3
 800413c:	f7ff ff29 	bl	8003f92 <SPI_ReceiveByte>
 8004140:	4603      	mov	r3, r0
 8004142:	7023      	strb	r3, [r4, #0]
 8004144:	89fb      	ldrh	r3, [r7, #14]
 8004146:	3301      	adds	r3, #1
 8004148:	81fb      	strh	r3, [r7, #14]
 800414a:	89fb      	ldrh	r3, [r7, #14]
 800414c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004150:	d3f1      	bcc.n	8004136 <SD_SPI_Read_Block+0x5e>
  SPI_Release(); // Skip CRC
 8004152:	f7ff ff2b 	bl	8003fac <SPI_Release>
  SPI_Release();
 8004156:	f7ff ff29 	bl	8003fac <SPI_Release>

  return 0;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	bd90      	pop	{r4, r7, pc}

08004164 <SD_SPI_Write_Block>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_Write_Block (uint8_t *buff, uint32_t lba)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint8_t vResult;
  uint16_t vCounter;

  vResult = SD_SPI_Cmd(CMD24, lba);
 800416e:	6839      	ldr	r1, [r7, #0]
 8004170:	2058      	movs	r0, #88	; 0x58
 8004172:	f7ff ff47 	bl	8004004 <SD_SPI_Cmd>
 8004176:	4603      	mov	r3, r0
 8004178:	737b      	strb	r3, [r7, #13]

  if(vResult != 0x00) return 6; // Error
 800417a:	7b7b      	ldrb	r3, [r7, #13]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <SD_SPI_Write_Block+0x20>
 8004180:	2306      	movs	r3, #6
 8004182:	e03d      	b.n	8004200 <SD_SPI_Write_Block+0x9c>

  SPI_Release();
 8004184:	f7ff ff12 	bl	8003fac <SPI_Release>
  SPI_SendByte (0xFE); // Send transmission start mark
 8004188:	20fe      	movs	r0, #254	; 0xfe
 800418a:	f7ff fef5 	bl	8003f78 <SPI_SendByte>
  for (vCounter = 0; vCounter<512; vCounter++) SPI_SendByte(buff[vCounter]); // Write data to the SD
 800418e:	2300      	movs	r3, #0
 8004190:	81fb      	strh	r3, [r7, #14]
 8004192:	e009      	b.n	80041a8 <SD_SPI_Write_Block+0x44>
 8004194:	89fb      	ldrh	r3, [r7, #14]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	4413      	add	r3, r2
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff feeb 	bl	8003f78 <SPI_SendByte>
 80041a2:	89fb      	ldrh	r3, [r7, #14]
 80041a4:	3301      	adds	r3, #1
 80041a6:	81fb      	strh	r3, [r7, #14]
 80041a8:	89fb      	ldrh	r3, [r7, #14]
 80041aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ae:	d3f1      	bcc.n	8004194 <SD_SPI_Write_Block+0x30>
  SPI_Release();  // Skip CRC
 80041b0:	f7ff fefc 	bl	8003fac <SPI_Release>
  SPI_Release();
 80041b4:	f7ff fefa 	bl	8003fac <SPI_Release>
  vResult = SPI_ReceiveByte();
 80041b8:	f7ff feeb 	bl	8003f92 <SPI_ReceiveByte>
 80041bc:	4603      	mov	r3, r0
 80041be:	737b      	strb	r3, [r7, #13]
  if((vResult & 0x05) != 0x05) return 6; // Error  (datasheet p. 111)
 80041c0:	7b7b      	ldrb	r3, [r7, #13]
 80041c2:	f003 0305 	and.w	r3, r3, #5
 80041c6:	2b05      	cmp	r3, #5
 80041c8:	d001      	beq.n	80041ce <SD_SPI_Write_Block+0x6a>
 80041ca:	2306      	movs	r3, #6
 80041cc:	e018      	b.n	8004200 <SD_SPI_Write_Block+0x9c>

  vCounter = 0;
 80041ce:	2300      	movs	r3, #0
 80041d0:	81fb      	strh	r3, [r7, #14]
  do {
	  vResult=SPI_ReceiveByte();
 80041d2:	f7ff fede 	bl	8003f92 <SPI_ReceiveByte>
 80041d6:	4603      	mov	r3, r0
 80041d8:	737b      	strb	r3, [r7, #13]
	  vCounter++;
 80041da:	89fb      	ldrh	r3, [r7, #14]
 80041dc:	3301      	adds	r3, #1
 80041de:	81fb      	strh	r3, [r7, #14]
  } while ( (vResult != 0xFF)&&(vCounter<0xFFFF) );		//Wait till BUSY mode is finished
 80041e0:	7b7b      	ldrb	r3, [r7, #13]
 80041e2:	2bff      	cmp	r3, #255	; 0xff
 80041e4:	d004      	beq.n	80041f0 <SD_SPI_Write_Block+0x8c>
 80041e6:	89fb      	ldrh	r3, [r7, #14]
 80041e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d1f0      	bne.n	80041d2 <SD_SPI_Write_Block+0x6e>
  if (vCounter>=0xFFFF) return 6;		// Error
 80041f0:	89fb      	ldrh	r3, [r7, #14]
 80041f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d101      	bne.n	80041fe <SD_SPI_Write_Block+0x9a>
 80041fa:	2306      	movs	r3, #6
 80041fc:	e000      	b.n	8004200 <SD_SPI_Write_Block+0x9c>

  return 0;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <SD_SPI_GetFileInfo>:
}

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_GetFileInfo(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
	uint8_t vResult;
	DWORD free_clusters, free_sectors, total_sectors;

	if(f_mount(&SDFatFs, (TCHAR const*)USER_Path, 0))
 800420e:	2200      	movs	r2, #0
 8004210:	4964      	ldr	r1, [pc, #400]	; (80043a4 <SD_SPI_GetFileInfo+0x19c>)
 8004212:	4865      	ldr	r0, [pc, #404]	; (80043a8 <SD_SPI_GetFileInfo+0x1a0>)
 8004214:	f00b fb30 	bl	800f878 <f_mount>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <SD_SPI_GetFileInfo+0x1c>
	{
		SD_Error_Handler();
 800421e:	f000 f8e3 	bl	80043e8 <SD_Error_Handler>
 8004222:	e038      	b.n	8004296 <SD_SPI_GetFileInfo+0x8e>
	}
	else
	{
		vResult = f_opendir(&sDirectory, "/");		// "/" - directory name to open
 8004224:	4961      	ldr	r1, [pc, #388]	; (80043ac <SD_SPI_GetFileInfo+0x1a4>)
 8004226:	4862      	ldr	r0, [pc, #392]	; (80043b0 <SD_SPI_GetFileInfo+0x1a8>)
 8004228:	f00c f963 	bl	80104f2 <f_opendir>
 800422c:	4603      	mov	r3, r0
 800422e:	73fb      	strb	r3, [r7, #15]

		if (vResult == FR_OK)
 8004230:	7bfb      	ldrb	r3, [r7, #15]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d12c      	bne.n	8004290 <SD_SPI_GetFileInfo+0x88>
		{
			while(1)
			{
				vResult = f_readdir(&sDirectory, &sFileInfo);
 8004236:	495f      	ldr	r1, [pc, #380]	; (80043b4 <SD_SPI_GetFileInfo+0x1ac>)
 8004238:	485d      	ldr	r0, [pc, #372]	; (80043b0 <SD_SPI_GetFileInfo+0x1a8>)
 800423a:	f00c f9f3 	bl	8010624 <f_readdir>
 800423e:	4603      	mov	r3, r0
 8004240:	73fb      	strb	r3, [r7, #15]

				if ((vResult == FR_OK) && (sFileInfo.fname[0]))
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d123      	bne.n	8004290 <SD_SPI_GetFileInfo+0x88>
 8004248:	4b5a      	ldr	r3, [pc, #360]	; (80043b4 <SD_SPI_GetFileInfo+0x1ac>)
 800424a:	7d9b      	ldrb	r3, [r3, #22]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d01f      	beq.n	8004290 <SD_SPI_GetFileInfo+0x88>
				{
					HAL_UART_Transmit(&huart3, (uint8_t*)sFileInfo.fname, strlen((char*)sFileInfo.fname), 0x1000);
 8004250:	4859      	ldr	r0, [pc, #356]	; (80043b8 <SD_SPI_GetFileInfo+0x1b0>)
 8004252:	f7fb ffbd 	bl	80001d0 <strlen>
 8004256:	4603      	mov	r3, r0
 8004258:	b29a      	uxth	r2, r3
 800425a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800425e:	4956      	ldr	r1, [pc, #344]	; (80043b8 <SD_SPI_GetFileInfo+0x1b0>)
 8004260:	4856      	ldr	r0, [pc, #344]	; (80043bc <SD_SPI_GetFileInfo+0x1b4>)
 8004262:	f004 fe38 	bl	8008ed6 <HAL_UART_Transmit>

					if(sFileInfo.fattrib & AM_DIR)
 8004266:	4b53      	ldr	r3, [pc, #332]	; (80043b4 <SD_SPI_GetFileInfo+0x1ac>)
 8004268:	7a1b      	ldrb	r3, [r3, #8]
 800426a:	f003 0310 	and.w	r3, r3, #16
 800426e:	2b00      	cmp	r3, #0
 8004270:	d006      	beq.n	8004280 <SD_SPI_GetFileInfo+0x78>
					{
						HAL_UART_Transmit(&huart3, (uint8_t*)"  [DIR]", 7, 0x1000);
 8004272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004276:	2207      	movs	r2, #7
 8004278:	4951      	ldr	r1, [pc, #324]	; (80043c0 <SD_SPI_GetFileInfo+0x1b8>)
 800427a:	4850      	ldr	r0, [pc, #320]	; (80043bc <SD_SPI_GetFileInfo+0x1b4>)
 800427c:	f004 fe2b 	bl	8008ed6 <HAL_UART_Transmit>
					}
				}
				else break;

				HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, 0x1000);
 8004280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004284:	2202      	movs	r2, #2
 8004286:	494f      	ldr	r1, [pc, #316]	; (80043c4 <SD_SPI_GetFileInfo+0x1bc>)
 8004288:	484c      	ldr	r0, [pc, #304]	; (80043bc <SD_SPI_GetFileInfo+0x1b4>)
 800428a:	f004 fe24 	bl	8008ed6 <HAL_UART_Transmit>
				vResult = f_readdir(&sDirectory, &sFileInfo);
 800428e:	e7d2      	b.n	8004236 <SD_SPI_GetFileInfo+0x2e>
			}
		}
		f_closedir(&sDirectory);
 8004290:	4847      	ldr	r0, [pc, #284]	; (80043b0 <SD_SPI_GetFileInfo+0x1a8>)
 8004292:	f00c f9a1 	bl	80105d8 <f_closedir>
	}

	f_getfree("/", &free_clusters, &fs);
 8004296:	463b      	mov	r3, r7
 8004298:	4a4b      	ldr	r2, [pc, #300]	; (80043c8 <SD_SPI_GetFileInfo+0x1c0>)
 800429a:	4619      	mov	r1, r3
 800429c:	4843      	ldr	r0, [pc, #268]	; (80043ac <SD_SPI_GetFileInfo+0x1a4>)
 800429e:	f00c f9fe 	bl	801069e <f_getfree>

	sprintf(aStringBuffer, "free_clusters: %lu\r\n", free_clusters);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	461a      	mov	r2, r3
 80042a6:	4949      	ldr	r1, [pc, #292]	; (80043cc <SD_SPI_GetFileInfo+0x1c4>)
 80042a8:	4849      	ldr	r0, [pc, #292]	; (80043d0 <SD_SPI_GetFileInfo+0x1c8>)
 80042aa:	f00d f8a5 	bl	80113f8 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 80042ae:	4848      	ldr	r0, [pc, #288]	; (80043d0 <SD_SPI_GetFileInfo+0x1c8>)
 80042b0:	f7fb ff8e 	bl	80001d0 <strlen>
 80042b4:	4603      	mov	r3, r0
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042bc:	4944      	ldr	r1, [pc, #272]	; (80043d0 <SD_SPI_GetFileInfo+0x1c8>)
 80042be:	483f      	ldr	r0, [pc, #252]	; (80043bc <SD_SPI_GetFileInfo+0x1b4>)
 80042c0:	f004 fe09 	bl	8008ed6 <HAL_UART_Transmit>

	sprintf(aStringBuffer,"n_fatent: %lu\r\n",fs->n_fatent);
 80042c4:	4b40      	ldr	r3, [pc, #256]	; (80043c8 <SD_SPI_GetFileInfo+0x1c0>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	461a      	mov	r2, r3
 80042cc:	4941      	ldr	r1, [pc, #260]	; (80043d4 <SD_SPI_GetFileInfo+0x1cc>)
 80042ce:	4840      	ldr	r0, [pc, #256]	; (80043d0 <SD_SPI_GetFileInfo+0x1c8>)
 80042d0:	f00d f892 	bl	80113f8 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 80042d4:	483e      	ldr	r0, [pc, #248]	; (80043d0 <SD_SPI_GetFileInfo+0x1c8>)
 80042d6:	f7fb ff7b 	bl	80001d0 <strlen>
 80042da:	4603      	mov	r3, r0
 80042dc:	b29a      	uxth	r2, r3
 80042de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042e2:	493b      	ldr	r1, [pc, #236]	; (80043d0 <SD_SPI_GetFileInfo+0x1c8>)
 80042e4:	4835      	ldr	r0, [pc, #212]	; (80043bc <SD_SPI_GetFileInfo+0x1b4>)
 80042e6:	f004 fdf6 	bl	8008ed6 <HAL_UART_Transmit>

	sprintf(aStringBuffer,"fs_csize: %d\r\n",fs->csize);
 80042ea:	4b37      	ldr	r3, [pc, #220]	; (80043c8 <SD_SPI_GetFileInfo+0x1c0>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	895b      	ldrh	r3, [r3, #10]
 80042f0:	461a      	mov	r2, r3
 80042f2:	4939      	ldr	r1, [pc, #228]	; (80043d8 <SD_SPI_GetFileInfo+0x1d0>)
 80042f4:	4836      	ldr	r0, [pc, #216]	; (80043d0 <SD_SPI_GetFileInfo+0x1c8>)
 80042f6:	f00d f87f 	bl	80113f8 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 80042fa:	4835      	ldr	r0, [pc, #212]	; (80043d0 <SD_SPI_GetFileInfo+0x1c8>)
 80042fc:	f7fb ff68 	bl	80001d0 <strlen>
 8004300:	4603      	mov	r3, r0
 8004302:	b29a      	uxth	r2, r3
 8004304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004308:	4931      	ldr	r1, [pc, #196]	; (80043d0 <SD_SPI_GetFileInfo+0x1c8>)
 800430a:	482c      	ldr	r0, [pc, #176]	; (80043bc <SD_SPI_GetFileInfo+0x1b4>)
 800430c:	f004 fde3 	bl	8008ed6 <HAL_UART_Transmit>

	total_sectors = (fs->n_fatent - 2) * fs->csize;
 8004310:	4b2d      	ldr	r3, [pc, #180]	; (80043c8 <SD_SPI_GetFileInfo+0x1c0>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	3b02      	subs	r3, #2
 8004318:	4a2b      	ldr	r2, [pc, #172]	; (80043c8 <SD_SPI_GetFileInfo+0x1c0>)
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	8952      	ldrh	r2, [r2, #10]
 800431e:	fb02 f303 	mul.w	r3, r2, r3
 8004322:	60bb      	str	r3, [r7, #8]
	sprintf(aStringBuffer, "total_sectors: %lu\r\n", total_sectors);
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	492d      	ldr	r1, [pc, #180]	; (80043dc <SD_SPI_GetFileInfo+0x1d4>)
 8004328:	4829      	ldr	r0, [pc, #164]	; (80043d0 <SD_SPI_GetFileInfo+0x1c8>)
 800432a:	f00d f865 	bl	80113f8 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 800432e:	4828      	ldr	r0, [pc, #160]	; (80043d0 <SD_SPI_GetFileInfo+0x1c8>)
 8004330:	f7fb ff4e 	bl	80001d0 <strlen>
 8004334:	4603      	mov	r3, r0
 8004336:	b29a      	uxth	r2, r3
 8004338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800433c:	4924      	ldr	r1, [pc, #144]	; (80043d0 <SD_SPI_GetFileInfo+0x1c8>)
 800433e:	481f      	ldr	r0, [pc, #124]	; (80043bc <SD_SPI_GetFileInfo+0x1b4>)
 8004340:	f004 fdc9 	bl	8008ed6 <HAL_UART_Transmit>

	free_sectors = free_clusters * fs->csize;
 8004344:	4b20      	ldr	r3, [pc, #128]	; (80043c8 <SD_SPI_GetFileInfo+0x1c0>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	895b      	ldrh	r3, [r3, #10]
 800434a:	461a      	mov	r2, r3
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	fb02 f303 	mul.w	r3, r2, r3
 8004352:	607b      	str	r3, [r7, #4]
	sprintf(aStringBuffer, "free_sectors: %lu\r\n", free_sectors);
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	4922      	ldr	r1, [pc, #136]	; (80043e0 <SD_SPI_GetFileInfo+0x1d8>)
 8004358:	481d      	ldr	r0, [pc, #116]	; (80043d0 <SD_SPI_GetFileInfo+0x1c8>)
 800435a:	f00d f84d 	bl	80113f8 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 800435e:	481c      	ldr	r0, [pc, #112]	; (80043d0 <SD_SPI_GetFileInfo+0x1c8>)
 8004360:	f7fb ff36 	bl	80001d0 <strlen>
 8004364:	4603      	mov	r3, r0
 8004366:	b29a      	uxth	r2, r3
 8004368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800436c:	4918      	ldr	r1, [pc, #96]	; (80043d0 <SD_SPI_GetFileInfo+0x1c8>)
 800436e:	4813      	ldr	r0, [pc, #76]	; (80043bc <SD_SPI_GetFileInfo+0x1b4>)
 8004370:	f004 fdb1 	bl	8008ed6 <HAL_UART_Transmit>

	sprintf(aStringBuffer, "%lu KB total drive space.\r\n%lu KB available.\r\n", (free_sectors / 2), (total_sectors / 2));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	085a      	lsrs	r2, r3, #1
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	085b      	lsrs	r3, r3, #1
 800437c:	4919      	ldr	r1, [pc, #100]	; (80043e4 <SD_SPI_GetFileInfo+0x1dc>)
 800437e:	4814      	ldr	r0, [pc, #80]	; (80043d0 <SD_SPI_GetFileInfo+0x1c8>)
 8004380:	f00d f83a 	bl	80113f8 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 8004384:	4812      	ldr	r0, [pc, #72]	; (80043d0 <SD_SPI_GetFileInfo+0x1c8>)
 8004386:	f7fb ff23 	bl	80001d0 <strlen>
 800438a:	4603      	mov	r3, r0
 800438c:	b29a      	uxth	r2, r3
 800438e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004392:	490f      	ldr	r1, [pc, #60]	; (80043d0 <SD_SPI_GetFileInfo+0x1c8>)
 8004394:	4809      	ldr	r0, [pc, #36]	; (80043bc <SD_SPI_GetFileInfo+0x1b4>)
 8004396:	f004 fd9e 	bl	8008ed6 <HAL_UART_Transmit>

	return 0;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	20001c74 	.word	0x20001c74
 80043a8:	20000590 	.word	0x20000590
 80043ac:	08012550 	.word	0x08012550
 80043b0:	20002dc8 	.word	0x20002dc8
 80043b4:	20002cb0 	.word	0x20002cb0
 80043b8:	20002cc6 	.word	0x20002cc6
 80043bc:	20001c14 	.word	0x20001c14
 80043c0:	08012554 	.word	0x08012554
 80043c4:	0801255c 	.word	0x0801255c
 80043c8:	20001c78 	.word	0x20001c78
 80043cc:	08012560 	.word	0x08012560
 80043d0:	20002dfc 	.word	0x20002dfc
 80043d4:	08012578 	.word	0x08012578
 80043d8:	08012588 	.word	0x08012588
 80043dc:	08012598 	.word	0x08012598
 80043e0:	080125b0 	.word	0x080125b0
 80043e4:	080125c4 	.word	0x080125c4

080043e8 <SD_Error_Handler>:

/****************************************************************************************************************/
/****************************************************************************************************************/
void SD_Error_Handler(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
	LED_Red_ON;
 80043ec:	2201      	movs	r2, #1
 80043ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80043f2:	4802      	ldr	r0, [pc, #8]	; (80043fc <SD_Error_Handler+0x14>)
 80043f4:	f000 ffe2 	bl	80053bc <HAL_GPIO_WritePin>
	//while(1);
}
 80043f8:	bf00      	nop
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40020c00 	.word	0x40020c00

08004400 <update_all_leds>:
	}
}
// -----------------------------------------------------------------------------------------------------------
//
void update_all_leds(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
	// SET RED LEDs (PWM)
	set_duty_cycle_stop_left_5(frame_buffer[start_evenled + 16 ]);
 8004404:	4b31      	ldr	r3, [pc, #196]	; (80044cc <update_all_leds+0xcc>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3310      	adds	r3, #16
 800440a:	4a31      	ldr	r2, [pc, #196]	; (80044d0 <update_all_leds+0xd0>)
 800440c:	5cd3      	ldrb	r3, [r2, r3]
 800440e:	4618      	mov	r0, r3
 8004410:	f7fc fc6e 	bl	8000cf0 <set_duty_cycle_stop_left_5>
	set_duty_cycle_stop_left_4(frame_buffer[start_evenled + 12 ]);
 8004414:	4b2d      	ldr	r3, [pc, #180]	; (80044cc <update_all_leds+0xcc>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	330c      	adds	r3, #12
 800441a:	4a2d      	ldr	r2, [pc, #180]	; (80044d0 <update_all_leds+0xd0>)
 800441c:	5cd3      	ldrb	r3, [r2, r3]
 800441e:	4618      	mov	r0, r3
 8004420:	f7fc fc56 	bl	8000cd0 <set_duty_cycle_stop_left_4>
	set_duty_cycle_stop_left_3(frame_buffer[start_evenled + 8 ]);
 8004424:	4b29      	ldr	r3, [pc, #164]	; (80044cc <update_all_leds+0xcc>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3308      	adds	r3, #8
 800442a:	4a29      	ldr	r2, [pc, #164]	; (80044d0 <update_all_leds+0xd0>)
 800442c:	5cd3      	ldrb	r3, [r2, r3]
 800442e:	4618      	mov	r0, r3
 8004430:	f7fc fc3e 	bl	8000cb0 <set_duty_cycle_stop_left_3>
	set_duty_cycle_stop_left_2(frame_buffer[start_evenled + 4 ]);
 8004434:	4b25      	ldr	r3, [pc, #148]	; (80044cc <update_all_leds+0xcc>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	3304      	adds	r3, #4
 800443a:	4a25      	ldr	r2, [pc, #148]	; (80044d0 <update_all_leds+0xd0>)
 800443c:	5cd3      	ldrb	r3, [r2, r3]
 800443e:	4618      	mov	r0, r3
 8004440:	f7fc fc26 	bl	8000c90 <set_duty_cycle_stop_left_2>
	set_duty_cycle_stop_left_1(frame_buffer[start_evenled]);
 8004444:	4b21      	ldr	r3, [pc, #132]	; (80044cc <update_all_leds+0xcc>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a21      	ldr	r2, [pc, #132]	; (80044d0 <update_all_leds+0xd0>)
 800444a:	5cd3      	ldrb	r3, [r2, r3]
 800444c:	4618      	mov	r0, r3
 800444e:	f7fc fc0f 	bl	8000c70 <set_duty_cycle_stop_left_1>

	set_duty_cycle_stop_ritht_1(frame_buffer[start_evenled + 20 ]);
 8004452:	4b1e      	ldr	r3, [pc, #120]	; (80044cc <update_all_leds+0xcc>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3314      	adds	r3, #20
 8004458:	4a1d      	ldr	r2, [pc, #116]	; (80044d0 <update_all_leds+0xd0>)
 800445a:	5cd3      	ldrb	r3, [r2, r3]
 800445c:	4618      	mov	r0, r3
 800445e:	f7fc fc57 	bl	8000d10 <set_duty_cycle_stop_ritht_1>
	set_duty_cycle_stop_ritht_2(frame_buffer[start_evenled + 24 ]);
 8004462:	4b1a      	ldr	r3, [pc, #104]	; (80044cc <update_all_leds+0xcc>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3318      	adds	r3, #24
 8004468:	4a19      	ldr	r2, [pc, #100]	; (80044d0 <update_all_leds+0xd0>)
 800446a:	5cd3      	ldrb	r3, [r2, r3]
 800446c:	4618      	mov	r0, r3
 800446e:	f7fc fc5f 	bl	8000d30 <set_duty_cycle_stop_ritht_2>
	set_duty_cycle_stop_ritht_3(frame_buffer[start_evenled + 28 ]);
 8004472:	4b16      	ldr	r3, [pc, #88]	; (80044cc <update_all_leds+0xcc>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	331c      	adds	r3, #28
 8004478:	4a15      	ldr	r2, [pc, #84]	; (80044d0 <update_all_leds+0xd0>)
 800447a:	5cd3      	ldrb	r3, [r2, r3]
 800447c:	4618      	mov	r0, r3
 800447e:	f7fc fc67 	bl	8000d50 <set_duty_cycle_stop_ritht_3>
	set_duty_cycle_stop_ritht_4(frame_buffer[start_evenled + 32 ]);
 8004482:	4b12      	ldr	r3, [pc, #72]	; (80044cc <update_all_leds+0xcc>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3320      	adds	r3, #32
 8004488:	4a11      	ldr	r2, [pc, #68]	; (80044d0 <update_all_leds+0xd0>)
 800448a:	5cd3      	ldrb	r3, [r2, r3]
 800448c:	4618      	mov	r0, r3
 800448e:	f7fc fc6f 	bl	8000d70 <set_duty_cycle_stop_ritht_4>
	set_duty_cycle_stop_ritht_5(frame_buffer[start_evenled + 36 ]);
 8004492:	4b0e      	ldr	r3, [pc, #56]	; (80044cc <update_all_leds+0xcc>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3324      	adds	r3, #36	; 0x24
 8004498:	4a0d      	ldr	r2, [pc, #52]	; (80044d0 <update_all_leds+0xd0>)
 800449a:	5cd3      	ldrb	r3, [r2, r3]
 800449c:	4618      	mov	r0, r3
 800449e:	f7fc fc77 	bl	8000d90 <set_duty_cycle_stop_ritht_5>

	while (!ARGB_Show_left());  		// Update RGBW LEDs    	(Takes time around 17 us)
 80044a2:	bf00      	nop
 80044a4:	f7fc ffca 	bl	800143c <ARGB_Show_left>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0fa      	beq.n	80044a4 <update_all_leds+0xa4>
	while (!ARGB_Show_right());  		// Update RGBW LEDs		(Takes time around 17 us)
 80044ae:	bf00      	nop
 80044b0:	f7fd f990 	bl	80017d4 <ARGB_Show_right>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0fa      	beq.n	80044b0 <update_all_leds+0xb0>

	interrupt_flag = 0;					// Tim 13
 80044ba:	4b06      	ldr	r3, [pc, #24]	; (80044d4 <update_all_leds+0xd4>)
 80044bc:	2200      	movs	r2, #0
 80044be:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_TogglePin(GPIOE, TEST_OUTPUT_1_Pin);		// For debug (for measure frequency updates of frames)
 80044c0:	2104      	movs	r1, #4
 80044c2:	4805      	ldr	r0, [pc, #20]	; (80044d8 <update_all_leds+0xd8>)
 80044c4:	f000 ff93 	bl	80053ee <HAL_GPIO_TogglePin>
}
 80044c8:	bf00      	nop
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	2000000c 	.word	0x2000000c
 80044d0:	200015dc 	.word	0x200015dc
 80044d4:	200015d7 	.word	0x200015d7
 80044d8:	40021000 	.word	0x40021000

080044dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80044dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004514 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80044e0:	480d      	ldr	r0, [pc, #52]	; (8004518 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80044e2:	490e      	ldr	r1, [pc, #56]	; (800451c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80044e4:	4a0e      	ldr	r2, [pc, #56]	; (8004520 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80044e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044e8:	e002      	b.n	80044f0 <LoopCopyDataInit>

080044ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044ee:	3304      	adds	r3, #4

080044f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044f4:	d3f9      	bcc.n	80044ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044f6:	4a0b      	ldr	r2, [pc, #44]	; (8004524 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80044f8:	4c0b      	ldr	r4, [pc, #44]	; (8004528 <LoopFillZerobss+0x26>)
  movs r3, #0
 80044fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044fc:	e001      	b.n	8004502 <LoopFillZerobss>

080044fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004500:	3204      	adds	r2, #4

08004502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004504:	d3fb      	bcc.n	80044fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004506:	f7ff fc27 	bl	8003d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800450a:	f00c fe31 	bl	8011170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800450e:	f7fe fa1b 	bl	8002948 <main>
  bx  lr    
 8004512:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004514:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800451c:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8004520:	08012b54 	.word	0x08012b54
  ldr r2, =_sbss
 8004524:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8004528:	2000396c 	.word	0x2000396c

0800452c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800452c:	e7fe      	b.n	800452c <ADC_IRQHandler>
	...

08004530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004534:	4b0e      	ldr	r3, [pc, #56]	; (8004570 <HAL_Init+0x40>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a0d      	ldr	r2, [pc, #52]	; (8004570 <HAL_Init+0x40>)
 800453a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800453e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004540:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <HAL_Init+0x40>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a0a      	ldr	r2, [pc, #40]	; (8004570 <HAL_Init+0x40>)
 8004546:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800454a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800454c:	4b08      	ldr	r3, [pc, #32]	; (8004570 <HAL_Init+0x40>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a07      	ldr	r2, [pc, #28]	; (8004570 <HAL_Init+0x40>)
 8004552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004556:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004558:	2003      	movs	r0, #3
 800455a:	f000 f94f 	bl	80047fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800455e:	2000      	movs	r0, #0
 8004560:	f000 f808 	bl	8004574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004564:	f7ff f81a 	bl	800359c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40023c00 	.word	0x40023c00

08004574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800457c:	4b12      	ldr	r3, [pc, #72]	; (80045c8 <HAL_InitTick+0x54>)
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	4b12      	ldr	r3, [pc, #72]	; (80045cc <HAL_InitTick+0x58>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	4619      	mov	r1, r3
 8004586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800458a:	fbb3 f3f1 	udiv	r3, r3, r1
 800458e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004592:	4618      	mov	r0, r3
 8004594:	f000 f967 	bl	8004866 <HAL_SYSTICK_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e00e      	b.n	80045c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b0f      	cmp	r3, #15
 80045a6:	d80a      	bhi.n	80045be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045a8:	2200      	movs	r2, #0
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045b0:	f000 f92f 	bl	8004812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045b4:	4a06      	ldr	r2, [pc, #24]	; (80045d0 <HAL_InitTick+0x5c>)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	e000      	b.n	80045c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	20000004 	.word	0x20000004
 80045cc:	20000024 	.word	0x20000024
 80045d0:	20000020 	.word	0x20000020

080045d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045d8:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <HAL_IncTick+0x20>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	461a      	mov	r2, r3
 80045de:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <HAL_IncTick+0x24>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4413      	add	r3, r2
 80045e4:	4a04      	ldr	r2, [pc, #16]	; (80045f8 <HAL_IncTick+0x24>)
 80045e6:	6013      	str	r3, [r2, #0]
}
 80045e8:	bf00      	nop
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	20000024 	.word	0x20000024
 80045f8:	2000303c 	.word	0x2000303c

080045fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004600:	4b03      	ldr	r3, [pc, #12]	; (8004610 <HAL_GetTick+0x14>)
 8004602:	681b      	ldr	r3, [r3, #0]
}
 8004604:	4618      	mov	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	2000303c 	.word	0x2000303c

08004614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800461c:	f7ff ffee 	bl	80045fc <HAL_GetTick>
 8004620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800462c:	d005      	beq.n	800463a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800462e:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <HAL_Delay+0x44>)
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	461a      	mov	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4413      	add	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800463a:	bf00      	nop
 800463c:	f7ff ffde 	bl	80045fc <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	429a      	cmp	r2, r3
 800464a:	d8f7      	bhi.n	800463c <HAL_Delay+0x28>
  {
  }
}
 800464c:	bf00      	nop
 800464e:	bf00      	nop
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20000024 	.word	0x20000024

0800465c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800466c:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <__NVIC_SetPriorityGrouping+0x44>)
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004678:	4013      	ands	r3, r2
 800467a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800468c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800468e:	4a04      	ldr	r2, [pc, #16]	; (80046a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	60d3      	str	r3, [r2, #12]
}
 8004694:	bf00      	nop
 8004696:	3714      	adds	r7, #20
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	e000ed00 	.word	0xe000ed00

080046a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046a8:	4b04      	ldr	r3, [pc, #16]	; (80046bc <__NVIC_GetPriorityGrouping+0x18>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	0a1b      	lsrs	r3, r3, #8
 80046ae:	f003 0307 	and.w	r3, r3, #7
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	e000ed00 	.word	0xe000ed00

080046c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	db0b      	blt.n	80046ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046d2:	79fb      	ldrb	r3, [r7, #7]
 80046d4:	f003 021f 	and.w	r2, r3, #31
 80046d8:	4907      	ldr	r1, [pc, #28]	; (80046f8 <__NVIC_EnableIRQ+0x38>)
 80046da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046de:	095b      	lsrs	r3, r3, #5
 80046e0:	2001      	movs	r0, #1
 80046e2:	fa00 f202 	lsl.w	r2, r0, r2
 80046e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	e000e100 	.word	0xe000e100

080046fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	4603      	mov	r3, r0
 8004704:	6039      	str	r1, [r7, #0]
 8004706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800470c:	2b00      	cmp	r3, #0
 800470e:	db0a      	blt.n	8004726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	b2da      	uxtb	r2, r3
 8004714:	490c      	ldr	r1, [pc, #48]	; (8004748 <__NVIC_SetPriority+0x4c>)
 8004716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800471a:	0112      	lsls	r2, r2, #4
 800471c:	b2d2      	uxtb	r2, r2
 800471e:	440b      	add	r3, r1
 8004720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004724:	e00a      	b.n	800473c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	b2da      	uxtb	r2, r3
 800472a:	4908      	ldr	r1, [pc, #32]	; (800474c <__NVIC_SetPriority+0x50>)
 800472c:	79fb      	ldrb	r3, [r7, #7]
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	3b04      	subs	r3, #4
 8004734:	0112      	lsls	r2, r2, #4
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	440b      	add	r3, r1
 800473a:	761a      	strb	r2, [r3, #24]
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	e000e100 	.word	0xe000e100
 800474c:	e000ed00 	.word	0xe000ed00

08004750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004750:	b480      	push	{r7}
 8004752:	b089      	sub	sp, #36	; 0x24
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	f1c3 0307 	rsb	r3, r3, #7
 800476a:	2b04      	cmp	r3, #4
 800476c:	bf28      	it	cs
 800476e:	2304      	movcs	r3, #4
 8004770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	3304      	adds	r3, #4
 8004776:	2b06      	cmp	r3, #6
 8004778:	d902      	bls.n	8004780 <NVIC_EncodePriority+0x30>
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	3b03      	subs	r3, #3
 800477e:	e000      	b.n	8004782 <NVIC_EncodePriority+0x32>
 8004780:	2300      	movs	r3, #0
 8004782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004784:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	43da      	mvns	r2, r3
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	401a      	ands	r2, r3
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004798:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	fa01 f303 	lsl.w	r3, r1, r3
 80047a2:	43d9      	mvns	r1, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047a8:	4313      	orrs	r3, r2
         );
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3724      	adds	r7, #36	; 0x24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
	...

080047b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047c8:	d301      	bcc.n	80047ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047ca:	2301      	movs	r3, #1
 80047cc:	e00f      	b.n	80047ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047ce:	4a0a      	ldr	r2, [pc, #40]	; (80047f8 <SysTick_Config+0x40>)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047d6:	210f      	movs	r1, #15
 80047d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047dc:	f7ff ff8e 	bl	80046fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047e0:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <SysTick_Config+0x40>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047e6:	4b04      	ldr	r3, [pc, #16]	; (80047f8 <SysTick_Config+0x40>)
 80047e8:	2207      	movs	r2, #7
 80047ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	e000e010 	.word	0xe000e010

080047fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7ff ff29 	bl	800465c <__NVIC_SetPriorityGrouping>
}
 800480a:	bf00      	nop
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004812:	b580      	push	{r7, lr}
 8004814:	b086      	sub	sp, #24
 8004816:	af00      	add	r7, sp, #0
 8004818:	4603      	mov	r3, r0
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	607a      	str	r2, [r7, #4]
 800481e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004820:	2300      	movs	r3, #0
 8004822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004824:	f7ff ff3e 	bl	80046a4 <__NVIC_GetPriorityGrouping>
 8004828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	68b9      	ldr	r1, [r7, #8]
 800482e:	6978      	ldr	r0, [r7, #20]
 8004830:	f7ff ff8e 	bl	8004750 <NVIC_EncodePriority>
 8004834:	4602      	mov	r2, r0
 8004836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800483a:	4611      	mov	r1, r2
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff ff5d 	bl	80046fc <__NVIC_SetPriority>
}
 8004842:	bf00      	nop
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b082      	sub	sp, #8
 800484e:	af00      	add	r7, sp, #0
 8004850:	4603      	mov	r3, r0
 8004852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004858:	4618      	mov	r0, r3
 800485a:	f7ff ff31 	bl	80046c0 <__NVIC_EnableIRQ>
}
 800485e:	bf00      	nop
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b082      	sub	sp, #8
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7ff ffa2 	bl	80047b8 <SysTick_Config>
 8004874:	4603      	mov	r3, r0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
	...

08004880 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800488c:	f7ff feb6 	bl	80045fc <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e099      	b.n	80049d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 0201 	bic.w	r2, r2, #1
 80048ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048bc:	e00f      	b.n	80048de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048be:	f7ff fe9d 	bl	80045fc <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b05      	cmp	r3, #5
 80048ca:	d908      	bls.n	80048de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2220      	movs	r2, #32
 80048d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2203      	movs	r2, #3
 80048d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e078      	b.n	80049d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1e8      	bne.n	80048be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	4b38      	ldr	r3, [pc, #224]	; (80049d8 <HAL_DMA_Init+0x158>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800490a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004916:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004922:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	4313      	orrs	r3, r2
 800492e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	2b04      	cmp	r3, #4
 8004936:	d107      	bne.n	8004948 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004940:	4313      	orrs	r3, r2
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	4313      	orrs	r3, r2
 8004946:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f023 0307 	bic.w	r3, r3, #7
 800495e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	4313      	orrs	r3, r2
 8004968:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	2b04      	cmp	r3, #4
 8004970:	d117      	bne.n	80049a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	4313      	orrs	r3, r2
 800497a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00e      	beq.n	80049a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 fb01 	bl	8004f8c <DMA_CheckFifoParam>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d008      	beq.n	80049a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2240      	movs	r2, #64	; 0x40
 8004994:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800499e:	2301      	movs	r3, #1
 80049a0:	e016      	b.n	80049d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fab8 	bl	8004f20 <DMA_CalcBaseAndBitshift>
 80049b0:	4603      	mov	r3, r0
 80049b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b8:	223f      	movs	r2, #63	; 0x3f
 80049ba:	409a      	lsls	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3718      	adds	r7, #24
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	f010803f 	.word	0xf010803f

080049dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
 80049e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d101      	bne.n	8004a02 <HAL_DMA_Start_IT+0x26>
 80049fe:	2302      	movs	r3, #2
 8004a00:	e040      	b.n	8004a84 <HAL_DMA_Start_IT+0xa8>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d12f      	bne.n	8004a76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2202      	movs	r2, #2
 8004a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	68b9      	ldr	r1, [r7, #8]
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 fa4a 	bl	8004ec4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a34:	223f      	movs	r2, #63	; 0x3f
 8004a36:	409a      	lsls	r2, r3
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0216 	orr.w	r2, r2, #22
 8004a4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d007      	beq.n	8004a64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f042 0208 	orr.w	r2, r2, #8
 8004a62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 0201 	orr.w	r2, r2, #1
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	e005      	b.n	8004a82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a7e:	2302      	movs	r3, #2
 8004a80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004a9a:	f7ff fdaf 	bl	80045fc <HAL_GetTick>
 8004a9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d008      	beq.n	8004abe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2280      	movs	r2, #128	; 0x80
 8004ab0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e052      	b.n	8004b64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0216 	bic.w	r2, r2, #22
 8004acc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695a      	ldr	r2, [r3, #20]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004adc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d103      	bne.n	8004aee <HAL_DMA_Abort+0x62>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d007      	beq.n	8004afe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 0208 	bic.w	r2, r2, #8
 8004afc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0201 	bic.w	r2, r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b0e:	e013      	b.n	8004b38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b10:	f7ff fd74 	bl	80045fc <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b05      	cmp	r3, #5
 8004b1c:	d90c      	bls.n	8004b38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2220      	movs	r2, #32
 8004b22:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2203      	movs	r2, #3
 8004b28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e015      	b.n	8004b64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1e4      	bne.n	8004b10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b4a:	223f      	movs	r2, #63	; 0x3f
 8004b4c:	409a      	lsls	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d004      	beq.n	8004b8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2280      	movs	r2, #128	; 0x80
 8004b84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e00c      	b.n	8004ba4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2205      	movs	r2, #5
 8004b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0201 	bic.w	r2, r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004bbc:	4b8e      	ldr	r3, [pc, #568]	; (8004df8 <HAL_DMA_IRQHandler+0x248>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a8e      	ldr	r2, [pc, #568]	; (8004dfc <HAL_DMA_IRQHandler+0x24c>)
 8004bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc6:	0a9b      	lsrs	r3, r3, #10
 8004bc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bda:	2208      	movs	r2, #8
 8004bdc:	409a      	lsls	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4013      	ands	r3, r2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d01a      	beq.n	8004c1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d013      	beq.n	8004c1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 0204 	bic.w	r2, r2, #4
 8004c02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c08:	2208      	movs	r2, #8
 8004c0a:	409a      	lsls	r2, r3
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c14:	f043 0201 	orr.w	r2, r3, #1
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c20:	2201      	movs	r2, #1
 8004c22:	409a      	lsls	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4013      	ands	r3, r2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d012      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00b      	beq.n	8004c52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3e:	2201      	movs	r2, #1
 8004c40:	409a      	lsls	r2, r3
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4a:	f043 0202 	orr.w	r2, r3, #2
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c56:	2204      	movs	r2, #4
 8004c58:	409a      	lsls	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d012      	beq.n	8004c88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00b      	beq.n	8004c88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c74:	2204      	movs	r2, #4
 8004c76:	409a      	lsls	r2, r3
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c80:	f043 0204 	orr.w	r2, r3, #4
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8c:	2210      	movs	r2, #16
 8004c8e:	409a      	lsls	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4013      	ands	r3, r2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d043      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d03c      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004caa:	2210      	movs	r2, #16
 8004cac:	409a      	lsls	r2, r3
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d018      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d108      	bne.n	8004ce0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d024      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	4798      	blx	r3
 8004cde:	e01f      	b.n	8004d20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d01b      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	4798      	blx	r3
 8004cf0:	e016      	b.n	8004d20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d107      	bne.n	8004d10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0208 	bic.w	r2, r2, #8
 8004d0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d003      	beq.n	8004d20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d24:	2220      	movs	r2, #32
 8004d26:	409a      	lsls	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 808f 	beq.w	8004e50 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0310 	and.w	r3, r3, #16
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 8087 	beq.w	8004e50 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d46:	2220      	movs	r2, #32
 8004d48:	409a      	lsls	r2, r3
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b05      	cmp	r3, #5
 8004d58:	d136      	bne.n	8004dc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0216 	bic.w	r2, r2, #22
 8004d68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695a      	ldr	r2, [r3, #20]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d103      	bne.n	8004d8a <HAL_DMA_IRQHandler+0x1da>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d007      	beq.n	8004d9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0208 	bic.w	r2, r2, #8
 8004d98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d9e:	223f      	movs	r2, #63	; 0x3f
 8004da0:	409a      	lsls	r2, r3
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d07e      	beq.n	8004ebc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	4798      	blx	r3
        }
        return;
 8004dc6:	e079      	b.n	8004ebc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d01d      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10d      	bne.n	8004e00 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d031      	beq.n	8004e50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	4798      	blx	r3
 8004df4:	e02c      	b.n	8004e50 <HAL_DMA_IRQHandler+0x2a0>
 8004df6:	bf00      	nop
 8004df8:	20000004 	.word	0x20000004
 8004dfc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d023      	beq.n	8004e50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	4798      	blx	r3
 8004e10:	e01e      	b.n	8004e50 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10f      	bne.n	8004e40 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0210 	bic.w	r2, r2, #16
 8004e2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d032      	beq.n	8004ebe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d022      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2205      	movs	r2, #5
 8004e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0201 	bic.w	r2, r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	60bb      	str	r3, [r7, #8]
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d307      	bcc.n	8004e98 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1f2      	bne.n	8004e7c <HAL_DMA_IRQHandler+0x2cc>
 8004e96:	e000      	b.n	8004e9a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004e98:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d005      	beq.n	8004ebe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	4798      	blx	r3
 8004eba:	e000      	b.n	8004ebe <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ebc:	bf00      	nop
    }
  }
}
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ee0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	2b40      	cmp	r3, #64	; 0x40
 8004ef0:	d108      	bne.n	8004f04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f02:	e007      	b.n	8004f14 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	60da      	str	r2, [r3, #12]
}
 8004f14:	bf00      	nop
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	3b10      	subs	r3, #16
 8004f30:	4a14      	ldr	r2, [pc, #80]	; (8004f84 <DMA_CalcBaseAndBitshift+0x64>)
 8004f32:	fba2 2303 	umull	r2, r3, r2, r3
 8004f36:	091b      	lsrs	r3, r3, #4
 8004f38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f3a:	4a13      	ldr	r2, [pc, #76]	; (8004f88 <DMA_CalcBaseAndBitshift+0x68>)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4413      	add	r3, r2
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	461a      	mov	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2b03      	cmp	r3, #3
 8004f4c:	d909      	bls.n	8004f62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f56:	f023 0303 	bic.w	r3, r3, #3
 8004f5a:	1d1a      	adds	r2, r3, #4
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	659a      	str	r2, [r3, #88]	; 0x58
 8004f60:	e007      	b.n	8004f72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f6a:	f023 0303 	bic.w	r3, r3, #3
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	aaaaaaab 	.word	0xaaaaaaab
 8004f88:	08012664 	.word	0x08012664

08004f8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f94:	2300      	movs	r3, #0
 8004f96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d11f      	bne.n	8004fe6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b03      	cmp	r3, #3
 8004faa:	d856      	bhi.n	800505a <DMA_CheckFifoParam+0xce>
 8004fac:	a201      	add	r2, pc, #4	; (adr r2, 8004fb4 <DMA_CheckFifoParam+0x28>)
 8004fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb2:	bf00      	nop
 8004fb4:	08004fc5 	.word	0x08004fc5
 8004fb8:	08004fd7 	.word	0x08004fd7
 8004fbc:	08004fc5 	.word	0x08004fc5
 8004fc0:	0800505b 	.word	0x0800505b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d046      	beq.n	800505e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fd4:	e043      	b.n	800505e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fde:	d140      	bne.n	8005062 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fe4:	e03d      	b.n	8005062 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fee:	d121      	bne.n	8005034 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	2b03      	cmp	r3, #3
 8004ff4:	d837      	bhi.n	8005066 <DMA_CheckFifoParam+0xda>
 8004ff6:	a201      	add	r2, pc, #4	; (adr r2, 8004ffc <DMA_CheckFifoParam+0x70>)
 8004ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffc:	0800500d 	.word	0x0800500d
 8005000:	08005013 	.word	0x08005013
 8005004:	0800500d 	.word	0x0800500d
 8005008:	08005025 	.word	0x08005025
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	73fb      	strb	r3, [r7, #15]
      break;
 8005010:	e030      	b.n	8005074 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005016:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d025      	beq.n	800506a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005022:	e022      	b.n	800506a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005028:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800502c:	d11f      	bne.n	800506e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005032:	e01c      	b.n	800506e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	2b02      	cmp	r3, #2
 8005038:	d903      	bls.n	8005042 <DMA_CheckFifoParam+0xb6>
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2b03      	cmp	r3, #3
 800503e:	d003      	beq.n	8005048 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005040:	e018      	b.n	8005074 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	73fb      	strb	r3, [r7, #15]
      break;
 8005046:	e015      	b.n	8005074 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00e      	beq.n	8005072 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	73fb      	strb	r3, [r7, #15]
      break;
 8005058:	e00b      	b.n	8005072 <DMA_CheckFifoParam+0xe6>
      break;
 800505a:	bf00      	nop
 800505c:	e00a      	b.n	8005074 <DMA_CheckFifoParam+0xe8>
      break;
 800505e:	bf00      	nop
 8005060:	e008      	b.n	8005074 <DMA_CheckFifoParam+0xe8>
      break;
 8005062:	bf00      	nop
 8005064:	e006      	b.n	8005074 <DMA_CheckFifoParam+0xe8>
      break;
 8005066:	bf00      	nop
 8005068:	e004      	b.n	8005074 <DMA_CheckFifoParam+0xe8>
      break;
 800506a:	bf00      	nop
 800506c:	e002      	b.n	8005074 <DMA_CheckFifoParam+0xe8>
      break;   
 800506e:	bf00      	nop
 8005070:	e000      	b.n	8005074 <DMA_CheckFifoParam+0xe8>
      break;
 8005072:	bf00      	nop
    }
  } 
  
  return status; 
 8005074:	7bfb      	ldrb	r3, [r7, #15]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop

08005084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005084:	b480      	push	{r7}
 8005086:	b089      	sub	sp, #36	; 0x24
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800508e:	2300      	movs	r3, #0
 8005090:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005092:	2300      	movs	r3, #0
 8005094:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005096:	2300      	movs	r3, #0
 8005098:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800509a:	2300      	movs	r3, #0
 800509c:	61fb      	str	r3, [r7, #28]
 800509e:	e16b      	b.n	8005378 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050a0:	2201      	movs	r2, #1
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4013      	ands	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	f040 815a 	bne.w	8005372 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f003 0303 	and.w	r3, r3, #3
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d005      	beq.n	80050d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d130      	bne.n	8005138 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	2203      	movs	r2, #3
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	43db      	mvns	r3, r3
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	4013      	ands	r3, r2
 80050ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	68da      	ldr	r2, [r3, #12]
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	fa02 f303 	lsl.w	r3, r2, r3
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800510c:	2201      	movs	r2, #1
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	fa02 f303 	lsl.w	r3, r2, r3
 8005114:	43db      	mvns	r3, r3
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	4013      	ands	r3, r2
 800511a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	091b      	lsrs	r3, r3, #4
 8005122:	f003 0201 	and.w	r2, r3, #1
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	4313      	orrs	r3, r2
 8005130:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f003 0303 	and.w	r3, r3, #3
 8005140:	2b03      	cmp	r3, #3
 8005142:	d017      	beq.n	8005174 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	2203      	movs	r2, #3
 8005150:	fa02 f303 	lsl.w	r3, r2, r3
 8005154:	43db      	mvns	r3, r3
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	4013      	ands	r3, r2
 800515a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	fa02 f303 	lsl.w	r3, r2, r3
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	4313      	orrs	r3, r2
 800516c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f003 0303 	and.w	r3, r3, #3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d123      	bne.n	80051c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	08da      	lsrs	r2, r3, #3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3208      	adds	r2, #8
 8005188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800518c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	220f      	movs	r2, #15
 8005198:	fa02 f303 	lsl.w	r3, r2, r3
 800519c:	43db      	mvns	r3, r3
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	4013      	ands	r3, r2
 80051a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	fa02 f303 	lsl.w	r3, r2, r3
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	08da      	lsrs	r2, r3, #3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	3208      	adds	r2, #8
 80051c2:	69b9      	ldr	r1, [r7, #24]
 80051c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	2203      	movs	r2, #3
 80051d4:	fa02 f303 	lsl.w	r3, r2, r3
 80051d8:	43db      	mvns	r3, r3
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	4013      	ands	r3, r2
 80051de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f003 0203 	and.w	r2, r3, #3
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	fa02 f303 	lsl.w	r3, r2, r3
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 80b4 	beq.w	8005372 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800520a:	2300      	movs	r3, #0
 800520c:	60fb      	str	r3, [r7, #12]
 800520e:	4b60      	ldr	r3, [pc, #384]	; (8005390 <HAL_GPIO_Init+0x30c>)
 8005210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005212:	4a5f      	ldr	r2, [pc, #380]	; (8005390 <HAL_GPIO_Init+0x30c>)
 8005214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005218:	6453      	str	r3, [r2, #68]	; 0x44
 800521a:	4b5d      	ldr	r3, [pc, #372]	; (8005390 <HAL_GPIO_Init+0x30c>)
 800521c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005226:	4a5b      	ldr	r2, [pc, #364]	; (8005394 <HAL_GPIO_Init+0x310>)
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	089b      	lsrs	r3, r3, #2
 800522c:	3302      	adds	r3, #2
 800522e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005232:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	f003 0303 	and.w	r3, r3, #3
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	220f      	movs	r2, #15
 800523e:	fa02 f303 	lsl.w	r3, r2, r3
 8005242:	43db      	mvns	r3, r3
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	4013      	ands	r3, r2
 8005248:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a52      	ldr	r2, [pc, #328]	; (8005398 <HAL_GPIO_Init+0x314>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d02b      	beq.n	80052aa <HAL_GPIO_Init+0x226>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a51      	ldr	r2, [pc, #324]	; (800539c <HAL_GPIO_Init+0x318>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d025      	beq.n	80052a6 <HAL_GPIO_Init+0x222>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a50      	ldr	r2, [pc, #320]	; (80053a0 <HAL_GPIO_Init+0x31c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d01f      	beq.n	80052a2 <HAL_GPIO_Init+0x21e>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a4f      	ldr	r2, [pc, #316]	; (80053a4 <HAL_GPIO_Init+0x320>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d019      	beq.n	800529e <HAL_GPIO_Init+0x21a>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a4e      	ldr	r2, [pc, #312]	; (80053a8 <HAL_GPIO_Init+0x324>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d013      	beq.n	800529a <HAL_GPIO_Init+0x216>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a4d      	ldr	r2, [pc, #308]	; (80053ac <HAL_GPIO_Init+0x328>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00d      	beq.n	8005296 <HAL_GPIO_Init+0x212>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a4c      	ldr	r2, [pc, #304]	; (80053b0 <HAL_GPIO_Init+0x32c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d007      	beq.n	8005292 <HAL_GPIO_Init+0x20e>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a4b      	ldr	r2, [pc, #300]	; (80053b4 <HAL_GPIO_Init+0x330>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d101      	bne.n	800528e <HAL_GPIO_Init+0x20a>
 800528a:	2307      	movs	r3, #7
 800528c:	e00e      	b.n	80052ac <HAL_GPIO_Init+0x228>
 800528e:	2308      	movs	r3, #8
 8005290:	e00c      	b.n	80052ac <HAL_GPIO_Init+0x228>
 8005292:	2306      	movs	r3, #6
 8005294:	e00a      	b.n	80052ac <HAL_GPIO_Init+0x228>
 8005296:	2305      	movs	r3, #5
 8005298:	e008      	b.n	80052ac <HAL_GPIO_Init+0x228>
 800529a:	2304      	movs	r3, #4
 800529c:	e006      	b.n	80052ac <HAL_GPIO_Init+0x228>
 800529e:	2303      	movs	r3, #3
 80052a0:	e004      	b.n	80052ac <HAL_GPIO_Init+0x228>
 80052a2:	2302      	movs	r3, #2
 80052a4:	e002      	b.n	80052ac <HAL_GPIO_Init+0x228>
 80052a6:	2301      	movs	r3, #1
 80052a8:	e000      	b.n	80052ac <HAL_GPIO_Init+0x228>
 80052aa:	2300      	movs	r3, #0
 80052ac:	69fa      	ldr	r2, [r7, #28]
 80052ae:	f002 0203 	and.w	r2, r2, #3
 80052b2:	0092      	lsls	r2, r2, #2
 80052b4:	4093      	lsls	r3, r2
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052bc:	4935      	ldr	r1, [pc, #212]	; (8005394 <HAL_GPIO_Init+0x310>)
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	089b      	lsrs	r3, r3, #2
 80052c2:	3302      	adds	r3, #2
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052ca:	4b3b      	ldr	r3, [pc, #236]	; (80053b8 <HAL_GPIO_Init+0x334>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	43db      	mvns	r3, r3
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	4013      	ands	r3, r2
 80052d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052ee:	4a32      	ldr	r2, [pc, #200]	; (80053b8 <HAL_GPIO_Init+0x334>)
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052f4:	4b30      	ldr	r3, [pc, #192]	; (80053b8 <HAL_GPIO_Init+0x334>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	43db      	mvns	r3, r3
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	4013      	ands	r3, r2
 8005302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	4313      	orrs	r3, r2
 8005316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005318:	4a27      	ldr	r2, [pc, #156]	; (80053b8 <HAL_GPIO_Init+0x334>)
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800531e:	4b26      	ldr	r3, [pc, #152]	; (80053b8 <HAL_GPIO_Init+0x334>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	43db      	mvns	r3, r3
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	4013      	ands	r3, r2
 800532c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	4313      	orrs	r3, r2
 8005340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005342:	4a1d      	ldr	r2, [pc, #116]	; (80053b8 <HAL_GPIO_Init+0x334>)
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005348:	4b1b      	ldr	r3, [pc, #108]	; (80053b8 <HAL_GPIO_Init+0x334>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	43db      	mvns	r3, r3
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	4013      	ands	r3, r2
 8005356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800536c:	4a12      	ldr	r2, [pc, #72]	; (80053b8 <HAL_GPIO_Init+0x334>)
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	3301      	adds	r3, #1
 8005376:	61fb      	str	r3, [r7, #28]
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	2b0f      	cmp	r3, #15
 800537c:	f67f ae90 	bls.w	80050a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005380:	bf00      	nop
 8005382:	bf00      	nop
 8005384:	3724      	adds	r7, #36	; 0x24
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	40023800 	.word	0x40023800
 8005394:	40013800 	.word	0x40013800
 8005398:	40020000 	.word	0x40020000
 800539c:	40020400 	.word	0x40020400
 80053a0:	40020800 	.word	0x40020800
 80053a4:	40020c00 	.word	0x40020c00
 80053a8:	40021000 	.word	0x40021000
 80053ac:	40021400 	.word	0x40021400
 80053b0:	40021800 	.word	0x40021800
 80053b4:	40021c00 	.word	0x40021c00
 80053b8:	40013c00 	.word	0x40013c00

080053bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	460b      	mov	r3, r1
 80053c6:	807b      	strh	r3, [r7, #2]
 80053c8:	4613      	mov	r3, r2
 80053ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053cc:	787b      	ldrb	r3, [r7, #1]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053d2:	887a      	ldrh	r2, [r7, #2]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80053d8:	e003      	b.n	80053e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80053da:	887b      	ldrh	r3, [r7, #2]
 80053dc:	041a      	lsls	r2, r3, #16
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	619a      	str	r2, [r3, #24]
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b085      	sub	sp, #20
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	460b      	mov	r3, r1
 80053f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005400:	887a      	ldrh	r2, [r7, #2]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	4013      	ands	r3, r2
 8005406:	041a      	lsls	r2, r3, #16
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	43d9      	mvns	r1, r3
 800540c:	887b      	ldrh	r3, [r7, #2]
 800540e:	400b      	ands	r3, r1
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	619a      	str	r2, [r3, #24]
}
 8005416:	bf00      	nop
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005422:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005424:	b08f      	sub	sp, #60	; 0x3c
 8005426:	af0a      	add	r7, sp, #40	; 0x28
 8005428:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d101      	bne.n	8005434 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e054      	b.n	80054de <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f00b fbde 	bl	8010c10 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2203      	movs	r2, #3
 8005458:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005464:	2b00      	cmp	r3, #0
 8005466:	d102      	bne.n	800546e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4618      	mov	r0, r3
 8005474:	f004 fdcc 	bl	800a010 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	603b      	str	r3, [r7, #0]
 800547e:	687e      	ldr	r6, [r7, #4]
 8005480:	466d      	mov	r5, sp
 8005482:	f106 0410 	add.w	r4, r6, #16
 8005486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005488:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800548a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800548c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800548e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005492:	e885 0003 	stmia.w	r5, {r0, r1}
 8005496:	1d33      	adds	r3, r6, #4
 8005498:	cb0e      	ldmia	r3, {r1, r2, r3}
 800549a:	6838      	ldr	r0, [r7, #0]
 800549c:	f004 fd46 	bl	8009f2c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2101      	movs	r1, #1
 80054a6:	4618      	mov	r0, r3
 80054a8:	f004 fdc3 	bl	800a032 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	603b      	str	r3, [r7, #0]
 80054b2:	687e      	ldr	r6, [r7, #4]
 80054b4:	466d      	mov	r5, sp
 80054b6:	f106 0410 	add.w	r4, r6, #16
 80054ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80054c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80054ca:	1d33      	adds	r3, r6, #4
 80054cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054ce:	6838      	ldr	r0, [r7, #0]
 80054d0:	f004 ff4c 	bl	800a36c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054e6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80054e6:	b590      	push	{r4, r7, lr}
 80054e8:	b089      	sub	sp, #36	; 0x24
 80054ea:	af04      	add	r7, sp, #16
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	4608      	mov	r0, r1
 80054f0:	4611      	mov	r1, r2
 80054f2:	461a      	mov	r2, r3
 80054f4:	4603      	mov	r3, r0
 80054f6:	70fb      	strb	r3, [r7, #3]
 80054f8:	460b      	mov	r3, r1
 80054fa:	70bb      	strb	r3, [r7, #2]
 80054fc:	4613      	mov	r3, r2
 80054fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005506:	2b01      	cmp	r3, #1
 8005508:	d101      	bne.n	800550e <HAL_HCD_HC_Init+0x28>
 800550a:	2302      	movs	r3, #2
 800550c:	e076      	b.n	80055fc <HAL_HCD_HC_Init+0x116>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8005516:	78fb      	ldrb	r3, [r7, #3]
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	212c      	movs	r1, #44	; 0x2c
 800551c:	fb01 f303 	mul.w	r3, r1, r3
 8005520:	4413      	add	r3, r2
 8005522:	333d      	adds	r3, #61	; 0x3d
 8005524:	2200      	movs	r2, #0
 8005526:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005528:	78fb      	ldrb	r3, [r7, #3]
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	212c      	movs	r1, #44	; 0x2c
 800552e:	fb01 f303 	mul.w	r3, r1, r3
 8005532:	4413      	add	r3, r2
 8005534:	3338      	adds	r3, #56	; 0x38
 8005536:	787a      	ldrb	r2, [r7, #1]
 8005538:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800553a:	78fb      	ldrb	r3, [r7, #3]
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	212c      	movs	r1, #44	; 0x2c
 8005540:	fb01 f303 	mul.w	r3, r1, r3
 8005544:	4413      	add	r3, r2
 8005546:	3340      	adds	r3, #64	; 0x40
 8005548:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800554a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800554c:	78fb      	ldrb	r3, [r7, #3]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	212c      	movs	r1, #44	; 0x2c
 8005552:	fb01 f303 	mul.w	r3, r1, r3
 8005556:	4413      	add	r3, r2
 8005558:	3339      	adds	r3, #57	; 0x39
 800555a:	78fa      	ldrb	r2, [r7, #3]
 800555c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800555e:	78fb      	ldrb	r3, [r7, #3]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	212c      	movs	r1, #44	; 0x2c
 8005564:	fb01 f303 	mul.w	r3, r1, r3
 8005568:	4413      	add	r3, r2
 800556a:	333f      	adds	r3, #63	; 0x3f
 800556c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005570:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005572:	78fb      	ldrb	r3, [r7, #3]
 8005574:	78ba      	ldrb	r2, [r7, #2]
 8005576:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800557a:	b2d0      	uxtb	r0, r2
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	212c      	movs	r1, #44	; 0x2c
 8005580:	fb01 f303 	mul.w	r3, r1, r3
 8005584:	4413      	add	r3, r2
 8005586:	333a      	adds	r3, #58	; 0x3a
 8005588:	4602      	mov	r2, r0
 800558a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800558c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005590:	2b00      	cmp	r3, #0
 8005592:	da09      	bge.n	80055a8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005594:	78fb      	ldrb	r3, [r7, #3]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	212c      	movs	r1, #44	; 0x2c
 800559a:	fb01 f303 	mul.w	r3, r1, r3
 800559e:	4413      	add	r3, r2
 80055a0:	333b      	adds	r3, #59	; 0x3b
 80055a2:	2201      	movs	r2, #1
 80055a4:	701a      	strb	r2, [r3, #0]
 80055a6:	e008      	b.n	80055ba <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80055a8:	78fb      	ldrb	r3, [r7, #3]
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	212c      	movs	r1, #44	; 0x2c
 80055ae:	fb01 f303 	mul.w	r3, r1, r3
 80055b2:	4413      	add	r3, r2
 80055b4:	333b      	adds	r3, #59	; 0x3b
 80055b6:	2200      	movs	r2, #0
 80055b8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80055ba:	78fb      	ldrb	r3, [r7, #3]
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	212c      	movs	r1, #44	; 0x2c
 80055c0:	fb01 f303 	mul.w	r3, r1, r3
 80055c4:	4413      	add	r3, r2
 80055c6:	333c      	adds	r3, #60	; 0x3c
 80055c8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80055cc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	787c      	ldrb	r4, [r7, #1]
 80055d4:	78ba      	ldrb	r2, [r7, #2]
 80055d6:	78f9      	ldrb	r1, [r7, #3]
 80055d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80055da:	9302      	str	r3, [sp, #8]
 80055dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80055e0:	9301      	str	r3, [sp, #4]
 80055e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	4623      	mov	r3, r4
 80055ea:	f005 f845 	bl	800a678 <USB_HC_Init>
 80055ee:	4603      	mov	r3, r0
 80055f0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80055fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	bd90      	pop	{r4, r7, pc}

08005604 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	460b      	mov	r3, r1
 800560e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800561a:	2b01      	cmp	r3, #1
 800561c:	d101      	bne.n	8005622 <HAL_HCD_HC_Halt+0x1e>
 800561e:	2302      	movs	r3, #2
 8005620:	e00f      	b.n	8005642 <HAL_HCD_HC_Halt+0x3e>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	78fa      	ldrb	r2, [r7, #3]
 8005630:	4611      	mov	r1, r2
 8005632:	4618      	mov	r0, r3
 8005634:	f005 fa95 	bl	800ab62 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005640:	7bfb      	ldrb	r3, [r7, #15]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
	...

0800564c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	4608      	mov	r0, r1
 8005656:	4611      	mov	r1, r2
 8005658:	461a      	mov	r2, r3
 800565a:	4603      	mov	r3, r0
 800565c:	70fb      	strb	r3, [r7, #3]
 800565e:	460b      	mov	r3, r1
 8005660:	70bb      	strb	r3, [r7, #2]
 8005662:	4613      	mov	r3, r2
 8005664:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005666:	78fb      	ldrb	r3, [r7, #3]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	212c      	movs	r1, #44	; 0x2c
 800566c:	fb01 f303 	mul.w	r3, r1, r3
 8005670:	4413      	add	r3, r2
 8005672:	333b      	adds	r3, #59	; 0x3b
 8005674:	78ba      	ldrb	r2, [r7, #2]
 8005676:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005678:	78fb      	ldrb	r3, [r7, #3]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	212c      	movs	r1, #44	; 0x2c
 800567e:	fb01 f303 	mul.w	r3, r1, r3
 8005682:	4413      	add	r3, r2
 8005684:	333f      	adds	r3, #63	; 0x3f
 8005686:	787a      	ldrb	r2, [r7, #1]
 8005688:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800568a:	7c3b      	ldrb	r3, [r7, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d112      	bne.n	80056b6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005690:	78fb      	ldrb	r3, [r7, #3]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	212c      	movs	r1, #44	; 0x2c
 8005696:	fb01 f303 	mul.w	r3, r1, r3
 800569a:	4413      	add	r3, r2
 800569c:	3342      	adds	r3, #66	; 0x42
 800569e:	2203      	movs	r2, #3
 80056a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80056a2:	78fb      	ldrb	r3, [r7, #3]
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	212c      	movs	r1, #44	; 0x2c
 80056a8:	fb01 f303 	mul.w	r3, r1, r3
 80056ac:	4413      	add	r3, r2
 80056ae:	333d      	adds	r3, #61	; 0x3d
 80056b0:	7f3a      	ldrb	r2, [r7, #28]
 80056b2:	701a      	strb	r2, [r3, #0]
 80056b4:	e008      	b.n	80056c8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80056b6:	78fb      	ldrb	r3, [r7, #3]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	212c      	movs	r1, #44	; 0x2c
 80056bc:	fb01 f303 	mul.w	r3, r1, r3
 80056c0:	4413      	add	r3, r2
 80056c2:	3342      	adds	r3, #66	; 0x42
 80056c4:	2202      	movs	r2, #2
 80056c6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80056c8:	787b      	ldrb	r3, [r7, #1]
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	f200 80c6 	bhi.w	800585c <HAL_HCD_HC_SubmitRequest+0x210>
 80056d0:	a201      	add	r2, pc, #4	; (adr r2, 80056d8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80056d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d6:	bf00      	nop
 80056d8:	080056e9 	.word	0x080056e9
 80056dc:	08005849 	.word	0x08005849
 80056e0:	0800574d 	.word	0x0800574d
 80056e4:	080057cb 	.word	0x080057cb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80056e8:	7c3b      	ldrb	r3, [r7, #16]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	f040 80b8 	bne.w	8005860 <HAL_HCD_HC_SubmitRequest+0x214>
 80056f0:	78bb      	ldrb	r3, [r7, #2]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f040 80b4 	bne.w	8005860 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80056f8:	8b3b      	ldrh	r3, [r7, #24]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d108      	bne.n	8005710 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80056fe:	78fb      	ldrb	r3, [r7, #3]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	212c      	movs	r1, #44	; 0x2c
 8005704:	fb01 f303 	mul.w	r3, r1, r3
 8005708:	4413      	add	r3, r2
 800570a:	3355      	adds	r3, #85	; 0x55
 800570c:	2201      	movs	r2, #1
 800570e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005710:	78fb      	ldrb	r3, [r7, #3]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	212c      	movs	r1, #44	; 0x2c
 8005716:	fb01 f303 	mul.w	r3, r1, r3
 800571a:	4413      	add	r3, r2
 800571c:	3355      	adds	r3, #85	; 0x55
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d109      	bne.n	8005738 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005724:	78fb      	ldrb	r3, [r7, #3]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	212c      	movs	r1, #44	; 0x2c
 800572a:	fb01 f303 	mul.w	r3, r1, r3
 800572e:	4413      	add	r3, r2
 8005730:	3342      	adds	r3, #66	; 0x42
 8005732:	2200      	movs	r2, #0
 8005734:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005736:	e093      	b.n	8005860 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005738:	78fb      	ldrb	r3, [r7, #3]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	212c      	movs	r1, #44	; 0x2c
 800573e:	fb01 f303 	mul.w	r3, r1, r3
 8005742:	4413      	add	r3, r2
 8005744:	3342      	adds	r3, #66	; 0x42
 8005746:	2202      	movs	r2, #2
 8005748:	701a      	strb	r2, [r3, #0]
      break;
 800574a:	e089      	b.n	8005860 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800574c:	78bb      	ldrb	r3, [r7, #2]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d11d      	bne.n	800578e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005752:	78fb      	ldrb	r3, [r7, #3]
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	212c      	movs	r1, #44	; 0x2c
 8005758:	fb01 f303 	mul.w	r3, r1, r3
 800575c:	4413      	add	r3, r2
 800575e:	3355      	adds	r3, #85	; 0x55
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d109      	bne.n	800577a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005766:	78fb      	ldrb	r3, [r7, #3]
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	212c      	movs	r1, #44	; 0x2c
 800576c:	fb01 f303 	mul.w	r3, r1, r3
 8005770:	4413      	add	r3, r2
 8005772:	3342      	adds	r3, #66	; 0x42
 8005774:	2200      	movs	r2, #0
 8005776:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005778:	e073      	b.n	8005862 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800577a:	78fb      	ldrb	r3, [r7, #3]
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	212c      	movs	r1, #44	; 0x2c
 8005780:	fb01 f303 	mul.w	r3, r1, r3
 8005784:	4413      	add	r3, r2
 8005786:	3342      	adds	r3, #66	; 0x42
 8005788:	2202      	movs	r2, #2
 800578a:	701a      	strb	r2, [r3, #0]
      break;
 800578c:	e069      	b.n	8005862 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800578e:	78fb      	ldrb	r3, [r7, #3]
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	212c      	movs	r1, #44	; 0x2c
 8005794:	fb01 f303 	mul.w	r3, r1, r3
 8005798:	4413      	add	r3, r2
 800579a:	3354      	adds	r3, #84	; 0x54
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d109      	bne.n	80057b6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80057a2:	78fb      	ldrb	r3, [r7, #3]
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	212c      	movs	r1, #44	; 0x2c
 80057a8:	fb01 f303 	mul.w	r3, r1, r3
 80057ac:	4413      	add	r3, r2
 80057ae:	3342      	adds	r3, #66	; 0x42
 80057b0:	2200      	movs	r2, #0
 80057b2:	701a      	strb	r2, [r3, #0]
      break;
 80057b4:	e055      	b.n	8005862 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80057b6:	78fb      	ldrb	r3, [r7, #3]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	212c      	movs	r1, #44	; 0x2c
 80057bc:	fb01 f303 	mul.w	r3, r1, r3
 80057c0:	4413      	add	r3, r2
 80057c2:	3342      	adds	r3, #66	; 0x42
 80057c4:	2202      	movs	r2, #2
 80057c6:	701a      	strb	r2, [r3, #0]
      break;
 80057c8:	e04b      	b.n	8005862 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80057ca:	78bb      	ldrb	r3, [r7, #2]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d11d      	bne.n	800580c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80057d0:	78fb      	ldrb	r3, [r7, #3]
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	212c      	movs	r1, #44	; 0x2c
 80057d6:	fb01 f303 	mul.w	r3, r1, r3
 80057da:	4413      	add	r3, r2
 80057dc:	3355      	adds	r3, #85	; 0x55
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d109      	bne.n	80057f8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80057e4:	78fb      	ldrb	r3, [r7, #3]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	212c      	movs	r1, #44	; 0x2c
 80057ea:	fb01 f303 	mul.w	r3, r1, r3
 80057ee:	4413      	add	r3, r2
 80057f0:	3342      	adds	r3, #66	; 0x42
 80057f2:	2200      	movs	r2, #0
 80057f4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80057f6:	e034      	b.n	8005862 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80057f8:	78fb      	ldrb	r3, [r7, #3]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	212c      	movs	r1, #44	; 0x2c
 80057fe:	fb01 f303 	mul.w	r3, r1, r3
 8005802:	4413      	add	r3, r2
 8005804:	3342      	adds	r3, #66	; 0x42
 8005806:	2202      	movs	r2, #2
 8005808:	701a      	strb	r2, [r3, #0]
      break;
 800580a:	e02a      	b.n	8005862 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800580c:	78fb      	ldrb	r3, [r7, #3]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	212c      	movs	r1, #44	; 0x2c
 8005812:	fb01 f303 	mul.w	r3, r1, r3
 8005816:	4413      	add	r3, r2
 8005818:	3354      	adds	r3, #84	; 0x54
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d109      	bne.n	8005834 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005820:	78fb      	ldrb	r3, [r7, #3]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	212c      	movs	r1, #44	; 0x2c
 8005826:	fb01 f303 	mul.w	r3, r1, r3
 800582a:	4413      	add	r3, r2
 800582c:	3342      	adds	r3, #66	; 0x42
 800582e:	2200      	movs	r2, #0
 8005830:	701a      	strb	r2, [r3, #0]
      break;
 8005832:	e016      	b.n	8005862 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005834:	78fb      	ldrb	r3, [r7, #3]
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	212c      	movs	r1, #44	; 0x2c
 800583a:	fb01 f303 	mul.w	r3, r1, r3
 800583e:	4413      	add	r3, r2
 8005840:	3342      	adds	r3, #66	; 0x42
 8005842:	2202      	movs	r2, #2
 8005844:	701a      	strb	r2, [r3, #0]
      break;
 8005846:	e00c      	b.n	8005862 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005848:	78fb      	ldrb	r3, [r7, #3]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	212c      	movs	r1, #44	; 0x2c
 800584e:	fb01 f303 	mul.w	r3, r1, r3
 8005852:	4413      	add	r3, r2
 8005854:	3342      	adds	r3, #66	; 0x42
 8005856:	2200      	movs	r2, #0
 8005858:	701a      	strb	r2, [r3, #0]
      break;
 800585a:	e002      	b.n	8005862 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800585c:	bf00      	nop
 800585e:	e000      	b.n	8005862 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8005860:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005862:	78fb      	ldrb	r3, [r7, #3]
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	212c      	movs	r1, #44	; 0x2c
 8005868:	fb01 f303 	mul.w	r3, r1, r3
 800586c:	4413      	add	r3, r2
 800586e:	3344      	adds	r3, #68	; 0x44
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005874:	78fb      	ldrb	r3, [r7, #3]
 8005876:	8b3a      	ldrh	r2, [r7, #24]
 8005878:	6879      	ldr	r1, [r7, #4]
 800587a:	202c      	movs	r0, #44	; 0x2c
 800587c:	fb00 f303 	mul.w	r3, r0, r3
 8005880:	440b      	add	r3, r1
 8005882:	334c      	adds	r3, #76	; 0x4c
 8005884:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005886:	78fb      	ldrb	r3, [r7, #3]
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	212c      	movs	r1, #44	; 0x2c
 800588c:	fb01 f303 	mul.w	r3, r1, r3
 8005890:	4413      	add	r3, r2
 8005892:	3360      	adds	r3, #96	; 0x60
 8005894:	2200      	movs	r2, #0
 8005896:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005898:	78fb      	ldrb	r3, [r7, #3]
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	212c      	movs	r1, #44	; 0x2c
 800589e:	fb01 f303 	mul.w	r3, r1, r3
 80058a2:	4413      	add	r3, r2
 80058a4:	3350      	adds	r3, #80	; 0x50
 80058a6:	2200      	movs	r2, #0
 80058a8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80058aa:	78fb      	ldrb	r3, [r7, #3]
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	212c      	movs	r1, #44	; 0x2c
 80058b0:	fb01 f303 	mul.w	r3, r1, r3
 80058b4:	4413      	add	r3, r2
 80058b6:	3339      	adds	r3, #57	; 0x39
 80058b8:	78fa      	ldrb	r2, [r7, #3]
 80058ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80058bc:	78fb      	ldrb	r3, [r7, #3]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	212c      	movs	r1, #44	; 0x2c
 80058c2:	fb01 f303 	mul.w	r3, r1, r3
 80058c6:	4413      	add	r3, r2
 80058c8:	3361      	adds	r3, #97	; 0x61
 80058ca:	2200      	movs	r2, #0
 80058cc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6818      	ldr	r0, [r3, #0]
 80058d2:	78fb      	ldrb	r3, [r7, #3]
 80058d4:	222c      	movs	r2, #44	; 0x2c
 80058d6:	fb02 f303 	mul.w	r3, r2, r3
 80058da:	3338      	adds	r3, #56	; 0x38
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	18d1      	adds	r1, r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	461a      	mov	r2, r3
 80058e8:	f004 ffe8 	bl	800a8bc <USB_HC_StartXfer>
 80058ec:	4603      	mov	r3, r0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop

080058f8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f004 fce9 	bl	800a2e6 <USB_GetMode>
 8005914:	4603      	mov	r3, r0
 8005916:	2b01      	cmp	r3, #1
 8005918:	f040 80f6 	bne.w	8005b08 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4618      	mov	r0, r3
 8005922:	f004 fccd 	bl	800a2c0 <USB_ReadInterrupts>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 80ec 	beq.w	8005b06 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4618      	mov	r0, r3
 8005934:	f004 fcc4 	bl	800a2c0 <USB_ReadInterrupts>
 8005938:	4603      	mov	r3, r0
 800593a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800593e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005942:	d104      	bne.n	800594e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800594c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4618      	mov	r0, r3
 8005954:	f004 fcb4 	bl	800a2c0 <USB_ReadInterrupts>
 8005958:	4603      	mov	r3, r0
 800595a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800595e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005962:	d104      	bne.n	800596e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800596c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4618      	mov	r0, r3
 8005974:	f004 fca4 	bl	800a2c0 <USB_ReadInterrupts>
 8005978:	4603      	mov	r3, r0
 800597a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800597e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005982:	d104      	bne.n	800598e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800598c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4618      	mov	r0, r3
 8005994:	f004 fc94 	bl	800a2c0 <USB_ReadInterrupts>
 8005998:	4603      	mov	r3, r0
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d103      	bne.n	80059aa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2202      	movs	r2, #2
 80059a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f004 fc86 	bl	800a2c0 <USB_ReadInterrupts>
 80059b4:	4603      	mov	r3, r0
 80059b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059be:	d11c      	bne.n	80059fa <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80059c8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10f      	bne.n	80059fa <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80059da:	2110      	movs	r1, #16
 80059dc:	6938      	ldr	r0, [r7, #16]
 80059de:	f004 fb75 	bl	800a0cc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80059e2:	6938      	ldr	r0, [r7, #16]
 80059e4:	f004 fba6 	bl	800a134 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2101      	movs	r1, #1
 80059ee:	4618      	mov	r0, r3
 80059f0:	f004 fd7c 	bl	800a4ec <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f00b f989 	bl	8010d0c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f004 fc5e 	bl	800a2c0 <USB_ReadInterrupts>
 8005a04:	4603      	mov	r3, r0
 8005a06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a0e:	d102      	bne.n	8005a16 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f001 f89e 	bl	8006b52 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f004 fc50 	bl	800a2c0 <USB_ReadInterrupts>
 8005a20:	4603      	mov	r3, r0
 8005a22:	f003 0308 	and.w	r3, r3, #8
 8005a26:	2b08      	cmp	r3, #8
 8005a28:	d106      	bne.n	8005a38 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f00b f952 	bl	8010cd4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2208      	movs	r2, #8
 8005a36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f004 fc3f 	bl	800a2c0 <USB_ReadInterrupts>
 8005a42:	4603      	mov	r3, r0
 8005a44:	f003 0310 	and.w	r3, r3, #16
 8005a48:	2b10      	cmp	r3, #16
 8005a4a:	d101      	bne.n	8005a50 <HAL_HCD_IRQHandler+0x158>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e000      	b.n	8005a52 <HAL_HCD_IRQHandler+0x15a>
 8005a50:	2300      	movs	r3, #0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d012      	beq.n	8005a7c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	699a      	ldr	r2, [r3, #24]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f022 0210 	bic.w	r2, r2, #16
 8005a64:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 ffa1 	bl	80069ae <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699a      	ldr	r2, [r3, #24]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0210 	orr.w	r2, r2, #16
 8005a7a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f004 fc1d 	bl	800a2c0 <USB_ReadInterrupts>
 8005a86:	4603      	mov	r3, r0
 8005a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a90:	d13a      	bne.n	8005b08 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f005 f852 	bl	800ab40 <USB_HC_ReadInterrupt>
 8005a9c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	617b      	str	r3, [r7, #20]
 8005aa2:	e025      	b.n	8005af0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f003 030f 	and.w	r3, r3, #15
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d018      	beq.n	8005aea <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ace:	d106      	bne.n	8005ade <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f8ab 	bl	8005c32 <HCD_HC_IN_IRQHandler>
 8005adc:	e005      	b.n	8005aea <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 fbf9 	bl	80062dc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	3301      	adds	r3, #1
 8005aee:	617b      	str	r3, [r7, #20]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d3d4      	bcc.n	8005aa4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b02:	615a      	str	r2, [r3, #20]
 8005b04:	e000      	b.n	8005b08 <HAL_HCD_IRQHandler+0x210>
      return;
 8005b06:	bf00      	nop
    }
  }
}
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b082      	sub	sp, #8
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d101      	bne.n	8005b24 <HAL_HCD_Start+0x16>
 8005b20:	2302      	movs	r3, #2
 8005b22:	e013      	b.n	8005b4c <HAL_HCD_Start+0x3e>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2101      	movs	r1, #1
 8005b32:	4618      	mov	r0, r3
 8005b34:	f004 fd3e 	bl	800a5b4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f004 fa56 	bl	8009fee <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d101      	bne.n	8005b6a <HAL_HCD_Stop+0x16>
 8005b66:	2302      	movs	r3, #2
 8005b68:	e00d      	b.n	8005b86 <HAL_HCD_Stop+0x32>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f005 f92c 	bl	800add4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b082      	sub	sp, #8
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f004 fce0 	bl	800a560 <USB_ResetPort>
 8005ba0:	4603      	mov	r3, r0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005bb6:	78fb      	ldrb	r3, [r7, #3]
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	212c      	movs	r1, #44	; 0x2c
 8005bbc:	fb01 f303 	mul.w	r3, r1, r3
 8005bc0:	4413      	add	r3, r2
 8005bc2:	3360      	adds	r3, #96	; 0x60
 8005bc4:	781b      	ldrb	r3, [r3, #0]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b083      	sub	sp, #12
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	460b      	mov	r3, r1
 8005bdc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005bde:	78fb      	ldrb	r3, [r7, #3]
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	212c      	movs	r1, #44	; 0x2c
 8005be4:	fb01 f303 	mul.w	r3, r1, r3
 8005be8:	4413      	add	r3, r2
 8005bea:	3350      	adds	r3, #80	; 0x50
 8005bec:	681b      	ldr	r3, [r3, #0]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b082      	sub	sp, #8
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f004 fd24 	bl	800a654 <USB_GetCurrentFrame>
 8005c0c:	4603      	mov	r3, r0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b082      	sub	sp, #8
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f004 fcff 	bl	800a626 <USB_GetHostSpeed>
 8005c28:	4603      	mov	r3, r0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b086      	sub	sp, #24
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005c48:	78fb      	ldrb	r3, [r7, #3]
 8005c4a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f003 0304 	and.w	r3, r3, #4
 8005c5e:	2b04      	cmp	r3, #4
 8005c60:	d11a      	bne.n	8005c98 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c6e:	461a      	mov	r2, r3
 8005c70:	2304      	movs	r3, #4
 8005c72:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	212c      	movs	r1, #44	; 0x2c
 8005c7a:	fb01 f303 	mul.w	r3, r1, r3
 8005c7e:	4413      	add	r3, r2
 8005c80:	3361      	adds	r3, #97	; 0x61
 8005c82:	2206      	movs	r2, #6
 8005c84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	b2d2      	uxtb	r2, r2
 8005c8e:	4611      	mov	r1, r2
 8005c90:	4618      	mov	r0, r3
 8005c92:	f004 ff66 	bl	800ab62 <USB_HC_Halt>
 8005c96:	e0af      	b.n	8005df8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cae:	d11b      	bne.n	8005ce8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cc2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	212c      	movs	r1, #44	; 0x2c
 8005cca:	fb01 f303 	mul.w	r3, r1, r3
 8005cce:	4413      	add	r3, r2
 8005cd0:	3361      	adds	r3, #97	; 0x61
 8005cd2:	2207      	movs	r2, #7
 8005cd4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	b2d2      	uxtb	r2, r2
 8005cde:	4611      	mov	r1, r2
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f004 ff3e 	bl	800ab62 <USB_HC_Halt>
 8005ce6:	e087      	b.n	8005df8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f003 0320 	and.w	r3, r3, #32
 8005cfa:	2b20      	cmp	r3, #32
 8005cfc:	d109      	bne.n	8005d12 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	2320      	movs	r3, #32
 8005d0e:	6093      	str	r3, [r2, #8]
 8005d10:	e072      	b.n	8005df8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f003 0308 	and.w	r3, r3, #8
 8005d24:	2b08      	cmp	r3, #8
 8005d26:	d11a      	bne.n	8005d5e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d34:	461a      	mov	r2, r3
 8005d36:	2308      	movs	r3, #8
 8005d38:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	212c      	movs	r1, #44	; 0x2c
 8005d40:	fb01 f303 	mul.w	r3, r1, r3
 8005d44:	4413      	add	r3, r2
 8005d46:	3361      	adds	r3, #97	; 0x61
 8005d48:	2205      	movs	r2, #5
 8005d4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	4611      	mov	r1, r2
 8005d56:	4618      	mov	r0, r3
 8005d58:	f004 ff03 	bl	800ab62 <USB_HC_Halt>
 8005d5c:	e04c      	b.n	8005df8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d74:	d11b      	bne.n	8005dae <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d82:	461a      	mov	r2, r3
 8005d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d88:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	212c      	movs	r1, #44	; 0x2c
 8005d90:	fb01 f303 	mul.w	r3, r1, r3
 8005d94:	4413      	add	r3, r2
 8005d96:	3361      	adds	r3, #97	; 0x61
 8005d98:	2208      	movs	r2, #8
 8005d9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	4611      	mov	r1, r2
 8005da6:	4618      	mov	r0, r3
 8005da8:	f004 fedb 	bl	800ab62 <USB_HC_Halt>
 8005dac:	e024      	b.n	8005df8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc0:	2b80      	cmp	r3, #128	; 0x80
 8005dc2:	d119      	bne.n	8005df8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	2380      	movs	r3, #128	; 0x80
 8005dd4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	212c      	movs	r1, #44	; 0x2c
 8005ddc:	fb01 f303 	mul.w	r3, r1, r3
 8005de0:	4413      	add	r3, r2
 8005de2:	3361      	adds	r3, #97	; 0x61
 8005de4:	2206      	movs	r2, #6
 8005de6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	b2d2      	uxtb	r2, r2
 8005df0:	4611      	mov	r1, r2
 8005df2:	4618      	mov	r0, r3
 8005df4:	f004 feb5 	bl	800ab62 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e0e:	d112      	bne.n	8005e36 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	b2d2      	uxtb	r2, r2
 8005e18:	4611      	mov	r1, r2
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f004 fea1 	bl	800ab62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e32:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005e34:	e24e      	b.n	80062d4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	f040 80df 	bne.w	800600c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d019      	beq.n	8005e8a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	212c      	movs	r1, #44	; 0x2c
 8005e5c:	fb01 f303 	mul.w	r3, r1, r3
 8005e60:	4413      	add	r3, r2
 8005e62:	3348      	adds	r3, #72	; 0x48
 8005e64:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	0159      	lsls	r1, r3, #5
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	440b      	add	r3, r1
 8005e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005e78:	1ad2      	subs	r2, r2, r3
 8005e7a:	6879      	ldr	r1, [r7, #4]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	202c      	movs	r0, #44	; 0x2c
 8005e80:	fb00 f303 	mul.w	r3, r0, r3
 8005e84:	440b      	add	r3, r1
 8005e86:	3350      	adds	r3, #80	; 0x50
 8005e88:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	212c      	movs	r1, #44	; 0x2c
 8005e90:	fb01 f303 	mul.w	r3, r1, r3
 8005e94:	4413      	add	r3, r2
 8005e96:	3361      	adds	r3, #97	; 0x61
 8005e98:	2201      	movs	r2, #1
 8005e9a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	212c      	movs	r1, #44	; 0x2c
 8005ea2:	fb01 f303 	mul.w	r3, r1, r3
 8005ea6:	4413      	add	r3, r2
 8005ea8:	335c      	adds	r3, #92	; 0x5c
 8005eaa:	2200      	movs	r2, #0
 8005eac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eba:	461a      	mov	r2, r3
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	212c      	movs	r1, #44	; 0x2c
 8005ec6:	fb01 f303 	mul.w	r3, r1, r3
 8005eca:	4413      	add	r3, r2
 8005ecc:	333f      	adds	r3, #63	; 0x3f
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d009      	beq.n	8005ee8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	212c      	movs	r1, #44	; 0x2c
 8005eda:	fb01 f303 	mul.w	r3, r1, r3
 8005ede:	4413      	add	r3, r2
 8005ee0:	333f      	adds	r3, #63	; 0x3f
 8005ee2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d111      	bne.n	8005f0c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	4611      	mov	r1, r2
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f004 fe35 	bl	800ab62 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f04:	461a      	mov	r2, r3
 8005f06:	2310      	movs	r3, #16
 8005f08:	6093      	str	r3, [r2, #8]
 8005f0a:	e03a      	b.n	8005f82 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	212c      	movs	r1, #44	; 0x2c
 8005f12:	fb01 f303 	mul.w	r3, r1, r3
 8005f16:	4413      	add	r3, r2
 8005f18:	333f      	adds	r3, #63	; 0x3f
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	2b03      	cmp	r3, #3
 8005f1e:	d009      	beq.n	8005f34 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	212c      	movs	r1, #44	; 0x2c
 8005f26:	fb01 f303 	mul.w	r3, r1, r3
 8005f2a:	4413      	add	r3, r2
 8005f2c:	333f      	adds	r3, #63	; 0x3f
 8005f2e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d126      	bne.n	8005f82 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	0151      	lsls	r1, r2, #5
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	440a      	add	r2, r1
 8005f4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f52:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	212c      	movs	r1, #44	; 0x2c
 8005f5a:	fb01 f303 	mul.w	r3, r1, r3
 8005f5e:	4413      	add	r3, r2
 8005f60:	3360      	adds	r3, #96	; 0x60
 8005f62:	2201      	movs	r2, #1
 8005f64:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	b2d9      	uxtb	r1, r3
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	202c      	movs	r0, #44	; 0x2c
 8005f70:	fb00 f303 	mul.w	r3, r0, r3
 8005f74:	4413      	add	r3, r2
 8005f76:	3360      	adds	r3, #96	; 0x60
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f00a fed3 	bl	8010d28 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d12b      	bne.n	8005fe2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	212c      	movs	r1, #44	; 0x2c
 8005f90:	fb01 f303 	mul.w	r3, r1, r3
 8005f94:	4413      	add	r3, r2
 8005f96:	3348      	adds	r3, #72	; 0x48
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6879      	ldr	r1, [r7, #4]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	202c      	movs	r0, #44	; 0x2c
 8005fa0:	fb00 f202 	mul.w	r2, r0, r2
 8005fa4:	440a      	add	r2, r1
 8005fa6:	3240      	adds	r2, #64	; 0x40
 8005fa8:	8812      	ldrh	r2, [r2, #0]
 8005faa:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 818e 	beq.w	80062d4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	212c      	movs	r1, #44	; 0x2c
 8005fbe:	fb01 f303 	mul.w	r3, r1, r3
 8005fc2:	4413      	add	r3, r2
 8005fc4:	3354      	adds	r3, #84	; 0x54
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	f083 0301 	eor.w	r3, r3, #1
 8005fcc:	b2d8      	uxtb	r0, r3
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	212c      	movs	r1, #44	; 0x2c
 8005fd4:	fb01 f303 	mul.w	r3, r1, r3
 8005fd8:	4413      	add	r3, r2
 8005fda:	3354      	adds	r3, #84	; 0x54
 8005fdc:	4602      	mov	r2, r0
 8005fde:	701a      	strb	r2, [r3, #0]
}
 8005fe0:	e178      	b.n	80062d4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	212c      	movs	r1, #44	; 0x2c
 8005fe8:	fb01 f303 	mul.w	r3, r1, r3
 8005fec:	4413      	add	r3, r2
 8005fee:	3354      	adds	r3, #84	; 0x54
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	f083 0301 	eor.w	r3, r3, #1
 8005ff6:	b2d8      	uxtb	r0, r3
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	212c      	movs	r1, #44	; 0x2c
 8005ffe:	fb01 f303 	mul.w	r3, r1, r3
 8006002:	4413      	add	r3, r2
 8006004:	3354      	adds	r3, #84	; 0x54
 8006006:	4602      	mov	r2, r0
 8006008:	701a      	strb	r2, [r3, #0]
}
 800600a:	e163      	b.n	80062d4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	4413      	add	r3, r2
 8006014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b02      	cmp	r3, #2
 8006020:	f040 80f6 	bne.w	8006210 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	212c      	movs	r1, #44	; 0x2c
 800602a:	fb01 f303 	mul.w	r3, r1, r3
 800602e:	4413      	add	r3, r2
 8006030:	3361      	adds	r3, #97	; 0x61
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d109      	bne.n	800604c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	212c      	movs	r1, #44	; 0x2c
 800603e:	fb01 f303 	mul.w	r3, r1, r3
 8006042:	4413      	add	r3, r2
 8006044:	3360      	adds	r3, #96	; 0x60
 8006046:	2201      	movs	r2, #1
 8006048:	701a      	strb	r2, [r3, #0]
 800604a:	e0c9      	b.n	80061e0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	212c      	movs	r1, #44	; 0x2c
 8006052:	fb01 f303 	mul.w	r3, r1, r3
 8006056:	4413      	add	r3, r2
 8006058:	3361      	adds	r3, #97	; 0x61
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b05      	cmp	r3, #5
 800605e:	d109      	bne.n	8006074 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	212c      	movs	r1, #44	; 0x2c
 8006066:	fb01 f303 	mul.w	r3, r1, r3
 800606a:	4413      	add	r3, r2
 800606c:	3360      	adds	r3, #96	; 0x60
 800606e:	2205      	movs	r2, #5
 8006070:	701a      	strb	r2, [r3, #0]
 8006072:	e0b5      	b.n	80061e0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	212c      	movs	r1, #44	; 0x2c
 800607a:	fb01 f303 	mul.w	r3, r1, r3
 800607e:	4413      	add	r3, r2
 8006080:	3361      	adds	r3, #97	; 0x61
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b06      	cmp	r3, #6
 8006086:	d009      	beq.n	800609c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	212c      	movs	r1, #44	; 0x2c
 800608e:	fb01 f303 	mul.w	r3, r1, r3
 8006092:	4413      	add	r3, r2
 8006094:	3361      	adds	r3, #97	; 0x61
 8006096:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006098:	2b08      	cmp	r3, #8
 800609a:	d150      	bne.n	800613e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	212c      	movs	r1, #44	; 0x2c
 80060a2:	fb01 f303 	mul.w	r3, r1, r3
 80060a6:	4413      	add	r3, r2
 80060a8:	335c      	adds	r3, #92	; 0x5c
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	6879      	ldr	r1, [r7, #4]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	202c      	movs	r0, #44	; 0x2c
 80060b4:	fb00 f303 	mul.w	r3, r0, r3
 80060b8:	440b      	add	r3, r1
 80060ba:	335c      	adds	r3, #92	; 0x5c
 80060bc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	212c      	movs	r1, #44	; 0x2c
 80060c4:	fb01 f303 	mul.w	r3, r1, r3
 80060c8:	4413      	add	r3, r2
 80060ca:	335c      	adds	r3, #92	; 0x5c
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d912      	bls.n	80060f8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	212c      	movs	r1, #44	; 0x2c
 80060d8:	fb01 f303 	mul.w	r3, r1, r3
 80060dc:	4413      	add	r3, r2
 80060de:	335c      	adds	r3, #92	; 0x5c
 80060e0:	2200      	movs	r2, #0
 80060e2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	212c      	movs	r1, #44	; 0x2c
 80060ea:	fb01 f303 	mul.w	r3, r1, r3
 80060ee:	4413      	add	r3, r2
 80060f0:	3360      	adds	r3, #96	; 0x60
 80060f2:	2204      	movs	r2, #4
 80060f4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80060f6:	e073      	b.n	80061e0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	212c      	movs	r1, #44	; 0x2c
 80060fe:	fb01 f303 	mul.w	r3, r1, r3
 8006102:	4413      	add	r3, r2
 8006104:	3360      	adds	r3, #96	; 0x60
 8006106:	2202      	movs	r2, #2
 8006108:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	015a      	lsls	r2, r3, #5
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	4413      	add	r3, r2
 8006112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006120:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006128:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	015a      	lsls	r2, r3, #5
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	4413      	add	r3, r2
 8006132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006136:	461a      	mov	r2, r3
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800613c:	e050      	b.n	80061e0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	212c      	movs	r1, #44	; 0x2c
 8006144:	fb01 f303 	mul.w	r3, r1, r3
 8006148:	4413      	add	r3, r2
 800614a:	3361      	adds	r3, #97	; 0x61
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	2b03      	cmp	r3, #3
 8006150:	d122      	bne.n	8006198 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	212c      	movs	r1, #44	; 0x2c
 8006158:	fb01 f303 	mul.w	r3, r1, r3
 800615c:	4413      	add	r3, r2
 800615e:	3360      	adds	r3, #96	; 0x60
 8006160:	2202      	movs	r2, #2
 8006162:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	4413      	add	r3, r2
 800616c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800617a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006182:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	4413      	add	r3, r2
 800618c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006190:	461a      	mov	r2, r3
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	6013      	str	r3, [r2, #0]
 8006196:	e023      	b.n	80061e0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	212c      	movs	r1, #44	; 0x2c
 800619e:	fb01 f303 	mul.w	r3, r1, r3
 80061a2:	4413      	add	r3, r2
 80061a4:	3361      	adds	r3, #97	; 0x61
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	2b07      	cmp	r3, #7
 80061aa:	d119      	bne.n	80061e0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	212c      	movs	r1, #44	; 0x2c
 80061b2:	fb01 f303 	mul.w	r3, r1, r3
 80061b6:	4413      	add	r3, r2
 80061b8:	335c      	adds	r3, #92	; 0x5c
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	1c5a      	adds	r2, r3, #1
 80061be:	6879      	ldr	r1, [r7, #4]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	202c      	movs	r0, #44	; 0x2c
 80061c4:	fb00 f303 	mul.w	r3, r0, r3
 80061c8:	440b      	add	r3, r1
 80061ca:	335c      	adds	r3, #92	; 0x5c
 80061cc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	212c      	movs	r1, #44	; 0x2c
 80061d4:	fb01 f303 	mul.w	r3, r1, r3
 80061d8:	4413      	add	r3, r2
 80061da:	3360      	adds	r3, #96	; 0x60
 80061dc:	2204      	movs	r2, #4
 80061de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ec:	461a      	mov	r2, r3
 80061ee:	2302      	movs	r3, #2
 80061f0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	b2d9      	uxtb	r1, r3
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	202c      	movs	r0, #44	; 0x2c
 80061fc:	fb00 f303 	mul.w	r3, r0, r3
 8006200:	4413      	add	r3, r2
 8006202:	3360      	adds	r3, #96	; 0x60
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f00a fd8d 	bl	8010d28 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800620e:	e061      	b.n	80062d4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	4413      	add	r3, r2
 8006218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	f003 0310 	and.w	r3, r3, #16
 8006222:	2b10      	cmp	r3, #16
 8006224:	d156      	bne.n	80062d4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	212c      	movs	r1, #44	; 0x2c
 800622c:	fb01 f303 	mul.w	r3, r1, r3
 8006230:	4413      	add	r3, r2
 8006232:	333f      	adds	r3, #63	; 0x3f
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b03      	cmp	r3, #3
 8006238:	d111      	bne.n	800625e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	212c      	movs	r1, #44	; 0x2c
 8006240:	fb01 f303 	mul.w	r3, r1, r3
 8006244:	4413      	add	r3, r2
 8006246:	335c      	adds	r3, #92	; 0x5c
 8006248:	2200      	movs	r2, #0
 800624a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	4611      	mov	r1, r2
 8006256:	4618      	mov	r0, r3
 8006258:	f004 fc83 	bl	800ab62 <USB_HC_Halt>
 800625c:	e031      	b.n	80062c2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	212c      	movs	r1, #44	; 0x2c
 8006264:	fb01 f303 	mul.w	r3, r1, r3
 8006268:	4413      	add	r3, r2
 800626a:	333f      	adds	r3, #63	; 0x3f
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d009      	beq.n	8006286 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	212c      	movs	r1, #44	; 0x2c
 8006278:	fb01 f303 	mul.w	r3, r1, r3
 800627c:	4413      	add	r3, r2
 800627e:	333f      	adds	r3, #63	; 0x3f
 8006280:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006282:	2b02      	cmp	r3, #2
 8006284:	d11d      	bne.n	80062c2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	212c      	movs	r1, #44	; 0x2c
 800628c:	fb01 f303 	mul.w	r3, r1, r3
 8006290:	4413      	add	r3, r2
 8006292:	335c      	adds	r3, #92	; 0x5c
 8006294:	2200      	movs	r2, #0
 8006296:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d110      	bne.n	80062c2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	212c      	movs	r1, #44	; 0x2c
 80062a6:	fb01 f303 	mul.w	r3, r1, r3
 80062aa:	4413      	add	r3, r2
 80062ac:	3361      	adds	r3, #97	; 0x61
 80062ae:	2203      	movs	r2, #3
 80062b0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	b2d2      	uxtb	r2, r2
 80062ba:	4611      	mov	r1, r2
 80062bc:	4618      	mov	r0, r3
 80062be:	f004 fc50 	bl	800ab62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ce:	461a      	mov	r2, r3
 80062d0:	2310      	movs	r3, #16
 80062d2:	6093      	str	r3, [r2, #8]
}
 80062d4:	bf00      	nop
 80062d6:	3718      	adds	r7, #24
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b088      	sub	sp, #32
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	460b      	mov	r3, r1
 80062e6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80062f2:	78fb      	ldrb	r3, [r7, #3]
 80062f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b04      	cmp	r3, #4
 800630a:	d11a      	bne.n	8006342 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	4413      	add	r3, r2
 8006314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006318:	461a      	mov	r2, r3
 800631a:	2304      	movs	r3, #4
 800631c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	212c      	movs	r1, #44	; 0x2c
 8006324:	fb01 f303 	mul.w	r3, r1, r3
 8006328:	4413      	add	r3, r2
 800632a:	3361      	adds	r3, #97	; 0x61
 800632c:	2206      	movs	r2, #6
 800632e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	b2d2      	uxtb	r2, r2
 8006338:	4611      	mov	r1, r2
 800633a:	4618      	mov	r0, r3
 800633c:	f004 fc11 	bl	800ab62 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8006340:	e331      	b.n	80069a6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	015a      	lsls	r2, r3, #5
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	4413      	add	r3, r2
 800634a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f003 0320 	and.w	r3, r3, #32
 8006354:	2b20      	cmp	r3, #32
 8006356:	d12e      	bne.n	80063b6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	4413      	add	r3, r2
 8006360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006364:	461a      	mov	r2, r3
 8006366:	2320      	movs	r3, #32
 8006368:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	212c      	movs	r1, #44	; 0x2c
 8006370:	fb01 f303 	mul.w	r3, r1, r3
 8006374:	4413      	add	r3, r2
 8006376:	333d      	adds	r3, #61	; 0x3d
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	2b01      	cmp	r3, #1
 800637c:	f040 8313 	bne.w	80069a6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	212c      	movs	r1, #44	; 0x2c
 8006386:	fb01 f303 	mul.w	r3, r1, r3
 800638a:	4413      	add	r3, r2
 800638c:	333d      	adds	r3, #61	; 0x3d
 800638e:	2200      	movs	r2, #0
 8006390:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	212c      	movs	r1, #44	; 0x2c
 8006398:	fb01 f303 	mul.w	r3, r1, r3
 800639c:	4413      	add	r3, r2
 800639e:	3360      	adds	r3, #96	; 0x60
 80063a0:	2202      	movs	r2, #2
 80063a2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	b2d2      	uxtb	r2, r2
 80063ac:	4611      	mov	r1, r2
 80063ae:	4618      	mov	r0, r3
 80063b0:	f004 fbd7 	bl	800ab62 <USB_HC_Halt>
}
 80063b4:	e2f7      	b.n	80069a6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063cc:	d112      	bne.n	80063f4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063da:	461a      	mov	r2, r3
 80063dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063e0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	b2d2      	uxtb	r2, r2
 80063ea:	4611      	mov	r1, r2
 80063ec:	4618      	mov	r0, r3
 80063ee:	f004 fbb8 	bl	800ab62 <USB_HC_Halt>
}
 80063f2:	e2d8      	b.n	80069a6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	015a      	lsls	r2, r3, #5
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f003 0301 	and.w	r3, r3, #1
 8006406:	2b01      	cmp	r3, #1
 8006408:	d140      	bne.n	800648c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	212c      	movs	r1, #44	; 0x2c
 8006410:	fb01 f303 	mul.w	r3, r1, r3
 8006414:	4413      	add	r3, r2
 8006416:	335c      	adds	r3, #92	; 0x5c
 8006418:	2200      	movs	r2, #0
 800641a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	4413      	add	r3, r2
 8006424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800642e:	2b40      	cmp	r3, #64	; 0x40
 8006430:	d111      	bne.n	8006456 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	212c      	movs	r1, #44	; 0x2c
 8006438:	fb01 f303 	mul.w	r3, r1, r3
 800643c:	4413      	add	r3, r2
 800643e:	333d      	adds	r3, #61	; 0x3d
 8006440:	2201      	movs	r2, #1
 8006442:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	015a      	lsls	r2, r3, #5
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	4413      	add	r3, r2
 800644c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006450:	461a      	mov	r2, r3
 8006452:	2340      	movs	r3, #64	; 0x40
 8006454:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	015a      	lsls	r2, r3, #5
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	4413      	add	r3, r2
 800645e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006462:	461a      	mov	r2, r3
 8006464:	2301      	movs	r3, #1
 8006466:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	212c      	movs	r1, #44	; 0x2c
 800646e:	fb01 f303 	mul.w	r3, r1, r3
 8006472:	4413      	add	r3, r2
 8006474:	3361      	adds	r3, #97	; 0x61
 8006476:	2201      	movs	r2, #1
 8006478:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	b2d2      	uxtb	r2, r2
 8006482:	4611      	mov	r1, r2
 8006484:	4618      	mov	r0, r3
 8006486:	f004 fb6c 	bl	800ab62 <USB_HC_Halt>
}
 800648a:	e28c      	b.n	80069a6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	4413      	add	r3, r2
 8006494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649e:	2b40      	cmp	r3, #64	; 0x40
 80064a0:	d12c      	bne.n	80064fc <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	212c      	movs	r1, #44	; 0x2c
 80064a8:	fb01 f303 	mul.w	r3, r1, r3
 80064ac:	4413      	add	r3, r2
 80064ae:	3361      	adds	r3, #97	; 0x61
 80064b0:	2204      	movs	r2, #4
 80064b2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	212c      	movs	r1, #44	; 0x2c
 80064ba:	fb01 f303 	mul.w	r3, r1, r3
 80064be:	4413      	add	r3, r2
 80064c0:	333d      	adds	r3, #61	; 0x3d
 80064c2:	2201      	movs	r2, #1
 80064c4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	212c      	movs	r1, #44	; 0x2c
 80064cc:	fb01 f303 	mul.w	r3, r1, r3
 80064d0:	4413      	add	r3, r2
 80064d2:	335c      	adds	r3, #92	; 0x5c
 80064d4:	2200      	movs	r2, #0
 80064d6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	4611      	mov	r1, r2
 80064e2:	4618      	mov	r0, r3
 80064e4:	f004 fb3d 	bl	800ab62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f4:	461a      	mov	r2, r3
 80064f6:	2340      	movs	r3, #64	; 0x40
 80064f8:	6093      	str	r3, [r2, #8]
}
 80064fa:	e254      	b.n	80069a6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	4413      	add	r3, r2
 8006504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f003 0308 	and.w	r3, r3, #8
 800650e:	2b08      	cmp	r3, #8
 8006510:	d11a      	bne.n	8006548 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	4413      	add	r3, r2
 800651a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651e:	461a      	mov	r2, r3
 8006520:	2308      	movs	r3, #8
 8006522:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	212c      	movs	r1, #44	; 0x2c
 800652a:	fb01 f303 	mul.w	r3, r1, r3
 800652e:	4413      	add	r3, r2
 8006530:	3361      	adds	r3, #97	; 0x61
 8006532:	2205      	movs	r2, #5
 8006534:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	b2d2      	uxtb	r2, r2
 800653e:	4611      	mov	r1, r2
 8006540:	4618      	mov	r0, r3
 8006542:	f004 fb0e 	bl	800ab62 <USB_HC_Halt>
}
 8006546:	e22e      	b.n	80069a6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	015a      	lsls	r2, r3, #5
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	4413      	add	r3, r2
 8006550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f003 0310 	and.w	r3, r3, #16
 800655a:	2b10      	cmp	r3, #16
 800655c:	d140      	bne.n	80065e0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	212c      	movs	r1, #44	; 0x2c
 8006564:	fb01 f303 	mul.w	r3, r1, r3
 8006568:	4413      	add	r3, r2
 800656a:	335c      	adds	r3, #92	; 0x5c
 800656c:	2200      	movs	r2, #0
 800656e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	212c      	movs	r1, #44	; 0x2c
 8006576:	fb01 f303 	mul.w	r3, r1, r3
 800657a:	4413      	add	r3, r2
 800657c:	3361      	adds	r3, #97	; 0x61
 800657e:	2203      	movs	r2, #3
 8006580:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	212c      	movs	r1, #44	; 0x2c
 8006588:	fb01 f303 	mul.w	r3, r1, r3
 800658c:	4413      	add	r3, r2
 800658e:	333d      	adds	r3, #61	; 0x3d
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d112      	bne.n	80065bc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	212c      	movs	r1, #44	; 0x2c
 800659c:	fb01 f303 	mul.w	r3, r1, r3
 80065a0:	4413      	add	r3, r2
 80065a2:	333c      	adds	r3, #60	; 0x3c
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d108      	bne.n	80065bc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	212c      	movs	r1, #44	; 0x2c
 80065b0:	fb01 f303 	mul.w	r3, r1, r3
 80065b4:	4413      	add	r3, r2
 80065b6:	333d      	adds	r3, #61	; 0x3d
 80065b8:	2201      	movs	r2, #1
 80065ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	b2d2      	uxtb	r2, r2
 80065c4:	4611      	mov	r1, r2
 80065c6:	4618      	mov	r0, r3
 80065c8:	f004 facb 	bl	800ab62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d8:	461a      	mov	r2, r3
 80065da:	2310      	movs	r3, #16
 80065dc:	6093      	str	r3, [r2, #8]
}
 80065de:	e1e2      	b.n	80069a6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f2:	2b80      	cmp	r3, #128	; 0x80
 80065f4:	d164      	bne.n	80066c0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d111      	bne.n	8006622 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	212c      	movs	r1, #44	; 0x2c
 8006604:	fb01 f303 	mul.w	r3, r1, r3
 8006608:	4413      	add	r3, r2
 800660a:	3361      	adds	r3, #97	; 0x61
 800660c:	2206      	movs	r2, #6
 800660e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	4611      	mov	r1, r2
 800661a:	4618      	mov	r0, r3
 800661c:	f004 faa1 	bl	800ab62 <USB_HC_Halt>
 8006620:	e044      	b.n	80066ac <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	212c      	movs	r1, #44	; 0x2c
 8006628:	fb01 f303 	mul.w	r3, r1, r3
 800662c:	4413      	add	r3, r2
 800662e:	335c      	adds	r3, #92	; 0x5c
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	6879      	ldr	r1, [r7, #4]
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	202c      	movs	r0, #44	; 0x2c
 800663a:	fb00 f303 	mul.w	r3, r0, r3
 800663e:	440b      	add	r3, r1
 8006640:	335c      	adds	r3, #92	; 0x5c
 8006642:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	212c      	movs	r1, #44	; 0x2c
 800664a:	fb01 f303 	mul.w	r3, r1, r3
 800664e:	4413      	add	r3, r2
 8006650:	335c      	adds	r3, #92	; 0x5c
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b02      	cmp	r3, #2
 8006656:	d920      	bls.n	800669a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	212c      	movs	r1, #44	; 0x2c
 800665e:	fb01 f303 	mul.w	r3, r1, r3
 8006662:	4413      	add	r3, r2
 8006664:	335c      	adds	r3, #92	; 0x5c
 8006666:	2200      	movs	r2, #0
 8006668:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	212c      	movs	r1, #44	; 0x2c
 8006670:	fb01 f303 	mul.w	r3, r1, r3
 8006674:	4413      	add	r3, r2
 8006676:	3360      	adds	r3, #96	; 0x60
 8006678:	2204      	movs	r2, #4
 800667a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	b2d9      	uxtb	r1, r3
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	202c      	movs	r0, #44	; 0x2c
 8006686:	fb00 f303 	mul.w	r3, r0, r3
 800668a:	4413      	add	r3, r2
 800668c:	3360      	adds	r3, #96	; 0x60
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	461a      	mov	r2, r3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f00a fb48 	bl	8010d28 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006698:	e008      	b.n	80066ac <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	212c      	movs	r1, #44	; 0x2c
 80066a0:	fb01 f303 	mul.w	r3, r1, r3
 80066a4:	4413      	add	r3, r2
 80066a6:	3360      	adds	r3, #96	; 0x60
 80066a8:	2202      	movs	r2, #2
 80066aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b8:	461a      	mov	r2, r3
 80066ba:	2380      	movs	r3, #128	; 0x80
 80066bc:	6093      	str	r3, [r2, #8]
}
 80066be:	e172      	b.n	80069a6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d6:	d11b      	bne.n	8006710 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	212c      	movs	r1, #44	; 0x2c
 80066de:	fb01 f303 	mul.w	r3, r1, r3
 80066e2:	4413      	add	r3, r2
 80066e4:	3361      	adds	r3, #97	; 0x61
 80066e6:	2208      	movs	r2, #8
 80066e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	b2d2      	uxtb	r2, r2
 80066f2:	4611      	mov	r1, r2
 80066f4:	4618      	mov	r0, r3
 80066f6:	f004 fa34 	bl	800ab62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	4413      	add	r3, r2
 8006702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006706:	461a      	mov	r2, r3
 8006708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800670c:	6093      	str	r3, [r2, #8]
}
 800670e:	e14a      	b.n	80069a6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	4413      	add	r3, r2
 8006718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b02      	cmp	r3, #2
 8006724:	f040 813f 	bne.w	80069a6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	212c      	movs	r1, #44	; 0x2c
 800672e:	fb01 f303 	mul.w	r3, r1, r3
 8006732:	4413      	add	r3, r2
 8006734:	3361      	adds	r3, #97	; 0x61
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d17d      	bne.n	8006838 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	212c      	movs	r1, #44	; 0x2c
 8006742:	fb01 f303 	mul.w	r3, r1, r3
 8006746:	4413      	add	r3, r2
 8006748:	3360      	adds	r3, #96	; 0x60
 800674a:	2201      	movs	r2, #1
 800674c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	212c      	movs	r1, #44	; 0x2c
 8006754:	fb01 f303 	mul.w	r3, r1, r3
 8006758:	4413      	add	r3, r2
 800675a:	333f      	adds	r3, #63	; 0x3f
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	2b02      	cmp	r3, #2
 8006760:	d00a      	beq.n	8006778 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	212c      	movs	r1, #44	; 0x2c
 8006768:	fb01 f303 	mul.w	r3, r1, r3
 800676c:	4413      	add	r3, r2
 800676e:	333f      	adds	r3, #63	; 0x3f
 8006770:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006772:	2b03      	cmp	r3, #3
 8006774:	f040 8100 	bne.w	8006978 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d113      	bne.n	80067a8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	212c      	movs	r1, #44	; 0x2c
 8006786:	fb01 f303 	mul.w	r3, r1, r3
 800678a:	4413      	add	r3, r2
 800678c:	3355      	adds	r3, #85	; 0x55
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	f083 0301 	eor.w	r3, r3, #1
 8006794:	b2d8      	uxtb	r0, r3
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	212c      	movs	r1, #44	; 0x2c
 800679c:	fb01 f303 	mul.w	r3, r1, r3
 80067a0:	4413      	add	r3, r2
 80067a2:	3355      	adds	r3, #85	; 0x55
 80067a4:	4602      	mov	r2, r0
 80067a6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	f040 80e3 	bne.w	8006978 <HCD_HC_OUT_IRQHandler+0x69c>
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	212c      	movs	r1, #44	; 0x2c
 80067b8:	fb01 f303 	mul.w	r3, r1, r3
 80067bc:	4413      	add	r3, r2
 80067be:	334c      	adds	r3, #76	; 0x4c
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f000 80d8 	beq.w	8006978 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	212c      	movs	r1, #44	; 0x2c
 80067ce:	fb01 f303 	mul.w	r3, r1, r3
 80067d2:	4413      	add	r3, r2
 80067d4:	334c      	adds	r3, #76	; 0x4c
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6879      	ldr	r1, [r7, #4]
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	202c      	movs	r0, #44	; 0x2c
 80067de:	fb00 f202 	mul.w	r2, r0, r2
 80067e2:	440a      	add	r2, r1
 80067e4:	3240      	adds	r2, #64	; 0x40
 80067e6:	8812      	ldrh	r2, [r2, #0]
 80067e8:	4413      	add	r3, r2
 80067ea:	3b01      	subs	r3, #1
 80067ec:	6879      	ldr	r1, [r7, #4]
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	202c      	movs	r0, #44	; 0x2c
 80067f2:	fb00 f202 	mul.w	r2, r0, r2
 80067f6:	440a      	add	r2, r1
 80067f8:	3240      	adds	r2, #64	; 0x40
 80067fa:	8812      	ldrh	r2, [r2, #0]
 80067fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006800:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 80b5 	beq.w	8006978 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	212c      	movs	r1, #44	; 0x2c
 8006814:	fb01 f303 	mul.w	r3, r1, r3
 8006818:	4413      	add	r3, r2
 800681a:	3355      	adds	r3, #85	; 0x55
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	f083 0301 	eor.w	r3, r3, #1
 8006822:	b2d8      	uxtb	r0, r3
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	212c      	movs	r1, #44	; 0x2c
 800682a:	fb01 f303 	mul.w	r3, r1, r3
 800682e:	4413      	add	r3, r2
 8006830:	3355      	adds	r3, #85	; 0x55
 8006832:	4602      	mov	r2, r0
 8006834:	701a      	strb	r2, [r3, #0]
 8006836:	e09f      	b.n	8006978 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	212c      	movs	r1, #44	; 0x2c
 800683e:	fb01 f303 	mul.w	r3, r1, r3
 8006842:	4413      	add	r3, r2
 8006844:	3361      	adds	r3, #97	; 0x61
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b03      	cmp	r3, #3
 800684a:	d109      	bne.n	8006860 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	212c      	movs	r1, #44	; 0x2c
 8006852:	fb01 f303 	mul.w	r3, r1, r3
 8006856:	4413      	add	r3, r2
 8006858:	3360      	adds	r3, #96	; 0x60
 800685a:	2202      	movs	r2, #2
 800685c:	701a      	strb	r2, [r3, #0]
 800685e:	e08b      	b.n	8006978 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	212c      	movs	r1, #44	; 0x2c
 8006866:	fb01 f303 	mul.w	r3, r1, r3
 800686a:	4413      	add	r3, r2
 800686c:	3361      	adds	r3, #97	; 0x61
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	2b04      	cmp	r3, #4
 8006872:	d109      	bne.n	8006888 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	212c      	movs	r1, #44	; 0x2c
 800687a:	fb01 f303 	mul.w	r3, r1, r3
 800687e:	4413      	add	r3, r2
 8006880:	3360      	adds	r3, #96	; 0x60
 8006882:	2202      	movs	r2, #2
 8006884:	701a      	strb	r2, [r3, #0]
 8006886:	e077      	b.n	8006978 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	212c      	movs	r1, #44	; 0x2c
 800688e:	fb01 f303 	mul.w	r3, r1, r3
 8006892:	4413      	add	r3, r2
 8006894:	3361      	adds	r3, #97	; 0x61
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	2b05      	cmp	r3, #5
 800689a:	d109      	bne.n	80068b0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	212c      	movs	r1, #44	; 0x2c
 80068a2:	fb01 f303 	mul.w	r3, r1, r3
 80068a6:	4413      	add	r3, r2
 80068a8:	3360      	adds	r3, #96	; 0x60
 80068aa:	2205      	movs	r2, #5
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	e063      	b.n	8006978 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	212c      	movs	r1, #44	; 0x2c
 80068b6:	fb01 f303 	mul.w	r3, r1, r3
 80068ba:	4413      	add	r3, r2
 80068bc:	3361      	adds	r3, #97	; 0x61
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	2b06      	cmp	r3, #6
 80068c2:	d009      	beq.n	80068d8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	212c      	movs	r1, #44	; 0x2c
 80068ca:	fb01 f303 	mul.w	r3, r1, r3
 80068ce:	4413      	add	r3, r2
 80068d0:	3361      	adds	r3, #97	; 0x61
 80068d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80068d4:	2b08      	cmp	r3, #8
 80068d6:	d14f      	bne.n	8006978 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	212c      	movs	r1, #44	; 0x2c
 80068de:	fb01 f303 	mul.w	r3, r1, r3
 80068e2:	4413      	add	r3, r2
 80068e4:	335c      	adds	r3, #92	; 0x5c
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	1c5a      	adds	r2, r3, #1
 80068ea:	6879      	ldr	r1, [r7, #4]
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	202c      	movs	r0, #44	; 0x2c
 80068f0:	fb00 f303 	mul.w	r3, r0, r3
 80068f4:	440b      	add	r3, r1
 80068f6:	335c      	adds	r3, #92	; 0x5c
 80068f8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	212c      	movs	r1, #44	; 0x2c
 8006900:	fb01 f303 	mul.w	r3, r1, r3
 8006904:	4413      	add	r3, r2
 8006906:	335c      	adds	r3, #92	; 0x5c
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b02      	cmp	r3, #2
 800690c:	d912      	bls.n	8006934 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	212c      	movs	r1, #44	; 0x2c
 8006914:	fb01 f303 	mul.w	r3, r1, r3
 8006918:	4413      	add	r3, r2
 800691a:	335c      	adds	r3, #92	; 0x5c
 800691c:	2200      	movs	r2, #0
 800691e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	212c      	movs	r1, #44	; 0x2c
 8006926:	fb01 f303 	mul.w	r3, r1, r3
 800692a:	4413      	add	r3, r2
 800692c:	3360      	adds	r3, #96	; 0x60
 800692e:	2204      	movs	r2, #4
 8006930:	701a      	strb	r2, [r3, #0]
 8006932:	e021      	b.n	8006978 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	212c      	movs	r1, #44	; 0x2c
 800693a:	fb01 f303 	mul.w	r3, r1, r3
 800693e:	4413      	add	r3, r2
 8006940:	3360      	adds	r3, #96	; 0x60
 8006942:	2202      	movs	r2, #2
 8006944:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	4413      	add	r3, r2
 800694e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800695c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006964:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	4413      	add	r3, r2
 800696e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006972:	461a      	mov	r2, r3
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	4413      	add	r3, r2
 8006980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006984:	461a      	mov	r2, r3
 8006986:	2302      	movs	r3, #2
 8006988:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	b2d9      	uxtb	r1, r3
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	202c      	movs	r0, #44	; 0x2c
 8006994:	fb00 f303 	mul.w	r3, r0, r3
 8006998:	4413      	add	r3, r2
 800699a:	3360      	adds	r3, #96	; 0x60
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f00a f9c1 	bl	8010d28 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80069a6:	bf00      	nop
 80069a8:	3720      	adds	r7, #32
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b08a      	sub	sp, #40	; 0x28
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069be:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	f003 030f 	and.w	r3, r3, #15
 80069ce:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	0c5b      	lsrs	r3, r3, #17
 80069d4:	f003 030f 	and.w	r3, r3, #15
 80069d8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	091b      	lsrs	r3, r3, #4
 80069de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069e2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d004      	beq.n	80069f4 <HCD_RXQLVL_IRQHandler+0x46>
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	2b05      	cmp	r3, #5
 80069ee:	f000 80a9 	beq.w	8006b44 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80069f2:	e0aa      	b.n	8006b4a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f000 80a6 	beq.w	8006b48 <HCD_RXQLVL_IRQHandler+0x19a>
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	212c      	movs	r1, #44	; 0x2c
 8006a02:	fb01 f303 	mul.w	r3, r1, r3
 8006a06:	4413      	add	r3, r2
 8006a08:	3344      	adds	r3, #68	; 0x44
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 809b 	beq.w	8006b48 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	212c      	movs	r1, #44	; 0x2c
 8006a18:	fb01 f303 	mul.w	r3, r1, r3
 8006a1c:	4413      	add	r3, r2
 8006a1e:	3350      	adds	r3, #80	; 0x50
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	441a      	add	r2, r3
 8006a26:	6879      	ldr	r1, [r7, #4]
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	202c      	movs	r0, #44	; 0x2c
 8006a2c:	fb00 f303 	mul.w	r3, r0, r3
 8006a30:	440b      	add	r3, r1
 8006a32:	334c      	adds	r3, #76	; 0x4c
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d87a      	bhi.n	8006b30 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6818      	ldr	r0, [r3, #0]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	212c      	movs	r1, #44	; 0x2c
 8006a44:	fb01 f303 	mul.w	r3, r1, r3
 8006a48:	4413      	add	r3, r2
 8006a4a:	3344      	adds	r3, #68	; 0x44
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	b292      	uxth	r2, r2
 8006a52:	4619      	mov	r1, r3
 8006a54:	f003 fbdc 	bl	800a210 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	212c      	movs	r1, #44	; 0x2c
 8006a5e:	fb01 f303 	mul.w	r3, r1, r3
 8006a62:	4413      	add	r3, r2
 8006a64:	3344      	adds	r3, #68	; 0x44
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	441a      	add	r2, r3
 8006a6c:	6879      	ldr	r1, [r7, #4]
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	202c      	movs	r0, #44	; 0x2c
 8006a72:	fb00 f303 	mul.w	r3, r0, r3
 8006a76:	440b      	add	r3, r1
 8006a78:	3344      	adds	r3, #68	; 0x44
 8006a7a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	212c      	movs	r1, #44	; 0x2c
 8006a82:	fb01 f303 	mul.w	r3, r1, r3
 8006a86:	4413      	add	r3, r2
 8006a88:	3350      	adds	r3, #80	; 0x50
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	441a      	add	r2, r3
 8006a90:	6879      	ldr	r1, [r7, #4]
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	202c      	movs	r0, #44	; 0x2c
 8006a96:	fb00 f303 	mul.w	r3, r0, r3
 8006a9a:	440b      	add	r3, r1
 8006a9c:	3350      	adds	r3, #80	; 0x50
 8006a9e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	015a      	lsls	r2, r3, #5
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	0cdb      	lsrs	r3, r3, #19
 8006ab0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ab4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	212c      	movs	r1, #44	; 0x2c
 8006abc:	fb01 f303 	mul.w	r3, r1, r3
 8006ac0:	4413      	add	r3, r2
 8006ac2:	3340      	adds	r3, #64	; 0x40
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d13c      	bne.n	8006b48 <HCD_RXQLVL_IRQHandler+0x19a>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d039      	beq.n	8006b48 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006aea:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006af2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	015a      	lsls	r2, r3, #5
 8006af8:	6a3b      	ldr	r3, [r7, #32]
 8006afa:	4413      	add	r3, r2
 8006afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b00:	461a      	mov	r2, r3
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	212c      	movs	r1, #44	; 0x2c
 8006b0c:	fb01 f303 	mul.w	r3, r1, r3
 8006b10:	4413      	add	r3, r2
 8006b12:	3354      	adds	r3, #84	; 0x54
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	f083 0301 	eor.w	r3, r3, #1
 8006b1a:	b2d8      	uxtb	r0, r3
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	212c      	movs	r1, #44	; 0x2c
 8006b22:	fb01 f303 	mul.w	r3, r1, r3
 8006b26:	4413      	add	r3, r2
 8006b28:	3354      	adds	r3, #84	; 0x54
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	701a      	strb	r2, [r3, #0]
      break;
 8006b2e:	e00b      	b.n	8006b48 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	212c      	movs	r1, #44	; 0x2c
 8006b36:	fb01 f303 	mul.w	r3, r1, r3
 8006b3a:	4413      	add	r3, r2
 8006b3c:	3360      	adds	r3, #96	; 0x60
 8006b3e:	2204      	movs	r2, #4
 8006b40:	701a      	strb	r2, [r3, #0]
      break;
 8006b42:	e001      	b.n	8006b48 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006b44:	bf00      	nop
 8006b46:	e000      	b.n	8006b4a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006b48:	bf00      	nop
  }
}
 8006b4a:	bf00      	nop
 8006b4c:	3728      	adds	r7, #40	; 0x28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b086      	sub	sp, #24
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006b7e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d10b      	bne.n	8006ba2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d102      	bne.n	8006b9a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f00a f8ab 	bl	8010cf0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	f043 0302 	orr.w	r3, r3, #2
 8006ba0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f003 0308 	and.w	r3, r3, #8
 8006ba8:	2b08      	cmp	r3, #8
 8006baa:	d132      	bne.n	8006c12 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	f043 0308 	orr.w	r3, r3, #8
 8006bb2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f003 0304 	and.w	r3, r3, #4
 8006bba:	2b04      	cmp	r3, #4
 8006bbc:	d126      	bne.n	8006c0c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d113      	bne.n	8006bee <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006bcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006bd0:	d106      	bne.n	8006be0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2102      	movs	r1, #2
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f003 fc87 	bl	800a4ec <USB_InitFSLSPClkSel>
 8006bde:	e011      	b.n	8006c04 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2101      	movs	r1, #1
 8006be6:	4618      	mov	r0, r3
 8006be8:	f003 fc80 	bl	800a4ec <USB_InitFSLSPClkSel>
 8006bec:	e00a      	b.n	8006c04 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d106      	bne.n	8006c04 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006c02:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f00a f89d 	bl	8010d44 <HAL_HCD_PortEnabled_Callback>
 8006c0a:	e002      	b.n	8006c12 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f00a f8a7 	bl	8010d60 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f003 0320 	and.w	r3, r3, #32
 8006c18:	2b20      	cmp	r3, #32
 8006c1a:	d103      	bne.n	8006c24 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f043 0320 	orr.w	r3, r3, #32
 8006c22:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	6013      	str	r3, [r2, #0]
}
 8006c30:	bf00      	nop
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e267      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d075      	beq.n	8006d42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c56:	4b88      	ldr	r3, [pc, #544]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f003 030c 	and.w	r3, r3, #12
 8006c5e:	2b04      	cmp	r3, #4
 8006c60:	d00c      	beq.n	8006c7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c62:	4b85      	ldr	r3, [pc, #532]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c6a:	2b08      	cmp	r3, #8
 8006c6c:	d112      	bne.n	8006c94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c6e:	4b82      	ldr	r3, [pc, #520]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c7a:	d10b      	bne.n	8006c94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c7c:	4b7e      	ldr	r3, [pc, #504]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d05b      	beq.n	8006d40 <HAL_RCC_OscConfig+0x108>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d157      	bne.n	8006d40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e242      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c9c:	d106      	bne.n	8006cac <HAL_RCC_OscConfig+0x74>
 8006c9e:	4b76      	ldr	r3, [pc, #472]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a75      	ldr	r2, [pc, #468]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	e01d      	b.n	8006ce8 <HAL_RCC_OscConfig+0xb0>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cb4:	d10c      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x98>
 8006cb6:	4b70      	ldr	r3, [pc, #448]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a6f      	ldr	r2, [pc, #444]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cc0:	6013      	str	r3, [r2, #0]
 8006cc2:	4b6d      	ldr	r3, [pc, #436]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a6c      	ldr	r2, [pc, #432]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ccc:	6013      	str	r3, [r2, #0]
 8006cce:	e00b      	b.n	8006ce8 <HAL_RCC_OscConfig+0xb0>
 8006cd0:	4b69      	ldr	r3, [pc, #420]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a68      	ldr	r2, [pc, #416]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cda:	6013      	str	r3, [r2, #0]
 8006cdc:	4b66      	ldr	r3, [pc, #408]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a65      	ldr	r2, [pc, #404]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d013      	beq.n	8006d18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cf0:	f7fd fc84 	bl	80045fc <HAL_GetTick>
 8006cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cf6:	e008      	b.n	8006d0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cf8:	f7fd fc80 	bl	80045fc <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b64      	cmp	r3, #100	; 0x64
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e207      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d0a:	4b5b      	ldr	r3, [pc, #364]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0f0      	beq.n	8006cf8 <HAL_RCC_OscConfig+0xc0>
 8006d16:	e014      	b.n	8006d42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d18:	f7fd fc70 	bl	80045fc <HAL_GetTick>
 8006d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d1e:	e008      	b.n	8006d32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d20:	f7fd fc6c 	bl	80045fc <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	2b64      	cmp	r3, #100	; 0x64
 8006d2c:	d901      	bls.n	8006d32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e1f3      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d32:	4b51      	ldr	r3, [pc, #324]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1f0      	bne.n	8006d20 <HAL_RCC_OscConfig+0xe8>
 8006d3e:	e000      	b.n	8006d42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d063      	beq.n	8006e16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d4e:	4b4a      	ldr	r3, [pc, #296]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f003 030c 	and.w	r3, r3, #12
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00b      	beq.n	8006d72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d5a:	4b47      	ldr	r3, [pc, #284]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d62:	2b08      	cmp	r3, #8
 8006d64:	d11c      	bne.n	8006da0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d66:	4b44      	ldr	r3, [pc, #272]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d116      	bne.n	8006da0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d72:	4b41      	ldr	r3, [pc, #260]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d005      	beq.n	8006d8a <HAL_RCC_OscConfig+0x152>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d001      	beq.n	8006d8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e1c7      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d8a:	4b3b      	ldr	r3, [pc, #236]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	00db      	lsls	r3, r3, #3
 8006d98:	4937      	ldr	r1, [pc, #220]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d9e:	e03a      	b.n	8006e16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d020      	beq.n	8006dea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006da8:	4b34      	ldr	r3, [pc, #208]	; (8006e7c <HAL_RCC_OscConfig+0x244>)
 8006daa:	2201      	movs	r2, #1
 8006dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dae:	f7fd fc25 	bl	80045fc <HAL_GetTick>
 8006db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006db4:	e008      	b.n	8006dc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006db6:	f7fd fc21 	bl	80045fc <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d901      	bls.n	8006dc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e1a8      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dc8:	4b2b      	ldr	r3, [pc, #172]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0302 	and.w	r3, r3, #2
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d0f0      	beq.n	8006db6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dd4:	4b28      	ldr	r3, [pc, #160]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	00db      	lsls	r3, r3, #3
 8006de2:	4925      	ldr	r1, [pc, #148]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	600b      	str	r3, [r1, #0]
 8006de8:	e015      	b.n	8006e16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006dea:	4b24      	ldr	r3, [pc, #144]	; (8006e7c <HAL_RCC_OscConfig+0x244>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df0:	f7fd fc04 	bl	80045fc <HAL_GetTick>
 8006df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006df6:	e008      	b.n	8006e0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006df8:	f7fd fc00 	bl	80045fc <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d901      	bls.n	8006e0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e187      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e0a:	4b1b      	ldr	r3, [pc, #108]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1f0      	bne.n	8006df8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0308 	and.w	r3, r3, #8
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d036      	beq.n	8006e90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d016      	beq.n	8006e58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e2a:	4b15      	ldr	r3, [pc, #84]	; (8006e80 <HAL_RCC_OscConfig+0x248>)
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e30:	f7fd fbe4 	bl	80045fc <HAL_GetTick>
 8006e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e36:	e008      	b.n	8006e4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e38:	f7fd fbe0 	bl	80045fc <HAL_GetTick>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d901      	bls.n	8006e4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e167      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e4a:	4b0b      	ldr	r3, [pc, #44]	; (8006e78 <HAL_RCC_OscConfig+0x240>)
 8006e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e4e:	f003 0302 	and.w	r3, r3, #2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d0f0      	beq.n	8006e38 <HAL_RCC_OscConfig+0x200>
 8006e56:	e01b      	b.n	8006e90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e58:	4b09      	ldr	r3, [pc, #36]	; (8006e80 <HAL_RCC_OscConfig+0x248>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e5e:	f7fd fbcd 	bl	80045fc <HAL_GetTick>
 8006e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e64:	e00e      	b.n	8006e84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e66:	f7fd fbc9 	bl	80045fc <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d907      	bls.n	8006e84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e150      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
 8006e78:	40023800 	.word	0x40023800
 8006e7c:	42470000 	.word	0x42470000
 8006e80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e84:	4b88      	ldr	r3, [pc, #544]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e88:	f003 0302 	and.w	r3, r3, #2
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1ea      	bne.n	8006e66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0304 	and.w	r3, r3, #4
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 8097 	beq.w	8006fcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ea2:	4b81      	ldr	r3, [pc, #516]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10f      	bne.n	8006ece <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006eae:	2300      	movs	r3, #0
 8006eb0:	60bb      	str	r3, [r7, #8]
 8006eb2:	4b7d      	ldr	r3, [pc, #500]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb6:	4a7c      	ldr	r2, [pc, #496]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8006ebe:	4b7a      	ldr	r3, [pc, #488]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ec6:	60bb      	str	r3, [r7, #8]
 8006ec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ece:	4b77      	ldr	r3, [pc, #476]	; (80070ac <HAL_RCC_OscConfig+0x474>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d118      	bne.n	8006f0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006eda:	4b74      	ldr	r3, [pc, #464]	; (80070ac <HAL_RCC_OscConfig+0x474>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a73      	ldr	r2, [pc, #460]	; (80070ac <HAL_RCC_OscConfig+0x474>)
 8006ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ee4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ee6:	f7fd fb89 	bl	80045fc <HAL_GetTick>
 8006eea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006eec:	e008      	b.n	8006f00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eee:	f7fd fb85 	bl	80045fc <HAL_GetTick>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d901      	bls.n	8006f00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e10c      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f00:	4b6a      	ldr	r3, [pc, #424]	; (80070ac <HAL_RCC_OscConfig+0x474>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d0f0      	beq.n	8006eee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d106      	bne.n	8006f22 <HAL_RCC_OscConfig+0x2ea>
 8006f14:	4b64      	ldr	r3, [pc, #400]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f18:	4a63      	ldr	r2, [pc, #396]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006f1a:	f043 0301 	orr.w	r3, r3, #1
 8006f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8006f20:	e01c      	b.n	8006f5c <HAL_RCC_OscConfig+0x324>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	2b05      	cmp	r3, #5
 8006f28:	d10c      	bne.n	8006f44 <HAL_RCC_OscConfig+0x30c>
 8006f2a:	4b5f      	ldr	r3, [pc, #380]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2e:	4a5e      	ldr	r2, [pc, #376]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006f30:	f043 0304 	orr.w	r3, r3, #4
 8006f34:	6713      	str	r3, [r2, #112]	; 0x70
 8006f36:	4b5c      	ldr	r3, [pc, #368]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f3a:	4a5b      	ldr	r2, [pc, #364]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006f3c:	f043 0301 	orr.w	r3, r3, #1
 8006f40:	6713      	str	r3, [r2, #112]	; 0x70
 8006f42:	e00b      	b.n	8006f5c <HAL_RCC_OscConfig+0x324>
 8006f44:	4b58      	ldr	r3, [pc, #352]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f48:	4a57      	ldr	r2, [pc, #348]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006f4a:	f023 0301 	bic.w	r3, r3, #1
 8006f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8006f50:	4b55      	ldr	r3, [pc, #340]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f54:	4a54      	ldr	r2, [pc, #336]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006f56:	f023 0304 	bic.w	r3, r3, #4
 8006f5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d015      	beq.n	8006f90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f64:	f7fd fb4a 	bl	80045fc <HAL_GetTick>
 8006f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f6a:	e00a      	b.n	8006f82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f6c:	f7fd fb46 	bl	80045fc <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d901      	bls.n	8006f82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e0cb      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f82:	4b49      	ldr	r3, [pc, #292]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f86:	f003 0302 	and.w	r3, r3, #2
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d0ee      	beq.n	8006f6c <HAL_RCC_OscConfig+0x334>
 8006f8e:	e014      	b.n	8006fba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f90:	f7fd fb34 	bl	80045fc <HAL_GetTick>
 8006f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f96:	e00a      	b.n	8006fae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f98:	f7fd fb30 	bl	80045fc <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d901      	bls.n	8006fae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e0b5      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fae:	4b3e      	ldr	r3, [pc, #248]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1ee      	bne.n	8006f98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fba:	7dfb      	ldrb	r3, [r7, #23]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d105      	bne.n	8006fcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fc0:	4b39      	ldr	r3, [pc, #228]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc4:	4a38      	ldr	r2, [pc, #224]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 80a1 	beq.w	8007118 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006fd6:	4b34      	ldr	r3, [pc, #208]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f003 030c 	and.w	r3, r3, #12
 8006fde:	2b08      	cmp	r3, #8
 8006fe0:	d05c      	beq.n	800709c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d141      	bne.n	800706e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fea:	4b31      	ldr	r3, [pc, #196]	; (80070b0 <HAL_RCC_OscConfig+0x478>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ff0:	f7fd fb04 	bl	80045fc <HAL_GetTick>
 8006ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ff6:	e008      	b.n	800700a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ff8:	f7fd fb00 	bl	80045fc <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	2b02      	cmp	r3, #2
 8007004:	d901      	bls.n	800700a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e087      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800700a:	4b27      	ldr	r3, [pc, #156]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1f0      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	69da      	ldr	r2, [r3, #28]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	431a      	orrs	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007024:	019b      	lsls	r3, r3, #6
 8007026:	431a      	orrs	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702c:	085b      	lsrs	r3, r3, #1
 800702e:	3b01      	subs	r3, #1
 8007030:	041b      	lsls	r3, r3, #16
 8007032:	431a      	orrs	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	061b      	lsls	r3, r3, #24
 800703a:	491b      	ldr	r1, [pc, #108]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 800703c:	4313      	orrs	r3, r2
 800703e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007040:	4b1b      	ldr	r3, [pc, #108]	; (80070b0 <HAL_RCC_OscConfig+0x478>)
 8007042:	2201      	movs	r2, #1
 8007044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007046:	f7fd fad9 	bl	80045fc <HAL_GetTick>
 800704a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800704c:	e008      	b.n	8007060 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800704e:	f7fd fad5 	bl	80045fc <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	2b02      	cmp	r3, #2
 800705a:	d901      	bls.n	8007060 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e05c      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007060:	4b11      	ldr	r3, [pc, #68]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d0f0      	beq.n	800704e <HAL_RCC_OscConfig+0x416>
 800706c:	e054      	b.n	8007118 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800706e:	4b10      	ldr	r3, [pc, #64]	; (80070b0 <HAL_RCC_OscConfig+0x478>)
 8007070:	2200      	movs	r2, #0
 8007072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007074:	f7fd fac2 	bl	80045fc <HAL_GetTick>
 8007078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800707a:	e008      	b.n	800708e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800707c:	f7fd fabe 	bl	80045fc <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	2b02      	cmp	r3, #2
 8007088:	d901      	bls.n	800708e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e045      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800708e:	4b06      	ldr	r3, [pc, #24]	; (80070a8 <HAL_RCC_OscConfig+0x470>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1f0      	bne.n	800707c <HAL_RCC_OscConfig+0x444>
 800709a:	e03d      	b.n	8007118 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d107      	bne.n	80070b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e038      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
 80070a8:	40023800 	.word	0x40023800
 80070ac:	40007000 	.word	0x40007000
 80070b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80070b4:	4b1b      	ldr	r3, [pc, #108]	; (8007124 <HAL_RCC_OscConfig+0x4ec>)
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d028      	beq.n	8007114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d121      	bne.n	8007114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070da:	429a      	cmp	r2, r3
 80070dc:	d11a      	bne.n	8007114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80070e4:	4013      	ands	r3, r2
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80070ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d111      	bne.n	8007114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fa:	085b      	lsrs	r3, r3, #1
 80070fc:	3b01      	subs	r3, #1
 80070fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007100:	429a      	cmp	r2, r3
 8007102:	d107      	bne.n	8007114 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007110:	429a      	cmp	r2, r3
 8007112:	d001      	beq.n	8007118 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e000      	b.n	800711a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	40023800 	.word	0x40023800

08007128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d101      	bne.n	800713c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e0cc      	b.n	80072d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800713c:	4b68      	ldr	r3, [pc, #416]	; (80072e0 <HAL_RCC_ClockConfig+0x1b8>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 0307 	and.w	r3, r3, #7
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	429a      	cmp	r2, r3
 8007148:	d90c      	bls.n	8007164 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800714a:	4b65      	ldr	r3, [pc, #404]	; (80072e0 <HAL_RCC_ClockConfig+0x1b8>)
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	b2d2      	uxtb	r2, r2
 8007150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007152:	4b63      	ldr	r3, [pc, #396]	; (80072e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0307 	and.w	r3, r3, #7
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	429a      	cmp	r2, r3
 800715e:	d001      	beq.n	8007164 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e0b8      	b.n	80072d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0302 	and.w	r3, r3, #2
 800716c:	2b00      	cmp	r3, #0
 800716e:	d020      	beq.n	80071b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0304 	and.w	r3, r3, #4
 8007178:	2b00      	cmp	r3, #0
 800717a:	d005      	beq.n	8007188 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800717c:	4b59      	ldr	r3, [pc, #356]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	4a58      	ldr	r2, [pc, #352]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007182:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007186:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0308 	and.w	r3, r3, #8
 8007190:	2b00      	cmp	r3, #0
 8007192:	d005      	beq.n	80071a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007194:	4b53      	ldr	r3, [pc, #332]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	4a52      	ldr	r2, [pc, #328]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 800719a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800719e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071a0:	4b50      	ldr	r3, [pc, #320]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	494d      	ldr	r1, [pc, #308]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d044      	beq.n	8007248 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d107      	bne.n	80071d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071c6:	4b47      	ldr	r3, [pc, #284]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d119      	bne.n	8007206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e07f      	b.n	80072d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d003      	beq.n	80071e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071e2:	2b03      	cmp	r3, #3
 80071e4:	d107      	bne.n	80071f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071e6:	4b3f      	ldr	r3, [pc, #252]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d109      	bne.n	8007206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e06f      	b.n	80072d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071f6:	4b3b      	ldr	r3, [pc, #236]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0302 	and.w	r3, r3, #2
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d101      	bne.n	8007206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e067      	b.n	80072d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007206:	4b37      	ldr	r3, [pc, #220]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f023 0203 	bic.w	r2, r3, #3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	4934      	ldr	r1, [pc, #208]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007214:	4313      	orrs	r3, r2
 8007216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007218:	f7fd f9f0 	bl	80045fc <HAL_GetTick>
 800721c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800721e:	e00a      	b.n	8007236 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007220:	f7fd f9ec 	bl	80045fc <HAL_GetTick>
 8007224:	4602      	mov	r2, r0
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	f241 3288 	movw	r2, #5000	; 0x1388
 800722e:	4293      	cmp	r3, r2
 8007230:	d901      	bls.n	8007236 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e04f      	b.n	80072d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007236:	4b2b      	ldr	r3, [pc, #172]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f003 020c 	and.w	r2, r3, #12
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	429a      	cmp	r2, r3
 8007246:	d1eb      	bne.n	8007220 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007248:	4b25      	ldr	r3, [pc, #148]	; (80072e0 <HAL_RCC_ClockConfig+0x1b8>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0307 	and.w	r3, r3, #7
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	429a      	cmp	r2, r3
 8007254:	d20c      	bcs.n	8007270 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007256:	4b22      	ldr	r3, [pc, #136]	; (80072e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	b2d2      	uxtb	r2, r2
 800725c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800725e:	4b20      	ldr	r3, [pc, #128]	; (80072e0 <HAL_RCC_ClockConfig+0x1b8>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0307 	and.w	r3, r3, #7
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	429a      	cmp	r2, r3
 800726a:	d001      	beq.n	8007270 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e032      	b.n	80072d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0304 	and.w	r3, r3, #4
 8007278:	2b00      	cmp	r3, #0
 800727a:	d008      	beq.n	800728e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800727c:	4b19      	ldr	r3, [pc, #100]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	4916      	ldr	r1, [pc, #88]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 800728a:	4313      	orrs	r3, r2
 800728c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0308 	and.w	r3, r3, #8
 8007296:	2b00      	cmp	r3, #0
 8007298:	d009      	beq.n	80072ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800729a:	4b12      	ldr	r3, [pc, #72]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	00db      	lsls	r3, r3, #3
 80072a8:	490e      	ldr	r1, [pc, #56]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80072ae:	f000 f821 	bl	80072f4 <HAL_RCC_GetSysClockFreq>
 80072b2:	4602      	mov	r2, r0
 80072b4:	4b0b      	ldr	r3, [pc, #44]	; (80072e4 <HAL_RCC_ClockConfig+0x1bc>)
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	091b      	lsrs	r3, r3, #4
 80072ba:	f003 030f 	and.w	r3, r3, #15
 80072be:	490a      	ldr	r1, [pc, #40]	; (80072e8 <HAL_RCC_ClockConfig+0x1c0>)
 80072c0:	5ccb      	ldrb	r3, [r1, r3]
 80072c2:	fa22 f303 	lsr.w	r3, r2, r3
 80072c6:	4a09      	ldr	r2, [pc, #36]	; (80072ec <HAL_RCC_ClockConfig+0x1c4>)
 80072c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80072ca:	4b09      	ldr	r3, [pc, #36]	; (80072f0 <HAL_RCC_ClockConfig+0x1c8>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7fd f950 	bl	8004574 <HAL_InitTick>

  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	40023c00 	.word	0x40023c00
 80072e4:	40023800 	.word	0x40023800
 80072e8:	0801264c 	.word	0x0801264c
 80072ec:	20000004 	.word	0x20000004
 80072f0:	20000020 	.word	0x20000020

080072f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072f8:	b094      	sub	sp, #80	; 0x50
 80072fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80072fc:	2300      	movs	r3, #0
 80072fe:	647b      	str	r3, [r7, #68]	; 0x44
 8007300:	2300      	movs	r3, #0
 8007302:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007304:	2300      	movs	r3, #0
 8007306:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800730c:	4b79      	ldr	r3, [pc, #484]	; (80074f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f003 030c 	and.w	r3, r3, #12
 8007314:	2b08      	cmp	r3, #8
 8007316:	d00d      	beq.n	8007334 <HAL_RCC_GetSysClockFreq+0x40>
 8007318:	2b08      	cmp	r3, #8
 800731a:	f200 80e1 	bhi.w	80074e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800731e:	2b00      	cmp	r3, #0
 8007320:	d002      	beq.n	8007328 <HAL_RCC_GetSysClockFreq+0x34>
 8007322:	2b04      	cmp	r3, #4
 8007324:	d003      	beq.n	800732e <HAL_RCC_GetSysClockFreq+0x3a>
 8007326:	e0db      	b.n	80074e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007328:	4b73      	ldr	r3, [pc, #460]	; (80074f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800732a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800732c:	e0db      	b.n	80074e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800732e:	4b73      	ldr	r3, [pc, #460]	; (80074fc <HAL_RCC_GetSysClockFreq+0x208>)
 8007330:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007332:	e0d8      	b.n	80074e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007334:	4b6f      	ldr	r3, [pc, #444]	; (80074f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800733c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800733e:	4b6d      	ldr	r3, [pc, #436]	; (80074f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d063      	beq.n	8007412 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800734a:	4b6a      	ldr	r3, [pc, #424]	; (80074f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	099b      	lsrs	r3, r3, #6
 8007350:	2200      	movs	r2, #0
 8007352:	63bb      	str	r3, [r7, #56]	; 0x38
 8007354:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800735c:	633b      	str	r3, [r7, #48]	; 0x30
 800735e:	2300      	movs	r3, #0
 8007360:	637b      	str	r3, [r7, #52]	; 0x34
 8007362:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007366:	4622      	mov	r2, r4
 8007368:	462b      	mov	r3, r5
 800736a:	f04f 0000 	mov.w	r0, #0
 800736e:	f04f 0100 	mov.w	r1, #0
 8007372:	0159      	lsls	r1, r3, #5
 8007374:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007378:	0150      	lsls	r0, r2, #5
 800737a:	4602      	mov	r2, r0
 800737c:	460b      	mov	r3, r1
 800737e:	4621      	mov	r1, r4
 8007380:	1a51      	subs	r1, r2, r1
 8007382:	6139      	str	r1, [r7, #16]
 8007384:	4629      	mov	r1, r5
 8007386:	eb63 0301 	sbc.w	r3, r3, r1
 800738a:	617b      	str	r3, [r7, #20]
 800738c:	f04f 0200 	mov.w	r2, #0
 8007390:	f04f 0300 	mov.w	r3, #0
 8007394:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007398:	4659      	mov	r1, fp
 800739a:	018b      	lsls	r3, r1, #6
 800739c:	4651      	mov	r1, sl
 800739e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80073a2:	4651      	mov	r1, sl
 80073a4:	018a      	lsls	r2, r1, #6
 80073a6:	4651      	mov	r1, sl
 80073a8:	ebb2 0801 	subs.w	r8, r2, r1
 80073ac:	4659      	mov	r1, fp
 80073ae:	eb63 0901 	sbc.w	r9, r3, r1
 80073b2:	f04f 0200 	mov.w	r2, #0
 80073b6:	f04f 0300 	mov.w	r3, #0
 80073ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073c6:	4690      	mov	r8, r2
 80073c8:	4699      	mov	r9, r3
 80073ca:	4623      	mov	r3, r4
 80073cc:	eb18 0303 	adds.w	r3, r8, r3
 80073d0:	60bb      	str	r3, [r7, #8]
 80073d2:	462b      	mov	r3, r5
 80073d4:	eb49 0303 	adc.w	r3, r9, r3
 80073d8:	60fb      	str	r3, [r7, #12]
 80073da:	f04f 0200 	mov.w	r2, #0
 80073de:	f04f 0300 	mov.w	r3, #0
 80073e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80073e6:	4629      	mov	r1, r5
 80073e8:	024b      	lsls	r3, r1, #9
 80073ea:	4621      	mov	r1, r4
 80073ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80073f0:	4621      	mov	r1, r4
 80073f2:	024a      	lsls	r2, r1, #9
 80073f4:	4610      	mov	r0, r2
 80073f6:	4619      	mov	r1, r3
 80073f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073fa:	2200      	movs	r2, #0
 80073fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80073fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007400:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007404:	f7f9 fa42 	bl	800088c <__aeabi_uldivmod>
 8007408:	4602      	mov	r2, r0
 800740a:	460b      	mov	r3, r1
 800740c:	4613      	mov	r3, r2
 800740e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007410:	e058      	b.n	80074c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007412:	4b38      	ldr	r3, [pc, #224]	; (80074f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	099b      	lsrs	r3, r3, #6
 8007418:	2200      	movs	r2, #0
 800741a:	4618      	mov	r0, r3
 800741c:	4611      	mov	r1, r2
 800741e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007422:	623b      	str	r3, [r7, #32]
 8007424:	2300      	movs	r3, #0
 8007426:	627b      	str	r3, [r7, #36]	; 0x24
 8007428:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800742c:	4642      	mov	r2, r8
 800742e:	464b      	mov	r3, r9
 8007430:	f04f 0000 	mov.w	r0, #0
 8007434:	f04f 0100 	mov.w	r1, #0
 8007438:	0159      	lsls	r1, r3, #5
 800743a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800743e:	0150      	lsls	r0, r2, #5
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	4641      	mov	r1, r8
 8007446:	ebb2 0a01 	subs.w	sl, r2, r1
 800744a:	4649      	mov	r1, r9
 800744c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007450:	f04f 0200 	mov.w	r2, #0
 8007454:	f04f 0300 	mov.w	r3, #0
 8007458:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800745c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007460:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007464:	ebb2 040a 	subs.w	r4, r2, sl
 8007468:	eb63 050b 	sbc.w	r5, r3, fp
 800746c:	f04f 0200 	mov.w	r2, #0
 8007470:	f04f 0300 	mov.w	r3, #0
 8007474:	00eb      	lsls	r3, r5, #3
 8007476:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800747a:	00e2      	lsls	r2, r4, #3
 800747c:	4614      	mov	r4, r2
 800747e:	461d      	mov	r5, r3
 8007480:	4643      	mov	r3, r8
 8007482:	18e3      	adds	r3, r4, r3
 8007484:	603b      	str	r3, [r7, #0]
 8007486:	464b      	mov	r3, r9
 8007488:	eb45 0303 	adc.w	r3, r5, r3
 800748c:	607b      	str	r3, [r7, #4]
 800748e:	f04f 0200 	mov.w	r2, #0
 8007492:	f04f 0300 	mov.w	r3, #0
 8007496:	e9d7 4500 	ldrd	r4, r5, [r7]
 800749a:	4629      	mov	r1, r5
 800749c:	028b      	lsls	r3, r1, #10
 800749e:	4621      	mov	r1, r4
 80074a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80074a4:	4621      	mov	r1, r4
 80074a6:	028a      	lsls	r2, r1, #10
 80074a8:	4610      	mov	r0, r2
 80074aa:	4619      	mov	r1, r3
 80074ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074ae:	2200      	movs	r2, #0
 80074b0:	61bb      	str	r3, [r7, #24]
 80074b2:	61fa      	str	r2, [r7, #28]
 80074b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074b8:	f7f9 f9e8 	bl	800088c <__aeabi_uldivmod>
 80074bc:	4602      	mov	r2, r0
 80074be:	460b      	mov	r3, r1
 80074c0:	4613      	mov	r3, r2
 80074c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80074c4:	4b0b      	ldr	r3, [pc, #44]	; (80074f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	0c1b      	lsrs	r3, r3, #16
 80074ca:	f003 0303 	and.w	r3, r3, #3
 80074ce:	3301      	adds	r3, #1
 80074d0:	005b      	lsls	r3, r3, #1
 80074d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80074d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80074de:	e002      	b.n	80074e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80074e0:	4b05      	ldr	r3, [pc, #20]	; (80074f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80074e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80074e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3750      	adds	r7, #80	; 0x50
 80074ec:	46bd      	mov	sp, r7
 80074ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074f2:	bf00      	nop
 80074f4:	40023800 	.word	0x40023800
 80074f8:	00f42400 	.word	0x00f42400
 80074fc:	007a1200 	.word	0x007a1200

08007500 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007500:	b480      	push	{r7}
 8007502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007504:	4b03      	ldr	r3, [pc, #12]	; (8007514 <HAL_RCC_GetHCLKFreq+0x14>)
 8007506:	681b      	ldr	r3, [r3, #0]
}
 8007508:	4618      	mov	r0, r3
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	20000004 	.word	0x20000004

08007518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800751c:	f7ff fff0 	bl	8007500 <HAL_RCC_GetHCLKFreq>
 8007520:	4602      	mov	r2, r0
 8007522:	4b05      	ldr	r3, [pc, #20]	; (8007538 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	0a9b      	lsrs	r3, r3, #10
 8007528:	f003 0307 	and.w	r3, r3, #7
 800752c:	4903      	ldr	r1, [pc, #12]	; (800753c <HAL_RCC_GetPCLK1Freq+0x24>)
 800752e:	5ccb      	ldrb	r3, [r1, r3]
 8007530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007534:	4618      	mov	r0, r3
 8007536:	bd80      	pop	{r7, pc}
 8007538:	40023800 	.word	0x40023800
 800753c:	0801265c 	.word	0x0801265c

08007540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007544:	f7ff ffdc 	bl	8007500 <HAL_RCC_GetHCLKFreq>
 8007548:	4602      	mov	r2, r0
 800754a:	4b05      	ldr	r3, [pc, #20]	; (8007560 <HAL_RCC_GetPCLK2Freq+0x20>)
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	0b5b      	lsrs	r3, r3, #13
 8007550:	f003 0307 	and.w	r3, r3, #7
 8007554:	4903      	ldr	r1, [pc, #12]	; (8007564 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007556:	5ccb      	ldrb	r3, [r1, r3]
 8007558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800755c:	4618      	mov	r0, r3
 800755e:	bd80      	pop	{r7, pc}
 8007560:	40023800 	.word	0x40023800
 8007564:	0801265c 	.word	0x0801265c

08007568 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d101      	bne.n	800757a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e07b      	b.n	8007672 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757e:	2b00      	cmp	r3, #0
 8007580:	d108      	bne.n	8007594 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800758a:	d009      	beq.n	80075a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	61da      	str	r2, [r3, #28]
 8007592:	e005      	b.n	80075a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d106      	bne.n	80075c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7fc f816 	bl	80035ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2202      	movs	r2, #2
 80075c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80075e8:	431a      	orrs	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075f2:	431a      	orrs	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	f003 0302 	and.w	r3, r3, #2
 80075fc:	431a      	orrs	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	431a      	orrs	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007610:	431a      	orrs	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800761a:	431a      	orrs	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a1b      	ldr	r3, [r3, #32]
 8007620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007624:	ea42 0103 	orr.w	r1, r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	430a      	orrs	r2, r1
 8007636:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	0c1b      	lsrs	r3, r3, #16
 800763e:	f003 0104 	and.w	r1, r3, #4
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007646:	f003 0210 	and.w	r2, r3, #16
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	430a      	orrs	r2, r1
 8007650:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	69da      	ldr	r2, [r3, #28]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007660:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3708      	adds	r7, #8
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b08c      	sub	sp, #48	; 0x30
 800767e:	af00      	add	r7, sp, #0
 8007680:	60f8      	str	r0, [r7, #12]
 8007682:	60b9      	str	r1, [r7, #8]
 8007684:	607a      	str	r2, [r7, #4]
 8007686:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007688:	2301      	movs	r3, #1
 800768a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800768c:	2300      	movs	r3, #0
 800768e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007698:	2b01      	cmp	r3, #1
 800769a:	d101      	bne.n	80076a0 <HAL_SPI_TransmitReceive+0x26>
 800769c:	2302      	movs	r3, #2
 800769e:	e18a      	b.n	80079b6 <HAL_SPI_TransmitReceive+0x33c>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076a8:	f7fc ffa8 	bl	80045fc <HAL_GetTick>
 80076ac:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80076be:	887b      	ldrh	r3, [r7, #2]
 80076c0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80076c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d00f      	beq.n	80076ea <HAL_SPI_TransmitReceive+0x70>
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076d0:	d107      	bne.n	80076e2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d103      	bne.n	80076e2 <HAL_SPI_TransmitReceive+0x68>
 80076da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076de:	2b04      	cmp	r3, #4
 80076e0:	d003      	beq.n	80076ea <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80076e2:	2302      	movs	r3, #2
 80076e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80076e8:	e15b      	b.n	80079a2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d005      	beq.n	80076fc <HAL_SPI_TransmitReceive+0x82>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d002      	beq.n	80076fc <HAL_SPI_TransmitReceive+0x82>
 80076f6:	887b      	ldrh	r3, [r7, #2]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d103      	bne.n	8007704 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007702:	e14e      	b.n	80079a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b04      	cmp	r3, #4
 800770e:	d003      	beq.n	8007718 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2205      	movs	r2, #5
 8007714:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	887a      	ldrh	r2, [r7, #2]
 8007728:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	887a      	ldrh	r2, [r7, #2]
 800772e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	887a      	ldrh	r2, [r7, #2]
 800773a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	887a      	ldrh	r2, [r7, #2]
 8007740:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007758:	2b40      	cmp	r3, #64	; 0x40
 800775a:	d007      	beq.n	800776c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800776a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007774:	d178      	bne.n	8007868 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d002      	beq.n	8007784 <HAL_SPI_TransmitReceive+0x10a>
 800777e:	8b7b      	ldrh	r3, [r7, #26]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d166      	bne.n	8007852 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007788:	881a      	ldrh	r2, [r3, #0]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007794:	1c9a      	adds	r2, r3, #2
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800779e:	b29b      	uxth	r3, r3
 80077a0:	3b01      	subs	r3, #1
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077a8:	e053      	b.n	8007852 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f003 0302 	and.w	r3, r3, #2
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d11b      	bne.n	80077f0 <HAL_SPI_TransmitReceive+0x176>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077bc:	b29b      	uxth	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d016      	beq.n	80077f0 <HAL_SPI_TransmitReceive+0x176>
 80077c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d113      	bne.n	80077f0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077cc:	881a      	ldrh	r2, [r3, #0]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d8:	1c9a      	adds	r2, r3, #2
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	3b01      	subs	r3, #1
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077ec:	2300      	movs	r3, #0
 80077ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d119      	bne.n	8007832 <HAL_SPI_TransmitReceive+0x1b8>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007802:	b29b      	uxth	r3, r3
 8007804:	2b00      	cmp	r3, #0
 8007806:	d014      	beq.n	8007832 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68da      	ldr	r2, [r3, #12]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007812:	b292      	uxth	r2, r2
 8007814:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781a:	1c9a      	adds	r2, r3, #2
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007824:	b29b      	uxth	r3, r3
 8007826:	3b01      	subs	r3, #1
 8007828:	b29a      	uxth	r2, r3
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800782e:	2301      	movs	r3, #1
 8007830:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007832:	f7fc fee3 	bl	80045fc <HAL_GetTick>
 8007836:	4602      	mov	r2, r0
 8007838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800783e:	429a      	cmp	r2, r3
 8007840:	d807      	bhi.n	8007852 <HAL_SPI_TransmitReceive+0x1d8>
 8007842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007848:	d003      	beq.n	8007852 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007850:	e0a7      	b.n	80079a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007856:	b29b      	uxth	r3, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1a6      	bne.n	80077aa <HAL_SPI_TransmitReceive+0x130>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007860:	b29b      	uxth	r3, r3
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1a1      	bne.n	80077aa <HAL_SPI_TransmitReceive+0x130>
 8007866:	e07c      	b.n	8007962 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d002      	beq.n	8007876 <HAL_SPI_TransmitReceive+0x1fc>
 8007870:	8b7b      	ldrh	r3, [r7, #26]
 8007872:	2b01      	cmp	r3, #1
 8007874:	d16b      	bne.n	800794e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	330c      	adds	r3, #12
 8007880:	7812      	ldrb	r2, [r2, #0]
 8007882:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007888:	1c5a      	adds	r2, r3, #1
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007892:	b29b      	uxth	r3, r3
 8007894:	3b01      	subs	r3, #1
 8007896:	b29a      	uxth	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800789c:	e057      	b.n	800794e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	f003 0302 	and.w	r3, r3, #2
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d11c      	bne.n	80078e6 <HAL_SPI_TransmitReceive+0x26c>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d017      	beq.n	80078e6 <HAL_SPI_TransmitReceive+0x26c>
 80078b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d114      	bne.n	80078e6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	330c      	adds	r3, #12
 80078c6:	7812      	ldrb	r2, [r2, #0]
 80078c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078d8:	b29b      	uxth	r3, r3
 80078da:	3b01      	subs	r3, #1
 80078dc:	b29a      	uxth	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078e2:	2300      	movs	r3, #0
 80078e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f003 0301 	and.w	r3, r3, #1
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d119      	bne.n	8007928 <HAL_SPI_TransmitReceive+0x2ae>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d014      	beq.n	8007928 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68da      	ldr	r2, [r3, #12]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007908:	b2d2      	uxtb	r2, r2
 800790a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800791a:	b29b      	uxth	r3, r3
 800791c:	3b01      	subs	r3, #1
 800791e:	b29a      	uxth	r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007924:	2301      	movs	r3, #1
 8007926:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007928:	f7fc fe68 	bl	80045fc <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007934:	429a      	cmp	r2, r3
 8007936:	d803      	bhi.n	8007940 <HAL_SPI_TransmitReceive+0x2c6>
 8007938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800793e:	d102      	bne.n	8007946 <HAL_SPI_TransmitReceive+0x2cc>
 8007940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007942:	2b00      	cmp	r3, #0
 8007944:	d103      	bne.n	800794e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800794c:	e029      	b.n	80079a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007952:	b29b      	uxth	r3, r3
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1a2      	bne.n	800789e <HAL_SPI_TransmitReceive+0x224>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800795c:	b29b      	uxth	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d19d      	bne.n	800789e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007964:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f000 f8b2 	bl	8007ad0 <SPI_EndRxTxTransaction>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d006      	beq.n	8007980 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2220      	movs	r2, #32
 800797c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800797e:	e010      	b.n	80079a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10b      	bne.n	80079a0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007988:	2300      	movs	r3, #0
 800798a:	617b      	str	r3, [r7, #20]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	617b      	str	r3, [r7, #20]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	617b      	str	r3, [r7, #20]
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	e000      	b.n	80079a2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80079a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80079b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3730      	adds	r7, #48	; 0x30
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
	...

080079c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b088      	sub	sp, #32
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	603b      	str	r3, [r7, #0]
 80079cc:	4613      	mov	r3, r2
 80079ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80079d0:	f7fc fe14 	bl	80045fc <HAL_GetTick>
 80079d4:	4602      	mov	r2, r0
 80079d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d8:	1a9b      	subs	r3, r3, r2
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	4413      	add	r3, r2
 80079de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80079e0:	f7fc fe0c 	bl	80045fc <HAL_GetTick>
 80079e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80079e6:	4b39      	ldr	r3, [pc, #228]	; (8007acc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	015b      	lsls	r3, r3, #5
 80079ec:	0d1b      	lsrs	r3, r3, #20
 80079ee:	69fa      	ldr	r2, [r7, #28]
 80079f0:	fb02 f303 	mul.w	r3, r2, r3
 80079f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079f6:	e054      	b.n	8007aa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079fe:	d050      	beq.n	8007aa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a00:	f7fc fdfc 	bl	80045fc <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	69fa      	ldr	r2, [r7, #28]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d902      	bls.n	8007a16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d13d      	bne.n	8007a92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a2e:	d111      	bne.n	8007a54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a38:	d004      	beq.n	8007a44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a42:	d107      	bne.n	8007a54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a5c:	d10f      	bne.n	8007a7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a6c:	601a      	str	r2, [r3, #0]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e017      	b.n	8007ac2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	689a      	ldr	r2, [r3, #8]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	4013      	ands	r3, r2
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	bf0c      	ite	eq
 8007ab2:	2301      	moveq	r3, #1
 8007ab4:	2300      	movne	r3, #0
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	461a      	mov	r2, r3
 8007aba:	79fb      	ldrb	r3, [r7, #7]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d19b      	bne.n	80079f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3720      	adds	r7, #32
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	20000004 	.word	0x20000004

08007ad0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b088      	sub	sp, #32
 8007ad4:	af02      	add	r7, sp, #8
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007adc:	4b1b      	ldr	r3, [pc, #108]	; (8007b4c <SPI_EndRxTxTransaction+0x7c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a1b      	ldr	r2, [pc, #108]	; (8007b50 <SPI_EndRxTxTransaction+0x80>)
 8007ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae6:	0d5b      	lsrs	r3, r3, #21
 8007ae8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007aec:	fb02 f303 	mul.w	r3, r2, r3
 8007af0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007afa:	d112      	bne.n	8007b22 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	2200      	movs	r2, #0
 8007b04:	2180      	movs	r1, #128	; 0x80
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f7ff ff5a 	bl	80079c0 <SPI_WaitFlagStateUntilTimeout>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d016      	beq.n	8007b40 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b16:	f043 0220 	orr.w	r2, r3, #32
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e00f      	b.n	8007b42 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00a      	beq.n	8007b3e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b38:	2b80      	cmp	r3, #128	; 0x80
 8007b3a:	d0f2      	beq.n	8007b22 <SPI_EndRxTxTransaction+0x52>
 8007b3c:	e000      	b.n	8007b40 <SPI_EndRxTxTransaction+0x70>
        break;
 8007b3e:	bf00      	nop
  }

  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3718      	adds	r7, #24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	20000004 	.word	0x20000004
 8007b50:	165e9f81 	.word	0x165e9f81

08007b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d101      	bne.n	8007b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e041      	b.n	8007bea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d106      	bne.n	8007b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7fb fd7e 	bl	800367c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2202      	movs	r2, #2
 8007b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	3304      	adds	r3, #4
 8007b90:	4619      	mov	r1, r3
 8007b92:	4610      	mov	r0, r2
 8007b94:	f000 fd60 	bl	8008658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
	...

08007bf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d001      	beq.n	8007c0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e04e      	b.n	8007caa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68da      	ldr	r2, [r3, #12]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f042 0201 	orr.w	r2, r2, #1
 8007c22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a23      	ldr	r2, [pc, #140]	; (8007cb8 <HAL_TIM_Base_Start_IT+0xc4>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d022      	beq.n	8007c74 <HAL_TIM_Base_Start_IT+0x80>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c36:	d01d      	beq.n	8007c74 <HAL_TIM_Base_Start_IT+0x80>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a1f      	ldr	r2, [pc, #124]	; (8007cbc <HAL_TIM_Base_Start_IT+0xc8>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d018      	beq.n	8007c74 <HAL_TIM_Base_Start_IT+0x80>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a1e      	ldr	r2, [pc, #120]	; (8007cc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d013      	beq.n	8007c74 <HAL_TIM_Base_Start_IT+0x80>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a1c      	ldr	r2, [pc, #112]	; (8007cc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d00e      	beq.n	8007c74 <HAL_TIM_Base_Start_IT+0x80>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a1b      	ldr	r2, [pc, #108]	; (8007cc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d009      	beq.n	8007c74 <HAL_TIM_Base_Start_IT+0x80>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a19      	ldr	r2, [pc, #100]	; (8007ccc <HAL_TIM_Base_Start_IT+0xd8>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d004      	beq.n	8007c74 <HAL_TIM_Base_Start_IT+0x80>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a18      	ldr	r2, [pc, #96]	; (8007cd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d111      	bne.n	8007c98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f003 0307 	and.w	r3, r3, #7
 8007c7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2b06      	cmp	r3, #6
 8007c84:	d010      	beq.n	8007ca8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f042 0201 	orr.w	r2, r2, #1
 8007c94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c96:	e007      	b.n	8007ca8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f042 0201 	orr.w	r2, r2, #1
 8007ca6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	40010000 	.word	0x40010000
 8007cbc:	40000400 	.word	0x40000400
 8007cc0:	40000800 	.word	0x40000800
 8007cc4:	40000c00 	.word	0x40000c00
 8007cc8:	40010400 	.word	0x40010400
 8007ccc:	40014000 	.word	0x40014000
 8007cd0:	40001800 	.word	0x40001800

08007cd4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68da      	ldr	r2, [r3, #12]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f022 0201 	bic.w	r2, r2, #1
 8007cea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	6a1a      	ldr	r2, [r3, #32]
 8007cf2:	f241 1311 	movw	r3, #4369	; 0x1111
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10f      	bne.n	8007d1c <HAL_TIM_Base_Stop_IT+0x48>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6a1a      	ldr	r2, [r3, #32]
 8007d02:	f240 4344 	movw	r3, #1092	; 0x444
 8007d06:	4013      	ands	r3, r2
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d107      	bne.n	8007d1c <HAL_TIM_Base_Stop_IT+0x48>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f022 0201 	bic.w	r2, r2, #1
 8007d1a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b082      	sub	sp, #8
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d101      	bne.n	8007d44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e041      	b.n	8007dc8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d106      	bne.n	8007d5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7fb fcff 	bl	800375c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2202      	movs	r2, #2
 8007d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	4619      	mov	r1, r3
 8007d70:	4610      	mov	r0, r2
 8007d72:	f000 fc71 	bl	8008658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d109      	bne.n	8007df4 <HAL_TIM_PWM_Start+0x24>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	bf14      	ite	ne
 8007dec:	2301      	movne	r3, #1
 8007dee:	2300      	moveq	r3, #0
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	e022      	b.n	8007e3a <HAL_TIM_PWM_Start+0x6a>
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	2b04      	cmp	r3, #4
 8007df8:	d109      	bne.n	8007e0e <HAL_TIM_PWM_Start+0x3e>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	bf14      	ite	ne
 8007e06:	2301      	movne	r3, #1
 8007e08:	2300      	moveq	r3, #0
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	e015      	b.n	8007e3a <HAL_TIM_PWM_Start+0x6a>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	2b08      	cmp	r3, #8
 8007e12:	d109      	bne.n	8007e28 <HAL_TIM_PWM_Start+0x58>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	bf14      	ite	ne
 8007e20:	2301      	movne	r3, #1
 8007e22:	2300      	moveq	r3, #0
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	e008      	b.n	8007e3a <HAL_TIM_PWM_Start+0x6a>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	bf14      	ite	ne
 8007e34:	2301      	movne	r3, #1
 8007e36:	2300      	moveq	r3, #0
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d001      	beq.n	8007e42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e07c      	b.n	8007f3c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d104      	bne.n	8007e52 <HAL_TIM_PWM_Start+0x82>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2202      	movs	r2, #2
 8007e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e50:	e013      	b.n	8007e7a <HAL_TIM_PWM_Start+0xaa>
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2b04      	cmp	r3, #4
 8007e56:	d104      	bne.n	8007e62 <HAL_TIM_PWM_Start+0x92>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e60:	e00b      	b.n	8007e7a <HAL_TIM_PWM_Start+0xaa>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2b08      	cmp	r3, #8
 8007e66:	d104      	bne.n	8007e72 <HAL_TIM_PWM_Start+0xa2>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e70:	e003      	b.n	8007e7a <HAL_TIM_PWM_Start+0xaa>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2202      	movs	r2, #2
 8007e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 fed2 	bl	8008c2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a2d      	ldr	r2, [pc, #180]	; (8007f44 <HAL_TIM_PWM_Start+0x174>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d004      	beq.n	8007e9c <HAL_TIM_PWM_Start+0xcc>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a2c      	ldr	r2, [pc, #176]	; (8007f48 <HAL_TIM_PWM_Start+0x178>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d101      	bne.n	8007ea0 <HAL_TIM_PWM_Start+0xd0>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e000      	b.n	8007ea2 <HAL_TIM_PWM_Start+0xd2>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d007      	beq.n	8007eb6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007eb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a22      	ldr	r2, [pc, #136]	; (8007f44 <HAL_TIM_PWM_Start+0x174>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d022      	beq.n	8007f06 <HAL_TIM_PWM_Start+0x136>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ec8:	d01d      	beq.n	8007f06 <HAL_TIM_PWM_Start+0x136>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a1f      	ldr	r2, [pc, #124]	; (8007f4c <HAL_TIM_PWM_Start+0x17c>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d018      	beq.n	8007f06 <HAL_TIM_PWM_Start+0x136>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a1d      	ldr	r2, [pc, #116]	; (8007f50 <HAL_TIM_PWM_Start+0x180>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d013      	beq.n	8007f06 <HAL_TIM_PWM_Start+0x136>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a1c      	ldr	r2, [pc, #112]	; (8007f54 <HAL_TIM_PWM_Start+0x184>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d00e      	beq.n	8007f06 <HAL_TIM_PWM_Start+0x136>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a16      	ldr	r2, [pc, #88]	; (8007f48 <HAL_TIM_PWM_Start+0x178>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d009      	beq.n	8007f06 <HAL_TIM_PWM_Start+0x136>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a18      	ldr	r2, [pc, #96]	; (8007f58 <HAL_TIM_PWM_Start+0x188>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d004      	beq.n	8007f06 <HAL_TIM_PWM_Start+0x136>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a16      	ldr	r2, [pc, #88]	; (8007f5c <HAL_TIM_PWM_Start+0x18c>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d111      	bne.n	8007f2a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	f003 0307 	and.w	r3, r3, #7
 8007f10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2b06      	cmp	r3, #6
 8007f16:	d010      	beq.n	8007f3a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f042 0201 	orr.w	r2, r2, #1
 8007f26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f28:	e007      	b.n	8007f3a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f042 0201 	orr.w	r2, r2, #1
 8007f38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	40010000 	.word	0x40010000
 8007f48:	40010400 	.word	0x40010400
 8007f4c:	40000400 	.word	0x40000400
 8007f50:	40000800 	.word	0x40000800
 8007f54:	40000c00 	.word	0x40000c00
 8007f58:	40014000 	.word	0x40014000
 8007f5c:	40001800 	.word	0x40001800

08007f60 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	6839      	ldr	r1, [r7, #0]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 fe5a 	bl	8008c2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a2e      	ldr	r2, [pc, #184]	; (8008038 <HAL_TIM_PWM_Stop+0xd8>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d004      	beq.n	8007f8c <HAL_TIM_PWM_Stop+0x2c>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a2d      	ldr	r2, [pc, #180]	; (800803c <HAL_TIM_PWM_Stop+0xdc>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d101      	bne.n	8007f90 <HAL_TIM_PWM_Stop+0x30>
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e000      	b.n	8007f92 <HAL_TIM_PWM_Stop+0x32>
 8007f90:	2300      	movs	r3, #0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d017      	beq.n	8007fc6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	6a1a      	ldr	r2, [r3, #32]
 8007f9c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10f      	bne.n	8007fc6 <HAL_TIM_PWM_Stop+0x66>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	6a1a      	ldr	r2, [r3, #32]
 8007fac:	f240 4344 	movw	r3, #1092	; 0x444
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d107      	bne.n	8007fc6 <HAL_TIM_PWM_Stop+0x66>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007fc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	6a1a      	ldr	r2, [r3, #32]
 8007fcc:	f241 1311 	movw	r3, #4369	; 0x1111
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d10f      	bne.n	8007ff6 <HAL_TIM_PWM_Stop+0x96>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6a1a      	ldr	r2, [r3, #32]
 8007fdc:	f240 4344 	movw	r3, #1092	; 0x444
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d107      	bne.n	8007ff6 <HAL_TIM_PWM_Stop+0x96>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f022 0201 	bic.w	r2, r2, #1
 8007ff4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d104      	bne.n	8008006 <HAL_TIM_PWM_Stop+0xa6>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008004:	e013      	b.n	800802e <HAL_TIM_PWM_Stop+0xce>
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	2b04      	cmp	r3, #4
 800800a:	d104      	bne.n	8008016 <HAL_TIM_PWM_Stop+0xb6>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008014:	e00b      	b.n	800802e <HAL_TIM_PWM_Stop+0xce>
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	2b08      	cmp	r3, #8
 800801a:	d104      	bne.n	8008026 <HAL_TIM_PWM_Stop+0xc6>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008024:	e003      	b.n	800802e <HAL_TIM_PWM_Stop+0xce>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3708      	adds	r7, #8
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}
 8008038:	40010000 	.word	0x40010000
 800803c:	40010400 	.word	0x40010400

08008040 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	f003 0302 	and.w	r3, r3, #2
 8008052:	2b02      	cmp	r3, #2
 8008054:	d122      	bne.n	800809c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	f003 0302 	and.w	r3, r3, #2
 8008060:	2b02      	cmp	r3, #2
 8008062:	d11b      	bne.n	800809c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f06f 0202 	mvn.w	r2, #2
 800806c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	f003 0303 	and.w	r3, r3, #3
 800807e:	2b00      	cmp	r3, #0
 8008080:	d003      	beq.n	800808a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fa77 	bl	8008576 <HAL_TIM_IC_CaptureCallback>
 8008088:	e005      	b.n	8008096 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fa69 	bl	8008562 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fa7a 	bl	800858a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	f003 0304 	and.w	r3, r3, #4
 80080a6:	2b04      	cmp	r3, #4
 80080a8:	d122      	bne.n	80080f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	f003 0304 	and.w	r3, r3, #4
 80080b4:	2b04      	cmp	r3, #4
 80080b6:	d11b      	bne.n	80080f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f06f 0204 	mvn.w	r2, #4
 80080c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2202      	movs	r2, #2
 80080c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d003      	beq.n	80080de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fa4d 	bl	8008576 <HAL_TIM_IC_CaptureCallback>
 80080dc:	e005      	b.n	80080ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fa3f 	bl	8008562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fa50 	bl	800858a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	f003 0308 	and.w	r3, r3, #8
 80080fa:	2b08      	cmp	r3, #8
 80080fc:	d122      	bne.n	8008144 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	f003 0308 	and.w	r3, r3, #8
 8008108:	2b08      	cmp	r3, #8
 800810a:	d11b      	bne.n	8008144 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f06f 0208 	mvn.w	r2, #8
 8008114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2204      	movs	r2, #4
 800811a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	f003 0303 	and.w	r3, r3, #3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d003      	beq.n	8008132 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fa23 	bl	8008576 <HAL_TIM_IC_CaptureCallback>
 8008130:	e005      	b.n	800813e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 fa15 	bl	8008562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fa26 	bl	800858a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	f003 0310 	and.w	r3, r3, #16
 800814e:	2b10      	cmp	r3, #16
 8008150:	d122      	bne.n	8008198 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	f003 0310 	and.w	r3, r3, #16
 800815c:	2b10      	cmp	r3, #16
 800815e:	d11b      	bne.n	8008198 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f06f 0210 	mvn.w	r2, #16
 8008168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2208      	movs	r2, #8
 800816e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	69db      	ldr	r3, [r3, #28]
 8008176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800817a:	2b00      	cmp	r3, #0
 800817c:	d003      	beq.n	8008186 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f9f9 	bl	8008576 <HAL_TIM_IC_CaptureCallback>
 8008184:	e005      	b.n	8008192 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f9eb 	bl	8008562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 f9fc 	bl	800858a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	f003 0301 	and.w	r3, r3, #1
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d10e      	bne.n	80081c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	f003 0301 	and.w	r3, r3, #1
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d107      	bne.n	80081c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f06f 0201 	mvn.w	r2, #1
 80081bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7fb f93c 	bl	800343c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ce:	2b80      	cmp	r3, #128	; 0x80
 80081d0:	d10e      	bne.n	80081f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081dc:	2b80      	cmp	r3, #128	; 0x80
 80081de:	d107      	bne.n	80081f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80081e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fe1c 	bl	8008e28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081fa:	2b40      	cmp	r3, #64	; 0x40
 80081fc:	d10e      	bne.n	800821c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008208:	2b40      	cmp	r3, #64	; 0x40
 800820a:	d107      	bne.n	800821c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f9c1 	bl	800859e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	f003 0320 	and.w	r3, r3, #32
 8008226:	2b20      	cmp	r3, #32
 8008228:	d10e      	bne.n	8008248 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	f003 0320 	and.w	r3, r3, #32
 8008234:	2b20      	cmp	r3, #32
 8008236:	d107      	bne.n	8008248 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f06f 0220 	mvn.w	r2, #32
 8008240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fde6 	bl	8008e14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008248:	bf00      	nop
 800824a:	3708      	adds	r7, #8
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b086      	sub	sp, #24
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800825c:	2300      	movs	r3, #0
 800825e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008266:	2b01      	cmp	r3, #1
 8008268:	d101      	bne.n	800826e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800826a:	2302      	movs	r3, #2
 800826c:	e0ae      	b.n	80083cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b0c      	cmp	r3, #12
 800827a:	f200 809f 	bhi.w	80083bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800827e:	a201      	add	r2, pc, #4	; (adr r2, 8008284 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008284:	080082b9 	.word	0x080082b9
 8008288:	080083bd 	.word	0x080083bd
 800828c:	080083bd 	.word	0x080083bd
 8008290:	080083bd 	.word	0x080083bd
 8008294:	080082f9 	.word	0x080082f9
 8008298:	080083bd 	.word	0x080083bd
 800829c:	080083bd 	.word	0x080083bd
 80082a0:	080083bd 	.word	0x080083bd
 80082a4:	0800833b 	.word	0x0800833b
 80082a8:	080083bd 	.word	0x080083bd
 80082ac:	080083bd 	.word	0x080083bd
 80082b0:	080083bd 	.word	0x080083bd
 80082b4:	0800837b 	.word	0x0800837b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68b9      	ldr	r1, [r7, #8]
 80082be:	4618      	mov	r0, r3
 80082c0:	f000 fa6a 	bl	8008798 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	699a      	ldr	r2, [r3, #24]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f042 0208 	orr.w	r2, r2, #8
 80082d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	699a      	ldr	r2, [r3, #24]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f022 0204 	bic.w	r2, r2, #4
 80082e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6999      	ldr	r1, [r3, #24]
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	691a      	ldr	r2, [r3, #16]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	430a      	orrs	r2, r1
 80082f4:	619a      	str	r2, [r3, #24]
      break;
 80082f6:	e064      	b.n	80083c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68b9      	ldr	r1, [r7, #8]
 80082fe:	4618      	mov	r0, r3
 8008300:	f000 faba 	bl	8008878 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	699a      	ldr	r2, [r3, #24]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	699a      	ldr	r2, [r3, #24]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6999      	ldr	r1, [r3, #24]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	021a      	lsls	r2, r3, #8
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	430a      	orrs	r2, r1
 8008336:	619a      	str	r2, [r3, #24]
      break;
 8008338:	e043      	b.n	80083c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68b9      	ldr	r1, [r7, #8]
 8008340:	4618      	mov	r0, r3
 8008342:	f000 fb0f 	bl	8008964 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	69da      	ldr	r2, [r3, #28]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f042 0208 	orr.w	r2, r2, #8
 8008354:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	69da      	ldr	r2, [r3, #28]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f022 0204 	bic.w	r2, r2, #4
 8008364:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	69d9      	ldr	r1, [r3, #28]
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	691a      	ldr	r2, [r3, #16]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	430a      	orrs	r2, r1
 8008376:	61da      	str	r2, [r3, #28]
      break;
 8008378:	e023      	b.n	80083c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68b9      	ldr	r1, [r7, #8]
 8008380:	4618      	mov	r0, r3
 8008382:	f000 fb63 	bl	8008a4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	69da      	ldr	r2, [r3, #28]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	69da      	ldr	r2, [r3, #28]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	69d9      	ldr	r1, [r3, #28]
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	021a      	lsls	r2, r3, #8
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	430a      	orrs	r2, r1
 80083b8:	61da      	str	r2, [r3, #28]
      break;
 80083ba:	e002      	b.n	80083c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	75fb      	strb	r3, [r7, #23]
      break;
 80083c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80083ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3718      	adds	r7, #24
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d101      	bne.n	80083f0 <HAL_TIM_ConfigClockSource+0x1c>
 80083ec:	2302      	movs	r3, #2
 80083ee:	e0b4      	b.n	800855a <HAL_TIM_ConfigClockSource+0x186>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2202      	movs	r2, #2
 80083fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800840e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008416:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008428:	d03e      	beq.n	80084a8 <HAL_TIM_ConfigClockSource+0xd4>
 800842a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800842e:	f200 8087 	bhi.w	8008540 <HAL_TIM_ConfigClockSource+0x16c>
 8008432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008436:	f000 8086 	beq.w	8008546 <HAL_TIM_ConfigClockSource+0x172>
 800843a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800843e:	d87f      	bhi.n	8008540 <HAL_TIM_ConfigClockSource+0x16c>
 8008440:	2b70      	cmp	r3, #112	; 0x70
 8008442:	d01a      	beq.n	800847a <HAL_TIM_ConfigClockSource+0xa6>
 8008444:	2b70      	cmp	r3, #112	; 0x70
 8008446:	d87b      	bhi.n	8008540 <HAL_TIM_ConfigClockSource+0x16c>
 8008448:	2b60      	cmp	r3, #96	; 0x60
 800844a:	d050      	beq.n	80084ee <HAL_TIM_ConfigClockSource+0x11a>
 800844c:	2b60      	cmp	r3, #96	; 0x60
 800844e:	d877      	bhi.n	8008540 <HAL_TIM_ConfigClockSource+0x16c>
 8008450:	2b50      	cmp	r3, #80	; 0x50
 8008452:	d03c      	beq.n	80084ce <HAL_TIM_ConfigClockSource+0xfa>
 8008454:	2b50      	cmp	r3, #80	; 0x50
 8008456:	d873      	bhi.n	8008540 <HAL_TIM_ConfigClockSource+0x16c>
 8008458:	2b40      	cmp	r3, #64	; 0x40
 800845a:	d058      	beq.n	800850e <HAL_TIM_ConfigClockSource+0x13a>
 800845c:	2b40      	cmp	r3, #64	; 0x40
 800845e:	d86f      	bhi.n	8008540 <HAL_TIM_ConfigClockSource+0x16c>
 8008460:	2b30      	cmp	r3, #48	; 0x30
 8008462:	d064      	beq.n	800852e <HAL_TIM_ConfigClockSource+0x15a>
 8008464:	2b30      	cmp	r3, #48	; 0x30
 8008466:	d86b      	bhi.n	8008540 <HAL_TIM_ConfigClockSource+0x16c>
 8008468:	2b20      	cmp	r3, #32
 800846a:	d060      	beq.n	800852e <HAL_TIM_ConfigClockSource+0x15a>
 800846c:	2b20      	cmp	r3, #32
 800846e:	d867      	bhi.n	8008540 <HAL_TIM_ConfigClockSource+0x16c>
 8008470:	2b00      	cmp	r3, #0
 8008472:	d05c      	beq.n	800852e <HAL_TIM_ConfigClockSource+0x15a>
 8008474:	2b10      	cmp	r3, #16
 8008476:	d05a      	beq.n	800852e <HAL_TIM_ConfigClockSource+0x15a>
 8008478:	e062      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6818      	ldr	r0, [r3, #0]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	6899      	ldr	r1, [r3, #8]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	685a      	ldr	r2, [r3, #4]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	f000 fbaf 	bl	8008bec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800849c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	609a      	str	r2, [r3, #8]
      break;
 80084a6:	e04f      	b.n	8008548 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6818      	ldr	r0, [r3, #0]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	6899      	ldr	r1, [r3, #8]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	685a      	ldr	r2, [r3, #4]
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	f000 fb98 	bl	8008bec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	689a      	ldr	r2, [r3, #8]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084ca:	609a      	str	r2, [r3, #8]
      break;
 80084cc:	e03c      	b.n	8008548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6818      	ldr	r0, [r3, #0]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	6859      	ldr	r1, [r3, #4]
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	461a      	mov	r2, r3
 80084dc:	f000 fb0c 	bl	8008af8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2150      	movs	r1, #80	; 0x50
 80084e6:	4618      	mov	r0, r3
 80084e8:	f000 fb65 	bl	8008bb6 <TIM_ITRx_SetConfig>
      break;
 80084ec:	e02c      	b.n	8008548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6818      	ldr	r0, [r3, #0]
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	6859      	ldr	r1, [r3, #4]
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	461a      	mov	r2, r3
 80084fc:	f000 fb2b 	bl	8008b56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2160      	movs	r1, #96	; 0x60
 8008506:	4618      	mov	r0, r3
 8008508:	f000 fb55 	bl	8008bb6 <TIM_ITRx_SetConfig>
      break;
 800850c:	e01c      	b.n	8008548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6818      	ldr	r0, [r3, #0]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	6859      	ldr	r1, [r3, #4]
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	461a      	mov	r2, r3
 800851c:	f000 faec 	bl	8008af8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2140      	movs	r1, #64	; 0x40
 8008526:	4618      	mov	r0, r3
 8008528:	f000 fb45 	bl	8008bb6 <TIM_ITRx_SetConfig>
      break;
 800852c:	e00c      	b.n	8008548 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4619      	mov	r1, r3
 8008538:	4610      	mov	r0, r2
 800853a:	f000 fb3c 	bl	8008bb6 <TIM_ITRx_SetConfig>
      break;
 800853e:	e003      	b.n	8008548 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	73fb      	strb	r3, [r7, #15]
      break;
 8008544:	e000      	b.n	8008548 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008546:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008558:	7bfb      	ldrb	r3, [r7, #15]
}
 800855a:	4618      	mov	r0, r3
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008562:	b480      	push	{r7}
 8008564:	b083      	sub	sp, #12
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800856a:	bf00      	nop
 800856c:	370c      	adds	r7, #12
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008576:	b480      	push	{r7}
 8008578:	b083      	sub	sp, #12
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800857e:	bf00      	nop
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800858a:	b480      	push	{r7}
 800858c:	b083      	sub	sp, #12
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008592:	bf00      	nop
 8008594:	370c      	adds	r7, #12
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr

0800859e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800859e:	b480      	push	{r7}
 80085a0:	b083      	sub	sp, #12
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085a6:	bf00      	nop
 80085a8:	370c      	adds	r7, #12
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr

080085b2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80085b2:	b480      	push	{r7}
 80085b4:	b083      	sub	sp, #12
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80085ba:	bf00      	nop
 80085bc:	370c      	adds	r7, #12
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr

080085c6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b084      	sub	sp, #16
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d107      	bne.n	80085ee <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2201      	movs	r2, #1
 80085e2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085ec:	e02a      	b.n	8008644 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d107      	bne.n	8008608 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2202      	movs	r2, #2
 80085fc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2201      	movs	r2, #1
 8008602:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008606:	e01d      	b.n	8008644 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	429a      	cmp	r2, r3
 8008610:	d107      	bne.n	8008622 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2204      	movs	r2, #4
 8008616:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008620:	e010      	b.n	8008644 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	429a      	cmp	r2, r3
 800862a:	d107      	bne.n	800863c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2208      	movs	r2, #8
 8008630:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2201      	movs	r2, #1
 8008636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800863a:	e003      	b.n	8008644 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008644:	68f8      	ldr	r0, [r7, #12]
 8008646:	f7ff ffb4 	bl	80085b2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	771a      	strb	r2, [r3, #28]
}
 8008650:	bf00      	nop
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a40      	ldr	r2, [pc, #256]	; (800876c <TIM_Base_SetConfig+0x114>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d013      	beq.n	8008698 <TIM_Base_SetConfig+0x40>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008676:	d00f      	beq.n	8008698 <TIM_Base_SetConfig+0x40>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a3d      	ldr	r2, [pc, #244]	; (8008770 <TIM_Base_SetConfig+0x118>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d00b      	beq.n	8008698 <TIM_Base_SetConfig+0x40>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a3c      	ldr	r2, [pc, #240]	; (8008774 <TIM_Base_SetConfig+0x11c>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d007      	beq.n	8008698 <TIM_Base_SetConfig+0x40>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a3b      	ldr	r2, [pc, #236]	; (8008778 <TIM_Base_SetConfig+0x120>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d003      	beq.n	8008698 <TIM_Base_SetConfig+0x40>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a3a      	ldr	r2, [pc, #232]	; (800877c <TIM_Base_SetConfig+0x124>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d108      	bne.n	80086aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800869e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a2f      	ldr	r2, [pc, #188]	; (800876c <TIM_Base_SetConfig+0x114>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d02b      	beq.n	800870a <TIM_Base_SetConfig+0xb2>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086b8:	d027      	beq.n	800870a <TIM_Base_SetConfig+0xb2>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4a2c      	ldr	r2, [pc, #176]	; (8008770 <TIM_Base_SetConfig+0x118>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d023      	beq.n	800870a <TIM_Base_SetConfig+0xb2>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a2b      	ldr	r2, [pc, #172]	; (8008774 <TIM_Base_SetConfig+0x11c>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d01f      	beq.n	800870a <TIM_Base_SetConfig+0xb2>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a2a      	ldr	r2, [pc, #168]	; (8008778 <TIM_Base_SetConfig+0x120>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d01b      	beq.n	800870a <TIM_Base_SetConfig+0xb2>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a29      	ldr	r2, [pc, #164]	; (800877c <TIM_Base_SetConfig+0x124>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d017      	beq.n	800870a <TIM_Base_SetConfig+0xb2>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a28      	ldr	r2, [pc, #160]	; (8008780 <TIM_Base_SetConfig+0x128>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d013      	beq.n	800870a <TIM_Base_SetConfig+0xb2>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a27      	ldr	r2, [pc, #156]	; (8008784 <TIM_Base_SetConfig+0x12c>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d00f      	beq.n	800870a <TIM_Base_SetConfig+0xb2>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a26      	ldr	r2, [pc, #152]	; (8008788 <TIM_Base_SetConfig+0x130>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d00b      	beq.n	800870a <TIM_Base_SetConfig+0xb2>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a25      	ldr	r2, [pc, #148]	; (800878c <TIM_Base_SetConfig+0x134>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d007      	beq.n	800870a <TIM_Base_SetConfig+0xb2>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a24      	ldr	r2, [pc, #144]	; (8008790 <TIM_Base_SetConfig+0x138>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d003      	beq.n	800870a <TIM_Base_SetConfig+0xb2>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a23      	ldr	r2, [pc, #140]	; (8008794 <TIM_Base_SetConfig+0x13c>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d108      	bne.n	800871c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	68fa      	ldr	r2, [r7, #12]
 8008718:	4313      	orrs	r3, r2
 800871a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	4313      	orrs	r3, r2
 8008728:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	689a      	ldr	r2, [r3, #8]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a0a      	ldr	r2, [pc, #40]	; (800876c <TIM_Base_SetConfig+0x114>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d003      	beq.n	8008750 <TIM_Base_SetConfig+0xf8>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a0c      	ldr	r2, [pc, #48]	; (800877c <TIM_Base_SetConfig+0x124>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d103      	bne.n	8008758 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	691a      	ldr	r2, [r3, #16]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	615a      	str	r2, [r3, #20]
}
 800875e:	bf00      	nop
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	40010000 	.word	0x40010000
 8008770:	40000400 	.word	0x40000400
 8008774:	40000800 	.word	0x40000800
 8008778:	40000c00 	.word	0x40000c00
 800877c:	40010400 	.word	0x40010400
 8008780:	40014000 	.word	0x40014000
 8008784:	40014400 	.word	0x40014400
 8008788:	40014800 	.word	0x40014800
 800878c:	40001800 	.word	0x40001800
 8008790:	40001c00 	.word	0x40001c00
 8008794:	40002000 	.word	0x40002000

08008798 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008798:	b480      	push	{r7}
 800879a:	b087      	sub	sp, #28
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	f023 0201 	bic.w	r2, r3, #1
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a1b      	ldr	r3, [r3, #32]
 80087b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f023 0303 	bic.w	r3, r3, #3
 80087ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	f023 0302 	bic.w	r3, r3, #2
 80087e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	697a      	ldr	r2, [r7, #20]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a20      	ldr	r2, [pc, #128]	; (8008870 <TIM_OC1_SetConfig+0xd8>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d003      	beq.n	80087fc <TIM_OC1_SetConfig+0x64>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a1f      	ldr	r2, [pc, #124]	; (8008874 <TIM_OC1_SetConfig+0xdc>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d10c      	bne.n	8008816 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	f023 0308 	bic.w	r3, r3, #8
 8008802:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	697a      	ldr	r2, [r7, #20]
 800880a:	4313      	orrs	r3, r2
 800880c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	f023 0304 	bic.w	r3, r3, #4
 8008814:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a15      	ldr	r2, [pc, #84]	; (8008870 <TIM_OC1_SetConfig+0xd8>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d003      	beq.n	8008826 <TIM_OC1_SetConfig+0x8e>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a14      	ldr	r2, [pc, #80]	; (8008874 <TIM_OC1_SetConfig+0xdc>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d111      	bne.n	800884a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800882c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008834:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	695b      	ldr	r3, [r3, #20]
 800883a:	693a      	ldr	r2, [r7, #16]
 800883c:	4313      	orrs	r3, r2
 800883e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	699b      	ldr	r3, [r3, #24]
 8008844:	693a      	ldr	r2, [r7, #16]
 8008846:	4313      	orrs	r3, r2
 8008848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	693a      	ldr	r2, [r7, #16]
 800884e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	685a      	ldr	r2, [r3, #4]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	697a      	ldr	r2, [r7, #20]
 8008862:	621a      	str	r2, [r3, #32]
}
 8008864:	bf00      	nop
 8008866:	371c      	adds	r7, #28
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr
 8008870:	40010000 	.word	0x40010000
 8008874:	40010400 	.word	0x40010400

08008878 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008878:	b480      	push	{r7}
 800887a:	b087      	sub	sp, #28
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a1b      	ldr	r3, [r3, #32]
 8008886:	f023 0210 	bic.w	r2, r3, #16
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a1b      	ldr	r3, [r3, #32]
 8008892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	021b      	lsls	r3, r3, #8
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	f023 0320 	bic.w	r3, r3, #32
 80088c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	011b      	lsls	r3, r3, #4
 80088ca:	697a      	ldr	r2, [r7, #20]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a22      	ldr	r2, [pc, #136]	; (800895c <TIM_OC2_SetConfig+0xe4>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d003      	beq.n	80088e0 <TIM_OC2_SetConfig+0x68>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a21      	ldr	r2, [pc, #132]	; (8008960 <TIM_OC2_SetConfig+0xe8>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d10d      	bne.n	80088fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	011b      	lsls	r3, r3, #4
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a17      	ldr	r2, [pc, #92]	; (800895c <TIM_OC2_SetConfig+0xe4>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d003      	beq.n	800890c <TIM_OC2_SetConfig+0x94>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a16      	ldr	r2, [pc, #88]	; (8008960 <TIM_OC2_SetConfig+0xe8>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d113      	bne.n	8008934 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008912:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800891a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	695b      	ldr	r3, [r3, #20]
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	693a      	ldr	r2, [r7, #16]
 8008924:	4313      	orrs	r3, r2
 8008926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	699b      	ldr	r3, [r3, #24]
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	693a      	ldr	r2, [r7, #16]
 8008930:	4313      	orrs	r3, r2
 8008932:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	685a      	ldr	r2, [r3, #4]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	697a      	ldr	r2, [r7, #20]
 800894c:	621a      	str	r2, [r3, #32]
}
 800894e:	bf00      	nop
 8008950:	371c      	adds	r7, #28
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	40010000 	.word	0x40010000
 8008960:	40010400 	.word	0x40010400

08008964 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008964:	b480      	push	{r7}
 8008966:	b087      	sub	sp, #28
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a1b      	ldr	r3, [r3, #32]
 8008972:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a1b      	ldr	r3, [r3, #32]
 800897e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	69db      	ldr	r3, [r3, #28]
 800898a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f023 0303 	bic.w	r3, r3, #3
 800899a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	021b      	lsls	r3, r3, #8
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a21      	ldr	r2, [pc, #132]	; (8008a44 <TIM_OC3_SetConfig+0xe0>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d003      	beq.n	80089ca <TIM_OC3_SetConfig+0x66>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a20      	ldr	r2, [pc, #128]	; (8008a48 <TIM_OC3_SetConfig+0xe4>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d10d      	bne.n	80089e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	68db      	ldr	r3, [r3, #12]
 80089d6:	021b      	lsls	r3, r3, #8
 80089d8:	697a      	ldr	r2, [r7, #20]
 80089da:	4313      	orrs	r3, r2
 80089dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a16      	ldr	r2, [pc, #88]	; (8008a44 <TIM_OC3_SetConfig+0xe0>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d003      	beq.n	80089f6 <TIM_OC3_SetConfig+0x92>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4a15      	ldr	r2, [pc, #84]	; (8008a48 <TIM_OC3_SetConfig+0xe4>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d113      	bne.n	8008a1e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	695b      	ldr	r3, [r3, #20]
 8008a0a:	011b      	lsls	r3, r3, #4
 8008a0c:	693a      	ldr	r2, [r7, #16]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	699b      	ldr	r3, [r3, #24]
 8008a16:	011b      	lsls	r3, r3, #4
 8008a18:	693a      	ldr	r2, [r7, #16]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	693a      	ldr	r2, [r7, #16]
 8008a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	685a      	ldr	r2, [r3, #4]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	697a      	ldr	r2, [r7, #20]
 8008a36:	621a      	str	r2, [r3, #32]
}
 8008a38:	bf00      	nop
 8008a3a:	371c      	adds	r7, #28
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr
 8008a44:	40010000 	.word	0x40010000
 8008a48:	40010400 	.word	0x40010400

08008a4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b087      	sub	sp, #28
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a1b      	ldr	r3, [r3, #32]
 8008a5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a1b      	ldr	r3, [r3, #32]
 8008a66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	69db      	ldr	r3, [r3, #28]
 8008a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	021b      	lsls	r3, r3, #8
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	031b      	lsls	r3, r3, #12
 8008a9e:	693a      	ldr	r2, [r7, #16]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a12      	ldr	r2, [pc, #72]	; (8008af0 <TIM_OC4_SetConfig+0xa4>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d003      	beq.n	8008ab4 <TIM_OC4_SetConfig+0x68>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a11      	ldr	r2, [pc, #68]	; (8008af4 <TIM_OC4_SetConfig+0xa8>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d109      	bne.n	8008ac8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008aba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	695b      	ldr	r3, [r3, #20]
 8008ac0:	019b      	lsls	r3, r3, #6
 8008ac2:	697a      	ldr	r2, [r7, #20]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	697a      	ldr	r2, [r7, #20]
 8008acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	685a      	ldr	r2, [r3, #4]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	693a      	ldr	r2, [r7, #16]
 8008ae0:	621a      	str	r2, [r3, #32]
}
 8008ae2:	bf00      	nop
 8008ae4:	371c      	adds	r7, #28
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	40010000 	.word	0x40010000
 8008af4:	40010400 	.word	0x40010400

08008af8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b087      	sub	sp, #28
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6a1b      	ldr	r3, [r3, #32]
 8008b08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6a1b      	ldr	r3, [r3, #32]
 8008b0e:	f023 0201 	bic.w	r2, r3, #1
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	011b      	lsls	r3, r3, #4
 8008b28:	693a      	ldr	r2, [r7, #16]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	f023 030a 	bic.w	r3, r3, #10
 8008b34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b36:	697a      	ldr	r2, [r7, #20]
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	693a      	ldr	r2, [r7, #16]
 8008b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	621a      	str	r2, [r3, #32]
}
 8008b4a:	bf00      	nop
 8008b4c:	371c      	adds	r7, #28
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr

08008b56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b56:	b480      	push	{r7}
 8008b58:	b087      	sub	sp, #28
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	60f8      	str	r0, [r7, #12]
 8008b5e:	60b9      	str	r1, [r7, #8]
 8008b60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6a1b      	ldr	r3, [r3, #32]
 8008b66:	f023 0210 	bic.w	r2, r3, #16
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	699b      	ldr	r3, [r3, #24]
 8008b72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6a1b      	ldr	r3, [r3, #32]
 8008b78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	031b      	lsls	r3, r3, #12
 8008b86:	697a      	ldr	r2, [r7, #20]
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008b92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	011b      	lsls	r3, r3, #4
 8008b98:	693a      	ldr	r2, [r7, #16]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	697a      	ldr	r2, [r7, #20]
 8008ba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	693a      	ldr	r2, [r7, #16]
 8008ba8:	621a      	str	r2, [r3, #32]
}
 8008baa:	bf00      	nop
 8008bac:	371c      	adds	r7, #28
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr

08008bb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b085      	sub	sp, #20
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008bce:	683a      	ldr	r2, [r7, #0]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	f043 0307 	orr.w	r3, r3, #7
 8008bd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	609a      	str	r2, [r3, #8]
}
 8008be0:	bf00      	nop
 8008be2:	3714      	adds	r7, #20
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b087      	sub	sp, #28
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	607a      	str	r2, [r7, #4]
 8008bf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	021a      	lsls	r2, r3, #8
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	431a      	orrs	r2, r3
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	697a      	ldr	r2, [r7, #20]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	697a      	ldr	r2, [r7, #20]
 8008c1e:	609a      	str	r2, [r3, #8]
}
 8008c20:	bf00      	nop
 8008c22:	371c      	adds	r7, #28
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b087      	sub	sp, #28
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	f003 031f 	and.w	r3, r3, #31
 8008c3e:	2201      	movs	r2, #1
 8008c40:	fa02 f303 	lsl.w	r3, r2, r3
 8008c44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6a1a      	ldr	r2, [r3, #32]
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	43db      	mvns	r3, r3
 8008c4e:	401a      	ands	r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6a1a      	ldr	r2, [r3, #32]
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	f003 031f 	and.w	r3, r3, #31
 8008c5e:	6879      	ldr	r1, [r7, #4]
 8008c60:	fa01 f303 	lsl.w	r3, r1, r3
 8008c64:	431a      	orrs	r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	621a      	str	r2, [r3, #32]
}
 8008c6a:	bf00      	nop
 8008c6c:	371c      	adds	r7, #28
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr
	...

08008c78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d101      	bne.n	8008c90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c8c:	2302      	movs	r3, #2
 8008c8e:	e05a      	b.n	8008d46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a21      	ldr	r2, [pc, #132]	; (8008d54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d022      	beq.n	8008d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cdc:	d01d      	beq.n	8008d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a1d      	ldr	r2, [pc, #116]	; (8008d58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d018      	beq.n	8008d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a1b      	ldr	r2, [pc, #108]	; (8008d5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d013      	beq.n	8008d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a1a      	ldr	r2, [pc, #104]	; (8008d60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d00e      	beq.n	8008d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a18      	ldr	r2, [pc, #96]	; (8008d64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d009      	beq.n	8008d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a17      	ldr	r2, [pc, #92]	; (8008d68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d004      	beq.n	8008d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a15      	ldr	r2, [pc, #84]	; (8008d6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d10c      	bne.n	8008d34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	68ba      	ldr	r2, [r7, #8]
 8008d32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	40010000 	.word	0x40010000
 8008d58:	40000400 	.word	0x40000400
 8008d5c:	40000800 	.word	0x40000800
 8008d60:	40000c00 	.word	0x40000c00
 8008d64:	40010400 	.word	0x40010400
 8008d68:	40014000 	.word	0x40014000
 8008d6c:	40001800 	.word	0x40001800

08008d70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d101      	bne.n	8008d8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008d88:	2302      	movs	r3, #2
 8008d8a:	e03d      	b.n	8008e08 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	4313      	orrs	r3, r2
 8008dae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	695b      	ldr	r3, [r3, #20]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	69db      	ldr	r3, [r3, #28]
 8008df2:	4313      	orrs	r3, r2
 8008df4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	68fa      	ldr	r2, [r7, #12]
 8008dfc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e1c:	bf00      	nop
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e30:	bf00      	nop
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d101      	bne.n	8008e4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e03f      	b.n	8008ece <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d106      	bne.n	8008e68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f7fa fe10 	bl	8003a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2224      	movs	r2, #36	; 0x24
 8008e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68da      	ldr	r2, [r3, #12]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 fddf 	bl	8009a44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	691a      	ldr	r2, [r3, #16]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	695a      	ldr	r2, [r3, #20]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ea4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68da      	ldr	r2, [r3, #12]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008eb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2220      	movs	r2, #32
 8008ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2220      	movs	r2, #32
 8008ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3708      	adds	r7, #8
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b08a      	sub	sp, #40	; 0x28
 8008eda:	af02      	add	r7, sp, #8
 8008edc:	60f8      	str	r0, [r7, #12]
 8008ede:	60b9      	str	r1, [r7, #8]
 8008ee0:	603b      	str	r3, [r7, #0]
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b20      	cmp	r3, #32
 8008ef4:	d17c      	bne.n	8008ff0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d002      	beq.n	8008f02 <HAL_UART_Transmit+0x2c>
 8008efc:	88fb      	ldrh	r3, [r7, #6]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d101      	bne.n	8008f06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	e075      	b.n	8008ff2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d101      	bne.n	8008f14 <HAL_UART_Transmit+0x3e>
 8008f10:	2302      	movs	r3, #2
 8008f12:	e06e      	b.n	8008ff2 <HAL_UART_Transmit+0x11c>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2221      	movs	r2, #33	; 0x21
 8008f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f2a:	f7fb fb67 	bl	80045fc <HAL_GetTick>
 8008f2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	88fa      	ldrh	r2, [r7, #6]
 8008f34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	88fa      	ldrh	r2, [r7, #6]
 8008f3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f44:	d108      	bne.n	8008f58 <HAL_UART_Transmit+0x82>
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	691b      	ldr	r3, [r3, #16]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d104      	bne.n	8008f58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	61bb      	str	r3, [r7, #24]
 8008f56:	e003      	b.n	8008f60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2200      	movs	r2, #0
 8008f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008f68:	e02a      	b.n	8008fc0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	2200      	movs	r2, #0
 8008f72:	2180      	movs	r1, #128	; 0x80
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f000 fb1f 	bl	80095b8 <UART_WaitOnFlagUntilTimeout>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d001      	beq.n	8008f84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008f80:	2303      	movs	r3, #3
 8008f82:	e036      	b.n	8008ff2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10b      	bne.n	8008fa2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	881b      	ldrh	r3, [r3, #0]
 8008f8e:	461a      	mov	r2, r3
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	3302      	adds	r3, #2
 8008f9e:	61bb      	str	r3, [r7, #24]
 8008fa0:	e007      	b.n	8008fb2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	781a      	ldrb	r2, [r3, #0]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	3b01      	subs	r3, #1
 8008fba:	b29a      	uxth	r2, r3
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d1cf      	bne.n	8008f6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	2140      	movs	r1, #64	; 0x40
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f000 faef 	bl	80095b8 <UART_WaitOnFlagUntilTimeout>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d001      	beq.n	8008fe4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008fe0:	2303      	movs	r3, #3
 8008fe2:	e006      	b.n	8008ff2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2220      	movs	r2, #32
 8008fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	e000      	b.n	8008ff2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008ff0:	2302      	movs	r3, #2
  }
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3720      	adds	r7, #32
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b084      	sub	sp, #16
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	60f8      	str	r0, [r7, #12]
 8009002:	60b9      	str	r1, [r7, #8]
 8009004:	4613      	mov	r3, r2
 8009006:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800900e:	b2db      	uxtb	r3, r3
 8009010:	2b20      	cmp	r3, #32
 8009012:	d11d      	bne.n	8009050 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d002      	beq.n	8009020 <HAL_UART_Receive_IT+0x26>
 800901a:	88fb      	ldrh	r3, [r7, #6]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d101      	bne.n	8009024 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	e016      	b.n	8009052 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800902a:	2b01      	cmp	r3, #1
 800902c:	d101      	bne.n	8009032 <HAL_UART_Receive_IT+0x38>
 800902e:	2302      	movs	r3, #2
 8009030:	e00f      	b.n	8009052 <HAL_UART_Receive_IT+0x58>
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2201      	movs	r2, #1
 8009036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009040:	88fb      	ldrh	r3, [r7, #6]
 8009042:	461a      	mov	r2, r3
 8009044:	68b9      	ldr	r1, [r7, #8]
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f000 fb24 	bl	8009694 <UART_Start_Receive_IT>
 800904c:	4603      	mov	r3, r0
 800904e:	e000      	b.n	8009052 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009050:	2302      	movs	r3, #2
  }
}
 8009052:	4618      	mov	r0, r3
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
	...

0800905c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b0ba      	sub	sp, #232	; 0xe8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	695b      	ldr	r3, [r3, #20]
 800907e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009082:	2300      	movs	r3, #0
 8009084:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009088:	2300      	movs	r3, #0
 800908a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800908e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009092:	f003 030f 	and.w	r3, r3, #15
 8009096:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800909a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10f      	bne.n	80090c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80090a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090a6:	f003 0320 	and.w	r3, r3, #32
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d009      	beq.n	80090c2 <HAL_UART_IRQHandler+0x66>
 80090ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090b2:	f003 0320 	and.w	r3, r3, #32
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d003      	beq.n	80090c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fc07 	bl	80098ce <UART_Receive_IT>
      return;
 80090c0:	e256      	b.n	8009570 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80090c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f000 80de 	beq.w	8009288 <HAL_UART_IRQHandler+0x22c>
 80090cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090d0:	f003 0301 	and.w	r3, r3, #1
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d106      	bne.n	80090e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80090d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f000 80d1 	beq.w	8009288 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80090e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090ea:	f003 0301 	and.w	r3, r3, #1
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00b      	beq.n	800910a <HAL_UART_IRQHandler+0xae>
 80090f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d005      	beq.n	800910a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009102:	f043 0201 	orr.w	r2, r3, #1
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800910a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800910e:	f003 0304 	and.w	r3, r3, #4
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00b      	beq.n	800912e <HAL_UART_IRQHandler+0xd2>
 8009116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800911a:	f003 0301 	and.w	r3, r3, #1
 800911e:	2b00      	cmp	r3, #0
 8009120:	d005      	beq.n	800912e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009126:	f043 0202 	orr.w	r2, r3, #2
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800912e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009132:	f003 0302 	and.w	r3, r3, #2
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00b      	beq.n	8009152 <HAL_UART_IRQHandler+0xf6>
 800913a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800913e:	f003 0301 	and.w	r3, r3, #1
 8009142:	2b00      	cmp	r3, #0
 8009144:	d005      	beq.n	8009152 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914a:	f043 0204 	orr.w	r2, r3, #4
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009156:	f003 0308 	and.w	r3, r3, #8
 800915a:	2b00      	cmp	r3, #0
 800915c:	d011      	beq.n	8009182 <HAL_UART_IRQHandler+0x126>
 800915e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009162:	f003 0320 	and.w	r3, r3, #32
 8009166:	2b00      	cmp	r3, #0
 8009168:	d105      	bne.n	8009176 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800916a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800916e:	f003 0301 	and.w	r3, r3, #1
 8009172:	2b00      	cmp	r3, #0
 8009174:	d005      	beq.n	8009182 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917a:	f043 0208 	orr.w	r2, r3, #8
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009186:	2b00      	cmp	r3, #0
 8009188:	f000 81ed 	beq.w	8009566 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800918c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009190:	f003 0320 	and.w	r3, r3, #32
 8009194:	2b00      	cmp	r3, #0
 8009196:	d008      	beq.n	80091aa <HAL_UART_IRQHandler+0x14e>
 8009198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800919c:	f003 0320 	and.w	r3, r3, #32
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d002      	beq.n	80091aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 fb92 	bl	80098ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	695b      	ldr	r3, [r3, #20]
 80091b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091b4:	2b40      	cmp	r3, #64	; 0x40
 80091b6:	bf0c      	ite	eq
 80091b8:	2301      	moveq	r3, #1
 80091ba:	2300      	movne	r3, #0
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c6:	f003 0308 	and.w	r3, r3, #8
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d103      	bne.n	80091d6 <HAL_UART_IRQHandler+0x17a>
 80091ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d04f      	beq.n	8009276 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fa9a 	bl	8009710 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	695b      	ldr	r3, [r3, #20]
 80091e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091e6:	2b40      	cmp	r3, #64	; 0x40
 80091e8:	d141      	bne.n	800926e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	3314      	adds	r3, #20
 80091f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091f8:	e853 3f00 	ldrex	r3, [r3]
 80091fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009200:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009208:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	3314      	adds	r3, #20
 8009212:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009216:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800921a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009222:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009226:	e841 2300 	strex	r3, r2, [r1]
 800922a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800922e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d1d9      	bne.n	80091ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800923a:	2b00      	cmp	r3, #0
 800923c:	d013      	beq.n	8009266 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009242:	4a7d      	ldr	r2, [pc, #500]	; (8009438 <HAL_UART_IRQHandler+0x3dc>)
 8009244:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800924a:	4618      	mov	r0, r3
 800924c:	f7fb fc8e 	bl	8004b6c <HAL_DMA_Abort_IT>
 8009250:	4603      	mov	r3, r0
 8009252:	2b00      	cmp	r3, #0
 8009254:	d016      	beq.n	8009284 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800925a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009260:	4610      	mov	r0, r2
 8009262:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009264:	e00e      	b.n	8009284 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 f990 	bl	800958c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800926c:	e00a      	b.n	8009284 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 f98c 	bl	800958c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009274:	e006      	b.n	8009284 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 f988 	bl	800958c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009282:	e170      	b.n	8009566 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009284:	bf00      	nop
    return;
 8009286:	e16e      	b.n	8009566 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928c:	2b01      	cmp	r3, #1
 800928e:	f040 814a 	bne.w	8009526 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009296:	f003 0310 	and.w	r3, r3, #16
 800929a:	2b00      	cmp	r3, #0
 800929c:	f000 8143 	beq.w	8009526 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80092a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092a4:	f003 0310 	and.w	r3, r3, #16
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f000 813c 	beq.w	8009526 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80092ae:	2300      	movs	r3, #0
 80092b0:	60bb      	str	r3, [r7, #8]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	60bb      	str	r3, [r7, #8]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	60bb      	str	r3, [r7, #8]
 80092c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ce:	2b40      	cmp	r3, #64	; 0x40
 80092d0:	f040 80b4 	bne.w	800943c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80092e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f000 8140 	beq.w	800956a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80092ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80092f2:	429a      	cmp	r2, r3
 80092f4:	f080 8139 	bcs.w	800956a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80092fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009304:	69db      	ldr	r3, [r3, #28]
 8009306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800930a:	f000 8088 	beq.w	800941e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	330c      	adds	r3, #12
 8009314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009318:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800931c:	e853 3f00 	ldrex	r3, [r3]
 8009320:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009324:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800932c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	330c      	adds	r3, #12
 8009336:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800933a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800933e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009342:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009346:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800934a:	e841 2300 	strex	r3, r2, [r1]
 800934e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009352:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1d9      	bne.n	800930e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	3314      	adds	r3, #20
 8009360:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009364:	e853 3f00 	ldrex	r3, [r3]
 8009368:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800936a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800936c:	f023 0301 	bic.w	r3, r3, #1
 8009370:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	3314      	adds	r3, #20
 800937a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800937e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009382:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009384:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009386:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800938a:	e841 2300 	strex	r3, r2, [r1]
 800938e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009390:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1e1      	bne.n	800935a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	3314      	adds	r3, #20
 800939c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093a0:	e853 3f00 	ldrex	r3, [r3]
 80093a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80093a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	3314      	adds	r3, #20
 80093b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80093ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80093bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80093c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80093c2:	e841 2300 	strex	r3, r2, [r1]
 80093c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80093c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1e3      	bne.n	8009396 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2220      	movs	r2, #32
 80093d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	330c      	adds	r3, #12
 80093e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093e6:	e853 3f00 	ldrex	r3, [r3]
 80093ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80093ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093ee:	f023 0310 	bic.w	r3, r3, #16
 80093f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	330c      	adds	r3, #12
 80093fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009400:	65ba      	str	r2, [r7, #88]	; 0x58
 8009402:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009404:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009406:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009408:	e841 2300 	strex	r3, r2, [r1]
 800940c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800940e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1e3      	bne.n	80093dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009418:	4618      	mov	r0, r3
 800941a:	f7fb fb37 	bl	8004a8c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009426:	b29b      	uxth	r3, r3
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	b29b      	uxth	r3, r3
 800942c:	4619      	mov	r1, r3
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 f8b6 	bl	80095a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009434:	e099      	b.n	800956a <HAL_UART_IRQHandler+0x50e>
 8009436:	bf00      	nop
 8009438:	080097d7 	.word	0x080097d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009444:	b29b      	uxth	r3, r3
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009450:	b29b      	uxth	r3, r3
 8009452:	2b00      	cmp	r3, #0
 8009454:	f000 808b 	beq.w	800956e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009458:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800945c:	2b00      	cmp	r3, #0
 800945e:	f000 8086 	beq.w	800956e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	330c      	adds	r3, #12
 8009468:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946c:	e853 3f00 	ldrex	r3, [r3]
 8009470:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009474:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009478:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	330c      	adds	r3, #12
 8009482:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009486:	647a      	str	r2, [r7, #68]	; 0x44
 8009488:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800948c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800948e:	e841 2300 	strex	r3, r2, [r1]
 8009492:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1e3      	bne.n	8009462 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	3314      	adds	r3, #20
 80094a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a4:	e853 3f00 	ldrex	r3, [r3]
 80094a8:	623b      	str	r3, [r7, #32]
   return(result);
 80094aa:	6a3b      	ldr	r3, [r7, #32]
 80094ac:	f023 0301 	bic.w	r3, r3, #1
 80094b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	3314      	adds	r3, #20
 80094ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80094be:	633a      	str	r2, [r7, #48]	; 0x30
 80094c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094c6:	e841 2300 	strex	r3, r2, [r1]
 80094ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d1e3      	bne.n	800949a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2220      	movs	r2, #32
 80094d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	330c      	adds	r3, #12
 80094e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	e853 3f00 	ldrex	r3, [r3]
 80094ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f023 0310 	bic.w	r3, r3, #16
 80094f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	330c      	adds	r3, #12
 8009500:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009504:	61fa      	str	r2, [r7, #28]
 8009506:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009508:	69b9      	ldr	r1, [r7, #24]
 800950a:	69fa      	ldr	r2, [r7, #28]
 800950c:	e841 2300 	strex	r3, r2, [r1]
 8009510:	617b      	str	r3, [r7, #20]
   return(result);
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d1e3      	bne.n	80094e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009518:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800951c:	4619      	mov	r1, r3
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f83e 	bl	80095a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009524:	e023      	b.n	800956e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800952a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800952e:	2b00      	cmp	r3, #0
 8009530:	d009      	beq.n	8009546 <HAL_UART_IRQHandler+0x4ea>
 8009532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800953a:	2b00      	cmp	r3, #0
 800953c:	d003      	beq.n	8009546 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 f95d 	bl	80097fe <UART_Transmit_IT>
    return;
 8009544:	e014      	b.n	8009570 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800954a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800954e:	2b00      	cmp	r3, #0
 8009550:	d00e      	beq.n	8009570 <HAL_UART_IRQHandler+0x514>
 8009552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800955a:	2b00      	cmp	r3, #0
 800955c:	d008      	beq.n	8009570 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 f99d 	bl	800989e <UART_EndTransmit_IT>
    return;
 8009564:	e004      	b.n	8009570 <HAL_UART_IRQHandler+0x514>
    return;
 8009566:	bf00      	nop
 8009568:	e002      	b.n	8009570 <HAL_UART_IRQHandler+0x514>
      return;
 800956a:	bf00      	nop
 800956c:	e000      	b.n	8009570 <HAL_UART_IRQHandler+0x514>
      return;
 800956e:	bf00      	nop
  }
}
 8009570:	37e8      	adds	r7, #232	; 0xe8
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop

08009578 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009594:	bf00      	nop
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	460b      	mov	r3, r1
 80095aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b090      	sub	sp, #64	; 0x40
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	603b      	str	r3, [r7, #0]
 80095c4:	4613      	mov	r3, r2
 80095c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095c8:	e050      	b.n	800966c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095d0:	d04c      	beq.n	800966c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80095d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d007      	beq.n	80095e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80095d8:	f7fb f810 	bl	80045fc <HAL_GetTick>
 80095dc:	4602      	mov	r2, r0
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d241      	bcs.n	800966c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	330c      	adds	r3, #12
 80095ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f2:	e853 3f00 	ldrex	r3, [r3]
 80095f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80095fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	330c      	adds	r3, #12
 8009606:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009608:	637a      	str	r2, [r7, #52]	; 0x34
 800960a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800960e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009610:	e841 2300 	strex	r3, r2, [r1]
 8009614:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1e5      	bne.n	80095e8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	3314      	adds	r3, #20
 8009622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	e853 3f00 	ldrex	r3, [r3]
 800962a:	613b      	str	r3, [r7, #16]
   return(result);
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	f023 0301 	bic.w	r3, r3, #1
 8009632:	63bb      	str	r3, [r7, #56]	; 0x38
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	3314      	adds	r3, #20
 800963a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800963c:	623a      	str	r2, [r7, #32]
 800963e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009640:	69f9      	ldr	r1, [r7, #28]
 8009642:	6a3a      	ldr	r2, [r7, #32]
 8009644:	e841 2300 	strex	r3, r2, [r1]
 8009648:	61bb      	str	r3, [r7, #24]
   return(result);
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1e5      	bne.n	800961c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2220      	movs	r2, #32
 8009654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2220      	movs	r2, #32
 800965c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2200      	movs	r2, #0
 8009664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009668:	2303      	movs	r3, #3
 800966a:	e00f      	b.n	800968c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	4013      	ands	r3, r2
 8009676:	68ba      	ldr	r2, [r7, #8]
 8009678:	429a      	cmp	r2, r3
 800967a:	bf0c      	ite	eq
 800967c:	2301      	moveq	r3, #1
 800967e:	2300      	movne	r3, #0
 8009680:	b2db      	uxtb	r3, r3
 8009682:	461a      	mov	r2, r3
 8009684:	79fb      	ldrb	r3, [r7, #7]
 8009686:	429a      	cmp	r2, r3
 8009688:	d09f      	beq.n	80095ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3740      	adds	r7, #64	; 0x40
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	4613      	mov	r3, r2
 80096a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	68ba      	ldr	r2, [r7, #8]
 80096a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	88fa      	ldrh	r2, [r7, #6]
 80096ac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	88fa      	ldrh	r2, [r7, #6]
 80096b2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2200      	movs	r2, #0
 80096b8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2222      	movs	r2, #34	; 0x22
 80096be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2200      	movs	r2, #0
 80096c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d007      	beq.n	80096e2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	68da      	ldr	r2, [r3, #12]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096e0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	695a      	ldr	r2, [r3, #20]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f042 0201 	orr.w	r2, r2, #1
 80096f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	68da      	ldr	r2, [r3, #12]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f042 0220 	orr.w	r2, r2, #32
 8009700:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009702:	2300      	movs	r3, #0
}
 8009704:	4618      	mov	r0, r3
 8009706:	3714      	adds	r7, #20
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009710:	b480      	push	{r7}
 8009712:	b095      	sub	sp, #84	; 0x54
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	330c      	adds	r3, #12
 800971e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009722:	e853 3f00 	ldrex	r3, [r3]
 8009726:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800972e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	330c      	adds	r3, #12
 8009736:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009738:	643a      	str	r2, [r7, #64]	; 0x40
 800973a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800973e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009740:	e841 2300 	strex	r3, r2, [r1]
 8009744:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009748:	2b00      	cmp	r3, #0
 800974a:	d1e5      	bne.n	8009718 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	3314      	adds	r3, #20
 8009752:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009754:	6a3b      	ldr	r3, [r7, #32]
 8009756:	e853 3f00 	ldrex	r3, [r3]
 800975a:	61fb      	str	r3, [r7, #28]
   return(result);
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	f023 0301 	bic.w	r3, r3, #1
 8009762:	64bb      	str	r3, [r7, #72]	; 0x48
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	3314      	adds	r3, #20
 800976a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800976c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800976e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009770:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009774:	e841 2300 	strex	r3, r2, [r1]
 8009778:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800977a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977c:	2b00      	cmp	r3, #0
 800977e:	d1e5      	bne.n	800974c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009784:	2b01      	cmp	r3, #1
 8009786:	d119      	bne.n	80097bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	330c      	adds	r3, #12
 800978e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	e853 3f00 	ldrex	r3, [r3]
 8009796:	60bb      	str	r3, [r7, #8]
   return(result);
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	f023 0310 	bic.w	r3, r3, #16
 800979e:	647b      	str	r3, [r7, #68]	; 0x44
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	330c      	adds	r3, #12
 80097a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097a8:	61ba      	str	r2, [r7, #24]
 80097aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ac:	6979      	ldr	r1, [r7, #20]
 80097ae:	69ba      	ldr	r2, [r7, #24]
 80097b0:	e841 2300 	strex	r3, r2, [r1]
 80097b4:	613b      	str	r3, [r7, #16]
   return(result);
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d1e5      	bne.n	8009788 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2220      	movs	r2, #32
 80097c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80097ca:	bf00      	nop
 80097cc:	3754      	adds	r7, #84	; 0x54
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b084      	sub	sp, #16
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2200      	movs	r2, #0
 80097e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2200      	movs	r2, #0
 80097ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097f0:	68f8      	ldr	r0, [r7, #12]
 80097f2:	f7ff fecb 	bl	800958c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097f6:	bf00      	nop
 80097f8:	3710      	adds	r7, #16
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80097fe:	b480      	push	{r7}
 8009800:	b085      	sub	sp, #20
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800980c:	b2db      	uxtb	r3, r3
 800980e:	2b21      	cmp	r3, #33	; 0x21
 8009810:	d13e      	bne.n	8009890 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800981a:	d114      	bne.n	8009846 <UART_Transmit_IT+0x48>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d110      	bne.n	8009846 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6a1b      	ldr	r3, [r3, #32]
 8009828:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	881b      	ldrh	r3, [r3, #0]
 800982e:	461a      	mov	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009838:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a1b      	ldr	r3, [r3, #32]
 800983e:	1c9a      	adds	r2, r3, #2
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	621a      	str	r2, [r3, #32]
 8009844:	e008      	b.n	8009858 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6a1b      	ldr	r3, [r3, #32]
 800984a:	1c59      	adds	r1, r3, #1
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	6211      	str	r1, [r2, #32]
 8009850:	781a      	ldrb	r2, [r3, #0]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800985c:	b29b      	uxth	r3, r3
 800985e:	3b01      	subs	r3, #1
 8009860:	b29b      	uxth	r3, r3
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	4619      	mov	r1, r3
 8009866:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10f      	bne.n	800988c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68da      	ldr	r2, [r3, #12]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800987a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	68da      	ldr	r2, [r3, #12]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800988a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800988c:	2300      	movs	r3, #0
 800988e:	e000      	b.n	8009892 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009890:	2302      	movs	r3, #2
  }
}
 8009892:	4618      	mov	r0, r3
 8009894:	3714      	adds	r7, #20
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr

0800989e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b082      	sub	sp, #8
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	68da      	ldr	r2, [r3, #12]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2220      	movs	r2, #32
 80098ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f7ff fe5a 	bl	8009578 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3708      	adds	r7, #8
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b08c      	sub	sp, #48	; 0x30
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	2b22      	cmp	r3, #34	; 0x22
 80098e0:	f040 80ab 	bne.w	8009a3a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098ec:	d117      	bne.n	800991e <UART_Receive_IT+0x50>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	691b      	ldr	r3, [r3, #16]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d113      	bne.n	800991e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80098f6:	2300      	movs	r3, #0
 80098f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	b29b      	uxth	r3, r3
 8009908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800990c:	b29a      	uxth	r2, r3
 800990e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009910:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009916:	1c9a      	adds	r2, r3, #2
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	629a      	str	r2, [r3, #40]	; 0x28
 800991c:	e026      	b.n	800996c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009922:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009924:	2300      	movs	r3, #0
 8009926:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	689b      	ldr	r3, [r3, #8]
 800992c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009930:	d007      	beq.n	8009942 <UART_Receive_IT+0x74>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10a      	bne.n	8009950 <UART_Receive_IT+0x82>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	691b      	ldr	r3, [r3, #16]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d106      	bne.n	8009950 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	b2da      	uxtb	r2, r3
 800994a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994c:	701a      	strb	r2, [r3, #0]
 800994e:	e008      	b.n	8009962 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	b2db      	uxtb	r3, r3
 8009958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800995c:	b2da      	uxtb	r2, r3
 800995e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009960:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009966:	1c5a      	adds	r2, r3, #1
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009970:	b29b      	uxth	r3, r3
 8009972:	3b01      	subs	r3, #1
 8009974:	b29b      	uxth	r3, r3
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	4619      	mov	r1, r3
 800997a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800997c:	2b00      	cmp	r3, #0
 800997e:	d15a      	bne.n	8009a36 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	68da      	ldr	r2, [r3, #12]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f022 0220 	bic.w	r2, r2, #32
 800998e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	68da      	ldr	r2, [r3, #12]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800999e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	695a      	ldr	r2, [r3, #20]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f022 0201 	bic.w	r2, r2, #1
 80099ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2220      	movs	r2, #32
 80099b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d135      	bne.n	8009a2c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	330c      	adds	r3, #12
 80099cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	e853 3f00 	ldrex	r3, [r3]
 80099d4:	613b      	str	r3, [r7, #16]
   return(result);
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	f023 0310 	bic.w	r3, r3, #16
 80099dc:	627b      	str	r3, [r7, #36]	; 0x24
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	330c      	adds	r3, #12
 80099e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099e6:	623a      	str	r2, [r7, #32]
 80099e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ea:	69f9      	ldr	r1, [r7, #28]
 80099ec:	6a3a      	ldr	r2, [r7, #32]
 80099ee:	e841 2300 	strex	r3, r2, [r1]
 80099f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d1e5      	bne.n	80099c6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f003 0310 	and.w	r3, r3, #16
 8009a04:	2b10      	cmp	r3, #16
 8009a06:	d10a      	bne.n	8009a1e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a08:	2300      	movs	r3, #0
 8009a0a:	60fb      	str	r3, [r7, #12]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	60fb      	str	r3, [r7, #12]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	60fb      	str	r3, [r7, #12]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009a22:	4619      	mov	r1, r3
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f7ff fdbb 	bl	80095a0 <HAL_UARTEx_RxEventCallback>
 8009a2a:	e002      	b.n	8009a32 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f7f9 fd1f 	bl	8003470 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	e002      	b.n	8009a3c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009a36:	2300      	movs	r3, #0
 8009a38:	e000      	b.n	8009a3c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009a3a:	2302      	movs	r3, #2
  }
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3730      	adds	r7, #48	; 0x30
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a48:	b0c0      	sub	sp, #256	; 0x100
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	691b      	ldr	r3, [r3, #16]
 8009a58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a60:	68d9      	ldr	r1, [r3, #12]
 8009a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	ea40 0301 	orr.w	r3, r0, r1
 8009a6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a72:	689a      	ldr	r2, [r3, #8]
 8009a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	431a      	orrs	r2, r3
 8009a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a80:	695b      	ldr	r3, [r3, #20]
 8009a82:	431a      	orrs	r2, r3
 8009a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a88:	69db      	ldr	r3, [r3, #28]
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009a9c:	f021 010c 	bic.w	r1, r1, #12
 8009aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009aaa:	430b      	orrs	r3, r1
 8009aac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	695b      	ldr	r3, [r3, #20]
 8009ab6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009abe:	6999      	ldr	r1, [r3, #24]
 8009ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	ea40 0301 	orr.w	r3, r0, r1
 8009aca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	4b8f      	ldr	r3, [pc, #572]	; (8009d10 <UART_SetConfig+0x2cc>)
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d005      	beq.n	8009ae4 <UART_SetConfig+0xa0>
 8009ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	4b8d      	ldr	r3, [pc, #564]	; (8009d14 <UART_SetConfig+0x2d0>)
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d104      	bne.n	8009aee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009ae4:	f7fd fd2c 	bl	8007540 <HAL_RCC_GetPCLK2Freq>
 8009ae8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009aec:	e003      	b.n	8009af6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009aee:	f7fd fd13 	bl	8007518 <HAL_RCC_GetPCLK1Freq>
 8009af2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009afa:	69db      	ldr	r3, [r3, #28]
 8009afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b00:	f040 810c 	bne.w	8009d1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009b04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009b0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009b12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009b16:	4622      	mov	r2, r4
 8009b18:	462b      	mov	r3, r5
 8009b1a:	1891      	adds	r1, r2, r2
 8009b1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8009b1e:	415b      	adcs	r3, r3
 8009b20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009b26:	4621      	mov	r1, r4
 8009b28:	eb12 0801 	adds.w	r8, r2, r1
 8009b2c:	4629      	mov	r1, r5
 8009b2e:	eb43 0901 	adc.w	r9, r3, r1
 8009b32:	f04f 0200 	mov.w	r2, #0
 8009b36:	f04f 0300 	mov.w	r3, #0
 8009b3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009b3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009b42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009b46:	4690      	mov	r8, r2
 8009b48:	4699      	mov	r9, r3
 8009b4a:	4623      	mov	r3, r4
 8009b4c:	eb18 0303 	adds.w	r3, r8, r3
 8009b50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b54:	462b      	mov	r3, r5
 8009b56:	eb49 0303 	adc.w	r3, r9, r3
 8009b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009b6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009b6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009b72:	460b      	mov	r3, r1
 8009b74:	18db      	adds	r3, r3, r3
 8009b76:	653b      	str	r3, [r7, #80]	; 0x50
 8009b78:	4613      	mov	r3, r2
 8009b7a:	eb42 0303 	adc.w	r3, r2, r3
 8009b7e:	657b      	str	r3, [r7, #84]	; 0x54
 8009b80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009b84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009b88:	f7f6 fe80 	bl	800088c <__aeabi_uldivmod>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	4b61      	ldr	r3, [pc, #388]	; (8009d18 <UART_SetConfig+0x2d4>)
 8009b92:	fba3 2302 	umull	r2, r3, r3, r2
 8009b96:	095b      	lsrs	r3, r3, #5
 8009b98:	011c      	lsls	r4, r3, #4
 8009b9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ba4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009ba8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009bac:	4642      	mov	r2, r8
 8009bae:	464b      	mov	r3, r9
 8009bb0:	1891      	adds	r1, r2, r2
 8009bb2:	64b9      	str	r1, [r7, #72]	; 0x48
 8009bb4:	415b      	adcs	r3, r3
 8009bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009bbc:	4641      	mov	r1, r8
 8009bbe:	eb12 0a01 	adds.w	sl, r2, r1
 8009bc2:	4649      	mov	r1, r9
 8009bc4:	eb43 0b01 	adc.w	fp, r3, r1
 8009bc8:	f04f 0200 	mov.w	r2, #0
 8009bcc:	f04f 0300 	mov.w	r3, #0
 8009bd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009bd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009bd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009bdc:	4692      	mov	sl, r2
 8009bde:	469b      	mov	fp, r3
 8009be0:	4643      	mov	r3, r8
 8009be2:	eb1a 0303 	adds.w	r3, sl, r3
 8009be6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009bea:	464b      	mov	r3, r9
 8009bec:	eb4b 0303 	adc.w	r3, fp, r3
 8009bf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009c00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009c04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009c08:	460b      	mov	r3, r1
 8009c0a:	18db      	adds	r3, r3, r3
 8009c0c:	643b      	str	r3, [r7, #64]	; 0x40
 8009c0e:	4613      	mov	r3, r2
 8009c10:	eb42 0303 	adc.w	r3, r2, r3
 8009c14:	647b      	str	r3, [r7, #68]	; 0x44
 8009c16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009c1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009c1e:	f7f6 fe35 	bl	800088c <__aeabi_uldivmod>
 8009c22:	4602      	mov	r2, r0
 8009c24:	460b      	mov	r3, r1
 8009c26:	4611      	mov	r1, r2
 8009c28:	4b3b      	ldr	r3, [pc, #236]	; (8009d18 <UART_SetConfig+0x2d4>)
 8009c2a:	fba3 2301 	umull	r2, r3, r3, r1
 8009c2e:	095b      	lsrs	r3, r3, #5
 8009c30:	2264      	movs	r2, #100	; 0x64
 8009c32:	fb02 f303 	mul.w	r3, r2, r3
 8009c36:	1acb      	subs	r3, r1, r3
 8009c38:	00db      	lsls	r3, r3, #3
 8009c3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009c3e:	4b36      	ldr	r3, [pc, #216]	; (8009d18 <UART_SetConfig+0x2d4>)
 8009c40:	fba3 2302 	umull	r2, r3, r3, r2
 8009c44:	095b      	lsrs	r3, r3, #5
 8009c46:	005b      	lsls	r3, r3, #1
 8009c48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009c4c:	441c      	add	r4, r3
 8009c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c52:	2200      	movs	r2, #0
 8009c54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009c5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009c60:	4642      	mov	r2, r8
 8009c62:	464b      	mov	r3, r9
 8009c64:	1891      	adds	r1, r2, r2
 8009c66:	63b9      	str	r1, [r7, #56]	; 0x38
 8009c68:	415b      	adcs	r3, r3
 8009c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009c70:	4641      	mov	r1, r8
 8009c72:	1851      	adds	r1, r2, r1
 8009c74:	6339      	str	r1, [r7, #48]	; 0x30
 8009c76:	4649      	mov	r1, r9
 8009c78:	414b      	adcs	r3, r1
 8009c7a:	637b      	str	r3, [r7, #52]	; 0x34
 8009c7c:	f04f 0200 	mov.w	r2, #0
 8009c80:	f04f 0300 	mov.w	r3, #0
 8009c84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009c88:	4659      	mov	r1, fp
 8009c8a:	00cb      	lsls	r3, r1, #3
 8009c8c:	4651      	mov	r1, sl
 8009c8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c92:	4651      	mov	r1, sl
 8009c94:	00ca      	lsls	r2, r1, #3
 8009c96:	4610      	mov	r0, r2
 8009c98:	4619      	mov	r1, r3
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	4642      	mov	r2, r8
 8009c9e:	189b      	adds	r3, r3, r2
 8009ca0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ca4:	464b      	mov	r3, r9
 8009ca6:	460a      	mov	r2, r1
 8009ca8:	eb42 0303 	adc.w	r3, r2, r3
 8009cac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009cbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009cc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	18db      	adds	r3, r3, r3
 8009cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8009cca:	4613      	mov	r3, r2
 8009ccc:	eb42 0303 	adc.w	r3, r2, r3
 8009cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009cd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009cda:	f7f6 fdd7 	bl	800088c <__aeabi_uldivmod>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	4b0d      	ldr	r3, [pc, #52]	; (8009d18 <UART_SetConfig+0x2d4>)
 8009ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8009ce8:	095b      	lsrs	r3, r3, #5
 8009cea:	2164      	movs	r1, #100	; 0x64
 8009cec:	fb01 f303 	mul.w	r3, r1, r3
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	00db      	lsls	r3, r3, #3
 8009cf4:	3332      	adds	r3, #50	; 0x32
 8009cf6:	4a08      	ldr	r2, [pc, #32]	; (8009d18 <UART_SetConfig+0x2d4>)
 8009cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8009cfc:	095b      	lsrs	r3, r3, #5
 8009cfe:	f003 0207 	and.w	r2, r3, #7
 8009d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4422      	add	r2, r4
 8009d0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009d0c:	e105      	b.n	8009f1a <UART_SetConfig+0x4d6>
 8009d0e:	bf00      	nop
 8009d10:	40011000 	.word	0x40011000
 8009d14:	40011400 	.word	0x40011400
 8009d18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009d1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d20:	2200      	movs	r2, #0
 8009d22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009d26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009d2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009d2e:	4642      	mov	r2, r8
 8009d30:	464b      	mov	r3, r9
 8009d32:	1891      	adds	r1, r2, r2
 8009d34:	6239      	str	r1, [r7, #32]
 8009d36:	415b      	adcs	r3, r3
 8009d38:	627b      	str	r3, [r7, #36]	; 0x24
 8009d3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009d3e:	4641      	mov	r1, r8
 8009d40:	1854      	adds	r4, r2, r1
 8009d42:	4649      	mov	r1, r9
 8009d44:	eb43 0501 	adc.w	r5, r3, r1
 8009d48:	f04f 0200 	mov.w	r2, #0
 8009d4c:	f04f 0300 	mov.w	r3, #0
 8009d50:	00eb      	lsls	r3, r5, #3
 8009d52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009d56:	00e2      	lsls	r2, r4, #3
 8009d58:	4614      	mov	r4, r2
 8009d5a:	461d      	mov	r5, r3
 8009d5c:	4643      	mov	r3, r8
 8009d5e:	18e3      	adds	r3, r4, r3
 8009d60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009d64:	464b      	mov	r3, r9
 8009d66:	eb45 0303 	adc.w	r3, r5, r3
 8009d6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009d7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009d7e:	f04f 0200 	mov.w	r2, #0
 8009d82:	f04f 0300 	mov.w	r3, #0
 8009d86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009d8a:	4629      	mov	r1, r5
 8009d8c:	008b      	lsls	r3, r1, #2
 8009d8e:	4621      	mov	r1, r4
 8009d90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d94:	4621      	mov	r1, r4
 8009d96:	008a      	lsls	r2, r1, #2
 8009d98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009d9c:	f7f6 fd76 	bl	800088c <__aeabi_uldivmod>
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	4b60      	ldr	r3, [pc, #384]	; (8009f28 <UART_SetConfig+0x4e4>)
 8009da6:	fba3 2302 	umull	r2, r3, r3, r2
 8009daa:	095b      	lsrs	r3, r3, #5
 8009dac:	011c      	lsls	r4, r3, #4
 8009dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009db2:	2200      	movs	r2, #0
 8009db4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009db8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009dbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009dc0:	4642      	mov	r2, r8
 8009dc2:	464b      	mov	r3, r9
 8009dc4:	1891      	adds	r1, r2, r2
 8009dc6:	61b9      	str	r1, [r7, #24]
 8009dc8:	415b      	adcs	r3, r3
 8009dca:	61fb      	str	r3, [r7, #28]
 8009dcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009dd0:	4641      	mov	r1, r8
 8009dd2:	1851      	adds	r1, r2, r1
 8009dd4:	6139      	str	r1, [r7, #16]
 8009dd6:	4649      	mov	r1, r9
 8009dd8:	414b      	adcs	r3, r1
 8009dda:	617b      	str	r3, [r7, #20]
 8009ddc:	f04f 0200 	mov.w	r2, #0
 8009de0:	f04f 0300 	mov.w	r3, #0
 8009de4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009de8:	4659      	mov	r1, fp
 8009dea:	00cb      	lsls	r3, r1, #3
 8009dec:	4651      	mov	r1, sl
 8009dee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009df2:	4651      	mov	r1, sl
 8009df4:	00ca      	lsls	r2, r1, #3
 8009df6:	4610      	mov	r0, r2
 8009df8:	4619      	mov	r1, r3
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	4642      	mov	r2, r8
 8009dfe:	189b      	adds	r3, r3, r2
 8009e00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009e04:	464b      	mov	r3, r9
 8009e06:	460a      	mov	r2, r1
 8009e08:	eb42 0303 	adc.w	r3, r2, r3
 8009e0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	67bb      	str	r3, [r7, #120]	; 0x78
 8009e1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009e1c:	f04f 0200 	mov.w	r2, #0
 8009e20:	f04f 0300 	mov.w	r3, #0
 8009e24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009e28:	4649      	mov	r1, r9
 8009e2a:	008b      	lsls	r3, r1, #2
 8009e2c:	4641      	mov	r1, r8
 8009e2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e32:	4641      	mov	r1, r8
 8009e34:	008a      	lsls	r2, r1, #2
 8009e36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009e3a:	f7f6 fd27 	bl	800088c <__aeabi_uldivmod>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	460b      	mov	r3, r1
 8009e42:	4b39      	ldr	r3, [pc, #228]	; (8009f28 <UART_SetConfig+0x4e4>)
 8009e44:	fba3 1302 	umull	r1, r3, r3, r2
 8009e48:	095b      	lsrs	r3, r3, #5
 8009e4a:	2164      	movs	r1, #100	; 0x64
 8009e4c:	fb01 f303 	mul.w	r3, r1, r3
 8009e50:	1ad3      	subs	r3, r2, r3
 8009e52:	011b      	lsls	r3, r3, #4
 8009e54:	3332      	adds	r3, #50	; 0x32
 8009e56:	4a34      	ldr	r2, [pc, #208]	; (8009f28 <UART_SetConfig+0x4e4>)
 8009e58:	fba2 2303 	umull	r2, r3, r2, r3
 8009e5c:	095b      	lsrs	r3, r3, #5
 8009e5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e62:	441c      	add	r4, r3
 8009e64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e68:	2200      	movs	r2, #0
 8009e6a:	673b      	str	r3, [r7, #112]	; 0x70
 8009e6c:	677a      	str	r2, [r7, #116]	; 0x74
 8009e6e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009e72:	4642      	mov	r2, r8
 8009e74:	464b      	mov	r3, r9
 8009e76:	1891      	adds	r1, r2, r2
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	415b      	adcs	r3, r3
 8009e7c:	60fb      	str	r3, [r7, #12]
 8009e7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009e82:	4641      	mov	r1, r8
 8009e84:	1851      	adds	r1, r2, r1
 8009e86:	6039      	str	r1, [r7, #0]
 8009e88:	4649      	mov	r1, r9
 8009e8a:	414b      	adcs	r3, r1
 8009e8c:	607b      	str	r3, [r7, #4]
 8009e8e:	f04f 0200 	mov.w	r2, #0
 8009e92:	f04f 0300 	mov.w	r3, #0
 8009e96:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009e9a:	4659      	mov	r1, fp
 8009e9c:	00cb      	lsls	r3, r1, #3
 8009e9e:	4651      	mov	r1, sl
 8009ea0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ea4:	4651      	mov	r1, sl
 8009ea6:	00ca      	lsls	r2, r1, #3
 8009ea8:	4610      	mov	r0, r2
 8009eaa:	4619      	mov	r1, r3
 8009eac:	4603      	mov	r3, r0
 8009eae:	4642      	mov	r2, r8
 8009eb0:	189b      	adds	r3, r3, r2
 8009eb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8009eb4:	464b      	mov	r3, r9
 8009eb6:	460a      	mov	r2, r1
 8009eb8:	eb42 0303 	adc.w	r3, r2, r3
 8009ebc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	663b      	str	r3, [r7, #96]	; 0x60
 8009ec8:	667a      	str	r2, [r7, #100]	; 0x64
 8009eca:	f04f 0200 	mov.w	r2, #0
 8009ece:	f04f 0300 	mov.w	r3, #0
 8009ed2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009ed6:	4649      	mov	r1, r9
 8009ed8:	008b      	lsls	r3, r1, #2
 8009eda:	4641      	mov	r1, r8
 8009edc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ee0:	4641      	mov	r1, r8
 8009ee2:	008a      	lsls	r2, r1, #2
 8009ee4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009ee8:	f7f6 fcd0 	bl	800088c <__aeabi_uldivmod>
 8009eec:	4602      	mov	r2, r0
 8009eee:	460b      	mov	r3, r1
 8009ef0:	4b0d      	ldr	r3, [pc, #52]	; (8009f28 <UART_SetConfig+0x4e4>)
 8009ef2:	fba3 1302 	umull	r1, r3, r3, r2
 8009ef6:	095b      	lsrs	r3, r3, #5
 8009ef8:	2164      	movs	r1, #100	; 0x64
 8009efa:	fb01 f303 	mul.w	r3, r1, r3
 8009efe:	1ad3      	subs	r3, r2, r3
 8009f00:	011b      	lsls	r3, r3, #4
 8009f02:	3332      	adds	r3, #50	; 0x32
 8009f04:	4a08      	ldr	r2, [pc, #32]	; (8009f28 <UART_SetConfig+0x4e4>)
 8009f06:	fba2 2303 	umull	r2, r3, r2, r3
 8009f0a:	095b      	lsrs	r3, r3, #5
 8009f0c:	f003 020f 	and.w	r2, r3, #15
 8009f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4422      	add	r2, r4
 8009f18:	609a      	str	r2, [r3, #8]
}
 8009f1a:	bf00      	nop
 8009f1c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009f20:	46bd      	mov	sp, r7
 8009f22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f26:	bf00      	nop
 8009f28:	51eb851f 	.word	0x51eb851f

08009f2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f2c:	b084      	sub	sp, #16
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b084      	sub	sp, #16
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
 8009f36:	f107 001c 	add.w	r0, r7, #28
 8009f3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d122      	bne.n	8009f8a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d105      	bne.n	8009f7e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	68db      	ldr	r3, [r3, #12]
 8009f76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 f9c0 	bl	800a304 <USB_CoreReset>
 8009f84:	4603      	mov	r3, r0
 8009f86:	73fb      	strb	r3, [r7, #15]
 8009f88:	e01a      	b.n	8009fc0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 f9b4 	bl	800a304 <USB_CoreReset>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d106      	bne.n	8009fb4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009faa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	639a      	str	r2, [r3, #56]	; 0x38
 8009fb2:	e005      	b.n	8009fc0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d10b      	bne.n	8009fde <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	f043 0206 	orr.w	r2, r3, #6
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	f043 0220 	orr.w	r2, r3, #32
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3710      	adds	r7, #16
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009fea:	b004      	add	sp, #16
 8009fec:	4770      	bx	lr

08009fee <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009fee:	b480      	push	{r7}
 8009ff0:	b083      	sub	sp, #12
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	f043 0201 	orr.w	r2, r3, #1
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	370c      	adds	r7, #12
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	f023 0201 	bic.w	r2, r3, #1
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	370c      	adds	r7, #12
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr

0800a032 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a032:	b580      	push	{r7, lr}
 800a034:	b084      	sub	sp, #16
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
 800a03a:	460b      	mov	r3, r1
 800a03c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a03e:	2300      	movs	r3, #0
 800a040:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a04e:	78fb      	ldrb	r3, [r7, #3]
 800a050:	2b01      	cmp	r3, #1
 800a052:	d115      	bne.n	800a080 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a060:	2001      	movs	r0, #1
 800a062:	f7fa fad7 	bl	8004614 <HAL_Delay>
      ms++;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	3301      	adds	r3, #1
 800a06a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 f93a 	bl	800a2e6 <USB_GetMode>
 800a072:	4603      	mov	r3, r0
 800a074:	2b01      	cmp	r3, #1
 800a076:	d01e      	beq.n	800a0b6 <USB_SetCurrentMode+0x84>
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2b31      	cmp	r3, #49	; 0x31
 800a07c:	d9f0      	bls.n	800a060 <USB_SetCurrentMode+0x2e>
 800a07e:	e01a      	b.n	800a0b6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a080:	78fb      	ldrb	r3, [r7, #3]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d115      	bne.n	800a0b2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a092:	2001      	movs	r0, #1
 800a094:	f7fa fabe 	bl	8004614 <HAL_Delay>
      ms++;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	3301      	adds	r3, #1
 800a09c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 f921 	bl	800a2e6 <USB_GetMode>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d005      	beq.n	800a0b6 <USB_SetCurrentMode+0x84>
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2b31      	cmp	r3, #49	; 0x31
 800a0ae:	d9f0      	bls.n	800a092 <USB_SetCurrentMode+0x60>
 800a0b0:	e001      	b.n	800a0b6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e005      	b.n	800a0c2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2b32      	cmp	r3, #50	; 0x32
 800a0ba:	d101      	bne.n	800a0c0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e000      	b.n	800a0c2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
	...

0800a0cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	4a13      	ldr	r2, [pc, #76]	; (800a130 <USB_FlushTxFifo+0x64>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d901      	bls.n	800a0ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a0e8:	2303      	movs	r3, #3
 800a0ea:	e01b      	b.n	800a124 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	daf2      	bge.n	800a0da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	019b      	lsls	r3, r3, #6
 800a0fc:	f043 0220 	orr.w	r2, r3, #32
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	3301      	adds	r3, #1
 800a108:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	4a08      	ldr	r2, [pc, #32]	; (800a130 <USB_FlushTxFifo+0x64>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d901      	bls.n	800a116 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a112:	2303      	movs	r3, #3
 800a114:	e006      	b.n	800a124 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	691b      	ldr	r3, [r3, #16]
 800a11a:	f003 0320 	and.w	r3, r3, #32
 800a11e:	2b20      	cmp	r3, #32
 800a120:	d0f0      	beq.n	800a104 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3714      	adds	r7, #20
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr
 800a130:	00030d40 	.word	0x00030d40

0800a134 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a134:	b480      	push	{r7}
 800a136:	b085      	sub	sp, #20
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a13c:	2300      	movs	r3, #0
 800a13e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	3301      	adds	r3, #1
 800a144:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	4a11      	ldr	r2, [pc, #68]	; (800a190 <USB_FlushRxFifo+0x5c>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d901      	bls.n	800a152 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a14e:	2303      	movs	r3, #3
 800a150:	e018      	b.n	800a184 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	2b00      	cmp	r3, #0
 800a158:	daf2      	bge.n	800a140 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a15a:	2300      	movs	r3, #0
 800a15c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2210      	movs	r2, #16
 800a162:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	3301      	adds	r3, #1
 800a168:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	4a08      	ldr	r2, [pc, #32]	; (800a190 <USB_FlushRxFifo+0x5c>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d901      	bls.n	800a176 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a172:	2303      	movs	r3, #3
 800a174:	e006      	b.n	800a184 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	f003 0310 	and.w	r3, r3, #16
 800a17e:	2b10      	cmp	r3, #16
 800a180:	d0f0      	beq.n	800a164 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3714      	adds	r7, #20
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr
 800a190:	00030d40 	.word	0x00030d40

0800a194 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a194:	b480      	push	{r7}
 800a196:	b089      	sub	sp, #36	; 0x24
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	4611      	mov	r1, r2
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	460b      	mov	r3, r1
 800a1a4:	71fb      	strb	r3, [r7, #7]
 800a1a6:	4613      	mov	r3, r2
 800a1a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a1b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d123      	bne.n	800a202 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a1ba:	88bb      	ldrh	r3, [r7, #4]
 800a1bc:	3303      	adds	r3, #3
 800a1be:	089b      	lsrs	r3, r3, #2
 800a1c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	61bb      	str	r3, [r7, #24]
 800a1c6:	e018      	b.n	800a1fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a1c8:	79fb      	ldrb	r3, [r7, #7]
 800a1ca:	031a      	lsls	r2, r3, #12
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	4413      	add	r3, r2
 800a1d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	69fb      	ldr	r3, [r7, #28]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	3301      	adds	r3, #1
 800a1e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a1e2:	69fb      	ldr	r3, [r7, #28]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	61bb      	str	r3, [r7, #24]
 800a1fa:	69ba      	ldr	r2, [r7, #24]
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d3e2      	bcc.n	800a1c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a202:	2300      	movs	r3, #0
}
 800a204:	4618      	mov	r0, r3
 800a206:	3724      	adds	r7, #36	; 0x24
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a210:	b480      	push	{r7}
 800a212:	b08b      	sub	sp, #44	; 0x2c
 800a214:	af00      	add	r7, sp, #0
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	4613      	mov	r3, r2
 800a21c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a226:	88fb      	ldrh	r3, [r7, #6]
 800a228:	089b      	lsrs	r3, r3, #2
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a22e:	88fb      	ldrh	r3, [r7, #6]
 800a230:	f003 0303 	and.w	r3, r3, #3
 800a234:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a236:	2300      	movs	r3, #0
 800a238:	623b      	str	r3, [r7, #32]
 800a23a:	e014      	b.n	800a266 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a246:	601a      	str	r2, [r3, #0]
    pDest++;
 800a248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24a:	3301      	adds	r3, #1
 800a24c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a250:	3301      	adds	r3, #1
 800a252:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a256:	3301      	adds	r3, #1
 800a258:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25c:	3301      	adds	r3, #1
 800a25e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a260:	6a3b      	ldr	r3, [r7, #32]
 800a262:	3301      	adds	r3, #1
 800a264:	623b      	str	r3, [r7, #32]
 800a266:	6a3a      	ldr	r2, [r7, #32]
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d3e6      	bcc.n	800a23c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a26e:	8bfb      	ldrh	r3, [r7, #30]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d01e      	beq.n	800a2b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a274:	2300      	movs	r3, #0
 800a276:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a27e:	461a      	mov	r2, r3
 800a280:	f107 0310 	add.w	r3, r7, #16
 800a284:	6812      	ldr	r2, [r2, #0]
 800a286:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a288:	693a      	ldr	r2, [r7, #16]
 800a28a:	6a3b      	ldr	r3, [r7, #32]
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	00db      	lsls	r3, r3, #3
 800a290:	fa22 f303 	lsr.w	r3, r2, r3
 800a294:	b2da      	uxtb	r2, r3
 800a296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a298:	701a      	strb	r2, [r3, #0]
      i++;
 800a29a:	6a3b      	ldr	r3, [r7, #32]
 800a29c:	3301      	adds	r3, #1
 800a29e:	623b      	str	r3, [r7, #32]
      pDest++;
 800a2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a2a6:	8bfb      	ldrh	r3, [r7, #30]
 800a2a8:	3b01      	subs	r3, #1
 800a2aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a2ac:	8bfb      	ldrh	r3, [r7, #30]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1ea      	bne.n	800a288 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	372c      	adds	r7, #44	; 0x2c
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b085      	sub	sp, #20
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	695b      	ldr	r3, [r3, #20]
 800a2cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	699b      	ldr	r3, [r3, #24]
 800a2d2:	68fa      	ldr	r2, [r7, #12]
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3714      	adds	r7, #20
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr

0800a2e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a2e6:	b480      	push	{r7}
 800a2e8:	b083      	sub	sp, #12
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	695b      	ldr	r3, [r3, #20]
 800a2f2:	f003 0301 	and.w	r3, r3, #1
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	370c      	adds	r7, #12
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr
	...

0800a304 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a304:	b480      	push	{r7}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a30c:	2300      	movs	r3, #0
 800a30e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	3301      	adds	r3, #1
 800a314:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	4a13      	ldr	r2, [pc, #76]	; (800a368 <USB_CoreReset+0x64>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d901      	bls.n	800a322 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a31e:	2303      	movs	r3, #3
 800a320:	e01b      	b.n	800a35a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	2b00      	cmp	r3, #0
 800a328:	daf2      	bge.n	800a310 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a32a:	2300      	movs	r3, #0
 800a32c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	691b      	ldr	r3, [r3, #16]
 800a332:	f043 0201 	orr.w	r2, r3, #1
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	3301      	adds	r3, #1
 800a33e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	4a09      	ldr	r2, [pc, #36]	; (800a368 <USB_CoreReset+0x64>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d901      	bls.n	800a34c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a348:	2303      	movs	r3, #3
 800a34a:	e006      	b.n	800a35a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	691b      	ldr	r3, [r3, #16]
 800a350:	f003 0301 	and.w	r3, r3, #1
 800a354:	2b01      	cmp	r3, #1
 800a356:	d0f0      	beq.n	800a33a <USB_CoreReset+0x36>

  return HAL_OK;
 800a358:	2300      	movs	r3, #0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3714      	adds	r7, #20
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr
 800a366:	bf00      	nop
 800a368:	00030d40 	.word	0x00030d40

0800a36c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a36c:	b084      	sub	sp, #16
 800a36e:	b580      	push	{r7, lr}
 800a370:	b086      	sub	sp, #24
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
 800a376:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a37a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a37e:	2300      	movs	r3, #0
 800a380:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a38c:	461a      	mov	r2, r3
 800a38e:	2300      	movs	r3, #0
 800a390:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a396:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ae:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d018      	beq.n	800a3f4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d10a      	bne.n	800a3de <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a3d6:	f043 0304 	orr.w	r3, r3, #4
 800a3da:	6013      	str	r3, [r2, #0]
 800a3dc:	e014      	b.n	800a408 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a3ec:	f023 0304 	bic.w	r3, r3, #4
 800a3f0:	6013      	str	r3, [r2, #0]
 800a3f2:	e009      	b.n	800a408 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a402:	f023 0304 	bic.w	r3, r3, #4
 800a406:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a408:	2110      	movs	r1, #16
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f7ff fe5e 	bl	800a0cc <USB_FlushTxFifo>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d001      	beq.n	800a41a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f7ff fe8a 	bl	800a134 <USB_FlushRxFifo>
 800a420:	4603      	mov	r3, r0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d001      	beq.n	800a42a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800a426:	2301      	movs	r3, #1
 800a428:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a42a:	2300      	movs	r3, #0
 800a42c:	613b      	str	r3, [r7, #16]
 800a42e:	e015      	b.n	800a45c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	015a      	lsls	r2, r3, #5
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	4413      	add	r3, r2
 800a438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a43c:	461a      	mov	r2, r3
 800a43e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a442:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	015a      	lsls	r2, r3, #5
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	4413      	add	r3, r2
 800a44c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a450:	461a      	mov	r2, r3
 800a452:	2300      	movs	r3, #0
 800a454:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	3301      	adds	r3, #1
 800a45a:	613b      	str	r3, [r7, #16]
 800a45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45e:	693a      	ldr	r2, [r7, #16]
 800a460:	429a      	cmp	r2, r3
 800a462:	d3e5      	bcc.n	800a430 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2200      	movs	r2, #0
 800a468:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a470:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00b      	beq.n	800a496 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a484:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	4a13      	ldr	r2, [pc, #76]	; (800a4d8 <USB_HostInit+0x16c>)
 800a48a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	4a13      	ldr	r2, [pc, #76]	; (800a4dc <USB_HostInit+0x170>)
 800a490:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a494:	e009      	b.n	800a4aa <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2280      	movs	r2, #128	; 0x80
 800a49a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4a10      	ldr	r2, [pc, #64]	; (800a4e0 <USB_HostInit+0x174>)
 800a4a0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	4a0f      	ldr	r2, [pc, #60]	; (800a4e4 <USB_HostInit+0x178>)
 800a4a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d105      	bne.n	800a4bc <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	699b      	ldr	r3, [r3, #24]
 800a4b4:	f043 0210 	orr.w	r2, r3, #16
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	699a      	ldr	r2, [r3, #24]
 800a4c0:	4b09      	ldr	r3, [pc, #36]	; (800a4e8 <USB_HostInit+0x17c>)
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800a4c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3718      	adds	r7, #24
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a4d4:	b004      	add	sp, #16
 800a4d6:	4770      	bx	lr
 800a4d8:	01000200 	.word	0x01000200
 800a4dc:	00e00300 	.word	0x00e00300
 800a4e0:	00600080 	.word	0x00600080
 800a4e4:	004000e0 	.word	0x004000e0
 800a4e8:	a3200008 	.word	0xa3200008

0800a4ec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	68fa      	ldr	r2, [r7, #12]
 800a506:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a50a:	f023 0303 	bic.w	r3, r3, #3
 800a50e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	78fb      	ldrb	r3, [r7, #3]
 800a51a:	f003 0303 	and.w	r3, r3, #3
 800a51e:	68f9      	ldr	r1, [r7, #12]
 800a520:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a524:	4313      	orrs	r3, r2
 800a526:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a528:	78fb      	ldrb	r3, [r7, #3]
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d107      	bne.n	800a53e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a534:	461a      	mov	r2, r3
 800a536:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a53a:	6053      	str	r3, [r2, #4]
 800a53c:	e009      	b.n	800a552 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a53e:	78fb      	ldrb	r3, [r7, #3]
 800a540:	2b02      	cmp	r3, #2
 800a542:	d106      	bne.n	800a552 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a54a:	461a      	mov	r2, r3
 800a54c:	f241 7370 	movw	r3, #6000	; 0x1770
 800a550:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a552:	2300      	movs	r3, #0
}
 800a554:	4618      	mov	r0, r3
 800a556:	3714      	adds	r7, #20
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a56c:	2300      	movs	r3, #0
 800a56e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a580:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a58a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a58e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a590:	2064      	movs	r0, #100	; 0x64
 800a592:	f7fa f83f 	bl	8004614 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a59e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5a2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a5a4:	200a      	movs	r0, #10
 800a5a6:	f7fa f835 	bl	8004614 <HAL_Delay>

  return HAL_OK;
 800a5aa:	2300      	movs	r3, #0
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3710      	adds	r7, #16
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	460b      	mov	r3, r1
 800a5be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a5d8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d109      	bne.n	800a5f8 <USB_DriveVbus+0x44>
 800a5e4:	78fb      	ldrb	r3, [r7, #3]
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d106      	bne.n	800a5f8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	68fa      	ldr	r2, [r7, #12]
 800a5ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a5f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a5f6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a5fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a602:	d109      	bne.n	800a618 <USB_DriveVbus+0x64>
 800a604:	78fb      	ldrb	r3, [r7, #3]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d106      	bne.n	800a618 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	68fa      	ldr	r2, [r7, #12]
 800a60e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a612:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a616:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a618:	2300      	movs	r3, #0
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3714      	adds	r7, #20
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr

0800a626 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a626:	b480      	push	{r7}
 800a628:	b085      	sub	sp, #20
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a632:	2300      	movs	r3, #0
 800a634:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	0c5b      	lsrs	r3, r3, #17
 800a644:	f003 0303 	and.w	r3, r3, #3
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3714      	adds	r7, #20
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800a654:	b480      	push	{r7}
 800a656:	b085      	sub	sp, #20
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	b29b      	uxth	r3, r3
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3714      	adds	r7, #20
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr
	...

0800a678 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b088      	sub	sp, #32
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	4608      	mov	r0, r1
 800a682:	4611      	mov	r1, r2
 800a684:	461a      	mov	r2, r3
 800a686:	4603      	mov	r3, r0
 800a688:	70fb      	strb	r3, [r7, #3]
 800a68a:	460b      	mov	r3, r1
 800a68c:	70bb      	strb	r3, [r7, #2]
 800a68e:	4613      	mov	r3, r2
 800a690:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a692:	2300      	movs	r3, #0
 800a694:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800a69a:	78fb      	ldrb	r3, [r7, #3]
 800a69c:	015a      	lsls	r2, r3, #5
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6ac:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a6ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a6b2:	2b03      	cmp	r3, #3
 800a6b4:	d87e      	bhi.n	800a7b4 <USB_HC_Init+0x13c>
 800a6b6:	a201      	add	r2, pc, #4	; (adr r2, 800a6bc <USB_HC_Init+0x44>)
 800a6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6bc:	0800a6cd 	.word	0x0800a6cd
 800a6c0:	0800a777 	.word	0x0800a777
 800a6c4:	0800a6cd 	.word	0x0800a6cd
 800a6c8:	0800a739 	.word	0x0800a739
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a6cc:	78fb      	ldrb	r3, [r7, #3]
 800a6ce:	015a      	lsls	r2, r3, #5
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	4413      	add	r3, r2
 800a6d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6d8:	461a      	mov	r2, r3
 800a6da:	f240 439d 	movw	r3, #1181	; 0x49d
 800a6de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a6e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	da10      	bge.n	800a70a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a6e8:	78fb      	ldrb	r3, [r7, #3]
 800a6ea:	015a      	lsls	r2, r3, #5
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	4413      	add	r3, r2
 800a6f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	78fa      	ldrb	r2, [r7, #3]
 800a6f8:	0151      	lsls	r1, r2, #5
 800a6fa:	693a      	ldr	r2, [r7, #16]
 800a6fc:	440a      	add	r2, r1
 800a6fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a706:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800a708:	e057      	b.n	800a7ba <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a70e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a712:	2b00      	cmp	r3, #0
 800a714:	d051      	beq.n	800a7ba <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a716:	78fb      	ldrb	r3, [r7, #3]
 800a718:	015a      	lsls	r2, r3, #5
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	4413      	add	r3, r2
 800a71e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	78fa      	ldrb	r2, [r7, #3]
 800a726:	0151      	lsls	r1, r2, #5
 800a728:	693a      	ldr	r2, [r7, #16]
 800a72a:	440a      	add	r2, r1
 800a72c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a730:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a734:	60d3      	str	r3, [r2, #12]
      break;
 800a736:	e040      	b.n	800a7ba <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a738:	78fb      	ldrb	r3, [r7, #3]
 800a73a:	015a      	lsls	r2, r3, #5
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	4413      	add	r3, r2
 800a740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a744:	461a      	mov	r2, r3
 800a746:	f240 639d 	movw	r3, #1693	; 0x69d
 800a74a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a74c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a750:	2b00      	cmp	r3, #0
 800a752:	da34      	bge.n	800a7be <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a754:	78fb      	ldrb	r3, [r7, #3]
 800a756:	015a      	lsls	r2, r3, #5
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	4413      	add	r3, r2
 800a75c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	78fa      	ldrb	r2, [r7, #3]
 800a764:	0151      	lsls	r1, r2, #5
 800a766:	693a      	ldr	r2, [r7, #16]
 800a768:	440a      	add	r2, r1
 800a76a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a76e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a772:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a774:	e023      	b.n	800a7be <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a776:	78fb      	ldrb	r3, [r7, #3]
 800a778:	015a      	lsls	r2, r3, #5
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	4413      	add	r3, r2
 800a77e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a782:	461a      	mov	r2, r3
 800a784:	f240 2325 	movw	r3, #549	; 0x225
 800a788:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a78a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	da17      	bge.n	800a7c2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a792:	78fb      	ldrb	r3, [r7, #3]
 800a794:	015a      	lsls	r2, r3, #5
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	4413      	add	r3, r2
 800a79a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	78fa      	ldrb	r2, [r7, #3]
 800a7a2:	0151      	lsls	r1, r2, #5
 800a7a4:	693a      	ldr	r2, [r7, #16]
 800a7a6:	440a      	add	r2, r1
 800a7a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7ac:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a7b0:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a7b2:	e006      	b.n	800a7c2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	77fb      	strb	r3, [r7, #31]
      break;
 800a7b8:	e004      	b.n	800a7c4 <USB_HC_Init+0x14c>
      break;
 800a7ba:	bf00      	nop
 800a7bc:	e002      	b.n	800a7c4 <USB_HC_Init+0x14c>
      break;
 800a7be:	bf00      	nop
 800a7c0:	e000      	b.n	800a7c4 <USB_HC_Init+0x14c>
      break;
 800a7c2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a7c4:	78fb      	ldrb	r3, [r7, #3]
 800a7c6:	015a      	lsls	r2, r3, #5
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	78fa      	ldrb	r2, [r7, #3]
 800a7d4:	0151      	lsls	r1, r2, #5
 800a7d6:	693a      	ldr	r2, [r7, #16]
 800a7d8:	440a      	add	r2, r1
 800a7da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7de:	f043 0302 	orr.w	r3, r3, #2
 800a7e2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a7ea:	699a      	ldr	r2, [r3, #24]
 800a7ec:	78fb      	ldrb	r3, [r7, #3]
 800a7ee:	f003 030f 	and.w	r3, r3, #15
 800a7f2:	2101      	movs	r1, #1
 800a7f4:	fa01 f303 	lsl.w	r3, r1, r3
 800a7f8:	6939      	ldr	r1, [r7, #16]
 800a7fa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a7fe:	4313      	orrs	r3, r2
 800a800:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	699b      	ldr	r3, [r3, #24]
 800a806:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a80e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a812:	2b00      	cmp	r3, #0
 800a814:	da03      	bge.n	800a81e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a81a:	61bb      	str	r3, [r7, #24]
 800a81c:	e001      	b.n	800a822 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800a81e:	2300      	movs	r3, #0
 800a820:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f7ff feff 	bl	800a626 <USB_GetHostSpeed>
 800a828:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a82a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a82e:	2b02      	cmp	r3, #2
 800a830:	d106      	bne.n	800a840 <USB_HC_Init+0x1c8>
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2b02      	cmp	r3, #2
 800a836:	d003      	beq.n	800a840 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a838:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a83c:	617b      	str	r3, [r7, #20]
 800a83e:	e001      	b.n	800a844 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a840:	2300      	movs	r3, #0
 800a842:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a844:	787b      	ldrb	r3, [r7, #1]
 800a846:	059b      	lsls	r3, r3, #22
 800a848:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a84c:	78bb      	ldrb	r3, [r7, #2]
 800a84e:	02db      	lsls	r3, r3, #11
 800a850:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a854:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a856:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a85a:	049b      	lsls	r3, r3, #18
 800a85c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a860:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a862:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a864:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a868:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a86e:	78fb      	ldrb	r3, [r7, #3]
 800a870:	0159      	lsls	r1, r3, #5
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	440b      	add	r3, r1
 800a876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a87a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a880:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a882:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a886:	2b03      	cmp	r3, #3
 800a888:	d003      	beq.n	800a892 <USB_HC_Init+0x21a>
 800a88a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d10f      	bne.n	800a8b2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a892:	78fb      	ldrb	r3, [r7, #3]
 800a894:	015a      	lsls	r2, r3, #5
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	4413      	add	r3, r2
 800a89a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	78fa      	ldrb	r2, [r7, #3]
 800a8a2:	0151      	lsls	r1, r2, #5
 800a8a4:	693a      	ldr	r2, [r7, #16]
 800a8a6:	440a      	add	r2, r1
 800a8a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a8b0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a8b2:	7ffb      	ldrb	r3, [r7, #31]
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3720      	adds	r7, #32
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b08c      	sub	sp, #48	; 0x30
 800a8c0:	af02      	add	r7, sp, #8
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	785b      	ldrb	r3, [r3, #1]
 800a8d2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a8d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8d8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d02d      	beq.n	800a942 <USB_HC_StartXfer+0x86>
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	791b      	ldrb	r3, [r3, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d129      	bne.n	800a942 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800a8ee:	79fb      	ldrb	r3, [r7, #7]
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d117      	bne.n	800a924 <USB_HC_StartXfer+0x68>
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	79db      	ldrb	r3, [r3, #7]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d003      	beq.n	800a904 <USB_HC_StartXfer+0x48>
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	79db      	ldrb	r3, [r3, #7]
 800a900:	2b02      	cmp	r3, #2
 800a902:	d10f      	bne.n	800a924 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a904:	69fb      	ldr	r3, [r7, #28]
 800a906:	015a      	lsls	r2, r3, #5
 800a908:	6a3b      	ldr	r3, [r7, #32]
 800a90a:	4413      	add	r3, r2
 800a90c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a910:	68db      	ldr	r3, [r3, #12]
 800a912:	69fa      	ldr	r2, [r7, #28]
 800a914:	0151      	lsls	r1, r2, #5
 800a916:	6a3a      	ldr	r2, [r7, #32]
 800a918:	440a      	add	r2, r1
 800a91a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a91e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a922:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800a924:	79fb      	ldrb	r3, [r7, #7]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d10b      	bne.n	800a942 <USB_HC_StartXfer+0x86>
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	795b      	ldrb	r3, [r3, #5]
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d107      	bne.n	800a942 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	785b      	ldrb	r3, [r3, #1]
 800a936:	4619      	mov	r1, r3
 800a938:	68f8      	ldr	r0, [r7, #12]
 800a93a:	f000 fa0f 	bl	800ad5c <USB_DoPing>
      return HAL_OK;
 800a93e:	2300      	movs	r3, #0
 800a940:	e0f8      	b.n	800ab34 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	695b      	ldr	r3, [r3, #20]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d018      	beq.n	800a97c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	695b      	ldr	r3, [r3, #20]
 800a94e:	68ba      	ldr	r2, [r7, #8]
 800a950:	8912      	ldrh	r2, [r2, #8]
 800a952:	4413      	add	r3, r2
 800a954:	3b01      	subs	r3, #1
 800a956:	68ba      	ldr	r2, [r7, #8]
 800a958:	8912      	ldrh	r2, [r2, #8]
 800a95a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a95e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a960:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a962:	8b7b      	ldrh	r3, [r7, #26]
 800a964:	429a      	cmp	r2, r3
 800a966:	d90b      	bls.n	800a980 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800a968:	8b7b      	ldrh	r3, [r7, #26]
 800a96a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a96c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a96e:	68ba      	ldr	r2, [r7, #8]
 800a970:	8912      	ldrh	r2, [r2, #8]
 800a972:	fb03 f202 	mul.w	r2, r3, r2
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	611a      	str	r2, [r3, #16]
 800a97a:	e001      	b.n	800a980 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800a97c:	2301      	movs	r3, #1
 800a97e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	78db      	ldrb	r3, [r3, #3]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d007      	beq.n	800a998 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a988:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a98a:	68ba      	ldr	r2, [r7, #8]
 800a98c:	8912      	ldrh	r2, [r2, #8]
 800a98e:	fb03 f202 	mul.w	r2, r3, r2
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	611a      	str	r2, [r3, #16]
 800a996:	e003      	b.n	800a9a0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	695a      	ldr	r2, [r3, #20]
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	691b      	ldr	r3, [r3, #16]
 800a9a4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a9a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a9aa:	04d9      	lsls	r1, r3, #19
 800a9ac:	4b63      	ldr	r3, [pc, #396]	; (800ab3c <USB_HC_StartXfer+0x280>)
 800a9ae:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a9b0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	7a9b      	ldrb	r3, [r3, #10]
 800a9b6:	075b      	lsls	r3, r3, #29
 800a9b8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a9bc:	69f9      	ldr	r1, [r7, #28]
 800a9be:	0148      	lsls	r0, r1, #5
 800a9c0:	6a39      	ldr	r1, [r7, #32]
 800a9c2:	4401      	add	r1, r0
 800a9c4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a9c8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a9ca:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a9cc:	79fb      	ldrb	r3, [r7, #7]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d009      	beq.n	800a9e6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	68d9      	ldr	r1, [r3, #12]
 800a9d6:	69fb      	ldr	r3, [r7, #28]
 800a9d8:	015a      	lsls	r2, r3, #5
 800a9da:	6a3b      	ldr	r3, [r7, #32]
 800a9dc:	4413      	add	r3, r2
 800a9de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9e2:	460a      	mov	r2, r1
 800a9e4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a9e6:	6a3b      	ldr	r3, [r7, #32]
 800a9e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9ec:	689b      	ldr	r3, [r3, #8]
 800a9ee:	f003 0301 	and.w	r3, r3, #1
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	bf0c      	ite	eq
 800a9f6:	2301      	moveq	r3, #1
 800a9f8:	2300      	movne	r3, #0
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	015a      	lsls	r2, r3, #5
 800aa02:	6a3b      	ldr	r3, [r7, #32]
 800aa04:	4413      	add	r3, r2
 800aa06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	69fa      	ldr	r2, [r7, #28]
 800aa0e:	0151      	lsls	r1, r2, #5
 800aa10:	6a3a      	ldr	r2, [r7, #32]
 800aa12:	440a      	add	r2, r1
 800aa14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa18:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aa1c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800aa1e:	69fb      	ldr	r3, [r7, #28]
 800aa20:	015a      	lsls	r2, r3, #5
 800aa22:	6a3b      	ldr	r3, [r7, #32]
 800aa24:	4413      	add	r3, r2
 800aa26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	7e7b      	ldrb	r3, [r7, #25]
 800aa2e:	075b      	lsls	r3, r3, #29
 800aa30:	69f9      	ldr	r1, [r7, #28]
 800aa32:	0148      	lsls	r0, r1, #5
 800aa34:	6a39      	ldr	r1, [r7, #32]
 800aa36:	4401      	add	r1, r0
 800aa38:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800aa40:	69fb      	ldr	r3, [r7, #28]
 800aa42:	015a      	lsls	r2, r3, #5
 800aa44:	6a3b      	ldr	r3, [r7, #32]
 800aa46:	4413      	add	r3, r2
 800aa48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aa56:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	78db      	ldrb	r3, [r3, #3]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d004      	beq.n	800aa6a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa66:	613b      	str	r3, [r7, #16]
 800aa68:	e003      	b.n	800aa72 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aa70:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aa78:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	015a      	lsls	r2, r3, #5
 800aa7e:	6a3b      	ldr	r3, [r7, #32]
 800aa80:	4413      	add	r3, r2
 800aa82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa86:	461a      	mov	r2, r3
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800aa8c:	79fb      	ldrb	r3, [r7, #7]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d001      	beq.n	800aa96 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800aa92:	2300      	movs	r3, #0
 800aa94:	e04e      	b.n	800ab34 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	78db      	ldrb	r3, [r3, #3]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d149      	bne.n	800ab32 <USB_HC_StartXfer+0x276>
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	695b      	ldr	r3, [r3, #20]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d045      	beq.n	800ab32 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	79db      	ldrb	r3, [r3, #7]
 800aaaa:	2b03      	cmp	r3, #3
 800aaac:	d830      	bhi.n	800ab10 <USB_HC_StartXfer+0x254>
 800aaae:	a201      	add	r2, pc, #4	; (adr r2, 800aab4 <USB_HC_StartXfer+0x1f8>)
 800aab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab4:	0800aac5 	.word	0x0800aac5
 800aab8:	0800aae9 	.word	0x0800aae9
 800aabc:	0800aac5 	.word	0x0800aac5
 800aac0:	0800aae9 	.word	0x0800aae9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	695b      	ldr	r3, [r3, #20]
 800aac8:	3303      	adds	r3, #3
 800aaca:	089b      	lsrs	r3, r3, #2
 800aacc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800aace:	8afa      	ldrh	r2, [r7, #22]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d91c      	bls.n	800ab14 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	699b      	ldr	r3, [r3, #24]
 800aade:	f043 0220 	orr.w	r2, r3, #32
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	619a      	str	r2, [r3, #24]
        }
        break;
 800aae6:	e015      	b.n	800ab14 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	695b      	ldr	r3, [r3, #20]
 800aaec:	3303      	adds	r3, #3
 800aaee:	089b      	lsrs	r3, r3, #2
 800aaf0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800aaf2:	8afa      	ldrh	r2, [r7, #22]
 800aaf4:	6a3b      	ldr	r3, [r7, #32]
 800aaf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aafa:	691b      	ldr	r3, [r3, #16]
 800aafc:	b29b      	uxth	r3, r3
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d90a      	bls.n	800ab18 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	699b      	ldr	r3, [r3, #24]
 800ab06:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	619a      	str	r2, [r3, #24]
        }
        break;
 800ab0e:	e003      	b.n	800ab18 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800ab10:	bf00      	nop
 800ab12:	e002      	b.n	800ab1a <USB_HC_StartXfer+0x25e>
        break;
 800ab14:	bf00      	nop
 800ab16:	e000      	b.n	800ab1a <USB_HC_StartXfer+0x25e>
        break;
 800ab18:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	68d9      	ldr	r1, [r3, #12]
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	785a      	ldrb	r2, [r3, #1]
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	695b      	ldr	r3, [r3, #20]
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	2000      	movs	r0, #0
 800ab2a:	9000      	str	r0, [sp, #0]
 800ab2c:	68f8      	ldr	r0, [r7, #12]
 800ab2e:	f7ff fb31 	bl	800a194 <USB_WritePacket>
  }

  return HAL_OK;
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3728      	adds	r7, #40	; 0x28
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	1ff80000 	.word	0x1ff80000

0800ab40 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b085      	sub	sp, #20
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab52:	695b      	ldr	r3, [r3, #20]
 800ab54:	b29b      	uxth	r3, r3
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3714      	adds	r7, #20
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr

0800ab62 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ab62:	b480      	push	{r7}
 800ab64:	b089      	sub	sp, #36	; 0x24
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800ab72:	78fb      	ldrb	r3, [r7, #3]
 800ab74:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800ab76:	2300      	movs	r3, #0
 800ab78:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	015a      	lsls	r2, r3, #5
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	4413      	add	r3, r2
 800ab82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	0c9b      	lsrs	r3, r3, #18
 800ab8a:	f003 0303 	and.w	r3, r3, #3
 800ab8e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800ab90:	69bb      	ldr	r3, [r7, #24]
 800ab92:	015a      	lsls	r2, r3, #5
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	4413      	add	r3, r2
 800ab98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	0fdb      	lsrs	r3, r3, #31
 800aba0:	f003 0301 	and.w	r3, r3, #1
 800aba4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	f003 0320 	and.w	r3, r3, #32
 800abae:	2b20      	cmp	r3, #32
 800abb0:	d104      	bne.n	800abbc <USB_HC_Halt+0x5a>
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d101      	bne.n	800abbc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800abb8:	2300      	movs	r3, #0
 800abba:	e0c8      	b.n	800ad4e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d002      	beq.n	800abc8 <USB_HC_Halt+0x66>
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	2b02      	cmp	r3, #2
 800abc6:	d163      	bne.n	800ac90 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800abc8:	69bb      	ldr	r3, [r7, #24]
 800abca:	015a      	lsls	r2, r3, #5
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	4413      	add	r3, r2
 800abd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	69ba      	ldr	r2, [r7, #24]
 800abd8:	0151      	lsls	r1, r2, #5
 800abda:	69fa      	ldr	r2, [r7, #28]
 800abdc:	440a      	add	r2, r1
 800abde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abe2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800abe6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	f003 0320 	and.w	r3, r3, #32
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	f040 80ab 	bne.w	800ad4c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abfa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d133      	bne.n	800ac6a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	015a      	lsls	r2, r3, #5
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	4413      	add	r3, r2
 800ac0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	69ba      	ldr	r2, [r7, #24]
 800ac12:	0151      	lsls	r1, r2, #5
 800ac14:	69fa      	ldr	r2, [r7, #28]
 800ac16:	440a      	add	r2, r1
 800ac18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac20:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	015a      	lsls	r2, r3, #5
 800ac26:	69fb      	ldr	r3, [r7, #28]
 800ac28:	4413      	add	r3, r2
 800ac2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	69ba      	ldr	r2, [r7, #24]
 800ac32:	0151      	lsls	r1, r2, #5
 800ac34:	69fa      	ldr	r2, [r7, #28]
 800ac36:	440a      	add	r2, r1
 800ac38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac40:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	3301      	adds	r3, #1
 800ac46:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ac4e:	d81d      	bhi.n	800ac8c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ac50:	69bb      	ldr	r3, [r7, #24]
 800ac52:	015a      	lsls	r2, r3, #5
 800ac54:	69fb      	ldr	r3, [r7, #28]
 800ac56:	4413      	add	r3, r2
 800ac58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac66:	d0ec      	beq.n	800ac42 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ac68:	e070      	b.n	800ad4c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ac6a:	69bb      	ldr	r3, [r7, #24]
 800ac6c:	015a      	lsls	r2, r3, #5
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	4413      	add	r3, r2
 800ac72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	69ba      	ldr	r2, [r7, #24]
 800ac7a:	0151      	lsls	r1, r2, #5
 800ac7c:	69fa      	ldr	r2, [r7, #28]
 800ac7e:	440a      	add	r2, r1
 800ac80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac88:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ac8a:	e05f      	b.n	800ad4c <USB_HC_Halt+0x1ea>
            break;
 800ac8c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ac8e:	e05d      	b.n	800ad4c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	015a      	lsls	r2, r3, #5
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	4413      	add	r3, r2
 800ac98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	69ba      	ldr	r2, [r7, #24]
 800aca0:	0151      	lsls	r1, r2, #5
 800aca2:	69fa      	ldr	r2, [r7, #28]
 800aca4:	440a      	add	r2, r1
 800aca6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800acae:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800acb6:	691b      	ldr	r3, [r3, #16]
 800acb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d133      	bne.n	800ad28 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800acc0:	69bb      	ldr	r3, [r7, #24]
 800acc2:	015a      	lsls	r2, r3, #5
 800acc4:	69fb      	ldr	r3, [r7, #28]
 800acc6:	4413      	add	r3, r2
 800acc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	69ba      	ldr	r2, [r7, #24]
 800acd0:	0151      	lsls	r1, r2, #5
 800acd2:	69fa      	ldr	r2, [r7, #28]
 800acd4:	440a      	add	r2, r1
 800acd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acda:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800acde:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	015a      	lsls	r2, r3, #5
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	4413      	add	r3, r2
 800ace8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	69ba      	ldr	r2, [r7, #24]
 800acf0:	0151      	lsls	r1, r2, #5
 800acf2:	69fa      	ldr	r2, [r7, #28]
 800acf4:	440a      	add	r2, r1
 800acf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800acfe:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	3301      	adds	r3, #1
 800ad04:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad0c:	d81d      	bhi.n	800ad4a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ad0e:	69bb      	ldr	r3, [r7, #24]
 800ad10:	015a      	lsls	r2, r3, #5
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	4413      	add	r3, r2
 800ad16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad24:	d0ec      	beq.n	800ad00 <USB_HC_Halt+0x19e>
 800ad26:	e011      	b.n	800ad4c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	015a      	lsls	r2, r3, #5
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	4413      	add	r3, r2
 800ad30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	69ba      	ldr	r2, [r7, #24]
 800ad38:	0151      	lsls	r1, r2, #5
 800ad3a:	69fa      	ldr	r2, [r7, #28]
 800ad3c:	440a      	add	r2, r1
 800ad3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad46:	6013      	str	r3, [r2, #0]
 800ad48:	e000      	b.n	800ad4c <USB_HC_Halt+0x1ea>
          break;
 800ad4a:	bf00      	nop
    }
  }

  return HAL_OK;
 800ad4c:	2300      	movs	r3, #0
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3724      	adds	r7, #36	; 0x24
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr
	...

0800ad5c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b087      	sub	sp, #28
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	460b      	mov	r3, r1
 800ad66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800ad6c:	78fb      	ldrb	r3, [r7, #3]
 800ad6e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800ad70:	2301      	movs	r3, #1
 800ad72:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	04da      	lsls	r2, r3, #19
 800ad78:	4b15      	ldr	r3, [pc, #84]	; (800add0 <USB_DoPing+0x74>)
 800ad7a:	4013      	ands	r3, r2
 800ad7c:	693a      	ldr	r2, [r7, #16]
 800ad7e:	0151      	lsls	r1, r2, #5
 800ad80:	697a      	ldr	r2, [r7, #20]
 800ad82:	440a      	add	r2, r1
 800ad84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad8c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	015a      	lsls	r2, r3, #5
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	4413      	add	r3, r2
 800ad96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ada4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800adac:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	015a      	lsls	r2, r3, #5
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	4413      	add	r3, r2
 800adb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adba:	461a      	mov	r2, r3
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	371c      	adds	r7, #28
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop
 800add0:	1ff80000 	.word	0x1ff80000

0800add4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b088      	sub	sp, #32
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800addc:	2300      	movs	r3, #0
 800adde:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800ade4:	2300      	movs	r3, #0
 800ade6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f7ff f911 	bl	800a010 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800adee:	2110      	movs	r1, #16
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f7ff f96b 	bl	800a0cc <USB_FlushTxFifo>
 800adf6:	4603      	mov	r3, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d001      	beq.n	800ae00 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800adfc:	2301      	movs	r3, #1
 800adfe:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f7ff f997 	bl	800a134 <USB_FlushRxFifo>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d001      	beq.n	800ae10 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800ae10:	2300      	movs	r3, #0
 800ae12:	61bb      	str	r3, [r7, #24]
 800ae14:	e01f      	b.n	800ae56 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	015a      	lsls	r2, r3, #5
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae2c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae34:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ae3c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ae3e:	69bb      	ldr	r3, [r7, #24]
 800ae40:	015a      	lsls	r2, r3, #5
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	4413      	add	r3, r2
 800ae46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	3301      	adds	r3, #1
 800ae54:	61bb      	str	r3, [r7, #24]
 800ae56:	69bb      	ldr	r3, [r7, #24]
 800ae58:	2b0f      	cmp	r3, #15
 800ae5a:	d9dc      	bls.n	800ae16 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	61bb      	str	r3, [r7, #24]
 800ae60:	e034      	b.n	800aecc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800ae62:	69bb      	ldr	r3, [r7, #24]
 800ae64:	015a      	lsls	r2, r3, #5
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	4413      	add	r3, r2
 800ae6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae78:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae80:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ae88:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ae8a:	69bb      	ldr	r3, [r7, #24]
 800ae8c:	015a      	lsls	r2, r3, #5
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	4413      	add	r3, r2
 800ae92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae96:	461a      	mov	r2, r3
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aea8:	d80c      	bhi.n	800aec4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	015a      	lsls	r2, r3, #5
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aebc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aec0:	d0ec      	beq.n	800ae9c <USB_StopHost+0xc8>
 800aec2:	e000      	b.n	800aec6 <USB_StopHost+0xf2>
        break;
 800aec4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	3301      	adds	r3, #1
 800aeca:	61bb      	str	r3, [r7, #24]
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	2b0f      	cmp	r3, #15
 800aed0:	d9c7      	bls.n	800ae62 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aed8:	461a      	mov	r2, r3
 800aeda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aede:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aee6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f7ff f880 	bl	8009fee <USB_EnableGlobalInt>

  return ret;
 800aeee:	7ffb      	ldrb	r3, [r7, #31]
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3720      	adds	r7, #32
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800aefc:	4904      	ldr	r1, [pc, #16]	; (800af10 <MX_FATFS_Init+0x18>)
 800aefe:	4805      	ldr	r0, [pc, #20]	; (800af14 <MX_FATFS_Init+0x1c>)
 800af00:	f005 fd0c 	bl	801091c <FATFS_LinkDriver>
 800af04:	4603      	mov	r3, r0
 800af06:	461a      	mov	r2, r3
 800af08:	4b03      	ldr	r3, [pc, #12]	; (800af18 <MX_FATFS_Init+0x20>)
 800af0a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800af0c:	bf00      	nop
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	20003044 	.word	0x20003044
 800af14:	20000028 	.word	0x20000028
 800af18:	20003040 	.word	0x20003040

0800af1c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800af1c:	b480      	push	{r7}
 800af1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800af20:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800af22:	4618      	mov	r0, r3
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b082      	sub	sp, #8
 800af30:	af00      	add	r7, sp, #0
 800af32:	4603      	mov	r3, r0
 800af34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
	Stat = (SD_SPI_Init()) ? STA_NOINIT : RES_OK;
 800af36:	f7f8 ff21 	bl	8003d7c <SD_SPI_Init>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	bf14      	ite	ne
 800af40:	2301      	movne	r3, #1
 800af42:	2300      	moveq	r3, #0
 800af44:	b2db      	uxtb	r3, r3
 800af46:	461a      	mov	r2, r3
 800af48:	4b04      	ldr	r3, [pc, #16]	; (800af5c <USER_initialize+0x30>)
 800af4a:	701a      	strb	r2, [r3, #0]
//	 HAL_UART_Transmit(&huart3,(uint8_t*)"USER_initialize\n\r",17,0x1000);
//
//	 SD_PowerOn();
//	 if(sd_ini()==0) {Stat &= ~STA_NOINIT;} 		//Сбросим статус STA_NOINIT
    return Stat;
 800af4c:	4b03      	ldr	r3, [pc, #12]	; (800af5c <USER_initialize+0x30>)
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800af52:	4618      	mov	r0, r3
 800af54:	3708      	adds	r7, #8
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	20000025 	.word	0x20000025

0800af60 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	4603      	mov	r3, r0
 800af68:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
	//HAL_UART_Transmit(&huart3,(uint8_t*)"USER_status\n\r",13,0x1000);
	if (pdrv) return STA_NOINIT;
 800af6a:	79fb      	ldrb	r3, [r7, #7]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d001      	beq.n	800af74 <USER_status+0x14>
 800af70:	2301      	movs	r3, #1
 800af72:	e002      	b.n	800af7a <USER_status+0x1a>
    return Stat;
 800af74:	4b04      	ldr	r3, [pc, #16]	; (800af88 <USER_status+0x28>)
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	370c      	adds	r7, #12
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr
 800af86:	bf00      	nop
 800af88:	20000025 	.word	0x20000025

0800af8c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	60b9      	str	r1, [r7, #8]
 800af94:	607a      	str	r2, [r7, #4]
 800af96:	603b      	str	r3, [r7, #0]
 800af98:	4603      	mov	r3, r0
 800af9a:	73fb      	strb	r3, [r7, #15]
//
//	SPI_Release();
//
//	return count ? RES_ERROR : RES_OK;

	if (pdrv || ( ! count)) return RES_PARERR;
 800af9c:	7bfb      	ldrb	r3, [r7, #15]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d102      	bne.n	800afa8 <USER_read+0x1c>
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d101      	bne.n	800afac <USER_read+0x20>
 800afa8:	2304      	movs	r3, #4
 800afaa:	e023      	b.n	800aff4 <USER_read+0x68>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800afac:	4b13      	ldr	r3, [pc, #76]	; (800affc <USER_read+0x70>)
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	f003 0301 	and.w	r3, r3, #1
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d001      	beq.n	800afbe <USER_read+0x32>
 800afba:	2303      	movs	r3, #3
 800afbc:	e01a      	b.n	800aff4 <USER_read+0x68>

			if ( ! (sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 800afbe:	4b10      	ldr	r3, [pc, #64]	; (800b000 <USER_read+0x74>)
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	f003 0304 	and.w	r3, r3, #4
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d102      	bne.n	800afd2 <USER_read+0x46>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	025b      	lsls	r3, r3, #9
 800afd0:	607b      	str	r3, [r7, #4]
			if (count == 1) /* Single block read */
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d105      	bne.n	800afe4 <USER_read+0x58>
			{
				SD_SPI_Read_Block(buff, sector);
 800afd8:	6879      	ldr	r1, [r7, #4]
 800afda:	68b8      	ldr	r0, [r7, #8]
 800afdc:	f7f9 f87c 	bl	80040d8 <SD_SPI_Read_Block>
				count = 0;
 800afe0:	2300      	movs	r3, #0
 800afe2:	603b      	str	r3, [r7, #0]
			}
			else /* Multiple block read */
			{
			}
			SPI_Release();
 800afe4:	f7f8 ffe2 	bl	8003fac <SPI_Release>
			return count ? RES_ERROR : RES_OK;
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	2b00      	cmp	r3, #0
 800afec:	bf14      	ite	ne
 800afee:	2301      	movne	r3, #1
 800aff0:	2300      	moveq	r3, #0
 800aff2:	b2db      	uxtb	r3, r3

   // return RES_OK;
  /* USER CODE END READ */
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3710      	adds	r7, #16
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}
 800affc:	20000025 	.word	0x20000025
 800b000:	20002cac 	.word	0x20002cac

0800b004 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	60b9      	str	r1, [r7, #8]
 800b00c:	607a      	str	r2, [r7, #4]
 800b00e:	603b      	str	r3, [r7, #0]
 800b010:	4603      	mov	r3, r0
 800b012:	73fb      	strb	r3, [r7, #15]
  /* USER CODE HERE */
//	HAL_UART_Transmit(&huart3,(uint8_t*)"USER_write\n\r",12,0x1000);
//	sprintf(str1,"sector: %lu\n\r",sector);
//	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);

	if (pdrv || !count) return RES_PARERR;
 800b014:	7bfb      	ldrb	r3, [r7, #15]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d102      	bne.n	800b020 <USER_write+0x1c>
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d101      	bne.n	800b024 <USER_write+0x20>
 800b020:	2304      	movs	r3, #4
 800b022:	e02c      	b.n	800b07e <USER_write+0x7a>
			if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b024:	4b18      	ldr	r3, [pc, #96]	; (800b088 <USER_write+0x84>)
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	f003 0301 	and.w	r3, r3, #1
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d001      	beq.n	800b036 <USER_write+0x32>
 800b032:	2303      	movs	r3, #3
 800b034:	e023      	b.n	800b07e <USER_write+0x7a>
			if (Stat & STA_PROTECT) return RES_WRPRT;
 800b036:	4b14      	ldr	r3, [pc, #80]	; (800b088 <USER_write+0x84>)
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	f003 0304 	and.w	r3, r3, #4
 800b040:	2b00      	cmp	r3, #0
 800b042:	d001      	beq.n	800b048 <USER_write+0x44>
 800b044:	2302      	movs	r3, #2
 800b046:	e01a      	b.n	800b07e <USER_write+0x7a>
			if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 800b048:	4b10      	ldr	r3, [pc, #64]	; (800b08c <USER_write+0x88>)
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	f003 0304 	and.w	r3, r3, #4
 800b052:	2b00      	cmp	r3, #0
 800b054:	d102      	bne.n	800b05c <USER_write+0x58>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	025b      	lsls	r3, r3, #9
 800b05a:	607b      	str	r3, [r7, #4]
			if (count == 1) /* Single block read */
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	2b01      	cmp	r3, #1
 800b060:	d105      	bne.n	800b06e <USER_write+0x6a>
			{
				SD_SPI_Write_Block((BYTE*)buff, sector);
 800b062:	6879      	ldr	r1, [r7, #4]
 800b064:	68b8      	ldr	r0, [r7, #8]
 800b066:	f7f9 f87d 	bl	8004164 <SD_SPI_Write_Block>
				count = 0;
 800b06a:	2300      	movs	r3, #0
 800b06c:	603b      	str	r3, [r7, #0]
			}
			else /* Multiple block read */
			{
			}
			SPI_Release();
 800b06e:	f7f8 ff9d 	bl	8003fac <SPI_Release>
			return count ? RES_ERROR : RES_OK;
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	2b00      	cmp	r3, #0
 800b076:	bf14      	ite	ne
 800b078:	2301      	movne	r3, #1
 800b07a:	2300      	moveq	r3, #0
 800b07c:	b2db      	uxtb	r3, r3

    //return RES_OK;
  /* USER CODE END WRITE */
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3710      	adds	r7, #16
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	20000025 	.word	0x20000025
 800b08c:	20002cac 	.word	0x20002cac

0800b090 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	4603      	mov	r3, r0
 800b098:	603a      	str	r2, [r7, #0]
 800b09a:	71fb      	strb	r3, [r7, #7]
 800b09c:	460b      	mov	r3, r1
 800b09e:	71bb      	strb	r3, [r7, #6]
//
//    SPI_Release();
//
//    return res;

	DRESULT vResult = RES_ERROR;
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	73fb      	strb	r3, [r7, #15]

		    if (pdrv) return RES_PARERR;
 800b0a4:	79fb      	ldrb	r3, [r7, #7]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d001      	beq.n	800b0ae <USER_ioctl+0x1e>
 800b0aa:	2304      	movs	r3, #4
 800b0ac:	e02b      	b.n	800b106 <USER_ioctl+0x76>
				if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b0ae:	4b18      	ldr	r3, [pc, #96]	; (800b110 <USER_ioctl+0x80>)
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	f003 0301 	and.w	r3, r3, #1
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d001      	beq.n	800b0c0 <USER_ioctl+0x30>
 800b0bc:	2303      	movs	r3, #3
 800b0be:	e022      	b.n	800b106 <USER_ioctl+0x76>
				vResult = RES_ERROR;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	73fb      	strb	r3, [r7, #15]

				switch (cmd)
 800b0c4:	79bb      	ldrb	r3, [r7, #6]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d002      	beq.n	800b0d0 <USER_ioctl+0x40>
 800b0ca:	2b02      	cmp	r3, #2
 800b0cc:	d00d      	beq.n	800b0ea <USER_ioctl+0x5a>
 800b0ce:	e013      	b.n	800b0f8 <USER_ioctl+0x68>
				{
					case CTRL_SYNC : /* Flush dirty buffer if present */
									SD_SELECT;
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	2108      	movs	r1, #8
 800b0d4:	480f      	ldr	r0, [pc, #60]	; (800b114 <USER_ioctl+0x84>)
 800b0d6:	f7fa f971 	bl	80053bc <HAL_GPIO_WritePin>
									if ( ! SD_SPI_WaitingForReadiness())
 800b0da:	f7f8 ff6e 	bl	8003fba <SD_SPI_WaitingForReadiness>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d10c      	bne.n	800b0fe <USER_ioctl+0x6e>
									vResult = RES_OK;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	73fb      	strb	r3, [r7, #15]
										break;
 800b0e8:	e009      	b.n	800b0fe <USER_ioctl+0x6e>

					case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
									*(WORD*)buff = 512;
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0f0:	801a      	strh	r2, [r3, #0]
									vResult = RES_OK;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	73fb      	strb	r3, [r7, #15]
										break;
 800b0f6:	e003      	b.n	800b100 <USER_ioctl+0x70>

					default:
						vResult = RES_PARERR;
 800b0f8:	2304      	movs	r3, #4
 800b0fa:	73fb      	strb	r3, [r7, #15]
 800b0fc:	e000      	b.n	800b100 <USER_ioctl+0x70>
										break;
 800b0fe:	bf00      	nop
				}

				SPI_Release();
 800b100:	f7f8 ff54 	bl	8003fac <SPI_Release>

				return vResult;
 800b104:	7bfb      	ldrb	r3, [r7, #15]
   // return res;
  /* USER CODE END IOCTL */
}
 800b106:	4618      	mov	r0, r3
 800b108:	3710      	adds	r7, #16
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	20000025 	.word	0x20000025
 800b114:	40020000 	.word	0x40020000

0800b118 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b118:	b590      	push	{r4, r7, lr}
 800b11a:	b089      	sub	sp, #36	; 0x24
 800b11c:	af04      	add	r7, sp, #16
 800b11e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800b120:	2301      	movs	r3, #1
 800b122:	2202      	movs	r2, #2
 800b124:	2102      	movs	r1, #2
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 fc66 	bl	800b9f8 <USBH_FindInterface>
 800b12c:	4603      	mov	r3, r0
 800b12e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b130:	7bfb      	ldrb	r3, [r7, #15]
 800b132:	2bff      	cmp	r3, #255	; 0xff
 800b134:	d002      	beq.n	800b13c <USBH_CDC_InterfaceInit+0x24>
 800b136:	7bfb      	ldrb	r3, [r7, #15]
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d901      	bls.n	800b140 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b13c:	2302      	movs	r3, #2
 800b13e:	e13d      	b.n	800b3bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800b140:	7bfb      	ldrb	r3, [r7, #15]
 800b142:	4619      	mov	r1, r3
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 fc3b 	bl	800b9c0 <USBH_SelectInterface>
 800b14a:	4603      	mov	r3, r0
 800b14c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b14e:	7bbb      	ldrb	r3, [r7, #14]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d001      	beq.n	800b158 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800b154:	2302      	movs	r3, #2
 800b156:	e131      	b.n	800b3bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b15e:	2050      	movs	r0, #80	; 0x50
 800b160:	f006 f82a 	bl	80111b8 <malloc>
 800b164:	4603      	mov	r3, r0
 800b166:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b16e:	69db      	ldr	r3, [r3, #28]
 800b170:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d101      	bne.n	800b17c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800b178:	2302      	movs	r3, #2
 800b17a:	e11f      	b.n	800b3bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800b17c:	2250      	movs	r2, #80	; 0x50
 800b17e:	2100      	movs	r1, #0
 800b180:	68b8      	ldr	r0, [r7, #8]
 800b182:	f006 f829 	bl	80111d8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800b186:	7bfb      	ldrb	r3, [r7, #15]
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	211a      	movs	r1, #26
 800b18c:	fb01 f303 	mul.w	r3, r1, r3
 800b190:	4413      	add	r3, r2
 800b192:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b196:	781b      	ldrb	r3, [r3, #0]
 800b198:	b25b      	sxtb	r3, r3
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	da15      	bge.n	800b1ca <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b19e:	7bfb      	ldrb	r3, [r7, #15]
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	211a      	movs	r1, #26
 800b1a4:	fb01 f303 	mul.w	r3, r1, r3
 800b1a8:	4413      	add	r3, r2
 800b1aa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b1ae:	781a      	ldrb	r2, [r3, #0]
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b1b4:	7bfb      	ldrb	r3, [r7, #15]
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	211a      	movs	r1, #26
 800b1ba:	fb01 f303 	mul.w	r3, r1, r3
 800b1be:	4413      	add	r3, r2
 800b1c0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b1c4:	881a      	ldrh	r2, [r3, #0]
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	785b      	ldrb	r3, [r3, #1]
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f001 ff2c 	bl	800d02e <USBH_AllocPipe>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	461a      	mov	r2, r3
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	7819      	ldrb	r1, [r3, #0]
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	7858      	ldrb	r0, [r3, #1]
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b1f2:	68ba      	ldr	r2, [r7, #8]
 800b1f4:	8952      	ldrh	r2, [r2, #10]
 800b1f6:	9202      	str	r2, [sp, #8]
 800b1f8:	2203      	movs	r2, #3
 800b1fa:	9201      	str	r2, [sp, #4]
 800b1fc:	9300      	str	r3, [sp, #0]
 800b1fe:	4623      	mov	r3, r4
 800b200:	4602      	mov	r2, r0
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f001 fee4 	bl	800cfd0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	2200      	movs	r2, #0
 800b20e:	4619      	mov	r1, r3
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f005 ff23 	bl	801105c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800b216:	2300      	movs	r3, #0
 800b218:	2200      	movs	r2, #0
 800b21a:	210a      	movs	r1, #10
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 fbeb 	bl	800b9f8 <USBH_FindInterface>
 800b222:	4603      	mov	r3, r0
 800b224:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b226:	7bfb      	ldrb	r3, [r7, #15]
 800b228:	2bff      	cmp	r3, #255	; 0xff
 800b22a:	d002      	beq.n	800b232 <USBH_CDC_InterfaceInit+0x11a>
 800b22c:	7bfb      	ldrb	r3, [r7, #15]
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d901      	bls.n	800b236 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b232:	2302      	movs	r3, #2
 800b234:	e0c2      	b.n	800b3bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800b236:	7bfb      	ldrb	r3, [r7, #15]
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	211a      	movs	r1, #26
 800b23c:	fb01 f303 	mul.w	r3, r1, r3
 800b240:	4413      	add	r3, r2
 800b242:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b246:	781b      	ldrb	r3, [r3, #0]
 800b248:	b25b      	sxtb	r3, r3
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	da16      	bge.n	800b27c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b24e:	7bfb      	ldrb	r3, [r7, #15]
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	211a      	movs	r1, #26
 800b254:	fb01 f303 	mul.w	r3, r1, r3
 800b258:	4413      	add	r3, r2
 800b25a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b25e:	781a      	ldrb	r2, [r3, #0]
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b264:	7bfb      	ldrb	r3, [r7, #15]
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	211a      	movs	r1, #26
 800b26a:	fb01 f303 	mul.w	r3, r1, r3
 800b26e:	4413      	add	r3, r2
 800b270:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b274:	881a      	ldrh	r2, [r3, #0]
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	835a      	strh	r2, [r3, #26]
 800b27a:	e015      	b.n	800b2a8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b27c:	7bfb      	ldrb	r3, [r7, #15]
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	211a      	movs	r1, #26
 800b282:	fb01 f303 	mul.w	r3, r1, r3
 800b286:	4413      	add	r3, r2
 800b288:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b28c:	781a      	ldrb	r2, [r3, #0]
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b292:	7bfb      	ldrb	r3, [r7, #15]
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	211a      	movs	r1, #26
 800b298:	fb01 f303 	mul.w	r3, r1, r3
 800b29c:	4413      	add	r3, r2
 800b29e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b2a2:	881a      	ldrh	r2, [r3, #0]
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800b2a8:	7bfb      	ldrb	r3, [r7, #15]
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	211a      	movs	r1, #26
 800b2ae:	fb01 f303 	mul.w	r3, r1, r3
 800b2b2:	4413      	add	r3, r2
 800b2b4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b2b8:	781b      	ldrb	r3, [r3, #0]
 800b2ba:	b25b      	sxtb	r3, r3
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	da16      	bge.n	800b2ee <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b2c0:	7bfb      	ldrb	r3, [r7, #15]
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	211a      	movs	r1, #26
 800b2c6:	fb01 f303 	mul.w	r3, r1, r3
 800b2ca:	4413      	add	r3, r2
 800b2cc:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b2d0:	781a      	ldrb	r2, [r3, #0]
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b2d6:	7bfb      	ldrb	r3, [r7, #15]
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	211a      	movs	r1, #26
 800b2dc:	fb01 f303 	mul.w	r3, r1, r3
 800b2e0:	4413      	add	r3, r2
 800b2e2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b2e6:	881a      	ldrh	r2, [r3, #0]
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	835a      	strh	r2, [r3, #26]
 800b2ec:	e015      	b.n	800b31a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b2ee:	7bfb      	ldrb	r3, [r7, #15]
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	211a      	movs	r1, #26
 800b2f4:	fb01 f303 	mul.w	r3, r1, r3
 800b2f8:	4413      	add	r3, r2
 800b2fa:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b2fe:	781a      	ldrb	r2, [r3, #0]
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b304:	7bfb      	ldrb	r3, [r7, #15]
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	211a      	movs	r1, #26
 800b30a:	fb01 f303 	mul.w	r3, r1, r3
 800b30e:	4413      	add	r3, r2
 800b310:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b314:	881a      	ldrh	r2, [r3, #0]
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	7b9b      	ldrb	r3, [r3, #14]
 800b31e:	4619      	mov	r1, r3
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f001 fe84 	bl	800d02e <USBH_AllocPipe>
 800b326:	4603      	mov	r3, r0
 800b328:	461a      	mov	r2, r3
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	7bdb      	ldrb	r3, [r3, #15]
 800b332:	4619      	mov	r1, r3
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f001 fe7a 	bl	800d02e <USBH_AllocPipe>
 800b33a:	4603      	mov	r3, r0
 800b33c:	461a      	mov	r2, r3
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	7b59      	ldrb	r1, [r3, #13]
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	7b98      	ldrb	r0, [r3, #14]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b356:	68ba      	ldr	r2, [r7, #8]
 800b358:	8b12      	ldrh	r2, [r2, #24]
 800b35a:	9202      	str	r2, [sp, #8]
 800b35c:	2202      	movs	r2, #2
 800b35e:	9201      	str	r2, [sp, #4]
 800b360:	9300      	str	r3, [sp, #0]
 800b362:	4623      	mov	r3, r4
 800b364:	4602      	mov	r2, r0
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f001 fe32 	bl	800cfd0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	7b19      	ldrb	r1, [r3, #12]
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	7bd8      	ldrb	r0, [r3, #15]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b380:	68ba      	ldr	r2, [r7, #8]
 800b382:	8b52      	ldrh	r2, [r2, #26]
 800b384:	9202      	str	r2, [sp, #8]
 800b386:	2202      	movs	r2, #2
 800b388:	9201      	str	r2, [sp, #4]
 800b38a:	9300      	str	r3, [sp, #0]
 800b38c:	4623      	mov	r3, r4
 800b38e:	4602      	mov	r2, r0
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f001 fe1d 	bl	800cfd0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	2200      	movs	r2, #0
 800b39a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	7b5b      	ldrb	r3, [r3, #13]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f005 fe58 	bl	801105c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	7b1b      	ldrb	r3, [r3, #12]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f005 fe51 	bl	801105c <USBH_LL_SetToggle>

  return USBH_OK;
 800b3ba:	2300      	movs	r3, #0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3714      	adds	r7, #20
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd90      	pop	{r4, r7, pc}

0800b3c4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b084      	sub	sp, #16
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3d2:	69db      	ldr	r3, [r3, #28]
 800b3d4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00e      	beq.n	800b3fc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f001 fe12 	bl	800d00e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f001 fe3d 	bl	800d070 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	7b1b      	ldrb	r3, [r3, #12]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d00e      	beq.n	800b422 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	7b1b      	ldrb	r3, [r3, #12]
 800b408:	4619      	mov	r1, r3
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f001 fdff 	bl	800d00e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	7b1b      	ldrb	r3, [r3, #12]
 800b414:	4619      	mov	r1, r3
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f001 fe2a 	bl	800d070 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2200      	movs	r2, #0
 800b420:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	7b5b      	ldrb	r3, [r3, #13]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d00e      	beq.n	800b448 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	7b5b      	ldrb	r3, [r3, #13]
 800b42e:	4619      	mov	r1, r3
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f001 fdec 	bl	800d00e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	7b5b      	ldrb	r3, [r3, #13]
 800b43a:	4619      	mov	r1, r3
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f001 fe17 	bl	800d070 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2200      	movs	r2, #0
 800b446:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b44e:	69db      	ldr	r3, [r3, #28]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d00b      	beq.n	800b46c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b45a:	69db      	ldr	r3, [r3, #28]
 800b45c:	4618      	mov	r0, r3
 800b45e:	f005 feb3 	bl	80111c8 <free>
    phost->pActiveClass->pData = 0U;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b468:	2200      	movs	r2, #0
 800b46a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b46c:	2300      	movs	r3, #0
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}

0800b476 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b476:	b580      	push	{r7, lr}
 800b478:	b084      	sub	sp, #16
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b484:	69db      	ldr	r3, [r3, #28]
 800b486:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	3340      	adds	r3, #64	; 0x40
 800b48c:	4619      	mov	r1, r3
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 f8b1 	bl	800b5f6 <GetLineCoding>
 800b494:	4603      	mov	r3, r0
 800b496:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800b498:	7afb      	ldrb	r3, [r7, #11]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d105      	bne.n	800b4aa <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b4a4:	2102      	movs	r1, #2
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800b4aa:	7afb      	ldrb	r3, [r7, #11]
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3710      	adds	r7, #16
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4ca:	69db      	ldr	r3, [r3, #28]
 800b4cc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b4d4:	2b04      	cmp	r3, #4
 800b4d6:	d877      	bhi.n	800b5c8 <USBH_CDC_Process+0x114>
 800b4d8:	a201      	add	r2, pc, #4	; (adr r2, 800b4e0 <USBH_CDC_Process+0x2c>)
 800b4da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4de:	bf00      	nop
 800b4e0:	0800b4f5 	.word	0x0800b4f5
 800b4e4:	0800b4fb 	.word	0x0800b4fb
 800b4e8:	0800b52b 	.word	0x0800b52b
 800b4ec:	0800b59f 	.word	0x0800b59f
 800b4f0:	0800b5ad 	.word	0x0800b5ad
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	73fb      	strb	r3, [r7, #15]
      break;
 800b4f8:	e06d      	b.n	800b5d6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4fe:	4619      	mov	r1, r3
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f000 f897 	bl	800b634 <SetLineCoding>
 800b506:	4603      	mov	r3, r0
 800b508:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b50a:	7bbb      	ldrb	r3, [r7, #14]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d104      	bne.n	800b51a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	2202      	movs	r2, #2
 800b514:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b518:	e058      	b.n	800b5cc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800b51a:	7bbb      	ldrb	r3, [r7, #14]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d055      	beq.n	800b5cc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	2204      	movs	r2, #4
 800b524:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b528:	e050      	b.n	800b5cc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	3340      	adds	r3, #64	; 0x40
 800b52e:	4619      	mov	r1, r3
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 f860 	bl	800b5f6 <GetLineCoding>
 800b536:	4603      	mov	r3, r0
 800b538:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b53a:	7bbb      	ldrb	r3, [r7, #14]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d126      	bne.n	800b58e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	2200      	movs	r2, #0
 800b544:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b552:	791b      	ldrb	r3, [r3, #4]
 800b554:	429a      	cmp	r2, r3
 800b556:	d13b      	bne.n	800b5d0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b562:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b564:	429a      	cmp	r2, r3
 800b566:	d133      	bne.n	800b5d0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b572:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b574:	429a      	cmp	r2, r3
 800b576:	d12b      	bne.n	800b5d0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b580:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b582:	429a      	cmp	r2, r3
 800b584:	d124      	bne.n	800b5d0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 f958 	bl	800b83c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b58c:	e020      	b.n	800b5d0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800b58e:	7bbb      	ldrb	r3, [r7, #14]
 800b590:	2b01      	cmp	r3, #1
 800b592:	d01d      	beq.n	800b5d0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	2204      	movs	r2, #4
 800b598:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b59c:	e018      	b.n	800b5d0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 f867 	bl	800b672 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 f8da 	bl	800b75e <CDC_ProcessReception>
      break;
 800b5aa:	e014      	b.n	800b5d6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800b5ac:	2100      	movs	r1, #0
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 ffef 	bl	800c592 <USBH_ClrFeature>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b5b8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d10a      	bne.n	800b5d4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800b5c6:	e005      	b.n	800b5d4 <USBH_CDC_Process+0x120>

    default:
      break;
 800b5c8:	bf00      	nop
 800b5ca:	e004      	b.n	800b5d6 <USBH_CDC_Process+0x122>
      break;
 800b5cc:	bf00      	nop
 800b5ce:	e002      	b.n	800b5d6 <USBH_CDC_Process+0x122>
      break;
 800b5d0:	bf00      	nop
 800b5d2:	e000      	b.n	800b5d6 <USBH_CDC_Process+0x122>
      break;
 800b5d4:	bf00      	nop

  }

  return status;
 800b5d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3710      	adds	r7, #16
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b5e8:	2300      	movs	r3, #0
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	370c      	adds	r7, #12
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr

0800b5f6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800b5f6:	b580      	push	{r7, lr}
 800b5f8:	b082      	sub	sp, #8
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
 800b5fe:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	22a1      	movs	r2, #161	; 0xa1
 800b604:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2221      	movs	r2, #33	; 0x21
 800b60a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2200      	movs	r2, #0
 800b610:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2200      	movs	r2, #0
 800b616:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2207      	movs	r2, #7
 800b61c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	2207      	movs	r2, #7
 800b622:	4619      	mov	r1, r3
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f001 fa81 	bl	800cb2c <USBH_CtlReq>
 800b62a:	4603      	mov	r3, r0
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3708      	adds	r7, #8
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2221      	movs	r2, #33	; 0x21
 800b642:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2220      	movs	r2, #32
 800b648:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2200      	movs	r2, #0
 800b64e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2207      	movs	r2, #7
 800b65a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	2207      	movs	r2, #7
 800b660:	4619      	mov	r1, r3
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f001 fa62 	bl	800cb2c <USBH_CtlReq>
 800b668:	4603      	mov	r3, r0
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3708      	adds	r7, #8
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}

0800b672 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800b672:	b580      	push	{r7, lr}
 800b674:	b086      	sub	sp, #24
 800b676:	af02      	add	r7, sp, #8
 800b678:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b680:	69db      	ldr	r3, [r3, #28]
 800b682:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b684:	2300      	movs	r3, #0
 800b686:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d002      	beq.n	800b698 <CDC_ProcessTransmission+0x26>
 800b692:	2b02      	cmp	r3, #2
 800b694:	d023      	beq.n	800b6de <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800b696:	e05e      	b.n	800b756 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b69c:	68fa      	ldr	r2, [r7, #12]
 800b69e:	8b12      	ldrh	r2, [r2, #24]
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d90b      	bls.n	800b6bc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	69d9      	ldr	r1, [r3, #28]
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	8b1a      	ldrh	r2, [r3, #24]
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	7b5b      	ldrb	r3, [r3, #13]
 800b6b0:	2001      	movs	r0, #1
 800b6b2:	9000      	str	r0, [sp, #0]
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f001 fc48 	bl	800cf4a <USBH_BulkSendData>
 800b6ba:	e00b      	b.n	800b6d4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800b6c4:	b29a      	uxth	r2, r3
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	7b5b      	ldrb	r3, [r3, #13]
 800b6ca:	2001      	movs	r0, #1
 800b6cc:	9000      	str	r0, [sp, #0]
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f001 fc3b 	bl	800cf4a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2202      	movs	r2, #2
 800b6d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b6dc:	e03b      	b.n	800b756 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	7b5b      	ldrb	r3, [r3, #13]
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f005 fc8f 	bl	8011008 <USBH_LL_GetURBState>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800b6ee:	7afb      	ldrb	r3, [r7, #11]
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d128      	bne.n	800b746 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f8:	68fa      	ldr	r2, [r7, #12]
 800b6fa:	8b12      	ldrh	r2, [r2, #24]
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d90e      	bls.n	800b71e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b704:	68fa      	ldr	r2, [r7, #12]
 800b706:	8b12      	ldrh	r2, [r2, #24]
 800b708:	1a9a      	subs	r2, r3, r2
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	69db      	ldr	r3, [r3, #28]
 800b712:	68fa      	ldr	r2, [r7, #12]
 800b714:	8b12      	ldrh	r2, [r2, #24]
 800b716:	441a      	add	r2, r3
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	61da      	str	r2, [r3, #28]
 800b71c:	e002      	b.n	800b724 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2200      	movs	r2, #0
 800b722:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d004      	beq.n	800b736 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2201      	movs	r2, #1
 800b730:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b734:	e00e      	b.n	800b754 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2200      	movs	r2, #0
 800b73a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 f868 	bl	800b814 <USBH_CDC_TransmitCallback>
      break;
 800b744:	e006      	b.n	800b754 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800b746:	7afb      	ldrb	r3, [r7, #11]
 800b748:	2b02      	cmp	r3, #2
 800b74a:	d103      	bne.n	800b754 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2201      	movs	r2, #1
 800b750:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b754:	bf00      	nop
  }
}
 800b756:	bf00      	nop
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800b75e:	b580      	push	{r7, lr}
 800b760:	b086      	sub	sp, #24
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b76c:	69db      	ldr	r3, [r3, #28]
 800b76e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b770:	2300      	movs	r3, #0
 800b772:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800b77a:	2b03      	cmp	r3, #3
 800b77c:	d002      	beq.n	800b784 <CDC_ProcessReception+0x26>
 800b77e:	2b04      	cmp	r3, #4
 800b780:	d00e      	beq.n	800b7a0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800b782:	e043      	b.n	800b80c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	6a19      	ldr	r1, [r3, #32]
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	8b5a      	ldrh	r2, [r3, #26]
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	7b1b      	ldrb	r3, [r3, #12]
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f001 fbff 	bl	800cf94 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	2204      	movs	r2, #4
 800b79a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b79e:	e035      	b.n	800b80c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	7b1b      	ldrb	r3, [r3, #12]
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f005 fc2e 	bl	8011008 <USBH_LL_GetURBState>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800b7b0:	7cfb      	ldrb	r3, [r7, #19]
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d129      	bne.n	800b80a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	7b1b      	ldrb	r3, [r3, #12]
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f005 fb91 	bl	8010ee4 <USBH_LL_GetLastXferSize>
 800b7c2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7c8:	68fa      	ldr	r2, [r7, #12]
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d016      	beq.n	800b7fc <CDC_ProcessReception+0x9e>
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	8b5b      	ldrh	r3, [r3, #26]
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d910      	bls.n	800b7fc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	1ad2      	subs	r2, r2, r3
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	6a1a      	ldr	r2, [r3, #32]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	441a      	add	r2, r3
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	2203      	movs	r2, #3
 800b7f6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b7fa:	e006      	b.n	800b80a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	2200      	movs	r2, #0
 800b800:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 f80f 	bl	800b828 <USBH_CDC_ReceiveCallback>
      break;
 800b80a:	bf00      	nop
  }
}
 800b80c:	bf00      	nop
 800b80e:	3718      	adds	r7, #24
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800b814:	b480      	push	{r7}
 800b816:	b083      	sub	sp, #12
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b81c:	bf00      	nop
 800b81e:	370c      	adds	r7, #12
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr

0800b828 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800b828:	b480      	push	{r7}
 800b82a:	b083      	sub	sp, #12
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b830:	bf00      	nop
 800b832:	370c      	adds	r7, #12
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr

0800b83c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b844:	bf00      	nop
 800b846:	370c      	adds	r7, #12
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr

0800b850 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b084      	sub	sp, #16
 800b854:	af00      	add	r7, sp, #0
 800b856:	60f8      	str	r0, [r7, #12]
 800b858:	60b9      	str	r1, [r7, #8]
 800b85a:	4613      	mov	r3, r2
 800b85c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d101      	bne.n	800b868 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b864:	2302      	movs	r3, #2
 800b866:	e029      	b.n	800b8bc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	79fa      	ldrb	r2, [r7, #7]
 800b86c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2200      	movs	r2, #0
 800b874:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2200      	movs	r2, #0
 800b87c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b880:	68f8      	ldr	r0, [r7, #12]
 800b882:	f000 f81f 	bl	800b8c4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2200      	movs	r2, #0
 800b88a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2200      	movs	r2, #0
 800b892:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2200      	movs	r2, #0
 800b89a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d003      	beq.n	800b8b4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	68ba      	ldr	r2, [r7, #8]
 800b8b0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b8b4:	68f8      	ldr	r0, [r7, #12]
 800b8b6:	f005 fa61 	bl	8010d7c <USBH_LL_Init>

  return USBH_OK;
 800b8ba:	2300      	movs	r3, #0
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3710      	adds	r7, #16
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b085      	sub	sp, #20
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	60fb      	str	r3, [r7, #12]
 800b8d4:	e009      	b.n	800b8ea <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	33e0      	adds	r3, #224	; 0xe0
 800b8dc:	009b      	lsls	r3, r3, #2
 800b8de:	4413      	add	r3, r2
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	60fb      	str	r3, [r7, #12]
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2b0f      	cmp	r3, #15
 800b8ee:	d9f2      	bls.n	800b8d6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	60fb      	str	r3, [r7, #12]
 800b8f4:	e009      	b.n	800b90a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b8f6:	687a      	ldr	r2, [r7, #4]
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	4413      	add	r3, r2
 800b8fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b900:	2200      	movs	r2, #0
 800b902:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	3301      	adds	r3, #1
 800b908:	60fb      	str	r3, [r7, #12]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b910:	d3f1      	bcc.n	800b8f6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2201      	movs	r2, #1
 800b922:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2200      	movs	r2, #0
 800b928:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2201      	movs	r2, #1
 800b930:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2240      	movs	r2, #64	; 0x40
 800b936:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2200      	movs	r2, #0
 800b93c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2200      	movs	r2, #0
 800b942:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2201      	movs	r2, #1
 800b94a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2200      	movs	r2, #0
 800b952:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2200      	movs	r2, #0
 800b95a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3714      	adds	r7, #20
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr

0800b96c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b085      	sub	sp, #20
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b976:	2300      	movs	r3, #0
 800b978:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d016      	beq.n	800b9ae <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b986:	2b00      	cmp	r3, #0
 800b988:	d10e      	bne.n	800b9a8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b990:	1c59      	adds	r1, r3, #1
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	33de      	adds	r3, #222	; 0xde
 800b99c:	6839      	ldr	r1, [r7, #0]
 800b99e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	73fb      	strb	r3, [r7, #15]
 800b9a6:	e004      	b.n	800b9b2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b9a8:	2302      	movs	r3, #2
 800b9aa:	73fb      	strb	r3, [r7, #15]
 800b9ac:	e001      	b.n	800b9b2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b9ae:	2302      	movs	r3, #2
 800b9b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b9b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3714      	adds	r7, #20
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b085      	sub	sp, #20
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b9d6:	78fa      	ldrb	r2, [r7, #3]
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d204      	bcs.n	800b9e6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	78fa      	ldrb	r2, [r7, #3]
 800b9e0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b9e4:	e001      	b.n	800b9ea <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b9e6:	2302      	movs	r3, #2
 800b9e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b9ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3714      	adds	r7, #20
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr

0800b9f8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b087      	sub	sp, #28
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	4608      	mov	r0, r1
 800ba02:	4611      	mov	r1, r2
 800ba04:	461a      	mov	r2, r3
 800ba06:	4603      	mov	r3, r0
 800ba08:	70fb      	strb	r3, [r7, #3]
 800ba0a:	460b      	mov	r3, r1
 800ba0c:	70bb      	strb	r3, [r7, #2]
 800ba0e:	4613      	mov	r3, r2
 800ba10:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ba12:	2300      	movs	r3, #0
 800ba14:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ba16:	2300      	movs	r3, #0
 800ba18:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ba20:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ba22:	e025      	b.n	800ba70 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ba24:	7dfb      	ldrb	r3, [r7, #23]
 800ba26:	221a      	movs	r2, #26
 800ba28:	fb02 f303 	mul.w	r3, r2, r3
 800ba2c:	3308      	adds	r3, #8
 800ba2e:	68fa      	ldr	r2, [r7, #12]
 800ba30:	4413      	add	r3, r2
 800ba32:	3302      	adds	r3, #2
 800ba34:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	795b      	ldrb	r3, [r3, #5]
 800ba3a:	78fa      	ldrb	r2, [r7, #3]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d002      	beq.n	800ba46 <USBH_FindInterface+0x4e>
 800ba40:	78fb      	ldrb	r3, [r7, #3]
 800ba42:	2bff      	cmp	r3, #255	; 0xff
 800ba44:	d111      	bne.n	800ba6a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ba4a:	78ba      	ldrb	r2, [r7, #2]
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d002      	beq.n	800ba56 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ba50:	78bb      	ldrb	r3, [r7, #2]
 800ba52:	2bff      	cmp	r3, #255	; 0xff
 800ba54:	d109      	bne.n	800ba6a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ba5a:	787a      	ldrb	r2, [r7, #1]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d002      	beq.n	800ba66 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ba60:	787b      	ldrb	r3, [r7, #1]
 800ba62:	2bff      	cmp	r3, #255	; 0xff
 800ba64:	d101      	bne.n	800ba6a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ba66:	7dfb      	ldrb	r3, [r7, #23]
 800ba68:	e006      	b.n	800ba78 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ba6a:	7dfb      	ldrb	r3, [r7, #23]
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ba70:	7dfb      	ldrb	r3, [r7, #23]
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	d9d6      	bls.n	800ba24 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ba76:	23ff      	movs	r3, #255	; 0xff
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	371c      	adds	r7, #28
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr

0800ba84 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f005 f9b1 	bl	8010df4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800ba92:	2101      	movs	r1, #1
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f005 faca 	bl	801102e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ba9a:	2300      	movs	r3, #0
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3708      	adds	r7, #8
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b088      	sub	sp, #32
 800baa8:	af04      	add	r7, sp, #16
 800baaa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800baac:	2302      	movs	r3, #2
 800baae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800bab0:	2300      	movs	r3, #0
 800bab2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800baba:	b2db      	uxtb	r3, r3
 800babc:	2b01      	cmp	r3, #1
 800babe:	d102      	bne.n	800bac6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2203      	movs	r2, #3
 800bac4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	b2db      	uxtb	r3, r3
 800bacc:	2b0b      	cmp	r3, #11
 800bace:	f200 81be 	bhi.w	800be4e <USBH_Process+0x3aa>
 800bad2:	a201      	add	r2, pc, #4	; (adr r2, 800bad8 <USBH_Process+0x34>)
 800bad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad8:	0800bb09 	.word	0x0800bb09
 800badc:	0800bb3b 	.word	0x0800bb3b
 800bae0:	0800bba3 	.word	0x0800bba3
 800bae4:	0800bde9 	.word	0x0800bde9
 800bae8:	0800be4f 	.word	0x0800be4f
 800baec:	0800bc47 	.word	0x0800bc47
 800baf0:	0800bd8f 	.word	0x0800bd8f
 800baf4:	0800bc7d 	.word	0x0800bc7d
 800baf8:	0800bc9d 	.word	0x0800bc9d
 800bafc:	0800bcbd 	.word	0x0800bcbd
 800bb00:	0800bd01 	.word	0x0800bd01
 800bb04:	0800bdd1 	.word	0x0800bdd1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	f000 819e 	beq.w	800be52 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2201      	movs	r2, #1
 800bb1a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800bb1c:	20c8      	movs	r0, #200	; 0xc8
 800bb1e:	f005 facd 	bl	80110bc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f005 f9c3 	bl	8010eae <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2200      	movs	r2, #0
 800bb34:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bb38:	e18b      	b.n	800be52 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d107      	bne.n	800bb54 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2202      	movs	r2, #2
 800bb50:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bb52:	e18d      	b.n	800be70 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bb5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb5e:	d914      	bls.n	800bb8a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bb66:	3301      	adds	r3, #1
 800bb68:	b2da      	uxtb	r2, r3
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bb76:	2b03      	cmp	r3, #3
 800bb78:	d903      	bls.n	800bb82 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	220d      	movs	r2, #13
 800bb7e:	701a      	strb	r2, [r3, #0]
      break;
 800bb80:	e176      	b.n	800be70 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2200      	movs	r2, #0
 800bb86:	701a      	strb	r2, [r3, #0]
      break;
 800bb88:	e172      	b.n	800be70 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bb90:	f103 020a 	add.w	r2, r3, #10
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800bb9a:	200a      	movs	r0, #10
 800bb9c:	f005 fa8e 	bl	80110bc <USBH_Delay>
      break;
 800bba0:	e166      	b.n	800be70 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d005      	beq.n	800bbb8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bbb2:	2104      	movs	r1, #4
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800bbb8:	2064      	movs	r0, #100	; 0x64
 800bbba:	f005 fa7f 	bl	80110bc <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f005 f94e 	bl	8010e60 <USBH_LL_GetSpeed>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2205      	movs	r2, #5
 800bbd2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800bbd4:	2100      	movs	r1, #0
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f001 fa29 	bl	800d02e <USBH_AllocPipe>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	461a      	mov	r2, r3
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800bbe4:	2180      	movs	r1, #128	; 0x80
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f001 fa21 	bl	800d02e <USBH_AllocPipe>
 800bbec:	4603      	mov	r3, r0
 800bbee:	461a      	mov	r2, r3
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	7919      	ldrb	r1, [r3, #4]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bc04:	687a      	ldr	r2, [r7, #4]
 800bc06:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bc08:	b292      	uxth	r2, r2
 800bc0a:	9202      	str	r2, [sp, #8]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	9201      	str	r2, [sp, #4]
 800bc10:	9300      	str	r3, [sp, #0]
 800bc12:	4603      	mov	r3, r0
 800bc14:	2280      	movs	r2, #128	; 0x80
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f001 f9da 	bl	800cfd0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	7959      	ldrb	r1, [r3, #5]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bc2c:	687a      	ldr	r2, [r7, #4]
 800bc2e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bc30:	b292      	uxth	r2, r2
 800bc32:	9202      	str	r2, [sp, #8]
 800bc34:	2200      	movs	r2, #0
 800bc36:	9201      	str	r2, [sp, #4]
 800bc38:	9300      	str	r3, [sp, #0]
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f001 f9c6 	bl	800cfd0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bc44:	e114      	b.n	800be70 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 f918 	bl	800be7c <USBH_HandleEnum>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800bc50:	7bbb      	ldrb	r3, [r7, #14]
 800bc52:	b2db      	uxtb	r3, r3
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	f040 80fe 	bne.w	800be56 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d103      	bne.n	800bc74 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2208      	movs	r2, #8
 800bc70:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bc72:	e0f0      	b.n	800be56 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2207      	movs	r2, #7
 800bc78:	701a      	strb	r2, [r3, #0]
      break;
 800bc7a:	e0ec      	b.n	800be56 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	f000 80e9 	beq.w	800be5a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bc8e:	2101      	movs	r1, #1
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2208      	movs	r2, #8
 800bc98:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800bc9a:	e0de      	b.n	800be5a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	4619      	mov	r1, r3
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f000 fc2c 	bl	800c504 <USBH_SetCfg>
 800bcac:	4603      	mov	r3, r0
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	f040 80d5 	bne.w	800be5e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2209      	movs	r2, #9
 800bcb8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bcba:	e0d0      	b.n	800be5e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800bcc2:	f003 0320 	and.w	r3, r3, #32
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d016      	beq.n	800bcf8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800bcca:	2101      	movs	r1, #1
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f000 fc3c 	bl	800c54a <USBH_SetFeature>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800bcd6:	7bbb      	ldrb	r3, [r7, #14]
 800bcd8:	b2db      	uxtb	r3, r3
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d103      	bne.n	800bce6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	220a      	movs	r2, #10
 800bce2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bce4:	e0bd      	b.n	800be62 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800bce6:	7bbb      	ldrb	r3, [r7, #14]
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	2b03      	cmp	r3, #3
 800bcec:	f040 80b9 	bne.w	800be62 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	220a      	movs	r2, #10
 800bcf4:	701a      	strb	r2, [r3, #0]
      break;
 800bcf6:	e0b4      	b.n	800be62 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	220a      	movs	r2, #10
 800bcfc:	701a      	strb	r2, [r3, #0]
      break;
 800bcfe:	e0b0      	b.n	800be62 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	f000 80ad 	beq.w	800be66 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bd14:	2300      	movs	r3, #0
 800bd16:	73fb      	strb	r3, [r7, #15]
 800bd18:	e016      	b.n	800bd48 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800bd1a:	7bfa      	ldrb	r2, [r7, #15]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	32de      	adds	r2, #222	; 0xde
 800bd20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd24:	791a      	ldrb	r2, [r3, #4]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d108      	bne.n	800bd42 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800bd30:	7bfa      	ldrb	r2, [r7, #15]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	32de      	adds	r2, #222	; 0xde
 800bd36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800bd40:	e005      	b.n	800bd4e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bd42:	7bfb      	ldrb	r3, [r7, #15]
 800bd44:	3301      	adds	r3, #1
 800bd46:	73fb      	strb	r3, [r7, #15]
 800bd48:	7bfb      	ldrb	r3, [r7, #15]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d0e5      	beq.n	800bd1a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d016      	beq.n	800bd86 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd5e:	689b      	ldr	r3, [r3, #8]
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	4798      	blx	r3
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d109      	bne.n	800bd7e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2206      	movs	r2, #6
 800bd6e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bd76:	2103      	movs	r1, #3
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bd7c:	e073      	b.n	800be66 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	220d      	movs	r2, #13
 800bd82:	701a      	strb	r2, [r3, #0]
      break;
 800bd84:	e06f      	b.n	800be66 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	220d      	movs	r2, #13
 800bd8a:	701a      	strb	r2, [r3, #0]
      break;
 800bd8c:	e06b      	b.n	800be66 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d017      	beq.n	800bdc8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd9e:	691b      	ldr	r3, [r3, #16]
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	4798      	blx	r3
 800bda4:	4603      	mov	r3, r0
 800bda6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800bda8:	7bbb      	ldrb	r3, [r7, #14]
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d103      	bne.n	800bdb8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	220b      	movs	r2, #11
 800bdb4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bdb6:	e058      	b.n	800be6a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800bdb8:	7bbb      	ldrb	r3, [r7, #14]
 800bdba:	b2db      	uxtb	r3, r3
 800bdbc:	2b02      	cmp	r3, #2
 800bdbe:	d154      	bne.n	800be6a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	220d      	movs	r2, #13
 800bdc4:	701a      	strb	r2, [r3, #0]
      break;
 800bdc6:	e050      	b.n	800be6a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	220d      	movs	r2, #13
 800bdcc:	701a      	strb	r2, [r3, #0]
      break;
 800bdce:	e04c      	b.n	800be6a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d049      	beq.n	800be6e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bde0:	695b      	ldr	r3, [r3, #20]
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	4798      	blx	r3
      }
      break;
 800bde6:	e042      	b.n	800be6e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f7ff fd67 	bl	800b8c4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d009      	beq.n	800be14 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be06:	68db      	ldr	r3, [r3, #12]
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2200      	movs	r2, #0
 800be10:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d005      	beq.n	800be2a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800be24:	2105      	movs	r1, #5
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800be30:	b2db      	uxtb	r3, r3
 800be32:	2b01      	cmp	r3, #1
 800be34:	d107      	bne.n	800be46 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f7ff fe20 	bl	800ba84 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800be44:	e014      	b.n	800be70 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f004 ffd4 	bl	8010df4 <USBH_LL_Start>
      break;
 800be4c:	e010      	b.n	800be70 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800be4e:	bf00      	nop
 800be50:	e00e      	b.n	800be70 <USBH_Process+0x3cc>
      break;
 800be52:	bf00      	nop
 800be54:	e00c      	b.n	800be70 <USBH_Process+0x3cc>
      break;
 800be56:	bf00      	nop
 800be58:	e00a      	b.n	800be70 <USBH_Process+0x3cc>
    break;
 800be5a:	bf00      	nop
 800be5c:	e008      	b.n	800be70 <USBH_Process+0x3cc>
      break;
 800be5e:	bf00      	nop
 800be60:	e006      	b.n	800be70 <USBH_Process+0x3cc>
      break;
 800be62:	bf00      	nop
 800be64:	e004      	b.n	800be70 <USBH_Process+0x3cc>
      break;
 800be66:	bf00      	nop
 800be68:	e002      	b.n	800be70 <USBH_Process+0x3cc>
      break;
 800be6a:	bf00      	nop
 800be6c:	e000      	b.n	800be70 <USBH_Process+0x3cc>
      break;
 800be6e:	bf00      	nop
  }
  return USBH_OK;
 800be70:	2300      	movs	r3, #0
}
 800be72:	4618      	mov	r0, r3
 800be74:	3710      	adds	r7, #16
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop

0800be7c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b088      	sub	sp, #32
 800be80:	af04      	add	r7, sp, #16
 800be82:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800be84:	2301      	movs	r3, #1
 800be86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800be88:	2301      	movs	r3, #1
 800be8a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	785b      	ldrb	r3, [r3, #1]
 800be90:	2b07      	cmp	r3, #7
 800be92:	f200 81c1 	bhi.w	800c218 <USBH_HandleEnum+0x39c>
 800be96:	a201      	add	r2, pc, #4	; (adr r2, 800be9c <USBH_HandleEnum+0x20>)
 800be98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be9c:	0800bebd 	.word	0x0800bebd
 800bea0:	0800bf7b 	.word	0x0800bf7b
 800bea4:	0800bfe5 	.word	0x0800bfe5
 800bea8:	0800c073 	.word	0x0800c073
 800beac:	0800c0dd 	.word	0x0800c0dd
 800beb0:	0800c14d 	.word	0x0800c14d
 800beb4:	0800c193 	.word	0x0800c193
 800beb8:	0800c1d9 	.word	0x0800c1d9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800bebc:	2108      	movs	r1, #8
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 fa50 	bl	800c364 <USBH_Get_DevDesc>
 800bec4:	4603      	mov	r3, r0
 800bec6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bec8:	7bbb      	ldrb	r3, [r7, #14]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d130      	bne.n	800bf30 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2201      	movs	r2, #1
 800bedc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	7919      	ldrb	r1, [r3, #4]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bef2:	b292      	uxth	r2, r2
 800bef4:	9202      	str	r2, [sp, #8]
 800bef6:	2200      	movs	r2, #0
 800bef8:	9201      	str	r2, [sp, #4]
 800befa:	9300      	str	r3, [sp, #0]
 800befc:	4603      	mov	r3, r0
 800befe:	2280      	movs	r2, #128	; 0x80
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f001 f865 	bl	800cfd0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	7959      	ldrb	r1, [r3, #5]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bf16:	687a      	ldr	r2, [r7, #4]
 800bf18:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bf1a:	b292      	uxth	r2, r2
 800bf1c:	9202      	str	r2, [sp, #8]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	9201      	str	r2, [sp, #4]
 800bf22:	9300      	str	r3, [sp, #0]
 800bf24:	4603      	mov	r3, r0
 800bf26:	2200      	movs	r2, #0
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f001 f851 	bl	800cfd0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bf2e:	e175      	b.n	800c21c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bf30:	7bbb      	ldrb	r3, [r7, #14]
 800bf32:	2b03      	cmp	r3, #3
 800bf34:	f040 8172 	bne.w	800c21c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bf3e:	3301      	adds	r3, #1
 800bf40:	b2da      	uxtb	r2, r3
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bf4e:	2b03      	cmp	r3, #3
 800bf50:	d903      	bls.n	800bf5a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	220d      	movs	r2, #13
 800bf56:	701a      	strb	r2, [r3, #0]
      break;
 800bf58:	e160      	b.n	800c21c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	795b      	ldrb	r3, [r3, #5]
 800bf5e:	4619      	mov	r1, r3
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f001 f885 	bl	800d070 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	791b      	ldrb	r3, [r3, #4]
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f001 f87f 	bl	800d070 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2200      	movs	r2, #0
 800bf76:	701a      	strb	r2, [r3, #0]
      break;
 800bf78:	e150      	b.n	800c21c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800bf7a:	2112      	movs	r1, #18
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f000 f9f1 	bl	800c364 <USBH_Get_DevDesc>
 800bf82:	4603      	mov	r3, r0
 800bf84:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bf86:	7bbb      	ldrb	r3, [r7, #14]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d103      	bne.n	800bf94 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2202      	movs	r2, #2
 800bf90:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bf92:	e145      	b.n	800c220 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bf94:	7bbb      	ldrb	r3, [r7, #14]
 800bf96:	2b03      	cmp	r3, #3
 800bf98:	f040 8142 	bne.w	800c220 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	b2da      	uxtb	r2, r3
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bfb2:	2b03      	cmp	r3, #3
 800bfb4:	d903      	bls.n	800bfbe <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	220d      	movs	r2, #13
 800bfba:	701a      	strb	r2, [r3, #0]
      break;
 800bfbc:	e130      	b.n	800c220 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	795b      	ldrb	r3, [r3, #5]
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f001 f853 	bl	800d070 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	791b      	ldrb	r3, [r3, #4]
 800bfce:	4619      	mov	r1, r3
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f001 f84d 	bl	800d070 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	701a      	strb	r2, [r3, #0]
      break;
 800bfe2:	e11d      	b.n	800c220 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800bfe4:	2101      	movs	r1, #1
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 fa68 	bl	800c4bc <USBH_SetAddress>
 800bfec:	4603      	mov	r3, r0
 800bfee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bff0:	7bbb      	ldrb	r3, [r7, #14]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d132      	bne.n	800c05c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800bff6:	2002      	movs	r0, #2
 800bff8:	f005 f860 	bl	80110bc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2201      	movs	r2, #1
 800c000:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2203      	movs	r2, #3
 800c008:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	7919      	ldrb	r1, [r3, #4]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c01e:	b292      	uxth	r2, r2
 800c020:	9202      	str	r2, [sp, #8]
 800c022:	2200      	movs	r2, #0
 800c024:	9201      	str	r2, [sp, #4]
 800c026:	9300      	str	r3, [sp, #0]
 800c028:	4603      	mov	r3, r0
 800c02a:	2280      	movs	r2, #128	; 0x80
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f000 ffcf 	bl	800cfd0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	7959      	ldrb	r1, [r3, #5]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c042:	687a      	ldr	r2, [r7, #4]
 800c044:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c046:	b292      	uxth	r2, r2
 800c048:	9202      	str	r2, [sp, #8]
 800c04a:	2200      	movs	r2, #0
 800c04c:	9201      	str	r2, [sp, #4]
 800c04e:	9300      	str	r3, [sp, #0]
 800c050:	4603      	mov	r3, r0
 800c052:	2200      	movs	r2, #0
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 ffbb 	bl	800cfd0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c05a:	e0e3      	b.n	800c224 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c05c:	7bbb      	ldrb	r3, [r7, #14]
 800c05e:	2b03      	cmp	r3, #3
 800c060:	f040 80e0 	bne.w	800c224 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	220d      	movs	r2, #13
 800c068:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2200      	movs	r2, #0
 800c06e:	705a      	strb	r2, [r3, #1]
      break;
 800c070:	e0d8      	b.n	800c224 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c072:	2109      	movs	r1, #9
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 f99d 	bl	800c3b4 <USBH_Get_CfgDesc>
 800c07a:	4603      	mov	r3, r0
 800c07c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c07e:	7bbb      	ldrb	r3, [r7, #14]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d103      	bne.n	800c08c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2204      	movs	r2, #4
 800c088:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c08a:	e0cd      	b.n	800c228 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c08c:	7bbb      	ldrb	r3, [r7, #14]
 800c08e:	2b03      	cmp	r3, #3
 800c090:	f040 80ca 	bne.w	800c228 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c09a:	3301      	adds	r3, #1
 800c09c:	b2da      	uxtb	r2, r3
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c0aa:	2b03      	cmp	r3, #3
 800c0ac:	d903      	bls.n	800c0b6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	220d      	movs	r2, #13
 800c0b2:	701a      	strb	r2, [r3, #0]
      break;
 800c0b4:	e0b8      	b.n	800c228 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	795b      	ldrb	r3, [r3, #5]
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 ffd7 	bl	800d070 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	791b      	ldrb	r3, [r3, #4]
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f000 ffd1 	bl	800d070 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	701a      	strb	r2, [r3, #0]
      break;
 800c0da:	e0a5      	b.n	800c228 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f000 f965 	bl	800c3b4 <USBH_Get_CfgDesc>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c0ee:	7bbb      	ldrb	r3, [r7, #14]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d103      	bne.n	800c0fc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2205      	movs	r2, #5
 800c0f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c0fa:	e097      	b.n	800c22c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c0fc:	7bbb      	ldrb	r3, [r7, #14]
 800c0fe:	2b03      	cmp	r3, #3
 800c100:	f040 8094 	bne.w	800c22c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c10a:	3301      	adds	r3, #1
 800c10c:	b2da      	uxtb	r2, r3
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c11a:	2b03      	cmp	r3, #3
 800c11c:	d903      	bls.n	800c126 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	220d      	movs	r2, #13
 800c122:	701a      	strb	r2, [r3, #0]
      break;
 800c124:	e082      	b.n	800c22c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	795b      	ldrb	r3, [r3, #5]
 800c12a:	4619      	mov	r1, r3
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 ff9f 	bl	800d070 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	791b      	ldrb	r3, [r3, #4]
 800c136:	4619      	mov	r1, r3
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f000 ff99 	bl	800d070 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2200      	movs	r2, #0
 800c142:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2200      	movs	r2, #0
 800c148:	701a      	strb	r2, [r3, #0]
      break;
 800c14a:	e06f      	b.n	800c22c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c152:	2b00      	cmp	r3, #0
 800c154:	d019      	beq.n	800c18a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c162:	23ff      	movs	r3, #255	; 0xff
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f000 f949 	bl	800c3fc <USBH_Get_StringDesc>
 800c16a:	4603      	mov	r3, r0
 800c16c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c16e:	7bbb      	ldrb	r3, [r7, #14]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d103      	bne.n	800c17c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2206      	movs	r2, #6
 800c178:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c17a:	e059      	b.n	800c230 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c17c:	7bbb      	ldrb	r3, [r7, #14]
 800c17e:	2b03      	cmp	r3, #3
 800c180:	d156      	bne.n	800c230 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2206      	movs	r2, #6
 800c186:	705a      	strb	r2, [r3, #1]
      break;
 800c188:	e052      	b.n	800c230 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2206      	movs	r2, #6
 800c18e:	705a      	strb	r2, [r3, #1]
      break;
 800c190:	e04e      	b.n	800c230 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d019      	beq.n	800c1d0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c1a8:	23ff      	movs	r3, #255	; 0xff
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f000 f926 	bl	800c3fc <USBH_Get_StringDesc>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c1b4:	7bbb      	ldrb	r3, [r7, #14]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d103      	bne.n	800c1c2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2207      	movs	r2, #7
 800c1be:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c1c0:	e038      	b.n	800c234 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c1c2:	7bbb      	ldrb	r3, [r7, #14]
 800c1c4:	2b03      	cmp	r3, #3
 800c1c6:	d135      	bne.n	800c234 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2207      	movs	r2, #7
 800c1cc:	705a      	strb	r2, [r3, #1]
      break;
 800c1ce:	e031      	b.n	800c234 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2207      	movs	r2, #7
 800c1d4:	705a      	strb	r2, [r3, #1]
      break;
 800c1d6:	e02d      	b.n	800c234 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d017      	beq.n	800c212 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c1ee:	23ff      	movs	r3, #255	; 0xff
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 f903 	bl	800c3fc <USBH_Get_StringDesc>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c1fa:	7bbb      	ldrb	r3, [r7, #14]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d102      	bne.n	800c206 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c200:	2300      	movs	r3, #0
 800c202:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c204:	e018      	b.n	800c238 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c206:	7bbb      	ldrb	r3, [r7, #14]
 800c208:	2b03      	cmp	r3, #3
 800c20a:	d115      	bne.n	800c238 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800c20c:	2300      	movs	r3, #0
 800c20e:	73fb      	strb	r3, [r7, #15]
      break;
 800c210:	e012      	b.n	800c238 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800c212:	2300      	movs	r3, #0
 800c214:	73fb      	strb	r3, [r7, #15]
      break;
 800c216:	e00f      	b.n	800c238 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800c218:	bf00      	nop
 800c21a:	e00e      	b.n	800c23a <USBH_HandleEnum+0x3be>
      break;
 800c21c:	bf00      	nop
 800c21e:	e00c      	b.n	800c23a <USBH_HandleEnum+0x3be>
      break;
 800c220:	bf00      	nop
 800c222:	e00a      	b.n	800c23a <USBH_HandleEnum+0x3be>
      break;
 800c224:	bf00      	nop
 800c226:	e008      	b.n	800c23a <USBH_HandleEnum+0x3be>
      break;
 800c228:	bf00      	nop
 800c22a:	e006      	b.n	800c23a <USBH_HandleEnum+0x3be>
      break;
 800c22c:	bf00      	nop
 800c22e:	e004      	b.n	800c23a <USBH_HandleEnum+0x3be>
      break;
 800c230:	bf00      	nop
 800c232:	e002      	b.n	800c23a <USBH_HandleEnum+0x3be>
      break;
 800c234:	bf00      	nop
 800c236:	e000      	b.n	800c23a <USBH_HandleEnum+0x3be>
      break;
 800c238:	bf00      	nop
  }
  return Status;
 800c23a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3710      	adds	r7, #16
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c244:	b480      	push	{r7}
 800c246:	b083      	sub	sp, #12
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	683a      	ldr	r2, [r7, #0]
 800c252:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c256:	bf00      	nop
 800c258:	370c      	adds	r7, #12
 800c25a:	46bd      	mov	sp, r7
 800c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c260:	4770      	bx	lr

0800c262 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c262:	b580      	push	{r7, lr}
 800c264:	b082      	sub	sp, #8
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c270:	1c5a      	adds	r2, r3, #1
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 f804 	bl	800c286 <USBH_HandleSof>
}
 800c27e:	bf00      	nop
 800c280:	3708      	adds	r7, #8
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}

0800c286 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c286:	b580      	push	{r7, lr}
 800c288:	b082      	sub	sp, #8
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	b2db      	uxtb	r3, r3
 800c294:	2b0b      	cmp	r3, #11
 800c296:	d10a      	bne.n	800c2ae <USBH_HandleSof+0x28>
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d005      	beq.n	800c2ae <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c2a8:	699b      	ldr	r3, [r3, #24]
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	4798      	blx	r3
  }
}
 800c2ae:	bf00      	nop
 800c2b0:	3708      	adds	r7, #8
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}

0800c2b6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c2b6:	b480      	push	{r7}
 800c2b8:	b083      	sub	sp, #12
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2201      	movs	r2, #1
 800c2c2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800c2c6:	bf00      	nop
}
 800c2c8:	370c      	adds	r7, #12
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d0:	4770      	bx	lr

0800c2d2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c2d2:	b480      	push	{r7}
 800c2d4:	b083      	sub	sp, #12
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c2e2:	bf00      	nop
}
 800c2e4:	370c      	adds	r7, #12
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr

0800c2ee <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c2ee:	b480      	push	{r7}
 800c2f0:	b083      	sub	sp, #12
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2201      	movs	r2, #1
 800c2fa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2200      	movs	r2, #0
 800c302:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2200      	movs	r2, #0
 800c30a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c30e:	2300      	movs	r3, #0
}
 800c310:	4618      	mov	r0, r3
 800c312:	370c      	adds	r7, #12
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr

0800c31c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b082      	sub	sp, #8
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2201      	movs	r2, #1
 800c328:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2200      	movs	r2, #0
 800c330:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2200      	movs	r2, #0
 800c338:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f004 fd74 	bl	8010e2a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	791b      	ldrb	r3, [r3, #4]
 800c346:	4619      	mov	r1, r3
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f000 fe91 	bl	800d070 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	795b      	ldrb	r3, [r3, #5]
 800c352:	4619      	mov	r1, r3
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f000 fe8b 	bl	800d070 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c35a:	2300      	movs	r3, #0
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3708      	adds	r7, #8
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b086      	sub	sp, #24
 800c368:	af02      	add	r7, sp, #8
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	460b      	mov	r3, r1
 800c36e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c376:	78fb      	ldrb	r3, [r7, #3]
 800c378:	b29b      	uxth	r3, r3
 800c37a:	9300      	str	r3, [sp, #0]
 800c37c:	4613      	mov	r3, r2
 800c37e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c382:	2100      	movs	r1, #0
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f000 f864 	bl	800c452 <USBH_GetDescriptor>
 800c38a:	4603      	mov	r3, r0
 800c38c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800c38e:	7bfb      	ldrb	r3, [r7, #15]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d10a      	bne.n	800c3aa <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c3a0:	78fa      	ldrb	r2, [r7, #3]
 800c3a2:	b292      	uxth	r2, r2
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	f000 f918 	bl	800c5da <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c3aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3710      	adds	r7, #16
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b086      	sub	sp, #24
 800c3b8:	af02      	add	r7, sp, #8
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	460b      	mov	r3, r1
 800c3be:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	331c      	adds	r3, #28
 800c3c4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c3c6:	887b      	ldrh	r3, [r7, #2]
 800c3c8:	9300      	str	r3, [sp, #0]
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c3d0:	2100      	movs	r1, #0
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f000 f83d 	bl	800c452 <USBH_GetDescriptor>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800c3dc:	7bfb      	ldrb	r3, [r7, #15]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d107      	bne.n	800c3f2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800c3e2:	887b      	ldrh	r3, [r7, #2]
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	68b9      	ldr	r1, [r7, #8]
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f000 f987 	bl	800c6fc <USBH_ParseCfgDesc>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c3f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3710      	adds	r7, #16
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b088      	sub	sp, #32
 800c400:	af02      	add	r7, sp, #8
 800c402:	60f8      	str	r0, [r7, #12]
 800c404:	607a      	str	r2, [r7, #4]
 800c406:	461a      	mov	r2, r3
 800c408:	460b      	mov	r3, r1
 800c40a:	72fb      	strb	r3, [r7, #11]
 800c40c:	4613      	mov	r3, r2
 800c40e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800c410:	7afb      	ldrb	r3, [r7, #11]
 800c412:	b29b      	uxth	r3, r3
 800c414:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c418:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c420:	893b      	ldrh	r3, [r7, #8]
 800c422:	9300      	str	r3, [sp, #0]
 800c424:	460b      	mov	r3, r1
 800c426:	2100      	movs	r1, #0
 800c428:	68f8      	ldr	r0, [r7, #12]
 800c42a:	f000 f812 	bl	800c452 <USBH_GetDescriptor>
 800c42e:	4603      	mov	r3, r0
 800c430:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c432:	7dfb      	ldrb	r3, [r7, #23]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d107      	bne.n	800c448 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c43e:	893a      	ldrh	r2, [r7, #8]
 800c440:	6879      	ldr	r1, [r7, #4]
 800c442:	4618      	mov	r0, r3
 800c444:	f000 fb24 	bl	800ca90 <USBH_ParseStringDesc>
  }

  return status;
 800c448:	7dfb      	ldrb	r3, [r7, #23]
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3718      	adds	r7, #24
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}

0800c452 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c452:	b580      	push	{r7, lr}
 800c454:	b084      	sub	sp, #16
 800c456:	af00      	add	r7, sp, #0
 800c458:	60f8      	str	r0, [r7, #12]
 800c45a:	607b      	str	r3, [r7, #4]
 800c45c:	460b      	mov	r3, r1
 800c45e:	72fb      	strb	r3, [r7, #11]
 800c460:	4613      	mov	r3, r2
 800c462:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	789b      	ldrb	r3, [r3, #2]
 800c468:	2b01      	cmp	r3, #1
 800c46a:	d11c      	bne.n	800c4a6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c46c:	7afb      	ldrb	r3, [r7, #11]
 800c46e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c472:	b2da      	uxtb	r2, r3
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2206      	movs	r2, #6
 800c47c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	893a      	ldrh	r2, [r7, #8]
 800c482:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c484:	893b      	ldrh	r3, [r7, #8]
 800c486:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c48a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c48e:	d104      	bne.n	800c49a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f240 4209 	movw	r2, #1033	; 0x409
 800c496:	829a      	strh	r2, [r3, #20]
 800c498:	e002      	b.n	800c4a0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2200      	movs	r2, #0
 800c49e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	8b3a      	ldrh	r2, [r7, #24]
 800c4a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c4a6:	8b3b      	ldrh	r3, [r7, #24]
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	6879      	ldr	r1, [r7, #4]
 800c4ac:	68f8      	ldr	r0, [r7, #12]
 800c4ae:	f000 fb3d 	bl	800cb2c <USBH_CtlReq>
 800c4b2:	4603      	mov	r3, r0
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3710      	adds	r7, #16
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b082      	sub	sp, #8
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	789b      	ldrb	r3, [r3, #2]
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d10f      	bne.n	800c4f0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2205      	movs	r2, #5
 800c4da:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c4dc:	78fb      	ldrb	r3, [r7, #3]
 800c4de:	b29a      	uxth	r2, r3
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	2100      	movs	r1, #0
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f000 fb19 	bl	800cb2c <USBH_CtlReq>
 800c4fa:	4603      	mov	r3, r0
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3708      	adds	r7, #8
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b082      	sub	sp, #8
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	460b      	mov	r3, r1
 800c50e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	789b      	ldrb	r3, [r3, #2]
 800c514:	2b01      	cmp	r3, #1
 800c516:	d10e      	bne.n	800c536 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2200      	movs	r2, #0
 800c51c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2209      	movs	r2, #9
 800c522:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	887a      	ldrh	r2, [r7, #2]
 800c528:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2200      	movs	r2, #0
 800c52e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2200      	movs	r2, #0
 800c534:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c536:	2200      	movs	r2, #0
 800c538:	2100      	movs	r1, #0
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f000 faf6 	bl	800cb2c <USBH_CtlReq>
 800c540:	4603      	mov	r3, r0
}
 800c542:	4618      	mov	r0, r3
 800c544:	3708      	adds	r7, #8
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}

0800c54a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c54a:	b580      	push	{r7, lr}
 800c54c:	b082      	sub	sp, #8
 800c54e:	af00      	add	r7, sp, #0
 800c550:	6078      	str	r0, [r7, #4]
 800c552:	460b      	mov	r3, r1
 800c554:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	789b      	ldrb	r3, [r3, #2]
 800c55a:	2b01      	cmp	r3, #1
 800c55c:	d10f      	bne.n	800c57e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2200      	movs	r2, #0
 800c562:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2203      	movs	r2, #3
 800c568:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c56a:	78fb      	ldrb	r3, [r7, #3]
 800c56c:	b29a      	uxth	r2, r3
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2200      	movs	r2, #0
 800c576:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2200      	movs	r2, #0
 800c57c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c57e:	2200      	movs	r2, #0
 800c580:	2100      	movs	r1, #0
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f000 fad2 	bl	800cb2c <USBH_CtlReq>
 800c588:	4603      	mov	r3, r0
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3708      	adds	r7, #8
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}

0800c592 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c592:	b580      	push	{r7, lr}
 800c594:	b082      	sub	sp, #8
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
 800c59a:	460b      	mov	r3, r1
 800c59c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	789b      	ldrb	r3, [r3, #2]
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	d10f      	bne.n	800c5c6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2202      	movs	r2, #2
 800c5aa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c5b8:	78fb      	ldrb	r3, [r7, #3]
 800c5ba:	b29a      	uxth	r2, r3
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	2100      	movs	r1, #0
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f000 faae 	bl	800cb2c <USBH_CtlReq>
 800c5d0:	4603      	mov	r3, r0
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3708      	adds	r7, #8
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}

0800c5da <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c5da:	b480      	push	{r7}
 800c5dc:	b085      	sub	sp, #20
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	60f8      	str	r0, [r7, #12]
 800c5e2:	60b9      	str	r1, [r7, #8]
 800c5e4:	4613      	mov	r3, r2
 800c5e6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	781a      	ldrb	r2, [r3, #0]
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	785a      	ldrb	r2, [r3, #1]
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	3302      	adds	r3, #2
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	b29a      	uxth	r2, r3
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	3303      	adds	r3, #3
 800c604:	781b      	ldrb	r3, [r3, #0]
 800c606:	b29b      	uxth	r3, r3
 800c608:	021b      	lsls	r3, r3, #8
 800c60a:	b29b      	uxth	r3, r3
 800c60c:	4313      	orrs	r3, r2
 800c60e:	b29a      	uxth	r2, r3
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	791a      	ldrb	r2, [r3, #4]
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	795a      	ldrb	r2, [r3, #5]
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	799a      	ldrb	r2, [r3, #6]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	79da      	ldrb	r2, [r3, #7]
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	79db      	ldrb	r3, [r3, #7]
 800c638:	2b20      	cmp	r3, #32
 800c63a:	dc11      	bgt.n	800c660 <USBH_ParseDevDesc+0x86>
 800c63c:	2b08      	cmp	r3, #8
 800c63e:	db16      	blt.n	800c66e <USBH_ParseDevDesc+0x94>
 800c640:	3b08      	subs	r3, #8
 800c642:	2201      	movs	r2, #1
 800c644:	fa02 f303 	lsl.w	r3, r2, r3
 800c648:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800c64c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c650:	2b00      	cmp	r3, #0
 800c652:	bf14      	ite	ne
 800c654:	2301      	movne	r3, #1
 800c656:	2300      	moveq	r3, #0
 800c658:	b2db      	uxtb	r3, r3
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d102      	bne.n	800c664 <USBH_ParseDevDesc+0x8a>
 800c65e:	e006      	b.n	800c66e <USBH_ParseDevDesc+0x94>
 800c660:	2b40      	cmp	r3, #64	; 0x40
 800c662:	d104      	bne.n	800c66e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	79da      	ldrb	r2, [r3, #7]
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	71da      	strb	r2, [r3, #7]
      break;
 800c66c:	e003      	b.n	800c676 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2240      	movs	r2, #64	; 0x40
 800c672:	71da      	strb	r2, [r3, #7]
      break;
 800c674:	bf00      	nop
  }

  if (length > 8U)
 800c676:	88fb      	ldrh	r3, [r7, #6]
 800c678:	2b08      	cmp	r3, #8
 800c67a:	d939      	bls.n	800c6f0 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	3308      	adds	r3, #8
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	b29a      	uxth	r2, r3
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	3309      	adds	r3, #9
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	b29b      	uxth	r3, r3
 800c68c:	021b      	lsls	r3, r3, #8
 800c68e:	b29b      	uxth	r3, r3
 800c690:	4313      	orrs	r3, r2
 800c692:	b29a      	uxth	r2, r3
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	330a      	adds	r3, #10
 800c69c:	781b      	ldrb	r3, [r3, #0]
 800c69e:	b29a      	uxth	r2, r3
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	330b      	adds	r3, #11
 800c6a4:	781b      	ldrb	r3, [r3, #0]
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	021b      	lsls	r3, r3, #8
 800c6aa:	b29b      	uxth	r3, r3
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	b29a      	uxth	r2, r3
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	330c      	adds	r3, #12
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	b29a      	uxth	r2, r3
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	330d      	adds	r3, #13
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	021b      	lsls	r3, r3, #8
 800c6c6:	b29b      	uxth	r3, r3
 800c6c8:	4313      	orrs	r3, r2
 800c6ca:	b29a      	uxth	r2, r3
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	7b9a      	ldrb	r2, [r3, #14]
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	7bda      	ldrb	r2, [r3, #15]
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	7c1a      	ldrb	r2, [r3, #16]
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	7c5a      	ldrb	r2, [r3, #17]
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	745a      	strb	r2, [r3, #17]
  }
}
 800c6f0:	bf00      	nop
 800c6f2:	3714      	adds	r7, #20
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr

0800c6fc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b08c      	sub	sp, #48	; 0x30
 800c700:	af00      	add	r7, sp, #0
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	60b9      	str	r1, [r7, #8]
 800c706:	4613      	mov	r3, r2
 800c708:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c710:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c712:	2300      	movs	r3, #0
 800c714:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c71c:	2300      	movs	r3, #0
 800c71e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800c722:	2300      	movs	r3, #0
 800c724:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	781a      	ldrb	r2, [r3, #0]
 800c730:	6a3b      	ldr	r3, [r7, #32]
 800c732:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	785a      	ldrb	r2, [r3, #1]
 800c738:	6a3b      	ldr	r3, [r7, #32]
 800c73a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	3302      	adds	r3, #2
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	b29a      	uxth	r2, r3
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	3303      	adds	r3, #3
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	b29b      	uxth	r3, r3
 800c74c:	021b      	lsls	r3, r3, #8
 800c74e:	b29b      	uxth	r3, r3
 800c750:	4313      	orrs	r3, r2
 800c752:	b29b      	uxth	r3, r3
 800c754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c758:	bf28      	it	cs
 800c75a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800c75e:	b29a      	uxth	r2, r3
 800c760:	6a3b      	ldr	r3, [r7, #32]
 800c762:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	791a      	ldrb	r2, [r3, #4]
 800c768:	6a3b      	ldr	r3, [r7, #32]
 800c76a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	795a      	ldrb	r2, [r3, #5]
 800c770:	6a3b      	ldr	r3, [r7, #32]
 800c772:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	799a      	ldrb	r2, [r3, #6]
 800c778:	6a3b      	ldr	r3, [r7, #32]
 800c77a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	79da      	ldrb	r2, [r3, #7]
 800c780:	6a3b      	ldr	r3, [r7, #32]
 800c782:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	7a1a      	ldrb	r2, [r3, #8]
 800c788:	6a3b      	ldr	r3, [r7, #32]
 800c78a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800c78c:	6a3b      	ldr	r3, [r7, #32]
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	2b09      	cmp	r3, #9
 800c792:	d002      	beq.n	800c79a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c794:	6a3b      	ldr	r3, [r7, #32]
 800c796:	2209      	movs	r2, #9
 800c798:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c79a:	88fb      	ldrh	r3, [r7, #6]
 800c79c:	2b09      	cmp	r3, #9
 800c79e:	f240 809d 	bls.w	800c8dc <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800c7a2:	2309      	movs	r3, #9
 800c7a4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c7aa:	e081      	b.n	800c8b0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c7ac:	f107 0316 	add.w	r3, r7, #22
 800c7b0:	4619      	mov	r1, r3
 800c7b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7b4:	f000 f99f 	bl	800caf6 <USBH_GetNextDesc>
 800c7b8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7bc:	785b      	ldrb	r3, [r3, #1]
 800c7be:	2b04      	cmp	r3, #4
 800c7c0:	d176      	bne.n	800c8b0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	2b09      	cmp	r3, #9
 800c7c8:	d002      	beq.n	800c7d0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7cc:	2209      	movs	r2, #9
 800c7ce:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c7d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7d4:	221a      	movs	r2, #26
 800c7d6:	fb02 f303 	mul.w	r3, r2, r3
 800c7da:	3308      	adds	r3, #8
 800c7dc:	6a3a      	ldr	r2, [r7, #32]
 800c7de:	4413      	add	r3, r2
 800c7e0:	3302      	adds	r3, #2
 800c7e2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c7e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c7e6:	69f8      	ldr	r0, [r7, #28]
 800c7e8:	f000 f87e 	bl	800c8e8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c7f6:	e043      	b.n	800c880 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c7f8:	f107 0316 	add.w	r3, r7, #22
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c800:	f000 f979 	bl	800caf6 <USBH_GetNextDesc>
 800c804:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c808:	785b      	ldrb	r3, [r3, #1]
 800c80a:	2b05      	cmp	r3, #5
 800c80c:	d138      	bne.n	800c880 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800c80e:	69fb      	ldr	r3, [r7, #28]
 800c810:	795b      	ldrb	r3, [r3, #5]
 800c812:	2b01      	cmp	r3, #1
 800c814:	d10f      	bne.n	800c836 <USBH_ParseCfgDesc+0x13a>
 800c816:	69fb      	ldr	r3, [r7, #28]
 800c818:	799b      	ldrb	r3, [r3, #6]
 800c81a:	2b02      	cmp	r3, #2
 800c81c:	d10b      	bne.n	800c836 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	79db      	ldrb	r3, [r3, #7]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d10f      	bne.n	800c846 <USBH_ParseCfgDesc+0x14a>
 800c826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c828:	781b      	ldrb	r3, [r3, #0]
 800c82a:	2b09      	cmp	r3, #9
 800c82c:	d00b      	beq.n	800c846 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800c82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c830:	2209      	movs	r2, #9
 800c832:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c834:	e007      	b.n	800c846 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800c836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c838:	781b      	ldrb	r3, [r3, #0]
 800c83a:	2b07      	cmp	r3, #7
 800c83c:	d004      	beq.n	800c848 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c840:	2207      	movs	r2, #7
 800c842:	701a      	strb	r2, [r3, #0]
 800c844:	e000      	b.n	800c848 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c846:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c84c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c850:	3201      	adds	r2, #1
 800c852:	00d2      	lsls	r2, r2, #3
 800c854:	211a      	movs	r1, #26
 800c856:	fb01 f303 	mul.w	r3, r1, r3
 800c85a:	4413      	add	r3, r2
 800c85c:	3308      	adds	r3, #8
 800c85e:	6a3a      	ldr	r2, [r7, #32]
 800c860:	4413      	add	r3, r2
 800c862:	3304      	adds	r3, #4
 800c864:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c868:	69b9      	ldr	r1, [r7, #24]
 800c86a:	68f8      	ldr	r0, [r7, #12]
 800c86c:	f000 f86b 	bl	800c946 <USBH_ParseEPDesc>
 800c870:	4603      	mov	r3, r0
 800c872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800c876:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c87a:	3301      	adds	r3, #1
 800c87c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c880:	69fb      	ldr	r3, [r7, #28]
 800c882:	791b      	ldrb	r3, [r3, #4]
 800c884:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c888:	429a      	cmp	r2, r3
 800c88a:	d204      	bcs.n	800c896 <USBH_ParseCfgDesc+0x19a>
 800c88c:	6a3b      	ldr	r3, [r7, #32]
 800c88e:	885a      	ldrh	r2, [r3, #2]
 800c890:	8afb      	ldrh	r3, [r7, #22]
 800c892:	429a      	cmp	r2, r3
 800c894:	d8b0      	bhi.n	800c7f8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c896:	69fb      	ldr	r3, [r7, #28]
 800c898:	791b      	ldrb	r3, [r3, #4]
 800c89a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d201      	bcs.n	800c8a6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800c8a2:	2303      	movs	r3, #3
 800c8a4:	e01c      	b.n	800c8e0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800c8a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c8b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d805      	bhi.n	800c8c4 <USBH_ParseCfgDesc+0x1c8>
 800c8b8:	6a3b      	ldr	r3, [r7, #32]
 800c8ba:	885a      	ldrh	r2, [r3, #2]
 800c8bc:	8afb      	ldrh	r3, [r7, #22]
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	f63f af74 	bhi.w	800c7ac <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c8c4:	6a3b      	ldr	r3, [r7, #32]
 800c8c6:	791b      	ldrb	r3, [r3, #4]
 800c8c8:	2b02      	cmp	r3, #2
 800c8ca:	bf28      	it	cs
 800c8cc:	2302      	movcs	r3, #2
 800c8ce:	b2db      	uxtb	r3, r3
 800c8d0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d201      	bcs.n	800c8dc <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800c8d8:	2303      	movs	r3, #3
 800c8da:	e001      	b.n	800c8e0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800c8dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3730      	adds	r7, #48	; 0x30
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b083      	sub	sp, #12
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	781a      	ldrb	r2, [r3, #0]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	785a      	ldrb	r2, [r3, #1]
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	789a      	ldrb	r2, [r3, #2]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	78da      	ldrb	r2, [r3, #3]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	791a      	ldrb	r2, [r3, #4]
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	795a      	ldrb	r2, [r3, #5]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	799a      	ldrb	r2, [r3, #6]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	79da      	ldrb	r2, [r3, #7]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	7a1a      	ldrb	r2, [r3, #8]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	721a      	strb	r2, [r3, #8]
}
 800c93a:	bf00      	nop
 800c93c:	370c      	adds	r7, #12
 800c93e:	46bd      	mov	sp, r7
 800c940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c944:	4770      	bx	lr

0800c946 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800c946:	b480      	push	{r7}
 800c948:	b087      	sub	sp, #28
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	60f8      	str	r0, [r7, #12]
 800c94e:	60b9      	str	r1, [r7, #8]
 800c950:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c952:	2300      	movs	r3, #0
 800c954:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	781a      	ldrb	r2, [r3, #0]
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	785a      	ldrb	r2, [r3, #1]
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	789a      	ldrb	r2, [r3, #2]
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	78da      	ldrb	r2, [r3, #3]
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	3304      	adds	r3, #4
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	b29a      	uxth	r2, r3
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	3305      	adds	r3, #5
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	b29b      	uxth	r3, r3
 800c986:	021b      	lsls	r3, r3, #8
 800c988:	b29b      	uxth	r3, r3
 800c98a:	4313      	orrs	r3, r2
 800c98c:	b29a      	uxth	r2, r3
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	799a      	ldrb	r2, [r3, #6]
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	889b      	ldrh	r3, [r3, #4]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d102      	bne.n	800c9a8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800c9a2:	2303      	movs	r3, #3
 800c9a4:	75fb      	strb	r3, [r7, #23]
 800c9a6:	e033      	b.n	800ca10 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	889b      	ldrh	r3, [r3, #4]
 800c9ac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c9b0:	f023 0307 	bic.w	r3, r3, #7
 800c9b4:	b29a      	uxth	r2, r3
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	889b      	ldrh	r3, [r3, #4]
 800c9be:	b21a      	sxth	r2, r3
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	3304      	adds	r3, #4
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	b299      	uxth	r1, r3
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	3305      	adds	r3, #5
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	021b      	lsls	r3, r3, #8
 800c9d2:	b29b      	uxth	r3, r3
 800c9d4:	430b      	orrs	r3, r1
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d110      	bne.n	800ca02 <USBH_ParseEPDesc+0xbc>
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	3304      	adds	r3, #4
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	b299      	uxth	r1, r3
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	3305      	adds	r3, #5
 800c9ec:	781b      	ldrb	r3, [r3, #0]
 800c9ee:	b29b      	uxth	r3, r3
 800c9f0:	021b      	lsls	r3, r3, #8
 800c9f2:	b29b      	uxth	r3, r3
 800c9f4:	430b      	orrs	r3, r1
 800c9f6:	b29b      	uxth	r3, r3
 800c9f8:	b21b      	sxth	r3, r3
 800c9fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c9fe:	b21b      	sxth	r3, r3
 800ca00:	e001      	b.n	800ca06 <USBH_ParseEPDesc+0xc0>
 800ca02:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca06:	4313      	orrs	r3, r2
 800ca08:	b21b      	sxth	r3, r3
 800ca0a:	b29a      	uxth	r2, r3
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d116      	bne.n	800ca48 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	78db      	ldrb	r3, [r3, #3]
 800ca1e:	f003 0303 	and.w	r3, r3, #3
 800ca22:	2b01      	cmp	r3, #1
 800ca24:	d005      	beq.n	800ca32 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	78db      	ldrb	r3, [r3, #3]
 800ca2a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ca2e:	2b03      	cmp	r3, #3
 800ca30:	d127      	bne.n	800ca82 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	799b      	ldrb	r3, [r3, #6]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d003      	beq.n	800ca42 <USBH_ParseEPDesc+0xfc>
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	799b      	ldrb	r3, [r3, #6]
 800ca3e:	2b10      	cmp	r3, #16
 800ca40:	d91f      	bls.n	800ca82 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800ca42:	2303      	movs	r3, #3
 800ca44:	75fb      	strb	r3, [r7, #23]
 800ca46:	e01c      	b.n	800ca82 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	78db      	ldrb	r3, [r3, #3]
 800ca4c:	f003 0303 	and.w	r3, r3, #3
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d10a      	bne.n	800ca6a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	799b      	ldrb	r3, [r3, #6]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d003      	beq.n	800ca64 <USBH_ParseEPDesc+0x11e>
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	799b      	ldrb	r3, [r3, #6]
 800ca60:	2b10      	cmp	r3, #16
 800ca62:	d90e      	bls.n	800ca82 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800ca64:	2303      	movs	r3, #3
 800ca66:	75fb      	strb	r3, [r7, #23]
 800ca68:	e00b      	b.n	800ca82 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	78db      	ldrb	r3, [r3, #3]
 800ca6e:	f003 0303 	and.w	r3, r3, #3
 800ca72:	2b03      	cmp	r3, #3
 800ca74:	d105      	bne.n	800ca82 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	799b      	ldrb	r3, [r3, #6]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d101      	bne.n	800ca82 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800ca7e:	2303      	movs	r3, #3
 800ca80:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800ca82:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	371c      	adds	r7, #28
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr

0800ca90 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b087      	sub	sp, #28
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	60f8      	str	r0, [r7, #12]
 800ca98:	60b9      	str	r1, [r7, #8]
 800ca9a:	4613      	mov	r3, r2
 800ca9c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	3301      	adds	r3, #1
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	2b03      	cmp	r3, #3
 800caa6:	d120      	bne.n	800caea <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	1e9a      	subs	r2, r3, #2
 800caae:	88fb      	ldrh	r3, [r7, #6]
 800cab0:	4293      	cmp	r3, r2
 800cab2:	bf28      	it	cs
 800cab4:	4613      	movcs	r3, r2
 800cab6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	3302      	adds	r3, #2
 800cabc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800cabe:	2300      	movs	r3, #0
 800cac0:	82fb      	strh	r3, [r7, #22]
 800cac2:	e00b      	b.n	800cadc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800cac4:	8afb      	ldrh	r3, [r7, #22]
 800cac6:	68fa      	ldr	r2, [r7, #12]
 800cac8:	4413      	add	r3, r2
 800caca:	781a      	ldrb	r2, [r3, #0]
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	701a      	strb	r2, [r3, #0]
      pdest++;
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	3301      	adds	r3, #1
 800cad4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800cad6:	8afb      	ldrh	r3, [r7, #22]
 800cad8:	3302      	adds	r3, #2
 800cada:	82fb      	strh	r3, [r7, #22]
 800cadc:	8afa      	ldrh	r2, [r7, #22]
 800cade:	8abb      	ldrh	r3, [r7, #20]
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d3ef      	bcc.n	800cac4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	2200      	movs	r2, #0
 800cae8:	701a      	strb	r2, [r3, #0]
  }
}
 800caea:	bf00      	nop
 800caec:	371c      	adds	r7, #28
 800caee:	46bd      	mov	sp, r7
 800caf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf4:	4770      	bx	lr

0800caf6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800caf6:	b480      	push	{r7}
 800caf8:	b085      	sub	sp, #20
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	6078      	str	r0, [r7, #4]
 800cafe:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	881a      	ldrh	r2, [r3, #0]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	4413      	add	r3, r2
 800cb0c:	b29a      	uxth	r2, r3
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	4413      	add	r3, r2
 800cb1c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cb1e:	68fb      	ldr	r3, [r7, #12]
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3714      	adds	r7, #20
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr

0800cb2c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b086      	sub	sp, #24
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	60f8      	str	r0, [r7, #12]
 800cb34:	60b9      	str	r1, [r7, #8]
 800cb36:	4613      	mov	r3, r2
 800cb38:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	789b      	ldrb	r3, [r3, #2]
 800cb42:	2b01      	cmp	r3, #1
 800cb44:	d002      	beq.n	800cb4c <USBH_CtlReq+0x20>
 800cb46:	2b02      	cmp	r3, #2
 800cb48:	d00f      	beq.n	800cb6a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800cb4a:	e027      	b.n	800cb9c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	68ba      	ldr	r2, [r7, #8]
 800cb50:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	88fa      	ldrh	r2, [r7, #6]
 800cb56:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2202      	movs	r2, #2
 800cb62:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800cb64:	2301      	movs	r3, #1
 800cb66:	75fb      	strb	r3, [r7, #23]
      break;
 800cb68:	e018      	b.n	800cb9c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800cb6a:	68f8      	ldr	r0, [r7, #12]
 800cb6c:	f000 f81c 	bl	800cba8 <USBH_HandleControl>
 800cb70:	4603      	mov	r3, r0
 800cb72:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800cb74:	7dfb      	ldrb	r3, [r7, #23]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d002      	beq.n	800cb80 <USBH_CtlReq+0x54>
 800cb7a:	7dfb      	ldrb	r3, [r7, #23]
 800cb7c:	2b03      	cmp	r3, #3
 800cb7e:	d106      	bne.n	800cb8e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2201      	movs	r2, #1
 800cb84:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2200      	movs	r2, #0
 800cb8a:	761a      	strb	r2, [r3, #24]
      break;
 800cb8c:	e005      	b.n	800cb9a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800cb8e:	7dfb      	ldrb	r3, [r7, #23]
 800cb90:	2b02      	cmp	r3, #2
 800cb92:	d102      	bne.n	800cb9a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	2201      	movs	r2, #1
 800cb98:	709a      	strb	r2, [r3, #2]
      break;
 800cb9a:	bf00      	nop
  }
  return status;
 800cb9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3718      	adds	r7, #24
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
	...

0800cba8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b086      	sub	sp, #24
 800cbac:	af02      	add	r7, sp, #8
 800cbae:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	7e1b      	ldrb	r3, [r3, #24]
 800cbbc:	3b01      	subs	r3, #1
 800cbbe:	2b0a      	cmp	r3, #10
 800cbc0:	f200 8156 	bhi.w	800ce70 <USBH_HandleControl+0x2c8>
 800cbc4:	a201      	add	r2, pc, #4	; (adr r2, 800cbcc <USBH_HandleControl+0x24>)
 800cbc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbca:	bf00      	nop
 800cbcc:	0800cbf9 	.word	0x0800cbf9
 800cbd0:	0800cc13 	.word	0x0800cc13
 800cbd4:	0800cc7d 	.word	0x0800cc7d
 800cbd8:	0800cca3 	.word	0x0800cca3
 800cbdc:	0800ccdb 	.word	0x0800ccdb
 800cbe0:	0800cd05 	.word	0x0800cd05
 800cbe4:	0800cd57 	.word	0x0800cd57
 800cbe8:	0800cd79 	.word	0x0800cd79
 800cbec:	0800cdb5 	.word	0x0800cdb5
 800cbf0:	0800cddb 	.word	0x0800cddb
 800cbf4:	0800ce19 	.word	0x0800ce19
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f103 0110 	add.w	r1, r3, #16
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	795b      	ldrb	r3, [r3, #5]
 800cc02:	461a      	mov	r2, r3
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f000 f943 	bl	800ce90 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2202      	movs	r2, #2
 800cc0e:	761a      	strb	r2, [r3, #24]
      break;
 800cc10:	e139      	b.n	800ce86 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	795b      	ldrb	r3, [r3, #5]
 800cc16:	4619      	mov	r1, r3
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f004 f9f5 	bl	8011008 <USBH_LL_GetURBState>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800cc22:	7bbb      	ldrb	r3, [r7, #14]
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d11e      	bne.n	800cc66 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	7c1b      	ldrb	r3, [r3, #16]
 800cc2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cc30:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	8adb      	ldrh	r3, [r3, #22]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d00a      	beq.n	800cc50 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800cc3a:	7b7b      	ldrb	r3, [r7, #13]
 800cc3c:	2b80      	cmp	r3, #128	; 0x80
 800cc3e:	d103      	bne.n	800cc48 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2203      	movs	r2, #3
 800cc44:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cc46:	e115      	b.n	800ce74 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2205      	movs	r2, #5
 800cc4c:	761a      	strb	r2, [r3, #24]
      break;
 800cc4e:	e111      	b.n	800ce74 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800cc50:	7b7b      	ldrb	r3, [r7, #13]
 800cc52:	2b80      	cmp	r3, #128	; 0x80
 800cc54:	d103      	bne.n	800cc5e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2209      	movs	r2, #9
 800cc5a:	761a      	strb	r2, [r3, #24]
      break;
 800cc5c:	e10a      	b.n	800ce74 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2207      	movs	r2, #7
 800cc62:	761a      	strb	r2, [r3, #24]
      break;
 800cc64:	e106      	b.n	800ce74 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800cc66:	7bbb      	ldrb	r3, [r7, #14]
 800cc68:	2b04      	cmp	r3, #4
 800cc6a:	d003      	beq.n	800cc74 <USBH_HandleControl+0xcc>
 800cc6c:	7bbb      	ldrb	r3, [r7, #14]
 800cc6e:	2b02      	cmp	r3, #2
 800cc70:	f040 8100 	bne.w	800ce74 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	220b      	movs	r2, #11
 800cc78:	761a      	strb	r2, [r3, #24]
      break;
 800cc7a:	e0fb      	b.n	800ce74 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cc82:	b29a      	uxth	r2, r3
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	6899      	ldr	r1, [r3, #8]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	899a      	ldrh	r2, [r3, #12]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	791b      	ldrb	r3, [r3, #4]
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f000 f93a 	bl	800cf0e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2204      	movs	r2, #4
 800cc9e:	761a      	strb	r2, [r3, #24]
      break;
 800cca0:	e0f1      	b.n	800ce86 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	791b      	ldrb	r3, [r3, #4]
 800cca6:	4619      	mov	r1, r3
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f004 f9ad 	bl	8011008 <USBH_LL_GetURBState>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ccb2:	7bbb      	ldrb	r3, [r7, #14]
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	d102      	bne.n	800ccbe <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2209      	movs	r2, #9
 800ccbc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ccbe:	7bbb      	ldrb	r3, [r7, #14]
 800ccc0:	2b05      	cmp	r3, #5
 800ccc2:	d102      	bne.n	800ccca <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ccc4:	2303      	movs	r3, #3
 800ccc6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ccc8:	e0d6      	b.n	800ce78 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ccca:	7bbb      	ldrb	r3, [r7, #14]
 800cccc:	2b04      	cmp	r3, #4
 800ccce:	f040 80d3 	bne.w	800ce78 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	220b      	movs	r2, #11
 800ccd6:	761a      	strb	r2, [r3, #24]
      break;
 800ccd8:	e0ce      	b.n	800ce78 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6899      	ldr	r1, [r3, #8]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	899a      	ldrh	r2, [r3, #12]
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	795b      	ldrb	r3, [r3, #5]
 800cce6:	2001      	movs	r0, #1
 800cce8:	9000      	str	r0, [sp, #0]
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f000 f8ea 	bl	800cec4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ccf6:	b29a      	uxth	r2, r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2206      	movs	r2, #6
 800cd00:	761a      	strb	r2, [r3, #24]
      break;
 800cd02:	e0c0      	b.n	800ce86 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	795b      	ldrb	r3, [r3, #5]
 800cd08:	4619      	mov	r1, r3
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f004 f97c 	bl	8011008 <USBH_LL_GetURBState>
 800cd10:	4603      	mov	r3, r0
 800cd12:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cd14:	7bbb      	ldrb	r3, [r7, #14]
 800cd16:	2b01      	cmp	r3, #1
 800cd18:	d103      	bne.n	800cd22 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2207      	movs	r2, #7
 800cd1e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cd20:	e0ac      	b.n	800ce7c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800cd22:	7bbb      	ldrb	r3, [r7, #14]
 800cd24:	2b05      	cmp	r3, #5
 800cd26:	d105      	bne.n	800cd34 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	220c      	movs	r2, #12
 800cd2c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800cd2e:	2303      	movs	r3, #3
 800cd30:	73fb      	strb	r3, [r7, #15]
      break;
 800cd32:	e0a3      	b.n	800ce7c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cd34:	7bbb      	ldrb	r3, [r7, #14]
 800cd36:	2b02      	cmp	r3, #2
 800cd38:	d103      	bne.n	800cd42 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2205      	movs	r2, #5
 800cd3e:	761a      	strb	r2, [r3, #24]
      break;
 800cd40:	e09c      	b.n	800ce7c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800cd42:	7bbb      	ldrb	r3, [r7, #14]
 800cd44:	2b04      	cmp	r3, #4
 800cd46:	f040 8099 	bne.w	800ce7c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	220b      	movs	r2, #11
 800cd4e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800cd50:	2302      	movs	r3, #2
 800cd52:	73fb      	strb	r3, [r7, #15]
      break;
 800cd54:	e092      	b.n	800ce7c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	791b      	ldrb	r3, [r3, #4]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	2100      	movs	r1, #0
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f000 f8d5 	bl	800cf0e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cd6a:	b29a      	uxth	r2, r3
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2208      	movs	r2, #8
 800cd74:	761a      	strb	r2, [r3, #24]

      break;
 800cd76:	e086      	b.n	800ce86 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	791b      	ldrb	r3, [r3, #4]
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f004 f942 	bl	8011008 <USBH_LL_GetURBState>
 800cd84:	4603      	mov	r3, r0
 800cd86:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cd88:	7bbb      	ldrb	r3, [r7, #14]
 800cd8a:	2b01      	cmp	r3, #1
 800cd8c:	d105      	bne.n	800cd9a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	220d      	movs	r2, #13
 800cd92:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800cd94:	2300      	movs	r3, #0
 800cd96:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cd98:	e072      	b.n	800ce80 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800cd9a:	7bbb      	ldrb	r3, [r7, #14]
 800cd9c:	2b04      	cmp	r3, #4
 800cd9e:	d103      	bne.n	800cda8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	220b      	movs	r2, #11
 800cda4:	761a      	strb	r2, [r3, #24]
      break;
 800cda6:	e06b      	b.n	800ce80 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800cda8:	7bbb      	ldrb	r3, [r7, #14]
 800cdaa:	2b05      	cmp	r3, #5
 800cdac:	d168      	bne.n	800ce80 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800cdae:	2303      	movs	r3, #3
 800cdb0:	73fb      	strb	r3, [r7, #15]
      break;
 800cdb2:	e065      	b.n	800ce80 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	795b      	ldrb	r3, [r3, #5]
 800cdb8:	2201      	movs	r2, #1
 800cdba:	9200      	str	r2, [sp, #0]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	2100      	movs	r1, #0
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f000 f87f 	bl	800cec4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cdcc:	b29a      	uxth	r2, r3
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	220a      	movs	r2, #10
 800cdd6:	761a      	strb	r2, [r3, #24]
      break;
 800cdd8:	e055      	b.n	800ce86 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	795b      	ldrb	r3, [r3, #5]
 800cdde:	4619      	mov	r1, r3
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f004 f911 	bl	8011008 <USBH_LL_GetURBState>
 800cde6:	4603      	mov	r3, r0
 800cde8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800cdea:	7bbb      	ldrb	r3, [r7, #14]
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	d105      	bne.n	800cdfc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	220d      	movs	r2, #13
 800cdf8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cdfa:	e043      	b.n	800ce84 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cdfc:	7bbb      	ldrb	r3, [r7, #14]
 800cdfe:	2b02      	cmp	r3, #2
 800ce00:	d103      	bne.n	800ce0a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2209      	movs	r2, #9
 800ce06:	761a      	strb	r2, [r3, #24]
      break;
 800ce08:	e03c      	b.n	800ce84 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800ce0a:	7bbb      	ldrb	r3, [r7, #14]
 800ce0c:	2b04      	cmp	r3, #4
 800ce0e:	d139      	bne.n	800ce84 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	220b      	movs	r2, #11
 800ce14:	761a      	strb	r2, [r3, #24]
      break;
 800ce16:	e035      	b.n	800ce84 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	7e5b      	ldrb	r3, [r3, #25]
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	b2da      	uxtb	r2, r3
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	765a      	strb	r2, [r3, #25]
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	7e5b      	ldrb	r3, [r3, #25]
 800ce28:	2b02      	cmp	r3, #2
 800ce2a:	d806      	bhi.n	800ce3a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2201      	movs	r2, #1
 800ce30:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2201      	movs	r2, #1
 800ce36:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ce38:	e025      	b.n	800ce86 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce40:	2106      	movs	r1, #6
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	795b      	ldrb	r3, [r3, #5]
 800ce50:	4619      	mov	r1, r3
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f000 f90c 	bl	800d070 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	791b      	ldrb	r3, [r3, #4]
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f000 f906 	bl	800d070 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2200      	movs	r2, #0
 800ce68:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ce6a:	2302      	movs	r3, #2
 800ce6c:	73fb      	strb	r3, [r7, #15]
      break;
 800ce6e:	e00a      	b.n	800ce86 <USBH_HandleControl+0x2de>

    default:
      break;
 800ce70:	bf00      	nop
 800ce72:	e008      	b.n	800ce86 <USBH_HandleControl+0x2de>
      break;
 800ce74:	bf00      	nop
 800ce76:	e006      	b.n	800ce86 <USBH_HandleControl+0x2de>
      break;
 800ce78:	bf00      	nop
 800ce7a:	e004      	b.n	800ce86 <USBH_HandleControl+0x2de>
      break;
 800ce7c:	bf00      	nop
 800ce7e:	e002      	b.n	800ce86 <USBH_HandleControl+0x2de>
      break;
 800ce80:	bf00      	nop
 800ce82:	e000      	b.n	800ce86 <USBH_HandleControl+0x2de>
      break;
 800ce84:	bf00      	nop
  }

  return status;
 800ce86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3710      	adds	r7, #16
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b088      	sub	sp, #32
 800ce94:	af04      	add	r7, sp, #16
 800ce96:	60f8      	str	r0, [r7, #12]
 800ce98:	60b9      	str	r1, [r7, #8]
 800ce9a:	4613      	mov	r3, r2
 800ce9c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ce9e:	79f9      	ldrb	r1, [r7, #7]
 800cea0:	2300      	movs	r3, #0
 800cea2:	9303      	str	r3, [sp, #12]
 800cea4:	2308      	movs	r3, #8
 800cea6:	9302      	str	r3, [sp, #8]
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	9301      	str	r3, [sp, #4]
 800ceac:	2300      	movs	r3, #0
 800ceae:	9300      	str	r3, [sp, #0]
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	68f8      	ldr	r0, [r7, #12]
 800ceb6:	f004 f876 	bl	8010fa6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800ceba:	2300      	movs	r3, #0
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3710      	adds	r7, #16
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}

0800cec4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b088      	sub	sp, #32
 800cec8:	af04      	add	r7, sp, #16
 800ceca:	60f8      	str	r0, [r7, #12]
 800cecc:	60b9      	str	r1, [r7, #8]
 800cece:	4611      	mov	r1, r2
 800ced0:	461a      	mov	r2, r3
 800ced2:	460b      	mov	r3, r1
 800ced4:	80fb      	strh	r3, [r7, #6]
 800ced6:	4613      	mov	r3, r2
 800ced8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d001      	beq.n	800cee8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800cee4:	2300      	movs	r3, #0
 800cee6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cee8:	7979      	ldrb	r1, [r7, #5]
 800ceea:	7e3b      	ldrb	r3, [r7, #24]
 800ceec:	9303      	str	r3, [sp, #12]
 800ceee:	88fb      	ldrh	r3, [r7, #6]
 800cef0:	9302      	str	r3, [sp, #8]
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	9301      	str	r3, [sp, #4]
 800cef6:	2301      	movs	r3, #1
 800cef8:	9300      	str	r3, [sp, #0]
 800cefa:	2300      	movs	r3, #0
 800cefc:	2200      	movs	r2, #0
 800cefe:	68f8      	ldr	r0, [r7, #12]
 800cf00:	f004 f851 	bl	8010fa6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800cf04:	2300      	movs	r3, #0
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3710      	adds	r7, #16
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}

0800cf0e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800cf0e:	b580      	push	{r7, lr}
 800cf10:	b088      	sub	sp, #32
 800cf12:	af04      	add	r7, sp, #16
 800cf14:	60f8      	str	r0, [r7, #12]
 800cf16:	60b9      	str	r1, [r7, #8]
 800cf18:	4611      	mov	r1, r2
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	80fb      	strh	r3, [r7, #6]
 800cf20:	4613      	mov	r3, r2
 800cf22:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cf24:	7979      	ldrb	r1, [r7, #5]
 800cf26:	2300      	movs	r3, #0
 800cf28:	9303      	str	r3, [sp, #12]
 800cf2a:	88fb      	ldrh	r3, [r7, #6]
 800cf2c:	9302      	str	r3, [sp, #8]
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	9301      	str	r3, [sp, #4]
 800cf32:	2301      	movs	r3, #1
 800cf34:	9300      	str	r3, [sp, #0]
 800cf36:	2300      	movs	r3, #0
 800cf38:	2201      	movs	r2, #1
 800cf3a:	68f8      	ldr	r0, [r7, #12]
 800cf3c:	f004 f833 	bl	8010fa6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cf40:	2300      	movs	r3, #0

}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3710      	adds	r7, #16
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}

0800cf4a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800cf4a:	b580      	push	{r7, lr}
 800cf4c:	b088      	sub	sp, #32
 800cf4e:	af04      	add	r7, sp, #16
 800cf50:	60f8      	str	r0, [r7, #12]
 800cf52:	60b9      	str	r1, [r7, #8]
 800cf54:	4611      	mov	r1, r2
 800cf56:	461a      	mov	r2, r3
 800cf58:	460b      	mov	r3, r1
 800cf5a:	80fb      	strh	r3, [r7, #6]
 800cf5c:	4613      	mov	r3, r2
 800cf5e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d001      	beq.n	800cf6e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cf6e:	7979      	ldrb	r1, [r7, #5]
 800cf70:	7e3b      	ldrb	r3, [r7, #24]
 800cf72:	9303      	str	r3, [sp, #12]
 800cf74:	88fb      	ldrh	r3, [r7, #6]
 800cf76:	9302      	str	r3, [sp, #8]
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	9301      	str	r3, [sp, #4]
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	9300      	str	r3, [sp, #0]
 800cf80:	2302      	movs	r3, #2
 800cf82:	2200      	movs	r2, #0
 800cf84:	68f8      	ldr	r0, [r7, #12]
 800cf86:	f004 f80e 	bl	8010fa6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800cf8a:	2300      	movs	r3, #0
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3710      	adds	r7, #16
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b088      	sub	sp, #32
 800cf98:	af04      	add	r7, sp, #16
 800cf9a:	60f8      	str	r0, [r7, #12]
 800cf9c:	60b9      	str	r1, [r7, #8]
 800cf9e:	4611      	mov	r1, r2
 800cfa0:	461a      	mov	r2, r3
 800cfa2:	460b      	mov	r3, r1
 800cfa4:	80fb      	strh	r3, [r7, #6]
 800cfa6:	4613      	mov	r3, r2
 800cfa8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cfaa:	7979      	ldrb	r1, [r7, #5]
 800cfac:	2300      	movs	r3, #0
 800cfae:	9303      	str	r3, [sp, #12]
 800cfb0:	88fb      	ldrh	r3, [r7, #6]
 800cfb2:	9302      	str	r3, [sp, #8]
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	9301      	str	r3, [sp, #4]
 800cfb8:	2301      	movs	r3, #1
 800cfba:	9300      	str	r3, [sp, #0]
 800cfbc:	2302      	movs	r3, #2
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	68f8      	ldr	r0, [r7, #12]
 800cfc2:	f003 fff0 	bl	8010fa6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cfc6:	2300      	movs	r3, #0
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3710      	adds	r7, #16
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}

0800cfd0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b086      	sub	sp, #24
 800cfd4:	af04      	add	r7, sp, #16
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	4608      	mov	r0, r1
 800cfda:	4611      	mov	r1, r2
 800cfdc:	461a      	mov	r2, r3
 800cfde:	4603      	mov	r3, r0
 800cfe0:	70fb      	strb	r3, [r7, #3]
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	70bb      	strb	r3, [r7, #2]
 800cfe6:	4613      	mov	r3, r2
 800cfe8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800cfea:	7878      	ldrb	r0, [r7, #1]
 800cfec:	78ba      	ldrb	r2, [r7, #2]
 800cfee:	78f9      	ldrb	r1, [r7, #3]
 800cff0:	8b3b      	ldrh	r3, [r7, #24]
 800cff2:	9302      	str	r3, [sp, #8]
 800cff4:	7d3b      	ldrb	r3, [r7, #20]
 800cff6:	9301      	str	r3, [sp, #4]
 800cff8:	7c3b      	ldrb	r3, [r7, #16]
 800cffa:	9300      	str	r3, [sp, #0]
 800cffc:	4603      	mov	r3, r0
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f003 ff83 	bl	8010f0a <USBH_LL_OpenPipe>

  return USBH_OK;
 800d004:	2300      	movs	r3, #0
}
 800d006:	4618      	mov	r0, r3
 800d008:	3708      	adds	r7, #8
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}

0800d00e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d00e:	b580      	push	{r7, lr}
 800d010:	b082      	sub	sp, #8
 800d012:	af00      	add	r7, sp, #0
 800d014:	6078      	str	r0, [r7, #4]
 800d016:	460b      	mov	r3, r1
 800d018:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d01a:	78fb      	ldrb	r3, [r7, #3]
 800d01c:	4619      	mov	r1, r3
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f003 ffa2 	bl	8010f68 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d024:	2300      	movs	r3, #0
}
 800d026:	4618      	mov	r0, r3
 800d028:	3708      	adds	r7, #8
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}

0800d02e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d02e:	b580      	push	{r7, lr}
 800d030:	b084      	sub	sp, #16
 800d032:	af00      	add	r7, sp, #0
 800d034:	6078      	str	r0, [r7, #4]
 800d036:	460b      	mov	r3, r1
 800d038:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f000 f836 	bl	800d0ac <USBH_GetFreePipe>
 800d040:	4603      	mov	r3, r0
 800d042:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d044:	89fb      	ldrh	r3, [r7, #14]
 800d046:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d00a      	beq.n	800d064 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d04e:	78fa      	ldrb	r2, [r7, #3]
 800d050:	89fb      	ldrh	r3, [r7, #14]
 800d052:	f003 030f 	and.w	r3, r3, #15
 800d056:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d05a:	6879      	ldr	r1, [r7, #4]
 800d05c:	33e0      	adds	r3, #224	; 0xe0
 800d05e:	009b      	lsls	r3, r3, #2
 800d060:	440b      	add	r3, r1
 800d062:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d064:	89fb      	ldrh	r3, [r7, #14]
 800d066:	b2db      	uxtb	r3, r3
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3710      	adds	r7, #16
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d070:	b480      	push	{r7}
 800d072:	b083      	sub	sp, #12
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	460b      	mov	r3, r1
 800d07a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d07c:	78fb      	ldrb	r3, [r7, #3]
 800d07e:	2b0f      	cmp	r3, #15
 800d080:	d80d      	bhi.n	800d09e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d082:	78fb      	ldrb	r3, [r7, #3]
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	33e0      	adds	r3, #224	; 0xe0
 800d088:	009b      	lsls	r3, r3, #2
 800d08a:	4413      	add	r3, r2
 800d08c:	685a      	ldr	r2, [r3, #4]
 800d08e:	78fb      	ldrb	r3, [r7, #3]
 800d090:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d094:	6879      	ldr	r1, [r7, #4]
 800d096:	33e0      	adds	r3, #224	; 0xe0
 800d098:	009b      	lsls	r3, r3, #2
 800d09a:	440b      	add	r3, r1
 800d09c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d09e:	2300      	movs	r3, #0
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	370c      	adds	r7, #12
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr

0800d0ac <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b085      	sub	sp, #20
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	73fb      	strb	r3, [r7, #15]
 800d0bc:	e00f      	b.n	800d0de <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d0be:	7bfb      	ldrb	r3, [r7, #15]
 800d0c0:	687a      	ldr	r2, [r7, #4]
 800d0c2:	33e0      	adds	r3, #224	; 0xe0
 800d0c4:	009b      	lsls	r3, r3, #2
 800d0c6:	4413      	add	r3, r2
 800d0c8:	685b      	ldr	r3, [r3, #4]
 800d0ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d102      	bne.n	800d0d8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d0d2:	7bfb      	ldrb	r3, [r7, #15]
 800d0d4:	b29b      	uxth	r3, r3
 800d0d6:	e007      	b.n	800d0e8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d0d8:	7bfb      	ldrb	r3, [r7, #15]
 800d0da:	3301      	adds	r3, #1
 800d0dc:	73fb      	strb	r3, [r7, #15]
 800d0de:	7bfb      	ldrb	r3, [r7, #15]
 800d0e0:	2b0f      	cmp	r3, #15
 800d0e2:	d9ec      	bls.n	800d0be <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d0e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3714      	adds	r7, #20
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr

0800d0f4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b084      	sub	sp, #16
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d0fe:	79fb      	ldrb	r3, [r7, #7]
 800d100:	4a08      	ldr	r2, [pc, #32]	; (800d124 <disk_status+0x30>)
 800d102:	009b      	lsls	r3, r3, #2
 800d104:	4413      	add	r3, r2
 800d106:	685b      	ldr	r3, [r3, #4]
 800d108:	685b      	ldr	r3, [r3, #4]
 800d10a:	79fa      	ldrb	r2, [r7, #7]
 800d10c:	4905      	ldr	r1, [pc, #20]	; (800d124 <disk_status+0x30>)
 800d10e:	440a      	add	r2, r1
 800d110:	7a12      	ldrb	r2, [r2, #8]
 800d112:	4610      	mov	r0, r2
 800d114:	4798      	blx	r3
 800d116:	4603      	mov	r3, r0
 800d118:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d11a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3710      	adds	r7, #16
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}
 800d124:	20003270 	.word	0x20003270

0800d128 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b084      	sub	sp, #16
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	4603      	mov	r3, r0
 800d130:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d132:	2300      	movs	r3, #0
 800d134:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d136:	79fb      	ldrb	r3, [r7, #7]
 800d138:	4a0d      	ldr	r2, [pc, #52]	; (800d170 <disk_initialize+0x48>)
 800d13a:	5cd3      	ldrb	r3, [r2, r3]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d111      	bne.n	800d164 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d140:	79fb      	ldrb	r3, [r7, #7]
 800d142:	4a0b      	ldr	r2, [pc, #44]	; (800d170 <disk_initialize+0x48>)
 800d144:	2101      	movs	r1, #1
 800d146:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d148:	79fb      	ldrb	r3, [r7, #7]
 800d14a:	4a09      	ldr	r2, [pc, #36]	; (800d170 <disk_initialize+0x48>)
 800d14c:	009b      	lsls	r3, r3, #2
 800d14e:	4413      	add	r3, r2
 800d150:	685b      	ldr	r3, [r3, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	79fa      	ldrb	r2, [r7, #7]
 800d156:	4906      	ldr	r1, [pc, #24]	; (800d170 <disk_initialize+0x48>)
 800d158:	440a      	add	r2, r1
 800d15a:	7a12      	ldrb	r2, [r2, #8]
 800d15c:	4610      	mov	r0, r2
 800d15e:	4798      	blx	r3
 800d160:	4603      	mov	r3, r0
 800d162:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d164:	7bfb      	ldrb	r3, [r7, #15]
}
 800d166:	4618      	mov	r0, r3
 800d168:	3710      	adds	r7, #16
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop
 800d170:	20003270 	.word	0x20003270

0800d174 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d174:	b590      	push	{r4, r7, lr}
 800d176:	b087      	sub	sp, #28
 800d178:	af00      	add	r7, sp, #0
 800d17a:	60b9      	str	r1, [r7, #8]
 800d17c:	607a      	str	r2, [r7, #4]
 800d17e:	603b      	str	r3, [r7, #0]
 800d180:	4603      	mov	r3, r0
 800d182:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d184:	7bfb      	ldrb	r3, [r7, #15]
 800d186:	4a0a      	ldr	r2, [pc, #40]	; (800d1b0 <disk_read+0x3c>)
 800d188:	009b      	lsls	r3, r3, #2
 800d18a:	4413      	add	r3, r2
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	689c      	ldr	r4, [r3, #8]
 800d190:	7bfb      	ldrb	r3, [r7, #15]
 800d192:	4a07      	ldr	r2, [pc, #28]	; (800d1b0 <disk_read+0x3c>)
 800d194:	4413      	add	r3, r2
 800d196:	7a18      	ldrb	r0, [r3, #8]
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	687a      	ldr	r2, [r7, #4]
 800d19c:	68b9      	ldr	r1, [r7, #8]
 800d19e:	47a0      	blx	r4
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	75fb      	strb	r3, [r7, #23]
  return res;
 800d1a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	371c      	adds	r7, #28
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd90      	pop	{r4, r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	20003270 	.word	0x20003270

0800d1b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d1b4:	b590      	push	{r4, r7, lr}
 800d1b6:	b087      	sub	sp, #28
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	60b9      	str	r1, [r7, #8]
 800d1bc:	607a      	str	r2, [r7, #4]
 800d1be:	603b      	str	r3, [r7, #0]
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d1c4:	7bfb      	ldrb	r3, [r7, #15]
 800d1c6:	4a0a      	ldr	r2, [pc, #40]	; (800d1f0 <disk_write+0x3c>)
 800d1c8:	009b      	lsls	r3, r3, #2
 800d1ca:	4413      	add	r3, r2
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	68dc      	ldr	r4, [r3, #12]
 800d1d0:	7bfb      	ldrb	r3, [r7, #15]
 800d1d2:	4a07      	ldr	r2, [pc, #28]	; (800d1f0 <disk_write+0x3c>)
 800d1d4:	4413      	add	r3, r2
 800d1d6:	7a18      	ldrb	r0, [r3, #8]
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	687a      	ldr	r2, [r7, #4]
 800d1dc:	68b9      	ldr	r1, [r7, #8]
 800d1de:	47a0      	blx	r4
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	75fb      	strb	r3, [r7, #23]
  return res;
 800d1e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	371c      	adds	r7, #28
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd90      	pop	{r4, r7, pc}
 800d1ee:	bf00      	nop
 800d1f0:	20003270 	.word	0x20003270

0800d1f4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b084      	sub	sp, #16
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	603a      	str	r2, [r7, #0]
 800d1fe:	71fb      	strb	r3, [r7, #7]
 800d200:	460b      	mov	r3, r1
 800d202:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d204:	79fb      	ldrb	r3, [r7, #7]
 800d206:	4a09      	ldr	r2, [pc, #36]	; (800d22c <disk_ioctl+0x38>)
 800d208:	009b      	lsls	r3, r3, #2
 800d20a:	4413      	add	r3, r2
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	691b      	ldr	r3, [r3, #16]
 800d210:	79fa      	ldrb	r2, [r7, #7]
 800d212:	4906      	ldr	r1, [pc, #24]	; (800d22c <disk_ioctl+0x38>)
 800d214:	440a      	add	r2, r1
 800d216:	7a10      	ldrb	r0, [r2, #8]
 800d218:	79b9      	ldrb	r1, [r7, #6]
 800d21a:	683a      	ldr	r2, [r7, #0]
 800d21c:	4798      	blx	r3
 800d21e:	4603      	mov	r3, r0
 800d220:	73fb      	strb	r3, [r7, #15]
  return res;
 800d222:	7bfb      	ldrb	r3, [r7, #15]
}
 800d224:	4618      	mov	r0, r3
 800d226:	3710      	adds	r7, #16
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}
 800d22c:	20003270 	.word	0x20003270

0800d230 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d230:	b480      	push	{r7}
 800d232:	b085      	sub	sp, #20
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	3301      	adds	r3, #1
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d240:	89fb      	ldrh	r3, [r7, #14]
 800d242:	021b      	lsls	r3, r3, #8
 800d244:	b21a      	sxth	r2, r3
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	781b      	ldrb	r3, [r3, #0]
 800d24a:	b21b      	sxth	r3, r3
 800d24c:	4313      	orrs	r3, r2
 800d24e:	b21b      	sxth	r3, r3
 800d250:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d252:	89fb      	ldrh	r3, [r7, #14]
}
 800d254:	4618      	mov	r0, r3
 800d256:	3714      	adds	r7, #20
 800d258:	46bd      	mov	sp, r7
 800d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25e:	4770      	bx	lr

0800d260 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d260:	b480      	push	{r7}
 800d262:	b085      	sub	sp, #20
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	3303      	adds	r3, #3
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	021b      	lsls	r3, r3, #8
 800d274:	687a      	ldr	r2, [r7, #4]
 800d276:	3202      	adds	r2, #2
 800d278:	7812      	ldrb	r2, [r2, #0]
 800d27a:	4313      	orrs	r3, r2
 800d27c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	021b      	lsls	r3, r3, #8
 800d282:	687a      	ldr	r2, [r7, #4]
 800d284:	3201      	adds	r2, #1
 800d286:	7812      	ldrb	r2, [r2, #0]
 800d288:	4313      	orrs	r3, r2
 800d28a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	021b      	lsls	r3, r3, #8
 800d290:	687a      	ldr	r2, [r7, #4]
 800d292:	7812      	ldrb	r2, [r2, #0]
 800d294:	4313      	orrs	r3, r2
 800d296:	60fb      	str	r3, [r7, #12]
	return rv;
 800d298:	68fb      	ldr	r3, [r7, #12]
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3714      	adds	r7, #20
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a4:	4770      	bx	lr

0800d2a6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d2a6:	b480      	push	{r7}
 800d2a8:	b083      	sub	sp, #12
 800d2aa:	af00      	add	r7, sp, #0
 800d2ac:	6078      	str	r0, [r7, #4]
 800d2ae:	460b      	mov	r3, r1
 800d2b0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	1c5a      	adds	r2, r3, #1
 800d2b6:	607a      	str	r2, [r7, #4]
 800d2b8:	887a      	ldrh	r2, [r7, #2]
 800d2ba:	b2d2      	uxtb	r2, r2
 800d2bc:	701a      	strb	r2, [r3, #0]
 800d2be:	887b      	ldrh	r3, [r7, #2]
 800d2c0:	0a1b      	lsrs	r3, r3, #8
 800d2c2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	1c5a      	adds	r2, r3, #1
 800d2c8:	607a      	str	r2, [r7, #4]
 800d2ca:	887a      	ldrh	r2, [r7, #2]
 800d2cc:	b2d2      	uxtb	r2, r2
 800d2ce:	701a      	strb	r2, [r3, #0]
}
 800d2d0:	bf00      	nop
 800d2d2:	370c      	adds	r7, #12
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2da:	4770      	bx	lr

0800d2dc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	1c5a      	adds	r2, r3, #1
 800d2ea:	607a      	str	r2, [r7, #4]
 800d2ec:	683a      	ldr	r2, [r7, #0]
 800d2ee:	b2d2      	uxtb	r2, r2
 800d2f0:	701a      	strb	r2, [r3, #0]
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	0a1b      	lsrs	r3, r3, #8
 800d2f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	1c5a      	adds	r2, r3, #1
 800d2fc:	607a      	str	r2, [r7, #4]
 800d2fe:	683a      	ldr	r2, [r7, #0]
 800d300:	b2d2      	uxtb	r2, r2
 800d302:	701a      	strb	r2, [r3, #0]
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	0a1b      	lsrs	r3, r3, #8
 800d308:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	1c5a      	adds	r2, r3, #1
 800d30e:	607a      	str	r2, [r7, #4]
 800d310:	683a      	ldr	r2, [r7, #0]
 800d312:	b2d2      	uxtb	r2, r2
 800d314:	701a      	strb	r2, [r3, #0]
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	0a1b      	lsrs	r3, r3, #8
 800d31a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	1c5a      	adds	r2, r3, #1
 800d320:	607a      	str	r2, [r7, #4]
 800d322:	683a      	ldr	r2, [r7, #0]
 800d324:	b2d2      	uxtb	r2, r2
 800d326:	701a      	strb	r2, [r3, #0]
}
 800d328:	bf00      	nop
 800d32a:	370c      	adds	r7, #12
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr

0800d334 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d334:	b480      	push	{r7}
 800d336:	b087      	sub	sp, #28
 800d338:	af00      	add	r7, sp, #0
 800d33a:	60f8      	str	r0, [r7, #12]
 800d33c:	60b9      	str	r1, [r7, #8]
 800d33e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d00d      	beq.n	800d36a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d34e:	693a      	ldr	r2, [r7, #16]
 800d350:	1c53      	adds	r3, r2, #1
 800d352:	613b      	str	r3, [r7, #16]
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	1c59      	adds	r1, r3, #1
 800d358:	6179      	str	r1, [r7, #20]
 800d35a:	7812      	ldrb	r2, [r2, #0]
 800d35c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	3b01      	subs	r3, #1
 800d362:	607b      	str	r3, [r7, #4]
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d1f1      	bne.n	800d34e <mem_cpy+0x1a>
	}
}
 800d36a:	bf00      	nop
 800d36c:	371c      	adds	r7, #28
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr

0800d376 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d376:	b480      	push	{r7}
 800d378:	b087      	sub	sp, #28
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	60f8      	str	r0, [r7, #12]
 800d37e:	60b9      	str	r1, [r7, #8]
 800d380:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	1c5a      	adds	r2, r3, #1
 800d38a:	617a      	str	r2, [r7, #20]
 800d38c:	68ba      	ldr	r2, [r7, #8]
 800d38e:	b2d2      	uxtb	r2, r2
 800d390:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	3b01      	subs	r3, #1
 800d396:	607b      	str	r3, [r7, #4]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d1f3      	bne.n	800d386 <mem_set+0x10>
}
 800d39e:	bf00      	nop
 800d3a0:	bf00      	nop
 800d3a2:	371c      	adds	r7, #28
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3aa:	4770      	bx	lr

0800d3ac <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d3ac:	b480      	push	{r7}
 800d3ae:	b089      	sub	sp, #36	; 0x24
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	60f8      	str	r0, [r7, #12]
 800d3b4:	60b9      	str	r1, [r7, #8]
 800d3b6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	61fb      	str	r3, [r7, #28]
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d3c4:	69fb      	ldr	r3, [r7, #28]
 800d3c6:	1c5a      	adds	r2, r3, #1
 800d3c8:	61fa      	str	r2, [r7, #28]
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	69bb      	ldr	r3, [r7, #24]
 800d3d0:	1c5a      	adds	r2, r3, #1
 800d3d2:	61ba      	str	r2, [r7, #24]
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	1acb      	subs	r3, r1, r3
 800d3d8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	3b01      	subs	r3, #1
 800d3de:	607b      	str	r3, [r7, #4]
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d002      	beq.n	800d3ec <mem_cmp+0x40>
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d0eb      	beq.n	800d3c4 <mem_cmp+0x18>

	return r;
 800d3ec:	697b      	ldr	r3, [r7, #20]
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3724      	adds	r7, #36	; 0x24
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f8:	4770      	bx	lr

0800d3fa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d3fa:	b480      	push	{r7}
 800d3fc:	b083      	sub	sp, #12
 800d3fe:	af00      	add	r7, sp, #0
 800d400:	6078      	str	r0, [r7, #4]
 800d402:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d404:	e002      	b.n	800d40c <chk_chr+0x12>
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	3301      	adds	r3, #1
 800d40a:	607b      	str	r3, [r7, #4]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	781b      	ldrb	r3, [r3, #0]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d005      	beq.n	800d420 <chk_chr+0x26>
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	781b      	ldrb	r3, [r3, #0]
 800d418:	461a      	mov	r2, r3
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	4293      	cmp	r3, r2
 800d41e:	d1f2      	bne.n	800d406 <chk_chr+0xc>
	return *str;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	781b      	ldrb	r3, [r3, #0]
}
 800d424:	4618      	mov	r0, r3
 800d426:	370c      	adds	r7, #12
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr

0800d430 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d430:	b480      	push	{r7}
 800d432:	b085      	sub	sp, #20
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d43a:	2300      	movs	r3, #0
 800d43c:	60bb      	str	r3, [r7, #8]
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	60fb      	str	r3, [r7, #12]
 800d442:	e029      	b.n	800d498 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d444:	4a27      	ldr	r2, [pc, #156]	; (800d4e4 <chk_lock+0xb4>)
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	011b      	lsls	r3, r3, #4
 800d44a:	4413      	add	r3, r2
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d01d      	beq.n	800d48e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d452:	4a24      	ldr	r2, [pc, #144]	; (800d4e4 <chk_lock+0xb4>)
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	011b      	lsls	r3, r3, #4
 800d458:	4413      	add	r3, r2
 800d45a:	681a      	ldr	r2, [r3, #0]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	429a      	cmp	r2, r3
 800d462:	d116      	bne.n	800d492 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d464:	4a1f      	ldr	r2, [pc, #124]	; (800d4e4 <chk_lock+0xb4>)
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	011b      	lsls	r3, r3, #4
 800d46a:	4413      	add	r3, r2
 800d46c:	3304      	adds	r3, #4
 800d46e:	681a      	ldr	r2, [r3, #0]
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d474:	429a      	cmp	r2, r3
 800d476:	d10c      	bne.n	800d492 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d478:	4a1a      	ldr	r2, [pc, #104]	; (800d4e4 <chk_lock+0xb4>)
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	011b      	lsls	r3, r3, #4
 800d47e:	4413      	add	r3, r2
 800d480:	3308      	adds	r3, #8
 800d482:	681a      	ldr	r2, [r3, #0]
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d488:	429a      	cmp	r2, r3
 800d48a:	d102      	bne.n	800d492 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d48c:	e007      	b.n	800d49e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d48e:	2301      	movs	r3, #1
 800d490:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	3301      	adds	r3, #1
 800d496:	60fb      	str	r3, [r7, #12]
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2b01      	cmp	r3, #1
 800d49c:	d9d2      	bls.n	800d444 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2b02      	cmp	r3, #2
 800d4a2:	d109      	bne.n	800d4b8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d102      	bne.n	800d4b0 <chk_lock+0x80>
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	2b02      	cmp	r3, #2
 800d4ae:	d101      	bne.n	800d4b4 <chk_lock+0x84>
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	e010      	b.n	800d4d6 <chk_lock+0xa6>
 800d4b4:	2312      	movs	r3, #18
 800d4b6:	e00e      	b.n	800d4d6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d108      	bne.n	800d4d0 <chk_lock+0xa0>
 800d4be:	4a09      	ldr	r2, [pc, #36]	; (800d4e4 <chk_lock+0xb4>)
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	011b      	lsls	r3, r3, #4
 800d4c4:	4413      	add	r3, r2
 800d4c6:	330c      	adds	r3, #12
 800d4c8:	881b      	ldrh	r3, [r3, #0]
 800d4ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4ce:	d101      	bne.n	800d4d4 <chk_lock+0xa4>
 800d4d0:	2310      	movs	r3, #16
 800d4d2:	e000      	b.n	800d4d6 <chk_lock+0xa6>
 800d4d4:	2300      	movs	r3, #0
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3714      	adds	r7, #20
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr
 800d4e2:	bf00      	nop
 800d4e4:	20003050 	.word	0x20003050

0800d4e8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b083      	sub	sp, #12
 800d4ec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	607b      	str	r3, [r7, #4]
 800d4f2:	e002      	b.n	800d4fa <enq_lock+0x12>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	607b      	str	r3, [r7, #4]
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2b01      	cmp	r3, #1
 800d4fe:	d806      	bhi.n	800d50e <enq_lock+0x26>
 800d500:	4a09      	ldr	r2, [pc, #36]	; (800d528 <enq_lock+0x40>)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	011b      	lsls	r3, r3, #4
 800d506:	4413      	add	r3, r2
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d1f2      	bne.n	800d4f4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2b02      	cmp	r3, #2
 800d512:	bf14      	ite	ne
 800d514:	2301      	movne	r3, #1
 800d516:	2300      	moveq	r3, #0
 800d518:	b2db      	uxtb	r3, r3
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	370c      	adds	r7, #12
 800d51e:	46bd      	mov	sp, r7
 800d520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d524:	4770      	bx	lr
 800d526:	bf00      	nop
 800d528:	20003050 	.word	0x20003050

0800d52c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d52c:	b480      	push	{r7}
 800d52e:	b085      	sub	sp, #20
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d536:	2300      	movs	r3, #0
 800d538:	60fb      	str	r3, [r7, #12]
 800d53a:	e01f      	b.n	800d57c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d53c:	4a41      	ldr	r2, [pc, #260]	; (800d644 <inc_lock+0x118>)
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	011b      	lsls	r3, r3, #4
 800d542:	4413      	add	r3, r2
 800d544:	681a      	ldr	r2, [r3, #0]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d113      	bne.n	800d576 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d54e:	4a3d      	ldr	r2, [pc, #244]	; (800d644 <inc_lock+0x118>)
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	011b      	lsls	r3, r3, #4
 800d554:	4413      	add	r3, r2
 800d556:	3304      	adds	r3, #4
 800d558:	681a      	ldr	r2, [r3, #0]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d55e:	429a      	cmp	r2, r3
 800d560:	d109      	bne.n	800d576 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d562:	4a38      	ldr	r2, [pc, #224]	; (800d644 <inc_lock+0x118>)
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	011b      	lsls	r3, r3, #4
 800d568:	4413      	add	r3, r2
 800d56a:	3308      	adds	r3, #8
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d572:	429a      	cmp	r2, r3
 800d574:	d006      	beq.n	800d584 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	3301      	adds	r3, #1
 800d57a:	60fb      	str	r3, [r7, #12]
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2b01      	cmp	r3, #1
 800d580:	d9dc      	bls.n	800d53c <inc_lock+0x10>
 800d582:	e000      	b.n	800d586 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d584:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	2b02      	cmp	r3, #2
 800d58a:	d132      	bne.n	800d5f2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d58c:	2300      	movs	r3, #0
 800d58e:	60fb      	str	r3, [r7, #12]
 800d590:	e002      	b.n	800d598 <inc_lock+0x6c>
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	3301      	adds	r3, #1
 800d596:	60fb      	str	r3, [r7, #12]
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d806      	bhi.n	800d5ac <inc_lock+0x80>
 800d59e:	4a29      	ldr	r2, [pc, #164]	; (800d644 <inc_lock+0x118>)
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	011b      	lsls	r3, r3, #4
 800d5a4:	4413      	add	r3, r2
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d1f2      	bne.n	800d592 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2b02      	cmp	r3, #2
 800d5b0:	d101      	bne.n	800d5b6 <inc_lock+0x8a>
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	e040      	b.n	800d638 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681a      	ldr	r2, [r3, #0]
 800d5ba:	4922      	ldr	r1, [pc, #136]	; (800d644 <inc_lock+0x118>)
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	011b      	lsls	r3, r3, #4
 800d5c0:	440b      	add	r3, r1
 800d5c2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	689a      	ldr	r2, [r3, #8]
 800d5c8:	491e      	ldr	r1, [pc, #120]	; (800d644 <inc_lock+0x118>)
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	011b      	lsls	r3, r3, #4
 800d5ce:	440b      	add	r3, r1
 800d5d0:	3304      	adds	r3, #4
 800d5d2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	695a      	ldr	r2, [r3, #20]
 800d5d8:	491a      	ldr	r1, [pc, #104]	; (800d644 <inc_lock+0x118>)
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	011b      	lsls	r3, r3, #4
 800d5de:	440b      	add	r3, r1
 800d5e0:	3308      	adds	r3, #8
 800d5e2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d5e4:	4a17      	ldr	r2, [pc, #92]	; (800d644 <inc_lock+0x118>)
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	011b      	lsls	r3, r3, #4
 800d5ea:	4413      	add	r3, r2
 800d5ec:	330c      	adds	r3, #12
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d009      	beq.n	800d60c <inc_lock+0xe0>
 800d5f8:	4a12      	ldr	r2, [pc, #72]	; (800d644 <inc_lock+0x118>)
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	011b      	lsls	r3, r3, #4
 800d5fe:	4413      	add	r3, r2
 800d600:	330c      	adds	r3, #12
 800d602:	881b      	ldrh	r3, [r3, #0]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d001      	beq.n	800d60c <inc_lock+0xe0>
 800d608:	2300      	movs	r3, #0
 800d60a:	e015      	b.n	800d638 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d108      	bne.n	800d624 <inc_lock+0xf8>
 800d612:	4a0c      	ldr	r2, [pc, #48]	; (800d644 <inc_lock+0x118>)
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	011b      	lsls	r3, r3, #4
 800d618:	4413      	add	r3, r2
 800d61a:	330c      	adds	r3, #12
 800d61c:	881b      	ldrh	r3, [r3, #0]
 800d61e:	3301      	adds	r3, #1
 800d620:	b29a      	uxth	r2, r3
 800d622:	e001      	b.n	800d628 <inc_lock+0xfc>
 800d624:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d628:	4906      	ldr	r1, [pc, #24]	; (800d644 <inc_lock+0x118>)
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	011b      	lsls	r3, r3, #4
 800d62e:	440b      	add	r3, r1
 800d630:	330c      	adds	r3, #12
 800d632:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	3301      	adds	r3, #1
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3714      	adds	r7, #20
 800d63c:	46bd      	mov	sp, r7
 800d63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d642:	4770      	bx	lr
 800d644:	20003050 	.word	0x20003050

0800d648 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d648:	b480      	push	{r7}
 800d64a:	b085      	sub	sp, #20
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	3b01      	subs	r3, #1
 800d654:	607b      	str	r3, [r7, #4]
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2b01      	cmp	r3, #1
 800d65a:	d825      	bhi.n	800d6a8 <dec_lock+0x60>
		n = Files[i].ctr;
 800d65c:	4a17      	ldr	r2, [pc, #92]	; (800d6bc <dec_lock+0x74>)
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	011b      	lsls	r3, r3, #4
 800d662:	4413      	add	r3, r2
 800d664:	330c      	adds	r3, #12
 800d666:	881b      	ldrh	r3, [r3, #0]
 800d668:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d66a:	89fb      	ldrh	r3, [r7, #14]
 800d66c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d670:	d101      	bne.n	800d676 <dec_lock+0x2e>
 800d672:	2300      	movs	r3, #0
 800d674:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d676:	89fb      	ldrh	r3, [r7, #14]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d002      	beq.n	800d682 <dec_lock+0x3a>
 800d67c:	89fb      	ldrh	r3, [r7, #14]
 800d67e:	3b01      	subs	r3, #1
 800d680:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d682:	4a0e      	ldr	r2, [pc, #56]	; (800d6bc <dec_lock+0x74>)
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	011b      	lsls	r3, r3, #4
 800d688:	4413      	add	r3, r2
 800d68a:	330c      	adds	r3, #12
 800d68c:	89fa      	ldrh	r2, [r7, #14]
 800d68e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d690:	89fb      	ldrh	r3, [r7, #14]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d105      	bne.n	800d6a2 <dec_lock+0x5a>
 800d696:	4a09      	ldr	r2, [pc, #36]	; (800d6bc <dec_lock+0x74>)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	011b      	lsls	r3, r3, #4
 800d69c:	4413      	add	r3, r2
 800d69e:	2200      	movs	r2, #0
 800d6a0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	737b      	strb	r3, [r7, #13]
 800d6a6:	e001      	b.n	800d6ac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d6a8:	2302      	movs	r3, #2
 800d6aa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d6ac:	7b7b      	ldrb	r3, [r7, #13]
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3714      	adds	r7, #20
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b8:	4770      	bx	lr
 800d6ba:	bf00      	nop
 800d6bc:	20003050 	.word	0x20003050

0800d6c0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b085      	sub	sp, #20
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	60fb      	str	r3, [r7, #12]
 800d6cc:	e010      	b.n	800d6f0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d6ce:	4a0d      	ldr	r2, [pc, #52]	; (800d704 <clear_lock+0x44>)
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	011b      	lsls	r3, r3, #4
 800d6d4:	4413      	add	r3, r2
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	687a      	ldr	r2, [r7, #4]
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d105      	bne.n	800d6ea <clear_lock+0x2a>
 800d6de:	4a09      	ldr	r2, [pc, #36]	; (800d704 <clear_lock+0x44>)
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	011b      	lsls	r3, r3, #4
 800d6e4:	4413      	add	r3, r2
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	3301      	adds	r3, #1
 800d6ee:	60fb      	str	r3, [r7, #12]
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	2b01      	cmp	r3, #1
 800d6f4:	d9eb      	bls.n	800d6ce <clear_lock+0xe>
	}
}
 800d6f6:	bf00      	nop
 800d6f8:	bf00      	nop
 800d6fa:	3714      	adds	r7, #20
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d702:	4770      	bx	lr
 800d704:	20003050 	.word	0x20003050

0800d708 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b086      	sub	sp, #24
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d710:	2300      	movs	r3, #0
 800d712:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	78db      	ldrb	r3, [r3, #3]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d034      	beq.n	800d786 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d720:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	7858      	ldrb	r0, [r3, #1]
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d72c:	2301      	movs	r3, #1
 800d72e:	697a      	ldr	r2, [r7, #20]
 800d730:	f7ff fd40 	bl	800d1b4 <disk_write>
 800d734:	4603      	mov	r3, r0
 800d736:	2b00      	cmp	r3, #0
 800d738:	d002      	beq.n	800d740 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d73a:	2301      	movs	r3, #1
 800d73c:	73fb      	strb	r3, [r7, #15]
 800d73e:	e022      	b.n	800d786 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2200      	movs	r2, #0
 800d744:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d74a:	697a      	ldr	r2, [r7, #20]
 800d74c:	1ad2      	subs	r2, r2, r3
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6a1b      	ldr	r3, [r3, #32]
 800d752:	429a      	cmp	r2, r3
 800d754:	d217      	bcs.n	800d786 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	789b      	ldrb	r3, [r3, #2]
 800d75a:	613b      	str	r3, [r7, #16]
 800d75c:	e010      	b.n	800d780 <sync_window+0x78>
					wsect += fs->fsize;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6a1b      	ldr	r3, [r3, #32]
 800d762:	697a      	ldr	r2, [r7, #20]
 800d764:	4413      	add	r3, r2
 800d766:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	7858      	ldrb	r0, [r3, #1]
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d772:	2301      	movs	r3, #1
 800d774:	697a      	ldr	r2, [r7, #20]
 800d776:	f7ff fd1d 	bl	800d1b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	3b01      	subs	r3, #1
 800d77e:	613b      	str	r3, [r7, #16]
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	2b01      	cmp	r3, #1
 800d784:	d8eb      	bhi.n	800d75e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d786:	7bfb      	ldrb	r3, [r7, #15]
}
 800d788:	4618      	mov	r0, r3
 800d78a:	3718      	adds	r7, #24
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}

0800d790 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b084      	sub	sp, #16
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d79a:	2300      	movs	r3, #0
 800d79c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7a2:	683a      	ldr	r2, [r7, #0]
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d01b      	beq.n	800d7e0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f7ff ffad 	bl	800d708 <sync_window>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d7b2:	7bfb      	ldrb	r3, [r7, #15]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d113      	bne.n	800d7e0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	7858      	ldrb	r0, [r3, #1]
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	683a      	ldr	r2, [r7, #0]
 800d7c6:	f7ff fcd5 	bl	800d174 <disk_read>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d004      	beq.n	800d7da <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d7d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7d4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	683a      	ldr	r2, [r7, #0]
 800d7de:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800d7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3710      	adds	r7, #16
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
	...

0800d7ec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b084      	sub	sp, #16
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f7ff ff87 	bl	800d708 <sync_window>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d7fe:	7bfb      	ldrb	r3, [r7, #15]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d159      	bne.n	800d8b8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	2b03      	cmp	r3, #3
 800d80a:	d149      	bne.n	800d8a0 <sync_fs+0xb4>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	791b      	ldrb	r3, [r3, #4]
 800d810:	2b01      	cmp	r3, #1
 800d812:	d145      	bne.n	800d8a0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	899b      	ldrh	r3, [r3, #12]
 800d81e:	461a      	mov	r2, r3
 800d820:	2100      	movs	r1, #0
 800d822:	f7ff fda8 	bl	800d376 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	3338      	adds	r3, #56	; 0x38
 800d82a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d82e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d832:	4618      	mov	r0, r3
 800d834:	f7ff fd37 	bl	800d2a6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	3338      	adds	r3, #56	; 0x38
 800d83c:	4921      	ldr	r1, [pc, #132]	; (800d8c4 <sync_fs+0xd8>)
 800d83e:	4618      	mov	r0, r3
 800d840:	f7ff fd4c 	bl	800d2dc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	3338      	adds	r3, #56	; 0x38
 800d848:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d84c:	491e      	ldr	r1, [pc, #120]	; (800d8c8 <sync_fs+0xdc>)
 800d84e:	4618      	mov	r0, r3
 800d850:	f7ff fd44 	bl	800d2dc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	3338      	adds	r3, #56	; 0x38
 800d858:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	699b      	ldr	r3, [r3, #24]
 800d860:	4619      	mov	r1, r3
 800d862:	4610      	mov	r0, r2
 800d864:	f7ff fd3a 	bl	800d2dc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	3338      	adds	r3, #56	; 0x38
 800d86c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	695b      	ldr	r3, [r3, #20]
 800d874:	4619      	mov	r1, r3
 800d876:	4610      	mov	r0, r2
 800d878:	f7ff fd30 	bl	800d2dc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d880:	1c5a      	adds	r2, r3, #1
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	7858      	ldrb	r0, [r3, #1]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d894:	2301      	movs	r3, #1
 800d896:	f7ff fc8d 	bl	800d1b4 <disk_write>
			fs->fsi_flag = 0;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2200      	movs	r2, #0
 800d89e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	785b      	ldrb	r3, [r3, #1]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	2100      	movs	r1, #0
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f7ff fca3 	bl	800d1f4 <disk_ioctl>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d001      	beq.n	800d8b8 <sync_fs+0xcc>
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d8b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3710      	adds	r7, #16
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}
 800d8c2:	bf00      	nop
 800d8c4:	41615252 	.word	0x41615252
 800d8c8:	61417272 	.word	0x61417272

0800d8cc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	b083      	sub	sp, #12
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	3b02      	subs	r3, #2
 800d8da:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	69db      	ldr	r3, [r3, #28]
 800d8e0:	3b02      	subs	r3, #2
 800d8e2:	683a      	ldr	r2, [r7, #0]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d301      	bcc.n	800d8ec <clust2sect+0x20>
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	e008      	b.n	800d8fe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	895b      	ldrh	r3, [r3, #10]
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	fb03 f202 	mul.w	r2, r3, r2
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8fc:	4413      	add	r3, r2
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	370c      	adds	r7, #12
 800d902:	46bd      	mov	sp, r7
 800d904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d908:	4770      	bx	lr

0800d90a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d90a:	b580      	push	{r7, lr}
 800d90c:	b086      	sub	sp, #24
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]
 800d912:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	2b01      	cmp	r3, #1
 800d91e:	d904      	bls.n	800d92a <get_fat+0x20>
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	69db      	ldr	r3, [r3, #28]
 800d924:	683a      	ldr	r2, [r7, #0]
 800d926:	429a      	cmp	r2, r3
 800d928:	d302      	bcc.n	800d930 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d92a:	2301      	movs	r3, #1
 800d92c:	617b      	str	r3, [r7, #20]
 800d92e:	e0bb      	b.n	800daa8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d934:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	2b03      	cmp	r3, #3
 800d93c:	f000 8083 	beq.w	800da46 <get_fat+0x13c>
 800d940:	2b03      	cmp	r3, #3
 800d942:	f300 80a7 	bgt.w	800da94 <get_fat+0x18a>
 800d946:	2b01      	cmp	r3, #1
 800d948:	d002      	beq.n	800d950 <get_fat+0x46>
 800d94a:	2b02      	cmp	r3, #2
 800d94c:	d056      	beq.n	800d9fc <get_fat+0xf2>
 800d94e:	e0a1      	b.n	800da94 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	60fb      	str	r3, [r7, #12]
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	085b      	lsrs	r3, r3, #1
 800d958:	68fa      	ldr	r2, [r7, #12]
 800d95a:	4413      	add	r3, r2
 800d95c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	899b      	ldrh	r3, [r3, #12]
 800d966:	4619      	mov	r1, r3
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	fbb3 f3f1 	udiv	r3, r3, r1
 800d96e:	4413      	add	r3, r2
 800d970:	4619      	mov	r1, r3
 800d972:	6938      	ldr	r0, [r7, #16]
 800d974:	f7ff ff0c 	bl	800d790 <move_window>
 800d978:	4603      	mov	r3, r0
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	f040 808d 	bne.w	800da9a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	1c5a      	adds	r2, r3, #1
 800d984:	60fa      	str	r2, [r7, #12]
 800d986:	693a      	ldr	r2, [r7, #16]
 800d988:	8992      	ldrh	r2, [r2, #12]
 800d98a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d98e:	fb01 f202 	mul.w	r2, r1, r2
 800d992:	1a9b      	subs	r3, r3, r2
 800d994:	693a      	ldr	r2, [r7, #16]
 800d996:	4413      	add	r3, r2
 800d998:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d99c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	899b      	ldrh	r3, [r3, #12]
 800d9a6:	4619      	mov	r1, r3
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	fbb3 f3f1 	udiv	r3, r3, r1
 800d9ae:	4413      	add	r3, r2
 800d9b0:	4619      	mov	r1, r3
 800d9b2:	6938      	ldr	r0, [r7, #16]
 800d9b4:	f7ff feec 	bl	800d790 <move_window>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d16f      	bne.n	800da9e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	899b      	ldrh	r3, [r3, #12]
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	fbb3 f1f2 	udiv	r1, r3, r2
 800d9ca:	fb01 f202 	mul.w	r2, r1, r2
 800d9ce:	1a9b      	subs	r3, r3, r2
 800d9d0:	693a      	ldr	r2, [r7, #16]
 800d9d2:	4413      	add	r3, r2
 800d9d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d9d8:	021b      	lsls	r3, r3, #8
 800d9da:	461a      	mov	r2, r3
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	4313      	orrs	r3, r2
 800d9e0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	f003 0301 	and.w	r3, r3, #1
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d002      	beq.n	800d9f2 <get_fat+0xe8>
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	091b      	lsrs	r3, r3, #4
 800d9f0:	e002      	b.n	800d9f8 <get_fat+0xee>
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d9f8:	617b      	str	r3, [r7, #20]
			break;
 800d9fa:	e055      	b.n	800daa8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	899b      	ldrh	r3, [r3, #12]
 800da04:	085b      	lsrs	r3, r3, #1
 800da06:	b29b      	uxth	r3, r3
 800da08:	4619      	mov	r1, r3
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	fbb3 f3f1 	udiv	r3, r3, r1
 800da10:	4413      	add	r3, r2
 800da12:	4619      	mov	r1, r3
 800da14:	6938      	ldr	r0, [r7, #16]
 800da16:	f7ff febb 	bl	800d790 <move_window>
 800da1a:	4603      	mov	r3, r0
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d140      	bne.n	800daa2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	005b      	lsls	r3, r3, #1
 800da2a:	693a      	ldr	r2, [r7, #16]
 800da2c:	8992      	ldrh	r2, [r2, #12]
 800da2e:	fbb3 f0f2 	udiv	r0, r3, r2
 800da32:	fb00 f202 	mul.w	r2, r0, r2
 800da36:	1a9b      	subs	r3, r3, r2
 800da38:	440b      	add	r3, r1
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7ff fbf8 	bl	800d230 <ld_word>
 800da40:	4603      	mov	r3, r0
 800da42:	617b      	str	r3, [r7, #20]
			break;
 800da44:	e030      	b.n	800daa8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da4a:	693b      	ldr	r3, [r7, #16]
 800da4c:	899b      	ldrh	r3, [r3, #12]
 800da4e:	089b      	lsrs	r3, r3, #2
 800da50:	b29b      	uxth	r3, r3
 800da52:	4619      	mov	r1, r3
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	fbb3 f3f1 	udiv	r3, r3, r1
 800da5a:	4413      	add	r3, r2
 800da5c:	4619      	mov	r1, r3
 800da5e:	6938      	ldr	r0, [r7, #16]
 800da60:	f7ff fe96 	bl	800d790 <move_window>
 800da64:	4603      	mov	r3, r0
 800da66:	2b00      	cmp	r3, #0
 800da68:	d11d      	bne.n	800daa6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	009b      	lsls	r3, r3, #2
 800da74:	693a      	ldr	r2, [r7, #16]
 800da76:	8992      	ldrh	r2, [r2, #12]
 800da78:	fbb3 f0f2 	udiv	r0, r3, r2
 800da7c:	fb00 f202 	mul.w	r2, r0, r2
 800da80:	1a9b      	subs	r3, r3, r2
 800da82:	440b      	add	r3, r1
 800da84:	4618      	mov	r0, r3
 800da86:	f7ff fbeb 	bl	800d260 <ld_dword>
 800da8a:	4603      	mov	r3, r0
 800da8c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800da90:	617b      	str	r3, [r7, #20]
			break;
 800da92:	e009      	b.n	800daa8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800da94:	2301      	movs	r3, #1
 800da96:	617b      	str	r3, [r7, #20]
 800da98:	e006      	b.n	800daa8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800da9a:	bf00      	nop
 800da9c:	e004      	b.n	800daa8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800da9e:	bf00      	nop
 800daa0:	e002      	b.n	800daa8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800daa2:	bf00      	nop
 800daa4:	e000      	b.n	800daa8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800daa6:	bf00      	nop
		}
	}

	return val;
 800daa8:	697b      	ldr	r3, [r7, #20]
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3718      	adds	r7, #24
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}

0800dab2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800dab2:	b590      	push	{r4, r7, lr}
 800dab4:	b089      	sub	sp, #36	; 0x24
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	60f8      	str	r0, [r7, #12]
 800daba:	60b9      	str	r1, [r7, #8]
 800dabc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800dabe:	2302      	movs	r3, #2
 800dac0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	2b01      	cmp	r3, #1
 800dac6:	f240 8102 	bls.w	800dcce <put_fat+0x21c>
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	69db      	ldr	r3, [r3, #28]
 800dace:	68ba      	ldr	r2, [r7, #8]
 800dad0:	429a      	cmp	r2, r3
 800dad2:	f080 80fc 	bcs.w	800dcce <put_fat+0x21c>
		switch (fs->fs_type) {
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	2b03      	cmp	r3, #3
 800dadc:	f000 80b6 	beq.w	800dc4c <put_fat+0x19a>
 800dae0:	2b03      	cmp	r3, #3
 800dae2:	f300 80fd 	bgt.w	800dce0 <put_fat+0x22e>
 800dae6:	2b01      	cmp	r3, #1
 800dae8:	d003      	beq.n	800daf2 <put_fat+0x40>
 800daea:	2b02      	cmp	r3, #2
 800daec:	f000 8083 	beq.w	800dbf6 <put_fat+0x144>
 800daf0:	e0f6      	b.n	800dce0 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	61bb      	str	r3, [r7, #24]
 800daf6:	69bb      	ldr	r3, [r7, #24]
 800daf8:	085b      	lsrs	r3, r3, #1
 800dafa:	69ba      	ldr	r2, [r7, #24]
 800dafc:	4413      	add	r3, r2
 800dafe:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	899b      	ldrh	r3, [r3, #12]
 800db08:	4619      	mov	r1, r3
 800db0a:	69bb      	ldr	r3, [r7, #24]
 800db0c:	fbb3 f3f1 	udiv	r3, r3, r1
 800db10:	4413      	add	r3, r2
 800db12:	4619      	mov	r1, r3
 800db14:	68f8      	ldr	r0, [r7, #12]
 800db16:	f7ff fe3b 	bl	800d790 <move_window>
 800db1a:	4603      	mov	r3, r0
 800db1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800db1e:	7ffb      	ldrb	r3, [r7, #31]
 800db20:	2b00      	cmp	r3, #0
 800db22:	f040 80d6 	bne.w	800dcd2 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800db2c:	69bb      	ldr	r3, [r7, #24]
 800db2e:	1c5a      	adds	r2, r3, #1
 800db30:	61ba      	str	r2, [r7, #24]
 800db32:	68fa      	ldr	r2, [r7, #12]
 800db34:	8992      	ldrh	r2, [r2, #12]
 800db36:	fbb3 f0f2 	udiv	r0, r3, r2
 800db3a:	fb00 f202 	mul.w	r2, r0, r2
 800db3e:	1a9b      	subs	r3, r3, r2
 800db40:	440b      	add	r3, r1
 800db42:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	f003 0301 	and.w	r3, r3, #1
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d00d      	beq.n	800db6a <put_fat+0xb8>
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	b25b      	sxtb	r3, r3
 800db54:	f003 030f 	and.w	r3, r3, #15
 800db58:	b25a      	sxtb	r2, r3
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	b2db      	uxtb	r3, r3
 800db5e:	011b      	lsls	r3, r3, #4
 800db60:	b25b      	sxtb	r3, r3
 800db62:	4313      	orrs	r3, r2
 800db64:	b25b      	sxtb	r3, r3
 800db66:	b2db      	uxtb	r3, r3
 800db68:	e001      	b.n	800db6e <put_fat+0xbc>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	b2db      	uxtb	r3, r3
 800db6e:	697a      	ldr	r2, [r7, #20]
 800db70:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	2201      	movs	r2, #1
 800db76:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	899b      	ldrh	r3, [r3, #12]
 800db80:	4619      	mov	r1, r3
 800db82:	69bb      	ldr	r3, [r7, #24]
 800db84:	fbb3 f3f1 	udiv	r3, r3, r1
 800db88:	4413      	add	r3, r2
 800db8a:	4619      	mov	r1, r3
 800db8c:	68f8      	ldr	r0, [r7, #12]
 800db8e:	f7ff fdff 	bl	800d790 <move_window>
 800db92:	4603      	mov	r3, r0
 800db94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800db96:	7ffb      	ldrb	r3, [r7, #31]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	f040 809c 	bne.w	800dcd6 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	899b      	ldrh	r3, [r3, #12]
 800dba8:	461a      	mov	r2, r3
 800dbaa:	69bb      	ldr	r3, [r7, #24]
 800dbac:	fbb3 f0f2 	udiv	r0, r3, r2
 800dbb0:	fb00 f202 	mul.w	r2, r0, r2
 800dbb4:	1a9b      	subs	r3, r3, r2
 800dbb6:	440b      	add	r3, r1
 800dbb8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	f003 0301 	and.w	r3, r3, #1
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d003      	beq.n	800dbcc <put_fat+0x11a>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	091b      	lsrs	r3, r3, #4
 800dbc8:	b2db      	uxtb	r3, r3
 800dbca:	e00e      	b.n	800dbea <put_fat+0x138>
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	b25b      	sxtb	r3, r3
 800dbd2:	f023 030f 	bic.w	r3, r3, #15
 800dbd6:	b25a      	sxtb	r2, r3
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	0a1b      	lsrs	r3, r3, #8
 800dbdc:	b25b      	sxtb	r3, r3
 800dbde:	f003 030f 	and.w	r3, r3, #15
 800dbe2:	b25b      	sxtb	r3, r3
 800dbe4:	4313      	orrs	r3, r2
 800dbe6:	b25b      	sxtb	r3, r3
 800dbe8:	b2db      	uxtb	r3, r3
 800dbea:	697a      	ldr	r2, [r7, #20]
 800dbec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	70da      	strb	r2, [r3, #3]
			break;
 800dbf4:	e074      	b.n	800dce0 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	899b      	ldrh	r3, [r3, #12]
 800dbfe:	085b      	lsrs	r3, r3, #1
 800dc00:	b29b      	uxth	r3, r3
 800dc02:	4619      	mov	r1, r3
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc0a:	4413      	add	r3, r2
 800dc0c:	4619      	mov	r1, r3
 800dc0e:	68f8      	ldr	r0, [r7, #12]
 800dc10:	f7ff fdbe 	bl	800d790 <move_window>
 800dc14:	4603      	mov	r3, r0
 800dc16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dc18:	7ffb      	ldrb	r3, [r7, #31]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d15d      	bne.n	800dcda <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	005b      	lsls	r3, r3, #1
 800dc28:	68fa      	ldr	r2, [r7, #12]
 800dc2a:	8992      	ldrh	r2, [r2, #12]
 800dc2c:	fbb3 f0f2 	udiv	r0, r3, r2
 800dc30:	fb00 f202 	mul.w	r2, r0, r2
 800dc34:	1a9b      	subs	r3, r3, r2
 800dc36:	440b      	add	r3, r1
 800dc38:	687a      	ldr	r2, [r7, #4]
 800dc3a:	b292      	uxth	r2, r2
 800dc3c:	4611      	mov	r1, r2
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f7ff fb31 	bl	800d2a6 <st_word>
			fs->wflag = 1;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2201      	movs	r2, #1
 800dc48:	70da      	strb	r2, [r3, #3]
			break;
 800dc4a:	e049      	b.n	800dce0 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	899b      	ldrh	r3, [r3, #12]
 800dc54:	089b      	lsrs	r3, r3, #2
 800dc56:	b29b      	uxth	r3, r3
 800dc58:	4619      	mov	r1, r3
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc60:	4413      	add	r3, r2
 800dc62:	4619      	mov	r1, r3
 800dc64:	68f8      	ldr	r0, [r7, #12]
 800dc66:	f7ff fd93 	bl	800d790 <move_window>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dc6e:	7ffb      	ldrb	r3, [r7, #31]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d134      	bne.n	800dcde <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	009b      	lsls	r3, r3, #2
 800dc84:	68fa      	ldr	r2, [r7, #12]
 800dc86:	8992      	ldrh	r2, [r2, #12]
 800dc88:	fbb3 f0f2 	udiv	r0, r3, r2
 800dc8c:	fb00 f202 	mul.w	r2, r0, r2
 800dc90:	1a9b      	subs	r3, r3, r2
 800dc92:	440b      	add	r3, r1
 800dc94:	4618      	mov	r0, r3
 800dc96:	f7ff fae3 	bl	800d260 <ld_dword>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800dca0:	4323      	orrs	r3, r4
 800dca2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	009b      	lsls	r3, r3, #2
 800dcae:	68fa      	ldr	r2, [r7, #12]
 800dcb0:	8992      	ldrh	r2, [r2, #12]
 800dcb2:	fbb3 f0f2 	udiv	r0, r3, r2
 800dcb6:	fb00 f202 	mul.w	r2, r0, r2
 800dcba:	1a9b      	subs	r3, r3, r2
 800dcbc:	440b      	add	r3, r1
 800dcbe:	6879      	ldr	r1, [r7, #4]
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7ff fb0b 	bl	800d2dc <st_dword>
			fs->wflag = 1;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2201      	movs	r2, #1
 800dcca:	70da      	strb	r2, [r3, #3]
			break;
 800dccc:	e008      	b.n	800dce0 <put_fat+0x22e>
		}
	}
 800dcce:	bf00      	nop
 800dcd0:	e006      	b.n	800dce0 <put_fat+0x22e>
			if (res != FR_OK) break;
 800dcd2:	bf00      	nop
 800dcd4:	e004      	b.n	800dce0 <put_fat+0x22e>
			if (res != FR_OK) break;
 800dcd6:	bf00      	nop
 800dcd8:	e002      	b.n	800dce0 <put_fat+0x22e>
			if (res != FR_OK) break;
 800dcda:	bf00      	nop
 800dcdc:	e000      	b.n	800dce0 <put_fat+0x22e>
			if (res != FR_OK) break;
 800dcde:	bf00      	nop
	return res;
 800dce0:	7ffb      	ldrb	r3, [r7, #31]
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3724      	adds	r7, #36	; 0x24
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd90      	pop	{r4, r7, pc}

0800dcea <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800dcea:	b580      	push	{r7, lr}
 800dcec:	b088      	sub	sp, #32
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	60f8      	str	r0, [r7, #12]
 800dcf2:	60b9      	str	r1, [r7, #8]
 800dcf4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	2b01      	cmp	r3, #1
 800dd04:	d904      	bls.n	800dd10 <remove_chain+0x26>
 800dd06:	69bb      	ldr	r3, [r7, #24]
 800dd08:	69db      	ldr	r3, [r3, #28]
 800dd0a:	68ba      	ldr	r2, [r7, #8]
 800dd0c:	429a      	cmp	r2, r3
 800dd0e:	d301      	bcc.n	800dd14 <remove_chain+0x2a>
 800dd10:	2302      	movs	r3, #2
 800dd12:	e04b      	b.n	800ddac <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d00c      	beq.n	800dd34 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800dd1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd1e:	6879      	ldr	r1, [r7, #4]
 800dd20:	69b8      	ldr	r0, [r7, #24]
 800dd22:	f7ff fec6 	bl	800dab2 <put_fat>
 800dd26:	4603      	mov	r3, r0
 800dd28:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800dd2a:	7ffb      	ldrb	r3, [r7, #31]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d001      	beq.n	800dd34 <remove_chain+0x4a>
 800dd30:	7ffb      	ldrb	r3, [r7, #31]
 800dd32:	e03b      	b.n	800ddac <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800dd34:	68b9      	ldr	r1, [r7, #8]
 800dd36:	68f8      	ldr	r0, [r7, #12]
 800dd38:	f7ff fde7 	bl	800d90a <get_fat>
 800dd3c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d031      	beq.n	800dda8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	2b01      	cmp	r3, #1
 800dd48:	d101      	bne.n	800dd4e <remove_chain+0x64>
 800dd4a:	2302      	movs	r3, #2
 800dd4c:	e02e      	b.n	800ddac <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd54:	d101      	bne.n	800dd5a <remove_chain+0x70>
 800dd56:	2301      	movs	r3, #1
 800dd58:	e028      	b.n	800ddac <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	68b9      	ldr	r1, [r7, #8]
 800dd5e:	69b8      	ldr	r0, [r7, #24]
 800dd60:	f7ff fea7 	bl	800dab2 <put_fat>
 800dd64:	4603      	mov	r3, r0
 800dd66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800dd68:	7ffb      	ldrb	r3, [r7, #31]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d001      	beq.n	800dd72 <remove_chain+0x88>
 800dd6e:	7ffb      	ldrb	r3, [r7, #31]
 800dd70:	e01c      	b.n	800ddac <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800dd72:	69bb      	ldr	r3, [r7, #24]
 800dd74:	699a      	ldr	r2, [r3, #24]
 800dd76:	69bb      	ldr	r3, [r7, #24]
 800dd78:	69db      	ldr	r3, [r3, #28]
 800dd7a:	3b02      	subs	r3, #2
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d20b      	bcs.n	800dd98 <remove_chain+0xae>
			fs->free_clst++;
 800dd80:	69bb      	ldr	r3, [r7, #24]
 800dd82:	699b      	ldr	r3, [r3, #24]
 800dd84:	1c5a      	adds	r2, r3, #1
 800dd86:	69bb      	ldr	r3, [r7, #24]
 800dd88:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800dd8a:	69bb      	ldr	r3, [r7, #24]
 800dd8c:	791b      	ldrb	r3, [r3, #4]
 800dd8e:	f043 0301 	orr.w	r3, r3, #1
 800dd92:	b2da      	uxtb	r2, r3
 800dd94:	69bb      	ldr	r3, [r7, #24]
 800dd96:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800dd9c:	69bb      	ldr	r3, [r7, #24]
 800dd9e:	69db      	ldr	r3, [r3, #28]
 800dda0:	68ba      	ldr	r2, [r7, #8]
 800dda2:	429a      	cmp	r2, r3
 800dda4:	d3c6      	bcc.n	800dd34 <remove_chain+0x4a>
 800dda6:	e000      	b.n	800ddaa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800dda8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ddaa:	2300      	movs	r3, #0
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	3720      	adds	r7, #32
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b088      	sub	sp, #32
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
 800ddbc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d10d      	bne.n	800dde6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	695b      	ldr	r3, [r3, #20]
 800ddce:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ddd0:	69bb      	ldr	r3, [r7, #24]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d004      	beq.n	800dde0 <create_chain+0x2c>
 800ddd6:	693b      	ldr	r3, [r7, #16]
 800ddd8:	69db      	ldr	r3, [r3, #28]
 800ddda:	69ba      	ldr	r2, [r7, #24]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d31b      	bcc.n	800de18 <create_chain+0x64>
 800dde0:	2301      	movs	r3, #1
 800dde2:	61bb      	str	r3, [r7, #24]
 800dde4:	e018      	b.n	800de18 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800dde6:	6839      	ldr	r1, [r7, #0]
 800dde8:	6878      	ldr	r0, [r7, #4]
 800ddea:	f7ff fd8e 	bl	800d90a <get_fat>
 800ddee:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	2b01      	cmp	r3, #1
 800ddf4:	d801      	bhi.n	800ddfa <create_chain+0x46>
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	e070      	b.n	800dedc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de00:	d101      	bne.n	800de06 <create_chain+0x52>
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	e06a      	b.n	800dedc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	69db      	ldr	r3, [r3, #28]
 800de0a:	68fa      	ldr	r2, [r7, #12]
 800de0c:	429a      	cmp	r2, r3
 800de0e:	d201      	bcs.n	800de14 <create_chain+0x60>
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	e063      	b.n	800dedc <create_chain+0x128>
		scl = clst;
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800de18:	69bb      	ldr	r3, [r7, #24]
 800de1a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800de1c:	69fb      	ldr	r3, [r7, #28]
 800de1e:	3301      	adds	r3, #1
 800de20:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800de22:	693b      	ldr	r3, [r7, #16]
 800de24:	69db      	ldr	r3, [r3, #28]
 800de26:	69fa      	ldr	r2, [r7, #28]
 800de28:	429a      	cmp	r2, r3
 800de2a:	d307      	bcc.n	800de3c <create_chain+0x88>
				ncl = 2;
 800de2c:	2302      	movs	r3, #2
 800de2e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800de30:	69fa      	ldr	r2, [r7, #28]
 800de32:	69bb      	ldr	r3, [r7, #24]
 800de34:	429a      	cmp	r2, r3
 800de36:	d901      	bls.n	800de3c <create_chain+0x88>
 800de38:	2300      	movs	r3, #0
 800de3a:	e04f      	b.n	800dedc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800de3c:	69f9      	ldr	r1, [r7, #28]
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f7ff fd63 	bl	800d90a <get_fat>
 800de44:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d00e      	beq.n	800de6a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2b01      	cmp	r3, #1
 800de50:	d003      	beq.n	800de5a <create_chain+0xa6>
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de58:	d101      	bne.n	800de5e <create_chain+0xaa>
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	e03e      	b.n	800dedc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800de5e:	69fa      	ldr	r2, [r7, #28]
 800de60:	69bb      	ldr	r3, [r7, #24]
 800de62:	429a      	cmp	r2, r3
 800de64:	d1da      	bne.n	800de1c <create_chain+0x68>
 800de66:	2300      	movs	r3, #0
 800de68:	e038      	b.n	800dedc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800de6a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800de6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de70:	69f9      	ldr	r1, [r7, #28]
 800de72:	6938      	ldr	r0, [r7, #16]
 800de74:	f7ff fe1d 	bl	800dab2 <put_fat>
 800de78:	4603      	mov	r3, r0
 800de7a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800de7c:	7dfb      	ldrb	r3, [r7, #23]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d109      	bne.n	800de96 <create_chain+0xe2>
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d006      	beq.n	800de96 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800de88:	69fa      	ldr	r2, [r7, #28]
 800de8a:	6839      	ldr	r1, [r7, #0]
 800de8c:	6938      	ldr	r0, [r7, #16]
 800de8e:	f7ff fe10 	bl	800dab2 <put_fat>
 800de92:	4603      	mov	r3, r0
 800de94:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800de96:	7dfb      	ldrb	r3, [r7, #23]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d116      	bne.n	800deca <create_chain+0x116>
		fs->last_clst = ncl;
 800de9c:	693b      	ldr	r3, [r7, #16]
 800de9e:	69fa      	ldr	r2, [r7, #28]
 800dea0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	699a      	ldr	r2, [r3, #24]
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	69db      	ldr	r3, [r3, #28]
 800deaa:	3b02      	subs	r3, #2
 800deac:	429a      	cmp	r2, r3
 800deae:	d804      	bhi.n	800deba <create_chain+0x106>
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	699b      	ldr	r3, [r3, #24]
 800deb4:	1e5a      	subs	r2, r3, #1
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	791b      	ldrb	r3, [r3, #4]
 800debe:	f043 0301 	orr.w	r3, r3, #1
 800dec2:	b2da      	uxtb	r2, r3
 800dec4:	693b      	ldr	r3, [r7, #16]
 800dec6:	711a      	strb	r2, [r3, #4]
 800dec8:	e007      	b.n	800deda <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800deca:	7dfb      	ldrb	r3, [r7, #23]
 800decc:	2b01      	cmp	r3, #1
 800dece:	d102      	bne.n	800ded6 <create_chain+0x122>
 800ded0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ded4:	e000      	b.n	800ded8 <create_chain+0x124>
 800ded6:	2301      	movs	r3, #1
 800ded8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800deda:	69fb      	ldr	r3, [r7, #28]
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3720      	adds	r7, #32
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800dee4:	b480      	push	{r7}
 800dee6:	b087      	sub	sp, #28
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
 800deec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800def8:	3304      	adds	r3, #4
 800defa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	899b      	ldrh	r3, [r3, #12]
 800df00:	461a      	mov	r2, r3
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	fbb3 f3f2 	udiv	r3, r3, r2
 800df08:	68fa      	ldr	r2, [r7, #12]
 800df0a:	8952      	ldrh	r2, [r2, #10]
 800df0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800df10:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	1d1a      	adds	r2, r3, #4
 800df16:	613a      	str	r2, [r7, #16]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d101      	bne.n	800df26 <clmt_clust+0x42>
 800df22:	2300      	movs	r3, #0
 800df24:	e010      	b.n	800df48 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800df26:	697a      	ldr	r2, [r7, #20]
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	429a      	cmp	r2, r3
 800df2c:	d307      	bcc.n	800df3e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800df2e:	697a      	ldr	r2, [r7, #20]
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	1ad3      	subs	r3, r2, r3
 800df34:	617b      	str	r3, [r7, #20]
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	3304      	adds	r3, #4
 800df3a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800df3c:	e7e9      	b.n	800df12 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800df3e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	681a      	ldr	r2, [r3, #0]
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	4413      	add	r3, r2
}
 800df48:	4618      	mov	r0, r3
 800df4a:	371c      	adds	r7, #28
 800df4c:	46bd      	mov	sp, r7
 800df4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df52:	4770      	bx	lr

0800df54 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b086      	sub	sp, #24
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
 800df5c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800df6a:	d204      	bcs.n	800df76 <dir_sdi+0x22>
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	f003 031f 	and.w	r3, r3, #31
 800df72:	2b00      	cmp	r3, #0
 800df74:	d001      	beq.n	800df7a <dir_sdi+0x26>
		return FR_INT_ERR;
 800df76:	2302      	movs	r3, #2
 800df78:	e071      	b.n	800e05e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	683a      	ldr	r2, [r7, #0]
 800df7e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	689b      	ldr	r3, [r3, #8]
 800df84:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d106      	bne.n	800df9a <dir_sdi+0x46>
 800df8c:	693b      	ldr	r3, [r7, #16]
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	2b02      	cmp	r3, #2
 800df92:	d902      	bls.n	800df9a <dir_sdi+0x46>
		clst = fs->dirbase;
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df98:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d10c      	bne.n	800dfba <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	095b      	lsrs	r3, r3, #5
 800dfa4:	693a      	ldr	r2, [r7, #16]
 800dfa6:	8912      	ldrh	r2, [r2, #8]
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	d301      	bcc.n	800dfb0 <dir_sdi+0x5c>
 800dfac:	2302      	movs	r3, #2
 800dfae:	e056      	b.n	800e05e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	61da      	str	r2, [r3, #28]
 800dfb8:	e02d      	b.n	800e016 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	895b      	ldrh	r3, [r3, #10]
 800dfbe:	461a      	mov	r2, r3
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	899b      	ldrh	r3, [r3, #12]
 800dfc4:	fb02 f303 	mul.w	r3, r2, r3
 800dfc8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dfca:	e019      	b.n	800e000 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6979      	ldr	r1, [r7, #20]
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f7ff fc9a 	bl	800d90a <get_fat>
 800dfd6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfde:	d101      	bne.n	800dfe4 <dir_sdi+0x90>
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	e03c      	b.n	800e05e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800dfe4:	697b      	ldr	r3, [r7, #20]
 800dfe6:	2b01      	cmp	r3, #1
 800dfe8:	d904      	bls.n	800dff4 <dir_sdi+0xa0>
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	69db      	ldr	r3, [r3, #28]
 800dfee:	697a      	ldr	r2, [r7, #20]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d301      	bcc.n	800dff8 <dir_sdi+0xa4>
 800dff4:	2302      	movs	r3, #2
 800dff6:	e032      	b.n	800e05e <dir_sdi+0x10a>
			ofs -= csz;
 800dff8:	683a      	ldr	r2, [r7, #0]
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	1ad3      	subs	r3, r2, r3
 800dffe:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e000:	683a      	ldr	r2, [r7, #0]
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	429a      	cmp	r2, r3
 800e006:	d2e1      	bcs.n	800dfcc <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800e008:	6979      	ldr	r1, [r7, #20]
 800e00a:	6938      	ldr	r0, [r7, #16]
 800e00c:	f7ff fc5e 	bl	800d8cc <clust2sect>
 800e010:	4602      	mov	r2, r0
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	697a      	ldr	r2, [r7, #20]
 800e01a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	69db      	ldr	r3, [r3, #28]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d101      	bne.n	800e028 <dir_sdi+0xd4>
 800e024:	2302      	movs	r3, #2
 800e026:	e01a      	b.n	800e05e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	69da      	ldr	r2, [r3, #28]
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	899b      	ldrh	r3, [r3, #12]
 800e030:	4619      	mov	r1, r3
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	fbb3 f3f1 	udiv	r3, r3, r1
 800e038:	441a      	add	r2, r3
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	899b      	ldrh	r3, [r3, #12]
 800e048:	461a      	mov	r2, r3
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	fbb3 f0f2 	udiv	r0, r3, r2
 800e050:	fb00 f202 	mul.w	r2, r0, r2
 800e054:	1a9b      	subs	r3, r3, r2
 800e056:	18ca      	adds	r2, r1, r3
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e05c:	2300      	movs	r3, #0
}
 800e05e:	4618      	mov	r0, r3
 800e060:	3718      	adds	r7, #24
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}

0800e066 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e066:	b580      	push	{r7, lr}
 800e068:	b086      	sub	sp, #24
 800e06a:	af00      	add	r7, sp, #0
 800e06c:	6078      	str	r0, [r7, #4]
 800e06e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	695b      	ldr	r3, [r3, #20]
 800e07a:	3320      	adds	r3, #32
 800e07c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	69db      	ldr	r3, [r3, #28]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d003      	beq.n	800e08e <dir_next+0x28>
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e08c:	d301      	bcc.n	800e092 <dir_next+0x2c>
 800e08e:	2304      	movs	r3, #4
 800e090:	e0bb      	b.n	800e20a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	899b      	ldrh	r3, [r3, #12]
 800e096:	461a      	mov	r2, r3
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e09e:	fb01 f202 	mul.w	r2, r1, r2
 800e0a2:	1a9b      	subs	r3, r3, r2
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	f040 809d 	bne.w	800e1e4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	69db      	ldr	r3, [r3, #28]
 800e0ae:	1c5a      	adds	r2, r3, #1
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	699b      	ldr	r3, [r3, #24]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d10b      	bne.n	800e0d4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	095b      	lsrs	r3, r3, #5
 800e0c0:	68fa      	ldr	r2, [r7, #12]
 800e0c2:	8912      	ldrh	r2, [r2, #8]
 800e0c4:	4293      	cmp	r3, r2
 800e0c6:	f0c0 808d 	bcc.w	800e1e4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	61da      	str	r2, [r3, #28]
 800e0d0:	2304      	movs	r3, #4
 800e0d2:	e09a      	b.n	800e20a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	899b      	ldrh	r3, [r3, #12]
 800e0d8:	461a      	mov	r2, r3
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0e0:	68fa      	ldr	r2, [r7, #12]
 800e0e2:	8952      	ldrh	r2, [r2, #10]
 800e0e4:	3a01      	subs	r2, #1
 800e0e6:	4013      	ands	r3, r2
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d17b      	bne.n	800e1e4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e0ec:	687a      	ldr	r2, [r7, #4]
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	699b      	ldr	r3, [r3, #24]
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	4610      	mov	r0, r2
 800e0f6:	f7ff fc08 	bl	800d90a <get_fat>
 800e0fa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	2b01      	cmp	r3, #1
 800e100:	d801      	bhi.n	800e106 <dir_next+0xa0>
 800e102:	2302      	movs	r3, #2
 800e104:	e081      	b.n	800e20a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e10c:	d101      	bne.n	800e112 <dir_next+0xac>
 800e10e:	2301      	movs	r3, #1
 800e110:	e07b      	b.n	800e20a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	69db      	ldr	r3, [r3, #28]
 800e116:	697a      	ldr	r2, [r7, #20]
 800e118:	429a      	cmp	r2, r3
 800e11a:	d359      	bcc.n	800e1d0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d104      	bne.n	800e12c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2200      	movs	r2, #0
 800e126:	61da      	str	r2, [r3, #28]
 800e128:	2304      	movs	r3, #4
 800e12a:	e06e      	b.n	800e20a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e12c:	687a      	ldr	r2, [r7, #4]
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	699b      	ldr	r3, [r3, #24]
 800e132:	4619      	mov	r1, r3
 800e134:	4610      	mov	r0, r2
 800e136:	f7ff fe3d 	bl	800ddb4 <create_chain>
 800e13a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d101      	bne.n	800e146 <dir_next+0xe0>
 800e142:	2307      	movs	r3, #7
 800e144:	e061      	b.n	800e20a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	2b01      	cmp	r3, #1
 800e14a:	d101      	bne.n	800e150 <dir_next+0xea>
 800e14c:	2302      	movs	r3, #2
 800e14e:	e05c      	b.n	800e20a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e156:	d101      	bne.n	800e15c <dir_next+0xf6>
 800e158:	2301      	movs	r3, #1
 800e15a:	e056      	b.n	800e20a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e15c:	68f8      	ldr	r0, [r7, #12]
 800e15e:	f7ff fad3 	bl	800d708 <sync_window>
 800e162:	4603      	mov	r3, r0
 800e164:	2b00      	cmp	r3, #0
 800e166:	d001      	beq.n	800e16c <dir_next+0x106>
 800e168:	2301      	movs	r3, #1
 800e16a:	e04e      	b.n	800e20a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	899b      	ldrh	r3, [r3, #12]
 800e176:	461a      	mov	r2, r3
 800e178:	2100      	movs	r1, #0
 800e17a:	f7ff f8fc 	bl	800d376 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e17e:	2300      	movs	r3, #0
 800e180:	613b      	str	r3, [r7, #16]
 800e182:	6979      	ldr	r1, [r7, #20]
 800e184:	68f8      	ldr	r0, [r7, #12]
 800e186:	f7ff fba1 	bl	800d8cc <clust2sect>
 800e18a:	4602      	mov	r2, r0
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	635a      	str	r2, [r3, #52]	; 0x34
 800e190:	e012      	b.n	800e1b8 <dir_next+0x152>
						fs->wflag = 1;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2201      	movs	r2, #1
 800e196:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e198:	68f8      	ldr	r0, [r7, #12]
 800e19a:	f7ff fab5 	bl	800d708 <sync_window>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d001      	beq.n	800e1a8 <dir_next+0x142>
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	e030      	b.n	800e20a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	3301      	adds	r3, #1
 800e1ac:	613b      	str	r3, [r7, #16]
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1b2:	1c5a      	adds	r2, r3, #1
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	635a      	str	r2, [r3, #52]	; 0x34
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	895b      	ldrh	r3, [r3, #10]
 800e1bc:	461a      	mov	r2, r3
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	4293      	cmp	r3, r2
 800e1c2:	d3e6      	bcc.n	800e192 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	1ad2      	subs	r2, r2, r3
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	697a      	ldr	r2, [r7, #20]
 800e1d4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e1d6:	6979      	ldr	r1, [r7, #20]
 800e1d8:	68f8      	ldr	r0, [r7, #12]
 800e1da:	f7ff fb77 	bl	800d8cc <clust2sect>
 800e1de:	4602      	mov	r2, r0
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	68ba      	ldr	r2, [r7, #8]
 800e1e8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	899b      	ldrh	r3, [r3, #12]
 800e1f4:	461a      	mov	r2, r3
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	fbb3 f0f2 	udiv	r0, r3, r2
 800e1fc:	fb00 f202 	mul.w	r2, r0, r2
 800e200:	1a9b      	subs	r3, r3, r2
 800e202:	18ca      	adds	r2, r1, r3
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e208:	2300      	movs	r3, #0
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	3718      	adds	r7, #24
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}

0800e212 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e212:	b580      	push	{r7, lr}
 800e214:	b086      	sub	sp, #24
 800e216:	af00      	add	r7, sp, #0
 800e218:	6078      	str	r0, [r7, #4]
 800e21a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e222:	2100      	movs	r1, #0
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f7ff fe95 	bl	800df54 <dir_sdi>
 800e22a:	4603      	mov	r3, r0
 800e22c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e22e:	7dfb      	ldrb	r3, [r7, #23]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d12b      	bne.n	800e28c <dir_alloc+0x7a>
		n = 0;
 800e234:	2300      	movs	r3, #0
 800e236:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	69db      	ldr	r3, [r3, #28]
 800e23c:	4619      	mov	r1, r3
 800e23e:	68f8      	ldr	r0, [r7, #12]
 800e240:	f7ff faa6 	bl	800d790 <move_window>
 800e244:	4603      	mov	r3, r0
 800e246:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e248:	7dfb      	ldrb	r3, [r7, #23]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d11d      	bne.n	800e28a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6a1b      	ldr	r3, [r3, #32]
 800e252:	781b      	ldrb	r3, [r3, #0]
 800e254:	2be5      	cmp	r3, #229	; 0xe5
 800e256:	d004      	beq.n	800e262 <dir_alloc+0x50>
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6a1b      	ldr	r3, [r3, #32]
 800e25c:	781b      	ldrb	r3, [r3, #0]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d107      	bne.n	800e272 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	3301      	adds	r3, #1
 800e266:	613b      	str	r3, [r7, #16]
 800e268:	693a      	ldr	r2, [r7, #16]
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	429a      	cmp	r2, r3
 800e26e:	d102      	bne.n	800e276 <dir_alloc+0x64>
 800e270:	e00c      	b.n	800e28c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e272:	2300      	movs	r3, #0
 800e274:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e276:	2101      	movs	r1, #1
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f7ff fef4 	bl	800e066 <dir_next>
 800e27e:	4603      	mov	r3, r0
 800e280:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e282:	7dfb      	ldrb	r3, [r7, #23]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d0d7      	beq.n	800e238 <dir_alloc+0x26>
 800e288:	e000      	b.n	800e28c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e28a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e28c:	7dfb      	ldrb	r3, [r7, #23]
 800e28e:	2b04      	cmp	r3, #4
 800e290:	d101      	bne.n	800e296 <dir_alloc+0x84>
 800e292:	2307      	movs	r3, #7
 800e294:	75fb      	strb	r3, [r7, #23]
	return res;
 800e296:	7dfb      	ldrb	r3, [r7, #23]
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3718      	adds	r7, #24
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}

0800e2a0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
 800e2a8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	331a      	adds	r3, #26
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f7fe ffbe 	bl	800d230 <ld_word>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	2b03      	cmp	r3, #3
 800e2be:	d109      	bne.n	800e2d4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	3314      	adds	r3, #20
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7fe ffb3 	bl	800d230 <ld_word>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	041b      	lsls	r3, r3, #16
 800e2ce:	68fa      	ldr	r2, [r7, #12]
 800e2d0:	4313      	orrs	r3, r2
 800e2d2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
}
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	3710      	adds	r7, #16
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}

0800e2de <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e2de:	b580      	push	{r7, lr}
 800e2e0:	b084      	sub	sp, #16
 800e2e2:	af00      	add	r7, sp, #0
 800e2e4:	60f8      	str	r0, [r7, #12]
 800e2e6:	60b9      	str	r1, [r7, #8]
 800e2e8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	331a      	adds	r3, #26
 800e2ee:	687a      	ldr	r2, [r7, #4]
 800e2f0:	b292      	uxth	r2, r2
 800e2f2:	4611      	mov	r1, r2
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f7fe ffd6 	bl	800d2a6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	781b      	ldrb	r3, [r3, #0]
 800e2fe:	2b03      	cmp	r3, #3
 800e300:	d109      	bne.n	800e316 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	f103 0214 	add.w	r2, r3, #20
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	0c1b      	lsrs	r3, r3, #16
 800e30c:	b29b      	uxth	r3, r3
 800e30e:	4619      	mov	r1, r3
 800e310:	4610      	mov	r0, r2
 800e312:	f7fe ffc8 	bl	800d2a6 <st_word>
	}
}
 800e316:	bf00      	nop
 800e318:	3710      	adds	r7, #16
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}
	...

0800e320 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e320:	b590      	push	{r4, r7, lr}
 800e322:	b087      	sub	sp, #28
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
 800e328:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	331a      	adds	r3, #26
 800e32e:	4618      	mov	r0, r3
 800e330:	f7fe ff7e 	bl	800d230 <ld_word>
 800e334:	4603      	mov	r3, r0
 800e336:	2b00      	cmp	r3, #0
 800e338:	d001      	beq.n	800e33e <cmp_lfn+0x1e>
 800e33a:	2300      	movs	r3, #0
 800e33c:	e059      	b.n	800e3f2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	781b      	ldrb	r3, [r3, #0]
 800e342:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e346:	1e5a      	subs	r2, r3, #1
 800e348:	4613      	mov	r3, r2
 800e34a:	005b      	lsls	r3, r3, #1
 800e34c:	4413      	add	r3, r2
 800e34e:	009b      	lsls	r3, r3, #2
 800e350:	4413      	add	r3, r2
 800e352:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e354:	2301      	movs	r3, #1
 800e356:	81fb      	strh	r3, [r7, #14]
 800e358:	2300      	movs	r3, #0
 800e35a:	613b      	str	r3, [r7, #16]
 800e35c:	e033      	b.n	800e3c6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e35e:	4a27      	ldr	r2, [pc, #156]	; (800e3fc <cmp_lfn+0xdc>)
 800e360:	693b      	ldr	r3, [r7, #16]
 800e362:	4413      	add	r3, r2
 800e364:	781b      	ldrb	r3, [r3, #0]
 800e366:	461a      	mov	r2, r3
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	4413      	add	r3, r2
 800e36c:	4618      	mov	r0, r3
 800e36e:	f7fe ff5f 	bl	800d230 <ld_word>
 800e372:	4603      	mov	r3, r0
 800e374:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e376:	89fb      	ldrh	r3, [r7, #14]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d01a      	beq.n	800e3b2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	2bfe      	cmp	r3, #254	; 0xfe
 800e380:	d812      	bhi.n	800e3a8 <cmp_lfn+0x88>
 800e382:	89bb      	ldrh	r3, [r7, #12]
 800e384:	4618      	mov	r0, r3
 800e386:	f002 fb5b 	bl	8010a40 <ff_wtoupper>
 800e38a:	4603      	mov	r3, r0
 800e38c:	461c      	mov	r4, r3
 800e38e:	697b      	ldr	r3, [r7, #20]
 800e390:	1c5a      	adds	r2, r3, #1
 800e392:	617a      	str	r2, [r7, #20]
 800e394:	005b      	lsls	r3, r3, #1
 800e396:	687a      	ldr	r2, [r7, #4]
 800e398:	4413      	add	r3, r2
 800e39a:	881b      	ldrh	r3, [r3, #0]
 800e39c:	4618      	mov	r0, r3
 800e39e:	f002 fb4f 	bl	8010a40 <ff_wtoupper>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	429c      	cmp	r4, r3
 800e3a6:	d001      	beq.n	800e3ac <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	e022      	b.n	800e3f2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800e3ac:	89bb      	ldrh	r3, [r7, #12]
 800e3ae:	81fb      	strh	r3, [r7, #14]
 800e3b0:	e006      	b.n	800e3c0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e3b2:	89bb      	ldrh	r3, [r7, #12]
 800e3b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e3b8:	4293      	cmp	r3, r2
 800e3ba:	d001      	beq.n	800e3c0 <cmp_lfn+0xa0>
 800e3bc:	2300      	movs	r3, #0
 800e3be:	e018      	b.n	800e3f2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	613b      	str	r3, [r7, #16]
 800e3c6:	693b      	ldr	r3, [r7, #16]
 800e3c8:	2b0c      	cmp	r3, #12
 800e3ca:	d9c8      	bls.n	800e35e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	781b      	ldrb	r3, [r3, #0]
 800e3d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d00b      	beq.n	800e3f0 <cmp_lfn+0xd0>
 800e3d8:	89fb      	ldrh	r3, [r7, #14]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d008      	beq.n	800e3f0 <cmp_lfn+0xd0>
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	005b      	lsls	r3, r3, #1
 800e3e2:	687a      	ldr	r2, [r7, #4]
 800e3e4:	4413      	add	r3, r2
 800e3e6:	881b      	ldrh	r3, [r3, #0]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d001      	beq.n	800e3f0 <cmp_lfn+0xd0>
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	e000      	b.n	800e3f2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e3f0:	2301      	movs	r3, #1
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	371c      	adds	r7, #28
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd90      	pop	{r4, r7, pc}
 800e3fa:	bf00      	nop
 800e3fc:	080126ec 	.word	0x080126ec

0800e400 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b086      	sub	sp, #24
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
 800e408:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	331a      	adds	r3, #26
 800e40e:	4618      	mov	r0, r3
 800e410:	f7fe ff0e 	bl	800d230 <ld_word>
 800e414:	4603      	mov	r3, r0
 800e416:	2b00      	cmp	r3, #0
 800e418:	d001      	beq.n	800e41e <pick_lfn+0x1e>
 800e41a:	2300      	movs	r3, #0
 800e41c:	e04d      	b.n	800e4ba <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	781b      	ldrb	r3, [r3, #0]
 800e422:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e426:	1e5a      	subs	r2, r3, #1
 800e428:	4613      	mov	r3, r2
 800e42a:	005b      	lsls	r3, r3, #1
 800e42c:	4413      	add	r3, r2
 800e42e:	009b      	lsls	r3, r3, #2
 800e430:	4413      	add	r3, r2
 800e432:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e434:	2301      	movs	r3, #1
 800e436:	81fb      	strh	r3, [r7, #14]
 800e438:	2300      	movs	r3, #0
 800e43a:	613b      	str	r3, [r7, #16]
 800e43c:	e028      	b.n	800e490 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e43e:	4a21      	ldr	r2, [pc, #132]	; (800e4c4 <pick_lfn+0xc4>)
 800e440:	693b      	ldr	r3, [r7, #16]
 800e442:	4413      	add	r3, r2
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	461a      	mov	r2, r3
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	4413      	add	r3, r2
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7fe feef 	bl	800d230 <ld_word>
 800e452:	4603      	mov	r3, r0
 800e454:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e456:	89fb      	ldrh	r3, [r7, #14]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d00f      	beq.n	800e47c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	2bfe      	cmp	r3, #254	; 0xfe
 800e460:	d901      	bls.n	800e466 <pick_lfn+0x66>
 800e462:	2300      	movs	r3, #0
 800e464:	e029      	b.n	800e4ba <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800e466:	89bb      	ldrh	r3, [r7, #12]
 800e468:	81fb      	strh	r3, [r7, #14]
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	1c5a      	adds	r2, r3, #1
 800e46e:	617a      	str	r2, [r7, #20]
 800e470:	005b      	lsls	r3, r3, #1
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	4413      	add	r3, r2
 800e476:	89fa      	ldrh	r2, [r7, #14]
 800e478:	801a      	strh	r2, [r3, #0]
 800e47a:	e006      	b.n	800e48a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e47c:	89bb      	ldrh	r3, [r7, #12]
 800e47e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e482:	4293      	cmp	r3, r2
 800e484:	d001      	beq.n	800e48a <pick_lfn+0x8a>
 800e486:	2300      	movs	r3, #0
 800e488:	e017      	b.n	800e4ba <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e48a:	693b      	ldr	r3, [r7, #16]
 800e48c:	3301      	adds	r3, #1
 800e48e:	613b      	str	r3, [r7, #16]
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	2b0c      	cmp	r3, #12
 800e494:	d9d3      	bls.n	800e43e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d00a      	beq.n	800e4b8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	2bfe      	cmp	r3, #254	; 0xfe
 800e4a6:	d901      	bls.n	800e4ac <pick_lfn+0xac>
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	e006      	b.n	800e4ba <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	005b      	lsls	r3, r3, #1
 800e4b0:	687a      	ldr	r2, [r7, #4]
 800e4b2:	4413      	add	r3, r2
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800e4b8:	2301      	movs	r3, #1
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3718      	adds	r7, #24
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}
 800e4c2:	bf00      	nop
 800e4c4:	080126ec 	.word	0x080126ec

0800e4c8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b088      	sub	sp, #32
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	60f8      	str	r0, [r7, #12]
 800e4d0:	60b9      	str	r1, [r7, #8]
 800e4d2:	4611      	mov	r1, r2
 800e4d4:	461a      	mov	r2, r3
 800e4d6:	460b      	mov	r3, r1
 800e4d8:	71fb      	strb	r3, [r7, #7]
 800e4da:	4613      	mov	r3, r2
 800e4dc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	330d      	adds	r3, #13
 800e4e2:	79ba      	ldrb	r2, [r7, #6]
 800e4e4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	330b      	adds	r3, #11
 800e4ea:	220f      	movs	r2, #15
 800e4ec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	330c      	adds	r3, #12
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	331a      	adds	r3, #26
 800e4fa:	2100      	movs	r1, #0
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7fe fed2 	bl	800d2a6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e502:	79fb      	ldrb	r3, [r7, #7]
 800e504:	1e5a      	subs	r2, r3, #1
 800e506:	4613      	mov	r3, r2
 800e508:	005b      	lsls	r3, r3, #1
 800e50a:	4413      	add	r3, r2
 800e50c:	009b      	lsls	r3, r3, #2
 800e50e:	4413      	add	r3, r2
 800e510:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e512:	2300      	movs	r3, #0
 800e514:	82fb      	strh	r3, [r7, #22]
 800e516:	2300      	movs	r3, #0
 800e518:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e51a:	8afb      	ldrh	r3, [r7, #22]
 800e51c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e520:	4293      	cmp	r3, r2
 800e522:	d007      	beq.n	800e534 <put_lfn+0x6c>
 800e524:	69fb      	ldr	r3, [r7, #28]
 800e526:	1c5a      	adds	r2, r3, #1
 800e528:	61fa      	str	r2, [r7, #28]
 800e52a:	005b      	lsls	r3, r3, #1
 800e52c:	68fa      	ldr	r2, [r7, #12]
 800e52e:	4413      	add	r3, r2
 800e530:	881b      	ldrh	r3, [r3, #0]
 800e532:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e534:	4a17      	ldr	r2, [pc, #92]	; (800e594 <put_lfn+0xcc>)
 800e536:	69bb      	ldr	r3, [r7, #24]
 800e538:	4413      	add	r3, r2
 800e53a:	781b      	ldrb	r3, [r3, #0]
 800e53c:	461a      	mov	r2, r3
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	4413      	add	r3, r2
 800e542:	8afa      	ldrh	r2, [r7, #22]
 800e544:	4611      	mov	r1, r2
 800e546:	4618      	mov	r0, r3
 800e548:	f7fe fead 	bl	800d2a6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e54c:	8afb      	ldrh	r3, [r7, #22]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d102      	bne.n	800e558 <put_lfn+0x90>
 800e552:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e556:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e558:	69bb      	ldr	r3, [r7, #24]
 800e55a:	3301      	adds	r3, #1
 800e55c:	61bb      	str	r3, [r7, #24]
 800e55e:	69bb      	ldr	r3, [r7, #24]
 800e560:	2b0c      	cmp	r3, #12
 800e562:	d9da      	bls.n	800e51a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e564:	8afb      	ldrh	r3, [r7, #22]
 800e566:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e56a:	4293      	cmp	r3, r2
 800e56c:	d006      	beq.n	800e57c <put_lfn+0xb4>
 800e56e:	69fb      	ldr	r3, [r7, #28]
 800e570:	005b      	lsls	r3, r3, #1
 800e572:	68fa      	ldr	r2, [r7, #12]
 800e574:	4413      	add	r3, r2
 800e576:	881b      	ldrh	r3, [r3, #0]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d103      	bne.n	800e584 <put_lfn+0xbc>
 800e57c:	79fb      	ldrb	r3, [r7, #7]
 800e57e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e582:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	79fa      	ldrb	r2, [r7, #7]
 800e588:	701a      	strb	r2, [r3, #0]
}
 800e58a:	bf00      	nop
 800e58c:	3720      	adds	r7, #32
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}
 800e592:	bf00      	nop
 800e594:	080126ec 	.word	0x080126ec

0800e598 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b08c      	sub	sp, #48	; 0x30
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	60f8      	str	r0, [r7, #12]
 800e5a0:	60b9      	str	r1, [r7, #8]
 800e5a2:	607a      	str	r2, [r7, #4]
 800e5a4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e5a6:	220b      	movs	r2, #11
 800e5a8:	68b9      	ldr	r1, [r7, #8]
 800e5aa:	68f8      	ldr	r0, [r7, #12]
 800e5ac:	f7fe fec2 	bl	800d334 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	2b05      	cmp	r3, #5
 800e5b4:	d92b      	bls.n	800e60e <gen_numname+0x76>
		sr = seq;
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e5ba:	e022      	b.n	800e602 <gen_numname+0x6a>
			wc = *lfn++;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	1c9a      	adds	r2, r3, #2
 800e5c0:	607a      	str	r2, [r7, #4]
 800e5c2:	881b      	ldrh	r3, [r3, #0]
 800e5c4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800e5ca:	e017      	b.n	800e5fc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e5cc:	69fb      	ldr	r3, [r7, #28]
 800e5ce:	005a      	lsls	r2, r3, #1
 800e5d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e5d2:	f003 0301 	and.w	r3, r3, #1
 800e5d6:	4413      	add	r3, r2
 800e5d8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e5da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e5dc:	085b      	lsrs	r3, r3, #1
 800e5de:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e5e0:	69fb      	ldr	r3, [r7, #28]
 800e5e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d005      	beq.n	800e5f6 <gen_numname+0x5e>
 800e5ea:	69fb      	ldr	r3, [r7, #28]
 800e5ec:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800e5f0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800e5f4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f8:	3301      	adds	r3, #1
 800e5fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800e5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5fe:	2b0f      	cmp	r3, #15
 800e600:	d9e4      	bls.n	800e5cc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	881b      	ldrh	r3, [r3, #0]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d1d8      	bne.n	800e5bc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e60a:	69fb      	ldr	r3, [r7, #28]
 800e60c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e60e:	2307      	movs	r3, #7
 800e610:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	b2db      	uxtb	r3, r3
 800e616:	f003 030f 	and.w	r3, r3, #15
 800e61a:	b2db      	uxtb	r3, r3
 800e61c:	3330      	adds	r3, #48	; 0x30
 800e61e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e622:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e626:	2b39      	cmp	r3, #57	; 0x39
 800e628:	d904      	bls.n	800e634 <gen_numname+0x9c>
 800e62a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e62e:	3307      	adds	r3, #7
 800e630:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e636:	1e5a      	subs	r2, r3, #1
 800e638:	62ba      	str	r2, [r7, #40]	; 0x28
 800e63a:	3330      	adds	r3, #48	; 0x30
 800e63c:	443b      	add	r3, r7
 800e63e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e642:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	091b      	lsrs	r3, r3, #4
 800e64a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d1df      	bne.n	800e612 <gen_numname+0x7a>
	ns[i] = '~';
 800e652:	f107 0214 	add.w	r2, r7, #20
 800e656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e658:	4413      	add	r3, r2
 800e65a:	227e      	movs	r2, #126	; 0x7e
 800e65c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e65e:	2300      	movs	r3, #0
 800e660:	627b      	str	r3, [r7, #36]	; 0x24
 800e662:	e002      	b.n	800e66a <gen_numname+0xd2>
 800e664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e666:	3301      	adds	r3, #1
 800e668:	627b      	str	r3, [r7, #36]	; 0x24
 800e66a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e66e:	429a      	cmp	r2, r3
 800e670:	d205      	bcs.n	800e67e <gen_numname+0xe6>
 800e672:	68fa      	ldr	r2, [r7, #12]
 800e674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e676:	4413      	add	r3, r2
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	2b20      	cmp	r3, #32
 800e67c:	d1f2      	bne.n	800e664 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e680:	2b07      	cmp	r3, #7
 800e682:	d807      	bhi.n	800e694 <gen_numname+0xfc>
 800e684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e686:	1c5a      	adds	r2, r3, #1
 800e688:	62ba      	str	r2, [r7, #40]	; 0x28
 800e68a:	3330      	adds	r3, #48	; 0x30
 800e68c:	443b      	add	r3, r7
 800e68e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e692:	e000      	b.n	800e696 <gen_numname+0xfe>
 800e694:	2120      	movs	r1, #32
 800e696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e698:	1c5a      	adds	r2, r3, #1
 800e69a:	627a      	str	r2, [r7, #36]	; 0x24
 800e69c:	68fa      	ldr	r2, [r7, #12]
 800e69e:	4413      	add	r3, r2
 800e6a0:	460a      	mov	r2, r1
 800e6a2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a6:	2b07      	cmp	r3, #7
 800e6a8:	d9e9      	bls.n	800e67e <gen_numname+0xe6>
}
 800e6aa:	bf00      	nop
 800e6ac:	bf00      	nop
 800e6ae:	3730      	adds	r7, #48	; 0x30
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b085      	sub	sp, #20
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e6c0:	230b      	movs	r3, #11
 800e6c2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e6c4:	7bfb      	ldrb	r3, [r7, #15]
 800e6c6:	b2da      	uxtb	r2, r3
 800e6c8:	0852      	lsrs	r2, r2, #1
 800e6ca:	01db      	lsls	r3, r3, #7
 800e6cc:	4313      	orrs	r3, r2
 800e6ce:	b2da      	uxtb	r2, r3
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	1c59      	adds	r1, r3, #1
 800e6d4:	6079      	str	r1, [r7, #4]
 800e6d6:	781b      	ldrb	r3, [r3, #0]
 800e6d8:	4413      	add	r3, r2
 800e6da:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	3b01      	subs	r3, #1
 800e6e0:	60bb      	str	r3, [r7, #8]
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d1ed      	bne.n	800e6c4 <sum_sfn+0x10>
	return sum;
 800e6e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3714      	adds	r7, #20
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f4:	4770      	bx	lr

0800e6f6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e6f6:	b580      	push	{r7, lr}
 800e6f8:	b086      	sub	sp, #24
 800e6fa:	af00      	add	r7, sp, #0
 800e6fc:	6078      	str	r0, [r7, #4]
 800e6fe:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e700:	2304      	movs	r3, #4
 800e702:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800e70a:	23ff      	movs	r3, #255	; 0xff
 800e70c:	757b      	strb	r3, [r7, #21]
 800e70e:	23ff      	movs	r3, #255	; 0xff
 800e710:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800e712:	e081      	b.n	800e818 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	69db      	ldr	r3, [r3, #28]
 800e718:	4619      	mov	r1, r3
 800e71a:	6938      	ldr	r0, [r7, #16]
 800e71c:	f7ff f838 	bl	800d790 <move_window>
 800e720:	4603      	mov	r3, r0
 800e722:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e724:	7dfb      	ldrb	r3, [r7, #23]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d17c      	bne.n	800e824 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6a1b      	ldr	r3, [r3, #32]
 800e72e:	781b      	ldrb	r3, [r3, #0]
 800e730:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800e732:	7dbb      	ldrb	r3, [r7, #22]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d102      	bne.n	800e73e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e738:	2304      	movs	r3, #4
 800e73a:	75fb      	strb	r3, [r7, #23]
 800e73c:	e077      	b.n	800e82e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6a1b      	ldr	r3, [r3, #32]
 800e742:	330b      	adds	r3, #11
 800e744:	781b      	ldrb	r3, [r3, #0]
 800e746:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e74a:	73fb      	strb	r3, [r7, #15]
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	7bfa      	ldrb	r2, [r7, #15]
 800e750:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800e752:	7dbb      	ldrb	r3, [r7, #22]
 800e754:	2be5      	cmp	r3, #229	; 0xe5
 800e756:	d00e      	beq.n	800e776 <dir_read+0x80>
 800e758:	7dbb      	ldrb	r3, [r7, #22]
 800e75a:	2b2e      	cmp	r3, #46	; 0x2e
 800e75c:	d00b      	beq.n	800e776 <dir_read+0x80>
 800e75e:	7bfb      	ldrb	r3, [r7, #15]
 800e760:	f023 0320 	bic.w	r3, r3, #32
 800e764:	2b08      	cmp	r3, #8
 800e766:	bf0c      	ite	eq
 800e768:	2301      	moveq	r3, #1
 800e76a:	2300      	movne	r3, #0
 800e76c:	b2db      	uxtb	r3, r3
 800e76e:	461a      	mov	r2, r3
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	4293      	cmp	r3, r2
 800e774:	d002      	beq.n	800e77c <dir_read+0x86>
				ord = 0xFF;
 800e776:	23ff      	movs	r3, #255	; 0xff
 800e778:	757b      	strb	r3, [r7, #21]
 800e77a:	e044      	b.n	800e806 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800e77c:	7bfb      	ldrb	r3, [r7, #15]
 800e77e:	2b0f      	cmp	r3, #15
 800e780:	d12f      	bne.n	800e7e2 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800e782:	7dbb      	ldrb	r3, [r7, #22]
 800e784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d00d      	beq.n	800e7a8 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6a1b      	ldr	r3, [r3, #32]
 800e790:	7b5b      	ldrb	r3, [r3, #13]
 800e792:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800e794:	7dbb      	ldrb	r3, [r7, #22]
 800e796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e79a:	75bb      	strb	r3, [r7, #22]
 800e79c:	7dbb      	ldrb	r3, [r7, #22]
 800e79e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	695a      	ldr	r2, [r3, #20]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e7a8:	7dba      	ldrb	r2, [r7, #22]
 800e7aa:	7d7b      	ldrb	r3, [r7, #21]
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d115      	bne.n	800e7dc <dir_read+0xe6>
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	6a1b      	ldr	r3, [r3, #32]
 800e7b4:	330d      	adds	r3, #13
 800e7b6:	781b      	ldrb	r3, [r3, #0]
 800e7b8:	7d3a      	ldrb	r2, [r7, #20]
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	d10e      	bne.n	800e7dc <dir_read+0xe6>
 800e7be:	693b      	ldr	r3, [r7, #16]
 800e7c0:	691a      	ldr	r2, [r3, #16]
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6a1b      	ldr	r3, [r3, #32]
 800e7c6:	4619      	mov	r1, r3
 800e7c8:	4610      	mov	r0, r2
 800e7ca:	f7ff fe19 	bl	800e400 <pick_lfn>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d003      	beq.n	800e7dc <dir_read+0xe6>
 800e7d4:	7d7b      	ldrb	r3, [r7, #21]
 800e7d6:	3b01      	subs	r3, #1
 800e7d8:	b2db      	uxtb	r3, r3
 800e7da:	e000      	b.n	800e7de <dir_read+0xe8>
 800e7dc:	23ff      	movs	r3, #255	; 0xff
 800e7de:	757b      	strb	r3, [r7, #21]
 800e7e0:	e011      	b.n	800e806 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800e7e2:	7d7b      	ldrb	r3, [r7, #21]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d109      	bne.n	800e7fc <dir_read+0x106>
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6a1b      	ldr	r3, [r3, #32]
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f7ff ff61 	bl	800e6b4 <sum_sfn>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	461a      	mov	r2, r3
 800e7f6:	7d3b      	ldrb	r3, [r7, #20]
 800e7f8:	4293      	cmp	r3, r2
 800e7fa:	d015      	beq.n	800e828 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e802:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800e804:	e010      	b.n	800e828 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e806:	2100      	movs	r1, #0
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f7ff fc2c 	bl	800e066 <dir_next>
 800e80e:	4603      	mov	r3, r0
 800e810:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e812:	7dfb      	ldrb	r3, [r7, #23]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d109      	bne.n	800e82c <dir_read+0x136>
	while (dp->sect) {
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	69db      	ldr	r3, [r3, #28]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	f47f af79 	bne.w	800e714 <dir_read+0x1e>
 800e822:	e004      	b.n	800e82e <dir_read+0x138>
		if (res != FR_OK) break;
 800e824:	bf00      	nop
 800e826:	e002      	b.n	800e82e <dir_read+0x138>
					break;
 800e828:	bf00      	nop
 800e82a:	e000      	b.n	800e82e <dir_read+0x138>
		if (res != FR_OK) break;
 800e82c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e82e:	7dfb      	ldrb	r3, [r7, #23]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d002      	beq.n	800e83a <dir_read+0x144>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2200      	movs	r2, #0
 800e838:	61da      	str	r2, [r3, #28]
	return res;
 800e83a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	3718      	adds	r7, #24
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}

0800e844 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b086      	sub	sp, #24
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e852:	2100      	movs	r1, #0
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f7ff fb7d 	bl	800df54 <dir_sdi>
 800e85a:	4603      	mov	r3, r0
 800e85c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e85e:	7dfb      	ldrb	r3, [r7, #23]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d001      	beq.n	800e868 <dir_find+0x24>
 800e864:	7dfb      	ldrb	r3, [r7, #23]
 800e866:	e0a9      	b.n	800e9bc <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e868:	23ff      	movs	r3, #255	; 0xff
 800e86a:	753b      	strb	r3, [r7, #20]
 800e86c:	7d3b      	ldrb	r3, [r7, #20]
 800e86e:	757b      	strb	r3, [r7, #21]
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e876:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	69db      	ldr	r3, [r3, #28]
 800e87c:	4619      	mov	r1, r3
 800e87e:	6938      	ldr	r0, [r7, #16]
 800e880:	f7fe ff86 	bl	800d790 <move_window>
 800e884:	4603      	mov	r3, r0
 800e886:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e888:	7dfb      	ldrb	r3, [r7, #23]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	f040 8090 	bne.w	800e9b0 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	6a1b      	ldr	r3, [r3, #32]
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e898:	7dbb      	ldrb	r3, [r7, #22]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d102      	bne.n	800e8a4 <dir_find+0x60>
 800e89e:	2304      	movs	r3, #4
 800e8a0:	75fb      	strb	r3, [r7, #23]
 800e8a2:	e08a      	b.n	800e9ba <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	6a1b      	ldr	r3, [r3, #32]
 800e8a8:	330b      	adds	r3, #11
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e8b0:	73fb      	strb	r3, [r7, #15]
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	7bfa      	ldrb	r2, [r7, #15]
 800e8b6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e8b8:	7dbb      	ldrb	r3, [r7, #22]
 800e8ba:	2be5      	cmp	r3, #229	; 0xe5
 800e8bc:	d007      	beq.n	800e8ce <dir_find+0x8a>
 800e8be:	7bfb      	ldrb	r3, [r7, #15]
 800e8c0:	f003 0308 	and.w	r3, r3, #8
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d009      	beq.n	800e8dc <dir_find+0x98>
 800e8c8:	7bfb      	ldrb	r3, [r7, #15]
 800e8ca:	2b0f      	cmp	r3, #15
 800e8cc:	d006      	beq.n	800e8dc <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e8ce:	23ff      	movs	r3, #255	; 0xff
 800e8d0:	757b      	strb	r3, [r7, #21]
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e8d8:	631a      	str	r2, [r3, #48]	; 0x30
 800e8da:	e05e      	b.n	800e99a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e8dc:	7bfb      	ldrb	r3, [r7, #15]
 800e8de:	2b0f      	cmp	r3, #15
 800e8e0:	d136      	bne.n	800e950 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e8e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d154      	bne.n	800e99a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e8f0:	7dbb      	ldrb	r3, [r7, #22]
 800e8f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d00d      	beq.n	800e916 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6a1b      	ldr	r3, [r3, #32]
 800e8fe:	7b5b      	ldrb	r3, [r3, #13]
 800e900:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e902:	7dbb      	ldrb	r3, [r7, #22]
 800e904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e908:	75bb      	strb	r3, [r7, #22]
 800e90a:	7dbb      	ldrb	r3, [r7, #22]
 800e90c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	695a      	ldr	r2, [r3, #20]
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e916:	7dba      	ldrb	r2, [r7, #22]
 800e918:	7d7b      	ldrb	r3, [r7, #21]
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d115      	bne.n	800e94a <dir_find+0x106>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6a1b      	ldr	r3, [r3, #32]
 800e922:	330d      	adds	r3, #13
 800e924:	781b      	ldrb	r3, [r3, #0]
 800e926:	7d3a      	ldrb	r2, [r7, #20]
 800e928:	429a      	cmp	r2, r3
 800e92a:	d10e      	bne.n	800e94a <dir_find+0x106>
 800e92c:	693b      	ldr	r3, [r7, #16]
 800e92e:	691a      	ldr	r2, [r3, #16]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6a1b      	ldr	r3, [r3, #32]
 800e934:	4619      	mov	r1, r3
 800e936:	4610      	mov	r0, r2
 800e938:	f7ff fcf2 	bl	800e320 <cmp_lfn>
 800e93c:	4603      	mov	r3, r0
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d003      	beq.n	800e94a <dir_find+0x106>
 800e942:	7d7b      	ldrb	r3, [r7, #21]
 800e944:	3b01      	subs	r3, #1
 800e946:	b2db      	uxtb	r3, r3
 800e948:	e000      	b.n	800e94c <dir_find+0x108>
 800e94a:	23ff      	movs	r3, #255	; 0xff
 800e94c:	757b      	strb	r3, [r7, #21]
 800e94e:	e024      	b.n	800e99a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e950:	7d7b      	ldrb	r3, [r7, #21]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d109      	bne.n	800e96a <dir_find+0x126>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6a1b      	ldr	r3, [r3, #32]
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7ff feaa 	bl	800e6b4 <sum_sfn>
 800e960:	4603      	mov	r3, r0
 800e962:	461a      	mov	r2, r3
 800e964:	7d3b      	ldrb	r3, [r7, #20]
 800e966:	4293      	cmp	r3, r2
 800e968:	d024      	beq.n	800e9b4 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e970:	f003 0301 	and.w	r3, r3, #1
 800e974:	2b00      	cmp	r3, #0
 800e976:	d10a      	bne.n	800e98e <dir_find+0x14a>
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6a18      	ldr	r0, [r3, #32]
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	3324      	adds	r3, #36	; 0x24
 800e980:	220b      	movs	r2, #11
 800e982:	4619      	mov	r1, r3
 800e984:	f7fe fd12 	bl	800d3ac <mem_cmp>
 800e988:	4603      	mov	r3, r0
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d014      	beq.n	800e9b8 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e98e:	23ff      	movs	r3, #255	; 0xff
 800e990:	757b      	strb	r3, [r7, #21]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e998:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e99a:	2100      	movs	r1, #0
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f7ff fb62 	bl	800e066 <dir_next>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e9a6:	7dfb      	ldrb	r3, [r7, #23]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	f43f af65 	beq.w	800e878 <dir_find+0x34>
 800e9ae:	e004      	b.n	800e9ba <dir_find+0x176>
		if (res != FR_OK) break;
 800e9b0:	bf00      	nop
 800e9b2:	e002      	b.n	800e9ba <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e9b4:	bf00      	nop
 800e9b6:	e000      	b.n	800e9ba <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e9b8:	bf00      	nop

	return res;
 800e9ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3718      	adds	r7, #24
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}

0800e9c4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b08c      	sub	sp, #48	; 0x30
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e9d8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d001      	beq.n	800e9e4 <dir_register+0x20>
 800e9e0:	2306      	movs	r3, #6
 800e9e2:	e0e0      	b.n	800eba6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	627b      	str	r3, [r7, #36]	; 0x24
 800e9e8:	e002      	b.n	800e9f0 <dir_register+0x2c>
 800e9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ec:	3301      	adds	r3, #1
 800e9ee:	627b      	str	r3, [r7, #36]	; 0x24
 800e9f0:	69fb      	ldr	r3, [r7, #28]
 800e9f2:	691a      	ldr	r2, [r3, #16]
 800e9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f6:	005b      	lsls	r3, r3, #1
 800e9f8:	4413      	add	r3, r2
 800e9fa:	881b      	ldrh	r3, [r3, #0]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d1f4      	bne.n	800e9ea <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800ea06:	f107 030c 	add.w	r3, r7, #12
 800ea0a:	220c      	movs	r2, #12
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f7fe fc91 	bl	800d334 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ea12:	7dfb      	ldrb	r3, [r7, #23]
 800ea14:	f003 0301 	and.w	r3, r3, #1
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d032      	beq.n	800ea82 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2240      	movs	r2, #64	; 0x40
 800ea20:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800ea24:	2301      	movs	r3, #1
 800ea26:	62bb      	str	r3, [r7, #40]	; 0x28
 800ea28:	e016      	b.n	800ea58 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800ea30:	69fb      	ldr	r3, [r7, #28]
 800ea32:	691a      	ldr	r2, [r3, #16]
 800ea34:	f107 010c 	add.w	r1, r7, #12
 800ea38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea3a:	f7ff fdad 	bl	800e598 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f7ff ff00 	bl	800e844 <dir_find>
 800ea44:	4603      	mov	r3, r0
 800ea46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ea4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d106      	bne.n	800ea60 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ea52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea54:	3301      	adds	r3, #1
 800ea56:	62bb      	str	r3, [r7, #40]	; 0x28
 800ea58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea5a:	2b63      	cmp	r3, #99	; 0x63
 800ea5c:	d9e5      	bls.n	800ea2a <dir_register+0x66>
 800ea5e:	e000      	b.n	800ea62 <dir_register+0x9e>
			if (res != FR_OK) break;
 800ea60:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ea62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea64:	2b64      	cmp	r3, #100	; 0x64
 800ea66:	d101      	bne.n	800ea6c <dir_register+0xa8>
 800ea68:	2307      	movs	r3, #7
 800ea6a:	e09c      	b.n	800eba6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ea6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea70:	2b04      	cmp	r3, #4
 800ea72:	d002      	beq.n	800ea7a <dir_register+0xb6>
 800ea74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea78:	e095      	b.n	800eba6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ea7a:	7dfa      	ldrb	r2, [r7, #23]
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ea82:	7dfb      	ldrb	r3, [r7, #23]
 800ea84:	f003 0302 	and.w	r3, r3, #2
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d007      	beq.n	800ea9c <dir_register+0xd8>
 800ea8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8e:	330c      	adds	r3, #12
 800ea90:	4a47      	ldr	r2, [pc, #284]	; (800ebb0 <dir_register+0x1ec>)
 800ea92:	fba2 2303 	umull	r2, r3, r2, r3
 800ea96:	089b      	lsrs	r3, r3, #2
 800ea98:	3301      	adds	r3, #1
 800ea9a:	e000      	b.n	800ea9e <dir_register+0xda>
 800ea9c:	2301      	movs	r3, #1
 800ea9e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800eaa0:	6a39      	ldr	r1, [r7, #32]
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f7ff fbb5 	bl	800e212 <dir_alloc>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800eaae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d148      	bne.n	800eb48 <dir_register+0x184>
 800eab6:	6a3b      	ldr	r3, [r7, #32]
 800eab8:	3b01      	subs	r3, #1
 800eaba:	623b      	str	r3, [r7, #32]
 800eabc:	6a3b      	ldr	r3, [r7, #32]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d042      	beq.n	800eb48 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	695a      	ldr	r2, [r3, #20]
 800eac6:	6a3b      	ldr	r3, [r7, #32]
 800eac8:	015b      	lsls	r3, r3, #5
 800eaca:	1ad3      	subs	r3, r2, r3
 800eacc:	4619      	mov	r1, r3
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f7ff fa40 	bl	800df54 <dir_sdi>
 800ead4:	4603      	mov	r3, r0
 800ead6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800eada:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d132      	bne.n	800eb48 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	3324      	adds	r3, #36	; 0x24
 800eae6:	4618      	mov	r0, r3
 800eae8:	f7ff fde4 	bl	800e6b4 <sum_sfn>
 800eaec:	4603      	mov	r3, r0
 800eaee:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	69db      	ldr	r3, [r3, #28]
 800eaf4:	4619      	mov	r1, r3
 800eaf6:	69f8      	ldr	r0, [r7, #28]
 800eaf8:	f7fe fe4a 	bl	800d790 <move_window>
 800eafc:	4603      	mov	r3, r0
 800eafe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800eb02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d11d      	bne.n	800eb46 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800eb0a:	69fb      	ldr	r3, [r7, #28]
 800eb0c:	6918      	ldr	r0, [r3, #16]
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	6a19      	ldr	r1, [r3, #32]
 800eb12:	6a3b      	ldr	r3, [r7, #32]
 800eb14:	b2da      	uxtb	r2, r3
 800eb16:	7efb      	ldrb	r3, [r7, #27]
 800eb18:	f7ff fcd6 	bl	800e4c8 <put_lfn>
				fs->wflag = 1;
 800eb1c:	69fb      	ldr	r3, [r7, #28]
 800eb1e:	2201      	movs	r2, #1
 800eb20:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800eb22:	2100      	movs	r1, #0
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f7ff fa9e 	bl	800e066 <dir_next>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800eb30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d107      	bne.n	800eb48 <dir_register+0x184>
 800eb38:	6a3b      	ldr	r3, [r7, #32]
 800eb3a:	3b01      	subs	r3, #1
 800eb3c:	623b      	str	r3, [r7, #32]
 800eb3e:	6a3b      	ldr	r3, [r7, #32]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d1d5      	bne.n	800eaf0 <dir_register+0x12c>
 800eb44:	e000      	b.n	800eb48 <dir_register+0x184>
				if (res != FR_OK) break;
 800eb46:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800eb48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d128      	bne.n	800eba2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	69db      	ldr	r3, [r3, #28]
 800eb54:	4619      	mov	r1, r3
 800eb56:	69f8      	ldr	r0, [r7, #28]
 800eb58:	f7fe fe1a 	bl	800d790 <move_window>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800eb62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d11b      	bne.n	800eba2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	6a1b      	ldr	r3, [r3, #32]
 800eb6e:	2220      	movs	r2, #32
 800eb70:	2100      	movs	r1, #0
 800eb72:	4618      	mov	r0, r3
 800eb74:	f7fe fbff 	bl	800d376 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	6a18      	ldr	r0, [r3, #32]
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	3324      	adds	r3, #36	; 0x24
 800eb80:	220b      	movs	r2, #11
 800eb82:	4619      	mov	r1, r3
 800eb84:	f7fe fbd6 	bl	800d334 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6a1b      	ldr	r3, [r3, #32]
 800eb92:	330c      	adds	r3, #12
 800eb94:	f002 0218 	and.w	r2, r2, #24
 800eb98:	b2d2      	uxtb	r2, r2
 800eb9a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800eb9c:	69fb      	ldr	r3, [r7, #28]
 800eb9e:	2201      	movs	r2, #1
 800eba0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800eba2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	3730      	adds	r7, #48	; 0x30
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}
 800ebae:	bf00      	nop
 800ebb0:	4ec4ec4f 	.word	0x4ec4ec4f

0800ebb4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b088      	sub	sp, #32
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
 800ebbc:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	69db      	ldr	r3, [r3, #28]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	f000 80c9 	beq.w	800ed66 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ebdc:	d032      	beq.n	800ec44 <get_fileinfo+0x90>
			i = j = 0;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	61bb      	str	r3, [r7, #24]
 800ebe2:	69bb      	ldr	r3, [r7, #24]
 800ebe4:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ebe6:	e01b      	b.n	800ec20 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800ebe8:	89fb      	ldrh	r3, [r7, #14]
 800ebea:	2100      	movs	r1, #0
 800ebec:	4618      	mov	r0, r3
 800ebee:	f001 feeb 	bl	80109c8 <ff_convert>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800ebf6:	89fb      	ldrh	r3, [r7, #14]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d102      	bne.n	800ec02 <get_fileinfo+0x4e>
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	61fb      	str	r3, [r7, #28]
 800ec00:	e01a      	b.n	800ec38 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800ec02:	69fb      	ldr	r3, [r7, #28]
 800ec04:	2bfe      	cmp	r3, #254	; 0xfe
 800ec06:	d902      	bls.n	800ec0e <get_fileinfo+0x5a>
 800ec08:	2300      	movs	r3, #0
 800ec0a:	61fb      	str	r3, [r7, #28]
 800ec0c:	e014      	b.n	800ec38 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800ec0e:	69fb      	ldr	r3, [r7, #28]
 800ec10:	1c5a      	adds	r2, r3, #1
 800ec12:	61fa      	str	r2, [r7, #28]
 800ec14:	89fa      	ldrh	r2, [r7, #14]
 800ec16:	b2d1      	uxtb	r1, r2
 800ec18:	683a      	ldr	r2, [r7, #0]
 800ec1a:	4413      	add	r3, r2
 800ec1c:	460a      	mov	r2, r1
 800ec1e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ec20:	693b      	ldr	r3, [r7, #16]
 800ec22:	691a      	ldr	r2, [r3, #16]
 800ec24:	69bb      	ldr	r3, [r7, #24]
 800ec26:	1c59      	adds	r1, r3, #1
 800ec28:	61b9      	str	r1, [r7, #24]
 800ec2a:	005b      	lsls	r3, r3, #1
 800ec2c:	4413      	add	r3, r2
 800ec2e:	881b      	ldrh	r3, [r3, #0]
 800ec30:	81fb      	strh	r3, [r7, #14]
 800ec32:	89fb      	ldrh	r3, [r7, #14]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d1d7      	bne.n	800ebe8 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800ec38:	683a      	ldr	r2, [r7, #0]
 800ec3a:	69fb      	ldr	r3, [r7, #28]
 800ec3c:	4413      	add	r3, r2
 800ec3e:	3316      	adds	r3, #22
 800ec40:	2200      	movs	r2, #0
 800ec42:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800ec44:	2300      	movs	r3, #0
 800ec46:	61bb      	str	r3, [r7, #24]
 800ec48:	69bb      	ldr	r3, [r7, #24]
 800ec4a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800ec4c:	683a      	ldr	r2, [r7, #0]
 800ec4e:	69fb      	ldr	r3, [r7, #28]
 800ec50:	4413      	add	r3, r2
 800ec52:	3316      	adds	r3, #22
 800ec54:	781b      	ldrb	r3, [r3, #0]
 800ec56:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800ec58:	e04c      	b.n	800ecf4 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6a1a      	ldr	r2, [r3, #32]
 800ec5e:	69fb      	ldr	r3, [r7, #28]
 800ec60:	1c59      	adds	r1, r3, #1
 800ec62:	61f9      	str	r1, [r7, #28]
 800ec64:	4413      	add	r3, r2
 800ec66:	781b      	ldrb	r3, [r3, #0]
 800ec68:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800ec6a:	7dfb      	ldrb	r3, [r7, #23]
 800ec6c:	2b20      	cmp	r3, #32
 800ec6e:	d100      	bne.n	800ec72 <get_fileinfo+0xbe>
 800ec70:	e040      	b.n	800ecf4 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ec72:	7dfb      	ldrb	r3, [r7, #23]
 800ec74:	2b05      	cmp	r3, #5
 800ec76:	d101      	bne.n	800ec7c <get_fileinfo+0xc8>
 800ec78:	23e5      	movs	r3, #229	; 0xe5
 800ec7a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800ec7c:	69fb      	ldr	r3, [r7, #28]
 800ec7e:	2b09      	cmp	r3, #9
 800ec80:	d10f      	bne.n	800eca2 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800ec82:	89bb      	ldrh	r3, [r7, #12]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d105      	bne.n	800ec94 <get_fileinfo+0xe0>
 800ec88:	683a      	ldr	r2, [r7, #0]
 800ec8a:	69bb      	ldr	r3, [r7, #24]
 800ec8c:	4413      	add	r3, r2
 800ec8e:	3316      	adds	r3, #22
 800ec90:	222e      	movs	r2, #46	; 0x2e
 800ec92:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800ec94:	69bb      	ldr	r3, [r7, #24]
 800ec96:	1c5a      	adds	r2, r3, #1
 800ec98:	61ba      	str	r2, [r7, #24]
 800ec9a:	683a      	ldr	r2, [r7, #0]
 800ec9c:	4413      	add	r3, r2
 800ec9e:	222e      	movs	r2, #46	; 0x2e
 800eca0:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800eca2:	683a      	ldr	r2, [r7, #0]
 800eca4:	69bb      	ldr	r3, [r7, #24]
 800eca6:	4413      	add	r3, r2
 800eca8:	3309      	adds	r3, #9
 800ecaa:	7dfa      	ldrb	r2, [r7, #23]
 800ecac:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800ecae:	89bb      	ldrh	r3, [r7, #12]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d11c      	bne.n	800ecee <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800ecb4:	7dfb      	ldrb	r3, [r7, #23]
 800ecb6:	2b40      	cmp	r3, #64	; 0x40
 800ecb8:	d913      	bls.n	800ece2 <get_fileinfo+0x12e>
 800ecba:	7dfb      	ldrb	r3, [r7, #23]
 800ecbc:	2b5a      	cmp	r3, #90	; 0x5a
 800ecbe:	d810      	bhi.n	800ece2 <get_fileinfo+0x12e>
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6a1b      	ldr	r3, [r3, #32]
 800ecc4:	330c      	adds	r3, #12
 800ecc6:	781b      	ldrb	r3, [r3, #0]
 800ecc8:	461a      	mov	r2, r3
 800ecca:	69fb      	ldr	r3, [r7, #28]
 800eccc:	2b08      	cmp	r3, #8
 800ecce:	d901      	bls.n	800ecd4 <get_fileinfo+0x120>
 800ecd0:	2310      	movs	r3, #16
 800ecd2:	e000      	b.n	800ecd6 <get_fileinfo+0x122>
 800ecd4:	2308      	movs	r3, #8
 800ecd6:	4013      	ands	r3, r2
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d002      	beq.n	800ece2 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800ecdc:	7dfb      	ldrb	r3, [r7, #23]
 800ecde:	3320      	adds	r3, #32
 800ece0:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800ece2:	683a      	ldr	r2, [r7, #0]
 800ece4:	69bb      	ldr	r3, [r7, #24]
 800ece6:	4413      	add	r3, r2
 800ece8:	3316      	adds	r3, #22
 800ecea:	7dfa      	ldrb	r2, [r7, #23]
 800ecec:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800ecee:	69bb      	ldr	r3, [r7, #24]
 800ecf0:	3301      	adds	r3, #1
 800ecf2:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800ecf4:	69fb      	ldr	r3, [r7, #28]
 800ecf6:	2b0a      	cmp	r3, #10
 800ecf8:	d9af      	bls.n	800ec5a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800ecfa:	89bb      	ldrh	r3, [r7, #12]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d10d      	bne.n	800ed1c <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800ed00:	683a      	ldr	r2, [r7, #0]
 800ed02:	69bb      	ldr	r3, [r7, #24]
 800ed04:	4413      	add	r3, r2
 800ed06:	3316      	adds	r3, #22
 800ed08:	2200      	movs	r2, #0
 800ed0a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6a1b      	ldr	r3, [r3, #32]
 800ed10:	330c      	adds	r3, #12
 800ed12:	781b      	ldrb	r3, [r3, #0]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d101      	bne.n	800ed1c <get_fileinfo+0x168>
 800ed18:	2300      	movs	r3, #0
 800ed1a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800ed1c:	683a      	ldr	r2, [r7, #0]
 800ed1e:	69bb      	ldr	r3, [r7, #24]
 800ed20:	4413      	add	r3, r2
 800ed22:	3309      	adds	r3, #9
 800ed24:	2200      	movs	r2, #0
 800ed26:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	6a1b      	ldr	r3, [r3, #32]
 800ed2c:	7ada      	ldrb	r2, [r3, #11]
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6a1b      	ldr	r3, [r3, #32]
 800ed36:	331c      	adds	r3, #28
 800ed38:	4618      	mov	r0, r3
 800ed3a:	f7fe fa91 	bl	800d260 <ld_dword>
 800ed3e:	4602      	mov	r2, r0
 800ed40:	683b      	ldr	r3, [r7, #0]
 800ed42:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	6a1b      	ldr	r3, [r3, #32]
 800ed48:	3316      	adds	r3, #22
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7fe fa88 	bl	800d260 <ld_dword>
 800ed50:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	b29a      	uxth	r2, r3
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	80da      	strh	r2, [r3, #6]
 800ed5a:	68bb      	ldr	r3, [r7, #8]
 800ed5c:	0c1b      	lsrs	r3, r3, #16
 800ed5e:	b29a      	uxth	r2, r3
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	809a      	strh	r2, [r3, #4]
 800ed64:	e000      	b.n	800ed68 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ed66:	bf00      	nop
}
 800ed68:	3720      	adds	r7, #32
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}
	...

0800ed70 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b08a      	sub	sp, #40	; 0x28
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	613b      	str	r3, [r7, #16]
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	691b      	ldr	r3, [r3, #16]
 800ed86:	60fb      	str	r3, [r7, #12]
 800ed88:	2300      	movs	r3, #0
 800ed8a:	617b      	str	r3, [r7, #20]
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ed90:	69bb      	ldr	r3, [r7, #24]
 800ed92:	1c5a      	adds	r2, r3, #1
 800ed94:	61ba      	str	r2, [r7, #24]
 800ed96:	693a      	ldr	r2, [r7, #16]
 800ed98:	4413      	add	r3, r2
 800ed9a:	781b      	ldrb	r3, [r3, #0]
 800ed9c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ed9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eda0:	2b1f      	cmp	r3, #31
 800eda2:	d940      	bls.n	800ee26 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800eda4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eda6:	2b2f      	cmp	r3, #47	; 0x2f
 800eda8:	d006      	beq.n	800edb8 <create_name+0x48>
 800edaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edac:	2b5c      	cmp	r3, #92	; 0x5c
 800edae:	d110      	bne.n	800edd2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800edb0:	e002      	b.n	800edb8 <create_name+0x48>
 800edb2:	69bb      	ldr	r3, [r7, #24]
 800edb4:	3301      	adds	r3, #1
 800edb6:	61bb      	str	r3, [r7, #24]
 800edb8:	693a      	ldr	r2, [r7, #16]
 800edba:	69bb      	ldr	r3, [r7, #24]
 800edbc:	4413      	add	r3, r2
 800edbe:	781b      	ldrb	r3, [r3, #0]
 800edc0:	2b2f      	cmp	r3, #47	; 0x2f
 800edc2:	d0f6      	beq.n	800edb2 <create_name+0x42>
 800edc4:	693a      	ldr	r2, [r7, #16]
 800edc6:	69bb      	ldr	r3, [r7, #24]
 800edc8:	4413      	add	r3, r2
 800edca:	781b      	ldrb	r3, [r3, #0]
 800edcc:	2b5c      	cmp	r3, #92	; 0x5c
 800edce:	d0f0      	beq.n	800edb2 <create_name+0x42>
			break;
 800edd0:	e02a      	b.n	800ee28 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	2bfe      	cmp	r3, #254	; 0xfe
 800edd6:	d901      	bls.n	800eddc <create_name+0x6c>
 800edd8:	2306      	movs	r3, #6
 800edda:	e17d      	b.n	800f0d8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800eddc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edde:	b2db      	uxtb	r3, r3
 800ede0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ede2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ede4:	2101      	movs	r1, #1
 800ede6:	4618      	mov	r0, r3
 800ede8:	f001 fdee 	bl	80109c8 <ff_convert>
 800edec:	4603      	mov	r3, r0
 800edee:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800edf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d101      	bne.n	800edfa <create_name+0x8a>
 800edf6:	2306      	movs	r3, #6
 800edf8:	e16e      	b.n	800f0d8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800edfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edfc:	2b7f      	cmp	r3, #127	; 0x7f
 800edfe:	d809      	bhi.n	800ee14 <create_name+0xa4>
 800ee00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee02:	4619      	mov	r1, r3
 800ee04:	488d      	ldr	r0, [pc, #564]	; (800f03c <create_name+0x2cc>)
 800ee06:	f7fe faf8 	bl	800d3fa <chk_chr>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d001      	beq.n	800ee14 <create_name+0xa4>
 800ee10:	2306      	movs	r3, #6
 800ee12:	e161      	b.n	800f0d8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	1c5a      	adds	r2, r3, #1
 800ee18:	617a      	str	r2, [r7, #20]
 800ee1a:	005b      	lsls	r3, r3, #1
 800ee1c:	68fa      	ldr	r2, [r7, #12]
 800ee1e:	4413      	add	r3, r2
 800ee20:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ee22:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ee24:	e7b4      	b.n	800ed90 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ee26:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ee28:	693a      	ldr	r2, [r7, #16]
 800ee2a:	69bb      	ldr	r3, [r7, #24]
 800ee2c:	441a      	add	r2, r3
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ee32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee34:	2b1f      	cmp	r3, #31
 800ee36:	d801      	bhi.n	800ee3c <create_name+0xcc>
 800ee38:	2304      	movs	r3, #4
 800ee3a:	e000      	b.n	800ee3e <create_name+0xce>
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ee42:	e011      	b.n	800ee68 <create_name+0xf8>
		w = lfn[di - 1];
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ee4a:	3b01      	subs	r3, #1
 800ee4c:	005b      	lsls	r3, r3, #1
 800ee4e:	68fa      	ldr	r2, [r7, #12]
 800ee50:	4413      	add	r3, r2
 800ee52:	881b      	ldrh	r3, [r3, #0]
 800ee54:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ee56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee58:	2b20      	cmp	r3, #32
 800ee5a:	d002      	beq.n	800ee62 <create_name+0xf2>
 800ee5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee5e:	2b2e      	cmp	r3, #46	; 0x2e
 800ee60:	d106      	bne.n	800ee70 <create_name+0x100>
		di--;
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	3b01      	subs	r3, #1
 800ee66:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d1ea      	bne.n	800ee44 <create_name+0xd4>
 800ee6e:	e000      	b.n	800ee72 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ee70:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	005b      	lsls	r3, r3, #1
 800ee76:	68fa      	ldr	r2, [r7, #12]
 800ee78:	4413      	add	r3, r2
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d101      	bne.n	800ee88 <create_name+0x118>
 800ee84:	2306      	movs	r3, #6
 800ee86:	e127      	b.n	800f0d8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	3324      	adds	r3, #36	; 0x24
 800ee8c:	220b      	movs	r2, #11
 800ee8e:	2120      	movs	r1, #32
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7fe fa70 	bl	800d376 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ee96:	2300      	movs	r3, #0
 800ee98:	61bb      	str	r3, [r7, #24]
 800ee9a:	e002      	b.n	800eea2 <create_name+0x132>
 800ee9c:	69bb      	ldr	r3, [r7, #24]
 800ee9e:	3301      	adds	r3, #1
 800eea0:	61bb      	str	r3, [r7, #24]
 800eea2:	69bb      	ldr	r3, [r7, #24]
 800eea4:	005b      	lsls	r3, r3, #1
 800eea6:	68fa      	ldr	r2, [r7, #12]
 800eea8:	4413      	add	r3, r2
 800eeaa:	881b      	ldrh	r3, [r3, #0]
 800eeac:	2b20      	cmp	r3, #32
 800eeae:	d0f5      	beq.n	800ee9c <create_name+0x12c>
 800eeb0:	69bb      	ldr	r3, [r7, #24]
 800eeb2:	005b      	lsls	r3, r3, #1
 800eeb4:	68fa      	ldr	r2, [r7, #12]
 800eeb6:	4413      	add	r3, r2
 800eeb8:	881b      	ldrh	r3, [r3, #0]
 800eeba:	2b2e      	cmp	r3, #46	; 0x2e
 800eebc:	d0ee      	beq.n	800ee9c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800eebe:	69bb      	ldr	r3, [r7, #24]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d009      	beq.n	800eed8 <create_name+0x168>
 800eec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eec8:	f043 0303 	orr.w	r3, r3, #3
 800eecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800eed0:	e002      	b.n	800eed8 <create_name+0x168>
 800eed2:	697b      	ldr	r3, [r7, #20]
 800eed4:	3b01      	subs	r3, #1
 800eed6:	617b      	str	r3, [r7, #20]
 800eed8:	697b      	ldr	r3, [r7, #20]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d009      	beq.n	800eef2 <create_name+0x182>
 800eede:	697b      	ldr	r3, [r7, #20]
 800eee0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800eee4:	3b01      	subs	r3, #1
 800eee6:	005b      	lsls	r3, r3, #1
 800eee8:	68fa      	ldr	r2, [r7, #12]
 800eeea:	4413      	add	r3, r2
 800eeec:	881b      	ldrh	r3, [r3, #0]
 800eeee:	2b2e      	cmp	r3, #46	; 0x2e
 800eef0:	d1ef      	bne.n	800eed2 <create_name+0x162>

	i = b = 0; ni = 8;
 800eef2:	2300      	movs	r3, #0
 800eef4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800eef8:	2300      	movs	r3, #0
 800eefa:	623b      	str	r3, [r7, #32]
 800eefc:	2308      	movs	r3, #8
 800eefe:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ef00:	69bb      	ldr	r3, [r7, #24]
 800ef02:	1c5a      	adds	r2, r3, #1
 800ef04:	61ba      	str	r2, [r7, #24]
 800ef06:	005b      	lsls	r3, r3, #1
 800ef08:	68fa      	ldr	r2, [r7, #12]
 800ef0a:	4413      	add	r3, r2
 800ef0c:	881b      	ldrh	r3, [r3, #0]
 800ef0e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ef10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	f000 8090 	beq.w	800f038 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ef18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef1a:	2b20      	cmp	r3, #32
 800ef1c:	d006      	beq.n	800ef2c <create_name+0x1bc>
 800ef1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef20:	2b2e      	cmp	r3, #46	; 0x2e
 800ef22:	d10a      	bne.n	800ef3a <create_name+0x1ca>
 800ef24:	69ba      	ldr	r2, [r7, #24]
 800ef26:	697b      	ldr	r3, [r7, #20]
 800ef28:	429a      	cmp	r2, r3
 800ef2a:	d006      	beq.n	800ef3a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ef2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef30:	f043 0303 	orr.w	r3, r3, #3
 800ef34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef38:	e07d      	b.n	800f036 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ef3a:	6a3a      	ldr	r2, [r7, #32]
 800ef3c:	69fb      	ldr	r3, [r7, #28]
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d203      	bcs.n	800ef4a <create_name+0x1da>
 800ef42:	69ba      	ldr	r2, [r7, #24]
 800ef44:	697b      	ldr	r3, [r7, #20]
 800ef46:	429a      	cmp	r2, r3
 800ef48:	d123      	bne.n	800ef92 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800ef4a:	69fb      	ldr	r3, [r7, #28]
 800ef4c:	2b0b      	cmp	r3, #11
 800ef4e:	d106      	bne.n	800ef5e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ef50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef54:	f043 0303 	orr.w	r3, r3, #3
 800ef58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef5c:	e075      	b.n	800f04a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ef5e:	69ba      	ldr	r2, [r7, #24]
 800ef60:	697b      	ldr	r3, [r7, #20]
 800ef62:	429a      	cmp	r2, r3
 800ef64:	d005      	beq.n	800ef72 <create_name+0x202>
 800ef66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef6a:	f043 0303 	orr.w	r3, r3, #3
 800ef6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800ef72:	69ba      	ldr	r2, [r7, #24]
 800ef74:	697b      	ldr	r3, [r7, #20]
 800ef76:	429a      	cmp	r2, r3
 800ef78:	d866      	bhi.n	800f048 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	61bb      	str	r3, [r7, #24]
 800ef7e:	2308      	movs	r3, #8
 800ef80:	623b      	str	r3, [r7, #32]
 800ef82:	230b      	movs	r3, #11
 800ef84:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ef86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ef8a:	009b      	lsls	r3, r3, #2
 800ef8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ef90:	e051      	b.n	800f036 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ef92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef94:	2b7f      	cmp	r3, #127	; 0x7f
 800ef96:	d914      	bls.n	800efc2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ef98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef9a:	2100      	movs	r1, #0
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f001 fd13 	bl	80109c8 <ff_convert>
 800efa2:	4603      	mov	r3, r0
 800efa4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800efa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d004      	beq.n	800efb6 <create_name+0x246>
 800efac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efae:	3b80      	subs	r3, #128	; 0x80
 800efb0:	4a23      	ldr	r2, [pc, #140]	; (800f040 <create_name+0x2d0>)
 800efb2:	5cd3      	ldrb	r3, [r2, r3]
 800efb4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800efb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efba:	f043 0302 	orr.w	r3, r3, #2
 800efbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800efc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d007      	beq.n	800efd8 <create_name+0x268>
 800efc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efca:	4619      	mov	r1, r3
 800efcc:	481d      	ldr	r0, [pc, #116]	; (800f044 <create_name+0x2d4>)
 800efce:	f7fe fa14 	bl	800d3fa <chk_chr>
 800efd2:	4603      	mov	r3, r0
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d008      	beq.n	800efea <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800efd8:	235f      	movs	r3, #95	; 0x5f
 800efda:	84bb      	strh	r3, [r7, #36]	; 0x24
 800efdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efe0:	f043 0303 	orr.w	r3, r3, #3
 800efe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800efe8:	e01b      	b.n	800f022 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800efea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efec:	2b40      	cmp	r3, #64	; 0x40
 800efee:	d909      	bls.n	800f004 <create_name+0x294>
 800eff0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eff2:	2b5a      	cmp	r3, #90	; 0x5a
 800eff4:	d806      	bhi.n	800f004 <create_name+0x294>
					b |= 2;
 800eff6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800effa:	f043 0302 	orr.w	r3, r3, #2
 800effe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f002:	e00e      	b.n	800f022 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f004:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f006:	2b60      	cmp	r3, #96	; 0x60
 800f008:	d90b      	bls.n	800f022 <create_name+0x2b2>
 800f00a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f00c:	2b7a      	cmp	r3, #122	; 0x7a
 800f00e:	d808      	bhi.n	800f022 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f010:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f014:	f043 0301 	orr.w	r3, r3, #1
 800f018:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f01c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f01e:	3b20      	subs	r3, #32
 800f020:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f022:	6a3b      	ldr	r3, [r7, #32]
 800f024:	1c5a      	adds	r2, r3, #1
 800f026:	623a      	str	r2, [r7, #32]
 800f028:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f02a:	b2d1      	uxtb	r1, r2
 800f02c:	687a      	ldr	r2, [r7, #4]
 800f02e:	4413      	add	r3, r2
 800f030:	460a      	mov	r2, r1
 800f032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800f036:	e763      	b.n	800ef00 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f038:	bf00      	nop
 800f03a:	e006      	b.n	800f04a <create_name+0x2da>
 800f03c:	08012604 	.word	0x08012604
 800f040:	0801266c 	.word	0x0801266c
 800f044:	08012610 	.word	0x08012610
			if (si > di) break;			/* No extension */
 800f048:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f050:	2be5      	cmp	r3, #229	; 0xe5
 800f052:	d103      	bne.n	800f05c <create_name+0x2ec>
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2205      	movs	r2, #5
 800f058:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800f05c:	69fb      	ldr	r3, [r7, #28]
 800f05e:	2b08      	cmp	r3, #8
 800f060:	d104      	bne.n	800f06c <create_name+0x2fc>
 800f062:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f066:	009b      	lsls	r3, r3, #2
 800f068:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f06c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f070:	f003 030c 	and.w	r3, r3, #12
 800f074:	2b0c      	cmp	r3, #12
 800f076:	d005      	beq.n	800f084 <create_name+0x314>
 800f078:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f07c:	f003 0303 	and.w	r3, r3, #3
 800f080:	2b03      	cmp	r3, #3
 800f082:	d105      	bne.n	800f090 <create_name+0x320>
 800f084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f088:	f043 0302 	orr.w	r3, r3, #2
 800f08c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f094:	f003 0302 	and.w	r3, r3, #2
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d117      	bne.n	800f0cc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f09c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f0a0:	f003 0303 	and.w	r3, r3, #3
 800f0a4:	2b01      	cmp	r3, #1
 800f0a6:	d105      	bne.n	800f0b4 <create_name+0x344>
 800f0a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0ac:	f043 0310 	orr.w	r3, r3, #16
 800f0b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f0b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f0b8:	f003 030c 	and.w	r3, r3, #12
 800f0bc:	2b04      	cmp	r3, #4
 800f0be:	d105      	bne.n	800f0cc <create_name+0x35c>
 800f0c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0c4:	f043 0308 	orr.w	r3, r3, #8
 800f0c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f0d2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800f0d6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f0d8:	4618      	mov	r0, r3
 800f0da:	3728      	adds	r7, #40	; 0x28
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}

0800f0e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b086      	sub	sp, #24
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
 800f0e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f0f4:	e002      	b.n	800f0fc <follow_path+0x1c>
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	3301      	adds	r3, #1
 800f0fa:	603b      	str	r3, [r7, #0]
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	2b2f      	cmp	r3, #47	; 0x2f
 800f102:	d0f8      	beq.n	800f0f6 <follow_path+0x16>
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	781b      	ldrb	r3, [r3, #0]
 800f108:	2b5c      	cmp	r3, #92	; 0x5c
 800f10a:	d0f4      	beq.n	800f0f6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f10c:	693b      	ldr	r3, [r7, #16]
 800f10e:	2200      	movs	r2, #0
 800f110:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	781b      	ldrb	r3, [r3, #0]
 800f116:	2b1f      	cmp	r3, #31
 800f118:	d80a      	bhi.n	800f130 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2280      	movs	r2, #128	; 0x80
 800f11e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f122:	2100      	movs	r1, #0
 800f124:	6878      	ldr	r0, [r7, #4]
 800f126:	f7fe ff15 	bl	800df54 <dir_sdi>
 800f12a:	4603      	mov	r3, r0
 800f12c:	75fb      	strb	r3, [r7, #23]
 800f12e:	e048      	b.n	800f1c2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f130:	463b      	mov	r3, r7
 800f132:	4619      	mov	r1, r3
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f7ff fe1b 	bl	800ed70 <create_name>
 800f13a:	4603      	mov	r3, r0
 800f13c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f13e:	7dfb      	ldrb	r3, [r7, #23]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d139      	bne.n	800f1b8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f144:	6878      	ldr	r0, [r7, #4]
 800f146:	f7ff fb7d 	bl	800e844 <dir_find>
 800f14a:	4603      	mov	r3, r0
 800f14c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f154:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f156:	7dfb      	ldrb	r3, [r7, #23]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d00a      	beq.n	800f172 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f15c:	7dfb      	ldrb	r3, [r7, #23]
 800f15e:	2b04      	cmp	r3, #4
 800f160:	d12c      	bne.n	800f1bc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f162:	7afb      	ldrb	r3, [r7, #11]
 800f164:	f003 0304 	and.w	r3, r3, #4
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d127      	bne.n	800f1bc <follow_path+0xdc>
 800f16c:	2305      	movs	r3, #5
 800f16e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f170:	e024      	b.n	800f1bc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f172:	7afb      	ldrb	r3, [r7, #11]
 800f174:	f003 0304 	and.w	r3, r3, #4
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d121      	bne.n	800f1c0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f17c:	693b      	ldr	r3, [r7, #16]
 800f17e:	799b      	ldrb	r3, [r3, #6]
 800f180:	f003 0310 	and.w	r3, r3, #16
 800f184:	2b00      	cmp	r3, #0
 800f186:	d102      	bne.n	800f18e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f188:	2305      	movs	r3, #5
 800f18a:	75fb      	strb	r3, [r7, #23]
 800f18c:	e019      	b.n	800f1c2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	695b      	ldr	r3, [r3, #20]
 800f198:	68fa      	ldr	r2, [r7, #12]
 800f19a:	8992      	ldrh	r2, [r2, #12]
 800f19c:	fbb3 f0f2 	udiv	r0, r3, r2
 800f1a0:	fb00 f202 	mul.w	r2, r0, r2
 800f1a4:	1a9b      	subs	r3, r3, r2
 800f1a6:	440b      	add	r3, r1
 800f1a8:	4619      	mov	r1, r3
 800f1aa:	68f8      	ldr	r0, [r7, #12]
 800f1ac:	f7ff f878 	bl	800e2a0 <ld_clust>
 800f1b0:	4602      	mov	r2, r0
 800f1b2:	693b      	ldr	r3, [r7, #16]
 800f1b4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f1b6:	e7bb      	b.n	800f130 <follow_path+0x50>
			if (res != FR_OK) break;
 800f1b8:	bf00      	nop
 800f1ba:	e002      	b.n	800f1c2 <follow_path+0xe2>
				break;
 800f1bc:	bf00      	nop
 800f1be:	e000      	b.n	800f1c2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f1c0:	bf00      	nop
			}
		}
	}

	return res;
 800f1c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	3718      	adds	r7, #24
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}

0800f1cc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	b087      	sub	sp, #28
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f1d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f1d8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d031      	beq.n	800f246 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	617b      	str	r3, [r7, #20]
 800f1e8:	e002      	b.n	800f1f0 <get_ldnumber+0x24>
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	3301      	adds	r3, #1
 800f1ee:	617b      	str	r3, [r7, #20]
 800f1f0:	697b      	ldr	r3, [r7, #20]
 800f1f2:	781b      	ldrb	r3, [r3, #0]
 800f1f4:	2b1f      	cmp	r3, #31
 800f1f6:	d903      	bls.n	800f200 <get_ldnumber+0x34>
 800f1f8:	697b      	ldr	r3, [r7, #20]
 800f1fa:	781b      	ldrb	r3, [r3, #0]
 800f1fc:	2b3a      	cmp	r3, #58	; 0x3a
 800f1fe:	d1f4      	bne.n	800f1ea <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f200:	697b      	ldr	r3, [r7, #20]
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	2b3a      	cmp	r3, #58	; 0x3a
 800f206:	d11c      	bne.n	800f242 <get_ldnumber+0x76>
			tp = *path;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	1c5a      	adds	r2, r3, #1
 800f212:	60fa      	str	r2, [r7, #12]
 800f214:	781b      	ldrb	r3, [r3, #0]
 800f216:	3b30      	subs	r3, #48	; 0x30
 800f218:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	2b09      	cmp	r3, #9
 800f21e:	d80e      	bhi.n	800f23e <get_ldnumber+0x72>
 800f220:	68fa      	ldr	r2, [r7, #12]
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	429a      	cmp	r2, r3
 800f226:	d10a      	bne.n	800f23e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d107      	bne.n	800f23e <get_ldnumber+0x72>
					vol = (int)i;
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	3301      	adds	r3, #1
 800f236:	617b      	str	r3, [r7, #20]
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	697a      	ldr	r2, [r7, #20]
 800f23c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	e002      	b.n	800f248 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f242:	2300      	movs	r3, #0
 800f244:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f246:	693b      	ldr	r3, [r7, #16]
}
 800f248:	4618      	mov	r0, r3
 800f24a:	371c      	adds	r7, #28
 800f24c:	46bd      	mov	sp, r7
 800f24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f252:	4770      	bx	lr

0800f254 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b082      	sub	sp, #8
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
 800f25c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2200      	movs	r2, #0
 800f262:	70da      	strb	r2, [r3, #3]
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f26a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f26c:	6839      	ldr	r1, [r7, #0]
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f7fe fa8e 	bl	800d790 <move_window>
 800f274:	4603      	mov	r3, r0
 800f276:	2b00      	cmp	r3, #0
 800f278:	d001      	beq.n	800f27e <check_fs+0x2a>
 800f27a:	2304      	movs	r3, #4
 800f27c:	e038      	b.n	800f2f0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	3338      	adds	r3, #56	; 0x38
 800f282:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f286:	4618      	mov	r0, r3
 800f288:	f7fd ffd2 	bl	800d230 <ld_word>
 800f28c:	4603      	mov	r3, r0
 800f28e:	461a      	mov	r2, r3
 800f290:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f294:	429a      	cmp	r2, r3
 800f296:	d001      	beq.n	800f29c <check_fs+0x48>
 800f298:	2303      	movs	r3, #3
 800f29a:	e029      	b.n	800f2f0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f2a2:	2be9      	cmp	r3, #233	; 0xe9
 800f2a4:	d009      	beq.n	800f2ba <check_fs+0x66>
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f2ac:	2beb      	cmp	r3, #235	; 0xeb
 800f2ae:	d11e      	bne.n	800f2ee <check_fs+0x9a>
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f2b6:	2b90      	cmp	r3, #144	; 0x90
 800f2b8:	d119      	bne.n	800f2ee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	3338      	adds	r3, #56	; 0x38
 800f2be:	3336      	adds	r3, #54	; 0x36
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f7fd ffcd 	bl	800d260 <ld_dword>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f2cc:	4a0a      	ldr	r2, [pc, #40]	; (800f2f8 <check_fs+0xa4>)
 800f2ce:	4293      	cmp	r3, r2
 800f2d0:	d101      	bne.n	800f2d6 <check_fs+0x82>
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	e00c      	b.n	800f2f0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	3338      	adds	r3, #56	; 0x38
 800f2da:	3352      	adds	r3, #82	; 0x52
 800f2dc:	4618      	mov	r0, r3
 800f2de:	f7fd ffbf 	bl	800d260 <ld_dword>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	4a05      	ldr	r2, [pc, #20]	; (800f2fc <check_fs+0xa8>)
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	d101      	bne.n	800f2ee <check_fs+0x9a>
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	e000      	b.n	800f2f0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f2ee:	2302      	movs	r3, #2
}
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	3708      	adds	r7, #8
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}
 800f2f8:	00544146 	.word	0x00544146
 800f2fc:	33544146 	.word	0x33544146

0800f300 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b096      	sub	sp, #88	; 0x58
 800f304:	af00      	add	r7, sp, #0
 800f306:	60f8      	str	r0, [r7, #12]
 800f308:	60b9      	str	r1, [r7, #8]
 800f30a:	4613      	mov	r3, r2
 800f30c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	2200      	movs	r2, #0
 800f312:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f314:	68f8      	ldr	r0, [r7, #12]
 800f316:	f7ff ff59 	bl	800f1cc <get_ldnumber>
 800f31a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f31c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f31e:	2b00      	cmp	r3, #0
 800f320:	da01      	bge.n	800f326 <find_volume+0x26>
 800f322:	230b      	movs	r3, #11
 800f324:	e265      	b.n	800f7f2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f326:	4a9f      	ldr	r2, [pc, #636]	; (800f5a4 <find_volume+0x2a4>)
 800f328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f32a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f32e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f332:	2b00      	cmp	r3, #0
 800f334:	d101      	bne.n	800f33a <find_volume+0x3a>
 800f336:	230c      	movs	r3, #12
 800f338:	e25b      	b.n	800f7f2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f33e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f340:	79fb      	ldrb	r3, [r7, #7]
 800f342:	f023 0301 	bic.w	r3, r3, #1
 800f346:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d01a      	beq.n	800f386 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f352:	785b      	ldrb	r3, [r3, #1]
 800f354:	4618      	mov	r0, r3
 800f356:	f7fd fecd 	bl	800d0f4 <disk_status>
 800f35a:	4603      	mov	r3, r0
 800f35c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f360:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f364:	f003 0301 	and.w	r3, r3, #1
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d10c      	bne.n	800f386 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f36c:	79fb      	ldrb	r3, [r7, #7]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d007      	beq.n	800f382 <find_volume+0x82>
 800f372:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f376:	f003 0304 	and.w	r3, r3, #4
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d001      	beq.n	800f382 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f37e:	230a      	movs	r3, #10
 800f380:	e237      	b.n	800f7f2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800f382:	2300      	movs	r3, #0
 800f384:	e235      	b.n	800f7f2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f388:	2200      	movs	r2, #0
 800f38a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f38c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f38e:	b2da      	uxtb	r2, r3
 800f390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f392:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f396:	785b      	ldrb	r3, [r3, #1]
 800f398:	4618      	mov	r0, r3
 800f39a:	f7fd fec5 	bl	800d128 <disk_initialize>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f3a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f3a8:	f003 0301 	and.w	r3, r3, #1
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d001      	beq.n	800f3b4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f3b0:	2303      	movs	r3, #3
 800f3b2:	e21e      	b.n	800f7f2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f3b4:	79fb      	ldrb	r3, [r7, #7]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d007      	beq.n	800f3ca <find_volume+0xca>
 800f3ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f3be:	f003 0304 	and.w	r3, r3, #4
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d001      	beq.n	800f3ca <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f3c6:	230a      	movs	r3, #10
 800f3c8:	e213      	b.n	800f7f2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3cc:	7858      	ldrb	r0, [r3, #1]
 800f3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3d0:	330c      	adds	r3, #12
 800f3d2:	461a      	mov	r2, r3
 800f3d4:	2102      	movs	r1, #2
 800f3d6:	f7fd ff0d 	bl	800d1f4 <disk_ioctl>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d001      	beq.n	800f3e4 <find_volume+0xe4>
 800f3e0:	2301      	movs	r3, #1
 800f3e2:	e206      	b.n	800f7f2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3e6:	899b      	ldrh	r3, [r3, #12]
 800f3e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f3ec:	d80d      	bhi.n	800f40a <find_volume+0x10a>
 800f3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3f0:	899b      	ldrh	r3, [r3, #12]
 800f3f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f3f6:	d308      	bcc.n	800f40a <find_volume+0x10a>
 800f3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3fa:	899b      	ldrh	r3, [r3, #12]
 800f3fc:	461a      	mov	r2, r3
 800f3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f400:	899b      	ldrh	r3, [r3, #12]
 800f402:	3b01      	subs	r3, #1
 800f404:	4013      	ands	r3, r2
 800f406:	2b00      	cmp	r3, #0
 800f408:	d001      	beq.n	800f40e <find_volume+0x10e>
 800f40a:	2301      	movs	r3, #1
 800f40c:	e1f1      	b.n	800f7f2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f40e:	2300      	movs	r3, #0
 800f410:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f412:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f414:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f416:	f7ff ff1d 	bl	800f254 <check_fs>
 800f41a:	4603      	mov	r3, r0
 800f41c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f420:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f424:	2b02      	cmp	r3, #2
 800f426:	d149      	bne.n	800f4bc <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f428:	2300      	movs	r3, #0
 800f42a:	643b      	str	r3, [r7, #64]	; 0x40
 800f42c:	e01e      	b.n	800f46c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f430:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f436:	011b      	lsls	r3, r3, #4
 800f438:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f43c:	4413      	add	r3, r2
 800f43e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f442:	3304      	adds	r3, #4
 800f444:	781b      	ldrb	r3, [r3, #0]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d006      	beq.n	800f458 <find_volume+0x158>
 800f44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f44c:	3308      	adds	r3, #8
 800f44e:	4618      	mov	r0, r3
 800f450:	f7fd ff06 	bl	800d260 <ld_dword>
 800f454:	4602      	mov	r2, r0
 800f456:	e000      	b.n	800f45a <find_volume+0x15a>
 800f458:	2200      	movs	r2, #0
 800f45a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f45c:	009b      	lsls	r3, r3, #2
 800f45e:	3358      	adds	r3, #88	; 0x58
 800f460:	443b      	add	r3, r7
 800f462:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f468:	3301      	adds	r3, #1
 800f46a:	643b      	str	r3, [r7, #64]	; 0x40
 800f46c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f46e:	2b03      	cmp	r3, #3
 800f470:	d9dd      	bls.n	800f42e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f472:	2300      	movs	r3, #0
 800f474:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d002      	beq.n	800f482 <find_volume+0x182>
 800f47c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f47e:	3b01      	subs	r3, #1
 800f480:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f484:	009b      	lsls	r3, r3, #2
 800f486:	3358      	adds	r3, #88	; 0x58
 800f488:	443b      	add	r3, r7
 800f48a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f48e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f492:	2b00      	cmp	r3, #0
 800f494:	d005      	beq.n	800f4a2 <find_volume+0x1a2>
 800f496:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f498:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f49a:	f7ff fedb 	bl	800f254 <check_fs>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	e000      	b.n	800f4a4 <find_volume+0x1a4>
 800f4a2:	2303      	movs	r3, #3
 800f4a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f4a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f4ac:	2b01      	cmp	r3, #1
 800f4ae:	d905      	bls.n	800f4bc <find_volume+0x1bc>
 800f4b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4b2:	3301      	adds	r3, #1
 800f4b4:	643b      	str	r3, [r7, #64]	; 0x40
 800f4b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4b8:	2b03      	cmp	r3, #3
 800f4ba:	d9e2      	bls.n	800f482 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f4bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f4c0:	2b04      	cmp	r3, #4
 800f4c2:	d101      	bne.n	800f4c8 <find_volume+0x1c8>
 800f4c4:	2301      	movs	r3, #1
 800f4c6:	e194      	b.n	800f7f2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f4c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f4cc:	2b01      	cmp	r3, #1
 800f4ce:	d901      	bls.n	800f4d4 <find_volume+0x1d4>
 800f4d0:	230d      	movs	r3, #13
 800f4d2:	e18e      	b.n	800f7f2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d6:	3338      	adds	r3, #56	; 0x38
 800f4d8:	330b      	adds	r3, #11
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7fd fea8 	bl	800d230 <ld_word>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4e6:	899b      	ldrh	r3, [r3, #12]
 800f4e8:	429a      	cmp	r2, r3
 800f4ea:	d001      	beq.n	800f4f0 <find_volume+0x1f0>
 800f4ec:	230d      	movs	r3, #13
 800f4ee:	e180      	b.n	800f7f2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4f2:	3338      	adds	r3, #56	; 0x38
 800f4f4:	3316      	adds	r3, #22
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f7fd fe9a 	bl	800d230 <ld_word>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f502:	2b00      	cmp	r3, #0
 800f504:	d106      	bne.n	800f514 <find_volume+0x214>
 800f506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f508:	3338      	adds	r3, #56	; 0x38
 800f50a:	3324      	adds	r3, #36	; 0x24
 800f50c:	4618      	mov	r0, r3
 800f50e:	f7fd fea7 	bl	800d260 <ld_dword>
 800f512:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f516:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f518:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f51c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f522:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f526:	789b      	ldrb	r3, [r3, #2]
 800f528:	2b01      	cmp	r3, #1
 800f52a:	d005      	beq.n	800f538 <find_volume+0x238>
 800f52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f52e:	789b      	ldrb	r3, [r3, #2]
 800f530:	2b02      	cmp	r3, #2
 800f532:	d001      	beq.n	800f538 <find_volume+0x238>
 800f534:	230d      	movs	r3, #13
 800f536:	e15c      	b.n	800f7f2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f53a:	789b      	ldrb	r3, [r3, #2]
 800f53c:	461a      	mov	r2, r3
 800f53e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f540:	fb02 f303 	mul.w	r3, r2, r3
 800f544:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f548:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f54c:	b29a      	uxth	r2, r3
 800f54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f550:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f554:	895b      	ldrh	r3, [r3, #10]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d008      	beq.n	800f56c <find_volume+0x26c>
 800f55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f55c:	895b      	ldrh	r3, [r3, #10]
 800f55e:	461a      	mov	r2, r3
 800f560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f562:	895b      	ldrh	r3, [r3, #10]
 800f564:	3b01      	subs	r3, #1
 800f566:	4013      	ands	r3, r2
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d001      	beq.n	800f570 <find_volume+0x270>
 800f56c:	230d      	movs	r3, #13
 800f56e:	e140      	b.n	800f7f2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f572:	3338      	adds	r3, #56	; 0x38
 800f574:	3311      	adds	r3, #17
 800f576:	4618      	mov	r0, r3
 800f578:	f7fd fe5a 	bl	800d230 <ld_word>
 800f57c:	4603      	mov	r3, r0
 800f57e:	461a      	mov	r2, r3
 800f580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f582:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f586:	891b      	ldrh	r3, [r3, #8]
 800f588:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f58a:	8992      	ldrh	r2, [r2, #12]
 800f58c:	0952      	lsrs	r2, r2, #5
 800f58e:	b292      	uxth	r2, r2
 800f590:	fbb3 f1f2 	udiv	r1, r3, r2
 800f594:	fb01 f202 	mul.w	r2, r1, r2
 800f598:	1a9b      	subs	r3, r3, r2
 800f59a:	b29b      	uxth	r3, r3
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d003      	beq.n	800f5a8 <find_volume+0x2a8>
 800f5a0:	230d      	movs	r3, #13
 800f5a2:	e126      	b.n	800f7f2 <find_volume+0x4f2>
 800f5a4:	20003048 	.word	0x20003048

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5aa:	3338      	adds	r3, #56	; 0x38
 800f5ac:	3313      	adds	r3, #19
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7fd fe3e 	bl	800d230 <ld_word>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f5b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d106      	bne.n	800f5cc <find_volume+0x2cc>
 800f5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5c0:	3338      	adds	r3, #56	; 0x38
 800f5c2:	3320      	adds	r3, #32
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	f7fd fe4b 	bl	800d260 <ld_dword>
 800f5ca:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ce:	3338      	adds	r3, #56	; 0x38
 800f5d0:	330e      	adds	r3, #14
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f7fd fe2c 	bl	800d230 <ld_word>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f5dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d101      	bne.n	800f5e6 <find_volume+0x2e6>
 800f5e2:	230d      	movs	r3, #13
 800f5e4:	e105      	b.n	800f7f2 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f5e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f5e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5ea:	4413      	add	r3, r2
 800f5ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f5ee:	8911      	ldrh	r1, [r2, #8]
 800f5f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f5f2:	8992      	ldrh	r2, [r2, #12]
 800f5f4:	0952      	lsrs	r2, r2, #5
 800f5f6:	b292      	uxth	r2, r2
 800f5f8:	fbb1 f2f2 	udiv	r2, r1, r2
 800f5fc:	b292      	uxth	r2, r2
 800f5fe:	4413      	add	r3, r2
 800f600:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f602:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f606:	429a      	cmp	r2, r3
 800f608:	d201      	bcs.n	800f60e <find_volume+0x30e>
 800f60a:	230d      	movs	r3, #13
 800f60c:	e0f1      	b.n	800f7f2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f60e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f612:	1ad3      	subs	r3, r2, r3
 800f614:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f616:	8952      	ldrh	r2, [r2, #10]
 800f618:	fbb3 f3f2 	udiv	r3, r3, r2
 800f61c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f620:	2b00      	cmp	r3, #0
 800f622:	d101      	bne.n	800f628 <find_volume+0x328>
 800f624:	230d      	movs	r3, #13
 800f626:	e0e4      	b.n	800f7f2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800f628:	2303      	movs	r3, #3
 800f62a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f630:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f634:	4293      	cmp	r3, r2
 800f636:	d802      	bhi.n	800f63e <find_volume+0x33e>
 800f638:	2302      	movs	r3, #2
 800f63a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f640:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f644:	4293      	cmp	r3, r2
 800f646:	d802      	bhi.n	800f64e <find_volume+0x34e>
 800f648:	2301      	movs	r3, #1
 800f64a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f650:	1c9a      	adds	r2, r3, #2
 800f652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f654:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800f656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f658:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f65a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f65c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f65e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f660:	441a      	add	r2, r3
 800f662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f664:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800f666:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f66a:	441a      	add	r2, r3
 800f66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f66e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800f670:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f674:	2b03      	cmp	r3, #3
 800f676:	d11e      	bne.n	800f6b6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f67a:	3338      	adds	r3, #56	; 0x38
 800f67c:	332a      	adds	r3, #42	; 0x2a
 800f67e:	4618      	mov	r0, r3
 800f680:	f7fd fdd6 	bl	800d230 <ld_word>
 800f684:	4603      	mov	r3, r0
 800f686:	2b00      	cmp	r3, #0
 800f688:	d001      	beq.n	800f68e <find_volume+0x38e>
 800f68a:	230d      	movs	r3, #13
 800f68c:	e0b1      	b.n	800f7f2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f690:	891b      	ldrh	r3, [r3, #8]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d001      	beq.n	800f69a <find_volume+0x39a>
 800f696:	230d      	movs	r3, #13
 800f698:	e0ab      	b.n	800f7f2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f69c:	3338      	adds	r3, #56	; 0x38
 800f69e:	332c      	adds	r3, #44	; 0x2c
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	f7fd fddd 	bl	800d260 <ld_dword>
 800f6a6:	4602      	mov	r2, r0
 800f6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6aa:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ae:	69db      	ldr	r3, [r3, #28]
 800f6b0:	009b      	lsls	r3, r3, #2
 800f6b2:	647b      	str	r3, [r7, #68]	; 0x44
 800f6b4:	e01f      	b.n	800f6f6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b8:	891b      	ldrh	r3, [r3, #8]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d101      	bne.n	800f6c2 <find_volume+0x3c2>
 800f6be:	230d      	movs	r3, #13
 800f6c0:	e097      	b.n	800f7f2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f6c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6c8:	441a      	add	r2, r3
 800f6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6cc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f6ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f6d2:	2b02      	cmp	r3, #2
 800f6d4:	d103      	bne.n	800f6de <find_volume+0x3de>
 800f6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6d8:	69db      	ldr	r3, [r3, #28]
 800f6da:	005b      	lsls	r3, r3, #1
 800f6dc:	e00a      	b.n	800f6f4 <find_volume+0x3f4>
 800f6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e0:	69da      	ldr	r2, [r3, #28]
 800f6e2:	4613      	mov	r3, r2
 800f6e4:	005b      	lsls	r3, r3, #1
 800f6e6:	4413      	add	r3, r2
 800f6e8:	085a      	lsrs	r2, r3, #1
 800f6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ec:	69db      	ldr	r3, [r3, #28]
 800f6ee:	f003 0301 	and.w	r3, r3, #1
 800f6f2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f6f4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6f8:	6a1a      	ldr	r2, [r3, #32]
 800f6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6fc:	899b      	ldrh	r3, [r3, #12]
 800f6fe:	4619      	mov	r1, r3
 800f700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f702:	440b      	add	r3, r1
 800f704:	3b01      	subs	r3, #1
 800f706:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f708:	8989      	ldrh	r1, [r1, #12]
 800f70a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f70e:	429a      	cmp	r2, r3
 800f710:	d201      	bcs.n	800f716 <find_volume+0x416>
 800f712:	230d      	movs	r3, #13
 800f714:	e06d      	b.n	800f7f2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f71c:	619a      	str	r2, [r3, #24]
 800f71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f720:	699a      	ldr	r2, [r3, #24]
 800f722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f724:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800f726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f728:	2280      	movs	r2, #128	; 0x80
 800f72a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f72c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f730:	2b03      	cmp	r3, #3
 800f732:	d149      	bne.n	800f7c8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f736:	3338      	adds	r3, #56	; 0x38
 800f738:	3330      	adds	r3, #48	; 0x30
 800f73a:	4618      	mov	r0, r3
 800f73c:	f7fd fd78 	bl	800d230 <ld_word>
 800f740:	4603      	mov	r3, r0
 800f742:	2b01      	cmp	r3, #1
 800f744:	d140      	bne.n	800f7c8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f748:	3301      	adds	r3, #1
 800f74a:	4619      	mov	r1, r3
 800f74c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f74e:	f7fe f81f 	bl	800d790 <move_window>
 800f752:	4603      	mov	r3, r0
 800f754:	2b00      	cmp	r3, #0
 800f756:	d137      	bne.n	800f7c8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800f758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f75a:	2200      	movs	r2, #0
 800f75c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f760:	3338      	adds	r3, #56	; 0x38
 800f762:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f766:	4618      	mov	r0, r3
 800f768:	f7fd fd62 	bl	800d230 <ld_word>
 800f76c:	4603      	mov	r3, r0
 800f76e:	461a      	mov	r2, r3
 800f770:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f774:	429a      	cmp	r2, r3
 800f776:	d127      	bne.n	800f7c8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f77a:	3338      	adds	r3, #56	; 0x38
 800f77c:	4618      	mov	r0, r3
 800f77e:	f7fd fd6f 	bl	800d260 <ld_dword>
 800f782:	4603      	mov	r3, r0
 800f784:	4a1d      	ldr	r2, [pc, #116]	; (800f7fc <find_volume+0x4fc>)
 800f786:	4293      	cmp	r3, r2
 800f788:	d11e      	bne.n	800f7c8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f78c:	3338      	adds	r3, #56	; 0x38
 800f78e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f792:	4618      	mov	r0, r3
 800f794:	f7fd fd64 	bl	800d260 <ld_dword>
 800f798:	4603      	mov	r3, r0
 800f79a:	4a19      	ldr	r2, [pc, #100]	; (800f800 <find_volume+0x500>)
 800f79c:	4293      	cmp	r3, r2
 800f79e:	d113      	bne.n	800f7c8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7a2:	3338      	adds	r3, #56	; 0x38
 800f7a4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f7fd fd59 	bl	800d260 <ld_dword>
 800f7ae:	4602      	mov	r2, r0
 800f7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7b2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7b6:	3338      	adds	r3, #56	; 0x38
 800f7b8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f7fd fd4f 	bl	800d260 <ld_dword>
 800f7c2:	4602      	mov	r2, r0
 800f7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ca:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f7ce:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f7d0:	4b0c      	ldr	r3, [pc, #48]	; (800f804 <find_volume+0x504>)
 800f7d2:	881b      	ldrh	r3, [r3, #0]
 800f7d4:	3301      	adds	r3, #1
 800f7d6:	b29a      	uxth	r2, r3
 800f7d8:	4b0a      	ldr	r3, [pc, #40]	; (800f804 <find_volume+0x504>)
 800f7da:	801a      	strh	r2, [r3, #0]
 800f7dc:	4b09      	ldr	r3, [pc, #36]	; (800f804 <find_volume+0x504>)
 800f7de:	881a      	ldrh	r2, [r3, #0]
 800f7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e6:	4a08      	ldr	r2, [pc, #32]	; (800f808 <find_volume+0x508>)
 800f7e8:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f7ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f7ec:	f7fd ff68 	bl	800d6c0 <clear_lock>
#endif
	return FR_OK;
 800f7f0:	2300      	movs	r3, #0
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3758      	adds	r7, #88	; 0x58
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	41615252 	.word	0x41615252
 800f800:	61417272 	.word	0x61417272
 800f804:	2000304c 	.word	0x2000304c
 800f808:	20003070 	.word	0x20003070

0800f80c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b084      	sub	sp, #16
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
 800f814:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f816:	2309      	movs	r3, #9
 800f818:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d01c      	beq.n	800f85a <validate+0x4e>
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d018      	beq.n	800f85a <validate+0x4e>
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	781b      	ldrb	r3, [r3, #0]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d013      	beq.n	800f85a <validate+0x4e>
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	889a      	ldrh	r2, [r3, #4]
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	88db      	ldrh	r3, [r3, #6]
 800f83c:	429a      	cmp	r2, r3
 800f83e:	d10c      	bne.n	800f85a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	785b      	ldrb	r3, [r3, #1]
 800f846:	4618      	mov	r0, r3
 800f848:	f7fd fc54 	bl	800d0f4 <disk_status>
 800f84c:	4603      	mov	r3, r0
 800f84e:	f003 0301 	and.w	r3, r3, #1
 800f852:	2b00      	cmp	r3, #0
 800f854:	d101      	bne.n	800f85a <validate+0x4e>
			res = FR_OK;
 800f856:	2300      	movs	r3, #0
 800f858:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f85a:	7bfb      	ldrb	r3, [r7, #15]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d102      	bne.n	800f866 <validate+0x5a>
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	e000      	b.n	800f868 <validate+0x5c>
 800f866:	2300      	movs	r3, #0
 800f868:	683a      	ldr	r2, [r7, #0]
 800f86a:	6013      	str	r3, [r2, #0]
	return res;
 800f86c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f86e:	4618      	mov	r0, r3
 800f870:	3710      	adds	r7, #16
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}
	...

0800f878 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b088      	sub	sp, #32
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	60f8      	str	r0, [r7, #12]
 800f880:	60b9      	str	r1, [r7, #8]
 800f882:	4613      	mov	r3, r2
 800f884:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f88a:	f107 0310 	add.w	r3, r7, #16
 800f88e:	4618      	mov	r0, r3
 800f890:	f7ff fc9c 	bl	800f1cc <get_ldnumber>
 800f894:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f896:	69fb      	ldr	r3, [r7, #28]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	da01      	bge.n	800f8a0 <f_mount+0x28>
 800f89c:	230b      	movs	r3, #11
 800f89e:	e02b      	b.n	800f8f8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f8a0:	4a17      	ldr	r2, [pc, #92]	; (800f900 <f_mount+0x88>)
 800f8a2:	69fb      	ldr	r3, [r7, #28]
 800f8a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8a8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f8aa:	69bb      	ldr	r3, [r7, #24]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d005      	beq.n	800f8bc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f8b0:	69b8      	ldr	r0, [r7, #24]
 800f8b2:	f7fd ff05 	bl	800d6c0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f8b6:	69bb      	ldr	r3, [r7, #24]
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d002      	beq.n	800f8c8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f8c8:	68fa      	ldr	r2, [r7, #12]
 800f8ca:	490d      	ldr	r1, [pc, #52]	; (800f900 <f_mount+0x88>)
 800f8cc:	69fb      	ldr	r3, [r7, #28]
 800f8ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d002      	beq.n	800f8de <f_mount+0x66>
 800f8d8:	79fb      	ldrb	r3, [r7, #7]
 800f8da:	2b01      	cmp	r3, #1
 800f8dc:	d001      	beq.n	800f8e2 <f_mount+0x6a>
 800f8de:	2300      	movs	r3, #0
 800f8e0:	e00a      	b.n	800f8f8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f8e2:	f107 010c 	add.w	r1, r7, #12
 800f8e6:	f107 0308 	add.w	r3, r7, #8
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f7ff fd07 	bl	800f300 <find_volume>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f8f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	3720      	adds	r7, #32
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}
 800f900:	20003048 	.word	0x20003048

0800f904 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b09a      	sub	sp, #104	; 0x68
 800f908:	af00      	add	r7, sp, #0
 800f90a:	60f8      	str	r0, [r7, #12]
 800f90c:	60b9      	str	r1, [r7, #8]
 800f90e:	4613      	mov	r3, r2
 800f910:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d101      	bne.n	800f91c <f_open+0x18>
 800f918:	2309      	movs	r3, #9
 800f91a:	e1bb      	b.n	800fc94 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f91c:	79fb      	ldrb	r3, [r7, #7]
 800f91e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f922:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f924:	79fa      	ldrb	r2, [r7, #7]
 800f926:	f107 0114 	add.w	r1, r7, #20
 800f92a:	f107 0308 	add.w	r3, r7, #8
 800f92e:	4618      	mov	r0, r3
 800f930:	f7ff fce6 	bl	800f300 <find_volume>
 800f934:	4603      	mov	r3, r0
 800f936:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800f93a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f93e:	2b00      	cmp	r3, #0
 800f940:	f040 819f 	bne.w	800fc82 <f_open+0x37e>
		dj.obj.fs = fs;
 800f944:	697b      	ldr	r3, [r7, #20]
 800f946:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f948:	68ba      	ldr	r2, [r7, #8]
 800f94a:	f107 0318 	add.w	r3, r7, #24
 800f94e:	4611      	mov	r1, r2
 800f950:	4618      	mov	r0, r3
 800f952:	f7ff fbc5 	bl	800f0e0 <follow_path>
 800f956:	4603      	mov	r3, r0
 800f958:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f95c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f960:	2b00      	cmp	r3, #0
 800f962:	d11a      	bne.n	800f99a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f964:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f968:	b25b      	sxtb	r3, r3
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	da03      	bge.n	800f976 <f_open+0x72>
				res = FR_INVALID_NAME;
 800f96e:	2306      	movs	r3, #6
 800f970:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f974:	e011      	b.n	800f99a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f976:	79fb      	ldrb	r3, [r7, #7]
 800f978:	f023 0301 	bic.w	r3, r3, #1
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	bf14      	ite	ne
 800f980:	2301      	movne	r3, #1
 800f982:	2300      	moveq	r3, #0
 800f984:	b2db      	uxtb	r3, r3
 800f986:	461a      	mov	r2, r3
 800f988:	f107 0318 	add.w	r3, r7, #24
 800f98c:	4611      	mov	r1, r2
 800f98e:	4618      	mov	r0, r3
 800f990:	f7fd fd4e 	bl	800d430 <chk_lock>
 800f994:	4603      	mov	r3, r0
 800f996:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f99a:	79fb      	ldrb	r3, [r7, #7]
 800f99c:	f003 031c 	and.w	r3, r3, #28
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d07f      	beq.n	800faa4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f9a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d017      	beq.n	800f9dc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f9ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f9b0:	2b04      	cmp	r3, #4
 800f9b2:	d10e      	bne.n	800f9d2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f9b4:	f7fd fd98 	bl	800d4e8 <enq_lock>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d006      	beq.n	800f9cc <f_open+0xc8>
 800f9be:	f107 0318 	add.w	r3, r7, #24
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f7fe fffe 	bl	800e9c4 <dir_register>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	e000      	b.n	800f9ce <f_open+0xca>
 800f9cc:	2312      	movs	r3, #18
 800f9ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f9d2:	79fb      	ldrb	r3, [r7, #7]
 800f9d4:	f043 0308 	orr.w	r3, r3, #8
 800f9d8:	71fb      	strb	r3, [r7, #7]
 800f9da:	e010      	b.n	800f9fe <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f9dc:	7fbb      	ldrb	r3, [r7, #30]
 800f9de:	f003 0311 	and.w	r3, r3, #17
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d003      	beq.n	800f9ee <f_open+0xea>
					res = FR_DENIED;
 800f9e6:	2307      	movs	r3, #7
 800f9e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f9ec:	e007      	b.n	800f9fe <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f9ee:	79fb      	ldrb	r3, [r7, #7]
 800f9f0:	f003 0304 	and.w	r3, r3, #4
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d002      	beq.n	800f9fe <f_open+0xfa>
 800f9f8:	2308      	movs	r3, #8
 800f9fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f9fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d168      	bne.n	800fad8 <f_open+0x1d4>
 800fa06:	79fb      	ldrb	r3, [r7, #7]
 800fa08:	f003 0308 	and.w	r3, r3, #8
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d063      	beq.n	800fad8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800fa10:	f7fb fa84 	bl	800af1c <get_fattime>
 800fa14:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fa16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa18:	330e      	adds	r3, #14
 800fa1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f7fd fc5d 	bl	800d2dc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fa22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa24:	3316      	adds	r3, #22
 800fa26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f7fd fc57 	bl	800d2dc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fa2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa30:	330b      	adds	r3, #11
 800fa32:	2220      	movs	r2, #32
 800fa34:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa3a:	4611      	mov	r1, r2
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f7fe fc2f 	bl	800e2a0 <ld_clust>
 800fa42:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fa48:	2200      	movs	r2, #0
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7fe fc47 	bl	800e2de <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fa50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa52:	331c      	adds	r3, #28
 800fa54:	2100      	movs	r1, #0
 800fa56:	4618      	mov	r0, r3
 800fa58:	f7fd fc40 	bl	800d2dc <st_dword>
					fs->wflag = 1;
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	2201      	movs	r2, #1
 800fa60:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fa62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d037      	beq.n	800fad8 <f_open+0x1d4>
						dw = fs->winsect;
 800fa68:	697b      	ldr	r3, [r7, #20]
 800fa6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa6c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800fa6e:	f107 0318 	add.w	r3, r7, #24
 800fa72:	2200      	movs	r2, #0
 800fa74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fa76:	4618      	mov	r0, r3
 800fa78:	f7fe f937 	bl	800dcea <remove_chain>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800fa82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d126      	bne.n	800fad8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f7fd fe7e 	bl	800d790 <move_window>
 800fa94:	4603      	mov	r3, r0
 800fa96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fa9e:	3a01      	subs	r2, #1
 800faa0:	615a      	str	r2, [r3, #20]
 800faa2:	e019      	b.n	800fad8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800faa4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d115      	bne.n	800fad8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800faac:	7fbb      	ldrb	r3, [r7, #30]
 800faae:	f003 0310 	and.w	r3, r3, #16
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d003      	beq.n	800fabe <f_open+0x1ba>
					res = FR_NO_FILE;
 800fab6:	2304      	movs	r3, #4
 800fab8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fabc:	e00c      	b.n	800fad8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fabe:	79fb      	ldrb	r3, [r7, #7]
 800fac0:	f003 0302 	and.w	r3, r3, #2
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d007      	beq.n	800fad8 <f_open+0x1d4>
 800fac8:	7fbb      	ldrb	r3, [r7, #30]
 800faca:	f003 0301 	and.w	r3, r3, #1
 800face:	2b00      	cmp	r3, #0
 800fad0:	d002      	beq.n	800fad8 <f_open+0x1d4>
						res = FR_DENIED;
 800fad2:	2307      	movs	r3, #7
 800fad4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800fad8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d128      	bne.n	800fb32 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fae0:	79fb      	ldrb	r3, [r7, #7]
 800fae2:	f003 0308 	and.w	r3, r3, #8
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d003      	beq.n	800faf2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800faea:	79fb      	ldrb	r3, [r7, #7]
 800faec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800faf0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800fafa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fb00:	79fb      	ldrb	r3, [r7, #7]
 800fb02:	f023 0301 	bic.w	r3, r3, #1
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	bf14      	ite	ne
 800fb0a:	2301      	movne	r3, #1
 800fb0c:	2300      	moveq	r3, #0
 800fb0e:	b2db      	uxtb	r3, r3
 800fb10:	461a      	mov	r2, r3
 800fb12:	f107 0318 	add.w	r3, r7, #24
 800fb16:	4611      	mov	r1, r2
 800fb18:	4618      	mov	r0, r3
 800fb1a:	f7fd fd07 	bl	800d52c <inc_lock>
 800fb1e:	4602      	mov	r2, r0
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	691b      	ldr	r3, [r3, #16]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d102      	bne.n	800fb32 <f_open+0x22e>
 800fb2c:	2302      	movs	r3, #2
 800fb2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fb32:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	f040 80a3 	bne.w	800fc82 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fb3c:	697b      	ldr	r3, [r7, #20]
 800fb3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb40:	4611      	mov	r1, r2
 800fb42:	4618      	mov	r0, r3
 800fb44:	f7fe fbac 	bl	800e2a0 <ld_clust>
 800fb48:	4602      	mov	r2, r0
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fb4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb50:	331c      	adds	r3, #28
 800fb52:	4618      	mov	r0, r3
 800fb54:	f7fd fb84 	bl	800d260 <ld_dword>
 800fb58:	4602      	mov	r2, r0
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	2200      	movs	r2, #0
 800fb62:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fb64:	697a      	ldr	r2, [r7, #20]
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fb6a:	697b      	ldr	r3, [r7, #20]
 800fb6c:	88da      	ldrh	r2, [r3, #6]
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	79fa      	ldrb	r2, [r7, #7]
 800fb76:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	2200      	movs	r2, #0
 800fb82:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	2200      	movs	r2, #0
 800fb88:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	3330      	adds	r3, #48	; 0x30
 800fb8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fb92:	2100      	movs	r1, #0
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7fd fbee 	bl	800d376 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fb9a:	79fb      	ldrb	r3, [r7, #7]
 800fb9c:	f003 0320 	and.w	r3, r3, #32
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d06e      	beq.n	800fc82 <f_open+0x37e>
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	68db      	ldr	r3, [r3, #12]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d06a      	beq.n	800fc82 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	68da      	ldr	r2, [r3, #12]
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fbb4:	697b      	ldr	r3, [r7, #20]
 800fbb6:	895b      	ldrh	r3, [r3, #10]
 800fbb8:	461a      	mov	r2, r3
 800fbba:	697b      	ldr	r3, [r7, #20]
 800fbbc:	899b      	ldrh	r3, [r3, #12]
 800fbbe:	fb02 f303 	mul.w	r3, r2, r3
 800fbc2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	689b      	ldr	r3, [r3, #8]
 800fbc8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	68db      	ldr	r3, [r3, #12]
 800fbce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fbd0:	e016      	b.n	800fc00 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7fd fe97 	bl	800d90a <get_fat>
 800fbdc:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800fbde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fbe0:	2b01      	cmp	r3, #1
 800fbe2:	d802      	bhi.n	800fbea <f_open+0x2e6>
 800fbe4:	2302      	movs	r3, #2
 800fbe6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fbea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fbec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fbf0:	d102      	bne.n	800fbf8 <f_open+0x2f4>
 800fbf2:	2301      	movs	r3, #1
 800fbf4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fbf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fbfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbfc:	1ad3      	subs	r3, r2, r3
 800fbfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fc00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d103      	bne.n	800fc10 <f_open+0x30c>
 800fc08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fc0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc0c:	429a      	cmp	r2, r3
 800fc0e:	d8e0      	bhi.n	800fbd2 <f_open+0x2ce>
				}
				fp->clust = clst;
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fc14:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fc16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d131      	bne.n	800fc82 <f_open+0x37e>
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	899b      	ldrh	r3, [r3, #12]
 800fc22:	461a      	mov	r2, r3
 800fc24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc26:	fbb3 f1f2 	udiv	r1, r3, r2
 800fc2a:	fb01 f202 	mul.w	r2, r1, r2
 800fc2e:	1a9b      	subs	r3, r3, r2
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d026      	beq.n	800fc82 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fc34:	697b      	ldr	r3, [r7, #20]
 800fc36:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fc38:	4618      	mov	r0, r3
 800fc3a:	f7fd fe47 	bl	800d8cc <clust2sect>
 800fc3e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fc40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d103      	bne.n	800fc4e <f_open+0x34a>
						res = FR_INT_ERR;
 800fc46:	2302      	movs	r3, #2
 800fc48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fc4c:	e019      	b.n	800fc82 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fc4e:	697b      	ldr	r3, [r7, #20]
 800fc50:	899b      	ldrh	r3, [r3, #12]
 800fc52:	461a      	mov	r2, r3
 800fc54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc56:	fbb3 f2f2 	udiv	r2, r3, r2
 800fc5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc5c:	441a      	add	r2, r3
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	7858      	ldrb	r0, [r3, #1]
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	6a1a      	ldr	r2, [r3, #32]
 800fc70:	2301      	movs	r3, #1
 800fc72:	f7fd fa7f 	bl	800d174 <disk_read>
 800fc76:	4603      	mov	r3, r0
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d002      	beq.n	800fc82 <f_open+0x37e>
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fc82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d002      	beq.n	800fc90 <f_open+0x38c>
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fc90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800fc94:	4618      	mov	r0, r3
 800fc96:	3768      	adds	r7, #104	; 0x68
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}

0800fc9c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b08e      	sub	sp, #56	; 0x38
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	60f8      	str	r0, [r7, #12]
 800fca4:	60b9      	str	r1, [r7, #8]
 800fca6:	607a      	str	r2, [r7, #4]
 800fca8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	f107 0214 	add.w	r2, r7, #20
 800fcba:	4611      	mov	r1, r2
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f7ff fda5 	bl	800f80c <validate>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fcc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d107      	bne.n	800fce0 <f_read+0x44>
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	7d5b      	ldrb	r3, [r3, #21]
 800fcd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fcd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d002      	beq.n	800fce6 <f_read+0x4a>
 800fce0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fce4:	e135      	b.n	800ff52 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	7d1b      	ldrb	r3, [r3, #20]
 800fcea:	f003 0301 	and.w	r3, r3, #1
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d101      	bne.n	800fcf6 <f_read+0x5a>
 800fcf2:	2307      	movs	r3, #7
 800fcf4:	e12d      	b.n	800ff52 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	68da      	ldr	r2, [r3, #12]
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	699b      	ldr	r3, [r3, #24]
 800fcfe:	1ad3      	subs	r3, r2, r3
 800fd00:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800fd02:	687a      	ldr	r2, [r7, #4]
 800fd04:	6a3b      	ldr	r3, [r7, #32]
 800fd06:	429a      	cmp	r2, r3
 800fd08:	f240 811e 	bls.w	800ff48 <f_read+0x2ac>
 800fd0c:	6a3b      	ldr	r3, [r7, #32]
 800fd0e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800fd10:	e11a      	b.n	800ff48 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	699b      	ldr	r3, [r3, #24]
 800fd16:	697a      	ldr	r2, [r7, #20]
 800fd18:	8992      	ldrh	r2, [r2, #12]
 800fd1a:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd1e:	fb01 f202 	mul.w	r2, r1, r2
 800fd22:	1a9b      	subs	r3, r3, r2
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	f040 80d5 	bne.w	800fed4 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	699b      	ldr	r3, [r3, #24]
 800fd2e:	697a      	ldr	r2, [r7, #20]
 800fd30:	8992      	ldrh	r2, [r2, #12]
 800fd32:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd36:	697a      	ldr	r2, [r7, #20]
 800fd38:	8952      	ldrh	r2, [r2, #10]
 800fd3a:	3a01      	subs	r2, #1
 800fd3c:	4013      	ands	r3, r2
 800fd3e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800fd40:	69fb      	ldr	r3, [r7, #28]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d12f      	bne.n	800fda6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	699b      	ldr	r3, [r3, #24]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d103      	bne.n	800fd56 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	689b      	ldr	r3, [r3, #8]
 800fd52:	633b      	str	r3, [r7, #48]	; 0x30
 800fd54:	e013      	b.n	800fd7e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d007      	beq.n	800fd6e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	699b      	ldr	r3, [r3, #24]
 800fd62:	4619      	mov	r1, r3
 800fd64:	68f8      	ldr	r0, [r7, #12]
 800fd66:	f7fe f8bd 	bl	800dee4 <clmt_clust>
 800fd6a:	6338      	str	r0, [r7, #48]	; 0x30
 800fd6c:	e007      	b.n	800fd7e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800fd6e:	68fa      	ldr	r2, [r7, #12]
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	69db      	ldr	r3, [r3, #28]
 800fd74:	4619      	mov	r1, r3
 800fd76:	4610      	mov	r0, r2
 800fd78:	f7fd fdc7 	bl	800d90a <get_fat>
 800fd7c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800fd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd80:	2b01      	cmp	r3, #1
 800fd82:	d804      	bhi.n	800fd8e <f_read+0xf2>
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	2202      	movs	r2, #2
 800fd88:	755a      	strb	r2, [r3, #21]
 800fd8a:	2302      	movs	r3, #2
 800fd8c:	e0e1      	b.n	800ff52 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd94:	d104      	bne.n	800fda0 <f_read+0x104>
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	2201      	movs	r2, #1
 800fd9a:	755a      	strb	r2, [r3, #21]
 800fd9c:	2301      	movs	r3, #1
 800fd9e:	e0d8      	b.n	800ff52 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fda4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fda6:	697a      	ldr	r2, [r7, #20]
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	69db      	ldr	r3, [r3, #28]
 800fdac:	4619      	mov	r1, r3
 800fdae:	4610      	mov	r0, r2
 800fdb0:	f7fd fd8c 	bl	800d8cc <clust2sect>
 800fdb4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fdb6:	69bb      	ldr	r3, [r7, #24]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d104      	bne.n	800fdc6 <f_read+0x12a>
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	2202      	movs	r2, #2
 800fdc0:	755a      	strb	r2, [r3, #21]
 800fdc2:	2302      	movs	r3, #2
 800fdc4:	e0c5      	b.n	800ff52 <f_read+0x2b6>
			sect += csect;
 800fdc6:	69ba      	ldr	r2, [r7, #24]
 800fdc8:	69fb      	ldr	r3, [r7, #28]
 800fdca:	4413      	add	r3, r2
 800fdcc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800fdce:	697b      	ldr	r3, [r7, #20]
 800fdd0:	899b      	ldrh	r3, [r3, #12]
 800fdd2:	461a      	mov	r2, r3
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	fbb3 f3f2 	udiv	r3, r3, r2
 800fdda:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800fddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d041      	beq.n	800fe66 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fde2:	69fa      	ldr	r2, [r7, #28]
 800fde4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fde6:	4413      	add	r3, r2
 800fde8:	697a      	ldr	r2, [r7, #20]
 800fdea:	8952      	ldrh	r2, [r2, #10]
 800fdec:	4293      	cmp	r3, r2
 800fdee:	d905      	bls.n	800fdfc <f_read+0x160>
					cc = fs->csize - csect;
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	895b      	ldrh	r3, [r3, #10]
 800fdf4:	461a      	mov	r2, r3
 800fdf6:	69fb      	ldr	r3, [r7, #28]
 800fdf8:	1ad3      	subs	r3, r2, r3
 800fdfa:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fdfc:	697b      	ldr	r3, [r7, #20]
 800fdfe:	7858      	ldrb	r0, [r3, #1]
 800fe00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe02:	69ba      	ldr	r2, [r7, #24]
 800fe04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fe06:	f7fd f9b5 	bl	800d174 <disk_read>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d004      	beq.n	800fe1a <f_read+0x17e>
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	2201      	movs	r2, #1
 800fe14:	755a      	strb	r2, [r3, #21]
 800fe16:	2301      	movs	r3, #1
 800fe18:	e09b      	b.n	800ff52 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	7d1b      	ldrb	r3, [r3, #20]
 800fe1e:	b25b      	sxtb	r3, r3
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	da18      	bge.n	800fe56 <f_read+0x1ba>
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	6a1a      	ldr	r2, [r3, #32]
 800fe28:	69bb      	ldr	r3, [r7, #24]
 800fe2a:	1ad3      	subs	r3, r2, r3
 800fe2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe2e:	429a      	cmp	r2, r3
 800fe30:	d911      	bls.n	800fe56 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	6a1a      	ldr	r2, [r3, #32]
 800fe36:	69bb      	ldr	r3, [r7, #24]
 800fe38:	1ad3      	subs	r3, r2, r3
 800fe3a:	697a      	ldr	r2, [r7, #20]
 800fe3c:	8992      	ldrh	r2, [r2, #12]
 800fe3e:	fb02 f303 	mul.w	r3, r2, r3
 800fe42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe44:	18d0      	adds	r0, r2, r3
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fe4c:	697b      	ldr	r3, [r7, #20]
 800fe4e:	899b      	ldrh	r3, [r3, #12]
 800fe50:	461a      	mov	r2, r3
 800fe52:	f7fd fa6f 	bl	800d334 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	899b      	ldrh	r3, [r3, #12]
 800fe5a:	461a      	mov	r2, r3
 800fe5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe5e:	fb02 f303 	mul.w	r3, r2, r3
 800fe62:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800fe64:	e05c      	b.n	800ff20 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	6a1b      	ldr	r3, [r3, #32]
 800fe6a:	69ba      	ldr	r2, [r7, #24]
 800fe6c:	429a      	cmp	r2, r3
 800fe6e:	d02e      	beq.n	800fece <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	7d1b      	ldrb	r3, [r3, #20]
 800fe74:	b25b      	sxtb	r3, r3
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	da18      	bge.n	800feac <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fe7a:	697b      	ldr	r3, [r7, #20]
 800fe7c:	7858      	ldrb	r0, [r3, #1]
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	6a1a      	ldr	r2, [r3, #32]
 800fe88:	2301      	movs	r3, #1
 800fe8a:	f7fd f993 	bl	800d1b4 <disk_write>
 800fe8e:	4603      	mov	r3, r0
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d004      	beq.n	800fe9e <f_read+0x202>
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	2201      	movs	r2, #1
 800fe98:	755a      	strb	r2, [r3, #21]
 800fe9a:	2301      	movs	r3, #1
 800fe9c:	e059      	b.n	800ff52 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	7d1b      	ldrb	r3, [r3, #20]
 800fea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fea6:	b2da      	uxtb	r2, r3
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800feac:	697b      	ldr	r3, [r7, #20]
 800feae:	7858      	ldrb	r0, [r3, #1]
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800feb6:	2301      	movs	r3, #1
 800feb8:	69ba      	ldr	r2, [r7, #24]
 800feba:	f7fd f95b 	bl	800d174 <disk_read>
 800febe:	4603      	mov	r3, r0
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d004      	beq.n	800fece <f_read+0x232>
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	2201      	movs	r2, #1
 800fec8:	755a      	strb	r2, [r3, #21]
 800feca:	2301      	movs	r3, #1
 800fecc:	e041      	b.n	800ff52 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	69ba      	ldr	r2, [r7, #24]
 800fed2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	899b      	ldrh	r3, [r3, #12]
 800fed8:	4618      	mov	r0, r3
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	699b      	ldr	r3, [r3, #24]
 800fede:	697a      	ldr	r2, [r7, #20]
 800fee0:	8992      	ldrh	r2, [r2, #12]
 800fee2:	fbb3 f1f2 	udiv	r1, r3, r2
 800fee6:	fb01 f202 	mul.w	r2, r1, r2
 800feea:	1a9b      	subs	r3, r3, r2
 800feec:	1ac3      	subs	r3, r0, r3
 800feee:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800fef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	429a      	cmp	r2, r3
 800fef6:	d901      	bls.n	800fefc <f_read+0x260>
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	699b      	ldr	r3, [r3, #24]
 800ff06:	697a      	ldr	r2, [r7, #20]
 800ff08:	8992      	ldrh	r2, [r2, #12]
 800ff0a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ff0e:	fb00 f202 	mul.w	r2, r0, r2
 800ff12:	1a9b      	subs	r3, r3, r2
 800ff14:	440b      	add	r3, r1
 800ff16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff18:	4619      	mov	r1, r3
 800ff1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ff1c:	f7fd fa0a 	bl	800d334 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ff20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff24:	4413      	add	r3, r2
 800ff26:	627b      	str	r3, [r7, #36]	; 0x24
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	699a      	ldr	r2, [r3, #24]
 800ff2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff2e:	441a      	add	r2, r3
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	619a      	str	r2, [r3, #24]
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	681a      	ldr	r2, [r3, #0]
 800ff38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff3a:	441a      	add	r2, r3
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	601a      	str	r2, [r3, #0]
 800ff40:	687a      	ldr	r2, [r7, #4]
 800ff42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff44:	1ad3      	subs	r3, r2, r3
 800ff46:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	f47f aee1 	bne.w	800fd12 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ff50:	2300      	movs	r3, #0
}
 800ff52:	4618      	mov	r0, r3
 800ff54:	3738      	adds	r7, #56	; 0x38
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bd80      	pop	{r7, pc}

0800ff5a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ff5a:	b580      	push	{r7, lr}
 800ff5c:	b086      	sub	sp, #24
 800ff5e:	af00      	add	r7, sp, #0
 800ff60:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f107 0208 	add.w	r2, r7, #8
 800ff68:	4611      	mov	r1, r2
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f7ff fc4e 	bl	800f80c <validate>
 800ff70:	4603      	mov	r3, r0
 800ff72:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ff74:	7dfb      	ldrb	r3, [r7, #23]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d168      	bne.n	801004c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	7d1b      	ldrb	r3, [r3, #20]
 800ff7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d062      	beq.n	801004c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	7d1b      	ldrb	r3, [r3, #20]
 800ff8a:	b25b      	sxtb	r3, r3
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	da15      	bge.n	800ffbc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	7858      	ldrb	r0, [r3, #1]
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	6a1a      	ldr	r2, [r3, #32]
 800ff9e:	2301      	movs	r3, #1
 800ffa0:	f7fd f908 	bl	800d1b4 <disk_write>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d001      	beq.n	800ffae <f_sync+0x54>
 800ffaa:	2301      	movs	r3, #1
 800ffac:	e04f      	b.n	801004e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	7d1b      	ldrb	r3, [r3, #20]
 800ffb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ffb6:	b2da      	uxtb	r2, r3
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ffbc:	f7fa ffae 	bl	800af1c <get_fattime>
 800ffc0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ffc2:	68ba      	ldr	r2, [r7, #8]
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffc8:	4619      	mov	r1, r3
 800ffca:	4610      	mov	r0, r2
 800ffcc:	f7fd fbe0 	bl	800d790 <move_window>
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ffd4:	7dfb      	ldrb	r3, [r7, #23]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d138      	bne.n	801004c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffde:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	330b      	adds	r3, #11
 800ffe4:	781a      	ldrb	r2, [r3, #0]
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	330b      	adds	r3, #11
 800ffea:	f042 0220 	orr.w	r2, r2, #32
 800ffee:	b2d2      	uxtb	r2, r2
 800fff0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6818      	ldr	r0, [r3, #0]
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	689b      	ldr	r3, [r3, #8]
 800fffa:	461a      	mov	r2, r3
 800fffc:	68f9      	ldr	r1, [r7, #12]
 800fffe:	f7fe f96e 	bl	800e2de <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	f103 021c 	add.w	r2, r3, #28
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	68db      	ldr	r3, [r3, #12]
 801000c:	4619      	mov	r1, r3
 801000e:	4610      	mov	r0, r2
 8010010:	f7fd f964 	bl	800d2dc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	3316      	adds	r3, #22
 8010018:	6939      	ldr	r1, [r7, #16]
 801001a:	4618      	mov	r0, r3
 801001c:	f7fd f95e 	bl	800d2dc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	3312      	adds	r3, #18
 8010024:	2100      	movs	r1, #0
 8010026:	4618      	mov	r0, r3
 8010028:	f7fd f93d 	bl	800d2a6 <st_word>
					fs->wflag = 1;
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	2201      	movs	r2, #1
 8010030:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010032:	68bb      	ldr	r3, [r7, #8]
 8010034:	4618      	mov	r0, r3
 8010036:	f7fd fbd9 	bl	800d7ec <sync_fs>
 801003a:	4603      	mov	r3, r0
 801003c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	7d1b      	ldrb	r3, [r3, #20]
 8010042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010046:	b2da      	uxtb	r2, r3
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801004c:	7dfb      	ldrb	r3, [r7, #23]
}
 801004e:	4618      	mov	r0, r3
 8010050:	3718      	adds	r7, #24
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}

08010056 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010056:	b580      	push	{r7, lr}
 8010058:	b084      	sub	sp, #16
 801005a:	af00      	add	r7, sp, #0
 801005c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	f7ff ff7b 	bl	800ff5a <f_sync>
 8010064:	4603      	mov	r3, r0
 8010066:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010068:	7bfb      	ldrb	r3, [r7, #15]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d118      	bne.n	80100a0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	f107 0208 	add.w	r2, r7, #8
 8010074:	4611      	mov	r1, r2
 8010076:	4618      	mov	r0, r3
 8010078:	f7ff fbc8 	bl	800f80c <validate>
 801007c:	4603      	mov	r3, r0
 801007e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010080:	7bfb      	ldrb	r3, [r7, #15]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d10c      	bne.n	80100a0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	691b      	ldr	r3, [r3, #16]
 801008a:	4618      	mov	r0, r3
 801008c:	f7fd fadc 	bl	800d648 <dec_lock>
 8010090:	4603      	mov	r3, r0
 8010092:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010094:	7bfb      	ldrb	r3, [r7, #15]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d102      	bne.n	80100a0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	2200      	movs	r2, #0
 801009e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80100a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80100a2:	4618      	mov	r0, r3
 80100a4:	3710      	adds	r7, #16
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}

080100aa <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80100aa:	b580      	push	{r7, lr}
 80100ac:	b090      	sub	sp, #64	; 0x40
 80100ae:	af00      	add	r7, sp, #0
 80100b0:	6078      	str	r0, [r7, #4]
 80100b2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f107 0208 	add.w	r2, r7, #8
 80100ba:	4611      	mov	r1, r2
 80100bc:	4618      	mov	r0, r3
 80100be:	f7ff fba5 	bl	800f80c <validate>
 80100c2:	4603      	mov	r3, r0
 80100c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80100c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d103      	bne.n	80100d8 <f_lseek+0x2e>
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	7d5b      	ldrb	r3, [r3, #21]
 80100d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80100d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d002      	beq.n	80100e6 <f_lseek+0x3c>
 80100e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80100e4:	e201      	b.n	80104ea <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	f000 80d9 	beq.w	80102a2 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80100f6:	d15a      	bne.n	80101ae <f_lseek+0x104>
			tbl = fp->cltbl;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100fc:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80100fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010100:	1d1a      	adds	r2, r3, #4
 8010102:	627a      	str	r2, [r7, #36]	; 0x24
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	617b      	str	r3, [r7, #20]
 8010108:	2302      	movs	r3, #2
 801010a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	689b      	ldr	r3, [r3, #8]
 8010110:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8010112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010114:	2b00      	cmp	r3, #0
 8010116:	d03a      	beq.n	801018e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801011a:	613b      	str	r3, [r7, #16]
 801011c:	2300      	movs	r3, #0
 801011e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010122:	3302      	adds	r3, #2
 8010124:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8010126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010128:	60fb      	str	r3, [r7, #12]
 801012a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801012c:	3301      	adds	r3, #1
 801012e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010134:	4618      	mov	r0, r3
 8010136:	f7fd fbe8 	bl	800d90a <get_fat>
 801013a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801013c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801013e:	2b01      	cmp	r3, #1
 8010140:	d804      	bhi.n	801014c <f_lseek+0xa2>
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	2202      	movs	r2, #2
 8010146:	755a      	strb	r2, [r3, #21]
 8010148:	2302      	movs	r3, #2
 801014a:	e1ce      	b.n	80104ea <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801014c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801014e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010152:	d104      	bne.n	801015e <f_lseek+0xb4>
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	2201      	movs	r2, #1
 8010158:	755a      	strb	r2, [r3, #21]
 801015a:	2301      	movs	r3, #1
 801015c:	e1c5      	b.n	80104ea <f_lseek+0x440>
					} while (cl == pcl + 1);
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	3301      	adds	r3, #1
 8010162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010164:	429a      	cmp	r2, r3
 8010166:	d0de      	beq.n	8010126 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	429a      	cmp	r2, r3
 801016e:	d809      	bhi.n	8010184 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8010170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010172:	1d1a      	adds	r2, r3, #4
 8010174:	627a      	str	r2, [r7, #36]	; 0x24
 8010176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010178:	601a      	str	r2, [r3, #0]
 801017a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801017c:	1d1a      	adds	r2, r3, #4
 801017e:	627a      	str	r2, [r7, #36]	; 0x24
 8010180:	693a      	ldr	r2, [r7, #16]
 8010182:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	69db      	ldr	r3, [r3, #28]
 8010188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801018a:	429a      	cmp	r2, r3
 801018c:	d3c4      	bcc.n	8010118 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010192:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010194:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010198:	697b      	ldr	r3, [r7, #20]
 801019a:	429a      	cmp	r2, r3
 801019c:	d803      	bhi.n	80101a6 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 801019e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a0:	2200      	movs	r2, #0
 80101a2:	601a      	str	r2, [r3, #0]
 80101a4:	e19f      	b.n	80104e6 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80101a6:	2311      	movs	r3, #17
 80101a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80101ac:	e19b      	b.n	80104e6 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	68db      	ldr	r3, [r3, #12]
 80101b2:	683a      	ldr	r2, [r7, #0]
 80101b4:	429a      	cmp	r2, r3
 80101b6:	d902      	bls.n	80101be <f_lseek+0x114>
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	68db      	ldr	r3, [r3, #12]
 80101bc:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	683a      	ldr	r2, [r7, #0]
 80101c2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80101c4:	683b      	ldr	r3, [r7, #0]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	f000 818d 	beq.w	80104e6 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	3b01      	subs	r3, #1
 80101d0:	4619      	mov	r1, r3
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	f7fd fe86 	bl	800dee4 <clmt_clust>
 80101d8:	4602      	mov	r2, r0
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80101de:	68ba      	ldr	r2, [r7, #8]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	69db      	ldr	r3, [r3, #28]
 80101e4:	4619      	mov	r1, r3
 80101e6:	4610      	mov	r0, r2
 80101e8:	f7fd fb70 	bl	800d8cc <clust2sect>
 80101ec:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80101ee:	69bb      	ldr	r3, [r7, #24]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d104      	bne.n	80101fe <f_lseek+0x154>
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2202      	movs	r2, #2
 80101f8:	755a      	strb	r2, [r3, #21]
 80101fa:	2302      	movs	r3, #2
 80101fc:	e175      	b.n	80104ea <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	3b01      	subs	r3, #1
 8010202:	68ba      	ldr	r2, [r7, #8]
 8010204:	8992      	ldrh	r2, [r2, #12]
 8010206:	fbb3 f3f2 	udiv	r3, r3, r2
 801020a:	68ba      	ldr	r2, [r7, #8]
 801020c:	8952      	ldrh	r2, [r2, #10]
 801020e:	3a01      	subs	r2, #1
 8010210:	4013      	ands	r3, r2
 8010212:	69ba      	ldr	r2, [r7, #24]
 8010214:	4413      	add	r3, r2
 8010216:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	699b      	ldr	r3, [r3, #24]
 801021c:	68ba      	ldr	r2, [r7, #8]
 801021e:	8992      	ldrh	r2, [r2, #12]
 8010220:	fbb3 f1f2 	udiv	r1, r3, r2
 8010224:	fb01 f202 	mul.w	r2, r1, r2
 8010228:	1a9b      	subs	r3, r3, r2
 801022a:	2b00      	cmp	r3, #0
 801022c:	f000 815b 	beq.w	80104e6 <f_lseek+0x43c>
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	6a1b      	ldr	r3, [r3, #32]
 8010234:	69ba      	ldr	r2, [r7, #24]
 8010236:	429a      	cmp	r2, r3
 8010238:	f000 8155 	beq.w	80104e6 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	7d1b      	ldrb	r3, [r3, #20]
 8010240:	b25b      	sxtb	r3, r3
 8010242:	2b00      	cmp	r3, #0
 8010244:	da18      	bge.n	8010278 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010246:	68bb      	ldr	r3, [r7, #8]
 8010248:	7858      	ldrb	r0, [r3, #1]
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	6a1a      	ldr	r2, [r3, #32]
 8010254:	2301      	movs	r3, #1
 8010256:	f7fc ffad 	bl	800d1b4 <disk_write>
 801025a:	4603      	mov	r3, r0
 801025c:	2b00      	cmp	r3, #0
 801025e:	d004      	beq.n	801026a <f_lseek+0x1c0>
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2201      	movs	r2, #1
 8010264:	755a      	strb	r2, [r3, #21]
 8010266:	2301      	movs	r3, #1
 8010268:	e13f      	b.n	80104ea <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	7d1b      	ldrb	r3, [r3, #20]
 801026e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010272:	b2da      	uxtb	r2, r3
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010278:	68bb      	ldr	r3, [r7, #8]
 801027a:	7858      	ldrb	r0, [r3, #1]
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010282:	2301      	movs	r3, #1
 8010284:	69ba      	ldr	r2, [r7, #24]
 8010286:	f7fc ff75 	bl	800d174 <disk_read>
 801028a:	4603      	mov	r3, r0
 801028c:	2b00      	cmp	r3, #0
 801028e:	d004      	beq.n	801029a <f_lseek+0x1f0>
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2201      	movs	r2, #1
 8010294:	755a      	strb	r2, [r3, #21]
 8010296:	2301      	movs	r3, #1
 8010298:	e127      	b.n	80104ea <f_lseek+0x440>
#endif
					fp->sect = dsc;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	69ba      	ldr	r2, [r7, #24]
 801029e:	621a      	str	r2, [r3, #32]
 80102a0:	e121      	b.n	80104e6 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	68db      	ldr	r3, [r3, #12]
 80102a6:	683a      	ldr	r2, [r7, #0]
 80102a8:	429a      	cmp	r2, r3
 80102aa:	d908      	bls.n	80102be <f_lseek+0x214>
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	7d1b      	ldrb	r3, [r3, #20]
 80102b0:	f003 0302 	and.w	r3, r3, #2
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d102      	bne.n	80102be <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	68db      	ldr	r3, [r3, #12]
 80102bc:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	699b      	ldr	r3, [r3, #24]
 80102c2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80102c4:	2300      	movs	r3, #0
 80102c6:	637b      	str	r3, [r7, #52]	; 0x34
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102cc:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	f000 80b5 	beq.w	8010440 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80102d6:	68bb      	ldr	r3, [r7, #8]
 80102d8:	895b      	ldrh	r3, [r3, #10]
 80102da:	461a      	mov	r2, r3
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	899b      	ldrh	r3, [r3, #12]
 80102e0:	fb02 f303 	mul.w	r3, r2, r3
 80102e4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80102e6:	6a3b      	ldr	r3, [r7, #32]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d01b      	beq.n	8010324 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	1e5a      	subs	r2, r3, #1
 80102f0:	69fb      	ldr	r3, [r7, #28]
 80102f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80102f6:	6a3b      	ldr	r3, [r7, #32]
 80102f8:	1e59      	subs	r1, r3, #1
 80102fa:	69fb      	ldr	r3, [r7, #28]
 80102fc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010300:	429a      	cmp	r2, r3
 8010302:	d30f      	bcc.n	8010324 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010304:	6a3b      	ldr	r3, [r7, #32]
 8010306:	1e5a      	subs	r2, r3, #1
 8010308:	69fb      	ldr	r3, [r7, #28]
 801030a:	425b      	negs	r3, r3
 801030c:	401a      	ands	r2, r3
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	699b      	ldr	r3, [r3, #24]
 8010316:	683a      	ldr	r2, [r7, #0]
 8010318:	1ad3      	subs	r3, r2, r3
 801031a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	69db      	ldr	r3, [r3, #28]
 8010320:	63bb      	str	r3, [r7, #56]	; 0x38
 8010322:	e022      	b.n	801036a <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	689b      	ldr	r3, [r3, #8]
 8010328:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801032a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801032c:	2b00      	cmp	r3, #0
 801032e:	d119      	bne.n	8010364 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	2100      	movs	r1, #0
 8010334:	4618      	mov	r0, r3
 8010336:	f7fd fd3d 	bl	800ddb4 <create_chain>
 801033a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801033c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801033e:	2b01      	cmp	r3, #1
 8010340:	d104      	bne.n	801034c <f_lseek+0x2a2>
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2202      	movs	r2, #2
 8010346:	755a      	strb	r2, [r3, #21]
 8010348:	2302      	movs	r3, #2
 801034a:	e0ce      	b.n	80104ea <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801034c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801034e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010352:	d104      	bne.n	801035e <f_lseek+0x2b4>
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2201      	movs	r2, #1
 8010358:	755a      	strb	r2, [r3, #21]
 801035a:	2301      	movs	r3, #1
 801035c:	e0c5      	b.n	80104ea <f_lseek+0x440>
					fp->obj.sclust = clst;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010362:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010368:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801036a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801036c:	2b00      	cmp	r3, #0
 801036e:	d067      	beq.n	8010440 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8010370:	e03a      	b.n	80103e8 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8010372:	683a      	ldr	r2, [r7, #0]
 8010374:	69fb      	ldr	r3, [r7, #28]
 8010376:	1ad3      	subs	r3, r2, r3
 8010378:	603b      	str	r3, [r7, #0]
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	699a      	ldr	r2, [r3, #24]
 801037e:	69fb      	ldr	r3, [r7, #28]
 8010380:	441a      	add	r2, r3
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	7d1b      	ldrb	r3, [r3, #20]
 801038a:	f003 0302 	and.w	r3, r3, #2
 801038e:	2b00      	cmp	r3, #0
 8010390:	d00b      	beq.n	80103aa <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010396:	4618      	mov	r0, r3
 8010398:	f7fd fd0c 	bl	800ddb4 <create_chain>
 801039c:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801039e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d108      	bne.n	80103b6 <f_lseek+0x30c>
							ofs = 0; break;
 80103a4:	2300      	movs	r3, #0
 80103a6:	603b      	str	r3, [r7, #0]
 80103a8:	e022      	b.n	80103f0 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7fd faab 	bl	800d90a <get_fat>
 80103b4:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80103b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80103bc:	d104      	bne.n	80103c8 <f_lseek+0x31e>
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	2201      	movs	r2, #1
 80103c2:	755a      	strb	r2, [r3, #21]
 80103c4:	2301      	movs	r3, #1
 80103c6:	e090      	b.n	80104ea <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80103c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ca:	2b01      	cmp	r3, #1
 80103cc:	d904      	bls.n	80103d8 <f_lseek+0x32e>
 80103ce:	68bb      	ldr	r3, [r7, #8]
 80103d0:	69db      	ldr	r3, [r3, #28]
 80103d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103d4:	429a      	cmp	r2, r3
 80103d6:	d304      	bcc.n	80103e2 <f_lseek+0x338>
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	2202      	movs	r2, #2
 80103dc:	755a      	strb	r2, [r3, #21]
 80103de:	2302      	movs	r3, #2
 80103e0:	e083      	b.n	80104ea <f_lseek+0x440>
					fp->clust = clst;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103e6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80103e8:	683a      	ldr	r2, [r7, #0]
 80103ea:	69fb      	ldr	r3, [r7, #28]
 80103ec:	429a      	cmp	r2, r3
 80103ee:	d8c0      	bhi.n	8010372 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	699a      	ldr	r2, [r3, #24]
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	441a      	add	r2, r3
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	899b      	ldrh	r3, [r3, #12]
 8010400:	461a      	mov	r2, r3
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	fbb3 f1f2 	udiv	r1, r3, r2
 8010408:	fb01 f202 	mul.w	r2, r1, r2
 801040c:	1a9b      	subs	r3, r3, r2
 801040e:	2b00      	cmp	r3, #0
 8010410:	d016      	beq.n	8010440 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010416:	4618      	mov	r0, r3
 8010418:	f7fd fa58 	bl	800d8cc <clust2sect>
 801041c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801041e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010420:	2b00      	cmp	r3, #0
 8010422:	d104      	bne.n	801042e <f_lseek+0x384>
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2202      	movs	r2, #2
 8010428:	755a      	strb	r2, [r3, #21]
 801042a:	2302      	movs	r3, #2
 801042c:	e05d      	b.n	80104ea <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	899b      	ldrh	r3, [r3, #12]
 8010432:	461a      	mov	r2, r3
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	fbb3 f3f2 	udiv	r3, r3, r2
 801043a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801043c:	4413      	add	r3, r2
 801043e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	699a      	ldr	r2, [r3, #24]
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	68db      	ldr	r3, [r3, #12]
 8010448:	429a      	cmp	r2, r3
 801044a:	d90a      	bls.n	8010462 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	699a      	ldr	r2, [r3, #24]
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	7d1b      	ldrb	r3, [r3, #20]
 8010458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801045c:	b2da      	uxtb	r2, r3
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	699b      	ldr	r3, [r3, #24]
 8010466:	68ba      	ldr	r2, [r7, #8]
 8010468:	8992      	ldrh	r2, [r2, #12]
 801046a:	fbb3 f1f2 	udiv	r1, r3, r2
 801046e:	fb01 f202 	mul.w	r2, r1, r2
 8010472:	1a9b      	subs	r3, r3, r2
 8010474:	2b00      	cmp	r3, #0
 8010476:	d036      	beq.n	80104e6 <f_lseek+0x43c>
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	6a1b      	ldr	r3, [r3, #32]
 801047c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801047e:	429a      	cmp	r2, r3
 8010480:	d031      	beq.n	80104e6 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	7d1b      	ldrb	r3, [r3, #20]
 8010486:	b25b      	sxtb	r3, r3
 8010488:	2b00      	cmp	r3, #0
 801048a:	da18      	bge.n	80104be <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	7858      	ldrb	r0, [r3, #1]
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	6a1a      	ldr	r2, [r3, #32]
 801049a:	2301      	movs	r3, #1
 801049c:	f7fc fe8a 	bl	800d1b4 <disk_write>
 80104a0:	4603      	mov	r3, r0
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d004      	beq.n	80104b0 <f_lseek+0x406>
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	2201      	movs	r2, #1
 80104aa:	755a      	strb	r2, [r3, #21]
 80104ac:	2301      	movs	r3, #1
 80104ae:	e01c      	b.n	80104ea <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	7d1b      	ldrb	r3, [r3, #20]
 80104b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80104b8:	b2da      	uxtb	r2, r3
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80104be:	68bb      	ldr	r3, [r7, #8]
 80104c0:	7858      	ldrb	r0, [r3, #1]
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80104c8:	2301      	movs	r3, #1
 80104ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104cc:	f7fc fe52 	bl	800d174 <disk_read>
 80104d0:	4603      	mov	r3, r0
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d004      	beq.n	80104e0 <f_lseek+0x436>
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	2201      	movs	r2, #1
 80104da:	755a      	strb	r2, [r3, #21]
 80104dc:	2301      	movs	r3, #1
 80104de:	e004      	b.n	80104ea <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104e4:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80104e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	3740      	adds	r7, #64	; 0x40
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}

080104f2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80104f2:	b580      	push	{r7, lr}
 80104f4:	b086      	sub	sp, #24
 80104f6:	af00      	add	r7, sp, #0
 80104f8:	6078      	str	r0, [r7, #4]
 80104fa:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d101      	bne.n	8010506 <f_opendir+0x14>
 8010502:	2309      	movs	r3, #9
 8010504:	e064      	b.n	80105d0 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801050a:	f107 010c 	add.w	r1, r7, #12
 801050e:	463b      	mov	r3, r7
 8010510:	2200      	movs	r2, #0
 8010512:	4618      	mov	r0, r3
 8010514:	f7fe fef4 	bl	800f300 <find_volume>
 8010518:	4603      	mov	r3, r0
 801051a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801051c:	7dfb      	ldrb	r3, [r7, #23]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d14f      	bne.n	80105c2 <f_opendir+0xd0>
		obj->fs = fs;
 8010522:	68fa      	ldr	r2, [r7, #12]
 8010524:	693b      	ldr	r3, [r7, #16]
 8010526:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	4619      	mov	r1, r3
 801052c:	6878      	ldr	r0, [r7, #4]
 801052e:	f7fe fdd7 	bl	800f0e0 <follow_path>
 8010532:	4603      	mov	r3, r0
 8010534:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8010536:	7dfb      	ldrb	r3, [r7, #23]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d13d      	bne.n	80105b8 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010542:	b25b      	sxtb	r3, r3
 8010544:	2b00      	cmp	r3, #0
 8010546:	db12      	blt.n	801056e <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8010548:	693b      	ldr	r3, [r7, #16]
 801054a:	799b      	ldrb	r3, [r3, #6]
 801054c:	f003 0310 	and.w	r3, r3, #16
 8010550:	2b00      	cmp	r3, #0
 8010552:	d00a      	beq.n	801056a <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8010554:	68fa      	ldr	r2, [r7, #12]
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6a1b      	ldr	r3, [r3, #32]
 801055a:	4619      	mov	r1, r3
 801055c:	4610      	mov	r0, r2
 801055e:	f7fd fe9f 	bl	800e2a0 <ld_clust>
 8010562:	4602      	mov	r2, r0
 8010564:	693b      	ldr	r3, [r7, #16]
 8010566:	609a      	str	r2, [r3, #8]
 8010568:	e001      	b.n	801056e <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801056a:	2305      	movs	r3, #5
 801056c:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801056e:	7dfb      	ldrb	r3, [r7, #23]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d121      	bne.n	80105b8 <f_opendir+0xc6>
				obj->id = fs->id;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	88da      	ldrh	r2, [r3, #6]
 8010578:	693b      	ldr	r3, [r7, #16]
 801057a:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801057c:	2100      	movs	r1, #0
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f7fd fce8 	bl	800df54 <dir_sdi>
 8010584:	4603      	mov	r3, r0
 8010586:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8010588:	7dfb      	ldrb	r3, [r7, #23]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d114      	bne.n	80105b8 <f_opendir+0xc6>
					if (obj->sclust) {
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	689b      	ldr	r3, [r3, #8]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d00d      	beq.n	80105b2 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8010596:	2100      	movs	r1, #0
 8010598:	6878      	ldr	r0, [r7, #4]
 801059a:	f7fc ffc7 	bl	800d52c <inc_lock>
 801059e:	4602      	mov	r2, r0
 80105a0:	693b      	ldr	r3, [r7, #16]
 80105a2:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80105a4:	693b      	ldr	r3, [r7, #16]
 80105a6:	691b      	ldr	r3, [r3, #16]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d105      	bne.n	80105b8 <f_opendir+0xc6>
 80105ac:	2312      	movs	r3, #18
 80105ae:	75fb      	strb	r3, [r7, #23]
 80105b0:	e002      	b.n	80105b8 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80105b2:	693b      	ldr	r3, [r7, #16]
 80105b4:	2200      	movs	r2, #0
 80105b6:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80105b8:	7dfb      	ldrb	r3, [r7, #23]
 80105ba:	2b04      	cmp	r3, #4
 80105bc:	d101      	bne.n	80105c2 <f_opendir+0xd0>
 80105be:	2305      	movs	r3, #5
 80105c0:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80105c2:	7dfb      	ldrb	r3, [r7, #23]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d002      	beq.n	80105ce <f_opendir+0xdc>
 80105c8:	693b      	ldr	r3, [r7, #16]
 80105ca:	2200      	movs	r2, #0
 80105cc:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80105ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80105d0:	4618      	mov	r0, r3
 80105d2:	3718      	adds	r7, #24
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}

080105d8 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b084      	sub	sp, #16
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	f107 0208 	add.w	r2, r7, #8
 80105e6:	4611      	mov	r1, r2
 80105e8:	4618      	mov	r0, r3
 80105ea:	f7ff f90f 	bl	800f80c <validate>
 80105ee:	4603      	mov	r3, r0
 80105f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80105f2:	7bfb      	ldrb	r3, [r7, #15]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d110      	bne.n	801061a <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	691b      	ldr	r3, [r3, #16]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d006      	beq.n	801060e <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	691b      	ldr	r3, [r3, #16]
 8010604:	4618      	mov	r0, r3
 8010606:	f7fd f81f 	bl	800d648 <dec_lock>
 801060a:	4603      	mov	r3, r0
 801060c:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 801060e:	7bfb      	ldrb	r3, [r7, #15]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d102      	bne.n	801061a <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2200      	movs	r2, #0
 8010618:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801061a:	7bfb      	ldrb	r3, [r7, #15]
}
 801061c:	4618      	mov	r0, r3
 801061e:	3710      	adds	r7, #16
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}

08010624 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b084      	sub	sp, #16
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
 801062c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	f107 0208 	add.w	r2, r7, #8
 8010634:	4611      	mov	r1, r2
 8010636:	4618      	mov	r0, r3
 8010638:	f7ff f8e8 	bl	800f80c <validate>
 801063c:	4603      	mov	r3, r0
 801063e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010640:	7bfb      	ldrb	r3, [r7, #15]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d126      	bne.n	8010694 <f_readdir+0x70>
		if (!fno) {
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d106      	bne.n	801065a <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801064c:	2100      	movs	r1, #0
 801064e:	6878      	ldr	r0, [r7, #4]
 8010650:	f7fd fc80 	bl	800df54 <dir_sdi>
 8010654:	4603      	mov	r3, r0
 8010656:	73fb      	strb	r3, [r7, #15]
 8010658:	e01c      	b.n	8010694 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801065a:	2100      	movs	r1, #0
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	f7fe f84a 	bl	800e6f6 <dir_read>
 8010662:	4603      	mov	r3, r0
 8010664:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8010666:	7bfb      	ldrb	r3, [r7, #15]
 8010668:	2b04      	cmp	r3, #4
 801066a:	d101      	bne.n	8010670 <f_readdir+0x4c>
 801066c:	2300      	movs	r3, #0
 801066e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8010670:	7bfb      	ldrb	r3, [r7, #15]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d10e      	bne.n	8010694 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8010676:	6839      	ldr	r1, [r7, #0]
 8010678:	6878      	ldr	r0, [r7, #4]
 801067a:	f7fe fa9b 	bl	800ebb4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801067e:	2100      	movs	r1, #0
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f7fd fcf0 	bl	800e066 <dir_next>
 8010686:	4603      	mov	r3, r0
 8010688:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801068a:	7bfb      	ldrb	r3, [r7, #15]
 801068c:	2b04      	cmp	r3, #4
 801068e:	d101      	bne.n	8010694 <f_readdir+0x70>
 8010690:	2300      	movs	r3, #0
 8010692:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8010694:	7bfb      	ldrb	r3, [r7, #15]
}
 8010696:	4618      	mov	r0, r3
 8010698:	3710      	adds	r7, #16
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}

0801069e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 801069e:	b580      	push	{r7, lr}
 80106a0:	b092      	sub	sp, #72	; 0x48
 80106a2:	af00      	add	r7, sp, #0
 80106a4:	60f8      	str	r0, [r7, #12]
 80106a6:	60b9      	str	r1, [r7, #8]
 80106a8:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80106aa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80106ae:	f107 030c 	add.w	r3, r7, #12
 80106b2:	2200      	movs	r2, #0
 80106b4:	4618      	mov	r0, r3
 80106b6:	f7fe fe23 	bl	800f300 <find_volume>
 80106ba:	4603      	mov	r3, r0
 80106bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80106c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	f040 8099 	bne.w	80107fc <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80106ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80106d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106d2:	699a      	ldr	r2, [r3, #24]
 80106d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106d6:	69db      	ldr	r3, [r3, #28]
 80106d8:	3b02      	subs	r3, #2
 80106da:	429a      	cmp	r2, r3
 80106dc:	d804      	bhi.n	80106e8 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80106de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106e0:	699a      	ldr	r2, [r3, #24]
 80106e2:	68bb      	ldr	r3, [r7, #8]
 80106e4:	601a      	str	r2, [r3, #0]
 80106e6:	e089      	b.n	80107fc <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80106e8:	2300      	movs	r3, #0
 80106ea:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80106ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ee:	781b      	ldrb	r3, [r3, #0]
 80106f0:	2b01      	cmp	r3, #1
 80106f2:	d128      	bne.n	8010746 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80106f4:	2302      	movs	r3, #2
 80106f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106fa:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80106fc:	f107 0314 	add.w	r3, r7, #20
 8010700:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010702:	4618      	mov	r0, r3
 8010704:	f7fd f901 	bl	800d90a <get_fat>
 8010708:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 801070a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801070c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010710:	d103      	bne.n	801071a <f_getfree+0x7c>
 8010712:	2301      	movs	r3, #1
 8010714:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8010718:	e063      	b.n	80107e2 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 801071a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801071c:	2b01      	cmp	r3, #1
 801071e:	d103      	bne.n	8010728 <f_getfree+0x8a>
 8010720:	2302      	movs	r3, #2
 8010722:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8010726:	e05c      	b.n	80107e2 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8010728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801072a:	2b00      	cmp	r3, #0
 801072c:	d102      	bne.n	8010734 <f_getfree+0x96>
 801072e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010730:	3301      	adds	r3, #1
 8010732:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8010734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010736:	3301      	adds	r3, #1
 8010738:	63fb      	str	r3, [r7, #60]	; 0x3c
 801073a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801073c:	69db      	ldr	r3, [r3, #28]
 801073e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010740:	429a      	cmp	r2, r3
 8010742:	d3db      	bcc.n	80106fc <f_getfree+0x5e>
 8010744:	e04d      	b.n	80107e2 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8010746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010748:	69db      	ldr	r3, [r3, #28]
 801074a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801074c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801074e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010750:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8010752:	2300      	movs	r3, #0
 8010754:	637b      	str	r3, [r7, #52]	; 0x34
 8010756:	2300      	movs	r3, #0
 8010758:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 801075a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801075c:	2b00      	cmp	r3, #0
 801075e:	d113      	bne.n	8010788 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8010760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010764:	1c5a      	adds	r2, r3, #1
 8010766:	63ba      	str	r2, [r7, #56]	; 0x38
 8010768:	4619      	mov	r1, r3
 801076a:	f7fd f811 	bl	800d790 <move_window>
 801076e:	4603      	mov	r3, r0
 8010770:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8010774:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010778:	2b00      	cmp	r3, #0
 801077a:	d131      	bne.n	80107e0 <f_getfree+0x142>
							p = fs->win;
 801077c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801077e:	3338      	adds	r3, #56	; 0x38
 8010780:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8010782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010784:	899b      	ldrh	r3, [r3, #12]
 8010786:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8010788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801078a:	781b      	ldrb	r3, [r3, #0]
 801078c:	2b02      	cmp	r3, #2
 801078e:	d10f      	bne.n	80107b0 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8010790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010792:	f7fc fd4d 	bl	800d230 <ld_word>
 8010796:	4603      	mov	r3, r0
 8010798:	2b00      	cmp	r3, #0
 801079a:	d102      	bne.n	80107a2 <f_getfree+0x104>
 801079c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801079e:	3301      	adds	r3, #1
 80107a0:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80107a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107a4:	3302      	adds	r3, #2
 80107a6:	633b      	str	r3, [r7, #48]	; 0x30
 80107a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107aa:	3b02      	subs	r3, #2
 80107ac:	637b      	str	r3, [r7, #52]	; 0x34
 80107ae:	e010      	b.n	80107d2 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80107b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107b2:	f7fc fd55 	bl	800d260 <ld_dword>
 80107b6:	4603      	mov	r3, r0
 80107b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d102      	bne.n	80107c6 <f_getfree+0x128>
 80107c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107c2:	3301      	adds	r3, #1
 80107c4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80107c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c8:	3304      	adds	r3, #4
 80107ca:	633b      	str	r3, [r7, #48]	; 0x30
 80107cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107ce:	3b04      	subs	r3, #4
 80107d0:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80107d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107d4:	3b01      	subs	r3, #1
 80107d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d1bd      	bne.n	801075a <f_getfree+0xbc>
 80107de:	e000      	b.n	80107e2 <f_getfree+0x144>
							if (res != FR_OK) break;
 80107e0:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80107e2:	68bb      	ldr	r3, [r7, #8]
 80107e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80107e6:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80107e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80107ec:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80107ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107f0:	791a      	ldrb	r2, [r3, #4]
 80107f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107f4:	f042 0201 	orr.w	r2, r2, #1
 80107f8:	b2d2      	uxtb	r2, r2
 80107fa:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80107fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8010800:	4618      	mov	r0, r3
 8010802:	3748      	adds	r7, #72	; 0x48
 8010804:	46bd      	mov	sp, r7
 8010806:	bd80      	pop	{r7, pc}

08010808 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b088      	sub	sp, #32
 801080c:	af00      	add	r7, sp, #0
 801080e:	60f8      	str	r0, [r7, #12]
 8010810:	60b9      	str	r1, [r7, #8]
 8010812:	607a      	str	r2, [r7, #4]
	int n = 0;
 8010814:	2300      	movs	r3, #0
 8010816:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801081c:	e01b      	b.n	8010856 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801081e:	f107 0310 	add.w	r3, r7, #16
 8010822:	f107 0114 	add.w	r1, r7, #20
 8010826:	2201      	movs	r2, #1
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f7ff fa37 	bl	800fc9c <f_read>
		if (rc != 1) break;
 801082e:	693b      	ldr	r3, [r7, #16]
 8010830:	2b01      	cmp	r3, #1
 8010832:	d116      	bne.n	8010862 <f_gets+0x5a>
		c = s[0];
 8010834:	7d3b      	ldrb	r3, [r7, #20]
 8010836:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8010838:	7dfb      	ldrb	r3, [r7, #23]
 801083a:	2b0d      	cmp	r3, #13
 801083c:	d100      	bne.n	8010840 <f_gets+0x38>
 801083e:	e00a      	b.n	8010856 <f_gets+0x4e>
		*p++ = c;
 8010840:	69bb      	ldr	r3, [r7, #24]
 8010842:	1c5a      	adds	r2, r3, #1
 8010844:	61ba      	str	r2, [r7, #24]
 8010846:	7dfa      	ldrb	r2, [r7, #23]
 8010848:	701a      	strb	r2, [r3, #0]
		n++;
 801084a:	69fb      	ldr	r3, [r7, #28]
 801084c:	3301      	adds	r3, #1
 801084e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8010850:	7dfb      	ldrb	r3, [r7, #23]
 8010852:	2b0a      	cmp	r3, #10
 8010854:	d007      	beq.n	8010866 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	3b01      	subs	r3, #1
 801085a:	69fa      	ldr	r2, [r7, #28]
 801085c:	429a      	cmp	r2, r3
 801085e:	dbde      	blt.n	801081e <f_gets+0x16>
 8010860:	e002      	b.n	8010868 <f_gets+0x60>
		if (rc != 1) break;
 8010862:	bf00      	nop
 8010864:	e000      	b.n	8010868 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8010866:	bf00      	nop
	}
	*p = 0;
 8010868:	69bb      	ldr	r3, [r7, #24]
 801086a:	2200      	movs	r2, #0
 801086c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 801086e:	69fb      	ldr	r3, [r7, #28]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d001      	beq.n	8010878 <f_gets+0x70>
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	e000      	b.n	801087a <f_gets+0x72>
 8010878:	2300      	movs	r3, #0
}
 801087a:	4618      	mov	r0, r3
 801087c:	3720      	adds	r7, #32
 801087e:	46bd      	mov	sp, r7
 8010880:	bd80      	pop	{r7, pc}
	...

08010884 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010884:	b480      	push	{r7}
 8010886:	b087      	sub	sp, #28
 8010888:	af00      	add	r7, sp, #0
 801088a:	60f8      	str	r0, [r7, #12]
 801088c:	60b9      	str	r1, [r7, #8]
 801088e:	4613      	mov	r3, r2
 8010890:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010892:	2301      	movs	r3, #1
 8010894:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010896:	2300      	movs	r3, #0
 8010898:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801089a:	4b1f      	ldr	r3, [pc, #124]	; (8010918 <FATFS_LinkDriverEx+0x94>)
 801089c:	7a5b      	ldrb	r3, [r3, #9]
 801089e:	b2db      	uxtb	r3, r3
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d131      	bne.n	8010908 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80108a4:	4b1c      	ldr	r3, [pc, #112]	; (8010918 <FATFS_LinkDriverEx+0x94>)
 80108a6:	7a5b      	ldrb	r3, [r3, #9]
 80108a8:	b2db      	uxtb	r3, r3
 80108aa:	461a      	mov	r2, r3
 80108ac:	4b1a      	ldr	r3, [pc, #104]	; (8010918 <FATFS_LinkDriverEx+0x94>)
 80108ae:	2100      	movs	r1, #0
 80108b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80108b2:	4b19      	ldr	r3, [pc, #100]	; (8010918 <FATFS_LinkDriverEx+0x94>)
 80108b4:	7a5b      	ldrb	r3, [r3, #9]
 80108b6:	b2db      	uxtb	r3, r3
 80108b8:	4a17      	ldr	r2, [pc, #92]	; (8010918 <FATFS_LinkDriverEx+0x94>)
 80108ba:	009b      	lsls	r3, r3, #2
 80108bc:	4413      	add	r3, r2
 80108be:	68fa      	ldr	r2, [r7, #12]
 80108c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80108c2:	4b15      	ldr	r3, [pc, #84]	; (8010918 <FATFS_LinkDriverEx+0x94>)
 80108c4:	7a5b      	ldrb	r3, [r3, #9]
 80108c6:	b2db      	uxtb	r3, r3
 80108c8:	461a      	mov	r2, r3
 80108ca:	4b13      	ldr	r3, [pc, #76]	; (8010918 <FATFS_LinkDriverEx+0x94>)
 80108cc:	4413      	add	r3, r2
 80108ce:	79fa      	ldrb	r2, [r7, #7]
 80108d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80108d2:	4b11      	ldr	r3, [pc, #68]	; (8010918 <FATFS_LinkDriverEx+0x94>)
 80108d4:	7a5b      	ldrb	r3, [r3, #9]
 80108d6:	b2db      	uxtb	r3, r3
 80108d8:	1c5a      	adds	r2, r3, #1
 80108da:	b2d1      	uxtb	r1, r2
 80108dc:	4a0e      	ldr	r2, [pc, #56]	; (8010918 <FATFS_LinkDriverEx+0x94>)
 80108de:	7251      	strb	r1, [r2, #9]
 80108e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80108e2:	7dbb      	ldrb	r3, [r7, #22]
 80108e4:	3330      	adds	r3, #48	; 0x30
 80108e6:	b2da      	uxtb	r2, r3
 80108e8:	68bb      	ldr	r3, [r7, #8]
 80108ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	3301      	adds	r3, #1
 80108f0:	223a      	movs	r2, #58	; 0x3a
 80108f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80108f4:	68bb      	ldr	r3, [r7, #8]
 80108f6:	3302      	adds	r3, #2
 80108f8:	222f      	movs	r2, #47	; 0x2f
 80108fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	3303      	adds	r3, #3
 8010900:	2200      	movs	r2, #0
 8010902:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010904:	2300      	movs	r3, #0
 8010906:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010908:	7dfb      	ldrb	r3, [r7, #23]
}
 801090a:	4618      	mov	r0, r3
 801090c:	371c      	adds	r7, #28
 801090e:	46bd      	mov	sp, r7
 8010910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010914:	4770      	bx	lr
 8010916:	bf00      	nop
 8010918:	20003270 	.word	0x20003270

0801091c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b082      	sub	sp, #8
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
 8010924:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010926:	2200      	movs	r2, #0
 8010928:	6839      	ldr	r1, [r7, #0]
 801092a:	6878      	ldr	r0, [r7, #4]
 801092c:	f7ff ffaa 	bl	8010884 <FATFS_LinkDriverEx>
 8010930:	4603      	mov	r3, r0
}
 8010932:	4618      	mov	r0, r3
 8010934:	3708      	adds	r7, #8
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}
	...

0801093c <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 801093c:	b480      	push	{r7}
 801093e:	b085      	sub	sp, #20
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
 8010944:	460b      	mov	r3, r1
 8010946:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8010948:	2300      	movs	r3, #0
 801094a:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 801094c:	2301      	movs	r3, #1
 801094e:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8010950:	4b15      	ldr	r3, [pc, #84]	; (80109a8 <FATFS_UnLinkDriverEx+0x6c>)
 8010952:	7a5b      	ldrb	r3, [r3, #9]
 8010954:	b2db      	uxtb	r3, r3
 8010956:	2b00      	cmp	r3, #0
 8010958:	d01e      	beq.n	8010998 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	781b      	ldrb	r3, [r3, #0]
 801095e:	3b30      	subs	r3, #48	; 0x30
 8010960:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 8010962:	7bbb      	ldrb	r3, [r7, #14]
 8010964:	4a10      	ldr	r2, [pc, #64]	; (80109a8 <FATFS_UnLinkDriverEx+0x6c>)
 8010966:	009b      	lsls	r3, r3, #2
 8010968:	4413      	add	r3, r2
 801096a:	685b      	ldr	r3, [r3, #4]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d013      	beq.n	8010998 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8010970:	7bbb      	ldrb	r3, [r7, #14]
 8010972:	4a0d      	ldr	r2, [pc, #52]	; (80109a8 <FATFS_UnLinkDriverEx+0x6c>)
 8010974:	009b      	lsls	r3, r3, #2
 8010976:	4413      	add	r3, r2
 8010978:	2200      	movs	r2, #0
 801097a:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 801097c:	7bbb      	ldrb	r3, [r7, #14]
 801097e:	4a0a      	ldr	r2, [pc, #40]	; (80109a8 <FATFS_UnLinkDriverEx+0x6c>)
 8010980:	4413      	add	r3, r2
 8010982:	2200      	movs	r2, #0
 8010984:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8010986:	4b08      	ldr	r3, [pc, #32]	; (80109a8 <FATFS_UnLinkDriverEx+0x6c>)
 8010988:	7a5b      	ldrb	r3, [r3, #9]
 801098a:	b2db      	uxtb	r3, r3
 801098c:	3b01      	subs	r3, #1
 801098e:	b2da      	uxtb	r2, r3
 8010990:	4b05      	ldr	r3, [pc, #20]	; (80109a8 <FATFS_UnLinkDriverEx+0x6c>)
 8010992:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8010994:	2300      	movs	r3, #0
 8010996:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8010998:	7bfb      	ldrb	r3, [r7, #15]
}
 801099a:	4618      	mov	r0, r3
 801099c:	3714      	adds	r7, #20
 801099e:	46bd      	mov	sp, r7
 80109a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a4:	4770      	bx	lr
 80109a6:	bf00      	nop
 80109a8:	20003270 	.word	0x20003270

080109ac <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b082      	sub	sp, #8
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 80109b4:	2100      	movs	r1, #0
 80109b6:	6878      	ldr	r0, [r7, #4]
 80109b8:	f7ff ffc0 	bl	801093c <FATFS_UnLinkDriverEx>
 80109bc:	4603      	mov	r3, r0
}
 80109be:	4618      	mov	r0, r3
 80109c0:	3708      	adds	r7, #8
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd80      	pop	{r7, pc}
	...

080109c8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80109c8:	b480      	push	{r7}
 80109ca:	b085      	sub	sp, #20
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	4603      	mov	r3, r0
 80109d0:	6039      	str	r1, [r7, #0]
 80109d2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80109d4:	88fb      	ldrh	r3, [r7, #6]
 80109d6:	2b7f      	cmp	r3, #127	; 0x7f
 80109d8:	d802      	bhi.n	80109e0 <ff_convert+0x18>
		c = chr;
 80109da:	88fb      	ldrh	r3, [r7, #6]
 80109dc:	81fb      	strh	r3, [r7, #14]
 80109de:	e025      	b.n	8010a2c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80109e0:	683b      	ldr	r3, [r7, #0]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d00b      	beq.n	80109fe <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80109e6:	88fb      	ldrh	r3, [r7, #6]
 80109e8:	2bff      	cmp	r3, #255	; 0xff
 80109ea:	d805      	bhi.n	80109f8 <ff_convert+0x30>
 80109ec:	88fb      	ldrh	r3, [r7, #6]
 80109ee:	3b80      	subs	r3, #128	; 0x80
 80109f0:	4a12      	ldr	r2, [pc, #72]	; (8010a3c <ff_convert+0x74>)
 80109f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80109f6:	e000      	b.n	80109fa <ff_convert+0x32>
 80109f8:	2300      	movs	r3, #0
 80109fa:	81fb      	strh	r3, [r7, #14]
 80109fc:	e016      	b.n	8010a2c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80109fe:	2300      	movs	r3, #0
 8010a00:	81fb      	strh	r3, [r7, #14]
 8010a02:	e009      	b.n	8010a18 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010a04:	89fb      	ldrh	r3, [r7, #14]
 8010a06:	4a0d      	ldr	r2, [pc, #52]	; (8010a3c <ff_convert+0x74>)
 8010a08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a0c:	88fa      	ldrh	r2, [r7, #6]
 8010a0e:	429a      	cmp	r2, r3
 8010a10:	d006      	beq.n	8010a20 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010a12:	89fb      	ldrh	r3, [r7, #14]
 8010a14:	3301      	adds	r3, #1
 8010a16:	81fb      	strh	r3, [r7, #14]
 8010a18:	89fb      	ldrh	r3, [r7, #14]
 8010a1a:	2b7f      	cmp	r3, #127	; 0x7f
 8010a1c:	d9f2      	bls.n	8010a04 <ff_convert+0x3c>
 8010a1e:	e000      	b.n	8010a22 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010a20:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010a22:	89fb      	ldrh	r3, [r7, #14]
 8010a24:	3380      	adds	r3, #128	; 0x80
 8010a26:	b29b      	uxth	r3, r3
 8010a28:	b2db      	uxtb	r3, r3
 8010a2a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010a2c:	89fb      	ldrh	r3, [r7, #14]
}
 8010a2e:	4618      	mov	r0, r3
 8010a30:	3714      	adds	r7, #20
 8010a32:	46bd      	mov	sp, r7
 8010a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a38:	4770      	bx	lr
 8010a3a:	bf00      	nop
 8010a3c:	080126fc 	.word	0x080126fc

08010a40 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010a40:	b480      	push	{r7}
 8010a42:	b087      	sub	sp, #28
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	4603      	mov	r3, r0
 8010a48:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010a4a:	88fb      	ldrh	r3, [r7, #6]
 8010a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a50:	d201      	bcs.n	8010a56 <ff_wtoupper+0x16>
 8010a52:	4b3e      	ldr	r3, [pc, #248]	; (8010b4c <ff_wtoupper+0x10c>)
 8010a54:	e000      	b.n	8010a58 <ff_wtoupper+0x18>
 8010a56:	4b3e      	ldr	r3, [pc, #248]	; (8010b50 <ff_wtoupper+0x110>)
 8010a58:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010a5a:	697b      	ldr	r3, [r7, #20]
 8010a5c:	1c9a      	adds	r2, r3, #2
 8010a5e:	617a      	str	r2, [r7, #20]
 8010a60:	881b      	ldrh	r3, [r3, #0]
 8010a62:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010a64:	8a7b      	ldrh	r3, [r7, #18]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d068      	beq.n	8010b3c <ff_wtoupper+0xfc>
 8010a6a:	88fa      	ldrh	r2, [r7, #6]
 8010a6c:	8a7b      	ldrh	r3, [r7, #18]
 8010a6e:	429a      	cmp	r2, r3
 8010a70:	d364      	bcc.n	8010b3c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010a72:	697b      	ldr	r3, [r7, #20]
 8010a74:	1c9a      	adds	r2, r3, #2
 8010a76:	617a      	str	r2, [r7, #20]
 8010a78:	881b      	ldrh	r3, [r3, #0]
 8010a7a:	823b      	strh	r3, [r7, #16]
 8010a7c:	8a3b      	ldrh	r3, [r7, #16]
 8010a7e:	0a1b      	lsrs	r3, r3, #8
 8010a80:	81fb      	strh	r3, [r7, #14]
 8010a82:	8a3b      	ldrh	r3, [r7, #16]
 8010a84:	b2db      	uxtb	r3, r3
 8010a86:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010a88:	88fa      	ldrh	r2, [r7, #6]
 8010a8a:	8a79      	ldrh	r1, [r7, #18]
 8010a8c:	8a3b      	ldrh	r3, [r7, #16]
 8010a8e:	440b      	add	r3, r1
 8010a90:	429a      	cmp	r2, r3
 8010a92:	da49      	bge.n	8010b28 <ff_wtoupper+0xe8>
			switch (cmd) {
 8010a94:	89fb      	ldrh	r3, [r7, #14]
 8010a96:	2b08      	cmp	r3, #8
 8010a98:	d84f      	bhi.n	8010b3a <ff_wtoupper+0xfa>
 8010a9a:	a201      	add	r2, pc, #4	; (adr r2, 8010aa0 <ff_wtoupper+0x60>)
 8010a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010aa0:	08010ac5 	.word	0x08010ac5
 8010aa4:	08010ad7 	.word	0x08010ad7
 8010aa8:	08010aed 	.word	0x08010aed
 8010aac:	08010af5 	.word	0x08010af5
 8010ab0:	08010afd 	.word	0x08010afd
 8010ab4:	08010b05 	.word	0x08010b05
 8010ab8:	08010b0d 	.word	0x08010b0d
 8010abc:	08010b15 	.word	0x08010b15
 8010ac0:	08010b1d 	.word	0x08010b1d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010ac4:	88fa      	ldrh	r2, [r7, #6]
 8010ac6:	8a7b      	ldrh	r3, [r7, #18]
 8010ac8:	1ad3      	subs	r3, r2, r3
 8010aca:	005b      	lsls	r3, r3, #1
 8010acc:	697a      	ldr	r2, [r7, #20]
 8010ace:	4413      	add	r3, r2
 8010ad0:	881b      	ldrh	r3, [r3, #0]
 8010ad2:	80fb      	strh	r3, [r7, #6]
 8010ad4:	e027      	b.n	8010b26 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010ad6:	88fa      	ldrh	r2, [r7, #6]
 8010ad8:	8a7b      	ldrh	r3, [r7, #18]
 8010ada:	1ad3      	subs	r3, r2, r3
 8010adc:	b29b      	uxth	r3, r3
 8010ade:	f003 0301 	and.w	r3, r3, #1
 8010ae2:	b29b      	uxth	r3, r3
 8010ae4:	88fa      	ldrh	r2, [r7, #6]
 8010ae6:	1ad3      	subs	r3, r2, r3
 8010ae8:	80fb      	strh	r3, [r7, #6]
 8010aea:	e01c      	b.n	8010b26 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010aec:	88fb      	ldrh	r3, [r7, #6]
 8010aee:	3b10      	subs	r3, #16
 8010af0:	80fb      	strh	r3, [r7, #6]
 8010af2:	e018      	b.n	8010b26 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010af4:	88fb      	ldrh	r3, [r7, #6]
 8010af6:	3b20      	subs	r3, #32
 8010af8:	80fb      	strh	r3, [r7, #6]
 8010afa:	e014      	b.n	8010b26 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010afc:	88fb      	ldrh	r3, [r7, #6]
 8010afe:	3b30      	subs	r3, #48	; 0x30
 8010b00:	80fb      	strh	r3, [r7, #6]
 8010b02:	e010      	b.n	8010b26 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010b04:	88fb      	ldrh	r3, [r7, #6]
 8010b06:	3b1a      	subs	r3, #26
 8010b08:	80fb      	strh	r3, [r7, #6]
 8010b0a:	e00c      	b.n	8010b26 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010b0c:	88fb      	ldrh	r3, [r7, #6]
 8010b0e:	3308      	adds	r3, #8
 8010b10:	80fb      	strh	r3, [r7, #6]
 8010b12:	e008      	b.n	8010b26 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010b14:	88fb      	ldrh	r3, [r7, #6]
 8010b16:	3b50      	subs	r3, #80	; 0x50
 8010b18:	80fb      	strh	r3, [r7, #6]
 8010b1a:	e004      	b.n	8010b26 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010b1c:	88fb      	ldrh	r3, [r7, #6]
 8010b1e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010b22:	80fb      	strh	r3, [r7, #6]
 8010b24:	bf00      	nop
			}
			break;
 8010b26:	e008      	b.n	8010b3a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010b28:	89fb      	ldrh	r3, [r7, #14]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d195      	bne.n	8010a5a <ff_wtoupper+0x1a>
 8010b2e:	8a3b      	ldrh	r3, [r7, #16]
 8010b30:	005b      	lsls	r3, r3, #1
 8010b32:	697a      	ldr	r2, [r7, #20]
 8010b34:	4413      	add	r3, r2
 8010b36:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010b38:	e78f      	b.n	8010a5a <ff_wtoupper+0x1a>
			break;
 8010b3a:	bf00      	nop
	}

	return chr;
 8010b3c:	88fb      	ldrh	r3, [r7, #6]
}
 8010b3e:	4618      	mov	r0, r3
 8010b40:	371c      	adds	r7, #28
 8010b42:	46bd      	mov	sp, r7
 8010b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b48:	4770      	bx	lr
 8010b4a:	bf00      	nop
 8010b4c:	080127fc 	.word	0x080127fc
 8010b50:	080129f0 	.word	0x080129f0

08010b54 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010b58:	2201      	movs	r2, #1
 8010b5a:	490e      	ldr	r1, [pc, #56]	; (8010b94 <MX_USB_HOST_Init+0x40>)
 8010b5c:	480e      	ldr	r0, [pc, #56]	; (8010b98 <MX_USB_HOST_Init+0x44>)
 8010b5e:	f7fa fe77 	bl	800b850 <USBH_Init>
 8010b62:	4603      	mov	r3, r0
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d001      	beq.n	8010b6c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010b68:	f7f2 fd13 	bl	8003592 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8010b6c:	490b      	ldr	r1, [pc, #44]	; (8010b9c <MX_USB_HOST_Init+0x48>)
 8010b6e:	480a      	ldr	r0, [pc, #40]	; (8010b98 <MX_USB_HOST_Init+0x44>)
 8010b70:	f7fa fefc 	bl	800b96c <USBH_RegisterClass>
 8010b74:	4603      	mov	r3, r0
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d001      	beq.n	8010b7e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010b7a:	f7f2 fd0a 	bl	8003592 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010b7e:	4806      	ldr	r0, [pc, #24]	; (8010b98 <MX_USB_HOST_Init+0x44>)
 8010b80:	f7fa ff80 	bl	800ba84 <USBH_Start>
 8010b84:	4603      	mov	r3, r0
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d001      	beq.n	8010b8e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010b8a:	f7f2 fd02 	bl	8003592 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010b8e:	bf00      	nop
 8010b90:	bd80      	pop	{r7, pc}
 8010b92:	bf00      	nop
 8010b94:	08010bb5 	.word	0x08010bb5
 8010b98:	2000327c 	.word	0x2000327c
 8010b9c:	2000003c 	.word	0x2000003c

08010ba0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8010ba4:	4802      	ldr	r0, [pc, #8]	; (8010bb0 <MX_USB_HOST_Process+0x10>)
 8010ba6:	f7fa ff7d 	bl	800baa4 <USBH_Process>
}
 8010baa:	bf00      	nop
 8010bac:	bd80      	pop	{r7, pc}
 8010bae:	bf00      	nop
 8010bb0:	2000327c 	.word	0x2000327c

08010bb4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b083      	sub	sp, #12
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
 8010bbc:	460b      	mov	r3, r1
 8010bbe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010bc0:	78fb      	ldrb	r3, [r7, #3]
 8010bc2:	3b01      	subs	r3, #1
 8010bc4:	2b04      	cmp	r3, #4
 8010bc6:	d819      	bhi.n	8010bfc <USBH_UserProcess+0x48>
 8010bc8:	a201      	add	r2, pc, #4	; (adr r2, 8010bd0 <USBH_UserProcess+0x1c>)
 8010bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bce:	bf00      	nop
 8010bd0:	08010bfd 	.word	0x08010bfd
 8010bd4:	08010bed 	.word	0x08010bed
 8010bd8:	08010bfd 	.word	0x08010bfd
 8010bdc:	08010bf5 	.word	0x08010bf5
 8010be0:	08010be5 	.word	0x08010be5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010be4:	4b09      	ldr	r3, [pc, #36]	; (8010c0c <USBH_UserProcess+0x58>)
 8010be6:	2203      	movs	r2, #3
 8010be8:	701a      	strb	r2, [r3, #0]
  break;
 8010bea:	e008      	b.n	8010bfe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010bec:	4b07      	ldr	r3, [pc, #28]	; (8010c0c <USBH_UserProcess+0x58>)
 8010bee:	2202      	movs	r2, #2
 8010bf0:	701a      	strb	r2, [r3, #0]
  break;
 8010bf2:	e004      	b.n	8010bfe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010bf4:	4b05      	ldr	r3, [pc, #20]	; (8010c0c <USBH_UserProcess+0x58>)
 8010bf6:	2201      	movs	r2, #1
 8010bf8:	701a      	strb	r2, [r3, #0]
  break;
 8010bfa:	e000      	b.n	8010bfe <USBH_UserProcess+0x4a>

  default:
  break;
 8010bfc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010bfe:	bf00      	nop
 8010c00:	370c      	adds	r7, #12
 8010c02:	46bd      	mov	sp, r7
 8010c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c08:	4770      	bx	lr
 8010c0a:	bf00      	nop
 8010c0c:	20003654 	.word	0x20003654

08010c10 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b08a      	sub	sp, #40	; 0x28
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010c18:	f107 0314 	add.w	r3, r7, #20
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	601a      	str	r2, [r3, #0]
 8010c20:	605a      	str	r2, [r3, #4]
 8010c22:	609a      	str	r2, [r3, #8]
 8010c24:	60da      	str	r2, [r3, #12]
 8010c26:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010c30:	d147      	bne.n	8010cc2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010c32:	2300      	movs	r3, #0
 8010c34:	613b      	str	r3, [r7, #16]
 8010c36:	4b25      	ldr	r3, [pc, #148]	; (8010ccc <HAL_HCD_MspInit+0xbc>)
 8010c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c3a:	4a24      	ldr	r2, [pc, #144]	; (8010ccc <HAL_HCD_MspInit+0xbc>)
 8010c3c:	f043 0301 	orr.w	r3, r3, #1
 8010c40:	6313      	str	r3, [r2, #48]	; 0x30
 8010c42:	4b22      	ldr	r3, [pc, #136]	; (8010ccc <HAL_HCD_MspInit+0xbc>)
 8010c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c46:	f003 0301 	and.w	r3, r3, #1
 8010c4a:	613b      	str	r3, [r7, #16]
 8010c4c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8010c4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010c54:	2300      	movs	r3, #0
 8010c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c58:	2300      	movs	r3, #0
 8010c5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8010c5c:	f107 0314 	add.w	r3, r7, #20
 8010c60:	4619      	mov	r1, r3
 8010c62:	481b      	ldr	r0, [pc, #108]	; (8010cd0 <HAL_HCD_MspInit+0xc0>)
 8010c64:	f7f4 fa0e 	bl	8005084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8010c68:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8010c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010c6e:	2302      	movs	r3, #2
 8010c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c72:	2300      	movs	r3, #0
 8010c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010c76:	2300      	movs	r3, #0
 8010c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010c7a:	230a      	movs	r3, #10
 8010c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010c7e:	f107 0314 	add.w	r3, r7, #20
 8010c82:	4619      	mov	r1, r3
 8010c84:	4812      	ldr	r0, [pc, #72]	; (8010cd0 <HAL_HCD_MspInit+0xc0>)
 8010c86:	f7f4 f9fd 	bl	8005084 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010c8a:	4b10      	ldr	r3, [pc, #64]	; (8010ccc <HAL_HCD_MspInit+0xbc>)
 8010c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c8e:	4a0f      	ldr	r2, [pc, #60]	; (8010ccc <HAL_HCD_MspInit+0xbc>)
 8010c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c94:	6353      	str	r3, [r2, #52]	; 0x34
 8010c96:	2300      	movs	r3, #0
 8010c98:	60fb      	str	r3, [r7, #12]
 8010c9a:	4b0c      	ldr	r3, [pc, #48]	; (8010ccc <HAL_HCD_MspInit+0xbc>)
 8010c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c9e:	4a0b      	ldr	r2, [pc, #44]	; (8010ccc <HAL_HCD_MspInit+0xbc>)
 8010ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8010ca6:	4b09      	ldr	r3, [pc, #36]	; (8010ccc <HAL_HCD_MspInit+0xbc>)
 8010ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010cae:	60fb      	str	r3, [r7, #12]
 8010cb0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	2100      	movs	r1, #0
 8010cb6:	2043      	movs	r0, #67	; 0x43
 8010cb8:	f7f3 fdab 	bl	8004812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010cbc:	2043      	movs	r0, #67	; 0x43
 8010cbe:	f7f3 fdc4 	bl	800484a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010cc2:	bf00      	nop
 8010cc4:	3728      	adds	r7, #40	; 0x28
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	bd80      	pop	{r7, pc}
 8010cca:	bf00      	nop
 8010ccc:	40023800 	.word	0x40023800
 8010cd0:	40020000 	.word	0x40020000

08010cd4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b082      	sub	sp, #8
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f7fb fabd 	bl	800c262 <USBH_LL_IncTimer>
}
 8010ce8:	bf00      	nop
 8010cea:	3708      	adds	r7, #8
 8010cec:	46bd      	mov	sp, r7
 8010cee:	bd80      	pop	{r7, pc}

08010cf0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b082      	sub	sp, #8
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f7fb faf5 	bl	800c2ee <USBH_LL_Connect>
}
 8010d04:	bf00      	nop
 8010d06:	3708      	adds	r7, #8
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}

08010d0c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b082      	sub	sp, #8
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7fb fafe 	bl	800c31c <USBH_LL_Disconnect>
}
 8010d20:	bf00      	nop
 8010d22:	3708      	adds	r7, #8
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd80      	pop	{r7, pc}

08010d28 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010d28:	b480      	push	{r7}
 8010d2a:	b083      	sub	sp, #12
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
 8010d30:	460b      	mov	r3, r1
 8010d32:	70fb      	strb	r3, [r7, #3]
 8010d34:	4613      	mov	r3, r2
 8010d36:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8010d38:	bf00      	nop
 8010d3a:	370c      	adds	r7, #12
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d42:	4770      	bx	lr

08010d44 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b082      	sub	sp, #8
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010d52:	4618      	mov	r0, r3
 8010d54:	f7fb faaf 	bl	800c2b6 <USBH_LL_PortEnabled>
}
 8010d58:	bf00      	nop
 8010d5a:	3708      	adds	r7, #8
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bd80      	pop	{r7, pc}

08010d60 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b082      	sub	sp, #8
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f7fb faaf 	bl	800c2d2 <USBH_LL_PortDisabled>
}
 8010d74:	bf00      	nop
 8010d76:	3708      	adds	r7, #8
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	bd80      	pop	{r7, pc}

08010d7c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b082      	sub	sp, #8
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010d8a:	2b01      	cmp	r3, #1
 8010d8c:	d12a      	bne.n	8010de4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010d8e:	4a18      	ldr	r2, [pc, #96]	; (8010df0 <USBH_LL_Init+0x74>)
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	4a15      	ldr	r2, [pc, #84]	; (8010df0 <USBH_LL_Init+0x74>)
 8010d9a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010d9e:	4b14      	ldr	r3, [pc, #80]	; (8010df0 <USBH_LL_Init+0x74>)
 8010da0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010da4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010da6:	4b12      	ldr	r3, [pc, #72]	; (8010df0 <USBH_LL_Init+0x74>)
 8010da8:	2208      	movs	r2, #8
 8010daa:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010dac:	4b10      	ldr	r3, [pc, #64]	; (8010df0 <USBH_LL_Init+0x74>)
 8010dae:	2201      	movs	r2, #1
 8010db0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010db2:	4b0f      	ldr	r3, [pc, #60]	; (8010df0 <USBH_LL_Init+0x74>)
 8010db4:	2200      	movs	r2, #0
 8010db6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010db8:	4b0d      	ldr	r3, [pc, #52]	; (8010df0 <USBH_LL_Init+0x74>)
 8010dba:	2202      	movs	r2, #2
 8010dbc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010dbe:	4b0c      	ldr	r3, [pc, #48]	; (8010df0 <USBH_LL_Init+0x74>)
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010dc4:	480a      	ldr	r0, [pc, #40]	; (8010df0 <USBH_LL_Init+0x74>)
 8010dc6:	f7f4 fb2c 	bl	8005422 <HAL_HCD_Init>
 8010dca:	4603      	mov	r3, r0
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d001      	beq.n	8010dd4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010dd0:	f7f2 fbdf 	bl	8003592 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010dd4:	4806      	ldr	r0, [pc, #24]	; (8010df0 <USBH_LL_Init+0x74>)
 8010dd6:	f7f4 ff10 	bl	8005bfa <HAL_HCD_GetCurrentFrame>
 8010dda:	4603      	mov	r3, r0
 8010ddc:	4619      	mov	r1, r3
 8010dde:	6878      	ldr	r0, [r7, #4]
 8010de0:	f7fb fa30 	bl	800c244 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010de4:	2300      	movs	r3, #0
}
 8010de6:	4618      	mov	r0, r3
 8010de8:	3708      	adds	r7, #8
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}
 8010dee:	bf00      	nop
 8010df0:	20003658 	.word	0x20003658

08010df4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b084      	sub	sp, #16
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010e00:	2300      	movs	r3, #0
 8010e02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	f7f4 fe7f 	bl	8005b0e <HAL_HCD_Start>
 8010e10:	4603      	mov	r3, r0
 8010e12:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010e14:	7bfb      	ldrb	r3, [r7, #15]
 8010e16:	4618      	mov	r0, r3
 8010e18:	f000 f95c 	bl	80110d4 <USBH_Get_USB_Status>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e20:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e22:	4618      	mov	r0, r3
 8010e24:	3710      	adds	r7, #16
 8010e26:	46bd      	mov	sp, r7
 8010e28:	bd80      	pop	{r7, pc}

08010e2a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010e2a:	b580      	push	{r7, lr}
 8010e2c:	b084      	sub	sp, #16
 8010e2e:	af00      	add	r7, sp, #0
 8010e30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e32:	2300      	movs	r3, #0
 8010e34:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010e36:	2300      	movs	r3, #0
 8010e38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010e40:	4618      	mov	r0, r3
 8010e42:	f7f4 fe87 	bl	8005b54 <HAL_HCD_Stop>
 8010e46:	4603      	mov	r3, r0
 8010e48:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010e4a:	7bfb      	ldrb	r3, [r7, #15]
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f000 f941 	bl	80110d4 <USBH_Get_USB_Status>
 8010e52:	4603      	mov	r3, r0
 8010e54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e56:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e58:	4618      	mov	r0, r3
 8010e5a:	3710      	adds	r7, #16
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}

08010e60 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b084      	sub	sp, #16
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010e68:	2301      	movs	r3, #1
 8010e6a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010e72:	4618      	mov	r0, r3
 8010e74:	f7f4 fecf 	bl	8005c16 <HAL_HCD_GetCurrentSpeed>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	2b02      	cmp	r3, #2
 8010e7c:	d00c      	beq.n	8010e98 <USBH_LL_GetSpeed+0x38>
 8010e7e:	2b02      	cmp	r3, #2
 8010e80:	d80d      	bhi.n	8010e9e <USBH_LL_GetSpeed+0x3e>
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d002      	beq.n	8010e8c <USBH_LL_GetSpeed+0x2c>
 8010e86:	2b01      	cmp	r3, #1
 8010e88:	d003      	beq.n	8010e92 <USBH_LL_GetSpeed+0x32>
 8010e8a:	e008      	b.n	8010e9e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	73fb      	strb	r3, [r7, #15]
    break;
 8010e90:	e008      	b.n	8010ea4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010e92:	2301      	movs	r3, #1
 8010e94:	73fb      	strb	r3, [r7, #15]
    break;
 8010e96:	e005      	b.n	8010ea4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010e98:	2302      	movs	r3, #2
 8010e9a:	73fb      	strb	r3, [r7, #15]
    break;
 8010e9c:	e002      	b.n	8010ea4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010e9e:	2301      	movs	r3, #1
 8010ea0:	73fb      	strb	r3, [r7, #15]
    break;
 8010ea2:	bf00      	nop
  }
  return  speed;
 8010ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	3710      	adds	r7, #16
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd80      	pop	{r7, pc}

08010eae <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010eae:	b580      	push	{r7, lr}
 8010eb0:	b084      	sub	sp, #16
 8010eb2:	af00      	add	r7, sp, #0
 8010eb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010eba:	2300      	movs	r3, #0
 8010ebc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	f7f4 fe62 	bl	8005b8e <HAL_HCD_ResetPort>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010ece:	7bfb      	ldrb	r3, [r7, #15]
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f000 f8ff 	bl	80110d4 <USBH_Get_USB_Status>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010eda:	7bbb      	ldrb	r3, [r7, #14]
}
 8010edc:	4618      	mov	r0, r3
 8010ede:	3710      	adds	r7, #16
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}

08010ee4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b082      	sub	sp, #8
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
 8010eec:	460b      	mov	r3, r1
 8010eee:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010ef6:	78fa      	ldrb	r2, [r7, #3]
 8010ef8:	4611      	mov	r1, r2
 8010efa:	4618      	mov	r0, r3
 8010efc:	f7f4 fe69 	bl	8005bd2 <HAL_HCD_HC_GetXferCount>
 8010f00:	4603      	mov	r3, r0
}
 8010f02:	4618      	mov	r0, r3
 8010f04:	3708      	adds	r7, #8
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bd80      	pop	{r7, pc}

08010f0a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010f0a:	b590      	push	{r4, r7, lr}
 8010f0c:	b089      	sub	sp, #36	; 0x24
 8010f0e:	af04      	add	r7, sp, #16
 8010f10:	6078      	str	r0, [r7, #4]
 8010f12:	4608      	mov	r0, r1
 8010f14:	4611      	mov	r1, r2
 8010f16:	461a      	mov	r2, r3
 8010f18:	4603      	mov	r3, r0
 8010f1a:	70fb      	strb	r3, [r7, #3]
 8010f1c:	460b      	mov	r3, r1
 8010f1e:	70bb      	strb	r3, [r7, #2]
 8010f20:	4613      	mov	r3, r2
 8010f22:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f24:	2300      	movs	r3, #0
 8010f26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010f28:	2300      	movs	r3, #0
 8010f2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010f32:	787c      	ldrb	r4, [r7, #1]
 8010f34:	78ba      	ldrb	r2, [r7, #2]
 8010f36:	78f9      	ldrb	r1, [r7, #3]
 8010f38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010f3a:	9302      	str	r3, [sp, #8]
 8010f3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010f40:	9301      	str	r3, [sp, #4]
 8010f42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010f46:	9300      	str	r3, [sp, #0]
 8010f48:	4623      	mov	r3, r4
 8010f4a:	f7f4 facc 	bl	80054e6 <HAL_HCD_HC_Init>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010f52:	7bfb      	ldrb	r3, [r7, #15]
 8010f54:	4618      	mov	r0, r3
 8010f56:	f000 f8bd 	bl	80110d4 <USBH_Get_USB_Status>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f60:	4618      	mov	r0, r3
 8010f62:	3714      	adds	r7, #20
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd90      	pop	{r4, r7, pc}

08010f68 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b084      	sub	sp, #16
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
 8010f70:	460b      	mov	r3, r1
 8010f72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f74:	2300      	movs	r3, #0
 8010f76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010f78:	2300      	movs	r3, #0
 8010f7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010f82:	78fa      	ldrb	r2, [r7, #3]
 8010f84:	4611      	mov	r1, r2
 8010f86:	4618      	mov	r0, r3
 8010f88:	f7f4 fb3c 	bl	8005604 <HAL_HCD_HC_Halt>
 8010f8c:	4603      	mov	r3, r0
 8010f8e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010f90:	7bfb      	ldrb	r3, [r7, #15]
 8010f92:	4618      	mov	r0, r3
 8010f94:	f000 f89e 	bl	80110d4 <USBH_Get_USB_Status>
 8010f98:	4603      	mov	r3, r0
 8010f9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	3710      	adds	r7, #16
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bd80      	pop	{r7, pc}

08010fa6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010fa6:	b590      	push	{r4, r7, lr}
 8010fa8:	b089      	sub	sp, #36	; 0x24
 8010faa:	af04      	add	r7, sp, #16
 8010fac:	6078      	str	r0, [r7, #4]
 8010fae:	4608      	mov	r0, r1
 8010fb0:	4611      	mov	r1, r2
 8010fb2:	461a      	mov	r2, r3
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	70fb      	strb	r3, [r7, #3]
 8010fb8:	460b      	mov	r3, r1
 8010fba:	70bb      	strb	r3, [r7, #2]
 8010fbc:	4613      	mov	r3, r2
 8010fbe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010fce:	787c      	ldrb	r4, [r7, #1]
 8010fd0:	78ba      	ldrb	r2, [r7, #2]
 8010fd2:	78f9      	ldrb	r1, [r7, #3]
 8010fd4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010fd8:	9303      	str	r3, [sp, #12]
 8010fda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010fdc:	9302      	str	r3, [sp, #8]
 8010fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fe0:	9301      	str	r3, [sp, #4]
 8010fe2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010fe6:	9300      	str	r3, [sp, #0]
 8010fe8:	4623      	mov	r3, r4
 8010fea:	f7f4 fb2f 	bl	800564c <HAL_HCD_HC_SubmitRequest>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010ff2:	7bfb      	ldrb	r3, [r7, #15]
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	f000 f86d 	bl	80110d4 <USBH_Get_USB_Status>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ffe:	7bbb      	ldrb	r3, [r7, #14]
}
 8011000:	4618      	mov	r0, r3
 8011002:	3714      	adds	r7, #20
 8011004:	46bd      	mov	sp, r7
 8011006:	bd90      	pop	{r4, r7, pc}

08011008 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b082      	sub	sp, #8
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
 8011010:	460b      	mov	r3, r1
 8011012:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801101a:	78fa      	ldrb	r2, [r7, #3]
 801101c:	4611      	mov	r1, r2
 801101e:	4618      	mov	r0, r3
 8011020:	f7f4 fdc3 	bl	8005baa <HAL_HCD_HC_GetURBState>
 8011024:	4603      	mov	r3, r0
}
 8011026:	4618      	mov	r0, r3
 8011028:	3708      	adds	r7, #8
 801102a:	46bd      	mov	sp, r7
 801102c:	bd80      	pop	{r7, pc}

0801102e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801102e:	b580      	push	{r7, lr}
 8011030:	b082      	sub	sp, #8
 8011032:	af00      	add	r7, sp, #0
 8011034:	6078      	str	r0, [r7, #4]
 8011036:	460b      	mov	r3, r1
 8011038:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011040:	2b01      	cmp	r3, #1
 8011042:	d103      	bne.n	801104c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8011044:	78fb      	ldrb	r3, [r7, #3]
 8011046:	4618      	mov	r0, r3
 8011048:	f000 f870 	bl	801112c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801104c:	20c8      	movs	r0, #200	; 0xc8
 801104e:	f7f3 fae1 	bl	8004614 <HAL_Delay>
  return USBH_OK;
 8011052:	2300      	movs	r3, #0
}
 8011054:	4618      	mov	r0, r3
 8011056:	3708      	adds	r7, #8
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}

0801105c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801105c:	b480      	push	{r7}
 801105e:	b085      	sub	sp, #20
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
 8011064:	460b      	mov	r3, r1
 8011066:	70fb      	strb	r3, [r7, #3]
 8011068:	4613      	mov	r3, r2
 801106a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011072:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8011074:	78fb      	ldrb	r3, [r7, #3]
 8011076:	68fa      	ldr	r2, [r7, #12]
 8011078:	212c      	movs	r1, #44	; 0x2c
 801107a:	fb01 f303 	mul.w	r3, r1, r3
 801107e:	4413      	add	r3, r2
 8011080:	333b      	adds	r3, #59	; 0x3b
 8011082:	781b      	ldrb	r3, [r3, #0]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d009      	beq.n	801109c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8011088:	78fb      	ldrb	r3, [r7, #3]
 801108a:	68fa      	ldr	r2, [r7, #12]
 801108c:	212c      	movs	r1, #44	; 0x2c
 801108e:	fb01 f303 	mul.w	r3, r1, r3
 8011092:	4413      	add	r3, r2
 8011094:	3354      	adds	r3, #84	; 0x54
 8011096:	78ba      	ldrb	r2, [r7, #2]
 8011098:	701a      	strb	r2, [r3, #0]
 801109a:	e008      	b.n	80110ae <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801109c:	78fb      	ldrb	r3, [r7, #3]
 801109e:	68fa      	ldr	r2, [r7, #12]
 80110a0:	212c      	movs	r1, #44	; 0x2c
 80110a2:	fb01 f303 	mul.w	r3, r1, r3
 80110a6:	4413      	add	r3, r2
 80110a8:	3355      	adds	r3, #85	; 0x55
 80110aa:	78ba      	ldrb	r2, [r7, #2]
 80110ac:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80110ae:	2300      	movs	r3, #0
}
 80110b0:	4618      	mov	r0, r3
 80110b2:	3714      	adds	r7, #20
 80110b4:	46bd      	mov	sp, r7
 80110b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ba:	4770      	bx	lr

080110bc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b082      	sub	sp, #8
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	f7f3 faa5 	bl	8004614 <HAL_Delay>
}
 80110ca:	bf00      	nop
 80110cc:	3708      	adds	r7, #8
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}
	...

080110d4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80110d4:	b480      	push	{r7}
 80110d6:	b085      	sub	sp, #20
 80110d8:	af00      	add	r7, sp, #0
 80110da:	4603      	mov	r3, r0
 80110dc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80110de:	2300      	movs	r3, #0
 80110e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80110e2:	79fb      	ldrb	r3, [r7, #7]
 80110e4:	2b03      	cmp	r3, #3
 80110e6:	d817      	bhi.n	8011118 <USBH_Get_USB_Status+0x44>
 80110e8:	a201      	add	r2, pc, #4	; (adr r2, 80110f0 <USBH_Get_USB_Status+0x1c>)
 80110ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110ee:	bf00      	nop
 80110f0:	08011101 	.word	0x08011101
 80110f4:	08011107 	.word	0x08011107
 80110f8:	0801110d 	.word	0x0801110d
 80110fc:	08011113 	.word	0x08011113
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011100:	2300      	movs	r3, #0
 8011102:	73fb      	strb	r3, [r7, #15]
    break;
 8011104:	e00b      	b.n	801111e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8011106:	2302      	movs	r3, #2
 8011108:	73fb      	strb	r3, [r7, #15]
    break;
 801110a:	e008      	b.n	801111e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801110c:	2301      	movs	r3, #1
 801110e:	73fb      	strb	r3, [r7, #15]
    break;
 8011110:	e005      	b.n	801111e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011112:	2302      	movs	r3, #2
 8011114:	73fb      	strb	r3, [r7, #15]
    break;
 8011116:	e002      	b.n	801111e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011118:	2302      	movs	r3, #2
 801111a:	73fb      	strb	r3, [r7, #15]
    break;
 801111c:	bf00      	nop
  }
  return usb_status;
 801111e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011120:	4618      	mov	r0, r3
 8011122:	3714      	adds	r7, #20
 8011124:	46bd      	mov	sp, r7
 8011126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112a:	4770      	bx	lr

0801112c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b084      	sub	sp, #16
 8011130:	af00      	add	r7, sp, #0
 8011132:	4603      	mov	r3, r0
 8011134:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8011136:	79fb      	ldrb	r3, [r7, #7]
 8011138:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801113a:	79fb      	ldrb	r3, [r7, #7]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d102      	bne.n	8011146 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8011140:	2300      	movs	r3, #0
 8011142:	73fb      	strb	r3, [r7, #15]
 8011144:	e001      	b.n	801114a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8011146:	2301      	movs	r3, #1
 8011148:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 801114a:	7bfb      	ldrb	r3, [r7, #15]
 801114c:	461a      	mov	r2, r3
 801114e:	2101      	movs	r1, #1
 8011150:	4803      	ldr	r0, [pc, #12]	; (8011160 <MX_DriverVbusFS+0x34>)
 8011152:	f7f4 f933 	bl	80053bc <HAL_GPIO_WritePin>
}
 8011156:	bf00      	nop
 8011158:	3710      	adds	r7, #16
 801115a:	46bd      	mov	sp, r7
 801115c:	bd80      	pop	{r7, pc}
 801115e:	bf00      	nop
 8011160:	40020800 	.word	0x40020800

08011164 <__errno>:
 8011164:	4b01      	ldr	r3, [pc, #4]	; (801116c <__errno+0x8>)
 8011166:	6818      	ldr	r0, [r3, #0]
 8011168:	4770      	bx	lr
 801116a:	bf00      	nop
 801116c:	2000005c 	.word	0x2000005c

08011170 <__libc_init_array>:
 8011170:	b570      	push	{r4, r5, r6, lr}
 8011172:	4d0d      	ldr	r5, [pc, #52]	; (80111a8 <__libc_init_array+0x38>)
 8011174:	4c0d      	ldr	r4, [pc, #52]	; (80111ac <__libc_init_array+0x3c>)
 8011176:	1b64      	subs	r4, r4, r5
 8011178:	10a4      	asrs	r4, r4, #2
 801117a:	2600      	movs	r6, #0
 801117c:	42a6      	cmp	r6, r4
 801117e:	d109      	bne.n	8011194 <__libc_init_array+0x24>
 8011180:	4d0b      	ldr	r5, [pc, #44]	; (80111b0 <__libc_init_array+0x40>)
 8011182:	4c0c      	ldr	r4, [pc, #48]	; (80111b4 <__libc_init_array+0x44>)
 8011184:	f001 f9aa 	bl	80124dc <_init>
 8011188:	1b64      	subs	r4, r4, r5
 801118a:	10a4      	asrs	r4, r4, #2
 801118c:	2600      	movs	r6, #0
 801118e:	42a6      	cmp	r6, r4
 8011190:	d105      	bne.n	801119e <__libc_init_array+0x2e>
 8011192:	bd70      	pop	{r4, r5, r6, pc}
 8011194:	f855 3b04 	ldr.w	r3, [r5], #4
 8011198:	4798      	blx	r3
 801119a:	3601      	adds	r6, #1
 801119c:	e7ee      	b.n	801117c <__libc_init_array+0xc>
 801119e:	f855 3b04 	ldr.w	r3, [r5], #4
 80111a2:	4798      	blx	r3
 80111a4:	3601      	adds	r6, #1
 80111a6:	e7f2      	b.n	801118e <__libc_init_array+0x1e>
 80111a8:	08012b4c 	.word	0x08012b4c
 80111ac:	08012b4c 	.word	0x08012b4c
 80111b0:	08012b4c 	.word	0x08012b4c
 80111b4:	08012b50 	.word	0x08012b50

080111b8 <malloc>:
 80111b8:	4b02      	ldr	r3, [pc, #8]	; (80111c4 <malloc+0xc>)
 80111ba:	4601      	mov	r1, r0
 80111bc:	6818      	ldr	r0, [r3, #0]
 80111be:	f000 b87f 	b.w	80112c0 <_malloc_r>
 80111c2:	bf00      	nop
 80111c4:	2000005c 	.word	0x2000005c

080111c8 <free>:
 80111c8:	4b02      	ldr	r3, [pc, #8]	; (80111d4 <free+0xc>)
 80111ca:	4601      	mov	r1, r0
 80111cc:	6818      	ldr	r0, [r3, #0]
 80111ce:	f000 b80b 	b.w	80111e8 <_free_r>
 80111d2:	bf00      	nop
 80111d4:	2000005c 	.word	0x2000005c

080111d8 <memset>:
 80111d8:	4402      	add	r2, r0
 80111da:	4603      	mov	r3, r0
 80111dc:	4293      	cmp	r3, r2
 80111de:	d100      	bne.n	80111e2 <memset+0xa>
 80111e0:	4770      	bx	lr
 80111e2:	f803 1b01 	strb.w	r1, [r3], #1
 80111e6:	e7f9      	b.n	80111dc <memset+0x4>

080111e8 <_free_r>:
 80111e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80111ea:	2900      	cmp	r1, #0
 80111ec:	d044      	beq.n	8011278 <_free_r+0x90>
 80111ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80111f2:	9001      	str	r0, [sp, #4]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	f1a1 0404 	sub.w	r4, r1, #4
 80111fa:	bfb8      	it	lt
 80111fc:	18e4      	addlt	r4, r4, r3
 80111fe:	f000 fa23 	bl	8011648 <__malloc_lock>
 8011202:	4a1e      	ldr	r2, [pc, #120]	; (801127c <_free_r+0x94>)
 8011204:	9801      	ldr	r0, [sp, #4]
 8011206:	6813      	ldr	r3, [r2, #0]
 8011208:	b933      	cbnz	r3, 8011218 <_free_r+0x30>
 801120a:	6063      	str	r3, [r4, #4]
 801120c:	6014      	str	r4, [r2, #0]
 801120e:	b003      	add	sp, #12
 8011210:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011214:	f000 ba1e 	b.w	8011654 <__malloc_unlock>
 8011218:	42a3      	cmp	r3, r4
 801121a:	d908      	bls.n	801122e <_free_r+0x46>
 801121c:	6825      	ldr	r5, [r4, #0]
 801121e:	1961      	adds	r1, r4, r5
 8011220:	428b      	cmp	r3, r1
 8011222:	bf01      	itttt	eq
 8011224:	6819      	ldreq	r1, [r3, #0]
 8011226:	685b      	ldreq	r3, [r3, #4]
 8011228:	1949      	addeq	r1, r1, r5
 801122a:	6021      	streq	r1, [r4, #0]
 801122c:	e7ed      	b.n	801120a <_free_r+0x22>
 801122e:	461a      	mov	r2, r3
 8011230:	685b      	ldr	r3, [r3, #4]
 8011232:	b10b      	cbz	r3, 8011238 <_free_r+0x50>
 8011234:	42a3      	cmp	r3, r4
 8011236:	d9fa      	bls.n	801122e <_free_r+0x46>
 8011238:	6811      	ldr	r1, [r2, #0]
 801123a:	1855      	adds	r5, r2, r1
 801123c:	42a5      	cmp	r5, r4
 801123e:	d10b      	bne.n	8011258 <_free_r+0x70>
 8011240:	6824      	ldr	r4, [r4, #0]
 8011242:	4421      	add	r1, r4
 8011244:	1854      	adds	r4, r2, r1
 8011246:	42a3      	cmp	r3, r4
 8011248:	6011      	str	r1, [r2, #0]
 801124a:	d1e0      	bne.n	801120e <_free_r+0x26>
 801124c:	681c      	ldr	r4, [r3, #0]
 801124e:	685b      	ldr	r3, [r3, #4]
 8011250:	6053      	str	r3, [r2, #4]
 8011252:	4421      	add	r1, r4
 8011254:	6011      	str	r1, [r2, #0]
 8011256:	e7da      	b.n	801120e <_free_r+0x26>
 8011258:	d902      	bls.n	8011260 <_free_r+0x78>
 801125a:	230c      	movs	r3, #12
 801125c:	6003      	str	r3, [r0, #0]
 801125e:	e7d6      	b.n	801120e <_free_r+0x26>
 8011260:	6825      	ldr	r5, [r4, #0]
 8011262:	1961      	adds	r1, r4, r5
 8011264:	428b      	cmp	r3, r1
 8011266:	bf04      	itt	eq
 8011268:	6819      	ldreq	r1, [r3, #0]
 801126a:	685b      	ldreq	r3, [r3, #4]
 801126c:	6063      	str	r3, [r4, #4]
 801126e:	bf04      	itt	eq
 8011270:	1949      	addeq	r1, r1, r5
 8011272:	6021      	streq	r1, [r4, #0]
 8011274:	6054      	str	r4, [r2, #4]
 8011276:	e7ca      	b.n	801120e <_free_r+0x26>
 8011278:	b003      	add	sp, #12
 801127a:	bd30      	pop	{r4, r5, pc}
 801127c:	2000395c 	.word	0x2000395c

08011280 <sbrk_aligned>:
 8011280:	b570      	push	{r4, r5, r6, lr}
 8011282:	4e0e      	ldr	r6, [pc, #56]	; (80112bc <sbrk_aligned+0x3c>)
 8011284:	460c      	mov	r4, r1
 8011286:	6831      	ldr	r1, [r6, #0]
 8011288:	4605      	mov	r5, r0
 801128a:	b911      	cbnz	r1, 8011292 <sbrk_aligned+0x12>
 801128c:	f000 f8a4 	bl	80113d8 <_sbrk_r>
 8011290:	6030      	str	r0, [r6, #0]
 8011292:	4621      	mov	r1, r4
 8011294:	4628      	mov	r0, r5
 8011296:	f000 f89f 	bl	80113d8 <_sbrk_r>
 801129a:	1c43      	adds	r3, r0, #1
 801129c:	d00a      	beq.n	80112b4 <sbrk_aligned+0x34>
 801129e:	1cc4      	adds	r4, r0, #3
 80112a0:	f024 0403 	bic.w	r4, r4, #3
 80112a4:	42a0      	cmp	r0, r4
 80112a6:	d007      	beq.n	80112b8 <sbrk_aligned+0x38>
 80112a8:	1a21      	subs	r1, r4, r0
 80112aa:	4628      	mov	r0, r5
 80112ac:	f000 f894 	bl	80113d8 <_sbrk_r>
 80112b0:	3001      	adds	r0, #1
 80112b2:	d101      	bne.n	80112b8 <sbrk_aligned+0x38>
 80112b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80112b8:	4620      	mov	r0, r4
 80112ba:	bd70      	pop	{r4, r5, r6, pc}
 80112bc:	20003960 	.word	0x20003960

080112c0 <_malloc_r>:
 80112c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112c4:	1ccd      	adds	r5, r1, #3
 80112c6:	f025 0503 	bic.w	r5, r5, #3
 80112ca:	3508      	adds	r5, #8
 80112cc:	2d0c      	cmp	r5, #12
 80112ce:	bf38      	it	cc
 80112d0:	250c      	movcc	r5, #12
 80112d2:	2d00      	cmp	r5, #0
 80112d4:	4607      	mov	r7, r0
 80112d6:	db01      	blt.n	80112dc <_malloc_r+0x1c>
 80112d8:	42a9      	cmp	r1, r5
 80112da:	d905      	bls.n	80112e8 <_malloc_r+0x28>
 80112dc:	230c      	movs	r3, #12
 80112de:	603b      	str	r3, [r7, #0]
 80112e0:	2600      	movs	r6, #0
 80112e2:	4630      	mov	r0, r6
 80112e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112e8:	4e2e      	ldr	r6, [pc, #184]	; (80113a4 <_malloc_r+0xe4>)
 80112ea:	f000 f9ad 	bl	8011648 <__malloc_lock>
 80112ee:	6833      	ldr	r3, [r6, #0]
 80112f0:	461c      	mov	r4, r3
 80112f2:	bb34      	cbnz	r4, 8011342 <_malloc_r+0x82>
 80112f4:	4629      	mov	r1, r5
 80112f6:	4638      	mov	r0, r7
 80112f8:	f7ff ffc2 	bl	8011280 <sbrk_aligned>
 80112fc:	1c43      	adds	r3, r0, #1
 80112fe:	4604      	mov	r4, r0
 8011300:	d14d      	bne.n	801139e <_malloc_r+0xde>
 8011302:	6834      	ldr	r4, [r6, #0]
 8011304:	4626      	mov	r6, r4
 8011306:	2e00      	cmp	r6, #0
 8011308:	d140      	bne.n	801138c <_malloc_r+0xcc>
 801130a:	6823      	ldr	r3, [r4, #0]
 801130c:	4631      	mov	r1, r6
 801130e:	4638      	mov	r0, r7
 8011310:	eb04 0803 	add.w	r8, r4, r3
 8011314:	f000 f860 	bl	80113d8 <_sbrk_r>
 8011318:	4580      	cmp	r8, r0
 801131a:	d13a      	bne.n	8011392 <_malloc_r+0xd2>
 801131c:	6821      	ldr	r1, [r4, #0]
 801131e:	3503      	adds	r5, #3
 8011320:	1a6d      	subs	r5, r5, r1
 8011322:	f025 0503 	bic.w	r5, r5, #3
 8011326:	3508      	adds	r5, #8
 8011328:	2d0c      	cmp	r5, #12
 801132a:	bf38      	it	cc
 801132c:	250c      	movcc	r5, #12
 801132e:	4629      	mov	r1, r5
 8011330:	4638      	mov	r0, r7
 8011332:	f7ff ffa5 	bl	8011280 <sbrk_aligned>
 8011336:	3001      	adds	r0, #1
 8011338:	d02b      	beq.n	8011392 <_malloc_r+0xd2>
 801133a:	6823      	ldr	r3, [r4, #0]
 801133c:	442b      	add	r3, r5
 801133e:	6023      	str	r3, [r4, #0]
 8011340:	e00e      	b.n	8011360 <_malloc_r+0xa0>
 8011342:	6822      	ldr	r2, [r4, #0]
 8011344:	1b52      	subs	r2, r2, r5
 8011346:	d41e      	bmi.n	8011386 <_malloc_r+0xc6>
 8011348:	2a0b      	cmp	r2, #11
 801134a:	d916      	bls.n	801137a <_malloc_r+0xba>
 801134c:	1961      	adds	r1, r4, r5
 801134e:	42a3      	cmp	r3, r4
 8011350:	6025      	str	r5, [r4, #0]
 8011352:	bf18      	it	ne
 8011354:	6059      	strne	r1, [r3, #4]
 8011356:	6863      	ldr	r3, [r4, #4]
 8011358:	bf08      	it	eq
 801135a:	6031      	streq	r1, [r6, #0]
 801135c:	5162      	str	r2, [r4, r5]
 801135e:	604b      	str	r3, [r1, #4]
 8011360:	4638      	mov	r0, r7
 8011362:	f104 060b 	add.w	r6, r4, #11
 8011366:	f000 f975 	bl	8011654 <__malloc_unlock>
 801136a:	f026 0607 	bic.w	r6, r6, #7
 801136e:	1d23      	adds	r3, r4, #4
 8011370:	1af2      	subs	r2, r6, r3
 8011372:	d0b6      	beq.n	80112e2 <_malloc_r+0x22>
 8011374:	1b9b      	subs	r3, r3, r6
 8011376:	50a3      	str	r3, [r4, r2]
 8011378:	e7b3      	b.n	80112e2 <_malloc_r+0x22>
 801137a:	6862      	ldr	r2, [r4, #4]
 801137c:	42a3      	cmp	r3, r4
 801137e:	bf0c      	ite	eq
 8011380:	6032      	streq	r2, [r6, #0]
 8011382:	605a      	strne	r2, [r3, #4]
 8011384:	e7ec      	b.n	8011360 <_malloc_r+0xa0>
 8011386:	4623      	mov	r3, r4
 8011388:	6864      	ldr	r4, [r4, #4]
 801138a:	e7b2      	b.n	80112f2 <_malloc_r+0x32>
 801138c:	4634      	mov	r4, r6
 801138e:	6876      	ldr	r6, [r6, #4]
 8011390:	e7b9      	b.n	8011306 <_malloc_r+0x46>
 8011392:	230c      	movs	r3, #12
 8011394:	603b      	str	r3, [r7, #0]
 8011396:	4638      	mov	r0, r7
 8011398:	f000 f95c 	bl	8011654 <__malloc_unlock>
 801139c:	e7a1      	b.n	80112e2 <_malloc_r+0x22>
 801139e:	6025      	str	r5, [r4, #0]
 80113a0:	e7de      	b.n	8011360 <_malloc_r+0xa0>
 80113a2:	bf00      	nop
 80113a4:	2000395c 	.word	0x2000395c

080113a8 <iprintf>:
 80113a8:	b40f      	push	{r0, r1, r2, r3}
 80113aa:	4b0a      	ldr	r3, [pc, #40]	; (80113d4 <iprintf+0x2c>)
 80113ac:	b513      	push	{r0, r1, r4, lr}
 80113ae:	681c      	ldr	r4, [r3, #0]
 80113b0:	b124      	cbz	r4, 80113bc <iprintf+0x14>
 80113b2:	69a3      	ldr	r3, [r4, #24]
 80113b4:	b913      	cbnz	r3, 80113bc <iprintf+0x14>
 80113b6:	4620      	mov	r0, r4
 80113b8:	f000 f8a6 	bl	8011508 <__sinit>
 80113bc:	ab05      	add	r3, sp, #20
 80113be:	9a04      	ldr	r2, [sp, #16]
 80113c0:	68a1      	ldr	r1, [r4, #8]
 80113c2:	9301      	str	r3, [sp, #4]
 80113c4:	4620      	mov	r0, r4
 80113c6:	f000 fad1 	bl	801196c <_vfiprintf_r>
 80113ca:	b002      	add	sp, #8
 80113cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113d0:	b004      	add	sp, #16
 80113d2:	4770      	bx	lr
 80113d4:	2000005c 	.word	0x2000005c

080113d8 <_sbrk_r>:
 80113d8:	b538      	push	{r3, r4, r5, lr}
 80113da:	4d06      	ldr	r5, [pc, #24]	; (80113f4 <_sbrk_r+0x1c>)
 80113dc:	2300      	movs	r3, #0
 80113de:	4604      	mov	r4, r0
 80113e0:	4608      	mov	r0, r1
 80113e2:	602b      	str	r3, [r5, #0]
 80113e4:	f7f2 fc82 	bl	8003cec <_sbrk>
 80113e8:	1c43      	adds	r3, r0, #1
 80113ea:	d102      	bne.n	80113f2 <_sbrk_r+0x1a>
 80113ec:	682b      	ldr	r3, [r5, #0]
 80113ee:	b103      	cbz	r3, 80113f2 <_sbrk_r+0x1a>
 80113f0:	6023      	str	r3, [r4, #0]
 80113f2:	bd38      	pop	{r3, r4, r5, pc}
 80113f4:	20003968 	.word	0x20003968

080113f8 <siprintf>:
 80113f8:	b40e      	push	{r1, r2, r3}
 80113fa:	b500      	push	{lr}
 80113fc:	b09c      	sub	sp, #112	; 0x70
 80113fe:	ab1d      	add	r3, sp, #116	; 0x74
 8011400:	9002      	str	r0, [sp, #8]
 8011402:	9006      	str	r0, [sp, #24]
 8011404:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011408:	4809      	ldr	r0, [pc, #36]	; (8011430 <siprintf+0x38>)
 801140a:	9107      	str	r1, [sp, #28]
 801140c:	9104      	str	r1, [sp, #16]
 801140e:	4909      	ldr	r1, [pc, #36]	; (8011434 <siprintf+0x3c>)
 8011410:	f853 2b04 	ldr.w	r2, [r3], #4
 8011414:	9105      	str	r1, [sp, #20]
 8011416:	6800      	ldr	r0, [r0, #0]
 8011418:	9301      	str	r3, [sp, #4]
 801141a:	a902      	add	r1, sp, #8
 801141c:	f000 f97c 	bl	8011718 <_svfiprintf_r>
 8011420:	9b02      	ldr	r3, [sp, #8]
 8011422:	2200      	movs	r2, #0
 8011424:	701a      	strb	r2, [r3, #0]
 8011426:	b01c      	add	sp, #112	; 0x70
 8011428:	f85d eb04 	ldr.w	lr, [sp], #4
 801142c:	b003      	add	sp, #12
 801142e:	4770      	bx	lr
 8011430:	2000005c 	.word	0x2000005c
 8011434:	ffff0208 	.word	0xffff0208

08011438 <strcat>:
 8011438:	b510      	push	{r4, lr}
 801143a:	4602      	mov	r2, r0
 801143c:	7814      	ldrb	r4, [r2, #0]
 801143e:	4613      	mov	r3, r2
 8011440:	3201      	adds	r2, #1
 8011442:	2c00      	cmp	r4, #0
 8011444:	d1fa      	bne.n	801143c <strcat+0x4>
 8011446:	3b01      	subs	r3, #1
 8011448:	f811 2b01 	ldrb.w	r2, [r1], #1
 801144c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011450:	2a00      	cmp	r2, #0
 8011452:	d1f9      	bne.n	8011448 <strcat+0x10>
 8011454:	bd10      	pop	{r4, pc}
	...

08011458 <std>:
 8011458:	2300      	movs	r3, #0
 801145a:	b510      	push	{r4, lr}
 801145c:	4604      	mov	r4, r0
 801145e:	e9c0 3300 	strd	r3, r3, [r0]
 8011462:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011466:	6083      	str	r3, [r0, #8]
 8011468:	8181      	strh	r1, [r0, #12]
 801146a:	6643      	str	r3, [r0, #100]	; 0x64
 801146c:	81c2      	strh	r2, [r0, #14]
 801146e:	6183      	str	r3, [r0, #24]
 8011470:	4619      	mov	r1, r3
 8011472:	2208      	movs	r2, #8
 8011474:	305c      	adds	r0, #92	; 0x5c
 8011476:	f7ff feaf 	bl	80111d8 <memset>
 801147a:	4b05      	ldr	r3, [pc, #20]	; (8011490 <std+0x38>)
 801147c:	6263      	str	r3, [r4, #36]	; 0x24
 801147e:	4b05      	ldr	r3, [pc, #20]	; (8011494 <std+0x3c>)
 8011480:	62a3      	str	r3, [r4, #40]	; 0x28
 8011482:	4b05      	ldr	r3, [pc, #20]	; (8011498 <std+0x40>)
 8011484:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011486:	4b05      	ldr	r3, [pc, #20]	; (801149c <std+0x44>)
 8011488:	6224      	str	r4, [r4, #32]
 801148a:	6323      	str	r3, [r4, #48]	; 0x30
 801148c:	bd10      	pop	{r4, pc}
 801148e:	bf00      	nop
 8011490:	08011ef5 	.word	0x08011ef5
 8011494:	08011f17 	.word	0x08011f17
 8011498:	08011f4f 	.word	0x08011f4f
 801149c:	08011f73 	.word	0x08011f73

080114a0 <_cleanup_r>:
 80114a0:	4901      	ldr	r1, [pc, #4]	; (80114a8 <_cleanup_r+0x8>)
 80114a2:	f000 b8af 	b.w	8011604 <_fwalk_reent>
 80114a6:	bf00      	nop
 80114a8:	0801224d 	.word	0x0801224d

080114ac <__sfmoreglue>:
 80114ac:	b570      	push	{r4, r5, r6, lr}
 80114ae:	2268      	movs	r2, #104	; 0x68
 80114b0:	1e4d      	subs	r5, r1, #1
 80114b2:	4355      	muls	r5, r2
 80114b4:	460e      	mov	r6, r1
 80114b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80114ba:	f7ff ff01 	bl	80112c0 <_malloc_r>
 80114be:	4604      	mov	r4, r0
 80114c0:	b140      	cbz	r0, 80114d4 <__sfmoreglue+0x28>
 80114c2:	2100      	movs	r1, #0
 80114c4:	e9c0 1600 	strd	r1, r6, [r0]
 80114c8:	300c      	adds	r0, #12
 80114ca:	60a0      	str	r0, [r4, #8]
 80114cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80114d0:	f7ff fe82 	bl	80111d8 <memset>
 80114d4:	4620      	mov	r0, r4
 80114d6:	bd70      	pop	{r4, r5, r6, pc}

080114d8 <__sfp_lock_acquire>:
 80114d8:	4801      	ldr	r0, [pc, #4]	; (80114e0 <__sfp_lock_acquire+0x8>)
 80114da:	f000 b8b3 	b.w	8011644 <__retarget_lock_acquire_recursive>
 80114de:	bf00      	nop
 80114e0:	20003965 	.word	0x20003965

080114e4 <__sfp_lock_release>:
 80114e4:	4801      	ldr	r0, [pc, #4]	; (80114ec <__sfp_lock_release+0x8>)
 80114e6:	f000 b8ae 	b.w	8011646 <__retarget_lock_release_recursive>
 80114ea:	bf00      	nop
 80114ec:	20003965 	.word	0x20003965

080114f0 <__sinit_lock_acquire>:
 80114f0:	4801      	ldr	r0, [pc, #4]	; (80114f8 <__sinit_lock_acquire+0x8>)
 80114f2:	f000 b8a7 	b.w	8011644 <__retarget_lock_acquire_recursive>
 80114f6:	bf00      	nop
 80114f8:	20003966 	.word	0x20003966

080114fc <__sinit_lock_release>:
 80114fc:	4801      	ldr	r0, [pc, #4]	; (8011504 <__sinit_lock_release+0x8>)
 80114fe:	f000 b8a2 	b.w	8011646 <__retarget_lock_release_recursive>
 8011502:	bf00      	nop
 8011504:	20003966 	.word	0x20003966

08011508 <__sinit>:
 8011508:	b510      	push	{r4, lr}
 801150a:	4604      	mov	r4, r0
 801150c:	f7ff fff0 	bl	80114f0 <__sinit_lock_acquire>
 8011510:	69a3      	ldr	r3, [r4, #24]
 8011512:	b11b      	cbz	r3, 801151c <__sinit+0x14>
 8011514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011518:	f7ff bff0 	b.w	80114fc <__sinit_lock_release>
 801151c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011520:	6523      	str	r3, [r4, #80]	; 0x50
 8011522:	4b13      	ldr	r3, [pc, #76]	; (8011570 <__sinit+0x68>)
 8011524:	4a13      	ldr	r2, [pc, #76]	; (8011574 <__sinit+0x6c>)
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	62a2      	str	r2, [r4, #40]	; 0x28
 801152a:	42a3      	cmp	r3, r4
 801152c:	bf04      	itt	eq
 801152e:	2301      	moveq	r3, #1
 8011530:	61a3      	streq	r3, [r4, #24]
 8011532:	4620      	mov	r0, r4
 8011534:	f000 f820 	bl	8011578 <__sfp>
 8011538:	6060      	str	r0, [r4, #4]
 801153a:	4620      	mov	r0, r4
 801153c:	f000 f81c 	bl	8011578 <__sfp>
 8011540:	60a0      	str	r0, [r4, #8]
 8011542:	4620      	mov	r0, r4
 8011544:	f000 f818 	bl	8011578 <__sfp>
 8011548:	2200      	movs	r2, #0
 801154a:	60e0      	str	r0, [r4, #12]
 801154c:	2104      	movs	r1, #4
 801154e:	6860      	ldr	r0, [r4, #4]
 8011550:	f7ff ff82 	bl	8011458 <std>
 8011554:	68a0      	ldr	r0, [r4, #8]
 8011556:	2201      	movs	r2, #1
 8011558:	2109      	movs	r1, #9
 801155a:	f7ff ff7d 	bl	8011458 <std>
 801155e:	68e0      	ldr	r0, [r4, #12]
 8011560:	2202      	movs	r2, #2
 8011562:	2112      	movs	r1, #18
 8011564:	f7ff ff78 	bl	8011458 <std>
 8011568:	2301      	movs	r3, #1
 801156a:	61a3      	str	r3, [r4, #24]
 801156c:	e7d2      	b.n	8011514 <__sinit+0xc>
 801156e:	bf00      	nop
 8011570:	08012aac 	.word	0x08012aac
 8011574:	080114a1 	.word	0x080114a1

08011578 <__sfp>:
 8011578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801157a:	4607      	mov	r7, r0
 801157c:	f7ff ffac 	bl	80114d8 <__sfp_lock_acquire>
 8011580:	4b1e      	ldr	r3, [pc, #120]	; (80115fc <__sfp+0x84>)
 8011582:	681e      	ldr	r6, [r3, #0]
 8011584:	69b3      	ldr	r3, [r6, #24]
 8011586:	b913      	cbnz	r3, 801158e <__sfp+0x16>
 8011588:	4630      	mov	r0, r6
 801158a:	f7ff ffbd 	bl	8011508 <__sinit>
 801158e:	3648      	adds	r6, #72	; 0x48
 8011590:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011594:	3b01      	subs	r3, #1
 8011596:	d503      	bpl.n	80115a0 <__sfp+0x28>
 8011598:	6833      	ldr	r3, [r6, #0]
 801159a:	b30b      	cbz	r3, 80115e0 <__sfp+0x68>
 801159c:	6836      	ldr	r6, [r6, #0]
 801159e:	e7f7      	b.n	8011590 <__sfp+0x18>
 80115a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80115a4:	b9d5      	cbnz	r5, 80115dc <__sfp+0x64>
 80115a6:	4b16      	ldr	r3, [pc, #88]	; (8011600 <__sfp+0x88>)
 80115a8:	60e3      	str	r3, [r4, #12]
 80115aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80115ae:	6665      	str	r5, [r4, #100]	; 0x64
 80115b0:	f000 f847 	bl	8011642 <__retarget_lock_init_recursive>
 80115b4:	f7ff ff96 	bl	80114e4 <__sfp_lock_release>
 80115b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80115bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80115c0:	6025      	str	r5, [r4, #0]
 80115c2:	61a5      	str	r5, [r4, #24]
 80115c4:	2208      	movs	r2, #8
 80115c6:	4629      	mov	r1, r5
 80115c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80115cc:	f7ff fe04 	bl	80111d8 <memset>
 80115d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80115d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80115d8:	4620      	mov	r0, r4
 80115da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115dc:	3468      	adds	r4, #104	; 0x68
 80115de:	e7d9      	b.n	8011594 <__sfp+0x1c>
 80115e0:	2104      	movs	r1, #4
 80115e2:	4638      	mov	r0, r7
 80115e4:	f7ff ff62 	bl	80114ac <__sfmoreglue>
 80115e8:	4604      	mov	r4, r0
 80115ea:	6030      	str	r0, [r6, #0]
 80115ec:	2800      	cmp	r0, #0
 80115ee:	d1d5      	bne.n	801159c <__sfp+0x24>
 80115f0:	f7ff ff78 	bl	80114e4 <__sfp_lock_release>
 80115f4:	230c      	movs	r3, #12
 80115f6:	603b      	str	r3, [r7, #0]
 80115f8:	e7ee      	b.n	80115d8 <__sfp+0x60>
 80115fa:	bf00      	nop
 80115fc:	08012aac 	.word	0x08012aac
 8011600:	ffff0001 	.word	0xffff0001

08011604 <_fwalk_reent>:
 8011604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011608:	4606      	mov	r6, r0
 801160a:	4688      	mov	r8, r1
 801160c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011610:	2700      	movs	r7, #0
 8011612:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011616:	f1b9 0901 	subs.w	r9, r9, #1
 801161a:	d505      	bpl.n	8011628 <_fwalk_reent+0x24>
 801161c:	6824      	ldr	r4, [r4, #0]
 801161e:	2c00      	cmp	r4, #0
 8011620:	d1f7      	bne.n	8011612 <_fwalk_reent+0xe>
 8011622:	4638      	mov	r0, r7
 8011624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011628:	89ab      	ldrh	r3, [r5, #12]
 801162a:	2b01      	cmp	r3, #1
 801162c:	d907      	bls.n	801163e <_fwalk_reent+0x3a>
 801162e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011632:	3301      	adds	r3, #1
 8011634:	d003      	beq.n	801163e <_fwalk_reent+0x3a>
 8011636:	4629      	mov	r1, r5
 8011638:	4630      	mov	r0, r6
 801163a:	47c0      	blx	r8
 801163c:	4307      	orrs	r7, r0
 801163e:	3568      	adds	r5, #104	; 0x68
 8011640:	e7e9      	b.n	8011616 <_fwalk_reent+0x12>

08011642 <__retarget_lock_init_recursive>:
 8011642:	4770      	bx	lr

08011644 <__retarget_lock_acquire_recursive>:
 8011644:	4770      	bx	lr

08011646 <__retarget_lock_release_recursive>:
 8011646:	4770      	bx	lr

08011648 <__malloc_lock>:
 8011648:	4801      	ldr	r0, [pc, #4]	; (8011650 <__malloc_lock+0x8>)
 801164a:	f7ff bffb 	b.w	8011644 <__retarget_lock_acquire_recursive>
 801164e:	bf00      	nop
 8011650:	20003964 	.word	0x20003964

08011654 <__malloc_unlock>:
 8011654:	4801      	ldr	r0, [pc, #4]	; (801165c <__malloc_unlock+0x8>)
 8011656:	f7ff bff6 	b.w	8011646 <__retarget_lock_release_recursive>
 801165a:	bf00      	nop
 801165c:	20003964 	.word	0x20003964

08011660 <__ssputs_r>:
 8011660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011664:	688e      	ldr	r6, [r1, #8]
 8011666:	429e      	cmp	r6, r3
 8011668:	4682      	mov	sl, r0
 801166a:	460c      	mov	r4, r1
 801166c:	4690      	mov	r8, r2
 801166e:	461f      	mov	r7, r3
 8011670:	d838      	bhi.n	80116e4 <__ssputs_r+0x84>
 8011672:	898a      	ldrh	r2, [r1, #12]
 8011674:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011678:	d032      	beq.n	80116e0 <__ssputs_r+0x80>
 801167a:	6825      	ldr	r5, [r4, #0]
 801167c:	6909      	ldr	r1, [r1, #16]
 801167e:	eba5 0901 	sub.w	r9, r5, r1
 8011682:	6965      	ldr	r5, [r4, #20]
 8011684:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011688:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801168c:	3301      	adds	r3, #1
 801168e:	444b      	add	r3, r9
 8011690:	106d      	asrs	r5, r5, #1
 8011692:	429d      	cmp	r5, r3
 8011694:	bf38      	it	cc
 8011696:	461d      	movcc	r5, r3
 8011698:	0553      	lsls	r3, r2, #21
 801169a:	d531      	bpl.n	8011700 <__ssputs_r+0xa0>
 801169c:	4629      	mov	r1, r5
 801169e:	f7ff fe0f 	bl	80112c0 <_malloc_r>
 80116a2:	4606      	mov	r6, r0
 80116a4:	b950      	cbnz	r0, 80116bc <__ssputs_r+0x5c>
 80116a6:	230c      	movs	r3, #12
 80116a8:	f8ca 3000 	str.w	r3, [sl]
 80116ac:	89a3      	ldrh	r3, [r4, #12]
 80116ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116b2:	81a3      	strh	r3, [r4, #12]
 80116b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80116b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116bc:	6921      	ldr	r1, [r4, #16]
 80116be:	464a      	mov	r2, r9
 80116c0:	f000 fe78 	bl	80123b4 <memcpy>
 80116c4:	89a3      	ldrh	r3, [r4, #12]
 80116c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80116ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116ce:	81a3      	strh	r3, [r4, #12]
 80116d0:	6126      	str	r6, [r4, #16]
 80116d2:	6165      	str	r5, [r4, #20]
 80116d4:	444e      	add	r6, r9
 80116d6:	eba5 0509 	sub.w	r5, r5, r9
 80116da:	6026      	str	r6, [r4, #0]
 80116dc:	60a5      	str	r5, [r4, #8]
 80116de:	463e      	mov	r6, r7
 80116e0:	42be      	cmp	r6, r7
 80116e2:	d900      	bls.n	80116e6 <__ssputs_r+0x86>
 80116e4:	463e      	mov	r6, r7
 80116e6:	6820      	ldr	r0, [r4, #0]
 80116e8:	4632      	mov	r2, r6
 80116ea:	4641      	mov	r1, r8
 80116ec:	f000 fe70 	bl	80123d0 <memmove>
 80116f0:	68a3      	ldr	r3, [r4, #8]
 80116f2:	1b9b      	subs	r3, r3, r6
 80116f4:	60a3      	str	r3, [r4, #8]
 80116f6:	6823      	ldr	r3, [r4, #0]
 80116f8:	4433      	add	r3, r6
 80116fa:	6023      	str	r3, [r4, #0]
 80116fc:	2000      	movs	r0, #0
 80116fe:	e7db      	b.n	80116b8 <__ssputs_r+0x58>
 8011700:	462a      	mov	r2, r5
 8011702:	f000 fe7f 	bl	8012404 <_realloc_r>
 8011706:	4606      	mov	r6, r0
 8011708:	2800      	cmp	r0, #0
 801170a:	d1e1      	bne.n	80116d0 <__ssputs_r+0x70>
 801170c:	6921      	ldr	r1, [r4, #16]
 801170e:	4650      	mov	r0, sl
 8011710:	f7ff fd6a 	bl	80111e8 <_free_r>
 8011714:	e7c7      	b.n	80116a6 <__ssputs_r+0x46>
	...

08011718 <_svfiprintf_r>:
 8011718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801171c:	4698      	mov	r8, r3
 801171e:	898b      	ldrh	r3, [r1, #12]
 8011720:	061b      	lsls	r3, r3, #24
 8011722:	b09d      	sub	sp, #116	; 0x74
 8011724:	4607      	mov	r7, r0
 8011726:	460d      	mov	r5, r1
 8011728:	4614      	mov	r4, r2
 801172a:	d50e      	bpl.n	801174a <_svfiprintf_r+0x32>
 801172c:	690b      	ldr	r3, [r1, #16]
 801172e:	b963      	cbnz	r3, 801174a <_svfiprintf_r+0x32>
 8011730:	2140      	movs	r1, #64	; 0x40
 8011732:	f7ff fdc5 	bl	80112c0 <_malloc_r>
 8011736:	6028      	str	r0, [r5, #0]
 8011738:	6128      	str	r0, [r5, #16]
 801173a:	b920      	cbnz	r0, 8011746 <_svfiprintf_r+0x2e>
 801173c:	230c      	movs	r3, #12
 801173e:	603b      	str	r3, [r7, #0]
 8011740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011744:	e0d1      	b.n	80118ea <_svfiprintf_r+0x1d2>
 8011746:	2340      	movs	r3, #64	; 0x40
 8011748:	616b      	str	r3, [r5, #20]
 801174a:	2300      	movs	r3, #0
 801174c:	9309      	str	r3, [sp, #36]	; 0x24
 801174e:	2320      	movs	r3, #32
 8011750:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011754:	f8cd 800c 	str.w	r8, [sp, #12]
 8011758:	2330      	movs	r3, #48	; 0x30
 801175a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011904 <_svfiprintf_r+0x1ec>
 801175e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011762:	f04f 0901 	mov.w	r9, #1
 8011766:	4623      	mov	r3, r4
 8011768:	469a      	mov	sl, r3
 801176a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801176e:	b10a      	cbz	r2, 8011774 <_svfiprintf_r+0x5c>
 8011770:	2a25      	cmp	r2, #37	; 0x25
 8011772:	d1f9      	bne.n	8011768 <_svfiprintf_r+0x50>
 8011774:	ebba 0b04 	subs.w	fp, sl, r4
 8011778:	d00b      	beq.n	8011792 <_svfiprintf_r+0x7a>
 801177a:	465b      	mov	r3, fp
 801177c:	4622      	mov	r2, r4
 801177e:	4629      	mov	r1, r5
 8011780:	4638      	mov	r0, r7
 8011782:	f7ff ff6d 	bl	8011660 <__ssputs_r>
 8011786:	3001      	adds	r0, #1
 8011788:	f000 80aa 	beq.w	80118e0 <_svfiprintf_r+0x1c8>
 801178c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801178e:	445a      	add	r2, fp
 8011790:	9209      	str	r2, [sp, #36]	; 0x24
 8011792:	f89a 3000 	ldrb.w	r3, [sl]
 8011796:	2b00      	cmp	r3, #0
 8011798:	f000 80a2 	beq.w	80118e0 <_svfiprintf_r+0x1c8>
 801179c:	2300      	movs	r3, #0
 801179e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80117a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80117a6:	f10a 0a01 	add.w	sl, sl, #1
 80117aa:	9304      	str	r3, [sp, #16]
 80117ac:	9307      	str	r3, [sp, #28]
 80117ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80117b2:	931a      	str	r3, [sp, #104]	; 0x68
 80117b4:	4654      	mov	r4, sl
 80117b6:	2205      	movs	r2, #5
 80117b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117bc:	4851      	ldr	r0, [pc, #324]	; (8011904 <_svfiprintf_r+0x1ec>)
 80117be:	f7ee fd0f 	bl	80001e0 <memchr>
 80117c2:	9a04      	ldr	r2, [sp, #16]
 80117c4:	b9d8      	cbnz	r0, 80117fe <_svfiprintf_r+0xe6>
 80117c6:	06d0      	lsls	r0, r2, #27
 80117c8:	bf44      	itt	mi
 80117ca:	2320      	movmi	r3, #32
 80117cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80117d0:	0711      	lsls	r1, r2, #28
 80117d2:	bf44      	itt	mi
 80117d4:	232b      	movmi	r3, #43	; 0x2b
 80117d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80117da:	f89a 3000 	ldrb.w	r3, [sl]
 80117de:	2b2a      	cmp	r3, #42	; 0x2a
 80117e0:	d015      	beq.n	801180e <_svfiprintf_r+0xf6>
 80117e2:	9a07      	ldr	r2, [sp, #28]
 80117e4:	4654      	mov	r4, sl
 80117e6:	2000      	movs	r0, #0
 80117e8:	f04f 0c0a 	mov.w	ip, #10
 80117ec:	4621      	mov	r1, r4
 80117ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80117f2:	3b30      	subs	r3, #48	; 0x30
 80117f4:	2b09      	cmp	r3, #9
 80117f6:	d94e      	bls.n	8011896 <_svfiprintf_r+0x17e>
 80117f8:	b1b0      	cbz	r0, 8011828 <_svfiprintf_r+0x110>
 80117fa:	9207      	str	r2, [sp, #28]
 80117fc:	e014      	b.n	8011828 <_svfiprintf_r+0x110>
 80117fe:	eba0 0308 	sub.w	r3, r0, r8
 8011802:	fa09 f303 	lsl.w	r3, r9, r3
 8011806:	4313      	orrs	r3, r2
 8011808:	9304      	str	r3, [sp, #16]
 801180a:	46a2      	mov	sl, r4
 801180c:	e7d2      	b.n	80117b4 <_svfiprintf_r+0x9c>
 801180e:	9b03      	ldr	r3, [sp, #12]
 8011810:	1d19      	adds	r1, r3, #4
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	9103      	str	r1, [sp, #12]
 8011816:	2b00      	cmp	r3, #0
 8011818:	bfbb      	ittet	lt
 801181a:	425b      	neglt	r3, r3
 801181c:	f042 0202 	orrlt.w	r2, r2, #2
 8011820:	9307      	strge	r3, [sp, #28]
 8011822:	9307      	strlt	r3, [sp, #28]
 8011824:	bfb8      	it	lt
 8011826:	9204      	strlt	r2, [sp, #16]
 8011828:	7823      	ldrb	r3, [r4, #0]
 801182a:	2b2e      	cmp	r3, #46	; 0x2e
 801182c:	d10c      	bne.n	8011848 <_svfiprintf_r+0x130>
 801182e:	7863      	ldrb	r3, [r4, #1]
 8011830:	2b2a      	cmp	r3, #42	; 0x2a
 8011832:	d135      	bne.n	80118a0 <_svfiprintf_r+0x188>
 8011834:	9b03      	ldr	r3, [sp, #12]
 8011836:	1d1a      	adds	r2, r3, #4
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	9203      	str	r2, [sp, #12]
 801183c:	2b00      	cmp	r3, #0
 801183e:	bfb8      	it	lt
 8011840:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011844:	3402      	adds	r4, #2
 8011846:	9305      	str	r3, [sp, #20]
 8011848:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011914 <_svfiprintf_r+0x1fc>
 801184c:	7821      	ldrb	r1, [r4, #0]
 801184e:	2203      	movs	r2, #3
 8011850:	4650      	mov	r0, sl
 8011852:	f7ee fcc5 	bl	80001e0 <memchr>
 8011856:	b140      	cbz	r0, 801186a <_svfiprintf_r+0x152>
 8011858:	2340      	movs	r3, #64	; 0x40
 801185a:	eba0 000a 	sub.w	r0, r0, sl
 801185e:	fa03 f000 	lsl.w	r0, r3, r0
 8011862:	9b04      	ldr	r3, [sp, #16]
 8011864:	4303      	orrs	r3, r0
 8011866:	3401      	adds	r4, #1
 8011868:	9304      	str	r3, [sp, #16]
 801186a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801186e:	4826      	ldr	r0, [pc, #152]	; (8011908 <_svfiprintf_r+0x1f0>)
 8011870:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011874:	2206      	movs	r2, #6
 8011876:	f7ee fcb3 	bl	80001e0 <memchr>
 801187a:	2800      	cmp	r0, #0
 801187c:	d038      	beq.n	80118f0 <_svfiprintf_r+0x1d8>
 801187e:	4b23      	ldr	r3, [pc, #140]	; (801190c <_svfiprintf_r+0x1f4>)
 8011880:	bb1b      	cbnz	r3, 80118ca <_svfiprintf_r+0x1b2>
 8011882:	9b03      	ldr	r3, [sp, #12]
 8011884:	3307      	adds	r3, #7
 8011886:	f023 0307 	bic.w	r3, r3, #7
 801188a:	3308      	adds	r3, #8
 801188c:	9303      	str	r3, [sp, #12]
 801188e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011890:	4433      	add	r3, r6
 8011892:	9309      	str	r3, [sp, #36]	; 0x24
 8011894:	e767      	b.n	8011766 <_svfiprintf_r+0x4e>
 8011896:	fb0c 3202 	mla	r2, ip, r2, r3
 801189a:	460c      	mov	r4, r1
 801189c:	2001      	movs	r0, #1
 801189e:	e7a5      	b.n	80117ec <_svfiprintf_r+0xd4>
 80118a0:	2300      	movs	r3, #0
 80118a2:	3401      	adds	r4, #1
 80118a4:	9305      	str	r3, [sp, #20]
 80118a6:	4619      	mov	r1, r3
 80118a8:	f04f 0c0a 	mov.w	ip, #10
 80118ac:	4620      	mov	r0, r4
 80118ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80118b2:	3a30      	subs	r2, #48	; 0x30
 80118b4:	2a09      	cmp	r2, #9
 80118b6:	d903      	bls.n	80118c0 <_svfiprintf_r+0x1a8>
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d0c5      	beq.n	8011848 <_svfiprintf_r+0x130>
 80118bc:	9105      	str	r1, [sp, #20]
 80118be:	e7c3      	b.n	8011848 <_svfiprintf_r+0x130>
 80118c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80118c4:	4604      	mov	r4, r0
 80118c6:	2301      	movs	r3, #1
 80118c8:	e7f0      	b.n	80118ac <_svfiprintf_r+0x194>
 80118ca:	ab03      	add	r3, sp, #12
 80118cc:	9300      	str	r3, [sp, #0]
 80118ce:	462a      	mov	r2, r5
 80118d0:	4b0f      	ldr	r3, [pc, #60]	; (8011910 <_svfiprintf_r+0x1f8>)
 80118d2:	a904      	add	r1, sp, #16
 80118d4:	4638      	mov	r0, r7
 80118d6:	f3af 8000 	nop.w
 80118da:	1c42      	adds	r2, r0, #1
 80118dc:	4606      	mov	r6, r0
 80118de:	d1d6      	bne.n	801188e <_svfiprintf_r+0x176>
 80118e0:	89ab      	ldrh	r3, [r5, #12]
 80118e2:	065b      	lsls	r3, r3, #25
 80118e4:	f53f af2c 	bmi.w	8011740 <_svfiprintf_r+0x28>
 80118e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80118ea:	b01d      	add	sp, #116	; 0x74
 80118ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118f0:	ab03      	add	r3, sp, #12
 80118f2:	9300      	str	r3, [sp, #0]
 80118f4:	462a      	mov	r2, r5
 80118f6:	4b06      	ldr	r3, [pc, #24]	; (8011910 <_svfiprintf_r+0x1f8>)
 80118f8:	a904      	add	r1, sp, #16
 80118fa:	4638      	mov	r0, r7
 80118fc:	f000 f9d4 	bl	8011ca8 <_printf_i>
 8011900:	e7eb      	b.n	80118da <_svfiprintf_r+0x1c2>
 8011902:	bf00      	nop
 8011904:	08012b10 	.word	0x08012b10
 8011908:	08012b1a 	.word	0x08012b1a
 801190c:	00000000 	.word	0x00000000
 8011910:	08011661 	.word	0x08011661
 8011914:	08012b16 	.word	0x08012b16

08011918 <__sfputc_r>:
 8011918:	6893      	ldr	r3, [r2, #8]
 801191a:	3b01      	subs	r3, #1
 801191c:	2b00      	cmp	r3, #0
 801191e:	b410      	push	{r4}
 8011920:	6093      	str	r3, [r2, #8]
 8011922:	da08      	bge.n	8011936 <__sfputc_r+0x1e>
 8011924:	6994      	ldr	r4, [r2, #24]
 8011926:	42a3      	cmp	r3, r4
 8011928:	db01      	blt.n	801192e <__sfputc_r+0x16>
 801192a:	290a      	cmp	r1, #10
 801192c:	d103      	bne.n	8011936 <__sfputc_r+0x1e>
 801192e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011932:	f000 bb23 	b.w	8011f7c <__swbuf_r>
 8011936:	6813      	ldr	r3, [r2, #0]
 8011938:	1c58      	adds	r0, r3, #1
 801193a:	6010      	str	r0, [r2, #0]
 801193c:	7019      	strb	r1, [r3, #0]
 801193e:	4608      	mov	r0, r1
 8011940:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011944:	4770      	bx	lr

08011946 <__sfputs_r>:
 8011946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011948:	4606      	mov	r6, r0
 801194a:	460f      	mov	r7, r1
 801194c:	4614      	mov	r4, r2
 801194e:	18d5      	adds	r5, r2, r3
 8011950:	42ac      	cmp	r4, r5
 8011952:	d101      	bne.n	8011958 <__sfputs_r+0x12>
 8011954:	2000      	movs	r0, #0
 8011956:	e007      	b.n	8011968 <__sfputs_r+0x22>
 8011958:	f814 1b01 	ldrb.w	r1, [r4], #1
 801195c:	463a      	mov	r2, r7
 801195e:	4630      	mov	r0, r6
 8011960:	f7ff ffda 	bl	8011918 <__sfputc_r>
 8011964:	1c43      	adds	r3, r0, #1
 8011966:	d1f3      	bne.n	8011950 <__sfputs_r+0xa>
 8011968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801196c <_vfiprintf_r>:
 801196c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011970:	460d      	mov	r5, r1
 8011972:	b09d      	sub	sp, #116	; 0x74
 8011974:	4614      	mov	r4, r2
 8011976:	4698      	mov	r8, r3
 8011978:	4606      	mov	r6, r0
 801197a:	b118      	cbz	r0, 8011984 <_vfiprintf_r+0x18>
 801197c:	6983      	ldr	r3, [r0, #24]
 801197e:	b90b      	cbnz	r3, 8011984 <_vfiprintf_r+0x18>
 8011980:	f7ff fdc2 	bl	8011508 <__sinit>
 8011984:	4b89      	ldr	r3, [pc, #548]	; (8011bac <_vfiprintf_r+0x240>)
 8011986:	429d      	cmp	r5, r3
 8011988:	d11b      	bne.n	80119c2 <_vfiprintf_r+0x56>
 801198a:	6875      	ldr	r5, [r6, #4]
 801198c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801198e:	07d9      	lsls	r1, r3, #31
 8011990:	d405      	bmi.n	801199e <_vfiprintf_r+0x32>
 8011992:	89ab      	ldrh	r3, [r5, #12]
 8011994:	059a      	lsls	r2, r3, #22
 8011996:	d402      	bmi.n	801199e <_vfiprintf_r+0x32>
 8011998:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801199a:	f7ff fe53 	bl	8011644 <__retarget_lock_acquire_recursive>
 801199e:	89ab      	ldrh	r3, [r5, #12]
 80119a0:	071b      	lsls	r3, r3, #28
 80119a2:	d501      	bpl.n	80119a8 <_vfiprintf_r+0x3c>
 80119a4:	692b      	ldr	r3, [r5, #16]
 80119a6:	b9eb      	cbnz	r3, 80119e4 <_vfiprintf_r+0x78>
 80119a8:	4629      	mov	r1, r5
 80119aa:	4630      	mov	r0, r6
 80119ac:	f000 fb4a 	bl	8012044 <__swsetup_r>
 80119b0:	b1c0      	cbz	r0, 80119e4 <_vfiprintf_r+0x78>
 80119b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80119b4:	07dc      	lsls	r4, r3, #31
 80119b6:	d50e      	bpl.n	80119d6 <_vfiprintf_r+0x6a>
 80119b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119bc:	b01d      	add	sp, #116	; 0x74
 80119be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119c2:	4b7b      	ldr	r3, [pc, #492]	; (8011bb0 <_vfiprintf_r+0x244>)
 80119c4:	429d      	cmp	r5, r3
 80119c6:	d101      	bne.n	80119cc <_vfiprintf_r+0x60>
 80119c8:	68b5      	ldr	r5, [r6, #8]
 80119ca:	e7df      	b.n	801198c <_vfiprintf_r+0x20>
 80119cc:	4b79      	ldr	r3, [pc, #484]	; (8011bb4 <_vfiprintf_r+0x248>)
 80119ce:	429d      	cmp	r5, r3
 80119d0:	bf08      	it	eq
 80119d2:	68f5      	ldreq	r5, [r6, #12]
 80119d4:	e7da      	b.n	801198c <_vfiprintf_r+0x20>
 80119d6:	89ab      	ldrh	r3, [r5, #12]
 80119d8:	0598      	lsls	r0, r3, #22
 80119da:	d4ed      	bmi.n	80119b8 <_vfiprintf_r+0x4c>
 80119dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80119de:	f7ff fe32 	bl	8011646 <__retarget_lock_release_recursive>
 80119e2:	e7e9      	b.n	80119b8 <_vfiprintf_r+0x4c>
 80119e4:	2300      	movs	r3, #0
 80119e6:	9309      	str	r3, [sp, #36]	; 0x24
 80119e8:	2320      	movs	r3, #32
 80119ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80119ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80119f2:	2330      	movs	r3, #48	; 0x30
 80119f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011bb8 <_vfiprintf_r+0x24c>
 80119f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80119fc:	f04f 0901 	mov.w	r9, #1
 8011a00:	4623      	mov	r3, r4
 8011a02:	469a      	mov	sl, r3
 8011a04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a08:	b10a      	cbz	r2, 8011a0e <_vfiprintf_r+0xa2>
 8011a0a:	2a25      	cmp	r2, #37	; 0x25
 8011a0c:	d1f9      	bne.n	8011a02 <_vfiprintf_r+0x96>
 8011a0e:	ebba 0b04 	subs.w	fp, sl, r4
 8011a12:	d00b      	beq.n	8011a2c <_vfiprintf_r+0xc0>
 8011a14:	465b      	mov	r3, fp
 8011a16:	4622      	mov	r2, r4
 8011a18:	4629      	mov	r1, r5
 8011a1a:	4630      	mov	r0, r6
 8011a1c:	f7ff ff93 	bl	8011946 <__sfputs_r>
 8011a20:	3001      	adds	r0, #1
 8011a22:	f000 80aa 	beq.w	8011b7a <_vfiprintf_r+0x20e>
 8011a26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a28:	445a      	add	r2, fp
 8011a2a:	9209      	str	r2, [sp, #36]	; 0x24
 8011a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	f000 80a2 	beq.w	8011b7a <_vfiprintf_r+0x20e>
 8011a36:	2300      	movs	r3, #0
 8011a38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a40:	f10a 0a01 	add.w	sl, sl, #1
 8011a44:	9304      	str	r3, [sp, #16]
 8011a46:	9307      	str	r3, [sp, #28]
 8011a48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011a4c:	931a      	str	r3, [sp, #104]	; 0x68
 8011a4e:	4654      	mov	r4, sl
 8011a50:	2205      	movs	r2, #5
 8011a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a56:	4858      	ldr	r0, [pc, #352]	; (8011bb8 <_vfiprintf_r+0x24c>)
 8011a58:	f7ee fbc2 	bl	80001e0 <memchr>
 8011a5c:	9a04      	ldr	r2, [sp, #16]
 8011a5e:	b9d8      	cbnz	r0, 8011a98 <_vfiprintf_r+0x12c>
 8011a60:	06d1      	lsls	r1, r2, #27
 8011a62:	bf44      	itt	mi
 8011a64:	2320      	movmi	r3, #32
 8011a66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a6a:	0713      	lsls	r3, r2, #28
 8011a6c:	bf44      	itt	mi
 8011a6e:	232b      	movmi	r3, #43	; 0x2b
 8011a70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a74:	f89a 3000 	ldrb.w	r3, [sl]
 8011a78:	2b2a      	cmp	r3, #42	; 0x2a
 8011a7a:	d015      	beq.n	8011aa8 <_vfiprintf_r+0x13c>
 8011a7c:	9a07      	ldr	r2, [sp, #28]
 8011a7e:	4654      	mov	r4, sl
 8011a80:	2000      	movs	r0, #0
 8011a82:	f04f 0c0a 	mov.w	ip, #10
 8011a86:	4621      	mov	r1, r4
 8011a88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a8c:	3b30      	subs	r3, #48	; 0x30
 8011a8e:	2b09      	cmp	r3, #9
 8011a90:	d94e      	bls.n	8011b30 <_vfiprintf_r+0x1c4>
 8011a92:	b1b0      	cbz	r0, 8011ac2 <_vfiprintf_r+0x156>
 8011a94:	9207      	str	r2, [sp, #28]
 8011a96:	e014      	b.n	8011ac2 <_vfiprintf_r+0x156>
 8011a98:	eba0 0308 	sub.w	r3, r0, r8
 8011a9c:	fa09 f303 	lsl.w	r3, r9, r3
 8011aa0:	4313      	orrs	r3, r2
 8011aa2:	9304      	str	r3, [sp, #16]
 8011aa4:	46a2      	mov	sl, r4
 8011aa6:	e7d2      	b.n	8011a4e <_vfiprintf_r+0xe2>
 8011aa8:	9b03      	ldr	r3, [sp, #12]
 8011aaa:	1d19      	adds	r1, r3, #4
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	9103      	str	r1, [sp, #12]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	bfbb      	ittet	lt
 8011ab4:	425b      	neglt	r3, r3
 8011ab6:	f042 0202 	orrlt.w	r2, r2, #2
 8011aba:	9307      	strge	r3, [sp, #28]
 8011abc:	9307      	strlt	r3, [sp, #28]
 8011abe:	bfb8      	it	lt
 8011ac0:	9204      	strlt	r2, [sp, #16]
 8011ac2:	7823      	ldrb	r3, [r4, #0]
 8011ac4:	2b2e      	cmp	r3, #46	; 0x2e
 8011ac6:	d10c      	bne.n	8011ae2 <_vfiprintf_r+0x176>
 8011ac8:	7863      	ldrb	r3, [r4, #1]
 8011aca:	2b2a      	cmp	r3, #42	; 0x2a
 8011acc:	d135      	bne.n	8011b3a <_vfiprintf_r+0x1ce>
 8011ace:	9b03      	ldr	r3, [sp, #12]
 8011ad0:	1d1a      	adds	r2, r3, #4
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	9203      	str	r2, [sp, #12]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	bfb8      	it	lt
 8011ada:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011ade:	3402      	adds	r4, #2
 8011ae0:	9305      	str	r3, [sp, #20]
 8011ae2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011bc8 <_vfiprintf_r+0x25c>
 8011ae6:	7821      	ldrb	r1, [r4, #0]
 8011ae8:	2203      	movs	r2, #3
 8011aea:	4650      	mov	r0, sl
 8011aec:	f7ee fb78 	bl	80001e0 <memchr>
 8011af0:	b140      	cbz	r0, 8011b04 <_vfiprintf_r+0x198>
 8011af2:	2340      	movs	r3, #64	; 0x40
 8011af4:	eba0 000a 	sub.w	r0, r0, sl
 8011af8:	fa03 f000 	lsl.w	r0, r3, r0
 8011afc:	9b04      	ldr	r3, [sp, #16]
 8011afe:	4303      	orrs	r3, r0
 8011b00:	3401      	adds	r4, #1
 8011b02:	9304      	str	r3, [sp, #16]
 8011b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b08:	482c      	ldr	r0, [pc, #176]	; (8011bbc <_vfiprintf_r+0x250>)
 8011b0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011b0e:	2206      	movs	r2, #6
 8011b10:	f7ee fb66 	bl	80001e0 <memchr>
 8011b14:	2800      	cmp	r0, #0
 8011b16:	d03f      	beq.n	8011b98 <_vfiprintf_r+0x22c>
 8011b18:	4b29      	ldr	r3, [pc, #164]	; (8011bc0 <_vfiprintf_r+0x254>)
 8011b1a:	bb1b      	cbnz	r3, 8011b64 <_vfiprintf_r+0x1f8>
 8011b1c:	9b03      	ldr	r3, [sp, #12]
 8011b1e:	3307      	adds	r3, #7
 8011b20:	f023 0307 	bic.w	r3, r3, #7
 8011b24:	3308      	adds	r3, #8
 8011b26:	9303      	str	r3, [sp, #12]
 8011b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b2a:	443b      	add	r3, r7
 8011b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8011b2e:	e767      	b.n	8011a00 <_vfiprintf_r+0x94>
 8011b30:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b34:	460c      	mov	r4, r1
 8011b36:	2001      	movs	r0, #1
 8011b38:	e7a5      	b.n	8011a86 <_vfiprintf_r+0x11a>
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	3401      	adds	r4, #1
 8011b3e:	9305      	str	r3, [sp, #20]
 8011b40:	4619      	mov	r1, r3
 8011b42:	f04f 0c0a 	mov.w	ip, #10
 8011b46:	4620      	mov	r0, r4
 8011b48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b4c:	3a30      	subs	r2, #48	; 0x30
 8011b4e:	2a09      	cmp	r2, #9
 8011b50:	d903      	bls.n	8011b5a <_vfiprintf_r+0x1ee>
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d0c5      	beq.n	8011ae2 <_vfiprintf_r+0x176>
 8011b56:	9105      	str	r1, [sp, #20]
 8011b58:	e7c3      	b.n	8011ae2 <_vfiprintf_r+0x176>
 8011b5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b5e:	4604      	mov	r4, r0
 8011b60:	2301      	movs	r3, #1
 8011b62:	e7f0      	b.n	8011b46 <_vfiprintf_r+0x1da>
 8011b64:	ab03      	add	r3, sp, #12
 8011b66:	9300      	str	r3, [sp, #0]
 8011b68:	462a      	mov	r2, r5
 8011b6a:	4b16      	ldr	r3, [pc, #88]	; (8011bc4 <_vfiprintf_r+0x258>)
 8011b6c:	a904      	add	r1, sp, #16
 8011b6e:	4630      	mov	r0, r6
 8011b70:	f3af 8000 	nop.w
 8011b74:	4607      	mov	r7, r0
 8011b76:	1c78      	adds	r0, r7, #1
 8011b78:	d1d6      	bne.n	8011b28 <_vfiprintf_r+0x1bc>
 8011b7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011b7c:	07d9      	lsls	r1, r3, #31
 8011b7e:	d405      	bmi.n	8011b8c <_vfiprintf_r+0x220>
 8011b80:	89ab      	ldrh	r3, [r5, #12]
 8011b82:	059a      	lsls	r2, r3, #22
 8011b84:	d402      	bmi.n	8011b8c <_vfiprintf_r+0x220>
 8011b86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011b88:	f7ff fd5d 	bl	8011646 <__retarget_lock_release_recursive>
 8011b8c:	89ab      	ldrh	r3, [r5, #12]
 8011b8e:	065b      	lsls	r3, r3, #25
 8011b90:	f53f af12 	bmi.w	80119b8 <_vfiprintf_r+0x4c>
 8011b94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b96:	e711      	b.n	80119bc <_vfiprintf_r+0x50>
 8011b98:	ab03      	add	r3, sp, #12
 8011b9a:	9300      	str	r3, [sp, #0]
 8011b9c:	462a      	mov	r2, r5
 8011b9e:	4b09      	ldr	r3, [pc, #36]	; (8011bc4 <_vfiprintf_r+0x258>)
 8011ba0:	a904      	add	r1, sp, #16
 8011ba2:	4630      	mov	r0, r6
 8011ba4:	f000 f880 	bl	8011ca8 <_printf_i>
 8011ba8:	e7e4      	b.n	8011b74 <_vfiprintf_r+0x208>
 8011baa:	bf00      	nop
 8011bac:	08012ad0 	.word	0x08012ad0
 8011bb0:	08012af0 	.word	0x08012af0
 8011bb4:	08012ab0 	.word	0x08012ab0
 8011bb8:	08012b10 	.word	0x08012b10
 8011bbc:	08012b1a 	.word	0x08012b1a
 8011bc0:	00000000 	.word	0x00000000
 8011bc4:	08011947 	.word	0x08011947
 8011bc8:	08012b16 	.word	0x08012b16

08011bcc <_printf_common>:
 8011bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011bd0:	4616      	mov	r6, r2
 8011bd2:	4699      	mov	r9, r3
 8011bd4:	688a      	ldr	r2, [r1, #8]
 8011bd6:	690b      	ldr	r3, [r1, #16]
 8011bd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011bdc:	4293      	cmp	r3, r2
 8011bde:	bfb8      	it	lt
 8011be0:	4613      	movlt	r3, r2
 8011be2:	6033      	str	r3, [r6, #0]
 8011be4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011be8:	4607      	mov	r7, r0
 8011bea:	460c      	mov	r4, r1
 8011bec:	b10a      	cbz	r2, 8011bf2 <_printf_common+0x26>
 8011bee:	3301      	adds	r3, #1
 8011bf0:	6033      	str	r3, [r6, #0]
 8011bf2:	6823      	ldr	r3, [r4, #0]
 8011bf4:	0699      	lsls	r1, r3, #26
 8011bf6:	bf42      	ittt	mi
 8011bf8:	6833      	ldrmi	r3, [r6, #0]
 8011bfa:	3302      	addmi	r3, #2
 8011bfc:	6033      	strmi	r3, [r6, #0]
 8011bfe:	6825      	ldr	r5, [r4, #0]
 8011c00:	f015 0506 	ands.w	r5, r5, #6
 8011c04:	d106      	bne.n	8011c14 <_printf_common+0x48>
 8011c06:	f104 0a19 	add.w	sl, r4, #25
 8011c0a:	68e3      	ldr	r3, [r4, #12]
 8011c0c:	6832      	ldr	r2, [r6, #0]
 8011c0e:	1a9b      	subs	r3, r3, r2
 8011c10:	42ab      	cmp	r3, r5
 8011c12:	dc26      	bgt.n	8011c62 <_printf_common+0x96>
 8011c14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011c18:	1e13      	subs	r3, r2, #0
 8011c1a:	6822      	ldr	r2, [r4, #0]
 8011c1c:	bf18      	it	ne
 8011c1e:	2301      	movne	r3, #1
 8011c20:	0692      	lsls	r2, r2, #26
 8011c22:	d42b      	bmi.n	8011c7c <_printf_common+0xb0>
 8011c24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011c28:	4649      	mov	r1, r9
 8011c2a:	4638      	mov	r0, r7
 8011c2c:	47c0      	blx	r8
 8011c2e:	3001      	adds	r0, #1
 8011c30:	d01e      	beq.n	8011c70 <_printf_common+0xa4>
 8011c32:	6823      	ldr	r3, [r4, #0]
 8011c34:	68e5      	ldr	r5, [r4, #12]
 8011c36:	6832      	ldr	r2, [r6, #0]
 8011c38:	f003 0306 	and.w	r3, r3, #6
 8011c3c:	2b04      	cmp	r3, #4
 8011c3e:	bf08      	it	eq
 8011c40:	1aad      	subeq	r5, r5, r2
 8011c42:	68a3      	ldr	r3, [r4, #8]
 8011c44:	6922      	ldr	r2, [r4, #16]
 8011c46:	bf0c      	ite	eq
 8011c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011c4c:	2500      	movne	r5, #0
 8011c4e:	4293      	cmp	r3, r2
 8011c50:	bfc4      	itt	gt
 8011c52:	1a9b      	subgt	r3, r3, r2
 8011c54:	18ed      	addgt	r5, r5, r3
 8011c56:	2600      	movs	r6, #0
 8011c58:	341a      	adds	r4, #26
 8011c5a:	42b5      	cmp	r5, r6
 8011c5c:	d11a      	bne.n	8011c94 <_printf_common+0xc8>
 8011c5e:	2000      	movs	r0, #0
 8011c60:	e008      	b.n	8011c74 <_printf_common+0xa8>
 8011c62:	2301      	movs	r3, #1
 8011c64:	4652      	mov	r2, sl
 8011c66:	4649      	mov	r1, r9
 8011c68:	4638      	mov	r0, r7
 8011c6a:	47c0      	blx	r8
 8011c6c:	3001      	adds	r0, #1
 8011c6e:	d103      	bne.n	8011c78 <_printf_common+0xac>
 8011c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c78:	3501      	adds	r5, #1
 8011c7a:	e7c6      	b.n	8011c0a <_printf_common+0x3e>
 8011c7c:	18e1      	adds	r1, r4, r3
 8011c7e:	1c5a      	adds	r2, r3, #1
 8011c80:	2030      	movs	r0, #48	; 0x30
 8011c82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011c86:	4422      	add	r2, r4
 8011c88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011c8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011c90:	3302      	adds	r3, #2
 8011c92:	e7c7      	b.n	8011c24 <_printf_common+0x58>
 8011c94:	2301      	movs	r3, #1
 8011c96:	4622      	mov	r2, r4
 8011c98:	4649      	mov	r1, r9
 8011c9a:	4638      	mov	r0, r7
 8011c9c:	47c0      	blx	r8
 8011c9e:	3001      	adds	r0, #1
 8011ca0:	d0e6      	beq.n	8011c70 <_printf_common+0xa4>
 8011ca2:	3601      	adds	r6, #1
 8011ca4:	e7d9      	b.n	8011c5a <_printf_common+0x8e>
	...

08011ca8 <_printf_i>:
 8011ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011cac:	7e0f      	ldrb	r7, [r1, #24]
 8011cae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011cb0:	2f78      	cmp	r7, #120	; 0x78
 8011cb2:	4691      	mov	r9, r2
 8011cb4:	4680      	mov	r8, r0
 8011cb6:	460c      	mov	r4, r1
 8011cb8:	469a      	mov	sl, r3
 8011cba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011cbe:	d807      	bhi.n	8011cd0 <_printf_i+0x28>
 8011cc0:	2f62      	cmp	r7, #98	; 0x62
 8011cc2:	d80a      	bhi.n	8011cda <_printf_i+0x32>
 8011cc4:	2f00      	cmp	r7, #0
 8011cc6:	f000 80d8 	beq.w	8011e7a <_printf_i+0x1d2>
 8011cca:	2f58      	cmp	r7, #88	; 0x58
 8011ccc:	f000 80a3 	beq.w	8011e16 <_printf_i+0x16e>
 8011cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011cd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011cd8:	e03a      	b.n	8011d50 <_printf_i+0xa8>
 8011cda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011cde:	2b15      	cmp	r3, #21
 8011ce0:	d8f6      	bhi.n	8011cd0 <_printf_i+0x28>
 8011ce2:	a101      	add	r1, pc, #4	; (adr r1, 8011ce8 <_printf_i+0x40>)
 8011ce4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011ce8:	08011d41 	.word	0x08011d41
 8011cec:	08011d55 	.word	0x08011d55
 8011cf0:	08011cd1 	.word	0x08011cd1
 8011cf4:	08011cd1 	.word	0x08011cd1
 8011cf8:	08011cd1 	.word	0x08011cd1
 8011cfc:	08011cd1 	.word	0x08011cd1
 8011d00:	08011d55 	.word	0x08011d55
 8011d04:	08011cd1 	.word	0x08011cd1
 8011d08:	08011cd1 	.word	0x08011cd1
 8011d0c:	08011cd1 	.word	0x08011cd1
 8011d10:	08011cd1 	.word	0x08011cd1
 8011d14:	08011e61 	.word	0x08011e61
 8011d18:	08011d85 	.word	0x08011d85
 8011d1c:	08011e43 	.word	0x08011e43
 8011d20:	08011cd1 	.word	0x08011cd1
 8011d24:	08011cd1 	.word	0x08011cd1
 8011d28:	08011e83 	.word	0x08011e83
 8011d2c:	08011cd1 	.word	0x08011cd1
 8011d30:	08011d85 	.word	0x08011d85
 8011d34:	08011cd1 	.word	0x08011cd1
 8011d38:	08011cd1 	.word	0x08011cd1
 8011d3c:	08011e4b 	.word	0x08011e4b
 8011d40:	682b      	ldr	r3, [r5, #0]
 8011d42:	1d1a      	adds	r2, r3, #4
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	602a      	str	r2, [r5, #0]
 8011d48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011d4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011d50:	2301      	movs	r3, #1
 8011d52:	e0a3      	b.n	8011e9c <_printf_i+0x1f4>
 8011d54:	6820      	ldr	r0, [r4, #0]
 8011d56:	6829      	ldr	r1, [r5, #0]
 8011d58:	0606      	lsls	r6, r0, #24
 8011d5a:	f101 0304 	add.w	r3, r1, #4
 8011d5e:	d50a      	bpl.n	8011d76 <_printf_i+0xce>
 8011d60:	680e      	ldr	r6, [r1, #0]
 8011d62:	602b      	str	r3, [r5, #0]
 8011d64:	2e00      	cmp	r6, #0
 8011d66:	da03      	bge.n	8011d70 <_printf_i+0xc8>
 8011d68:	232d      	movs	r3, #45	; 0x2d
 8011d6a:	4276      	negs	r6, r6
 8011d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d70:	485e      	ldr	r0, [pc, #376]	; (8011eec <_printf_i+0x244>)
 8011d72:	230a      	movs	r3, #10
 8011d74:	e019      	b.n	8011daa <_printf_i+0x102>
 8011d76:	680e      	ldr	r6, [r1, #0]
 8011d78:	602b      	str	r3, [r5, #0]
 8011d7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011d7e:	bf18      	it	ne
 8011d80:	b236      	sxthne	r6, r6
 8011d82:	e7ef      	b.n	8011d64 <_printf_i+0xbc>
 8011d84:	682b      	ldr	r3, [r5, #0]
 8011d86:	6820      	ldr	r0, [r4, #0]
 8011d88:	1d19      	adds	r1, r3, #4
 8011d8a:	6029      	str	r1, [r5, #0]
 8011d8c:	0601      	lsls	r1, r0, #24
 8011d8e:	d501      	bpl.n	8011d94 <_printf_i+0xec>
 8011d90:	681e      	ldr	r6, [r3, #0]
 8011d92:	e002      	b.n	8011d9a <_printf_i+0xf2>
 8011d94:	0646      	lsls	r6, r0, #25
 8011d96:	d5fb      	bpl.n	8011d90 <_printf_i+0xe8>
 8011d98:	881e      	ldrh	r6, [r3, #0]
 8011d9a:	4854      	ldr	r0, [pc, #336]	; (8011eec <_printf_i+0x244>)
 8011d9c:	2f6f      	cmp	r7, #111	; 0x6f
 8011d9e:	bf0c      	ite	eq
 8011da0:	2308      	moveq	r3, #8
 8011da2:	230a      	movne	r3, #10
 8011da4:	2100      	movs	r1, #0
 8011da6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011daa:	6865      	ldr	r5, [r4, #4]
 8011dac:	60a5      	str	r5, [r4, #8]
 8011dae:	2d00      	cmp	r5, #0
 8011db0:	bfa2      	ittt	ge
 8011db2:	6821      	ldrge	r1, [r4, #0]
 8011db4:	f021 0104 	bicge.w	r1, r1, #4
 8011db8:	6021      	strge	r1, [r4, #0]
 8011dba:	b90e      	cbnz	r6, 8011dc0 <_printf_i+0x118>
 8011dbc:	2d00      	cmp	r5, #0
 8011dbe:	d04d      	beq.n	8011e5c <_printf_i+0x1b4>
 8011dc0:	4615      	mov	r5, r2
 8011dc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8011dc6:	fb03 6711 	mls	r7, r3, r1, r6
 8011dca:	5dc7      	ldrb	r7, [r0, r7]
 8011dcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011dd0:	4637      	mov	r7, r6
 8011dd2:	42bb      	cmp	r3, r7
 8011dd4:	460e      	mov	r6, r1
 8011dd6:	d9f4      	bls.n	8011dc2 <_printf_i+0x11a>
 8011dd8:	2b08      	cmp	r3, #8
 8011dda:	d10b      	bne.n	8011df4 <_printf_i+0x14c>
 8011ddc:	6823      	ldr	r3, [r4, #0]
 8011dde:	07de      	lsls	r6, r3, #31
 8011de0:	d508      	bpl.n	8011df4 <_printf_i+0x14c>
 8011de2:	6923      	ldr	r3, [r4, #16]
 8011de4:	6861      	ldr	r1, [r4, #4]
 8011de6:	4299      	cmp	r1, r3
 8011de8:	bfde      	ittt	le
 8011dea:	2330      	movle	r3, #48	; 0x30
 8011dec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011df0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011df4:	1b52      	subs	r2, r2, r5
 8011df6:	6122      	str	r2, [r4, #16]
 8011df8:	f8cd a000 	str.w	sl, [sp]
 8011dfc:	464b      	mov	r3, r9
 8011dfe:	aa03      	add	r2, sp, #12
 8011e00:	4621      	mov	r1, r4
 8011e02:	4640      	mov	r0, r8
 8011e04:	f7ff fee2 	bl	8011bcc <_printf_common>
 8011e08:	3001      	adds	r0, #1
 8011e0a:	d14c      	bne.n	8011ea6 <_printf_i+0x1fe>
 8011e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e10:	b004      	add	sp, #16
 8011e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e16:	4835      	ldr	r0, [pc, #212]	; (8011eec <_printf_i+0x244>)
 8011e18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011e1c:	6829      	ldr	r1, [r5, #0]
 8011e1e:	6823      	ldr	r3, [r4, #0]
 8011e20:	f851 6b04 	ldr.w	r6, [r1], #4
 8011e24:	6029      	str	r1, [r5, #0]
 8011e26:	061d      	lsls	r5, r3, #24
 8011e28:	d514      	bpl.n	8011e54 <_printf_i+0x1ac>
 8011e2a:	07df      	lsls	r7, r3, #31
 8011e2c:	bf44      	itt	mi
 8011e2e:	f043 0320 	orrmi.w	r3, r3, #32
 8011e32:	6023      	strmi	r3, [r4, #0]
 8011e34:	b91e      	cbnz	r6, 8011e3e <_printf_i+0x196>
 8011e36:	6823      	ldr	r3, [r4, #0]
 8011e38:	f023 0320 	bic.w	r3, r3, #32
 8011e3c:	6023      	str	r3, [r4, #0]
 8011e3e:	2310      	movs	r3, #16
 8011e40:	e7b0      	b.n	8011da4 <_printf_i+0xfc>
 8011e42:	6823      	ldr	r3, [r4, #0]
 8011e44:	f043 0320 	orr.w	r3, r3, #32
 8011e48:	6023      	str	r3, [r4, #0]
 8011e4a:	2378      	movs	r3, #120	; 0x78
 8011e4c:	4828      	ldr	r0, [pc, #160]	; (8011ef0 <_printf_i+0x248>)
 8011e4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011e52:	e7e3      	b.n	8011e1c <_printf_i+0x174>
 8011e54:	0659      	lsls	r1, r3, #25
 8011e56:	bf48      	it	mi
 8011e58:	b2b6      	uxthmi	r6, r6
 8011e5a:	e7e6      	b.n	8011e2a <_printf_i+0x182>
 8011e5c:	4615      	mov	r5, r2
 8011e5e:	e7bb      	b.n	8011dd8 <_printf_i+0x130>
 8011e60:	682b      	ldr	r3, [r5, #0]
 8011e62:	6826      	ldr	r6, [r4, #0]
 8011e64:	6961      	ldr	r1, [r4, #20]
 8011e66:	1d18      	adds	r0, r3, #4
 8011e68:	6028      	str	r0, [r5, #0]
 8011e6a:	0635      	lsls	r5, r6, #24
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	d501      	bpl.n	8011e74 <_printf_i+0x1cc>
 8011e70:	6019      	str	r1, [r3, #0]
 8011e72:	e002      	b.n	8011e7a <_printf_i+0x1d2>
 8011e74:	0670      	lsls	r0, r6, #25
 8011e76:	d5fb      	bpl.n	8011e70 <_printf_i+0x1c8>
 8011e78:	8019      	strh	r1, [r3, #0]
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	6123      	str	r3, [r4, #16]
 8011e7e:	4615      	mov	r5, r2
 8011e80:	e7ba      	b.n	8011df8 <_printf_i+0x150>
 8011e82:	682b      	ldr	r3, [r5, #0]
 8011e84:	1d1a      	adds	r2, r3, #4
 8011e86:	602a      	str	r2, [r5, #0]
 8011e88:	681d      	ldr	r5, [r3, #0]
 8011e8a:	6862      	ldr	r2, [r4, #4]
 8011e8c:	2100      	movs	r1, #0
 8011e8e:	4628      	mov	r0, r5
 8011e90:	f7ee f9a6 	bl	80001e0 <memchr>
 8011e94:	b108      	cbz	r0, 8011e9a <_printf_i+0x1f2>
 8011e96:	1b40      	subs	r0, r0, r5
 8011e98:	6060      	str	r0, [r4, #4]
 8011e9a:	6863      	ldr	r3, [r4, #4]
 8011e9c:	6123      	str	r3, [r4, #16]
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ea4:	e7a8      	b.n	8011df8 <_printf_i+0x150>
 8011ea6:	6923      	ldr	r3, [r4, #16]
 8011ea8:	462a      	mov	r2, r5
 8011eaa:	4649      	mov	r1, r9
 8011eac:	4640      	mov	r0, r8
 8011eae:	47d0      	blx	sl
 8011eb0:	3001      	adds	r0, #1
 8011eb2:	d0ab      	beq.n	8011e0c <_printf_i+0x164>
 8011eb4:	6823      	ldr	r3, [r4, #0]
 8011eb6:	079b      	lsls	r3, r3, #30
 8011eb8:	d413      	bmi.n	8011ee2 <_printf_i+0x23a>
 8011eba:	68e0      	ldr	r0, [r4, #12]
 8011ebc:	9b03      	ldr	r3, [sp, #12]
 8011ebe:	4298      	cmp	r0, r3
 8011ec0:	bfb8      	it	lt
 8011ec2:	4618      	movlt	r0, r3
 8011ec4:	e7a4      	b.n	8011e10 <_printf_i+0x168>
 8011ec6:	2301      	movs	r3, #1
 8011ec8:	4632      	mov	r2, r6
 8011eca:	4649      	mov	r1, r9
 8011ecc:	4640      	mov	r0, r8
 8011ece:	47d0      	blx	sl
 8011ed0:	3001      	adds	r0, #1
 8011ed2:	d09b      	beq.n	8011e0c <_printf_i+0x164>
 8011ed4:	3501      	adds	r5, #1
 8011ed6:	68e3      	ldr	r3, [r4, #12]
 8011ed8:	9903      	ldr	r1, [sp, #12]
 8011eda:	1a5b      	subs	r3, r3, r1
 8011edc:	42ab      	cmp	r3, r5
 8011ede:	dcf2      	bgt.n	8011ec6 <_printf_i+0x21e>
 8011ee0:	e7eb      	b.n	8011eba <_printf_i+0x212>
 8011ee2:	2500      	movs	r5, #0
 8011ee4:	f104 0619 	add.w	r6, r4, #25
 8011ee8:	e7f5      	b.n	8011ed6 <_printf_i+0x22e>
 8011eea:	bf00      	nop
 8011eec:	08012b21 	.word	0x08012b21
 8011ef0:	08012b32 	.word	0x08012b32

08011ef4 <__sread>:
 8011ef4:	b510      	push	{r4, lr}
 8011ef6:	460c      	mov	r4, r1
 8011ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011efc:	f000 fab2 	bl	8012464 <_read_r>
 8011f00:	2800      	cmp	r0, #0
 8011f02:	bfab      	itete	ge
 8011f04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011f06:	89a3      	ldrhlt	r3, [r4, #12]
 8011f08:	181b      	addge	r3, r3, r0
 8011f0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011f0e:	bfac      	ite	ge
 8011f10:	6563      	strge	r3, [r4, #84]	; 0x54
 8011f12:	81a3      	strhlt	r3, [r4, #12]
 8011f14:	bd10      	pop	{r4, pc}

08011f16 <__swrite>:
 8011f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f1a:	461f      	mov	r7, r3
 8011f1c:	898b      	ldrh	r3, [r1, #12]
 8011f1e:	05db      	lsls	r3, r3, #23
 8011f20:	4605      	mov	r5, r0
 8011f22:	460c      	mov	r4, r1
 8011f24:	4616      	mov	r6, r2
 8011f26:	d505      	bpl.n	8011f34 <__swrite+0x1e>
 8011f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f2c:	2302      	movs	r3, #2
 8011f2e:	2200      	movs	r2, #0
 8011f30:	f000 f9c8 	bl	80122c4 <_lseek_r>
 8011f34:	89a3      	ldrh	r3, [r4, #12]
 8011f36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011f3e:	81a3      	strh	r3, [r4, #12]
 8011f40:	4632      	mov	r2, r6
 8011f42:	463b      	mov	r3, r7
 8011f44:	4628      	mov	r0, r5
 8011f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f4a:	f000 b869 	b.w	8012020 <_write_r>

08011f4e <__sseek>:
 8011f4e:	b510      	push	{r4, lr}
 8011f50:	460c      	mov	r4, r1
 8011f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f56:	f000 f9b5 	bl	80122c4 <_lseek_r>
 8011f5a:	1c43      	adds	r3, r0, #1
 8011f5c:	89a3      	ldrh	r3, [r4, #12]
 8011f5e:	bf15      	itete	ne
 8011f60:	6560      	strne	r0, [r4, #84]	; 0x54
 8011f62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011f66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011f6a:	81a3      	strheq	r3, [r4, #12]
 8011f6c:	bf18      	it	ne
 8011f6e:	81a3      	strhne	r3, [r4, #12]
 8011f70:	bd10      	pop	{r4, pc}

08011f72 <__sclose>:
 8011f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f76:	f000 b8d3 	b.w	8012120 <_close_r>
	...

08011f7c <__swbuf_r>:
 8011f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f7e:	460e      	mov	r6, r1
 8011f80:	4614      	mov	r4, r2
 8011f82:	4605      	mov	r5, r0
 8011f84:	b118      	cbz	r0, 8011f8e <__swbuf_r+0x12>
 8011f86:	6983      	ldr	r3, [r0, #24]
 8011f88:	b90b      	cbnz	r3, 8011f8e <__swbuf_r+0x12>
 8011f8a:	f7ff fabd 	bl	8011508 <__sinit>
 8011f8e:	4b21      	ldr	r3, [pc, #132]	; (8012014 <__swbuf_r+0x98>)
 8011f90:	429c      	cmp	r4, r3
 8011f92:	d12b      	bne.n	8011fec <__swbuf_r+0x70>
 8011f94:	686c      	ldr	r4, [r5, #4]
 8011f96:	69a3      	ldr	r3, [r4, #24]
 8011f98:	60a3      	str	r3, [r4, #8]
 8011f9a:	89a3      	ldrh	r3, [r4, #12]
 8011f9c:	071a      	lsls	r2, r3, #28
 8011f9e:	d52f      	bpl.n	8012000 <__swbuf_r+0x84>
 8011fa0:	6923      	ldr	r3, [r4, #16]
 8011fa2:	b36b      	cbz	r3, 8012000 <__swbuf_r+0x84>
 8011fa4:	6923      	ldr	r3, [r4, #16]
 8011fa6:	6820      	ldr	r0, [r4, #0]
 8011fa8:	1ac0      	subs	r0, r0, r3
 8011faa:	6963      	ldr	r3, [r4, #20]
 8011fac:	b2f6      	uxtb	r6, r6
 8011fae:	4283      	cmp	r3, r0
 8011fb0:	4637      	mov	r7, r6
 8011fb2:	dc04      	bgt.n	8011fbe <__swbuf_r+0x42>
 8011fb4:	4621      	mov	r1, r4
 8011fb6:	4628      	mov	r0, r5
 8011fb8:	f000 f948 	bl	801224c <_fflush_r>
 8011fbc:	bb30      	cbnz	r0, 801200c <__swbuf_r+0x90>
 8011fbe:	68a3      	ldr	r3, [r4, #8]
 8011fc0:	3b01      	subs	r3, #1
 8011fc2:	60a3      	str	r3, [r4, #8]
 8011fc4:	6823      	ldr	r3, [r4, #0]
 8011fc6:	1c5a      	adds	r2, r3, #1
 8011fc8:	6022      	str	r2, [r4, #0]
 8011fca:	701e      	strb	r6, [r3, #0]
 8011fcc:	6963      	ldr	r3, [r4, #20]
 8011fce:	3001      	adds	r0, #1
 8011fd0:	4283      	cmp	r3, r0
 8011fd2:	d004      	beq.n	8011fde <__swbuf_r+0x62>
 8011fd4:	89a3      	ldrh	r3, [r4, #12]
 8011fd6:	07db      	lsls	r3, r3, #31
 8011fd8:	d506      	bpl.n	8011fe8 <__swbuf_r+0x6c>
 8011fda:	2e0a      	cmp	r6, #10
 8011fdc:	d104      	bne.n	8011fe8 <__swbuf_r+0x6c>
 8011fde:	4621      	mov	r1, r4
 8011fe0:	4628      	mov	r0, r5
 8011fe2:	f000 f933 	bl	801224c <_fflush_r>
 8011fe6:	b988      	cbnz	r0, 801200c <__swbuf_r+0x90>
 8011fe8:	4638      	mov	r0, r7
 8011fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fec:	4b0a      	ldr	r3, [pc, #40]	; (8012018 <__swbuf_r+0x9c>)
 8011fee:	429c      	cmp	r4, r3
 8011ff0:	d101      	bne.n	8011ff6 <__swbuf_r+0x7a>
 8011ff2:	68ac      	ldr	r4, [r5, #8]
 8011ff4:	e7cf      	b.n	8011f96 <__swbuf_r+0x1a>
 8011ff6:	4b09      	ldr	r3, [pc, #36]	; (801201c <__swbuf_r+0xa0>)
 8011ff8:	429c      	cmp	r4, r3
 8011ffa:	bf08      	it	eq
 8011ffc:	68ec      	ldreq	r4, [r5, #12]
 8011ffe:	e7ca      	b.n	8011f96 <__swbuf_r+0x1a>
 8012000:	4621      	mov	r1, r4
 8012002:	4628      	mov	r0, r5
 8012004:	f000 f81e 	bl	8012044 <__swsetup_r>
 8012008:	2800      	cmp	r0, #0
 801200a:	d0cb      	beq.n	8011fa4 <__swbuf_r+0x28>
 801200c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012010:	e7ea      	b.n	8011fe8 <__swbuf_r+0x6c>
 8012012:	bf00      	nop
 8012014:	08012ad0 	.word	0x08012ad0
 8012018:	08012af0 	.word	0x08012af0
 801201c:	08012ab0 	.word	0x08012ab0

08012020 <_write_r>:
 8012020:	b538      	push	{r3, r4, r5, lr}
 8012022:	4d07      	ldr	r5, [pc, #28]	; (8012040 <_write_r+0x20>)
 8012024:	4604      	mov	r4, r0
 8012026:	4608      	mov	r0, r1
 8012028:	4611      	mov	r1, r2
 801202a:	2200      	movs	r2, #0
 801202c:	602a      	str	r2, [r5, #0]
 801202e:	461a      	mov	r2, r3
 8012030:	f7f1 fe0b 	bl	8003c4a <_write>
 8012034:	1c43      	adds	r3, r0, #1
 8012036:	d102      	bne.n	801203e <_write_r+0x1e>
 8012038:	682b      	ldr	r3, [r5, #0]
 801203a:	b103      	cbz	r3, 801203e <_write_r+0x1e>
 801203c:	6023      	str	r3, [r4, #0]
 801203e:	bd38      	pop	{r3, r4, r5, pc}
 8012040:	20003968 	.word	0x20003968

08012044 <__swsetup_r>:
 8012044:	4b32      	ldr	r3, [pc, #200]	; (8012110 <__swsetup_r+0xcc>)
 8012046:	b570      	push	{r4, r5, r6, lr}
 8012048:	681d      	ldr	r5, [r3, #0]
 801204a:	4606      	mov	r6, r0
 801204c:	460c      	mov	r4, r1
 801204e:	b125      	cbz	r5, 801205a <__swsetup_r+0x16>
 8012050:	69ab      	ldr	r3, [r5, #24]
 8012052:	b913      	cbnz	r3, 801205a <__swsetup_r+0x16>
 8012054:	4628      	mov	r0, r5
 8012056:	f7ff fa57 	bl	8011508 <__sinit>
 801205a:	4b2e      	ldr	r3, [pc, #184]	; (8012114 <__swsetup_r+0xd0>)
 801205c:	429c      	cmp	r4, r3
 801205e:	d10f      	bne.n	8012080 <__swsetup_r+0x3c>
 8012060:	686c      	ldr	r4, [r5, #4]
 8012062:	89a3      	ldrh	r3, [r4, #12]
 8012064:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012068:	0719      	lsls	r1, r3, #28
 801206a:	d42c      	bmi.n	80120c6 <__swsetup_r+0x82>
 801206c:	06dd      	lsls	r5, r3, #27
 801206e:	d411      	bmi.n	8012094 <__swsetup_r+0x50>
 8012070:	2309      	movs	r3, #9
 8012072:	6033      	str	r3, [r6, #0]
 8012074:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012078:	81a3      	strh	r3, [r4, #12]
 801207a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801207e:	e03e      	b.n	80120fe <__swsetup_r+0xba>
 8012080:	4b25      	ldr	r3, [pc, #148]	; (8012118 <__swsetup_r+0xd4>)
 8012082:	429c      	cmp	r4, r3
 8012084:	d101      	bne.n	801208a <__swsetup_r+0x46>
 8012086:	68ac      	ldr	r4, [r5, #8]
 8012088:	e7eb      	b.n	8012062 <__swsetup_r+0x1e>
 801208a:	4b24      	ldr	r3, [pc, #144]	; (801211c <__swsetup_r+0xd8>)
 801208c:	429c      	cmp	r4, r3
 801208e:	bf08      	it	eq
 8012090:	68ec      	ldreq	r4, [r5, #12]
 8012092:	e7e6      	b.n	8012062 <__swsetup_r+0x1e>
 8012094:	0758      	lsls	r0, r3, #29
 8012096:	d512      	bpl.n	80120be <__swsetup_r+0x7a>
 8012098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801209a:	b141      	cbz	r1, 80120ae <__swsetup_r+0x6a>
 801209c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80120a0:	4299      	cmp	r1, r3
 80120a2:	d002      	beq.n	80120aa <__swsetup_r+0x66>
 80120a4:	4630      	mov	r0, r6
 80120a6:	f7ff f89f 	bl	80111e8 <_free_r>
 80120aa:	2300      	movs	r3, #0
 80120ac:	6363      	str	r3, [r4, #52]	; 0x34
 80120ae:	89a3      	ldrh	r3, [r4, #12]
 80120b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80120b4:	81a3      	strh	r3, [r4, #12]
 80120b6:	2300      	movs	r3, #0
 80120b8:	6063      	str	r3, [r4, #4]
 80120ba:	6923      	ldr	r3, [r4, #16]
 80120bc:	6023      	str	r3, [r4, #0]
 80120be:	89a3      	ldrh	r3, [r4, #12]
 80120c0:	f043 0308 	orr.w	r3, r3, #8
 80120c4:	81a3      	strh	r3, [r4, #12]
 80120c6:	6923      	ldr	r3, [r4, #16]
 80120c8:	b94b      	cbnz	r3, 80120de <__swsetup_r+0x9a>
 80120ca:	89a3      	ldrh	r3, [r4, #12]
 80120cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80120d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80120d4:	d003      	beq.n	80120de <__swsetup_r+0x9a>
 80120d6:	4621      	mov	r1, r4
 80120d8:	4630      	mov	r0, r6
 80120da:	f000 f92b 	bl	8012334 <__smakebuf_r>
 80120de:	89a0      	ldrh	r0, [r4, #12]
 80120e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80120e4:	f010 0301 	ands.w	r3, r0, #1
 80120e8:	d00a      	beq.n	8012100 <__swsetup_r+0xbc>
 80120ea:	2300      	movs	r3, #0
 80120ec:	60a3      	str	r3, [r4, #8]
 80120ee:	6963      	ldr	r3, [r4, #20]
 80120f0:	425b      	negs	r3, r3
 80120f2:	61a3      	str	r3, [r4, #24]
 80120f4:	6923      	ldr	r3, [r4, #16]
 80120f6:	b943      	cbnz	r3, 801210a <__swsetup_r+0xc6>
 80120f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80120fc:	d1ba      	bne.n	8012074 <__swsetup_r+0x30>
 80120fe:	bd70      	pop	{r4, r5, r6, pc}
 8012100:	0781      	lsls	r1, r0, #30
 8012102:	bf58      	it	pl
 8012104:	6963      	ldrpl	r3, [r4, #20]
 8012106:	60a3      	str	r3, [r4, #8]
 8012108:	e7f4      	b.n	80120f4 <__swsetup_r+0xb0>
 801210a:	2000      	movs	r0, #0
 801210c:	e7f7      	b.n	80120fe <__swsetup_r+0xba>
 801210e:	bf00      	nop
 8012110:	2000005c 	.word	0x2000005c
 8012114:	08012ad0 	.word	0x08012ad0
 8012118:	08012af0 	.word	0x08012af0
 801211c:	08012ab0 	.word	0x08012ab0

08012120 <_close_r>:
 8012120:	b538      	push	{r3, r4, r5, lr}
 8012122:	4d06      	ldr	r5, [pc, #24]	; (801213c <_close_r+0x1c>)
 8012124:	2300      	movs	r3, #0
 8012126:	4604      	mov	r4, r0
 8012128:	4608      	mov	r0, r1
 801212a:	602b      	str	r3, [r5, #0]
 801212c:	f7f1 fda9 	bl	8003c82 <_close>
 8012130:	1c43      	adds	r3, r0, #1
 8012132:	d102      	bne.n	801213a <_close_r+0x1a>
 8012134:	682b      	ldr	r3, [r5, #0]
 8012136:	b103      	cbz	r3, 801213a <_close_r+0x1a>
 8012138:	6023      	str	r3, [r4, #0]
 801213a:	bd38      	pop	{r3, r4, r5, pc}
 801213c:	20003968 	.word	0x20003968

08012140 <__sflush_r>:
 8012140:	898a      	ldrh	r2, [r1, #12]
 8012142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012146:	4605      	mov	r5, r0
 8012148:	0710      	lsls	r0, r2, #28
 801214a:	460c      	mov	r4, r1
 801214c:	d458      	bmi.n	8012200 <__sflush_r+0xc0>
 801214e:	684b      	ldr	r3, [r1, #4]
 8012150:	2b00      	cmp	r3, #0
 8012152:	dc05      	bgt.n	8012160 <__sflush_r+0x20>
 8012154:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012156:	2b00      	cmp	r3, #0
 8012158:	dc02      	bgt.n	8012160 <__sflush_r+0x20>
 801215a:	2000      	movs	r0, #0
 801215c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012160:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012162:	2e00      	cmp	r6, #0
 8012164:	d0f9      	beq.n	801215a <__sflush_r+0x1a>
 8012166:	2300      	movs	r3, #0
 8012168:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801216c:	682f      	ldr	r7, [r5, #0]
 801216e:	602b      	str	r3, [r5, #0]
 8012170:	d032      	beq.n	80121d8 <__sflush_r+0x98>
 8012172:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012174:	89a3      	ldrh	r3, [r4, #12]
 8012176:	075a      	lsls	r2, r3, #29
 8012178:	d505      	bpl.n	8012186 <__sflush_r+0x46>
 801217a:	6863      	ldr	r3, [r4, #4]
 801217c:	1ac0      	subs	r0, r0, r3
 801217e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012180:	b10b      	cbz	r3, 8012186 <__sflush_r+0x46>
 8012182:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012184:	1ac0      	subs	r0, r0, r3
 8012186:	2300      	movs	r3, #0
 8012188:	4602      	mov	r2, r0
 801218a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801218c:	6a21      	ldr	r1, [r4, #32]
 801218e:	4628      	mov	r0, r5
 8012190:	47b0      	blx	r6
 8012192:	1c43      	adds	r3, r0, #1
 8012194:	89a3      	ldrh	r3, [r4, #12]
 8012196:	d106      	bne.n	80121a6 <__sflush_r+0x66>
 8012198:	6829      	ldr	r1, [r5, #0]
 801219a:	291d      	cmp	r1, #29
 801219c:	d82c      	bhi.n	80121f8 <__sflush_r+0xb8>
 801219e:	4a2a      	ldr	r2, [pc, #168]	; (8012248 <__sflush_r+0x108>)
 80121a0:	40ca      	lsrs	r2, r1
 80121a2:	07d6      	lsls	r6, r2, #31
 80121a4:	d528      	bpl.n	80121f8 <__sflush_r+0xb8>
 80121a6:	2200      	movs	r2, #0
 80121a8:	6062      	str	r2, [r4, #4]
 80121aa:	04d9      	lsls	r1, r3, #19
 80121ac:	6922      	ldr	r2, [r4, #16]
 80121ae:	6022      	str	r2, [r4, #0]
 80121b0:	d504      	bpl.n	80121bc <__sflush_r+0x7c>
 80121b2:	1c42      	adds	r2, r0, #1
 80121b4:	d101      	bne.n	80121ba <__sflush_r+0x7a>
 80121b6:	682b      	ldr	r3, [r5, #0]
 80121b8:	b903      	cbnz	r3, 80121bc <__sflush_r+0x7c>
 80121ba:	6560      	str	r0, [r4, #84]	; 0x54
 80121bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80121be:	602f      	str	r7, [r5, #0]
 80121c0:	2900      	cmp	r1, #0
 80121c2:	d0ca      	beq.n	801215a <__sflush_r+0x1a>
 80121c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80121c8:	4299      	cmp	r1, r3
 80121ca:	d002      	beq.n	80121d2 <__sflush_r+0x92>
 80121cc:	4628      	mov	r0, r5
 80121ce:	f7ff f80b 	bl	80111e8 <_free_r>
 80121d2:	2000      	movs	r0, #0
 80121d4:	6360      	str	r0, [r4, #52]	; 0x34
 80121d6:	e7c1      	b.n	801215c <__sflush_r+0x1c>
 80121d8:	6a21      	ldr	r1, [r4, #32]
 80121da:	2301      	movs	r3, #1
 80121dc:	4628      	mov	r0, r5
 80121de:	47b0      	blx	r6
 80121e0:	1c41      	adds	r1, r0, #1
 80121e2:	d1c7      	bne.n	8012174 <__sflush_r+0x34>
 80121e4:	682b      	ldr	r3, [r5, #0]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d0c4      	beq.n	8012174 <__sflush_r+0x34>
 80121ea:	2b1d      	cmp	r3, #29
 80121ec:	d001      	beq.n	80121f2 <__sflush_r+0xb2>
 80121ee:	2b16      	cmp	r3, #22
 80121f0:	d101      	bne.n	80121f6 <__sflush_r+0xb6>
 80121f2:	602f      	str	r7, [r5, #0]
 80121f4:	e7b1      	b.n	801215a <__sflush_r+0x1a>
 80121f6:	89a3      	ldrh	r3, [r4, #12]
 80121f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121fc:	81a3      	strh	r3, [r4, #12]
 80121fe:	e7ad      	b.n	801215c <__sflush_r+0x1c>
 8012200:	690f      	ldr	r7, [r1, #16]
 8012202:	2f00      	cmp	r7, #0
 8012204:	d0a9      	beq.n	801215a <__sflush_r+0x1a>
 8012206:	0793      	lsls	r3, r2, #30
 8012208:	680e      	ldr	r6, [r1, #0]
 801220a:	bf08      	it	eq
 801220c:	694b      	ldreq	r3, [r1, #20]
 801220e:	600f      	str	r7, [r1, #0]
 8012210:	bf18      	it	ne
 8012212:	2300      	movne	r3, #0
 8012214:	eba6 0807 	sub.w	r8, r6, r7
 8012218:	608b      	str	r3, [r1, #8]
 801221a:	f1b8 0f00 	cmp.w	r8, #0
 801221e:	dd9c      	ble.n	801215a <__sflush_r+0x1a>
 8012220:	6a21      	ldr	r1, [r4, #32]
 8012222:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012224:	4643      	mov	r3, r8
 8012226:	463a      	mov	r2, r7
 8012228:	4628      	mov	r0, r5
 801222a:	47b0      	blx	r6
 801222c:	2800      	cmp	r0, #0
 801222e:	dc06      	bgt.n	801223e <__sflush_r+0xfe>
 8012230:	89a3      	ldrh	r3, [r4, #12]
 8012232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012236:	81a3      	strh	r3, [r4, #12]
 8012238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801223c:	e78e      	b.n	801215c <__sflush_r+0x1c>
 801223e:	4407      	add	r7, r0
 8012240:	eba8 0800 	sub.w	r8, r8, r0
 8012244:	e7e9      	b.n	801221a <__sflush_r+0xda>
 8012246:	bf00      	nop
 8012248:	20400001 	.word	0x20400001

0801224c <_fflush_r>:
 801224c:	b538      	push	{r3, r4, r5, lr}
 801224e:	690b      	ldr	r3, [r1, #16]
 8012250:	4605      	mov	r5, r0
 8012252:	460c      	mov	r4, r1
 8012254:	b913      	cbnz	r3, 801225c <_fflush_r+0x10>
 8012256:	2500      	movs	r5, #0
 8012258:	4628      	mov	r0, r5
 801225a:	bd38      	pop	{r3, r4, r5, pc}
 801225c:	b118      	cbz	r0, 8012266 <_fflush_r+0x1a>
 801225e:	6983      	ldr	r3, [r0, #24]
 8012260:	b90b      	cbnz	r3, 8012266 <_fflush_r+0x1a>
 8012262:	f7ff f951 	bl	8011508 <__sinit>
 8012266:	4b14      	ldr	r3, [pc, #80]	; (80122b8 <_fflush_r+0x6c>)
 8012268:	429c      	cmp	r4, r3
 801226a:	d11b      	bne.n	80122a4 <_fflush_r+0x58>
 801226c:	686c      	ldr	r4, [r5, #4]
 801226e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d0ef      	beq.n	8012256 <_fflush_r+0xa>
 8012276:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012278:	07d0      	lsls	r0, r2, #31
 801227a:	d404      	bmi.n	8012286 <_fflush_r+0x3a>
 801227c:	0599      	lsls	r1, r3, #22
 801227e:	d402      	bmi.n	8012286 <_fflush_r+0x3a>
 8012280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012282:	f7ff f9df 	bl	8011644 <__retarget_lock_acquire_recursive>
 8012286:	4628      	mov	r0, r5
 8012288:	4621      	mov	r1, r4
 801228a:	f7ff ff59 	bl	8012140 <__sflush_r>
 801228e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012290:	07da      	lsls	r2, r3, #31
 8012292:	4605      	mov	r5, r0
 8012294:	d4e0      	bmi.n	8012258 <_fflush_r+0xc>
 8012296:	89a3      	ldrh	r3, [r4, #12]
 8012298:	059b      	lsls	r3, r3, #22
 801229a:	d4dd      	bmi.n	8012258 <_fflush_r+0xc>
 801229c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801229e:	f7ff f9d2 	bl	8011646 <__retarget_lock_release_recursive>
 80122a2:	e7d9      	b.n	8012258 <_fflush_r+0xc>
 80122a4:	4b05      	ldr	r3, [pc, #20]	; (80122bc <_fflush_r+0x70>)
 80122a6:	429c      	cmp	r4, r3
 80122a8:	d101      	bne.n	80122ae <_fflush_r+0x62>
 80122aa:	68ac      	ldr	r4, [r5, #8]
 80122ac:	e7df      	b.n	801226e <_fflush_r+0x22>
 80122ae:	4b04      	ldr	r3, [pc, #16]	; (80122c0 <_fflush_r+0x74>)
 80122b0:	429c      	cmp	r4, r3
 80122b2:	bf08      	it	eq
 80122b4:	68ec      	ldreq	r4, [r5, #12]
 80122b6:	e7da      	b.n	801226e <_fflush_r+0x22>
 80122b8:	08012ad0 	.word	0x08012ad0
 80122bc:	08012af0 	.word	0x08012af0
 80122c0:	08012ab0 	.word	0x08012ab0

080122c4 <_lseek_r>:
 80122c4:	b538      	push	{r3, r4, r5, lr}
 80122c6:	4d07      	ldr	r5, [pc, #28]	; (80122e4 <_lseek_r+0x20>)
 80122c8:	4604      	mov	r4, r0
 80122ca:	4608      	mov	r0, r1
 80122cc:	4611      	mov	r1, r2
 80122ce:	2200      	movs	r2, #0
 80122d0:	602a      	str	r2, [r5, #0]
 80122d2:	461a      	mov	r2, r3
 80122d4:	f7f1 fcfc 	bl	8003cd0 <_lseek>
 80122d8:	1c43      	adds	r3, r0, #1
 80122da:	d102      	bne.n	80122e2 <_lseek_r+0x1e>
 80122dc:	682b      	ldr	r3, [r5, #0]
 80122de:	b103      	cbz	r3, 80122e2 <_lseek_r+0x1e>
 80122e0:	6023      	str	r3, [r4, #0]
 80122e2:	bd38      	pop	{r3, r4, r5, pc}
 80122e4:	20003968 	.word	0x20003968

080122e8 <__swhatbuf_r>:
 80122e8:	b570      	push	{r4, r5, r6, lr}
 80122ea:	460e      	mov	r6, r1
 80122ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122f0:	2900      	cmp	r1, #0
 80122f2:	b096      	sub	sp, #88	; 0x58
 80122f4:	4614      	mov	r4, r2
 80122f6:	461d      	mov	r5, r3
 80122f8:	da08      	bge.n	801230c <__swhatbuf_r+0x24>
 80122fa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80122fe:	2200      	movs	r2, #0
 8012300:	602a      	str	r2, [r5, #0]
 8012302:	061a      	lsls	r2, r3, #24
 8012304:	d410      	bmi.n	8012328 <__swhatbuf_r+0x40>
 8012306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801230a:	e00e      	b.n	801232a <__swhatbuf_r+0x42>
 801230c:	466a      	mov	r2, sp
 801230e:	f000 f8bb 	bl	8012488 <_fstat_r>
 8012312:	2800      	cmp	r0, #0
 8012314:	dbf1      	blt.n	80122fa <__swhatbuf_r+0x12>
 8012316:	9a01      	ldr	r2, [sp, #4]
 8012318:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801231c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012320:	425a      	negs	r2, r3
 8012322:	415a      	adcs	r2, r3
 8012324:	602a      	str	r2, [r5, #0]
 8012326:	e7ee      	b.n	8012306 <__swhatbuf_r+0x1e>
 8012328:	2340      	movs	r3, #64	; 0x40
 801232a:	2000      	movs	r0, #0
 801232c:	6023      	str	r3, [r4, #0]
 801232e:	b016      	add	sp, #88	; 0x58
 8012330:	bd70      	pop	{r4, r5, r6, pc}
	...

08012334 <__smakebuf_r>:
 8012334:	898b      	ldrh	r3, [r1, #12]
 8012336:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012338:	079d      	lsls	r5, r3, #30
 801233a:	4606      	mov	r6, r0
 801233c:	460c      	mov	r4, r1
 801233e:	d507      	bpl.n	8012350 <__smakebuf_r+0x1c>
 8012340:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012344:	6023      	str	r3, [r4, #0]
 8012346:	6123      	str	r3, [r4, #16]
 8012348:	2301      	movs	r3, #1
 801234a:	6163      	str	r3, [r4, #20]
 801234c:	b002      	add	sp, #8
 801234e:	bd70      	pop	{r4, r5, r6, pc}
 8012350:	ab01      	add	r3, sp, #4
 8012352:	466a      	mov	r2, sp
 8012354:	f7ff ffc8 	bl	80122e8 <__swhatbuf_r>
 8012358:	9900      	ldr	r1, [sp, #0]
 801235a:	4605      	mov	r5, r0
 801235c:	4630      	mov	r0, r6
 801235e:	f7fe ffaf 	bl	80112c0 <_malloc_r>
 8012362:	b948      	cbnz	r0, 8012378 <__smakebuf_r+0x44>
 8012364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012368:	059a      	lsls	r2, r3, #22
 801236a:	d4ef      	bmi.n	801234c <__smakebuf_r+0x18>
 801236c:	f023 0303 	bic.w	r3, r3, #3
 8012370:	f043 0302 	orr.w	r3, r3, #2
 8012374:	81a3      	strh	r3, [r4, #12]
 8012376:	e7e3      	b.n	8012340 <__smakebuf_r+0xc>
 8012378:	4b0d      	ldr	r3, [pc, #52]	; (80123b0 <__smakebuf_r+0x7c>)
 801237a:	62b3      	str	r3, [r6, #40]	; 0x28
 801237c:	89a3      	ldrh	r3, [r4, #12]
 801237e:	6020      	str	r0, [r4, #0]
 8012380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012384:	81a3      	strh	r3, [r4, #12]
 8012386:	9b00      	ldr	r3, [sp, #0]
 8012388:	6163      	str	r3, [r4, #20]
 801238a:	9b01      	ldr	r3, [sp, #4]
 801238c:	6120      	str	r0, [r4, #16]
 801238e:	b15b      	cbz	r3, 80123a8 <__smakebuf_r+0x74>
 8012390:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012394:	4630      	mov	r0, r6
 8012396:	f000 f889 	bl	80124ac <_isatty_r>
 801239a:	b128      	cbz	r0, 80123a8 <__smakebuf_r+0x74>
 801239c:	89a3      	ldrh	r3, [r4, #12]
 801239e:	f023 0303 	bic.w	r3, r3, #3
 80123a2:	f043 0301 	orr.w	r3, r3, #1
 80123a6:	81a3      	strh	r3, [r4, #12]
 80123a8:	89a0      	ldrh	r0, [r4, #12]
 80123aa:	4305      	orrs	r5, r0
 80123ac:	81a5      	strh	r5, [r4, #12]
 80123ae:	e7cd      	b.n	801234c <__smakebuf_r+0x18>
 80123b0:	080114a1 	.word	0x080114a1

080123b4 <memcpy>:
 80123b4:	440a      	add	r2, r1
 80123b6:	4291      	cmp	r1, r2
 80123b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80123bc:	d100      	bne.n	80123c0 <memcpy+0xc>
 80123be:	4770      	bx	lr
 80123c0:	b510      	push	{r4, lr}
 80123c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80123c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80123ca:	4291      	cmp	r1, r2
 80123cc:	d1f9      	bne.n	80123c2 <memcpy+0xe>
 80123ce:	bd10      	pop	{r4, pc}

080123d0 <memmove>:
 80123d0:	4288      	cmp	r0, r1
 80123d2:	b510      	push	{r4, lr}
 80123d4:	eb01 0402 	add.w	r4, r1, r2
 80123d8:	d902      	bls.n	80123e0 <memmove+0x10>
 80123da:	4284      	cmp	r4, r0
 80123dc:	4623      	mov	r3, r4
 80123de:	d807      	bhi.n	80123f0 <memmove+0x20>
 80123e0:	1e43      	subs	r3, r0, #1
 80123e2:	42a1      	cmp	r1, r4
 80123e4:	d008      	beq.n	80123f8 <memmove+0x28>
 80123e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80123ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80123ee:	e7f8      	b.n	80123e2 <memmove+0x12>
 80123f0:	4402      	add	r2, r0
 80123f2:	4601      	mov	r1, r0
 80123f4:	428a      	cmp	r2, r1
 80123f6:	d100      	bne.n	80123fa <memmove+0x2a>
 80123f8:	bd10      	pop	{r4, pc}
 80123fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80123fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012402:	e7f7      	b.n	80123f4 <memmove+0x24>

08012404 <_realloc_r>:
 8012404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012408:	4680      	mov	r8, r0
 801240a:	4614      	mov	r4, r2
 801240c:	460e      	mov	r6, r1
 801240e:	b921      	cbnz	r1, 801241a <_realloc_r+0x16>
 8012410:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012414:	4611      	mov	r1, r2
 8012416:	f7fe bf53 	b.w	80112c0 <_malloc_r>
 801241a:	b92a      	cbnz	r2, 8012428 <_realloc_r+0x24>
 801241c:	f7fe fee4 	bl	80111e8 <_free_r>
 8012420:	4625      	mov	r5, r4
 8012422:	4628      	mov	r0, r5
 8012424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012428:	f000 f850 	bl	80124cc <_malloc_usable_size_r>
 801242c:	4284      	cmp	r4, r0
 801242e:	4607      	mov	r7, r0
 8012430:	d802      	bhi.n	8012438 <_realloc_r+0x34>
 8012432:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012436:	d812      	bhi.n	801245e <_realloc_r+0x5a>
 8012438:	4621      	mov	r1, r4
 801243a:	4640      	mov	r0, r8
 801243c:	f7fe ff40 	bl	80112c0 <_malloc_r>
 8012440:	4605      	mov	r5, r0
 8012442:	2800      	cmp	r0, #0
 8012444:	d0ed      	beq.n	8012422 <_realloc_r+0x1e>
 8012446:	42bc      	cmp	r4, r7
 8012448:	4622      	mov	r2, r4
 801244a:	4631      	mov	r1, r6
 801244c:	bf28      	it	cs
 801244e:	463a      	movcs	r2, r7
 8012450:	f7ff ffb0 	bl	80123b4 <memcpy>
 8012454:	4631      	mov	r1, r6
 8012456:	4640      	mov	r0, r8
 8012458:	f7fe fec6 	bl	80111e8 <_free_r>
 801245c:	e7e1      	b.n	8012422 <_realloc_r+0x1e>
 801245e:	4635      	mov	r5, r6
 8012460:	e7df      	b.n	8012422 <_realloc_r+0x1e>
	...

08012464 <_read_r>:
 8012464:	b538      	push	{r3, r4, r5, lr}
 8012466:	4d07      	ldr	r5, [pc, #28]	; (8012484 <_read_r+0x20>)
 8012468:	4604      	mov	r4, r0
 801246a:	4608      	mov	r0, r1
 801246c:	4611      	mov	r1, r2
 801246e:	2200      	movs	r2, #0
 8012470:	602a      	str	r2, [r5, #0]
 8012472:	461a      	mov	r2, r3
 8012474:	f7f1 fbcc 	bl	8003c10 <_read>
 8012478:	1c43      	adds	r3, r0, #1
 801247a:	d102      	bne.n	8012482 <_read_r+0x1e>
 801247c:	682b      	ldr	r3, [r5, #0]
 801247e:	b103      	cbz	r3, 8012482 <_read_r+0x1e>
 8012480:	6023      	str	r3, [r4, #0]
 8012482:	bd38      	pop	{r3, r4, r5, pc}
 8012484:	20003968 	.word	0x20003968

08012488 <_fstat_r>:
 8012488:	b538      	push	{r3, r4, r5, lr}
 801248a:	4d07      	ldr	r5, [pc, #28]	; (80124a8 <_fstat_r+0x20>)
 801248c:	2300      	movs	r3, #0
 801248e:	4604      	mov	r4, r0
 8012490:	4608      	mov	r0, r1
 8012492:	4611      	mov	r1, r2
 8012494:	602b      	str	r3, [r5, #0]
 8012496:	f7f1 fc00 	bl	8003c9a <_fstat>
 801249a:	1c43      	adds	r3, r0, #1
 801249c:	d102      	bne.n	80124a4 <_fstat_r+0x1c>
 801249e:	682b      	ldr	r3, [r5, #0]
 80124a0:	b103      	cbz	r3, 80124a4 <_fstat_r+0x1c>
 80124a2:	6023      	str	r3, [r4, #0]
 80124a4:	bd38      	pop	{r3, r4, r5, pc}
 80124a6:	bf00      	nop
 80124a8:	20003968 	.word	0x20003968

080124ac <_isatty_r>:
 80124ac:	b538      	push	{r3, r4, r5, lr}
 80124ae:	4d06      	ldr	r5, [pc, #24]	; (80124c8 <_isatty_r+0x1c>)
 80124b0:	2300      	movs	r3, #0
 80124b2:	4604      	mov	r4, r0
 80124b4:	4608      	mov	r0, r1
 80124b6:	602b      	str	r3, [r5, #0]
 80124b8:	f7f1 fbff 	bl	8003cba <_isatty>
 80124bc:	1c43      	adds	r3, r0, #1
 80124be:	d102      	bne.n	80124c6 <_isatty_r+0x1a>
 80124c0:	682b      	ldr	r3, [r5, #0]
 80124c2:	b103      	cbz	r3, 80124c6 <_isatty_r+0x1a>
 80124c4:	6023      	str	r3, [r4, #0]
 80124c6:	bd38      	pop	{r3, r4, r5, pc}
 80124c8:	20003968 	.word	0x20003968

080124cc <_malloc_usable_size_r>:
 80124cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80124d0:	1f18      	subs	r0, r3, #4
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	bfbc      	itt	lt
 80124d6:	580b      	ldrlt	r3, [r1, r0]
 80124d8:	18c0      	addlt	r0, r0, r3
 80124da:	4770      	bx	lr

080124dc <_init>:
 80124dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124de:	bf00      	nop
 80124e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124e2:	bc08      	pop	{r3}
 80124e4:	469e      	mov	lr, r3
 80124e6:	4770      	bx	lr

080124e8 <_fini>:
 80124e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124ea:	bf00      	nop
 80124ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124ee:	bc08      	pop	{r3}
 80124f0:	469e      	mov	lr, r3
 80124f2:	4770      	bx	lr
