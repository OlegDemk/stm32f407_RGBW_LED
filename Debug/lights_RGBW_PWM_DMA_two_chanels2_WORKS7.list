
lights_RGBW_PWM_DMA_two_chanels2_WORKS7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011af0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e4  08011c80  08011c80  00021c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012264  08012264  000300c4  2**0
                  CONTENTS
  4 .ARM          00000008  08012264  08012264  00022264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801226c  0801226c  000300c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801226c  0801226c  0002226c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012270  08012270  00022270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08012274  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300c4  2**0
                  CONTENTS
 10 .bss          00003534  200000c4  200000c4  000300c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200035f8  200035f8  000300c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000226ae  00000000  00000000  000300f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d58  00000000  00000000  000527a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ae8  00000000  00000000  00057500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018f0  00000000  00000000  00058fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027721  00000000  00000000  0005a8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000244c7  00000000  00000000  00081ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5826  00000000  00000000  000a64c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017bce6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000075b8  00000000  00000000  0017bd38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c4 	.word	0x200000c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011c68 	.word	0x08011c68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c8 	.word	0x200000c8
 80001cc:	08011c68 	.word	0x08011c68

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800089c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008a0:	f000 b974 	b.w	8000b8c <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468e      	mov	lr, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d14d      	bne.n	8000966 <__udivmoddi4+0xaa>
 80008ca:	428a      	cmp	r2, r1
 80008cc:	4694      	mov	ip, r2
 80008ce:	d969      	bls.n	80009a4 <__udivmoddi4+0xe8>
 80008d0:	fab2 f282 	clz	r2, r2
 80008d4:	b152      	cbz	r2, 80008ec <__udivmoddi4+0x30>
 80008d6:	fa01 f302 	lsl.w	r3, r1, r2
 80008da:	f1c2 0120 	rsb	r1, r2, #32
 80008de:	fa20 f101 	lsr.w	r1, r0, r1
 80008e2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008e6:	ea41 0e03 	orr.w	lr, r1, r3
 80008ea:	4094      	lsls	r4, r2
 80008ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f0:	0c21      	lsrs	r1, r4, #16
 80008f2:	fbbe f6f8 	udiv	r6, lr, r8
 80008f6:	fa1f f78c 	uxth.w	r7, ip
 80008fa:	fb08 e316 	mls	r3, r8, r6, lr
 80008fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000902:	fb06 f107 	mul.w	r1, r6, r7
 8000906:	4299      	cmp	r1, r3
 8000908:	d90a      	bls.n	8000920 <__udivmoddi4+0x64>
 800090a:	eb1c 0303 	adds.w	r3, ip, r3
 800090e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000912:	f080 811f 	bcs.w	8000b54 <__udivmoddi4+0x298>
 8000916:	4299      	cmp	r1, r3
 8000918:	f240 811c 	bls.w	8000b54 <__udivmoddi4+0x298>
 800091c:	3e02      	subs	r6, #2
 800091e:	4463      	add	r3, ip
 8000920:	1a5b      	subs	r3, r3, r1
 8000922:	b2a4      	uxth	r4, r4
 8000924:	fbb3 f0f8 	udiv	r0, r3, r8
 8000928:	fb08 3310 	mls	r3, r8, r0, r3
 800092c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000930:	fb00 f707 	mul.w	r7, r0, r7
 8000934:	42a7      	cmp	r7, r4
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x92>
 8000938:	eb1c 0404 	adds.w	r4, ip, r4
 800093c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000940:	f080 810a 	bcs.w	8000b58 <__udivmoddi4+0x29c>
 8000944:	42a7      	cmp	r7, r4
 8000946:	f240 8107 	bls.w	8000b58 <__udivmoddi4+0x29c>
 800094a:	4464      	add	r4, ip
 800094c:	3802      	subs	r0, #2
 800094e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000952:	1be4      	subs	r4, r4, r7
 8000954:	2600      	movs	r6, #0
 8000956:	b11d      	cbz	r5, 8000960 <__udivmoddi4+0xa4>
 8000958:	40d4      	lsrs	r4, r2
 800095a:	2300      	movs	r3, #0
 800095c:	e9c5 4300 	strd	r4, r3, [r5]
 8000960:	4631      	mov	r1, r6
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000966:	428b      	cmp	r3, r1
 8000968:	d909      	bls.n	800097e <__udivmoddi4+0xc2>
 800096a:	2d00      	cmp	r5, #0
 800096c:	f000 80ef 	beq.w	8000b4e <__udivmoddi4+0x292>
 8000970:	2600      	movs	r6, #0
 8000972:	e9c5 0100 	strd	r0, r1, [r5]
 8000976:	4630      	mov	r0, r6
 8000978:	4631      	mov	r1, r6
 800097a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800097e:	fab3 f683 	clz	r6, r3
 8000982:	2e00      	cmp	r6, #0
 8000984:	d14a      	bne.n	8000a1c <__udivmoddi4+0x160>
 8000986:	428b      	cmp	r3, r1
 8000988:	d302      	bcc.n	8000990 <__udivmoddi4+0xd4>
 800098a:	4282      	cmp	r2, r0
 800098c:	f200 80f9 	bhi.w	8000b82 <__udivmoddi4+0x2c6>
 8000990:	1a84      	subs	r4, r0, r2
 8000992:	eb61 0303 	sbc.w	r3, r1, r3
 8000996:	2001      	movs	r0, #1
 8000998:	469e      	mov	lr, r3
 800099a:	2d00      	cmp	r5, #0
 800099c:	d0e0      	beq.n	8000960 <__udivmoddi4+0xa4>
 800099e:	e9c5 4e00 	strd	r4, lr, [r5]
 80009a2:	e7dd      	b.n	8000960 <__udivmoddi4+0xa4>
 80009a4:	b902      	cbnz	r2, 80009a8 <__udivmoddi4+0xec>
 80009a6:	deff      	udf	#255	; 0xff
 80009a8:	fab2 f282 	clz	r2, r2
 80009ac:	2a00      	cmp	r2, #0
 80009ae:	f040 8092 	bne.w	8000ad6 <__udivmoddi4+0x21a>
 80009b2:	eba1 010c 	sub.w	r1, r1, ip
 80009b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ba:	fa1f fe8c 	uxth.w	lr, ip
 80009be:	2601      	movs	r6, #1
 80009c0:	0c20      	lsrs	r0, r4, #16
 80009c2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009c6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ce:	fb0e f003 	mul.w	r0, lr, r3
 80009d2:	4288      	cmp	r0, r1
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x12c>
 80009d6:	eb1c 0101 	adds.w	r1, ip, r1
 80009da:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x12a>
 80009e0:	4288      	cmp	r0, r1
 80009e2:	f200 80cb 	bhi.w	8000b7c <__udivmoddi4+0x2c0>
 80009e6:	4643      	mov	r3, r8
 80009e8:	1a09      	subs	r1, r1, r0
 80009ea:	b2a4      	uxth	r4, r4
 80009ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f0:	fb07 1110 	mls	r1, r7, r0, r1
 80009f4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009f8:	fb0e fe00 	mul.w	lr, lr, r0
 80009fc:	45a6      	cmp	lr, r4
 80009fe:	d908      	bls.n	8000a12 <__udivmoddi4+0x156>
 8000a00:	eb1c 0404 	adds.w	r4, ip, r4
 8000a04:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000a08:	d202      	bcs.n	8000a10 <__udivmoddi4+0x154>
 8000a0a:	45a6      	cmp	lr, r4
 8000a0c:	f200 80bb 	bhi.w	8000b86 <__udivmoddi4+0x2ca>
 8000a10:	4608      	mov	r0, r1
 8000a12:	eba4 040e 	sub.w	r4, r4, lr
 8000a16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a1a:	e79c      	b.n	8000956 <__udivmoddi4+0x9a>
 8000a1c:	f1c6 0720 	rsb	r7, r6, #32
 8000a20:	40b3      	lsls	r3, r6
 8000a22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a32:	431c      	orrs	r4, r3
 8000a34:	40f9      	lsrs	r1, r7
 8000a36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a42:	0c20      	lsrs	r0, r4, #16
 8000a44:	fa1f fe8c 	uxth.w	lr, ip
 8000a48:	fb09 1118 	mls	r1, r9, r8, r1
 8000a4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a50:	fb08 f00e 	mul.w	r0, r8, lr
 8000a54:	4288      	cmp	r0, r1
 8000a56:	fa02 f206 	lsl.w	r2, r2, r6
 8000a5a:	d90b      	bls.n	8000a74 <__udivmoddi4+0x1b8>
 8000a5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a60:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000a64:	f080 8088 	bcs.w	8000b78 <__udivmoddi4+0x2bc>
 8000a68:	4288      	cmp	r0, r1
 8000a6a:	f240 8085 	bls.w	8000b78 <__udivmoddi4+0x2bc>
 8000a6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a72:	4461      	add	r1, ip
 8000a74:	1a09      	subs	r1, r1, r0
 8000a76:	b2a4      	uxth	r4, r4
 8000a78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a88:	458e      	cmp	lr, r1
 8000a8a:	d908      	bls.n	8000a9e <__udivmoddi4+0x1e2>
 8000a8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a90:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000a94:	d26c      	bcs.n	8000b70 <__udivmoddi4+0x2b4>
 8000a96:	458e      	cmp	lr, r1
 8000a98:	d96a      	bls.n	8000b70 <__udivmoddi4+0x2b4>
 8000a9a:	3802      	subs	r0, #2
 8000a9c:	4461      	add	r1, ip
 8000a9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aa2:	fba0 9402 	umull	r9, r4, r0, r2
 8000aa6:	eba1 010e 	sub.w	r1, r1, lr
 8000aaa:	42a1      	cmp	r1, r4
 8000aac:	46c8      	mov	r8, r9
 8000aae:	46a6      	mov	lr, r4
 8000ab0:	d356      	bcc.n	8000b60 <__udivmoddi4+0x2a4>
 8000ab2:	d053      	beq.n	8000b5c <__udivmoddi4+0x2a0>
 8000ab4:	b15d      	cbz	r5, 8000ace <__udivmoddi4+0x212>
 8000ab6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aba:	eb61 010e 	sbc.w	r1, r1, lr
 8000abe:	fa01 f707 	lsl.w	r7, r1, r7
 8000ac2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ac6:	40f1      	lsrs	r1, r6
 8000ac8:	431f      	orrs	r7, r3
 8000aca:	e9c5 7100 	strd	r7, r1, [r5]
 8000ace:	2600      	movs	r6, #0
 8000ad0:	4631      	mov	r1, r6
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	40d8      	lsrs	r0, r3
 8000adc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ae4:	4091      	lsls	r1, r2
 8000ae6:	4301      	orrs	r1, r0
 8000ae8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aec:	fa1f fe8c 	uxth.w	lr, ip
 8000af0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000af4:	fb07 3610 	mls	r6, r7, r0, r3
 8000af8:	0c0b      	lsrs	r3, r1, #16
 8000afa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000afe:	fb00 f60e 	mul.w	r6, r0, lr
 8000b02:	429e      	cmp	r6, r3
 8000b04:	fa04 f402 	lsl.w	r4, r4, r2
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x260>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000b12:	d22f      	bcs.n	8000b74 <__udivmoddi4+0x2b8>
 8000b14:	429e      	cmp	r6, r3
 8000b16:	d92d      	bls.n	8000b74 <__udivmoddi4+0x2b8>
 8000b18:	3802      	subs	r0, #2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	1b9b      	subs	r3, r3, r6
 8000b1e:	b289      	uxth	r1, r1
 8000b20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b24:	fb07 3316 	mls	r3, r7, r6, r3
 8000b28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b30:	428b      	cmp	r3, r1
 8000b32:	d908      	bls.n	8000b46 <__udivmoddi4+0x28a>
 8000b34:	eb1c 0101 	adds.w	r1, ip, r1
 8000b38:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000b3c:	d216      	bcs.n	8000b6c <__udivmoddi4+0x2b0>
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d914      	bls.n	8000b6c <__udivmoddi4+0x2b0>
 8000b42:	3e02      	subs	r6, #2
 8000b44:	4461      	add	r1, ip
 8000b46:	1ac9      	subs	r1, r1, r3
 8000b48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b4c:	e738      	b.n	80009c0 <__udivmoddi4+0x104>
 8000b4e:	462e      	mov	r6, r5
 8000b50:	4628      	mov	r0, r5
 8000b52:	e705      	b.n	8000960 <__udivmoddi4+0xa4>
 8000b54:	4606      	mov	r6, r0
 8000b56:	e6e3      	b.n	8000920 <__udivmoddi4+0x64>
 8000b58:	4618      	mov	r0, r3
 8000b5a:	e6f8      	b.n	800094e <__udivmoddi4+0x92>
 8000b5c:	454b      	cmp	r3, r9
 8000b5e:	d2a9      	bcs.n	8000ab4 <__udivmoddi4+0x1f8>
 8000b60:	ebb9 0802 	subs.w	r8, r9, r2
 8000b64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b68:	3801      	subs	r0, #1
 8000b6a:	e7a3      	b.n	8000ab4 <__udivmoddi4+0x1f8>
 8000b6c:	4646      	mov	r6, r8
 8000b6e:	e7ea      	b.n	8000b46 <__udivmoddi4+0x28a>
 8000b70:	4620      	mov	r0, r4
 8000b72:	e794      	b.n	8000a9e <__udivmoddi4+0x1e2>
 8000b74:	4640      	mov	r0, r8
 8000b76:	e7d1      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b78:	46d0      	mov	r8, sl
 8000b7a:	e77b      	b.n	8000a74 <__udivmoddi4+0x1b8>
 8000b7c:	3b02      	subs	r3, #2
 8000b7e:	4461      	add	r1, ip
 8000b80:	e732      	b.n	80009e8 <__udivmoddi4+0x12c>
 8000b82:	4630      	mov	r0, r6
 8000b84:	e709      	b.n	800099a <__udivmoddi4+0xde>
 8000b86:	4464      	add	r4, ip
 8000b88:	3802      	subs	r0, #2
 8000b8a:	e742      	b.n	8000a12 <__udivmoddi4+0x156>

08000b8c <__aeabi_idiv0>:
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <stop_light_turn_on_left>:
#define RIGHT_5_OFF		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3)


// ----------------------------------------------------------------------------------------
void stop_light_turn_on_left(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	LEFT_1_ON; 		LEFT_2_ON;		LEFT_3_ON;		LEFT_4_ON;		LEFT_5_ON;
 8000b94:	2100      	movs	r1, #0
 8000b96:	480a      	ldr	r0, [pc, #40]	; (8000bc0 <stop_light_turn_on_left+0x30>)
 8000b98:	f007 f998 	bl	8007ecc <HAL_TIM_PWM_Start>
 8000b9c:	2104      	movs	r1, #4
 8000b9e:	4808      	ldr	r0, [pc, #32]	; (8000bc0 <stop_light_turn_on_left+0x30>)
 8000ba0:	f007 f994 	bl	8007ecc <HAL_TIM_PWM_Start>
 8000ba4:	2108      	movs	r1, #8
 8000ba6:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <stop_light_turn_on_left+0x30>)
 8000ba8:	f007 f990 	bl	8007ecc <HAL_TIM_PWM_Start>
 8000bac:	210c      	movs	r1, #12
 8000bae:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <stop_light_turn_on_left+0x30>)
 8000bb0:	f007 f98c 	bl	8007ecc <HAL_TIM_PWM_Start>
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <stop_light_turn_on_left+0x34>)
 8000bb8:	f007 f988 	bl	8007ecc <HAL_TIM_PWM_Start>
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20001634 	.word	0x20001634
 8000bc4:	2000167c 	.word	0x2000167c

08000bc8 <stop_light_turn_on_right>:

// ----------------------------------------------------------------------------------------
void stop_light_turn_on_right(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	RIGHT_1_ON;		RIGHT_2_ON;		RIGHT_3_ON;		RIGHT_4_ON;		RIGHT_5_ON;
 8000bcc:	2104      	movs	r1, #4
 8000bce:	480a      	ldr	r0, [pc, #40]	; (8000bf8 <stop_light_turn_on_right+0x30>)
 8000bd0:	f007 f97c 	bl	8007ecc <HAL_TIM_PWM_Start>
 8000bd4:	2108      	movs	r1, #8
 8000bd6:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <stop_light_turn_on_right+0x30>)
 8000bd8:	f007 f978 	bl	8007ecc <HAL_TIM_PWM_Start>
 8000bdc:	210c      	movs	r1, #12
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <stop_light_turn_on_right+0x30>)
 8000be0:	f007 f974 	bl	8007ecc <HAL_TIM_PWM_Start>
 8000be4:	2104      	movs	r1, #4
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <stop_light_turn_on_right+0x34>)
 8000be8:	f007 f970 	bl	8007ecc <HAL_TIM_PWM_Start>
 8000bec:	2108      	movs	r1, #8
 8000bee:	4803      	ldr	r0, [pc, #12]	; (8000bfc <stop_light_turn_on_right+0x34>)
 8000bf0:	f007 f96c 	bl	8007ecc <HAL_TIM_PWM_Start>
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	2000167c 	.word	0x2000167c
 8000bfc:	200016c4 	.word	0x200016c4

08000c00 <stop_light_turn_off_left>:

// ----------------------------------------------------------------------------------------
void stop_light_turn_off_left(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	LEFT_1_OFF;		LEFT_2_OFF;		LEFT_3_OFF;		LEFT_4_OFF;		LEFT_5_OFF;
 8000c04:	2100      	movs	r1, #0
 8000c06:	480a      	ldr	r0, [pc, #40]	; (8000c30 <stop_light_turn_off_left+0x30>)
 8000c08:	f007 fa28 	bl	800805c <HAL_TIM_PWM_Stop>
 8000c0c:	2104      	movs	r1, #4
 8000c0e:	4808      	ldr	r0, [pc, #32]	; (8000c30 <stop_light_turn_off_left+0x30>)
 8000c10:	f007 fa24 	bl	800805c <HAL_TIM_PWM_Stop>
 8000c14:	2108      	movs	r1, #8
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <stop_light_turn_off_left+0x30>)
 8000c18:	f007 fa20 	bl	800805c <HAL_TIM_PWM_Stop>
 8000c1c:	210c      	movs	r1, #12
 8000c1e:	4804      	ldr	r0, [pc, #16]	; (8000c30 <stop_light_turn_off_left+0x30>)
 8000c20:	f007 fa1c 	bl	800805c <HAL_TIM_PWM_Stop>
 8000c24:	2100      	movs	r1, #0
 8000c26:	4803      	ldr	r0, [pc, #12]	; (8000c34 <stop_light_turn_off_left+0x34>)
 8000c28:	f007 fa18 	bl	800805c <HAL_TIM_PWM_Stop>
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20001634 	.word	0x20001634
 8000c34:	2000167c 	.word	0x2000167c

08000c38 <stop_light_turn_off_right>:

// ----------------------------------------------------------------------------------------
void stop_light_turn_off_right(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	RIGHT_1_OFF;	RIGHT_2_OFF;	RIGHT_3_OFF;	RIGHT_4_OFF;	RIGHT_5_OFF;
 8000c3c:	2104      	movs	r1, #4
 8000c3e:	480a      	ldr	r0, [pc, #40]	; (8000c68 <stop_light_turn_off_right+0x30>)
 8000c40:	f007 fa0c 	bl	800805c <HAL_TIM_PWM_Stop>
 8000c44:	2108      	movs	r1, #8
 8000c46:	4808      	ldr	r0, [pc, #32]	; (8000c68 <stop_light_turn_off_right+0x30>)
 8000c48:	f007 fa08 	bl	800805c <HAL_TIM_PWM_Stop>
 8000c4c:	210c      	movs	r1, #12
 8000c4e:	4806      	ldr	r0, [pc, #24]	; (8000c68 <stop_light_turn_off_right+0x30>)
 8000c50:	f007 fa04 	bl	800805c <HAL_TIM_PWM_Stop>
 8000c54:	2104      	movs	r1, #4
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <stop_light_turn_off_right+0x34>)
 8000c58:	f007 fa00 	bl	800805c <HAL_TIM_PWM_Stop>
 8000c5c:	2108      	movs	r1, #8
 8000c5e:	4803      	ldr	r0, [pc, #12]	; (8000c6c <stop_light_turn_off_right+0x34>)
 8000c60:	f007 f9fc 	bl	800805c <HAL_TIM_PWM_Stop>
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	2000167c 	.word	0x2000167c
 8000c6c:	200016c4 	.word	0x200016c4

08000c70 <set_duty_cycle_stop_left_1>:
	RIGHT_1_ON;
	HAL_Delay(delay);
}
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_left_1(int duty_cycle)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_cycle);
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <set_duty_cycle_stop_left_1+0x1c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	2000167c 	.word	0x2000167c

08000c90 <set_duty_cycle_stop_left_2>:
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_left_2(int duty_cycle)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, duty_cycle);
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <set_duty_cycle_stop_left_2+0x1c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	20001634 	.word	0x20001634

08000cb0 <set_duty_cycle_stop_left_3>:
// ---------------------------------------------------------------------------------------
void set_duty_cycle_stop_left_3(int duty_cycle)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle);
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <set_duty_cycle_stop_left_3+0x1c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	20001634 	.word	0x20001634

08000cd0 <set_duty_cycle_stop_left_4>:
// ---------------------------------------------------------------------------------------
void set_duty_cycle_stop_left_4(int duty_cycle)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty_cycle);
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <set_duty_cycle_stop_left_4+0x1c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	20001634 	.word	0x20001634

08000cf0 <set_duty_cycle_stop_left_5>:
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_left_5(int duty_cycle)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle);
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <set_duty_cycle_stop_left_5+0x1c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	20001634 	.word	0x20001634

08000d10 <set_duty_cycle_stop_ritht_1>:
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_ritht_1(int duty_cycle)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, duty_cycle);
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <set_duty_cycle_stop_ritht_1+0x1c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	200016c4 	.word	0x200016c4

08000d30 <set_duty_cycle_stop_ritht_2>:
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_ritht_2(int duty_cycle)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, duty_cycle);
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <set_duty_cycle_stop_ritht_2+0x1c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	200016c4 	.word	0x200016c4

08000d50 <set_duty_cycle_stop_ritht_3>:
// ---------------------------------------------------------------------------------------
void set_duty_cycle_stop_ritht_3(int duty_cycle)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, duty_cycle);
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <set_duty_cycle_stop_ritht_3+0x1c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	2000167c 	.word	0x2000167c

08000d70 <set_duty_cycle_stop_ritht_4>:
// ---------------------------------------------------------------------------------------
void set_duty_cycle_stop_ritht_4(int duty_cycle)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty_cycle);
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <set_duty_cycle_stop_ritht_4+0x1c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	2000167c 	.word	0x2000167c

08000d90 <set_duty_cycle_stop_ritht_5>:
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_ritht_5(int duty_cycle)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycle);
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <set_duty_cycle_stop_ritht_5+0x1c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	2000167c 	.word	0x2000167c

08000db0 <stop_light_all_turn_off>:
	stop_light_turn_on_right();
}

// ----------------------------------------------------------------------------------------
void stop_light_all_turn_off(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0

	stop_light_turn_off_left();
 8000db4:	f7ff ff24 	bl	8000c00 <stop_light_turn_off_left>
	stop_light_turn_off_right();
 8000db8:	f7ff ff3e 	bl	8000c38 <stop_light_turn_off_right>
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <test_from_midle_to_corner>:
		}
	}
}
// ----------------------------------------------------------------------------------------
void test_from_midle_to_corner(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
	int delay = 1;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	603b      	str	r3, [r7, #0]
	int duty_cycle = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]

	  // Turn on RED LEDs
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4866      	ldr	r0, [pc, #408]	; (8000f6c <test_from_midle_to_corner+0x1ac>)
 8000dd2:	f007 f87b 	bl	8007ecc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000dd6:	2104      	movs	r1, #4
 8000dd8:	4864      	ldr	r0, [pc, #400]	; (8000f6c <test_from_midle_to_corner+0x1ac>)
 8000dda:	f007 f877 	bl	8007ecc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000dde:	2108      	movs	r1, #8
 8000de0:	4862      	ldr	r0, [pc, #392]	; (8000f6c <test_from_midle_to_corner+0x1ac>)
 8000de2:	f007 f873 	bl	8007ecc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000de6:	210c      	movs	r1, #12
 8000de8:	4860      	ldr	r0, [pc, #384]	; (8000f6c <test_from_midle_to_corner+0x1ac>)
 8000dea:	f007 f86f 	bl	8007ecc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000dee:	2100      	movs	r1, #0
 8000df0:	485f      	ldr	r0, [pc, #380]	; (8000f70 <test_from_midle_to_corner+0x1b0>)
 8000df2:	f007 f86b 	bl	8007ecc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000df6:	2104      	movs	r1, #4
 8000df8:	485d      	ldr	r0, [pc, #372]	; (8000f70 <test_from_midle_to_corner+0x1b0>)
 8000dfa:	f007 f867 	bl	8007ecc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000dfe:	2108      	movs	r1, #8
 8000e00:	485b      	ldr	r0, [pc, #364]	; (8000f70 <test_from_midle_to_corner+0x1b0>)
 8000e02:	f007 f863 	bl	8007ecc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000e06:	210c      	movs	r1, #12
 8000e08:	4859      	ldr	r0, [pc, #356]	; (8000f70 <test_from_midle_to_corner+0x1b0>)
 8000e0a:	f007 f85f 	bl	8007ecc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000e0e:	2104      	movs	r1, #4
 8000e10:	4858      	ldr	r0, [pc, #352]	; (8000f74 <test_from_midle_to_corner+0x1b4>)
 8000e12:	f007 f85b 	bl	8007ecc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000e16:	2108      	movs	r1, #8
 8000e18:	4856      	ldr	r0, [pc, #344]	; (8000f74 <test_from_midle_to_corner+0x1b4>)
 8000e1a:	f007 f857 	bl	8007ecc <HAL_TIM_PWM_Start>

	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	e010      	b.n	8000e46 <test_from_midle_to_corner+0x86>
	{
		set_duty_cycle_stop_left_1(duty_cycle);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ff23 	bl	8000c70 <set_duty_cycle_stop_left_1>
		set_duty_cycle_stop_ritht_1(duty_cycle);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ff70 	bl	8000d10 <set_duty_cycle_stop_ritht_1>

		stop_light_turn_on_left();
 8000e30:	f7ff feae 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000e34:	f7ff fec8 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f003 fc96 	bl	800476c <HAL_Delay>
	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3301      	adds	r3, #1
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b64      	cmp	r3, #100	; 0x64
 8000e4a:	ddeb      	ble.n	8000e24 <test_from_midle_to_corner+0x64>
	}

	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	e010      	b.n	8000e74 <test_from_midle_to_corner+0xb4>
	{
		set_duty_cycle_stop_left_2(duty_cycle);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ff1c 	bl	8000c90 <set_duty_cycle_stop_left_2>
		set_duty_cycle_stop_ritht_2(duty_cycle);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff ff69 	bl	8000d30 <set_duty_cycle_stop_ritht_2>

		stop_light_turn_on_left();
 8000e5e:	f7ff fe97 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000e62:	f7ff feb1 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f003 fc7f 	bl	800476c <HAL_Delay>
	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3301      	adds	r3, #1
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b64      	cmp	r3, #100	; 0x64
 8000e78:	ddeb      	ble.n	8000e52 <test_from_midle_to_corner+0x92>
	}

	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	e010      	b.n	8000ea2 <test_from_midle_to_corner+0xe2>
	{
		set_duty_cycle_stop_left_3(duty_cycle);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff ff15 	bl	8000cb0 <set_duty_cycle_stop_left_3>
		set_duty_cycle_stop_ritht_3(duty_cycle);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ff62 	bl	8000d50 <set_duty_cycle_stop_ritht_3>

		stop_light_turn_on_left();
 8000e8c:	f7ff fe80 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000e90:	f7ff fe9a 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f003 fc68 	bl	800476c <HAL_Delay>
	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b64      	cmp	r3, #100	; 0x64
 8000ea6:	ddeb      	ble.n	8000e80 <test_from_midle_to_corner+0xc0>
	}

	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	e010      	b.n	8000ed0 <test_from_midle_to_corner+0x110>
	{
		set_duty_cycle_stop_left_4(duty_cycle);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ff0e 	bl	8000cd0 <set_duty_cycle_stop_left_4>
		set_duty_cycle_stop_ritht_4(duty_cycle);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff5b 	bl	8000d70 <set_duty_cycle_stop_ritht_4>

		stop_light_turn_on_left();
 8000eba:	f7ff fe69 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000ebe:	f7ff fe83 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f003 fc51 	bl	800476c <HAL_Delay>
	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b64      	cmp	r3, #100	; 0x64
 8000ed4:	ddeb      	ble.n	8000eae <test_from_midle_to_corner+0xee>
	}

	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	e010      	b.n	8000efe <test_from_midle_to_corner+0x13e>
	{
		set_duty_cycle_stop_left_5(duty_cycle);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ff07 	bl	8000cf0 <set_duty_cycle_stop_left_5>
		set_duty_cycle_stop_ritht_5(duty_cycle);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ff54 	bl	8000d90 <set_duty_cycle_stop_ritht_5>

		stop_light_turn_on_left();
 8000ee8:	f7ff fe52 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000eec:	f7ff fe6c 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f003 fc3a 	bl	800476c <HAL_Delay>
	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3301      	adds	r3, #1
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b64      	cmp	r3, #100	; 0x64
 8000f02:	ddeb      	ble.n	8000edc <test_from_midle_to_corner+0x11c>
	}

	for(duty_cycle = MAX_DEMO_BRIGHTNESS; duty_cycle >= 0; duty_cycle--)
 8000f04:	2364      	movs	r3, #100	; 0x64
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	e028      	b.n	8000f5c <test_from_midle_to_corner+0x19c>
	{
		set_duty_cycle_stop_left_1(duty_cycle);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff feb0 	bl	8000c70 <set_duty_cycle_stop_left_1>
		set_duty_cycle_stop_left_2(duty_cycle);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff febd 	bl	8000c90 <set_duty_cycle_stop_left_2>
		set_duty_cycle_stop_left_3(duty_cycle);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff feca 	bl	8000cb0 <set_duty_cycle_stop_left_3>
		set_duty_cycle_stop_left_4(duty_cycle);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff fed7 	bl	8000cd0 <set_duty_cycle_stop_left_4>
		set_duty_cycle_stop_left_5(duty_cycle);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff fee4 	bl	8000cf0 <set_duty_cycle_stop_left_5>

		set_duty_cycle_stop_ritht_1(duty_cycle);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff fef1 	bl	8000d10 <set_duty_cycle_stop_ritht_1>
		set_duty_cycle_stop_ritht_2(duty_cycle);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff fefe 	bl	8000d30 <set_duty_cycle_stop_ritht_2>
		set_duty_cycle_stop_ritht_3(duty_cycle);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff0b 	bl	8000d50 <set_duty_cycle_stop_ritht_3>
		set_duty_cycle_stop_ritht_4(duty_cycle);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ff18 	bl	8000d70 <set_duty_cycle_stop_ritht_4>
		set_duty_cycle_stop_ritht_5(duty_cycle);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ff25 	bl	8000d90 <set_duty_cycle_stop_ritht_5>

		stop_light_turn_on_left();
 8000f46:	f7ff fe23 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000f4a:	f7ff fe3d 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f003 fc0b 	bl	800476c <HAL_Delay>
	for(duty_cycle = MAX_DEMO_BRIGHTNESS; duty_cycle >= 0; duty_cycle--)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	dad3      	bge.n	8000f0a <test_from_midle_to_corner+0x14a>
	}

}
 8000f62:	bf00      	nop
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20001634 	.word	0x20001634
 8000f70:	2000167c 	.word	0x2000167c
 8000f74:	200016c4 	.word	0x200016c4

08000f78 <ARGB_Init>:

/**
 * @brief Init timer & prescalers
 * @param none
 */
void ARGB_Init(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
    /* Auto-calculation! */
    u32_t APBfq; // Clock freq
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
 8000f7e:	f006 fb77 	bl	8007670 <HAL_RCC_GetPCLK1Freq>
 8000f82:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
 8000f84:	4b36      	ldr	r3, [pc, #216]	; (8001060 <ARGB_Init+0xe8>)
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <ARGB_Init+0x1c>
 8000f90:	2301      	movs	r3, #1
 8000f92:	e000      	b.n	8000f96 <ARGB_Init+0x1e>
 8000f94:	2302      	movs	r3, #2
 8000f96:	461a      	mov	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	fb02 f303 	mul.w	r3, r2, r3
 8000f9e:	607b      	str	r3, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	0a1b      	lsrs	r3, r3, #8
 8000fa4:	4a2f      	ldr	r2, [pc, #188]	; (8001064 <ARGB_Init+0xec>)
 8000fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000faa:	091b      	lsrs	r3, r3, #4
 8000fac:	607b      	str	r3, [r7, #4]
#endif
    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 8000fae:	4b2e      	ldr	r3, [pc, #184]	; (8001068 <ARGB_Init+0xf0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	4b2a      	ldr	r3, [pc, #168]	; (8001068 <ARGB_Init+0xf0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 8000fc4:	4b28      	ldr	r3, [pc, #160]	; (8001068 <ARGB_Init+0xf0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	615a      	str	r2, [r3, #20]
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.56) - 1;     // Log.1 - 56% - 0.70us
    PWM_LO = (u8_t) (APBfq * 0.28) - 1;     // Log.0 - 28% - 0.35us
#endif
#ifdef SK6812
    PWM_HI = (u8_t) (APBfq * 0.50) - 1;     // Log.1 - 48% - 0.60us // v  PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff fbc3 	bl	8000758 <__aeabi_ui2d>
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	4b25      	ldr	r3, [pc, #148]	; (800106c <ARGB_Init+0xf4>)
 8000fd8:	f7ff f952 	bl	8000280 <__aeabi_dmul>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f7ff fc32 	bl	800084c <__aeabi_d2uiz>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	3b01      	subs	r3, #1
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <ARGB_Init+0xf8>)
 8000ff2:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.26) - 1;     // Log.0 - 24% - 0.30us  // PWM_LO = (u8_t) (APBfq * 0.24) - 1;
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff fbaf 	bl	8000758 <__aeabi_ui2d>
 8000ffa:	a317      	add	r3, pc, #92	; (adr r3, 8001058 <ARGB_Init+0xe0>)
 8000ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001000:	f7ff f93e 	bl	8000280 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4610      	mov	r0, r2
 800100a:	4619      	mov	r1, r3
 800100c:	f7ff fc1e 	bl	800084c <__aeabi_d2uiz>
 8001010:	4603      	mov	r3, r0
 8001012:	b2db      	uxtb	r3, r3
 8001014:	3b01      	subs	r3, #1
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4b16      	ldr	r3, [pc, #88]	; (8001074 <ARGB_Init+0xfc>)
 800101a:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST_LEFT = ARGB_READY; // Set Ready Flag
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <ARGB_Init+0x100>)
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH_LEFT, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <ARGB_Init+0xf0>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2201      	movs	r2, #1
 8001028:	2108      	movs	r1, #8
 800102a:	4618      	mov	r0, r3
 800102c:	f007 fe7c 	bl	8008d28 <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8001030:	2001      	movs	r0, #1
 8001032:	f003 fb9b 	bl	800476c <HAL_Delay>
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH_RIGHT, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <ARGB_Init+0xf0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2201      	movs	r2, #1
 800103c:	210c      	movs	r1, #12
 800103e:	4618      	mov	r0, r3
 8001040:	f007 fe72 	bl	8008d28 <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8001044:	2001      	movs	r0, #1
 8001046:	f003 fb91 	bl	800476c <HAL_Delay>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	f3af 8000 	nop.w
 8001058:	0a3d70a4 	.word	0x0a3d70a4
 800105c:	3fd0a3d7 	.word	0x3fd0a3d7
 8001060:	40023800 	.word	0x40023800
 8001064:	014f8b59 	.word	0x014f8b59
 8001068:	20001754 	.word	0x20001754
 800106c:	3fe00000 	.word	0x3fe00000
 8001070:	200000e0 	.word	0x200000e0
 8001074:	200000e1 	.word	0x200000e1
 8001078:	20000590 	.word	0x20000590

0800107c <ARGB_Clear_left>:
/**
 * @brief Fill ALL LEDs with (0,0,0)
 * @param none
 * @note Update strip after that
 */
void ARGB_Clear_left(void) {
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
    ARGB_FillRGB_left(0, 0, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	2100      	movs	r1, #0
 8001084:	2000      	movs	r0, #0
 8001086:	f000 f95d 	bl	8001344 <ARGB_FillRGB_left>
#ifdef SK6812
    ARGB_FillWhite_left(0);
 800108a:	2000      	movs	r0, #0
 800108c:	f000 f99c 	bl	80013c8 <ARGB_FillWhite_left>
#endif
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}

08001094 <ARGB_Clear_right>:
// -------------------------------------------------------------------------------
void ARGB_Clear_right(void) {
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
    ARGB_FillRGB_right(0, 0, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2100      	movs	r1, #0
 800109c:	2000      	movs	r0, #0
 800109e:	f000 f972 	bl	8001386 <ARGB_FillRGB_right>
#ifdef SK6812
    ARGB_FillWhite_right(0);
 80010a2:	2000      	movs	r0, #0
 80010a4:	f000 f9ad 	bl	8001402 <ARGB_FillWhite_right>
#endif
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}

080010ac <ARGB_SetBrightness>:

/**
 * @brief Set GLOBAL LED brightness
 * @param[in] br Brightness [0..255]
 */
void ARGB_SetBrightness(u8_t br) {
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
    ARGB_BR = br;
 80010b6:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <ARGB_SetBrightness+0x1c>)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	7013      	strb	r3, [r2, #0]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	20000000 	.word	0x20000000

080010cc <ARGB_SetRGB_left>:
 * @param[in] i LED position
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_SetRGB_left(u16_t i, u8_t g, u8_t r, u8_t b) {
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4604      	mov	r4, r0
 80010d4:	4608      	mov	r0, r1
 80010d6:	4611      	mov	r1, r2
 80010d8:	461a      	mov	r2, r3
 80010da:	4623      	mov	r3, r4
 80010dc:	80fb      	strh	r3, [r7, #6]
 80010de:	4603      	mov	r3, r0
 80010e0:	717b      	strb	r3, [r7, #5]
 80010e2:	460b      	mov	r3, r1
 80010e4:	713b      	strb	r3, [r7, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	2b54      	cmp	r3, #84	; 0x54
 80010ee:	d913      	bls.n	8001118 <ARGB_SetRGB_left+0x4c>
        u16_t _i = i / NUM_PIXELS;
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	4a30      	ldr	r2, [pc, #192]	; (80011b4 <ARGB_SetRGB_left+0xe8>)
 80010f4:	fba2 2303 	umull	r2, r3, r2, r3
 80010f8:	099b      	lsrs	r3, r3, #6
 80010fa:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 80010fc:	89fb      	ldrh	r3, [r7, #14]
 80010fe:	461a      	mov	r2, r3
 8001100:	0092      	lsls	r2, r2, #2
 8001102:	4413      	add	r3, r2
 8001104:	461a      	mov	r2, r3
 8001106:	0111      	lsls	r1, r2, #4
 8001108:	461a      	mov	r2, r3
 800110a:	460b      	mov	r3, r1
 800110c:	4413      	add	r3, r2
 800110e:	425b      	negs	r3, r3
 8001110:	b29a      	uxth	r2, r3
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	4413      	add	r3, r2
 8001116:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 8001118:	4b27      	ldr	r3, [pc, #156]	; (80011b8 <ARGB_SetRGB_left+0xec>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	3301      	adds	r3, #1
 8001120:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001124:	fb92 f3f3 	sdiv	r3, r2, r3
 8001128:	793a      	ldrb	r2, [r7, #4]
 800112a:	fb92 f3f3 	sdiv	r3, r2, r3
 800112e:	713b      	strb	r3, [r7, #4]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 8001130:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <ARGB_SetRGB_left+0xec>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	3301      	adds	r3, #1
 8001138:	f44f 7280 	mov.w	r2, #256	; 0x100
 800113c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001140:	797a      	ldrb	r2, [r7, #5]
 8001142:	fb92 f3f3 	sdiv	r3, r2, r3
 8001146:	717b      	strb	r3, [r7, #5]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <ARGB_SetRGB_left+0xec>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	3301      	adds	r3, #1
 8001150:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001154:	fb92 f3f3 	sdiv	r3, r2, r3
 8001158:	78fa      	ldrb	r2, [r7, #3]
 800115a:	fb92 f3f3 	sdiv	r3, r2, r3
 800115e:	70fb      	strb	r3, [r7, #3]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 8001160:	797b      	ldrb	r3, [r7, #5]
 8001162:	21b0      	movs	r1, #176	; 0xb0
 8001164:	4618      	mov	r0, r3
 8001166:	f000 fd01 	bl	8001b6c <scale8>
 800116a:	4603      	mov	r3, r0
 800116c:	717b      	strb	r3, [r7, #5]
    b = scale8(b, 0xF0);
 800116e:	78fb      	ldrb	r3, [r7, #3]
 8001170:	21f0      	movs	r1, #240	; 0xf0
 8001172:	4618      	mov	r0, r3
 8001174:	f000 fcfa 	bl	8001b6c <scale8>
 8001178:	4603      	mov	r3, r0
 800117a:	70fb      	strb	r3, [r7, #3]
#endif
    // Subpixel chain order
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
 800117c:	793b      	ldrb	r3, [r7, #4]
 800117e:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = g;
 8001180:	797b      	ldrb	r3, [r7, #5]
 8001182:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8001184:	78fb      	ldrb	r3, [r7, #3]
 8001186:	72fb      	strb	r3, [r7, #11]
    const u8_t subp2 = r;
    const u8_t subp3 = b;
#endif
    // RGB or RGBW
#ifdef SK6812
    RGB_BUF_LEFT[4 * i] = subp1;     // subpixel 1
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	490b      	ldr	r1, [pc, #44]	; (80011bc <ARGB_SetRGB_left+0xf0>)
 800118e:	7b7a      	ldrb	r2, [r7, #13]
 8001190:	54ca      	strb	r2, [r1, r3]
    RGB_BUF_LEFT[4 * i + 1] = subp2; // subpixel 2
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	3301      	adds	r3, #1
 8001198:	4908      	ldr	r1, [pc, #32]	; (80011bc <ARGB_SetRGB_left+0xf0>)
 800119a:	7b3a      	ldrb	r2, [r7, #12]
 800119c:	54ca      	strb	r2, [r1, r3]
    RGB_BUF_LEFT[4 * i + 2] = subp3; // subpixel 3
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	3302      	adds	r3, #2
 80011a4:	4905      	ldr	r1, [pc, #20]	; (80011bc <ARGB_SetRGB_left+0xf0>)
 80011a6:	7afa      	ldrb	r2, [r7, #11]
 80011a8:	54ca      	strb	r2, [r1, r3]
#else
    RGB_BUF_LEFT[3 * i] = subp1;     // subpixel 1
    RGB_BUF_LEFT[3 * i + 1] = subp2; // subpixel 2
    RGB_BUF_LEFT[3 * i + 2] = subp3; // subpixel 3
#endif
}
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd90      	pop	{r4, r7, pc}
 80011b2:	bf00      	nop
 80011b4:	c0c0c0c1 	.word	0xc0c0c0c1
 80011b8:	20000000 	.word	0x20000000
 80011bc:	200000e4 	.word	0x200000e4

080011c0 <ARGB_SetRGB_right>:
// ----------------------------------------------------------------------------
void ARGB_SetRGB_right(u16_t i, u8_t g, u8_t r, u8_t b) {
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4604      	mov	r4, r0
 80011c8:	4608      	mov	r0, r1
 80011ca:	4611      	mov	r1, r2
 80011cc:	461a      	mov	r2, r3
 80011ce:	4623      	mov	r3, r4
 80011d0:	80fb      	strh	r3, [r7, #6]
 80011d2:	4603      	mov	r3, r0
 80011d4:	717b      	strb	r3, [r7, #5]
 80011d6:	460b      	mov	r3, r1
 80011d8:	713b      	strb	r3, [r7, #4]
 80011da:	4613      	mov	r3, r2
 80011dc:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	2b54      	cmp	r3, #84	; 0x54
 80011e2:	d913      	bls.n	800120c <ARGB_SetRGB_right+0x4c>
        u16_t _i = i / NUM_PIXELS;
 80011e4:	88fb      	ldrh	r3, [r7, #6]
 80011e6:	4a30      	ldr	r2, [pc, #192]	; (80012a8 <ARGB_SetRGB_right+0xe8>)
 80011e8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ec:	099b      	lsrs	r3, r3, #6
 80011ee:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 80011f0:	89fb      	ldrh	r3, [r7, #14]
 80011f2:	461a      	mov	r2, r3
 80011f4:	0092      	lsls	r2, r2, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	461a      	mov	r2, r3
 80011fa:	0111      	lsls	r1, r2, #4
 80011fc:	461a      	mov	r2, r3
 80011fe:	460b      	mov	r3, r1
 8001200:	4413      	add	r3, r2
 8001202:	425b      	negs	r3, r3
 8001204:	b29a      	uxth	r2, r3
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	4413      	add	r3, r2
 800120a:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 800120c:	4b27      	ldr	r3, [pc, #156]	; (80012ac <ARGB_SetRGB_right+0xec>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	3301      	adds	r3, #1
 8001214:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001218:	fb92 f3f3 	sdiv	r3, r2, r3
 800121c:	793a      	ldrb	r2, [r7, #4]
 800121e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001222:	713b      	strb	r3, [r7, #4]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <ARGB_SetRGB_right+0xec>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	3301      	adds	r3, #1
 800122c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001230:	fb92 f3f3 	sdiv	r3, r2, r3
 8001234:	797a      	ldrb	r2, [r7, #5]
 8001236:	fb92 f3f3 	sdiv	r3, r2, r3
 800123a:	717b      	strb	r3, [r7, #5]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <ARGB_SetRGB_right+0xec>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	3301      	adds	r3, #1
 8001244:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001248:	fb92 f3f3 	sdiv	r3, r2, r3
 800124c:	78fa      	ldrb	r2, [r7, #3]
 800124e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001252:	70fb      	strb	r3, [r7, #3]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 8001254:	797b      	ldrb	r3, [r7, #5]
 8001256:	21b0      	movs	r1, #176	; 0xb0
 8001258:	4618      	mov	r0, r3
 800125a:	f000 fc87 	bl	8001b6c <scale8>
 800125e:	4603      	mov	r3, r0
 8001260:	717b      	strb	r3, [r7, #5]
    b = scale8(b, 0xF0);
 8001262:	78fb      	ldrb	r3, [r7, #3]
 8001264:	21f0      	movs	r1, #240	; 0xf0
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fc80 	bl	8001b6c <scale8>
 800126c:	4603      	mov	r3, r0
 800126e:	70fb      	strb	r3, [r7, #3]
#endif
    // Subpixel chain order
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
 8001270:	793b      	ldrb	r3, [r7, #4]
 8001272:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = g;
 8001274:	797b      	ldrb	r3, [r7, #5]
 8001276:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	72fb      	strb	r3, [r7, #11]
    const u8_t subp2 = r;
    const u8_t subp3 = b;
#endif
    // RGB or RGBW
#ifdef SK6812
    RGB_BUF_RIGHT[4 * i] = subp1;     // subpixel 1
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	490b      	ldr	r1, [pc, #44]	; (80012b0 <ARGB_SetRGB_right+0xf0>)
 8001282:	7b7a      	ldrb	r2, [r7, #13]
 8001284:	54ca      	strb	r2, [r1, r3]
    RGB_BUF_RIGHT[4 * i + 1] = subp2; // subpixel 2
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	3301      	adds	r3, #1
 800128c:	4908      	ldr	r1, [pc, #32]	; (80012b0 <ARGB_SetRGB_right+0xf0>)
 800128e:	7b3a      	ldrb	r2, [r7, #12]
 8001290:	54ca      	strb	r2, [r1, r3]
    RGB_BUF_RIGHT[4 * i + 2] = subp3; // subpixel 3
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	4905      	ldr	r1, [pc, #20]	; (80012b0 <ARGB_SetRGB_right+0xf0>)
 800129a:	7afa      	ldrb	r2, [r7, #11]
 800129c:	54ca      	strb	r2, [r1, r3]
#else
    RGB_BUF_RIGHT[3 * i] = subp1;     // subpixel 1
    RGB_BUF_RIGHT[3 * i + 1] = subp2; // subpixel 2
    RGB_BUF_RIGHT[3 * i + 2] = subp3; // subpixel 3
#endif
}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd90      	pop	{r4, r7, pc}
 80012a6:	bf00      	nop
 80012a8:	c0c0c0c1 	.word	0xc0c0c0c1
 80012ac:	20000000 	.word	0x20000000
 80012b0:	20000238 	.word	0x20000238

080012b4 <ARGB_SetWhite_left>:
/**
 * @brief Set White component in strip by index
 * @param[in] i LED position
 * @param[in] w White component [0..255]
 */
void ARGB_SetWhite_left(u16_t i, u8_t w) {
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	460a      	mov	r2, r1
 80012be:	80fb      	strh	r3, [r7, #6]
 80012c0:	4613      	mov	r3, r2
 80012c2:	717b      	strb	r3, [r7, #5]
#ifdef RGB
    return;
#endif
    w /= 256 / ((u16_t) ARGB_BR + 1); 			// set brightness
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <ARGB_SetWhite_left+0x40>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	3301      	adds	r3, #1
 80012cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80012d4:	797a      	ldrb	r2, [r7, #5]
 80012d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80012da:	717b      	strb	r3, [r7, #5]
    RGB_BUF_LEFT[4 * i + 3] = w;                // set white part
 80012dc:	88fb      	ldrh	r3, [r7, #6]
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	3303      	adds	r3, #3
 80012e2:	4905      	ldr	r1, [pc, #20]	; (80012f8 <ARGB_SetWhite_left+0x44>)
 80012e4:	797a      	ldrb	r2, [r7, #5]
 80012e6:	54ca      	strb	r2, [r1, r3]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	20000000 	.word	0x20000000
 80012f8:	200000e4 	.word	0x200000e4

080012fc <ARGB_SetWhite_right>:
// -------------------------------------------------------------------
void ARGB_SetWhite_right(u16_t i, u8_t w) {
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	460a      	mov	r2, r1
 8001306:	80fb      	strh	r3, [r7, #6]
 8001308:	4613      	mov	r3, r2
 800130a:	717b      	strb	r3, [r7, #5]
#ifdef RGB
    return;
#endif
    w /= 256 / ((u16_t) ARGB_BR + 1); 			// set brightness
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <ARGB_SetWhite_right+0x40>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	3301      	adds	r3, #1
 8001314:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001318:	fb92 f3f3 	sdiv	r3, r2, r3
 800131c:	797a      	ldrb	r2, [r7, #5]
 800131e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001322:	717b      	strb	r3, [r7, #5]
    RGB_BUF_RIGHT[4 * i + 3] = w;               // set white part
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	3303      	adds	r3, #3
 800132a:	4905      	ldr	r1, [pc, #20]	; (8001340 <ARGB_SetWhite_right+0x44>)
 800132c:	797a      	ldrb	r2, [r7, #5]
 800132e:	54ca      	strb	r2, [r1, r3]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	20000000 	.word	0x20000000
 8001340:	20000238 	.word	0x20000238

08001344 <ARGB_FillRGB_left>:
 * @brief Fill ALL LEDs with RGB color
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_FillRGB_left(u8_t r, u8_t g, u8_t b) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
 800134e:	460b      	mov	r3, r1
 8001350:	71bb      	strb	r3, [r7, #6]
 8001352:	4613      	mov	r3, r2
 8001354:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8001356:	2300      	movs	r3, #0
 8001358:	81fb      	strh	r3, [r7, #14]
 800135a:	e00b      	b.n	8001374 <ARGB_FillRGB_left+0x30>
        ARGB_SetRGB_left(i, r, g, b);
 800135c:	89fb      	ldrh	r3, [r7, #14]
 800135e:	b298      	uxth	r0, r3
 8001360:	797b      	ldrb	r3, [r7, #5]
 8001362:	79ba      	ldrb	r2, [r7, #6]
 8001364:	79f9      	ldrb	r1, [r7, #7]
 8001366:	f7ff feb1 	bl	80010cc <ARGB_SetRGB_left>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 800136a:	89fb      	ldrh	r3, [r7, #14]
 800136c:	b29b      	uxth	r3, r3
 800136e:	3301      	adds	r3, #1
 8001370:	b29b      	uxth	r3, r3
 8001372:	81fb      	strh	r3, [r7, #14]
 8001374:	89fb      	ldrh	r3, [r7, #14]
 8001376:	b29b      	uxth	r3, r3
 8001378:	2b54      	cmp	r3, #84	; 0x54
 800137a:	d9ef      	bls.n	800135c <ARGB_FillRGB_left+0x18>
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <ARGB_FillRGB_right>:
// --------------------------------------------------------------------------------
void ARGB_FillRGB_right(u8_t r, u8_t g, u8_t b) {
 8001386:	b580      	push	{r7, lr}
 8001388:	b084      	sub	sp, #16
 800138a:	af00      	add	r7, sp, #0
 800138c:	4603      	mov	r3, r0
 800138e:	71fb      	strb	r3, [r7, #7]
 8001390:	460b      	mov	r3, r1
 8001392:	71bb      	strb	r3, [r7, #6]
 8001394:	4613      	mov	r3, r2
 8001396:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8001398:	2300      	movs	r3, #0
 800139a:	81fb      	strh	r3, [r7, #14]
 800139c:	e00b      	b.n	80013b6 <ARGB_FillRGB_right+0x30>
        ARGB_SetRGB_right(i, r, g, b);
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	b298      	uxth	r0, r3
 80013a2:	797b      	ldrb	r3, [r7, #5]
 80013a4:	79ba      	ldrb	r2, [r7, #6]
 80013a6:	79f9      	ldrb	r1, [r7, #7]
 80013a8:	f7ff ff0a 	bl	80011c0 <ARGB_SetRGB_right>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 80013ac:	89fb      	ldrh	r3, [r7, #14]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	3301      	adds	r3, #1
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	81fb      	strh	r3, [r7, #14]
 80013b6:	89fb      	ldrh	r3, [r7, #14]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	2b54      	cmp	r3, #84	; 0x54
 80013bc:	d9ef      	bls.n	800139e <ARGB_FillRGB_right+0x18>
}
 80013be:	bf00      	nop
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <ARGB_FillWhite_left>:

/**
 * @brief Set ALL White components in strip
 * @param[in] w White component [0..255]
 */
void ARGB_FillWhite_left(u8_t w) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	81fb      	strh	r3, [r7, #14]
 80013d6:	e00b      	b.n	80013f0 <ARGB_FillWhite_left+0x28>
        ARGB_SetWhite_left(i, w);
 80013d8:	89fb      	ldrh	r3, [r7, #14]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	79fa      	ldrb	r2, [r7, #7]
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff67 	bl	80012b4 <ARGB_SetWhite_left>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 80013e6:	89fb      	ldrh	r3, [r7, #14]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	3301      	adds	r3, #1
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	81fb      	strh	r3, [r7, #14]
 80013f0:	89fb      	ldrh	r3, [r7, #14]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	2b54      	cmp	r3, #84	; 0x54
 80013f6:	d9ef      	bls.n	80013d8 <ARGB_FillWhite_left+0x10>
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <ARGB_FillWhite_right>:
// --------------------------------------------------------------------------
void ARGB_FillWhite_right(u8_t w) {
 8001402:	b580      	push	{r7, lr}
 8001404:	b084      	sub	sp, #16
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	71fb      	strb	r3, [r7, #7]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 800140c:	2300      	movs	r3, #0
 800140e:	81fb      	strh	r3, [r7, #14]
 8001410:	e00b      	b.n	800142a <ARGB_FillWhite_right+0x28>
        ARGB_SetWhite_right(i, w);
 8001412:	89fb      	ldrh	r3, [r7, #14]
 8001414:	b29b      	uxth	r3, r3
 8001416:	79fa      	ldrb	r2, [r7, #7]
 8001418:	4611      	mov	r1, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff6e 	bl	80012fc <ARGB_SetWhite_right>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8001420:	89fb      	ldrh	r3, [r7, #14]
 8001422:	b29b      	uxth	r3, r3
 8001424:	3301      	adds	r3, #1
 8001426:	b29b      	uxth	r3, r3
 8001428:	81fb      	strh	r3, [r7, #14]
 800142a:	89fb      	ldrh	r3, [r7, #14]
 800142c:	b29b      	uxth	r3, r3
 800142e:	2b54      	cmp	r3, #84	; 0x54
 8001430:	d9ef      	bls.n	8001412 <ARGB_FillWhite_right+0x10>
}
 8001432:	bf00      	nop
 8001434:	bf00      	nop
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <ARGB_Show_left>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show_left(void) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
	ARGB_LOC_ST_LEFT = ARGB_BUSY;
 8001442:	4b9f      	ldr	r3, [pc, #636]	; (80016c0 <ARGB_Show_left+0x284>)
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER_LEFT != 0 || DMA_HANDLE_LEFT.State != HAL_DMA_STATE_READY) {   //////////////////////////////////////   BUF_COUNTER  ?????
 8001448:	4b9e      	ldr	r3, [pc, #632]	; (80016c4 <ARGB_Show_left+0x288>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	b29b      	uxth	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d105      	bne.n	800145e <ARGB_Show_left+0x22>
 8001452:	4b9d      	ldr	r3, [pc, #628]	; (80016c8 <ARGB_Show_left+0x28c>)
 8001454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b01      	cmp	r3, #1
 800145c:	d001      	beq.n	8001462 <ARGB_Show_left+0x26>
        return ARGB_BUSY;
 800145e:	2300      	movs	r3, #0
 8001460:	e1a1      	b.n	80017a6 <ARGB_Show_left+0x36a>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 8001462:	2300      	movs	r3, #0
 8001464:	71fb      	strb	r3, [r7, #7]
 8001466:	e0dc      	b.n	8001622 <ARGB_Show_left+0x1e6>
            // set first transfer from first values
        	PWM_BUF_LEFT[i] = (((RGB_BUF_LEFT[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001468:	4b98      	ldr	r3, [pc, #608]	; (80016cc <ARGB_Show_left+0x290>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	461a      	mov	r2, r3
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147c:	2b00      	cmp	r3, #0
 800147e:	dd04      	ble.n	800148a <ARGB_Show_left+0x4e>
 8001480:	4b93      	ldr	r3, [pc, #588]	; (80016d0 <ARGB_Show_left+0x294>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	461a      	mov	r2, r3
 8001488:	e003      	b.n	8001492 <ARGB_Show_left+0x56>
 800148a:	4b92      	ldr	r3, [pc, #584]	; (80016d4 <ARGB_Show_left+0x298>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	461a      	mov	r2, r3
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	4619      	mov	r1, r3
 8001498:	4b8f      	ldr	r3, [pc, #572]	; (80016d8 <ARGB_Show_left+0x29c>)
 800149a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        	PWM_BUF_LEFT[i + 8] = (((RGB_BUF_LEFT[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800149e:	4b8b      	ldr	r3, [pc, #556]	; (80016cc <ARGB_Show_left+0x290>)
 80014a0:	785b      	ldrb	r3, [r3, #1]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	461a      	mov	r2, r3
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	dd04      	ble.n	80014c0 <ARGB_Show_left+0x84>
 80014b6:	4b86      	ldr	r3, [pc, #536]	; (80016d0 <ARGB_Show_left+0x294>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	4619      	mov	r1, r3
 80014be:	e003      	b.n	80014c8 <ARGB_Show_left+0x8c>
 80014c0:	4b84      	ldr	r3, [pc, #528]	; (80016d4 <ARGB_Show_left+0x298>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	4619      	mov	r1, r3
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	3308      	adds	r3, #8
 80014ce:	4a82      	ldr	r2, [pc, #520]	; (80016d8 <ARGB_Show_left+0x29c>)
 80014d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 16] = (((RGB_BUF_LEFT[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80014d4:	4b7d      	ldr	r3, [pc, #500]	; (80016cc <ARGB_Show_left+0x290>)
 80014d6:	789b      	ldrb	r3, [r3, #2]
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	dd04      	ble.n	80014f6 <ARGB_Show_left+0xba>
 80014ec:	4b78      	ldr	r3, [pc, #480]	; (80016d0 <ARGB_Show_left+0x294>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	4619      	mov	r1, r3
 80014f4:	e003      	b.n	80014fe <ARGB_Show_left+0xc2>
 80014f6:	4b77      	ldr	r3, [pc, #476]	; (80016d4 <ARGB_Show_left+0x298>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	4619      	mov	r1, r3
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	3310      	adds	r3, #16
 8001504:	4a74      	ldr	r2, [pc, #464]	; (80016d8 <ARGB_Show_left+0x29c>)
 8001506:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 24] = (((RGB_BUF_LEFT[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800150a:	4b70      	ldr	r3, [pc, #448]	; (80016cc <ARGB_Show_left+0x290>)
 800150c:	78db      	ldrb	r3, [r3, #3]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151e:	2b00      	cmp	r3, #0
 8001520:	dd04      	ble.n	800152c <ARGB_Show_left+0xf0>
 8001522:	4b6b      	ldr	r3, [pc, #428]	; (80016d0 <ARGB_Show_left+0x294>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	4619      	mov	r1, r3
 800152a:	e003      	b.n	8001534 <ARGB_Show_left+0xf8>
 800152c:	4b69      	ldr	r3, [pc, #420]	; (80016d4 <ARGB_Show_left+0x298>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	4619      	mov	r1, r3
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	3318      	adds	r3, #24
 800153a:	4a67      	ldr	r2, [pc, #412]	; (80016d8 <ARGB_Show_left+0x29c>)
 800153c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 32] = (((RGB_BUF_LEFT[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001540:	4b62      	ldr	r3, [pc, #392]	; (80016cc <ARGB_Show_left+0x290>)
 8001542:	791b      	ldrb	r3, [r3, #4]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	461a      	mov	r2, r3
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001554:	2b00      	cmp	r3, #0
 8001556:	dd04      	ble.n	8001562 <ARGB_Show_left+0x126>
 8001558:	4b5d      	ldr	r3, [pc, #372]	; (80016d0 <ARGB_Show_left+0x294>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	4619      	mov	r1, r3
 8001560:	e003      	b.n	800156a <ARGB_Show_left+0x12e>
 8001562:	4b5c      	ldr	r3, [pc, #368]	; (80016d4 <ARGB_Show_left+0x298>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	4619      	mov	r1, r3
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	3320      	adds	r3, #32
 8001570:	4a59      	ldr	r2, [pc, #356]	; (80016d8 <ARGB_Show_left+0x29c>)
 8001572:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 40] = (((RGB_BUF_LEFT[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001576:	4b55      	ldr	r3, [pc, #340]	; (80016cc <ARGB_Show_left+0x290>)
 8001578:	795b      	ldrb	r3, [r3, #5]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	461a      	mov	r2, r3
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158a:	2b00      	cmp	r3, #0
 800158c:	dd04      	ble.n	8001598 <ARGB_Show_left+0x15c>
 800158e:	4b50      	ldr	r3, [pc, #320]	; (80016d0 <ARGB_Show_left+0x294>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	4619      	mov	r1, r3
 8001596:	e003      	b.n	80015a0 <ARGB_Show_left+0x164>
 8001598:	4b4e      	ldr	r3, [pc, #312]	; (80016d4 <ARGB_Show_left+0x298>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	4619      	mov	r1, r3
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	3328      	adds	r3, #40	; 0x28
 80015a6:	4a4c      	ldr	r2, [pc, #304]	; (80016d8 <ARGB_Show_left+0x29c>)
 80015a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#ifdef SK6812
        	PWM_BUF_LEFT[i + 48] = (((RGB_BUF_LEFT[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80015ac:	4b47      	ldr	r3, [pc, #284]	; (80016cc <ARGB_Show_left+0x290>)
 80015ae:	799b      	ldrb	r3, [r3, #6]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	461a      	mov	r2, r3
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	dd04      	ble.n	80015ce <ARGB_Show_left+0x192>
 80015c4:	4b42      	ldr	r3, [pc, #264]	; (80016d0 <ARGB_Show_left+0x294>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	4619      	mov	r1, r3
 80015cc:	e003      	b.n	80015d6 <ARGB_Show_left+0x19a>
 80015ce:	4b41      	ldr	r3, [pc, #260]	; (80016d4 <ARGB_Show_left+0x298>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	4619      	mov	r1, r3
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	3330      	adds	r3, #48	; 0x30
 80015dc:	4a3e      	ldr	r2, [pc, #248]	; (80016d8 <ARGB_Show_left+0x29c>)
 80015de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 56] = (((RGB_BUF_LEFT[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80015e2:	4b3a      	ldr	r3, [pc, #232]	; (80016cc <ARGB_Show_left+0x290>)
 80015e4:	79db      	ldrb	r3, [r3, #7]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	dd04      	ble.n	8001604 <ARGB_Show_left+0x1c8>
 80015fa:	4b35      	ldr	r3, [pc, #212]	; (80016d0 <ARGB_Show_left+0x294>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	4619      	mov	r1, r3
 8001602:	e003      	b.n	800160c <ARGB_Show_left+0x1d0>
 8001604:	4b33      	ldr	r3, [pc, #204]	; (80016d4 <ARGB_Show_left+0x298>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	4619      	mov	r1, r3
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	3338      	adds	r3, #56	; 0x38
 8001612:	4a31      	ldr	r2, [pc, #196]	; (80016d8 <ARGB_Show_left+0x29c>)
 8001614:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	3301      	adds	r3, #1
 800161e:	b2db      	uxtb	r3, r3
 8001620:	71fb      	strb	r3, [r7, #7]
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b07      	cmp	r3, #7
 8001628:	f67f af1e 	bls.w	8001468 <ARGB_Show_left+0x2c>
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001630:	e0b1      	b.n	8001796 <ARGB_Show_left+0x35a>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH_LEFT) == HAL_TIM_CHANNEL_STATE_BUSY) {
 8001632:	4b2a      	ldr	r3, [pc, #168]	; (80016dc <ARGB_Show_left+0x2a0>)
 8001634:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d102      	bne.n	8001644 <ARGB_Show_left+0x208>
                DMA_Send_Stat = HAL_BUSY;
 800163e:	2302      	movs	r3, #2
 8001640:	73fb      	strb	r3, [r7, #15]
                continue;
 8001642:	e0a8      	b.n	8001796 <ARGB_Show_left+0x35a>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH_LEFT) == HAL_TIM_CHANNEL_STATE_READY) {
 8001644:	4b25      	ldr	r3, [pc, #148]	; (80016dc <ARGB_Show_left+0x2a0>)
 8001646:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b01      	cmp	r3, #1
 800164e:	d11d      	bne.n	800168c <ARGB_Show_left+0x250>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH_LEFT, HAL_TIM_CHANNEL_STATE_BUSY);
 8001650:	4b22      	ldr	r3, [pc, #136]	; (80016dc <ARGB_Show_left+0x2a0>)
 8001652:	2202      	movs	r2, #2
 8001654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#elif TIM_CH_LEFT == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_L]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt_left;
 8001658:	4b20      	ldr	r3, [pc, #128]	; (80016dc <ARGB_Show_left+0x2a0>)
 800165a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165c:	4a20      	ldr	r2, [pc, #128]	; (80016e0 <ARGB_Show_left+0x2a4>)
 800165e:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_L]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt_left;
 8001660:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <ARGB_Show_left+0x2a0>)
 8001662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001664:	4a1f      	ldr	r2, [pc, #124]	; (80016e4 <ARGB_Show_left+0x2a8>)
 8001666:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_L]->XferErrorCallback = TIM_DMAError;
 8001668:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <ARGB_Show_left+0x2a0>)
 800166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166c:	4a1e      	ldr	r2, [pc, #120]	; (80016e8 <ARGB_Show_left+0x2ac>)
 800166e:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_L], (u32_t) PWM_BUF_LEFT,
 8001670:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <ARGB_Show_left+0x2a0>)
 8001672:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001674:	4918      	ldr	r1, [pc, #96]	; (80016d8 <ARGB_Show_left+0x29c>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR_L,
 8001676:	4b19      	ldr	r3, [pc, #100]	; (80016dc <ARGB_Show_left+0x2a0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	333c      	adds	r3, #60	; 0x3c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_L], (u32_t) PWM_BUF_LEFT,
 800167c:	461a      	mov	r2, r3
 800167e:	2340      	movs	r3, #64	; 0x40
 8001680:	f003 fa58 	bl	8004b34 <HAL_DMA_Start_IT>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d006      	beq.n	8001698 <ARGB_Show_left+0x25c>
 800168a:	e002      	b.n	8001692 <ARGB_Show_left+0x256>
                DMA_Send_Stat = HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	73fb      	strb	r3, [r7, #15]
                continue;
 8001690:	e081      	b.n	8001796 <ARGB_Show_left+0x35a>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	73fb      	strb	r3, [r7, #15]
                continue;
 8001696:	e07e      	b.n	8001796 <ARGB_Show_left+0x35a>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC_L);
 8001698:	4b10      	ldr	r3, [pc, #64]	; (80016dc <ARGB_Show_left+0x2a0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <ARGB_Show_left+0x2a0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016a6:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <ARGB_Show_left+0x2a0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0f      	ldr	r2, [pc, #60]	; (80016ec <ARGB_Show_left+0x2b0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d004      	beq.n	80016bc <ARGB_Show_left+0x280>
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <ARGB_Show_left+0x2a0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <ARGB_Show_left+0x2b4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d11b      	bne.n	80016f4 <ARGB_Show_left+0x2b8>
 80016bc:	2301      	movs	r3, #1
 80016be:	e01a      	b.n	80016f6 <ARGB_Show_left+0x2ba>
 80016c0:	20000590 	.word	0x20000590
 80016c4:	2000058c 	.word	0x2000058c
 80016c8:	200017e4 	.word	0x200017e4
 80016cc:	200000e4 	.word	0x200000e4
 80016d0:	200000e0 	.word	0x200000e0
 80016d4:	200000e1 	.word	0x200000e1
 80016d8:	2000038c 	.word	0x2000038c
 80016dc:	20001754 	.word	0x20001754
 80016e0:	08001b95 	.word	0x08001b95
 80016e4:	08002185 	.word	0x08002185
 80016e8:	080086c3 	.word	0x080086c3
 80016ec:	40010000 	.word	0x40010000
 80016f0:	40010400 	.word	0x40010400
 80016f4:	2300      	movs	r3, #0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d007      	beq.n	800170a <ARGB_Show_left+0x2ce>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 80016fa:	4b2d      	ldr	r3, [pc, #180]	; (80017b0 <ARGB_Show_left+0x374>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001700:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <ARGB_Show_left+0x374>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001708:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 800170a:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <ARGB_Show_left+0x374>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a29      	ldr	r2, [pc, #164]	; (80017b4 <ARGB_Show_left+0x378>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d022      	beq.n	800175a <ARGB_Show_left+0x31e>
 8001714:	4b26      	ldr	r3, [pc, #152]	; (80017b0 <ARGB_Show_left+0x374>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800171c:	d01d      	beq.n	800175a <ARGB_Show_left+0x31e>
 800171e:	4b24      	ldr	r3, [pc, #144]	; (80017b0 <ARGB_Show_left+0x374>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a25      	ldr	r2, [pc, #148]	; (80017b8 <ARGB_Show_left+0x37c>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d018      	beq.n	800175a <ARGB_Show_left+0x31e>
 8001728:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <ARGB_Show_left+0x374>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a23      	ldr	r2, [pc, #140]	; (80017bc <ARGB_Show_left+0x380>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d013      	beq.n	800175a <ARGB_Show_left+0x31e>
 8001732:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <ARGB_Show_left+0x374>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a22      	ldr	r2, [pc, #136]	; (80017c0 <ARGB_Show_left+0x384>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d00e      	beq.n	800175a <ARGB_Show_left+0x31e>
 800173c:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <ARGB_Show_left+0x374>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a20      	ldr	r2, [pc, #128]	; (80017c4 <ARGB_Show_left+0x388>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d009      	beq.n	800175a <ARGB_Show_left+0x31e>
 8001746:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <ARGB_Show_left+0x374>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a1f      	ldr	r2, [pc, #124]	; (80017c8 <ARGB_Show_left+0x38c>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d004      	beq.n	800175a <ARGB_Show_left+0x31e>
 8001750:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <ARGB_Show_left+0x374>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a1d      	ldr	r2, [pc, #116]	; (80017cc <ARGB_Show_left+0x390>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d111      	bne.n	800177e <ARGB_Show_left+0x342>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <ARGB_Show_left+0x374>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b06      	cmp	r3, #6
 800176a:	d011      	beq.n	8001790 <ARGB_Show_left+0x354>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 800176c:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <ARGB_Show_left+0x374>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <ARGB_Show_left+0x374>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0201 	orr.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 800177c:	e008      	b.n	8001790 <ARGB_Show_left+0x354>
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <ARGB_Show_left+0x374>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <ARGB_Show_left+0x374>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f042 0201 	orr.w	r2, r2, #1
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	e000      	b.n	8001792 <ARGB_Show_left+0x356>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001790:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	2b00      	cmp	r3, #0
 800179a:	f47f af4a 	bne.w	8001632 <ARGB_Show_left+0x1f6>
        }
        BUF_COUNTER_LEFT = 2;
 800179e:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <ARGB_Show_left+0x394>)
 80017a0:	2202      	movs	r2, #2
 80017a2:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 80017a4:	2302      	movs	r3, #2
    }
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20001754 	.word	0x20001754
 80017b4:	40010000 	.word	0x40010000
 80017b8:	40000400 	.word	0x40000400
 80017bc:	40000800 	.word	0x40000800
 80017c0:	40000c00 	.word	0x40000c00
 80017c4:	40010400 	.word	0x40010400
 80017c8:	40014000 	.word	0x40014000
 80017cc:	40001800 	.word	0x40001800
 80017d0:	2000058c 	.word	0x2000058c

080017d4 <ARGB_Show_right>:
// ----------------------------------------------------------------------
ARGB_STATE ARGB_Show_right(void) {             //////////////////////////////////////   BUF_COUNTER  ?????
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
	ARGB_LOC_ST_RIGHT = ARGB_BUSY;
 80017da:	4b9f      	ldr	r3, [pc, #636]	; (8001a58 <ARGB_Show_right+0x284>)
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER_RIGHT != 0 || DMA_HANDLE_RIGHT.State != HAL_DMA_STATE_READY) { // <<<<<<<<<<<<<<<<<<<<<<<<< Зависає тут
 80017e0:	4b9e      	ldr	r3, [pc, #632]	; (8001a5c <ARGB_Show_right+0x288>)
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f040 81aa 	bne.w	8001b40 <ARGB_Show_right+0x36c>
 80017ec:	4b9c      	ldr	r3, [pc, #624]	; (8001a60 <ARGB_Show_right+0x28c>)
 80017ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	f040 81a3 	bne.w	8001b40 <ARGB_Show_right+0x36c>
        //return ARGB_BUSY;
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 80017fa:	2300      	movs	r3, #0
 80017fc:	71fb      	strb	r3, [r7, #7]
 80017fe:	e0dc      	b.n	80019ba <ARGB_Show_right+0x1e6>
            // set first transfer from first values
        	PWM_BUF_RIGHT[i] = (((RGB_BUF_RIGHT[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001800:	4b98      	ldr	r3, [pc, #608]	; (8001a64 <ARGB_Show_right+0x290>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	461a      	mov	r2, r3
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001814:	2b00      	cmp	r3, #0
 8001816:	dd04      	ble.n	8001822 <ARGB_Show_right+0x4e>
 8001818:	4b93      	ldr	r3, [pc, #588]	; (8001a68 <ARGB_Show_right+0x294>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	461a      	mov	r2, r3
 8001820:	e003      	b.n	800182a <ARGB_Show_right+0x56>
 8001822:	4b92      	ldr	r3, [pc, #584]	; (8001a6c <ARGB_Show_right+0x298>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	461a      	mov	r2, r3
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4619      	mov	r1, r3
 8001830:	4b8f      	ldr	r3, [pc, #572]	; (8001a70 <ARGB_Show_right+0x29c>)
 8001832:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        	PWM_BUF_RIGHT[i + 8] = (((RGB_BUF_RIGHT[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001836:	4b8b      	ldr	r3, [pc, #556]	; (8001a64 <ARGB_Show_right+0x290>)
 8001838:	785b      	ldrb	r3, [r3, #1]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	461a      	mov	r2, r3
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	b2db      	uxtb	r3, r3
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184a:	2b00      	cmp	r3, #0
 800184c:	dd04      	ble.n	8001858 <ARGB_Show_right+0x84>
 800184e:	4b86      	ldr	r3, [pc, #536]	; (8001a68 <ARGB_Show_right+0x294>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	4619      	mov	r1, r3
 8001856:	e003      	b.n	8001860 <ARGB_Show_right+0x8c>
 8001858:	4b84      	ldr	r3, [pc, #528]	; (8001a6c <ARGB_Show_right+0x298>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	4619      	mov	r1, r3
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	3308      	adds	r3, #8
 8001866:	4a82      	ldr	r2, [pc, #520]	; (8001a70 <ARGB_Show_right+0x29c>)
 8001868:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 16] = (((RGB_BUF_RIGHT[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800186c:	4b7d      	ldr	r3, [pc, #500]	; (8001a64 <ARGB_Show_right+0x290>)
 800186e:	789b      	ldrb	r3, [r3, #2]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001880:	2b00      	cmp	r3, #0
 8001882:	dd04      	ble.n	800188e <ARGB_Show_right+0xba>
 8001884:	4b78      	ldr	r3, [pc, #480]	; (8001a68 <ARGB_Show_right+0x294>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	4619      	mov	r1, r3
 800188c:	e003      	b.n	8001896 <ARGB_Show_right+0xc2>
 800188e:	4b77      	ldr	r3, [pc, #476]	; (8001a6c <ARGB_Show_right+0x298>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	4619      	mov	r1, r3
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	3310      	adds	r3, #16
 800189c:	4a74      	ldr	r2, [pc, #464]	; (8001a70 <ARGB_Show_right+0x29c>)
 800189e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 24] = (((RGB_BUF_RIGHT[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80018a2:	4b70      	ldr	r3, [pc, #448]	; (8001a64 <ARGB_Show_right+0x290>)
 80018a4:	78db      	ldrb	r3, [r3, #3]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	461a      	mov	r2, r3
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	dd04      	ble.n	80018c4 <ARGB_Show_right+0xf0>
 80018ba:	4b6b      	ldr	r3, [pc, #428]	; (8001a68 <ARGB_Show_right+0x294>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	4619      	mov	r1, r3
 80018c2:	e003      	b.n	80018cc <ARGB_Show_right+0xf8>
 80018c4:	4b69      	ldr	r3, [pc, #420]	; (8001a6c <ARGB_Show_right+0x298>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	4619      	mov	r1, r3
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	3318      	adds	r3, #24
 80018d2:	4a67      	ldr	r2, [pc, #412]	; (8001a70 <ARGB_Show_right+0x29c>)
 80018d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 32] = (((RGB_BUF_RIGHT[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80018d8:	4b62      	ldr	r3, [pc, #392]	; (8001a64 <ARGB_Show_right+0x290>)
 80018da:	791b      	ldrb	r3, [r3, #4]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	461a      	mov	r2, r3
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	dd04      	ble.n	80018fa <ARGB_Show_right+0x126>
 80018f0:	4b5d      	ldr	r3, [pc, #372]	; (8001a68 <ARGB_Show_right+0x294>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	4619      	mov	r1, r3
 80018f8:	e003      	b.n	8001902 <ARGB_Show_right+0x12e>
 80018fa:	4b5c      	ldr	r3, [pc, #368]	; (8001a6c <ARGB_Show_right+0x298>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	4619      	mov	r1, r3
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	3320      	adds	r3, #32
 8001908:	4a59      	ldr	r2, [pc, #356]	; (8001a70 <ARGB_Show_right+0x29c>)
 800190a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 40] = (((RGB_BUF_RIGHT[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800190e:	4b55      	ldr	r3, [pc, #340]	; (8001a64 <ARGB_Show_right+0x290>)
 8001910:	795b      	ldrb	r3, [r3, #5]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	461a      	mov	r2, r3
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001922:	2b00      	cmp	r3, #0
 8001924:	dd04      	ble.n	8001930 <ARGB_Show_right+0x15c>
 8001926:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <ARGB_Show_right+0x294>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	4619      	mov	r1, r3
 800192e:	e003      	b.n	8001938 <ARGB_Show_right+0x164>
 8001930:	4b4e      	ldr	r3, [pc, #312]	; (8001a6c <ARGB_Show_right+0x298>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	4619      	mov	r1, r3
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	3328      	adds	r3, #40	; 0x28
 800193e:	4a4c      	ldr	r2, [pc, #304]	; (8001a70 <ARGB_Show_right+0x29c>)
 8001940:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#ifdef SK6812
        	PWM_BUF_RIGHT[i + 48] = (((RGB_BUF_RIGHT[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001944:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <ARGB_Show_right+0x290>)
 8001946:	799b      	ldrb	r3, [r3, #6]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	461a      	mov	r2, r3
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001958:	2b00      	cmp	r3, #0
 800195a:	dd04      	ble.n	8001966 <ARGB_Show_right+0x192>
 800195c:	4b42      	ldr	r3, [pc, #264]	; (8001a68 <ARGB_Show_right+0x294>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	4619      	mov	r1, r3
 8001964:	e003      	b.n	800196e <ARGB_Show_right+0x19a>
 8001966:	4b41      	ldr	r3, [pc, #260]	; (8001a6c <ARGB_Show_right+0x298>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	4619      	mov	r1, r3
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	3330      	adds	r3, #48	; 0x30
 8001974:	4a3e      	ldr	r2, [pc, #248]	; (8001a70 <ARGB_Show_right+0x29c>)
 8001976:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 56] = (((RGB_BUF_RIGHT[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800197a:	4b3a      	ldr	r3, [pc, #232]	; (8001a64 <ARGB_Show_right+0x290>)
 800197c:	79db      	ldrb	r3, [r3, #7]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	461a      	mov	r2, r3
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198e:	2b00      	cmp	r3, #0
 8001990:	dd04      	ble.n	800199c <ARGB_Show_right+0x1c8>
 8001992:	4b35      	ldr	r3, [pc, #212]	; (8001a68 <ARGB_Show_right+0x294>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	4619      	mov	r1, r3
 800199a:	e003      	b.n	80019a4 <ARGB_Show_right+0x1d0>
 800199c:	4b33      	ldr	r3, [pc, #204]	; (8001a6c <ARGB_Show_right+0x298>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	4619      	mov	r1, r3
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	3338      	adds	r3, #56	; 0x38
 80019aa:	4a31      	ldr	r2, [pc, #196]	; (8001a70 <ARGB_Show_right+0x29c>)
 80019ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	3301      	adds	r3, #1
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	71fb      	strb	r3, [r7, #7]
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b07      	cmp	r3, #7
 80019c0:	f67f af1e 	bls.w	8001800 <ARGB_Show_right+0x2c>
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 80019c8:	e0b1      	b.n	8001b2e <ARGB_Show_right+0x35a>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH_RIGHT) == HAL_TIM_CHANNEL_STATE_BUSY) {
 80019ca:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <ARGB_Show_right+0x2a0>)
 80019cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d102      	bne.n	80019dc <ARGB_Show_right+0x208>
                DMA_Send_Stat = HAL_BUSY;
 80019d6:	2302      	movs	r3, #2
 80019d8:	73fb      	strb	r3, [r7, #15]
                continue;
 80019da:	e0a8      	b.n	8001b2e <ARGB_Show_right+0x35a>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH_RIGHT) == HAL_TIM_CHANNEL_STATE_READY) {
 80019dc:	4b25      	ldr	r3, [pc, #148]	; (8001a74 <ARGB_Show_right+0x2a0>)
 80019de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d11d      	bne.n	8001a24 <ARGB_Show_right+0x250>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH_RIGHT, HAL_TIM_CHANNEL_STATE_BUSY);
 80019e8:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <ARGB_Show_right+0x2a0>)
 80019ea:	2202      	movs	r2, #2
 80019ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#elif TIM_CH_RIGHT == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID_R TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC_R TIM_DMA_CC4
#define ARGB_TIM_CCR_R CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt_right;
 80019f0:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <ARGB_Show_right+0x2a0>)
 80019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f4:	4a20      	ldr	r2, [pc, #128]	; (8001a78 <ARGB_Show_right+0x2a4>)
 80019f6:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt_right;
 80019f8:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <ARGB_Show_right+0x2a0>)
 80019fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fc:	4a1f      	ldr	r2, [pc, #124]	; (8001a7c <ARGB_Show_right+0x2a8>)
 80019fe:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R]->XferErrorCallback = TIM_DMAError;
 8001a00:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <ARGB_Show_right+0x2a0>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	4a1e      	ldr	r2, [pc, #120]	; (8001a80 <ARGB_Show_right+0x2ac>)
 8001a06:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R], (u32_t) PWM_BUF_RIGHT,
 8001a08:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <ARGB_Show_right+0x2a0>)
 8001a0a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001a0c:	4918      	ldr	r1, [pc, #96]	; (8001a70 <ARGB_Show_right+0x29c>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR_R,
 8001a0e:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <ARGB_Show_right+0x2a0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	3340      	adds	r3, #64	; 0x40
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R], (u32_t) PWM_BUF_RIGHT,
 8001a14:	461a      	mov	r2, r3
 8001a16:	2340      	movs	r3, #64	; 0x40
 8001a18:	f003 f88c 	bl	8004b34 <HAL_DMA_Start_IT>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d006      	beq.n	8001a30 <ARGB_Show_right+0x25c>
 8001a22:	e002      	b.n	8001a2a <ARGB_Show_right+0x256>
                DMA_Send_Stat = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
                continue;
 8001a28:	e081      	b.n	8001b2e <ARGB_Show_right+0x35a>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	73fb      	strb	r3, [r7, #15]
                continue;
 8001a2e:	e07e      	b.n	8001b2e <ARGB_Show_right+0x35a>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC_R);
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <ARGB_Show_right+0x2a0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <ARGB_Show_right+0x2a0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a3e:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <ARGB_Show_right+0x2a0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0f      	ldr	r2, [pc, #60]	; (8001a84 <ARGB_Show_right+0x2b0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d004      	beq.n	8001a54 <ARGB_Show_right+0x280>
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <ARGB_Show_right+0x2a0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a0e      	ldr	r2, [pc, #56]	; (8001a88 <ARGB_Show_right+0x2b4>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d11b      	bne.n	8001a8c <ARGB_Show_right+0x2b8>
 8001a54:	2301      	movs	r3, #1
 8001a56:	e01a      	b.n	8001a8e <ARGB_Show_right+0x2ba>
 8001a58:	20000591 	.word	0x20000591
 8001a5c:	2000058e 	.word	0x2000058e
 8001a60:	20001844 	.word	0x20001844
 8001a64:	20000238 	.word	0x20000238
 8001a68:	200000e0 	.word	0x200000e0
 8001a6c:	200000e1 	.word	0x200000e1
 8001a70:	2000048c 	.word	0x2000048c
 8001a74:	20001754 	.word	0x20001754
 8001a78:	08001e8d 	.word	0x08001e8d
 8001a7c:	08002335 	.word	0x08002335
 8001a80:	080086c3 	.word	0x080086c3
 8001a84:	40010000 	.word	0x40010000
 8001a88:	40010400 	.word	0x40010400
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d007      	beq.n	8001aa2 <ARGB_Show_right+0x2ce>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8001a92:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <ARGB_Show_right+0x374>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a98:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <ARGB_Show_right+0x374>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aa0:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001aa2:	4b29      	ldr	r3, [pc, #164]	; (8001b48 <ARGB_Show_right+0x374>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a29      	ldr	r2, [pc, #164]	; (8001b4c <ARGB_Show_right+0x378>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d022      	beq.n	8001af2 <ARGB_Show_right+0x31e>
 8001aac:	4b26      	ldr	r3, [pc, #152]	; (8001b48 <ARGB_Show_right+0x374>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab4:	d01d      	beq.n	8001af2 <ARGB_Show_right+0x31e>
 8001ab6:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <ARGB_Show_right+0x374>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a25      	ldr	r2, [pc, #148]	; (8001b50 <ARGB_Show_right+0x37c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d018      	beq.n	8001af2 <ARGB_Show_right+0x31e>
 8001ac0:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <ARGB_Show_right+0x374>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a23      	ldr	r2, [pc, #140]	; (8001b54 <ARGB_Show_right+0x380>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d013      	beq.n	8001af2 <ARGB_Show_right+0x31e>
 8001aca:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <ARGB_Show_right+0x374>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a22      	ldr	r2, [pc, #136]	; (8001b58 <ARGB_Show_right+0x384>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d00e      	beq.n	8001af2 <ARGB_Show_right+0x31e>
 8001ad4:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <ARGB_Show_right+0x374>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a20      	ldr	r2, [pc, #128]	; (8001b5c <ARGB_Show_right+0x388>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d009      	beq.n	8001af2 <ARGB_Show_right+0x31e>
 8001ade:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <ARGB_Show_right+0x374>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a1f      	ldr	r2, [pc, #124]	; (8001b60 <ARGB_Show_right+0x38c>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d004      	beq.n	8001af2 <ARGB_Show_right+0x31e>
 8001ae8:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <ARGB_Show_right+0x374>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a1d      	ldr	r2, [pc, #116]	; (8001b64 <ARGB_Show_right+0x390>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d111      	bne.n	8001b16 <ARGB_Show_right+0x342>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <ARGB_Show_right+0x374>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2b06      	cmp	r3, #6
 8001b02:	d011      	beq.n	8001b28 <ARGB_Show_right+0x354>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001b04:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <ARGB_Show_right+0x374>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <ARGB_Show_right+0x374>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001b14:	e008      	b.n	8001b28 <ARGB_Show_right+0x354>
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001b16:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <ARGB_Show_right+0x374>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <ARGB_Show_right+0x374>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f042 0201 	orr.w	r2, r2, #1
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	e000      	b.n	8001b2a <ARGB_Show_right+0x356>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001b28:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f47f af4a 	bne.w	80019ca <ARGB_Show_right+0x1f6>
        }
        BUF_COUNTER_RIGHT = 2;
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <ARGB_Show_right+0x394>)
 8001b38:	2202      	movs	r2, #2
 8001b3a:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e7ff      	b.n	8001b40 <ARGB_Show_right+0x36c>
    }
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20001754 	.word	0x20001754
 8001b4c:	40010000 	.word	0x40010000
 8001b50:	40000400 	.word	0x40000400
 8001b54:	40000800 	.word	0x40000800
 8001b58:	40000c00 	.word	0x40000c00
 8001b5c:	40010400 	.word	0x40010400
 8001b60:	40014000 	.word	0x40014000
 8001b64:	40001800 	.word	0x40001800
 8001b68:	2000058e 	.word	0x2000058e

08001b6c <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	460a      	mov	r2, r1
 8001b76:	71fb      	strb	r3, [r7, #7]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	79ba      	ldrb	r2, [r7, #6]
 8001b80:	fb02 f303 	mul.w	r3, r2, r3
 8001b84:	121b      	asrs	r3, r3, #8
 8001b86:	b2db      	uxtb	r3, r3
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <ARGB_TIM_DMADelayPulseCplt_left>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt_left(DMA_HandleTypeDef *hdma) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba0:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE_LEFT || htim != &TIM_HANDLE) return;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a8c      	ldr	r2, [pc, #560]	; (8001dd8 <ARGB_TIM_DMADelayPulseCplt_left+0x244>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	f040 8168 	bne.w	8001e7c <ARGB_TIM_DMADelayPulseCplt_left+0x2e8>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4a8b      	ldr	r2, [pc, #556]	; (8001ddc <ARGB_TIM_DMADelayPulseCplt_left+0x248>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	f040 8163 	bne.w	8001e7c <ARGB_TIM_DMADelayPulseCplt_left+0x2e8>
    if (BUF_COUNTER_LEFT == 0) return; // if no data to transmit - return
 8001bb6:	4b8a      	ldr	r3, [pc, #552]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 815f 	beq.w	8001e80 <ARGB_TIM_DMADelayPulseCplt_left+0x2ec>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d10b      	bne.n	8001be4 <ARGB_TIM_DMADelayPulseCplt_left+0x50>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d136      	bne.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001be2:	e031      	b.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d10b      	bne.n	8001c06 <ARGB_TIM_DMADelayPulseCplt_left+0x72>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d125      	bne.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c04:	e020      	b.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d10b      	bne.n	8001c28 <ARGB_TIM_DMADelayPulseCplt_left+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2204      	movs	r2, #4
 8001c14:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d114      	bne.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c26:	e00f      	b.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d10a      	bne.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2208      	movs	r2, #8
 8001c36:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d103      	bne.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER_LEFT < NUM_PIXELS) {
 8001c48:	4b65      	ldr	r3, [pc, #404]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	2b54      	cmp	r3, #84	; 0x54
 8001c50:	f200 8094 	bhi.w	8001d7c <ARGB_TIM_DMADelayPulseCplt_left+0x1e8>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001c54:	2300      	movs	r3, #0
 8001c56:	72fb      	strb	r3, [r7, #11]
 8001c58:	e083      	b.n	8001d62 <ARGB_TIM_DMADelayPulseCplt_left+0x1ce>
#ifdef SK6812
        	PWM_BUF_LEFT[i + 32] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001c5a:	4b61      	ldr	r3, [pc, #388]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4a60      	ldr	r2, [pc, #384]	; (8001de4 <ARGB_TIM_DMADelayPulseCplt_left+0x250>)
 8001c64:	5cd3      	ldrb	r3, [r2, r3]
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	7afb      	ldrb	r3, [r7, #11]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	dd04      	ble.n	8001c84 <ARGB_TIM_DMADelayPulseCplt_left+0xf0>
 8001c7a:	4b5b      	ldr	r3, [pc, #364]	; (8001de8 <ARGB_TIM_DMADelayPulseCplt_left+0x254>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	4619      	mov	r1, r3
 8001c82:	e003      	b.n	8001c8c <ARGB_TIM_DMADelayPulseCplt_left+0xf8>
 8001c84:	4b59      	ldr	r3, [pc, #356]	; (8001dec <ARGB_TIM_DMADelayPulseCplt_left+0x258>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	7afb      	ldrb	r3, [r7, #11]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	3320      	adds	r3, #32
 8001c92:	4a57      	ldr	r2, [pc, #348]	; (8001df0 <ARGB_TIM_DMADelayPulseCplt_left+0x25c>)
 8001c94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 40] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001c98:	4b51      	ldr	r3, [pc, #324]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	4a50      	ldr	r2, [pc, #320]	; (8001de4 <ARGB_TIM_DMADelayPulseCplt_left+0x250>)
 8001ca4:	5cd3      	ldrb	r3, [r2, r3]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	7afb      	ldrb	r3, [r7, #11]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	dd04      	ble.n	8001cc4 <ARGB_TIM_DMADelayPulseCplt_left+0x130>
 8001cba:	4b4b      	ldr	r3, [pc, #300]	; (8001de8 <ARGB_TIM_DMADelayPulseCplt_left+0x254>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	e003      	b.n	8001ccc <ARGB_TIM_DMADelayPulseCplt_left+0x138>
 8001cc4:	4b49      	ldr	r3, [pc, #292]	; (8001dec <ARGB_TIM_DMADelayPulseCplt_left+0x258>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	4619      	mov	r1, r3
 8001ccc:	7afb      	ldrb	r3, [r7, #11]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	3328      	adds	r3, #40	; 0x28
 8001cd2:	4a47      	ldr	r2, [pc, #284]	; (8001df0 <ARGB_TIM_DMADelayPulseCplt_left+0x25c>)
 8001cd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 48] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001cd8:	4b41      	ldr	r3, [pc, #260]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	4a40      	ldr	r2, [pc, #256]	; (8001de4 <ARGB_TIM_DMADelayPulseCplt_left+0x250>)
 8001ce4:	5cd3      	ldrb	r3, [r2, r3]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	7afb      	ldrb	r3, [r7, #11]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	dd04      	ble.n	8001d04 <ARGB_TIM_DMADelayPulseCplt_left+0x170>
 8001cfa:	4b3b      	ldr	r3, [pc, #236]	; (8001de8 <ARGB_TIM_DMADelayPulseCplt_left+0x254>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	4619      	mov	r1, r3
 8001d02:	e003      	b.n	8001d0c <ARGB_TIM_DMADelayPulseCplt_left+0x178>
 8001d04:	4b39      	ldr	r3, [pc, #228]	; (8001dec <ARGB_TIM_DMADelayPulseCplt_left+0x258>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	7afb      	ldrb	r3, [r7, #11]
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	3330      	adds	r3, #48	; 0x30
 8001d12:	4a37      	ldr	r2, [pc, #220]	; (8001df0 <ARGB_TIM_DMADelayPulseCplt_left+0x25c>)
 8001d14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 56] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001d18:	4b31      	ldr	r3, [pc, #196]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	3303      	adds	r3, #3
 8001d22:	4a30      	ldr	r2, [pc, #192]	; (8001de4 <ARGB_TIM_DMADelayPulseCplt_left+0x250>)
 8001d24:	5cd3      	ldrb	r3, [r2, r3]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	461a      	mov	r2, r3
 8001d2a:	7afb      	ldrb	r3, [r7, #11]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	dd04      	ble.n	8001d44 <ARGB_TIM_DMADelayPulseCplt_left+0x1b0>
 8001d3a:	4b2b      	ldr	r3, [pc, #172]	; (8001de8 <ARGB_TIM_DMADelayPulseCplt_left+0x254>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	4619      	mov	r1, r3
 8001d42:	e003      	b.n	8001d4c <ARGB_TIM_DMADelayPulseCplt_left+0x1b8>
 8001d44:	4b29      	ldr	r3, [pc, #164]	; (8001dec <ARGB_TIM_DMADelayPulseCplt_left+0x258>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	7afb      	ldrb	r3, [r7, #11]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	3338      	adds	r3, #56	; 0x38
 8001d52:	4a27      	ldr	r2, [pc, #156]	; (8001df0 <ARGB_TIM_DMADelayPulseCplt_left+0x25c>)
 8001d54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001d58:	7afb      	ldrb	r3, [r7, #11]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	72fb      	strb	r3, [r7, #11]
 8001d62:	7afb      	ldrb	r3, [r7, #11]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b07      	cmp	r3, #7
 8001d68:	f67f af77 	bls.w	8001c5a <ARGB_TIM_DMADelayPulseCplt_left+0xc6>
        	PWM_BUF_LEFT[i + 24] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_LEFT[i + 32] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_LEFT[i + 40] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        BUF_COUNTER_LEFT++;
 8001d6c:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	3301      	adds	r3, #1
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001d78:	801a      	strh	r2, [r3, #0]
 8001d7a:	e07b      	b.n	8001e74 <ARGB_TIM_DMADelayPulseCplt_left+0x2e0>
    } else if (BUF_COUNTER_LEFT < NUM_PIXELS + 2) { // if RET transfer
 8001d7c:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	2b56      	cmp	r3, #86	; 0x56
 8001d84:	d80c      	bhi.n	8001da0 <ARGB_TIM_DMADelayPulseCplt_left+0x20c>
        memset((dma_siz *) &PWM_BUF_LEFT[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 8001d86:	2280      	movs	r2, #128	; 0x80
 8001d88:	2100      	movs	r1, #0
 8001d8a:	481a      	ldr	r0, [pc, #104]	; (8001df4 <ARGB_TIM_DMADelayPulseCplt_left+0x260>)
 8001d8c:	f00f fae6 	bl	801135c <memset>
        BUF_COUNTER_LEFT++;
 8001d90:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	3301      	adds	r3, #1
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001d9c:	801a      	strh	r2, [r3, #0]
 8001d9e:	e069      	b.n	8001e74 <ARGB_TIM_DMADelayPulseCplt_left+0x2e0>
    } else { // if END of transfer
    	BUF_COUNTER_LEFT = 0;
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	801a      	strh	r2, [r3, #0]
#if TIM_CH_LEFT == TIM_CHANNEL_2
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
#endif
#if TIM_CH_LEFT == TIM_CHANNEL_3
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001db4:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f002 ff82 	bl	8004cc4 <HAL_DMA_Abort_IT>
#endif
#if TIM_CH_LEFT == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0c      	ldr	r2, [pc, #48]	; (8001df8 <ARGB_TIM_DMADelayPulseCplt_left+0x264>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d004      	beq.n	8001dd4 <ARGB_TIM_DMADelayPulseCplt_left+0x240>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <ARGB_TIM_DMADelayPulseCplt_left+0x268>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d115      	bne.n	8001e00 <ARGB_TIM_DMADelayPulseCplt_left+0x26c>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e014      	b.n	8001e02 <ARGB_TIM_DMADelayPulseCplt_left+0x26e>
 8001dd8:	200017e4 	.word	0x200017e4
 8001ddc:	20001754 	.word	0x20001754
 8001de0:	2000058c 	.word	0x2000058c
 8001de4:	200000e4 	.word	0x200000e4
 8001de8:	200000e0 	.word	0x200000e0
 8001dec:	200000e1 	.word	0x200000e1
 8001df0:	2000038c 	.word	0x2000038c
 8001df4:	2000040c 	.word	0x2000040c
 8001df8:	40010000 	.word	0x40010000
 8001dfc:	40010400 	.word	0x40010400
 8001e00:	2300      	movs	r3, #0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d017      	beq.n	8001e36 <ARGB_TIM_DMADelayPulseCplt_left+0x2a2>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6a1a      	ldr	r2, [r3, #32]
 8001e0c:	f241 1311 	movw	r3, #4369	; 0x1111
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10f      	bne.n	8001e36 <ARGB_TIM_DMADelayPulseCplt_left+0x2a2>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6a1a      	ldr	r2, [r3, #32]
 8001e1c:	f240 4344 	movw	r3, #1092	; 0x444
 8001e20:	4013      	ands	r3, r2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d107      	bne.n	8001e36 <ARGB_TIM_DMADelayPulseCplt_left+0x2a2>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e34:	645a      	str	r2, [r3, #68]	; 0x44
        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6a1a      	ldr	r2, [r3, #32]
 8001e3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10f      	bne.n	8001e66 <ARGB_TIM_DMADelayPulseCplt_left+0x2d2>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6a1a      	ldr	r2, [r3, #32]
 8001e4c:	f240 4344 	movw	r3, #1092	; 0x444
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d107      	bne.n	8001e66 <ARGB_TIM_DMADelayPulseCplt_left+0x2d2>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0201 	bic.w	r2, r2, #1
 8001e64:	601a      	str	r2, [r3, #0]
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH_LEFT, HAL_TIM_CHANNEL_STATE_READY);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        ARGB_LOC_ST_LEFT = ARGB_READY;
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <ARGB_TIM_DMADelayPulseCplt_left+0x2f4>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	771a      	strb	r2, [r3, #28]
 8001e7a:	e002      	b.n	8001e82 <ARGB_TIM_DMADelayPulseCplt_left+0x2ee>
    if (hdma != &DMA_HANDLE_LEFT || htim != &TIM_HANDLE) return;
 8001e7c:	bf00      	nop
 8001e7e:	e000      	b.n	8001e82 <ARGB_TIM_DMADelayPulseCplt_left+0x2ee>
    if (BUF_COUNTER_LEFT == 0) return; // if no data to transmit - return
 8001e80:	bf00      	nop
}
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000590 	.word	0x20000590

08001e8c <ARGB_TIM_DMADelayPulseCplt_right>:
// -----------------------------------------------------------------------
static void ARGB_TIM_DMADelayPulseCplt_right(DMA_HandleTypeDef *hdma) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e98:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE_RIGHT || htim != &TIM_HANDLE) return;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a8c      	ldr	r2, [pc, #560]	; (80020d0 <ARGB_TIM_DMADelayPulseCplt_right+0x244>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	f040 8168 	bne.w	8002174 <ARGB_TIM_DMADelayPulseCplt_right+0x2e8>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4a8b      	ldr	r2, [pc, #556]	; (80020d4 <ARGB_TIM_DMADelayPulseCplt_right+0x248>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	f040 8163 	bne.w	8002174 <ARGB_TIM_DMADelayPulseCplt_right+0x2e8>
    if (BUF_COUNTER_RIGHT == 0) return; // if no data to transmit - return    // ,<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 8001eae:	4b8a      	ldr	r3, [pc, #552]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 815f 	beq.w	8002178 <ARGB_TIM_DMADelayPulseCplt_right+0x2ec>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d10b      	bne.n	8001edc <ARGB_TIM_DMADelayPulseCplt_right+0x50>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d136      	bne.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001eda:	e031      	b.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d10b      	bne.n	8001efe <ARGB_TIM_DMADelayPulseCplt_right+0x72>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d125      	bne.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001efc:	e020      	b.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d10b      	bne.n	8001f20 <ARGB_TIM_DMADelayPulseCplt_right+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2204      	movs	r2, #4
 8001f0c:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d114      	bne.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f1e:	e00f      	b.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d10a      	bne.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2208      	movs	r2, #8
 8001f2e:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d103      	bne.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER_RIGHT < NUM_PIXELS) {
 8001f40:	4b65      	ldr	r3, [pc, #404]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	2b54      	cmp	r3, #84	; 0x54
 8001f48:	f200 8094 	bhi.w	8002074 <ARGB_TIM_DMADelayPulseCplt_right+0x1e8>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	72fb      	strb	r3, [r7, #11]
 8001f50:	e083      	b.n	800205a <ARGB_TIM_DMADelayPulseCplt_right+0x1ce>
#ifdef SK6812
        	PWM_BUF_RIGHT[i + 32] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001f52:	4b61      	ldr	r3, [pc, #388]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4a60      	ldr	r2, [pc, #384]	; (80020dc <ARGB_TIM_DMADelayPulseCplt_right+0x250>)
 8001f5c:	5cd3      	ldrb	r3, [r2, r3]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	7afb      	ldrb	r3, [r7, #11]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	dd04      	ble.n	8001f7c <ARGB_TIM_DMADelayPulseCplt_right+0xf0>
 8001f72:	4b5b      	ldr	r3, [pc, #364]	; (80020e0 <ARGB_TIM_DMADelayPulseCplt_right+0x254>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	4619      	mov	r1, r3
 8001f7a:	e003      	b.n	8001f84 <ARGB_TIM_DMADelayPulseCplt_right+0xf8>
 8001f7c:	4b59      	ldr	r3, [pc, #356]	; (80020e4 <ARGB_TIM_DMADelayPulseCplt_right+0x258>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	4619      	mov	r1, r3
 8001f84:	7afb      	ldrb	r3, [r7, #11]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	3320      	adds	r3, #32
 8001f8a:	4a57      	ldr	r2, [pc, #348]	; (80020e8 <ARGB_TIM_DMADelayPulseCplt_right+0x25c>)
 8001f8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 40] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001f90:	4b51      	ldr	r3, [pc, #324]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	3301      	adds	r3, #1
 8001f9a:	4a50      	ldr	r2, [pc, #320]	; (80020dc <ARGB_TIM_DMADelayPulseCplt_right+0x250>)
 8001f9c:	5cd3      	ldrb	r3, [r2, r3]
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	7afb      	ldrb	r3, [r7, #11]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	dd04      	ble.n	8001fbc <ARGB_TIM_DMADelayPulseCplt_right+0x130>
 8001fb2:	4b4b      	ldr	r3, [pc, #300]	; (80020e0 <ARGB_TIM_DMADelayPulseCplt_right+0x254>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	4619      	mov	r1, r3
 8001fba:	e003      	b.n	8001fc4 <ARGB_TIM_DMADelayPulseCplt_right+0x138>
 8001fbc:	4b49      	ldr	r3, [pc, #292]	; (80020e4 <ARGB_TIM_DMADelayPulseCplt_right+0x258>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	7afb      	ldrb	r3, [r7, #11]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	3328      	adds	r3, #40	; 0x28
 8001fca:	4a47      	ldr	r2, [pc, #284]	; (80020e8 <ARGB_TIM_DMADelayPulseCplt_right+0x25c>)
 8001fcc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 48] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001fd0:	4b41      	ldr	r3, [pc, #260]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	3302      	adds	r3, #2
 8001fda:	4a40      	ldr	r2, [pc, #256]	; (80020dc <ARGB_TIM_DMADelayPulseCplt_right+0x250>)
 8001fdc:	5cd3      	ldrb	r3, [r2, r3]
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	7afb      	ldrb	r3, [r7, #11]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	dd04      	ble.n	8001ffc <ARGB_TIM_DMADelayPulseCplt_right+0x170>
 8001ff2:	4b3b      	ldr	r3, [pc, #236]	; (80020e0 <ARGB_TIM_DMADelayPulseCplt_right+0x254>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	e003      	b.n	8002004 <ARGB_TIM_DMADelayPulseCplt_right+0x178>
 8001ffc:	4b39      	ldr	r3, [pc, #228]	; (80020e4 <ARGB_TIM_DMADelayPulseCplt_right+0x258>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	4619      	mov	r1, r3
 8002004:	7afb      	ldrb	r3, [r7, #11]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	3330      	adds	r3, #48	; 0x30
 800200a:	4a37      	ldr	r2, [pc, #220]	; (80020e8 <ARGB_TIM_DMADelayPulseCplt_right+0x25c>)
 800200c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 56] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002010:	4b31      	ldr	r3, [pc, #196]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	b29b      	uxth	r3, r3
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	3303      	adds	r3, #3
 800201a:	4a30      	ldr	r2, [pc, #192]	; (80020dc <ARGB_TIM_DMADelayPulseCplt_right+0x250>)
 800201c:	5cd3      	ldrb	r3, [r2, r3]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	461a      	mov	r2, r3
 8002022:	7afb      	ldrb	r3, [r7, #11]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202e:	2b00      	cmp	r3, #0
 8002030:	dd04      	ble.n	800203c <ARGB_TIM_DMADelayPulseCplt_right+0x1b0>
 8002032:	4b2b      	ldr	r3, [pc, #172]	; (80020e0 <ARGB_TIM_DMADelayPulseCplt_right+0x254>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	4619      	mov	r1, r3
 800203a:	e003      	b.n	8002044 <ARGB_TIM_DMADelayPulseCplt_right+0x1b8>
 800203c:	4b29      	ldr	r3, [pc, #164]	; (80020e4 <ARGB_TIM_DMADelayPulseCplt_right+0x258>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	4619      	mov	r1, r3
 8002044:	7afb      	ldrb	r3, [r7, #11]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	3338      	adds	r3, #56	; 0x38
 800204a:	4a27      	ldr	r2, [pc, #156]	; (80020e8 <ARGB_TIM_DMADelayPulseCplt_right+0x25c>)
 800204c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8002050:	7afb      	ldrb	r3, [r7, #11]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	3301      	adds	r3, #1
 8002056:	b2db      	uxtb	r3, r3
 8002058:	72fb      	strb	r3, [r7, #11]
 800205a:	7afb      	ldrb	r3, [r7, #11]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b07      	cmp	r3, #7
 8002060:	f67f af77 	bls.w	8001f52 <ARGB_TIM_DMADelayPulseCplt_right+0xc6>
        	PWM_BUF_RIGHT[i + 24] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_RIGHT[i + 32] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_RIGHT[i + 40] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        BUF_COUNTER_RIGHT++;
 8002064:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	b29b      	uxth	r3, r3
 800206a:	3301      	adds	r3, #1
 800206c:	b29a      	uxth	r2, r3
 800206e:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8002070:	801a      	strh	r2, [r3, #0]
 8002072:	e07b      	b.n	800216c <ARGB_TIM_DMADelayPulseCplt_right+0x2e0>
    } else if (BUF_COUNTER_RIGHT < NUM_PIXELS + 2) { // if RET transfer
 8002074:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	b29b      	uxth	r3, r3
 800207a:	2b56      	cmp	r3, #86	; 0x56
 800207c:	d80c      	bhi.n	8002098 <ARGB_TIM_DMADelayPulseCplt_right+0x20c>
        memset((dma_siz *) &PWM_BUF_RIGHT[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 800207e:	2280      	movs	r2, #128	; 0x80
 8002080:	2100      	movs	r1, #0
 8002082:	481a      	ldr	r0, [pc, #104]	; (80020ec <ARGB_TIM_DMADelayPulseCplt_right+0x260>)
 8002084:	f00f f96a 	bl	801135c <memset>
        BUF_COUNTER_RIGHT++;
 8002088:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	b29b      	uxth	r3, r3
 800208e:	3301      	adds	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8002094:	801a      	strh	r2, [r3, #0]
 8002096:	e069      	b.n	800216c <ARGB_TIM_DMADelayPulseCplt_right+0x2e0>
    } else { // if END of transfer
    	BUF_COUNTER_RIGHT = 0;
 8002098:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 800209a:	2200      	movs	r2, #0
 800209c:	801a      	strh	r2, [r3, #0]
#if TIM_CH_RIGHT == TIM_CHANNEL_3
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
#endif
#if TIM_CH_RIGHT == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020ac:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4618      	mov	r0, r3
 80020b4:	f002 fe06 	bl	8004cc4 <HAL_DMA_Abort_IT>
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0c      	ldr	r2, [pc, #48]	; (80020f0 <ARGB_TIM_DMADelayPulseCplt_right+0x264>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d004      	beq.n	80020cc <ARGB_TIM_DMADelayPulseCplt_right+0x240>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <ARGB_TIM_DMADelayPulseCplt_right+0x268>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d115      	bne.n	80020f8 <ARGB_TIM_DMADelayPulseCplt_right+0x26c>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e014      	b.n	80020fa <ARGB_TIM_DMADelayPulseCplt_right+0x26e>
 80020d0:	20001844 	.word	0x20001844
 80020d4:	20001754 	.word	0x20001754
 80020d8:	2000058e 	.word	0x2000058e
 80020dc:	20000238 	.word	0x20000238
 80020e0:	200000e0 	.word	0x200000e0
 80020e4:	200000e1 	.word	0x200000e1
 80020e8:	2000048c 	.word	0x2000048c
 80020ec:	2000050c 	.word	0x2000050c
 80020f0:	40010000 	.word	0x40010000
 80020f4:	40010400 	.word	0x40010400
 80020f8:	2300      	movs	r3, #0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d017      	beq.n	800212e <ARGB_TIM_DMADelayPulseCplt_right+0x2a2>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6a1a      	ldr	r2, [r3, #32]
 8002104:	f241 1311 	movw	r3, #4369	; 0x1111
 8002108:	4013      	ands	r3, r2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10f      	bne.n	800212e <ARGB_TIM_DMADelayPulseCplt_right+0x2a2>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6a1a      	ldr	r2, [r3, #32]
 8002114:	f240 4344 	movw	r3, #1092	; 0x444
 8002118:	4013      	ands	r3, r2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d107      	bne.n	800212e <ARGB_TIM_DMADelayPulseCplt_right+0x2a2>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800212c:	645a      	str	r2, [r3, #68]	; 0x44
        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6a1a      	ldr	r2, [r3, #32]
 8002134:	f241 1311 	movw	r3, #4369	; 0x1111
 8002138:	4013      	ands	r3, r2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10f      	bne.n	800215e <ARGB_TIM_DMADelayPulseCplt_right+0x2d2>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6a1a      	ldr	r2, [r3, #32]
 8002144:	f240 4344 	movw	r3, #1092	; 0x444
 8002148:	4013      	ands	r3, r2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d107      	bne.n	800215e <ARGB_TIM_DMADelayPulseCplt_right+0x2d2>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0201 	bic.w	r2, r2, #1
 800215c:	601a      	str	r2, [r3, #0]
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH_RIGHT, HAL_TIM_CHANNEL_STATE_READY);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        ARGB_LOC_ST_RIGHT = ARGB_READY;
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <ARGB_TIM_DMADelayPulseCplt_right+0x2f4>)
 8002168:	2201      	movs	r2, #1
 800216a:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	771a      	strb	r2, [r3, #28]
 8002172:	e002      	b.n	800217a <ARGB_TIM_DMADelayPulseCplt_right+0x2ee>
    if (hdma != &DMA_HANDLE_RIGHT || htim != &TIM_HANDLE) return;
 8002174:	bf00      	nop
 8002176:	e000      	b.n	800217a <ARGB_TIM_DMADelayPulseCplt_right+0x2ee>
    if (BUF_COUNTER_RIGHT == 0) return; // if no data to transmit - return    // ,<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 8002178:	bf00      	nop
}
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000591 	.word	0x20000591

08002184 <ARGB_TIM_DMADelayPulseHalfCplt_left>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt_left(DMA_HandleTypeDef *hdma) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002190:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE_LEFT || htim != &TIM_HANDLE) return;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a60      	ldr	r2, [pc, #384]	; (8002318 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x194>)
 8002196:	4293      	cmp	r3, r2
 8002198:	f040 80b7 	bne.w	800230a <ARGB_TIM_DMADelayPulseHalfCplt_left+0x186>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4a5f      	ldr	r2, [pc, #380]	; (800231c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x198>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	f040 80b2 	bne.w	800230a <ARGB_TIM_DMADelayPulseHalfCplt_left+0x186>
    if (BUF_COUNTER_LEFT == 0) return; // if no data to transmit - return
 80021a6:	4b5e      	ldr	r3, [pc, #376]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 80ae 	beq.w	800230e <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18a>
    // if data transfer
    if (BUF_COUNTER_LEFT < NUM_PIXELS) {
 80021b2:	4b5b      	ldr	r3, [pc, #364]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	2b54      	cmp	r3, #84	; 0x54
 80021ba:	f200 8094 	bhi.w	80022e6 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x162>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 80021be:	2300      	movs	r3, #0
 80021c0:	72fb      	strb	r3, [r7, #11]
 80021c2:	e083      	b.n	80022cc <ARGB_TIM_DMADelayPulseHalfCplt_left+0x148>
#ifdef SK6812
        	PWM_BUF_LEFT[i] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80021c4:	4b56      	ldr	r3, [pc, #344]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4a55      	ldr	r2, [pc, #340]	; (8002324 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a0>)
 80021ce:	5cd3      	ldrb	r3, [r2, r3]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	7afb      	ldrb	r3, [r7, #11]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	dd04      	ble.n	80021ee <ARGB_TIM_DMADelayPulseHalfCplt_left+0x6a>
 80021e4:	4b50      	ldr	r3, [pc, #320]	; (8002328 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a4>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	e003      	b.n	80021f6 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x72>
 80021ee:	4b4f      	ldr	r3, [pc, #316]	; (800232c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a8>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	7afb      	ldrb	r3, [r7, #11]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	4619      	mov	r1, r3
 80021fc:	4b4c      	ldr	r3, [pc, #304]	; (8002330 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 80021fe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        	PWM_BUF_LEFT[i + 8] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002202:	4b47      	ldr	r3, [pc, #284]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	3301      	adds	r3, #1
 800220c:	4a45      	ldr	r2, [pc, #276]	; (8002324 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a0>)
 800220e:	5cd3      	ldrb	r3, [r2, r3]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	461a      	mov	r2, r3
 8002214:	7afb      	ldrb	r3, [r7, #11]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002220:	2b00      	cmp	r3, #0
 8002222:	dd04      	ble.n	800222e <ARGB_TIM_DMADelayPulseHalfCplt_left+0xaa>
 8002224:	4b40      	ldr	r3, [pc, #256]	; (8002328 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a4>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	4619      	mov	r1, r3
 800222c:	e003      	b.n	8002236 <ARGB_TIM_DMADelayPulseHalfCplt_left+0xb2>
 800222e:	4b3f      	ldr	r3, [pc, #252]	; (800232c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a8>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	b2db      	uxtb	r3, r3
 8002234:	4619      	mov	r1, r3
 8002236:	7afb      	ldrb	r3, [r7, #11]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	3308      	adds	r3, #8
 800223c:	4a3c      	ldr	r2, [pc, #240]	; (8002330 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 800223e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 16] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002242:	4b37      	ldr	r3, [pc, #220]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	b29b      	uxth	r3, r3
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	3302      	adds	r3, #2
 800224c:	4a35      	ldr	r2, [pc, #212]	; (8002324 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a0>)
 800224e:	5cd3      	ldrb	r3, [r2, r3]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	461a      	mov	r2, r3
 8002254:	7afb      	ldrb	r3, [r7, #11]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002260:	2b00      	cmp	r3, #0
 8002262:	dd04      	ble.n	800226e <ARGB_TIM_DMADelayPulseHalfCplt_left+0xea>
 8002264:	4b30      	ldr	r3, [pc, #192]	; (8002328 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a4>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	4619      	mov	r1, r3
 800226c:	e003      	b.n	8002276 <ARGB_TIM_DMADelayPulseHalfCplt_left+0xf2>
 800226e:	4b2f      	ldr	r3, [pc, #188]	; (800232c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a8>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	4619      	mov	r1, r3
 8002276:	7afb      	ldrb	r3, [r7, #11]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	3310      	adds	r3, #16
 800227c:	4a2c      	ldr	r2, [pc, #176]	; (8002330 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 800227e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 24] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
 8002282:	4b27      	ldr	r3, [pc, #156]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	b29b      	uxth	r3, r3
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	3303      	adds	r3, #3
 800228c:	4a25      	ldr	r2, [pc, #148]	; (8002324 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a0>)
 800228e:	5cd3      	ldrb	r3, [r2, r3]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	7afb      	ldrb	r3, [r7, #11]
 8002296:	b2db      	uxtb	r3, r3
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	dd04      	ble.n	80022ae <ARGB_TIM_DMADelayPulseHalfCplt_left+0x12a>
 80022a4:	4b20      	ldr	r3, [pc, #128]	; (8002328 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a4>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	4619      	mov	r1, r3
 80022ac:	e003      	b.n	80022b6 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x132>
 80022ae:	4b1f      	ldr	r3, [pc, #124]	; (800232c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a8>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	4619      	mov	r1, r3
 80022b6:	7afb      	ldrb	r3, [r7, #11]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	3318      	adds	r3, #24
 80022bc:	4a1c      	ldr	r2, [pc, #112]	; (8002330 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 80022be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 80022c2:	7afb      	ldrb	r3, [r7, #11]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	3301      	adds	r3, #1
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	72fb      	strb	r3, [r7, #11]
 80022cc:	7afb      	ldrb	r3, [r7, #11]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b07      	cmp	r3, #7
 80022d2:	f67f af77 	bls.w	80021c4 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x40>
        	PWM_BUF_LEFT[i] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_LEFT[i + 8] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_LEFT[i + 16] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        BUF_COUNTER_LEFT++;
 80022d6:	4b12      	ldr	r3, [pc, #72]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	3301      	adds	r3, #1
 80022de:	b29a      	uxth	r2, r3
 80022e0:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80022e2:	801a      	strh	r2, [r3, #0]
 80022e4:	e014      	b.n	8002310 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18c>
    } else if (BUF_COUNTER_LEFT < NUM_PIXELS + 2) { // if RET transfer
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	2b56      	cmp	r3, #86	; 0x56
 80022ee:	d80f      	bhi.n	8002310 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18c>
        memset((dma_siz *) &PWM_BUF_LEFT[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 80022f0:	2280      	movs	r2, #128	; 0x80
 80022f2:	2100      	movs	r1, #0
 80022f4:	480e      	ldr	r0, [pc, #56]	; (8002330 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 80022f6:	f00f f831 	bl	801135c <memset>
        BUF_COUNTER_LEFT++;
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	3301      	adds	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8002306:	801a      	strh	r2, [r3, #0]
 8002308:	e002      	b.n	8002310 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18c>
    if (hdma != &DMA_HANDLE_LEFT || htim != &TIM_HANDLE) return;
 800230a:	bf00      	nop
 800230c:	e000      	b.n	8002310 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18c>
    if (BUF_COUNTER_LEFT == 0) return; // if no data to transmit - return
 800230e:	bf00      	nop
    }
}
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200017e4 	.word	0x200017e4
 800231c:	20001754 	.word	0x20001754
 8002320:	2000058c 	.word	0x2000058c
 8002324:	200000e4 	.word	0x200000e4
 8002328:	200000e0 	.word	0x200000e0
 800232c:	200000e1 	.word	0x200000e1
 8002330:	2000038c 	.word	0x2000038c

08002334 <ARGB_TIM_DMADelayPulseHalfCplt_right>:
// -----------------------------------------------------------------------------------
static void ARGB_TIM_DMADelayPulseHalfCplt_right(DMA_HandleTypeDef *hdma) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002340:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE_RIGHT || htim != &TIM_HANDLE) return;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a60      	ldr	r2, [pc, #384]	; (80024c8 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x194>)
 8002346:	4293      	cmp	r3, r2
 8002348:	f040 80b7 	bne.w	80024ba <ARGB_TIM_DMADelayPulseHalfCplt_right+0x186>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4a5f      	ldr	r2, [pc, #380]	; (80024cc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x198>)
 8002350:	4293      	cmp	r3, r2
 8002352:	f040 80b2 	bne.w	80024ba <ARGB_TIM_DMADelayPulseHalfCplt_right+0x186>
    if (BUF_COUNTER_RIGHT == 0) return; // if no data to transmit - return
 8002356:	4b5e      	ldr	r3, [pc, #376]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	b29b      	uxth	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80ae 	beq.w	80024be <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18a>
    // if data transfer
    if (BUF_COUNTER_RIGHT < NUM_PIXELS) {
 8002362:	4b5b      	ldr	r3, [pc, #364]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	2b54      	cmp	r3, #84	; 0x54
 800236a:	f200 8094 	bhi.w	8002496 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x162>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 800236e:	2300      	movs	r3, #0
 8002370:	72fb      	strb	r3, [r7, #11]
 8002372:	e083      	b.n	800247c <ARGB_TIM_DMADelayPulseHalfCplt_right+0x148>
#ifdef SK6812
        	PWM_BUF_RIGHT[i] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002374:	4b56      	ldr	r3, [pc, #344]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	b29b      	uxth	r3, r3
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4a55      	ldr	r2, [pc, #340]	; (80024d4 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a0>)
 800237e:	5cd3      	ldrb	r3, [r2, r3]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	461a      	mov	r2, r3
 8002384:	7afb      	ldrb	r3, [r7, #11]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002390:	2b00      	cmp	r3, #0
 8002392:	dd04      	ble.n	800239e <ARGB_TIM_DMADelayPulseHalfCplt_right+0x6a>
 8002394:	4b50      	ldr	r3, [pc, #320]	; (80024d8 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a4>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	b2db      	uxtb	r3, r3
 800239a:	461a      	mov	r2, r3
 800239c:	e003      	b.n	80023a6 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x72>
 800239e:	4b4f      	ldr	r3, [pc, #316]	; (80024dc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a8>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	7afb      	ldrb	r3, [r7, #11]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	4619      	mov	r1, r3
 80023ac:	4b4c      	ldr	r3, [pc, #304]	; (80024e0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 80023ae:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        	PWM_BUF_RIGHT[i + 8] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80023b2:	4b47      	ldr	r3, [pc, #284]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	3301      	adds	r3, #1
 80023bc:	4a45      	ldr	r2, [pc, #276]	; (80024d4 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a0>)
 80023be:	5cd3      	ldrb	r3, [r2, r3]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	461a      	mov	r2, r3
 80023c4:	7afb      	ldrb	r3, [r7, #11]
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	dd04      	ble.n	80023de <ARGB_TIM_DMADelayPulseHalfCplt_right+0xaa>
 80023d4:	4b40      	ldr	r3, [pc, #256]	; (80024d8 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a4>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	4619      	mov	r1, r3
 80023dc:	e003      	b.n	80023e6 <ARGB_TIM_DMADelayPulseHalfCplt_right+0xb2>
 80023de:	4b3f      	ldr	r3, [pc, #252]	; (80024dc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a8>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	4619      	mov	r1, r3
 80023e6:	7afb      	ldrb	r3, [r7, #11]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	3308      	adds	r3, #8
 80023ec:	4a3c      	ldr	r2, [pc, #240]	; (80024e0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 80023ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 16] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80023f2:	4b37      	ldr	r3, [pc, #220]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	3302      	adds	r3, #2
 80023fc:	4a35      	ldr	r2, [pc, #212]	; (80024d4 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a0>)
 80023fe:	5cd3      	ldrb	r3, [r2, r3]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	7afb      	ldrb	r3, [r7, #11]
 8002406:	b2db      	uxtb	r3, r3
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002410:	2b00      	cmp	r3, #0
 8002412:	dd04      	ble.n	800241e <ARGB_TIM_DMADelayPulseHalfCplt_right+0xea>
 8002414:	4b30      	ldr	r3, [pc, #192]	; (80024d8 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a4>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	4619      	mov	r1, r3
 800241c:	e003      	b.n	8002426 <ARGB_TIM_DMADelayPulseHalfCplt_right+0xf2>
 800241e:	4b2f      	ldr	r3, [pc, #188]	; (80024dc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a8>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	b2db      	uxtb	r3, r3
 8002424:	4619      	mov	r1, r3
 8002426:	7afb      	ldrb	r3, [r7, #11]
 8002428:	b2db      	uxtb	r3, r3
 800242a:	3310      	adds	r3, #16
 800242c:	4a2c      	ldr	r2, [pc, #176]	; (80024e0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 800242e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 24] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
 8002432:	4b27      	ldr	r3, [pc, #156]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	3303      	adds	r3, #3
 800243c:	4a25      	ldr	r2, [pc, #148]	; (80024d4 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a0>)
 800243e:	5cd3      	ldrb	r3, [r2, r3]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	461a      	mov	r2, r3
 8002444:	7afb      	ldrb	r3, [r7, #11]
 8002446:	b2db      	uxtb	r3, r3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002450:	2b00      	cmp	r3, #0
 8002452:	dd04      	ble.n	800245e <ARGB_TIM_DMADelayPulseHalfCplt_right+0x12a>
 8002454:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a4>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	4619      	mov	r1, r3
 800245c:	e003      	b.n	8002466 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x132>
 800245e:	4b1f      	ldr	r3, [pc, #124]	; (80024dc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a8>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	4619      	mov	r1, r3
 8002466:	7afb      	ldrb	r3, [r7, #11]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	3318      	adds	r3, #24
 800246c:	4a1c      	ldr	r2, [pc, #112]	; (80024e0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 800246e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8002472:	7afb      	ldrb	r3, [r7, #11]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	3301      	adds	r3, #1
 8002478:	b2db      	uxtb	r3, r3
 800247a:	72fb      	strb	r3, [r7, #11]
 800247c:	7afb      	ldrb	r3, [r7, #11]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b07      	cmp	r3, #7
 8002482:	f67f af77 	bls.w	8002374 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x40>
        	PWM_BUF_RIGHT[i] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_RIGHT[i + 8] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_RIGHT[i + 16] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        BUF_COUNTER_RIGHT++;
 8002486:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	b29b      	uxth	r3, r3
 800248c:	3301      	adds	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002492:	801a      	strh	r2, [r3, #0]
 8002494:	e014      	b.n	80024c0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18c>
    } else if (BUF_COUNTER_RIGHT < NUM_PIXELS + 2) { // if RET transfer
 8002496:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	b29b      	uxth	r3, r3
 800249c:	2b56      	cmp	r3, #86	; 0x56
 800249e:	d80f      	bhi.n	80024c0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18c>
        memset((dma_siz *) &PWM_BUF_RIGHT[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 80024a0:	2280      	movs	r2, #128	; 0x80
 80024a2:	2100      	movs	r1, #0
 80024a4:	480e      	ldr	r0, [pc, #56]	; (80024e0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 80024a6:	f00e ff59 	bl	801135c <memset>
        BUF_COUNTER_RIGHT++;
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3301      	adds	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 80024b6:	801a      	strh	r2, [r3, #0]
 80024b8:	e002      	b.n	80024c0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18c>
    if (hdma != &DMA_HANDLE_RIGHT || htim != &TIM_HANDLE) return;
 80024ba:	bf00      	nop
 80024bc:	e000      	b.n	80024c0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18c>
    if (BUF_COUNTER_RIGHT == 0) return; // if no data to transmit - return
 80024be:	bf00      	nop
    }
}
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20001844 	.word	0x20001844
 80024cc:	20001754 	.word	0x20001754
 80024d0:	2000058e 	.word	0x2000058e
 80024d4:	20000238 	.word	0x20000238
 80024d8:	200000e0 	.word	0x200000e0
 80024dc:	200000e1 	.word	0x200000e1
 80024e0:	2000048c 	.word	0x2000048c

080024e4 <turn_off_left_stript>:

#include "light/led_stript/ARGB.h"

// -----------------------------------------------------------------------------------------------------
void turn_off_left_stript(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
	ARGB_Clear_left(); 			// Clear stirp
 80024e8:	f7fe fdc8 	bl	800107c <ARGB_Clear_left>
	while (ARGB_Show_left() != ARGB_OK); // Update - Option 1
 80024ec:	bf00      	nop
 80024ee:	f7fe ffa5 	bl	800143c <ARGB_Show_left>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d1fa      	bne.n	80024ee <turn_off_left_stript+0xa>
}
 80024f8:	bf00      	nop
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}

080024fe <turn_off_right_stript>:
// -----------------------------------------------------------------------------------------------------
void turn_off_right_stript(void)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	af00      	add	r7, sp, #0
	ARGB_Clear_right();
 8002502:	f7fe fdc7 	bl	8001094 <ARGB_Clear_right>
	while (ARGB_Show_right() != ARGB_OK); // Update - Option 1
 8002506:	bf00      	nop
 8002508:	f7ff f964 	bl	80017d4 <ARGB_Show_right>
 800250c:	4603      	mov	r3, r0
 800250e:	2b02      	cmp	r3, #2
 8002510:	d1fa      	bne.n	8002508 <turn_off_right_stript+0xa>
}
 8002512:	bf00      	nop
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}

08002518 <turn_off_left_and_right_dtript>:
// -----------------------------------------------------------------------------------------------------
void turn_off_left_and_right_dtript(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
	turn_off_left_stript();
 800251c:	f7ff ffe2 	bl	80024e4 <turn_off_left_stript>
	turn_off_right_stript();
 8002520:	f7ff ffed 	bl	80024fe <turn_off_right_stript>
}
 8002524:	bf00      	nop
 8002526:	bd80      	pop	{r7, pc}

08002528 <turn_all_leds_from_centr>:
	}
	while (!ARGB_Show_right());  // Update
}
// -----------------------------------------------------------------------------------------------------
void turn_all_leds_from_centr(u8_t delay, u8_t r, u8_t g, u8_t b)
{
 8002528:	b590      	push	{r4, r7, lr}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	4604      	mov	r4, r0
 8002530:	4608      	mov	r0, r1
 8002532:	4611      	mov	r1, r2
 8002534:	461a      	mov	r2, r3
 8002536:	4623      	mov	r3, r4
 8002538:	71fb      	strb	r3, [r7, #7]
 800253a:	4603      	mov	r3, r0
 800253c:	71bb      	strb	r3, [r7, #6]
 800253e:	460b      	mov	r3, r1
 8002540:	717b      	strb	r3, [r7, #5]
 8002542:	4613      	mov	r3, r2
 8002544:	713b      	strb	r3, [r7, #4]
	uint8_t i =0;
 8002546:	2300      	movs	r3, #0
 8002548:	73fb      	strb	r3, [r7, #15]
	// turn_off_left_stript();

	for( i = 84; i >= 43; i--)
 800254a:	2354      	movs	r3, #84	; 0x54
 800254c:	73fb      	strb	r3, [r7, #15]
 800254e:	e034      	b.n	80025ba <turn_all_leds_from_centr+0x92>
	{
		ARGB_SetRGB_left(i, r, g, b);			// High side
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	b298      	uxth	r0, r3
 8002554:	793b      	ldrb	r3, [r7, #4]
 8002556:	797a      	ldrb	r2, [r7, #5]
 8002558:	79b9      	ldrb	r1, [r7, #6]
 800255a:	f7fe fdb7 	bl	80010cc <ARGB_SetRGB_left>
		ARGB_SetRGB_right(i, r, g, b);
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	b298      	uxth	r0, r3
 8002562:	793b      	ldrb	r3, [r7, #4]
 8002564:	797a      	ldrb	r2, [r7, #5]
 8002566:	79b9      	ldrb	r1, [r7, #6]
 8002568:	f7fe fe2a 	bl	80011c0 <ARGB_SetRGB_right>

		ARGB_SetRGB_left((85 - i), r, g, b);
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	b29b      	uxth	r3, r3
 8002570:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
 8002574:	b298      	uxth	r0, r3
 8002576:	793b      	ldrb	r3, [r7, #4]
 8002578:	797a      	ldrb	r2, [r7, #5]
 800257a:	79b9      	ldrb	r1, [r7, #6]
 800257c:	f7fe fda6 	bl	80010cc <ARGB_SetRGB_left>
		ARGB_SetRGB_right((85 - i), r, g, b);
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	b29b      	uxth	r3, r3
 8002584:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
 8002588:	b298      	uxth	r0, r3
 800258a:	793b      	ldrb	r3, [r7, #4]
 800258c:	797a      	ldrb	r2, [r7, #5]
 800258e:	79b9      	ldrb	r1, [r7, #6]
 8002590:	f7fe fe16 	bl	80011c0 <ARGB_SetRGB_right>

		while (!ARGB_Show_left());  // Update
 8002594:	bf00      	nop
 8002596:	f7fe ff51 	bl	800143c <ARGB_Show_left>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0fa      	beq.n	8002596 <turn_all_leds_from_centr+0x6e>
		while (!ARGB_Show_right());  // Update
 80025a0:	bf00      	nop
 80025a2:	f7ff f917 	bl	80017d4 <ARGB_Show_right>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0fa      	beq.n	80025a2 <turn_all_leds_from_centr+0x7a>
		HAL_Delay(delay);
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f002 f8dc 	bl	800476c <HAL_Delay>
	for( i = 84; i >= 43; i--)
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	2b2a      	cmp	r3, #42	; 0x2a
 80025be:	d8c7      	bhi.n	8002550 <turn_all_leds_from_centr+0x28>
	}
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd90      	pop	{r4, r7, pc}

080025ca <set_left_one_rgbw_led>:
// -----------------------------------------------------------------------------------------------------
void set_left_one_rgbw_led(uint8_t position, u8_t r, u8_t g, u8_t b, u8_t w)
{
 80025ca:	b590      	push	{r4, r7, lr}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	4604      	mov	r4, r0
 80025d2:	4608      	mov	r0, r1
 80025d4:	4611      	mov	r1, r2
 80025d6:	461a      	mov	r2, r3
 80025d8:	4623      	mov	r3, r4
 80025da:	71fb      	strb	r3, [r7, #7]
 80025dc:	4603      	mov	r3, r0
 80025de:	71bb      	strb	r3, [r7, #6]
 80025e0:	460b      	mov	r3, r1
 80025e2:	717b      	strb	r3, [r7, #5]
 80025e4:	4613      	mov	r3, r2
 80025e6:	713b      	strb	r3, [r7, #4]
	ARGB_SetRGB_left(position, r, g, b);
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	b298      	uxth	r0, r3
 80025ec:	793b      	ldrb	r3, [r7, #4]
 80025ee:	797a      	ldrb	r2, [r7, #5]
 80025f0:	79b9      	ldrb	r1, [r7, #6]
 80025f2:	f7fe fd6b 	bl	80010cc <ARGB_SetRGB_left>
	ARGB_SetWhite_left(position, w);
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	7e3a      	ldrb	r2, [r7, #24]
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fe58 	bl	80012b4 <ARGB_SetWhite_left>
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	bd90      	pop	{r4, r7, pc}

0800260c <set_right_one_rgbw_led>:
// -----------------------------------------------------------------------------------------------------
void set_right_one_rgbw_led(uint8_t position, u8_t r, u8_t g, u8_t b, u8_t w)
{
 800260c:	b590      	push	{r4, r7, lr}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4604      	mov	r4, r0
 8002614:	4608      	mov	r0, r1
 8002616:	4611      	mov	r1, r2
 8002618:	461a      	mov	r2, r3
 800261a:	4623      	mov	r3, r4
 800261c:	71fb      	strb	r3, [r7, #7]
 800261e:	4603      	mov	r3, r0
 8002620:	71bb      	strb	r3, [r7, #6]
 8002622:	460b      	mov	r3, r1
 8002624:	717b      	strb	r3, [r7, #5]
 8002626:	4613      	mov	r3, r2
 8002628:	713b      	strb	r3, [r7, #4]
	ARGB_SetRGB_right(position, r, g, b);
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	b298      	uxth	r0, r3
 800262e:	793b      	ldrb	r3, [r7, #4]
 8002630:	797a      	ldrb	r2, [r7, #5]
 8002632:	79b9      	ldrb	r1, [r7, #6]
 8002634:	f7fe fdc4 	bl	80011c0 <ARGB_SetRGB_right>
	ARGB_SetWhite_right(position, w);
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	b29b      	uxth	r3, r3
 800263c:	7e3a      	ldrb	r2, [r7, #24]
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe fe5b 	bl	80012fc <ARGB_SetWhite_right>
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	bd90      	pop	{r4, r7, pc}
	...

08002650 <init_tim_13>:
static void MX_TIM13_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
void init_tim_13(int msec)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
	msec = msec*10;
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_AUTORELOAD(&htim13, msec-1);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	1e5a      	subs	r2, r3, #1
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <init_tim_13+0x38>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	62da      	str	r2, [r3, #44]	; 0x2c
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3b01      	subs	r3, #1
 8002672:	461a      	mov	r2, r3
 8002674:	4b04      	ldr	r3, [pc, #16]	; (8002688 <init_tim_13+0x38>)
 8002676:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Start_IT(&htim13);
 8002678:	4803      	ldr	r0, [pc, #12]	; (8002688 <init_tim_13+0x38>)
 800267a:	f005 fb67 	bl	8007d4c <HAL_TIM_Base_Start_IT>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	2000179c 	.word	0x2000179c

0800268c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800268c:	b5b0      	push	{r4, r5, r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002692:	f001 fff9 	bl	8004688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002696:	f000 f90b 	bl	80028b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800269a:	f000 fcad 	bl	8002ff8 <MX_GPIO_Init>
  MX_DMA_Init();
 800269e:	f000 fc83 	bl	8002fa8 <MX_DMA_Init>
  MX_USB_HOST_Init();
 80026a2:	f00e fb19 	bl	8010cd8 <MX_USB_HOST_Init>
  MX_USART3_UART_Init();
 80026a6:	f000 fc55 	bl	8002f54 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80026aa:	f000 f96b 	bl	8002984 <MX_SPI1_Init>
  MX_FATFS_Init();
 80026ae:	f008 fce5 	bl	800b07c <MX_FATFS_Init>
  MX_TIM2_Init();
 80026b2:	f000 f99d 	bl	80029f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80026b6:	f000 fa31 	bl	8002b1c <MX_TIM3_Init>
  MX_TIM4_Init();
 80026ba:	f000 fac7 	bl	8002c4c <MX_TIM4_Init>
  MX_TIM8_Init();
 80026be:	f000 fb95 	bl	8002dec <MX_TIM8_Init>
  MX_TIM5_Init();
 80026c2:	f000 fb45 	bl	8002d50 <MX_TIM5_Init>
  MX_TIM13_Init();
 80026c6:	f000 fc21 	bl	8002f0c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(100);
 80026ca:	2064      	movs	r0, #100	; 0x64
 80026cc:	f002 f84e 	bl	800476c <HAL_Delay>

  // LEDs //////////////////////////////////////////////////////////////////
  ARGB_SetBrightness(255); 					 	// Set global brightness to 100%
 80026d0:	20ff      	movs	r0, #255	; 0xff
 80026d2:	f7fe fceb 	bl	80010ac <ARGB_SetBrightness>
  ARGB_Init();  								// Initialization
 80026d6:	f7fe fc4f 	bl	8000f78 <ARGB_Init>
  turn_off_left_and_right_dtript();
 80026da:	f7ff ff1d 	bl	8002518 <turn_off_left_and_right_dtript>
  //////////////////////////////////////////////////////////////////////////

  // SD Card //////////////////////////////////////////////////////////////
  char msg_buf[30] = {0};
 80026de:	2300      	movs	r3, #0
 80026e0:	603b      	str	r3, [r7, #0]
 80026e2:	1d3b      	adds	r3, r7, #4
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]
 80026f0:	615a      	str	r2, [r3, #20]
 80026f2:	831a      	strh	r2, [r3, #24]
  if(disk_initialize(SDFatFs. drv) != 0)
 80026f4:	4b60      	ldr	r3, [pc, #384]	; (8002878 <main+0x1ec>)
 80026f6:	785b      	ldrb	r3, [r3, #1]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f00a fdd7 	bl	800d2ac <disk_initialize>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d023      	beq.n	800274c <main+0xc0>
  {
	  while(1)
	  {
		  strcat(msg_buf, "\n\r-> ERROR: NO SD CARD! \n\r");
 8002704:	463b      	mov	r3, r7
 8002706:	4618      	mov	r0, r3
 8002708:	f7fd fd62 	bl	80001d0 <strlen>
 800270c:	4603      	mov	r3, r0
 800270e:	461a      	mov	r2, r3
 8002710:	463b      	mov	r3, r7
 8002712:	4413      	add	r3, r2
 8002714:	4a59      	ldr	r2, [pc, #356]	; (800287c <main+0x1f0>)
 8002716:	461d      	mov	r5, r3
 8002718:	4614      	mov	r4, r2
 800271a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800271c:	6028      	str	r0, [r5, #0]
 800271e:	6069      	str	r1, [r5, #4]
 8002720:	60aa      	str	r2, [r5, #8]
 8002722:	60eb      	str	r3, [r5, #12]
 8002724:	cc03      	ldmia	r4!, {r0, r1}
 8002726:	6128      	str	r0, [r5, #16]
 8002728:	6169      	str	r1, [r5, #20]
 800272a:	8823      	ldrh	r3, [r4, #0]
 800272c:	78a2      	ldrb	r2, [r4, #2]
 800272e:	832b      	strh	r3, [r5, #24]
 8002730:	4613      	mov	r3, r2
 8002732:	76ab      	strb	r3, [r5, #26]
		  HAL_UART_Transmit_IT(&huart3, msg_buf, sizeof(msg_buf));
 8002734:	463b      	mov	r3, r7
 8002736:	221e      	movs	r2, #30
 8002738:	4619      	mov	r1, r3
 800273a:	4851      	ldr	r0, [pc, #324]	; (8002880 <main+0x1f4>)
 800273c:	f006 fcdb 	bl	80090f6 <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 8002740:	2064      	movs	r0, #100	; 0x64
 8002742:	f002 f813 	bl	800476c <HAL_Delay>

		  all_leds_animantion_error_state();
 8002746:	f000 fe29 	bl	800339c <all_leds_animantion_error_state>
		  strcat(msg_buf, "\n\r-> ERROR: NO SD CARD! \n\r");
 800274a:	e7db      	b.n	8002704 <main+0x78>
	  }
  }
  else
  {
	  SD_SPI_GetFileInfo();
 800274c:	f001 fc54 	bl	8003ff8 <SD_SPI_GetFileInfo>
	  FATFS_UnLinkDriver(USER_Path);
 8002750:	484c      	ldr	r0, [pc, #304]	; (8002884 <main+0x1f8>)
 8002752:	f00e f9ed 	bl	8010b30 <FATFS_UnLinkDriver>

	  all_leds_animantion_ok_state();
 8002756:	f000 fe09 	bl	800336c <all_leds_animantion_ok_state>
  }
  //////////////////////////////////////////////////////////////////////////

  // UART //////////////////////////////////////////////////////////////////
  HAL_Delay(100);
 800275a:	2064      	movs	r0, #100	; 0x64
 800275c:	f002 f806 	bl	800476c <HAL_Delay>
  HAL_UART_Receive_IT(&huart3, &uart_RX_data, sizeof(uart_RX_data));		// Turn on receive on byte from UART in interrupt mode
 8002760:	2201      	movs	r2, #1
 8002762:	4949      	ldr	r1, [pc, #292]	; (8002888 <main+0x1fc>)
 8002764:	4846      	ldr	r0, [pc, #280]	; (8002880 <main+0x1f4>)
 8002766:	f006 fd0b 	bl	8009180 <HAL_UART_Receive_IT>
  //////////////////////////////////////////////////////////////////////////

  HAL_TIM_Base_Start_IT(&htim5);       										//використати цей таймер для синхронізації
 800276a:	4848      	ldr	r0, [pc, #288]	; (800288c <main+0x200>)
 800276c:	f005 faee 	bl	8007d4c <HAL_TIM_Base_Start_IT>

  init_tim_13(33);				// Set value in milisecond
 8002770:	2021      	movs	r0, #33	; 0x21
 8002772:	f7ff ff6d 	bl	8002650 <init_tim_13>
  while (1)
  {
	  //test_double_buffer();
	  //test_function_generate_delay();

	  if(flag_received_command == true)
 8002776:	4b46      	ldr	r3, [pc, #280]	; (8002890 <main+0x204>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d079      	beq.n	8002872 <main+0x1e6>
	  {
		  static char buf_str[10] = {0};
		  static bool flag_firt_command = true;

		  if(flag_firt_command == true)											// Read file first time
 800277e:	4b45      	ldr	r3, [pc, #276]	; (8002894 <main+0x208>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d018      	beq.n	80027b8 <main+0x12c>
		  {
			  memset(buf_str, 0, sizeof(buf_str));
 8002786:	220a      	movs	r2, #10
 8002788:	2100      	movs	r1, #0
 800278a:	4843      	ldr	r0, [pc, #268]	; (8002898 <main+0x20c>)
 800278c:	f00e fde6 	bl	801135c <memset>
			  strcat(buf_str, rx_buf_command);
 8002790:	4942      	ldr	r1, [pc, #264]	; (800289c <main+0x210>)
 8002792:	4841      	ldr	r0, [pc, #260]	; (8002898 <main+0x20c>)
 8002794:	f00e fefa 	bl	801158c <strcat>
			  strcat(buf_str, ".bin");
 8002798:	483f      	ldr	r0, [pc, #252]	; (8002898 <main+0x20c>)
 800279a:	f7fd fd19 	bl	80001d0 <strlen>
 800279e:	4603      	mov	r3, r0
 80027a0:	461a      	mov	r2, r3
 80027a2:	4b3d      	ldr	r3, [pc, #244]	; (8002898 <main+0x20c>)
 80027a4:	4413      	add	r3, r2
 80027a6:	4a3e      	ldr	r2, [pc, #248]	; (80028a0 <main+0x214>)
 80027a8:	6810      	ldr	r0, [r2, #0]
 80027aa:	6018      	str	r0, [r3, #0]
 80027ac:	7912      	ldrb	r2, [r2, #4]
 80027ae:	711a      	strb	r2, [r3, #4]
			  flag_firt_command = false;
 80027b0:	4b38      	ldr	r3, [pc, #224]	; (8002894 <main+0x208>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
 80027b6:	e05c      	b.n	8002872 <main+0x1e6>
		  }
		  else
		  {
			  static bool print_flag = true;

			  if(open_bin_file(buf_str) == 0)										// Read file
 80027b8:	4837      	ldr	r0, [pc, #220]	; (8002898 <main+0x20c>)
 80027ba:	f001 fd19 	bl	80041f0 <open_bin_file>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d12a      	bne.n	800281a <main+0x18e>
			  {
				  if(print_flag == true)											// Print only one time
 80027c4:	4b37      	ldr	r3, [pc, #220]	; (80028a4 <main+0x218>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d052      	beq.n	8002872 <main+0x1e6>
				  {
					  memset(msg_buf, 0, sizeof(msg_buf));
 80027cc:	463b      	mov	r3, r7
 80027ce:	221e      	movs	r2, #30
 80027d0:	2100      	movs	r1, #0
 80027d2:	4618      	mov	r0, r3
 80027d4:	f00e fdc2 	bl	801135c <memset>
					  strcat(msg_buf, rx_buf_command);
 80027d8:	463b      	mov	r3, r7
 80027da:	4930      	ldr	r1, [pc, #192]	; (800289c <main+0x210>)
 80027dc:	4618      	mov	r0, r3
 80027de:	f00e fed5 	bl	801158c <strcat>
					  strcat(msg_buf, ": working...  \n\r");
 80027e2:	463b      	mov	r3, r7
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fd fcf3 	bl	80001d0 <strlen>
 80027ea:	4603      	mov	r3, r0
 80027ec:	461a      	mov	r2, r3
 80027ee:	463b      	mov	r3, r7
 80027f0:	4413      	add	r3, r2
 80027f2:	4a2d      	ldr	r2, [pc, #180]	; (80028a8 <main+0x21c>)
 80027f4:	461d      	mov	r5, r3
 80027f6:	4614      	mov	r4, r2
 80027f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027fa:	6028      	str	r0, [r5, #0]
 80027fc:	6069      	str	r1, [r5, #4]
 80027fe:	60aa      	str	r2, [r5, #8]
 8002800:	60eb      	str	r3, [r5, #12]
 8002802:	7823      	ldrb	r3, [r4, #0]
 8002804:	742b      	strb	r3, [r5, #16]
					  HAL_UART_Transmit_IT(&huart3, msg_buf, sizeof(msg_buf));
 8002806:	463b      	mov	r3, r7
 8002808:	221e      	movs	r2, #30
 800280a:	4619      	mov	r1, r3
 800280c:	481c      	ldr	r0, [pc, #112]	; (8002880 <main+0x1f4>)
 800280e:	f006 fc72 	bl	80090f6 <HAL_UART_Transmit_IT>

					  print_flag = false;
 8002812:	4b24      	ldr	r3, [pc, #144]	; (80028a4 <main+0x218>)
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
 8002818:	e02b      	b.n	8002872 <main+0x1e6>
				  }
			  }
			  else																	// Print "DONE" if all file was read
			  {
				  memset(rx_buf_command, 0, sizeof(rx_buf_command));
 800281a:	220a      	movs	r2, #10
 800281c:	2100      	movs	r1, #0
 800281e:	481f      	ldr	r0, [pc, #124]	; (800289c <main+0x210>)
 8002820:	f00e fd9c 	bl	801135c <memset>
				  memset(msg_buf, 0, sizeof(msg_buf));
 8002824:	463b      	mov	r3, r7
 8002826:	221e      	movs	r2, #30
 8002828:	2100      	movs	r1, #0
 800282a:	4618      	mov	r0, r3
 800282c:	f00e fd96 	bl	801135c <memset>
				  strcat(msg_buf, "\n\r DONE \n\r");
 8002830:	463b      	mov	r3, r7
 8002832:	4618      	mov	r0, r3
 8002834:	f7fd fccc 	bl	80001d0 <strlen>
 8002838:	4603      	mov	r3, r0
 800283a:	461a      	mov	r2, r3
 800283c:	463b      	mov	r3, r7
 800283e:	4413      	add	r3, r2
 8002840:	491a      	ldr	r1, [pc, #104]	; (80028ac <main+0x220>)
 8002842:	461a      	mov	r2, r3
 8002844:	460b      	mov	r3, r1
 8002846:	cb03      	ldmia	r3!, {r0, r1}
 8002848:	6010      	str	r0, [r2, #0]
 800284a:	6051      	str	r1, [r2, #4]
 800284c:	8819      	ldrh	r1, [r3, #0]
 800284e:	789b      	ldrb	r3, [r3, #2]
 8002850:	8111      	strh	r1, [r2, #8]
 8002852:	7293      	strb	r3, [r2, #10]
				  HAL_UART_Transmit_IT(&huart3, msg_buf, sizeof(msg_buf));
 8002854:	463b      	mov	r3, r7
 8002856:	221e      	movs	r2, #30
 8002858:	4619      	mov	r1, r3
 800285a:	4809      	ldr	r0, [pc, #36]	; (8002880 <main+0x1f4>)
 800285c:	f006 fc4b 	bl	80090f6 <HAL_UART_Transmit_IT>

				  flag_received_command = false;									// Out
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <main+0x204>)
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]
				  flag_firt_command = true;
 8002866:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <main+0x208>)
 8002868:	2201      	movs	r2, #1
 800286a:	701a      	strb	r2, [r3, #0]
				  print_flag = true;
 800286c:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <main+0x218>)
 800286e:	2201      	movs	r2, #1
 8002870:	701a      	strb	r2, [r3, #0]
//	  HAL_Delay(1000);
	  //


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8002872:	f00e fa57 	bl	8010d24 <MX_USB_HOST_Process>
	  if(flag_received_command == true)
 8002876:	e77e      	b.n	8002776 <main+0xea>
 8002878:	20000594 	.word	0x20000594
 800287c:	08011c80 	.word	0x08011c80
 8002880:	200018a4 	.word	0x200018a4
 8002884:	200018f8 	.word	0x200018f8
 8002888:	200015cc 	.word	0x200015cc
 800288c:	2000170c 	.word	0x2000170c
 8002890:	200015cd 	.word	0x200015cd
 8002894:	20000001 	.word	0x20000001
 8002898:	200018e8 	.word	0x200018e8
 800289c:	200015d0 	.word	0x200015d0
 80028a0:	08011c9c 	.word	0x08011c9c
 80028a4:	20000002 	.word	0x20000002
 80028a8:	08011ca4 	.word	0x08011ca4
 80028ac:	08011cb8 	.word	0x08011cb8

080028b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b094      	sub	sp, #80	; 0x50
 80028b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028b6:	f107 0320 	add.w	r3, r7, #32
 80028ba:	2230      	movs	r2, #48	; 0x30
 80028bc:	2100      	movs	r1, #0
 80028be:	4618      	mov	r0, r3
 80028c0:	f00e fd4c 	bl	801135c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028c4:	f107 030c 	add.w	r3, r7, #12
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028d4:	2300      	movs	r3, #0
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	4b28      	ldr	r3, [pc, #160]	; (800297c <SystemClock_Config+0xcc>)
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	4a27      	ldr	r2, [pc, #156]	; (800297c <SystemClock_Config+0xcc>)
 80028de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e2:	6413      	str	r3, [r2, #64]	; 0x40
 80028e4:	4b25      	ldr	r3, [pc, #148]	; (800297c <SystemClock_Config+0xcc>)
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028f0:	2300      	movs	r3, #0
 80028f2:	607b      	str	r3, [r7, #4]
 80028f4:	4b22      	ldr	r3, [pc, #136]	; (8002980 <SystemClock_Config+0xd0>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a21      	ldr	r2, [pc, #132]	; (8002980 <SystemClock_Config+0xd0>)
 80028fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	4b1f      	ldr	r3, [pc, #124]	; (8002980 <SystemClock_Config+0xd0>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002908:	607b      	str	r3, [r7, #4]
 800290a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800290c:	2301      	movs	r3, #1
 800290e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002910:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002916:	2302      	movs	r3, #2
 8002918:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800291a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800291e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002920:	2308      	movs	r3, #8
 8002922:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002924:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002928:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800292a:	2302      	movs	r3, #2
 800292c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800292e:	2307      	movs	r3, #7
 8002930:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002932:	f107 0320 	add.w	r3, r7, #32
 8002936:	4618      	mov	r0, r3
 8002938:	f004 fa2a 	bl	8006d90 <HAL_RCC_OscConfig>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002942:	f000 fd64 	bl	800340e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002946:	230f      	movs	r3, #15
 8002948:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800294a:	2302      	movs	r3, #2
 800294c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002952:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002956:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002958:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800295c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800295e:	f107 030c 	add.w	r3, r7, #12
 8002962:	2105      	movs	r1, #5
 8002964:	4618      	mov	r0, r3
 8002966:	f004 fc8b 	bl	8007280 <HAL_RCC_ClockConfig>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002970:	f000 fd4d 	bl	800340e <Error_Handler>
  }
}
 8002974:	bf00      	nop
 8002976:	3750      	adds	r7, #80	; 0x50
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40023800 	.word	0x40023800
 8002980:	40007000 	.word	0x40007000

08002984 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002988:	4b17      	ldr	r3, [pc, #92]	; (80029e8 <MX_SPI1_Init+0x64>)
 800298a:	4a18      	ldr	r2, [pc, #96]	; (80029ec <MX_SPI1_Init+0x68>)
 800298c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800298e:	4b16      	ldr	r3, [pc, #88]	; (80029e8 <MX_SPI1_Init+0x64>)
 8002990:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002994:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002996:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <MX_SPI1_Init+0x64>)
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800299c:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <MX_SPI1_Init+0x64>)
 800299e:	2200      	movs	r2, #0
 80029a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029a2:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <MX_SPI1_Init+0x64>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029a8:	4b0f      	ldr	r3, [pc, #60]	; (80029e8 <MX_SPI1_Init+0x64>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029ae:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <MX_SPI1_Init+0x64>)
 80029b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80029b6:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <MX_SPI1_Init+0x64>)
 80029b8:	2218      	movs	r2, #24
 80029ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029bc:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <MX_SPI1_Init+0x64>)
 80029be:	2200      	movs	r2, #0
 80029c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029c2:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <MX_SPI1_Init+0x64>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029c8:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <MX_SPI1_Init+0x64>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80029ce:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <MX_SPI1_Init+0x64>)
 80029d0:	220a      	movs	r2, #10
 80029d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029d4:	4804      	ldr	r0, [pc, #16]	; (80029e8 <MX_SPI1_Init+0x64>)
 80029d6:	f004 fe73 	bl	80076c0 <HAL_SPI_Init>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80029e0:	f000 fd15 	bl	800340e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80029e4:	bf00      	nop
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	200015dc 	.word	0x200015dc
 80029ec:	40013000 	.word	0x40013000

080029f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08e      	sub	sp, #56	; 0x38
 80029f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	605a      	str	r2, [r3, #4]
 8002a00:	609a      	str	r2, [r3, #8]
 8002a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a04:	f107 0320 	add.w	r3, r7, #32
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a0e:	1d3b      	adds	r3, r7, #4
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]
 8002a1c:	615a      	str	r2, [r3, #20]
 8002a1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a20:	4b3d      	ldr	r3, [pc, #244]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002a22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2100-1;
 8002a28:	4b3b      	ldr	r3, [pc, #236]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002a2a:	f640 0233 	movw	r2, #2099	; 0x833
 8002a2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a30:	4b39      	ldr	r3, [pc, #228]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250-1;
 8002a36:	4b38      	ldr	r3, [pc, #224]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002a38:	22f9      	movs	r2, #249	; 0xf9
 8002a3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a3c:	4b36      	ldr	r3, [pc, #216]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a42:	4b35      	ldr	r3, [pc, #212]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a48:	4833      	ldr	r0, [pc, #204]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002a4a:	f005 f92f 	bl	8007cac <HAL_TIM_Base_Init>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002a54:	f000 fcdb 	bl	800340e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a62:	4619      	mov	r1, r3
 8002a64:	482c      	ldr	r0, [pc, #176]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002a66:	f005 fd33 	bl	80084d0 <HAL_TIM_ConfigClockSource>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002a70:	f000 fccd 	bl	800340e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a74:	4828      	ldr	r0, [pc, #160]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002a76:	f005 f9d9 	bl	8007e2c <HAL_TIM_PWM_Init>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002a80:	f000 fcc5 	bl	800340e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a84:	2300      	movs	r3, #0
 8002a86:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a8c:	f107 0320 	add.w	r3, r7, #32
 8002a90:	4619      	mov	r1, r3
 8002a92:	4821      	ldr	r0, [pc, #132]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002a94:	f006 f96e 	bl	8008d74 <HAL_TIMEx_MasterConfigSynchronization>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002a9e:	f000 fcb6 	bl	800340e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aa2:	2360      	movs	r3, #96	; 0x60
 8002aa4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ab2:	1d3b      	adds	r3, r7, #4
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4817      	ldr	r0, [pc, #92]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002aba:	f005 fc47 	bl	800834c <HAL_TIM_PWM_ConfigChannel>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002ac4:	f000 fca3 	bl	800340e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ac8:	1d3b      	adds	r3, r7, #4
 8002aca:	2204      	movs	r2, #4
 8002acc:	4619      	mov	r1, r3
 8002ace:	4812      	ldr	r0, [pc, #72]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002ad0:	f005 fc3c 	bl	800834c <HAL_TIM_PWM_ConfigChannel>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002ada:	f000 fc98 	bl	800340e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ade:	1d3b      	adds	r3, r7, #4
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	480c      	ldr	r0, [pc, #48]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002ae6:	f005 fc31 	bl	800834c <HAL_TIM_PWM_ConfigChannel>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002af0:	f000 fc8d 	bl	800340e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002af4:	1d3b      	adds	r3, r7, #4
 8002af6:	220c      	movs	r2, #12
 8002af8:	4619      	mov	r1, r3
 8002afa:	4807      	ldr	r0, [pc, #28]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002afc:	f005 fc26 	bl	800834c <HAL_TIM_PWM_ConfigChannel>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8002b06:	f000 fc82 	bl	800340e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002b0a:	4803      	ldr	r0, [pc, #12]	; (8002b18 <MX_TIM2_Init+0x128>)
 8002b0c:	f000 fe2a 	bl	8003764 <HAL_TIM_MspPostInit>

}
 8002b10:	bf00      	nop
 8002b12:	3738      	adds	r7, #56	; 0x38
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	20001634 	.word	0x20001634

08002b1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08e      	sub	sp, #56	; 0x38
 8002b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	605a      	str	r2, [r3, #4]
 8002b2c:	609a      	str	r2, [r3, #8]
 8002b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b30:	f107 0320 	add.w	r3, r7, #32
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b3a:	1d3b      	adds	r3, r7, #4
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	60da      	str	r2, [r3, #12]
 8002b46:	611a      	str	r2, [r3, #16]
 8002b48:	615a      	str	r2, [r3, #20]
 8002b4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b4c:	4b3d      	ldr	r3, [pc, #244]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002b4e:	4a3e      	ldr	r2, [pc, #248]	; (8002c48 <MX_TIM3_Init+0x12c>)
 8002b50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2100-1;
 8002b52:	4b3c      	ldr	r3, [pc, #240]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002b54:	f640 0233 	movw	r2, #2099	; 0x833
 8002b58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b5a:	4b3a      	ldr	r3, [pc, #232]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 250-1;
 8002b60:	4b38      	ldr	r3, [pc, #224]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002b62:	22f9      	movs	r2, #249	; 0xf9
 8002b64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b66:	4b37      	ldr	r3, [pc, #220]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b6c:	4b35      	ldr	r3, [pc, #212]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b72:	4834      	ldr	r0, [pc, #208]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002b74:	f005 f89a 	bl	8007cac <HAL_TIM_Base_Init>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002b7e:	f000 fc46 	bl	800340e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	482d      	ldr	r0, [pc, #180]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002b90:	f005 fc9e 	bl	80084d0 <HAL_TIM_ConfigClockSource>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002b9a:	f000 fc38 	bl	800340e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002b9e:	4829      	ldr	r0, [pc, #164]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002ba0:	f005 f944 	bl	8007e2c <HAL_TIM_PWM_Init>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002baa:	f000 fc30 	bl	800340e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bb6:	f107 0320 	add.w	r3, r7, #32
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4821      	ldr	r0, [pc, #132]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002bbe:	f006 f8d9 	bl	8008d74 <HAL_TIMEx_MasterConfigSynchronization>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002bc8:	f000 fc21 	bl	800340e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bcc:	2360      	movs	r3, #96	; 0x60
 8002bce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bdc:	1d3b      	adds	r3, r7, #4
 8002bde:	2200      	movs	r2, #0
 8002be0:	4619      	mov	r1, r3
 8002be2:	4818      	ldr	r0, [pc, #96]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002be4:	f005 fbb2 	bl	800834c <HAL_TIM_PWM_ConfigChannel>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002bee:	f000 fc0e 	bl	800340e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bf2:	1d3b      	adds	r3, r7, #4
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4812      	ldr	r0, [pc, #72]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002bfa:	f005 fba7 	bl	800834c <HAL_TIM_PWM_ConfigChannel>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002c04:	f000 fc03 	bl	800340e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c08:	1d3b      	adds	r3, r7, #4
 8002c0a:	2208      	movs	r2, #8
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	480d      	ldr	r0, [pc, #52]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002c10:	f005 fb9c 	bl	800834c <HAL_TIM_PWM_ConfigChannel>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002c1a:	f000 fbf8 	bl	800340e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c1e:	1d3b      	adds	r3, r7, #4
 8002c20:	220c      	movs	r2, #12
 8002c22:	4619      	mov	r1, r3
 8002c24:	4807      	ldr	r0, [pc, #28]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002c26:	f005 fb91 	bl	800834c <HAL_TIM_PWM_ConfigChannel>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002c30:	f000 fbed 	bl	800340e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002c34:	4803      	ldr	r0, [pc, #12]	; (8002c44 <MX_TIM3_Init+0x128>)
 8002c36:	f000 fd95 	bl	8003764 <HAL_TIM_MspPostInit>

}
 8002c3a:	bf00      	nop
 8002c3c:	3738      	adds	r7, #56	; 0x38
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	2000167c 	.word	0x2000167c
 8002c48:	40000400 	.word	0x40000400

08002c4c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08e      	sub	sp, #56	; 0x38
 8002c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	605a      	str	r2, [r3, #4]
 8002c5c:	609a      	str	r2, [r3, #8]
 8002c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c60:	f107 0320 	add.w	r3, r7, #32
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c6a:	1d3b      	adds	r3, r7, #4
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	60da      	str	r2, [r3, #12]
 8002c76:	611a      	str	r2, [r3, #16]
 8002c78:	615a      	str	r2, [r3, #20]
 8002c7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c7c:	4b32      	ldr	r3, [pc, #200]	; (8002d48 <MX_TIM4_Init+0xfc>)
 8002c7e:	4a33      	ldr	r2, [pc, #204]	; (8002d4c <MX_TIM4_Init+0x100>)
 8002c80:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2100-1;
 8002c82:	4b31      	ldr	r3, [pc, #196]	; (8002d48 <MX_TIM4_Init+0xfc>)
 8002c84:	f640 0233 	movw	r2, #2099	; 0x833
 8002c88:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c8a:	4b2f      	ldr	r3, [pc, #188]	; (8002d48 <MX_TIM4_Init+0xfc>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 250-1;
 8002c90:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <MX_TIM4_Init+0xfc>)
 8002c92:	22f9      	movs	r2, #249	; 0xf9
 8002c94:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c96:	4b2c      	ldr	r3, [pc, #176]	; (8002d48 <MX_TIM4_Init+0xfc>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c9c:	4b2a      	ldr	r3, [pc, #168]	; (8002d48 <MX_TIM4_Init+0xfc>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002ca2:	4829      	ldr	r0, [pc, #164]	; (8002d48 <MX_TIM4_Init+0xfc>)
 8002ca4:	f005 f802 	bl	8007cac <HAL_TIM_Base_Init>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002cae:	f000 fbae 	bl	800340e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002cb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4822      	ldr	r0, [pc, #136]	; (8002d48 <MX_TIM4_Init+0xfc>)
 8002cc0:	f005 fc06 	bl	80084d0 <HAL_TIM_ConfigClockSource>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002cca:	f000 fba0 	bl	800340e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002cce:	481e      	ldr	r0, [pc, #120]	; (8002d48 <MX_TIM4_Init+0xfc>)
 8002cd0:	f005 f8ac 	bl	8007e2c <HAL_TIM_PWM_Init>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002cda:	f000 fb98 	bl	800340e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ce6:	f107 0320 	add.w	r3, r7, #32
 8002cea:	4619      	mov	r1, r3
 8002cec:	4816      	ldr	r0, [pc, #88]	; (8002d48 <MX_TIM4_Init+0xfc>)
 8002cee:	f006 f841 	bl	8008d74 <HAL_TIMEx_MasterConfigSynchronization>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002cf8:	f000 fb89 	bl	800340e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cfc:	2360      	movs	r3, #96	; 0x60
 8002cfe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d04:	2300      	movs	r3, #0
 8002d06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d0c:	1d3b      	adds	r3, r7, #4
 8002d0e:	2204      	movs	r2, #4
 8002d10:	4619      	mov	r1, r3
 8002d12:	480d      	ldr	r0, [pc, #52]	; (8002d48 <MX_TIM4_Init+0xfc>)
 8002d14:	f005 fb1a 	bl	800834c <HAL_TIM_PWM_ConfigChannel>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002d1e:	f000 fb76 	bl	800340e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d22:	1d3b      	adds	r3, r7, #4
 8002d24:	2208      	movs	r2, #8
 8002d26:	4619      	mov	r1, r3
 8002d28:	4807      	ldr	r0, [pc, #28]	; (8002d48 <MX_TIM4_Init+0xfc>)
 8002d2a:	f005 fb0f 	bl	800834c <HAL_TIM_PWM_ConfigChannel>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8002d34:	f000 fb6b 	bl	800340e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002d38:	4803      	ldr	r0, [pc, #12]	; (8002d48 <MX_TIM4_Init+0xfc>)
 8002d3a:	f000 fd13 	bl	8003764 <HAL_TIM_MspPostInit>

}
 8002d3e:	bf00      	nop
 8002d40:	3738      	adds	r7, #56	; 0x38
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	200016c4 	.word	0x200016c4
 8002d4c:	40000800 	.word	0x40000800

08002d50 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d56:	f107 0308 	add.w	r3, r7, #8
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	605a      	str	r2, [r3, #4]
 8002d60:	609a      	str	r2, [r3, #8]
 8002d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d64:	463b      	mov	r3, r7
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002d6c:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <MX_TIM5_Init+0x94>)
 8002d6e:	4a1e      	ldr	r2, [pc, #120]	; (8002de8 <MX_TIM5_Init+0x98>)
 8002d70:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8400-1;
 8002d72:	4b1c      	ldr	r3, [pc, #112]	; (8002de4 <MX_TIM5_Init+0x94>)
 8002d74:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002d78:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d7a:	4b1a      	ldr	r3, [pc, #104]	; (8002de4 <MX_TIM5_Init+0x94>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000;
 8002d80:	4b18      	ldr	r3, [pc, #96]	; (8002de4 <MX_TIM5_Init+0x94>)
 8002d82:	f242 7210 	movw	r2, #10000	; 0x2710
 8002d86:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d88:	4b16      	ldr	r3, [pc, #88]	; (8002de4 <MX_TIM5_Init+0x94>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d8e:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <MX_TIM5_Init+0x94>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002d94:	4813      	ldr	r0, [pc, #76]	; (8002de4 <MX_TIM5_Init+0x94>)
 8002d96:	f004 ff89 	bl	8007cac <HAL_TIM_Base_Init>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002da0:	f000 fb35 	bl	800340e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002da8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002daa:	f107 0308 	add.w	r3, r7, #8
 8002dae:	4619      	mov	r1, r3
 8002db0:	480c      	ldr	r0, [pc, #48]	; (8002de4 <MX_TIM5_Init+0x94>)
 8002db2:	f005 fb8d 	bl	80084d0 <HAL_TIM_ConfigClockSource>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002dbc:	f000 fb27 	bl	800340e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002dc8:	463b      	mov	r3, r7
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4805      	ldr	r0, [pc, #20]	; (8002de4 <MX_TIM5_Init+0x94>)
 8002dce:	f005 ffd1 	bl	8008d74 <HAL_TIMEx_MasterConfigSynchronization>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002dd8:	f000 fb19 	bl	800340e <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002ddc:	bf00      	nop
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	2000170c 	.word	0x2000170c
 8002de8:	40000c00 	.word	0x40000c00

08002dec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b092      	sub	sp, #72	; 0x48
 8002df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002df2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	60da      	str	r2, [r3, #12]
 8002e0a:	611a      	str	r2, [r3, #16]
 8002e0c:	615a      	str	r2, [r3, #20]
 8002e0e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e10:	1d3b      	adds	r3, r7, #4
 8002e12:	2220      	movs	r2, #32
 8002e14:	2100      	movs	r1, #0
 8002e16:	4618      	mov	r0, r3
 8002e18:	f00e faa0 	bl	801135c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002e1c:	4b39      	ldr	r3, [pc, #228]	; (8002f04 <MX_TIM8_Init+0x118>)
 8002e1e:	4a3a      	ldr	r2, [pc, #232]	; (8002f08 <MX_TIM8_Init+0x11c>)
 8002e20:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002e22:	4b38      	ldr	r3, [pc, #224]	; (8002f04 <MX_TIM8_Init+0x118>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e28:	4b36      	ldr	r3, [pc, #216]	; (8002f04 <MX_TIM8_Init+0x118>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002e2e:	4b35      	ldr	r3, [pc, #212]	; (8002f04 <MX_TIM8_Init+0x118>)
 8002e30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e34:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e36:	4b33      	ldr	r3, [pc, #204]	; (8002f04 <MX_TIM8_Init+0x118>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002e3c:	4b31      	ldr	r3, [pc, #196]	; (8002f04 <MX_TIM8_Init+0x118>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e42:	4b30      	ldr	r3, [pc, #192]	; (8002f04 <MX_TIM8_Init+0x118>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002e48:	482e      	ldr	r0, [pc, #184]	; (8002f04 <MX_TIM8_Init+0x118>)
 8002e4a:	f004 ffef 	bl	8007e2c <HAL_TIM_PWM_Init>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002e54:	f000 fadb 	bl	800340e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002e60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e64:	4619      	mov	r1, r3
 8002e66:	4827      	ldr	r0, [pc, #156]	; (8002f04 <MX_TIM8_Init+0x118>)
 8002e68:	f005 ff84 	bl	8008d74 <HAL_TIMEx_MasterConfigSynchronization>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002e72:	f000 facc 	bl	800340e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e76:	2360      	movs	r3, #96	; 0x60
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e82:	2300      	movs	r3, #0
 8002e84:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e86:	2300      	movs	r3, #0
 8002e88:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e96:	2208      	movs	r2, #8
 8002e98:	4619      	mov	r1, r3
 8002e9a:	481a      	ldr	r0, [pc, #104]	; (8002f04 <MX_TIM8_Init+0x118>)
 8002e9c:	f005 fa56 	bl	800834c <HAL_TIM_PWM_ConfigChannel>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002ea6:	f000 fab2 	bl	800340e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eae:	220c      	movs	r2, #12
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4814      	ldr	r0, [pc, #80]	; (8002f04 <MX_TIM8_Init+0x118>)
 8002eb4:	f005 fa4a 	bl	800834c <HAL_TIM_PWM_ConfigChannel>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8002ebe:	f000 faa6 	bl	800340e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ed6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002eda:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002edc:	2300      	movs	r3, #0
 8002ede:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002ee0:	1d3b      	adds	r3, r7, #4
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4807      	ldr	r0, [pc, #28]	; (8002f04 <MX_TIM8_Init+0x118>)
 8002ee6:	f005 ffc1 	bl	8008e6c <HAL_TIMEx_ConfigBreakDeadTime>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8002ef0:	f000 fa8d 	bl	800340e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002ef4:	4803      	ldr	r0, [pc, #12]	; (8002f04 <MX_TIM8_Init+0x118>)
 8002ef6:	f000 fc35 	bl	8003764 <HAL_TIM_MspPostInit>

}
 8002efa:	bf00      	nop
 8002efc:	3748      	adds	r7, #72	; 0x48
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20001754 	.word	0x20001754
 8002f08:	40010400 	.word	0x40010400

08002f0c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002f10:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <MX_TIM13_Init+0x40>)
 8002f12:	4a0f      	ldr	r2, [pc, #60]	; (8002f50 <MX_TIM13_Init+0x44>)
 8002f14:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8400-1;
 8002f16:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <MX_TIM13_Init+0x40>)
 8002f18:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002f1c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f1e:	4b0b      	ldr	r3, [pc, #44]	; (8002f4c <MX_TIM13_Init+0x40>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 50000;
 8002f24:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <MX_TIM13_Init+0x40>)
 8002f26:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002f2a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f2c:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <MX_TIM13_Init+0x40>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f32:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <MX_TIM13_Init+0x40>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002f38:	4804      	ldr	r0, [pc, #16]	; (8002f4c <MX_TIM13_Init+0x40>)
 8002f3a:	f004 feb7 	bl	8007cac <HAL_TIM_Base_Init>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8002f44:	f000 fa63 	bl	800340e <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002f48:	bf00      	nop
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	2000179c 	.word	0x2000179c
 8002f50:	40001c00 	.word	0x40001c00

08002f54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f58:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <MX_USART3_UART_Init+0x4c>)
 8002f5a:	4a12      	ldr	r2, [pc, #72]	; (8002fa4 <MX_USART3_UART_Init+0x50>)
 8002f5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002f5e:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <MX_USART3_UART_Init+0x4c>)
 8002f60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f66:	4b0e      	ldr	r3, [pc, #56]	; (8002fa0 <MX_USART3_UART_Init+0x4c>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f6c:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <MX_USART3_UART_Init+0x4c>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f72:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <MX_USART3_UART_Init+0x4c>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f78:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <MX_USART3_UART_Init+0x4c>)
 8002f7a:	220c      	movs	r2, #12
 8002f7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f7e:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <MX_USART3_UART_Init+0x4c>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f84:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <MX_USART3_UART_Init+0x4c>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f8a:	4805      	ldr	r0, [pc, #20]	; (8002fa0 <MX_USART3_UART_Init+0x4c>)
 8002f8c:	f005 ffd4 	bl	8008f38 <HAL_UART_Init>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002f96:	f000 fa3a 	bl	800340e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	200018a4 	.word	0x200018a4
 8002fa4:	40004800 	.word	0x40004800

08002fa8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	607b      	str	r3, [r7, #4]
 8002fb2:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <MX_DMA_Init+0x4c>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	4a0f      	ldr	r2, [pc, #60]	; (8002ff4 <MX_DMA_Init+0x4c>)
 8002fb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fbe:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <MX_DMA_Init+0x4c>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc6:	607b      	str	r3, [r7, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2100      	movs	r1, #0
 8002fce:	203c      	movs	r0, #60	; 0x3c
 8002fd0:	f001 fccb 	bl	800496a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002fd4:	203c      	movs	r0, #60	; 0x3c
 8002fd6:	f001 fce4 	bl	80049a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2100      	movs	r1, #0
 8002fde:	2046      	movs	r0, #70	; 0x46
 8002fe0:	f001 fcc3 	bl	800496a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002fe4:	2046      	movs	r0, #70	; 0x46
 8002fe6:	f001 fcdc 	bl	80049a2 <HAL_NVIC_EnableIRQ>

}
 8002fea:	bf00      	nop
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40023800 	.word	0x40023800

08002ff8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08c      	sub	sp, #48	; 0x30
 8002ffc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ffe:	f107 031c 	add.w	r3, r7, #28
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	605a      	str	r2, [r3, #4]
 8003008:	609a      	str	r2, [r3, #8]
 800300a:	60da      	str	r2, [r3, #12]
 800300c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	61bb      	str	r3, [r7, #24]
 8003012:	4ba3      	ldr	r3, [pc, #652]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	4aa2      	ldr	r2, [pc, #648]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 8003018:	f043 0310 	orr.w	r3, r3, #16
 800301c:	6313      	str	r3, [r2, #48]	; 0x30
 800301e:	4ba0      	ldr	r3, [pc, #640]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	61bb      	str	r3, [r7, #24]
 8003028:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	4b9c      	ldr	r3, [pc, #624]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	4a9b      	ldr	r2, [pc, #620]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 8003034:	f043 0304 	orr.w	r3, r3, #4
 8003038:	6313      	str	r3, [r2, #48]	; 0x30
 800303a:	4b99      	ldr	r3, [pc, #612]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	613b      	str	r3, [r7, #16]
 800304a:	4b95      	ldr	r3, [pc, #596]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	4a94      	ldr	r2, [pc, #592]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 8003050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003054:	6313      	str	r3, [r2, #48]	; 0x30
 8003056:	4b92      	ldr	r3, [pc, #584]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	4b8e      	ldr	r3, [pc, #568]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	4a8d      	ldr	r2, [pc, #564]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	6313      	str	r3, [r2, #48]	; 0x30
 8003072:	4b8b      	ldr	r3, [pc, #556]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	4b87      	ldr	r3, [pc, #540]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	4a86      	ldr	r2, [pc, #536]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 8003088:	f043 0302 	orr.w	r3, r3, #2
 800308c:	6313      	str	r3, [r2, #48]	; 0x30
 800308e:	4b84      	ldr	r3, [pc, #528]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	60bb      	str	r3, [r7, #8]
 8003098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	607b      	str	r3, [r7, #4]
 800309e:	4b80      	ldr	r3, [pc, #512]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	4a7f      	ldr	r2, [pc, #508]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 80030a4:	f043 0308 	orr.w	r3, r3, #8
 80030a8:	6313      	str	r3, [r2, #48]	; 0x30
 80030aa:	4b7d      	ldr	r3, [pc, #500]	; (80032a0 <MX_GPIO_Init+0x2a8>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	607b      	str	r3, [r7, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TEST_OUTPUT_1_Pin|TEST_OUTPUT_2_Pin, GPIO_PIN_RESET);
 80030b6:	2200      	movs	r2, #0
 80030b8:	210c      	movs	r1, #12
 80030ba:	487a      	ldr	r0, [pc, #488]	; (80032a4 <MX_GPIO_Init+0x2ac>)
 80030bc:	f002 fa2a 	bl	8005514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80030c0:	2201      	movs	r2, #1
 80030c2:	2101      	movs	r1, #1
 80030c4:	4878      	ldr	r0, [pc, #480]	; (80032a8 <MX_GPIO_Init+0x2b0>)
 80030c6:	f002 fa25 	bl	8005514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_RESET);
 80030ca:	2200      	movs	r2, #0
 80030cc:	2108      	movs	r1, #8
 80030ce:	4877      	ldr	r0, [pc, #476]	; (80032ac <MX_GPIO_Init+0x2b4>)
 80030d0:	f002 fa20 	bl	8005514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TEST_OUT_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80030d4:	2200      	movs	r2, #0
 80030d6:	f64f 0110 	movw	r1, #63504	; 0xf810
 80030da:	4875      	ldr	r0, [pc, #468]	; (80032b0 <MX_GPIO_Init+0x2b8>)
 80030dc:	f002 fa1a 	bl	8005514 <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : TEST_OUTPUT_1_Pin */
  GPIO_InitStruct.Pin = TEST_OUTPUT_1_Pin;
 80030e0:	2304      	movs	r3, #4
 80030e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030e4:	2301      	movs	r3, #1
 80030e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80030e8:	2302      	movs	r3, #2
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ec:	2303      	movs	r3, #3
 80030ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUTPUT_1_GPIO_Port, &GPIO_InitStruct);
 80030f0:	f107 031c 	add.w	r3, r7, #28
 80030f4:	4619      	mov	r1, r3
 80030f6:	486b      	ldr	r0, [pc, #428]	; (80032a4 <MX_GPIO_Init+0x2ac>)
 80030f8:	f002 f870 	bl	80051dc <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUTPUT_2_Pin */
  GPIO_InitStruct.Pin = TEST_OUTPUT_2_Pin;
 80030fc:	2308      	movs	r3, #8
 80030fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003100:	2301      	movs	r3, #1
 8003102:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003104:	2300      	movs	r3, #0
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003108:	2300      	movs	r3, #0
 800310a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUTPUT_2_GPIO_Port, &GPIO_InitStruct);
 800310c:	f107 031c 	add.w	r3, r7, #28
 8003110:	4619      	mov	r1, r3
 8003112:	4864      	ldr	r0, [pc, #400]	; (80032a4 <MX_GPIO_Init+0x2ac>)
 8003114:	f002 f862 	bl	80051dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003118:	2301      	movs	r3, #1
 800311a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800311c:	2301      	movs	r3, #1
 800311e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003120:	2300      	movs	r3, #0
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003124:	2300      	movs	r3, #0
 8003126:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003128:	f107 031c 	add.w	r3, r7, #28
 800312c:	4619      	mov	r1, r3
 800312e:	485e      	ldr	r0, [pc, #376]	; (80032a8 <MX_GPIO_Init+0x2b0>)
 8003130:	f002 f854 	bl	80051dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003134:	2308      	movs	r3, #8
 8003136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003138:	2302      	movs	r3, #2
 800313a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313c:	2300      	movs	r3, #0
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003140:	2300      	movs	r3, #0
 8003142:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003144:	2305      	movs	r3, #5
 8003146:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003148:	f107 031c 	add.w	r3, r7, #28
 800314c:	4619      	mov	r1, r3
 800314e:	4856      	ldr	r0, [pc, #344]	; (80032a8 <MX_GPIO_Init+0x2b0>)
 8003150:	f002 f844 	bl	80051dc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003154:	2301      	movs	r3, #1
 8003156:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003158:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800315c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315e:	2300      	movs	r3, #0
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003162:	f107 031c 	add.w	r3, r7, #28
 8003166:	4619      	mov	r1, r3
 8003168:	4850      	ldr	r0, [pc, #320]	; (80032ac <MX_GPIO_Init+0x2b4>)
 800316a:	f002 f837 	bl	80051dc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_SD_Pin */
  GPIO_InitStruct.Pin = CS_SD_Pin;
 800316e:	2308      	movs	r3, #8
 8003170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003172:	2301      	movs	r3, #1
 8003174:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	2300      	movs	r3, #0
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800317a:	2302      	movs	r3, #2
 800317c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_SD_GPIO_Port, &GPIO_InitStruct);
 800317e:	f107 031c 	add.w	r3, r7, #28
 8003182:	4619      	mov	r1, r3
 8003184:	4849      	ldr	r0, [pc, #292]	; (80032ac <MX_GPIO_Init+0x2b4>)
 8003186:	f002 f829 	bl	80051dc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800318a:	2310      	movs	r3, #16
 800318c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318e:	2302      	movs	r3, #2
 8003190:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003192:	2300      	movs	r3, #0
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003196:	2300      	movs	r3, #0
 8003198:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800319a:	2306      	movs	r3, #6
 800319c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800319e:	f107 031c 	add.w	r3, r7, #28
 80031a2:	4619      	mov	r1, r3
 80031a4:	4841      	ldr	r0, [pc, #260]	; (80032ac <MX_GPIO_Init+0x2b4>)
 80031a6:	f002 f819 	bl	80051dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80031aa:	2304      	movs	r3, #4
 80031ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031ae:	2300      	movs	r3, #0
 80031b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b6:	f107 031c 	add.w	r3, r7, #28
 80031ba:	4619      	mov	r1, r3
 80031bc:	483d      	ldr	r0, [pc, #244]	; (80032b4 <MX_GPIO_Init+0x2bc>)
 80031be:	f002 f80d 	bl	80051dc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80031c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c8:	2302      	movs	r3, #2
 80031ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d0:	2300      	movs	r3, #0
 80031d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031d4:	2305      	movs	r3, #5
 80031d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80031d8:	f107 031c 	add.w	r3, r7, #28
 80031dc:	4619      	mov	r1, r3
 80031de:	4835      	ldr	r0, [pc, #212]	; (80032b4 <MX_GPIO_Init+0x2bc>)
 80031e0:	f001 fffc 	bl	80051dc <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUT_Pin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 80031e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ea:	2301      	movs	r3, #1
 80031ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031ee:	2301      	movs	r3, #1
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f2:	2303      	movs	r3, #3
 80031f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 80031f6:	f107 031c 	add.w	r3, r7, #28
 80031fa:	4619      	mov	r1, r3
 80031fc:	482c      	ldr	r0, [pc, #176]	; (80032b0 <MX_GPIO_Init+0x2b8>)
 80031fe:	f001 ffed 	bl	80051dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003202:	f24f 0310 	movw	r3, #61456	; 0xf010
 8003206:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003208:	2301      	movs	r3, #1
 800320a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320c:	2300      	movs	r3, #0
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003210:	2300      	movs	r3, #0
 8003212:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003214:	f107 031c 	add.w	r3, r7, #28
 8003218:	4619      	mov	r1, r3
 800321a:	4825      	ldr	r0, [pc, #148]	; (80032b0 <MX_GPIO_Init+0x2b8>)
 800321c:	f001 ffde 	bl	80051dc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003220:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003226:	2302      	movs	r3, #2
 8003228:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322a:	2300      	movs	r3, #0
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322e:	2300      	movs	r3, #0
 8003230:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003232:	2306      	movs	r3, #6
 8003234:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003236:	f107 031c 	add.w	r3, r7, #28
 800323a:	4619      	mov	r1, r3
 800323c:	481a      	ldr	r0, [pc, #104]	; (80032a8 <MX_GPIO_Init+0x2b0>)
 800323e:	f001 ffcd 	bl	80051dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003242:	2320      	movs	r3, #32
 8003244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003246:	2300      	movs	r3, #0
 8003248:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324a:	2300      	movs	r3, #0
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800324e:	f107 031c 	add.w	r3, r7, #28
 8003252:	4619      	mov	r1, r3
 8003254:	4816      	ldr	r0, [pc, #88]	; (80032b0 <MX_GPIO_Init+0x2b8>)
 8003256:	f001 ffc1 	bl	80051dc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800325a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800325e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003260:	2312      	movs	r3, #18
 8003262:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003264:	2301      	movs	r3, #1
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003268:	2300      	movs	r3, #0
 800326a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800326c:	2304      	movs	r3, #4
 800326e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003270:	f107 031c 	add.w	r3, r7, #28
 8003274:	4619      	mov	r1, r3
 8003276:	480f      	ldr	r0, [pc, #60]	; (80032b4 <MX_GPIO_Init+0x2bc>)
 8003278:	f001 ffb0 	bl	80051dc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800327c:	2302      	movs	r3, #2
 800327e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003280:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003284:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003286:	2300      	movs	r3, #0
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800328a:	f107 031c 	add.w	r3, r7, #28
 800328e:	4619      	mov	r1, r3
 8003290:	4804      	ldr	r0, [pc, #16]	; (80032a4 <MX_GPIO_Init+0x2ac>)
 8003292:	f001 ffa3 	bl	80051dc <HAL_GPIO_Init>

}
 8003296:	bf00      	nop
 8003298:	3730      	adds	r7, #48	; 0x30
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800
 80032a4:	40021000 	.word	0x40021000
 80032a8:	40020800 	.word	0x40020800
 80032ac:	40020000 	.word	0x40020000
 80032b0:	40020c00 	.word	0x40020c00
 80032b4:	40020400 	.word	0x40020400

080032b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// ------------------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
	if(htim == &htim13)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a07      	ldr	r2, [pc, #28]	; (80032e0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d106      	bne.n	80032d6 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		HAL_GPIO_TogglePin(GPIOE, TEST_OUTPUT_2_Pin);
 80032c8:	2108      	movs	r1, #8
 80032ca:	4806      	ldr	r0, [pc, #24]	; (80032e4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80032cc:	f002 f93b 	bl	8005546 <HAL_GPIO_TogglePin>
		interrupt_flag = 1;
 80032d0:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80032d2:	2201      	movs	r2, #1
 80032d4:	701a      	strb	r2, [r3, #0]
		//HAL_TIM_Base_Stop_IT(&htim13);
	}
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	2000179c 	.word	0x2000179c
 80032e4:	40021000 	.word	0x40021000
 80032e8:	200015db 	.word	0x200015db

080032ec <HAL_UART_RxCpltCallback>:
// ------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART3)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a15      	ldr	r2, [pc, #84]	; (8003350 <HAL_UART_RxCpltCallback+0x64>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d123      	bne.n	8003346 <HAL_UART_RxCpltCallback+0x5a>
	{
		if(uart_RX_data != 13)
 80032fe:	4b15      	ldr	r3, [pc, #84]	; (8003354 <HAL_UART_RxCpltCallback+0x68>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b0d      	cmp	r3, #13
 8003304:	d00d      	beq.n	8003322 <HAL_UART_RxCpltCallback+0x36>
		{
			rx_buf_command[count_chars] = uart_RX_data;
 8003306:	4b14      	ldr	r3, [pc, #80]	; (8003358 <HAL_UART_RxCpltCallback+0x6c>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	461a      	mov	r2, r3
 800330c:	4b11      	ldr	r3, [pc, #68]	; (8003354 <HAL_UART_RxCpltCallback+0x68>)
 800330e:	7819      	ldrb	r1, [r3, #0]
 8003310:	4b12      	ldr	r3, [pc, #72]	; (800335c <HAL_UART_RxCpltCallback+0x70>)
 8003312:	5499      	strb	r1, [r3, r2]
			count_chars++;
 8003314:	4b10      	ldr	r3, [pc, #64]	; (8003358 <HAL_UART_RxCpltCallback+0x6c>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	3301      	adds	r3, #1
 800331a:	b2da      	uxtb	r2, r3
 800331c:	4b0e      	ldr	r3, [pc, #56]	; (8003358 <HAL_UART_RxCpltCallback+0x6c>)
 800331e:	701a      	strb	r2, [r3, #0]
 8003320:	e005      	b.n	800332e <HAL_UART_RxCpltCallback+0x42>
		}
		else
		{
			flag_received_command = true;
 8003322:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <HAL_UART_RxCpltCallback+0x74>)
 8003324:	2201      	movs	r2, #1
 8003326:	701a      	strb	r2, [r3, #0]
			count_chars= 0;
 8003328:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <HAL_UART_RxCpltCallback+0x6c>)
 800332a:	2200      	movs	r2, #0
 800332c:	701a      	strb	r2, [r3, #0]
		}


		if(uart_RX_data == 'z')						// If was sent "STOP animation" command. 'z' key
 800332e:	4b09      	ldr	r3, [pc, #36]	; (8003354 <HAL_UART_RxCpltCallback+0x68>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b7a      	cmp	r3, #122	; 0x7a
 8003334:	d102      	bne.n	800333c <HAL_UART_RxCpltCallback+0x50>
		{
			interrupt_animation_flag = true;
 8003336:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <HAL_UART_RxCpltCallback+0x78>)
 8003338:	2201      	movs	r2, #1
 800333a:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, &uart_RX_data, 1);
 800333c:	2201      	movs	r2, #1
 800333e:	4905      	ldr	r1, [pc, #20]	; (8003354 <HAL_UART_RxCpltCallback+0x68>)
 8003340:	4809      	ldr	r0, [pc, #36]	; (8003368 <HAL_UART_RxCpltCallback+0x7c>)
 8003342:	f005 ff1d 	bl	8009180 <HAL_UART_Receive_IT>
		//HAL_UART_Transmit_IT(&huart3, &uart_RX_data, 1);
	}
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40004800 	.word	0x40004800
 8003354:	200015cc 	.word	0x200015cc
 8003358:	200015da 	.word	0x200015da
 800335c:	200015d0 	.word	0x200015d0
 8003360:	200015cd 	.word	0x200015cd
 8003364:	200015ce 	.word	0x200015ce
 8003368:	200018a4 	.word	0x200018a4

0800336c <all_leds_animantion_ok_state>:
// ------------------------------------------------------------------------------------
void all_leds_animantion_ok_state(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
	turn_all_leds_from_centr(10, 0, 0, 150);
 8003370:	2396      	movs	r3, #150	; 0x96
 8003372:	2200      	movs	r2, #0
 8003374:	2100      	movs	r1, #0
 8003376:	200a      	movs	r0, #10
 8003378:	f7ff f8d6 	bl	8002528 <turn_all_leds_from_centr>
	test_from_midle_to_corner();
 800337c:	f7fd fd20 	bl	8000dc0 <test_from_midle_to_corner>

	HAL_Delay(500);
 8003380:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003384:	f001 f9f2 	bl	800476c <HAL_Delay>

	turn_all_leds_from_centr(20, 0, 0, 0);
 8003388:	2300      	movs	r3, #0
 800338a:	2200      	movs	r2, #0
 800338c:	2100      	movs	r1, #0
 800338e:	2014      	movs	r0, #20
 8003390:	f7ff f8ca 	bl	8002528 <turn_all_leds_from_centr>
	stop_light_all_turn_off();
 8003394:	f7fd fd0c 	bl	8000db0 <stop_light_all_turn_off>
}
 8003398:	bf00      	nop
 800339a:	bd80      	pop	{r7, pc}

0800339c <all_leds_animantion_error_state>:
// -----------------------------------------------------------------------------
void all_leds_animantion_error_state(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af02      	add	r7, sp, #8
	turn_all_leds_from_centr(7, 150, 0, 0);
 80033a2:	2300      	movs	r3, #0
 80033a4:	2200      	movs	r2, #0
 80033a6:	2196      	movs	r1, #150	; 0x96
 80033a8:	2007      	movs	r0, #7
 80033aa:	f7ff f8bd 	bl	8002528 <turn_all_leds_from_centr>
	test_from_midle_to_corner();
 80033ae:	f7fd fd07 	bl	8000dc0 <test_from_midle_to_corner>

	for(uint8_t i = 0; i < 85; i ++)
 80033b2:	2300      	movs	r3, #0
 80033b4:	71fb      	strb	r3, [r7, #7]
 80033b6:	e021      	b.n	80033fc <all_leds_animantion_error_state+0x60>
	{
		set_left_one_rgbw_led(i, 0, 0, 0, 0);
 80033b8:	79f8      	ldrb	r0, [r7, #7]
 80033ba:	2300      	movs	r3, #0
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	2300      	movs	r3, #0
 80033c0:	2200      	movs	r2, #0
 80033c2:	2100      	movs	r1, #0
 80033c4:	f7ff f901 	bl	80025ca <set_left_one_rgbw_led>
		set_right_one_rgbw_led(i, 0, 0, 0, 0);
 80033c8:	79f8      	ldrb	r0, [r7, #7]
 80033ca:	2300      	movs	r3, #0
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	2300      	movs	r3, #0
 80033d0:	2200      	movs	r2, #0
 80033d2:	2100      	movs	r1, #0
 80033d4:	f7ff f91a 	bl	800260c <set_right_one_rgbw_led>
		while (!ARGB_Show_left());  			// Update
 80033d8:	bf00      	nop
 80033da:	f7fe f82f 	bl	800143c <ARGB_Show_left>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0fa      	beq.n	80033da <all_leds_animantion_error_state+0x3e>
		while (!ARGB_Show_right());  			// Update
 80033e4:	bf00      	nop
 80033e6:	f7fe f9f5 	bl	80017d4 <ARGB_Show_right>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0fa      	beq.n	80033e6 <all_leds_animantion_error_state+0x4a>
		HAL_Delay(3);
 80033f0:	2003      	movs	r0, #3
 80033f2:	f001 f9bb 	bl	800476c <HAL_Delay>
	for(uint8_t i = 0; i < 85; i ++)
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	3301      	adds	r3, #1
 80033fa:	71fb      	strb	r3, [r7, #7]
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	2b54      	cmp	r3, #84	; 0x54
 8003400:	d9da      	bls.n	80033b8 <all_leds_animantion_error_state+0x1c>
	}

	stop_light_all_turn_off();
 8003402:	f7fd fcd5 	bl	8000db0 <stop_light_all_turn_off>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800340e:	b480      	push	{r7}
 8003410:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003412:	b672      	cpsid	i
}
 8003414:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003416:	e7fe      	b.n	8003416 <Error_Handler+0x8>

08003418 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800341e:	2300      	movs	r3, #0
 8003420:	607b      	str	r3, [r7, #4]
 8003422:	4b10      	ldr	r3, [pc, #64]	; (8003464 <HAL_MspInit+0x4c>)
 8003424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003426:	4a0f      	ldr	r2, [pc, #60]	; (8003464 <HAL_MspInit+0x4c>)
 8003428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800342c:	6453      	str	r3, [r2, #68]	; 0x44
 800342e:	4b0d      	ldr	r3, [pc, #52]	; (8003464 <HAL_MspInit+0x4c>)
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003436:	607b      	str	r3, [r7, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800343a:	2300      	movs	r3, #0
 800343c:	603b      	str	r3, [r7, #0]
 800343e:	4b09      	ldr	r3, [pc, #36]	; (8003464 <HAL_MspInit+0x4c>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	4a08      	ldr	r2, [pc, #32]	; (8003464 <HAL_MspInit+0x4c>)
 8003444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003448:	6413      	str	r3, [r2, #64]	; 0x40
 800344a:	4b06      	ldr	r3, [pc, #24]	; (8003464 <HAL_MspInit+0x4c>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003456:	2007      	movs	r0, #7
 8003458:	f001 fa7c 	bl	8004954 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800345c:	bf00      	nop
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40023800 	.word	0x40023800

08003468 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08a      	sub	sp, #40	; 0x28
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003470:	f107 0314 	add.w	r3, r7, #20
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	605a      	str	r2, [r3, #4]
 800347a:	609a      	str	r2, [r3, #8]
 800347c:	60da      	str	r2, [r3, #12]
 800347e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a19      	ldr	r2, [pc, #100]	; (80034ec <HAL_SPI_MspInit+0x84>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d12b      	bne.n	80034e2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	4b18      	ldr	r3, [pc, #96]	; (80034f0 <HAL_SPI_MspInit+0x88>)
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	4a17      	ldr	r2, [pc, #92]	; (80034f0 <HAL_SPI_MspInit+0x88>)
 8003494:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003498:	6453      	str	r3, [r2, #68]	; 0x44
 800349a:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <HAL_SPI_MspInit+0x88>)
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <HAL_SPI_MspInit+0x88>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	4a10      	ldr	r2, [pc, #64]	; (80034f0 <HAL_SPI_MspInit+0x88>)
 80034b0:	f043 0301 	orr.w	r3, r3, #1
 80034b4:	6313      	str	r3, [r2, #48]	; 0x30
 80034b6:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <HAL_SPI_MspInit+0x88>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80034c2:	23e0      	movs	r3, #224	; 0xe0
 80034c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c6:	2302      	movs	r3, #2
 80034c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ce:	2303      	movs	r3, #3
 80034d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034d2:	2305      	movs	r3, #5
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d6:	f107 0314 	add.w	r3, r7, #20
 80034da:	4619      	mov	r1, r3
 80034dc:	4805      	ldr	r0, [pc, #20]	; (80034f4 <HAL_SPI_MspInit+0x8c>)
 80034de:	f001 fe7d 	bl	80051dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80034e2:	bf00      	nop
 80034e4:	3728      	adds	r7, #40	; 0x28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40013000 	.word	0x40013000
 80034f0:	40023800 	.word	0x40023800
 80034f4:	40020000 	.word	0x40020000

080034f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b088      	sub	sp, #32
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003508:	d116      	bne.n	8003538 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
 800350e:	4b3c      	ldr	r3, [pc, #240]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	4a3b      	ldr	r2, [pc, #236]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	6413      	str	r3, [r2, #64]	; 0x40
 800351a:	4b39      	ldr	r3, [pc, #228]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	61fb      	str	r3, [r7, #28]
 8003524:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003526:	2200      	movs	r2, #0
 8003528:	2100      	movs	r1, #0
 800352a:	201c      	movs	r0, #28
 800352c:	f001 fa1d 	bl	800496a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003530:	201c      	movs	r0, #28
 8003532:	f001 fa36 	bl	80049a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8003536:	e05e      	b.n	80035f6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM3)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a31      	ldr	r2, [pc, #196]	; (8003604 <HAL_TIM_Base_MspInit+0x10c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d10e      	bne.n	8003560 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003542:	2300      	movs	r3, #0
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	4b2e      	ldr	r3, [pc, #184]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	4a2d      	ldr	r2, [pc, #180]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 800354c:	f043 0302 	orr.w	r3, r3, #2
 8003550:	6413      	str	r3, [r2, #64]	; 0x40
 8003552:	4b2b      	ldr	r3, [pc, #172]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	61bb      	str	r3, [r7, #24]
 800355c:	69bb      	ldr	r3, [r7, #24]
}
 800355e:	e04a      	b.n	80035f6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM4)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a28      	ldr	r2, [pc, #160]	; (8003608 <HAL_TIM_Base_MspInit+0x110>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d10e      	bne.n	8003588 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	4b24      	ldr	r3, [pc, #144]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	4a23      	ldr	r2, [pc, #140]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 8003574:	f043 0304 	orr.w	r3, r3, #4
 8003578:	6413      	str	r3, [r2, #64]	; 0x40
 800357a:	4b21      	ldr	r3, [pc, #132]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f003 0304 	and.w	r3, r3, #4
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	697b      	ldr	r3, [r7, #20]
}
 8003586:	e036      	b.n	80035f6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM5)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a1f      	ldr	r2, [pc, #124]	; (800360c <HAL_TIM_Base_MspInit+0x114>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d116      	bne.n	80035c0 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	613b      	str	r3, [r7, #16]
 8003596:	4b1a      	ldr	r3, [pc, #104]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	4a19      	ldr	r2, [pc, #100]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 800359c:	f043 0308 	orr.w	r3, r3, #8
 80035a0:	6413      	str	r3, [r2, #64]	; 0x40
 80035a2:	4b17      	ldr	r3, [pc, #92]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80035ae:	2200      	movs	r2, #0
 80035b0:	2100      	movs	r1, #0
 80035b2:	2032      	movs	r0, #50	; 0x32
 80035b4:	f001 f9d9 	bl	800496a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80035b8:	2032      	movs	r0, #50	; 0x32
 80035ba:	f001 f9f2 	bl	80049a2 <HAL_NVIC_EnableIRQ>
}
 80035be:	e01a      	b.n	80035f6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a12      	ldr	r2, [pc, #72]	; (8003610 <HAL_TIM_Base_MspInit+0x118>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d115      	bne.n	80035f6 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	4a0b      	ldr	r2, [pc, #44]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 80035d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035d8:	6413      	str	r3, [r2, #64]	; 0x40
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <HAL_TIM_Base_MspInit+0x108>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80035e6:	2200      	movs	r2, #0
 80035e8:	2100      	movs	r1, #0
 80035ea:	202c      	movs	r0, #44	; 0x2c
 80035ec:	f001 f9bd 	bl	800496a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80035f0:	202c      	movs	r0, #44	; 0x2c
 80035f2:	f001 f9d6 	bl	80049a2 <HAL_NVIC_EnableIRQ>
}
 80035f6:	bf00      	nop
 80035f8:	3720      	adds	r7, #32
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40023800 	.word	0x40023800
 8003604:	40000400 	.word	0x40000400
 8003608:	40000800 	.word	0x40000800
 800360c:	40000c00 	.word	0x40000c00
 8003610:	40001c00 	.word	0x40001c00

08003614 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a4a      	ldr	r2, [pc, #296]	; (800374c <HAL_TIM_PWM_MspInit+0x138>)
 8003622:	4293      	cmp	r3, r2
 8003624:	f040 808e 	bne.w	8003744 <HAL_TIM_PWM_MspInit+0x130>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003628:	2300      	movs	r3, #0
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	4b48      	ldr	r3, [pc, #288]	; (8003750 <HAL_TIM_PWM_MspInit+0x13c>)
 800362e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003630:	4a47      	ldr	r2, [pc, #284]	; (8003750 <HAL_TIM_PWM_MspInit+0x13c>)
 8003632:	f043 0302 	orr.w	r3, r3, #2
 8003636:	6453      	str	r3, [r2, #68]	; 0x44
 8003638:	4b45      	ldr	r3, [pc, #276]	; (8003750 <HAL_TIM_PWM_MspInit+0x13c>)
 800363a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 DMA Init */
    /* TIM8_CH3 Init */
    hdma_tim8_ch3.Instance = DMA2_Stream4;
 8003644:	4b43      	ldr	r3, [pc, #268]	; (8003754 <HAL_TIM_PWM_MspInit+0x140>)
 8003646:	4a44      	ldr	r2, [pc, #272]	; (8003758 <HAL_TIM_PWM_MspInit+0x144>)
 8003648:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch3.Init.Channel = DMA_CHANNEL_7;
 800364a:	4b42      	ldr	r3, [pc, #264]	; (8003754 <HAL_TIM_PWM_MspInit+0x140>)
 800364c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003650:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003652:	4b40      	ldr	r3, [pc, #256]	; (8003754 <HAL_TIM_PWM_MspInit+0x140>)
 8003654:	2240      	movs	r2, #64	; 0x40
 8003656:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003658:	4b3e      	ldr	r3, [pc, #248]	; (8003754 <HAL_TIM_PWM_MspInit+0x140>)
 800365a:	2200      	movs	r2, #0
 800365c:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800365e:	4b3d      	ldr	r3, [pc, #244]	; (8003754 <HAL_TIM_PWM_MspInit+0x140>)
 8003660:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003664:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003666:	4b3b      	ldr	r3, [pc, #236]	; (8003754 <HAL_TIM_PWM_MspInit+0x140>)
 8003668:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800366c:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800366e:	4b39      	ldr	r3, [pc, #228]	; (8003754 <HAL_TIM_PWM_MspInit+0x140>)
 8003670:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003674:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch3.Init.Mode = DMA_CIRCULAR;
 8003676:	4b37      	ldr	r3, [pc, #220]	; (8003754 <HAL_TIM_PWM_MspInit+0x140>)
 8003678:	f44f 7280 	mov.w	r2, #256	; 0x100
 800367c:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 800367e:	4b35      	ldr	r3, [pc, #212]	; (8003754 <HAL_TIM_PWM_MspInit+0x140>)
 8003680:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003684:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003686:	4b33      	ldr	r3, [pc, #204]	; (8003754 <HAL_TIM_PWM_MspInit+0x140>)
 8003688:	2200      	movs	r2, #0
 800368a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch3) != HAL_OK)
 800368c:	4831      	ldr	r0, [pc, #196]	; (8003754 <HAL_TIM_PWM_MspInit+0x140>)
 800368e:	f001 f9a3 	bl	80049d8 <HAL_DMA_Init>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <HAL_TIM_PWM_MspInit+0x88>
    {
      Error_Handler();
 8003698:	f7ff feb9 	bl	800340e <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a2d      	ldr	r2, [pc, #180]	; (8003754 <HAL_TIM_PWM_MspInit+0x140>)
 80036a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80036a2:	4a2c      	ldr	r2, [pc, #176]	; (8003754 <HAL_TIM_PWM_MspInit+0x140>)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM8_CH4_TRIG_COM Init */
    hdma_tim8_ch4_trig_com.Instance = DMA2_Stream7;
 80036a8:	4b2c      	ldr	r3, [pc, #176]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 80036aa:	4a2d      	ldr	r2, [pc, #180]	; (8003760 <HAL_TIM_PWM_MspInit+0x14c>)
 80036ac:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch4_trig_com.Init.Channel = DMA_CHANNEL_7;
 80036ae:	4b2b      	ldr	r3, [pc, #172]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 80036b0:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80036b4:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036b6:	4b29      	ldr	r3, [pc, #164]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 80036b8:	2240      	movs	r2, #64	; 0x40
 80036ba:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 80036bc:	4b27      	ldr	r3, [pc, #156]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 80036be:	2200      	movs	r2, #0
 80036c0:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 80036c2:	4b26      	ldr	r3, [pc, #152]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 80036c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036c8:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80036ca:	4b24      	ldr	r3, [pc, #144]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 80036cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036d0:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80036d2:	4b22      	ldr	r3, [pc, #136]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 80036d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036d8:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 80036da:	4b20      	ldr	r3, [pc, #128]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 80036dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036e0:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 80036e2:	4b1e      	ldr	r3, [pc, #120]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 80036e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036e8:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036ea:	4b1c      	ldr	r3, [pc, #112]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch4_trig_com) != HAL_OK)
 80036f0:	481a      	ldr	r0, [pc, #104]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 80036f2:	f001 f971 	bl	80049d8 <HAL_DMA_Init>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_TIM_PWM_MspInit+0xec>
    {
      Error_Handler();
 80036fc:	f7ff fe87 	bl	800340e <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim8_ch4_trig_com);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a16      	ldr	r2, [pc, #88]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 8003704:	631a      	str	r2, [r3, #48]	; 0x30
 8003706:	4a15      	ldr	r2, [pc, #84]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim8_ch4_trig_com);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a13      	ldr	r2, [pc, #76]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 8003710:	639a      	str	r2, [r3, #56]	; 0x38
 8003712:	4a12      	ldr	r2, [pc, #72]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim8_ch4_trig_com);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a10      	ldr	r2, [pc, #64]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 800371c:	635a      	str	r2, [r3, #52]	; 0x34
 800371e:	4a0f      	ldr	r2, [pc, #60]	; (800375c <HAL_TIM_PWM_MspInit+0x148>)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003724:	2200      	movs	r2, #0
 8003726:	2100      	movs	r1, #0
 8003728:	202c      	movs	r0, #44	; 0x2c
 800372a:	f001 f91e 	bl	800496a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800372e:	202c      	movs	r0, #44	; 0x2c
 8003730:	f001 f937 	bl	80049a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8003734:	2200      	movs	r2, #0
 8003736:	2100      	movs	r1, #0
 8003738:	202d      	movs	r0, #45	; 0x2d
 800373a:	f001 f916 	bl	800496a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800373e:	202d      	movs	r0, #45	; 0x2d
 8003740:	f001 f92f 	bl	80049a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003744:	bf00      	nop
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40010400 	.word	0x40010400
 8003750:	40023800 	.word	0x40023800
 8003754:	200017e4 	.word	0x200017e4
 8003758:	40026470 	.word	0x40026470
 800375c:	20001844 	.word	0x20001844
 8003760:	400264b8 	.word	0x400264b8

08003764 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08e      	sub	sp, #56	; 0x38
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800376c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	609a      	str	r2, [r3, #8]
 8003778:	60da      	str	r2, [r3, #12]
 800377a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003784:	d13e      	bne.n	8003804 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003786:	2300      	movs	r3, #0
 8003788:	623b      	str	r3, [r7, #32]
 800378a:	4b66      	ldr	r3, [pc, #408]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	4a65      	ldr	r2, [pc, #404]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 8003790:	f043 0301 	orr.w	r3, r3, #1
 8003794:	6313      	str	r3, [r2, #48]	; 0x30
 8003796:	4b63      	ldr	r3, [pc, #396]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	623b      	str	r3, [r7, #32]
 80037a0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037a2:	2300      	movs	r3, #0
 80037a4:	61fb      	str	r3, [r7, #28]
 80037a6:	4b5f      	ldr	r3, [pc, #380]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	4a5e      	ldr	r2, [pc, #376]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 80037ac:	f043 0302 	orr.w	r3, r3, #2
 80037b0:	6313      	str	r3, [r2, #48]	; 0x30
 80037b2:	4b5c      	ldr	r3, [pc, #368]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	69fb      	ldr	r3, [r7, #28]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15;
 80037be:	f248 0306 	movw	r3, #32774	; 0x8006
 80037c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c4:	2302      	movs	r3, #2
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c8:	2300      	movs	r3, #0
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037cc:	2300      	movs	r3, #0
 80037ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037d0:	2301      	movs	r3, #1
 80037d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037d8:	4619      	mov	r1, r3
 80037da:	4853      	ldr	r0, [pc, #332]	; (8003928 <HAL_TIM_MspPostInit+0x1c4>)
 80037dc:	f001 fcfe 	bl	80051dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80037e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e6:	2302      	movs	r3, #2
 80037e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ee:	2300      	movs	r3, #0
 80037f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037f2:	2301      	movs	r3, #1
 80037f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037fa:	4619      	mov	r1, r3
 80037fc:	484b      	ldr	r0, [pc, #300]	; (800392c <HAL_TIM_MspPostInit+0x1c8>)
 80037fe:	f001 fced 	bl	80051dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003802:	e08a      	b.n	800391a <HAL_TIM_MspPostInit+0x1b6>
  else if(htim->Instance==TIM3)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a49      	ldr	r2, [pc, #292]	; (8003930 <HAL_TIM_MspPostInit+0x1cc>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d13c      	bne.n	8003888 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	61bb      	str	r3, [r7, #24]
 8003812:	4b44      	ldr	r3, [pc, #272]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	4a43      	ldr	r2, [pc, #268]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 8003818:	f043 0302 	orr.w	r3, r3, #2
 800381c:	6313      	str	r3, [r2, #48]	; 0x30
 800381e:	4b41      	ldr	r3, [pc, #260]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
 800382e:	4b3d      	ldr	r3, [pc, #244]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	4a3c      	ldr	r2, [pc, #240]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 8003834:	f043 0304 	orr.w	r3, r3, #4
 8003838:	6313      	str	r3, [r2, #48]	; 0x30
 800383a:	4b3a      	ldr	r3, [pc, #232]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8003846:	2323      	movs	r3, #35	; 0x23
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384a:	2302      	movs	r3, #2
 800384c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384e:	2300      	movs	r3, #0
 8003850:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003852:	2300      	movs	r3, #0
 8003854:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003856:	2302      	movs	r3, #2
 8003858:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800385a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800385e:	4619      	mov	r1, r3
 8003860:	4832      	ldr	r0, [pc, #200]	; (800392c <HAL_TIM_MspPostInit+0x1c8>)
 8003862:	f001 fcbb 	bl	80051dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003866:	2340      	movs	r3, #64	; 0x40
 8003868:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386a:	2302      	movs	r3, #2
 800386c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386e:	2300      	movs	r3, #0
 8003870:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003872:	2300      	movs	r3, #0
 8003874:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003876:	2302      	movs	r3, #2
 8003878:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800387a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800387e:	4619      	mov	r1, r3
 8003880:	482c      	ldr	r0, [pc, #176]	; (8003934 <HAL_TIM_MspPostInit+0x1d0>)
 8003882:	f001 fcab 	bl	80051dc <HAL_GPIO_Init>
}
 8003886:	e048      	b.n	800391a <HAL_TIM_MspPostInit+0x1b6>
  else if(htim->Instance==TIM4)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a2a      	ldr	r2, [pc, #168]	; (8003938 <HAL_TIM_MspPostInit+0x1d4>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d11f      	bne.n	80038d2 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	613b      	str	r3, [r7, #16]
 8003896:	4b23      	ldr	r3, [pc, #140]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	4a22      	ldr	r2, [pc, #136]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 800389c:	f043 0302 	orr.w	r3, r3, #2
 80038a0:	6313      	str	r3, [r2, #48]	; 0x30
 80038a2:	4b20      	ldr	r3, [pc, #128]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	613b      	str	r3, [r7, #16]
 80038ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80038ae:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b4:	2302      	movs	r3, #2
 80038b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b8:	2300      	movs	r3, #0
 80038ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038bc:	2300      	movs	r3, #0
 80038be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80038c0:	2302      	movs	r3, #2
 80038c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038c8:	4619      	mov	r1, r3
 80038ca:	4818      	ldr	r0, [pc, #96]	; (800392c <HAL_TIM_MspPostInit+0x1c8>)
 80038cc:	f001 fc86 	bl	80051dc <HAL_GPIO_Init>
}
 80038d0:	e023      	b.n	800391a <HAL_TIM_MspPostInit+0x1b6>
  else if(htim->Instance==TIM8)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a19      	ldr	r2, [pc, #100]	; (800393c <HAL_TIM_MspPostInit+0x1d8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d11e      	bne.n	800391a <HAL_TIM_MspPostInit+0x1b6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038dc:	2300      	movs	r3, #0
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	4b10      	ldr	r3, [pc, #64]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 80038e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e4:	4a0f      	ldr	r2, [pc, #60]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 80038e6:	f043 0304 	orr.w	r3, r3, #4
 80038ea:	6313      	str	r3, [r2, #48]	; 0x30
 80038ec:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <HAL_TIM_MspPostInit+0x1c0>)
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80038f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fe:	2302      	movs	r3, #2
 8003900:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003902:	2301      	movs	r3, #1
 8003904:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003906:	2303      	movs	r3, #3
 8003908:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800390a:	2303      	movs	r3, #3
 800390c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800390e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003912:	4619      	mov	r1, r3
 8003914:	4807      	ldr	r0, [pc, #28]	; (8003934 <HAL_TIM_MspPostInit+0x1d0>)
 8003916:	f001 fc61 	bl	80051dc <HAL_GPIO_Init>
}
 800391a:	bf00      	nop
 800391c:	3738      	adds	r7, #56	; 0x38
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40023800 	.word	0x40023800
 8003928:	40020000 	.word	0x40020000
 800392c:	40020400 	.word	0x40020400
 8003930:	40000400 	.word	0x40000400
 8003934:	40020800 	.word	0x40020800
 8003938:	40000800 	.word	0x40000800
 800393c:	40010400 	.word	0x40010400

08003940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08a      	sub	sp, #40	; 0x28
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003948:	f107 0314 	add.w	r3, r7, #20
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	605a      	str	r2, [r3, #4]
 8003952:	609a      	str	r2, [r3, #8]
 8003954:	60da      	str	r2, [r3, #12]
 8003956:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a1d      	ldr	r2, [pc, #116]	; (80039d4 <HAL_UART_MspInit+0x94>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d134      	bne.n	80039cc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	4b1c      	ldr	r3, [pc, #112]	; (80039d8 <HAL_UART_MspInit+0x98>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	4a1b      	ldr	r2, [pc, #108]	; (80039d8 <HAL_UART_MspInit+0x98>)
 800396c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003970:	6413      	str	r3, [r2, #64]	; 0x40
 8003972:	4b19      	ldr	r3, [pc, #100]	; (80039d8 <HAL_UART_MspInit+0x98>)
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800397a:	613b      	str	r3, [r7, #16]
 800397c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <HAL_UART_MspInit+0x98>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	4a14      	ldr	r2, [pc, #80]	; (80039d8 <HAL_UART_MspInit+0x98>)
 8003988:	f043 0308 	orr.w	r3, r3, #8
 800398c:	6313      	str	r3, [r2, #48]	; 0x30
 800398e:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <HAL_UART_MspInit+0x98>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800399a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800399e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a0:	2302      	movs	r3, #2
 80039a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a8:	2303      	movs	r3, #3
 80039aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80039ac:	2307      	movs	r3, #7
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039b0:	f107 0314 	add.w	r3, r7, #20
 80039b4:	4619      	mov	r1, r3
 80039b6:	4809      	ldr	r0, [pc, #36]	; (80039dc <HAL_UART_MspInit+0x9c>)
 80039b8:	f001 fc10 	bl	80051dc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80039bc:	2200      	movs	r2, #0
 80039be:	2100      	movs	r1, #0
 80039c0:	2027      	movs	r0, #39	; 0x27
 80039c2:	f000 ffd2 	bl	800496a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80039c6:	2027      	movs	r0, #39	; 0x27
 80039c8:	f000 ffeb 	bl	80049a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80039cc:	bf00      	nop
 80039ce:	3728      	adds	r7, #40	; 0x28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40004800 	.word	0x40004800
 80039d8:	40023800 	.word	0x40023800
 80039dc:	40020c00 	.word	0x40020c00

080039e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039e4:	e7fe      	b.n	80039e4 <NMI_Handler+0x4>

080039e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039e6:	b480      	push	{r7}
 80039e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039ea:	e7fe      	b.n	80039ea <HardFault_Handler+0x4>

080039ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039f0:	e7fe      	b.n	80039f0 <MemManage_Handler+0x4>

080039f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039f2:	b480      	push	{r7}
 80039f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039f6:	e7fe      	b.n	80039f6 <BusFault_Handler+0x4>

080039f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039fc:	e7fe      	b.n	80039fc <UsageFault_Handler+0x4>

080039fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039fe:	b480      	push	{r7}
 8003a00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a02:	bf00      	nop
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a10:	bf00      	nop
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a1e:	bf00      	nop
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a2c:	f000 fe7e 	bl	800472c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a30:	bf00      	nop
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//HAL_GPIO_TogglePin(GPIOD,LD4_Pin);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a38:	4802      	ldr	r0, [pc, #8]	; (8003a44 <TIM2_IRQHandler+0x10>)
 8003a3a:	f004 fb7f 	bl	800813c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a3e:	bf00      	nop
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20001634 	.word	0x20001634

08003a48 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003a4c:	4802      	ldr	r0, [pc, #8]	; (8003a58 <USART3_IRQHandler+0x10>)
 8003a4e:	f005 fbc7 	bl	80091e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003a52:	bf00      	nop
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	200018a4 	.word	0x200018a4

08003a5c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003a60:	4803      	ldr	r0, [pc, #12]	; (8003a70 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8003a62:	f004 fb6b 	bl	800813c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8003a66:	4803      	ldr	r0, [pc, #12]	; (8003a74 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8003a68:	f004 fb68 	bl	800813c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003a6c:	bf00      	nop
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	20001754 	.word	0x20001754
 8003a74:	2000179c 	.word	0x2000179c

08003a78 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003a7c:	4802      	ldr	r0, [pc, #8]	; (8003a88 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003a7e:	f004 fb5d 	bl	800813c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20001754 	.word	0x20001754

08003a8c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	//HAL_GPIO_TogglePin(GPIOE, TEST_OUTPUT_Pin);
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003a90:	4802      	ldr	r0, [pc, #8]	; (8003a9c <TIM5_IRQHandler+0x10>)
 8003a92:	f004 fb53 	bl	800813c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003a96:	bf00      	nop
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	2000170c 	.word	0x2000170c

08003aa0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch3);
 8003aa4:	4802      	ldr	r0, [pc, #8]	; (8003ab0 <DMA2_Stream4_IRQHandler+0x10>)
 8003aa6:	f001 f92f 	bl	8004d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003aaa:	bf00      	nop
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	200017e4 	.word	0x200017e4

08003ab4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003ab8:	4802      	ldr	r0, [pc, #8]	; (8003ac4 <OTG_FS_IRQHandler+0x10>)
 8003aba:	f001 ffc9 	bl	8005a50 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003abe:	bf00      	nop
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	200032e4 	.word	0x200032e4

08003ac8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch4_trig_com);
 8003acc:	4802      	ldr	r0, [pc, #8]	; (8003ad8 <DMA2_Stream7_IRQHandler+0x10>)
 8003ace:	f001 f91b 	bl	8004d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003ad2:	bf00      	nop
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20001844 	.word	0x20001844

08003adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ae4:	4a14      	ldr	r2, [pc, #80]	; (8003b38 <_sbrk+0x5c>)
 8003ae6:	4b15      	ldr	r3, [pc, #84]	; (8003b3c <_sbrk+0x60>)
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003af0:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <_sbrk+0x64>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d102      	bne.n	8003afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003af8:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <_sbrk+0x64>)
 8003afa:	4a12      	ldr	r2, [pc, #72]	; (8003b44 <_sbrk+0x68>)
 8003afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003afe:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <_sbrk+0x64>)
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4413      	add	r3, r2
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d207      	bcs.n	8003b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b0c:	f00d fbec 	bl	80112e8 <__errno>
 8003b10:	4603      	mov	r3, r0
 8003b12:	220c      	movs	r2, #12
 8003b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b1a:	e009      	b.n	8003b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b1c:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <_sbrk+0x64>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b22:	4b07      	ldr	r3, [pc, #28]	; (8003b40 <_sbrk+0x64>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4413      	add	r3, r2
 8003b2a:	4a05      	ldr	r2, [pc, #20]	; (8003b40 <_sbrk+0x64>)
 8003b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	20020000 	.word	0x20020000
 8003b3c:	00000400 	.word	0x00000400
 8003b40:	200018f4 	.word	0x200018f4
 8003b44:	200035f8 	.word	0x200035f8

08003b48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b4c:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <SystemInit+0x20>)
 8003b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b52:	4a05      	ldr	r2, [pc, #20]	; (8003b68 <SystemInit+0x20>)
 8003b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b5c:	bf00      	nop
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	e000ed00 	.word	0xe000ed00

08003b6c <SD_SPI_Init>:
void make_delay(int delay);

/***	FUNCTIONS	***********************************************************************************************************************************************************************************/
/******************************************************************************************************************************************************************************************************/
uint8_t SD_SPI_Init(void)
{
 8003b6c:	b590      	push	{r4, r7, lr}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
	uint8_t vCmd;
	int16_t vCounter;
	//uint32_t vTmpPrc;
	sdinfo.type = 0;
 8003b72:	4b6b      	ldr	r3, [pc, #428]	; (8003d20 <SD_SPI_Init+0x1b4>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	701a      	strb	r2, [r3, #0]
	uint8_t aArray[4];

	HAL_Delay(250);														// SD voltage stability delay
 8003b78:	20fa      	movs	r0, #250	; 0xfa
 8003b7a:	f000 fdf7 	bl	800476c <HAL_Delay>

	/*vTmpPrc = hspi2.Init.BaudRatePrescaler;
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128; 		//156.25 kbbs*/

	HAL_SPI_Init(&hspi1);
 8003b7e:	4869      	ldr	r0, [pc, #420]	; (8003d24 <SD_SPI_Init+0x1b8>)
 8003b80:	f003 fd9e 	bl	80076c0 <HAL_SPI_Init>

	SD_DESELECT;
 8003b84:	2201      	movs	r2, #1
 8003b86:	2108      	movs	r1, #8
 8003b88:	4867      	ldr	r0, [pc, #412]	; (8003d28 <SD_SPI_Init+0x1bc>)
 8003b8a:	f001 fcc3 	bl	8005514 <HAL_GPIO_WritePin>
	for(vCounter = 0; vCounter<10; vCounter++) // 80 pulse bit. Set SPI as SD card interface
 8003b8e:	2300      	movs	r3, #0
 8003b90:	80bb      	strh	r3, [r7, #4]
 8003b92:	e007      	b.n	8003ba4 <SD_SPI_Init+0x38>
		SPI_Release();
 8003b94:	f000 f902 	bl	8003d9c <SPI_Release>
	for(vCounter = 0; vCounter<10; vCounter++) // 80 pulse bit. Set SPI as SD card interface
 8003b98:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	80bb      	strh	r3, [r7, #4]
 8003ba4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003ba8:	2b09      	cmp	r3, #9
 8003baa:	ddf3      	ble.n	8003b94 <SD_SPI_Init+0x28>

	/*hspi2.Init.BaudRatePrescaler = vTmpPrc;
	HAL_SPI_Init(&hspi2);*/

	SD_SELECT;
 8003bac:	2200      	movs	r2, #0
 8003bae:	2108      	movs	r1, #8
 8003bb0:	485d      	ldr	r0, [pc, #372]	; (8003d28 <SD_SPI_Init+0x1bc>)
 8003bb2:	f001 fcaf 	bl	8005514 <HAL_GPIO_WritePin>
	if (SD_SPI_Cmd(CMD0, 0) == 1) // Enter Idle state
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	2040      	movs	r0, #64	; 0x40
 8003bba:	f000 f91b 	bl	8003df4 <SD_SPI_Cmd>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	f040 80a5 	bne.w	8003d10 <SD_SPI_Init+0x1a4>
		{
			SPI_Release();
 8003bc6:	f000 f8e9 	bl	8003d9c <SPI_Release>
			if (SD_SPI_Cmd(CMD8, 0x1AA) == 1) // SDv2
 8003bca:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003bce:	2048      	movs	r0, #72	; 0x48
 8003bd0:	f000 f910 	bl	8003df4 <SD_SPI_Cmd>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d162      	bne.n	8003ca0 <SD_SPI_Init+0x134>
				{
					for (vCounter = 0; vCounter < 4; vCounter++)
 8003bda:	2300      	movs	r3, #0
 8003bdc:	80bb      	strh	r3, [r7, #4]
 8003bde:	e010      	b.n	8003c02 <SD_SPI_Init+0x96>
						aArray[vCounter] = SPI_ReceiveByte();
 8003be0:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003be4:	f000 f8cd 	bl	8003d82 <SPI_ReceiveByte>
 8003be8:	4603      	mov	r3, r0
 8003bea:	461a      	mov	r2, r3
 8003bec:	f104 0308 	add.w	r3, r4, #8
 8003bf0:	443b      	add	r3, r7
 8003bf2:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (vCounter = 0; vCounter < 4; vCounter++)
 8003bf6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	80bb      	strh	r3, [r7, #4]
 8003c02:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	ddea      	ble.n	8003be0 <SD_SPI_Init+0x74>
					if (aArray[2] == 0x01 && aArray[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8003c0a:	78bb      	ldrb	r3, [r7, #2]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	f040 8081 	bne.w	8003d14 <SD_SPI_Init+0x1a8>
 8003c12:	78fb      	ldrb	r3, [r7, #3]
 8003c14:	2baa      	cmp	r3, #170	; 0xaa
 8003c16:	d17d      	bne.n	8003d14 <SD_SPI_Init+0x1a8>
						{
							for (vCounter = 12000; (vCounter && SD_SPI_Cmd(ACMD41, 1UL << 30)); vCounter--)	{;}	 // Wait for leaving idle state (ACMD41 with HCS bit)
 8003c18:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8003c1c:	80bb      	strh	r3, [r7, #4]
 8003c1e:	e005      	b.n	8003c2c <SD_SPI_Init+0xc0>
 8003c20:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	80bb      	strh	r3, [r7, #4]
 8003c2c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d007      	beq.n	8003c44 <SD_SPI_Init+0xd8>
 8003c34:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003c38:	20e9      	movs	r0, #233	; 0xe9
 8003c3a:	f000 f8db 	bl	8003df4 <SD_SPI_Cmd>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1ed      	bne.n	8003c20 <SD_SPI_Init+0xb4>
							if (vCounter && SD_SPI_Cmd(CMD58, 0) == 0)
 8003c44:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d063      	beq.n	8003d14 <SD_SPI_Init+0x1a8>
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	207a      	movs	r0, #122	; 0x7a
 8003c50:	f000 f8d0 	bl	8003df4 <SD_SPI_Cmd>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d15c      	bne.n	8003d14 <SD_SPI_Init+0x1a8>
								{ // Check CCS bit in the OCR
									for (vCounter = 0; vCounter < 4; vCounter++) 	aArray[vCounter] = SPI_ReceiveByte();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	80bb      	strh	r3, [r7, #4]
 8003c5e:	e010      	b.n	8003c82 <SD_SPI_Init+0x116>
 8003c60:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003c64:	f000 f88d 	bl	8003d82 <SPI_ReceiveByte>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	f104 0308 	add.w	r3, r4, #8
 8003c70:	443b      	add	r3, r7
 8003c72:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003c76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	80bb      	strh	r3, [r7, #4]
 8003c82:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	ddea      	ble.n	8003c60 <SD_SPI_Init+0xf4>
									sdinfo.type = (aArray[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 8003c8a:	783b      	ldrb	r3, [r7, #0]
 8003c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <SD_SPI_Init+0x12c>
 8003c94:	220c      	movs	r2, #12
 8003c96:	e000      	b.n	8003c9a <SD_SPI_Init+0x12e>
 8003c98:	2204      	movs	r2, #4
 8003c9a:	4b21      	ldr	r3, [pc, #132]	; (8003d20 <SD_SPI_Init+0x1b4>)
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	e039      	b.n	8003d14 <SD_SPI_Init+0x1a8>
								}
						}
				}
			else		//SDv1 or MMCv3
				{
					if (SD_SPI_Cmd(ACMD41, 0) <= 1)
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	20e9      	movs	r0, #233	; 0xe9
 8003ca4:	f000 f8a6 	bl	8003df4 <SD_SPI_Cmd>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d805      	bhi.n	8003cba <SD_SPI_Init+0x14e>
						{
							sdinfo.type = CT_SD1; vCmd = ACMD41; // SDv1
 8003cae:	4b1c      	ldr	r3, [pc, #112]	; (8003d20 <SD_SPI_Init+0x1b4>)
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	701a      	strb	r2, [r3, #0]
 8003cb4:	23e9      	movs	r3, #233	; 0xe9
 8003cb6:	71fb      	strb	r3, [r7, #7]
 8003cb8:	e004      	b.n	8003cc4 <SD_SPI_Init+0x158>
						}
						else
						{
							sdinfo.type = CT_MMC; vCmd = CMD1; // MMCv3
 8003cba:	4b19      	ldr	r3, [pc, #100]	; (8003d20 <SD_SPI_Init+0x1b4>)
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	701a      	strb	r2, [r3, #0]
 8003cc0:	2341      	movs	r3, #65	; 0x41
 8003cc2:	71fb      	strb	r3, [r7, #7]
						}
					for (vCounter = 25000; vCounter && SD_SPI_Cmd(vCmd, 0); vCounter--) ; // Wait for leaving idle state
 8003cc4:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8003cc8:	80bb      	strh	r3, [r7, #4]
 8003cca:	e005      	b.n	8003cd8 <SD_SPI_Init+0x16c>
 8003ccc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	80bb      	strh	r3, [r7, #4]
 8003cd8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d007      	beq.n	8003cf0 <SD_SPI_Init+0x184>
 8003ce0:	79fb      	ldrb	r3, [r7, #7]
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 f885 	bl	8003df4 <SD_SPI_Cmd>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1ed      	bne.n	8003ccc <SD_SPI_Init+0x160>
					if ( ! vCounter || SD_SPI_Cmd(CMD16, 512) != 0) // Set R/W block length to 512
 8003cf0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d007      	beq.n	8003d08 <SD_SPI_Init+0x19c>
 8003cf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003cfc:	2050      	movs	r0, #80	; 0x50
 8003cfe:	f000 f879 	bl	8003df4 <SD_SPI_Cmd>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <SD_SPI_Init+0x1a8>
					sdinfo.type = 0;
 8003d08:	4b05      	ldr	r3, [pc, #20]	; (8003d20 <SD_SPI_Init+0x1b4>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	701a      	strb	r2, [r3, #0]
 8003d0e:	e001      	b.n	8003d14 <SD_SPI_Init+0x1a8>
				}
		}
	else
		{
			return 1;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e000      	b.n	8003d16 <SD_SPI_Init+0x1aa>
		}

	return 0;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd90      	pop	{r4, r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20002930 	.word	0x20002930
 8003d24:	200015dc 	.word	0x200015dc
 8003d28:	40020000 	.word	0x40020000

08003d2c <SPIx_WriteRead>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SPIx_WriteRead(uint8_t byte)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	4603      	mov	r3, r0
 8003d34:	71fb      	strb	r3, [r7, #7]
  uint8_t vReceivedByte = 0;
 8003d36:	2300      	movs	r3, #0
 8003d38:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &byte, (uint8_t*) &vReceivedByte, 1, 0x1000) != HAL_OK)
 8003d3a:	f107 020f 	add.w	r2, r7, #15
 8003d3e:	1df9      	adds	r1, r7, #7
 8003d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	2301      	movs	r3, #1
 8003d48:	4806      	ldr	r0, [pc, #24]	; (8003d64 <SPIx_WriteRead+0x38>)
 8003d4a:	f003 fd42 	bl	80077d2 <HAL_SPI_TransmitReceive>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <SPIx_WriteRead+0x2c>
  {
  	SD_Error_Handler();
 8003d54:	f000 fa40 	bl	80041d8 <SD_Error_Handler>
  }
  return vReceivedByte;
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	200015dc 	.word	0x200015dc

08003d68 <SPI_SendByte>:

/****************************************************************************************************************/
/****************************************************************************************************************/
void SPI_SendByte(uint8_t byte)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	71fb      	strb	r3, [r7, #7]
  SPIx_WriteRead(byte);
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff ffd9 	bl	8003d2c <SPIx_WriteRead>
}
 8003d7a:	bf00      	nop
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <SPI_ReceiveByte>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SPI_ReceiveByte(void)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b082      	sub	sp, #8
 8003d86:	af00      	add	r7, sp, #0
  uint8_t byte = SPIx_WriteRead(0xFF);
 8003d88:	20ff      	movs	r0, #255	; 0xff
 8003d8a:	f7ff ffcf 	bl	8003d2c <SPIx_WriteRead>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	71fb      	strb	r3, [r7, #7]
  return byte;
 8003d92:	79fb      	ldrb	r3, [r7, #7]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <SPI_Release>:

/****************************************************************************************************************/
/****************************************************************************************************************/
void SPI_Release(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  SPIx_WriteRead(0xFF);
 8003da0:	20ff      	movs	r0, #255	; 0xff
 8003da2:	f7ff ffc3 	bl	8003d2c <SPIx_WriteRead>
}
 8003da6:	bf00      	nop
 8003da8:	bd80      	pop	{r7, pc}

08003daa <SD_SPI_WaitingForReadiness>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_WaitingForReadiness(void)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
	uint8_t vResult;
	uint16_t vCount = 0;
 8003db0:	2300      	movs	r3, #0
 8003db2:	80fb      	strh	r3, [r7, #6]

	do {
		vResult = SPI_ReceiveByte();
 8003db4:	f7ff ffe5 	bl	8003d82 <SPI_ReceiveByte>
 8003db8:	4603      	mov	r3, r0
 8003dba:	717b      	strb	r3, [r7, #5]
		vCount++;
 8003dbc:	88fb      	ldrh	r3, [r7, #6]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	80fb      	strh	r3, [r7, #6]
	} while ( (vResult != 0xFF) && (vCount < 0xFFFF) );
 8003dc2:	797b      	ldrb	r3, [r7, #5]
 8003dc4:	2bff      	cmp	r3, #255	; 0xff
 8003dc6:	d004      	beq.n	8003dd2 <SD_SPI_WaitingForReadiness+0x28>
 8003dc8:	88fb      	ldrh	r3, [r7, #6]
 8003dca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d1f0      	bne.n	8003db4 <SD_SPI_WaitingForReadiness+0xa>

	if (vCount >= 0xFFFF) return ERROR;
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d101      	bne.n	8003de0 <SD_SPI_WaitingForReadiness+0x36>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e005      	b.n	8003dec <SD_SPI_WaitingForReadiness+0x42>

	  return (vResult == 0xFF) ? OK: ERROR;
 8003de0:	797b      	ldrb	r3, [r7, #5]
 8003de2:	2bff      	cmp	r3, #255	; 0xff
 8003de4:	bf14      	ite	ne
 8003de6:	2301      	movne	r3, #1
 8003de8:	2300      	moveq	r3, #0
 8003dea:	b2db      	uxtb	r3, r3
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <SD_SPI_Cmd>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_Cmd(uint8_t cmd, uint32_t argument)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	6039      	str	r1, [r7, #0]
 8003dfe:	71fb      	strb	r3, [r7, #7]
  uint8_t vByte, vResult;

	// ACMD is the command sequence of CMD55-CMD?
	if (cmd & 0x80)
 8003e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	da0e      	bge.n	8003e26 <SD_SPI_Cmd+0x32>
	{
		cmd &= 0x7F;
 8003e08:	79fb      	ldrb	r3, [r7, #7]
 8003e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e0e:	71fb      	strb	r3, [r7, #7]
		vResult = SD_SPI_Cmd(CMD55, 0);
 8003e10:	2100      	movs	r1, #0
 8003e12:	2077      	movs	r0, #119	; 0x77
 8003e14:	f7ff ffee 	bl	8003df4 <SD_SPI_Cmd>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	73bb      	strb	r3, [r7, #14]
		if (vResult > 1) return vResult;
 8003e1c:	7bbb      	ldrb	r3, [r7, #14]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d901      	bls.n	8003e26 <SD_SPI_Cmd+0x32>
 8003e22:	7bbb      	ldrb	r3, [r7, #14]
 8003e24:	e049      	b.n	8003eba <SD_SPI_Cmd+0xc6>
	}

	// Select the card
	SD_DESELECT;
 8003e26:	2201      	movs	r2, #1
 8003e28:	2108      	movs	r1, #8
 8003e2a:	4826      	ldr	r0, [pc, #152]	; (8003ec4 <SD_SPI_Cmd+0xd0>)
 8003e2c:	f001 fb72 	bl	8005514 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 8003e30:	f7ff ffa7 	bl	8003d82 <SPI_ReceiveByte>
	SD_SELECT;
 8003e34:	2200      	movs	r2, #0
 8003e36:	2108      	movs	r1, #8
 8003e38:	4822      	ldr	r0, [pc, #136]	; (8003ec4 <SD_SPI_Cmd+0xd0>)
 8003e3a:	f001 fb6b 	bl	8005514 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 8003e3e:	f7ff ffa0 	bl	8003d82 <SPI_ReceiveByte>

	// Send a command packet
	SPI_SendByte(cmd); // Start + Command index
 8003e42:	79fb      	ldrb	r3, [r7, #7]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff ff8f 	bl	8003d68 <SPI_SendByte>
	SPI_SendByte((uint8_t)(argument >> 24)); // Argument[31..24]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	0e1b      	lsrs	r3, r3, #24
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff ff89 	bl	8003d68 <SPI_SendByte>
	SPI_SendByte((uint8_t)(argument >> 16)); // Argument[23..16]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	0c1b      	lsrs	r3, r3, #16
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff ff83 	bl	8003d68 <SPI_SendByte>
	SPI_SendByte((uint8_t)(argument >> 8)); // Argument[15..8]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	0a1b      	lsrs	r3, r3, #8
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff ff7d 	bl	8003d68 <SPI_SendByte>
	SPI_SendByte((uint8_t)argument); // Argument[7..0]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff ff78 	bl	8003d68 <SPI_SendByte>
	vByte = 0x01; // Dummy CRC + Stop
 8003e78:	2301      	movs	r3, #1
 8003e7a:	73fb      	strb	r3, [r7, #15]

	if (cmd == CMD0) {vByte = 0x95;} // Valid CRC for CMD0(0)
 8003e7c:	79fb      	ldrb	r3, [r7, #7]
 8003e7e:	2b40      	cmp	r3, #64	; 0x40
 8003e80:	d101      	bne.n	8003e86 <SD_SPI_Cmd+0x92>
 8003e82:	2395      	movs	r3, #149	; 0x95
 8003e84:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) {vByte = 0x87;} // Valid CRC for CMD8(0x1AA)
 8003e86:	79fb      	ldrb	r3, [r7, #7]
 8003e88:	2b48      	cmp	r3, #72	; 0x48
 8003e8a:	d101      	bne.n	8003e90 <SD_SPI_Cmd+0x9c>
 8003e8c:	2387      	movs	r3, #135	; 0x87
 8003e8e:	73fb      	strb	r3, [r7, #15]
	SPI_SendByte(vByte);
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff ff68 	bl	8003d68 <SPI_SendByte>

  // Receive a command response
  vByte = 10; // Wait for a valid response in timeout of 10 attempts
 8003e98:	230a      	movs	r3, #10
 8003e9a:	73fb      	strb	r3, [r7, #15]
  do {
    		vResult = SPI_ReceiveByte();
 8003e9c:	f7ff ff71 	bl	8003d82 <SPI_ReceiveByte>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	73bb      	strb	r3, [r7, #14]
  } while ((vResult & 0x80) && --vByte);
 8003ea4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	da05      	bge.n	8003eb8 <SD_SPI_Cmd+0xc4>
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	73fb      	strb	r3, [r7, #15]
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1f1      	bne.n	8003e9c <SD_SPI_Cmd+0xa8>

  return vResult;
 8003eb8:	7bbb      	ldrb	r3, [r7, #14]

}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40020000 	.word	0x40020000

08003ec8 <SD_SPI_Read_Block>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_Read_Block(uint8_t *buff, uint32_t lba)
{
 8003ec8:	b590      	push	{r4, r7, lr}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint8_t vResult = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	737b      	strb	r3, [r7, #13]
  uint16_t vCounter = 0;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	81fb      	strh	r3, [r7, #14]

	vResult = SD_SPI_Cmd (CMD17, lba);
 8003eda:	6839      	ldr	r1, [r7, #0]
 8003edc:	2051      	movs	r0, #81	; 0x51
 8003ede:	f7ff ff89 	bl	8003df4 <SD_SPI_Cmd>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	737b      	strb	r3, [r7, #13]
	if (vResult) return 5; //	Error
 8003ee6:	7b7b      	ldrb	r3, [r7, #13]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <SD_SPI_Read_Block+0x28>
 8003eec:	2305      	movs	r3, #5
 8003eee:	e02d      	b.n	8003f4c <SD_SPI_Read_Block+0x84>

	SPI_Release();
 8003ef0:	f7ff ff54 	bl	8003d9c <SPI_Release>

  do{
				vResult=SPI_ReceiveByte();
 8003ef4:	f7ff ff45 	bl	8003d82 <SPI_ReceiveByte>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	737b      	strb	r3, [r7, #13]
				vCounter++;
 8003efc:	89fb      	ldrh	r3, [r7, #14]
 8003efe:	3301      	adds	r3, #1
 8003f00:	81fb      	strh	r3, [r7, #14]
  } while ((vResult != 0xFE) && (vCounter < 0xFFFF)); // Wait till mark(0xFE) is received
 8003f02:	7b7b      	ldrb	r3, [r7, #13]
 8003f04:	2bfe      	cmp	r3, #254	; 0xfe
 8003f06:	d004      	beq.n	8003f12 <SD_SPI_Read_Block+0x4a>
 8003f08:	89fb      	ldrh	r3, [r7, #14]
 8003f0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d1f0      	bne.n	8003ef4 <SD_SPI_Read_Block+0x2c>
  if (vCounter >= 0xFFFF) return 5;	 //	 Error
 8003f12:	89fb      	ldrh	r3, [r7, #14]
 8003f14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d101      	bne.n	8003f20 <SD_SPI_Read_Block+0x58>
 8003f1c:	2305      	movs	r3, #5
 8003f1e:	e015      	b.n	8003f4c <SD_SPI_Read_Block+0x84>

  for (vCounter = 0; vCounter<512; vCounter++) buff[vCounter]=SPI_ReceiveByte(); // Write data to the buffer
 8003f20:	2300      	movs	r3, #0
 8003f22:	81fb      	strh	r3, [r7, #14]
 8003f24:	e009      	b.n	8003f3a <SD_SPI_Read_Block+0x72>
 8003f26:	89fb      	ldrh	r3, [r7, #14]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	18d4      	adds	r4, r2, r3
 8003f2c:	f7ff ff29 	bl	8003d82 <SPI_ReceiveByte>
 8003f30:	4603      	mov	r3, r0
 8003f32:	7023      	strb	r3, [r4, #0]
 8003f34:	89fb      	ldrh	r3, [r7, #14]
 8003f36:	3301      	adds	r3, #1
 8003f38:	81fb      	strh	r3, [r7, #14]
 8003f3a:	89fb      	ldrh	r3, [r7, #14]
 8003f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f40:	d3f1      	bcc.n	8003f26 <SD_SPI_Read_Block+0x5e>
  SPI_Release(); // Skip CRC
 8003f42:	f7ff ff2b 	bl	8003d9c <SPI_Release>
  SPI_Release();
 8003f46:	f7ff ff29 	bl	8003d9c <SPI_Release>

  return 0;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd90      	pop	{r4, r7, pc}

08003f54 <SD_SPI_Write_Block>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_Write_Block (uint8_t *buff, uint32_t lba)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint8_t vResult;
  uint16_t vCounter;

  vResult = SD_SPI_Cmd(CMD24, lba);
 8003f5e:	6839      	ldr	r1, [r7, #0]
 8003f60:	2058      	movs	r0, #88	; 0x58
 8003f62:	f7ff ff47 	bl	8003df4 <SD_SPI_Cmd>
 8003f66:	4603      	mov	r3, r0
 8003f68:	737b      	strb	r3, [r7, #13]

  if(vResult != 0x00) return 6; // Error
 8003f6a:	7b7b      	ldrb	r3, [r7, #13]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <SD_SPI_Write_Block+0x20>
 8003f70:	2306      	movs	r3, #6
 8003f72:	e03d      	b.n	8003ff0 <SD_SPI_Write_Block+0x9c>

  SPI_Release();
 8003f74:	f7ff ff12 	bl	8003d9c <SPI_Release>
  SPI_SendByte (0xFE); // Send transmission start mark
 8003f78:	20fe      	movs	r0, #254	; 0xfe
 8003f7a:	f7ff fef5 	bl	8003d68 <SPI_SendByte>
  for (vCounter = 0; vCounter<512; vCounter++) SPI_SendByte(buff[vCounter]); // Write data to the SD
 8003f7e:	2300      	movs	r3, #0
 8003f80:	81fb      	strh	r3, [r7, #14]
 8003f82:	e009      	b.n	8003f98 <SD_SPI_Write_Block+0x44>
 8003f84:	89fb      	ldrh	r3, [r7, #14]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	4413      	add	r3, r2
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff feeb 	bl	8003d68 <SPI_SendByte>
 8003f92:	89fb      	ldrh	r3, [r7, #14]
 8003f94:	3301      	adds	r3, #1
 8003f96:	81fb      	strh	r3, [r7, #14]
 8003f98:	89fb      	ldrh	r3, [r7, #14]
 8003f9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f9e:	d3f1      	bcc.n	8003f84 <SD_SPI_Write_Block+0x30>
  SPI_Release();  // Skip CRC
 8003fa0:	f7ff fefc 	bl	8003d9c <SPI_Release>
  SPI_Release();
 8003fa4:	f7ff fefa 	bl	8003d9c <SPI_Release>
  vResult = SPI_ReceiveByte();
 8003fa8:	f7ff feeb 	bl	8003d82 <SPI_ReceiveByte>
 8003fac:	4603      	mov	r3, r0
 8003fae:	737b      	strb	r3, [r7, #13]
  if((vResult & 0x05) != 0x05) return 6; // Error  (datasheet p. 111)
 8003fb0:	7b7b      	ldrb	r3, [r7, #13]
 8003fb2:	f003 0305 	and.w	r3, r3, #5
 8003fb6:	2b05      	cmp	r3, #5
 8003fb8:	d001      	beq.n	8003fbe <SD_SPI_Write_Block+0x6a>
 8003fba:	2306      	movs	r3, #6
 8003fbc:	e018      	b.n	8003ff0 <SD_SPI_Write_Block+0x9c>

  vCounter = 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	81fb      	strh	r3, [r7, #14]
  do {
	  vResult=SPI_ReceiveByte();
 8003fc2:	f7ff fede 	bl	8003d82 <SPI_ReceiveByte>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	737b      	strb	r3, [r7, #13]
	  vCounter++;
 8003fca:	89fb      	ldrh	r3, [r7, #14]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	81fb      	strh	r3, [r7, #14]
  } while ( (vResult != 0xFF)&&(vCounter<0xFFFF) );		//Wait till BUSY mode is finished
 8003fd0:	7b7b      	ldrb	r3, [r7, #13]
 8003fd2:	2bff      	cmp	r3, #255	; 0xff
 8003fd4:	d004      	beq.n	8003fe0 <SD_SPI_Write_Block+0x8c>
 8003fd6:	89fb      	ldrh	r3, [r7, #14]
 8003fd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d1f0      	bne.n	8003fc2 <SD_SPI_Write_Block+0x6e>
  if (vCounter>=0xFFFF) return 6;		// Error
 8003fe0:	89fb      	ldrh	r3, [r7, #14]
 8003fe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d101      	bne.n	8003fee <SD_SPI_Write_Block+0x9a>
 8003fea:	2306      	movs	r3, #6
 8003fec:	e000      	b.n	8003ff0 <SD_SPI_Write_Block+0x9c>

  return 0;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <SD_SPI_GetFileInfo>:
}

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_GetFileInfo(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
	uint8_t vResult;
	DWORD free_clusters, free_sectors, total_sectors;

	if(f_mount(&SDFatFs, (TCHAR const*)USER_Path, 0))
 8003ffe:	2200      	movs	r2, #0
 8004000:	4964      	ldr	r1, [pc, #400]	; (8004194 <SD_SPI_GetFileInfo+0x19c>)
 8004002:	4865      	ldr	r0, [pc, #404]	; (8004198 <SD_SPI_GetFileInfo+0x1a0>)
 8004004:	f00b fcfa 	bl	800f9fc <f_mount>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <SD_SPI_GetFileInfo+0x1c>
	{
		SD_Error_Handler();
 800400e:	f000 f8e3 	bl	80041d8 <SD_Error_Handler>
 8004012:	e038      	b.n	8004086 <SD_SPI_GetFileInfo+0x8e>
	}
	else
	{
		vResult = f_opendir(&sDirectory, "/");		// "/" - directory name to open
 8004014:	4961      	ldr	r1, [pc, #388]	; (800419c <SD_SPI_GetFileInfo+0x1a4>)
 8004016:	4862      	ldr	r0, [pc, #392]	; (80041a0 <SD_SPI_GetFileInfo+0x1a8>)
 8004018:	f00c fb2d 	bl	8010676 <f_opendir>
 800401c:	4603      	mov	r3, r0
 800401e:	73fb      	strb	r3, [r7, #15]

		if (vResult == FR_OK)
 8004020:	7bfb      	ldrb	r3, [r7, #15]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d12c      	bne.n	8004080 <SD_SPI_GetFileInfo+0x88>
		{
			while(1)
			{
				vResult = f_readdir(&sDirectory, &sFileInfo);
 8004026:	495f      	ldr	r1, [pc, #380]	; (80041a4 <SD_SPI_GetFileInfo+0x1ac>)
 8004028:	485d      	ldr	r0, [pc, #372]	; (80041a0 <SD_SPI_GetFileInfo+0x1a8>)
 800402a:	f00c fbbd 	bl	80107a8 <f_readdir>
 800402e:	4603      	mov	r3, r0
 8004030:	73fb      	strb	r3, [r7, #15]

				if ((vResult == FR_OK) && (sFileInfo.fname[0]))
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d123      	bne.n	8004080 <SD_SPI_GetFileInfo+0x88>
 8004038:	4b5a      	ldr	r3, [pc, #360]	; (80041a4 <SD_SPI_GetFileInfo+0x1ac>)
 800403a:	7d9b      	ldrb	r3, [r3, #22]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d01f      	beq.n	8004080 <SD_SPI_GetFileInfo+0x88>
				{
					HAL_UART_Transmit(&huart3, (uint8_t*)sFileInfo.fname, strlen((char*)sFileInfo.fname), 0x1000);
 8004040:	4859      	ldr	r0, [pc, #356]	; (80041a8 <SD_SPI_GetFileInfo+0x1b0>)
 8004042:	f7fc f8c5 	bl	80001d0 <strlen>
 8004046:	4603      	mov	r3, r0
 8004048:	b29a      	uxth	r2, r3
 800404a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800404e:	4956      	ldr	r1, [pc, #344]	; (80041a8 <SD_SPI_GetFileInfo+0x1b0>)
 8004050:	4856      	ldr	r0, [pc, #344]	; (80041ac <SD_SPI_GetFileInfo+0x1b4>)
 8004052:	f004 ffbe 	bl	8008fd2 <HAL_UART_Transmit>

					if(sFileInfo.fattrib & AM_DIR)
 8004056:	4b53      	ldr	r3, [pc, #332]	; (80041a4 <SD_SPI_GetFileInfo+0x1ac>)
 8004058:	7a1b      	ldrb	r3, [r3, #8]
 800405a:	f003 0310 	and.w	r3, r3, #16
 800405e:	2b00      	cmp	r3, #0
 8004060:	d006      	beq.n	8004070 <SD_SPI_GetFileInfo+0x78>
					{
						HAL_UART_Transmit(&huart3, (uint8_t*)"  [DIR]", 7, 0x1000);
 8004062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004066:	2207      	movs	r2, #7
 8004068:	4951      	ldr	r1, [pc, #324]	; (80041b0 <SD_SPI_GetFileInfo+0x1b8>)
 800406a:	4850      	ldr	r0, [pc, #320]	; (80041ac <SD_SPI_GetFileInfo+0x1b4>)
 800406c:	f004 ffb1 	bl	8008fd2 <HAL_UART_Transmit>
					}
				}
				else break;

				HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, 0x1000);
 8004070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004074:	2202      	movs	r2, #2
 8004076:	494f      	ldr	r1, [pc, #316]	; (80041b4 <SD_SPI_GetFileInfo+0x1bc>)
 8004078:	484c      	ldr	r0, [pc, #304]	; (80041ac <SD_SPI_GetFileInfo+0x1b4>)
 800407a:	f004 ffaa 	bl	8008fd2 <HAL_UART_Transmit>
				vResult = f_readdir(&sDirectory, &sFileInfo);
 800407e:	e7d2      	b.n	8004026 <SD_SPI_GetFileInfo+0x2e>
			}
		}
		f_closedir(&sDirectory);
 8004080:	4847      	ldr	r0, [pc, #284]	; (80041a0 <SD_SPI_GetFileInfo+0x1a8>)
 8004082:	f00c fb6b 	bl	801075c <f_closedir>
	}

	f_getfree("/", &free_clusters, &fs);
 8004086:	463b      	mov	r3, r7
 8004088:	4a4b      	ldr	r2, [pc, #300]	; (80041b8 <SD_SPI_GetFileInfo+0x1c0>)
 800408a:	4619      	mov	r1, r3
 800408c:	4843      	ldr	r0, [pc, #268]	; (800419c <SD_SPI_GetFileInfo+0x1a4>)
 800408e:	f00c fbc8 	bl	8010822 <f_getfree>

	sprintf(aStringBuffer, "free_clusters: %lu\r\n", free_clusters);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	461a      	mov	r2, r3
 8004096:	4949      	ldr	r1, [pc, #292]	; (80041bc <SD_SPI_GetFileInfo+0x1c4>)
 8004098:	4849      	ldr	r0, [pc, #292]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 800409a:	f00d fa57 	bl	801154c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 800409e:	4848      	ldr	r0, [pc, #288]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 80040a0:	f7fc f896 	bl	80001d0 <strlen>
 80040a4:	4603      	mov	r3, r0
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040ac:	4944      	ldr	r1, [pc, #272]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 80040ae:	483f      	ldr	r0, [pc, #252]	; (80041ac <SD_SPI_GetFileInfo+0x1b4>)
 80040b0:	f004 ff8f 	bl	8008fd2 <HAL_UART_Transmit>

	sprintf(aStringBuffer,"n_fatent: %lu\r\n",fs->n_fatent);
 80040b4:	4b40      	ldr	r3, [pc, #256]	; (80041b8 <SD_SPI_GetFileInfo+0x1c0>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	461a      	mov	r2, r3
 80040bc:	4941      	ldr	r1, [pc, #260]	; (80041c4 <SD_SPI_GetFileInfo+0x1cc>)
 80040be:	4840      	ldr	r0, [pc, #256]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 80040c0:	f00d fa44 	bl	801154c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 80040c4:	483e      	ldr	r0, [pc, #248]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 80040c6:	f7fc f883 	bl	80001d0 <strlen>
 80040ca:	4603      	mov	r3, r0
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040d2:	493b      	ldr	r1, [pc, #236]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 80040d4:	4835      	ldr	r0, [pc, #212]	; (80041ac <SD_SPI_GetFileInfo+0x1b4>)
 80040d6:	f004 ff7c 	bl	8008fd2 <HAL_UART_Transmit>

	sprintf(aStringBuffer,"fs_csize: %d\r\n",fs->csize);
 80040da:	4b37      	ldr	r3, [pc, #220]	; (80041b8 <SD_SPI_GetFileInfo+0x1c0>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	895b      	ldrh	r3, [r3, #10]
 80040e0:	461a      	mov	r2, r3
 80040e2:	4939      	ldr	r1, [pc, #228]	; (80041c8 <SD_SPI_GetFileInfo+0x1d0>)
 80040e4:	4836      	ldr	r0, [pc, #216]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 80040e6:	f00d fa31 	bl	801154c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 80040ea:	4835      	ldr	r0, [pc, #212]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 80040ec:	f7fc f870 	bl	80001d0 <strlen>
 80040f0:	4603      	mov	r3, r0
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040f8:	4931      	ldr	r1, [pc, #196]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 80040fa:	482c      	ldr	r0, [pc, #176]	; (80041ac <SD_SPI_GetFileInfo+0x1b4>)
 80040fc:	f004 ff69 	bl	8008fd2 <HAL_UART_Transmit>

	total_sectors = (fs->n_fatent - 2) * fs->csize;
 8004100:	4b2d      	ldr	r3, [pc, #180]	; (80041b8 <SD_SPI_GetFileInfo+0x1c0>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	3b02      	subs	r3, #2
 8004108:	4a2b      	ldr	r2, [pc, #172]	; (80041b8 <SD_SPI_GetFileInfo+0x1c0>)
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	8952      	ldrh	r2, [r2, #10]
 800410e:	fb02 f303 	mul.w	r3, r2, r3
 8004112:	60bb      	str	r3, [r7, #8]
	sprintf(aStringBuffer, "total_sectors: %lu\r\n", total_sectors);
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	492d      	ldr	r1, [pc, #180]	; (80041cc <SD_SPI_GetFileInfo+0x1d4>)
 8004118:	4829      	ldr	r0, [pc, #164]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 800411a:	f00d fa17 	bl	801154c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 800411e:	4828      	ldr	r0, [pc, #160]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 8004120:	f7fc f856 	bl	80001d0 <strlen>
 8004124:	4603      	mov	r3, r0
 8004126:	b29a      	uxth	r2, r3
 8004128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800412c:	4924      	ldr	r1, [pc, #144]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 800412e:	481f      	ldr	r0, [pc, #124]	; (80041ac <SD_SPI_GetFileInfo+0x1b4>)
 8004130:	f004 ff4f 	bl	8008fd2 <HAL_UART_Transmit>

	free_sectors = free_clusters * fs->csize;
 8004134:	4b20      	ldr	r3, [pc, #128]	; (80041b8 <SD_SPI_GetFileInfo+0x1c0>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	895b      	ldrh	r3, [r3, #10]
 800413a:	461a      	mov	r2, r3
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	fb02 f303 	mul.w	r3, r2, r3
 8004142:	607b      	str	r3, [r7, #4]
	sprintf(aStringBuffer, "free_sectors: %lu\r\n", free_sectors);
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	4922      	ldr	r1, [pc, #136]	; (80041d0 <SD_SPI_GetFileInfo+0x1d8>)
 8004148:	481d      	ldr	r0, [pc, #116]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 800414a:	f00d f9ff 	bl	801154c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 800414e:	481c      	ldr	r0, [pc, #112]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 8004150:	f7fc f83e 	bl	80001d0 <strlen>
 8004154:	4603      	mov	r3, r0
 8004156:	b29a      	uxth	r2, r3
 8004158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800415c:	4918      	ldr	r1, [pc, #96]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 800415e:	4813      	ldr	r0, [pc, #76]	; (80041ac <SD_SPI_GetFileInfo+0x1b4>)
 8004160:	f004 ff37 	bl	8008fd2 <HAL_UART_Transmit>

	sprintf(aStringBuffer, "%lu KB total drive space.\r\n%lu KB available.\r\n", (free_sectors / 2), (total_sectors / 2));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	085a      	lsrs	r2, r3, #1
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	085b      	lsrs	r3, r3, #1
 800416c:	4919      	ldr	r1, [pc, #100]	; (80041d4 <SD_SPI_GetFileInfo+0x1dc>)
 800416e:	4814      	ldr	r0, [pc, #80]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 8004170:	f00d f9ec 	bl	801154c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 8004174:	4812      	ldr	r0, [pc, #72]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 8004176:	f7fc f82b 	bl	80001d0 <strlen>
 800417a:	4603      	mov	r3, r0
 800417c:	b29a      	uxth	r2, r3
 800417e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004182:	490f      	ldr	r1, [pc, #60]	; (80041c0 <SD_SPI_GetFileInfo+0x1c8>)
 8004184:	4809      	ldr	r0, [pc, #36]	; (80041ac <SD_SPI_GetFileInfo+0x1b4>)
 8004186:	f004 ff24 	bl	8008fd2 <HAL_UART_Transmit>

	return 0;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	200018f8 	.word	0x200018f8
 8004198:	20000594 	.word	0x20000594
 800419c:	08011cd4 	.word	0x08011cd4
 80041a0:	20002a4c 	.word	0x20002a4c
 80041a4:	20002934 	.word	0x20002934
 80041a8:	2000294a 	.word	0x2000294a
 80041ac:	200018a4 	.word	0x200018a4
 80041b0:	08011cd8 	.word	0x08011cd8
 80041b4:	08011ce0 	.word	0x08011ce0
 80041b8:	200018fc 	.word	0x200018fc
 80041bc:	08011ce4 	.word	0x08011ce4
 80041c0:	20002a80 	.word	0x20002a80
 80041c4:	08011cfc 	.word	0x08011cfc
 80041c8:	08011d0c 	.word	0x08011d0c
 80041cc:	08011d1c 	.word	0x08011d1c
 80041d0:	08011d34 	.word	0x08011d34
 80041d4:	08011d48 	.word	0x08011d48

080041d8 <SD_Error_Handler>:

/****************************************************************************************************************/
/****************************************************************************************************************/
void SD_Error_Handler(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
	LED_Red_ON;
 80041dc:	2201      	movs	r2, #1
 80041de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80041e2:	4802      	ldr	r0, [pc, #8]	; (80041ec <SD_Error_Handler+0x14>)
 80041e4:	f001 f996 	bl	8005514 <HAL_GPIO_WritePin>
	//while(1);
}
 80041e8:	bf00      	nop
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40020c00 	.word	0x40020c00

080041f0 <open_bin_file>:
// ------------------------------------------------------------------------------------------------
/*
	Open file, calculate how many frames in selected file and show all frames.
 */
uint8_t open_bin_file(char* name)
{
 80041f0:	b5b0      	push	{r4, r5, r7, lr}
 80041f2:	f5ad 7d7a 	sub.w	sp, sp, #1000	; 0x3e8
 80041f6:	af02      	add	r7, sp, #8
 80041f8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80041fc:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8004200:	6018      	str	r0, [r3, #0]
	uint16_t vTemp = 0;
 8004202:	2300      	movs	r3, #0
 8004204:	f8a7 33d6 	strh.w	r3, [r7, #982]	; 0x3d6
	uint32_t vIndex = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
	static uint32_t vFileSize = 0;
	uint32_t vBytesReadCounter;

	uint8_t frame_buffer[949] = {0};									// Frame buffer
 800420e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8004212:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	3304      	adds	r3, #4
 800421c:	f240 32b1 	movw	r2, #945	; 0x3b1
 8004220:	2100      	movs	r1, #0
 8004222:	4618      	mov	r0, r3
 8004224:	f00d f89a 	bl	801135c <memset>
	int size_buf_for_read = sizeof(frame_buffer);
 8004228:	f240 33b5 	movw	r3, #949	; 0x3b5
 800422c:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc

	static int how_many_frames = 0;

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004230:	2100      	movs	r1, #0
 8004232:	487f      	ldr	r0, [pc, #508]	; (8004430 <open_bin_file+0x240>)
 8004234:	f003 fe4a 	bl	8007ecc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8004238:	2104      	movs	r1, #4
 800423a:	487d      	ldr	r0, [pc, #500]	; (8004430 <open_bin_file+0x240>)
 800423c:	f003 fe46 	bl	8007ecc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8004240:	2108      	movs	r1, #8
 8004242:	487b      	ldr	r0, [pc, #492]	; (8004430 <open_bin_file+0x240>)
 8004244:	f003 fe42 	bl	8007ecc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8004248:	210c      	movs	r1, #12
 800424a:	4879      	ldr	r0, [pc, #484]	; (8004430 <open_bin_file+0x240>)
 800424c:	f003 fe3e 	bl	8007ecc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004250:	2100      	movs	r1, #0
 8004252:	4878      	ldr	r0, [pc, #480]	; (8004434 <open_bin_file+0x244>)
 8004254:	f003 fe3a 	bl	8007ecc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8004258:	2104      	movs	r1, #4
 800425a:	4876      	ldr	r0, [pc, #472]	; (8004434 <open_bin_file+0x244>)
 800425c:	f003 fe36 	bl	8007ecc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8004260:	2108      	movs	r1, #8
 8004262:	4874      	ldr	r0, [pc, #464]	; (8004434 <open_bin_file+0x244>)
 8004264:	f003 fe32 	bl	8007ecc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8004268:	210c      	movs	r1, #12
 800426a:	4872      	ldr	r0, [pc, #456]	; (8004434 <open_bin_file+0x244>)
 800426c:	f003 fe2e 	bl	8007ecc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8004270:	2104      	movs	r1, #4
 8004272:	4871      	ldr	r0, [pc, #452]	; (8004438 <open_bin_file+0x248>)
 8004274:	f003 fe2a 	bl	8007ecc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004278:	2108      	movs	r1, #8
 800427a:	486f      	ldr	r0, [pc, #444]	; (8004438 <open_bin_file+0x248>)
 800427c:	f003 fe26 	bl	8007ecc <HAL_TIM_PWM_Start>



	static bool open_file_flag = true;

	if(open_file_flag == false)		// if file wasn't opened before
 8004280:	4b6e      	ldr	r3, [pc, #440]	; (800443c <open_bin_file+0x24c>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	f083 0301 	eor.w	r3, r3, #1
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d02b      	beq.n	80042e6 <open_bin_file+0xf6>
	{
		if(f_mount(&SDFatFs, (TCHAR const*)USER_Path, 0))
 800428e:	2200      	movs	r2, #0
 8004290:	496b      	ldr	r1, [pc, #428]	; (8004440 <open_bin_file+0x250>)
 8004292:	486c      	ldr	r0, [pc, #432]	; (8004444 <open_bin_file+0x254>)
 8004294:	f00b fbb2 	bl	800f9fc <f_mount>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <open_bin_file+0xb4>
		{
			SD_Error_Handler();
 800429e:	f7ff ff9b 	bl	80041d8 <SD_Error_Handler>
 80042a2:	e1b5      	b.n	8004610 <open_bin_file+0x420>
		}
		else
		{
			if(f_open(&MyFile, name, FA_READ))
 80042a4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80042a8:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80042ac:	2201      	movs	r2, #1
 80042ae:	6819      	ldr	r1, [r3, #0]
 80042b0:	4865      	ldr	r0, [pc, #404]	; (8004448 <open_bin_file+0x258>)
 80042b2:	f00b fbe9 	bl	800fa88 <f_open>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <open_bin_file+0xd2>
			{
				SD_Error_Handler();
 80042bc:	f7ff ff8c 	bl	80041d8 <SD_Error_Handler>
 80042c0:	e1a6      	b.n	8004610 <open_bin_file+0x420>
			}
			else
			{
				vFileSize = MyFile.obj.objsize;									// Get size of current file
 80042c2:	4b61      	ldr	r3, [pc, #388]	; (8004448 <open_bin_file+0x258>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	4a61      	ldr	r2, [pc, #388]	; (800444c <open_bin_file+0x25c>)
 80042c8:	6013      	str	r3, [r2, #0]
				how_many_frames = vFileSize/frame_size;							// How many frames into current file
 80042ca:	4b60      	ldr	r3, [pc, #384]	; (800444c <open_bin_file+0x25c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a60      	ldr	r2, [pc, #384]	; (8004450 <open_bin_file+0x260>)
 80042d0:	6812      	ldr	r2, [r2, #0]
 80042d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80042d6:	461a      	mov	r2, r3
 80042d8:	4b5e      	ldr	r3, [pc, #376]	; (8004454 <open_bin_file+0x264>)
 80042da:	601a      	str	r2, [r3, #0]

				open_file_flag = true;
 80042dc:	4b57      	ldr	r3, [pc, #348]	; (800443c <open_bin_file+0x24c>)
 80042de:	2201      	movs	r2, #1
 80042e0:	701a      	strb	r2, [r3, #0]
				return 0;
 80042e2:	2300      	movs	r3, #0
 80042e4:	e194      	b.n	8004610 <open_bin_file+0x420>
	}
	else
	{
		static int frame = 0;

		if(frame >= how_many_frames)
 80042e6:	4b5c      	ldr	r3, [pc, #368]	; (8004458 <open_bin_file+0x268>)
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	4b5a      	ldr	r3, [pc, #360]	; (8004454 <open_bin_file+0x264>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	f2c0 8181 	blt.w	80045f6 <open_bin_file+0x406>
		{
			f_close(&MyFile);
 80042f4:	4854      	ldr	r0, [pc, #336]	; (8004448 <open_bin_file+0x258>)
 80042f6:	f00b ff70 	bl	80101da <f_close>
			open_file_flag = false;
 80042fa:	4b50      	ldr	r3, [pc, #320]	; (800443c <open_bin_file+0x24c>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	701a      	strb	r2, [r3, #0]
			frame = 0;
 8004300:	4b55      	ldr	r3, [pc, #340]	; (8004458 <open_bin_file+0x268>)
 8004302:	2200      	movs	r2, #0
 8004304:	601a      	str	r2, [r3, #0]

			return 1;
 8004306:	2301      	movs	r3, #1
 8004308:	e182      	b.n	8004610 <open_bin_file+0x420>

		for(frame; ((frame < how_many_frames) && (interrupt_flag == 1)); frame++)
		{
			//HAL_GPIO_TogglePin(GPIOE, TEST_OUTPUT_1_Pin);					// For measure

			if(interrupt_animation_flag == true)						// If was sent "STOP animation" command. 'z' key
 800430a:	4b54      	ldr	r3, [pc, #336]	; (800445c <open_bin_file+0x26c>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <open_bin_file+0x138>
			{
				interrupt_animation_flag = false;
 8004312:	4b52      	ldr	r3, [pc, #328]	; (800445c <open_bin_file+0x26c>)
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]
				stop_light_all_turn_off();
 8004318:	f7fc fd4a 	bl	8000db0 <stop_light_all_turn_off>
				turn_off_left_and_right_dtript();
 800431c:	f7fe f8fc 	bl	8002518 <turn_off_left_and_right_dtript>
				HAL_Delay(100);
 8004320:	2064      	movs	r0, #100	; 0x64
 8004322:	f000 fa23 	bl	800476c <HAL_Delay>

				break;
 8004326:	e171      	b.n	800460c <open_bin_file+0x41c>
			}

			memset(frame_buffer, 0, sizeof(frame_buffer));
 8004328:	f107 030c 	add.w	r3, r7, #12
 800432c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8004330:	2100      	movs	r1, #0
 8004332:	4618      	mov	r0, r3
 8004334:	f00d f812 	bl	801135c <memset>

			f_lseek(&MyFile, frame + ((frame_size - 1)*frame));						// shift on one frame
 8004338:	4b45      	ldr	r3, [pc, #276]	; (8004450 <open_bin_file+0x260>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3b01      	subs	r3, #1
 800433e:	4a46      	ldr	r2, [pc, #280]	; (8004458 <open_bin_file+0x268>)
 8004340:	6812      	ldr	r2, [r2, #0]
 8004342:	fb03 f202 	mul.w	r2, r3, r2
 8004346:	4b44      	ldr	r3, [pc, #272]	; (8004458 <open_bin_file+0x268>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4413      	add	r3, r2
 800434c:	4619      	mov	r1, r3
 800434e:	483e      	ldr	r0, [pc, #248]	; (8004448 <open_bin_file+0x258>)
 8004350:	f00b ff6d 	bl	801022e <f_lseek>
			f_read(&MyFile, aBuffer, vTemp, (UINT *)&vBytesReadCounter);
 8004354:	f8b7 23d6 	ldrh.w	r2, [r7, #982]	; 0x3d6
 8004358:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 800435c:	4940      	ldr	r1, [pc, #256]	; (8004460 <open_bin_file+0x270>)
 800435e:	483a      	ldr	r0, [pc, #232]	; (8004448 <open_bin_file+0x258>)
 8004360:	f00b fd5e 	bl	800fe20 <f_read>
			f_gets(frame_buffer, size_buf_for_read, &MyFile);     			// Read one fraime into buffer
 8004364:	f107 030c 	add.w	r3, r7, #12
 8004368:	4a37      	ldr	r2, [pc, #220]	; (8004448 <open_bin_file+0x258>)
 800436a:	f8d7 13cc 	ldr.w	r1, [r7, #972]	; 0x3cc
 800436e:	4618      	mov	r0, r3
 8004370:	f00c fb0c 	bl	801098c <f_gets>

			if((frame > 316) && (frame < 330))			// Place in 7.bin file where somsing wrong
 8004374:	4b38      	ldr	r3, [pc, #224]	; (8004458 <open_bin_file+0x268>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 800437c:	dd07      	ble.n	800438e <open_bin_file+0x19e>
 800437e:	4b36      	ldr	r3, [pc, #216]	; (8004458 <open_bin_file+0x268>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8004386:	da02      	bge.n	800438e <open_bin_file+0x19e>
			{
				int ggg = 99;
 8004388:	2363      	movs	r3, #99	; 0x63
 800438a:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
			}

			// SET Left RGBW LEDs
			uint16_t number_of_rgbw_leds = 0;
 800438e:	2300      	movs	r3, #0
 8004390:	f8a7 33de 	strh.w	r3, [r7, #990]	; 0x3de
			int k = 0;
 8004394:	2300      	movs	r3, #0
 8004396:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
			for(k = end_left_led; k >= strat_left_led; k--)		// 84 LEDs
 800439a:	4b32      	ldr	r3, [pc, #200]	; (8004464 <open_bin_file+0x274>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 80043a2:	e037      	b.n	8004414 <open_bin_file+0x224>
			{
				if(k%4 == 0)
 80043a4:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 80043a8:	f003 0303 	and.w	r3, r3, #3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d12c      	bne.n	800440a <open_bin_file+0x21a>
				{
					set_left_one_rgbw_led(number_of_rgbw_leds, frame_buffer[k], frame_buffer[k+1], frame_buffer[k+2], frame_buffer[k+3]);
 80043b0:	f8b7 33de 	ldrh.w	r3, [r7, #990]	; 0x3de
 80043b4:	b2d8      	uxtb	r0, r3
 80043b6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80043ba:	f5a3 7275 	sub.w	r2, r3, #980	; 0x3d4
 80043be:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 80043c2:	4413      	add	r3, r2
 80043c4:	7819      	ldrb	r1, [r3, #0]
 80043c6:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 80043ca:	3301      	adds	r3, #1
 80043cc:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80043d0:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 80043d4:	5cd4      	ldrb	r4, [r2, r3]
 80043d6:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 80043da:	3302      	adds	r3, #2
 80043dc:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80043e0:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 80043e4:	5cd5      	ldrb	r5, [r2, r3]
 80043e6:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 80043ea:	3303      	adds	r3, #3
 80043ec:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80043f0:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 80043f4:	5cd3      	ldrb	r3, [r2, r3]
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	462b      	mov	r3, r5
 80043fa:	4622      	mov	r2, r4
 80043fc:	f7fe f8e5 	bl	80025ca <set_left_one_rgbw_led>
					number_of_rgbw_leds++;
 8004400:	f8b7 33de 	ldrh.w	r3, [r7, #990]	; 0x3de
 8004404:	3301      	adds	r3, #1
 8004406:	f8a7 33de 	strh.w	r3, [r7, #990]	; 0x3de
			for(k = end_left_led; k >= strat_left_led; k--)		// 84 LEDs
 800440a:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 800440e:	3b01      	subs	r3, #1
 8004410:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 8004414:	4b14      	ldr	r3, [pc, #80]	; (8004468 <open_bin_file+0x278>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 800441c:	429a      	cmp	r2, r3
 800441e:	dac1      	bge.n	80043a4 <open_bin_file+0x1b4>
				}
			}

			// SET Right RGBW LEDs
			number_of_rgbw_leds = 0;
 8004420:	2300      	movs	r3, #0
 8004422:	f8a7 33de 	strh.w	r3, [r7, #990]	; 0x3de
			for(k = end_ritht_led; k >= strat_right_led; k--)
 8004426:	4b11      	ldr	r3, [pc, #68]	; (800446c <open_bin_file+0x27c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 800442e:	e057      	b.n	80044e0 <open_bin_file+0x2f0>
 8004430:	20001634 	.word	0x20001634
 8004434:	2000167c 	.word	0x2000167c
 8004438:	200016c4 	.word	0x200016c4
 800443c:	20000020 	.word	0x20000020
 8004440:	200018f8 	.word	0x200018f8
 8004444:	20000594 	.word	0x20000594
 8004448:	20001900 	.word	0x20001900
 800444c:	20002cbc 	.word	0x20002cbc
 8004450:	20000008 	.word	0x20000008
 8004454:	20002cc0 	.word	0x20002cc0
 8004458:	20002cc4 	.word	0x20002cc4
 800445c:	200015ce 	.word	0x200015ce
 8004460:	20002abc 	.word	0x20002abc
 8004464:	20000014 	.word	0x20000014
 8004468:	20000010 	.word	0x20000010
 800446c:	2000001c 	.word	0x2000001c
			{
				if(k%4 == 0)
 8004470:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8004474:	f003 0303 	and.w	r3, r3, #3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d12c      	bne.n	80044d6 <open_bin_file+0x2e6>
				{
					set_right_one_rgbw_led(number_of_rgbw_leds, frame_buffer[k], frame_buffer[k+1], frame_buffer[k+2], frame_buffer[k+3]);
 800447c:	f8b7 33de 	ldrh.w	r3, [r7, #990]	; 0x3de
 8004480:	b2d8      	uxtb	r0, r3
 8004482:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8004486:	f5a3 7275 	sub.w	r2, r3, #980	; 0x3d4
 800448a:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 800448e:	4413      	add	r3, r2
 8004490:	7819      	ldrb	r1, [r3, #0]
 8004492:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8004496:	3301      	adds	r3, #1
 8004498:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 800449c:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 80044a0:	5cd4      	ldrb	r4, [r2, r3]
 80044a2:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 80044a6:	3302      	adds	r3, #2
 80044a8:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80044ac:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 80044b0:	5cd5      	ldrb	r5, [r2, r3]
 80044b2:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 80044b6:	3303      	adds	r3, #3
 80044b8:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80044bc:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 80044c0:	5cd3      	ldrb	r3, [r2, r3]
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	462b      	mov	r3, r5
 80044c6:	4622      	mov	r2, r4
 80044c8:	f7fe f8a0 	bl	800260c <set_right_one_rgbw_led>
					number_of_rgbw_leds++;
 80044cc:	f8b7 33de 	ldrh.w	r3, [r7, #990]	; 0x3de
 80044d0:	3301      	adds	r3, #1
 80044d2:	f8a7 33de 	strh.w	r3, [r7, #990]	; 0x3de
			for(k = end_ritht_led; k >= strat_right_led; k--)
 80044d6:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 80044da:	3b01      	subs	r3, #1
 80044dc:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 80044e0:	4b4e      	ldr	r3, [pc, #312]	; (800461c <open_bin_file+0x42c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 80044e8:	429a      	cmp	r2, r3
 80044ea:	dac1      	bge.n	8004470 <open_bin_file+0x280>
			}

			// make_delay(267);

			// SET RED LEDs
			set_duty_cycle_stop_left_5(frame_buffer[start_evenled + 16 ]);
 80044ec:	4b4c      	ldr	r3, [pc, #304]	; (8004620 <open_bin_file+0x430>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3310      	adds	r3, #16
 80044f2:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80044f6:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 80044fa:	5cd3      	ldrb	r3, [r2, r3]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fc fbf7 	bl	8000cf0 <set_duty_cycle_stop_left_5>
			set_duty_cycle_stop_left_4(frame_buffer[start_evenled + 12 ]);
 8004502:	4b47      	ldr	r3, [pc, #284]	; (8004620 <open_bin_file+0x430>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	330c      	adds	r3, #12
 8004508:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 800450c:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 8004510:	5cd3      	ldrb	r3, [r2, r3]
 8004512:	4618      	mov	r0, r3
 8004514:	f7fc fbdc 	bl	8000cd0 <set_duty_cycle_stop_left_4>
			set_duty_cycle_stop_left_3(frame_buffer[start_evenled + 8 ]);
 8004518:	4b41      	ldr	r3, [pc, #260]	; (8004620 <open_bin_file+0x430>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3308      	adds	r3, #8
 800451e:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8004522:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 8004526:	5cd3      	ldrb	r3, [r2, r3]
 8004528:	4618      	mov	r0, r3
 800452a:	f7fc fbc1 	bl	8000cb0 <set_duty_cycle_stop_left_3>
			set_duty_cycle_stop_left_2(frame_buffer[start_evenled + 4 ]);
 800452e:	4b3c      	ldr	r3, [pc, #240]	; (8004620 <open_bin_file+0x430>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3304      	adds	r3, #4
 8004534:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8004538:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 800453c:	5cd3      	ldrb	r3, [r2, r3]
 800453e:	4618      	mov	r0, r3
 8004540:	f7fc fba6 	bl	8000c90 <set_duty_cycle_stop_left_2>
			set_duty_cycle_stop_left_1(frame_buffer[start_evenled]);
 8004544:	4b36      	ldr	r3, [pc, #216]	; (8004620 <open_bin_file+0x430>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 800454c:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 8004550:	5cd3      	ldrb	r3, [r2, r3]
 8004552:	4618      	mov	r0, r3
 8004554:	f7fc fb8c 	bl	8000c70 <set_duty_cycle_stop_left_1>

			set_duty_cycle_stop_ritht_1(frame_buffer[start_evenled + 20 ]);
 8004558:	4b31      	ldr	r3, [pc, #196]	; (8004620 <open_bin_file+0x430>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3314      	adds	r3, #20
 800455e:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8004562:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 8004566:	5cd3      	ldrb	r3, [r2, r3]
 8004568:	4618      	mov	r0, r3
 800456a:	f7fc fbd1 	bl	8000d10 <set_duty_cycle_stop_ritht_1>
			set_duty_cycle_stop_ritht_2(frame_buffer[start_evenled + 24 ]);
 800456e:	4b2c      	ldr	r3, [pc, #176]	; (8004620 <open_bin_file+0x430>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3318      	adds	r3, #24
 8004574:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8004578:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 800457c:	5cd3      	ldrb	r3, [r2, r3]
 800457e:	4618      	mov	r0, r3
 8004580:	f7fc fbd6 	bl	8000d30 <set_duty_cycle_stop_ritht_2>
			set_duty_cycle_stop_ritht_3(frame_buffer[start_evenled + 28 ]);
 8004584:	4b26      	ldr	r3, [pc, #152]	; (8004620 <open_bin_file+0x430>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	331c      	adds	r3, #28
 800458a:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 800458e:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 8004592:	5cd3      	ldrb	r3, [r2, r3]
 8004594:	4618      	mov	r0, r3
 8004596:	f7fc fbdb 	bl	8000d50 <set_duty_cycle_stop_ritht_3>
			set_duty_cycle_stop_ritht_4(frame_buffer[start_evenled + 32 ]);
 800459a:	4b21      	ldr	r3, [pc, #132]	; (8004620 <open_bin_file+0x430>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	3320      	adds	r3, #32
 80045a0:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80045a4:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 80045a8:	5cd3      	ldrb	r3, [r2, r3]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fc fbe0 	bl	8000d70 <set_duty_cycle_stop_ritht_4>
			set_duty_cycle_stop_ritht_5(frame_buffer[start_evenled + 36 ]);
 80045b0:	4b1b      	ldr	r3, [pc, #108]	; (8004620 <open_bin_file+0x430>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3324      	adds	r3, #36	; 0x24
 80045b6:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80045ba:	f5a2 7275 	sub.w	r2, r2, #980	; 0x3d4
 80045be:	5cd3      	ldrb	r3, [r2, r3]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fc fbe5 	bl	8000d90 <set_duty_cycle_stop_ritht_5>

			while (!ARGB_Show_left());  		// Update
 80045c6:	bf00      	nop
 80045c8:	f7fc ff38 	bl	800143c <ARGB_Show_left>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0fa      	beq.n	80045c8 <open_bin_file+0x3d8>
			while (!ARGB_Show_right());  		// Update
 80045d2:	bf00      	nop
 80045d4:	f7fd f8fe 	bl	80017d4 <ARGB_Show_right>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0fa      	beq.n	80045d4 <open_bin_file+0x3e4>

			interrupt_flag = 0;				// Tim 13
 80045de:	4b11      	ldr	r3, [pc, #68]	; (8004624 <open_bin_file+0x434>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_TogglePin(GPIOE, TEST_OUTPUT_1_Pin);					// For measure
 80045e4:	2104      	movs	r1, #4
 80045e6:	4810      	ldr	r0, [pc, #64]	; (8004628 <open_bin_file+0x438>)
 80045e8:	f000 ffad 	bl	8005546 <HAL_GPIO_TogglePin>
		for(frame; ((frame < how_many_frames) && (interrupt_flag == 1)); frame++)
 80045ec:	4b0f      	ldr	r3, [pc, #60]	; (800462c <open_bin_file+0x43c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3301      	adds	r3, #1
 80045f2:	4a0e      	ldr	r2, [pc, #56]	; (800462c <open_bin_file+0x43c>)
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	4b0d      	ldr	r3, [pc, #52]	; (800462c <open_bin_file+0x43c>)
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	4b0d      	ldr	r3, [pc, #52]	; (8004630 <open_bin_file+0x440>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	da04      	bge.n	800460c <open_bin_file+0x41c>
 8004602:	4b08      	ldr	r3, [pc, #32]	; (8004624 <open_bin_file+0x434>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b01      	cmp	r3, #1
 8004608:	f43f ae7f 	beq.w	800430a <open_bin_file+0x11a>
		}
		return 0;
 800460c:	2300      	movs	r3, #0
 800460e:	e7ff      	b.n	8004610 <open_bin_file+0x420>
	}
}
 8004610:	4618      	mov	r0, r3
 8004612:	f507 7778 	add.w	r7, r7, #992	; 0x3e0
 8004616:	46bd      	mov	sp, r7
 8004618:	bdb0      	pop	{r4, r5, r7, pc}
 800461a:	bf00      	nop
 800461c:	20000018 	.word	0x20000018
 8004620:	2000000c 	.word	0x2000000c
 8004624:	200015db 	.word	0x200015db
 8004628:	40021000 	.word	0x40021000
 800462c:	20002cc4 	.word	0x20002cc4
 8004630:	20002cc0 	.word	0x20002cc0

08004634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800466c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004638:	480d      	ldr	r0, [pc, #52]	; (8004670 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800463a:	490e      	ldr	r1, [pc, #56]	; (8004674 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800463c:	4a0e      	ldr	r2, [pc, #56]	; (8004678 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800463e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004640:	e002      	b.n	8004648 <LoopCopyDataInit>

08004642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004646:	3304      	adds	r3, #4

08004648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800464a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800464c:	d3f9      	bcc.n	8004642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800464e:	4a0b      	ldr	r2, [pc, #44]	; (800467c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004650:	4c0b      	ldr	r4, [pc, #44]	; (8004680 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004654:	e001      	b.n	800465a <LoopFillZerobss>

08004656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004658:	3204      	adds	r2, #4

0800465a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800465a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800465c:	d3fb      	bcc.n	8004656 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800465e:	f7ff fa73 	bl	8003b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004662:	f00c fe47 	bl	80112f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004666:	f7fe f811 	bl	800268c <main>
  bx  lr    
 800466a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800466c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004674:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8004678:	08012274 	.word	0x08012274
  ldr r2, =_sbss
 800467c:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8004680:	200035f8 	.word	0x200035f8

08004684 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004684:	e7fe      	b.n	8004684 <ADC_IRQHandler>
	...

08004688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800468c:	4b0e      	ldr	r3, [pc, #56]	; (80046c8 <HAL_Init+0x40>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a0d      	ldr	r2, [pc, #52]	; (80046c8 <HAL_Init+0x40>)
 8004692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004696:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004698:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <HAL_Init+0x40>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a0a      	ldr	r2, [pc, #40]	; (80046c8 <HAL_Init+0x40>)
 800469e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046a4:	4b08      	ldr	r3, [pc, #32]	; (80046c8 <HAL_Init+0x40>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a07      	ldr	r2, [pc, #28]	; (80046c8 <HAL_Init+0x40>)
 80046aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046b0:	2003      	movs	r0, #3
 80046b2:	f000 f94f 	bl	8004954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046b6:	2000      	movs	r0, #0
 80046b8:	f000 f808 	bl	80046cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046bc:	f7fe feac 	bl	8003418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	40023c00 	.word	0x40023c00

080046cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80046d4:	4b12      	ldr	r3, [pc, #72]	; (8004720 <HAL_InitTick+0x54>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	4b12      	ldr	r3, [pc, #72]	; (8004724 <HAL_InitTick+0x58>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	4619      	mov	r1, r3
 80046de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80046e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 f967 	bl	80049be <HAL_SYSTICK_Config>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e00e      	b.n	8004718 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b0f      	cmp	r3, #15
 80046fe:	d80a      	bhi.n	8004716 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004700:	2200      	movs	r2, #0
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004708:	f000 f92f 	bl	800496a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800470c:	4a06      	ldr	r2, [pc, #24]	; (8004728 <HAL_InitTick+0x5c>)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	e000      	b.n	8004718 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
}
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	20000004 	.word	0x20000004
 8004724:	20000028 	.word	0x20000028
 8004728:	20000024 	.word	0x20000024

0800472c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004730:	4b06      	ldr	r3, [pc, #24]	; (800474c <HAL_IncTick+0x20>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	461a      	mov	r2, r3
 8004736:	4b06      	ldr	r3, [pc, #24]	; (8004750 <HAL_IncTick+0x24>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4413      	add	r3, r2
 800473c:	4a04      	ldr	r2, [pc, #16]	; (8004750 <HAL_IncTick+0x24>)
 800473e:	6013      	str	r3, [r2, #0]
}
 8004740:	bf00      	nop
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	20000028 	.word	0x20000028
 8004750:	20002cc8 	.word	0x20002cc8

08004754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
  return uwTick;
 8004758:	4b03      	ldr	r3, [pc, #12]	; (8004768 <HAL_GetTick+0x14>)
 800475a:	681b      	ldr	r3, [r3, #0]
}
 800475c:	4618      	mov	r0, r3
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	20002cc8 	.word	0x20002cc8

0800476c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004774:	f7ff ffee 	bl	8004754 <HAL_GetTick>
 8004778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004784:	d005      	beq.n	8004792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004786:	4b0a      	ldr	r3, [pc, #40]	; (80047b0 <HAL_Delay+0x44>)
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4413      	add	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004792:	bf00      	nop
 8004794:	f7ff ffde 	bl	8004754 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d8f7      	bhi.n	8004794 <HAL_Delay+0x28>
  {
  }
}
 80047a4:	bf00      	nop
 80047a6:	bf00      	nop
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20000028 	.word	0x20000028

080047b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047c4:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <__NVIC_SetPriorityGrouping+0x44>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047d0:	4013      	ands	r3, r2
 80047d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047e6:	4a04      	ldr	r2, [pc, #16]	; (80047f8 <__NVIC_SetPriorityGrouping+0x44>)
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	60d3      	str	r3, [r2, #12]
}
 80047ec:	bf00      	nop
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	e000ed00 	.word	0xe000ed00

080047fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004800:	4b04      	ldr	r3, [pc, #16]	; (8004814 <__NVIC_GetPriorityGrouping+0x18>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	0a1b      	lsrs	r3, r3, #8
 8004806:	f003 0307 	and.w	r3, r3, #7
}
 800480a:	4618      	mov	r0, r3
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	e000ed00 	.word	0xe000ed00

08004818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	4603      	mov	r3, r0
 8004820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004826:	2b00      	cmp	r3, #0
 8004828:	db0b      	blt.n	8004842 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800482a:	79fb      	ldrb	r3, [r7, #7]
 800482c:	f003 021f 	and.w	r2, r3, #31
 8004830:	4907      	ldr	r1, [pc, #28]	; (8004850 <__NVIC_EnableIRQ+0x38>)
 8004832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004836:	095b      	lsrs	r3, r3, #5
 8004838:	2001      	movs	r0, #1
 800483a:	fa00 f202 	lsl.w	r2, r0, r2
 800483e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	e000e100 	.word	0xe000e100

08004854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	6039      	str	r1, [r7, #0]
 800485e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004864:	2b00      	cmp	r3, #0
 8004866:	db0a      	blt.n	800487e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	b2da      	uxtb	r2, r3
 800486c:	490c      	ldr	r1, [pc, #48]	; (80048a0 <__NVIC_SetPriority+0x4c>)
 800486e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004872:	0112      	lsls	r2, r2, #4
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	440b      	add	r3, r1
 8004878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800487c:	e00a      	b.n	8004894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	b2da      	uxtb	r2, r3
 8004882:	4908      	ldr	r1, [pc, #32]	; (80048a4 <__NVIC_SetPriority+0x50>)
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	3b04      	subs	r3, #4
 800488c:	0112      	lsls	r2, r2, #4
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	440b      	add	r3, r1
 8004892:	761a      	strb	r2, [r3, #24]
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	e000e100 	.word	0xe000e100
 80048a4:	e000ed00 	.word	0xe000ed00

080048a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b089      	sub	sp, #36	; 0x24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	f1c3 0307 	rsb	r3, r3, #7
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	bf28      	it	cs
 80048c6:	2304      	movcs	r3, #4
 80048c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	3304      	adds	r3, #4
 80048ce:	2b06      	cmp	r3, #6
 80048d0:	d902      	bls.n	80048d8 <NVIC_EncodePriority+0x30>
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	3b03      	subs	r3, #3
 80048d6:	e000      	b.n	80048da <NVIC_EncodePriority+0x32>
 80048d8:	2300      	movs	r3, #0
 80048da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	43da      	mvns	r2, r3
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	401a      	ands	r2, r3
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	fa01 f303 	lsl.w	r3, r1, r3
 80048fa:	43d9      	mvns	r1, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004900:	4313      	orrs	r3, r2
         );
}
 8004902:	4618      	mov	r0, r3
 8004904:	3724      	adds	r7, #36	; 0x24
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
	...

08004910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3b01      	subs	r3, #1
 800491c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004920:	d301      	bcc.n	8004926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004922:	2301      	movs	r3, #1
 8004924:	e00f      	b.n	8004946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004926:	4a0a      	ldr	r2, [pc, #40]	; (8004950 <SysTick_Config+0x40>)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3b01      	subs	r3, #1
 800492c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800492e:	210f      	movs	r1, #15
 8004930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004934:	f7ff ff8e 	bl	8004854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004938:	4b05      	ldr	r3, [pc, #20]	; (8004950 <SysTick_Config+0x40>)
 800493a:	2200      	movs	r2, #0
 800493c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800493e:	4b04      	ldr	r3, [pc, #16]	; (8004950 <SysTick_Config+0x40>)
 8004940:	2207      	movs	r2, #7
 8004942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	e000e010 	.word	0xe000e010

08004954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7ff ff29 	bl	80047b4 <__NVIC_SetPriorityGrouping>
}
 8004962:	bf00      	nop
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800496a:	b580      	push	{r7, lr}
 800496c:	b086      	sub	sp, #24
 800496e:	af00      	add	r7, sp, #0
 8004970:	4603      	mov	r3, r0
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	607a      	str	r2, [r7, #4]
 8004976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004978:	2300      	movs	r3, #0
 800497a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800497c:	f7ff ff3e 	bl	80047fc <__NVIC_GetPriorityGrouping>
 8004980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	68b9      	ldr	r1, [r7, #8]
 8004986:	6978      	ldr	r0, [r7, #20]
 8004988:	f7ff ff8e 	bl	80048a8 <NVIC_EncodePriority>
 800498c:	4602      	mov	r2, r0
 800498e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004992:	4611      	mov	r1, r2
 8004994:	4618      	mov	r0, r3
 8004996:	f7ff ff5d 	bl	8004854 <__NVIC_SetPriority>
}
 800499a:	bf00      	nop
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b082      	sub	sp, #8
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	4603      	mov	r3, r0
 80049aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff ff31 	bl	8004818 <__NVIC_EnableIRQ>
}
 80049b6:	bf00      	nop
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b082      	sub	sp, #8
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7ff ffa2 	bl	8004910 <SysTick_Config>
 80049cc:	4603      	mov	r3, r0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
	...

080049d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80049e4:	f7ff feb6 	bl	8004754 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e099      	b.n	8004b28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 0201 	bic.w	r2, r2, #1
 8004a12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a14:	e00f      	b.n	8004a36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a16:	f7ff fe9d 	bl	8004754 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b05      	cmp	r3, #5
 8004a22:	d908      	bls.n	8004a36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2220      	movs	r2, #32
 8004a28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2203      	movs	r2, #3
 8004a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e078      	b.n	8004b28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1e8      	bne.n	8004a16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	4b38      	ldr	r3, [pc, #224]	; (8004b30 <HAL_DMA_Init+0x158>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d107      	bne.n	8004aa0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f023 0307 	bic.w	r3, r3, #7
 8004ab6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d117      	bne.n	8004afa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00e      	beq.n	8004afa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 fb01 	bl	80050e4 <DMA_CheckFifoParam>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d008      	beq.n	8004afa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2240      	movs	r2, #64	; 0x40
 8004aec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004af6:	2301      	movs	r3, #1
 8004af8:	e016      	b.n	8004b28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 fab8 	bl	8005078 <DMA_CalcBaseAndBitshift>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b10:	223f      	movs	r2, #63	; 0x3f
 8004b12:	409a      	lsls	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	f010803f 	.word	0xf010803f

08004b34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b42:	2300      	movs	r3, #0
 8004b44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d101      	bne.n	8004b5a <HAL_DMA_Start_IT+0x26>
 8004b56:	2302      	movs	r3, #2
 8004b58:	e040      	b.n	8004bdc <HAL_DMA_Start_IT+0xa8>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d12f      	bne.n	8004bce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2202      	movs	r2, #2
 8004b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 fa4a 	bl	800501c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8c:	223f      	movs	r2, #63	; 0x3f
 8004b8e:	409a      	lsls	r2, r3
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0216 	orr.w	r2, r2, #22
 8004ba2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d007      	beq.n	8004bbc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 0208 	orr.w	r2, r2, #8
 8004bba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	e005      	b.n	8004bda <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004bf2:	f7ff fdaf 	bl	8004754 <HAL_GetTick>
 8004bf6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d008      	beq.n	8004c16 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2280      	movs	r2, #128	; 0x80
 8004c08:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e052      	b.n	8004cbc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0216 	bic.w	r2, r2, #22
 8004c24:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	695a      	ldr	r2, [r3, #20]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c34:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d103      	bne.n	8004c46 <HAL_DMA_Abort+0x62>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d007      	beq.n	8004c56 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0208 	bic.w	r2, r2, #8
 8004c54:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0201 	bic.w	r2, r2, #1
 8004c64:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c66:	e013      	b.n	8004c90 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c68:	f7ff fd74 	bl	8004754 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b05      	cmp	r3, #5
 8004c74:	d90c      	bls.n	8004c90 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2203      	movs	r2, #3
 8004c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e015      	b.n	8004cbc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1e4      	bne.n	8004c68 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca2:	223f      	movs	r2, #63	; 0x3f
 8004ca4:	409a      	lsls	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d004      	beq.n	8004ce2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2280      	movs	r2, #128	; 0x80
 8004cdc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e00c      	b.n	8004cfc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2205      	movs	r2, #5
 8004ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0201 	bic.w	r2, r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d14:	4b8e      	ldr	r3, [pc, #568]	; (8004f50 <HAL_DMA_IRQHandler+0x248>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a8e      	ldr	r2, [pc, #568]	; (8004f54 <HAL_DMA_IRQHandler+0x24c>)
 8004d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1e:	0a9b      	lsrs	r3, r3, #10
 8004d20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d32:	2208      	movs	r2, #8
 8004d34:	409a      	lsls	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d01a      	beq.n	8004d74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d013      	beq.n	8004d74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0204 	bic.w	r2, r2, #4
 8004d5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d60:	2208      	movs	r2, #8
 8004d62:	409a      	lsls	r2, r3
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6c:	f043 0201 	orr.w	r2, r3, #1
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d78:	2201      	movs	r2, #1
 8004d7a:	409a      	lsls	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d012      	beq.n	8004daa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00b      	beq.n	8004daa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d96:	2201      	movs	r2, #1
 8004d98:	409a      	lsls	r2, r3
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da2:	f043 0202 	orr.w	r2, r3, #2
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dae:	2204      	movs	r2, #4
 8004db0:	409a      	lsls	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4013      	ands	r3, r2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d012      	beq.n	8004de0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00b      	beq.n	8004de0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dcc:	2204      	movs	r2, #4
 8004dce:	409a      	lsls	r2, r3
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd8:	f043 0204 	orr.w	r2, r3, #4
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de4:	2210      	movs	r2, #16
 8004de6:	409a      	lsls	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4013      	ands	r3, r2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d043      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d03c      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e02:	2210      	movs	r2, #16
 8004e04:	409a      	lsls	r2, r3
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d018      	beq.n	8004e4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d108      	bne.n	8004e38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d024      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	4798      	blx	r3
 8004e36:	e01f      	b.n	8004e78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d01b      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	4798      	blx	r3
 8004e48:	e016      	b.n	8004e78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d107      	bne.n	8004e68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0208 	bic.w	r2, r2, #8
 8004e66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	409a      	lsls	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4013      	ands	r3, r2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 808f 	beq.w	8004fa8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0310 	and.w	r3, r3, #16
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 8087 	beq.w	8004fa8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	409a      	lsls	r2, r3
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b05      	cmp	r3, #5
 8004eb0:	d136      	bne.n	8004f20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0216 	bic.w	r2, r2, #22
 8004ec0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	695a      	ldr	r2, [r3, #20]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ed0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d103      	bne.n	8004ee2 <HAL_DMA_IRQHandler+0x1da>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d007      	beq.n	8004ef2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0208 	bic.w	r2, r2, #8
 8004ef0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef6:	223f      	movs	r2, #63	; 0x3f
 8004ef8:	409a      	lsls	r2, r3
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d07e      	beq.n	8005014 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	4798      	blx	r3
        }
        return;
 8004f1e:	e079      	b.n	8005014 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d01d      	beq.n	8004f6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10d      	bne.n	8004f58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d031      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	4798      	blx	r3
 8004f4c:	e02c      	b.n	8004fa8 <HAL_DMA_IRQHandler+0x2a0>
 8004f4e:	bf00      	nop
 8004f50:	20000004 	.word	0x20000004
 8004f54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d023      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	4798      	blx	r3
 8004f68:	e01e      	b.n	8004fa8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10f      	bne.n	8004f98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0210 	bic.w	r2, r2, #16
 8004f86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d003      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d032      	beq.n	8005016 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d022      	beq.n	8005002 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2205      	movs	r2, #5
 8004fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0201 	bic.w	r2, r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	60bb      	str	r3, [r7, #8]
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d307      	bcc.n	8004ff0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1f2      	bne.n	8004fd4 <HAL_DMA_IRQHandler+0x2cc>
 8004fee:	e000      	b.n	8004ff2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ff0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005006:	2b00      	cmp	r3, #0
 8005008:	d005      	beq.n	8005016 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	4798      	blx	r3
 8005012:	e000      	b.n	8005016 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005014:	bf00      	nop
    }
  }
}
 8005016:	3718      	adds	r7, #24
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
 8005028:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005038:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	2b40      	cmp	r3, #64	; 0x40
 8005048:	d108      	bne.n	800505c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800505a:	e007      	b.n	800506c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	60da      	str	r2, [r3, #12]
}
 800506c:	bf00      	nop
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	b2db      	uxtb	r3, r3
 8005086:	3b10      	subs	r3, #16
 8005088:	4a14      	ldr	r2, [pc, #80]	; (80050dc <DMA_CalcBaseAndBitshift+0x64>)
 800508a:	fba2 2303 	umull	r2, r3, r2, r3
 800508e:	091b      	lsrs	r3, r3, #4
 8005090:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005092:	4a13      	ldr	r2, [pc, #76]	; (80050e0 <DMA_CalcBaseAndBitshift+0x68>)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4413      	add	r3, r2
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2b03      	cmp	r3, #3
 80050a4:	d909      	bls.n	80050ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80050ae:	f023 0303 	bic.w	r3, r3, #3
 80050b2:	1d1a      	adds	r2, r3, #4
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	659a      	str	r2, [r3, #88]	; 0x58
 80050b8:	e007      	b.n	80050ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80050c2:	f023 0303 	bic.w	r3, r3, #3
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	aaaaaaab 	.word	0xaaaaaaab
 80050e0:	08011de8 	.word	0x08011de8

080050e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050ec:	2300      	movs	r3, #0
 80050ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d11f      	bne.n	800513e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2b03      	cmp	r3, #3
 8005102:	d856      	bhi.n	80051b2 <DMA_CheckFifoParam+0xce>
 8005104:	a201      	add	r2, pc, #4	; (adr r2, 800510c <DMA_CheckFifoParam+0x28>)
 8005106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510a:	bf00      	nop
 800510c:	0800511d 	.word	0x0800511d
 8005110:	0800512f 	.word	0x0800512f
 8005114:	0800511d 	.word	0x0800511d
 8005118:	080051b3 	.word	0x080051b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005120:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d046      	beq.n	80051b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800512c:	e043      	b.n	80051b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005132:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005136:	d140      	bne.n	80051ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800513c:	e03d      	b.n	80051ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005146:	d121      	bne.n	800518c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2b03      	cmp	r3, #3
 800514c:	d837      	bhi.n	80051be <DMA_CheckFifoParam+0xda>
 800514e:	a201      	add	r2, pc, #4	; (adr r2, 8005154 <DMA_CheckFifoParam+0x70>)
 8005150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005154:	08005165 	.word	0x08005165
 8005158:	0800516b 	.word	0x0800516b
 800515c:	08005165 	.word	0x08005165
 8005160:	0800517d 	.word	0x0800517d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	73fb      	strb	r3, [r7, #15]
      break;
 8005168:	e030      	b.n	80051cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d025      	beq.n	80051c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800517a:	e022      	b.n	80051c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005184:	d11f      	bne.n	80051c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800518a:	e01c      	b.n	80051c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2b02      	cmp	r3, #2
 8005190:	d903      	bls.n	800519a <DMA_CheckFifoParam+0xb6>
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b03      	cmp	r3, #3
 8005196:	d003      	beq.n	80051a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005198:	e018      	b.n	80051cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	73fb      	strb	r3, [r7, #15]
      break;
 800519e:	e015      	b.n	80051cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00e      	beq.n	80051ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	73fb      	strb	r3, [r7, #15]
      break;
 80051b0:	e00b      	b.n	80051ca <DMA_CheckFifoParam+0xe6>
      break;
 80051b2:	bf00      	nop
 80051b4:	e00a      	b.n	80051cc <DMA_CheckFifoParam+0xe8>
      break;
 80051b6:	bf00      	nop
 80051b8:	e008      	b.n	80051cc <DMA_CheckFifoParam+0xe8>
      break;
 80051ba:	bf00      	nop
 80051bc:	e006      	b.n	80051cc <DMA_CheckFifoParam+0xe8>
      break;
 80051be:	bf00      	nop
 80051c0:	e004      	b.n	80051cc <DMA_CheckFifoParam+0xe8>
      break;
 80051c2:	bf00      	nop
 80051c4:	e002      	b.n	80051cc <DMA_CheckFifoParam+0xe8>
      break;   
 80051c6:	bf00      	nop
 80051c8:	e000      	b.n	80051cc <DMA_CheckFifoParam+0xe8>
      break;
 80051ca:	bf00      	nop
    }
  } 
  
  return status; 
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop

080051dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051dc:	b480      	push	{r7}
 80051de:	b089      	sub	sp, #36	; 0x24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051f2:	2300      	movs	r3, #0
 80051f4:	61fb      	str	r3, [r7, #28]
 80051f6:	e16b      	b.n	80054d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051f8:	2201      	movs	r2, #1
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	4013      	ands	r3, r2
 800520a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	429a      	cmp	r2, r3
 8005212:	f040 815a 	bne.w	80054ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	2b01      	cmp	r3, #1
 8005220:	d005      	beq.n	800522e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800522a:	2b02      	cmp	r3, #2
 800522c:	d130      	bne.n	8005290 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	2203      	movs	r2, #3
 800523a:	fa02 f303 	lsl.w	r3, r2, r3
 800523e:	43db      	mvns	r3, r3
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	4013      	ands	r3, r2
 8005244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	fa02 f303 	lsl.w	r3, r2, r3
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	4313      	orrs	r3, r2
 8005256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005264:	2201      	movs	r2, #1
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	fa02 f303 	lsl.w	r3, r2, r3
 800526c:	43db      	mvns	r3, r3
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	4013      	ands	r3, r2
 8005272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	091b      	lsrs	r3, r3, #4
 800527a:	f003 0201 	and.w	r2, r3, #1
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	fa02 f303 	lsl.w	r3, r2, r3
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	4313      	orrs	r3, r2
 8005288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f003 0303 	and.w	r3, r3, #3
 8005298:	2b03      	cmp	r3, #3
 800529a:	d017      	beq.n	80052cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	2203      	movs	r2, #3
 80052a8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ac:	43db      	mvns	r3, r3
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	4013      	ands	r3, r2
 80052b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	005b      	lsls	r3, r3, #1
 80052bc:	fa02 f303 	lsl.w	r3, r2, r3
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f003 0303 	and.w	r3, r3, #3
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d123      	bne.n	8005320 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	08da      	lsrs	r2, r3, #3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	3208      	adds	r2, #8
 80052e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	f003 0307 	and.w	r3, r3, #7
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	220f      	movs	r2, #15
 80052f0:	fa02 f303 	lsl.w	r3, r2, r3
 80052f4:	43db      	mvns	r3, r3
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	4013      	ands	r3, r2
 80052fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	691a      	ldr	r2, [r3, #16]
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	f003 0307 	and.w	r3, r3, #7
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	fa02 f303 	lsl.w	r3, r2, r3
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	4313      	orrs	r3, r2
 8005310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	08da      	lsrs	r2, r3, #3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	3208      	adds	r2, #8
 800531a:	69b9      	ldr	r1, [r7, #24]
 800531c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	2203      	movs	r2, #3
 800532c:	fa02 f303 	lsl.w	r3, r2, r3
 8005330:	43db      	mvns	r3, r3
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	4013      	ands	r3, r2
 8005336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f003 0203 	and.w	r2, r3, #3
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	fa02 f303 	lsl.w	r3, r2, r3
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	4313      	orrs	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 80b4 	beq.w	80054ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005362:	2300      	movs	r3, #0
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	4b60      	ldr	r3, [pc, #384]	; (80054e8 <HAL_GPIO_Init+0x30c>)
 8005368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536a:	4a5f      	ldr	r2, [pc, #380]	; (80054e8 <HAL_GPIO_Init+0x30c>)
 800536c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005370:	6453      	str	r3, [r2, #68]	; 0x44
 8005372:	4b5d      	ldr	r3, [pc, #372]	; (80054e8 <HAL_GPIO_Init+0x30c>)
 8005374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800537a:	60fb      	str	r3, [r7, #12]
 800537c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800537e:	4a5b      	ldr	r2, [pc, #364]	; (80054ec <HAL_GPIO_Init+0x310>)
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	089b      	lsrs	r3, r3, #2
 8005384:	3302      	adds	r3, #2
 8005386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800538a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	f003 0303 	and.w	r3, r3, #3
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	220f      	movs	r2, #15
 8005396:	fa02 f303 	lsl.w	r3, r2, r3
 800539a:	43db      	mvns	r3, r3
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	4013      	ands	r3, r2
 80053a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a52      	ldr	r2, [pc, #328]	; (80054f0 <HAL_GPIO_Init+0x314>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d02b      	beq.n	8005402 <HAL_GPIO_Init+0x226>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a51      	ldr	r2, [pc, #324]	; (80054f4 <HAL_GPIO_Init+0x318>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d025      	beq.n	80053fe <HAL_GPIO_Init+0x222>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a50      	ldr	r2, [pc, #320]	; (80054f8 <HAL_GPIO_Init+0x31c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d01f      	beq.n	80053fa <HAL_GPIO_Init+0x21e>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a4f      	ldr	r2, [pc, #316]	; (80054fc <HAL_GPIO_Init+0x320>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d019      	beq.n	80053f6 <HAL_GPIO_Init+0x21a>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a4e      	ldr	r2, [pc, #312]	; (8005500 <HAL_GPIO_Init+0x324>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d013      	beq.n	80053f2 <HAL_GPIO_Init+0x216>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a4d      	ldr	r2, [pc, #308]	; (8005504 <HAL_GPIO_Init+0x328>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d00d      	beq.n	80053ee <HAL_GPIO_Init+0x212>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a4c      	ldr	r2, [pc, #304]	; (8005508 <HAL_GPIO_Init+0x32c>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d007      	beq.n	80053ea <HAL_GPIO_Init+0x20e>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a4b      	ldr	r2, [pc, #300]	; (800550c <HAL_GPIO_Init+0x330>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d101      	bne.n	80053e6 <HAL_GPIO_Init+0x20a>
 80053e2:	2307      	movs	r3, #7
 80053e4:	e00e      	b.n	8005404 <HAL_GPIO_Init+0x228>
 80053e6:	2308      	movs	r3, #8
 80053e8:	e00c      	b.n	8005404 <HAL_GPIO_Init+0x228>
 80053ea:	2306      	movs	r3, #6
 80053ec:	e00a      	b.n	8005404 <HAL_GPIO_Init+0x228>
 80053ee:	2305      	movs	r3, #5
 80053f0:	e008      	b.n	8005404 <HAL_GPIO_Init+0x228>
 80053f2:	2304      	movs	r3, #4
 80053f4:	e006      	b.n	8005404 <HAL_GPIO_Init+0x228>
 80053f6:	2303      	movs	r3, #3
 80053f8:	e004      	b.n	8005404 <HAL_GPIO_Init+0x228>
 80053fa:	2302      	movs	r3, #2
 80053fc:	e002      	b.n	8005404 <HAL_GPIO_Init+0x228>
 80053fe:	2301      	movs	r3, #1
 8005400:	e000      	b.n	8005404 <HAL_GPIO_Init+0x228>
 8005402:	2300      	movs	r3, #0
 8005404:	69fa      	ldr	r2, [r7, #28]
 8005406:	f002 0203 	and.w	r2, r2, #3
 800540a:	0092      	lsls	r2, r2, #2
 800540c:	4093      	lsls	r3, r2
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	4313      	orrs	r3, r2
 8005412:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005414:	4935      	ldr	r1, [pc, #212]	; (80054ec <HAL_GPIO_Init+0x310>)
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	089b      	lsrs	r3, r3, #2
 800541a:	3302      	adds	r3, #2
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005422:	4b3b      	ldr	r3, [pc, #236]	; (8005510 <HAL_GPIO_Init+0x334>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	43db      	mvns	r3, r3
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	4013      	ands	r3, r2
 8005430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	4313      	orrs	r3, r2
 8005444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005446:	4a32      	ldr	r2, [pc, #200]	; (8005510 <HAL_GPIO_Init+0x334>)
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800544c:	4b30      	ldr	r3, [pc, #192]	; (8005510 <HAL_GPIO_Init+0x334>)
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	43db      	mvns	r3, r3
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	4013      	ands	r3, r2
 800545a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	4313      	orrs	r3, r2
 800546e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005470:	4a27      	ldr	r2, [pc, #156]	; (8005510 <HAL_GPIO_Init+0x334>)
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005476:	4b26      	ldr	r3, [pc, #152]	; (8005510 <HAL_GPIO_Init+0x334>)
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	43db      	mvns	r3, r3
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	4013      	ands	r3, r2
 8005484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d003      	beq.n	800549a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	4313      	orrs	r3, r2
 8005498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800549a:	4a1d      	ldr	r2, [pc, #116]	; (8005510 <HAL_GPIO_Init+0x334>)
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054a0:	4b1b      	ldr	r3, [pc, #108]	; (8005510 <HAL_GPIO_Init+0x334>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	43db      	mvns	r3, r3
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	4013      	ands	r3, r2
 80054ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80054c4:	4a12      	ldr	r2, [pc, #72]	; (8005510 <HAL_GPIO_Init+0x334>)
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	3301      	adds	r3, #1
 80054ce:	61fb      	str	r3, [r7, #28]
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	2b0f      	cmp	r3, #15
 80054d4:	f67f ae90 	bls.w	80051f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80054d8:	bf00      	nop
 80054da:	bf00      	nop
 80054dc:	3724      	adds	r7, #36	; 0x24
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	40023800 	.word	0x40023800
 80054ec:	40013800 	.word	0x40013800
 80054f0:	40020000 	.word	0x40020000
 80054f4:	40020400 	.word	0x40020400
 80054f8:	40020800 	.word	0x40020800
 80054fc:	40020c00 	.word	0x40020c00
 8005500:	40021000 	.word	0x40021000
 8005504:	40021400 	.word	0x40021400
 8005508:	40021800 	.word	0x40021800
 800550c:	40021c00 	.word	0x40021c00
 8005510:	40013c00 	.word	0x40013c00

08005514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	460b      	mov	r3, r1
 800551e:	807b      	strh	r3, [r7, #2]
 8005520:	4613      	mov	r3, r2
 8005522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005524:	787b      	ldrb	r3, [r7, #1]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800552a:	887a      	ldrh	r2, [r7, #2]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005530:	e003      	b.n	800553a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005532:	887b      	ldrh	r3, [r7, #2]
 8005534:	041a      	lsls	r2, r3, #16
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	619a      	str	r2, [r3, #24]
}
 800553a:	bf00      	nop
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005546:	b480      	push	{r7}
 8005548:	b085      	sub	sp, #20
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	460b      	mov	r3, r1
 8005550:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005558:	887a      	ldrh	r2, [r7, #2]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	4013      	ands	r3, r2
 800555e:	041a      	lsls	r2, r3, #16
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	43d9      	mvns	r1, r3
 8005564:	887b      	ldrh	r3, [r7, #2]
 8005566:	400b      	ands	r3, r1
 8005568:	431a      	orrs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	619a      	str	r2, [r3, #24]
}
 800556e:	bf00      	nop
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800557a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800557c:	b08f      	sub	sp, #60	; 0x3c
 800557e:	af0a      	add	r7, sp, #40	; 0x28
 8005580:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e054      	b.n	8005636 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d106      	bne.n	80055ac <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f00b fbf4 	bl	8010d94 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2203      	movs	r2, #3
 80055b0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d102      	bne.n	80055c6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f004 fde2 	bl	800a194 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	603b      	str	r3, [r7, #0]
 80055d6:	687e      	ldr	r6, [r7, #4]
 80055d8:	466d      	mov	r5, sp
 80055da:	f106 0410 	add.w	r4, r6, #16
 80055de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80055ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80055ee:	1d33      	adds	r3, r6, #4
 80055f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055f2:	6838      	ldr	r0, [r7, #0]
 80055f4:	f004 fd5c 	bl	800a0b0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2101      	movs	r1, #1
 80055fe:	4618      	mov	r0, r3
 8005600:	f004 fdd9 	bl	800a1b6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	603b      	str	r3, [r7, #0]
 800560a:	687e      	ldr	r6, [r7, #4]
 800560c:	466d      	mov	r5, sp
 800560e:	f106 0410 	add.w	r4, r6, #16
 8005612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800561a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800561e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005622:	1d33      	adds	r3, r6, #4
 8005624:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005626:	6838      	ldr	r0, [r7, #0]
 8005628:	f004 ff62 	bl	800a4f0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800563e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800563e:	b590      	push	{r4, r7, lr}
 8005640:	b089      	sub	sp, #36	; 0x24
 8005642:	af04      	add	r7, sp, #16
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	4608      	mov	r0, r1
 8005648:	4611      	mov	r1, r2
 800564a:	461a      	mov	r2, r3
 800564c:	4603      	mov	r3, r0
 800564e:	70fb      	strb	r3, [r7, #3]
 8005650:	460b      	mov	r3, r1
 8005652:	70bb      	strb	r3, [r7, #2]
 8005654:	4613      	mov	r3, r2
 8005656:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800565e:	2b01      	cmp	r3, #1
 8005660:	d101      	bne.n	8005666 <HAL_HCD_HC_Init+0x28>
 8005662:	2302      	movs	r3, #2
 8005664:	e076      	b.n	8005754 <HAL_HCD_HC_Init+0x116>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800566e:	78fb      	ldrb	r3, [r7, #3]
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	212c      	movs	r1, #44	; 0x2c
 8005674:	fb01 f303 	mul.w	r3, r1, r3
 8005678:	4413      	add	r3, r2
 800567a:	333d      	adds	r3, #61	; 0x3d
 800567c:	2200      	movs	r2, #0
 800567e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	212c      	movs	r1, #44	; 0x2c
 8005686:	fb01 f303 	mul.w	r3, r1, r3
 800568a:	4413      	add	r3, r2
 800568c:	3338      	adds	r3, #56	; 0x38
 800568e:	787a      	ldrb	r2, [r7, #1]
 8005690:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8005692:	78fb      	ldrb	r3, [r7, #3]
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	212c      	movs	r1, #44	; 0x2c
 8005698:	fb01 f303 	mul.w	r3, r1, r3
 800569c:	4413      	add	r3, r2
 800569e:	3340      	adds	r3, #64	; 0x40
 80056a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80056a2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80056a4:	78fb      	ldrb	r3, [r7, #3]
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	212c      	movs	r1, #44	; 0x2c
 80056aa:	fb01 f303 	mul.w	r3, r1, r3
 80056ae:	4413      	add	r3, r2
 80056b0:	3339      	adds	r3, #57	; 0x39
 80056b2:	78fa      	ldrb	r2, [r7, #3]
 80056b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80056b6:	78fb      	ldrb	r3, [r7, #3]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	212c      	movs	r1, #44	; 0x2c
 80056bc:	fb01 f303 	mul.w	r3, r1, r3
 80056c0:	4413      	add	r3, r2
 80056c2:	333f      	adds	r3, #63	; 0x3f
 80056c4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80056c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80056ca:	78fb      	ldrb	r3, [r7, #3]
 80056cc:	78ba      	ldrb	r2, [r7, #2]
 80056ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056d2:	b2d0      	uxtb	r0, r2
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	212c      	movs	r1, #44	; 0x2c
 80056d8:	fb01 f303 	mul.w	r3, r1, r3
 80056dc:	4413      	add	r3, r2
 80056de:	333a      	adds	r3, #58	; 0x3a
 80056e0:	4602      	mov	r2, r0
 80056e2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80056e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	da09      	bge.n	8005700 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80056ec:	78fb      	ldrb	r3, [r7, #3]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	212c      	movs	r1, #44	; 0x2c
 80056f2:	fb01 f303 	mul.w	r3, r1, r3
 80056f6:	4413      	add	r3, r2
 80056f8:	333b      	adds	r3, #59	; 0x3b
 80056fa:	2201      	movs	r2, #1
 80056fc:	701a      	strb	r2, [r3, #0]
 80056fe:	e008      	b.n	8005712 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	212c      	movs	r1, #44	; 0x2c
 8005706:	fb01 f303 	mul.w	r3, r1, r3
 800570a:	4413      	add	r3, r2
 800570c:	333b      	adds	r3, #59	; 0x3b
 800570e:	2200      	movs	r2, #0
 8005710:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8005712:	78fb      	ldrb	r3, [r7, #3]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	212c      	movs	r1, #44	; 0x2c
 8005718:	fb01 f303 	mul.w	r3, r1, r3
 800571c:	4413      	add	r3, r2
 800571e:	333c      	adds	r3, #60	; 0x3c
 8005720:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005724:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6818      	ldr	r0, [r3, #0]
 800572a:	787c      	ldrb	r4, [r7, #1]
 800572c:	78ba      	ldrb	r2, [r7, #2]
 800572e:	78f9      	ldrb	r1, [r7, #3]
 8005730:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005732:	9302      	str	r3, [sp, #8]
 8005734:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005738:	9301      	str	r3, [sp, #4]
 800573a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	4623      	mov	r3, r4
 8005742:	f005 f85b 	bl	800a7fc <USB_HC_Init>
 8005746:	4603      	mov	r3, r0
 8005748:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005752:	7bfb      	ldrb	r3, [r7, #15]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	bd90      	pop	{r4, r7, pc}

0800575c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	460b      	mov	r3, r1
 8005766:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005768:	2300      	movs	r3, #0
 800576a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005772:	2b01      	cmp	r3, #1
 8005774:	d101      	bne.n	800577a <HAL_HCD_HC_Halt+0x1e>
 8005776:	2302      	movs	r3, #2
 8005778:	e00f      	b.n	800579a <HAL_HCD_HC_Halt+0x3e>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	78fa      	ldrb	r2, [r7, #3]
 8005788:	4611      	mov	r1, r2
 800578a:	4618      	mov	r0, r3
 800578c:	f005 faab 	bl	800ace6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005798:	7bfb      	ldrb	r3, [r7, #15]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
	...

080057a4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	4608      	mov	r0, r1
 80057ae:	4611      	mov	r1, r2
 80057b0:	461a      	mov	r2, r3
 80057b2:	4603      	mov	r3, r0
 80057b4:	70fb      	strb	r3, [r7, #3]
 80057b6:	460b      	mov	r3, r1
 80057b8:	70bb      	strb	r3, [r7, #2]
 80057ba:	4613      	mov	r3, r2
 80057bc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80057be:	78fb      	ldrb	r3, [r7, #3]
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	212c      	movs	r1, #44	; 0x2c
 80057c4:	fb01 f303 	mul.w	r3, r1, r3
 80057c8:	4413      	add	r3, r2
 80057ca:	333b      	adds	r3, #59	; 0x3b
 80057cc:	78ba      	ldrb	r2, [r7, #2]
 80057ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80057d0:	78fb      	ldrb	r3, [r7, #3]
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	212c      	movs	r1, #44	; 0x2c
 80057d6:	fb01 f303 	mul.w	r3, r1, r3
 80057da:	4413      	add	r3, r2
 80057dc:	333f      	adds	r3, #63	; 0x3f
 80057de:	787a      	ldrb	r2, [r7, #1]
 80057e0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80057e2:	7c3b      	ldrb	r3, [r7, #16]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d112      	bne.n	800580e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80057e8:	78fb      	ldrb	r3, [r7, #3]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	212c      	movs	r1, #44	; 0x2c
 80057ee:	fb01 f303 	mul.w	r3, r1, r3
 80057f2:	4413      	add	r3, r2
 80057f4:	3342      	adds	r3, #66	; 0x42
 80057f6:	2203      	movs	r2, #3
 80057f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80057fa:	78fb      	ldrb	r3, [r7, #3]
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	212c      	movs	r1, #44	; 0x2c
 8005800:	fb01 f303 	mul.w	r3, r1, r3
 8005804:	4413      	add	r3, r2
 8005806:	333d      	adds	r3, #61	; 0x3d
 8005808:	7f3a      	ldrb	r2, [r7, #28]
 800580a:	701a      	strb	r2, [r3, #0]
 800580c:	e008      	b.n	8005820 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800580e:	78fb      	ldrb	r3, [r7, #3]
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	212c      	movs	r1, #44	; 0x2c
 8005814:	fb01 f303 	mul.w	r3, r1, r3
 8005818:	4413      	add	r3, r2
 800581a:	3342      	adds	r3, #66	; 0x42
 800581c:	2202      	movs	r2, #2
 800581e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005820:	787b      	ldrb	r3, [r7, #1]
 8005822:	2b03      	cmp	r3, #3
 8005824:	f200 80c6 	bhi.w	80059b4 <HAL_HCD_HC_SubmitRequest+0x210>
 8005828:	a201      	add	r2, pc, #4	; (adr r2, 8005830 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800582a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582e:	bf00      	nop
 8005830:	08005841 	.word	0x08005841
 8005834:	080059a1 	.word	0x080059a1
 8005838:	080058a5 	.word	0x080058a5
 800583c:	08005923 	.word	0x08005923
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005840:	7c3b      	ldrb	r3, [r7, #16]
 8005842:	2b01      	cmp	r3, #1
 8005844:	f040 80b8 	bne.w	80059b8 <HAL_HCD_HC_SubmitRequest+0x214>
 8005848:	78bb      	ldrb	r3, [r7, #2]
 800584a:	2b00      	cmp	r3, #0
 800584c:	f040 80b4 	bne.w	80059b8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8005850:	8b3b      	ldrh	r3, [r7, #24]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d108      	bne.n	8005868 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8005856:	78fb      	ldrb	r3, [r7, #3]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	212c      	movs	r1, #44	; 0x2c
 800585c:	fb01 f303 	mul.w	r3, r1, r3
 8005860:	4413      	add	r3, r2
 8005862:	3355      	adds	r3, #85	; 0x55
 8005864:	2201      	movs	r2, #1
 8005866:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005868:	78fb      	ldrb	r3, [r7, #3]
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	212c      	movs	r1, #44	; 0x2c
 800586e:	fb01 f303 	mul.w	r3, r1, r3
 8005872:	4413      	add	r3, r2
 8005874:	3355      	adds	r3, #85	; 0x55
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d109      	bne.n	8005890 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800587c:	78fb      	ldrb	r3, [r7, #3]
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	212c      	movs	r1, #44	; 0x2c
 8005882:	fb01 f303 	mul.w	r3, r1, r3
 8005886:	4413      	add	r3, r2
 8005888:	3342      	adds	r3, #66	; 0x42
 800588a:	2200      	movs	r2, #0
 800588c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800588e:	e093      	b.n	80059b8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005890:	78fb      	ldrb	r3, [r7, #3]
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	212c      	movs	r1, #44	; 0x2c
 8005896:	fb01 f303 	mul.w	r3, r1, r3
 800589a:	4413      	add	r3, r2
 800589c:	3342      	adds	r3, #66	; 0x42
 800589e:	2202      	movs	r2, #2
 80058a0:	701a      	strb	r2, [r3, #0]
      break;
 80058a2:	e089      	b.n	80059b8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80058a4:	78bb      	ldrb	r3, [r7, #2]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d11d      	bne.n	80058e6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80058aa:	78fb      	ldrb	r3, [r7, #3]
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	212c      	movs	r1, #44	; 0x2c
 80058b0:	fb01 f303 	mul.w	r3, r1, r3
 80058b4:	4413      	add	r3, r2
 80058b6:	3355      	adds	r3, #85	; 0x55
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d109      	bne.n	80058d2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80058be:	78fb      	ldrb	r3, [r7, #3]
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	212c      	movs	r1, #44	; 0x2c
 80058c4:	fb01 f303 	mul.w	r3, r1, r3
 80058c8:	4413      	add	r3, r2
 80058ca:	3342      	adds	r3, #66	; 0x42
 80058cc:	2200      	movs	r2, #0
 80058ce:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80058d0:	e073      	b.n	80059ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80058d2:	78fb      	ldrb	r3, [r7, #3]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	212c      	movs	r1, #44	; 0x2c
 80058d8:	fb01 f303 	mul.w	r3, r1, r3
 80058dc:	4413      	add	r3, r2
 80058de:	3342      	adds	r3, #66	; 0x42
 80058e0:	2202      	movs	r2, #2
 80058e2:	701a      	strb	r2, [r3, #0]
      break;
 80058e4:	e069      	b.n	80059ba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80058e6:	78fb      	ldrb	r3, [r7, #3]
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	212c      	movs	r1, #44	; 0x2c
 80058ec:	fb01 f303 	mul.w	r3, r1, r3
 80058f0:	4413      	add	r3, r2
 80058f2:	3354      	adds	r3, #84	; 0x54
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d109      	bne.n	800590e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80058fa:	78fb      	ldrb	r3, [r7, #3]
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	212c      	movs	r1, #44	; 0x2c
 8005900:	fb01 f303 	mul.w	r3, r1, r3
 8005904:	4413      	add	r3, r2
 8005906:	3342      	adds	r3, #66	; 0x42
 8005908:	2200      	movs	r2, #0
 800590a:	701a      	strb	r2, [r3, #0]
      break;
 800590c:	e055      	b.n	80059ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800590e:	78fb      	ldrb	r3, [r7, #3]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	212c      	movs	r1, #44	; 0x2c
 8005914:	fb01 f303 	mul.w	r3, r1, r3
 8005918:	4413      	add	r3, r2
 800591a:	3342      	adds	r3, #66	; 0x42
 800591c:	2202      	movs	r2, #2
 800591e:	701a      	strb	r2, [r3, #0]
      break;
 8005920:	e04b      	b.n	80059ba <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005922:	78bb      	ldrb	r3, [r7, #2]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d11d      	bne.n	8005964 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005928:	78fb      	ldrb	r3, [r7, #3]
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	212c      	movs	r1, #44	; 0x2c
 800592e:	fb01 f303 	mul.w	r3, r1, r3
 8005932:	4413      	add	r3, r2
 8005934:	3355      	adds	r3, #85	; 0x55
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d109      	bne.n	8005950 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800593c:	78fb      	ldrb	r3, [r7, #3]
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	212c      	movs	r1, #44	; 0x2c
 8005942:	fb01 f303 	mul.w	r3, r1, r3
 8005946:	4413      	add	r3, r2
 8005948:	3342      	adds	r3, #66	; 0x42
 800594a:	2200      	movs	r2, #0
 800594c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800594e:	e034      	b.n	80059ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005950:	78fb      	ldrb	r3, [r7, #3]
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	212c      	movs	r1, #44	; 0x2c
 8005956:	fb01 f303 	mul.w	r3, r1, r3
 800595a:	4413      	add	r3, r2
 800595c:	3342      	adds	r3, #66	; 0x42
 800595e:	2202      	movs	r2, #2
 8005960:	701a      	strb	r2, [r3, #0]
      break;
 8005962:	e02a      	b.n	80059ba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005964:	78fb      	ldrb	r3, [r7, #3]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	212c      	movs	r1, #44	; 0x2c
 800596a:	fb01 f303 	mul.w	r3, r1, r3
 800596e:	4413      	add	r3, r2
 8005970:	3354      	adds	r3, #84	; 0x54
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d109      	bne.n	800598c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	212c      	movs	r1, #44	; 0x2c
 800597e:	fb01 f303 	mul.w	r3, r1, r3
 8005982:	4413      	add	r3, r2
 8005984:	3342      	adds	r3, #66	; 0x42
 8005986:	2200      	movs	r2, #0
 8005988:	701a      	strb	r2, [r3, #0]
      break;
 800598a:	e016      	b.n	80059ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800598c:	78fb      	ldrb	r3, [r7, #3]
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	212c      	movs	r1, #44	; 0x2c
 8005992:	fb01 f303 	mul.w	r3, r1, r3
 8005996:	4413      	add	r3, r2
 8005998:	3342      	adds	r3, #66	; 0x42
 800599a:	2202      	movs	r2, #2
 800599c:	701a      	strb	r2, [r3, #0]
      break;
 800599e:	e00c      	b.n	80059ba <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80059a0:	78fb      	ldrb	r3, [r7, #3]
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	212c      	movs	r1, #44	; 0x2c
 80059a6:	fb01 f303 	mul.w	r3, r1, r3
 80059aa:	4413      	add	r3, r2
 80059ac:	3342      	adds	r3, #66	; 0x42
 80059ae:	2200      	movs	r2, #0
 80059b0:	701a      	strb	r2, [r3, #0]
      break;
 80059b2:	e002      	b.n	80059ba <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80059b4:	bf00      	nop
 80059b6:	e000      	b.n	80059ba <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80059b8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80059ba:	78fb      	ldrb	r3, [r7, #3]
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	212c      	movs	r1, #44	; 0x2c
 80059c0:	fb01 f303 	mul.w	r3, r1, r3
 80059c4:	4413      	add	r3, r2
 80059c6:	3344      	adds	r3, #68	; 0x44
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80059cc:	78fb      	ldrb	r3, [r7, #3]
 80059ce:	8b3a      	ldrh	r2, [r7, #24]
 80059d0:	6879      	ldr	r1, [r7, #4]
 80059d2:	202c      	movs	r0, #44	; 0x2c
 80059d4:	fb00 f303 	mul.w	r3, r0, r3
 80059d8:	440b      	add	r3, r1
 80059da:	334c      	adds	r3, #76	; 0x4c
 80059dc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80059de:	78fb      	ldrb	r3, [r7, #3]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	212c      	movs	r1, #44	; 0x2c
 80059e4:	fb01 f303 	mul.w	r3, r1, r3
 80059e8:	4413      	add	r3, r2
 80059ea:	3360      	adds	r3, #96	; 0x60
 80059ec:	2200      	movs	r2, #0
 80059ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	212c      	movs	r1, #44	; 0x2c
 80059f6:	fb01 f303 	mul.w	r3, r1, r3
 80059fa:	4413      	add	r3, r2
 80059fc:	3350      	adds	r3, #80	; 0x50
 80059fe:	2200      	movs	r2, #0
 8005a00:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005a02:	78fb      	ldrb	r3, [r7, #3]
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	212c      	movs	r1, #44	; 0x2c
 8005a08:	fb01 f303 	mul.w	r3, r1, r3
 8005a0c:	4413      	add	r3, r2
 8005a0e:	3339      	adds	r3, #57	; 0x39
 8005a10:	78fa      	ldrb	r2, [r7, #3]
 8005a12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005a14:	78fb      	ldrb	r3, [r7, #3]
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	212c      	movs	r1, #44	; 0x2c
 8005a1a:	fb01 f303 	mul.w	r3, r1, r3
 8005a1e:	4413      	add	r3, r2
 8005a20:	3361      	adds	r3, #97	; 0x61
 8005a22:	2200      	movs	r2, #0
 8005a24:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6818      	ldr	r0, [r3, #0]
 8005a2a:	78fb      	ldrb	r3, [r7, #3]
 8005a2c:	222c      	movs	r2, #44	; 0x2c
 8005a2e:	fb02 f303 	mul.w	r3, r2, r3
 8005a32:	3338      	adds	r3, #56	; 0x38
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	18d1      	adds	r1, r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	461a      	mov	r2, r3
 8005a40:	f004 fffe 	bl	800aa40 <USB_HC_StartXfer>
 8005a44:	4603      	mov	r3, r0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop

08005a50 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f004 fcff 	bl	800a46a <USB_GetMode>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	f040 80f6 	bne.w	8005c60 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f004 fce3 	bl	800a444 <USB_ReadInterrupts>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 80ec 	beq.w	8005c5e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f004 fcda 	bl	800a444 <USB_ReadInterrupts>
 8005a90:	4603      	mov	r3, r0
 8005a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a9a:	d104      	bne.n	8005aa6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005aa4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f004 fcca 	bl	800a444 <USB_ReadInterrupts>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aba:	d104      	bne.n	8005ac6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005ac4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f004 fcba 	bl	800a444 <USB_ReadInterrupts>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ad6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ada:	d104      	bne.n	8005ae6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005ae4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f004 fcaa 	bl	800a444 <USB_ReadInterrupts>
 8005af0:	4603      	mov	r3, r0
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d103      	bne.n	8005b02 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2202      	movs	r2, #2
 8005b00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f004 fc9c 	bl	800a444 <USB_ReadInterrupts>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b16:	d11c      	bne.n	8005b52 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005b20:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10f      	bne.n	8005b52 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8005b32:	2110      	movs	r1, #16
 8005b34:	6938      	ldr	r0, [r7, #16]
 8005b36:	f004 fb8b 	bl	800a250 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8005b3a:	6938      	ldr	r0, [r7, #16]
 8005b3c:	f004 fbbc 	bl	800a2b8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2101      	movs	r1, #1
 8005b46:	4618      	mov	r0, r3
 8005b48:	f004 fd92 	bl	800a670 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f00b f99f 	bl	8010e90 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f004 fc74 	bl	800a444 <USB_ReadInterrupts>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b66:	d102      	bne.n	8005b6e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f001 f89e 	bl	8006caa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f004 fc66 	bl	800a444 <USB_ReadInterrupts>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	f003 0308 	and.w	r3, r3, #8
 8005b7e:	2b08      	cmp	r3, #8
 8005b80:	d106      	bne.n	8005b90 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f00b f968 	bl	8010e58 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2208      	movs	r2, #8
 8005b8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f004 fc55 	bl	800a444 <USB_ReadInterrupts>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	f003 0310 	and.w	r3, r3, #16
 8005ba0:	2b10      	cmp	r3, #16
 8005ba2:	d101      	bne.n	8005ba8 <HAL_HCD_IRQHandler+0x158>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e000      	b.n	8005baa <HAL_HCD_IRQHandler+0x15a>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d012      	beq.n	8005bd4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	699a      	ldr	r2, [r3, #24]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f022 0210 	bic.w	r2, r2, #16
 8005bbc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 ffa1 	bl	8006b06 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	699a      	ldr	r2, [r3, #24]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f042 0210 	orr.w	r2, r2, #16
 8005bd2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f004 fc33 	bl	800a444 <USB_ReadInterrupts>
 8005bde:	4603      	mov	r3, r0
 8005be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005be8:	d13a      	bne.n	8005c60 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f005 f868 	bl	800acc4 <USB_HC_ReadInterrupt>
 8005bf4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	617b      	str	r3, [r7, #20]
 8005bfa:	e025      	b.n	8005c48 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	f003 030f 	and.w	r3, r3, #15
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	fa22 f303 	lsr.w	r3, r2, r3
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d018      	beq.n	8005c42 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c26:	d106      	bne.n	8005c36 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f8ab 	bl	8005d8a <HCD_HC_IN_IRQHandler>
 8005c34:	e005      	b.n	8005c42 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fbf9 	bl	8006434 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	3301      	adds	r3, #1
 8005c46:	617b      	str	r3, [r7, #20]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d3d4      	bcc.n	8005bfc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c5a:	615a      	str	r2, [r3, #20]
 8005c5c:	e000      	b.n	8005c60 <HAL_HCD_IRQHandler+0x210>
      return;
 8005c5e:	bf00      	nop
    }
  }
}
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b082      	sub	sp, #8
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d101      	bne.n	8005c7c <HAL_HCD_Start+0x16>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e013      	b.n	8005ca4 <HAL_HCD_Start+0x3e>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2101      	movs	r1, #1
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f004 fd54 	bl	800a738 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f004 fa6c 	bl	800a172 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d101      	bne.n	8005cc2 <HAL_HCD_Stop+0x16>
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	e00d      	b.n	8005cde <HAL_HCD_Stop+0x32>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f005 f942 	bl	800af58 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b082      	sub	sp, #8
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f004 fcf6 	bl	800a6e4 <USB_ResetPort>
 8005cf8:	4603      	mov	r3, r0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b083      	sub	sp, #12
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005d0e:	78fb      	ldrb	r3, [r7, #3]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	212c      	movs	r1, #44	; 0x2c
 8005d14:	fb01 f303 	mul.w	r3, r1, r3
 8005d18:	4413      	add	r3, r2
 8005d1a:	3360      	adds	r3, #96	; 0x60
 8005d1c:	781b      	ldrb	r3, [r3, #0]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b083      	sub	sp, #12
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
 8005d32:	460b      	mov	r3, r1
 8005d34:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005d36:	78fb      	ldrb	r3, [r7, #3]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	212c      	movs	r1, #44	; 0x2c
 8005d3c:	fb01 f303 	mul.w	r3, r1, r3
 8005d40:	4413      	add	r3, r2
 8005d42:	3350      	adds	r3, #80	; 0x50
 8005d44:	681b      	ldr	r3, [r3, #0]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b082      	sub	sp, #8
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f004 fd3a 	bl	800a7d8 <USB_GetCurrentFrame>
 8005d64:	4603      	mov	r3, r0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3708      	adds	r7, #8
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b082      	sub	sp, #8
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f004 fd15 	bl	800a7aa <USB_GetHostSpeed>
 8005d80:	4603      	mov	r3, r0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b086      	sub	sp, #24
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
 8005d92:	460b      	mov	r3, r1
 8005d94:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005da0:	78fb      	ldrb	r3, [r7, #3]
 8005da2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 0304 	and.w	r3, r3, #4
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	d11a      	bne.n	8005df0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	2304      	movs	r3, #4
 8005dca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	212c      	movs	r1, #44	; 0x2c
 8005dd2:	fb01 f303 	mul.w	r3, r1, r3
 8005dd6:	4413      	add	r3, r2
 8005dd8:	3361      	adds	r3, #97	; 0x61
 8005dda:	2206      	movs	r2, #6
 8005ddc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	b2d2      	uxtb	r2, r2
 8005de6:	4611      	mov	r1, r2
 8005de8:	4618      	mov	r0, r3
 8005dea:	f004 ff7c 	bl	800ace6 <USB_HC_Halt>
 8005dee:	e0af      	b.n	8005f50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e06:	d11b      	bne.n	8005e40 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e14:	461a      	mov	r2, r3
 8005e16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	212c      	movs	r1, #44	; 0x2c
 8005e22:	fb01 f303 	mul.w	r3, r1, r3
 8005e26:	4413      	add	r3, r2
 8005e28:	3361      	adds	r3, #97	; 0x61
 8005e2a:	2207      	movs	r2, #7
 8005e2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	b2d2      	uxtb	r2, r2
 8005e36:	4611      	mov	r1, r2
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f004 ff54 	bl	800ace6 <USB_HC_Halt>
 8005e3e:	e087      	b.n	8005f50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 0320 	and.w	r3, r3, #32
 8005e52:	2b20      	cmp	r3, #32
 8005e54:	d109      	bne.n	8005e6a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e62:	461a      	mov	r2, r3
 8005e64:	2320      	movs	r3, #32
 8005e66:	6093      	str	r3, [r2, #8]
 8005e68:	e072      	b.n	8005f50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f003 0308 	and.w	r3, r3, #8
 8005e7c:	2b08      	cmp	r3, #8
 8005e7e:	d11a      	bne.n	8005eb6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	2308      	movs	r3, #8
 8005e90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	212c      	movs	r1, #44	; 0x2c
 8005e98:	fb01 f303 	mul.w	r3, r1, r3
 8005e9c:	4413      	add	r3, r2
 8005e9e:	3361      	adds	r3, #97	; 0x61
 8005ea0:	2205      	movs	r2, #5
 8005ea2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	4611      	mov	r1, r2
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f004 ff19 	bl	800ace6 <USB_HC_Halt>
 8005eb4:	e04c      	b.n	8005f50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	015a      	lsls	r2, r3, #5
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ecc:	d11b      	bne.n	8005f06 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eda:	461a      	mov	r2, r3
 8005edc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ee0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	212c      	movs	r1, #44	; 0x2c
 8005ee8:	fb01 f303 	mul.w	r3, r1, r3
 8005eec:	4413      	add	r3, r2
 8005eee:	3361      	adds	r3, #97	; 0x61
 8005ef0:	2208      	movs	r2, #8
 8005ef2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	b2d2      	uxtb	r2, r2
 8005efc:	4611      	mov	r1, r2
 8005efe:	4618      	mov	r0, r3
 8005f00:	f004 fef1 	bl	800ace6 <USB_HC_Halt>
 8005f04:	e024      	b.n	8005f50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f18:	2b80      	cmp	r3, #128	; 0x80
 8005f1a:	d119      	bne.n	8005f50 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f28:	461a      	mov	r2, r3
 8005f2a:	2380      	movs	r3, #128	; 0x80
 8005f2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	212c      	movs	r1, #44	; 0x2c
 8005f34:	fb01 f303 	mul.w	r3, r1, r3
 8005f38:	4413      	add	r3, r2
 8005f3a:	3361      	adds	r3, #97	; 0x61
 8005f3c:	2206      	movs	r2, #6
 8005f3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	b2d2      	uxtb	r2, r2
 8005f48:	4611      	mov	r1, r2
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f004 fecb 	bl	800ace6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f66:	d112      	bne.n	8005f8e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	b2d2      	uxtb	r2, r2
 8005f70:	4611      	mov	r1, r2
 8005f72:	4618      	mov	r0, r3
 8005f74:	f004 feb7 	bl	800ace6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f84:	461a      	mov	r2, r3
 8005f86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f8a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005f8c:	e24e      	b.n	800642c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	f040 80df 	bne.w	8006164 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d019      	beq.n	8005fe2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	212c      	movs	r1, #44	; 0x2c
 8005fb4:	fb01 f303 	mul.w	r3, r1, r3
 8005fb8:	4413      	add	r3, r2
 8005fba:	3348      	adds	r3, #72	; 0x48
 8005fbc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	0159      	lsls	r1, r3, #5
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	440b      	add	r3, r1
 8005fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005fd0:	1ad2      	subs	r2, r2, r3
 8005fd2:	6879      	ldr	r1, [r7, #4]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	202c      	movs	r0, #44	; 0x2c
 8005fd8:	fb00 f303 	mul.w	r3, r0, r3
 8005fdc:	440b      	add	r3, r1
 8005fde:	3350      	adds	r3, #80	; 0x50
 8005fe0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	212c      	movs	r1, #44	; 0x2c
 8005fe8:	fb01 f303 	mul.w	r3, r1, r3
 8005fec:	4413      	add	r3, r2
 8005fee:	3361      	adds	r3, #97	; 0x61
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	212c      	movs	r1, #44	; 0x2c
 8005ffa:	fb01 f303 	mul.w	r3, r1, r3
 8005ffe:	4413      	add	r3, r2
 8006000:	335c      	adds	r3, #92	; 0x5c
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	4413      	add	r3, r2
 800600e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006012:	461a      	mov	r2, r3
 8006014:	2301      	movs	r3, #1
 8006016:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	212c      	movs	r1, #44	; 0x2c
 800601e:	fb01 f303 	mul.w	r3, r1, r3
 8006022:	4413      	add	r3, r2
 8006024:	333f      	adds	r3, #63	; 0x3f
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d009      	beq.n	8006040 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	212c      	movs	r1, #44	; 0x2c
 8006032:	fb01 f303 	mul.w	r3, r1, r3
 8006036:	4413      	add	r3, r2
 8006038:	333f      	adds	r3, #63	; 0x3f
 800603a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800603c:	2b02      	cmp	r3, #2
 800603e:	d111      	bne.n	8006064 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	b2d2      	uxtb	r2, r2
 8006048:	4611      	mov	r1, r2
 800604a:	4618      	mov	r0, r3
 800604c:	f004 fe4b 	bl	800ace6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	4413      	add	r3, r2
 8006058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800605c:	461a      	mov	r2, r3
 800605e:	2310      	movs	r3, #16
 8006060:	6093      	str	r3, [r2, #8]
 8006062:	e03a      	b.n	80060da <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	212c      	movs	r1, #44	; 0x2c
 800606a:	fb01 f303 	mul.w	r3, r1, r3
 800606e:	4413      	add	r3, r2
 8006070:	333f      	adds	r3, #63	; 0x3f
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	2b03      	cmp	r3, #3
 8006076:	d009      	beq.n	800608c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	212c      	movs	r1, #44	; 0x2c
 800607e:	fb01 f303 	mul.w	r3, r1, r3
 8006082:	4413      	add	r3, r2
 8006084:	333f      	adds	r3, #63	; 0x3f
 8006086:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8006088:	2b01      	cmp	r3, #1
 800608a:	d126      	bne.n	80060da <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	4413      	add	r3, r2
 8006094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	0151      	lsls	r1, r2, #5
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	440a      	add	r2, r1
 80060a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060aa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	212c      	movs	r1, #44	; 0x2c
 80060b2:	fb01 f303 	mul.w	r3, r1, r3
 80060b6:	4413      	add	r3, r2
 80060b8:	3360      	adds	r3, #96	; 0x60
 80060ba:	2201      	movs	r2, #1
 80060bc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	b2d9      	uxtb	r1, r3
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	202c      	movs	r0, #44	; 0x2c
 80060c8:	fb00 f303 	mul.w	r3, r0, r3
 80060cc:	4413      	add	r3, r2
 80060ce:	3360      	adds	r3, #96	; 0x60
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	461a      	mov	r2, r3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f00a fee9 	bl	8010eac <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d12b      	bne.n	800613a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	212c      	movs	r1, #44	; 0x2c
 80060e8:	fb01 f303 	mul.w	r3, r1, r3
 80060ec:	4413      	add	r3, r2
 80060ee:	3348      	adds	r3, #72	; 0x48
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6879      	ldr	r1, [r7, #4]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	202c      	movs	r0, #44	; 0x2c
 80060f8:	fb00 f202 	mul.w	r2, r0, r2
 80060fc:	440a      	add	r2, r1
 80060fe:	3240      	adds	r2, #64	; 0x40
 8006100:	8812      	ldrh	r2, [r2, #0]
 8006102:	fbb3 f3f2 	udiv	r3, r3, r2
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 818e 	beq.w	800642c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	212c      	movs	r1, #44	; 0x2c
 8006116:	fb01 f303 	mul.w	r3, r1, r3
 800611a:	4413      	add	r3, r2
 800611c:	3354      	adds	r3, #84	; 0x54
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	f083 0301 	eor.w	r3, r3, #1
 8006124:	b2d8      	uxtb	r0, r3
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	212c      	movs	r1, #44	; 0x2c
 800612c:	fb01 f303 	mul.w	r3, r1, r3
 8006130:	4413      	add	r3, r2
 8006132:	3354      	adds	r3, #84	; 0x54
 8006134:	4602      	mov	r2, r0
 8006136:	701a      	strb	r2, [r3, #0]
}
 8006138:	e178      	b.n	800642c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	212c      	movs	r1, #44	; 0x2c
 8006140:	fb01 f303 	mul.w	r3, r1, r3
 8006144:	4413      	add	r3, r2
 8006146:	3354      	adds	r3, #84	; 0x54
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	f083 0301 	eor.w	r3, r3, #1
 800614e:	b2d8      	uxtb	r0, r3
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	212c      	movs	r1, #44	; 0x2c
 8006156:	fb01 f303 	mul.w	r3, r1, r3
 800615a:	4413      	add	r3, r2
 800615c:	3354      	adds	r3, #84	; 0x54
 800615e:	4602      	mov	r2, r0
 8006160:	701a      	strb	r2, [r3, #0]
}
 8006162:	e163      	b.n	800642c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	4413      	add	r3, r2
 800616c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b02      	cmp	r3, #2
 8006178:	f040 80f6 	bne.w	8006368 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	212c      	movs	r1, #44	; 0x2c
 8006182:	fb01 f303 	mul.w	r3, r1, r3
 8006186:	4413      	add	r3, r2
 8006188:	3361      	adds	r3, #97	; 0x61
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d109      	bne.n	80061a4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	212c      	movs	r1, #44	; 0x2c
 8006196:	fb01 f303 	mul.w	r3, r1, r3
 800619a:	4413      	add	r3, r2
 800619c:	3360      	adds	r3, #96	; 0x60
 800619e:	2201      	movs	r2, #1
 80061a0:	701a      	strb	r2, [r3, #0]
 80061a2:	e0c9      	b.n	8006338 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	212c      	movs	r1, #44	; 0x2c
 80061aa:	fb01 f303 	mul.w	r3, r1, r3
 80061ae:	4413      	add	r3, r2
 80061b0:	3361      	adds	r3, #97	; 0x61
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	2b05      	cmp	r3, #5
 80061b6:	d109      	bne.n	80061cc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	212c      	movs	r1, #44	; 0x2c
 80061be:	fb01 f303 	mul.w	r3, r1, r3
 80061c2:	4413      	add	r3, r2
 80061c4:	3360      	adds	r3, #96	; 0x60
 80061c6:	2205      	movs	r2, #5
 80061c8:	701a      	strb	r2, [r3, #0]
 80061ca:	e0b5      	b.n	8006338 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	212c      	movs	r1, #44	; 0x2c
 80061d2:	fb01 f303 	mul.w	r3, r1, r3
 80061d6:	4413      	add	r3, r2
 80061d8:	3361      	adds	r3, #97	; 0x61
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	2b06      	cmp	r3, #6
 80061de:	d009      	beq.n	80061f4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	212c      	movs	r1, #44	; 0x2c
 80061e6:	fb01 f303 	mul.w	r3, r1, r3
 80061ea:	4413      	add	r3, r2
 80061ec:	3361      	adds	r3, #97	; 0x61
 80061ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d150      	bne.n	8006296 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	212c      	movs	r1, #44	; 0x2c
 80061fa:	fb01 f303 	mul.w	r3, r1, r3
 80061fe:	4413      	add	r3, r2
 8006200:	335c      	adds	r3, #92	; 0x5c
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	6879      	ldr	r1, [r7, #4]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	202c      	movs	r0, #44	; 0x2c
 800620c:	fb00 f303 	mul.w	r3, r0, r3
 8006210:	440b      	add	r3, r1
 8006212:	335c      	adds	r3, #92	; 0x5c
 8006214:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	212c      	movs	r1, #44	; 0x2c
 800621c:	fb01 f303 	mul.w	r3, r1, r3
 8006220:	4413      	add	r3, r2
 8006222:	335c      	adds	r3, #92	; 0x5c
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b02      	cmp	r3, #2
 8006228:	d912      	bls.n	8006250 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	212c      	movs	r1, #44	; 0x2c
 8006230:	fb01 f303 	mul.w	r3, r1, r3
 8006234:	4413      	add	r3, r2
 8006236:	335c      	adds	r3, #92	; 0x5c
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	212c      	movs	r1, #44	; 0x2c
 8006242:	fb01 f303 	mul.w	r3, r1, r3
 8006246:	4413      	add	r3, r2
 8006248:	3360      	adds	r3, #96	; 0x60
 800624a:	2204      	movs	r2, #4
 800624c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800624e:	e073      	b.n	8006338 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	212c      	movs	r1, #44	; 0x2c
 8006256:	fb01 f303 	mul.w	r3, r1, r3
 800625a:	4413      	add	r3, r2
 800625c:	3360      	adds	r3, #96	; 0x60
 800625e:	2202      	movs	r2, #2
 8006260:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	4413      	add	r3, r2
 800626a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006278:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006280:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	4413      	add	r3, r2
 800628a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800628e:	461a      	mov	r2, r3
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006294:	e050      	b.n	8006338 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	212c      	movs	r1, #44	; 0x2c
 800629c:	fb01 f303 	mul.w	r3, r1, r3
 80062a0:	4413      	add	r3, r2
 80062a2:	3361      	adds	r3, #97	; 0x61
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	d122      	bne.n	80062f0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	212c      	movs	r1, #44	; 0x2c
 80062b0:	fb01 f303 	mul.w	r3, r1, r3
 80062b4:	4413      	add	r3, r2
 80062b6:	3360      	adds	r3, #96	; 0x60
 80062b8:	2202      	movs	r2, #2
 80062ba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062d2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062da:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e8:	461a      	mov	r2, r3
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	6013      	str	r3, [r2, #0]
 80062ee:	e023      	b.n	8006338 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	212c      	movs	r1, #44	; 0x2c
 80062f6:	fb01 f303 	mul.w	r3, r1, r3
 80062fa:	4413      	add	r3, r2
 80062fc:	3361      	adds	r3, #97	; 0x61
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	2b07      	cmp	r3, #7
 8006302:	d119      	bne.n	8006338 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	212c      	movs	r1, #44	; 0x2c
 800630a:	fb01 f303 	mul.w	r3, r1, r3
 800630e:	4413      	add	r3, r2
 8006310:	335c      	adds	r3, #92	; 0x5c
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	1c5a      	adds	r2, r3, #1
 8006316:	6879      	ldr	r1, [r7, #4]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	202c      	movs	r0, #44	; 0x2c
 800631c:	fb00 f303 	mul.w	r3, r0, r3
 8006320:	440b      	add	r3, r1
 8006322:	335c      	adds	r3, #92	; 0x5c
 8006324:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	212c      	movs	r1, #44	; 0x2c
 800632c:	fb01 f303 	mul.w	r3, r1, r3
 8006330:	4413      	add	r3, r2
 8006332:	3360      	adds	r3, #96	; 0x60
 8006334:	2204      	movs	r2, #4
 8006336:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	4413      	add	r3, r2
 8006340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006344:	461a      	mov	r2, r3
 8006346:	2302      	movs	r3, #2
 8006348:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	b2d9      	uxtb	r1, r3
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	202c      	movs	r0, #44	; 0x2c
 8006354:	fb00 f303 	mul.w	r3, r0, r3
 8006358:	4413      	add	r3, r2
 800635a:	3360      	adds	r3, #96	; 0x60
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f00a fda3 	bl	8010eac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006366:	e061      	b.n	800642c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	4413      	add	r3, r2
 8006370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f003 0310 	and.w	r3, r3, #16
 800637a:	2b10      	cmp	r3, #16
 800637c:	d156      	bne.n	800642c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	212c      	movs	r1, #44	; 0x2c
 8006384:	fb01 f303 	mul.w	r3, r1, r3
 8006388:	4413      	add	r3, r2
 800638a:	333f      	adds	r3, #63	; 0x3f
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	2b03      	cmp	r3, #3
 8006390:	d111      	bne.n	80063b6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	212c      	movs	r1, #44	; 0x2c
 8006398:	fb01 f303 	mul.w	r3, r1, r3
 800639c:	4413      	add	r3, r2
 800639e:	335c      	adds	r3, #92	; 0x5c
 80063a0:	2200      	movs	r2, #0
 80063a2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	b2d2      	uxtb	r2, r2
 80063ac:	4611      	mov	r1, r2
 80063ae:	4618      	mov	r0, r3
 80063b0:	f004 fc99 	bl	800ace6 <USB_HC_Halt>
 80063b4:	e031      	b.n	800641a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	212c      	movs	r1, #44	; 0x2c
 80063bc:	fb01 f303 	mul.w	r3, r1, r3
 80063c0:	4413      	add	r3, r2
 80063c2:	333f      	adds	r3, #63	; 0x3f
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d009      	beq.n	80063de <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	212c      	movs	r1, #44	; 0x2c
 80063d0:	fb01 f303 	mul.w	r3, r1, r3
 80063d4:	4413      	add	r3, r2
 80063d6:	333f      	adds	r3, #63	; 0x3f
 80063d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d11d      	bne.n	800641a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	212c      	movs	r1, #44	; 0x2c
 80063e4:	fb01 f303 	mul.w	r3, r1, r3
 80063e8:	4413      	add	r3, r2
 80063ea:	335c      	adds	r3, #92	; 0x5c
 80063ec:	2200      	movs	r2, #0
 80063ee:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d110      	bne.n	800641a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	212c      	movs	r1, #44	; 0x2c
 80063fe:	fb01 f303 	mul.w	r3, r1, r3
 8006402:	4413      	add	r3, r2
 8006404:	3361      	adds	r3, #97	; 0x61
 8006406:	2203      	movs	r2, #3
 8006408:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	b2d2      	uxtb	r2, r2
 8006412:	4611      	mov	r1, r2
 8006414:	4618      	mov	r0, r3
 8006416:	f004 fc66 	bl	800ace6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	015a      	lsls	r2, r3, #5
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	4413      	add	r3, r2
 8006422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006426:	461a      	mov	r2, r3
 8006428:	2310      	movs	r3, #16
 800642a:	6093      	str	r3, [r2, #8]
}
 800642c:	bf00      	nop
 800642e:	3718      	adds	r7, #24
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b088      	sub	sp, #32
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	460b      	mov	r3, r1
 800643e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800644a:	78fb      	ldrb	r3, [r7, #3]
 800644c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	4413      	add	r3, r2
 8006456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f003 0304 	and.w	r3, r3, #4
 8006460:	2b04      	cmp	r3, #4
 8006462:	d11a      	bne.n	800649a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	4413      	add	r3, r2
 800646c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006470:	461a      	mov	r2, r3
 8006472:	2304      	movs	r3, #4
 8006474:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	212c      	movs	r1, #44	; 0x2c
 800647c:	fb01 f303 	mul.w	r3, r1, r3
 8006480:	4413      	add	r3, r2
 8006482:	3361      	adds	r3, #97	; 0x61
 8006484:	2206      	movs	r2, #6
 8006486:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	4611      	mov	r1, r2
 8006492:	4618      	mov	r0, r3
 8006494:	f004 fc27 	bl	800ace6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8006498:	e331      	b.n	8006afe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f003 0320 	and.w	r3, r3, #32
 80064ac:	2b20      	cmp	r3, #32
 80064ae:	d12e      	bne.n	800650e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064bc:	461a      	mov	r2, r3
 80064be:	2320      	movs	r3, #32
 80064c0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	212c      	movs	r1, #44	; 0x2c
 80064c8:	fb01 f303 	mul.w	r3, r1, r3
 80064cc:	4413      	add	r3, r2
 80064ce:	333d      	adds	r3, #61	; 0x3d
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	f040 8313 	bne.w	8006afe <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	212c      	movs	r1, #44	; 0x2c
 80064de:	fb01 f303 	mul.w	r3, r1, r3
 80064e2:	4413      	add	r3, r2
 80064e4:	333d      	adds	r3, #61	; 0x3d
 80064e6:	2200      	movs	r2, #0
 80064e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	212c      	movs	r1, #44	; 0x2c
 80064f0:	fb01 f303 	mul.w	r3, r1, r3
 80064f4:	4413      	add	r3, r2
 80064f6:	3360      	adds	r3, #96	; 0x60
 80064f8:	2202      	movs	r2, #2
 80064fa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	b2d2      	uxtb	r2, r2
 8006504:	4611      	mov	r1, r2
 8006506:	4618      	mov	r0, r3
 8006508:	f004 fbed 	bl	800ace6 <USB_HC_Halt>
}
 800650c:	e2f7      	b.n	8006afe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	4413      	add	r3, r2
 8006516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006524:	d112      	bne.n	800654c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	4413      	add	r3, r2
 800652e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006532:	461a      	mov	r2, r3
 8006534:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006538:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	b2d2      	uxtb	r2, r2
 8006542:	4611      	mov	r1, r2
 8006544:	4618      	mov	r0, r3
 8006546:	f004 fbce 	bl	800ace6 <USB_HC_Halt>
}
 800654a:	e2d8      	b.n	8006afe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	4413      	add	r3, r2
 8006554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b01      	cmp	r3, #1
 8006560:	d140      	bne.n	80065e4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	212c      	movs	r1, #44	; 0x2c
 8006568:	fb01 f303 	mul.w	r3, r1, r3
 800656c:	4413      	add	r3, r2
 800656e:	335c      	adds	r3, #92	; 0x5c
 8006570:	2200      	movs	r2, #0
 8006572:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	4413      	add	r3, r2
 800657c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006586:	2b40      	cmp	r3, #64	; 0x40
 8006588:	d111      	bne.n	80065ae <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	212c      	movs	r1, #44	; 0x2c
 8006590:	fb01 f303 	mul.w	r3, r1, r3
 8006594:	4413      	add	r3, r2
 8006596:	333d      	adds	r3, #61	; 0x3d
 8006598:	2201      	movs	r2, #1
 800659a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a8:	461a      	mov	r2, r3
 80065aa:	2340      	movs	r3, #64	; 0x40
 80065ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ba:	461a      	mov	r2, r3
 80065bc:	2301      	movs	r3, #1
 80065be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	212c      	movs	r1, #44	; 0x2c
 80065c6:	fb01 f303 	mul.w	r3, r1, r3
 80065ca:	4413      	add	r3, r2
 80065cc:	3361      	adds	r3, #97	; 0x61
 80065ce:	2201      	movs	r2, #1
 80065d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	b2d2      	uxtb	r2, r2
 80065da:	4611      	mov	r1, r2
 80065dc:	4618      	mov	r0, r3
 80065de:	f004 fb82 	bl	800ace6 <USB_HC_Halt>
}
 80065e2:	e28c      	b.n	8006afe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f6:	2b40      	cmp	r3, #64	; 0x40
 80065f8:	d12c      	bne.n	8006654 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	212c      	movs	r1, #44	; 0x2c
 8006600:	fb01 f303 	mul.w	r3, r1, r3
 8006604:	4413      	add	r3, r2
 8006606:	3361      	adds	r3, #97	; 0x61
 8006608:	2204      	movs	r2, #4
 800660a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	212c      	movs	r1, #44	; 0x2c
 8006612:	fb01 f303 	mul.w	r3, r1, r3
 8006616:	4413      	add	r3, r2
 8006618:	333d      	adds	r3, #61	; 0x3d
 800661a:	2201      	movs	r2, #1
 800661c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	212c      	movs	r1, #44	; 0x2c
 8006624:	fb01 f303 	mul.w	r3, r1, r3
 8006628:	4413      	add	r3, r2
 800662a:	335c      	adds	r3, #92	; 0x5c
 800662c:	2200      	movs	r2, #0
 800662e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	b2d2      	uxtb	r2, r2
 8006638:	4611      	mov	r1, r2
 800663a:	4618      	mov	r0, r3
 800663c:	f004 fb53 	bl	800ace6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	4413      	add	r3, r2
 8006648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800664c:	461a      	mov	r2, r3
 800664e:	2340      	movs	r3, #64	; 0x40
 8006650:	6093      	str	r3, [r2, #8]
}
 8006652:	e254      	b.n	8006afe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	015a      	lsls	r2, r3, #5
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	4413      	add	r3, r2
 800665c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f003 0308 	and.w	r3, r3, #8
 8006666:	2b08      	cmp	r3, #8
 8006668:	d11a      	bne.n	80066a0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	015a      	lsls	r2, r3, #5
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	4413      	add	r3, r2
 8006672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006676:	461a      	mov	r2, r3
 8006678:	2308      	movs	r3, #8
 800667a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	212c      	movs	r1, #44	; 0x2c
 8006682:	fb01 f303 	mul.w	r3, r1, r3
 8006686:	4413      	add	r3, r2
 8006688:	3361      	adds	r3, #97	; 0x61
 800668a:	2205      	movs	r2, #5
 800668c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	b2d2      	uxtb	r2, r2
 8006696:	4611      	mov	r1, r2
 8006698:	4618      	mov	r0, r3
 800669a:	f004 fb24 	bl	800ace6 <USB_HC_Halt>
}
 800669e:	e22e      	b.n	8006afe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f003 0310 	and.w	r3, r3, #16
 80066b2:	2b10      	cmp	r3, #16
 80066b4:	d140      	bne.n	8006738 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	212c      	movs	r1, #44	; 0x2c
 80066bc:	fb01 f303 	mul.w	r3, r1, r3
 80066c0:	4413      	add	r3, r2
 80066c2:	335c      	adds	r3, #92	; 0x5c
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	212c      	movs	r1, #44	; 0x2c
 80066ce:	fb01 f303 	mul.w	r3, r1, r3
 80066d2:	4413      	add	r3, r2
 80066d4:	3361      	adds	r3, #97	; 0x61
 80066d6:	2203      	movs	r2, #3
 80066d8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	212c      	movs	r1, #44	; 0x2c
 80066e0:	fb01 f303 	mul.w	r3, r1, r3
 80066e4:	4413      	add	r3, r2
 80066e6:	333d      	adds	r3, #61	; 0x3d
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d112      	bne.n	8006714 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	212c      	movs	r1, #44	; 0x2c
 80066f4:	fb01 f303 	mul.w	r3, r1, r3
 80066f8:	4413      	add	r3, r2
 80066fa:	333c      	adds	r3, #60	; 0x3c
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d108      	bne.n	8006714 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	212c      	movs	r1, #44	; 0x2c
 8006708:	fb01 f303 	mul.w	r3, r1, r3
 800670c:	4413      	add	r3, r2
 800670e:	333d      	adds	r3, #61	; 0x3d
 8006710:	2201      	movs	r2, #1
 8006712:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	b2d2      	uxtb	r2, r2
 800671c:	4611      	mov	r1, r2
 800671e:	4618      	mov	r0, r3
 8006720:	f004 fae1 	bl	800ace6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	4413      	add	r3, r2
 800672c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006730:	461a      	mov	r2, r3
 8006732:	2310      	movs	r3, #16
 8006734:	6093      	str	r3, [r2, #8]
}
 8006736:	e1e2      	b.n	8006afe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	4413      	add	r3, r2
 8006740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800674a:	2b80      	cmp	r3, #128	; 0x80
 800674c:	d164      	bne.n	8006818 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d111      	bne.n	800677a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	212c      	movs	r1, #44	; 0x2c
 800675c:	fb01 f303 	mul.w	r3, r1, r3
 8006760:	4413      	add	r3, r2
 8006762:	3361      	adds	r3, #97	; 0x61
 8006764:	2206      	movs	r2, #6
 8006766:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	b2d2      	uxtb	r2, r2
 8006770:	4611      	mov	r1, r2
 8006772:	4618      	mov	r0, r3
 8006774:	f004 fab7 	bl	800ace6 <USB_HC_Halt>
 8006778:	e044      	b.n	8006804 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	212c      	movs	r1, #44	; 0x2c
 8006780:	fb01 f303 	mul.w	r3, r1, r3
 8006784:	4413      	add	r3, r2
 8006786:	335c      	adds	r3, #92	; 0x5c
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	6879      	ldr	r1, [r7, #4]
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	202c      	movs	r0, #44	; 0x2c
 8006792:	fb00 f303 	mul.w	r3, r0, r3
 8006796:	440b      	add	r3, r1
 8006798:	335c      	adds	r3, #92	; 0x5c
 800679a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	212c      	movs	r1, #44	; 0x2c
 80067a2:	fb01 f303 	mul.w	r3, r1, r3
 80067a6:	4413      	add	r3, r2
 80067a8:	335c      	adds	r3, #92	; 0x5c
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d920      	bls.n	80067f2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	212c      	movs	r1, #44	; 0x2c
 80067b6:	fb01 f303 	mul.w	r3, r1, r3
 80067ba:	4413      	add	r3, r2
 80067bc:	335c      	adds	r3, #92	; 0x5c
 80067be:	2200      	movs	r2, #0
 80067c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	212c      	movs	r1, #44	; 0x2c
 80067c8:	fb01 f303 	mul.w	r3, r1, r3
 80067cc:	4413      	add	r3, r2
 80067ce:	3360      	adds	r3, #96	; 0x60
 80067d0:	2204      	movs	r2, #4
 80067d2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	b2d9      	uxtb	r1, r3
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	202c      	movs	r0, #44	; 0x2c
 80067de:	fb00 f303 	mul.w	r3, r0, r3
 80067e2:	4413      	add	r3, r2
 80067e4:	3360      	adds	r3, #96	; 0x60
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	461a      	mov	r2, r3
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f00a fb5e 	bl	8010eac <HAL_HCD_HC_NotifyURBChange_Callback>
 80067f0:	e008      	b.n	8006804 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	212c      	movs	r1, #44	; 0x2c
 80067f8:	fb01 f303 	mul.w	r3, r1, r3
 80067fc:	4413      	add	r3, r2
 80067fe:	3360      	adds	r3, #96	; 0x60
 8006800:	2202      	movs	r2, #2
 8006802:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	4413      	add	r3, r2
 800680c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006810:	461a      	mov	r2, r3
 8006812:	2380      	movs	r3, #128	; 0x80
 8006814:	6093      	str	r3, [r2, #8]
}
 8006816:	e172      	b.n	8006afe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	015a      	lsls	r2, r3, #5
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	4413      	add	r3, r2
 8006820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800682a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800682e:	d11b      	bne.n	8006868 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	212c      	movs	r1, #44	; 0x2c
 8006836:	fb01 f303 	mul.w	r3, r1, r3
 800683a:	4413      	add	r3, r2
 800683c:	3361      	adds	r3, #97	; 0x61
 800683e:	2208      	movs	r2, #8
 8006840:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	b2d2      	uxtb	r2, r2
 800684a:	4611      	mov	r1, r2
 800684c:	4618      	mov	r0, r3
 800684e:	f004 fa4a 	bl	800ace6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	4413      	add	r3, r2
 800685a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800685e:	461a      	mov	r2, r3
 8006860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006864:	6093      	str	r3, [r2, #8]
}
 8006866:	e14a      	b.n	8006afe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	015a      	lsls	r2, r3, #5
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	4413      	add	r3, r2
 8006870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b02      	cmp	r3, #2
 800687c:	f040 813f 	bne.w	8006afe <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	212c      	movs	r1, #44	; 0x2c
 8006886:	fb01 f303 	mul.w	r3, r1, r3
 800688a:	4413      	add	r3, r2
 800688c:	3361      	adds	r3, #97	; 0x61
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d17d      	bne.n	8006990 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	212c      	movs	r1, #44	; 0x2c
 800689a:	fb01 f303 	mul.w	r3, r1, r3
 800689e:	4413      	add	r3, r2
 80068a0:	3360      	adds	r3, #96	; 0x60
 80068a2:	2201      	movs	r2, #1
 80068a4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	212c      	movs	r1, #44	; 0x2c
 80068ac:	fb01 f303 	mul.w	r3, r1, r3
 80068b0:	4413      	add	r3, r2
 80068b2:	333f      	adds	r3, #63	; 0x3f
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d00a      	beq.n	80068d0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	212c      	movs	r1, #44	; 0x2c
 80068c0:	fb01 f303 	mul.w	r3, r1, r3
 80068c4:	4413      	add	r3, r2
 80068c6:	333f      	adds	r3, #63	; 0x3f
 80068c8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80068ca:	2b03      	cmp	r3, #3
 80068cc:	f040 8100 	bne.w	8006ad0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d113      	bne.n	8006900 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	212c      	movs	r1, #44	; 0x2c
 80068de:	fb01 f303 	mul.w	r3, r1, r3
 80068e2:	4413      	add	r3, r2
 80068e4:	3355      	adds	r3, #85	; 0x55
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	f083 0301 	eor.w	r3, r3, #1
 80068ec:	b2d8      	uxtb	r0, r3
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	212c      	movs	r1, #44	; 0x2c
 80068f4:	fb01 f303 	mul.w	r3, r1, r3
 80068f8:	4413      	add	r3, r2
 80068fa:	3355      	adds	r3, #85	; 0x55
 80068fc:	4602      	mov	r2, r0
 80068fe:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	2b01      	cmp	r3, #1
 8006906:	f040 80e3 	bne.w	8006ad0 <HCD_HC_OUT_IRQHandler+0x69c>
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	212c      	movs	r1, #44	; 0x2c
 8006910:	fb01 f303 	mul.w	r3, r1, r3
 8006914:	4413      	add	r3, r2
 8006916:	334c      	adds	r3, #76	; 0x4c
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	f000 80d8 	beq.w	8006ad0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	212c      	movs	r1, #44	; 0x2c
 8006926:	fb01 f303 	mul.w	r3, r1, r3
 800692a:	4413      	add	r3, r2
 800692c:	334c      	adds	r3, #76	; 0x4c
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6879      	ldr	r1, [r7, #4]
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	202c      	movs	r0, #44	; 0x2c
 8006936:	fb00 f202 	mul.w	r2, r0, r2
 800693a:	440a      	add	r2, r1
 800693c:	3240      	adds	r2, #64	; 0x40
 800693e:	8812      	ldrh	r2, [r2, #0]
 8006940:	4413      	add	r3, r2
 8006942:	3b01      	subs	r3, #1
 8006944:	6879      	ldr	r1, [r7, #4]
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	202c      	movs	r0, #44	; 0x2c
 800694a:	fb00 f202 	mul.w	r2, r0, r2
 800694e:	440a      	add	r2, r1
 8006950:	3240      	adds	r2, #64	; 0x40
 8006952:	8812      	ldrh	r2, [r2, #0]
 8006954:	fbb3 f3f2 	udiv	r3, r3, r2
 8006958:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f003 0301 	and.w	r3, r3, #1
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 80b5 	beq.w	8006ad0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	212c      	movs	r1, #44	; 0x2c
 800696c:	fb01 f303 	mul.w	r3, r1, r3
 8006970:	4413      	add	r3, r2
 8006972:	3355      	adds	r3, #85	; 0x55
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	f083 0301 	eor.w	r3, r3, #1
 800697a:	b2d8      	uxtb	r0, r3
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	212c      	movs	r1, #44	; 0x2c
 8006982:	fb01 f303 	mul.w	r3, r1, r3
 8006986:	4413      	add	r3, r2
 8006988:	3355      	adds	r3, #85	; 0x55
 800698a:	4602      	mov	r2, r0
 800698c:	701a      	strb	r2, [r3, #0]
 800698e:	e09f      	b.n	8006ad0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	212c      	movs	r1, #44	; 0x2c
 8006996:	fb01 f303 	mul.w	r3, r1, r3
 800699a:	4413      	add	r3, r2
 800699c:	3361      	adds	r3, #97	; 0x61
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	2b03      	cmp	r3, #3
 80069a2:	d109      	bne.n	80069b8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	212c      	movs	r1, #44	; 0x2c
 80069aa:	fb01 f303 	mul.w	r3, r1, r3
 80069ae:	4413      	add	r3, r2
 80069b0:	3360      	adds	r3, #96	; 0x60
 80069b2:	2202      	movs	r2, #2
 80069b4:	701a      	strb	r2, [r3, #0]
 80069b6:	e08b      	b.n	8006ad0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	212c      	movs	r1, #44	; 0x2c
 80069be:	fb01 f303 	mul.w	r3, r1, r3
 80069c2:	4413      	add	r3, r2
 80069c4:	3361      	adds	r3, #97	; 0x61
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	2b04      	cmp	r3, #4
 80069ca:	d109      	bne.n	80069e0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	212c      	movs	r1, #44	; 0x2c
 80069d2:	fb01 f303 	mul.w	r3, r1, r3
 80069d6:	4413      	add	r3, r2
 80069d8:	3360      	adds	r3, #96	; 0x60
 80069da:	2202      	movs	r2, #2
 80069dc:	701a      	strb	r2, [r3, #0]
 80069de:	e077      	b.n	8006ad0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	212c      	movs	r1, #44	; 0x2c
 80069e6:	fb01 f303 	mul.w	r3, r1, r3
 80069ea:	4413      	add	r3, r2
 80069ec:	3361      	adds	r3, #97	; 0x61
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	2b05      	cmp	r3, #5
 80069f2:	d109      	bne.n	8006a08 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	212c      	movs	r1, #44	; 0x2c
 80069fa:	fb01 f303 	mul.w	r3, r1, r3
 80069fe:	4413      	add	r3, r2
 8006a00:	3360      	adds	r3, #96	; 0x60
 8006a02:	2205      	movs	r2, #5
 8006a04:	701a      	strb	r2, [r3, #0]
 8006a06:	e063      	b.n	8006ad0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	212c      	movs	r1, #44	; 0x2c
 8006a0e:	fb01 f303 	mul.w	r3, r1, r3
 8006a12:	4413      	add	r3, r2
 8006a14:	3361      	adds	r3, #97	; 0x61
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	2b06      	cmp	r3, #6
 8006a1a:	d009      	beq.n	8006a30 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	212c      	movs	r1, #44	; 0x2c
 8006a22:	fb01 f303 	mul.w	r3, r1, r3
 8006a26:	4413      	add	r3, r2
 8006a28:	3361      	adds	r3, #97	; 0x61
 8006a2a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006a2c:	2b08      	cmp	r3, #8
 8006a2e:	d14f      	bne.n	8006ad0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	212c      	movs	r1, #44	; 0x2c
 8006a36:	fb01 f303 	mul.w	r3, r1, r3
 8006a3a:	4413      	add	r3, r2
 8006a3c:	335c      	adds	r3, #92	; 0x5c
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	1c5a      	adds	r2, r3, #1
 8006a42:	6879      	ldr	r1, [r7, #4]
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	202c      	movs	r0, #44	; 0x2c
 8006a48:	fb00 f303 	mul.w	r3, r0, r3
 8006a4c:	440b      	add	r3, r1
 8006a4e:	335c      	adds	r3, #92	; 0x5c
 8006a50:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	212c      	movs	r1, #44	; 0x2c
 8006a58:	fb01 f303 	mul.w	r3, r1, r3
 8006a5c:	4413      	add	r3, r2
 8006a5e:	335c      	adds	r3, #92	; 0x5c
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d912      	bls.n	8006a8c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	212c      	movs	r1, #44	; 0x2c
 8006a6c:	fb01 f303 	mul.w	r3, r1, r3
 8006a70:	4413      	add	r3, r2
 8006a72:	335c      	adds	r3, #92	; 0x5c
 8006a74:	2200      	movs	r2, #0
 8006a76:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	212c      	movs	r1, #44	; 0x2c
 8006a7e:	fb01 f303 	mul.w	r3, r1, r3
 8006a82:	4413      	add	r3, r2
 8006a84:	3360      	adds	r3, #96	; 0x60
 8006a86:	2204      	movs	r2, #4
 8006a88:	701a      	strb	r2, [r3, #0]
 8006a8a:	e021      	b.n	8006ad0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	212c      	movs	r1, #44	; 0x2c
 8006a92:	fb01 f303 	mul.w	r3, r1, r3
 8006a96:	4413      	add	r3, r2
 8006a98:	3360      	adds	r3, #96	; 0x60
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	015a      	lsls	r2, r3, #5
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ab4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006abc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aca:	461a      	mov	r2, r3
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006adc:	461a      	mov	r2, r3
 8006ade:	2302      	movs	r3, #2
 8006ae0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	b2d9      	uxtb	r1, r3
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	202c      	movs	r0, #44	; 0x2c
 8006aec:	fb00 f303 	mul.w	r3, r0, r3
 8006af0:	4413      	add	r3, r2
 8006af2:	3360      	adds	r3, #96	; 0x60
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f00a f9d7 	bl	8010eac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006afe:	bf00      	nop
 8006b00:	3720      	adds	r7, #32
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b08a      	sub	sp, #40	; 0x28
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	f003 030f 	and.w	r3, r3, #15
 8006b26:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	0c5b      	lsrs	r3, r3, #17
 8006b2c:	f003 030f 	and.w	r3, r3, #15
 8006b30:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	091b      	lsrs	r3, r3, #4
 8006b36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b3a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d004      	beq.n	8006b4c <HCD_RXQLVL_IRQHandler+0x46>
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2b05      	cmp	r3, #5
 8006b46:	f000 80a9 	beq.w	8006c9c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006b4a:	e0aa      	b.n	8006ca2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 80a6 	beq.w	8006ca0 <HCD_RXQLVL_IRQHandler+0x19a>
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	212c      	movs	r1, #44	; 0x2c
 8006b5a:	fb01 f303 	mul.w	r3, r1, r3
 8006b5e:	4413      	add	r3, r2
 8006b60:	3344      	adds	r3, #68	; 0x44
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 809b 	beq.w	8006ca0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	212c      	movs	r1, #44	; 0x2c
 8006b70:	fb01 f303 	mul.w	r3, r1, r3
 8006b74:	4413      	add	r3, r2
 8006b76:	3350      	adds	r3, #80	; 0x50
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	441a      	add	r2, r3
 8006b7e:	6879      	ldr	r1, [r7, #4]
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	202c      	movs	r0, #44	; 0x2c
 8006b84:	fb00 f303 	mul.w	r3, r0, r3
 8006b88:	440b      	add	r3, r1
 8006b8a:	334c      	adds	r3, #76	; 0x4c
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d87a      	bhi.n	8006c88 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6818      	ldr	r0, [r3, #0]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	212c      	movs	r1, #44	; 0x2c
 8006b9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ba0:	4413      	add	r3, r2
 8006ba2:	3344      	adds	r3, #68	; 0x44
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	b292      	uxth	r2, r2
 8006baa:	4619      	mov	r1, r3
 8006bac:	f003 fbf2 	bl	800a394 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	212c      	movs	r1, #44	; 0x2c
 8006bb6:	fb01 f303 	mul.w	r3, r1, r3
 8006bba:	4413      	add	r3, r2
 8006bbc:	3344      	adds	r3, #68	; 0x44
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	441a      	add	r2, r3
 8006bc4:	6879      	ldr	r1, [r7, #4]
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	202c      	movs	r0, #44	; 0x2c
 8006bca:	fb00 f303 	mul.w	r3, r0, r3
 8006bce:	440b      	add	r3, r1
 8006bd0:	3344      	adds	r3, #68	; 0x44
 8006bd2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	212c      	movs	r1, #44	; 0x2c
 8006bda:	fb01 f303 	mul.w	r3, r1, r3
 8006bde:	4413      	add	r3, r2
 8006be0:	3350      	adds	r3, #80	; 0x50
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	441a      	add	r2, r3
 8006be8:	6879      	ldr	r1, [r7, #4]
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	202c      	movs	r0, #44	; 0x2c
 8006bee:	fb00 f303 	mul.w	r3, r0, r3
 8006bf2:	440b      	add	r3, r1
 8006bf4:	3350      	adds	r3, #80	; 0x50
 8006bf6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	0cdb      	lsrs	r3, r3, #19
 8006c08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c0c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	212c      	movs	r1, #44	; 0x2c
 8006c14:	fb01 f303 	mul.w	r3, r1, r3
 8006c18:	4413      	add	r3, r2
 8006c1a:	3340      	adds	r3, #64	; 0x40
 8006c1c:	881b      	ldrh	r3, [r3, #0]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d13c      	bne.n	8006ca0 <HCD_RXQLVL_IRQHandler+0x19a>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d039      	beq.n	8006ca0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	6a3b      	ldr	r3, [r7, #32]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c42:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c4a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c58:	461a      	mov	r2, r3
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	212c      	movs	r1, #44	; 0x2c
 8006c64:	fb01 f303 	mul.w	r3, r1, r3
 8006c68:	4413      	add	r3, r2
 8006c6a:	3354      	adds	r3, #84	; 0x54
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	f083 0301 	eor.w	r3, r3, #1
 8006c72:	b2d8      	uxtb	r0, r3
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	212c      	movs	r1, #44	; 0x2c
 8006c7a:	fb01 f303 	mul.w	r3, r1, r3
 8006c7e:	4413      	add	r3, r2
 8006c80:	3354      	adds	r3, #84	; 0x54
 8006c82:	4602      	mov	r2, r0
 8006c84:	701a      	strb	r2, [r3, #0]
      break;
 8006c86:	e00b      	b.n	8006ca0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	212c      	movs	r1, #44	; 0x2c
 8006c8e:	fb01 f303 	mul.w	r3, r1, r3
 8006c92:	4413      	add	r3, r2
 8006c94:	3360      	adds	r3, #96	; 0x60
 8006c96:	2204      	movs	r2, #4
 8006c98:	701a      	strb	r2, [r3, #0]
      break;
 8006c9a:	e001      	b.n	8006ca0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006c9c:	bf00      	nop
 8006c9e:	e000      	b.n	8006ca2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006ca0:	bf00      	nop
  }
}
 8006ca2:	bf00      	nop
 8006ca4:	3728      	adds	r7, #40	; 0x28
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b086      	sub	sp, #24
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006cd6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d10b      	bne.n	8006cfa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d102      	bne.n	8006cf2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f00a f8c1 	bl	8010e74 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	f043 0302 	orr.w	r3, r3, #2
 8006cf8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f003 0308 	and.w	r3, r3, #8
 8006d00:	2b08      	cmp	r3, #8
 8006d02:	d132      	bne.n	8006d6a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	f043 0308 	orr.w	r3, r3, #8
 8006d0a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f003 0304 	and.w	r3, r3, #4
 8006d12:	2b04      	cmp	r3, #4
 8006d14:	d126      	bne.n	8006d64 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d113      	bne.n	8006d46 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006d24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d28:	d106      	bne.n	8006d38 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2102      	movs	r1, #2
 8006d30:	4618      	mov	r0, r3
 8006d32:	f003 fc9d 	bl	800a670 <USB_InitFSLSPClkSel>
 8006d36:	e011      	b.n	8006d5c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2101      	movs	r1, #1
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f003 fc96 	bl	800a670 <USB_InitFSLSPClkSel>
 8006d44:	e00a      	b.n	8006d5c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d106      	bne.n	8006d5c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d54:	461a      	mov	r2, r3
 8006d56:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006d5a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f00a f8b3 	bl	8010ec8 <HAL_HCD_PortEnabled_Callback>
 8006d62:	e002      	b.n	8006d6a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f00a f8bd 	bl	8010ee4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f003 0320 	and.w	r3, r3, #32
 8006d70:	2b20      	cmp	r3, #32
 8006d72:	d103      	bne.n	8006d7c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	f043 0320 	orr.w	r3, r3, #32
 8006d7a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006d82:	461a      	mov	r2, r3
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	6013      	str	r3, [r2, #0]
}
 8006d88:	bf00      	nop
 8006d8a:	3718      	adds	r7, #24
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e267      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d075      	beq.n	8006e9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006dae:	4b88      	ldr	r3, [pc, #544]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f003 030c 	and.w	r3, r3, #12
 8006db6:	2b04      	cmp	r3, #4
 8006db8:	d00c      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006dba:	4b85      	ldr	r3, [pc, #532]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006dc2:	2b08      	cmp	r3, #8
 8006dc4:	d112      	bne.n	8006dec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006dc6:	4b82      	ldr	r3, [pc, #520]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dd2:	d10b      	bne.n	8006dec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dd4:	4b7e      	ldr	r3, [pc, #504]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d05b      	beq.n	8006e98 <HAL_RCC_OscConfig+0x108>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d157      	bne.n	8006e98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e242      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006df4:	d106      	bne.n	8006e04 <HAL_RCC_OscConfig+0x74>
 8006df6:	4b76      	ldr	r3, [pc, #472]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a75      	ldr	r2, [pc, #468]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e00:	6013      	str	r3, [r2, #0]
 8006e02:	e01d      	b.n	8006e40 <HAL_RCC_OscConfig+0xb0>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e0c:	d10c      	bne.n	8006e28 <HAL_RCC_OscConfig+0x98>
 8006e0e:	4b70      	ldr	r3, [pc, #448]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a6f      	ldr	r2, [pc, #444]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e18:	6013      	str	r3, [r2, #0]
 8006e1a:	4b6d      	ldr	r3, [pc, #436]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a6c      	ldr	r2, [pc, #432]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e24:	6013      	str	r3, [r2, #0]
 8006e26:	e00b      	b.n	8006e40 <HAL_RCC_OscConfig+0xb0>
 8006e28:	4b69      	ldr	r3, [pc, #420]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a68      	ldr	r2, [pc, #416]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e32:	6013      	str	r3, [r2, #0]
 8006e34:	4b66      	ldr	r3, [pc, #408]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a65      	ldr	r2, [pc, #404]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d013      	beq.n	8006e70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e48:	f7fd fc84 	bl	8004754 <HAL_GetTick>
 8006e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e4e:	e008      	b.n	8006e62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e50:	f7fd fc80 	bl	8004754 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	2b64      	cmp	r3, #100	; 0x64
 8006e5c:	d901      	bls.n	8006e62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e207      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e62:	4b5b      	ldr	r3, [pc, #364]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d0f0      	beq.n	8006e50 <HAL_RCC_OscConfig+0xc0>
 8006e6e:	e014      	b.n	8006e9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e70:	f7fd fc70 	bl	8004754 <HAL_GetTick>
 8006e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e76:	e008      	b.n	8006e8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e78:	f7fd fc6c 	bl	8004754 <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	2b64      	cmp	r3, #100	; 0x64
 8006e84:	d901      	bls.n	8006e8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e1f3      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e8a:	4b51      	ldr	r3, [pc, #324]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1f0      	bne.n	8006e78 <HAL_RCC_OscConfig+0xe8>
 8006e96:	e000      	b.n	8006e9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d063      	beq.n	8006f6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ea6:	4b4a      	ldr	r3, [pc, #296]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f003 030c 	and.w	r3, r3, #12
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00b      	beq.n	8006eca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006eb2:	4b47      	ldr	r3, [pc, #284]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006eba:	2b08      	cmp	r3, #8
 8006ebc:	d11c      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ebe:	4b44      	ldr	r3, [pc, #272]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d116      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006eca:	4b41      	ldr	r3, [pc, #260]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d005      	beq.n	8006ee2 <HAL_RCC_OscConfig+0x152>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d001      	beq.n	8006ee2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e1c7      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ee2:	4b3b      	ldr	r3, [pc, #236]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	4937      	ldr	r1, [pc, #220]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ef6:	e03a      	b.n	8006f6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d020      	beq.n	8006f42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f00:	4b34      	ldr	r3, [pc, #208]	; (8006fd4 <HAL_RCC_OscConfig+0x244>)
 8006f02:	2201      	movs	r2, #1
 8006f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f06:	f7fd fc25 	bl	8004754 <HAL_GetTick>
 8006f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f0c:	e008      	b.n	8006f20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f0e:	f7fd fc21 	bl	8004754 <HAL_GetTick>
 8006f12:	4602      	mov	r2, r0
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d901      	bls.n	8006f20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e1a8      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f20:	4b2b      	ldr	r3, [pc, #172]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0302 	and.w	r3, r3, #2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d0f0      	beq.n	8006f0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f2c:	4b28      	ldr	r3, [pc, #160]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	00db      	lsls	r3, r3, #3
 8006f3a:	4925      	ldr	r1, [pc, #148]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	600b      	str	r3, [r1, #0]
 8006f40:	e015      	b.n	8006f6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f42:	4b24      	ldr	r3, [pc, #144]	; (8006fd4 <HAL_RCC_OscConfig+0x244>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f48:	f7fd fc04 	bl	8004754 <HAL_GetTick>
 8006f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f4e:	e008      	b.n	8006f62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f50:	f7fd fc00 	bl	8004754 <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d901      	bls.n	8006f62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e187      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f62:	4b1b      	ldr	r3, [pc, #108]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0302 	and.w	r3, r3, #2
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1f0      	bne.n	8006f50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0308 	and.w	r3, r3, #8
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d036      	beq.n	8006fe8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d016      	beq.n	8006fb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f82:	4b15      	ldr	r3, [pc, #84]	; (8006fd8 <HAL_RCC_OscConfig+0x248>)
 8006f84:	2201      	movs	r2, #1
 8006f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f88:	f7fd fbe4 	bl	8004754 <HAL_GetTick>
 8006f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f8e:	e008      	b.n	8006fa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f90:	f7fd fbe0 	bl	8004754 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d901      	bls.n	8006fa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e167      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fa2:	4b0b      	ldr	r3, [pc, #44]	; (8006fd0 <HAL_RCC_OscConfig+0x240>)
 8006fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fa6:	f003 0302 	and.w	r3, r3, #2
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d0f0      	beq.n	8006f90 <HAL_RCC_OscConfig+0x200>
 8006fae:	e01b      	b.n	8006fe8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fb0:	4b09      	ldr	r3, [pc, #36]	; (8006fd8 <HAL_RCC_OscConfig+0x248>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fb6:	f7fd fbcd 	bl	8004754 <HAL_GetTick>
 8006fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fbc:	e00e      	b.n	8006fdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fbe:	f7fd fbc9 	bl	8004754 <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d907      	bls.n	8006fdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e150      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
 8006fd0:	40023800 	.word	0x40023800
 8006fd4:	42470000 	.word	0x42470000
 8006fd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fdc:	4b88      	ldr	r3, [pc, #544]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 8006fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fe0:	f003 0302 	and.w	r3, r3, #2
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1ea      	bne.n	8006fbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0304 	and.w	r3, r3, #4
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 8097 	beq.w	8007124 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ffa:	4b81      	ldr	r3, [pc, #516]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10f      	bne.n	8007026 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007006:	2300      	movs	r3, #0
 8007008:	60bb      	str	r3, [r7, #8]
 800700a:	4b7d      	ldr	r3, [pc, #500]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 800700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700e:	4a7c      	ldr	r2, [pc, #496]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 8007010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007014:	6413      	str	r3, [r2, #64]	; 0x40
 8007016:	4b7a      	ldr	r3, [pc, #488]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 8007018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800701e:	60bb      	str	r3, [r7, #8]
 8007020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007022:	2301      	movs	r3, #1
 8007024:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007026:	4b77      	ldr	r3, [pc, #476]	; (8007204 <HAL_RCC_OscConfig+0x474>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800702e:	2b00      	cmp	r3, #0
 8007030:	d118      	bne.n	8007064 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007032:	4b74      	ldr	r3, [pc, #464]	; (8007204 <HAL_RCC_OscConfig+0x474>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a73      	ldr	r2, [pc, #460]	; (8007204 <HAL_RCC_OscConfig+0x474>)
 8007038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800703c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800703e:	f7fd fb89 	bl	8004754 <HAL_GetTick>
 8007042:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007044:	e008      	b.n	8007058 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007046:	f7fd fb85 	bl	8004754 <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	2b02      	cmp	r3, #2
 8007052:	d901      	bls.n	8007058 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e10c      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007058:	4b6a      	ldr	r3, [pc, #424]	; (8007204 <HAL_RCC_OscConfig+0x474>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007060:	2b00      	cmp	r3, #0
 8007062:	d0f0      	beq.n	8007046 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d106      	bne.n	800707a <HAL_RCC_OscConfig+0x2ea>
 800706c:	4b64      	ldr	r3, [pc, #400]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 800706e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007070:	4a63      	ldr	r2, [pc, #396]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 8007072:	f043 0301 	orr.w	r3, r3, #1
 8007076:	6713      	str	r3, [r2, #112]	; 0x70
 8007078:	e01c      	b.n	80070b4 <HAL_RCC_OscConfig+0x324>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	2b05      	cmp	r3, #5
 8007080:	d10c      	bne.n	800709c <HAL_RCC_OscConfig+0x30c>
 8007082:	4b5f      	ldr	r3, [pc, #380]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 8007084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007086:	4a5e      	ldr	r2, [pc, #376]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 8007088:	f043 0304 	orr.w	r3, r3, #4
 800708c:	6713      	str	r3, [r2, #112]	; 0x70
 800708e:	4b5c      	ldr	r3, [pc, #368]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 8007090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007092:	4a5b      	ldr	r2, [pc, #364]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 8007094:	f043 0301 	orr.w	r3, r3, #1
 8007098:	6713      	str	r3, [r2, #112]	; 0x70
 800709a:	e00b      	b.n	80070b4 <HAL_RCC_OscConfig+0x324>
 800709c:	4b58      	ldr	r3, [pc, #352]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 800709e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a0:	4a57      	ldr	r2, [pc, #348]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 80070a2:	f023 0301 	bic.w	r3, r3, #1
 80070a6:	6713      	str	r3, [r2, #112]	; 0x70
 80070a8:	4b55      	ldr	r3, [pc, #340]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 80070aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ac:	4a54      	ldr	r2, [pc, #336]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 80070ae:	f023 0304 	bic.w	r3, r3, #4
 80070b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d015      	beq.n	80070e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070bc:	f7fd fb4a 	bl	8004754 <HAL_GetTick>
 80070c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070c2:	e00a      	b.n	80070da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070c4:	f7fd fb46 	bl	8004754 <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d901      	bls.n	80070da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e0cb      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070da:	4b49      	ldr	r3, [pc, #292]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 80070dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070de:	f003 0302 	and.w	r3, r3, #2
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d0ee      	beq.n	80070c4 <HAL_RCC_OscConfig+0x334>
 80070e6:	e014      	b.n	8007112 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070e8:	f7fd fb34 	bl	8004754 <HAL_GetTick>
 80070ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070ee:	e00a      	b.n	8007106 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070f0:	f7fd fb30 	bl	8004754 <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80070fe:	4293      	cmp	r3, r2
 8007100:	d901      	bls.n	8007106 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e0b5      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007106:	4b3e      	ldr	r3, [pc, #248]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 8007108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800710a:	f003 0302 	and.w	r3, r3, #2
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1ee      	bne.n	80070f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007112:	7dfb      	ldrb	r3, [r7, #23]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d105      	bne.n	8007124 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007118:	4b39      	ldr	r3, [pc, #228]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 800711a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711c:	4a38      	ldr	r2, [pc, #224]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 800711e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007122:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	2b00      	cmp	r3, #0
 800712a:	f000 80a1 	beq.w	8007270 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800712e:	4b34      	ldr	r3, [pc, #208]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f003 030c 	and.w	r3, r3, #12
 8007136:	2b08      	cmp	r3, #8
 8007138:	d05c      	beq.n	80071f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	2b02      	cmp	r3, #2
 8007140:	d141      	bne.n	80071c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007142:	4b31      	ldr	r3, [pc, #196]	; (8007208 <HAL_RCC_OscConfig+0x478>)
 8007144:	2200      	movs	r2, #0
 8007146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007148:	f7fd fb04 	bl	8004754 <HAL_GetTick>
 800714c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800714e:	e008      	b.n	8007162 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007150:	f7fd fb00 	bl	8004754 <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b02      	cmp	r3, #2
 800715c:	d901      	bls.n	8007162 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e087      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007162:	4b27      	ldr	r3, [pc, #156]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1f0      	bne.n	8007150 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	69da      	ldr	r2, [r3, #28]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	431a      	orrs	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717c:	019b      	lsls	r3, r3, #6
 800717e:	431a      	orrs	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007184:	085b      	lsrs	r3, r3, #1
 8007186:	3b01      	subs	r3, #1
 8007188:	041b      	lsls	r3, r3, #16
 800718a:	431a      	orrs	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007190:	061b      	lsls	r3, r3, #24
 8007192:	491b      	ldr	r1, [pc, #108]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 8007194:	4313      	orrs	r3, r2
 8007196:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007198:	4b1b      	ldr	r3, [pc, #108]	; (8007208 <HAL_RCC_OscConfig+0x478>)
 800719a:	2201      	movs	r2, #1
 800719c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800719e:	f7fd fad9 	bl	8004754 <HAL_GetTick>
 80071a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071a4:	e008      	b.n	80071b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071a6:	f7fd fad5 	bl	8004754 <HAL_GetTick>
 80071aa:	4602      	mov	r2, r0
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d901      	bls.n	80071b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e05c      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071b8:	4b11      	ldr	r3, [pc, #68]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d0f0      	beq.n	80071a6 <HAL_RCC_OscConfig+0x416>
 80071c4:	e054      	b.n	8007270 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071c6:	4b10      	ldr	r3, [pc, #64]	; (8007208 <HAL_RCC_OscConfig+0x478>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071cc:	f7fd fac2 	bl	8004754 <HAL_GetTick>
 80071d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071d2:	e008      	b.n	80071e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071d4:	f7fd fabe 	bl	8004754 <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d901      	bls.n	80071e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e045      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071e6:	4b06      	ldr	r3, [pc, #24]	; (8007200 <HAL_RCC_OscConfig+0x470>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1f0      	bne.n	80071d4 <HAL_RCC_OscConfig+0x444>
 80071f2:	e03d      	b.n	8007270 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d107      	bne.n	800720c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e038      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
 8007200:	40023800 	.word	0x40023800
 8007204:	40007000 	.word	0x40007000
 8007208:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800720c:	4b1b      	ldr	r3, [pc, #108]	; (800727c <HAL_RCC_OscConfig+0x4ec>)
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d028      	beq.n	800726c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007224:	429a      	cmp	r2, r3
 8007226:	d121      	bne.n	800726c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007232:	429a      	cmp	r2, r3
 8007234:	d11a      	bne.n	800726c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800723c:	4013      	ands	r3, r2
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007242:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007244:	4293      	cmp	r3, r2
 8007246:	d111      	bne.n	800726c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007252:	085b      	lsrs	r3, r3, #1
 8007254:	3b01      	subs	r3, #1
 8007256:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007258:	429a      	cmp	r2, r3
 800725a:	d107      	bne.n	800726c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007266:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007268:	429a      	cmp	r2, r3
 800726a:	d001      	beq.n	8007270 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e000      	b.n	8007272 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3718      	adds	r7, #24
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	40023800 	.word	0x40023800

08007280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d101      	bne.n	8007294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e0cc      	b.n	800742e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007294:	4b68      	ldr	r3, [pc, #416]	; (8007438 <HAL_RCC_ClockConfig+0x1b8>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0307 	and.w	r3, r3, #7
 800729c:	683a      	ldr	r2, [r7, #0]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d90c      	bls.n	80072bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072a2:	4b65      	ldr	r3, [pc, #404]	; (8007438 <HAL_RCC_ClockConfig+0x1b8>)
 80072a4:	683a      	ldr	r2, [r7, #0]
 80072a6:	b2d2      	uxtb	r2, r2
 80072a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072aa:	4b63      	ldr	r3, [pc, #396]	; (8007438 <HAL_RCC_ClockConfig+0x1b8>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0307 	and.w	r3, r3, #7
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d001      	beq.n	80072bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e0b8      	b.n	800742e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0302 	and.w	r3, r3, #2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d020      	beq.n	800730a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0304 	and.w	r3, r3, #4
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d005      	beq.n	80072e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072d4:	4b59      	ldr	r3, [pc, #356]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	4a58      	ldr	r2, [pc, #352]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 80072da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80072de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0308 	and.w	r3, r3, #8
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d005      	beq.n	80072f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072ec:	4b53      	ldr	r3, [pc, #332]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	4a52      	ldr	r2, [pc, #328]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 80072f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80072f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072f8:	4b50      	ldr	r3, [pc, #320]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	494d      	ldr	r1, [pc, #308]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 8007306:	4313      	orrs	r3, r2
 8007308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	2b00      	cmp	r3, #0
 8007314:	d044      	beq.n	80073a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d107      	bne.n	800732e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800731e:	4b47      	ldr	r3, [pc, #284]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d119      	bne.n	800735e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e07f      	b.n	800742e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	2b02      	cmp	r3, #2
 8007334:	d003      	beq.n	800733e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800733a:	2b03      	cmp	r3, #3
 800733c:	d107      	bne.n	800734e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800733e:	4b3f      	ldr	r3, [pc, #252]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d109      	bne.n	800735e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e06f      	b.n	800742e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800734e:	4b3b      	ldr	r3, [pc, #236]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0302 	and.w	r3, r3, #2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e067      	b.n	800742e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800735e:	4b37      	ldr	r3, [pc, #220]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f023 0203 	bic.w	r2, r3, #3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	4934      	ldr	r1, [pc, #208]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 800736c:	4313      	orrs	r3, r2
 800736e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007370:	f7fd f9f0 	bl	8004754 <HAL_GetTick>
 8007374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007376:	e00a      	b.n	800738e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007378:	f7fd f9ec 	bl	8004754 <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	f241 3288 	movw	r2, #5000	; 0x1388
 8007386:	4293      	cmp	r3, r2
 8007388:	d901      	bls.n	800738e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e04f      	b.n	800742e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800738e:	4b2b      	ldr	r3, [pc, #172]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f003 020c 	and.w	r2, r3, #12
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	429a      	cmp	r2, r3
 800739e:	d1eb      	bne.n	8007378 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80073a0:	4b25      	ldr	r3, [pc, #148]	; (8007438 <HAL_RCC_ClockConfig+0x1b8>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0307 	and.w	r3, r3, #7
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d20c      	bcs.n	80073c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073ae:	4b22      	ldr	r3, [pc, #136]	; (8007438 <HAL_RCC_ClockConfig+0x1b8>)
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	b2d2      	uxtb	r2, r2
 80073b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073b6:	4b20      	ldr	r3, [pc, #128]	; (8007438 <HAL_RCC_ClockConfig+0x1b8>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0307 	and.w	r3, r3, #7
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d001      	beq.n	80073c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e032      	b.n	800742e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0304 	and.w	r3, r3, #4
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d008      	beq.n	80073e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073d4:	4b19      	ldr	r3, [pc, #100]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	4916      	ldr	r1, [pc, #88]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 80073e2:	4313      	orrs	r3, r2
 80073e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0308 	and.w	r3, r3, #8
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d009      	beq.n	8007406 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073f2:	4b12      	ldr	r3, [pc, #72]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	490e      	ldr	r1, [pc, #56]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 8007402:	4313      	orrs	r3, r2
 8007404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007406:	f000 f821 	bl	800744c <HAL_RCC_GetSysClockFreq>
 800740a:	4602      	mov	r2, r0
 800740c:	4b0b      	ldr	r3, [pc, #44]	; (800743c <HAL_RCC_ClockConfig+0x1bc>)
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	091b      	lsrs	r3, r3, #4
 8007412:	f003 030f 	and.w	r3, r3, #15
 8007416:	490a      	ldr	r1, [pc, #40]	; (8007440 <HAL_RCC_ClockConfig+0x1c0>)
 8007418:	5ccb      	ldrb	r3, [r1, r3]
 800741a:	fa22 f303 	lsr.w	r3, r2, r3
 800741e:	4a09      	ldr	r2, [pc, #36]	; (8007444 <HAL_RCC_ClockConfig+0x1c4>)
 8007420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007422:	4b09      	ldr	r3, [pc, #36]	; (8007448 <HAL_RCC_ClockConfig+0x1c8>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4618      	mov	r0, r3
 8007428:	f7fd f950 	bl	80046cc <HAL_InitTick>

  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	40023c00 	.word	0x40023c00
 800743c:	40023800 	.word	0x40023800
 8007440:	08011dd0 	.word	0x08011dd0
 8007444:	20000004 	.word	0x20000004
 8007448:	20000024 	.word	0x20000024

0800744c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800744c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007450:	b094      	sub	sp, #80	; 0x50
 8007452:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007454:	2300      	movs	r3, #0
 8007456:	647b      	str	r3, [r7, #68]	; 0x44
 8007458:	2300      	movs	r3, #0
 800745a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800745c:	2300      	movs	r3, #0
 800745e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007460:	2300      	movs	r3, #0
 8007462:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007464:	4b79      	ldr	r3, [pc, #484]	; (800764c <HAL_RCC_GetSysClockFreq+0x200>)
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f003 030c 	and.w	r3, r3, #12
 800746c:	2b08      	cmp	r3, #8
 800746e:	d00d      	beq.n	800748c <HAL_RCC_GetSysClockFreq+0x40>
 8007470:	2b08      	cmp	r3, #8
 8007472:	f200 80e1 	bhi.w	8007638 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007476:	2b00      	cmp	r3, #0
 8007478:	d002      	beq.n	8007480 <HAL_RCC_GetSysClockFreq+0x34>
 800747a:	2b04      	cmp	r3, #4
 800747c:	d003      	beq.n	8007486 <HAL_RCC_GetSysClockFreq+0x3a>
 800747e:	e0db      	b.n	8007638 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007480:	4b73      	ldr	r3, [pc, #460]	; (8007650 <HAL_RCC_GetSysClockFreq+0x204>)
 8007482:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007484:	e0db      	b.n	800763e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007486:	4b73      	ldr	r3, [pc, #460]	; (8007654 <HAL_RCC_GetSysClockFreq+0x208>)
 8007488:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800748a:	e0d8      	b.n	800763e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800748c:	4b6f      	ldr	r3, [pc, #444]	; (800764c <HAL_RCC_GetSysClockFreq+0x200>)
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007494:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007496:	4b6d      	ldr	r3, [pc, #436]	; (800764c <HAL_RCC_GetSysClockFreq+0x200>)
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d063      	beq.n	800756a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074a2:	4b6a      	ldr	r3, [pc, #424]	; (800764c <HAL_RCC_GetSysClockFreq+0x200>)
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	099b      	lsrs	r3, r3, #6
 80074a8:	2200      	movs	r2, #0
 80074aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80074ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80074ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b4:	633b      	str	r3, [r7, #48]	; 0x30
 80074b6:	2300      	movs	r3, #0
 80074b8:	637b      	str	r3, [r7, #52]	; 0x34
 80074ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80074be:	4622      	mov	r2, r4
 80074c0:	462b      	mov	r3, r5
 80074c2:	f04f 0000 	mov.w	r0, #0
 80074c6:	f04f 0100 	mov.w	r1, #0
 80074ca:	0159      	lsls	r1, r3, #5
 80074cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074d0:	0150      	lsls	r0, r2, #5
 80074d2:	4602      	mov	r2, r0
 80074d4:	460b      	mov	r3, r1
 80074d6:	4621      	mov	r1, r4
 80074d8:	1a51      	subs	r1, r2, r1
 80074da:	6139      	str	r1, [r7, #16]
 80074dc:	4629      	mov	r1, r5
 80074de:	eb63 0301 	sbc.w	r3, r3, r1
 80074e2:	617b      	str	r3, [r7, #20]
 80074e4:	f04f 0200 	mov.w	r2, #0
 80074e8:	f04f 0300 	mov.w	r3, #0
 80074ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074f0:	4659      	mov	r1, fp
 80074f2:	018b      	lsls	r3, r1, #6
 80074f4:	4651      	mov	r1, sl
 80074f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80074fa:	4651      	mov	r1, sl
 80074fc:	018a      	lsls	r2, r1, #6
 80074fe:	4651      	mov	r1, sl
 8007500:	ebb2 0801 	subs.w	r8, r2, r1
 8007504:	4659      	mov	r1, fp
 8007506:	eb63 0901 	sbc.w	r9, r3, r1
 800750a:	f04f 0200 	mov.w	r2, #0
 800750e:	f04f 0300 	mov.w	r3, #0
 8007512:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007516:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800751a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800751e:	4690      	mov	r8, r2
 8007520:	4699      	mov	r9, r3
 8007522:	4623      	mov	r3, r4
 8007524:	eb18 0303 	adds.w	r3, r8, r3
 8007528:	60bb      	str	r3, [r7, #8]
 800752a:	462b      	mov	r3, r5
 800752c:	eb49 0303 	adc.w	r3, r9, r3
 8007530:	60fb      	str	r3, [r7, #12]
 8007532:	f04f 0200 	mov.w	r2, #0
 8007536:	f04f 0300 	mov.w	r3, #0
 800753a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800753e:	4629      	mov	r1, r5
 8007540:	024b      	lsls	r3, r1, #9
 8007542:	4621      	mov	r1, r4
 8007544:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007548:	4621      	mov	r1, r4
 800754a:	024a      	lsls	r2, r1, #9
 800754c:	4610      	mov	r0, r2
 800754e:	4619      	mov	r1, r3
 8007550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007552:	2200      	movs	r2, #0
 8007554:	62bb      	str	r3, [r7, #40]	; 0x28
 8007556:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007558:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800755c:	f7f9 f996 	bl	800088c <__aeabi_uldivmod>
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	4613      	mov	r3, r2
 8007566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007568:	e058      	b.n	800761c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800756a:	4b38      	ldr	r3, [pc, #224]	; (800764c <HAL_RCC_GetSysClockFreq+0x200>)
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	099b      	lsrs	r3, r3, #6
 8007570:	2200      	movs	r2, #0
 8007572:	4618      	mov	r0, r3
 8007574:	4611      	mov	r1, r2
 8007576:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800757a:	623b      	str	r3, [r7, #32]
 800757c:	2300      	movs	r3, #0
 800757e:	627b      	str	r3, [r7, #36]	; 0x24
 8007580:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007584:	4642      	mov	r2, r8
 8007586:	464b      	mov	r3, r9
 8007588:	f04f 0000 	mov.w	r0, #0
 800758c:	f04f 0100 	mov.w	r1, #0
 8007590:	0159      	lsls	r1, r3, #5
 8007592:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007596:	0150      	lsls	r0, r2, #5
 8007598:	4602      	mov	r2, r0
 800759a:	460b      	mov	r3, r1
 800759c:	4641      	mov	r1, r8
 800759e:	ebb2 0a01 	subs.w	sl, r2, r1
 80075a2:	4649      	mov	r1, r9
 80075a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80075a8:	f04f 0200 	mov.w	r2, #0
 80075ac:	f04f 0300 	mov.w	r3, #0
 80075b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80075b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80075b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80075bc:	ebb2 040a 	subs.w	r4, r2, sl
 80075c0:	eb63 050b 	sbc.w	r5, r3, fp
 80075c4:	f04f 0200 	mov.w	r2, #0
 80075c8:	f04f 0300 	mov.w	r3, #0
 80075cc:	00eb      	lsls	r3, r5, #3
 80075ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075d2:	00e2      	lsls	r2, r4, #3
 80075d4:	4614      	mov	r4, r2
 80075d6:	461d      	mov	r5, r3
 80075d8:	4643      	mov	r3, r8
 80075da:	18e3      	adds	r3, r4, r3
 80075dc:	603b      	str	r3, [r7, #0]
 80075de:	464b      	mov	r3, r9
 80075e0:	eb45 0303 	adc.w	r3, r5, r3
 80075e4:	607b      	str	r3, [r7, #4]
 80075e6:	f04f 0200 	mov.w	r2, #0
 80075ea:	f04f 0300 	mov.w	r3, #0
 80075ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80075f2:	4629      	mov	r1, r5
 80075f4:	028b      	lsls	r3, r1, #10
 80075f6:	4621      	mov	r1, r4
 80075f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80075fc:	4621      	mov	r1, r4
 80075fe:	028a      	lsls	r2, r1, #10
 8007600:	4610      	mov	r0, r2
 8007602:	4619      	mov	r1, r3
 8007604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007606:	2200      	movs	r2, #0
 8007608:	61bb      	str	r3, [r7, #24]
 800760a:	61fa      	str	r2, [r7, #28]
 800760c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007610:	f7f9 f93c 	bl	800088c <__aeabi_uldivmod>
 8007614:	4602      	mov	r2, r0
 8007616:	460b      	mov	r3, r1
 8007618:	4613      	mov	r3, r2
 800761a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800761c:	4b0b      	ldr	r3, [pc, #44]	; (800764c <HAL_RCC_GetSysClockFreq+0x200>)
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	0c1b      	lsrs	r3, r3, #16
 8007622:	f003 0303 	and.w	r3, r3, #3
 8007626:	3301      	adds	r3, #1
 8007628:	005b      	lsls	r3, r3, #1
 800762a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800762c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800762e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007630:	fbb2 f3f3 	udiv	r3, r2, r3
 8007634:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007636:	e002      	b.n	800763e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007638:	4b05      	ldr	r3, [pc, #20]	; (8007650 <HAL_RCC_GetSysClockFreq+0x204>)
 800763a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800763c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800763e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007640:	4618      	mov	r0, r3
 8007642:	3750      	adds	r7, #80	; 0x50
 8007644:	46bd      	mov	sp, r7
 8007646:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800764a:	bf00      	nop
 800764c:	40023800 	.word	0x40023800
 8007650:	00f42400 	.word	0x00f42400
 8007654:	007a1200 	.word	0x007a1200

08007658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007658:	b480      	push	{r7}
 800765a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800765c:	4b03      	ldr	r3, [pc, #12]	; (800766c <HAL_RCC_GetHCLKFreq+0x14>)
 800765e:	681b      	ldr	r3, [r3, #0]
}
 8007660:	4618      	mov	r0, r3
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	20000004 	.word	0x20000004

08007670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007674:	f7ff fff0 	bl	8007658 <HAL_RCC_GetHCLKFreq>
 8007678:	4602      	mov	r2, r0
 800767a:	4b05      	ldr	r3, [pc, #20]	; (8007690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	0a9b      	lsrs	r3, r3, #10
 8007680:	f003 0307 	and.w	r3, r3, #7
 8007684:	4903      	ldr	r1, [pc, #12]	; (8007694 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007686:	5ccb      	ldrb	r3, [r1, r3]
 8007688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800768c:	4618      	mov	r0, r3
 800768e:	bd80      	pop	{r7, pc}
 8007690:	40023800 	.word	0x40023800
 8007694:	08011de0 	.word	0x08011de0

08007698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800769c:	f7ff ffdc 	bl	8007658 <HAL_RCC_GetHCLKFreq>
 80076a0:	4602      	mov	r2, r0
 80076a2:	4b05      	ldr	r3, [pc, #20]	; (80076b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	0b5b      	lsrs	r3, r3, #13
 80076a8:	f003 0307 	and.w	r3, r3, #7
 80076ac:	4903      	ldr	r1, [pc, #12]	; (80076bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80076ae:	5ccb      	ldrb	r3, [r1, r3]
 80076b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	40023800 	.word	0x40023800
 80076bc:	08011de0 	.word	0x08011de0

080076c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d101      	bne.n	80076d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e07b      	b.n	80077ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d108      	bne.n	80076ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076e2:	d009      	beq.n	80076f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	61da      	str	r2, [r3, #28]
 80076ea:	e005      	b.n	80076f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d106      	bne.n	8007718 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7fb fea8 	bl	8003468 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2202      	movs	r2, #2
 800771c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800772e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007740:	431a      	orrs	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800774a:	431a      	orrs	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	f003 0302 	and.w	r3, r3, #2
 8007754:	431a      	orrs	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	431a      	orrs	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007768:	431a      	orrs	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007772:	431a      	orrs	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a1b      	ldr	r3, [r3, #32]
 8007778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800777c:	ea42 0103 	orr.w	r1, r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007784:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	430a      	orrs	r2, r1
 800778e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	0c1b      	lsrs	r3, r3, #16
 8007796:	f003 0104 	and.w	r1, r3, #4
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779e:	f003 0210 	and.w	r2, r3, #16
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	430a      	orrs	r2, r1
 80077a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	69da      	ldr	r2, [r3, #28]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b08c      	sub	sp, #48	; 0x30
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	60f8      	str	r0, [r7, #12]
 80077da:	60b9      	str	r1, [r7, #8]
 80077dc:	607a      	str	r2, [r7, #4]
 80077de:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80077e0:	2301      	movs	r3, #1
 80077e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80077e4:	2300      	movs	r3, #0
 80077e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d101      	bne.n	80077f8 <HAL_SPI_TransmitReceive+0x26>
 80077f4:	2302      	movs	r3, #2
 80077f6:	e18a      	b.n	8007b0e <HAL_SPI_TransmitReceive+0x33c>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007800:	f7fc ffa8 	bl	8004754 <HAL_GetTick>
 8007804:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800780c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007816:	887b      	ldrh	r3, [r7, #2]
 8007818:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800781a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800781e:	2b01      	cmp	r3, #1
 8007820:	d00f      	beq.n	8007842 <HAL_SPI_TransmitReceive+0x70>
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007828:	d107      	bne.n	800783a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d103      	bne.n	800783a <HAL_SPI_TransmitReceive+0x68>
 8007832:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007836:	2b04      	cmp	r3, #4
 8007838:	d003      	beq.n	8007842 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800783a:	2302      	movs	r3, #2
 800783c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007840:	e15b      	b.n	8007afa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d005      	beq.n	8007854 <HAL_SPI_TransmitReceive+0x82>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d002      	beq.n	8007854 <HAL_SPI_TransmitReceive+0x82>
 800784e:	887b      	ldrh	r3, [r7, #2]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d103      	bne.n	800785c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800785a:	e14e      	b.n	8007afa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b04      	cmp	r3, #4
 8007866:	d003      	beq.n	8007870 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2205      	movs	r2, #5
 800786c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	887a      	ldrh	r2, [r7, #2]
 8007880:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	887a      	ldrh	r2, [r7, #2]
 8007886:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	887a      	ldrh	r2, [r7, #2]
 8007892:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	887a      	ldrh	r2, [r7, #2]
 8007898:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b0:	2b40      	cmp	r3, #64	; 0x40
 80078b2:	d007      	beq.n	80078c4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078cc:	d178      	bne.n	80079c0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d002      	beq.n	80078dc <HAL_SPI_TransmitReceive+0x10a>
 80078d6:	8b7b      	ldrh	r3, [r7, #26]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d166      	bne.n	80079aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e0:	881a      	ldrh	r2, [r3, #0]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ec:	1c9a      	adds	r2, r3, #2
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	3b01      	subs	r3, #1
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007900:	e053      	b.n	80079aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	f003 0302 	and.w	r3, r3, #2
 800790c:	2b02      	cmp	r3, #2
 800790e:	d11b      	bne.n	8007948 <HAL_SPI_TransmitReceive+0x176>
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007914:	b29b      	uxth	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d016      	beq.n	8007948 <HAL_SPI_TransmitReceive+0x176>
 800791a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791c:	2b01      	cmp	r3, #1
 800791e:	d113      	bne.n	8007948 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007924:	881a      	ldrh	r2, [r3, #0]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007930:	1c9a      	adds	r2, r3, #2
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800793a:	b29b      	uxth	r3, r3
 800793c:	3b01      	subs	r3, #1
 800793e:	b29a      	uxth	r2, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007944:	2300      	movs	r3, #0
 8007946:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	2b01      	cmp	r3, #1
 8007954:	d119      	bne.n	800798a <HAL_SPI_TransmitReceive+0x1b8>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800795a:	b29b      	uxth	r3, r3
 800795c:	2b00      	cmp	r3, #0
 800795e:	d014      	beq.n	800798a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68da      	ldr	r2, [r3, #12]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796a:	b292      	uxth	r2, r2
 800796c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007972:	1c9a      	adds	r2, r3, #2
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800797c:	b29b      	uxth	r3, r3
 800797e:	3b01      	subs	r3, #1
 8007980:	b29a      	uxth	r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007986:	2301      	movs	r3, #1
 8007988:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800798a:	f7fc fee3 	bl	8004754 <HAL_GetTick>
 800798e:	4602      	mov	r2, r0
 8007990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007992:	1ad3      	subs	r3, r2, r3
 8007994:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007996:	429a      	cmp	r2, r3
 8007998:	d807      	bhi.n	80079aa <HAL_SPI_TransmitReceive+0x1d8>
 800799a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079a0:	d003      	beq.n	80079aa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80079a2:	2303      	movs	r3, #3
 80079a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80079a8:	e0a7      	b.n	8007afa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1a6      	bne.n	8007902 <HAL_SPI_TransmitReceive+0x130>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1a1      	bne.n	8007902 <HAL_SPI_TransmitReceive+0x130>
 80079be:	e07c      	b.n	8007aba <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d002      	beq.n	80079ce <HAL_SPI_TransmitReceive+0x1fc>
 80079c8:	8b7b      	ldrh	r3, [r7, #26]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d16b      	bne.n	8007aa6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	330c      	adds	r3, #12
 80079d8:	7812      	ldrb	r2, [r2, #0]
 80079da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e0:	1c5a      	adds	r2, r3, #1
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	3b01      	subs	r3, #1
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079f4:	e057      	b.n	8007aa6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f003 0302 	and.w	r3, r3, #2
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d11c      	bne.n	8007a3e <HAL_SPI_TransmitReceive+0x26c>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d017      	beq.n	8007a3e <HAL_SPI_TransmitReceive+0x26c>
 8007a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d114      	bne.n	8007a3e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	330c      	adds	r3, #12
 8007a1e:	7812      	ldrb	r2, [r2, #0]
 8007a20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a26:	1c5a      	adds	r2, r3, #1
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	3b01      	subs	r3, #1
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f003 0301 	and.w	r3, r3, #1
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d119      	bne.n	8007a80 <HAL_SPI_TransmitReceive+0x2ae>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d014      	beq.n	8007a80 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68da      	ldr	r2, [r3, #12]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a60:	b2d2      	uxtb	r2, r2
 8007a62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a68:	1c5a      	adds	r2, r3, #1
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	3b01      	subs	r3, #1
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007a80:	f7fc fe68 	bl	8004754 <HAL_GetTick>
 8007a84:	4602      	mov	r2, r0
 8007a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d803      	bhi.n	8007a98 <HAL_SPI_TransmitReceive+0x2c6>
 8007a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a96:	d102      	bne.n	8007a9e <HAL_SPI_TransmitReceive+0x2cc>
 8007a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d103      	bne.n	8007aa6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007aa4:	e029      	b.n	8007afa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1a2      	bne.n	80079f6 <HAL_SPI_TransmitReceive+0x224>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d19d      	bne.n	80079f6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007abc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f000 f8b2 	bl	8007c28 <SPI_EndRxTxTransaction>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d006      	beq.n	8007ad8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2220      	movs	r2, #32
 8007ad4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007ad6:	e010      	b.n	8007afa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10b      	bne.n	8007af8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	617b      	str	r3, [r7, #20]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	617b      	str	r3, [r7, #20]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	617b      	str	r3, [r7, #20]
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	e000      	b.n	8007afa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007af8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3730      	adds	r7, #48	; 0x30
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
	...

08007b18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b088      	sub	sp, #32
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	603b      	str	r3, [r7, #0]
 8007b24:	4613      	mov	r3, r2
 8007b26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b28:	f7fc fe14 	bl	8004754 <HAL_GetTick>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b30:	1a9b      	subs	r3, r3, r2
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	4413      	add	r3, r2
 8007b36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b38:	f7fc fe0c 	bl	8004754 <HAL_GetTick>
 8007b3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b3e:	4b39      	ldr	r3, [pc, #228]	; (8007c24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	015b      	lsls	r3, r3, #5
 8007b44:	0d1b      	lsrs	r3, r3, #20
 8007b46:	69fa      	ldr	r2, [r7, #28]
 8007b48:	fb02 f303 	mul.w	r3, r2, r3
 8007b4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b4e:	e054      	b.n	8007bfa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b56:	d050      	beq.n	8007bfa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b58:	f7fc fdfc 	bl	8004754 <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	69fa      	ldr	r2, [r7, #28]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d902      	bls.n	8007b6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d13d      	bne.n	8007bea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b86:	d111      	bne.n	8007bac <SPI_WaitFlagStateUntilTimeout+0x94>
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b90:	d004      	beq.n	8007b9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b9a:	d107      	bne.n	8007bac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007baa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bb4:	d10f      	bne.n	8007bd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bc4:	601a      	str	r2, [r3, #0]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e017      	b.n	8007c1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d101      	bne.n	8007bf4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	689a      	ldr	r2, [r3, #8]
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	4013      	ands	r3, r2
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	bf0c      	ite	eq
 8007c0a:	2301      	moveq	r3, #1
 8007c0c:	2300      	movne	r3, #0
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	461a      	mov	r2, r3
 8007c12:	79fb      	ldrb	r3, [r7, #7]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d19b      	bne.n	8007b50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3720      	adds	r7, #32
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20000004 	.word	0x20000004

08007c28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b088      	sub	sp, #32
 8007c2c:	af02      	add	r7, sp, #8
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007c34:	4b1b      	ldr	r3, [pc, #108]	; (8007ca4 <SPI_EndRxTxTransaction+0x7c>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a1b      	ldr	r2, [pc, #108]	; (8007ca8 <SPI_EndRxTxTransaction+0x80>)
 8007c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c3e:	0d5b      	lsrs	r3, r3, #21
 8007c40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c44:	fb02 f303 	mul.w	r3, r2, r3
 8007c48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c52:	d112      	bne.n	8007c7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	9300      	str	r3, [sp, #0]
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	2180      	movs	r1, #128	; 0x80
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f7ff ff5a 	bl	8007b18 <SPI_WaitFlagStateUntilTimeout>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d016      	beq.n	8007c98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c6e:	f043 0220 	orr.w	r2, r3, #32
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e00f      	b.n	8007c9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00a      	beq.n	8007c96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	3b01      	subs	r3, #1
 8007c84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c90:	2b80      	cmp	r3, #128	; 0x80
 8007c92:	d0f2      	beq.n	8007c7a <SPI_EndRxTxTransaction+0x52>
 8007c94:	e000      	b.n	8007c98 <SPI_EndRxTxTransaction+0x70>
        break;
 8007c96:	bf00      	nop
  }

  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	20000004 	.word	0x20000004
 8007ca8:	165e9f81 	.word	0x165e9f81

08007cac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e041      	b.n	8007d42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d106      	bne.n	8007cd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7fb fc10 	bl	80034f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	4619      	mov	r1, r3
 8007cea:	4610      	mov	r0, r2
 8007cec:	f000 fd32 	bl	8008754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
	...

08007d4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d001      	beq.n	8007d64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e04e      	b.n	8007e02 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2202      	movs	r2, #2
 8007d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68da      	ldr	r2, [r3, #12]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f042 0201 	orr.w	r2, r2, #1
 8007d7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a23      	ldr	r2, [pc, #140]	; (8007e10 <HAL_TIM_Base_Start_IT+0xc4>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d022      	beq.n	8007dcc <HAL_TIM_Base_Start_IT+0x80>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d8e:	d01d      	beq.n	8007dcc <HAL_TIM_Base_Start_IT+0x80>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a1f      	ldr	r2, [pc, #124]	; (8007e14 <HAL_TIM_Base_Start_IT+0xc8>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d018      	beq.n	8007dcc <HAL_TIM_Base_Start_IT+0x80>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a1e      	ldr	r2, [pc, #120]	; (8007e18 <HAL_TIM_Base_Start_IT+0xcc>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d013      	beq.n	8007dcc <HAL_TIM_Base_Start_IT+0x80>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a1c      	ldr	r2, [pc, #112]	; (8007e1c <HAL_TIM_Base_Start_IT+0xd0>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d00e      	beq.n	8007dcc <HAL_TIM_Base_Start_IT+0x80>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a1b      	ldr	r2, [pc, #108]	; (8007e20 <HAL_TIM_Base_Start_IT+0xd4>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d009      	beq.n	8007dcc <HAL_TIM_Base_Start_IT+0x80>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a19      	ldr	r2, [pc, #100]	; (8007e24 <HAL_TIM_Base_Start_IT+0xd8>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d004      	beq.n	8007dcc <HAL_TIM_Base_Start_IT+0x80>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a18      	ldr	r2, [pc, #96]	; (8007e28 <HAL_TIM_Base_Start_IT+0xdc>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d111      	bne.n	8007df0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	f003 0307 	and.w	r3, r3, #7
 8007dd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2b06      	cmp	r3, #6
 8007ddc:	d010      	beq.n	8007e00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f042 0201 	orr.w	r2, r2, #1
 8007dec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dee:	e007      	b.n	8007e00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f042 0201 	orr.w	r2, r2, #1
 8007dfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3714      	adds	r7, #20
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	40010000 	.word	0x40010000
 8007e14:	40000400 	.word	0x40000400
 8007e18:	40000800 	.word	0x40000800
 8007e1c:	40000c00 	.word	0x40000c00
 8007e20:	40010400 	.word	0x40010400
 8007e24:	40014000 	.word	0x40014000
 8007e28:	40001800 	.word	0x40001800

08007e2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d101      	bne.n	8007e3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e041      	b.n	8007ec2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d106      	bne.n	8007e58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f7fb fbde 	bl	8003614 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	3304      	adds	r3, #4
 8007e68:	4619      	mov	r1, r3
 8007e6a:	4610      	mov	r0, r2
 8007e6c:	f000 fc72 	bl	8008754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
	...

08007ecc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d109      	bne.n	8007ef0 <HAL_TIM_PWM_Start+0x24>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	bf14      	ite	ne
 8007ee8:	2301      	movne	r3, #1
 8007eea:	2300      	moveq	r3, #0
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	e022      	b.n	8007f36 <HAL_TIM_PWM_Start+0x6a>
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	2b04      	cmp	r3, #4
 8007ef4:	d109      	bne.n	8007f0a <HAL_TIM_PWM_Start+0x3e>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	bf14      	ite	ne
 8007f02:	2301      	movne	r3, #1
 8007f04:	2300      	moveq	r3, #0
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	e015      	b.n	8007f36 <HAL_TIM_PWM_Start+0x6a>
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	2b08      	cmp	r3, #8
 8007f0e:	d109      	bne.n	8007f24 <HAL_TIM_PWM_Start+0x58>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	bf14      	ite	ne
 8007f1c:	2301      	movne	r3, #1
 8007f1e:	2300      	moveq	r3, #0
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	e008      	b.n	8007f36 <HAL_TIM_PWM_Start+0x6a>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	bf14      	ite	ne
 8007f30:	2301      	movne	r3, #1
 8007f32:	2300      	moveq	r3, #0
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d001      	beq.n	8007f3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e07c      	b.n	8008038 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d104      	bne.n	8007f4e <HAL_TIM_PWM_Start+0x82>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2202      	movs	r2, #2
 8007f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f4c:	e013      	b.n	8007f76 <HAL_TIM_PWM_Start+0xaa>
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	2b04      	cmp	r3, #4
 8007f52:	d104      	bne.n	8007f5e <HAL_TIM_PWM_Start+0x92>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2202      	movs	r2, #2
 8007f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f5c:	e00b      	b.n	8007f76 <HAL_TIM_PWM_Start+0xaa>
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	2b08      	cmp	r3, #8
 8007f62:	d104      	bne.n	8007f6e <HAL_TIM_PWM_Start+0xa2>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2202      	movs	r2, #2
 8007f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f6c:	e003      	b.n	8007f76 <HAL_TIM_PWM_Start+0xaa>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2202      	movs	r2, #2
 8007f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	6839      	ldr	r1, [r7, #0]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 fed2 	bl	8008d28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a2d      	ldr	r2, [pc, #180]	; (8008040 <HAL_TIM_PWM_Start+0x174>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d004      	beq.n	8007f98 <HAL_TIM_PWM_Start+0xcc>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a2c      	ldr	r2, [pc, #176]	; (8008044 <HAL_TIM_PWM_Start+0x178>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d101      	bne.n	8007f9c <HAL_TIM_PWM_Start+0xd0>
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e000      	b.n	8007f9e <HAL_TIM_PWM_Start+0xd2>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d007      	beq.n	8007fb2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007fb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a22      	ldr	r2, [pc, #136]	; (8008040 <HAL_TIM_PWM_Start+0x174>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d022      	beq.n	8008002 <HAL_TIM_PWM_Start+0x136>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fc4:	d01d      	beq.n	8008002 <HAL_TIM_PWM_Start+0x136>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a1f      	ldr	r2, [pc, #124]	; (8008048 <HAL_TIM_PWM_Start+0x17c>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d018      	beq.n	8008002 <HAL_TIM_PWM_Start+0x136>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a1d      	ldr	r2, [pc, #116]	; (800804c <HAL_TIM_PWM_Start+0x180>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d013      	beq.n	8008002 <HAL_TIM_PWM_Start+0x136>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a1c      	ldr	r2, [pc, #112]	; (8008050 <HAL_TIM_PWM_Start+0x184>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d00e      	beq.n	8008002 <HAL_TIM_PWM_Start+0x136>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a16      	ldr	r2, [pc, #88]	; (8008044 <HAL_TIM_PWM_Start+0x178>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d009      	beq.n	8008002 <HAL_TIM_PWM_Start+0x136>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a18      	ldr	r2, [pc, #96]	; (8008054 <HAL_TIM_PWM_Start+0x188>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d004      	beq.n	8008002 <HAL_TIM_PWM_Start+0x136>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a16      	ldr	r2, [pc, #88]	; (8008058 <HAL_TIM_PWM_Start+0x18c>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d111      	bne.n	8008026 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	f003 0307 	and.w	r3, r3, #7
 800800c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2b06      	cmp	r3, #6
 8008012:	d010      	beq.n	8008036 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f042 0201 	orr.w	r2, r2, #1
 8008022:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008024:	e007      	b.n	8008036 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f042 0201 	orr.w	r2, r2, #1
 8008034:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}
 8008040:	40010000 	.word	0x40010000
 8008044:	40010400 	.word	0x40010400
 8008048:	40000400 	.word	0x40000400
 800804c:	40000800 	.word	0x40000800
 8008050:	40000c00 	.word	0x40000c00
 8008054:	40014000 	.word	0x40014000
 8008058:	40001800 	.word	0x40001800

0800805c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2200      	movs	r2, #0
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	4618      	mov	r0, r3
 8008070:	f000 fe5a 	bl	8008d28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a2e      	ldr	r2, [pc, #184]	; (8008134 <HAL_TIM_PWM_Stop+0xd8>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d004      	beq.n	8008088 <HAL_TIM_PWM_Stop+0x2c>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a2d      	ldr	r2, [pc, #180]	; (8008138 <HAL_TIM_PWM_Stop+0xdc>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d101      	bne.n	800808c <HAL_TIM_PWM_Stop+0x30>
 8008088:	2301      	movs	r3, #1
 800808a:	e000      	b.n	800808e <HAL_TIM_PWM_Stop+0x32>
 800808c:	2300      	movs	r3, #0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d017      	beq.n	80080c2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	6a1a      	ldr	r2, [r3, #32]
 8008098:	f241 1311 	movw	r3, #4369	; 0x1111
 800809c:	4013      	ands	r3, r2
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10f      	bne.n	80080c2 <HAL_TIM_PWM_Stop+0x66>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	6a1a      	ldr	r2, [r3, #32]
 80080a8:	f240 4344 	movw	r3, #1092	; 0x444
 80080ac:	4013      	ands	r3, r2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d107      	bne.n	80080c2 <HAL_TIM_PWM_Stop+0x66>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6a1a      	ldr	r2, [r3, #32]
 80080c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80080cc:	4013      	ands	r3, r2
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10f      	bne.n	80080f2 <HAL_TIM_PWM_Stop+0x96>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	6a1a      	ldr	r2, [r3, #32]
 80080d8:	f240 4344 	movw	r3, #1092	; 0x444
 80080dc:	4013      	ands	r3, r2
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d107      	bne.n	80080f2 <HAL_TIM_PWM_Stop+0x96>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f022 0201 	bic.w	r2, r2, #1
 80080f0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d104      	bne.n	8008102 <HAL_TIM_PWM_Stop+0xa6>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008100:	e013      	b.n	800812a <HAL_TIM_PWM_Stop+0xce>
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2b04      	cmp	r3, #4
 8008106:	d104      	bne.n	8008112 <HAL_TIM_PWM_Stop+0xb6>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008110:	e00b      	b.n	800812a <HAL_TIM_PWM_Stop+0xce>
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	2b08      	cmp	r3, #8
 8008116:	d104      	bne.n	8008122 <HAL_TIM_PWM_Stop+0xc6>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008120:	e003      	b.n	800812a <HAL_TIM_PWM_Stop+0xce>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	40010000 	.word	0x40010000
 8008138:	40010400 	.word	0x40010400

0800813c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	f003 0302 	and.w	r3, r3, #2
 800814e:	2b02      	cmp	r3, #2
 8008150:	d122      	bne.n	8008198 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	f003 0302 	and.w	r3, r3, #2
 800815c:	2b02      	cmp	r3, #2
 800815e:	d11b      	bne.n	8008198 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f06f 0202 	mvn.w	r2, #2
 8008168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2201      	movs	r2, #1
 800816e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	f003 0303 	and.w	r3, r3, #3
 800817a:	2b00      	cmp	r3, #0
 800817c:	d003      	beq.n	8008186 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fa77 	bl	8008672 <HAL_TIM_IC_CaptureCallback>
 8008184:	e005      	b.n	8008192 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fa69 	bl	800865e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fa7a 	bl	8008686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	f003 0304 	and.w	r3, r3, #4
 80081a2:	2b04      	cmp	r3, #4
 80081a4:	d122      	bne.n	80081ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	f003 0304 	and.w	r3, r3, #4
 80081b0:	2b04      	cmp	r3, #4
 80081b2:	d11b      	bne.n	80081ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f06f 0204 	mvn.w	r2, #4
 80081bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2202      	movs	r2, #2
 80081c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d003      	beq.n	80081da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fa4d 	bl	8008672 <HAL_TIM_IC_CaptureCallback>
 80081d8:	e005      	b.n	80081e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fa3f 	bl	800865e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fa50 	bl	8008686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	f003 0308 	and.w	r3, r3, #8
 80081f6:	2b08      	cmp	r3, #8
 80081f8:	d122      	bne.n	8008240 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	f003 0308 	and.w	r3, r3, #8
 8008204:	2b08      	cmp	r3, #8
 8008206:	d11b      	bne.n	8008240 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f06f 0208 	mvn.w	r2, #8
 8008210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2204      	movs	r2, #4
 8008216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	69db      	ldr	r3, [r3, #28]
 800821e:	f003 0303 	and.w	r3, r3, #3
 8008222:	2b00      	cmp	r3, #0
 8008224:	d003      	beq.n	800822e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fa23 	bl	8008672 <HAL_TIM_IC_CaptureCallback>
 800822c:	e005      	b.n	800823a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fa15 	bl	800865e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fa26 	bl	8008686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	f003 0310 	and.w	r3, r3, #16
 800824a:	2b10      	cmp	r3, #16
 800824c:	d122      	bne.n	8008294 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	f003 0310 	and.w	r3, r3, #16
 8008258:	2b10      	cmp	r3, #16
 800825a:	d11b      	bne.n	8008294 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f06f 0210 	mvn.w	r2, #16
 8008264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2208      	movs	r2, #8
 800826a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008276:	2b00      	cmp	r3, #0
 8008278:	d003      	beq.n	8008282 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f9f9 	bl	8008672 <HAL_TIM_IC_CaptureCallback>
 8008280:	e005      	b.n	800828e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f9eb 	bl	800865e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f9fc 	bl	8008686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d10e      	bne.n	80082c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d107      	bne.n	80082c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f06f 0201 	mvn.w	r2, #1
 80082b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7fa fffc 	bl	80032b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ca:	2b80      	cmp	r3, #128	; 0x80
 80082cc:	d10e      	bne.n	80082ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082d8:	2b80      	cmp	r3, #128	; 0x80
 80082da:	d107      	bne.n	80082ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80082e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fe1c 	bl	8008f24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f6:	2b40      	cmp	r3, #64	; 0x40
 80082f8:	d10e      	bne.n	8008318 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008304:	2b40      	cmp	r3, #64	; 0x40
 8008306:	d107      	bne.n	8008318 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 f9c1 	bl	800869a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	f003 0320 	and.w	r3, r3, #32
 8008322:	2b20      	cmp	r3, #32
 8008324:	d10e      	bne.n	8008344 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	f003 0320 	and.w	r3, r3, #32
 8008330:	2b20      	cmp	r3, #32
 8008332:	d107      	bne.n	8008344 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f06f 0220 	mvn.w	r2, #32
 800833c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fde6 	bl	8008f10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008344:	bf00      	nop
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008358:	2300      	movs	r3, #0
 800835a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008362:	2b01      	cmp	r3, #1
 8008364:	d101      	bne.n	800836a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008366:	2302      	movs	r3, #2
 8008368:	e0ae      	b.n	80084c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2201      	movs	r2, #1
 800836e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2b0c      	cmp	r3, #12
 8008376:	f200 809f 	bhi.w	80084b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800837a:	a201      	add	r2, pc, #4	; (adr r2, 8008380 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800837c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008380:	080083b5 	.word	0x080083b5
 8008384:	080084b9 	.word	0x080084b9
 8008388:	080084b9 	.word	0x080084b9
 800838c:	080084b9 	.word	0x080084b9
 8008390:	080083f5 	.word	0x080083f5
 8008394:	080084b9 	.word	0x080084b9
 8008398:	080084b9 	.word	0x080084b9
 800839c:	080084b9 	.word	0x080084b9
 80083a0:	08008437 	.word	0x08008437
 80083a4:	080084b9 	.word	0x080084b9
 80083a8:	080084b9 	.word	0x080084b9
 80083ac:	080084b9 	.word	0x080084b9
 80083b0:	08008477 	.word	0x08008477
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68b9      	ldr	r1, [r7, #8]
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 fa6a 	bl	8008894 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	699a      	ldr	r2, [r3, #24]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f042 0208 	orr.w	r2, r2, #8
 80083ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	699a      	ldr	r2, [r3, #24]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f022 0204 	bic.w	r2, r2, #4
 80083de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6999      	ldr	r1, [r3, #24]
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	691a      	ldr	r2, [r3, #16]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	430a      	orrs	r2, r1
 80083f0:	619a      	str	r2, [r3, #24]
      break;
 80083f2:	e064      	b.n	80084be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68b9      	ldr	r1, [r7, #8]
 80083fa:	4618      	mov	r0, r3
 80083fc:	f000 faba 	bl	8008974 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	699a      	ldr	r2, [r3, #24]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800840e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	699a      	ldr	r2, [r3, #24]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800841e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	6999      	ldr	r1, [r3, #24]
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	021a      	lsls	r2, r3, #8
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	430a      	orrs	r2, r1
 8008432:	619a      	str	r2, [r3, #24]
      break;
 8008434:	e043      	b.n	80084be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68b9      	ldr	r1, [r7, #8]
 800843c:	4618      	mov	r0, r3
 800843e:	f000 fb0f 	bl	8008a60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	69da      	ldr	r2, [r3, #28]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f042 0208 	orr.w	r2, r2, #8
 8008450:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	69da      	ldr	r2, [r3, #28]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f022 0204 	bic.w	r2, r2, #4
 8008460:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	69d9      	ldr	r1, [r3, #28]
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	691a      	ldr	r2, [r3, #16]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	430a      	orrs	r2, r1
 8008472:	61da      	str	r2, [r3, #28]
      break;
 8008474:	e023      	b.n	80084be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68b9      	ldr	r1, [r7, #8]
 800847c:	4618      	mov	r0, r3
 800847e:	f000 fb63 	bl	8008b48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	69da      	ldr	r2, [r3, #28]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008490:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	69da      	ldr	r2, [r3, #28]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	69d9      	ldr	r1, [r3, #28]
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	021a      	lsls	r2, r3, #8
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	430a      	orrs	r2, r1
 80084b4:	61da      	str	r2, [r3, #28]
      break;
 80084b6:	e002      	b.n	80084be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	75fb      	strb	r3, [r7, #23]
      break;
 80084bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3718      	adds	r7, #24
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084da:	2300      	movs	r3, #0
 80084dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d101      	bne.n	80084ec <HAL_TIM_ConfigClockSource+0x1c>
 80084e8:	2302      	movs	r3, #2
 80084ea:	e0b4      	b.n	8008656 <HAL_TIM_ConfigClockSource+0x186>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2202      	movs	r2, #2
 80084f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800850a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008512:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008524:	d03e      	beq.n	80085a4 <HAL_TIM_ConfigClockSource+0xd4>
 8008526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800852a:	f200 8087 	bhi.w	800863c <HAL_TIM_ConfigClockSource+0x16c>
 800852e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008532:	f000 8086 	beq.w	8008642 <HAL_TIM_ConfigClockSource+0x172>
 8008536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800853a:	d87f      	bhi.n	800863c <HAL_TIM_ConfigClockSource+0x16c>
 800853c:	2b70      	cmp	r3, #112	; 0x70
 800853e:	d01a      	beq.n	8008576 <HAL_TIM_ConfigClockSource+0xa6>
 8008540:	2b70      	cmp	r3, #112	; 0x70
 8008542:	d87b      	bhi.n	800863c <HAL_TIM_ConfigClockSource+0x16c>
 8008544:	2b60      	cmp	r3, #96	; 0x60
 8008546:	d050      	beq.n	80085ea <HAL_TIM_ConfigClockSource+0x11a>
 8008548:	2b60      	cmp	r3, #96	; 0x60
 800854a:	d877      	bhi.n	800863c <HAL_TIM_ConfigClockSource+0x16c>
 800854c:	2b50      	cmp	r3, #80	; 0x50
 800854e:	d03c      	beq.n	80085ca <HAL_TIM_ConfigClockSource+0xfa>
 8008550:	2b50      	cmp	r3, #80	; 0x50
 8008552:	d873      	bhi.n	800863c <HAL_TIM_ConfigClockSource+0x16c>
 8008554:	2b40      	cmp	r3, #64	; 0x40
 8008556:	d058      	beq.n	800860a <HAL_TIM_ConfigClockSource+0x13a>
 8008558:	2b40      	cmp	r3, #64	; 0x40
 800855a:	d86f      	bhi.n	800863c <HAL_TIM_ConfigClockSource+0x16c>
 800855c:	2b30      	cmp	r3, #48	; 0x30
 800855e:	d064      	beq.n	800862a <HAL_TIM_ConfigClockSource+0x15a>
 8008560:	2b30      	cmp	r3, #48	; 0x30
 8008562:	d86b      	bhi.n	800863c <HAL_TIM_ConfigClockSource+0x16c>
 8008564:	2b20      	cmp	r3, #32
 8008566:	d060      	beq.n	800862a <HAL_TIM_ConfigClockSource+0x15a>
 8008568:	2b20      	cmp	r3, #32
 800856a:	d867      	bhi.n	800863c <HAL_TIM_ConfigClockSource+0x16c>
 800856c:	2b00      	cmp	r3, #0
 800856e:	d05c      	beq.n	800862a <HAL_TIM_ConfigClockSource+0x15a>
 8008570:	2b10      	cmp	r3, #16
 8008572:	d05a      	beq.n	800862a <HAL_TIM_ConfigClockSource+0x15a>
 8008574:	e062      	b.n	800863c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6818      	ldr	r0, [r3, #0]
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	6899      	ldr	r1, [r3, #8]
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	685a      	ldr	r2, [r3, #4]
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	f000 fbaf 	bl	8008ce8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008598:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	68ba      	ldr	r2, [r7, #8]
 80085a0:	609a      	str	r2, [r3, #8]
      break;
 80085a2:	e04f      	b.n	8008644 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6818      	ldr	r0, [r3, #0]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	6899      	ldr	r1, [r3, #8]
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	685a      	ldr	r2, [r3, #4]
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	f000 fb98 	bl	8008ce8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	689a      	ldr	r2, [r3, #8]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085c6:	609a      	str	r2, [r3, #8]
      break;
 80085c8:	e03c      	b.n	8008644 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6818      	ldr	r0, [r3, #0]
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	6859      	ldr	r1, [r3, #4]
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	461a      	mov	r2, r3
 80085d8:	f000 fb0c 	bl	8008bf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2150      	movs	r1, #80	; 0x50
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 fb65 	bl	8008cb2 <TIM_ITRx_SetConfig>
      break;
 80085e8:	e02c      	b.n	8008644 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6818      	ldr	r0, [r3, #0]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	6859      	ldr	r1, [r3, #4]
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	461a      	mov	r2, r3
 80085f8:	f000 fb2b 	bl	8008c52 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2160      	movs	r1, #96	; 0x60
 8008602:	4618      	mov	r0, r3
 8008604:	f000 fb55 	bl	8008cb2 <TIM_ITRx_SetConfig>
      break;
 8008608:	e01c      	b.n	8008644 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6818      	ldr	r0, [r3, #0]
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	6859      	ldr	r1, [r3, #4]
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	461a      	mov	r2, r3
 8008618:	f000 faec 	bl	8008bf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2140      	movs	r1, #64	; 0x40
 8008622:	4618      	mov	r0, r3
 8008624:	f000 fb45 	bl	8008cb2 <TIM_ITRx_SetConfig>
      break;
 8008628:	e00c      	b.n	8008644 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4619      	mov	r1, r3
 8008634:	4610      	mov	r0, r2
 8008636:	f000 fb3c 	bl	8008cb2 <TIM_ITRx_SetConfig>
      break;
 800863a:	e003      	b.n	8008644 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	73fb      	strb	r3, [r7, #15]
      break;
 8008640:	e000      	b.n	8008644 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008642:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008654:	7bfb      	ldrb	r3, [r7, #15]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800865e:	b480      	push	{r7}
 8008660:	b083      	sub	sp, #12
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008666:	bf00      	nop
 8008668:	370c      	adds	r7, #12
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008672:	b480      	push	{r7}
 8008674:	b083      	sub	sp, #12
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800867a:	bf00      	nop
 800867c:	370c      	adds	r7, #12
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr

08008686 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008686:	b480      	push	{r7}
 8008688:	b083      	sub	sp, #12
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800868e:	bf00      	nop
 8008690:	370c      	adds	r7, #12
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr

0800869a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800869a:	b480      	push	{r7}
 800869c:	b083      	sub	sp, #12
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086a2:	bf00      	nop
 80086a4:	370c      	adds	r7, #12
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b083      	sub	sp, #12
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80086b6:	bf00      	nop
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr

080086c2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b084      	sub	sp, #16
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ce:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d107      	bne.n	80086ea <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2201      	movs	r2, #1
 80086de:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086e8:	e02a      	b.n	8008740 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d107      	bne.n	8008704 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2202      	movs	r2, #2
 80086f8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008702:	e01d      	b.n	8008740 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	429a      	cmp	r2, r3
 800870c:	d107      	bne.n	800871e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2204      	movs	r2, #4
 8008712:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800871c:	e010      	b.n	8008740 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	429a      	cmp	r2, r3
 8008726:	d107      	bne.n	8008738 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2208      	movs	r2, #8
 800872c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008736:	e003      	b.n	8008740 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f7ff ffb4 	bl	80086ae <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	771a      	strb	r2, [r3, #28]
}
 800874c:	bf00      	nop
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a40      	ldr	r2, [pc, #256]	; (8008868 <TIM_Base_SetConfig+0x114>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d013      	beq.n	8008794 <TIM_Base_SetConfig+0x40>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008772:	d00f      	beq.n	8008794 <TIM_Base_SetConfig+0x40>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a3d      	ldr	r2, [pc, #244]	; (800886c <TIM_Base_SetConfig+0x118>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d00b      	beq.n	8008794 <TIM_Base_SetConfig+0x40>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4a3c      	ldr	r2, [pc, #240]	; (8008870 <TIM_Base_SetConfig+0x11c>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d007      	beq.n	8008794 <TIM_Base_SetConfig+0x40>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4a3b      	ldr	r2, [pc, #236]	; (8008874 <TIM_Base_SetConfig+0x120>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d003      	beq.n	8008794 <TIM_Base_SetConfig+0x40>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4a3a      	ldr	r2, [pc, #232]	; (8008878 <TIM_Base_SetConfig+0x124>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d108      	bne.n	80087a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800879a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a2f      	ldr	r2, [pc, #188]	; (8008868 <TIM_Base_SetConfig+0x114>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d02b      	beq.n	8008806 <TIM_Base_SetConfig+0xb2>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087b4:	d027      	beq.n	8008806 <TIM_Base_SetConfig+0xb2>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a2c      	ldr	r2, [pc, #176]	; (800886c <TIM_Base_SetConfig+0x118>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d023      	beq.n	8008806 <TIM_Base_SetConfig+0xb2>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a2b      	ldr	r2, [pc, #172]	; (8008870 <TIM_Base_SetConfig+0x11c>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d01f      	beq.n	8008806 <TIM_Base_SetConfig+0xb2>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a2a      	ldr	r2, [pc, #168]	; (8008874 <TIM_Base_SetConfig+0x120>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d01b      	beq.n	8008806 <TIM_Base_SetConfig+0xb2>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a29      	ldr	r2, [pc, #164]	; (8008878 <TIM_Base_SetConfig+0x124>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d017      	beq.n	8008806 <TIM_Base_SetConfig+0xb2>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a28      	ldr	r2, [pc, #160]	; (800887c <TIM_Base_SetConfig+0x128>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d013      	beq.n	8008806 <TIM_Base_SetConfig+0xb2>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a27      	ldr	r2, [pc, #156]	; (8008880 <TIM_Base_SetConfig+0x12c>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d00f      	beq.n	8008806 <TIM_Base_SetConfig+0xb2>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a26      	ldr	r2, [pc, #152]	; (8008884 <TIM_Base_SetConfig+0x130>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d00b      	beq.n	8008806 <TIM_Base_SetConfig+0xb2>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a25      	ldr	r2, [pc, #148]	; (8008888 <TIM_Base_SetConfig+0x134>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d007      	beq.n	8008806 <TIM_Base_SetConfig+0xb2>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a24      	ldr	r2, [pc, #144]	; (800888c <TIM_Base_SetConfig+0x138>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d003      	beq.n	8008806 <TIM_Base_SetConfig+0xb2>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a23      	ldr	r2, [pc, #140]	; (8008890 <TIM_Base_SetConfig+0x13c>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d108      	bne.n	8008818 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800880c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	4313      	orrs	r3, r2
 8008816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	695b      	ldr	r3, [r3, #20]
 8008822:	4313      	orrs	r3, r2
 8008824:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	689a      	ldr	r2, [r3, #8]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a0a      	ldr	r2, [pc, #40]	; (8008868 <TIM_Base_SetConfig+0x114>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d003      	beq.n	800884c <TIM_Base_SetConfig+0xf8>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	4a0c      	ldr	r2, [pc, #48]	; (8008878 <TIM_Base_SetConfig+0x124>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d103      	bne.n	8008854 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	691a      	ldr	r2, [r3, #16]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	615a      	str	r2, [r3, #20]
}
 800885a:	bf00      	nop
 800885c:	3714      	adds	r7, #20
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	40010000 	.word	0x40010000
 800886c:	40000400 	.word	0x40000400
 8008870:	40000800 	.word	0x40000800
 8008874:	40000c00 	.word	0x40000c00
 8008878:	40010400 	.word	0x40010400
 800887c:	40014000 	.word	0x40014000
 8008880:	40014400 	.word	0x40014400
 8008884:	40014800 	.word	0x40014800
 8008888:	40001800 	.word	0x40001800
 800888c:	40001c00 	.word	0x40001c00
 8008890:	40002000 	.word	0x40002000

08008894 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008894:	b480      	push	{r7}
 8008896:	b087      	sub	sp, #28
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a1b      	ldr	r3, [r3, #32]
 80088a2:	f023 0201 	bic.w	r2, r3, #1
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f023 0303 	bic.w	r3, r3, #3
 80088ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	f023 0302 	bic.w	r3, r3, #2
 80088dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	697a      	ldr	r2, [r7, #20]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a20      	ldr	r2, [pc, #128]	; (800896c <TIM_OC1_SetConfig+0xd8>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d003      	beq.n	80088f8 <TIM_OC1_SetConfig+0x64>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a1f      	ldr	r2, [pc, #124]	; (8008970 <TIM_OC1_SetConfig+0xdc>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d10c      	bne.n	8008912 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	f023 0308 	bic.w	r3, r3, #8
 80088fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	697a      	ldr	r2, [r7, #20]
 8008906:	4313      	orrs	r3, r2
 8008908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f023 0304 	bic.w	r3, r3, #4
 8008910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a15      	ldr	r2, [pc, #84]	; (800896c <TIM_OC1_SetConfig+0xd8>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d003      	beq.n	8008922 <TIM_OC1_SetConfig+0x8e>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a14      	ldr	r2, [pc, #80]	; (8008970 <TIM_OC1_SetConfig+0xdc>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d111      	bne.n	8008946 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	4313      	orrs	r3, r2
 800893a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	693a      	ldr	r2, [r7, #16]
 8008942:	4313      	orrs	r3, r2
 8008944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	685a      	ldr	r2, [r3, #4]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	697a      	ldr	r2, [r7, #20]
 800895e:	621a      	str	r2, [r3, #32]
}
 8008960:	bf00      	nop
 8008962:	371c      	adds	r7, #28
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr
 800896c:	40010000 	.word	0x40010000
 8008970:	40010400 	.word	0x40010400

08008974 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008974:	b480      	push	{r7}
 8008976:	b087      	sub	sp, #28
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a1b      	ldr	r3, [r3, #32]
 8008982:	f023 0210 	bic.w	r2, r3, #16
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a1b      	ldr	r3, [r3, #32]
 800898e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	021b      	lsls	r3, r3, #8
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	f023 0320 	bic.w	r3, r3, #32
 80089be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	011b      	lsls	r3, r3, #4
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	4313      	orrs	r3, r2
 80089ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a22      	ldr	r2, [pc, #136]	; (8008a58 <TIM_OC2_SetConfig+0xe4>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d003      	beq.n	80089dc <TIM_OC2_SetConfig+0x68>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a21      	ldr	r2, [pc, #132]	; (8008a5c <TIM_OC2_SetConfig+0xe8>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d10d      	bne.n	80089f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	011b      	lsls	r3, r3, #4
 80089ea:	697a      	ldr	r2, [r7, #20]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a17      	ldr	r2, [pc, #92]	; (8008a58 <TIM_OC2_SetConfig+0xe4>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d003      	beq.n	8008a08 <TIM_OC2_SetConfig+0x94>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a16      	ldr	r2, [pc, #88]	; (8008a5c <TIM_OC2_SetConfig+0xe8>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d113      	bne.n	8008a30 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	695b      	ldr	r3, [r3, #20]
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	693a      	ldr	r2, [r7, #16]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	693a      	ldr	r2, [r7, #16]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	693a      	ldr	r2, [r7, #16]
 8008a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	685a      	ldr	r2, [r3, #4]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	621a      	str	r2, [r3, #32]
}
 8008a4a:	bf00      	nop
 8008a4c:	371c      	adds	r7, #28
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	40010000 	.word	0x40010000
 8008a5c:	40010400 	.word	0x40010400

08008a60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b087      	sub	sp, #28
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a1b      	ldr	r3, [r3, #32]
 8008a6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a1b      	ldr	r3, [r3, #32]
 8008a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	69db      	ldr	r3, [r3, #28]
 8008a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f023 0303 	bic.w	r3, r3, #3
 8008a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008aa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	021b      	lsls	r3, r3, #8
 8008ab0:	697a      	ldr	r2, [r7, #20]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a21      	ldr	r2, [pc, #132]	; (8008b40 <TIM_OC3_SetConfig+0xe0>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d003      	beq.n	8008ac6 <TIM_OC3_SetConfig+0x66>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a20      	ldr	r2, [pc, #128]	; (8008b44 <TIM_OC3_SetConfig+0xe4>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d10d      	bne.n	8008ae2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008acc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	021b      	lsls	r3, r3, #8
 8008ad4:	697a      	ldr	r2, [r7, #20]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ae0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a16      	ldr	r2, [pc, #88]	; (8008b40 <TIM_OC3_SetConfig+0xe0>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d003      	beq.n	8008af2 <TIM_OC3_SetConfig+0x92>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a15      	ldr	r2, [pc, #84]	; (8008b44 <TIM_OC3_SetConfig+0xe4>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d113      	bne.n	8008b1a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008af8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	011b      	lsls	r3, r3, #4
 8008b08:	693a      	ldr	r2, [r7, #16]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	699b      	ldr	r3, [r3, #24]
 8008b12:	011b      	lsls	r3, r3, #4
 8008b14:	693a      	ldr	r2, [r7, #16]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	693a      	ldr	r2, [r7, #16]
 8008b1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	685a      	ldr	r2, [r3, #4]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	697a      	ldr	r2, [r7, #20]
 8008b32:	621a      	str	r2, [r3, #32]
}
 8008b34:	bf00      	nop
 8008b36:	371c      	adds	r7, #28
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr
 8008b40:	40010000 	.word	0x40010000
 8008b44:	40010400 	.word	0x40010400

08008b48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b087      	sub	sp, #28
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a1b      	ldr	r3, [r3, #32]
 8008b56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a1b      	ldr	r3, [r3, #32]
 8008b62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	021b      	lsls	r3, r3, #8
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	031b      	lsls	r3, r3, #12
 8008b9a:	693a      	ldr	r2, [r7, #16]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a12      	ldr	r2, [pc, #72]	; (8008bec <TIM_OC4_SetConfig+0xa4>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d003      	beq.n	8008bb0 <TIM_OC4_SetConfig+0x68>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4a11      	ldr	r2, [pc, #68]	; (8008bf0 <TIM_OC4_SetConfig+0xa8>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d109      	bne.n	8008bc4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	695b      	ldr	r3, [r3, #20]
 8008bbc:	019b      	lsls	r3, r3, #6
 8008bbe:	697a      	ldr	r2, [r7, #20]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	697a      	ldr	r2, [r7, #20]
 8008bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	685a      	ldr	r2, [r3, #4]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	693a      	ldr	r2, [r7, #16]
 8008bdc:	621a      	str	r2, [r3, #32]
}
 8008bde:	bf00      	nop
 8008be0:	371c      	adds	r7, #28
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	40010000 	.word	0x40010000
 8008bf0:	40010400 	.word	0x40010400

08008bf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b087      	sub	sp, #28
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6a1b      	ldr	r3, [r3, #32]
 8008c04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6a1b      	ldr	r3, [r3, #32]
 8008c0a:	f023 0201 	bic.w	r2, r3, #1
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	011b      	lsls	r3, r3, #4
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	f023 030a 	bic.w	r3, r3, #10
 8008c30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c32:	697a      	ldr	r2, [r7, #20]
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	4313      	orrs	r3, r2
 8008c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	693a      	ldr	r2, [r7, #16]
 8008c3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	697a      	ldr	r2, [r7, #20]
 8008c44:	621a      	str	r2, [r3, #32]
}
 8008c46:	bf00      	nop
 8008c48:	371c      	adds	r7, #28
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr

08008c52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c52:	b480      	push	{r7}
 8008c54:	b087      	sub	sp, #28
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	60f8      	str	r0, [r7, #12]
 8008c5a:	60b9      	str	r1, [r7, #8]
 8008c5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6a1b      	ldr	r3, [r3, #32]
 8008c62:	f023 0210 	bic.w	r2, r3, #16
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	699b      	ldr	r3, [r3, #24]
 8008c6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6a1b      	ldr	r3, [r3, #32]
 8008c74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	031b      	lsls	r3, r3, #12
 8008c82:	697a      	ldr	r2, [r7, #20]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	011b      	lsls	r3, r3, #4
 8008c94:	693a      	ldr	r2, [r7, #16]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	697a      	ldr	r2, [r7, #20]
 8008c9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	693a      	ldr	r2, [r7, #16]
 8008ca4:	621a      	str	r2, [r3, #32]
}
 8008ca6:	bf00      	nop
 8008ca8:	371c      	adds	r7, #28
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr

08008cb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008cb2:	b480      	push	{r7}
 8008cb4:	b085      	sub	sp, #20
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008cca:	683a      	ldr	r2, [r7, #0]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	f043 0307 	orr.w	r3, r3, #7
 8008cd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	609a      	str	r2, [r3, #8]
}
 8008cdc:	bf00      	nop
 8008cde:	3714      	adds	r7, #20
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b087      	sub	sp, #28
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
 8008cf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	021a      	lsls	r2, r3, #8
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	431a      	orrs	r2, r3
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	697a      	ldr	r2, [r7, #20]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	697a      	ldr	r2, [r7, #20]
 8008d1a:	609a      	str	r2, [r3, #8]
}
 8008d1c:	bf00      	nop
 8008d1e:	371c      	adds	r7, #28
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b087      	sub	sp, #28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	f003 031f 	and.w	r3, r3, #31
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6a1a      	ldr	r2, [r3, #32]
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	43db      	mvns	r3, r3
 8008d4a:	401a      	ands	r2, r3
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6a1a      	ldr	r2, [r3, #32]
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	f003 031f 	and.w	r3, r3, #31
 8008d5a:	6879      	ldr	r1, [r7, #4]
 8008d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8008d60:	431a      	orrs	r2, r3
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	621a      	str	r2, [r3, #32]
}
 8008d66:	bf00      	nop
 8008d68:	371c      	adds	r7, #28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
	...

08008d74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d101      	bne.n	8008d8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d88:	2302      	movs	r3, #2
 8008d8a:	e05a      	b.n	8008e42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2202      	movs	r2, #2
 8008d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008db2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a21      	ldr	r2, [pc, #132]	; (8008e50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d022      	beq.n	8008e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dd8:	d01d      	beq.n	8008e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a1d      	ldr	r2, [pc, #116]	; (8008e54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d018      	beq.n	8008e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a1b      	ldr	r2, [pc, #108]	; (8008e58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d013      	beq.n	8008e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a1a      	ldr	r2, [pc, #104]	; (8008e5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d00e      	beq.n	8008e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a18      	ldr	r2, [pc, #96]	; (8008e60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d009      	beq.n	8008e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a17      	ldr	r2, [pc, #92]	; (8008e64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d004      	beq.n	8008e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a15      	ldr	r2, [pc, #84]	; (8008e68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d10c      	bne.n	8008e30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	68ba      	ldr	r2, [r7, #8]
 8008e24:	4313      	orrs	r3, r2
 8008e26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68ba      	ldr	r2, [r7, #8]
 8008e2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3714      	adds	r7, #20
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	40010000 	.word	0x40010000
 8008e54:	40000400 	.word	0x40000400
 8008e58:	40000800 	.word	0x40000800
 8008e5c:	40000c00 	.word	0x40000c00
 8008e60:	40010400 	.word	0x40010400
 8008e64:	40014000 	.word	0x40014000
 8008e68:	40001800 	.word	0x40001800

08008e6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008e76:	2300      	movs	r3, #0
 8008e78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d101      	bne.n	8008e88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008e84:	2302      	movs	r3, #2
 8008e86:	e03d      	b.n	8008f04 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	695b      	ldr	r3, [r3, #20]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	69db      	ldr	r3, [r3, #28]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3714      	adds	r7, #20
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f18:	bf00      	nop
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f2c:	bf00      	nop
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d101      	bne.n	8008f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	e03f      	b.n	8008fca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d106      	bne.n	8008f64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f7fa fcee 	bl	8003940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2224      	movs	r2, #36	; 0x24
 8008f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68da      	ldr	r2, [r3, #12]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fe23 	bl	8009bc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	691a      	ldr	r2, [r3, #16]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	695a      	ldr	r2, [r3, #20]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008fa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68da      	ldr	r2, [r3, #12]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008fb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2220      	movs	r2, #32
 8008fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2220      	movs	r2, #32
 8008fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b08a      	sub	sp, #40	; 0x28
 8008fd6:	af02      	add	r7, sp, #8
 8008fd8:	60f8      	str	r0, [r7, #12]
 8008fda:	60b9      	str	r1, [r7, #8]
 8008fdc:	603b      	str	r3, [r7, #0]
 8008fde:	4613      	mov	r3, r2
 8008fe0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	2b20      	cmp	r3, #32
 8008ff0:	d17c      	bne.n	80090ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d002      	beq.n	8008ffe <HAL_UART_Transmit+0x2c>
 8008ff8:	88fb      	ldrh	r3, [r7, #6]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d101      	bne.n	8009002 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	e075      	b.n	80090ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009008:	2b01      	cmp	r3, #1
 800900a:	d101      	bne.n	8009010 <HAL_UART_Transmit+0x3e>
 800900c:	2302      	movs	r3, #2
 800900e:	e06e      	b.n	80090ee <HAL_UART_Transmit+0x11c>
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2221      	movs	r2, #33	; 0x21
 8009022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009026:	f7fb fb95 	bl	8004754 <HAL_GetTick>
 800902a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	88fa      	ldrh	r2, [r7, #6]
 8009030:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	88fa      	ldrh	r2, [r7, #6]
 8009036:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009040:	d108      	bne.n	8009054 <HAL_UART_Transmit+0x82>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	691b      	ldr	r3, [r3, #16]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d104      	bne.n	8009054 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800904a:	2300      	movs	r3, #0
 800904c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	61bb      	str	r3, [r7, #24]
 8009052:	e003      	b.n	800905c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009058:	2300      	movs	r3, #0
 800905a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2200      	movs	r2, #0
 8009060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009064:	e02a      	b.n	80090bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	2200      	movs	r2, #0
 800906e:	2180      	movs	r1, #128	; 0x80
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f000 fb63 	bl	800973c <UART_WaitOnFlagUntilTimeout>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800907c:	2303      	movs	r3, #3
 800907e:	e036      	b.n	80090ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d10b      	bne.n	800909e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	881b      	ldrh	r3, [r3, #0]
 800908a:	461a      	mov	r2, r3
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009094:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	3302      	adds	r3, #2
 800909a:	61bb      	str	r3, [r7, #24]
 800909c:	e007      	b.n	80090ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	781a      	ldrb	r2, [r3, #0]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	3301      	adds	r3, #1
 80090ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	3b01      	subs	r3, #1
 80090b6:	b29a      	uxth	r2, r3
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1cf      	bne.n	8009066 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	2200      	movs	r2, #0
 80090ce:	2140      	movs	r1, #64	; 0x40
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	f000 fb33 	bl	800973c <UART_WaitOnFlagUntilTimeout>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d001      	beq.n	80090e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80090dc:	2303      	movs	r3, #3
 80090de:	e006      	b.n	80090ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2220      	movs	r2, #32
 80090e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	e000      	b.n	80090ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80090ec:	2302      	movs	r3, #2
  }
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3720      	adds	r7, #32
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b085      	sub	sp, #20
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	60f8      	str	r0, [r7, #12]
 80090fe:	60b9      	str	r1, [r7, #8]
 8009100:	4613      	mov	r3, r2
 8009102:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800910a:	b2db      	uxtb	r3, r3
 800910c:	2b20      	cmp	r3, #32
 800910e:	d130      	bne.n	8009172 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d002      	beq.n	800911c <HAL_UART_Transmit_IT+0x26>
 8009116:	88fb      	ldrh	r3, [r7, #6]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d101      	bne.n	8009120 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	e029      	b.n	8009174 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009126:	2b01      	cmp	r3, #1
 8009128:	d101      	bne.n	800912e <HAL_UART_Transmit_IT+0x38>
 800912a:	2302      	movs	r3, #2
 800912c:	e022      	b.n	8009174 <HAL_UART_Transmit_IT+0x7e>
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2201      	movs	r2, #1
 8009132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	88fa      	ldrh	r2, [r7, #6]
 8009140:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	88fa      	ldrh	r2, [r7, #6]
 8009146:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2200      	movs	r2, #0
 800914c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2221      	movs	r2, #33	; 0x21
 8009152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	68da      	ldr	r2, [r3, #12]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800916c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	e000      	b.n	8009174 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8009172:	2302      	movs	r3, #2
  }
}
 8009174:	4618      	mov	r0, r3
 8009176:	3714      	adds	r7, #20
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	4613      	mov	r3, r2
 800918c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009194:	b2db      	uxtb	r3, r3
 8009196:	2b20      	cmp	r3, #32
 8009198:	d11d      	bne.n	80091d6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d002      	beq.n	80091a6 <HAL_UART_Receive_IT+0x26>
 80091a0:	88fb      	ldrh	r3, [r7, #6]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d101      	bne.n	80091aa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e016      	b.n	80091d8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d101      	bne.n	80091b8 <HAL_UART_Receive_IT+0x38>
 80091b4:	2302      	movs	r3, #2
 80091b6:	e00f      	b.n	80091d8 <HAL_UART_Receive_IT+0x58>
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2200      	movs	r2, #0
 80091c4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80091c6:	88fb      	ldrh	r3, [r7, #6]
 80091c8:	461a      	mov	r2, r3
 80091ca:	68b9      	ldr	r1, [r7, #8]
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f000 fb23 	bl	8009818 <UART_Start_Receive_IT>
 80091d2:	4603      	mov	r3, r0
 80091d4:	e000      	b.n	80091d8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80091d6:	2302      	movs	r3, #2
  }
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b0ba      	sub	sp, #232	; 0xe8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	695b      	ldr	r3, [r3, #20]
 8009202:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009206:	2300      	movs	r3, #0
 8009208:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800920c:	2300      	movs	r3, #0
 800920e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009216:	f003 030f 	and.w	r3, r3, #15
 800921a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800921e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009222:	2b00      	cmp	r3, #0
 8009224:	d10f      	bne.n	8009246 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800922a:	f003 0320 	and.w	r3, r3, #32
 800922e:	2b00      	cmp	r3, #0
 8009230:	d009      	beq.n	8009246 <HAL_UART_IRQHandler+0x66>
 8009232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009236:	f003 0320 	and.w	r3, r3, #32
 800923a:	2b00      	cmp	r3, #0
 800923c:	d003      	beq.n	8009246 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fc07 	bl	8009a52 <UART_Receive_IT>
      return;
 8009244:	e256      	b.n	80096f4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009246:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800924a:	2b00      	cmp	r3, #0
 800924c:	f000 80de 	beq.w	800940c <HAL_UART_IRQHandler+0x22c>
 8009250:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009254:	f003 0301 	and.w	r3, r3, #1
 8009258:	2b00      	cmp	r3, #0
 800925a:	d106      	bne.n	800926a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800925c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009260:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009264:	2b00      	cmp	r3, #0
 8009266:	f000 80d1 	beq.w	800940c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800926a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800926e:	f003 0301 	and.w	r3, r3, #1
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00b      	beq.n	800928e <HAL_UART_IRQHandler+0xae>
 8009276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800927a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800927e:	2b00      	cmp	r3, #0
 8009280:	d005      	beq.n	800928e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009286:	f043 0201 	orr.w	r2, r3, #1
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800928e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009292:	f003 0304 	and.w	r3, r3, #4
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00b      	beq.n	80092b2 <HAL_UART_IRQHandler+0xd2>
 800929a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800929e:	f003 0301 	and.w	r3, r3, #1
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d005      	beq.n	80092b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092aa:	f043 0202 	orr.w	r2, r3, #2
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80092b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092b6:	f003 0302 	and.w	r3, r3, #2
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00b      	beq.n	80092d6 <HAL_UART_IRQHandler+0xf6>
 80092be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092c2:	f003 0301 	and.w	r3, r3, #1
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d005      	beq.n	80092d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ce:	f043 0204 	orr.w	r2, r3, #4
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80092d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092da:	f003 0308 	and.w	r3, r3, #8
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d011      	beq.n	8009306 <HAL_UART_IRQHandler+0x126>
 80092e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092e6:	f003 0320 	and.w	r3, r3, #32
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d105      	bne.n	80092fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80092ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092f2:	f003 0301 	and.w	r3, r3, #1
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d005      	beq.n	8009306 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fe:	f043 0208 	orr.w	r2, r3, #8
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800930a:	2b00      	cmp	r3, #0
 800930c:	f000 81ed 	beq.w	80096ea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009314:	f003 0320 	and.w	r3, r3, #32
 8009318:	2b00      	cmp	r3, #0
 800931a:	d008      	beq.n	800932e <HAL_UART_IRQHandler+0x14e>
 800931c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009320:	f003 0320 	and.w	r3, r3, #32
 8009324:	2b00      	cmp	r3, #0
 8009326:	d002      	beq.n	800932e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 fb92 	bl	8009a52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	695b      	ldr	r3, [r3, #20]
 8009334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009338:	2b40      	cmp	r3, #64	; 0x40
 800933a:	bf0c      	ite	eq
 800933c:	2301      	moveq	r3, #1
 800933e:	2300      	movne	r3, #0
 8009340:	b2db      	uxtb	r3, r3
 8009342:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800934a:	f003 0308 	and.w	r3, r3, #8
 800934e:	2b00      	cmp	r3, #0
 8009350:	d103      	bne.n	800935a <HAL_UART_IRQHandler+0x17a>
 8009352:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009356:	2b00      	cmp	r3, #0
 8009358:	d04f      	beq.n	80093fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 fa9a 	bl	8009894 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	695b      	ldr	r3, [r3, #20]
 8009366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800936a:	2b40      	cmp	r3, #64	; 0x40
 800936c:	d141      	bne.n	80093f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	3314      	adds	r3, #20
 8009374:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009378:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800937c:	e853 3f00 	ldrex	r3, [r3]
 8009380:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009384:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800938c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	3314      	adds	r3, #20
 8009396:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800939a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800939e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80093a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80093aa:	e841 2300 	strex	r3, r2, [r1]
 80093ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80093b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d1d9      	bne.n	800936e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d013      	beq.n	80093ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c6:	4a7d      	ldr	r2, [pc, #500]	; (80095bc <HAL_UART_IRQHandler+0x3dc>)
 80093c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fb fc78 	bl	8004cc4 <HAL_DMA_Abort_IT>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d016      	beq.n	8009408 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80093e4:	4610      	mov	r0, r2
 80093e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093e8:	e00e      	b.n	8009408 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f990 	bl	8009710 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093f0:	e00a      	b.n	8009408 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 f98c 	bl	8009710 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093f8:	e006      	b.n	8009408 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f988 	bl	8009710 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009406:	e170      	b.n	80096ea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009408:	bf00      	nop
    return;
 800940a:	e16e      	b.n	80096ea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009410:	2b01      	cmp	r3, #1
 8009412:	f040 814a 	bne.w	80096aa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800941a:	f003 0310 	and.w	r3, r3, #16
 800941e:	2b00      	cmp	r3, #0
 8009420:	f000 8143 	beq.w	80096aa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009428:	f003 0310 	and.w	r3, r3, #16
 800942c:	2b00      	cmp	r3, #0
 800942e:	f000 813c 	beq.w	80096aa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009432:	2300      	movs	r3, #0
 8009434:	60bb      	str	r3, [r7, #8]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	60bb      	str	r3, [r7, #8]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	60bb      	str	r3, [r7, #8]
 8009446:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	695b      	ldr	r3, [r3, #20]
 800944e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009452:	2b40      	cmp	r3, #64	; 0x40
 8009454:	f040 80b4 	bne.w	80095c0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009464:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009468:	2b00      	cmp	r3, #0
 800946a:	f000 8140 	beq.w	80096ee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009472:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009476:	429a      	cmp	r2, r3
 8009478:	f080 8139 	bcs.w	80096ee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009482:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009488:	69db      	ldr	r3, [r3, #28]
 800948a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800948e:	f000 8088 	beq.w	80095a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	330c      	adds	r3, #12
 8009498:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80094a0:	e853 3f00 	ldrex	r3, [r3]
 80094a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80094a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	330c      	adds	r3, #12
 80094ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80094be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80094c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80094ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80094ce:	e841 2300 	strex	r3, r2, [r1]
 80094d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80094d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1d9      	bne.n	8009492 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	3314      	adds	r3, #20
 80094e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094e8:	e853 3f00 	ldrex	r3, [r3]
 80094ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80094ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094f0:	f023 0301 	bic.w	r3, r3, #1
 80094f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	3314      	adds	r3, #20
 80094fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009502:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009506:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009508:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800950a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800950e:	e841 2300 	strex	r3, r2, [r1]
 8009512:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1e1      	bne.n	80094de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	3314      	adds	r3, #20
 8009520:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009522:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009524:	e853 3f00 	ldrex	r3, [r3]
 8009528:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800952a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800952c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009530:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	3314      	adds	r3, #20
 800953a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800953e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009540:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009542:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009544:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009546:	e841 2300 	strex	r3, r2, [r1]
 800954a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800954c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1e3      	bne.n	800951a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2220      	movs	r2, #32
 8009556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	330c      	adds	r3, #12
 8009566:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800956a:	e853 3f00 	ldrex	r3, [r3]
 800956e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009572:	f023 0310 	bic.w	r3, r3, #16
 8009576:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	330c      	adds	r3, #12
 8009580:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009584:	65ba      	str	r2, [r7, #88]	; 0x58
 8009586:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009588:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800958a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800958c:	e841 2300 	strex	r3, r2, [r1]
 8009590:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1e3      	bne.n	8009560 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800959c:	4618      	mov	r0, r3
 800959e:	f7fb fb21 	bl	8004be4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	1ad3      	subs	r3, r2, r3
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	4619      	mov	r1, r3
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 f8b6 	bl	8009724 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80095b8:	e099      	b.n	80096ee <HAL_UART_IRQHandler+0x50e>
 80095ba:	bf00      	nop
 80095bc:	0800995b 	.word	0x0800995b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f000 808b 	beq.w	80096f2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80095dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f000 8086 	beq.w	80096f2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	330c      	adds	r3, #12
 80095ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f0:	e853 3f00 	ldrex	r3, [r3]
 80095f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80095f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	330c      	adds	r3, #12
 8009606:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800960a:	647a      	str	r2, [r7, #68]	; 0x44
 800960c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009610:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009612:	e841 2300 	strex	r3, r2, [r1]
 8009616:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800961a:	2b00      	cmp	r3, #0
 800961c:	d1e3      	bne.n	80095e6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	3314      	adds	r3, #20
 8009624:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009628:	e853 3f00 	ldrex	r3, [r3]
 800962c:	623b      	str	r3, [r7, #32]
   return(result);
 800962e:	6a3b      	ldr	r3, [r7, #32]
 8009630:	f023 0301 	bic.w	r3, r3, #1
 8009634:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	3314      	adds	r3, #20
 800963e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009642:	633a      	str	r2, [r7, #48]	; 0x30
 8009644:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009646:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800964a:	e841 2300 	strex	r3, r2, [r1]
 800964e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009652:	2b00      	cmp	r3, #0
 8009654:	d1e3      	bne.n	800961e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2220      	movs	r2, #32
 800965a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	330c      	adds	r3, #12
 800966a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	e853 3f00 	ldrex	r3, [r3]
 8009672:	60fb      	str	r3, [r7, #12]
   return(result);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f023 0310 	bic.w	r3, r3, #16
 800967a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	330c      	adds	r3, #12
 8009684:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009688:	61fa      	str	r2, [r7, #28]
 800968a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968c:	69b9      	ldr	r1, [r7, #24]
 800968e:	69fa      	ldr	r2, [r7, #28]
 8009690:	e841 2300 	strex	r3, r2, [r1]
 8009694:	617b      	str	r3, [r7, #20]
   return(result);
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d1e3      	bne.n	8009664 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800969c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80096a0:	4619      	mov	r1, r3
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f83e 	bl	8009724 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80096a8:	e023      	b.n	80096f2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80096aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d009      	beq.n	80096ca <HAL_UART_IRQHandler+0x4ea>
 80096b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d003      	beq.n	80096ca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 f95d 	bl	8009982 <UART_Transmit_IT>
    return;
 80096c8:	e014      	b.n	80096f4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80096ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d00e      	beq.n	80096f4 <HAL_UART_IRQHandler+0x514>
 80096d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d008      	beq.n	80096f4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 f99d 	bl	8009a22 <UART_EndTransmit_IT>
    return;
 80096e8:	e004      	b.n	80096f4 <HAL_UART_IRQHandler+0x514>
    return;
 80096ea:	bf00      	nop
 80096ec:	e002      	b.n	80096f4 <HAL_UART_IRQHandler+0x514>
      return;
 80096ee:	bf00      	nop
 80096f0:	e000      	b.n	80096f4 <HAL_UART_IRQHandler+0x514>
      return;
 80096f2:	bf00      	nop
  }
}
 80096f4:	37e8      	adds	r7, #232	; 0xe8
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop

080096fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009704:	bf00      	nop
 8009706:	370c      	adds	r7, #12
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	460b      	mov	r3, r1
 800972e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b090      	sub	sp, #64	; 0x40
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	603b      	str	r3, [r7, #0]
 8009748:	4613      	mov	r3, r2
 800974a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800974c:	e050      	b.n	80097f0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800974e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009754:	d04c      	beq.n	80097f0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009758:	2b00      	cmp	r3, #0
 800975a:	d007      	beq.n	800976c <UART_WaitOnFlagUntilTimeout+0x30>
 800975c:	f7fa fffa 	bl	8004754 <HAL_GetTick>
 8009760:	4602      	mov	r2, r0
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	1ad3      	subs	r3, r2, r3
 8009766:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009768:	429a      	cmp	r2, r3
 800976a:	d241      	bcs.n	80097f0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	330c      	adds	r3, #12
 8009772:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009776:	e853 3f00 	ldrex	r3, [r3]
 800977a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800977c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	330c      	adds	r3, #12
 800978a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800978c:	637a      	str	r2, [r7, #52]	; 0x34
 800978e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009790:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009792:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009794:	e841 2300 	strex	r3, r2, [r1]
 8009798:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800979a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979c:	2b00      	cmp	r3, #0
 800979e:	d1e5      	bne.n	800976c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	3314      	adds	r3, #20
 80097a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	e853 3f00 	ldrex	r3, [r3]
 80097ae:	613b      	str	r3, [r7, #16]
   return(result);
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	f023 0301 	bic.w	r3, r3, #1
 80097b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	3314      	adds	r3, #20
 80097be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097c0:	623a      	str	r2, [r7, #32]
 80097c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c4:	69f9      	ldr	r1, [r7, #28]
 80097c6:	6a3a      	ldr	r2, [r7, #32]
 80097c8:	e841 2300 	strex	r3, r2, [r1]
 80097cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1e5      	bne.n	80097a0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2220      	movs	r2, #32
 80097d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2220      	movs	r2, #32
 80097e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80097ec:	2303      	movs	r3, #3
 80097ee:	e00f      	b.n	8009810 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	4013      	ands	r3, r2
 80097fa:	68ba      	ldr	r2, [r7, #8]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	bf0c      	ite	eq
 8009800:	2301      	moveq	r3, #1
 8009802:	2300      	movne	r3, #0
 8009804:	b2db      	uxtb	r3, r3
 8009806:	461a      	mov	r2, r3
 8009808:	79fb      	ldrb	r3, [r7, #7]
 800980a:	429a      	cmp	r2, r3
 800980c:	d09f      	beq.n	800974e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3740      	adds	r7, #64	; 0x40
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009818:	b480      	push	{r7}
 800981a:	b085      	sub	sp, #20
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	4613      	mov	r3, r2
 8009824:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	68ba      	ldr	r2, [r7, #8]
 800982a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	88fa      	ldrh	r2, [r7, #6]
 8009830:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	88fa      	ldrh	r2, [r7, #6]
 8009836:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2200      	movs	r2, #0
 800983c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2222      	movs	r2, #34	; 0x22
 8009842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2200      	movs	r2, #0
 800984a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d007      	beq.n	8009866 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	68da      	ldr	r2, [r3, #12]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009864:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	695a      	ldr	r2, [r3, #20]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f042 0201 	orr.w	r2, r2, #1
 8009874:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68da      	ldr	r2, [r3, #12]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f042 0220 	orr.w	r2, r2, #32
 8009884:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3714      	adds	r7, #20
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009894:	b480      	push	{r7}
 8009896:	b095      	sub	sp, #84	; 0x54
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	330c      	adds	r3, #12
 80098a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098a6:	e853 3f00 	ldrex	r3, [r3]
 80098aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80098ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	330c      	adds	r3, #12
 80098ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80098bc:	643a      	str	r2, [r7, #64]	; 0x40
 80098be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80098c4:	e841 2300 	strex	r3, r2, [r1]
 80098c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80098ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d1e5      	bne.n	800989c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	3314      	adds	r3, #20
 80098d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d8:	6a3b      	ldr	r3, [r7, #32]
 80098da:	e853 3f00 	ldrex	r3, [r3]
 80098de:	61fb      	str	r3, [r7, #28]
   return(result);
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	f023 0301 	bic.w	r3, r3, #1
 80098e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	3314      	adds	r3, #20
 80098ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80098f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098f8:	e841 2300 	strex	r3, r2, [r1]
 80098fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009900:	2b00      	cmp	r3, #0
 8009902:	d1e5      	bne.n	80098d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009908:	2b01      	cmp	r3, #1
 800990a:	d119      	bne.n	8009940 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	330c      	adds	r3, #12
 8009912:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	e853 3f00 	ldrex	r3, [r3]
 800991a:	60bb      	str	r3, [r7, #8]
   return(result);
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	f023 0310 	bic.w	r3, r3, #16
 8009922:	647b      	str	r3, [r7, #68]	; 0x44
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	330c      	adds	r3, #12
 800992a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800992c:	61ba      	str	r2, [r7, #24]
 800992e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009930:	6979      	ldr	r1, [r7, #20]
 8009932:	69ba      	ldr	r2, [r7, #24]
 8009934:	e841 2300 	strex	r3, r2, [r1]
 8009938:	613b      	str	r3, [r7, #16]
   return(result);
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d1e5      	bne.n	800990c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2220      	movs	r2, #32
 8009944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800994e:	bf00      	nop
 8009950:	3754      	adds	r7, #84	; 0x54
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr

0800995a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b084      	sub	sp, #16
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009966:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2200      	movs	r2, #0
 800996c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2200      	movs	r2, #0
 8009972:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f7ff fecb 	bl	8009710 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800997a:	bf00      	nop
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009982:	b480      	push	{r7}
 8009984:	b085      	sub	sp, #20
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009990:	b2db      	uxtb	r3, r3
 8009992:	2b21      	cmp	r3, #33	; 0x21
 8009994:	d13e      	bne.n	8009a14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800999e:	d114      	bne.n	80099ca <UART_Transmit_IT+0x48>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d110      	bne.n	80099ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6a1b      	ldr	r3, [r3, #32]
 80099ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	881b      	ldrh	r3, [r3, #0]
 80099b2:	461a      	mov	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a1b      	ldr	r3, [r3, #32]
 80099c2:	1c9a      	adds	r2, r3, #2
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	621a      	str	r2, [r3, #32]
 80099c8:	e008      	b.n	80099dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6a1b      	ldr	r3, [r3, #32]
 80099ce:	1c59      	adds	r1, r3, #1
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	6211      	str	r1, [r2, #32]
 80099d4:	781a      	ldrb	r2, [r3, #0]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	3b01      	subs	r3, #1
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	4619      	mov	r1, r3
 80099ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d10f      	bne.n	8009a10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	68da      	ldr	r2, [r3, #12]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80099fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	68da      	ldr	r2, [r3, #12]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009a10:	2300      	movs	r3, #0
 8009a12:	e000      	b.n	8009a16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009a14:	2302      	movs	r3, #2
  }
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3714      	adds	r7, #20
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr

08009a22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b082      	sub	sp, #8
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	68da      	ldr	r2, [r3, #12]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2220      	movs	r2, #32
 8009a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f7ff fe5a 	bl	80096fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3708      	adds	r7, #8
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b08c      	sub	sp, #48	; 0x30
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	2b22      	cmp	r3, #34	; 0x22
 8009a64:	f040 80ab 	bne.w	8009bbe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a70:	d117      	bne.n	8009aa2 <UART_Receive_IT+0x50>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	691b      	ldr	r3, [r3, #16]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d113      	bne.n	8009aa2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a82:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a90:	b29a      	uxth	r2, r3
 8009a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a9a:	1c9a      	adds	r2, r3, #2
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	629a      	str	r2, [r3, #40]	; 0x28
 8009aa0:	e026      	b.n	8009af0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ab4:	d007      	beq.n	8009ac6 <UART_Receive_IT+0x74>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d10a      	bne.n	8009ad4 <UART_Receive_IT+0x82>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	691b      	ldr	r3, [r3, #16]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d106      	bne.n	8009ad4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	b2da      	uxtb	r2, r3
 8009ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad0:	701a      	strb	r2, [r3, #0]
 8009ad2:	e008      	b.n	8009ae6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ae0:	b2da      	uxtb	r2, r3
 8009ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aea:	1c5a      	adds	r2, r3, #1
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	3b01      	subs	r3, #1
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	4619      	mov	r1, r3
 8009afe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d15a      	bne.n	8009bba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68da      	ldr	r2, [r3, #12]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f022 0220 	bic.w	r2, r2, #32
 8009b12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68da      	ldr	r2, [r3, #12]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	695a      	ldr	r2, [r3, #20]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f022 0201 	bic.w	r2, r2, #1
 8009b32:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2220      	movs	r2, #32
 8009b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d135      	bne.n	8009bb0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	330c      	adds	r3, #12
 8009b50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	e853 3f00 	ldrex	r3, [r3]
 8009b58:	613b      	str	r3, [r7, #16]
   return(result);
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	f023 0310 	bic.w	r3, r3, #16
 8009b60:	627b      	str	r3, [r7, #36]	; 0x24
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	330c      	adds	r3, #12
 8009b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b6a:	623a      	str	r2, [r7, #32]
 8009b6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6e:	69f9      	ldr	r1, [r7, #28]
 8009b70:	6a3a      	ldr	r2, [r7, #32]
 8009b72:	e841 2300 	strex	r3, r2, [r1]
 8009b76:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1e5      	bne.n	8009b4a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f003 0310 	and.w	r3, r3, #16
 8009b88:	2b10      	cmp	r3, #16
 8009b8a:	d10a      	bne.n	8009ba2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	60fb      	str	r3, [r7, #12]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	60fb      	str	r3, [r7, #12]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	60fb      	str	r3, [r7, #12]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f7ff fdbb 	bl	8009724 <HAL_UARTEx_RxEventCallback>
 8009bae:	e002      	b.n	8009bb6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f7f9 fb9b 	bl	80032ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	e002      	b.n	8009bc0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	e000      	b.n	8009bc0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009bbe:	2302      	movs	r3, #2
  }
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3730      	adds	r7, #48	; 0x30
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009bcc:	b0c0      	sub	sp, #256	; 0x100
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	691b      	ldr	r3, [r3, #16]
 8009bdc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009be4:	68d9      	ldr	r1, [r3, #12]
 8009be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	ea40 0301 	orr.w	r3, r0, r1
 8009bf0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bf6:	689a      	ldr	r2, [r3, #8]
 8009bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	431a      	orrs	r2, r3
 8009c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c04:	695b      	ldr	r3, [r3, #20]
 8009c06:	431a      	orrs	r2, r3
 8009c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c0c:	69db      	ldr	r3, [r3, #28]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009c20:	f021 010c 	bic.w	r1, r1, #12
 8009c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009c2e:	430b      	orrs	r3, r1
 8009c30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	695b      	ldr	r3, [r3, #20]
 8009c3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c42:	6999      	ldr	r1, [r3, #24]
 8009c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	ea40 0301 	orr.w	r3, r0, r1
 8009c4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	4b8f      	ldr	r3, [pc, #572]	; (8009e94 <UART_SetConfig+0x2cc>)
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d005      	beq.n	8009c68 <UART_SetConfig+0xa0>
 8009c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	4b8d      	ldr	r3, [pc, #564]	; (8009e98 <UART_SetConfig+0x2d0>)
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d104      	bne.n	8009c72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009c68:	f7fd fd16 	bl	8007698 <HAL_RCC_GetPCLK2Freq>
 8009c6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009c70:	e003      	b.n	8009c7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009c72:	f7fd fcfd 	bl	8007670 <HAL_RCC_GetPCLK1Freq>
 8009c76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c7e:	69db      	ldr	r3, [r3, #28]
 8009c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c84:	f040 810c 	bne.w	8009ea0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009c88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009c92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009c96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009c9a:	4622      	mov	r2, r4
 8009c9c:	462b      	mov	r3, r5
 8009c9e:	1891      	adds	r1, r2, r2
 8009ca0:	65b9      	str	r1, [r7, #88]	; 0x58
 8009ca2:	415b      	adcs	r3, r3
 8009ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ca6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009caa:	4621      	mov	r1, r4
 8009cac:	eb12 0801 	adds.w	r8, r2, r1
 8009cb0:	4629      	mov	r1, r5
 8009cb2:	eb43 0901 	adc.w	r9, r3, r1
 8009cb6:	f04f 0200 	mov.w	r2, #0
 8009cba:	f04f 0300 	mov.w	r3, #0
 8009cbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009cc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009cc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009cca:	4690      	mov	r8, r2
 8009ccc:	4699      	mov	r9, r3
 8009cce:	4623      	mov	r3, r4
 8009cd0:	eb18 0303 	adds.w	r3, r8, r3
 8009cd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009cd8:	462b      	mov	r3, r5
 8009cda:	eb49 0303 	adc.w	r3, r9, r3
 8009cde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009cee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009cf2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	18db      	adds	r3, r3, r3
 8009cfa:	653b      	str	r3, [r7, #80]	; 0x50
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	eb42 0303 	adc.w	r3, r2, r3
 8009d02:	657b      	str	r3, [r7, #84]	; 0x54
 8009d04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009d08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009d0c:	f7f6 fdbe 	bl	800088c <__aeabi_uldivmod>
 8009d10:	4602      	mov	r2, r0
 8009d12:	460b      	mov	r3, r1
 8009d14:	4b61      	ldr	r3, [pc, #388]	; (8009e9c <UART_SetConfig+0x2d4>)
 8009d16:	fba3 2302 	umull	r2, r3, r3, r2
 8009d1a:	095b      	lsrs	r3, r3, #5
 8009d1c:	011c      	lsls	r4, r3, #4
 8009d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d22:	2200      	movs	r2, #0
 8009d24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009d2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009d30:	4642      	mov	r2, r8
 8009d32:	464b      	mov	r3, r9
 8009d34:	1891      	adds	r1, r2, r2
 8009d36:	64b9      	str	r1, [r7, #72]	; 0x48
 8009d38:	415b      	adcs	r3, r3
 8009d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009d40:	4641      	mov	r1, r8
 8009d42:	eb12 0a01 	adds.w	sl, r2, r1
 8009d46:	4649      	mov	r1, r9
 8009d48:	eb43 0b01 	adc.w	fp, r3, r1
 8009d4c:	f04f 0200 	mov.w	r2, #0
 8009d50:	f04f 0300 	mov.w	r3, #0
 8009d54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009d58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009d5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d60:	4692      	mov	sl, r2
 8009d62:	469b      	mov	fp, r3
 8009d64:	4643      	mov	r3, r8
 8009d66:	eb1a 0303 	adds.w	r3, sl, r3
 8009d6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d6e:	464b      	mov	r3, r9
 8009d70:	eb4b 0303 	adc.w	r3, fp, r3
 8009d74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009d84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009d88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	18db      	adds	r3, r3, r3
 8009d90:	643b      	str	r3, [r7, #64]	; 0x40
 8009d92:	4613      	mov	r3, r2
 8009d94:	eb42 0303 	adc.w	r3, r2, r3
 8009d98:	647b      	str	r3, [r7, #68]	; 0x44
 8009d9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009d9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009da2:	f7f6 fd73 	bl	800088c <__aeabi_uldivmod>
 8009da6:	4602      	mov	r2, r0
 8009da8:	460b      	mov	r3, r1
 8009daa:	4611      	mov	r1, r2
 8009dac:	4b3b      	ldr	r3, [pc, #236]	; (8009e9c <UART_SetConfig+0x2d4>)
 8009dae:	fba3 2301 	umull	r2, r3, r3, r1
 8009db2:	095b      	lsrs	r3, r3, #5
 8009db4:	2264      	movs	r2, #100	; 0x64
 8009db6:	fb02 f303 	mul.w	r3, r2, r3
 8009dba:	1acb      	subs	r3, r1, r3
 8009dbc:	00db      	lsls	r3, r3, #3
 8009dbe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009dc2:	4b36      	ldr	r3, [pc, #216]	; (8009e9c <UART_SetConfig+0x2d4>)
 8009dc4:	fba3 2302 	umull	r2, r3, r3, r2
 8009dc8:	095b      	lsrs	r3, r3, #5
 8009dca:	005b      	lsls	r3, r3, #1
 8009dcc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009dd0:	441c      	add	r4, r3
 8009dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ddc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009de0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009de4:	4642      	mov	r2, r8
 8009de6:	464b      	mov	r3, r9
 8009de8:	1891      	adds	r1, r2, r2
 8009dea:	63b9      	str	r1, [r7, #56]	; 0x38
 8009dec:	415b      	adcs	r3, r3
 8009dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009df0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009df4:	4641      	mov	r1, r8
 8009df6:	1851      	adds	r1, r2, r1
 8009df8:	6339      	str	r1, [r7, #48]	; 0x30
 8009dfa:	4649      	mov	r1, r9
 8009dfc:	414b      	adcs	r3, r1
 8009dfe:	637b      	str	r3, [r7, #52]	; 0x34
 8009e00:	f04f 0200 	mov.w	r2, #0
 8009e04:	f04f 0300 	mov.w	r3, #0
 8009e08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009e0c:	4659      	mov	r1, fp
 8009e0e:	00cb      	lsls	r3, r1, #3
 8009e10:	4651      	mov	r1, sl
 8009e12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e16:	4651      	mov	r1, sl
 8009e18:	00ca      	lsls	r2, r1, #3
 8009e1a:	4610      	mov	r0, r2
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	4603      	mov	r3, r0
 8009e20:	4642      	mov	r2, r8
 8009e22:	189b      	adds	r3, r3, r2
 8009e24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009e28:	464b      	mov	r3, r9
 8009e2a:	460a      	mov	r2, r1
 8009e2c:	eb42 0303 	adc.w	r3, r2, r3
 8009e30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009e40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009e44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009e48:	460b      	mov	r3, r1
 8009e4a:	18db      	adds	r3, r3, r3
 8009e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e4e:	4613      	mov	r3, r2
 8009e50:	eb42 0303 	adc.w	r3, r2, r3
 8009e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009e5e:	f7f6 fd15 	bl	800088c <__aeabi_uldivmod>
 8009e62:	4602      	mov	r2, r0
 8009e64:	460b      	mov	r3, r1
 8009e66:	4b0d      	ldr	r3, [pc, #52]	; (8009e9c <UART_SetConfig+0x2d4>)
 8009e68:	fba3 1302 	umull	r1, r3, r3, r2
 8009e6c:	095b      	lsrs	r3, r3, #5
 8009e6e:	2164      	movs	r1, #100	; 0x64
 8009e70:	fb01 f303 	mul.w	r3, r1, r3
 8009e74:	1ad3      	subs	r3, r2, r3
 8009e76:	00db      	lsls	r3, r3, #3
 8009e78:	3332      	adds	r3, #50	; 0x32
 8009e7a:	4a08      	ldr	r2, [pc, #32]	; (8009e9c <UART_SetConfig+0x2d4>)
 8009e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e80:	095b      	lsrs	r3, r3, #5
 8009e82:	f003 0207 	and.w	r2, r3, #7
 8009e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4422      	add	r2, r4
 8009e8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009e90:	e105      	b.n	800a09e <UART_SetConfig+0x4d6>
 8009e92:	bf00      	nop
 8009e94:	40011000 	.word	0x40011000
 8009e98:	40011400 	.word	0x40011400
 8009e9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009eaa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009eae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009eb2:	4642      	mov	r2, r8
 8009eb4:	464b      	mov	r3, r9
 8009eb6:	1891      	adds	r1, r2, r2
 8009eb8:	6239      	str	r1, [r7, #32]
 8009eba:	415b      	adcs	r3, r3
 8009ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8009ebe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009ec2:	4641      	mov	r1, r8
 8009ec4:	1854      	adds	r4, r2, r1
 8009ec6:	4649      	mov	r1, r9
 8009ec8:	eb43 0501 	adc.w	r5, r3, r1
 8009ecc:	f04f 0200 	mov.w	r2, #0
 8009ed0:	f04f 0300 	mov.w	r3, #0
 8009ed4:	00eb      	lsls	r3, r5, #3
 8009ed6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009eda:	00e2      	lsls	r2, r4, #3
 8009edc:	4614      	mov	r4, r2
 8009ede:	461d      	mov	r5, r3
 8009ee0:	4643      	mov	r3, r8
 8009ee2:	18e3      	adds	r3, r4, r3
 8009ee4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009ee8:	464b      	mov	r3, r9
 8009eea:	eb45 0303 	adc.w	r3, r5, r3
 8009eee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009efe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009f02:	f04f 0200 	mov.w	r2, #0
 8009f06:	f04f 0300 	mov.w	r3, #0
 8009f0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009f0e:	4629      	mov	r1, r5
 8009f10:	008b      	lsls	r3, r1, #2
 8009f12:	4621      	mov	r1, r4
 8009f14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f18:	4621      	mov	r1, r4
 8009f1a:	008a      	lsls	r2, r1, #2
 8009f1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009f20:	f7f6 fcb4 	bl	800088c <__aeabi_uldivmod>
 8009f24:	4602      	mov	r2, r0
 8009f26:	460b      	mov	r3, r1
 8009f28:	4b60      	ldr	r3, [pc, #384]	; (800a0ac <UART_SetConfig+0x4e4>)
 8009f2a:	fba3 2302 	umull	r2, r3, r3, r2
 8009f2e:	095b      	lsrs	r3, r3, #5
 8009f30:	011c      	lsls	r4, r3, #4
 8009f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f36:	2200      	movs	r2, #0
 8009f38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009f3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009f40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009f44:	4642      	mov	r2, r8
 8009f46:	464b      	mov	r3, r9
 8009f48:	1891      	adds	r1, r2, r2
 8009f4a:	61b9      	str	r1, [r7, #24]
 8009f4c:	415b      	adcs	r3, r3
 8009f4e:	61fb      	str	r3, [r7, #28]
 8009f50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f54:	4641      	mov	r1, r8
 8009f56:	1851      	adds	r1, r2, r1
 8009f58:	6139      	str	r1, [r7, #16]
 8009f5a:	4649      	mov	r1, r9
 8009f5c:	414b      	adcs	r3, r1
 8009f5e:	617b      	str	r3, [r7, #20]
 8009f60:	f04f 0200 	mov.w	r2, #0
 8009f64:	f04f 0300 	mov.w	r3, #0
 8009f68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009f6c:	4659      	mov	r1, fp
 8009f6e:	00cb      	lsls	r3, r1, #3
 8009f70:	4651      	mov	r1, sl
 8009f72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f76:	4651      	mov	r1, sl
 8009f78:	00ca      	lsls	r2, r1, #3
 8009f7a:	4610      	mov	r0, r2
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	4603      	mov	r3, r0
 8009f80:	4642      	mov	r2, r8
 8009f82:	189b      	adds	r3, r3, r2
 8009f84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f88:	464b      	mov	r3, r9
 8009f8a:	460a      	mov	r2, r1
 8009f8c:	eb42 0303 	adc.w	r3, r2, r3
 8009f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009f9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009fa0:	f04f 0200 	mov.w	r2, #0
 8009fa4:	f04f 0300 	mov.w	r3, #0
 8009fa8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009fac:	4649      	mov	r1, r9
 8009fae:	008b      	lsls	r3, r1, #2
 8009fb0:	4641      	mov	r1, r8
 8009fb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fb6:	4641      	mov	r1, r8
 8009fb8:	008a      	lsls	r2, r1, #2
 8009fba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009fbe:	f7f6 fc65 	bl	800088c <__aeabi_uldivmod>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	4b39      	ldr	r3, [pc, #228]	; (800a0ac <UART_SetConfig+0x4e4>)
 8009fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8009fcc:	095b      	lsrs	r3, r3, #5
 8009fce:	2164      	movs	r1, #100	; 0x64
 8009fd0:	fb01 f303 	mul.w	r3, r1, r3
 8009fd4:	1ad3      	subs	r3, r2, r3
 8009fd6:	011b      	lsls	r3, r3, #4
 8009fd8:	3332      	adds	r3, #50	; 0x32
 8009fda:	4a34      	ldr	r2, [pc, #208]	; (800a0ac <UART_SetConfig+0x4e4>)
 8009fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8009fe0:	095b      	lsrs	r3, r3, #5
 8009fe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009fe6:	441c      	add	r4, r3
 8009fe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fec:	2200      	movs	r2, #0
 8009fee:	673b      	str	r3, [r7, #112]	; 0x70
 8009ff0:	677a      	str	r2, [r7, #116]	; 0x74
 8009ff2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009ff6:	4642      	mov	r2, r8
 8009ff8:	464b      	mov	r3, r9
 8009ffa:	1891      	adds	r1, r2, r2
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	415b      	adcs	r3, r3
 800a000:	60fb      	str	r3, [r7, #12]
 800a002:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a006:	4641      	mov	r1, r8
 800a008:	1851      	adds	r1, r2, r1
 800a00a:	6039      	str	r1, [r7, #0]
 800a00c:	4649      	mov	r1, r9
 800a00e:	414b      	adcs	r3, r1
 800a010:	607b      	str	r3, [r7, #4]
 800a012:	f04f 0200 	mov.w	r2, #0
 800a016:	f04f 0300 	mov.w	r3, #0
 800a01a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a01e:	4659      	mov	r1, fp
 800a020:	00cb      	lsls	r3, r1, #3
 800a022:	4651      	mov	r1, sl
 800a024:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a028:	4651      	mov	r1, sl
 800a02a:	00ca      	lsls	r2, r1, #3
 800a02c:	4610      	mov	r0, r2
 800a02e:	4619      	mov	r1, r3
 800a030:	4603      	mov	r3, r0
 800a032:	4642      	mov	r2, r8
 800a034:	189b      	adds	r3, r3, r2
 800a036:	66bb      	str	r3, [r7, #104]	; 0x68
 800a038:	464b      	mov	r3, r9
 800a03a:	460a      	mov	r2, r1
 800a03c:	eb42 0303 	adc.w	r3, r2, r3
 800a040:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	663b      	str	r3, [r7, #96]	; 0x60
 800a04c:	667a      	str	r2, [r7, #100]	; 0x64
 800a04e:	f04f 0200 	mov.w	r2, #0
 800a052:	f04f 0300 	mov.w	r3, #0
 800a056:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a05a:	4649      	mov	r1, r9
 800a05c:	008b      	lsls	r3, r1, #2
 800a05e:	4641      	mov	r1, r8
 800a060:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a064:	4641      	mov	r1, r8
 800a066:	008a      	lsls	r2, r1, #2
 800a068:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a06c:	f7f6 fc0e 	bl	800088c <__aeabi_uldivmod>
 800a070:	4602      	mov	r2, r0
 800a072:	460b      	mov	r3, r1
 800a074:	4b0d      	ldr	r3, [pc, #52]	; (800a0ac <UART_SetConfig+0x4e4>)
 800a076:	fba3 1302 	umull	r1, r3, r3, r2
 800a07a:	095b      	lsrs	r3, r3, #5
 800a07c:	2164      	movs	r1, #100	; 0x64
 800a07e:	fb01 f303 	mul.w	r3, r1, r3
 800a082:	1ad3      	subs	r3, r2, r3
 800a084:	011b      	lsls	r3, r3, #4
 800a086:	3332      	adds	r3, #50	; 0x32
 800a088:	4a08      	ldr	r2, [pc, #32]	; (800a0ac <UART_SetConfig+0x4e4>)
 800a08a:	fba2 2303 	umull	r2, r3, r2, r3
 800a08e:	095b      	lsrs	r3, r3, #5
 800a090:	f003 020f 	and.w	r2, r3, #15
 800a094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4422      	add	r2, r4
 800a09c:	609a      	str	r2, [r3, #8]
}
 800a09e:	bf00      	nop
 800a0a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a0aa:	bf00      	nop
 800a0ac:	51eb851f 	.word	0x51eb851f

0800a0b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a0b0:	b084      	sub	sp, #16
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b084      	sub	sp, #16
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
 800a0ba:	f107 001c 	add.w	r0, r7, #28
 800a0be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d122      	bne.n	800a10e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a0dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a0f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d105      	bne.n	800a102 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f9c0 	bl	800a488 <USB_CoreReset>
 800a108:	4603      	mov	r3, r0
 800a10a:	73fb      	strb	r3, [r7, #15]
 800a10c:	e01a      	b.n	800a144 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	68db      	ldr	r3, [r3, #12]
 800a112:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 f9b4 	bl	800a488 <USB_CoreReset>
 800a120:	4603      	mov	r3, r0
 800a122:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a126:	2b00      	cmp	r3, #0
 800a128:	d106      	bne.n	800a138 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a12e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	639a      	str	r2, [r3, #56]	; 0x38
 800a136:	e005      	b.n	800a144 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a13c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a146:	2b01      	cmp	r3, #1
 800a148:	d10b      	bne.n	800a162 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	f043 0206 	orr.w	r2, r3, #6
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	f043 0220 	orr.w	r2, r3, #32
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a162:	7bfb      	ldrb	r3, [r7, #15]
}
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a16e:	b004      	add	sp, #16
 800a170:	4770      	bx	lr

0800a172 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a172:	b480      	push	{r7}
 800a174:	b083      	sub	sp, #12
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	f043 0201 	orr.w	r2, r3, #1
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a186:	2300      	movs	r3, #0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	370c      	adds	r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr

0800a194 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	689b      	ldr	r3, [r3, #8]
 800a1a0:	f023 0201 	bic.w	r2, r3, #1
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a1a8:	2300      	movs	r3, #0
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	370c      	adds	r7, #12
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr

0800a1b6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b084      	sub	sp, #16
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
 800a1be:	460b      	mov	r3, r1
 800a1c0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a1d2:	78fb      	ldrb	r3, [r7, #3]
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d115      	bne.n	800a204 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a1e4:	2001      	movs	r0, #1
 800a1e6:	f7fa fac1 	bl	800476c <HAL_Delay>
      ms++;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 f93a 	bl	800a46a <USB_GetMode>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d01e      	beq.n	800a23a <USB_SetCurrentMode+0x84>
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2b31      	cmp	r3, #49	; 0x31
 800a200:	d9f0      	bls.n	800a1e4 <USB_SetCurrentMode+0x2e>
 800a202:	e01a      	b.n	800a23a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a204:	78fb      	ldrb	r3, [r7, #3]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d115      	bne.n	800a236 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a216:	2001      	movs	r0, #1
 800a218:	f7fa faa8 	bl	800476c <HAL_Delay>
      ms++;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	3301      	adds	r3, #1
 800a220:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f921 	bl	800a46a <USB_GetMode>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d005      	beq.n	800a23a <USB_SetCurrentMode+0x84>
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2b31      	cmp	r3, #49	; 0x31
 800a232:	d9f0      	bls.n	800a216 <USB_SetCurrentMode+0x60>
 800a234:	e001      	b.n	800a23a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a236:	2301      	movs	r3, #1
 800a238:	e005      	b.n	800a246 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2b32      	cmp	r3, #50	; 0x32
 800a23e:	d101      	bne.n	800a244 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a240:	2301      	movs	r3, #1
 800a242:	e000      	b.n	800a246 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
	...

0800a250 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a250:	b480      	push	{r7}
 800a252:	b085      	sub	sp, #20
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a25a:	2300      	movs	r3, #0
 800a25c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	3301      	adds	r3, #1
 800a262:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	4a13      	ldr	r2, [pc, #76]	; (800a2b4 <USB_FlushTxFifo+0x64>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d901      	bls.n	800a270 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a26c:	2303      	movs	r3, #3
 800a26e:	e01b      	b.n	800a2a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	691b      	ldr	r3, [r3, #16]
 800a274:	2b00      	cmp	r3, #0
 800a276:	daf2      	bge.n	800a25e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a278:	2300      	movs	r3, #0
 800a27a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	019b      	lsls	r3, r3, #6
 800a280:	f043 0220 	orr.w	r2, r3, #32
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	3301      	adds	r3, #1
 800a28c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	4a08      	ldr	r2, [pc, #32]	; (800a2b4 <USB_FlushTxFifo+0x64>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d901      	bls.n	800a29a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a296:	2303      	movs	r3, #3
 800a298:	e006      	b.n	800a2a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	691b      	ldr	r3, [r3, #16]
 800a29e:	f003 0320 	and.w	r3, r3, #32
 800a2a2:	2b20      	cmp	r3, #32
 800a2a4:	d0f0      	beq.n	800a288 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a2a6:	2300      	movs	r3, #0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3714      	adds	r7, #20
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr
 800a2b4:	00030d40 	.word	0x00030d40

0800a2b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b085      	sub	sp, #20
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	4a11      	ldr	r2, [pc, #68]	; (800a314 <USB_FlushRxFifo+0x5c>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d901      	bls.n	800a2d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a2d2:	2303      	movs	r3, #3
 800a2d4:	e018      	b.n	800a308 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	691b      	ldr	r3, [r3, #16]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	daf2      	bge.n	800a2c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2210      	movs	r2, #16
 800a2e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	4a08      	ldr	r2, [pc, #32]	; (800a314 <USB_FlushRxFifo+0x5c>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d901      	bls.n	800a2fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a2f6:	2303      	movs	r3, #3
 800a2f8:	e006      	b.n	800a308 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	691b      	ldr	r3, [r3, #16]
 800a2fe:	f003 0310 	and.w	r3, r3, #16
 800a302:	2b10      	cmp	r3, #16
 800a304:	d0f0      	beq.n	800a2e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a306:	2300      	movs	r3, #0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3714      	adds	r7, #20
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr
 800a314:	00030d40 	.word	0x00030d40

0800a318 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a318:	b480      	push	{r7}
 800a31a:	b089      	sub	sp, #36	; 0x24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	4611      	mov	r1, r2
 800a324:	461a      	mov	r2, r3
 800a326:	460b      	mov	r3, r1
 800a328:	71fb      	strb	r3, [r7, #7]
 800a32a:	4613      	mov	r3, r2
 800a32c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a336:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d123      	bne.n	800a386 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a33e:	88bb      	ldrh	r3, [r7, #4]
 800a340:	3303      	adds	r3, #3
 800a342:	089b      	lsrs	r3, r3, #2
 800a344:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a346:	2300      	movs	r3, #0
 800a348:	61bb      	str	r3, [r7, #24]
 800a34a:	e018      	b.n	800a37e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a34c:	79fb      	ldrb	r3, [r7, #7]
 800a34e:	031a      	lsls	r2, r3, #12
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	4413      	add	r3, r2
 800a354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a358:	461a      	mov	r2, r3
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	3301      	adds	r3, #1
 800a364:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	3301      	adds	r3, #1
 800a36a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	3301      	adds	r3, #1
 800a370:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a372:	69fb      	ldr	r3, [r7, #28]
 800a374:	3301      	adds	r3, #1
 800a376:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	3301      	adds	r3, #1
 800a37c:	61bb      	str	r3, [r7, #24]
 800a37e:	69ba      	ldr	r2, [r7, #24]
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	429a      	cmp	r2, r3
 800a384:	d3e2      	bcc.n	800a34c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a386:	2300      	movs	r3, #0
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3724      	adds	r7, #36	; 0x24
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a394:	b480      	push	{r7}
 800a396:	b08b      	sub	sp, #44	; 0x2c
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	4613      	mov	r3, r2
 800a3a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a3aa:	88fb      	ldrh	r3, [r7, #6]
 800a3ac:	089b      	lsrs	r3, r3, #2
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a3b2:	88fb      	ldrh	r3, [r7, #6]
 800a3b4:	f003 0303 	and.w	r3, r3, #3
 800a3b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	623b      	str	r3, [r7, #32]
 800a3be:	e014      	b.n	800a3ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ca:	601a      	str	r2, [r3, #0]
    pDest++;
 800a3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3da:	3301      	adds	r3, #1
 800a3dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a3e4:	6a3b      	ldr	r3, [r7, #32]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	623b      	str	r3, [r7, #32]
 800a3ea:	6a3a      	ldr	r2, [r7, #32]
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d3e6      	bcc.n	800a3c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a3f2:	8bfb      	ldrh	r3, [r7, #30]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d01e      	beq.n	800a436 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a402:	461a      	mov	r2, r3
 800a404:	f107 0310 	add.w	r3, r7, #16
 800a408:	6812      	ldr	r2, [r2, #0]
 800a40a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a40c:	693a      	ldr	r2, [r7, #16]
 800a40e:	6a3b      	ldr	r3, [r7, #32]
 800a410:	b2db      	uxtb	r3, r3
 800a412:	00db      	lsls	r3, r3, #3
 800a414:	fa22 f303 	lsr.w	r3, r2, r3
 800a418:	b2da      	uxtb	r2, r3
 800a41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41c:	701a      	strb	r2, [r3, #0]
      i++;
 800a41e:	6a3b      	ldr	r3, [r7, #32]
 800a420:	3301      	adds	r3, #1
 800a422:	623b      	str	r3, [r7, #32]
      pDest++;
 800a424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a426:	3301      	adds	r3, #1
 800a428:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a42a:	8bfb      	ldrh	r3, [r7, #30]
 800a42c:	3b01      	subs	r3, #1
 800a42e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a430:	8bfb      	ldrh	r3, [r7, #30]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d1ea      	bne.n	800a40c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a438:	4618      	mov	r0, r3
 800a43a:	372c      	adds	r7, #44	; 0x2c
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a444:	b480      	push	{r7}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	695b      	ldr	r3, [r3, #20]
 800a450:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	699b      	ldr	r3, [r3, #24]
 800a456:	68fa      	ldr	r2, [r7, #12]
 800a458:	4013      	ands	r3, r2
 800a45a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a45c:	68fb      	ldr	r3, [r7, #12]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3714      	adds	r7, #20
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr

0800a46a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a46a:	b480      	push	{r7}
 800a46c:	b083      	sub	sp, #12
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	695b      	ldr	r3, [r3, #20]
 800a476:	f003 0301 	and.w	r3, r3, #1
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	370c      	adds	r7, #12
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr
	...

0800a488 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a488:	b480      	push	{r7}
 800a48a:	b085      	sub	sp, #20
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a490:	2300      	movs	r3, #0
 800a492:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	3301      	adds	r3, #1
 800a498:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	4a13      	ldr	r2, [pc, #76]	; (800a4ec <USB_CoreReset+0x64>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d901      	bls.n	800a4a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a4a2:	2303      	movs	r3, #3
 800a4a4:	e01b      	b.n	800a4de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	691b      	ldr	r3, [r3, #16]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	daf2      	bge.n	800a494 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	691b      	ldr	r3, [r3, #16]
 800a4b6:	f043 0201 	orr.w	r2, r3, #1
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	4a09      	ldr	r2, [pc, #36]	; (800a4ec <USB_CoreReset+0x64>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d901      	bls.n	800a4d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a4cc:	2303      	movs	r3, #3
 800a4ce:	e006      	b.n	800a4de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	f003 0301 	and.w	r3, r3, #1
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d0f0      	beq.n	800a4be <USB_CoreReset+0x36>

  return HAL_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3714      	adds	r7, #20
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr
 800a4ea:	bf00      	nop
 800a4ec:	00030d40 	.word	0x00030d40

0800a4f0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a4f0:	b084      	sub	sp, #16
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b086      	sub	sp, #24
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
 800a4fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a4fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a502:	2300      	movs	r3, #0
 800a504:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a510:	461a      	mov	r2, r3
 800a512:	2300      	movs	r3, #0
 800a514:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a51a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a526:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a532:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a53e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a542:	2b00      	cmp	r3, #0
 800a544:	d018      	beq.n	800a578 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d10a      	bne.n	800a562 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	68fa      	ldr	r2, [r7, #12]
 800a556:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a55a:	f043 0304 	orr.w	r3, r3, #4
 800a55e:	6013      	str	r3, [r2, #0]
 800a560:	e014      	b.n	800a58c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	68fa      	ldr	r2, [r7, #12]
 800a56c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a570:	f023 0304 	bic.w	r3, r3, #4
 800a574:	6013      	str	r3, [r2, #0]
 800a576:	e009      	b.n	800a58c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	68fa      	ldr	r2, [r7, #12]
 800a582:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a586:	f023 0304 	bic.w	r3, r3, #4
 800a58a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a58c:	2110      	movs	r1, #16
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f7ff fe5e 	bl	800a250 <USB_FlushTxFifo>
 800a594:	4603      	mov	r3, r0
 800a596:	2b00      	cmp	r3, #0
 800a598:	d001      	beq.n	800a59e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f7ff fe8a 	bl	800a2b8 <USB_FlushRxFifo>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d001      	beq.n	800a5ae <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	613b      	str	r3, [r7, #16]
 800a5b2:	e015      	b.n	800a5e0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	015a      	lsls	r2, r3, #5
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	4413      	add	r3, r2
 800a5bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5c6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	015a      	lsls	r2, r3, #5
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	613b      	str	r3, [r7, #16]
 800a5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e2:	693a      	ldr	r2, [r7, #16]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d3e5      	bcc.n	800a5b4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5f4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00b      	beq.n	800a61a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a608:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4a13      	ldr	r2, [pc, #76]	; (800a65c <USB_HostInit+0x16c>)
 800a60e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4a13      	ldr	r2, [pc, #76]	; (800a660 <USB_HostInit+0x170>)
 800a614:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a618:	e009      	b.n	800a62e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2280      	movs	r2, #128	; 0x80
 800a61e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4a10      	ldr	r2, [pc, #64]	; (800a664 <USB_HostInit+0x174>)
 800a624:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4a0f      	ldr	r2, [pc, #60]	; (800a668 <USB_HostInit+0x178>)
 800a62a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a630:	2b00      	cmp	r3, #0
 800a632:	d105      	bne.n	800a640 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	699b      	ldr	r3, [r3, #24]
 800a638:	f043 0210 	orr.w	r2, r3, #16
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	699a      	ldr	r2, [r3, #24]
 800a644:	4b09      	ldr	r3, [pc, #36]	; (800a66c <USB_HostInit+0x17c>)
 800a646:	4313      	orrs	r3, r2
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800a64c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3718      	adds	r7, #24
 800a652:	46bd      	mov	sp, r7
 800a654:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a658:	b004      	add	sp, #16
 800a65a:	4770      	bx	lr
 800a65c:	01000200 	.word	0x01000200
 800a660:	00e00300 	.word	0x00e00300
 800a664:	00600080 	.word	0x00600080
 800a668:	004000e0 	.word	0x004000e0
 800a66c:	a3200008 	.word	0xa3200008

0800a670 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a670:	b480      	push	{r7}
 800a672:	b085      	sub	sp, #20
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	460b      	mov	r3, r1
 800a67a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	68fa      	ldr	r2, [r7, #12]
 800a68a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a68e:	f023 0303 	bic.w	r3, r3, #3
 800a692:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	78fb      	ldrb	r3, [r7, #3]
 800a69e:	f003 0303 	and.w	r3, r3, #3
 800a6a2:	68f9      	ldr	r1, [r7, #12]
 800a6a4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a6ac:	78fb      	ldrb	r3, [r7, #3]
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d107      	bne.n	800a6c2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a6be:	6053      	str	r3, [r2, #4]
 800a6c0:	e009      	b.n	800a6d6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a6c2:	78fb      	ldrb	r3, [r7, #3]
 800a6c4:	2b02      	cmp	r3, #2
 800a6c6:	d106      	bne.n	800a6d6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	f241 7370 	movw	r3, #6000	; 0x1770
 800a6d4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a6d6:	2300      	movs	r3, #0
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3714      	adds	r7, #20
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a704:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a70e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a712:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a714:	2064      	movs	r0, #100	; 0x64
 800a716:	f7fa f829 	bl	800476c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	68fa      	ldr	r2, [r7, #12]
 800a71e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a722:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a726:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a728:	200a      	movs	r0, #10
 800a72a:	f7fa f81f 	bl	800476c <HAL_Delay>

  return HAL_OK;
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	3710      	adds	r7, #16
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a738:	b480      	push	{r7}
 800a73a:	b085      	sub	sp, #20
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	460b      	mov	r3, r1
 800a742:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a748:	2300      	movs	r3, #0
 800a74a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a75c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a764:	2b00      	cmp	r3, #0
 800a766:	d109      	bne.n	800a77c <USB_DriveVbus+0x44>
 800a768:	78fb      	ldrb	r3, [r7, #3]
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d106      	bne.n	800a77c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	68fa      	ldr	r2, [r7, #12]
 800a772:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a776:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a77a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a786:	d109      	bne.n	800a79c <USB_DriveVbus+0x64>
 800a788:	78fb      	ldrb	r3, [r7, #3]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d106      	bne.n	800a79c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a796:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a79a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3714      	adds	r7, #20
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b085      	sub	sp, #20
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	0c5b      	lsrs	r3, r3, #17
 800a7c8:	f003 0303 	and.w	r3, r3, #3
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3714      	adds	r7, #20
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	b29b      	uxth	r3, r3
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3714      	adds	r7, #20
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr
	...

0800a7fc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b088      	sub	sp, #32
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	4608      	mov	r0, r1
 800a806:	4611      	mov	r1, r2
 800a808:	461a      	mov	r2, r3
 800a80a:	4603      	mov	r3, r0
 800a80c:	70fb      	strb	r3, [r7, #3]
 800a80e:	460b      	mov	r3, r1
 800a810:	70bb      	strb	r3, [r7, #2]
 800a812:	4613      	mov	r3, r2
 800a814:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a816:	2300      	movs	r3, #0
 800a818:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800a81e:	78fb      	ldrb	r3, [r7, #3]
 800a820:	015a      	lsls	r2, r3, #5
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	4413      	add	r3, r2
 800a826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a82a:	461a      	mov	r2, r3
 800a82c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a830:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a832:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a836:	2b03      	cmp	r3, #3
 800a838:	d87e      	bhi.n	800a938 <USB_HC_Init+0x13c>
 800a83a:	a201      	add	r2, pc, #4	; (adr r2, 800a840 <USB_HC_Init+0x44>)
 800a83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a840:	0800a851 	.word	0x0800a851
 800a844:	0800a8fb 	.word	0x0800a8fb
 800a848:	0800a851 	.word	0x0800a851
 800a84c:	0800a8bd 	.word	0x0800a8bd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a850:	78fb      	ldrb	r3, [r7, #3]
 800a852:	015a      	lsls	r2, r3, #5
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	4413      	add	r3, r2
 800a858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a85c:	461a      	mov	r2, r3
 800a85e:	f240 439d 	movw	r3, #1181	; 0x49d
 800a862:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a864:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	da10      	bge.n	800a88e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a86c:	78fb      	ldrb	r3, [r7, #3]
 800a86e:	015a      	lsls	r2, r3, #5
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	4413      	add	r3, r2
 800a874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a878:	68db      	ldr	r3, [r3, #12]
 800a87a:	78fa      	ldrb	r2, [r7, #3]
 800a87c:	0151      	lsls	r1, r2, #5
 800a87e:	693a      	ldr	r2, [r7, #16]
 800a880:	440a      	add	r2, r1
 800a882:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a88a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800a88c:	e057      	b.n	800a93e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a896:	2b00      	cmp	r3, #0
 800a898:	d051      	beq.n	800a93e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a89a:	78fb      	ldrb	r3, [r7, #3]
 800a89c:	015a      	lsls	r2, r3, #5
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	78fa      	ldrb	r2, [r7, #3]
 800a8aa:	0151      	lsls	r1, r2, #5
 800a8ac:	693a      	ldr	r2, [r7, #16]
 800a8ae:	440a      	add	r2, r1
 800a8b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a8b8:	60d3      	str	r3, [r2, #12]
      break;
 800a8ba:	e040      	b.n	800a93e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a8bc:	78fb      	ldrb	r3, [r7, #3]
 800a8be:	015a      	lsls	r2, r3, #5
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	f240 639d 	movw	r3, #1693	; 0x69d
 800a8ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a8d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	da34      	bge.n	800a942 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a8d8:	78fb      	ldrb	r3, [r7, #3]
 800a8da:	015a      	lsls	r2, r3, #5
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	4413      	add	r3, r2
 800a8e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	78fa      	ldrb	r2, [r7, #3]
 800a8e8:	0151      	lsls	r1, r2, #5
 800a8ea:	693a      	ldr	r2, [r7, #16]
 800a8ec:	440a      	add	r2, r1
 800a8ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8f6:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a8f8:	e023      	b.n	800a942 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a8fa:	78fb      	ldrb	r3, [r7, #3]
 800a8fc:	015a      	lsls	r2, r3, #5
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	4413      	add	r3, r2
 800a902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a906:	461a      	mov	r2, r3
 800a908:	f240 2325 	movw	r3, #549	; 0x225
 800a90c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a90e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a912:	2b00      	cmp	r3, #0
 800a914:	da17      	bge.n	800a946 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a916:	78fb      	ldrb	r3, [r7, #3]
 800a918:	015a      	lsls	r2, r3, #5
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	4413      	add	r3, r2
 800a91e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	78fa      	ldrb	r2, [r7, #3]
 800a926:	0151      	lsls	r1, r2, #5
 800a928:	693a      	ldr	r2, [r7, #16]
 800a92a:	440a      	add	r2, r1
 800a92c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a930:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a934:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a936:	e006      	b.n	800a946 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a938:	2301      	movs	r3, #1
 800a93a:	77fb      	strb	r3, [r7, #31]
      break;
 800a93c:	e004      	b.n	800a948 <USB_HC_Init+0x14c>
      break;
 800a93e:	bf00      	nop
 800a940:	e002      	b.n	800a948 <USB_HC_Init+0x14c>
      break;
 800a942:	bf00      	nop
 800a944:	e000      	b.n	800a948 <USB_HC_Init+0x14c>
      break;
 800a946:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a948:	78fb      	ldrb	r3, [r7, #3]
 800a94a:	015a      	lsls	r2, r3, #5
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	4413      	add	r3, r2
 800a950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	78fa      	ldrb	r2, [r7, #3]
 800a958:	0151      	lsls	r1, r2, #5
 800a95a:	693a      	ldr	r2, [r7, #16]
 800a95c:	440a      	add	r2, r1
 800a95e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a962:	f043 0302 	orr.w	r3, r3, #2
 800a966:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a96e:	699a      	ldr	r2, [r3, #24]
 800a970:	78fb      	ldrb	r3, [r7, #3]
 800a972:	f003 030f 	and.w	r3, r3, #15
 800a976:	2101      	movs	r1, #1
 800a978:	fa01 f303 	lsl.w	r3, r1, r3
 800a97c:	6939      	ldr	r1, [r7, #16]
 800a97e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a982:	4313      	orrs	r3, r2
 800a984:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	699b      	ldr	r3, [r3, #24]
 800a98a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a992:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a996:	2b00      	cmp	r3, #0
 800a998:	da03      	bge.n	800a9a2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a99a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a99e:	61bb      	str	r3, [r7, #24]
 800a9a0:	e001      	b.n	800a9a6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f7ff feff 	bl	800a7aa <USB_GetHostSpeed>
 800a9ac:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a9ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a9b2:	2b02      	cmp	r3, #2
 800a9b4:	d106      	bne.n	800a9c4 <USB_HC_Init+0x1c8>
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2b02      	cmp	r3, #2
 800a9ba:	d003      	beq.n	800a9c4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a9bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a9c0:	617b      	str	r3, [r7, #20]
 800a9c2:	e001      	b.n	800a9c8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a9c8:	787b      	ldrb	r3, [r7, #1]
 800a9ca:	059b      	lsls	r3, r3, #22
 800a9cc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a9d0:	78bb      	ldrb	r3, [r7, #2]
 800a9d2:	02db      	lsls	r3, r3, #11
 800a9d4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a9d8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a9da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a9de:	049b      	lsls	r3, r3, #18
 800a9e0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a9e4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a9e6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a9e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a9ec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a9ee:	69bb      	ldr	r3, [r7, #24]
 800a9f0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a9f2:	78fb      	ldrb	r3, [r7, #3]
 800a9f4:	0159      	lsls	r1, r3, #5
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	440b      	add	r3, r1
 800a9fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9fe:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800aa04:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800aa06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800aa0a:	2b03      	cmp	r3, #3
 800aa0c:	d003      	beq.n	800aa16 <USB_HC_Init+0x21a>
 800aa0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d10f      	bne.n	800aa36 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800aa16:	78fb      	ldrb	r3, [r7, #3]
 800aa18:	015a      	lsls	r2, r3, #5
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	78fa      	ldrb	r2, [r7, #3]
 800aa26:	0151      	lsls	r1, r2, #5
 800aa28:	693a      	ldr	r2, [r7, #16]
 800aa2a:	440a      	add	r2, r1
 800aa2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aa34:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800aa36:	7ffb      	ldrb	r3, [r7, #31]
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3720      	adds	r7, #32
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b08c      	sub	sp, #48	; 0x30
 800aa44:	af02      	add	r7, sp, #8
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	4613      	mov	r3, r2
 800aa4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	785b      	ldrb	r3, [r3, #1]
 800aa56:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800aa58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa5c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d02d      	beq.n	800aac6 <USB_HC_StartXfer+0x86>
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	791b      	ldrb	r3, [r3, #4]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d129      	bne.n	800aac6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800aa72:	79fb      	ldrb	r3, [r7, #7]
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d117      	bne.n	800aaa8 <USB_HC_StartXfer+0x68>
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	79db      	ldrb	r3, [r3, #7]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d003      	beq.n	800aa88 <USB_HC_StartXfer+0x48>
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	79db      	ldrb	r3, [r3, #7]
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	d10f      	bne.n	800aaa8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	015a      	lsls	r2, r3, #5
 800aa8c:	6a3b      	ldr	r3, [r7, #32]
 800aa8e:	4413      	add	r3, r2
 800aa90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa94:	68db      	ldr	r3, [r3, #12]
 800aa96:	69fa      	ldr	r2, [r7, #28]
 800aa98:	0151      	lsls	r1, r2, #5
 800aa9a:	6a3a      	ldr	r2, [r7, #32]
 800aa9c:	440a      	add	r2, r1
 800aa9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aaa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aaa6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800aaa8:	79fb      	ldrb	r3, [r7, #7]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d10b      	bne.n	800aac6 <USB_HC_StartXfer+0x86>
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	795b      	ldrb	r3, [r3, #5]
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d107      	bne.n	800aac6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	785b      	ldrb	r3, [r3, #1]
 800aaba:	4619      	mov	r1, r3
 800aabc:	68f8      	ldr	r0, [r7, #12]
 800aabe:	f000 fa0f 	bl	800aee0 <USB_DoPing>
      return HAL_OK;
 800aac2:	2300      	movs	r3, #0
 800aac4:	e0f8      	b.n	800acb8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	695b      	ldr	r3, [r3, #20]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d018      	beq.n	800ab00 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	695b      	ldr	r3, [r3, #20]
 800aad2:	68ba      	ldr	r2, [r7, #8]
 800aad4:	8912      	ldrh	r2, [r2, #8]
 800aad6:	4413      	add	r3, r2
 800aad8:	3b01      	subs	r3, #1
 800aada:	68ba      	ldr	r2, [r7, #8]
 800aadc:	8912      	ldrh	r2, [r2, #8]
 800aade:	fbb3 f3f2 	udiv	r3, r3, r2
 800aae2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800aae4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800aae6:	8b7b      	ldrh	r3, [r7, #26]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d90b      	bls.n	800ab04 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800aaec:	8b7b      	ldrh	r3, [r7, #26]
 800aaee:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800aaf0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aaf2:	68ba      	ldr	r2, [r7, #8]
 800aaf4:	8912      	ldrh	r2, [r2, #8]
 800aaf6:	fb03 f202 	mul.w	r2, r3, r2
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	611a      	str	r2, [r3, #16]
 800aafe:	e001      	b.n	800ab04 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800ab00:	2301      	movs	r3, #1
 800ab02:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	78db      	ldrb	r3, [r3, #3]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d007      	beq.n	800ab1c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ab0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ab0e:	68ba      	ldr	r2, [r7, #8]
 800ab10:	8912      	ldrh	r2, [r2, #8]
 800ab12:	fb03 f202 	mul.w	r2, r3, r2
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	611a      	str	r2, [r3, #16]
 800ab1a:	e003      	b.n	800ab24 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	695a      	ldr	r2, [r3, #20]
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ab2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ab2e:	04d9      	lsls	r1, r3, #19
 800ab30:	4b63      	ldr	r3, [pc, #396]	; (800acc0 <USB_HC_StartXfer+0x280>)
 800ab32:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ab34:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	7a9b      	ldrb	r3, [r3, #10]
 800ab3a:	075b      	lsls	r3, r3, #29
 800ab3c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ab40:	69f9      	ldr	r1, [r7, #28]
 800ab42:	0148      	lsls	r0, r1, #5
 800ab44:	6a39      	ldr	r1, [r7, #32]
 800ab46:	4401      	add	r1, r0
 800ab48:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ab4c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ab4e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800ab50:	79fb      	ldrb	r3, [r7, #7]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d009      	beq.n	800ab6a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	68d9      	ldr	r1, [r3, #12]
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	015a      	lsls	r2, r3, #5
 800ab5e:	6a3b      	ldr	r3, [r7, #32]
 800ab60:	4413      	add	r3, r2
 800ab62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab66:	460a      	mov	r2, r1
 800ab68:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800ab6a:	6a3b      	ldr	r3, [r7, #32]
 800ab6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	f003 0301 	and.w	r3, r3, #1
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	bf0c      	ite	eq
 800ab7a:	2301      	moveq	r3, #1
 800ab7c:	2300      	movne	r3, #0
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800ab82:	69fb      	ldr	r3, [r7, #28]
 800ab84:	015a      	lsls	r2, r3, #5
 800ab86:	6a3b      	ldr	r3, [r7, #32]
 800ab88:	4413      	add	r3, r2
 800ab8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	69fa      	ldr	r2, [r7, #28]
 800ab92:	0151      	lsls	r1, r2, #5
 800ab94:	6a3a      	ldr	r2, [r7, #32]
 800ab96:	440a      	add	r2, r1
 800ab98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab9c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aba0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800aba2:	69fb      	ldr	r3, [r7, #28]
 800aba4:	015a      	lsls	r2, r3, #5
 800aba6:	6a3b      	ldr	r3, [r7, #32]
 800aba8:	4413      	add	r3, r2
 800abaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abae:	681a      	ldr	r2, [r3, #0]
 800abb0:	7e7b      	ldrb	r3, [r7, #25]
 800abb2:	075b      	lsls	r3, r3, #29
 800abb4:	69f9      	ldr	r1, [r7, #28]
 800abb6:	0148      	lsls	r0, r1, #5
 800abb8:	6a39      	ldr	r1, [r7, #32]
 800abba:	4401      	add	r1, r0
 800abbc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800abc0:	4313      	orrs	r3, r2
 800abc2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	015a      	lsls	r2, r3, #5
 800abc8:	6a3b      	ldr	r3, [r7, #32]
 800abca:	4413      	add	r3, r2
 800abcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800abda:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	78db      	ldrb	r3, [r3, #3]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d004      	beq.n	800abee <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abea:	613b      	str	r3, [r7, #16]
 800abec:	e003      	b.n	800abf6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800abf4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800abfc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800abfe:	69fb      	ldr	r3, [r7, #28]
 800ac00:	015a      	lsls	r2, r3, #5
 800ac02:	6a3b      	ldr	r3, [r7, #32]
 800ac04:	4413      	add	r3, r2
 800ac06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800ac10:	79fb      	ldrb	r3, [r7, #7]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d001      	beq.n	800ac1a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800ac16:	2300      	movs	r3, #0
 800ac18:	e04e      	b.n	800acb8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	78db      	ldrb	r3, [r3, #3]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d149      	bne.n	800acb6 <USB_HC_StartXfer+0x276>
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	695b      	ldr	r3, [r3, #20]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d045      	beq.n	800acb6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	79db      	ldrb	r3, [r3, #7]
 800ac2e:	2b03      	cmp	r3, #3
 800ac30:	d830      	bhi.n	800ac94 <USB_HC_StartXfer+0x254>
 800ac32:	a201      	add	r2, pc, #4	; (adr r2, 800ac38 <USB_HC_StartXfer+0x1f8>)
 800ac34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac38:	0800ac49 	.word	0x0800ac49
 800ac3c:	0800ac6d 	.word	0x0800ac6d
 800ac40:	0800ac49 	.word	0x0800ac49
 800ac44:	0800ac6d 	.word	0x0800ac6d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	695b      	ldr	r3, [r3, #20]
 800ac4c:	3303      	adds	r3, #3
 800ac4e:	089b      	lsrs	r3, r3, #2
 800ac50:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800ac52:	8afa      	ldrh	r2, [r7, #22]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d91c      	bls.n	800ac98 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	699b      	ldr	r3, [r3, #24]
 800ac62:	f043 0220 	orr.w	r2, r3, #32
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	619a      	str	r2, [r3, #24]
        }
        break;
 800ac6a:	e015      	b.n	800ac98 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	695b      	ldr	r3, [r3, #20]
 800ac70:	3303      	adds	r3, #3
 800ac72:	089b      	lsrs	r3, r3, #2
 800ac74:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ac76:	8afa      	ldrh	r2, [r7, #22]
 800ac78:	6a3b      	ldr	r3, [r7, #32]
 800ac7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac7e:	691b      	ldr	r3, [r3, #16]
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d90a      	bls.n	800ac9c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	699b      	ldr	r3, [r3, #24]
 800ac8a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	619a      	str	r2, [r3, #24]
        }
        break;
 800ac92:	e003      	b.n	800ac9c <USB_HC_StartXfer+0x25c>

      default:
        break;
 800ac94:	bf00      	nop
 800ac96:	e002      	b.n	800ac9e <USB_HC_StartXfer+0x25e>
        break;
 800ac98:	bf00      	nop
 800ac9a:	e000      	b.n	800ac9e <USB_HC_StartXfer+0x25e>
        break;
 800ac9c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	68d9      	ldr	r1, [r3, #12]
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	785a      	ldrb	r2, [r3, #1]
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	695b      	ldr	r3, [r3, #20]
 800acaa:	b29b      	uxth	r3, r3
 800acac:	2000      	movs	r0, #0
 800acae:	9000      	str	r0, [sp, #0]
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	f7ff fb31 	bl	800a318 <USB_WritePacket>
  }

  return HAL_OK;
 800acb6:	2300      	movs	r3, #0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3728      	adds	r7, #40	; 0x28
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}
 800acc0:	1ff80000 	.word	0x1ff80000

0800acc4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b085      	sub	sp, #20
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800acd6:	695b      	ldr	r3, [r3, #20]
 800acd8:	b29b      	uxth	r3, r3
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3714      	adds	r7, #20
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr

0800ace6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ace6:	b480      	push	{r7}
 800ace8:	b089      	sub	sp, #36	; 0x24
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
 800acee:	460b      	mov	r3, r1
 800acf0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800acf6:	78fb      	ldrb	r3, [r7, #3]
 800acf8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800acfa:	2300      	movs	r3, #0
 800acfc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	015a      	lsls	r2, r3, #5
 800ad02:	69fb      	ldr	r3, [r7, #28]
 800ad04:	4413      	add	r3, r2
 800ad06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	0c9b      	lsrs	r3, r3, #18
 800ad0e:	f003 0303 	and.w	r3, r3, #3
 800ad12:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	015a      	lsls	r2, r3, #5
 800ad18:	69fb      	ldr	r3, [r7, #28]
 800ad1a:	4413      	add	r3, r2
 800ad1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	0fdb      	lsrs	r3, r3, #31
 800ad24:	f003 0301 	and.w	r3, r3, #1
 800ad28:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	f003 0320 	and.w	r3, r3, #32
 800ad32:	2b20      	cmp	r3, #32
 800ad34:	d104      	bne.n	800ad40 <USB_HC_Halt+0x5a>
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d101      	bne.n	800ad40 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	e0c8      	b.n	800aed2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d002      	beq.n	800ad4c <USB_HC_Halt+0x66>
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	2b02      	cmp	r3, #2
 800ad4a:	d163      	bne.n	800ae14 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ad4c:	69bb      	ldr	r3, [r7, #24]
 800ad4e:	015a      	lsls	r2, r3, #5
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	4413      	add	r3, r2
 800ad54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	69ba      	ldr	r2, [r7, #24]
 800ad5c:	0151      	lsls	r1, r2, #5
 800ad5e:	69fa      	ldr	r2, [r7, #28]
 800ad60:	440a      	add	r2, r1
 800ad62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad6a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	689b      	ldr	r3, [r3, #8]
 800ad70:	f003 0320 	and.w	r3, r3, #32
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	f040 80ab 	bne.w	800aed0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d133      	bne.n	800adee <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ad86:	69bb      	ldr	r3, [r7, #24]
 800ad88:	015a      	lsls	r2, r3, #5
 800ad8a:	69fb      	ldr	r3, [r7, #28]
 800ad8c:	4413      	add	r3, r2
 800ad8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	69ba      	ldr	r2, [r7, #24]
 800ad96:	0151      	lsls	r1, r2, #5
 800ad98:	69fa      	ldr	r2, [r7, #28]
 800ad9a:	440a      	add	r2, r1
 800ad9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ada0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ada4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	015a      	lsls	r2, r3, #5
 800adaa:	69fb      	ldr	r3, [r7, #28]
 800adac:	4413      	add	r3, r2
 800adae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	69ba      	ldr	r2, [r7, #24]
 800adb6:	0151      	lsls	r1, r2, #5
 800adb8:	69fa      	ldr	r2, [r7, #28]
 800adba:	440a      	add	r2, r1
 800adbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800adc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800adc4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	3301      	adds	r3, #1
 800adca:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800add2:	d81d      	bhi.n	800ae10 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800add4:	69bb      	ldr	r3, [r7, #24]
 800add6:	015a      	lsls	r2, r3, #5
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	4413      	add	r3, r2
 800addc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ade6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800adea:	d0ec      	beq.n	800adc6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800adec:	e070      	b.n	800aed0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	015a      	lsls	r2, r3, #5
 800adf2:	69fb      	ldr	r3, [r7, #28]
 800adf4:	4413      	add	r3, r2
 800adf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	69ba      	ldr	r2, [r7, #24]
 800adfe:	0151      	lsls	r1, r2, #5
 800ae00:	69fa      	ldr	r2, [r7, #28]
 800ae02:	440a      	add	r2, r1
 800ae04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae0c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ae0e:	e05f      	b.n	800aed0 <USB_HC_Halt+0x1ea>
            break;
 800ae10:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ae12:	e05d      	b.n	800aed0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	015a      	lsls	r2, r3, #5
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	4413      	add	r3, r2
 800ae1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	69ba      	ldr	r2, [r7, #24]
 800ae24:	0151      	lsls	r1, r2, #5
 800ae26:	69fa      	ldr	r2, [r7, #28]
 800ae28:	440a      	add	r2, r1
 800ae2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae32:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ae34:	69fb      	ldr	r3, [r7, #28]
 800ae36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae3a:	691b      	ldr	r3, [r3, #16]
 800ae3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d133      	bne.n	800aeac <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ae44:	69bb      	ldr	r3, [r7, #24]
 800ae46:	015a      	lsls	r2, r3, #5
 800ae48:	69fb      	ldr	r3, [r7, #28]
 800ae4a:	4413      	add	r3, r2
 800ae4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	69ba      	ldr	r2, [r7, #24]
 800ae54:	0151      	lsls	r1, r2, #5
 800ae56:	69fa      	ldr	r2, [r7, #28]
 800ae58:	440a      	add	r2, r1
 800ae5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae62:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	015a      	lsls	r2, r3, #5
 800ae68:	69fb      	ldr	r3, [r7, #28]
 800ae6a:	4413      	add	r3, r2
 800ae6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	69ba      	ldr	r2, [r7, #24]
 800ae74:	0151      	lsls	r1, r2, #5
 800ae76:	69fa      	ldr	r2, [r7, #28]
 800ae78:	440a      	add	r2, r1
 800ae7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae82:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	3301      	adds	r3, #1
 800ae88:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae90:	d81d      	bhi.n	800aece <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	015a      	lsls	r2, r3, #5
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	4413      	add	r3, r2
 800ae9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aea4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aea8:	d0ec      	beq.n	800ae84 <USB_HC_Halt+0x19e>
 800aeaa:	e011      	b.n	800aed0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	015a      	lsls	r2, r3, #5
 800aeb0:	69fb      	ldr	r3, [r7, #28]
 800aeb2:	4413      	add	r3, r2
 800aeb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	69ba      	ldr	r2, [r7, #24]
 800aebc:	0151      	lsls	r1, r2, #5
 800aebe:	69fa      	ldr	r2, [r7, #28]
 800aec0:	440a      	add	r2, r1
 800aec2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aec6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aeca:	6013      	str	r3, [r2, #0]
 800aecc:	e000      	b.n	800aed0 <USB_HC_Halt+0x1ea>
          break;
 800aece:	bf00      	nop
    }
  }

  return HAL_OK;
 800aed0:	2300      	movs	r3, #0
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3724      	adds	r7, #36	; 0x24
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr
	...

0800aee0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b087      	sub	sp, #28
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	460b      	mov	r3, r1
 800aeea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800aef0:	78fb      	ldrb	r3, [r7, #3]
 800aef2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800aef4:	2301      	movs	r3, #1
 800aef6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	04da      	lsls	r2, r3, #19
 800aefc:	4b15      	ldr	r3, [pc, #84]	; (800af54 <USB_DoPing+0x74>)
 800aefe:	4013      	ands	r3, r2
 800af00:	693a      	ldr	r2, [r7, #16]
 800af02:	0151      	lsls	r1, r2, #5
 800af04:	697a      	ldr	r2, [r7, #20]
 800af06:	440a      	add	r2, r1
 800af08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af10:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	015a      	lsls	r2, r3, #5
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	4413      	add	r3, r2
 800af1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800af28:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af30:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	015a      	lsls	r2, r3, #5
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	4413      	add	r3, r2
 800af3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af3e:	461a      	mov	r2, r3
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800af44:	2300      	movs	r3, #0
}
 800af46:	4618      	mov	r0, r3
 800af48:	371c      	adds	r7, #28
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr
 800af52:	bf00      	nop
 800af54:	1ff80000 	.word	0x1ff80000

0800af58 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b088      	sub	sp, #32
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800af60:	2300      	movs	r3, #0
 800af62:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800af68:	2300      	movs	r3, #0
 800af6a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f7ff f911 	bl	800a194 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800af72:	2110      	movs	r1, #16
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f7ff f96b 	bl	800a250 <USB_FlushTxFifo>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d001      	beq.n	800af84 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800af80:	2301      	movs	r3, #1
 800af82:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f7ff f997 	bl	800a2b8 <USB_FlushRxFifo>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d001      	beq.n	800af94 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800af90:	2301      	movs	r3, #1
 800af92:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800af94:	2300      	movs	r3, #0
 800af96:	61bb      	str	r3, [r7, #24]
 800af98:	e01f      	b.n	800afda <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	015a      	lsls	r2, r3, #5
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	4413      	add	r3, r2
 800afa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800afb0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800afb8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800afc0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	015a      	lsls	r2, r3, #5
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	4413      	add	r3, r2
 800afca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afce:	461a      	mov	r2, r3
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800afd4:	69bb      	ldr	r3, [r7, #24]
 800afd6:	3301      	adds	r3, #1
 800afd8:	61bb      	str	r3, [r7, #24]
 800afda:	69bb      	ldr	r3, [r7, #24]
 800afdc:	2b0f      	cmp	r3, #15
 800afde:	d9dc      	bls.n	800af9a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800afe0:	2300      	movs	r3, #0
 800afe2:	61bb      	str	r3, [r7, #24]
 800afe4:	e034      	b.n	800b050 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	015a      	lsls	r2, r3, #5
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	4413      	add	r3, r2
 800afee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800affc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b004:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b00c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	015a      	lsls	r2, r3, #5
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	4413      	add	r3, r2
 800b016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b01a:	461a      	mov	r2, r3
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	3301      	adds	r3, #1
 800b024:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b02c:	d80c      	bhi.n	800b048 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b02e:	69bb      	ldr	r3, [r7, #24]
 800b030:	015a      	lsls	r2, r3, #5
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	4413      	add	r3, r2
 800b036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b040:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b044:	d0ec      	beq.n	800b020 <USB_StopHost+0xc8>
 800b046:	e000      	b.n	800b04a <USB_StopHost+0xf2>
        break;
 800b048:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b04a:	69bb      	ldr	r3, [r7, #24]
 800b04c:	3301      	adds	r3, #1
 800b04e:	61bb      	str	r3, [r7, #24]
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	2b0f      	cmp	r3, #15
 800b054:	d9c7      	bls.n	800afe6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b05c:	461a      	mov	r2, r3
 800b05e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b062:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b06a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f7ff f880 	bl	800a172 <USB_EnableGlobalInt>

  return ret;
 800b072:	7ffb      	ldrb	r3, [r7, #31]
}
 800b074:	4618      	mov	r0, r3
 800b076:	3720      	adds	r7, #32
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b080:	4904      	ldr	r1, [pc, #16]	; (800b094 <MX_FATFS_Init+0x18>)
 800b082:	4805      	ldr	r0, [pc, #20]	; (800b098 <MX_FATFS_Init+0x1c>)
 800b084:	f005 fd0c 	bl	8010aa0 <FATFS_LinkDriver>
 800b088:	4603      	mov	r3, r0
 800b08a:	461a      	mov	r2, r3
 800b08c:	4b03      	ldr	r3, [pc, #12]	; (800b09c <MX_FATFS_Init+0x20>)
 800b08e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b090:	bf00      	nop
 800b092:	bd80      	pop	{r7, pc}
 800b094:	20002cd0 	.word	0x20002cd0
 800b098:	2000002c 	.word	0x2000002c
 800b09c:	20002ccc 	.word	0x20002ccc

0800b0a0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b0a4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr

0800b0b0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
	Stat = (SD_SPI_Init()) ? STA_NOINIT : RES_OK;
 800b0ba:	f7f8 fd57 	bl	8003b6c <SD_SPI_Init>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	bf14      	ite	ne
 800b0c4:	2301      	movne	r3, #1
 800b0c6:	2300      	moveq	r3, #0
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	4b04      	ldr	r3, [pc, #16]	; (800b0e0 <USER_initialize+0x30>)
 800b0ce:	701a      	strb	r2, [r3, #0]
//	 HAL_UART_Transmit(&huart3,(uint8_t*)"USER_initialize\n\r",17,0x1000);
//
//	 SD_PowerOn();
//	 if(sd_ini()==0) {Stat &= ~STA_NOINIT;} 		//Сбросим статус STA_NOINIT
    return Stat;
 800b0d0:	4b03      	ldr	r3, [pc, #12]	; (800b0e0 <USER_initialize+0x30>)
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3708      	adds	r7, #8
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	20000029 	.word	0x20000029

0800b0e4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
	//HAL_UART_Transmit(&huart3,(uint8_t*)"USER_status\n\r",13,0x1000);
	if (pdrv) return STA_NOINIT;
 800b0ee:	79fb      	ldrb	r3, [r7, #7]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d001      	beq.n	800b0f8 <USER_status+0x14>
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	e002      	b.n	800b0fe <USER_status+0x1a>
    return Stat;
 800b0f8:	4b04      	ldr	r3, [pc, #16]	; (800b10c <USER_status+0x28>)
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	370c      	adds	r7, #12
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop
 800b10c:	20000029 	.word	0x20000029

0800b110 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	60b9      	str	r1, [r7, #8]
 800b118:	607a      	str	r2, [r7, #4]
 800b11a:	603b      	str	r3, [r7, #0]
 800b11c:	4603      	mov	r3, r0
 800b11e:	73fb      	strb	r3, [r7, #15]
//
//	SPI_Release();
//
//	return count ? RES_ERROR : RES_OK;

	if (pdrv || ( ! count)) return RES_PARERR;
 800b120:	7bfb      	ldrb	r3, [r7, #15]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d102      	bne.n	800b12c <USER_read+0x1c>
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d101      	bne.n	800b130 <USER_read+0x20>
 800b12c:	2304      	movs	r3, #4
 800b12e:	e023      	b.n	800b178 <USER_read+0x68>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b130:	4b13      	ldr	r3, [pc, #76]	; (800b180 <USER_read+0x70>)
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	b2db      	uxtb	r3, r3
 800b136:	f003 0301 	and.w	r3, r3, #1
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d001      	beq.n	800b142 <USER_read+0x32>
 800b13e:	2303      	movs	r3, #3
 800b140:	e01a      	b.n	800b178 <USER_read+0x68>

			if ( ! (sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 800b142:	4b10      	ldr	r3, [pc, #64]	; (800b184 <USER_read+0x74>)
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	b2db      	uxtb	r3, r3
 800b148:	f003 0304 	and.w	r3, r3, #4
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d102      	bne.n	800b156 <USER_read+0x46>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	025b      	lsls	r3, r3, #9
 800b154:	607b      	str	r3, [r7, #4]
			if (count == 1) /* Single block read */
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d105      	bne.n	800b168 <USER_read+0x58>
			{
				SD_SPI_Read_Block(buff, sector);
 800b15c:	6879      	ldr	r1, [r7, #4]
 800b15e:	68b8      	ldr	r0, [r7, #8]
 800b160:	f7f8 feb2 	bl	8003ec8 <SD_SPI_Read_Block>
				count = 0;
 800b164:	2300      	movs	r3, #0
 800b166:	603b      	str	r3, [r7, #0]
			}
			else /* Multiple block read */
			{
			}
			SPI_Release();
 800b168:	f7f8 fe18 	bl	8003d9c <SPI_Release>
			return count ? RES_ERROR : RES_OK;
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	bf14      	ite	ne
 800b172:	2301      	movne	r3, #1
 800b174:	2300      	moveq	r3, #0
 800b176:	b2db      	uxtb	r3, r3

   // return RES_OK;
  /* USER CODE END READ */
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3710      	adds	r7, #16
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	20000029 	.word	0x20000029
 800b184:	20002930 	.word	0x20002930

0800b188 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60b9      	str	r1, [r7, #8]
 800b190:	607a      	str	r2, [r7, #4]
 800b192:	603b      	str	r3, [r7, #0]
 800b194:	4603      	mov	r3, r0
 800b196:	73fb      	strb	r3, [r7, #15]
  /* USER CODE HERE */
//	HAL_UART_Transmit(&huart3,(uint8_t*)"USER_write\n\r",12,0x1000);
//	sprintf(str1,"sector: %lu\n\r",sector);
//	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);

	if (pdrv || !count) return RES_PARERR;
 800b198:	7bfb      	ldrb	r3, [r7, #15]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d102      	bne.n	800b1a4 <USER_write+0x1c>
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d101      	bne.n	800b1a8 <USER_write+0x20>
 800b1a4:	2304      	movs	r3, #4
 800b1a6:	e02c      	b.n	800b202 <USER_write+0x7a>
			if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b1a8:	4b18      	ldr	r3, [pc, #96]	; (800b20c <USER_write+0x84>)
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	f003 0301 	and.w	r3, r3, #1
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d001      	beq.n	800b1ba <USER_write+0x32>
 800b1b6:	2303      	movs	r3, #3
 800b1b8:	e023      	b.n	800b202 <USER_write+0x7a>
			if (Stat & STA_PROTECT) return RES_WRPRT;
 800b1ba:	4b14      	ldr	r3, [pc, #80]	; (800b20c <USER_write+0x84>)
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	f003 0304 	and.w	r3, r3, #4
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d001      	beq.n	800b1cc <USER_write+0x44>
 800b1c8:	2302      	movs	r3, #2
 800b1ca:	e01a      	b.n	800b202 <USER_write+0x7a>
			if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 800b1cc:	4b10      	ldr	r3, [pc, #64]	; (800b210 <USER_write+0x88>)
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	f003 0304 	and.w	r3, r3, #4
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d102      	bne.n	800b1e0 <USER_write+0x58>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	025b      	lsls	r3, r3, #9
 800b1de:	607b      	str	r3, [r7, #4]
			if (count == 1) /* Single block read */
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d105      	bne.n	800b1f2 <USER_write+0x6a>
			{
				SD_SPI_Write_Block((BYTE*)buff, sector);
 800b1e6:	6879      	ldr	r1, [r7, #4]
 800b1e8:	68b8      	ldr	r0, [r7, #8]
 800b1ea:	f7f8 feb3 	bl	8003f54 <SD_SPI_Write_Block>
				count = 0;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	603b      	str	r3, [r7, #0]
			}
			else /* Multiple block read */
			{
			}
			SPI_Release();
 800b1f2:	f7f8 fdd3 	bl	8003d9c <SPI_Release>
			return count ? RES_ERROR : RES_OK;
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	bf14      	ite	ne
 800b1fc:	2301      	movne	r3, #1
 800b1fe:	2300      	moveq	r3, #0
 800b200:	b2db      	uxtb	r3, r3

    //return RES_OK;
  /* USER CODE END WRITE */
}
 800b202:	4618      	mov	r0, r3
 800b204:	3710      	adds	r7, #16
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}
 800b20a:	bf00      	nop
 800b20c:	20000029 	.word	0x20000029
 800b210:	20002930 	.word	0x20002930

0800b214 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	4603      	mov	r3, r0
 800b21c:	603a      	str	r2, [r7, #0]
 800b21e:	71fb      	strb	r3, [r7, #7]
 800b220:	460b      	mov	r3, r1
 800b222:	71bb      	strb	r3, [r7, #6]
//
//    SPI_Release();
//
//    return res;

	DRESULT vResult = RES_ERROR;
 800b224:	2301      	movs	r3, #1
 800b226:	73fb      	strb	r3, [r7, #15]

		    if (pdrv) return RES_PARERR;
 800b228:	79fb      	ldrb	r3, [r7, #7]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d001      	beq.n	800b232 <USER_ioctl+0x1e>
 800b22e:	2304      	movs	r3, #4
 800b230:	e02b      	b.n	800b28a <USER_ioctl+0x76>
				if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b232:	4b18      	ldr	r3, [pc, #96]	; (800b294 <USER_ioctl+0x80>)
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	b2db      	uxtb	r3, r3
 800b238:	f003 0301 	and.w	r3, r3, #1
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d001      	beq.n	800b244 <USER_ioctl+0x30>
 800b240:	2303      	movs	r3, #3
 800b242:	e022      	b.n	800b28a <USER_ioctl+0x76>
				vResult = RES_ERROR;
 800b244:	2301      	movs	r3, #1
 800b246:	73fb      	strb	r3, [r7, #15]

				switch (cmd)
 800b248:	79bb      	ldrb	r3, [r7, #6]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d002      	beq.n	800b254 <USER_ioctl+0x40>
 800b24e:	2b02      	cmp	r3, #2
 800b250:	d00d      	beq.n	800b26e <USER_ioctl+0x5a>
 800b252:	e013      	b.n	800b27c <USER_ioctl+0x68>
				{
					case CTRL_SYNC : /* Flush dirty buffer if present */
									SD_SELECT;
 800b254:	2200      	movs	r2, #0
 800b256:	2108      	movs	r1, #8
 800b258:	480f      	ldr	r0, [pc, #60]	; (800b298 <USER_ioctl+0x84>)
 800b25a:	f7fa f95b 	bl	8005514 <HAL_GPIO_WritePin>
									if ( ! SD_SPI_WaitingForReadiness())
 800b25e:	f7f8 fda4 	bl	8003daa <SD_SPI_WaitingForReadiness>
 800b262:	4603      	mov	r3, r0
 800b264:	2b00      	cmp	r3, #0
 800b266:	d10c      	bne.n	800b282 <USER_ioctl+0x6e>
									vResult = RES_OK;
 800b268:	2300      	movs	r3, #0
 800b26a:	73fb      	strb	r3, [r7, #15]
										break;
 800b26c:	e009      	b.n	800b282 <USER_ioctl+0x6e>

					case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
									*(WORD*)buff = 512;
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b274:	801a      	strh	r2, [r3, #0]
									vResult = RES_OK;
 800b276:	2300      	movs	r3, #0
 800b278:	73fb      	strb	r3, [r7, #15]
										break;
 800b27a:	e003      	b.n	800b284 <USER_ioctl+0x70>

					default:
						vResult = RES_PARERR;
 800b27c:	2304      	movs	r3, #4
 800b27e:	73fb      	strb	r3, [r7, #15]
 800b280:	e000      	b.n	800b284 <USER_ioctl+0x70>
										break;
 800b282:	bf00      	nop
				}

				SPI_Release();
 800b284:	f7f8 fd8a 	bl	8003d9c <SPI_Release>

				return vResult;
 800b288:	7bfb      	ldrb	r3, [r7, #15]
   // return res;
  /* USER CODE END IOCTL */
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3710      	adds	r7, #16
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	20000029 	.word	0x20000029
 800b298:	40020000 	.word	0x40020000

0800b29c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b29c:	b590      	push	{r4, r7, lr}
 800b29e:	b089      	sub	sp, #36	; 0x24
 800b2a0:	af04      	add	r7, sp, #16
 800b2a2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	2202      	movs	r2, #2
 800b2a8:	2102      	movs	r1, #2
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 fc66 	bl	800bb7c <USBH_FindInterface>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b2b4:	7bfb      	ldrb	r3, [r7, #15]
 800b2b6:	2bff      	cmp	r3, #255	; 0xff
 800b2b8:	d002      	beq.n	800b2c0 <USBH_CDC_InterfaceInit+0x24>
 800b2ba:	7bfb      	ldrb	r3, [r7, #15]
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	d901      	bls.n	800b2c4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b2c0:	2302      	movs	r3, #2
 800b2c2:	e13d      	b.n	800b540 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800b2c4:	7bfb      	ldrb	r3, [r7, #15]
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f000 fc3b 	bl	800bb44 <USBH_SelectInterface>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b2d2:	7bbb      	ldrb	r3, [r7, #14]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d001      	beq.n	800b2dc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800b2d8:	2302      	movs	r3, #2
 800b2da:	e131      	b.n	800b540 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b2e2:	2050      	movs	r0, #80	; 0x50
 800b2e4:	f006 f82a 	bl	801133c <malloc>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2f2:	69db      	ldr	r3, [r3, #28]
 800b2f4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d101      	bne.n	800b300 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800b2fc:	2302      	movs	r3, #2
 800b2fe:	e11f      	b.n	800b540 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800b300:	2250      	movs	r2, #80	; 0x50
 800b302:	2100      	movs	r1, #0
 800b304:	68b8      	ldr	r0, [r7, #8]
 800b306:	f006 f829 	bl	801135c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800b30a:	7bfb      	ldrb	r3, [r7, #15]
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	211a      	movs	r1, #26
 800b310:	fb01 f303 	mul.w	r3, r1, r3
 800b314:	4413      	add	r3, r2
 800b316:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	b25b      	sxtb	r3, r3
 800b31e:	2b00      	cmp	r3, #0
 800b320:	da15      	bge.n	800b34e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b322:	7bfb      	ldrb	r3, [r7, #15]
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	211a      	movs	r1, #26
 800b328:	fb01 f303 	mul.w	r3, r1, r3
 800b32c:	4413      	add	r3, r2
 800b32e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b332:	781a      	ldrb	r2, [r3, #0]
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b338:	7bfb      	ldrb	r3, [r7, #15]
 800b33a:	687a      	ldr	r2, [r7, #4]
 800b33c:	211a      	movs	r1, #26
 800b33e:	fb01 f303 	mul.w	r3, r1, r3
 800b342:	4413      	add	r3, r2
 800b344:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b348:	881a      	ldrh	r2, [r3, #0]
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	785b      	ldrb	r3, [r3, #1]
 800b352:	4619      	mov	r1, r3
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f001 ff2c 	bl	800d1b2 <USBH_AllocPipe>
 800b35a:	4603      	mov	r3, r0
 800b35c:	461a      	mov	r2, r3
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	7819      	ldrb	r1, [r3, #0]
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	7858      	ldrb	r0, [r3, #1]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b376:	68ba      	ldr	r2, [r7, #8]
 800b378:	8952      	ldrh	r2, [r2, #10]
 800b37a:	9202      	str	r2, [sp, #8]
 800b37c:	2203      	movs	r2, #3
 800b37e:	9201      	str	r2, [sp, #4]
 800b380:	9300      	str	r3, [sp, #0]
 800b382:	4623      	mov	r3, r4
 800b384:	4602      	mov	r2, r0
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f001 fee4 	bl	800d154 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	2200      	movs	r2, #0
 800b392:	4619      	mov	r1, r3
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f005 ff23 	bl	80111e0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800b39a:	2300      	movs	r3, #0
 800b39c:	2200      	movs	r2, #0
 800b39e:	210a      	movs	r1, #10
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f000 fbeb 	bl	800bb7c <USBH_FindInterface>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b3aa:	7bfb      	ldrb	r3, [r7, #15]
 800b3ac:	2bff      	cmp	r3, #255	; 0xff
 800b3ae:	d002      	beq.n	800b3b6 <USBH_CDC_InterfaceInit+0x11a>
 800b3b0:	7bfb      	ldrb	r3, [r7, #15]
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d901      	bls.n	800b3ba <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b3b6:	2302      	movs	r3, #2
 800b3b8:	e0c2      	b.n	800b540 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800b3ba:	7bfb      	ldrb	r3, [r7, #15]
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	211a      	movs	r1, #26
 800b3c0:	fb01 f303 	mul.w	r3, r1, r3
 800b3c4:	4413      	add	r3, r2
 800b3c6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	b25b      	sxtb	r3, r3
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	da16      	bge.n	800b400 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b3d2:	7bfb      	ldrb	r3, [r7, #15]
 800b3d4:	687a      	ldr	r2, [r7, #4]
 800b3d6:	211a      	movs	r1, #26
 800b3d8:	fb01 f303 	mul.w	r3, r1, r3
 800b3dc:	4413      	add	r3, r2
 800b3de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b3e2:	781a      	ldrb	r2, [r3, #0]
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b3e8:	7bfb      	ldrb	r3, [r7, #15]
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	211a      	movs	r1, #26
 800b3ee:	fb01 f303 	mul.w	r3, r1, r3
 800b3f2:	4413      	add	r3, r2
 800b3f4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b3f8:	881a      	ldrh	r2, [r3, #0]
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	835a      	strh	r2, [r3, #26]
 800b3fe:	e015      	b.n	800b42c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b400:	7bfb      	ldrb	r3, [r7, #15]
 800b402:	687a      	ldr	r2, [r7, #4]
 800b404:	211a      	movs	r1, #26
 800b406:	fb01 f303 	mul.w	r3, r1, r3
 800b40a:	4413      	add	r3, r2
 800b40c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b410:	781a      	ldrb	r2, [r3, #0]
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b416:	7bfb      	ldrb	r3, [r7, #15]
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	211a      	movs	r1, #26
 800b41c:	fb01 f303 	mul.w	r3, r1, r3
 800b420:	4413      	add	r3, r2
 800b422:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b426:	881a      	ldrh	r2, [r3, #0]
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800b42c:	7bfb      	ldrb	r3, [r7, #15]
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	211a      	movs	r1, #26
 800b432:	fb01 f303 	mul.w	r3, r1, r3
 800b436:	4413      	add	r3, r2
 800b438:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	b25b      	sxtb	r3, r3
 800b440:	2b00      	cmp	r3, #0
 800b442:	da16      	bge.n	800b472 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b444:	7bfb      	ldrb	r3, [r7, #15]
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	211a      	movs	r1, #26
 800b44a:	fb01 f303 	mul.w	r3, r1, r3
 800b44e:	4413      	add	r3, r2
 800b450:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b454:	781a      	ldrb	r2, [r3, #0]
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b45a:	7bfb      	ldrb	r3, [r7, #15]
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	211a      	movs	r1, #26
 800b460:	fb01 f303 	mul.w	r3, r1, r3
 800b464:	4413      	add	r3, r2
 800b466:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b46a:	881a      	ldrh	r2, [r3, #0]
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	835a      	strh	r2, [r3, #26]
 800b470:	e015      	b.n	800b49e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b472:	7bfb      	ldrb	r3, [r7, #15]
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	211a      	movs	r1, #26
 800b478:	fb01 f303 	mul.w	r3, r1, r3
 800b47c:	4413      	add	r3, r2
 800b47e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b482:	781a      	ldrb	r2, [r3, #0]
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b488:	7bfb      	ldrb	r3, [r7, #15]
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	211a      	movs	r1, #26
 800b48e:	fb01 f303 	mul.w	r3, r1, r3
 800b492:	4413      	add	r3, r2
 800b494:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b498:	881a      	ldrh	r2, [r3, #0]
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	7b9b      	ldrb	r3, [r3, #14]
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f001 fe84 	bl	800d1b2 <USBH_AllocPipe>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	7bdb      	ldrb	r3, [r3, #15]
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f001 fe7a 	bl	800d1b2 <USBH_AllocPipe>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	7b59      	ldrb	r1, [r3, #13]
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	7b98      	ldrb	r0, [r3, #14]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b4da:	68ba      	ldr	r2, [r7, #8]
 800b4dc:	8b12      	ldrh	r2, [r2, #24]
 800b4de:	9202      	str	r2, [sp, #8]
 800b4e0:	2202      	movs	r2, #2
 800b4e2:	9201      	str	r2, [sp, #4]
 800b4e4:	9300      	str	r3, [sp, #0]
 800b4e6:	4623      	mov	r3, r4
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f001 fe32 	bl	800d154 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	7b19      	ldrb	r1, [r3, #12]
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	7bd8      	ldrb	r0, [r3, #15]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b504:	68ba      	ldr	r2, [r7, #8]
 800b506:	8b52      	ldrh	r2, [r2, #26]
 800b508:	9202      	str	r2, [sp, #8]
 800b50a:	2202      	movs	r2, #2
 800b50c:	9201      	str	r2, [sp, #4]
 800b50e:	9300      	str	r3, [sp, #0]
 800b510:	4623      	mov	r3, r4
 800b512:	4602      	mov	r2, r0
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f001 fe1d 	bl	800d154 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	2200      	movs	r2, #0
 800b51e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	7b5b      	ldrb	r3, [r3, #13]
 800b526:	2200      	movs	r2, #0
 800b528:	4619      	mov	r1, r3
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f005 fe58 	bl	80111e0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	7b1b      	ldrb	r3, [r3, #12]
 800b534:	2200      	movs	r2, #0
 800b536:	4619      	mov	r1, r3
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f005 fe51 	bl	80111e0 <USBH_LL_SetToggle>

  return USBH_OK;
 800b53e:	2300      	movs	r3, #0
}
 800b540:	4618      	mov	r0, r3
 800b542:	3714      	adds	r7, #20
 800b544:	46bd      	mov	sp, r7
 800b546:	bd90      	pop	{r4, r7, pc}

0800b548 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b556:	69db      	ldr	r3, [r3, #28]
 800b558:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00e      	beq.n	800b580 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	4619      	mov	r1, r3
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f001 fe12 	bl	800d192 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	4619      	mov	r1, r3
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f001 fe3d 	bl	800d1f4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2200      	movs	r2, #0
 800b57e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	7b1b      	ldrb	r3, [r3, #12]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d00e      	beq.n	800b5a6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	7b1b      	ldrb	r3, [r3, #12]
 800b58c:	4619      	mov	r1, r3
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f001 fdff 	bl	800d192 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	7b1b      	ldrb	r3, [r3, #12]
 800b598:	4619      	mov	r1, r3
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f001 fe2a 	bl	800d1f4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	7b5b      	ldrb	r3, [r3, #13]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00e      	beq.n	800b5cc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	7b5b      	ldrb	r3, [r3, #13]
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f001 fdec 	bl	800d192 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	7b5b      	ldrb	r3, [r3, #13]
 800b5be:	4619      	mov	r1, r3
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f001 fe17 	bl	800d1f4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5d2:	69db      	ldr	r3, [r3, #28]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d00b      	beq.n	800b5f0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5de:	69db      	ldr	r3, [r3, #28]
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f005 feb3 	bl	801134c <free>
    phost->pActiveClass->pData = 0U;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b5f0:	2300      	movs	r3, #0
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b5fa:	b580      	push	{r7, lr}
 800b5fc:	b084      	sub	sp, #16
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b608:	69db      	ldr	r3, [r3, #28]
 800b60a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	3340      	adds	r3, #64	; 0x40
 800b610:	4619      	mov	r1, r3
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f000 f8b1 	bl	800b77a <GetLineCoding>
 800b618:	4603      	mov	r3, r0
 800b61a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800b61c:	7afb      	ldrb	r3, [r7, #11]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d105      	bne.n	800b62e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b628:	2102      	movs	r1, #2
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800b62e:	7afb      	ldrb	r3, [r7, #11]
}
 800b630:	4618      	mov	r0, r3
 800b632:	3710      	adds	r7, #16
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b640:	2301      	movs	r3, #1
 800b642:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800b644:	2300      	movs	r3, #0
 800b646:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b64e:	69db      	ldr	r3, [r3, #28]
 800b650:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b658:	2b04      	cmp	r3, #4
 800b65a:	d877      	bhi.n	800b74c <USBH_CDC_Process+0x114>
 800b65c:	a201      	add	r2, pc, #4	; (adr r2, 800b664 <USBH_CDC_Process+0x2c>)
 800b65e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b662:	bf00      	nop
 800b664:	0800b679 	.word	0x0800b679
 800b668:	0800b67f 	.word	0x0800b67f
 800b66c:	0800b6af 	.word	0x0800b6af
 800b670:	0800b723 	.word	0x0800b723
 800b674:	0800b731 	.word	0x0800b731
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800b678:	2300      	movs	r3, #0
 800b67a:	73fb      	strb	r3, [r7, #15]
      break;
 800b67c:	e06d      	b.n	800b75a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b682:	4619      	mov	r1, r3
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 f897 	bl	800b7b8 <SetLineCoding>
 800b68a:	4603      	mov	r3, r0
 800b68c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b68e:	7bbb      	ldrb	r3, [r7, #14]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d104      	bne.n	800b69e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	2202      	movs	r2, #2
 800b698:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b69c:	e058      	b.n	800b750 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800b69e:	7bbb      	ldrb	r3, [r7, #14]
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d055      	beq.n	800b750 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	2204      	movs	r2, #4
 800b6a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b6ac:	e050      	b.n	800b750 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	3340      	adds	r3, #64	; 0x40
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 f860 	bl	800b77a <GetLineCoding>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b6be:	7bbb      	ldrb	r3, [r7, #14]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d126      	bne.n	800b712 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6d6:	791b      	ldrb	r3, [r3, #4]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d13b      	bne.n	800b754 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6e6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d133      	bne.n	800b754 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6f6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d12b      	bne.n	800b754 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b704:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b706:	429a      	cmp	r2, r3
 800b708:	d124      	bne.n	800b754 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 f958 	bl	800b9c0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b710:	e020      	b.n	800b754 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800b712:	7bbb      	ldrb	r3, [r7, #14]
 800b714:	2b01      	cmp	r3, #1
 800b716:	d01d      	beq.n	800b754 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	2204      	movs	r2, #4
 800b71c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b720:	e018      	b.n	800b754 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f000 f867 	bl	800b7f6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 f8da 	bl	800b8e2 <CDC_ProcessReception>
      break;
 800b72e:	e014      	b.n	800b75a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800b730:	2100      	movs	r1, #0
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 ffef 	bl	800c716 <USBH_ClrFeature>
 800b738:	4603      	mov	r3, r0
 800b73a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b73c:	7bbb      	ldrb	r3, [r7, #14]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d10a      	bne.n	800b758 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	2200      	movs	r2, #0
 800b746:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800b74a:	e005      	b.n	800b758 <USBH_CDC_Process+0x120>

    default:
      break;
 800b74c:	bf00      	nop
 800b74e:	e004      	b.n	800b75a <USBH_CDC_Process+0x122>
      break;
 800b750:	bf00      	nop
 800b752:	e002      	b.n	800b75a <USBH_CDC_Process+0x122>
      break;
 800b754:	bf00      	nop
 800b756:	e000      	b.n	800b75a <USBH_CDC_Process+0x122>
      break;
 800b758:	bf00      	nop

  }

  return status;
 800b75a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b764:	b480      	push	{r7}
 800b766:	b083      	sub	sp, #12
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b76c:	2300      	movs	r3, #0
}
 800b76e:	4618      	mov	r0, r3
 800b770:	370c      	adds	r7, #12
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr

0800b77a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800b77a:	b580      	push	{r7, lr}
 800b77c:	b082      	sub	sp, #8
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
 800b782:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	22a1      	movs	r2, #161	; 0xa1
 800b788:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2221      	movs	r2, #33	; 0x21
 800b78e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2200      	movs	r2, #0
 800b794:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2200      	movs	r2, #0
 800b79a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2207      	movs	r2, #7
 800b7a0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	2207      	movs	r2, #7
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f001 fa81 	bl	800ccb0 <USBH_CtlReq>
 800b7ae:	4603      	mov	r3, r0
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3708      	adds	r7, #8
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2221      	movs	r2, #33	; 0x21
 800b7c6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2220      	movs	r2, #32
 800b7cc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2207      	movs	r2, #7
 800b7de:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	2207      	movs	r2, #7
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f001 fa62 	bl	800ccb0 <USBH_CtlReq>
 800b7ec:	4603      	mov	r3, r0
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3708      	adds	r7, #8
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}

0800b7f6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800b7f6:	b580      	push	{r7, lr}
 800b7f8:	b086      	sub	sp, #24
 800b7fa:	af02      	add	r7, sp, #8
 800b7fc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b804:	69db      	ldr	r3, [r3, #28]
 800b806:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b808:	2300      	movs	r3, #0
 800b80a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800b812:	2b01      	cmp	r3, #1
 800b814:	d002      	beq.n	800b81c <CDC_ProcessTransmission+0x26>
 800b816:	2b02      	cmp	r3, #2
 800b818:	d023      	beq.n	800b862 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800b81a:	e05e      	b.n	800b8da <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	8b12      	ldrh	r2, [r2, #24]
 800b824:	4293      	cmp	r3, r2
 800b826:	d90b      	bls.n	800b840 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	69d9      	ldr	r1, [r3, #28]
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	8b1a      	ldrh	r2, [r3, #24]
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	7b5b      	ldrb	r3, [r3, #13]
 800b834:	2001      	movs	r0, #1
 800b836:	9000      	str	r0, [sp, #0]
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f001 fc48 	bl	800d0ce <USBH_BulkSendData>
 800b83e:	e00b      	b.n	800b858 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800b848:	b29a      	uxth	r2, r3
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	7b5b      	ldrb	r3, [r3, #13]
 800b84e:	2001      	movs	r0, #1
 800b850:	9000      	str	r0, [sp, #0]
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f001 fc3b 	bl	800d0ce <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2202      	movs	r2, #2
 800b85c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b860:	e03b      	b.n	800b8da <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	7b5b      	ldrb	r3, [r3, #13]
 800b866:	4619      	mov	r1, r3
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f005 fc8f 	bl	801118c <USBH_LL_GetURBState>
 800b86e:	4603      	mov	r3, r0
 800b870:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800b872:	7afb      	ldrb	r3, [r7, #11]
 800b874:	2b01      	cmp	r3, #1
 800b876:	d128      	bne.n	800b8ca <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b87c:	68fa      	ldr	r2, [r7, #12]
 800b87e:	8b12      	ldrh	r2, [r2, #24]
 800b880:	4293      	cmp	r3, r2
 800b882:	d90e      	bls.n	800b8a2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b888:	68fa      	ldr	r2, [r7, #12]
 800b88a:	8b12      	ldrh	r2, [r2, #24]
 800b88c:	1a9a      	subs	r2, r3, r2
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	69db      	ldr	r3, [r3, #28]
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	8b12      	ldrh	r2, [r2, #24]
 800b89a:	441a      	add	r2, r3
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	61da      	str	r2, [r3, #28]
 800b8a0:	e002      	b.n	800b8a8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d004      	beq.n	800b8ba <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b8b8:	e00e      	b.n	800b8d8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 f868 	bl	800b998 <USBH_CDC_TransmitCallback>
      break;
 800b8c8:	e006      	b.n	800b8d8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800b8ca:	7afb      	ldrb	r3, [r7, #11]
 800b8cc:	2b02      	cmp	r3, #2
 800b8ce:	d103      	bne.n	800b8d8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b8d8:	bf00      	nop
  }
}
 800b8da:	bf00      	nop
 800b8dc:	3710      	adds	r7, #16
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b086      	sub	sp, #24
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8f0:	69db      	ldr	r3, [r3, #28]
 800b8f2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800b8fe:	2b03      	cmp	r3, #3
 800b900:	d002      	beq.n	800b908 <CDC_ProcessReception+0x26>
 800b902:	2b04      	cmp	r3, #4
 800b904:	d00e      	beq.n	800b924 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800b906:	e043      	b.n	800b990 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	6a19      	ldr	r1, [r3, #32]
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	8b5a      	ldrh	r2, [r3, #26]
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	7b1b      	ldrb	r3, [r3, #12]
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f001 fbff 	bl	800d118 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	2204      	movs	r2, #4
 800b91e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b922:	e035      	b.n	800b990 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	7b1b      	ldrb	r3, [r3, #12]
 800b928:	4619      	mov	r1, r3
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f005 fc2e 	bl	801118c <USBH_LL_GetURBState>
 800b930:	4603      	mov	r3, r0
 800b932:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800b934:	7cfb      	ldrb	r3, [r7, #19]
 800b936:	2b01      	cmp	r3, #1
 800b938:	d129      	bne.n	800b98e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	7b1b      	ldrb	r3, [r3, #12]
 800b93e:	4619      	mov	r1, r3
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f005 fb91 	bl	8011068 <USBH_LL_GetLastXferSize>
 800b946:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d016      	beq.n	800b980 <CDC_ProcessReception+0x9e>
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	8b5b      	ldrh	r3, [r3, #26]
 800b956:	461a      	mov	r2, r3
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d910      	bls.n	800b980 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	1ad2      	subs	r2, r2, r3
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	6a1a      	ldr	r2, [r3, #32]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	441a      	add	r2, r3
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	2203      	movs	r2, #3
 800b97a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b97e:	e006      	b.n	800b98e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	2200      	movs	r2, #0
 800b984:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f000 f80f 	bl	800b9ac <USBH_CDC_ReceiveCallback>
      break;
 800b98e:	bf00      	nop
  }
}
 800b990:	bf00      	nop
 800b992:	3718      	adds	r7, #24
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b9a0:	bf00      	nop
 800b9a2:	370c      	adds	r7, #12
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b083      	sub	sp, #12
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b9b4:	bf00      	nop
 800b9b6:	370c      	adds	r7, #12
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b9c8:	bf00      	nop
 800b9ca:	370c      	adds	r7, #12
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	60f8      	str	r0, [r7, #12]
 800b9dc:	60b9      	str	r1, [r7, #8]
 800b9de:	4613      	mov	r3, r2
 800b9e0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d101      	bne.n	800b9ec <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b9e8:	2302      	movs	r3, #2
 800b9ea:	e029      	b.n	800ba40 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	79fa      	ldrb	r2, [r7, #7]
 800b9f0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f000 f81f 	bl	800ba48 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2200      	movs	r2, #0
 800ba16:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2200      	movs	r2, #0
 800ba26:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d003      	beq.n	800ba38 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	68ba      	ldr	r2, [r7, #8]
 800ba34:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800ba38:	68f8      	ldr	r0, [r7, #12]
 800ba3a:	f005 fa61 	bl	8010f00 <USBH_LL_Init>

  return USBH_OK;
 800ba3e:	2300      	movs	r3, #0
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3710      	adds	r7, #16
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}

0800ba48 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b085      	sub	sp, #20
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ba50:	2300      	movs	r3, #0
 800ba52:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ba54:	2300      	movs	r3, #0
 800ba56:	60fb      	str	r3, [r7, #12]
 800ba58:	e009      	b.n	800ba6e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	33e0      	adds	r3, #224	; 0xe0
 800ba60:	009b      	lsls	r3, r3, #2
 800ba62:	4413      	add	r3, r2
 800ba64:	2200      	movs	r2, #0
 800ba66:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	60fb      	str	r3, [r7, #12]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2b0f      	cmp	r3, #15
 800ba72:	d9f2      	bls.n	800ba5a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ba74:	2300      	movs	r3, #0
 800ba76:	60fb      	str	r3, [r7, #12]
 800ba78:	e009      	b.n	800ba8e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	4413      	add	r3, r2
 800ba80:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ba84:	2200      	movs	r2, #0
 800ba86:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	60fb      	str	r3, [r7, #12]
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba94:	d3f1      	bcc.n	800ba7a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2201      	movs	r2, #1
 800baa6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2200      	movs	r2, #0
 800baac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2201      	movs	r2, #1
 800bab4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2240      	movs	r2, #64	; 0x40
 800baba:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2201      	movs	r2, #1
 800bace:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2200      	movs	r2, #0
 800bad6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2200      	movs	r2, #0
 800bade:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800bae2:	2300      	movs	r3, #0
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3714      	adds	r7, #20
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b085      	sub	sp, #20
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800bafa:	2300      	movs	r3, #0
 800bafc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d016      	beq.n	800bb32 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d10e      	bne.n	800bb2c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bb14:	1c59      	adds	r1, r3, #1
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	33de      	adds	r3, #222	; 0xde
 800bb20:	6839      	ldr	r1, [r7, #0]
 800bb22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800bb26:	2300      	movs	r3, #0
 800bb28:	73fb      	strb	r3, [r7, #15]
 800bb2a:	e004      	b.n	800bb36 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800bb2c:	2302      	movs	r3, #2
 800bb2e:	73fb      	strb	r3, [r7, #15]
 800bb30:	e001      	b.n	800bb36 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800bb32:	2302      	movs	r3, #2
 800bb34:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bb36:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3714      	adds	r7, #20
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr

0800bb44 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b085      	sub	sp, #20
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800bb50:	2300      	movs	r3, #0
 800bb52:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800bb5a:	78fa      	ldrb	r2, [r7, #3]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d204      	bcs.n	800bb6a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	78fa      	ldrb	r2, [r7, #3]
 800bb64:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800bb68:	e001      	b.n	800bb6e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800bb6a:	2302      	movs	r3, #2
 800bb6c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bb6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3714      	adds	r7, #20
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr

0800bb7c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b087      	sub	sp, #28
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	4608      	mov	r0, r1
 800bb86:	4611      	mov	r1, r2
 800bb88:	461a      	mov	r2, r3
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	70fb      	strb	r3, [r7, #3]
 800bb8e:	460b      	mov	r3, r1
 800bb90:	70bb      	strb	r3, [r7, #2]
 800bb92:	4613      	mov	r3, r2
 800bb94:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800bb96:	2300      	movs	r3, #0
 800bb98:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bba4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bba6:	e025      	b.n	800bbf4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800bba8:	7dfb      	ldrb	r3, [r7, #23]
 800bbaa:	221a      	movs	r2, #26
 800bbac:	fb02 f303 	mul.w	r3, r2, r3
 800bbb0:	3308      	adds	r3, #8
 800bbb2:	68fa      	ldr	r2, [r7, #12]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	3302      	adds	r3, #2
 800bbb8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	795b      	ldrb	r3, [r3, #5]
 800bbbe:	78fa      	ldrb	r2, [r7, #3]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d002      	beq.n	800bbca <USBH_FindInterface+0x4e>
 800bbc4:	78fb      	ldrb	r3, [r7, #3]
 800bbc6:	2bff      	cmp	r3, #255	; 0xff
 800bbc8:	d111      	bne.n	800bbee <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bbce:	78ba      	ldrb	r2, [r7, #2]
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d002      	beq.n	800bbda <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bbd4:	78bb      	ldrb	r3, [r7, #2]
 800bbd6:	2bff      	cmp	r3, #255	; 0xff
 800bbd8:	d109      	bne.n	800bbee <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bbde:	787a      	ldrb	r2, [r7, #1]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d002      	beq.n	800bbea <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bbe4:	787b      	ldrb	r3, [r7, #1]
 800bbe6:	2bff      	cmp	r3, #255	; 0xff
 800bbe8:	d101      	bne.n	800bbee <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800bbea:	7dfb      	ldrb	r3, [r7, #23]
 800bbec:	e006      	b.n	800bbfc <USBH_FindInterface+0x80>
    }
    if_ix++;
 800bbee:	7dfb      	ldrb	r3, [r7, #23]
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bbf4:	7dfb      	ldrb	r3, [r7, #23]
 800bbf6:	2b01      	cmp	r3, #1
 800bbf8:	d9d6      	bls.n	800bba8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800bbfa:	23ff      	movs	r3, #255	; 0xff
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	371c      	adds	r7, #28
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr

0800bc08 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f005 f9b1 	bl	8010f78 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800bc16:	2101      	movs	r1, #1
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f005 faca 	bl	80111b2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800bc1e:	2300      	movs	r3, #0
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3708      	adds	r7, #8
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b088      	sub	sp, #32
 800bc2c:	af04      	add	r7, sp, #16
 800bc2e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800bc30:	2302      	movs	r3, #2
 800bc32:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800bc34:	2300      	movs	r3, #0
 800bc36:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800bc3e:	b2db      	uxtb	r3, r3
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d102      	bne.n	800bc4a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2203      	movs	r2, #3
 800bc48:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	b2db      	uxtb	r3, r3
 800bc50:	2b0b      	cmp	r3, #11
 800bc52:	f200 81be 	bhi.w	800bfd2 <USBH_Process+0x3aa>
 800bc56:	a201      	add	r2, pc, #4	; (adr r2, 800bc5c <USBH_Process+0x34>)
 800bc58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc5c:	0800bc8d 	.word	0x0800bc8d
 800bc60:	0800bcbf 	.word	0x0800bcbf
 800bc64:	0800bd27 	.word	0x0800bd27
 800bc68:	0800bf6d 	.word	0x0800bf6d
 800bc6c:	0800bfd3 	.word	0x0800bfd3
 800bc70:	0800bdcb 	.word	0x0800bdcb
 800bc74:	0800bf13 	.word	0x0800bf13
 800bc78:	0800be01 	.word	0x0800be01
 800bc7c:	0800be21 	.word	0x0800be21
 800bc80:	0800be41 	.word	0x0800be41
 800bc84:	0800be85 	.word	0x0800be85
 800bc88:	0800bf55 	.word	0x0800bf55
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bc92:	b2db      	uxtb	r3, r3
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	f000 819e 	beq.w	800bfd6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800bca0:	20c8      	movs	r0, #200	; 0xc8
 800bca2:	f005 facd 	bl	8011240 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f005 f9c3 	bl	8011032 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bcbc:	e18b      	b.n	800bfd6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800bcc4:	2b01      	cmp	r3, #1
 800bcc6:	d107      	bne.n	800bcd8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2200      	movs	r2, #0
 800bccc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2202      	movs	r2, #2
 800bcd4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bcd6:	e18d      	b.n	800bff4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bcde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bce2:	d914      	bls.n	800bd0e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bcea:	3301      	adds	r3, #1
 800bcec:	b2da      	uxtb	r2, r3
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bcfa:	2b03      	cmp	r3, #3
 800bcfc:	d903      	bls.n	800bd06 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	220d      	movs	r2, #13
 800bd02:	701a      	strb	r2, [r3, #0]
      break;
 800bd04:	e176      	b.n	800bff4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	701a      	strb	r2, [r3, #0]
      break;
 800bd0c:	e172      	b.n	800bff4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bd14:	f103 020a 	add.w	r2, r3, #10
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800bd1e:	200a      	movs	r0, #10
 800bd20:	f005 fa8e 	bl	8011240 <USBH_Delay>
      break;
 800bd24:	e166      	b.n	800bff4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d005      	beq.n	800bd3c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bd36:	2104      	movs	r1, #4
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800bd3c:	2064      	movs	r0, #100	; 0x64
 800bd3e:	f005 fa7f 	bl	8011240 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f005 f94e 	bl	8010fe4 <USBH_LL_GetSpeed>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2205      	movs	r2, #5
 800bd56:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800bd58:	2100      	movs	r1, #0
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f001 fa29 	bl	800d1b2 <USBH_AllocPipe>
 800bd60:	4603      	mov	r3, r0
 800bd62:	461a      	mov	r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800bd68:	2180      	movs	r1, #128	; 0x80
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f001 fa21 	bl	800d1b2 <USBH_AllocPipe>
 800bd70:	4603      	mov	r3, r0
 800bd72:	461a      	mov	r2, r3
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	7919      	ldrb	r1, [r3, #4]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bd88:	687a      	ldr	r2, [r7, #4]
 800bd8a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bd8c:	b292      	uxth	r2, r2
 800bd8e:	9202      	str	r2, [sp, #8]
 800bd90:	2200      	movs	r2, #0
 800bd92:	9201      	str	r2, [sp, #4]
 800bd94:	9300      	str	r3, [sp, #0]
 800bd96:	4603      	mov	r3, r0
 800bd98:	2280      	movs	r2, #128	; 0x80
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f001 f9da 	bl	800d154 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	7959      	ldrb	r1, [r3, #5]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bdb4:	b292      	uxth	r2, r2
 800bdb6:	9202      	str	r2, [sp, #8]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	9201      	str	r2, [sp, #4]
 800bdbc:	9300      	str	r3, [sp, #0]
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f001 f9c6 	bl	800d154 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bdc8:	e114      	b.n	800bff4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 f918 	bl	800c000 <USBH_HandleEnum>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800bdd4:	7bbb      	ldrb	r3, [r7, #14]
 800bdd6:	b2db      	uxtb	r3, r3
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	f040 80fe 	bne.w	800bfda <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2200      	movs	r2, #0
 800bde2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d103      	bne.n	800bdf8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2208      	movs	r2, #8
 800bdf4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bdf6:	e0f0      	b.n	800bfda <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2207      	movs	r2, #7
 800bdfc:	701a      	strb	r2, [r3, #0]
      break;
 800bdfe:	e0ec      	b.n	800bfda <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800be06:	2b00      	cmp	r3, #0
 800be08:	f000 80e9 	beq.w	800bfde <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800be12:	2101      	movs	r1, #1
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2208      	movs	r2, #8
 800be1c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800be1e:	e0de      	b.n	800bfde <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800be26:	b29b      	uxth	r3, r3
 800be28:	4619      	mov	r1, r3
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 fc2c 	bl	800c688 <USBH_SetCfg>
 800be30:	4603      	mov	r3, r0
 800be32:	2b00      	cmp	r3, #0
 800be34:	f040 80d5 	bne.w	800bfe2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2209      	movs	r2, #9
 800be3c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800be3e:	e0d0      	b.n	800bfe2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800be46:	f003 0320 	and.w	r3, r3, #32
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d016      	beq.n	800be7c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800be4e:	2101      	movs	r1, #1
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 fc3c 	bl	800c6ce <USBH_SetFeature>
 800be56:	4603      	mov	r3, r0
 800be58:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800be5a:	7bbb      	ldrb	r3, [r7, #14]
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d103      	bne.n	800be6a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	220a      	movs	r2, #10
 800be66:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800be68:	e0bd      	b.n	800bfe6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800be6a:	7bbb      	ldrb	r3, [r7, #14]
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	2b03      	cmp	r3, #3
 800be70:	f040 80b9 	bne.w	800bfe6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	220a      	movs	r2, #10
 800be78:	701a      	strb	r2, [r3, #0]
      break;
 800be7a:	e0b4      	b.n	800bfe6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	220a      	movs	r2, #10
 800be80:	701a      	strb	r2, [r3, #0]
      break;
 800be82:	e0b0      	b.n	800bfe6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	f000 80ad 	beq.w	800bfea <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2200      	movs	r2, #0
 800be94:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800be98:	2300      	movs	r3, #0
 800be9a:	73fb      	strb	r3, [r7, #15]
 800be9c:	e016      	b.n	800becc <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800be9e:	7bfa      	ldrb	r2, [r7, #15]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	32de      	adds	r2, #222	; 0xde
 800bea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bea8:	791a      	ldrb	r2, [r3, #4]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d108      	bne.n	800bec6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800beb4:	7bfa      	ldrb	r2, [r7, #15]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	32de      	adds	r2, #222	; 0xde
 800beba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800bec4:	e005      	b.n	800bed2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bec6:	7bfb      	ldrb	r3, [r7, #15]
 800bec8:	3301      	adds	r3, #1
 800beca:	73fb      	strb	r3, [r7, #15]
 800becc:	7bfb      	ldrb	r3, [r7, #15]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d0e5      	beq.n	800be9e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d016      	beq.n	800bf0a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bee2:	689b      	ldr	r3, [r3, #8]
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	4798      	blx	r3
 800bee8:	4603      	mov	r3, r0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d109      	bne.n	800bf02 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2206      	movs	r2, #6
 800bef2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800befa:	2103      	movs	r1, #3
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bf00:	e073      	b.n	800bfea <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	220d      	movs	r2, #13
 800bf06:	701a      	strb	r2, [r3, #0]
      break;
 800bf08:	e06f      	b.n	800bfea <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	220d      	movs	r2, #13
 800bf0e:	701a      	strb	r2, [r3, #0]
      break;
 800bf10:	e06b      	b.n	800bfea <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d017      	beq.n	800bf4c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf22:	691b      	ldr	r3, [r3, #16]
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	4798      	blx	r3
 800bf28:	4603      	mov	r3, r0
 800bf2a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800bf2c:	7bbb      	ldrb	r3, [r7, #14]
 800bf2e:	b2db      	uxtb	r3, r3
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d103      	bne.n	800bf3c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	220b      	movs	r2, #11
 800bf38:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bf3a:	e058      	b.n	800bfee <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800bf3c:	7bbb      	ldrb	r3, [r7, #14]
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	2b02      	cmp	r3, #2
 800bf42:	d154      	bne.n	800bfee <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	220d      	movs	r2, #13
 800bf48:	701a      	strb	r2, [r3, #0]
      break;
 800bf4a:	e050      	b.n	800bfee <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	220d      	movs	r2, #13
 800bf50:	701a      	strb	r2, [r3, #0]
      break;
 800bf52:	e04c      	b.n	800bfee <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d049      	beq.n	800bff2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf64:	695b      	ldr	r3, [r3, #20]
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	4798      	blx	r3
      }
      break;
 800bf6a:	e042      	b.n	800bff2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f7ff fd67 	bl	800ba48 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d009      	beq.n	800bf98 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf8a:	68db      	ldr	r3, [r3, #12]
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2200      	movs	r2, #0
 800bf94:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d005      	beq.n	800bfae <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bfa8:	2105      	movs	r1, #5
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d107      	bne.n	800bfca <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f7ff fe20 	bl	800bc08 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bfc8:	e014      	b.n	800bff4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f004 ffd4 	bl	8010f78 <USBH_LL_Start>
      break;
 800bfd0:	e010      	b.n	800bff4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800bfd2:	bf00      	nop
 800bfd4:	e00e      	b.n	800bff4 <USBH_Process+0x3cc>
      break;
 800bfd6:	bf00      	nop
 800bfd8:	e00c      	b.n	800bff4 <USBH_Process+0x3cc>
      break;
 800bfda:	bf00      	nop
 800bfdc:	e00a      	b.n	800bff4 <USBH_Process+0x3cc>
    break;
 800bfde:	bf00      	nop
 800bfe0:	e008      	b.n	800bff4 <USBH_Process+0x3cc>
      break;
 800bfe2:	bf00      	nop
 800bfe4:	e006      	b.n	800bff4 <USBH_Process+0x3cc>
      break;
 800bfe6:	bf00      	nop
 800bfe8:	e004      	b.n	800bff4 <USBH_Process+0x3cc>
      break;
 800bfea:	bf00      	nop
 800bfec:	e002      	b.n	800bff4 <USBH_Process+0x3cc>
      break;
 800bfee:	bf00      	nop
 800bff0:	e000      	b.n	800bff4 <USBH_Process+0x3cc>
      break;
 800bff2:	bf00      	nop
  }
  return USBH_OK;
 800bff4:	2300      	movs	r3, #0
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3710      	adds	r7, #16
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop

0800c000 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b088      	sub	sp, #32
 800c004:	af04      	add	r7, sp, #16
 800c006:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c008:	2301      	movs	r3, #1
 800c00a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c00c:	2301      	movs	r3, #1
 800c00e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	785b      	ldrb	r3, [r3, #1]
 800c014:	2b07      	cmp	r3, #7
 800c016:	f200 81c1 	bhi.w	800c39c <USBH_HandleEnum+0x39c>
 800c01a:	a201      	add	r2, pc, #4	; (adr r2, 800c020 <USBH_HandleEnum+0x20>)
 800c01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c020:	0800c041 	.word	0x0800c041
 800c024:	0800c0ff 	.word	0x0800c0ff
 800c028:	0800c169 	.word	0x0800c169
 800c02c:	0800c1f7 	.word	0x0800c1f7
 800c030:	0800c261 	.word	0x0800c261
 800c034:	0800c2d1 	.word	0x0800c2d1
 800c038:	0800c317 	.word	0x0800c317
 800c03c:	0800c35d 	.word	0x0800c35d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c040:	2108      	movs	r1, #8
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 fa50 	bl	800c4e8 <USBH_Get_DevDesc>
 800c048:	4603      	mov	r3, r0
 800c04a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c04c:	7bbb      	ldrb	r3, [r7, #14]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d130      	bne.n	800c0b4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2201      	movs	r2, #1
 800c060:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	7919      	ldrb	r1, [r3, #4]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c076:	b292      	uxth	r2, r2
 800c078:	9202      	str	r2, [sp, #8]
 800c07a:	2200      	movs	r2, #0
 800c07c:	9201      	str	r2, [sp, #4]
 800c07e:	9300      	str	r3, [sp, #0]
 800c080:	4603      	mov	r3, r0
 800c082:	2280      	movs	r2, #128	; 0x80
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f001 f865 	bl	800d154 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	7959      	ldrb	r1, [r3, #5]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c09a:	687a      	ldr	r2, [r7, #4]
 800c09c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c09e:	b292      	uxth	r2, r2
 800c0a0:	9202      	str	r2, [sp, #8]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	9201      	str	r2, [sp, #4]
 800c0a6:	9300      	str	r3, [sp, #0]
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f001 f851 	bl	800d154 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c0b2:	e175      	b.n	800c3a0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c0b4:	7bbb      	ldrb	r3, [r7, #14]
 800c0b6:	2b03      	cmp	r3, #3
 800c0b8:	f040 8172 	bne.w	800c3a0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	b2da      	uxtb	r2, r3
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c0d2:	2b03      	cmp	r3, #3
 800c0d4:	d903      	bls.n	800c0de <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	220d      	movs	r2, #13
 800c0da:	701a      	strb	r2, [r3, #0]
      break;
 800c0dc:	e160      	b.n	800c3a0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	795b      	ldrb	r3, [r3, #5]
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f001 f885 	bl	800d1f4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	791b      	ldrb	r3, [r3, #4]
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f001 f87f 	bl	800d1f4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	701a      	strb	r2, [r3, #0]
      break;
 800c0fc:	e150      	b.n	800c3a0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c0fe:	2112      	movs	r1, #18
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f000 f9f1 	bl	800c4e8 <USBH_Get_DevDesc>
 800c106:	4603      	mov	r3, r0
 800c108:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c10a:	7bbb      	ldrb	r3, [r7, #14]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d103      	bne.n	800c118 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2202      	movs	r2, #2
 800c114:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c116:	e145      	b.n	800c3a4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c118:	7bbb      	ldrb	r3, [r7, #14]
 800c11a:	2b03      	cmp	r3, #3
 800c11c:	f040 8142 	bne.w	800c3a4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c126:	3301      	adds	r3, #1
 800c128:	b2da      	uxtb	r2, r3
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c136:	2b03      	cmp	r3, #3
 800c138:	d903      	bls.n	800c142 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	220d      	movs	r2, #13
 800c13e:	701a      	strb	r2, [r3, #0]
      break;
 800c140:	e130      	b.n	800c3a4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	795b      	ldrb	r3, [r3, #5]
 800c146:	4619      	mov	r1, r3
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f001 f853 	bl	800d1f4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	791b      	ldrb	r3, [r3, #4]
 800c152:	4619      	mov	r1, r3
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f001 f84d 	bl	800d1f4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2200      	movs	r2, #0
 800c15e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2200      	movs	r2, #0
 800c164:	701a      	strb	r2, [r3, #0]
      break;
 800c166:	e11d      	b.n	800c3a4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c168:	2101      	movs	r1, #1
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 fa68 	bl	800c640 <USBH_SetAddress>
 800c170:	4603      	mov	r3, r0
 800c172:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c174:	7bbb      	ldrb	r3, [r7, #14]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d132      	bne.n	800c1e0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c17a:	2002      	movs	r0, #2
 800c17c:	f005 f860 	bl	8011240 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2201      	movs	r2, #1
 800c184:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2203      	movs	r2, #3
 800c18c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	7919      	ldrb	r1, [r3, #4]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c19e:	687a      	ldr	r2, [r7, #4]
 800c1a0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c1a2:	b292      	uxth	r2, r2
 800c1a4:	9202      	str	r2, [sp, #8]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	9201      	str	r2, [sp, #4]
 800c1aa:	9300      	str	r3, [sp, #0]
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	2280      	movs	r2, #128	; 0x80
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 ffcf 	bl	800d154 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	7959      	ldrb	r1, [r3, #5]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c1ca:	b292      	uxth	r2, r2
 800c1cc:	9202      	str	r2, [sp, #8]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	9201      	str	r2, [sp, #4]
 800c1d2:	9300      	str	r3, [sp, #0]
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 ffbb 	bl	800d154 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c1de:	e0e3      	b.n	800c3a8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c1e0:	7bbb      	ldrb	r3, [r7, #14]
 800c1e2:	2b03      	cmp	r3, #3
 800c1e4:	f040 80e0 	bne.w	800c3a8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	220d      	movs	r2, #13
 800c1ec:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	705a      	strb	r2, [r3, #1]
      break;
 800c1f4:	e0d8      	b.n	800c3a8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c1f6:	2109      	movs	r1, #9
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f000 f99d 	bl	800c538 <USBH_Get_CfgDesc>
 800c1fe:	4603      	mov	r3, r0
 800c200:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c202:	7bbb      	ldrb	r3, [r7, #14]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d103      	bne.n	800c210 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2204      	movs	r2, #4
 800c20c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c20e:	e0cd      	b.n	800c3ac <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c210:	7bbb      	ldrb	r3, [r7, #14]
 800c212:	2b03      	cmp	r3, #3
 800c214:	f040 80ca 	bne.w	800c3ac <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c21e:	3301      	adds	r3, #1
 800c220:	b2da      	uxtb	r2, r3
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c22e:	2b03      	cmp	r3, #3
 800c230:	d903      	bls.n	800c23a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	220d      	movs	r2, #13
 800c236:	701a      	strb	r2, [r3, #0]
      break;
 800c238:	e0b8      	b.n	800c3ac <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	795b      	ldrb	r3, [r3, #5]
 800c23e:	4619      	mov	r1, r3
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 ffd7 	bl	800d1f4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	791b      	ldrb	r3, [r3, #4]
 800c24a:	4619      	mov	r1, r3
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f000 ffd1 	bl	800d1f4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2200      	movs	r2, #0
 800c256:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2200      	movs	r2, #0
 800c25c:	701a      	strb	r2, [r3, #0]
      break;
 800c25e:	e0a5      	b.n	800c3ac <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c266:	4619      	mov	r1, r3
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 f965 	bl	800c538 <USBH_Get_CfgDesc>
 800c26e:	4603      	mov	r3, r0
 800c270:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c272:	7bbb      	ldrb	r3, [r7, #14]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d103      	bne.n	800c280 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2205      	movs	r2, #5
 800c27c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c27e:	e097      	b.n	800c3b0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c280:	7bbb      	ldrb	r3, [r7, #14]
 800c282:	2b03      	cmp	r3, #3
 800c284:	f040 8094 	bne.w	800c3b0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c28e:	3301      	adds	r3, #1
 800c290:	b2da      	uxtb	r2, r3
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c29e:	2b03      	cmp	r3, #3
 800c2a0:	d903      	bls.n	800c2aa <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	220d      	movs	r2, #13
 800c2a6:	701a      	strb	r2, [r3, #0]
      break;
 800c2a8:	e082      	b.n	800c3b0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	795b      	ldrb	r3, [r3, #5]
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f000 ff9f 	bl	800d1f4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	791b      	ldrb	r3, [r3, #4]
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 ff99 	bl	800d1f4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	701a      	strb	r2, [r3, #0]
      break;
 800c2ce:	e06f      	b.n	800c3b0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d019      	beq.n	800c30e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c2e6:	23ff      	movs	r3, #255	; 0xff
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f000 f949 	bl	800c580 <USBH_Get_StringDesc>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c2f2:	7bbb      	ldrb	r3, [r7, #14]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d103      	bne.n	800c300 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2206      	movs	r2, #6
 800c2fc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c2fe:	e059      	b.n	800c3b4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c300:	7bbb      	ldrb	r3, [r7, #14]
 800c302:	2b03      	cmp	r3, #3
 800c304:	d156      	bne.n	800c3b4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2206      	movs	r2, #6
 800c30a:	705a      	strb	r2, [r3, #1]
      break;
 800c30c:	e052      	b.n	800c3b4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2206      	movs	r2, #6
 800c312:	705a      	strb	r2, [r3, #1]
      break;
 800c314:	e04e      	b.n	800c3b4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d019      	beq.n	800c354 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c32c:	23ff      	movs	r3, #255	; 0xff
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 f926 	bl	800c580 <USBH_Get_StringDesc>
 800c334:	4603      	mov	r3, r0
 800c336:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c338:	7bbb      	ldrb	r3, [r7, #14]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d103      	bne.n	800c346 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2207      	movs	r2, #7
 800c342:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c344:	e038      	b.n	800c3b8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c346:	7bbb      	ldrb	r3, [r7, #14]
 800c348:	2b03      	cmp	r3, #3
 800c34a:	d135      	bne.n	800c3b8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2207      	movs	r2, #7
 800c350:	705a      	strb	r2, [r3, #1]
      break;
 800c352:	e031      	b.n	800c3b8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2207      	movs	r2, #7
 800c358:	705a      	strb	r2, [r3, #1]
      break;
 800c35a:	e02d      	b.n	800c3b8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c362:	2b00      	cmp	r3, #0
 800c364:	d017      	beq.n	800c396 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c372:	23ff      	movs	r3, #255	; 0xff
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f000 f903 	bl	800c580 <USBH_Get_StringDesc>
 800c37a:	4603      	mov	r3, r0
 800c37c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c37e:	7bbb      	ldrb	r3, [r7, #14]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d102      	bne.n	800c38a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c384:	2300      	movs	r3, #0
 800c386:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c388:	e018      	b.n	800c3bc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c38a:	7bbb      	ldrb	r3, [r7, #14]
 800c38c:	2b03      	cmp	r3, #3
 800c38e:	d115      	bne.n	800c3bc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800c390:	2300      	movs	r3, #0
 800c392:	73fb      	strb	r3, [r7, #15]
      break;
 800c394:	e012      	b.n	800c3bc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800c396:	2300      	movs	r3, #0
 800c398:	73fb      	strb	r3, [r7, #15]
      break;
 800c39a:	e00f      	b.n	800c3bc <USBH_HandleEnum+0x3bc>

    default:
      break;
 800c39c:	bf00      	nop
 800c39e:	e00e      	b.n	800c3be <USBH_HandleEnum+0x3be>
      break;
 800c3a0:	bf00      	nop
 800c3a2:	e00c      	b.n	800c3be <USBH_HandleEnum+0x3be>
      break;
 800c3a4:	bf00      	nop
 800c3a6:	e00a      	b.n	800c3be <USBH_HandleEnum+0x3be>
      break;
 800c3a8:	bf00      	nop
 800c3aa:	e008      	b.n	800c3be <USBH_HandleEnum+0x3be>
      break;
 800c3ac:	bf00      	nop
 800c3ae:	e006      	b.n	800c3be <USBH_HandleEnum+0x3be>
      break;
 800c3b0:	bf00      	nop
 800c3b2:	e004      	b.n	800c3be <USBH_HandleEnum+0x3be>
      break;
 800c3b4:	bf00      	nop
 800c3b6:	e002      	b.n	800c3be <USBH_HandleEnum+0x3be>
      break;
 800c3b8:	bf00      	nop
 800c3ba:	e000      	b.n	800c3be <USBH_HandleEnum+0x3be>
      break;
 800c3bc:	bf00      	nop
  }
  return Status;
 800c3be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3710      	adds	r7, #16
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b083      	sub	sp, #12
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	683a      	ldr	r2, [r7, #0]
 800c3d6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c3da:	bf00      	nop
 800c3dc:	370c      	adds	r7, #12
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr

0800c3e6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b082      	sub	sp, #8
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c3f4:	1c5a      	adds	r2, r3, #1
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f000 f804 	bl	800c40a <USBH_HandleSof>
}
 800c402:	bf00      	nop
 800c404:	3708      	adds	r7, #8
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b082      	sub	sp, #8
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	b2db      	uxtb	r3, r3
 800c418:	2b0b      	cmp	r3, #11
 800c41a:	d10a      	bne.n	800c432 <USBH_HandleSof+0x28>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c422:	2b00      	cmp	r3, #0
 800c424:	d005      	beq.n	800c432 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c42c:	699b      	ldr	r3, [r3, #24]
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	4798      	blx	r3
  }
}
 800c432:	bf00      	nop
 800c434:	3708      	adds	r7, #8
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c43a:	b480      	push	{r7}
 800c43c:	b083      	sub	sp, #12
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2201      	movs	r2, #1
 800c446:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800c44a:	bf00      	nop
}
 800c44c:	370c      	adds	r7, #12
 800c44e:	46bd      	mov	sp, r7
 800c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c454:	4770      	bx	lr

0800c456 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c456:	b480      	push	{r7}
 800c458:	b083      	sub	sp, #12
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2200      	movs	r2, #0
 800c462:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c466:	bf00      	nop
}
 800c468:	370c      	adds	r7, #12
 800c46a:	46bd      	mov	sp, r7
 800c46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c470:	4770      	bx	lr

0800c472 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c472:	b480      	push	{r7}
 800c474:	b083      	sub	sp, #12
 800c476:	af00      	add	r7, sp, #0
 800c478:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2201      	movs	r2, #1
 800c47e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2200      	movs	r2, #0
 800c486:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2200      	movs	r2, #0
 800c48e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c492:	2300      	movs	r3, #0
}
 800c494:	4618      	mov	r0, r3
 800c496:	370c      	adds	r7, #12
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr

0800c4a0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f004 fd74 	bl	8010fae <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	791b      	ldrb	r3, [r3, #4]
 800c4ca:	4619      	mov	r1, r3
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f000 fe91 	bl	800d1f4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	795b      	ldrb	r3, [r3, #5]
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f000 fe8b 	bl	800d1f4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c4de:	2300      	movs	r3, #0
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3708      	adds	r7, #8
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b086      	sub	sp, #24
 800c4ec:	af02      	add	r7, sp, #8
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	460b      	mov	r3, r1
 800c4f2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c4fa:	78fb      	ldrb	r3, [r7, #3]
 800c4fc:	b29b      	uxth	r3, r3
 800c4fe:	9300      	str	r3, [sp, #0]
 800c500:	4613      	mov	r3, r2
 800c502:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c506:	2100      	movs	r1, #0
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f000 f864 	bl	800c5d6 <USBH_GetDescriptor>
 800c50e:	4603      	mov	r3, r0
 800c510:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800c512:	7bfb      	ldrb	r3, [r7, #15]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d10a      	bne.n	800c52e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c524:	78fa      	ldrb	r2, [r7, #3]
 800c526:	b292      	uxth	r2, r2
 800c528:	4619      	mov	r1, r3
 800c52a:	f000 f918 	bl	800c75e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c52e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c530:	4618      	mov	r0, r3
 800c532:	3710      	adds	r7, #16
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b086      	sub	sp, #24
 800c53c:	af02      	add	r7, sp, #8
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	460b      	mov	r3, r1
 800c542:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	331c      	adds	r3, #28
 800c548:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c54a:	887b      	ldrh	r3, [r7, #2]
 800c54c:	9300      	str	r3, [sp, #0]
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c554:	2100      	movs	r1, #0
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f000 f83d 	bl	800c5d6 <USBH_GetDescriptor>
 800c55c:	4603      	mov	r3, r0
 800c55e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800c560:	7bfb      	ldrb	r3, [r7, #15]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d107      	bne.n	800c576 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800c566:	887b      	ldrh	r3, [r7, #2]
 800c568:	461a      	mov	r2, r3
 800c56a:	68b9      	ldr	r1, [r7, #8]
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f000 f987 	bl	800c880 <USBH_ParseCfgDesc>
 800c572:	4603      	mov	r3, r0
 800c574:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c576:	7bfb      	ldrb	r3, [r7, #15]
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3710      	adds	r7, #16
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b088      	sub	sp, #32
 800c584:	af02      	add	r7, sp, #8
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	607a      	str	r2, [r7, #4]
 800c58a:	461a      	mov	r2, r3
 800c58c:	460b      	mov	r3, r1
 800c58e:	72fb      	strb	r3, [r7, #11]
 800c590:	4613      	mov	r3, r2
 800c592:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800c594:	7afb      	ldrb	r3, [r7, #11]
 800c596:	b29b      	uxth	r3, r3
 800c598:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c59c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c5a4:	893b      	ldrh	r3, [r7, #8]
 800c5a6:	9300      	str	r3, [sp, #0]
 800c5a8:	460b      	mov	r3, r1
 800c5aa:	2100      	movs	r1, #0
 800c5ac:	68f8      	ldr	r0, [r7, #12]
 800c5ae:	f000 f812 	bl	800c5d6 <USBH_GetDescriptor>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c5b6:	7dfb      	ldrb	r3, [r7, #23]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d107      	bne.n	800c5cc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c5c2:	893a      	ldrh	r2, [r7, #8]
 800c5c4:	6879      	ldr	r1, [r7, #4]
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f000 fb24 	bl	800cc14 <USBH_ParseStringDesc>
  }

  return status;
 800c5cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3718      	adds	r7, #24
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}

0800c5d6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c5d6:	b580      	push	{r7, lr}
 800c5d8:	b084      	sub	sp, #16
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	60f8      	str	r0, [r7, #12]
 800c5de:	607b      	str	r3, [r7, #4]
 800c5e0:	460b      	mov	r3, r1
 800c5e2:	72fb      	strb	r3, [r7, #11]
 800c5e4:	4613      	mov	r3, r2
 800c5e6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	789b      	ldrb	r3, [r3, #2]
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d11c      	bne.n	800c62a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c5f0:	7afb      	ldrb	r3, [r7, #11]
 800c5f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c5f6:	b2da      	uxtb	r2, r3
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2206      	movs	r2, #6
 800c600:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	893a      	ldrh	r2, [r7, #8]
 800c606:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c608:	893b      	ldrh	r3, [r7, #8]
 800c60a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c60e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c612:	d104      	bne.n	800c61e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f240 4209 	movw	r2, #1033	; 0x409
 800c61a:	829a      	strh	r2, [r3, #20]
 800c61c:	e002      	b.n	800c624 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2200      	movs	r2, #0
 800c622:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	8b3a      	ldrh	r2, [r7, #24]
 800c628:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c62a:	8b3b      	ldrh	r3, [r7, #24]
 800c62c:	461a      	mov	r2, r3
 800c62e:	6879      	ldr	r1, [r7, #4]
 800c630:	68f8      	ldr	r0, [r7, #12]
 800c632:	f000 fb3d 	bl	800ccb0 <USBH_CtlReq>
 800c636:	4603      	mov	r3, r0
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3710      	adds	r7, #16
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	460b      	mov	r3, r1
 800c64a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	789b      	ldrb	r3, [r3, #2]
 800c650:	2b01      	cmp	r3, #1
 800c652:	d10f      	bne.n	800c674 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2200      	movs	r2, #0
 800c658:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2205      	movs	r2, #5
 800c65e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c660:	78fb      	ldrb	r3, [r7, #3]
 800c662:	b29a      	uxth	r2, r3
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2200      	movs	r2, #0
 800c66c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2200      	movs	r2, #0
 800c672:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c674:	2200      	movs	r2, #0
 800c676:	2100      	movs	r1, #0
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f000 fb19 	bl	800ccb0 <USBH_CtlReq>
 800c67e:	4603      	mov	r3, r0
}
 800c680:	4618      	mov	r0, r3
 800c682:	3708      	adds	r7, #8
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}

0800c688 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	460b      	mov	r3, r1
 800c692:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	789b      	ldrb	r3, [r3, #2]
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d10e      	bne.n	800c6ba <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2209      	movs	r2, #9
 800c6a6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	887a      	ldrh	r2, [r7, #2]
 800c6ac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	2100      	movs	r1, #0
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 faf6 	bl	800ccb0 <USBH_CtlReq>
 800c6c4:	4603      	mov	r3, r0
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3708      	adds	r7, #8
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}

0800c6ce <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c6ce:	b580      	push	{r7, lr}
 800c6d0:	b082      	sub	sp, #8
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	6078      	str	r0, [r7, #4]
 800c6d6:	460b      	mov	r3, r1
 800c6d8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	789b      	ldrb	r3, [r3, #2]
 800c6de:	2b01      	cmp	r3, #1
 800c6e0:	d10f      	bne.n	800c702 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2203      	movs	r2, #3
 800c6ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c6ee:	78fb      	ldrb	r3, [r7, #3]
 800c6f0:	b29a      	uxth	r2, r3
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2200      	movs	r2, #0
 800c700:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c702:	2200      	movs	r2, #0
 800c704:	2100      	movs	r1, #0
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f000 fad2 	bl	800ccb0 <USBH_CtlReq>
 800c70c:	4603      	mov	r3, r0
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3708      	adds	r7, #8
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}

0800c716 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c716:	b580      	push	{r7, lr}
 800c718:	b082      	sub	sp, #8
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
 800c71e:	460b      	mov	r3, r1
 800c720:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	789b      	ldrb	r3, [r3, #2]
 800c726:	2b01      	cmp	r3, #1
 800c728:	d10f      	bne.n	800c74a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2202      	movs	r2, #2
 800c72e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2201      	movs	r2, #1
 800c734:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2200      	movs	r2, #0
 800c73a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c73c:	78fb      	ldrb	r3, [r7, #3]
 800c73e:	b29a      	uxth	r2, r3
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2200      	movs	r2, #0
 800c748:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800c74a:	2200      	movs	r2, #0
 800c74c:	2100      	movs	r1, #0
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f000 faae 	bl	800ccb0 <USBH_CtlReq>
 800c754:	4603      	mov	r3, r0
}
 800c756:	4618      	mov	r0, r3
 800c758:	3708      	adds	r7, #8
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}

0800c75e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c75e:	b480      	push	{r7}
 800c760:	b085      	sub	sp, #20
 800c762:	af00      	add	r7, sp, #0
 800c764:	60f8      	str	r0, [r7, #12]
 800c766:	60b9      	str	r1, [r7, #8]
 800c768:	4613      	mov	r3, r2
 800c76a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	781a      	ldrb	r2, [r3, #0]
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	785a      	ldrb	r2, [r3, #1]
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	3302      	adds	r3, #2
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	b29a      	uxth	r2, r3
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	3303      	adds	r3, #3
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	021b      	lsls	r3, r3, #8
 800c78e:	b29b      	uxth	r3, r3
 800c790:	4313      	orrs	r3, r2
 800c792:	b29a      	uxth	r2, r3
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	791a      	ldrb	r2, [r3, #4]
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	795a      	ldrb	r2, [r3, #5]
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	799a      	ldrb	r2, [r3, #6]
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	79da      	ldrb	r2, [r3, #7]
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	79db      	ldrb	r3, [r3, #7]
 800c7bc:	2b20      	cmp	r3, #32
 800c7be:	dc11      	bgt.n	800c7e4 <USBH_ParseDevDesc+0x86>
 800c7c0:	2b08      	cmp	r3, #8
 800c7c2:	db16      	blt.n	800c7f2 <USBH_ParseDevDesc+0x94>
 800c7c4:	3b08      	subs	r3, #8
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	fa02 f303 	lsl.w	r3, r2, r3
 800c7cc:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800c7d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	bf14      	ite	ne
 800c7d8:	2301      	movne	r3, #1
 800c7da:	2300      	moveq	r3, #0
 800c7dc:	b2db      	uxtb	r3, r3
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d102      	bne.n	800c7e8 <USBH_ParseDevDesc+0x8a>
 800c7e2:	e006      	b.n	800c7f2 <USBH_ParseDevDesc+0x94>
 800c7e4:	2b40      	cmp	r3, #64	; 0x40
 800c7e6:	d104      	bne.n	800c7f2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	79da      	ldrb	r2, [r3, #7]
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	71da      	strb	r2, [r3, #7]
      break;
 800c7f0:	e003      	b.n	800c7fa <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2240      	movs	r2, #64	; 0x40
 800c7f6:	71da      	strb	r2, [r3, #7]
      break;
 800c7f8:	bf00      	nop
  }

  if (length > 8U)
 800c7fa:	88fb      	ldrh	r3, [r7, #6]
 800c7fc:	2b08      	cmp	r3, #8
 800c7fe:	d939      	bls.n	800c874 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	3308      	adds	r3, #8
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	b29a      	uxth	r2, r3
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	3309      	adds	r3, #9
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	b29b      	uxth	r3, r3
 800c810:	021b      	lsls	r3, r3, #8
 800c812:	b29b      	uxth	r3, r3
 800c814:	4313      	orrs	r3, r2
 800c816:	b29a      	uxth	r2, r3
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	330a      	adds	r3, #10
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	b29a      	uxth	r2, r3
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	330b      	adds	r3, #11
 800c828:	781b      	ldrb	r3, [r3, #0]
 800c82a:	b29b      	uxth	r3, r3
 800c82c:	021b      	lsls	r3, r3, #8
 800c82e:	b29b      	uxth	r3, r3
 800c830:	4313      	orrs	r3, r2
 800c832:	b29a      	uxth	r2, r3
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	330c      	adds	r3, #12
 800c83c:	781b      	ldrb	r3, [r3, #0]
 800c83e:	b29a      	uxth	r2, r3
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	330d      	adds	r3, #13
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	b29b      	uxth	r3, r3
 800c848:	021b      	lsls	r3, r3, #8
 800c84a:	b29b      	uxth	r3, r3
 800c84c:	4313      	orrs	r3, r2
 800c84e:	b29a      	uxth	r2, r3
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	7b9a      	ldrb	r2, [r3, #14]
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	7bda      	ldrb	r2, [r3, #15]
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	7c1a      	ldrb	r2, [r3, #16]
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	7c5a      	ldrb	r2, [r3, #17]
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	745a      	strb	r2, [r3, #17]
  }
}
 800c874:	bf00      	nop
 800c876:	3714      	adds	r7, #20
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr

0800c880 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b08c      	sub	sp, #48	; 0x30
 800c884:	af00      	add	r7, sp, #0
 800c886:	60f8      	str	r0, [r7, #12]
 800c888:	60b9      	str	r1, [r7, #8]
 800c88a:	4613      	mov	r3, r2
 800c88c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c894:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c896:	2300      	movs	r3, #0
 800c898:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	781a      	ldrb	r2, [r3, #0]
 800c8b4:	6a3b      	ldr	r3, [r7, #32]
 800c8b6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	785a      	ldrb	r2, [r3, #1]
 800c8bc:	6a3b      	ldr	r3, [r7, #32]
 800c8be:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	3302      	adds	r3, #2
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	b29a      	uxth	r2, r3
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	3303      	adds	r3, #3
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	021b      	lsls	r3, r3, #8
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	4313      	orrs	r3, r2
 800c8d6:	b29b      	uxth	r3, r3
 800c8d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8dc:	bf28      	it	cs
 800c8de:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800c8e2:	b29a      	uxth	r2, r3
 800c8e4:	6a3b      	ldr	r3, [r7, #32]
 800c8e6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	791a      	ldrb	r2, [r3, #4]
 800c8ec:	6a3b      	ldr	r3, [r7, #32]
 800c8ee:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	795a      	ldrb	r2, [r3, #5]
 800c8f4:	6a3b      	ldr	r3, [r7, #32]
 800c8f6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	799a      	ldrb	r2, [r3, #6]
 800c8fc:	6a3b      	ldr	r3, [r7, #32]
 800c8fe:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	79da      	ldrb	r2, [r3, #7]
 800c904:	6a3b      	ldr	r3, [r7, #32]
 800c906:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	7a1a      	ldrb	r2, [r3, #8]
 800c90c:	6a3b      	ldr	r3, [r7, #32]
 800c90e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800c910:	6a3b      	ldr	r3, [r7, #32]
 800c912:	781b      	ldrb	r3, [r3, #0]
 800c914:	2b09      	cmp	r3, #9
 800c916:	d002      	beq.n	800c91e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c918:	6a3b      	ldr	r3, [r7, #32]
 800c91a:	2209      	movs	r2, #9
 800c91c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c91e:	88fb      	ldrh	r3, [r7, #6]
 800c920:	2b09      	cmp	r3, #9
 800c922:	f240 809d 	bls.w	800ca60 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800c926:	2309      	movs	r3, #9
 800c928:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c92a:	2300      	movs	r3, #0
 800c92c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c92e:	e081      	b.n	800ca34 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c930:	f107 0316 	add.w	r3, r7, #22
 800c934:	4619      	mov	r1, r3
 800c936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c938:	f000 f99f 	bl	800cc7a <USBH_GetNextDesc>
 800c93c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c940:	785b      	ldrb	r3, [r3, #1]
 800c942:	2b04      	cmp	r3, #4
 800c944:	d176      	bne.n	800ca34 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	2b09      	cmp	r3, #9
 800c94c:	d002      	beq.n	800c954 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c950:	2209      	movs	r2, #9
 800c952:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c958:	221a      	movs	r2, #26
 800c95a:	fb02 f303 	mul.w	r3, r2, r3
 800c95e:	3308      	adds	r3, #8
 800c960:	6a3a      	ldr	r2, [r7, #32]
 800c962:	4413      	add	r3, r2
 800c964:	3302      	adds	r3, #2
 800c966:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c968:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c96a:	69f8      	ldr	r0, [r7, #28]
 800c96c:	f000 f87e 	bl	800ca6c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c970:	2300      	movs	r3, #0
 800c972:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c976:	2300      	movs	r3, #0
 800c978:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c97a:	e043      	b.n	800ca04 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c97c:	f107 0316 	add.w	r3, r7, #22
 800c980:	4619      	mov	r1, r3
 800c982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c984:	f000 f979 	bl	800cc7a <USBH_GetNextDesc>
 800c988:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98c:	785b      	ldrb	r3, [r3, #1]
 800c98e:	2b05      	cmp	r3, #5
 800c990:	d138      	bne.n	800ca04 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800c992:	69fb      	ldr	r3, [r7, #28]
 800c994:	795b      	ldrb	r3, [r3, #5]
 800c996:	2b01      	cmp	r3, #1
 800c998:	d10f      	bne.n	800c9ba <USBH_ParseCfgDesc+0x13a>
 800c99a:	69fb      	ldr	r3, [r7, #28]
 800c99c:	799b      	ldrb	r3, [r3, #6]
 800c99e:	2b02      	cmp	r3, #2
 800c9a0:	d10b      	bne.n	800c9ba <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c9a2:	69fb      	ldr	r3, [r7, #28]
 800c9a4:	79db      	ldrb	r3, [r3, #7]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d10f      	bne.n	800c9ca <USBH_ParseCfgDesc+0x14a>
 800c9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	2b09      	cmp	r3, #9
 800c9b0:	d00b      	beq.n	800c9ca <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800c9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b4:	2209      	movs	r2, #9
 800c9b6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c9b8:	e007      	b.n	800c9ca <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800c9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9bc:	781b      	ldrb	r3, [r3, #0]
 800c9be:	2b07      	cmp	r3, #7
 800c9c0:	d004      	beq.n	800c9cc <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c4:	2207      	movs	r2, #7
 800c9c6:	701a      	strb	r2, [r3, #0]
 800c9c8:	e000      	b.n	800c9cc <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c9ca:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c9cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9d0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c9d4:	3201      	adds	r2, #1
 800c9d6:	00d2      	lsls	r2, r2, #3
 800c9d8:	211a      	movs	r1, #26
 800c9da:	fb01 f303 	mul.w	r3, r1, r3
 800c9de:	4413      	add	r3, r2
 800c9e0:	3308      	adds	r3, #8
 800c9e2:	6a3a      	ldr	r2, [r7, #32]
 800c9e4:	4413      	add	r3, r2
 800c9e6:	3304      	adds	r3, #4
 800c9e8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c9ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9ec:	69b9      	ldr	r1, [r7, #24]
 800c9ee:	68f8      	ldr	r0, [r7, #12]
 800c9f0:	f000 f86b 	bl	800caca <USBH_ParseEPDesc>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800c9fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c9fe:	3301      	adds	r3, #1
 800ca00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ca04:	69fb      	ldr	r3, [r7, #28]
 800ca06:	791b      	ldrb	r3, [r3, #4]
 800ca08:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d204      	bcs.n	800ca1a <USBH_ParseCfgDesc+0x19a>
 800ca10:	6a3b      	ldr	r3, [r7, #32]
 800ca12:	885a      	ldrh	r2, [r3, #2]
 800ca14:	8afb      	ldrh	r3, [r7, #22]
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d8b0      	bhi.n	800c97c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800ca1a:	69fb      	ldr	r3, [r7, #28]
 800ca1c:	791b      	ldrb	r3, [r3, #4]
 800ca1e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d201      	bcs.n	800ca2a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800ca26:	2303      	movs	r3, #3
 800ca28:	e01c      	b.n	800ca64 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800ca2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca2e:	3301      	adds	r3, #1
 800ca30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ca34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca38:	2b01      	cmp	r3, #1
 800ca3a:	d805      	bhi.n	800ca48 <USBH_ParseCfgDesc+0x1c8>
 800ca3c:	6a3b      	ldr	r3, [r7, #32]
 800ca3e:	885a      	ldrh	r2, [r3, #2]
 800ca40:	8afb      	ldrh	r3, [r7, #22]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	f63f af74 	bhi.w	800c930 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800ca48:	6a3b      	ldr	r3, [r7, #32]
 800ca4a:	791b      	ldrb	r3, [r3, #4]
 800ca4c:	2b02      	cmp	r3, #2
 800ca4e:	bf28      	it	cs
 800ca50:	2302      	movcs	r3, #2
 800ca52:	b2db      	uxtb	r3, r3
 800ca54:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	d201      	bcs.n	800ca60 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800ca5c:	2303      	movs	r3, #3
 800ca5e:	e001      	b.n	800ca64 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800ca60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3730      	adds	r7, #48	; 0x30
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}

0800ca6c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b083      	sub	sp, #12
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	781a      	ldrb	r2, [r3, #0]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	785a      	ldrb	r2, [r3, #1]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	789a      	ldrb	r2, [r3, #2]
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	78da      	ldrb	r2, [r3, #3]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	791a      	ldrb	r2, [r3, #4]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	795a      	ldrb	r2, [r3, #5]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	799a      	ldrb	r2, [r3, #6]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	79da      	ldrb	r2, [r3, #7]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	7a1a      	ldrb	r2, [r3, #8]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	721a      	strb	r2, [r3, #8]
}
 800cabe:	bf00      	nop
 800cac0:	370c      	adds	r7, #12
 800cac2:	46bd      	mov	sp, r7
 800cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac8:	4770      	bx	lr

0800caca <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800caca:	b480      	push	{r7}
 800cacc:	b087      	sub	sp, #28
 800cace:	af00      	add	r7, sp, #0
 800cad0:	60f8      	str	r0, [r7, #12]
 800cad2:	60b9      	str	r1, [r7, #8]
 800cad4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800cad6:	2300      	movs	r3, #0
 800cad8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	781a      	ldrb	r2, [r3, #0]
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	785a      	ldrb	r2, [r3, #1]
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	789a      	ldrb	r2, [r3, #2]
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	78da      	ldrb	r2, [r3, #3]
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	3304      	adds	r3, #4
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	b29a      	uxth	r2, r3
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	3305      	adds	r3, #5
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	021b      	lsls	r3, r3, #8
 800cb0c:	b29b      	uxth	r3, r3
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	b29a      	uxth	r2, r3
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	799a      	ldrb	r2, [r3, #6]
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	889b      	ldrh	r3, [r3, #4]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d102      	bne.n	800cb2c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800cb26:	2303      	movs	r3, #3
 800cb28:	75fb      	strb	r3, [r7, #23]
 800cb2a:	e033      	b.n	800cb94 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	889b      	ldrh	r3, [r3, #4]
 800cb30:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800cb34:	f023 0307 	bic.w	r3, r3, #7
 800cb38:	b29a      	uxth	r2, r3
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	889b      	ldrh	r3, [r3, #4]
 800cb42:	b21a      	sxth	r2, r3
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	3304      	adds	r3, #4
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	b299      	uxth	r1, r3
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	3305      	adds	r3, #5
 800cb50:	781b      	ldrb	r3, [r3, #0]
 800cb52:	b29b      	uxth	r3, r3
 800cb54:	021b      	lsls	r3, r3, #8
 800cb56:	b29b      	uxth	r3, r3
 800cb58:	430b      	orrs	r3, r1
 800cb5a:	b29b      	uxth	r3, r3
 800cb5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d110      	bne.n	800cb86 <USBH_ParseEPDesc+0xbc>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	3304      	adds	r3, #4
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	b299      	uxth	r1, r3
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	3305      	adds	r3, #5
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	b29b      	uxth	r3, r3
 800cb74:	021b      	lsls	r3, r3, #8
 800cb76:	b29b      	uxth	r3, r3
 800cb78:	430b      	orrs	r3, r1
 800cb7a:	b29b      	uxth	r3, r3
 800cb7c:	b21b      	sxth	r3, r3
 800cb7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb82:	b21b      	sxth	r3, r3
 800cb84:	e001      	b.n	800cb8a <USBH_ParseEPDesc+0xc0>
 800cb86:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	b21b      	sxth	r3, r3
 800cb8e:	b29a      	uxth	r2, r3
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d116      	bne.n	800cbcc <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	78db      	ldrb	r3, [r3, #3]
 800cba2:	f003 0303 	and.w	r3, r3, #3
 800cba6:	2b01      	cmp	r3, #1
 800cba8:	d005      	beq.n	800cbb6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	78db      	ldrb	r3, [r3, #3]
 800cbae:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800cbb2:	2b03      	cmp	r3, #3
 800cbb4:	d127      	bne.n	800cc06 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	799b      	ldrb	r3, [r3, #6]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d003      	beq.n	800cbc6 <USBH_ParseEPDesc+0xfc>
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	799b      	ldrb	r3, [r3, #6]
 800cbc2:	2b10      	cmp	r3, #16
 800cbc4:	d91f      	bls.n	800cc06 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800cbc6:	2303      	movs	r3, #3
 800cbc8:	75fb      	strb	r3, [r7, #23]
 800cbca:	e01c      	b.n	800cc06 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	78db      	ldrb	r3, [r3, #3]
 800cbd0:	f003 0303 	and.w	r3, r3, #3
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	d10a      	bne.n	800cbee <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	799b      	ldrb	r3, [r3, #6]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d003      	beq.n	800cbe8 <USBH_ParseEPDesc+0x11e>
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	799b      	ldrb	r3, [r3, #6]
 800cbe4:	2b10      	cmp	r3, #16
 800cbe6:	d90e      	bls.n	800cc06 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800cbe8:	2303      	movs	r3, #3
 800cbea:	75fb      	strb	r3, [r7, #23]
 800cbec:	e00b      	b.n	800cc06 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	78db      	ldrb	r3, [r3, #3]
 800cbf2:	f003 0303 	and.w	r3, r3, #3
 800cbf6:	2b03      	cmp	r3, #3
 800cbf8:	d105      	bne.n	800cc06 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	799b      	ldrb	r3, [r3, #6]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d101      	bne.n	800cc06 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800cc02:	2303      	movs	r3, #3
 800cc04:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800cc06:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	371c      	adds	r7, #28
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr

0800cc14 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b087      	sub	sp, #28
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	60f8      	str	r0, [r7, #12]
 800cc1c:	60b9      	str	r1, [r7, #8]
 800cc1e:	4613      	mov	r3, r2
 800cc20:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	3301      	adds	r3, #1
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	2b03      	cmp	r3, #3
 800cc2a:	d120      	bne.n	800cc6e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	781b      	ldrb	r3, [r3, #0]
 800cc30:	1e9a      	subs	r2, r3, #2
 800cc32:	88fb      	ldrh	r3, [r7, #6]
 800cc34:	4293      	cmp	r3, r2
 800cc36:	bf28      	it	cs
 800cc38:	4613      	movcs	r3, r2
 800cc3a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	3302      	adds	r3, #2
 800cc40:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800cc42:	2300      	movs	r3, #0
 800cc44:	82fb      	strh	r3, [r7, #22]
 800cc46:	e00b      	b.n	800cc60 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800cc48:	8afb      	ldrh	r3, [r7, #22]
 800cc4a:	68fa      	ldr	r2, [r7, #12]
 800cc4c:	4413      	add	r3, r2
 800cc4e:	781a      	ldrb	r2, [r3, #0]
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	701a      	strb	r2, [r3, #0]
      pdest++;
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	3301      	adds	r3, #1
 800cc58:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800cc5a:	8afb      	ldrh	r3, [r7, #22]
 800cc5c:	3302      	adds	r3, #2
 800cc5e:	82fb      	strh	r3, [r7, #22]
 800cc60:	8afa      	ldrh	r2, [r7, #22]
 800cc62:	8abb      	ldrh	r3, [r7, #20]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d3ef      	bcc.n	800cc48 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	701a      	strb	r2, [r3, #0]
  }
}
 800cc6e:	bf00      	nop
 800cc70:	371c      	adds	r7, #28
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr

0800cc7a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800cc7a:	b480      	push	{r7}
 800cc7c:	b085      	sub	sp, #20
 800cc7e:	af00      	add	r7, sp, #0
 800cc80:	6078      	str	r0, [r7, #4]
 800cc82:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	881a      	ldrh	r2, [r3, #0]
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	b29b      	uxth	r3, r3
 800cc8e:	4413      	add	r3, r2
 800cc90:	b29a      	uxth	r2, r3
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	4413      	add	r3, r2
 800cca0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cca2:	68fb      	ldr	r3, [r7, #12]
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3714      	adds	r7, #20
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccae:	4770      	bx	lr

0800ccb0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b086      	sub	sp, #24
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	60f8      	str	r0, [r7, #12]
 800ccb8:	60b9      	str	r1, [r7, #8]
 800ccba:	4613      	mov	r3, r2
 800ccbc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	789b      	ldrb	r3, [r3, #2]
 800ccc6:	2b01      	cmp	r3, #1
 800ccc8:	d002      	beq.n	800ccd0 <USBH_CtlReq+0x20>
 800ccca:	2b02      	cmp	r3, #2
 800cccc:	d00f      	beq.n	800ccee <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ccce:	e027      	b.n	800cd20 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	68ba      	ldr	r2, [r7, #8]
 800ccd4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	88fa      	ldrh	r2, [r7, #6]
 800ccda:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2201      	movs	r2, #1
 800cce0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2202      	movs	r2, #2
 800cce6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800cce8:	2301      	movs	r3, #1
 800ccea:	75fb      	strb	r3, [r7, #23]
      break;
 800ccec:	e018      	b.n	800cd20 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ccee:	68f8      	ldr	r0, [r7, #12]
 800ccf0:	f000 f81c 	bl	800cd2c <USBH_HandleControl>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ccf8:	7dfb      	ldrb	r3, [r7, #23]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d002      	beq.n	800cd04 <USBH_CtlReq+0x54>
 800ccfe:	7dfb      	ldrb	r3, [r7, #23]
 800cd00:	2b03      	cmp	r3, #3
 800cd02:	d106      	bne.n	800cd12 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2201      	movs	r2, #1
 800cd08:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	761a      	strb	r2, [r3, #24]
      break;
 800cd10:	e005      	b.n	800cd1e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800cd12:	7dfb      	ldrb	r3, [r7, #23]
 800cd14:	2b02      	cmp	r3, #2
 800cd16:	d102      	bne.n	800cd1e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	709a      	strb	r2, [r3, #2]
      break;
 800cd1e:	bf00      	nop
  }
  return status;
 800cd20:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3718      	adds	r7, #24
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
	...

0800cd2c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b086      	sub	sp, #24
 800cd30:	af02      	add	r7, sp, #8
 800cd32:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800cd34:	2301      	movs	r3, #1
 800cd36:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	7e1b      	ldrb	r3, [r3, #24]
 800cd40:	3b01      	subs	r3, #1
 800cd42:	2b0a      	cmp	r3, #10
 800cd44:	f200 8156 	bhi.w	800cff4 <USBH_HandleControl+0x2c8>
 800cd48:	a201      	add	r2, pc, #4	; (adr r2, 800cd50 <USBH_HandleControl+0x24>)
 800cd4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd4e:	bf00      	nop
 800cd50:	0800cd7d 	.word	0x0800cd7d
 800cd54:	0800cd97 	.word	0x0800cd97
 800cd58:	0800ce01 	.word	0x0800ce01
 800cd5c:	0800ce27 	.word	0x0800ce27
 800cd60:	0800ce5f 	.word	0x0800ce5f
 800cd64:	0800ce89 	.word	0x0800ce89
 800cd68:	0800cedb 	.word	0x0800cedb
 800cd6c:	0800cefd 	.word	0x0800cefd
 800cd70:	0800cf39 	.word	0x0800cf39
 800cd74:	0800cf5f 	.word	0x0800cf5f
 800cd78:	0800cf9d 	.word	0x0800cf9d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f103 0110 	add.w	r1, r3, #16
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	795b      	ldrb	r3, [r3, #5]
 800cd86:	461a      	mov	r2, r3
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f000 f943 	bl	800d014 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2202      	movs	r2, #2
 800cd92:	761a      	strb	r2, [r3, #24]
      break;
 800cd94:	e139      	b.n	800d00a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	795b      	ldrb	r3, [r3, #5]
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f004 f9f5 	bl	801118c <USBH_LL_GetURBState>
 800cda2:	4603      	mov	r3, r0
 800cda4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800cda6:	7bbb      	ldrb	r3, [r7, #14]
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	d11e      	bne.n	800cdea <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	7c1b      	ldrb	r3, [r3, #16]
 800cdb0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cdb4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	8adb      	ldrh	r3, [r3, #22]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d00a      	beq.n	800cdd4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800cdbe:	7b7b      	ldrb	r3, [r7, #13]
 800cdc0:	2b80      	cmp	r3, #128	; 0x80
 800cdc2:	d103      	bne.n	800cdcc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2203      	movs	r2, #3
 800cdc8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cdca:	e115      	b.n	800cff8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2205      	movs	r2, #5
 800cdd0:	761a      	strb	r2, [r3, #24]
      break;
 800cdd2:	e111      	b.n	800cff8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800cdd4:	7b7b      	ldrb	r3, [r7, #13]
 800cdd6:	2b80      	cmp	r3, #128	; 0x80
 800cdd8:	d103      	bne.n	800cde2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2209      	movs	r2, #9
 800cdde:	761a      	strb	r2, [r3, #24]
      break;
 800cde0:	e10a      	b.n	800cff8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2207      	movs	r2, #7
 800cde6:	761a      	strb	r2, [r3, #24]
      break;
 800cde8:	e106      	b.n	800cff8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800cdea:	7bbb      	ldrb	r3, [r7, #14]
 800cdec:	2b04      	cmp	r3, #4
 800cdee:	d003      	beq.n	800cdf8 <USBH_HandleControl+0xcc>
 800cdf0:	7bbb      	ldrb	r3, [r7, #14]
 800cdf2:	2b02      	cmp	r3, #2
 800cdf4:	f040 8100 	bne.w	800cff8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	220b      	movs	r2, #11
 800cdfc:	761a      	strb	r2, [r3, #24]
      break;
 800cdfe:	e0fb      	b.n	800cff8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ce06:	b29a      	uxth	r2, r3
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6899      	ldr	r1, [r3, #8]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	899a      	ldrh	r2, [r3, #12]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	791b      	ldrb	r3, [r3, #4]
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f000 f93a 	bl	800d092 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2204      	movs	r2, #4
 800ce22:	761a      	strb	r2, [r3, #24]
      break;
 800ce24:	e0f1      	b.n	800d00a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	791b      	ldrb	r3, [r3, #4]
 800ce2a:	4619      	mov	r1, r3
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f004 f9ad 	bl	801118c <USBH_LL_GetURBState>
 800ce32:	4603      	mov	r3, r0
 800ce34:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ce36:	7bbb      	ldrb	r3, [r7, #14]
 800ce38:	2b01      	cmp	r3, #1
 800ce3a:	d102      	bne.n	800ce42 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2209      	movs	r2, #9
 800ce40:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ce42:	7bbb      	ldrb	r3, [r7, #14]
 800ce44:	2b05      	cmp	r3, #5
 800ce46:	d102      	bne.n	800ce4e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ce48:	2303      	movs	r3, #3
 800ce4a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ce4c:	e0d6      	b.n	800cffc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ce4e:	7bbb      	ldrb	r3, [r7, #14]
 800ce50:	2b04      	cmp	r3, #4
 800ce52:	f040 80d3 	bne.w	800cffc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	220b      	movs	r2, #11
 800ce5a:	761a      	strb	r2, [r3, #24]
      break;
 800ce5c:	e0ce      	b.n	800cffc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6899      	ldr	r1, [r3, #8]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	899a      	ldrh	r2, [r3, #12]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	795b      	ldrb	r3, [r3, #5]
 800ce6a:	2001      	movs	r0, #1
 800ce6c:	9000      	str	r0, [sp, #0]
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f000 f8ea 	bl	800d048 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ce7a:	b29a      	uxth	r2, r3
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2206      	movs	r2, #6
 800ce84:	761a      	strb	r2, [r3, #24]
      break;
 800ce86:	e0c0      	b.n	800d00a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	795b      	ldrb	r3, [r3, #5]
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f004 f97c 	bl	801118c <USBH_LL_GetURBState>
 800ce94:	4603      	mov	r3, r0
 800ce96:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ce98:	7bbb      	ldrb	r3, [r7, #14]
 800ce9a:	2b01      	cmp	r3, #1
 800ce9c:	d103      	bne.n	800cea6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2207      	movs	r2, #7
 800cea2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cea4:	e0ac      	b.n	800d000 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800cea6:	7bbb      	ldrb	r3, [r7, #14]
 800cea8:	2b05      	cmp	r3, #5
 800ceaa:	d105      	bne.n	800ceb8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	220c      	movs	r2, #12
 800ceb0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ceb2:	2303      	movs	r3, #3
 800ceb4:	73fb      	strb	r3, [r7, #15]
      break;
 800ceb6:	e0a3      	b.n	800d000 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ceb8:	7bbb      	ldrb	r3, [r7, #14]
 800ceba:	2b02      	cmp	r3, #2
 800cebc:	d103      	bne.n	800cec6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2205      	movs	r2, #5
 800cec2:	761a      	strb	r2, [r3, #24]
      break;
 800cec4:	e09c      	b.n	800d000 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800cec6:	7bbb      	ldrb	r3, [r7, #14]
 800cec8:	2b04      	cmp	r3, #4
 800ceca:	f040 8099 	bne.w	800d000 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	220b      	movs	r2, #11
 800ced2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ced4:	2302      	movs	r3, #2
 800ced6:	73fb      	strb	r3, [r7, #15]
      break;
 800ced8:	e092      	b.n	800d000 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	791b      	ldrb	r3, [r3, #4]
 800cede:	2200      	movs	r2, #0
 800cee0:	2100      	movs	r1, #0
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f000 f8d5 	bl	800d092 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ceee:	b29a      	uxth	r2, r3
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2208      	movs	r2, #8
 800cef8:	761a      	strb	r2, [r3, #24]

      break;
 800cefa:	e086      	b.n	800d00a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	791b      	ldrb	r3, [r3, #4]
 800cf00:	4619      	mov	r1, r3
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f004 f942 	bl	801118c <USBH_LL_GetURBState>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cf0c:	7bbb      	ldrb	r3, [r7, #14]
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d105      	bne.n	800cf1e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	220d      	movs	r2, #13
 800cf16:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cf1c:	e072      	b.n	800d004 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800cf1e:	7bbb      	ldrb	r3, [r7, #14]
 800cf20:	2b04      	cmp	r3, #4
 800cf22:	d103      	bne.n	800cf2c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	220b      	movs	r2, #11
 800cf28:	761a      	strb	r2, [r3, #24]
      break;
 800cf2a:	e06b      	b.n	800d004 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800cf2c:	7bbb      	ldrb	r3, [r7, #14]
 800cf2e:	2b05      	cmp	r3, #5
 800cf30:	d168      	bne.n	800d004 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800cf32:	2303      	movs	r3, #3
 800cf34:	73fb      	strb	r3, [r7, #15]
      break;
 800cf36:	e065      	b.n	800d004 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	795b      	ldrb	r3, [r3, #5]
 800cf3c:	2201      	movs	r2, #1
 800cf3e:	9200      	str	r2, [sp, #0]
 800cf40:	2200      	movs	r2, #0
 800cf42:	2100      	movs	r1, #0
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f000 f87f 	bl	800d048 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cf50:	b29a      	uxth	r2, r3
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	220a      	movs	r2, #10
 800cf5a:	761a      	strb	r2, [r3, #24]
      break;
 800cf5c:	e055      	b.n	800d00a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	795b      	ldrb	r3, [r3, #5]
 800cf62:	4619      	mov	r1, r3
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f004 f911 	bl	801118c <USBH_LL_GetURBState>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800cf6e:	7bbb      	ldrb	r3, [r7, #14]
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d105      	bne.n	800cf80 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800cf74:	2300      	movs	r3, #0
 800cf76:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	220d      	movs	r2, #13
 800cf7c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cf7e:	e043      	b.n	800d008 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cf80:	7bbb      	ldrb	r3, [r7, #14]
 800cf82:	2b02      	cmp	r3, #2
 800cf84:	d103      	bne.n	800cf8e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2209      	movs	r2, #9
 800cf8a:	761a      	strb	r2, [r3, #24]
      break;
 800cf8c:	e03c      	b.n	800d008 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800cf8e:	7bbb      	ldrb	r3, [r7, #14]
 800cf90:	2b04      	cmp	r3, #4
 800cf92:	d139      	bne.n	800d008 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	220b      	movs	r2, #11
 800cf98:	761a      	strb	r2, [r3, #24]
      break;
 800cf9a:	e035      	b.n	800d008 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	7e5b      	ldrb	r3, [r3, #25]
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	b2da      	uxtb	r2, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	765a      	strb	r2, [r3, #25]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	7e5b      	ldrb	r3, [r3, #25]
 800cfac:	2b02      	cmp	r3, #2
 800cfae:	d806      	bhi.n	800cfbe <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800cfbc:	e025      	b.n	800d00a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cfc4:	2106      	movs	r1, #6
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	795b      	ldrb	r3, [r3, #5]
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f000 f90c 	bl	800d1f4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	791b      	ldrb	r3, [r3, #4]
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 f906 	bl	800d1f4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2200      	movs	r2, #0
 800cfec:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800cfee:	2302      	movs	r3, #2
 800cff0:	73fb      	strb	r3, [r7, #15]
      break;
 800cff2:	e00a      	b.n	800d00a <USBH_HandleControl+0x2de>

    default:
      break;
 800cff4:	bf00      	nop
 800cff6:	e008      	b.n	800d00a <USBH_HandleControl+0x2de>
      break;
 800cff8:	bf00      	nop
 800cffa:	e006      	b.n	800d00a <USBH_HandleControl+0x2de>
      break;
 800cffc:	bf00      	nop
 800cffe:	e004      	b.n	800d00a <USBH_HandleControl+0x2de>
      break;
 800d000:	bf00      	nop
 800d002:	e002      	b.n	800d00a <USBH_HandleControl+0x2de>
      break;
 800d004:	bf00      	nop
 800d006:	e000      	b.n	800d00a <USBH_HandleControl+0x2de>
      break;
 800d008:	bf00      	nop
  }

  return status;
 800d00a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3710      	adds	r7, #16
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}

0800d014 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b088      	sub	sp, #32
 800d018:	af04      	add	r7, sp, #16
 800d01a:	60f8      	str	r0, [r7, #12]
 800d01c:	60b9      	str	r1, [r7, #8]
 800d01e:	4613      	mov	r3, r2
 800d020:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d022:	79f9      	ldrb	r1, [r7, #7]
 800d024:	2300      	movs	r3, #0
 800d026:	9303      	str	r3, [sp, #12]
 800d028:	2308      	movs	r3, #8
 800d02a:	9302      	str	r3, [sp, #8]
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	9301      	str	r3, [sp, #4]
 800d030:	2300      	movs	r3, #0
 800d032:	9300      	str	r3, [sp, #0]
 800d034:	2300      	movs	r3, #0
 800d036:	2200      	movs	r2, #0
 800d038:	68f8      	ldr	r0, [r7, #12]
 800d03a:	f004 f876 	bl	801112a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800d03e:	2300      	movs	r3, #0
}
 800d040:	4618      	mov	r0, r3
 800d042:	3710      	adds	r7, #16
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b088      	sub	sp, #32
 800d04c:	af04      	add	r7, sp, #16
 800d04e:	60f8      	str	r0, [r7, #12]
 800d050:	60b9      	str	r1, [r7, #8]
 800d052:	4611      	mov	r1, r2
 800d054:	461a      	mov	r2, r3
 800d056:	460b      	mov	r3, r1
 800d058:	80fb      	strh	r3, [r7, #6]
 800d05a:	4613      	mov	r3, r2
 800d05c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d064:	2b00      	cmp	r3, #0
 800d066:	d001      	beq.n	800d06c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d068:	2300      	movs	r3, #0
 800d06a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d06c:	7979      	ldrb	r1, [r7, #5]
 800d06e:	7e3b      	ldrb	r3, [r7, #24]
 800d070:	9303      	str	r3, [sp, #12]
 800d072:	88fb      	ldrh	r3, [r7, #6]
 800d074:	9302      	str	r3, [sp, #8]
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	9301      	str	r3, [sp, #4]
 800d07a:	2301      	movs	r3, #1
 800d07c:	9300      	str	r3, [sp, #0]
 800d07e:	2300      	movs	r3, #0
 800d080:	2200      	movs	r2, #0
 800d082:	68f8      	ldr	r0, [r7, #12]
 800d084:	f004 f851 	bl	801112a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d088:	2300      	movs	r3, #0
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3710      	adds	r7, #16
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}

0800d092 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d092:	b580      	push	{r7, lr}
 800d094:	b088      	sub	sp, #32
 800d096:	af04      	add	r7, sp, #16
 800d098:	60f8      	str	r0, [r7, #12]
 800d09a:	60b9      	str	r1, [r7, #8]
 800d09c:	4611      	mov	r1, r2
 800d09e:	461a      	mov	r2, r3
 800d0a0:	460b      	mov	r3, r1
 800d0a2:	80fb      	strh	r3, [r7, #6]
 800d0a4:	4613      	mov	r3, r2
 800d0a6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d0a8:	7979      	ldrb	r1, [r7, #5]
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	9303      	str	r3, [sp, #12]
 800d0ae:	88fb      	ldrh	r3, [r7, #6]
 800d0b0:	9302      	str	r3, [sp, #8]
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	9301      	str	r3, [sp, #4]
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	9300      	str	r3, [sp, #0]
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	2201      	movs	r2, #1
 800d0be:	68f8      	ldr	r0, [r7, #12]
 800d0c0:	f004 f833 	bl	801112a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d0c4:	2300      	movs	r3, #0

}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3710      	adds	r7, #16
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}

0800d0ce <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d0ce:	b580      	push	{r7, lr}
 800d0d0:	b088      	sub	sp, #32
 800d0d2:	af04      	add	r7, sp, #16
 800d0d4:	60f8      	str	r0, [r7, #12]
 800d0d6:	60b9      	str	r1, [r7, #8]
 800d0d8:	4611      	mov	r1, r2
 800d0da:	461a      	mov	r2, r3
 800d0dc:	460b      	mov	r3, r1
 800d0de:	80fb      	strh	r3, [r7, #6]
 800d0e0:	4613      	mov	r3, r2
 800d0e2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d001      	beq.n	800d0f2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d0f2:	7979      	ldrb	r1, [r7, #5]
 800d0f4:	7e3b      	ldrb	r3, [r7, #24]
 800d0f6:	9303      	str	r3, [sp, #12]
 800d0f8:	88fb      	ldrh	r3, [r7, #6]
 800d0fa:	9302      	str	r3, [sp, #8]
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	9301      	str	r3, [sp, #4]
 800d100:	2301      	movs	r3, #1
 800d102:	9300      	str	r3, [sp, #0]
 800d104:	2302      	movs	r3, #2
 800d106:	2200      	movs	r2, #0
 800d108:	68f8      	ldr	r0, [r7, #12]
 800d10a:	f004 f80e 	bl	801112a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d10e:	2300      	movs	r3, #0
}
 800d110:	4618      	mov	r0, r3
 800d112:	3710      	adds	r7, #16
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}

0800d118 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b088      	sub	sp, #32
 800d11c:	af04      	add	r7, sp, #16
 800d11e:	60f8      	str	r0, [r7, #12]
 800d120:	60b9      	str	r1, [r7, #8]
 800d122:	4611      	mov	r1, r2
 800d124:	461a      	mov	r2, r3
 800d126:	460b      	mov	r3, r1
 800d128:	80fb      	strh	r3, [r7, #6]
 800d12a:	4613      	mov	r3, r2
 800d12c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d12e:	7979      	ldrb	r1, [r7, #5]
 800d130:	2300      	movs	r3, #0
 800d132:	9303      	str	r3, [sp, #12]
 800d134:	88fb      	ldrh	r3, [r7, #6]
 800d136:	9302      	str	r3, [sp, #8]
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	9301      	str	r3, [sp, #4]
 800d13c:	2301      	movs	r3, #1
 800d13e:	9300      	str	r3, [sp, #0]
 800d140:	2302      	movs	r3, #2
 800d142:	2201      	movs	r2, #1
 800d144:	68f8      	ldr	r0, [r7, #12]
 800d146:	f003 fff0 	bl	801112a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d14a:	2300      	movs	r3, #0
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3710      	adds	r7, #16
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b086      	sub	sp, #24
 800d158:	af04      	add	r7, sp, #16
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	4608      	mov	r0, r1
 800d15e:	4611      	mov	r1, r2
 800d160:	461a      	mov	r2, r3
 800d162:	4603      	mov	r3, r0
 800d164:	70fb      	strb	r3, [r7, #3]
 800d166:	460b      	mov	r3, r1
 800d168:	70bb      	strb	r3, [r7, #2]
 800d16a:	4613      	mov	r3, r2
 800d16c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d16e:	7878      	ldrb	r0, [r7, #1]
 800d170:	78ba      	ldrb	r2, [r7, #2]
 800d172:	78f9      	ldrb	r1, [r7, #3]
 800d174:	8b3b      	ldrh	r3, [r7, #24]
 800d176:	9302      	str	r3, [sp, #8]
 800d178:	7d3b      	ldrb	r3, [r7, #20]
 800d17a:	9301      	str	r3, [sp, #4]
 800d17c:	7c3b      	ldrb	r3, [r7, #16]
 800d17e:	9300      	str	r3, [sp, #0]
 800d180:	4603      	mov	r3, r0
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f003 ff83 	bl	801108e <USBH_LL_OpenPipe>

  return USBH_OK;
 800d188:	2300      	movs	r3, #0
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3708      	adds	r7, #8
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}

0800d192 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d192:	b580      	push	{r7, lr}
 800d194:	b082      	sub	sp, #8
 800d196:	af00      	add	r7, sp, #0
 800d198:	6078      	str	r0, [r7, #4]
 800d19a:	460b      	mov	r3, r1
 800d19c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d19e:	78fb      	ldrb	r3, [r7, #3]
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f003 ffa2 	bl	80110ec <USBH_LL_ClosePipe>

  return USBH_OK;
 800d1a8:	2300      	movs	r3, #0
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3708      	adds	r7, #8
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}

0800d1b2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d1b2:	b580      	push	{r7, lr}
 800d1b4:	b084      	sub	sp, #16
 800d1b6:	af00      	add	r7, sp, #0
 800d1b8:	6078      	str	r0, [r7, #4]
 800d1ba:	460b      	mov	r3, r1
 800d1bc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f000 f836 	bl	800d230 <USBH_GetFreePipe>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d1c8:	89fb      	ldrh	r3, [r7, #14]
 800d1ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d00a      	beq.n	800d1e8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d1d2:	78fa      	ldrb	r2, [r7, #3]
 800d1d4:	89fb      	ldrh	r3, [r7, #14]
 800d1d6:	f003 030f 	and.w	r3, r3, #15
 800d1da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d1de:	6879      	ldr	r1, [r7, #4]
 800d1e0:	33e0      	adds	r3, #224	; 0xe0
 800d1e2:	009b      	lsls	r3, r3, #2
 800d1e4:	440b      	add	r3, r1
 800d1e6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d1e8:	89fb      	ldrh	r3, [r7, #14]
 800d1ea:	b2db      	uxtb	r3, r3
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3710      	adds	r7, #16
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b083      	sub	sp, #12
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	460b      	mov	r3, r1
 800d1fe:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d200:	78fb      	ldrb	r3, [r7, #3]
 800d202:	2b0f      	cmp	r3, #15
 800d204:	d80d      	bhi.n	800d222 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d206:	78fb      	ldrb	r3, [r7, #3]
 800d208:	687a      	ldr	r2, [r7, #4]
 800d20a:	33e0      	adds	r3, #224	; 0xe0
 800d20c:	009b      	lsls	r3, r3, #2
 800d20e:	4413      	add	r3, r2
 800d210:	685a      	ldr	r2, [r3, #4]
 800d212:	78fb      	ldrb	r3, [r7, #3]
 800d214:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d218:	6879      	ldr	r1, [r7, #4]
 800d21a:	33e0      	adds	r3, #224	; 0xe0
 800d21c:	009b      	lsls	r3, r3, #2
 800d21e:	440b      	add	r3, r1
 800d220:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d222:	2300      	movs	r3, #0
}
 800d224:	4618      	mov	r0, r3
 800d226:	370c      	adds	r7, #12
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr

0800d230 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d230:	b480      	push	{r7}
 800d232:	b085      	sub	sp, #20
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d238:	2300      	movs	r3, #0
 800d23a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d23c:	2300      	movs	r3, #0
 800d23e:	73fb      	strb	r3, [r7, #15]
 800d240:	e00f      	b.n	800d262 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d242:	7bfb      	ldrb	r3, [r7, #15]
 800d244:	687a      	ldr	r2, [r7, #4]
 800d246:	33e0      	adds	r3, #224	; 0xe0
 800d248:	009b      	lsls	r3, r3, #2
 800d24a:	4413      	add	r3, r2
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d252:	2b00      	cmp	r3, #0
 800d254:	d102      	bne.n	800d25c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d256:	7bfb      	ldrb	r3, [r7, #15]
 800d258:	b29b      	uxth	r3, r3
 800d25a:	e007      	b.n	800d26c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d25c:	7bfb      	ldrb	r3, [r7, #15]
 800d25e:	3301      	adds	r3, #1
 800d260:	73fb      	strb	r3, [r7, #15]
 800d262:	7bfb      	ldrb	r3, [r7, #15]
 800d264:	2b0f      	cmp	r3, #15
 800d266:	d9ec      	bls.n	800d242 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d268:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3714      	adds	r7, #20
 800d270:	46bd      	mov	sp, r7
 800d272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d276:	4770      	bx	lr

0800d278 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b084      	sub	sp, #16
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	4603      	mov	r3, r0
 800d280:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d282:	79fb      	ldrb	r3, [r7, #7]
 800d284:	4a08      	ldr	r2, [pc, #32]	; (800d2a8 <disk_status+0x30>)
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	4413      	add	r3, r2
 800d28a:	685b      	ldr	r3, [r3, #4]
 800d28c:	685b      	ldr	r3, [r3, #4]
 800d28e:	79fa      	ldrb	r2, [r7, #7]
 800d290:	4905      	ldr	r1, [pc, #20]	; (800d2a8 <disk_status+0x30>)
 800d292:	440a      	add	r2, r1
 800d294:	7a12      	ldrb	r2, [r2, #8]
 800d296:	4610      	mov	r0, r2
 800d298:	4798      	blx	r3
 800d29a:	4603      	mov	r3, r0
 800d29c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d29e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3710      	adds	r7, #16
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	20002efc 	.word	0x20002efc

0800d2ac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b084      	sub	sp, #16
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d2ba:	79fb      	ldrb	r3, [r7, #7]
 800d2bc:	4a0d      	ldr	r2, [pc, #52]	; (800d2f4 <disk_initialize+0x48>)
 800d2be:	5cd3      	ldrb	r3, [r2, r3]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d111      	bne.n	800d2e8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d2c4:	79fb      	ldrb	r3, [r7, #7]
 800d2c6:	4a0b      	ldr	r2, [pc, #44]	; (800d2f4 <disk_initialize+0x48>)
 800d2c8:	2101      	movs	r1, #1
 800d2ca:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d2cc:	79fb      	ldrb	r3, [r7, #7]
 800d2ce:	4a09      	ldr	r2, [pc, #36]	; (800d2f4 <disk_initialize+0x48>)
 800d2d0:	009b      	lsls	r3, r3, #2
 800d2d2:	4413      	add	r3, r2
 800d2d4:	685b      	ldr	r3, [r3, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	79fa      	ldrb	r2, [r7, #7]
 800d2da:	4906      	ldr	r1, [pc, #24]	; (800d2f4 <disk_initialize+0x48>)
 800d2dc:	440a      	add	r2, r1
 800d2de:	7a12      	ldrb	r2, [r2, #8]
 800d2e0:	4610      	mov	r0, r2
 800d2e2:	4798      	blx	r3
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d2e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3710      	adds	r7, #16
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
 800d2f2:	bf00      	nop
 800d2f4:	20002efc 	.word	0x20002efc

0800d2f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d2f8:	b590      	push	{r4, r7, lr}
 800d2fa:	b087      	sub	sp, #28
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	60b9      	str	r1, [r7, #8]
 800d300:	607a      	str	r2, [r7, #4]
 800d302:	603b      	str	r3, [r7, #0]
 800d304:	4603      	mov	r3, r0
 800d306:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d308:	7bfb      	ldrb	r3, [r7, #15]
 800d30a:	4a0a      	ldr	r2, [pc, #40]	; (800d334 <disk_read+0x3c>)
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	4413      	add	r3, r2
 800d310:	685b      	ldr	r3, [r3, #4]
 800d312:	689c      	ldr	r4, [r3, #8]
 800d314:	7bfb      	ldrb	r3, [r7, #15]
 800d316:	4a07      	ldr	r2, [pc, #28]	; (800d334 <disk_read+0x3c>)
 800d318:	4413      	add	r3, r2
 800d31a:	7a18      	ldrb	r0, [r3, #8]
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	687a      	ldr	r2, [r7, #4]
 800d320:	68b9      	ldr	r1, [r7, #8]
 800d322:	47a0      	blx	r4
 800d324:	4603      	mov	r3, r0
 800d326:	75fb      	strb	r3, [r7, #23]
  return res;
 800d328:	7dfb      	ldrb	r3, [r7, #23]
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	371c      	adds	r7, #28
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd90      	pop	{r4, r7, pc}
 800d332:	bf00      	nop
 800d334:	20002efc 	.word	0x20002efc

0800d338 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d338:	b590      	push	{r4, r7, lr}
 800d33a:	b087      	sub	sp, #28
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	60b9      	str	r1, [r7, #8]
 800d340:	607a      	str	r2, [r7, #4]
 800d342:	603b      	str	r3, [r7, #0]
 800d344:	4603      	mov	r3, r0
 800d346:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d348:	7bfb      	ldrb	r3, [r7, #15]
 800d34a:	4a0a      	ldr	r2, [pc, #40]	; (800d374 <disk_write+0x3c>)
 800d34c:	009b      	lsls	r3, r3, #2
 800d34e:	4413      	add	r3, r2
 800d350:	685b      	ldr	r3, [r3, #4]
 800d352:	68dc      	ldr	r4, [r3, #12]
 800d354:	7bfb      	ldrb	r3, [r7, #15]
 800d356:	4a07      	ldr	r2, [pc, #28]	; (800d374 <disk_write+0x3c>)
 800d358:	4413      	add	r3, r2
 800d35a:	7a18      	ldrb	r0, [r3, #8]
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	687a      	ldr	r2, [r7, #4]
 800d360:	68b9      	ldr	r1, [r7, #8]
 800d362:	47a0      	blx	r4
 800d364:	4603      	mov	r3, r0
 800d366:	75fb      	strb	r3, [r7, #23]
  return res;
 800d368:	7dfb      	ldrb	r3, [r7, #23]
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	371c      	adds	r7, #28
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd90      	pop	{r4, r7, pc}
 800d372:	bf00      	nop
 800d374:	20002efc 	.word	0x20002efc

0800d378 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b084      	sub	sp, #16
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	4603      	mov	r3, r0
 800d380:	603a      	str	r2, [r7, #0]
 800d382:	71fb      	strb	r3, [r7, #7]
 800d384:	460b      	mov	r3, r1
 800d386:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d388:	79fb      	ldrb	r3, [r7, #7]
 800d38a:	4a09      	ldr	r2, [pc, #36]	; (800d3b0 <disk_ioctl+0x38>)
 800d38c:	009b      	lsls	r3, r3, #2
 800d38e:	4413      	add	r3, r2
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	691b      	ldr	r3, [r3, #16]
 800d394:	79fa      	ldrb	r2, [r7, #7]
 800d396:	4906      	ldr	r1, [pc, #24]	; (800d3b0 <disk_ioctl+0x38>)
 800d398:	440a      	add	r2, r1
 800d39a:	7a10      	ldrb	r0, [r2, #8]
 800d39c:	79b9      	ldrb	r1, [r7, #6]
 800d39e:	683a      	ldr	r2, [r7, #0]
 800d3a0:	4798      	blx	r3
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	73fb      	strb	r3, [r7, #15]
  return res;
 800d3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3710      	adds	r7, #16
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	20002efc 	.word	0x20002efc

0800d3b4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b085      	sub	sp, #20
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	3301      	adds	r3, #1
 800d3c0:	781b      	ldrb	r3, [r3, #0]
 800d3c2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d3c4:	89fb      	ldrh	r3, [r7, #14]
 800d3c6:	021b      	lsls	r3, r3, #8
 800d3c8:	b21a      	sxth	r2, r3
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	781b      	ldrb	r3, [r3, #0]
 800d3ce:	b21b      	sxth	r3, r3
 800d3d0:	4313      	orrs	r3, r2
 800d3d2:	b21b      	sxth	r3, r3
 800d3d4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d3d6:	89fb      	ldrh	r3, [r7, #14]
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3714      	adds	r7, #20
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e2:	4770      	bx	lr

0800d3e4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b085      	sub	sp, #20
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	3303      	adds	r3, #3
 800d3f0:	781b      	ldrb	r3, [r3, #0]
 800d3f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	021b      	lsls	r3, r3, #8
 800d3f8:	687a      	ldr	r2, [r7, #4]
 800d3fa:	3202      	adds	r2, #2
 800d3fc:	7812      	ldrb	r2, [r2, #0]
 800d3fe:	4313      	orrs	r3, r2
 800d400:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	021b      	lsls	r3, r3, #8
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	3201      	adds	r2, #1
 800d40a:	7812      	ldrb	r2, [r2, #0]
 800d40c:	4313      	orrs	r3, r2
 800d40e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	021b      	lsls	r3, r3, #8
 800d414:	687a      	ldr	r2, [r7, #4]
 800d416:	7812      	ldrb	r2, [r2, #0]
 800d418:	4313      	orrs	r3, r2
 800d41a:	60fb      	str	r3, [r7, #12]
	return rv;
 800d41c:	68fb      	ldr	r3, [r7, #12]
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3714      	adds	r7, #20
 800d422:	46bd      	mov	sp, r7
 800d424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d428:	4770      	bx	lr

0800d42a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d42a:	b480      	push	{r7}
 800d42c:	b083      	sub	sp, #12
 800d42e:	af00      	add	r7, sp, #0
 800d430:	6078      	str	r0, [r7, #4]
 800d432:	460b      	mov	r3, r1
 800d434:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	1c5a      	adds	r2, r3, #1
 800d43a:	607a      	str	r2, [r7, #4]
 800d43c:	887a      	ldrh	r2, [r7, #2]
 800d43e:	b2d2      	uxtb	r2, r2
 800d440:	701a      	strb	r2, [r3, #0]
 800d442:	887b      	ldrh	r3, [r7, #2]
 800d444:	0a1b      	lsrs	r3, r3, #8
 800d446:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	1c5a      	adds	r2, r3, #1
 800d44c:	607a      	str	r2, [r7, #4]
 800d44e:	887a      	ldrh	r2, [r7, #2]
 800d450:	b2d2      	uxtb	r2, r2
 800d452:	701a      	strb	r2, [r3, #0]
}
 800d454:	bf00      	nop
 800d456:	370c      	adds	r7, #12
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr

0800d460 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d460:	b480      	push	{r7}
 800d462:	b083      	sub	sp, #12
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	1c5a      	adds	r2, r3, #1
 800d46e:	607a      	str	r2, [r7, #4]
 800d470:	683a      	ldr	r2, [r7, #0]
 800d472:	b2d2      	uxtb	r2, r2
 800d474:	701a      	strb	r2, [r3, #0]
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	0a1b      	lsrs	r3, r3, #8
 800d47a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	1c5a      	adds	r2, r3, #1
 800d480:	607a      	str	r2, [r7, #4]
 800d482:	683a      	ldr	r2, [r7, #0]
 800d484:	b2d2      	uxtb	r2, r2
 800d486:	701a      	strb	r2, [r3, #0]
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	0a1b      	lsrs	r3, r3, #8
 800d48c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	1c5a      	adds	r2, r3, #1
 800d492:	607a      	str	r2, [r7, #4]
 800d494:	683a      	ldr	r2, [r7, #0]
 800d496:	b2d2      	uxtb	r2, r2
 800d498:	701a      	strb	r2, [r3, #0]
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	0a1b      	lsrs	r3, r3, #8
 800d49e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	1c5a      	adds	r2, r3, #1
 800d4a4:	607a      	str	r2, [r7, #4]
 800d4a6:	683a      	ldr	r2, [r7, #0]
 800d4a8:	b2d2      	uxtb	r2, r2
 800d4aa:	701a      	strb	r2, [r3, #0]
}
 800d4ac:	bf00      	nop
 800d4ae:	370c      	adds	r7, #12
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b6:	4770      	bx	lr

0800d4b8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d4b8:	b480      	push	{r7}
 800d4ba:	b087      	sub	sp, #28
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	60f8      	str	r0, [r7, #12]
 800d4c0:	60b9      	str	r1, [r7, #8]
 800d4c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d00d      	beq.n	800d4ee <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d4d2:	693a      	ldr	r2, [r7, #16]
 800d4d4:	1c53      	adds	r3, r2, #1
 800d4d6:	613b      	str	r3, [r7, #16]
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	1c59      	adds	r1, r3, #1
 800d4dc:	6179      	str	r1, [r7, #20]
 800d4de:	7812      	ldrb	r2, [r2, #0]
 800d4e0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	3b01      	subs	r3, #1
 800d4e6:	607b      	str	r3, [r7, #4]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d1f1      	bne.n	800d4d2 <mem_cpy+0x1a>
	}
}
 800d4ee:	bf00      	nop
 800d4f0:	371c      	adds	r7, #28
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f8:	4770      	bx	lr

0800d4fa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d4fa:	b480      	push	{r7}
 800d4fc:	b087      	sub	sp, #28
 800d4fe:	af00      	add	r7, sp, #0
 800d500:	60f8      	str	r0, [r7, #12]
 800d502:	60b9      	str	r1, [r7, #8]
 800d504:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	1c5a      	adds	r2, r3, #1
 800d50e:	617a      	str	r2, [r7, #20]
 800d510:	68ba      	ldr	r2, [r7, #8]
 800d512:	b2d2      	uxtb	r2, r2
 800d514:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	3b01      	subs	r3, #1
 800d51a:	607b      	str	r3, [r7, #4]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d1f3      	bne.n	800d50a <mem_set+0x10>
}
 800d522:	bf00      	nop
 800d524:	bf00      	nop
 800d526:	371c      	adds	r7, #28
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr

0800d530 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d530:	b480      	push	{r7}
 800d532:	b089      	sub	sp, #36	; 0x24
 800d534:	af00      	add	r7, sp, #0
 800d536:	60f8      	str	r0, [r7, #12]
 800d538:	60b9      	str	r1, [r7, #8]
 800d53a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	61fb      	str	r3, [r7, #28]
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d544:	2300      	movs	r3, #0
 800d546:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d548:	69fb      	ldr	r3, [r7, #28]
 800d54a:	1c5a      	adds	r2, r3, #1
 800d54c:	61fa      	str	r2, [r7, #28]
 800d54e:	781b      	ldrb	r3, [r3, #0]
 800d550:	4619      	mov	r1, r3
 800d552:	69bb      	ldr	r3, [r7, #24]
 800d554:	1c5a      	adds	r2, r3, #1
 800d556:	61ba      	str	r2, [r7, #24]
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	1acb      	subs	r3, r1, r3
 800d55c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	3b01      	subs	r3, #1
 800d562:	607b      	str	r3, [r7, #4]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d002      	beq.n	800d570 <mem_cmp+0x40>
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d0eb      	beq.n	800d548 <mem_cmp+0x18>

	return r;
 800d570:	697b      	ldr	r3, [r7, #20]
}
 800d572:	4618      	mov	r0, r3
 800d574:	3724      	adds	r7, #36	; 0x24
 800d576:	46bd      	mov	sp, r7
 800d578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57c:	4770      	bx	lr

0800d57e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d57e:	b480      	push	{r7}
 800d580:	b083      	sub	sp, #12
 800d582:	af00      	add	r7, sp, #0
 800d584:	6078      	str	r0, [r7, #4]
 800d586:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d588:	e002      	b.n	800d590 <chk_chr+0x12>
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	3301      	adds	r3, #1
 800d58e:	607b      	str	r3, [r7, #4]
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	781b      	ldrb	r3, [r3, #0]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d005      	beq.n	800d5a4 <chk_chr+0x26>
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	781b      	ldrb	r3, [r3, #0]
 800d59c:	461a      	mov	r2, r3
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d1f2      	bne.n	800d58a <chk_chr+0xc>
	return *str;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	781b      	ldrb	r3, [r3, #0]
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	370c      	adds	r7, #12
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b2:	4770      	bx	lr

0800d5b4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b085      	sub	sp, #20
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d5be:	2300      	movs	r3, #0
 800d5c0:	60bb      	str	r3, [r7, #8]
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	60fb      	str	r3, [r7, #12]
 800d5c6:	e029      	b.n	800d61c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d5c8:	4a27      	ldr	r2, [pc, #156]	; (800d668 <chk_lock+0xb4>)
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	011b      	lsls	r3, r3, #4
 800d5ce:	4413      	add	r3, r2
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d01d      	beq.n	800d612 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d5d6:	4a24      	ldr	r2, [pc, #144]	; (800d668 <chk_lock+0xb4>)
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	011b      	lsls	r3, r3, #4
 800d5dc:	4413      	add	r3, r2
 800d5de:	681a      	ldr	r2, [r3, #0]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	d116      	bne.n	800d616 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d5e8:	4a1f      	ldr	r2, [pc, #124]	; (800d668 <chk_lock+0xb4>)
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	011b      	lsls	r3, r3, #4
 800d5ee:	4413      	add	r3, r2
 800d5f0:	3304      	adds	r3, #4
 800d5f2:	681a      	ldr	r2, [r3, #0]
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d10c      	bne.n	800d616 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d5fc:	4a1a      	ldr	r2, [pc, #104]	; (800d668 <chk_lock+0xb4>)
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	011b      	lsls	r3, r3, #4
 800d602:	4413      	add	r3, r2
 800d604:	3308      	adds	r3, #8
 800d606:	681a      	ldr	r2, [r3, #0]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d102      	bne.n	800d616 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d610:	e007      	b.n	800d622 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d612:	2301      	movs	r3, #1
 800d614:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	3301      	adds	r3, #1
 800d61a:	60fb      	str	r3, [r7, #12]
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d9d2      	bls.n	800d5c8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	2b02      	cmp	r3, #2
 800d626:	d109      	bne.n	800d63c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d102      	bne.n	800d634 <chk_lock+0x80>
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	2b02      	cmp	r3, #2
 800d632:	d101      	bne.n	800d638 <chk_lock+0x84>
 800d634:	2300      	movs	r3, #0
 800d636:	e010      	b.n	800d65a <chk_lock+0xa6>
 800d638:	2312      	movs	r3, #18
 800d63a:	e00e      	b.n	800d65a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d108      	bne.n	800d654 <chk_lock+0xa0>
 800d642:	4a09      	ldr	r2, [pc, #36]	; (800d668 <chk_lock+0xb4>)
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	011b      	lsls	r3, r3, #4
 800d648:	4413      	add	r3, r2
 800d64a:	330c      	adds	r3, #12
 800d64c:	881b      	ldrh	r3, [r3, #0]
 800d64e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d652:	d101      	bne.n	800d658 <chk_lock+0xa4>
 800d654:	2310      	movs	r3, #16
 800d656:	e000      	b.n	800d65a <chk_lock+0xa6>
 800d658:	2300      	movs	r3, #0
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3714      	adds	r7, #20
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr
 800d666:	bf00      	nop
 800d668:	20002cdc 	.word	0x20002cdc

0800d66c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d66c:	b480      	push	{r7}
 800d66e:	b083      	sub	sp, #12
 800d670:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d672:	2300      	movs	r3, #0
 800d674:	607b      	str	r3, [r7, #4]
 800d676:	e002      	b.n	800d67e <enq_lock+0x12>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	3301      	adds	r3, #1
 800d67c:	607b      	str	r3, [r7, #4]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2b01      	cmp	r3, #1
 800d682:	d806      	bhi.n	800d692 <enq_lock+0x26>
 800d684:	4a09      	ldr	r2, [pc, #36]	; (800d6ac <enq_lock+0x40>)
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	011b      	lsls	r3, r3, #4
 800d68a:	4413      	add	r3, r2
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d1f2      	bne.n	800d678 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2b02      	cmp	r3, #2
 800d696:	bf14      	ite	ne
 800d698:	2301      	movne	r3, #1
 800d69a:	2300      	moveq	r3, #0
 800d69c:	b2db      	uxtb	r3, r3
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	370c      	adds	r7, #12
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a8:	4770      	bx	lr
 800d6aa:	bf00      	nop
 800d6ac:	20002cdc 	.word	0x20002cdc

0800d6b0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b085      	sub	sp, #20
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
 800d6b8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	60fb      	str	r3, [r7, #12]
 800d6be:	e01f      	b.n	800d700 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d6c0:	4a41      	ldr	r2, [pc, #260]	; (800d7c8 <inc_lock+0x118>)
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	011b      	lsls	r3, r3, #4
 800d6c6:	4413      	add	r3, r2
 800d6c8:	681a      	ldr	r2, [r3, #0]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d113      	bne.n	800d6fa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d6d2:	4a3d      	ldr	r2, [pc, #244]	; (800d7c8 <inc_lock+0x118>)
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	011b      	lsls	r3, r3, #4
 800d6d8:	4413      	add	r3, r2
 800d6da:	3304      	adds	r3, #4
 800d6dc:	681a      	ldr	r2, [r3, #0]
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d109      	bne.n	800d6fa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d6e6:	4a38      	ldr	r2, [pc, #224]	; (800d7c8 <inc_lock+0x118>)
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	011b      	lsls	r3, r3, #4
 800d6ec:	4413      	add	r3, r2
 800d6ee:	3308      	adds	r3, #8
 800d6f0:	681a      	ldr	r2, [r3, #0]
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d006      	beq.n	800d708 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	60fb      	str	r3, [r7, #12]
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	2b01      	cmp	r3, #1
 800d704:	d9dc      	bls.n	800d6c0 <inc_lock+0x10>
 800d706:	e000      	b.n	800d70a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d708:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	2b02      	cmp	r3, #2
 800d70e:	d132      	bne.n	800d776 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d710:	2300      	movs	r3, #0
 800d712:	60fb      	str	r3, [r7, #12]
 800d714:	e002      	b.n	800d71c <inc_lock+0x6c>
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	3301      	adds	r3, #1
 800d71a:	60fb      	str	r3, [r7, #12]
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	2b01      	cmp	r3, #1
 800d720:	d806      	bhi.n	800d730 <inc_lock+0x80>
 800d722:	4a29      	ldr	r2, [pc, #164]	; (800d7c8 <inc_lock+0x118>)
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	011b      	lsls	r3, r3, #4
 800d728:	4413      	add	r3, r2
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d1f2      	bne.n	800d716 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2b02      	cmp	r3, #2
 800d734:	d101      	bne.n	800d73a <inc_lock+0x8a>
 800d736:	2300      	movs	r3, #0
 800d738:	e040      	b.n	800d7bc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681a      	ldr	r2, [r3, #0]
 800d73e:	4922      	ldr	r1, [pc, #136]	; (800d7c8 <inc_lock+0x118>)
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	011b      	lsls	r3, r3, #4
 800d744:	440b      	add	r3, r1
 800d746:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	689a      	ldr	r2, [r3, #8]
 800d74c:	491e      	ldr	r1, [pc, #120]	; (800d7c8 <inc_lock+0x118>)
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	011b      	lsls	r3, r3, #4
 800d752:	440b      	add	r3, r1
 800d754:	3304      	adds	r3, #4
 800d756:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	695a      	ldr	r2, [r3, #20]
 800d75c:	491a      	ldr	r1, [pc, #104]	; (800d7c8 <inc_lock+0x118>)
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	011b      	lsls	r3, r3, #4
 800d762:	440b      	add	r3, r1
 800d764:	3308      	adds	r3, #8
 800d766:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d768:	4a17      	ldr	r2, [pc, #92]	; (800d7c8 <inc_lock+0x118>)
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	011b      	lsls	r3, r3, #4
 800d76e:	4413      	add	r3, r2
 800d770:	330c      	adds	r3, #12
 800d772:	2200      	movs	r2, #0
 800d774:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d009      	beq.n	800d790 <inc_lock+0xe0>
 800d77c:	4a12      	ldr	r2, [pc, #72]	; (800d7c8 <inc_lock+0x118>)
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	011b      	lsls	r3, r3, #4
 800d782:	4413      	add	r3, r2
 800d784:	330c      	adds	r3, #12
 800d786:	881b      	ldrh	r3, [r3, #0]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d001      	beq.n	800d790 <inc_lock+0xe0>
 800d78c:	2300      	movs	r3, #0
 800d78e:	e015      	b.n	800d7bc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d108      	bne.n	800d7a8 <inc_lock+0xf8>
 800d796:	4a0c      	ldr	r2, [pc, #48]	; (800d7c8 <inc_lock+0x118>)
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	011b      	lsls	r3, r3, #4
 800d79c:	4413      	add	r3, r2
 800d79e:	330c      	adds	r3, #12
 800d7a0:	881b      	ldrh	r3, [r3, #0]
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	b29a      	uxth	r2, r3
 800d7a6:	e001      	b.n	800d7ac <inc_lock+0xfc>
 800d7a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d7ac:	4906      	ldr	r1, [pc, #24]	; (800d7c8 <inc_lock+0x118>)
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	011b      	lsls	r3, r3, #4
 800d7b2:	440b      	add	r3, r1
 800d7b4:	330c      	adds	r3, #12
 800d7b6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	3301      	adds	r3, #1
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	3714      	adds	r7, #20
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr
 800d7c8:	20002cdc 	.word	0x20002cdc

0800d7cc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b085      	sub	sp, #20
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	3b01      	subs	r3, #1
 800d7d8:	607b      	str	r3, [r7, #4]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2b01      	cmp	r3, #1
 800d7de:	d825      	bhi.n	800d82c <dec_lock+0x60>
		n = Files[i].ctr;
 800d7e0:	4a17      	ldr	r2, [pc, #92]	; (800d840 <dec_lock+0x74>)
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	011b      	lsls	r3, r3, #4
 800d7e6:	4413      	add	r3, r2
 800d7e8:	330c      	adds	r3, #12
 800d7ea:	881b      	ldrh	r3, [r3, #0]
 800d7ec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d7ee:	89fb      	ldrh	r3, [r7, #14]
 800d7f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7f4:	d101      	bne.n	800d7fa <dec_lock+0x2e>
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d7fa:	89fb      	ldrh	r3, [r7, #14]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d002      	beq.n	800d806 <dec_lock+0x3a>
 800d800:	89fb      	ldrh	r3, [r7, #14]
 800d802:	3b01      	subs	r3, #1
 800d804:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d806:	4a0e      	ldr	r2, [pc, #56]	; (800d840 <dec_lock+0x74>)
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	011b      	lsls	r3, r3, #4
 800d80c:	4413      	add	r3, r2
 800d80e:	330c      	adds	r3, #12
 800d810:	89fa      	ldrh	r2, [r7, #14]
 800d812:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d814:	89fb      	ldrh	r3, [r7, #14]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d105      	bne.n	800d826 <dec_lock+0x5a>
 800d81a:	4a09      	ldr	r2, [pc, #36]	; (800d840 <dec_lock+0x74>)
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	011b      	lsls	r3, r3, #4
 800d820:	4413      	add	r3, r2
 800d822:	2200      	movs	r2, #0
 800d824:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d826:	2300      	movs	r3, #0
 800d828:	737b      	strb	r3, [r7, #13]
 800d82a:	e001      	b.n	800d830 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d82c:	2302      	movs	r3, #2
 800d82e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d830:	7b7b      	ldrb	r3, [r7, #13]
}
 800d832:	4618      	mov	r0, r3
 800d834:	3714      	adds	r7, #20
 800d836:	46bd      	mov	sp, r7
 800d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83c:	4770      	bx	lr
 800d83e:	bf00      	nop
 800d840:	20002cdc 	.word	0x20002cdc

0800d844 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d844:	b480      	push	{r7}
 800d846:	b085      	sub	sp, #20
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d84c:	2300      	movs	r3, #0
 800d84e:	60fb      	str	r3, [r7, #12]
 800d850:	e010      	b.n	800d874 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d852:	4a0d      	ldr	r2, [pc, #52]	; (800d888 <clear_lock+0x44>)
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	011b      	lsls	r3, r3, #4
 800d858:	4413      	add	r3, r2
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	687a      	ldr	r2, [r7, #4]
 800d85e:	429a      	cmp	r2, r3
 800d860:	d105      	bne.n	800d86e <clear_lock+0x2a>
 800d862:	4a09      	ldr	r2, [pc, #36]	; (800d888 <clear_lock+0x44>)
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	011b      	lsls	r3, r3, #4
 800d868:	4413      	add	r3, r2
 800d86a:	2200      	movs	r2, #0
 800d86c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	3301      	adds	r3, #1
 800d872:	60fb      	str	r3, [r7, #12]
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	2b01      	cmp	r3, #1
 800d878:	d9eb      	bls.n	800d852 <clear_lock+0xe>
	}
}
 800d87a:	bf00      	nop
 800d87c:	bf00      	nop
 800d87e:	3714      	adds	r7, #20
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr
 800d888:	20002cdc 	.word	0x20002cdc

0800d88c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b086      	sub	sp, #24
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d894:	2300      	movs	r3, #0
 800d896:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	78db      	ldrb	r3, [r3, #3]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d034      	beq.n	800d90a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8a4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	7858      	ldrb	r0, [r3, #1]
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	697a      	ldr	r2, [r7, #20]
 800d8b4:	f7ff fd40 	bl	800d338 <disk_write>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d002      	beq.n	800d8c4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d8be:	2301      	movs	r3, #1
 800d8c0:	73fb      	strb	r3, [r7, #15]
 800d8c2:	e022      	b.n	800d90a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8ce:	697a      	ldr	r2, [r7, #20]
 800d8d0:	1ad2      	subs	r2, r2, r3
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6a1b      	ldr	r3, [r3, #32]
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	d217      	bcs.n	800d90a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	789b      	ldrb	r3, [r3, #2]
 800d8de:	613b      	str	r3, [r7, #16]
 800d8e0:	e010      	b.n	800d904 <sync_window+0x78>
					wsect += fs->fsize;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6a1b      	ldr	r3, [r3, #32]
 800d8e6:	697a      	ldr	r2, [r7, #20]
 800d8e8:	4413      	add	r3, r2
 800d8ea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	7858      	ldrb	r0, [r3, #1]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	697a      	ldr	r2, [r7, #20]
 800d8fa:	f7ff fd1d 	bl	800d338 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	3b01      	subs	r3, #1
 800d902:	613b      	str	r3, [r7, #16]
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	2b01      	cmp	r3, #1
 800d908:	d8eb      	bhi.n	800d8e2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d90a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3718      	adds	r7, #24
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b084      	sub	sp, #16
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
 800d91c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d91e:	2300      	movs	r3, #0
 800d920:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d926:	683a      	ldr	r2, [r7, #0]
 800d928:	429a      	cmp	r2, r3
 800d92a:	d01b      	beq.n	800d964 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f7ff ffad 	bl	800d88c <sync_window>
 800d932:	4603      	mov	r3, r0
 800d934:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d936:	7bfb      	ldrb	r3, [r7, #15]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d113      	bne.n	800d964 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	7858      	ldrb	r0, [r3, #1]
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d946:	2301      	movs	r3, #1
 800d948:	683a      	ldr	r2, [r7, #0]
 800d94a:	f7ff fcd5 	bl	800d2f8 <disk_read>
 800d94e:	4603      	mov	r3, r0
 800d950:	2b00      	cmp	r3, #0
 800d952:	d004      	beq.n	800d95e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d954:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d958:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d95a:	2301      	movs	r3, #1
 800d95c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	683a      	ldr	r2, [r7, #0]
 800d962:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800d964:	7bfb      	ldrb	r3, [r7, #15]
}
 800d966:	4618      	mov	r0, r3
 800d968:	3710      	adds	r7, #16
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}
	...

0800d970 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b084      	sub	sp, #16
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f7ff ff87 	bl	800d88c <sync_window>
 800d97e:	4603      	mov	r3, r0
 800d980:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d982:	7bfb      	ldrb	r3, [r7, #15]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d159      	bne.n	800da3c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	781b      	ldrb	r3, [r3, #0]
 800d98c:	2b03      	cmp	r3, #3
 800d98e:	d149      	bne.n	800da24 <sync_fs+0xb4>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	791b      	ldrb	r3, [r3, #4]
 800d994:	2b01      	cmp	r3, #1
 800d996:	d145      	bne.n	800da24 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	899b      	ldrh	r3, [r3, #12]
 800d9a2:	461a      	mov	r2, r3
 800d9a4:	2100      	movs	r1, #0
 800d9a6:	f7ff fda8 	bl	800d4fa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	3338      	adds	r3, #56	; 0x38
 800d9ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d9b2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7ff fd37 	bl	800d42a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	3338      	adds	r3, #56	; 0x38
 800d9c0:	4921      	ldr	r1, [pc, #132]	; (800da48 <sync_fs+0xd8>)
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7ff fd4c 	bl	800d460 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	3338      	adds	r3, #56	; 0x38
 800d9cc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d9d0:	491e      	ldr	r1, [pc, #120]	; (800da4c <sync_fs+0xdc>)
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7ff fd44 	bl	800d460 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	3338      	adds	r3, #56	; 0x38
 800d9dc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	699b      	ldr	r3, [r3, #24]
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	4610      	mov	r0, r2
 800d9e8:	f7ff fd3a 	bl	800d460 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	3338      	adds	r3, #56	; 0x38
 800d9f0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	695b      	ldr	r3, [r3, #20]
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	4610      	mov	r0, r2
 800d9fc:	f7ff fd30 	bl	800d460 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da04:	1c5a      	adds	r2, r3, #1
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	7858      	ldrb	r0, [r3, #1]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da18:	2301      	movs	r3, #1
 800da1a:	f7ff fc8d 	bl	800d338 <disk_write>
			fs->fsi_flag = 0;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2200      	movs	r2, #0
 800da22:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	785b      	ldrb	r3, [r3, #1]
 800da28:	2200      	movs	r2, #0
 800da2a:	2100      	movs	r1, #0
 800da2c:	4618      	mov	r0, r3
 800da2e:	f7ff fca3 	bl	800d378 <disk_ioctl>
 800da32:	4603      	mov	r3, r0
 800da34:	2b00      	cmp	r3, #0
 800da36:	d001      	beq.n	800da3c <sync_fs+0xcc>
 800da38:	2301      	movs	r3, #1
 800da3a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800da3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da3e:	4618      	mov	r0, r3
 800da40:	3710      	adds	r7, #16
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}
 800da46:	bf00      	nop
 800da48:	41615252 	.word	0x41615252
 800da4c:	61417272 	.word	0x61417272

0800da50 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800da50:	b480      	push	{r7}
 800da52:	b083      	sub	sp, #12
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	3b02      	subs	r3, #2
 800da5e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	69db      	ldr	r3, [r3, #28]
 800da64:	3b02      	subs	r3, #2
 800da66:	683a      	ldr	r2, [r7, #0]
 800da68:	429a      	cmp	r2, r3
 800da6a:	d301      	bcc.n	800da70 <clust2sect+0x20>
 800da6c:	2300      	movs	r3, #0
 800da6e:	e008      	b.n	800da82 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	895b      	ldrh	r3, [r3, #10]
 800da74:	461a      	mov	r2, r3
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	fb03 f202 	mul.w	r2, r3, r2
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da80:	4413      	add	r3, r2
}
 800da82:	4618      	mov	r0, r3
 800da84:	370c      	adds	r7, #12
 800da86:	46bd      	mov	sp, r7
 800da88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8c:	4770      	bx	lr

0800da8e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800da8e:	b580      	push	{r7, lr}
 800da90:	b086      	sub	sp, #24
 800da92:	af00      	add	r7, sp, #0
 800da94:	6078      	str	r0, [r7, #4]
 800da96:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	2b01      	cmp	r3, #1
 800daa2:	d904      	bls.n	800daae <get_fat+0x20>
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	69db      	ldr	r3, [r3, #28]
 800daa8:	683a      	ldr	r2, [r7, #0]
 800daaa:	429a      	cmp	r2, r3
 800daac:	d302      	bcc.n	800dab4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800daae:	2301      	movs	r3, #1
 800dab0:	617b      	str	r3, [r7, #20]
 800dab2:	e0bb      	b.n	800dc2c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800dab4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dab8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	2b03      	cmp	r3, #3
 800dac0:	f000 8083 	beq.w	800dbca <get_fat+0x13c>
 800dac4:	2b03      	cmp	r3, #3
 800dac6:	f300 80a7 	bgt.w	800dc18 <get_fat+0x18a>
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d002      	beq.n	800dad4 <get_fat+0x46>
 800dace:	2b02      	cmp	r3, #2
 800dad0:	d056      	beq.n	800db80 <get_fat+0xf2>
 800dad2:	e0a1      	b.n	800dc18 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	60fb      	str	r3, [r7, #12]
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	085b      	lsrs	r3, r3, #1
 800dadc:	68fa      	ldr	r2, [r7, #12]
 800dade:	4413      	add	r3, r2
 800dae0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	899b      	ldrh	r3, [r3, #12]
 800daea:	4619      	mov	r1, r3
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	fbb3 f3f1 	udiv	r3, r3, r1
 800daf2:	4413      	add	r3, r2
 800daf4:	4619      	mov	r1, r3
 800daf6:	6938      	ldr	r0, [r7, #16]
 800daf8:	f7ff ff0c 	bl	800d914 <move_window>
 800dafc:	4603      	mov	r3, r0
 800dafe:	2b00      	cmp	r3, #0
 800db00:	f040 808d 	bne.w	800dc1e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	1c5a      	adds	r2, r3, #1
 800db08:	60fa      	str	r2, [r7, #12]
 800db0a:	693a      	ldr	r2, [r7, #16]
 800db0c:	8992      	ldrh	r2, [r2, #12]
 800db0e:	fbb3 f1f2 	udiv	r1, r3, r2
 800db12:	fb01 f202 	mul.w	r2, r1, r2
 800db16:	1a9b      	subs	r3, r3, r2
 800db18:	693a      	ldr	r2, [r7, #16]
 800db1a:	4413      	add	r3, r2
 800db1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800db20:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db26:	693b      	ldr	r3, [r7, #16]
 800db28:	899b      	ldrh	r3, [r3, #12]
 800db2a:	4619      	mov	r1, r3
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	fbb3 f3f1 	udiv	r3, r3, r1
 800db32:	4413      	add	r3, r2
 800db34:	4619      	mov	r1, r3
 800db36:	6938      	ldr	r0, [r7, #16]
 800db38:	f7ff feec 	bl	800d914 <move_window>
 800db3c:	4603      	mov	r3, r0
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d16f      	bne.n	800dc22 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	899b      	ldrh	r3, [r3, #12]
 800db46:	461a      	mov	r2, r3
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	fbb3 f1f2 	udiv	r1, r3, r2
 800db4e:	fb01 f202 	mul.w	r2, r1, r2
 800db52:	1a9b      	subs	r3, r3, r2
 800db54:	693a      	ldr	r2, [r7, #16]
 800db56:	4413      	add	r3, r2
 800db58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800db5c:	021b      	lsls	r3, r3, #8
 800db5e:	461a      	mov	r2, r3
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	4313      	orrs	r3, r2
 800db64:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	f003 0301 	and.w	r3, r3, #1
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d002      	beq.n	800db76 <get_fat+0xe8>
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	091b      	lsrs	r3, r3, #4
 800db74:	e002      	b.n	800db7c <get_fat+0xee>
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800db7c:	617b      	str	r3, [r7, #20]
			break;
 800db7e:	e055      	b.n	800dc2c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800db80:	693b      	ldr	r3, [r7, #16]
 800db82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	899b      	ldrh	r3, [r3, #12]
 800db88:	085b      	lsrs	r3, r3, #1
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	4619      	mov	r1, r3
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	fbb3 f3f1 	udiv	r3, r3, r1
 800db94:	4413      	add	r3, r2
 800db96:	4619      	mov	r1, r3
 800db98:	6938      	ldr	r0, [r7, #16]
 800db9a:	f7ff febb 	bl	800d914 <move_window>
 800db9e:	4603      	mov	r3, r0
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d140      	bne.n	800dc26 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	005b      	lsls	r3, r3, #1
 800dbae:	693a      	ldr	r2, [r7, #16]
 800dbb0:	8992      	ldrh	r2, [r2, #12]
 800dbb2:	fbb3 f0f2 	udiv	r0, r3, r2
 800dbb6:	fb00 f202 	mul.w	r2, r0, r2
 800dbba:	1a9b      	subs	r3, r3, r2
 800dbbc:	440b      	add	r3, r1
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f7ff fbf8 	bl	800d3b4 <ld_word>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	617b      	str	r3, [r7, #20]
			break;
 800dbc8:	e030      	b.n	800dc2c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	899b      	ldrh	r3, [r3, #12]
 800dbd2:	089b      	lsrs	r3, r3, #2
 800dbd4:	b29b      	uxth	r3, r3
 800dbd6:	4619      	mov	r1, r3
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	fbb3 f3f1 	udiv	r3, r3, r1
 800dbde:	4413      	add	r3, r2
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	6938      	ldr	r0, [r7, #16]
 800dbe4:	f7ff fe96 	bl	800d914 <move_window>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d11d      	bne.n	800dc2a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	009b      	lsls	r3, r3, #2
 800dbf8:	693a      	ldr	r2, [r7, #16]
 800dbfa:	8992      	ldrh	r2, [r2, #12]
 800dbfc:	fbb3 f0f2 	udiv	r0, r3, r2
 800dc00:	fb00 f202 	mul.w	r2, r0, r2
 800dc04:	1a9b      	subs	r3, r3, r2
 800dc06:	440b      	add	r3, r1
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7ff fbeb 	bl	800d3e4 <ld_dword>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800dc14:	617b      	str	r3, [r7, #20]
			break;
 800dc16:	e009      	b.n	800dc2c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800dc18:	2301      	movs	r3, #1
 800dc1a:	617b      	str	r3, [r7, #20]
 800dc1c:	e006      	b.n	800dc2c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc1e:	bf00      	nop
 800dc20:	e004      	b.n	800dc2c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc22:	bf00      	nop
 800dc24:	e002      	b.n	800dc2c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dc26:	bf00      	nop
 800dc28:	e000      	b.n	800dc2c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dc2a:	bf00      	nop
		}
	}

	return val;
 800dc2c:	697b      	ldr	r3, [r7, #20]
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	3718      	adds	r7, #24
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}

0800dc36 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800dc36:	b590      	push	{r4, r7, lr}
 800dc38:	b089      	sub	sp, #36	; 0x24
 800dc3a:	af00      	add	r7, sp, #0
 800dc3c:	60f8      	str	r0, [r7, #12]
 800dc3e:	60b9      	str	r1, [r7, #8]
 800dc40:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800dc42:	2302      	movs	r3, #2
 800dc44:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	2b01      	cmp	r3, #1
 800dc4a:	f240 8102 	bls.w	800de52 <put_fat+0x21c>
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	69db      	ldr	r3, [r3, #28]
 800dc52:	68ba      	ldr	r2, [r7, #8]
 800dc54:	429a      	cmp	r2, r3
 800dc56:	f080 80fc 	bcs.w	800de52 <put_fat+0x21c>
		switch (fs->fs_type) {
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	2b03      	cmp	r3, #3
 800dc60:	f000 80b6 	beq.w	800ddd0 <put_fat+0x19a>
 800dc64:	2b03      	cmp	r3, #3
 800dc66:	f300 80fd 	bgt.w	800de64 <put_fat+0x22e>
 800dc6a:	2b01      	cmp	r3, #1
 800dc6c:	d003      	beq.n	800dc76 <put_fat+0x40>
 800dc6e:	2b02      	cmp	r3, #2
 800dc70:	f000 8083 	beq.w	800dd7a <put_fat+0x144>
 800dc74:	e0f6      	b.n	800de64 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	61bb      	str	r3, [r7, #24]
 800dc7a:	69bb      	ldr	r3, [r7, #24]
 800dc7c:	085b      	lsrs	r3, r3, #1
 800dc7e:	69ba      	ldr	r2, [r7, #24]
 800dc80:	4413      	add	r3, r2
 800dc82:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	899b      	ldrh	r3, [r3, #12]
 800dc8c:	4619      	mov	r1, r3
 800dc8e:	69bb      	ldr	r3, [r7, #24]
 800dc90:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc94:	4413      	add	r3, r2
 800dc96:	4619      	mov	r1, r3
 800dc98:	68f8      	ldr	r0, [r7, #12]
 800dc9a:	f7ff fe3b 	bl	800d914 <move_window>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dca2:	7ffb      	ldrb	r3, [r7, #31]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	f040 80d6 	bne.w	800de56 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dcb0:	69bb      	ldr	r3, [r7, #24]
 800dcb2:	1c5a      	adds	r2, r3, #1
 800dcb4:	61ba      	str	r2, [r7, #24]
 800dcb6:	68fa      	ldr	r2, [r7, #12]
 800dcb8:	8992      	ldrh	r2, [r2, #12]
 800dcba:	fbb3 f0f2 	udiv	r0, r3, r2
 800dcbe:	fb00 f202 	mul.w	r2, r0, r2
 800dcc2:	1a9b      	subs	r3, r3, r2
 800dcc4:	440b      	add	r3, r1
 800dcc6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	f003 0301 	and.w	r3, r3, #1
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d00d      	beq.n	800dcee <put_fat+0xb8>
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	781b      	ldrb	r3, [r3, #0]
 800dcd6:	b25b      	sxtb	r3, r3
 800dcd8:	f003 030f 	and.w	r3, r3, #15
 800dcdc:	b25a      	sxtb	r2, r3
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	b2db      	uxtb	r3, r3
 800dce2:	011b      	lsls	r3, r3, #4
 800dce4:	b25b      	sxtb	r3, r3
 800dce6:	4313      	orrs	r3, r2
 800dce8:	b25b      	sxtb	r3, r3
 800dcea:	b2db      	uxtb	r3, r3
 800dcec:	e001      	b.n	800dcf2 <put_fat+0xbc>
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	b2db      	uxtb	r3, r3
 800dcf2:	697a      	ldr	r2, [r7, #20]
 800dcf4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	2201      	movs	r2, #1
 800dcfa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	899b      	ldrh	r3, [r3, #12]
 800dd04:	4619      	mov	r1, r3
 800dd06:	69bb      	ldr	r3, [r7, #24]
 800dd08:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd0c:	4413      	add	r3, r2
 800dd0e:	4619      	mov	r1, r3
 800dd10:	68f8      	ldr	r0, [r7, #12]
 800dd12:	f7ff fdff 	bl	800d914 <move_window>
 800dd16:	4603      	mov	r3, r0
 800dd18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd1a:	7ffb      	ldrb	r3, [r7, #31]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	f040 809c 	bne.w	800de5a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	899b      	ldrh	r3, [r3, #12]
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	69bb      	ldr	r3, [r7, #24]
 800dd30:	fbb3 f0f2 	udiv	r0, r3, r2
 800dd34:	fb00 f202 	mul.w	r2, r0, r2
 800dd38:	1a9b      	subs	r3, r3, r2
 800dd3a:	440b      	add	r3, r1
 800dd3c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	f003 0301 	and.w	r3, r3, #1
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d003      	beq.n	800dd50 <put_fat+0x11a>
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	091b      	lsrs	r3, r3, #4
 800dd4c:	b2db      	uxtb	r3, r3
 800dd4e:	e00e      	b.n	800dd6e <put_fat+0x138>
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	b25b      	sxtb	r3, r3
 800dd56:	f023 030f 	bic.w	r3, r3, #15
 800dd5a:	b25a      	sxtb	r2, r3
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	0a1b      	lsrs	r3, r3, #8
 800dd60:	b25b      	sxtb	r3, r3
 800dd62:	f003 030f 	and.w	r3, r3, #15
 800dd66:	b25b      	sxtb	r3, r3
 800dd68:	4313      	orrs	r3, r2
 800dd6a:	b25b      	sxtb	r3, r3
 800dd6c:	b2db      	uxtb	r3, r3
 800dd6e:	697a      	ldr	r2, [r7, #20]
 800dd70:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	2201      	movs	r2, #1
 800dd76:	70da      	strb	r2, [r3, #3]
			break;
 800dd78:	e074      	b.n	800de64 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	899b      	ldrh	r3, [r3, #12]
 800dd82:	085b      	lsrs	r3, r3, #1
 800dd84:	b29b      	uxth	r3, r3
 800dd86:	4619      	mov	r1, r3
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd8e:	4413      	add	r3, r2
 800dd90:	4619      	mov	r1, r3
 800dd92:	68f8      	ldr	r0, [r7, #12]
 800dd94:	f7ff fdbe 	bl	800d914 <move_window>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd9c:	7ffb      	ldrb	r3, [r7, #31]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d15d      	bne.n	800de5e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	005b      	lsls	r3, r3, #1
 800ddac:	68fa      	ldr	r2, [r7, #12]
 800ddae:	8992      	ldrh	r2, [r2, #12]
 800ddb0:	fbb3 f0f2 	udiv	r0, r3, r2
 800ddb4:	fb00 f202 	mul.w	r2, r0, r2
 800ddb8:	1a9b      	subs	r3, r3, r2
 800ddba:	440b      	add	r3, r1
 800ddbc:	687a      	ldr	r2, [r7, #4]
 800ddbe:	b292      	uxth	r2, r2
 800ddc0:	4611      	mov	r1, r2
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7ff fb31 	bl	800d42a <st_word>
			fs->wflag = 1;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	2201      	movs	r2, #1
 800ddcc:	70da      	strb	r2, [r3, #3]
			break;
 800ddce:	e049      	b.n	800de64 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	899b      	ldrh	r3, [r3, #12]
 800ddd8:	089b      	lsrs	r3, r3, #2
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	4619      	mov	r1, r3
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	fbb3 f3f1 	udiv	r3, r3, r1
 800dde4:	4413      	add	r3, r2
 800dde6:	4619      	mov	r1, r3
 800dde8:	68f8      	ldr	r0, [r7, #12]
 800ddea:	f7ff fd93 	bl	800d914 <move_window>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ddf2:	7ffb      	ldrb	r3, [r7, #31]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d134      	bne.n	800de62 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	009b      	lsls	r3, r3, #2
 800de08:	68fa      	ldr	r2, [r7, #12]
 800de0a:	8992      	ldrh	r2, [r2, #12]
 800de0c:	fbb3 f0f2 	udiv	r0, r3, r2
 800de10:	fb00 f202 	mul.w	r2, r0, r2
 800de14:	1a9b      	subs	r3, r3, r2
 800de16:	440b      	add	r3, r1
 800de18:	4618      	mov	r0, r3
 800de1a:	f7ff fae3 	bl	800d3e4 <ld_dword>
 800de1e:	4603      	mov	r3, r0
 800de20:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800de24:	4323      	orrs	r3, r4
 800de26:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	009b      	lsls	r3, r3, #2
 800de32:	68fa      	ldr	r2, [r7, #12]
 800de34:	8992      	ldrh	r2, [r2, #12]
 800de36:	fbb3 f0f2 	udiv	r0, r3, r2
 800de3a:	fb00 f202 	mul.w	r2, r0, r2
 800de3e:	1a9b      	subs	r3, r3, r2
 800de40:	440b      	add	r3, r1
 800de42:	6879      	ldr	r1, [r7, #4]
 800de44:	4618      	mov	r0, r3
 800de46:	f7ff fb0b 	bl	800d460 <st_dword>
			fs->wflag = 1;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	2201      	movs	r2, #1
 800de4e:	70da      	strb	r2, [r3, #3]
			break;
 800de50:	e008      	b.n	800de64 <put_fat+0x22e>
		}
	}
 800de52:	bf00      	nop
 800de54:	e006      	b.n	800de64 <put_fat+0x22e>
			if (res != FR_OK) break;
 800de56:	bf00      	nop
 800de58:	e004      	b.n	800de64 <put_fat+0x22e>
			if (res != FR_OK) break;
 800de5a:	bf00      	nop
 800de5c:	e002      	b.n	800de64 <put_fat+0x22e>
			if (res != FR_OK) break;
 800de5e:	bf00      	nop
 800de60:	e000      	b.n	800de64 <put_fat+0x22e>
			if (res != FR_OK) break;
 800de62:	bf00      	nop
	return res;
 800de64:	7ffb      	ldrb	r3, [r7, #31]
}
 800de66:	4618      	mov	r0, r3
 800de68:	3724      	adds	r7, #36	; 0x24
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd90      	pop	{r4, r7, pc}

0800de6e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800de6e:	b580      	push	{r7, lr}
 800de70:	b088      	sub	sp, #32
 800de72:	af00      	add	r7, sp, #0
 800de74:	60f8      	str	r0, [r7, #12]
 800de76:	60b9      	str	r1, [r7, #8]
 800de78:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800de7a:	2300      	movs	r3, #0
 800de7c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	2b01      	cmp	r3, #1
 800de88:	d904      	bls.n	800de94 <remove_chain+0x26>
 800de8a:	69bb      	ldr	r3, [r7, #24]
 800de8c:	69db      	ldr	r3, [r3, #28]
 800de8e:	68ba      	ldr	r2, [r7, #8]
 800de90:	429a      	cmp	r2, r3
 800de92:	d301      	bcc.n	800de98 <remove_chain+0x2a>
 800de94:	2302      	movs	r3, #2
 800de96:	e04b      	b.n	800df30 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d00c      	beq.n	800deb8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800de9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dea2:	6879      	ldr	r1, [r7, #4]
 800dea4:	69b8      	ldr	r0, [r7, #24]
 800dea6:	f7ff fec6 	bl	800dc36 <put_fat>
 800deaa:	4603      	mov	r3, r0
 800deac:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800deae:	7ffb      	ldrb	r3, [r7, #31]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d001      	beq.n	800deb8 <remove_chain+0x4a>
 800deb4:	7ffb      	ldrb	r3, [r7, #31]
 800deb6:	e03b      	b.n	800df30 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800deb8:	68b9      	ldr	r1, [r7, #8]
 800deba:	68f8      	ldr	r0, [r7, #12]
 800debc:	f7ff fde7 	bl	800da8e <get_fat>
 800dec0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d031      	beq.n	800df2c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	2b01      	cmp	r3, #1
 800decc:	d101      	bne.n	800ded2 <remove_chain+0x64>
 800dece:	2302      	movs	r3, #2
 800ded0:	e02e      	b.n	800df30 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ded8:	d101      	bne.n	800dede <remove_chain+0x70>
 800deda:	2301      	movs	r3, #1
 800dedc:	e028      	b.n	800df30 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800dede:	2200      	movs	r2, #0
 800dee0:	68b9      	ldr	r1, [r7, #8]
 800dee2:	69b8      	ldr	r0, [r7, #24]
 800dee4:	f7ff fea7 	bl	800dc36 <put_fat>
 800dee8:	4603      	mov	r3, r0
 800deea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800deec:	7ffb      	ldrb	r3, [r7, #31]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d001      	beq.n	800def6 <remove_chain+0x88>
 800def2:	7ffb      	ldrb	r3, [r7, #31]
 800def4:	e01c      	b.n	800df30 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800def6:	69bb      	ldr	r3, [r7, #24]
 800def8:	699a      	ldr	r2, [r3, #24]
 800defa:	69bb      	ldr	r3, [r7, #24]
 800defc:	69db      	ldr	r3, [r3, #28]
 800defe:	3b02      	subs	r3, #2
 800df00:	429a      	cmp	r2, r3
 800df02:	d20b      	bcs.n	800df1c <remove_chain+0xae>
			fs->free_clst++;
 800df04:	69bb      	ldr	r3, [r7, #24]
 800df06:	699b      	ldr	r3, [r3, #24]
 800df08:	1c5a      	adds	r2, r3, #1
 800df0a:	69bb      	ldr	r3, [r7, #24]
 800df0c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800df0e:	69bb      	ldr	r3, [r7, #24]
 800df10:	791b      	ldrb	r3, [r3, #4]
 800df12:	f043 0301 	orr.w	r3, r3, #1
 800df16:	b2da      	uxtb	r2, r3
 800df18:	69bb      	ldr	r3, [r7, #24]
 800df1a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800df20:	69bb      	ldr	r3, [r7, #24]
 800df22:	69db      	ldr	r3, [r3, #28]
 800df24:	68ba      	ldr	r2, [r7, #8]
 800df26:	429a      	cmp	r2, r3
 800df28:	d3c6      	bcc.n	800deb8 <remove_chain+0x4a>
 800df2a:	e000      	b.n	800df2e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800df2c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800df2e:	2300      	movs	r3, #0
}
 800df30:	4618      	mov	r0, r3
 800df32:	3720      	adds	r7, #32
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}

0800df38 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b088      	sub	sp, #32
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
 800df40:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d10d      	bne.n	800df6a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800df4e:	693b      	ldr	r3, [r7, #16]
 800df50:	695b      	ldr	r3, [r3, #20]
 800df52:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800df54:	69bb      	ldr	r3, [r7, #24]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d004      	beq.n	800df64 <create_chain+0x2c>
 800df5a:	693b      	ldr	r3, [r7, #16]
 800df5c:	69db      	ldr	r3, [r3, #28]
 800df5e:	69ba      	ldr	r2, [r7, #24]
 800df60:	429a      	cmp	r2, r3
 800df62:	d31b      	bcc.n	800df9c <create_chain+0x64>
 800df64:	2301      	movs	r3, #1
 800df66:	61bb      	str	r3, [r7, #24]
 800df68:	e018      	b.n	800df9c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800df6a:	6839      	ldr	r1, [r7, #0]
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f7ff fd8e 	bl	800da8e <get_fat>
 800df72:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	2b01      	cmp	r3, #1
 800df78:	d801      	bhi.n	800df7e <create_chain+0x46>
 800df7a:	2301      	movs	r3, #1
 800df7c:	e070      	b.n	800e060 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df84:	d101      	bne.n	800df8a <create_chain+0x52>
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	e06a      	b.n	800e060 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	69db      	ldr	r3, [r3, #28]
 800df8e:	68fa      	ldr	r2, [r7, #12]
 800df90:	429a      	cmp	r2, r3
 800df92:	d201      	bcs.n	800df98 <create_chain+0x60>
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	e063      	b.n	800e060 <create_chain+0x128>
		scl = clst;
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800df9c:	69bb      	ldr	r3, [r7, #24]
 800df9e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dfa0:	69fb      	ldr	r3, [r7, #28]
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	69db      	ldr	r3, [r3, #28]
 800dfaa:	69fa      	ldr	r2, [r7, #28]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d307      	bcc.n	800dfc0 <create_chain+0x88>
				ncl = 2;
 800dfb0:	2302      	movs	r3, #2
 800dfb2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800dfb4:	69fa      	ldr	r2, [r7, #28]
 800dfb6:	69bb      	ldr	r3, [r7, #24]
 800dfb8:	429a      	cmp	r2, r3
 800dfba:	d901      	bls.n	800dfc0 <create_chain+0x88>
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	e04f      	b.n	800e060 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dfc0:	69f9      	ldr	r1, [r7, #28]
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f7ff fd63 	bl	800da8e <get_fat>
 800dfc8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d00e      	beq.n	800dfee <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	2b01      	cmp	r3, #1
 800dfd4:	d003      	beq.n	800dfde <create_chain+0xa6>
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfdc:	d101      	bne.n	800dfe2 <create_chain+0xaa>
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	e03e      	b.n	800e060 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800dfe2:	69fa      	ldr	r2, [r7, #28]
 800dfe4:	69bb      	ldr	r3, [r7, #24]
 800dfe6:	429a      	cmp	r2, r3
 800dfe8:	d1da      	bne.n	800dfa0 <create_chain+0x68>
 800dfea:	2300      	movs	r3, #0
 800dfec:	e038      	b.n	800e060 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800dfee:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dff0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dff4:	69f9      	ldr	r1, [r7, #28]
 800dff6:	6938      	ldr	r0, [r7, #16]
 800dff8:	f7ff fe1d 	bl	800dc36 <put_fat>
 800dffc:	4603      	mov	r3, r0
 800dffe:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e000:	7dfb      	ldrb	r3, [r7, #23]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d109      	bne.n	800e01a <create_chain+0xe2>
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d006      	beq.n	800e01a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e00c:	69fa      	ldr	r2, [r7, #28]
 800e00e:	6839      	ldr	r1, [r7, #0]
 800e010:	6938      	ldr	r0, [r7, #16]
 800e012:	f7ff fe10 	bl	800dc36 <put_fat>
 800e016:	4603      	mov	r3, r0
 800e018:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e01a:	7dfb      	ldrb	r3, [r7, #23]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d116      	bne.n	800e04e <create_chain+0x116>
		fs->last_clst = ncl;
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	69fa      	ldr	r2, [r7, #28]
 800e024:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	699a      	ldr	r2, [r3, #24]
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	69db      	ldr	r3, [r3, #28]
 800e02e:	3b02      	subs	r3, #2
 800e030:	429a      	cmp	r2, r3
 800e032:	d804      	bhi.n	800e03e <create_chain+0x106>
 800e034:	693b      	ldr	r3, [r7, #16]
 800e036:	699b      	ldr	r3, [r3, #24]
 800e038:	1e5a      	subs	r2, r3, #1
 800e03a:	693b      	ldr	r3, [r7, #16]
 800e03c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	791b      	ldrb	r3, [r3, #4]
 800e042:	f043 0301 	orr.w	r3, r3, #1
 800e046:	b2da      	uxtb	r2, r3
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	711a      	strb	r2, [r3, #4]
 800e04c:	e007      	b.n	800e05e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e04e:	7dfb      	ldrb	r3, [r7, #23]
 800e050:	2b01      	cmp	r3, #1
 800e052:	d102      	bne.n	800e05a <create_chain+0x122>
 800e054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e058:	e000      	b.n	800e05c <create_chain+0x124>
 800e05a:	2301      	movs	r3, #1
 800e05c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e05e:	69fb      	ldr	r3, [r7, #28]
}
 800e060:	4618      	mov	r0, r3
 800e062:	3720      	adds	r7, #32
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}

0800e068 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e068:	b480      	push	{r7}
 800e06a:	b087      	sub	sp, #28
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
 800e070:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e07c:	3304      	adds	r3, #4
 800e07e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	899b      	ldrh	r3, [r3, #12]
 800e084:	461a      	mov	r2, r3
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	fbb3 f3f2 	udiv	r3, r3, r2
 800e08c:	68fa      	ldr	r2, [r7, #12]
 800e08e:	8952      	ldrh	r2, [r2, #10]
 800e090:	fbb3 f3f2 	udiv	r3, r3, r2
 800e094:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	1d1a      	adds	r2, r3, #4
 800e09a:	613a      	str	r2, [r7, #16]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d101      	bne.n	800e0aa <clmt_clust+0x42>
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	e010      	b.n	800e0cc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800e0aa:	697a      	ldr	r2, [r7, #20]
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d307      	bcc.n	800e0c2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800e0b2:	697a      	ldr	r2, [r7, #20]
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	1ad3      	subs	r3, r2, r3
 800e0b8:	617b      	str	r3, [r7, #20]
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	3304      	adds	r3, #4
 800e0be:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e0c0:	e7e9      	b.n	800e096 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800e0c2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	681a      	ldr	r2, [r3, #0]
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	4413      	add	r3, r2
}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	371c      	adds	r7, #28
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d6:	4770      	bx	lr

0800e0d8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b086      	sub	sp, #24
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e0ee:	d204      	bcs.n	800e0fa <dir_sdi+0x22>
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	f003 031f 	and.w	r3, r3, #31
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d001      	beq.n	800e0fe <dir_sdi+0x26>
		return FR_INT_ERR;
 800e0fa:	2302      	movs	r3, #2
 800e0fc:	e071      	b.n	800e1e2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	683a      	ldr	r2, [r7, #0]
 800e102:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	689b      	ldr	r3, [r3, #8]
 800e108:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d106      	bne.n	800e11e <dir_sdi+0x46>
 800e110:	693b      	ldr	r3, [r7, #16]
 800e112:	781b      	ldrb	r3, [r3, #0]
 800e114:	2b02      	cmp	r3, #2
 800e116:	d902      	bls.n	800e11e <dir_sdi+0x46>
		clst = fs->dirbase;
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e11c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e11e:	697b      	ldr	r3, [r7, #20]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d10c      	bne.n	800e13e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	095b      	lsrs	r3, r3, #5
 800e128:	693a      	ldr	r2, [r7, #16]
 800e12a:	8912      	ldrh	r2, [r2, #8]
 800e12c:	4293      	cmp	r3, r2
 800e12e:	d301      	bcc.n	800e134 <dir_sdi+0x5c>
 800e130:	2302      	movs	r3, #2
 800e132:	e056      	b.n	800e1e2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800e134:	693b      	ldr	r3, [r7, #16]
 800e136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	61da      	str	r2, [r3, #28]
 800e13c:	e02d      	b.n	800e19a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	895b      	ldrh	r3, [r3, #10]
 800e142:	461a      	mov	r2, r3
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	899b      	ldrh	r3, [r3, #12]
 800e148:	fb02 f303 	mul.w	r3, r2, r3
 800e14c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e14e:	e019      	b.n	800e184 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6979      	ldr	r1, [r7, #20]
 800e154:	4618      	mov	r0, r3
 800e156:	f7ff fc9a 	bl	800da8e <get_fat>
 800e15a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e15c:	697b      	ldr	r3, [r7, #20]
 800e15e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e162:	d101      	bne.n	800e168 <dir_sdi+0x90>
 800e164:	2301      	movs	r3, #1
 800e166:	e03c      	b.n	800e1e2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	2b01      	cmp	r3, #1
 800e16c:	d904      	bls.n	800e178 <dir_sdi+0xa0>
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	69db      	ldr	r3, [r3, #28]
 800e172:	697a      	ldr	r2, [r7, #20]
 800e174:	429a      	cmp	r2, r3
 800e176:	d301      	bcc.n	800e17c <dir_sdi+0xa4>
 800e178:	2302      	movs	r3, #2
 800e17a:	e032      	b.n	800e1e2 <dir_sdi+0x10a>
			ofs -= csz;
 800e17c:	683a      	ldr	r2, [r7, #0]
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	1ad3      	subs	r3, r2, r3
 800e182:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e184:	683a      	ldr	r2, [r7, #0]
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	429a      	cmp	r2, r3
 800e18a:	d2e1      	bcs.n	800e150 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800e18c:	6979      	ldr	r1, [r7, #20]
 800e18e:	6938      	ldr	r0, [r7, #16]
 800e190:	f7ff fc5e 	bl	800da50 <clust2sect>
 800e194:	4602      	mov	r2, r0
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	697a      	ldr	r2, [r7, #20]
 800e19e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	69db      	ldr	r3, [r3, #28]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d101      	bne.n	800e1ac <dir_sdi+0xd4>
 800e1a8:	2302      	movs	r3, #2
 800e1aa:	e01a      	b.n	800e1e2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	69da      	ldr	r2, [r3, #28]
 800e1b0:	693b      	ldr	r3, [r7, #16]
 800e1b2:	899b      	ldrh	r3, [r3, #12]
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	fbb3 f3f1 	udiv	r3, r3, r1
 800e1bc:	441a      	add	r2, r3
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	899b      	ldrh	r3, [r3, #12]
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	fbb3 f0f2 	udiv	r0, r3, r2
 800e1d4:	fb00 f202 	mul.w	r2, r0, r2
 800e1d8:	1a9b      	subs	r3, r3, r2
 800e1da:	18ca      	adds	r2, r1, r3
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e1e0:	2300      	movs	r3, #0
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3718      	adds	r7, #24
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}

0800e1ea <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e1ea:	b580      	push	{r7, lr}
 800e1ec:	b086      	sub	sp, #24
 800e1ee:	af00      	add	r7, sp, #0
 800e1f0:	6078      	str	r0, [r7, #4]
 800e1f2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	695b      	ldr	r3, [r3, #20]
 800e1fe:	3320      	adds	r3, #32
 800e200:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	69db      	ldr	r3, [r3, #28]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d003      	beq.n	800e212 <dir_next+0x28>
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e210:	d301      	bcc.n	800e216 <dir_next+0x2c>
 800e212:	2304      	movs	r3, #4
 800e214:	e0bb      	b.n	800e38e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	899b      	ldrh	r3, [r3, #12]
 800e21a:	461a      	mov	r2, r3
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e222:	fb01 f202 	mul.w	r2, r1, r2
 800e226:	1a9b      	subs	r3, r3, r2
 800e228:	2b00      	cmp	r3, #0
 800e22a:	f040 809d 	bne.w	800e368 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	69db      	ldr	r3, [r3, #28]
 800e232:	1c5a      	adds	r2, r3, #1
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	699b      	ldr	r3, [r3, #24]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d10b      	bne.n	800e258 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	095b      	lsrs	r3, r3, #5
 800e244:	68fa      	ldr	r2, [r7, #12]
 800e246:	8912      	ldrh	r2, [r2, #8]
 800e248:	4293      	cmp	r3, r2
 800e24a:	f0c0 808d 	bcc.w	800e368 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2200      	movs	r2, #0
 800e252:	61da      	str	r2, [r3, #28]
 800e254:	2304      	movs	r3, #4
 800e256:	e09a      	b.n	800e38e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	899b      	ldrh	r3, [r3, #12]
 800e25c:	461a      	mov	r2, r3
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	fbb3 f3f2 	udiv	r3, r3, r2
 800e264:	68fa      	ldr	r2, [r7, #12]
 800e266:	8952      	ldrh	r2, [r2, #10]
 800e268:	3a01      	subs	r2, #1
 800e26a:	4013      	ands	r3, r2
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d17b      	bne.n	800e368 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e270:	687a      	ldr	r2, [r7, #4]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	699b      	ldr	r3, [r3, #24]
 800e276:	4619      	mov	r1, r3
 800e278:	4610      	mov	r0, r2
 800e27a:	f7ff fc08 	bl	800da8e <get_fat>
 800e27e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	2b01      	cmp	r3, #1
 800e284:	d801      	bhi.n	800e28a <dir_next+0xa0>
 800e286:	2302      	movs	r3, #2
 800e288:	e081      	b.n	800e38e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e290:	d101      	bne.n	800e296 <dir_next+0xac>
 800e292:	2301      	movs	r3, #1
 800e294:	e07b      	b.n	800e38e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	69db      	ldr	r3, [r3, #28]
 800e29a:	697a      	ldr	r2, [r7, #20]
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d359      	bcc.n	800e354 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d104      	bne.n	800e2b0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	61da      	str	r2, [r3, #28]
 800e2ac:	2304      	movs	r3, #4
 800e2ae:	e06e      	b.n	800e38e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e2b0:	687a      	ldr	r2, [r7, #4]
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	699b      	ldr	r3, [r3, #24]
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	4610      	mov	r0, r2
 800e2ba:	f7ff fe3d 	bl	800df38 <create_chain>
 800e2be:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e2c0:	697b      	ldr	r3, [r7, #20]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d101      	bne.n	800e2ca <dir_next+0xe0>
 800e2c6:	2307      	movs	r3, #7
 800e2c8:	e061      	b.n	800e38e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	2b01      	cmp	r3, #1
 800e2ce:	d101      	bne.n	800e2d4 <dir_next+0xea>
 800e2d0:	2302      	movs	r3, #2
 800e2d2:	e05c      	b.n	800e38e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2da:	d101      	bne.n	800e2e0 <dir_next+0xf6>
 800e2dc:	2301      	movs	r3, #1
 800e2de:	e056      	b.n	800e38e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e2e0:	68f8      	ldr	r0, [r7, #12]
 800e2e2:	f7ff fad3 	bl	800d88c <sync_window>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d001      	beq.n	800e2f0 <dir_next+0x106>
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	e04e      	b.n	800e38e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	899b      	ldrh	r3, [r3, #12]
 800e2fa:	461a      	mov	r2, r3
 800e2fc:	2100      	movs	r1, #0
 800e2fe:	f7ff f8fc 	bl	800d4fa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e302:	2300      	movs	r3, #0
 800e304:	613b      	str	r3, [r7, #16]
 800e306:	6979      	ldr	r1, [r7, #20]
 800e308:	68f8      	ldr	r0, [r7, #12]
 800e30a:	f7ff fba1 	bl	800da50 <clust2sect>
 800e30e:	4602      	mov	r2, r0
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	635a      	str	r2, [r3, #52]	; 0x34
 800e314:	e012      	b.n	800e33c <dir_next+0x152>
						fs->wflag = 1;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	2201      	movs	r2, #1
 800e31a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e31c:	68f8      	ldr	r0, [r7, #12]
 800e31e:	f7ff fab5 	bl	800d88c <sync_window>
 800e322:	4603      	mov	r3, r0
 800e324:	2b00      	cmp	r3, #0
 800e326:	d001      	beq.n	800e32c <dir_next+0x142>
 800e328:	2301      	movs	r3, #1
 800e32a:	e030      	b.n	800e38e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e32c:	693b      	ldr	r3, [r7, #16]
 800e32e:	3301      	adds	r3, #1
 800e330:	613b      	str	r3, [r7, #16]
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e336:	1c5a      	adds	r2, r3, #1
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	635a      	str	r2, [r3, #52]	; 0x34
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	895b      	ldrh	r3, [r3, #10]
 800e340:	461a      	mov	r2, r3
 800e342:	693b      	ldr	r3, [r7, #16]
 800e344:	4293      	cmp	r3, r2
 800e346:	d3e6      	bcc.n	800e316 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e34c:	693b      	ldr	r3, [r7, #16]
 800e34e:	1ad2      	subs	r2, r2, r3
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	697a      	ldr	r2, [r7, #20]
 800e358:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e35a:	6979      	ldr	r1, [r7, #20]
 800e35c:	68f8      	ldr	r0, [r7, #12]
 800e35e:	f7ff fb77 	bl	800da50 <clust2sect>
 800e362:	4602      	mov	r2, r0
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	68ba      	ldr	r2, [r7, #8]
 800e36c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	899b      	ldrh	r3, [r3, #12]
 800e378:	461a      	mov	r2, r3
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	fbb3 f0f2 	udiv	r0, r3, r2
 800e380:	fb00 f202 	mul.w	r2, r0, r2
 800e384:	1a9b      	subs	r3, r3, r2
 800e386:	18ca      	adds	r2, r1, r3
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e38c:	2300      	movs	r3, #0
}
 800e38e:	4618      	mov	r0, r3
 800e390:	3718      	adds	r7, #24
 800e392:	46bd      	mov	sp, r7
 800e394:	bd80      	pop	{r7, pc}

0800e396 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e396:	b580      	push	{r7, lr}
 800e398:	b086      	sub	sp, #24
 800e39a:	af00      	add	r7, sp, #0
 800e39c:	6078      	str	r0, [r7, #4]
 800e39e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e3a6:	2100      	movs	r1, #0
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f7ff fe95 	bl	800e0d8 <dir_sdi>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e3b2:	7dfb      	ldrb	r3, [r7, #23]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d12b      	bne.n	800e410 <dir_alloc+0x7a>
		n = 0;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	69db      	ldr	r3, [r3, #28]
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	68f8      	ldr	r0, [r7, #12]
 800e3c4:	f7ff faa6 	bl	800d914 <move_window>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e3cc:	7dfb      	ldrb	r3, [r7, #23]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d11d      	bne.n	800e40e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6a1b      	ldr	r3, [r3, #32]
 800e3d6:	781b      	ldrb	r3, [r3, #0]
 800e3d8:	2be5      	cmp	r3, #229	; 0xe5
 800e3da:	d004      	beq.n	800e3e6 <dir_alloc+0x50>
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6a1b      	ldr	r3, [r3, #32]
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d107      	bne.n	800e3f6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e3e6:	693b      	ldr	r3, [r7, #16]
 800e3e8:	3301      	adds	r3, #1
 800e3ea:	613b      	str	r3, [r7, #16]
 800e3ec:	693a      	ldr	r2, [r7, #16]
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	d102      	bne.n	800e3fa <dir_alloc+0x64>
 800e3f4:	e00c      	b.n	800e410 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e3fa:	2101      	movs	r1, #1
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f7ff fef4 	bl	800e1ea <dir_next>
 800e402:	4603      	mov	r3, r0
 800e404:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e406:	7dfb      	ldrb	r3, [r7, #23]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d0d7      	beq.n	800e3bc <dir_alloc+0x26>
 800e40c:	e000      	b.n	800e410 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e40e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e410:	7dfb      	ldrb	r3, [r7, #23]
 800e412:	2b04      	cmp	r3, #4
 800e414:	d101      	bne.n	800e41a <dir_alloc+0x84>
 800e416:	2307      	movs	r3, #7
 800e418:	75fb      	strb	r3, [r7, #23]
	return res;
 800e41a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3718      	adds	r7, #24
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}

0800e424 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b084      	sub	sp, #16
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	331a      	adds	r3, #26
 800e432:	4618      	mov	r0, r3
 800e434:	f7fe ffbe 	bl	800d3b4 <ld_word>
 800e438:	4603      	mov	r3, r0
 800e43a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	781b      	ldrb	r3, [r3, #0]
 800e440:	2b03      	cmp	r3, #3
 800e442:	d109      	bne.n	800e458 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	3314      	adds	r3, #20
 800e448:	4618      	mov	r0, r3
 800e44a:	f7fe ffb3 	bl	800d3b4 <ld_word>
 800e44e:	4603      	mov	r3, r0
 800e450:	041b      	lsls	r3, r3, #16
 800e452:	68fa      	ldr	r2, [r7, #12]
 800e454:	4313      	orrs	r3, r2
 800e456:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e458:	68fb      	ldr	r3, [r7, #12]
}
 800e45a:	4618      	mov	r0, r3
 800e45c:	3710      	adds	r7, #16
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}

0800e462 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e462:	b580      	push	{r7, lr}
 800e464:	b084      	sub	sp, #16
 800e466:	af00      	add	r7, sp, #0
 800e468:	60f8      	str	r0, [r7, #12]
 800e46a:	60b9      	str	r1, [r7, #8]
 800e46c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	331a      	adds	r3, #26
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	b292      	uxth	r2, r2
 800e476:	4611      	mov	r1, r2
 800e478:	4618      	mov	r0, r3
 800e47a:	f7fe ffd6 	bl	800d42a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	2b03      	cmp	r3, #3
 800e484:	d109      	bne.n	800e49a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	f103 0214 	add.w	r2, r3, #20
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	0c1b      	lsrs	r3, r3, #16
 800e490:	b29b      	uxth	r3, r3
 800e492:	4619      	mov	r1, r3
 800e494:	4610      	mov	r0, r2
 800e496:	f7fe ffc8 	bl	800d42a <st_word>
	}
}
 800e49a:	bf00      	nop
 800e49c:	3710      	adds	r7, #16
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}
	...

0800e4a4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e4a4:	b590      	push	{r4, r7, lr}
 800e4a6:	b087      	sub	sp, #28
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
 800e4ac:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	331a      	adds	r3, #26
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7fe ff7e 	bl	800d3b4 <ld_word>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d001      	beq.n	800e4c2 <cmp_lfn+0x1e>
 800e4be:	2300      	movs	r3, #0
 800e4c0:	e059      	b.n	800e576 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	781b      	ldrb	r3, [r3, #0]
 800e4c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e4ca:	1e5a      	subs	r2, r3, #1
 800e4cc:	4613      	mov	r3, r2
 800e4ce:	005b      	lsls	r3, r3, #1
 800e4d0:	4413      	add	r3, r2
 800e4d2:	009b      	lsls	r3, r3, #2
 800e4d4:	4413      	add	r3, r2
 800e4d6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e4d8:	2301      	movs	r3, #1
 800e4da:	81fb      	strh	r3, [r7, #14]
 800e4dc:	2300      	movs	r3, #0
 800e4de:	613b      	str	r3, [r7, #16]
 800e4e0:	e033      	b.n	800e54a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e4e2:	4a27      	ldr	r2, [pc, #156]	; (800e580 <cmp_lfn+0xdc>)
 800e4e4:	693b      	ldr	r3, [r7, #16]
 800e4e6:	4413      	add	r3, r2
 800e4e8:	781b      	ldrb	r3, [r3, #0]
 800e4ea:	461a      	mov	r2, r3
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	4413      	add	r3, r2
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7fe ff5f 	bl	800d3b4 <ld_word>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e4fa:	89fb      	ldrh	r3, [r7, #14]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d01a      	beq.n	800e536 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e500:	697b      	ldr	r3, [r7, #20]
 800e502:	2bfe      	cmp	r3, #254	; 0xfe
 800e504:	d812      	bhi.n	800e52c <cmp_lfn+0x88>
 800e506:	89bb      	ldrh	r3, [r7, #12]
 800e508:	4618      	mov	r0, r3
 800e50a:	f002 fb5b 	bl	8010bc4 <ff_wtoupper>
 800e50e:	4603      	mov	r3, r0
 800e510:	461c      	mov	r4, r3
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	1c5a      	adds	r2, r3, #1
 800e516:	617a      	str	r2, [r7, #20]
 800e518:	005b      	lsls	r3, r3, #1
 800e51a:	687a      	ldr	r2, [r7, #4]
 800e51c:	4413      	add	r3, r2
 800e51e:	881b      	ldrh	r3, [r3, #0]
 800e520:	4618      	mov	r0, r3
 800e522:	f002 fb4f 	bl	8010bc4 <ff_wtoupper>
 800e526:	4603      	mov	r3, r0
 800e528:	429c      	cmp	r4, r3
 800e52a:	d001      	beq.n	800e530 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e52c:	2300      	movs	r3, #0
 800e52e:	e022      	b.n	800e576 <cmp_lfn+0xd2>
			}
			wc = uc;
 800e530:	89bb      	ldrh	r3, [r7, #12]
 800e532:	81fb      	strh	r3, [r7, #14]
 800e534:	e006      	b.n	800e544 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e536:	89bb      	ldrh	r3, [r7, #12]
 800e538:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e53c:	4293      	cmp	r3, r2
 800e53e:	d001      	beq.n	800e544 <cmp_lfn+0xa0>
 800e540:	2300      	movs	r3, #0
 800e542:	e018      	b.n	800e576 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	3301      	adds	r3, #1
 800e548:	613b      	str	r3, [r7, #16]
 800e54a:	693b      	ldr	r3, [r7, #16]
 800e54c:	2b0c      	cmp	r3, #12
 800e54e:	d9c8      	bls.n	800e4e2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	781b      	ldrb	r3, [r3, #0]
 800e554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d00b      	beq.n	800e574 <cmp_lfn+0xd0>
 800e55c:	89fb      	ldrh	r3, [r7, #14]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d008      	beq.n	800e574 <cmp_lfn+0xd0>
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	005b      	lsls	r3, r3, #1
 800e566:	687a      	ldr	r2, [r7, #4]
 800e568:	4413      	add	r3, r2
 800e56a:	881b      	ldrh	r3, [r3, #0]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d001      	beq.n	800e574 <cmp_lfn+0xd0>
 800e570:	2300      	movs	r3, #0
 800e572:	e000      	b.n	800e576 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e574:	2301      	movs	r3, #1
}
 800e576:	4618      	mov	r0, r3
 800e578:	371c      	adds	r7, #28
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd90      	pop	{r4, r7, pc}
 800e57e:	bf00      	nop
 800e580:	08011e70 	.word	0x08011e70

0800e584 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b086      	sub	sp, #24
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
 800e58c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	331a      	adds	r3, #26
 800e592:	4618      	mov	r0, r3
 800e594:	f7fe ff0e 	bl	800d3b4 <ld_word>
 800e598:	4603      	mov	r3, r0
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d001      	beq.n	800e5a2 <pick_lfn+0x1e>
 800e59e:	2300      	movs	r3, #0
 800e5a0:	e04d      	b.n	800e63e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	781b      	ldrb	r3, [r3, #0]
 800e5a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e5aa:	1e5a      	subs	r2, r3, #1
 800e5ac:	4613      	mov	r3, r2
 800e5ae:	005b      	lsls	r3, r3, #1
 800e5b0:	4413      	add	r3, r2
 800e5b2:	009b      	lsls	r3, r3, #2
 800e5b4:	4413      	add	r3, r2
 800e5b6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	81fb      	strh	r3, [r7, #14]
 800e5bc:	2300      	movs	r3, #0
 800e5be:	613b      	str	r3, [r7, #16]
 800e5c0:	e028      	b.n	800e614 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e5c2:	4a21      	ldr	r2, [pc, #132]	; (800e648 <pick_lfn+0xc4>)
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	4413      	add	r3, r2
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	461a      	mov	r2, r3
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	4413      	add	r3, r2
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f7fe feef 	bl	800d3b4 <ld_word>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e5da:	89fb      	ldrh	r3, [r7, #14]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d00f      	beq.n	800e600 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	2bfe      	cmp	r3, #254	; 0xfe
 800e5e4:	d901      	bls.n	800e5ea <pick_lfn+0x66>
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	e029      	b.n	800e63e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800e5ea:	89bb      	ldrh	r3, [r7, #12]
 800e5ec:	81fb      	strh	r3, [r7, #14]
 800e5ee:	697b      	ldr	r3, [r7, #20]
 800e5f0:	1c5a      	adds	r2, r3, #1
 800e5f2:	617a      	str	r2, [r7, #20]
 800e5f4:	005b      	lsls	r3, r3, #1
 800e5f6:	687a      	ldr	r2, [r7, #4]
 800e5f8:	4413      	add	r3, r2
 800e5fa:	89fa      	ldrh	r2, [r7, #14]
 800e5fc:	801a      	strh	r2, [r3, #0]
 800e5fe:	e006      	b.n	800e60e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e600:	89bb      	ldrh	r3, [r7, #12]
 800e602:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e606:	4293      	cmp	r3, r2
 800e608:	d001      	beq.n	800e60e <pick_lfn+0x8a>
 800e60a:	2300      	movs	r3, #0
 800e60c:	e017      	b.n	800e63e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	3301      	adds	r3, #1
 800e612:	613b      	str	r3, [r7, #16]
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	2b0c      	cmp	r3, #12
 800e618:	d9d3      	bls.n	800e5c2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	781b      	ldrb	r3, [r3, #0]
 800e61e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e622:	2b00      	cmp	r3, #0
 800e624:	d00a      	beq.n	800e63c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	2bfe      	cmp	r3, #254	; 0xfe
 800e62a:	d901      	bls.n	800e630 <pick_lfn+0xac>
 800e62c:	2300      	movs	r3, #0
 800e62e:	e006      	b.n	800e63e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	005b      	lsls	r3, r3, #1
 800e634:	687a      	ldr	r2, [r7, #4]
 800e636:	4413      	add	r3, r2
 800e638:	2200      	movs	r2, #0
 800e63a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800e63c:	2301      	movs	r3, #1
}
 800e63e:	4618      	mov	r0, r3
 800e640:	3718      	adds	r7, #24
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}
 800e646:	bf00      	nop
 800e648:	08011e70 	.word	0x08011e70

0800e64c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b088      	sub	sp, #32
 800e650:	af00      	add	r7, sp, #0
 800e652:	60f8      	str	r0, [r7, #12]
 800e654:	60b9      	str	r1, [r7, #8]
 800e656:	4611      	mov	r1, r2
 800e658:	461a      	mov	r2, r3
 800e65a:	460b      	mov	r3, r1
 800e65c:	71fb      	strb	r3, [r7, #7]
 800e65e:	4613      	mov	r3, r2
 800e660:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	330d      	adds	r3, #13
 800e666:	79ba      	ldrb	r2, [r7, #6]
 800e668:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e66a:	68bb      	ldr	r3, [r7, #8]
 800e66c:	330b      	adds	r3, #11
 800e66e:	220f      	movs	r2, #15
 800e670:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e672:	68bb      	ldr	r3, [r7, #8]
 800e674:	330c      	adds	r3, #12
 800e676:	2200      	movs	r2, #0
 800e678:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	331a      	adds	r3, #26
 800e67e:	2100      	movs	r1, #0
 800e680:	4618      	mov	r0, r3
 800e682:	f7fe fed2 	bl	800d42a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e686:	79fb      	ldrb	r3, [r7, #7]
 800e688:	1e5a      	subs	r2, r3, #1
 800e68a:	4613      	mov	r3, r2
 800e68c:	005b      	lsls	r3, r3, #1
 800e68e:	4413      	add	r3, r2
 800e690:	009b      	lsls	r3, r3, #2
 800e692:	4413      	add	r3, r2
 800e694:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e696:	2300      	movs	r3, #0
 800e698:	82fb      	strh	r3, [r7, #22]
 800e69a:	2300      	movs	r3, #0
 800e69c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e69e:	8afb      	ldrh	r3, [r7, #22]
 800e6a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6a4:	4293      	cmp	r3, r2
 800e6a6:	d007      	beq.n	800e6b8 <put_lfn+0x6c>
 800e6a8:	69fb      	ldr	r3, [r7, #28]
 800e6aa:	1c5a      	adds	r2, r3, #1
 800e6ac:	61fa      	str	r2, [r7, #28]
 800e6ae:	005b      	lsls	r3, r3, #1
 800e6b0:	68fa      	ldr	r2, [r7, #12]
 800e6b2:	4413      	add	r3, r2
 800e6b4:	881b      	ldrh	r3, [r3, #0]
 800e6b6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e6b8:	4a17      	ldr	r2, [pc, #92]	; (800e718 <put_lfn+0xcc>)
 800e6ba:	69bb      	ldr	r3, [r7, #24]
 800e6bc:	4413      	add	r3, r2
 800e6be:	781b      	ldrb	r3, [r3, #0]
 800e6c0:	461a      	mov	r2, r3
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	4413      	add	r3, r2
 800e6c6:	8afa      	ldrh	r2, [r7, #22]
 800e6c8:	4611      	mov	r1, r2
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f7fe fead 	bl	800d42a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e6d0:	8afb      	ldrh	r3, [r7, #22]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d102      	bne.n	800e6dc <put_lfn+0x90>
 800e6d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e6da:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e6dc:	69bb      	ldr	r3, [r7, #24]
 800e6de:	3301      	adds	r3, #1
 800e6e0:	61bb      	str	r3, [r7, #24]
 800e6e2:	69bb      	ldr	r3, [r7, #24]
 800e6e4:	2b0c      	cmp	r3, #12
 800e6e6:	d9da      	bls.n	800e69e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e6e8:	8afb      	ldrh	r3, [r7, #22]
 800e6ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6ee:	4293      	cmp	r3, r2
 800e6f0:	d006      	beq.n	800e700 <put_lfn+0xb4>
 800e6f2:	69fb      	ldr	r3, [r7, #28]
 800e6f4:	005b      	lsls	r3, r3, #1
 800e6f6:	68fa      	ldr	r2, [r7, #12]
 800e6f8:	4413      	add	r3, r2
 800e6fa:	881b      	ldrh	r3, [r3, #0]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d103      	bne.n	800e708 <put_lfn+0xbc>
 800e700:	79fb      	ldrb	r3, [r7, #7]
 800e702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e706:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	79fa      	ldrb	r2, [r7, #7]
 800e70c:	701a      	strb	r2, [r3, #0]
}
 800e70e:	bf00      	nop
 800e710:	3720      	adds	r7, #32
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	08011e70 	.word	0x08011e70

0800e71c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b08c      	sub	sp, #48	; 0x30
 800e720:	af00      	add	r7, sp, #0
 800e722:	60f8      	str	r0, [r7, #12]
 800e724:	60b9      	str	r1, [r7, #8]
 800e726:	607a      	str	r2, [r7, #4]
 800e728:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e72a:	220b      	movs	r2, #11
 800e72c:	68b9      	ldr	r1, [r7, #8]
 800e72e:	68f8      	ldr	r0, [r7, #12]
 800e730:	f7fe fec2 	bl	800d4b8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	2b05      	cmp	r3, #5
 800e738:	d92b      	bls.n	800e792 <gen_numname+0x76>
		sr = seq;
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e73e:	e022      	b.n	800e786 <gen_numname+0x6a>
			wc = *lfn++;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	1c9a      	adds	r2, r3, #2
 800e744:	607a      	str	r2, [r7, #4]
 800e746:	881b      	ldrh	r3, [r3, #0]
 800e748:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e74a:	2300      	movs	r3, #0
 800e74c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e74e:	e017      	b.n	800e780 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e750:	69fb      	ldr	r3, [r7, #28]
 800e752:	005a      	lsls	r2, r3, #1
 800e754:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e756:	f003 0301 	and.w	r3, r3, #1
 800e75a:	4413      	add	r3, r2
 800e75c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e75e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e760:	085b      	lsrs	r3, r3, #1
 800e762:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e764:	69fb      	ldr	r3, [r7, #28]
 800e766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d005      	beq.n	800e77a <gen_numname+0x5e>
 800e76e:	69fb      	ldr	r3, [r7, #28]
 800e770:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800e774:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800e778:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e77c:	3301      	adds	r3, #1
 800e77e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e782:	2b0f      	cmp	r3, #15
 800e784:	d9e4      	bls.n	800e750 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	881b      	ldrh	r3, [r3, #0]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d1d8      	bne.n	800e740 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e78e:	69fb      	ldr	r3, [r7, #28]
 800e790:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e792:	2307      	movs	r3, #7
 800e794:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	b2db      	uxtb	r3, r3
 800e79a:	f003 030f 	and.w	r3, r3, #15
 800e79e:	b2db      	uxtb	r3, r3
 800e7a0:	3330      	adds	r3, #48	; 0x30
 800e7a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e7a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e7aa:	2b39      	cmp	r3, #57	; 0x39
 800e7ac:	d904      	bls.n	800e7b8 <gen_numname+0x9c>
 800e7ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e7b2:	3307      	adds	r3, #7
 800e7b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ba:	1e5a      	subs	r2, r3, #1
 800e7bc:	62ba      	str	r2, [r7, #40]	; 0x28
 800e7be:	3330      	adds	r3, #48	; 0x30
 800e7c0:	443b      	add	r3, r7
 800e7c2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e7c6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	091b      	lsrs	r3, r3, #4
 800e7ce:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d1df      	bne.n	800e796 <gen_numname+0x7a>
	ns[i] = '~';
 800e7d6:	f107 0214 	add.w	r2, r7, #20
 800e7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7dc:	4413      	add	r3, r2
 800e7de:	227e      	movs	r2, #126	; 0x7e
 800e7e0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	627b      	str	r3, [r7, #36]	; 0x24
 800e7e6:	e002      	b.n	800e7ee <gen_numname+0xd2>
 800e7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ea:	3301      	adds	r3, #1
 800e7ec:	627b      	str	r3, [r7, #36]	; 0x24
 800e7ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	d205      	bcs.n	800e802 <gen_numname+0xe6>
 800e7f6:	68fa      	ldr	r2, [r7, #12]
 800e7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7fa:	4413      	add	r3, r2
 800e7fc:	781b      	ldrb	r3, [r3, #0]
 800e7fe:	2b20      	cmp	r3, #32
 800e800:	d1f2      	bne.n	800e7e8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e804:	2b07      	cmp	r3, #7
 800e806:	d807      	bhi.n	800e818 <gen_numname+0xfc>
 800e808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e80a:	1c5a      	adds	r2, r3, #1
 800e80c:	62ba      	str	r2, [r7, #40]	; 0x28
 800e80e:	3330      	adds	r3, #48	; 0x30
 800e810:	443b      	add	r3, r7
 800e812:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e816:	e000      	b.n	800e81a <gen_numname+0xfe>
 800e818:	2120      	movs	r1, #32
 800e81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e81c:	1c5a      	adds	r2, r3, #1
 800e81e:	627a      	str	r2, [r7, #36]	; 0x24
 800e820:	68fa      	ldr	r2, [r7, #12]
 800e822:	4413      	add	r3, r2
 800e824:	460a      	mov	r2, r1
 800e826:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82a:	2b07      	cmp	r3, #7
 800e82c:	d9e9      	bls.n	800e802 <gen_numname+0xe6>
}
 800e82e:	bf00      	nop
 800e830:	bf00      	nop
 800e832:	3730      	adds	r7, #48	; 0x30
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}

0800e838 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e838:	b480      	push	{r7}
 800e83a:	b085      	sub	sp, #20
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e840:	2300      	movs	r3, #0
 800e842:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e844:	230b      	movs	r3, #11
 800e846:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e848:	7bfb      	ldrb	r3, [r7, #15]
 800e84a:	b2da      	uxtb	r2, r3
 800e84c:	0852      	lsrs	r2, r2, #1
 800e84e:	01db      	lsls	r3, r3, #7
 800e850:	4313      	orrs	r3, r2
 800e852:	b2da      	uxtb	r2, r3
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	1c59      	adds	r1, r3, #1
 800e858:	6079      	str	r1, [r7, #4]
 800e85a:	781b      	ldrb	r3, [r3, #0]
 800e85c:	4413      	add	r3, r2
 800e85e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	3b01      	subs	r3, #1
 800e864:	60bb      	str	r3, [r7, #8]
 800e866:	68bb      	ldr	r3, [r7, #8]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d1ed      	bne.n	800e848 <sum_sfn+0x10>
	return sum;
 800e86c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e86e:	4618      	mov	r0, r3
 800e870:	3714      	adds	r7, #20
 800e872:	46bd      	mov	sp, r7
 800e874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e878:	4770      	bx	lr

0800e87a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e87a:	b580      	push	{r7, lr}
 800e87c:	b086      	sub	sp, #24
 800e87e:	af00      	add	r7, sp, #0
 800e880:	6078      	str	r0, [r7, #4]
 800e882:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e884:	2304      	movs	r3, #4
 800e886:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800e88e:	23ff      	movs	r3, #255	; 0xff
 800e890:	757b      	strb	r3, [r7, #21]
 800e892:	23ff      	movs	r3, #255	; 0xff
 800e894:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800e896:	e081      	b.n	800e99c <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	69db      	ldr	r3, [r3, #28]
 800e89c:	4619      	mov	r1, r3
 800e89e:	6938      	ldr	r0, [r7, #16]
 800e8a0:	f7ff f838 	bl	800d914 <move_window>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e8a8:	7dfb      	ldrb	r3, [r7, #23]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d17c      	bne.n	800e9a8 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6a1b      	ldr	r3, [r3, #32]
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800e8b6:	7dbb      	ldrb	r3, [r7, #22]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d102      	bne.n	800e8c2 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e8bc:	2304      	movs	r3, #4
 800e8be:	75fb      	strb	r3, [r7, #23]
 800e8c0:	e077      	b.n	800e9b2 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6a1b      	ldr	r3, [r3, #32]
 800e8c6:	330b      	adds	r3, #11
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e8ce:	73fb      	strb	r3, [r7, #15]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	7bfa      	ldrb	r2, [r7, #15]
 800e8d4:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800e8d6:	7dbb      	ldrb	r3, [r7, #22]
 800e8d8:	2be5      	cmp	r3, #229	; 0xe5
 800e8da:	d00e      	beq.n	800e8fa <dir_read+0x80>
 800e8dc:	7dbb      	ldrb	r3, [r7, #22]
 800e8de:	2b2e      	cmp	r3, #46	; 0x2e
 800e8e0:	d00b      	beq.n	800e8fa <dir_read+0x80>
 800e8e2:	7bfb      	ldrb	r3, [r7, #15]
 800e8e4:	f023 0320 	bic.w	r3, r3, #32
 800e8e8:	2b08      	cmp	r3, #8
 800e8ea:	bf0c      	ite	eq
 800e8ec:	2301      	moveq	r3, #1
 800e8ee:	2300      	movne	r3, #0
 800e8f0:	b2db      	uxtb	r3, r3
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	4293      	cmp	r3, r2
 800e8f8:	d002      	beq.n	800e900 <dir_read+0x86>
				ord = 0xFF;
 800e8fa:	23ff      	movs	r3, #255	; 0xff
 800e8fc:	757b      	strb	r3, [r7, #21]
 800e8fe:	e044      	b.n	800e98a <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800e900:	7bfb      	ldrb	r3, [r7, #15]
 800e902:	2b0f      	cmp	r3, #15
 800e904:	d12f      	bne.n	800e966 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800e906:	7dbb      	ldrb	r3, [r7, #22]
 800e908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d00d      	beq.n	800e92c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	6a1b      	ldr	r3, [r3, #32]
 800e914:	7b5b      	ldrb	r3, [r3, #13]
 800e916:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800e918:	7dbb      	ldrb	r3, [r7, #22]
 800e91a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e91e:	75bb      	strb	r3, [r7, #22]
 800e920:	7dbb      	ldrb	r3, [r7, #22]
 800e922:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	695a      	ldr	r2, [r3, #20]
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e92c:	7dba      	ldrb	r2, [r7, #22]
 800e92e:	7d7b      	ldrb	r3, [r7, #21]
 800e930:	429a      	cmp	r2, r3
 800e932:	d115      	bne.n	800e960 <dir_read+0xe6>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	6a1b      	ldr	r3, [r3, #32]
 800e938:	330d      	adds	r3, #13
 800e93a:	781b      	ldrb	r3, [r3, #0]
 800e93c:	7d3a      	ldrb	r2, [r7, #20]
 800e93e:	429a      	cmp	r2, r3
 800e940:	d10e      	bne.n	800e960 <dir_read+0xe6>
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	691a      	ldr	r2, [r3, #16]
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6a1b      	ldr	r3, [r3, #32]
 800e94a:	4619      	mov	r1, r3
 800e94c:	4610      	mov	r0, r2
 800e94e:	f7ff fe19 	bl	800e584 <pick_lfn>
 800e952:	4603      	mov	r3, r0
 800e954:	2b00      	cmp	r3, #0
 800e956:	d003      	beq.n	800e960 <dir_read+0xe6>
 800e958:	7d7b      	ldrb	r3, [r7, #21]
 800e95a:	3b01      	subs	r3, #1
 800e95c:	b2db      	uxtb	r3, r3
 800e95e:	e000      	b.n	800e962 <dir_read+0xe8>
 800e960:	23ff      	movs	r3, #255	; 0xff
 800e962:	757b      	strb	r3, [r7, #21]
 800e964:	e011      	b.n	800e98a <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800e966:	7d7b      	ldrb	r3, [r7, #21]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d109      	bne.n	800e980 <dir_read+0x106>
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	6a1b      	ldr	r3, [r3, #32]
 800e970:	4618      	mov	r0, r3
 800e972:	f7ff ff61 	bl	800e838 <sum_sfn>
 800e976:	4603      	mov	r3, r0
 800e978:	461a      	mov	r2, r3
 800e97a:	7d3b      	ldrb	r3, [r7, #20]
 800e97c:	4293      	cmp	r3, r2
 800e97e:	d015      	beq.n	800e9ac <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e986:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800e988:	e010      	b.n	800e9ac <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e98a:	2100      	movs	r1, #0
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f7ff fc2c 	bl	800e1ea <dir_next>
 800e992:	4603      	mov	r3, r0
 800e994:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e996:	7dfb      	ldrb	r3, [r7, #23]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d109      	bne.n	800e9b0 <dir_read+0x136>
	while (dp->sect) {
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	69db      	ldr	r3, [r3, #28]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	f47f af79 	bne.w	800e898 <dir_read+0x1e>
 800e9a6:	e004      	b.n	800e9b2 <dir_read+0x138>
		if (res != FR_OK) break;
 800e9a8:	bf00      	nop
 800e9aa:	e002      	b.n	800e9b2 <dir_read+0x138>
					break;
 800e9ac:	bf00      	nop
 800e9ae:	e000      	b.n	800e9b2 <dir_read+0x138>
		if (res != FR_OK) break;
 800e9b0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e9b2:	7dfb      	ldrb	r3, [r7, #23]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d002      	beq.n	800e9be <dir_read+0x144>
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	61da      	str	r2, [r3, #28]
	return res;
 800e9be:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3718      	adds	r7, #24
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b086      	sub	sp, #24
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e9d6:	2100      	movs	r1, #0
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f7ff fb7d 	bl	800e0d8 <dir_sdi>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e9e2:	7dfb      	ldrb	r3, [r7, #23]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d001      	beq.n	800e9ec <dir_find+0x24>
 800e9e8:	7dfb      	ldrb	r3, [r7, #23]
 800e9ea:	e0a9      	b.n	800eb40 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e9ec:	23ff      	movs	r3, #255	; 0xff
 800e9ee:	753b      	strb	r3, [r7, #20]
 800e9f0:	7d3b      	ldrb	r3, [r7, #20]
 800e9f2:	757b      	strb	r3, [r7, #21]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e9fa:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	69db      	ldr	r3, [r3, #28]
 800ea00:	4619      	mov	r1, r3
 800ea02:	6938      	ldr	r0, [r7, #16]
 800ea04:	f7fe ff86 	bl	800d914 <move_window>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ea0c:	7dfb      	ldrb	r3, [r7, #23]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	f040 8090 	bne.w	800eb34 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6a1b      	ldr	r3, [r3, #32]
 800ea18:	781b      	ldrb	r3, [r3, #0]
 800ea1a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ea1c:	7dbb      	ldrb	r3, [r7, #22]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d102      	bne.n	800ea28 <dir_find+0x60>
 800ea22:	2304      	movs	r3, #4
 800ea24:	75fb      	strb	r3, [r7, #23]
 800ea26:	e08a      	b.n	800eb3e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	6a1b      	ldr	r3, [r3, #32]
 800ea2c:	330b      	adds	r3, #11
 800ea2e:	781b      	ldrb	r3, [r3, #0]
 800ea30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea34:	73fb      	strb	r3, [r7, #15]
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	7bfa      	ldrb	r2, [r7, #15]
 800ea3a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ea3c:	7dbb      	ldrb	r3, [r7, #22]
 800ea3e:	2be5      	cmp	r3, #229	; 0xe5
 800ea40:	d007      	beq.n	800ea52 <dir_find+0x8a>
 800ea42:	7bfb      	ldrb	r3, [r7, #15]
 800ea44:	f003 0308 	and.w	r3, r3, #8
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d009      	beq.n	800ea60 <dir_find+0x98>
 800ea4c:	7bfb      	ldrb	r3, [r7, #15]
 800ea4e:	2b0f      	cmp	r3, #15
 800ea50:	d006      	beq.n	800ea60 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ea52:	23ff      	movs	r3, #255	; 0xff
 800ea54:	757b      	strb	r3, [r7, #21]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ea5c:	631a      	str	r2, [r3, #48]	; 0x30
 800ea5e:	e05e      	b.n	800eb1e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ea60:	7bfb      	ldrb	r3, [r7, #15]
 800ea62:	2b0f      	cmp	r3, #15
 800ea64:	d136      	bne.n	800ead4 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ea6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d154      	bne.n	800eb1e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ea74:	7dbb      	ldrb	r3, [r7, #22]
 800ea76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d00d      	beq.n	800ea9a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6a1b      	ldr	r3, [r3, #32]
 800ea82:	7b5b      	ldrb	r3, [r3, #13]
 800ea84:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ea86:	7dbb      	ldrb	r3, [r7, #22]
 800ea88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea8c:	75bb      	strb	r3, [r7, #22]
 800ea8e:	7dbb      	ldrb	r3, [r7, #22]
 800ea90:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	695a      	ldr	r2, [r3, #20]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ea9a:	7dba      	ldrb	r2, [r7, #22]
 800ea9c:	7d7b      	ldrb	r3, [r7, #21]
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d115      	bne.n	800eace <dir_find+0x106>
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6a1b      	ldr	r3, [r3, #32]
 800eaa6:	330d      	adds	r3, #13
 800eaa8:	781b      	ldrb	r3, [r3, #0]
 800eaaa:	7d3a      	ldrb	r2, [r7, #20]
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d10e      	bne.n	800eace <dir_find+0x106>
 800eab0:	693b      	ldr	r3, [r7, #16]
 800eab2:	691a      	ldr	r2, [r3, #16]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6a1b      	ldr	r3, [r3, #32]
 800eab8:	4619      	mov	r1, r3
 800eaba:	4610      	mov	r0, r2
 800eabc:	f7ff fcf2 	bl	800e4a4 <cmp_lfn>
 800eac0:	4603      	mov	r3, r0
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d003      	beq.n	800eace <dir_find+0x106>
 800eac6:	7d7b      	ldrb	r3, [r7, #21]
 800eac8:	3b01      	subs	r3, #1
 800eaca:	b2db      	uxtb	r3, r3
 800eacc:	e000      	b.n	800ead0 <dir_find+0x108>
 800eace:	23ff      	movs	r3, #255	; 0xff
 800ead0:	757b      	strb	r3, [r7, #21]
 800ead2:	e024      	b.n	800eb1e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ead4:	7d7b      	ldrb	r3, [r7, #21]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d109      	bne.n	800eaee <dir_find+0x126>
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6a1b      	ldr	r3, [r3, #32]
 800eade:	4618      	mov	r0, r3
 800eae0:	f7ff feaa 	bl	800e838 <sum_sfn>
 800eae4:	4603      	mov	r3, r0
 800eae6:	461a      	mov	r2, r3
 800eae8:	7d3b      	ldrb	r3, [r7, #20]
 800eaea:	4293      	cmp	r3, r2
 800eaec:	d024      	beq.n	800eb38 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eaf4:	f003 0301 	and.w	r3, r3, #1
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d10a      	bne.n	800eb12 <dir_find+0x14a>
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6a18      	ldr	r0, [r3, #32]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	3324      	adds	r3, #36	; 0x24
 800eb04:	220b      	movs	r2, #11
 800eb06:	4619      	mov	r1, r3
 800eb08:	f7fe fd12 	bl	800d530 <mem_cmp>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d014      	beq.n	800eb3c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800eb12:	23ff      	movs	r3, #255	; 0xff
 800eb14:	757b      	strb	r3, [r7, #21]
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb1c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800eb1e:	2100      	movs	r1, #0
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f7ff fb62 	bl	800e1ea <dir_next>
 800eb26:	4603      	mov	r3, r0
 800eb28:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800eb2a:	7dfb      	ldrb	r3, [r7, #23]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	f43f af65 	beq.w	800e9fc <dir_find+0x34>
 800eb32:	e004      	b.n	800eb3e <dir_find+0x176>
		if (res != FR_OK) break;
 800eb34:	bf00      	nop
 800eb36:	e002      	b.n	800eb3e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800eb38:	bf00      	nop
 800eb3a:	e000      	b.n	800eb3e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800eb3c:	bf00      	nop

	return res;
 800eb3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	3718      	adds	r7, #24
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}

0800eb48 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b08c      	sub	sp, #48	; 0x30
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eb5c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d001      	beq.n	800eb68 <dir_register+0x20>
 800eb64:	2306      	movs	r3, #6
 800eb66:	e0e0      	b.n	800ed2a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800eb68:	2300      	movs	r3, #0
 800eb6a:	627b      	str	r3, [r7, #36]	; 0x24
 800eb6c:	e002      	b.n	800eb74 <dir_register+0x2c>
 800eb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb70:	3301      	adds	r3, #1
 800eb72:	627b      	str	r3, [r7, #36]	; 0x24
 800eb74:	69fb      	ldr	r3, [r7, #28]
 800eb76:	691a      	ldr	r2, [r3, #16]
 800eb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb7a:	005b      	lsls	r3, r3, #1
 800eb7c:	4413      	add	r3, r2
 800eb7e:	881b      	ldrh	r3, [r3, #0]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d1f4      	bne.n	800eb6e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800eb8a:	f107 030c 	add.w	r3, r7, #12
 800eb8e:	220c      	movs	r2, #12
 800eb90:	4618      	mov	r0, r3
 800eb92:	f7fe fc91 	bl	800d4b8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800eb96:	7dfb      	ldrb	r3, [r7, #23]
 800eb98:	f003 0301 	and.w	r3, r3, #1
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d032      	beq.n	800ec06 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2240      	movs	r2, #64	; 0x40
 800eba4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800eba8:	2301      	movs	r3, #1
 800ebaa:	62bb      	str	r3, [r7, #40]	; 0x28
 800ebac:	e016      	b.n	800ebdc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800ebb4:	69fb      	ldr	r3, [r7, #28]
 800ebb6:	691a      	ldr	r2, [r3, #16]
 800ebb8:	f107 010c 	add.w	r1, r7, #12
 800ebbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebbe:	f7ff fdad 	bl	800e71c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f7ff ff00 	bl	800e9c8 <dir_find>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ebce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d106      	bne.n	800ebe4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ebd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebd8:	3301      	adds	r3, #1
 800ebda:	62bb      	str	r3, [r7, #40]	; 0x28
 800ebdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebde:	2b63      	cmp	r3, #99	; 0x63
 800ebe0:	d9e5      	bls.n	800ebae <dir_register+0x66>
 800ebe2:	e000      	b.n	800ebe6 <dir_register+0x9e>
			if (res != FR_OK) break;
 800ebe4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ebe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe8:	2b64      	cmp	r3, #100	; 0x64
 800ebea:	d101      	bne.n	800ebf0 <dir_register+0xa8>
 800ebec:	2307      	movs	r3, #7
 800ebee:	e09c      	b.n	800ed2a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ebf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ebf4:	2b04      	cmp	r3, #4
 800ebf6:	d002      	beq.n	800ebfe <dir_register+0xb6>
 800ebf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ebfc:	e095      	b.n	800ed2a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ebfe:	7dfa      	ldrb	r2, [r7, #23]
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ec06:	7dfb      	ldrb	r3, [r7, #23]
 800ec08:	f003 0302 	and.w	r3, r3, #2
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d007      	beq.n	800ec20 <dir_register+0xd8>
 800ec10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec12:	330c      	adds	r3, #12
 800ec14:	4a47      	ldr	r2, [pc, #284]	; (800ed34 <dir_register+0x1ec>)
 800ec16:	fba2 2303 	umull	r2, r3, r2, r3
 800ec1a:	089b      	lsrs	r3, r3, #2
 800ec1c:	3301      	adds	r3, #1
 800ec1e:	e000      	b.n	800ec22 <dir_register+0xda>
 800ec20:	2301      	movs	r3, #1
 800ec22:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ec24:	6a39      	ldr	r1, [r7, #32]
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f7ff fbb5 	bl	800e396 <dir_alloc>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ec32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d148      	bne.n	800eccc <dir_register+0x184>
 800ec3a:	6a3b      	ldr	r3, [r7, #32]
 800ec3c:	3b01      	subs	r3, #1
 800ec3e:	623b      	str	r3, [r7, #32]
 800ec40:	6a3b      	ldr	r3, [r7, #32]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d042      	beq.n	800eccc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	695a      	ldr	r2, [r3, #20]
 800ec4a:	6a3b      	ldr	r3, [r7, #32]
 800ec4c:	015b      	lsls	r3, r3, #5
 800ec4e:	1ad3      	subs	r3, r2, r3
 800ec50:	4619      	mov	r1, r3
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f7ff fa40 	bl	800e0d8 <dir_sdi>
 800ec58:	4603      	mov	r3, r0
 800ec5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ec5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d132      	bne.n	800eccc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	3324      	adds	r3, #36	; 0x24
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f7ff fde4 	bl	800e838 <sum_sfn>
 800ec70:	4603      	mov	r3, r0
 800ec72:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	69db      	ldr	r3, [r3, #28]
 800ec78:	4619      	mov	r1, r3
 800ec7a:	69f8      	ldr	r0, [r7, #28]
 800ec7c:	f7fe fe4a 	bl	800d914 <move_window>
 800ec80:	4603      	mov	r3, r0
 800ec82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800ec86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d11d      	bne.n	800ecca <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ec8e:	69fb      	ldr	r3, [r7, #28]
 800ec90:	6918      	ldr	r0, [r3, #16]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6a19      	ldr	r1, [r3, #32]
 800ec96:	6a3b      	ldr	r3, [r7, #32]
 800ec98:	b2da      	uxtb	r2, r3
 800ec9a:	7efb      	ldrb	r3, [r7, #27]
 800ec9c:	f7ff fcd6 	bl	800e64c <put_lfn>
				fs->wflag = 1;
 800eca0:	69fb      	ldr	r3, [r7, #28]
 800eca2:	2201      	movs	r2, #1
 800eca4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800eca6:	2100      	movs	r1, #0
 800eca8:	6878      	ldr	r0, [r7, #4]
 800ecaa:	f7ff fa9e 	bl	800e1ea <dir_next>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800ecb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d107      	bne.n	800eccc <dir_register+0x184>
 800ecbc:	6a3b      	ldr	r3, [r7, #32]
 800ecbe:	3b01      	subs	r3, #1
 800ecc0:	623b      	str	r3, [r7, #32]
 800ecc2:	6a3b      	ldr	r3, [r7, #32]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d1d5      	bne.n	800ec74 <dir_register+0x12c>
 800ecc8:	e000      	b.n	800eccc <dir_register+0x184>
				if (res != FR_OK) break;
 800ecca:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800eccc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d128      	bne.n	800ed26 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	69db      	ldr	r3, [r3, #28]
 800ecd8:	4619      	mov	r1, r3
 800ecda:	69f8      	ldr	r0, [r7, #28]
 800ecdc:	f7fe fe1a 	bl	800d914 <move_window>
 800ece0:	4603      	mov	r3, r0
 800ece2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ece6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d11b      	bne.n	800ed26 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	6a1b      	ldr	r3, [r3, #32]
 800ecf2:	2220      	movs	r2, #32
 800ecf4:	2100      	movs	r1, #0
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f7fe fbff 	bl	800d4fa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	6a18      	ldr	r0, [r3, #32]
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	3324      	adds	r3, #36	; 0x24
 800ed04:	220b      	movs	r2, #11
 800ed06:	4619      	mov	r1, r3
 800ed08:	f7fe fbd6 	bl	800d4b8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6a1b      	ldr	r3, [r3, #32]
 800ed16:	330c      	adds	r3, #12
 800ed18:	f002 0218 	and.w	r2, r2, #24
 800ed1c:	b2d2      	uxtb	r2, r2
 800ed1e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ed20:	69fb      	ldr	r3, [r7, #28]
 800ed22:	2201      	movs	r2, #1
 800ed24:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ed26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	3730      	adds	r7, #48	; 0x30
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}
 800ed32:	bf00      	nop
 800ed34:	4ec4ec4f 	.word	0x4ec4ec4f

0800ed38 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b088      	sub	sp, #32
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
 800ed40:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	69db      	ldr	r3, [r3, #28]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	f000 80c9 	beq.w	800eeea <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed60:	d032      	beq.n	800edc8 <get_fileinfo+0x90>
			i = j = 0;
 800ed62:	2300      	movs	r3, #0
 800ed64:	61bb      	str	r3, [r7, #24]
 800ed66:	69bb      	ldr	r3, [r7, #24]
 800ed68:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ed6a:	e01b      	b.n	800eda4 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800ed6c:	89fb      	ldrh	r3, [r7, #14]
 800ed6e:	2100      	movs	r1, #0
 800ed70:	4618      	mov	r0, r3
 800ed72:	f001 feeb 	bl	8010b4c <ff_convert>
 800ed76:	4603      	mov	r3, r0
 800ed78:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800ed7a:	89fb      	ldrh	r3, [r7, #14]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d102      	bne.n	800ed86 <get_fileinfo+0x4e>
 800ed80:	2300      	movs	r3, #0
 800ed82:	61fb      	str	r3, [r7, #28]
 800ed84:	e01a      	b.n	800edbc <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800ed86:	69fb      	ldr	r3, [r7, #28]
 800ed88:	2bfe      	cmp	r3, #254	; 0xfe
 800ed8a:	d902      	bls.n	800ed92 <get_fileinfo+0x5a>
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	61fb      	str	r3, [r7, #28]
 800ed90:	e014      	b.n	800edbc <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800ed92:	69fb      	ldr	r3, [r7, #28]
 800ed94:	1c5a      	adds	r2, r3, #1
 800ed96:	61fa      	str	r2, [r7, #28]
 800ed98:	89fa      	ldrh	r2, [r7, #14]
 800ed9a:	b2d1      	uxtb	r1, r2
 800ed9c:	683a      	ldr	r2, [r7, #0]
 800ed9e:	4413      	add	r3, r2
 800eda0:	460a      	mov	r2, r1
 800eda2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	691a      	ldr	r2, [r3, #16]
 800eda8:	69bb      	ldr	r3, [r7, #24]
 800edaa:	1c59      	adds	r1, r3, #1
 800edac:	61b9      	str	r1, [r7, #24]
 800edae:	005b      	lsls	r3, r3, #1
 800edb0:	4413      	add	r3, r2
 800edb2:	881b      	ldrh	r3, [r3, #0]
 800edb4:	81fb      	strh	r3, [r7, #14]
 800edb6:	89fb      	ldrh	r3, [r7, #14]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d1d7      	bne.n	800ed6c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800edbc:	683a      	ldr	r2, [r7, #0]
 800edbe:	69fb      	ldr	r3, [r7, #28]
 800edc0:	4413      	add	r3, r2
 800edc2:	3316      	adds	r3, #22
 800edc4:	2200      	movs	r2, #0
 800edc6:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800edc8:	2300      	movs	r3, #0
 800edca:	61bb      	str	r3, [r7, #24]
 800edcc:	69bb      	ldr	r3, [r7, #24]
 800edce:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800edd0:	683a      	ldr	r2, [r7, #0]
 800edd2:	69fb      	ldr	r3, [r7, #28]
 800edd4:	4413      	add	r3, r2
 800edd6:	3316      	adds	r3, #22
 800edd8:	781b      	ldrb	r3, [r3, #0]
 800edda:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800eddc:	e04c      	b.n	800ee78 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6a1a      	ldr	r2, [r3, #32]
 800ede2:	69fb      	ldr	r3, [r7, #28]
 800ede4:	1c59      	adds	r1, r3, #1
 800ede6:	61f9      	str	r1, [r7, #28]
 800ede8:	4413      	add	r3, r2
 800edea:	781b      	ldrb	r3, [r3, #0]
 800edec:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800edee:	7dfb      	ldrb	r3, [r7, #23]
 800edf0:	2b20      	cmp	r3, #32
 800edf2:	d100      	bne.n	800edf6 <get_fileinfo+0xbe>
 800edf4:	e040      	b.n	800ee78 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800edf6:	7dfb      	ldrb	r3, [r7, #23]
 800edf8:	2b05      	cmp	r3, #5
 800edfa:	d101      	bne.n	800ee00 <get_fileinfo+0xc8>
 800edfc:	23e5      	movs	r3, #229	; 0xe5
 800edfe:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800ee00:	69fb      	ldr	r3, [r7, #28]
 800ee02:	2b09      	cmp	r3, #9
 800ee04:	d10f      	bne.n	800ee26 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800ee06:	89bb      	ldrh	r3, [r7, #12]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d105      	bne.n	800ee18 <get_fileinfo+0xe0>
 800ee0c:	683a      	ldr	r2, [r7, #0]
 800ee0e:	69bb      	ldr	r3, [r7, #24]
 800ee10:	4413      	add	r3, r2
 800ee12:	3316      	adds	r3, #22
 800ee14:	222e      	movs	r2, #46	; 0x2e
 800ee16:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800ee18:	69bb      	ldr	r3, [r7, #24]
 800ee1a:	1c5a      	adds	r2, r3, #1
 800ee1c:	61ba      	str	r2, [r7, #24]
 800ee1e:	683a      	ldr	r2, [r7, #0]
 800ee20:	4413      	add	r3, r2
 800ee22:	222e      	movs	r2, #46	; 0x2e
 800ee24:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800ee26:	683a      	ldr	r2, [r7, #0]
 800ee28:	69bb      	ldr	r3, [r7, #24]
 800ee2a:	4413      	add	r3, r2
 800ee2c:	3309      	adds	r3, #9
 800ee2e:	7dfa      	ldrb	r2, [r7, #23]
 800ee30:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800ee32:	89bb      	ldrh	r3, [r7, #12]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d11c      	bne.n	800ee72 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800ee38:	7dfb      	ldrb	r3, [r7, #23]
 800ee3a:	2b40      	cmp	r3, #64	; 0x40
 800ee3c:	d913      	bls.n	800ee66 <get_fileinfo+0x12e>
 800ee3e:	7dfb      	ldrb	r3, [r7, #23]
 800ee40:	2b5a      	cmp	r3, #90	; 0x5a
 800ee42:	d810      	bhi.n	800ee66 <get_fileinfo+0x12e>
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6a1b      	ldr	r3, [r3, #32]
 800ee48:	330c      	adds	r3, #12
 800ee4a:	781b      	ldrb	r3, [r3, #0]
 800ee4c:	461a      	mov	r2, r3
 800ee4e:	69fb      	ldr	r3, [r7, #28]
 800ee50:	2b08      	cmp	r3, #8
 800ee52:	d901      	bls.n	800ee58 <get_fileinfo+0x120>
 800ee54:	2310      	movs	r3, #16
 800ee56:	e000      	b.n	800ee5a <get_fileinfo+0x122>
 800ee58:	2308      	movs	r3, #8
 800ee5a:	4013      	ands	r3, r2
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d002      	beq.n	800ee66 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800ee60:	7dfb      	ldrb	r3, [r7, #23]
 800ee62:	3320      	adds	r3, #32
 800ee64:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800ee66:	683a      	ldr	r2, [r7, #0]
 800ee68:	69bb      	ldr	r3, [r7, #24]
 800ee6a:	4413      	add	r3, r2
 800ee6c:	3316      	adds	r3, #22
 800ee6e:	7dfa      	ldrb	r2, [r7, #23]
 800ee70:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800ee72:	69bb      	ldr	r3, [r7, #24]
 800ee74:	3301      	adds	r3, #1
 800ee76:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800ee78:	69fb      	ldr	r3, [r7, #28]
 800ee7a:	2b0a      	cmp	r3, #10
 800ee7c:	d9af      	bls.n	800edde <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800ee7e:	89bb      	ldrh	r3, [r7, #12]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d10d      	bne.n	800eea0 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800ee84:	683a      	ldr	r2, [r7, #0]
 800ee86:	69bb      	ldr	r3, [r7, #24]
 800ee88:	4413      	add	r3, r2
 800ee8a:	3316      	adds	r3, #22
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	6a1b      	ldr	r3, [r3, #32]
 800ee94:	330c      	adds	r3, #12
 800ee96:	781b      	ldrb	r3, [r3, #0]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d101      	bne.n	800eea0 <get_fileinfo+0x168>
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800eea0:	683a      	ldr	r2, [r7, #0]
 800eea2:	69bb      	ldr	r3, [r7, #24]
 800eea4:	4413      	add	r3, r2
 800eea6:	3309      	adds	r3, #9
 800eea8:	2200      	movs	r2, #0
 800eeaa:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	6a1b      	ldr	r3, [r3, #32]
 800eeb0:	7ada      	ldrb	r2, [r3, #11]
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6a1b      	ldr	r3, [r3, #32]
 800eeba:	331c      	adds	r3, #28
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7fe fa91 	bl	800d3e4 <ld_dword>
 800eec2:	4602      	mov	r2, r0
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	6a1b      	ldr	r3, [r3, #32]
 800eecc:	3316      	adds	r3, #22
 800eece:	4618      	mov	r0, r3
 800eed0:	f7fe fa88 	bl	800d3e4 <ld_dword>
 800eed4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	b29a      	uxth	r2, r3
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	80da      	strh	r2, [r3, #6]
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	0c1b      	lsrs	r3, r3, #16
 800eee2:	b29a      	uxth	r2, r3
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	809a      	strh	r2, [r3, #4]
 800eee8:	e000      	b.n	800eeec <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800eeea:	bf00      	nop
}
 800eeec:	3720      	adds	r7, #32
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}
	...

0800eef4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b08a      	sub	sp, #40	; 0x28
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	613b      	str	r3, [r7, #16]
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	691b      	ldr	r3, [r3, #16]
 800ef0a:	60fb      	str	r3, [r7, #12]
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	617b      	str	r3, [r7, #20]
 800ef10:	697b      	ldr	r3, [r7, #20]
 800ef12:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ef14:	69bb      	ldr	r3, [r7, #24]
 800ef16:	1c5a      	adds	r2, r3, #1
 800ef18:	61ba      	str	r2, [r7, #24]
 800ef1a:	693a      	ldr	r2, [r7, #16]
 800ef1c:	4413      	add	r3, r2
 800ef1e:	781b      	ldrb	r3, [r3, #0]
 800ef20:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ef22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef24:	2b1f      	cmp	r3, #31
 800ef26:	d940      	bls.n	800efaa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ef28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef2a:	2b2f      	cmp	r3, #47	; 0x2f
 800ef2c:	d006      	beq.n	800ef3c <create_name+0x48>
 800ef2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef30:	2b5c      	cmp	r3, #92	; 0x5c
 800ef32:	d110      	bne.n	800ef56 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ef34:	e002      	b.n	800ef3c <create_name+0x48>
 800ef36:	69bb      	ldr	r3, [r7, #24]
 800ef38:	3301      	adds	r3, #1
 800ef3a:	61bb      	str	r3, [r7, #24]
 800ef3c:	693a      	ldr	r2, [r7, #16]
 800ef3e:	69bb      	ldr	r3, [r7, #24]
 800ef40:	4413      	add	r3, r2
 800ef42:	781b      	ldrb	r3, [r3, #0]
 800ef44:	2b2f      	cmp	r3, #47	; 0x2f
 800ef46:	d0f6      	beq.n	800ef36 <create_name+0x42>
 800ef48:	693a      	ldr	r2, [r7, #16]
 800ef4a:	69bb      	ldr	r3, [r7, #24]
 800ef4c:	4413      	add	r3, r2
 800ef4e:	781b      	ldrb	r3, [r3, #0]
 800ef50:	2b5c      	cmp	r3, #92	; 0x5c
 800ef52:	d0f0      	beq.n	800ef36 <create_name+0x42>
			break;
 800ef54:	e02a      	b.n	800efac <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	2bfe      	cmp	r3, #254	; 0xfe
 800ef5a:	d901      	bls.n	800ef60 <create_name+0x6c>
 800ef5c:	2306      	movs	r3, #6
 800ef5e:	e17d      	b.n	800f25c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ef60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef62:	b2db      	uxtb	r3, r3
 800ef64:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ef66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef68:	2101      	movs	r1, #1
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f001 fdee 	bl	8010b4c <ff_convert>
 800ef70:	4603      	mov	r3, r0
 800ef72:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ef74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d101      	bne.n	800ef7e <create_name+0x8a>
 800ef7a:	2306      	movs	r3, #6
 800ef7c:	e16e      	b.n	800f25c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ef7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef80:	2b7f      	cmp	r3, #127	; 0x7f
 800ef82:	d809      	bhi.n	800ef98 <create_name+0xa4>
 800ef84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef86:	4619      	mov	r1, r3
 800ef88:	488d      	ldr	r0, [pc, #564]	; (800f1c0 <create_name+0x2cc>)
 800ef8a:	f7fe faf8 	bl	800d57e <chk_chr>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d001      	beq.n	800ef98 <create_name+0xa4>
 800ef94:	2306      	movs	r3, #6
 800ef96:	e161      	b.n	800f25c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	1c5a      	adds	r2, r3, #1
 800ef9c:	617a      	str	r2, [r7, #20]
 800ef9e:	005b      	lsls	r3, r3, #1
 800efa0:	68fa      	ldr	r2, [r7, #12]
 800efa2:	4413      	add	r3, r2
 800efa4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800efa6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800efa8:	e7b4      	b.n	800ef14 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800efaa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800efac:	693a      	ldr	r2, [r7, #16]
 800efae:	69bb      	ldr	r3, [r7, #24]
 800efb0:	441a      	add	r2, r3
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800efb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efb8:	2b1f      	cmp	r3, #31
 800efba:	d801      	bhi.n	800efc0 <create_name+0xcc>
 800efbc:	2304      	movs	r3, #4
 800efbe:	e000      	b.n	800efc2 <create_name+0xce>
 800efc0:	2300      	movs	r3, #0
 800efc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800efc6:	e011      	b.n	800efec <create_name+0xf8>
		w = lfn[di - 1];
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800efce:	3b01      	subs	r3, #1
 800efd0:	005b      	lsls	r3, r3, #1
 800efd2:	68fa      	ldr	r2, [r7, #12]
 800efd4:	4413      	add	r3, r2
 800efd6:	881b      	ldrh	r3, [r3, #0]
 800efd8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800efda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efdc:	2b20      	cmp	r3, #32
 800efde:	d002      	beq.n	800efe6 <create_name+0xf2>
 800efe0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efe2:	2b2e      	cmp	r3, #46	; 0x2e
 800efe4:	d106      	bne.n	800eff4 <create_name+0x100>
		di--;
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	3b01      	subs	r3, #1
 800efea:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d1ea      	bne.n	800efc8 <create_name+0xd4>
 800eff2:	e000      	b.n	800eff6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800eff4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	005b      	lsls	r3, r3, #1
 800effa:	68fa      	ldr	r2, [r7, #12]
 800effc:	4413      	add	r3, r2
 800effe:	2200      	movs	r2, #0
 800f000:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f002:	697b      	ldr	r3, [r7, #20]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d101      	bne.n	800f00c <create_name+0x118>
 800f008:	2306      	movs	r3, #6
 800f00a:	e127      	b.n	800f25c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	3324      	adds	r3, #36	; 0x24
 800f010:	220b      	movs	r2, #11
 800f012:	2120      	movs	r1, #32
 800f014:	4618      	mov	r0, r3
 800f016:	f7fe fa70 	bl	800d4fa <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f01a:	2300      	movs	r3, #0
 800f01c:	61bb      	str	r3, [r7, #24]
 800f01e:	e002      	b.n	800f026 <create_name+0x132>
 800f020:	69bb      	ldr	r3, [r7, #24]
 800f022:	3301      	adds	r3, #1
 800f024:	61bb      	str	r3, [r7, #24]
 800f026:	69bb      	ldr	r3, [r7, #24]
 800f028:	005b      	lsls	r3, r3, #1
 800f02a:	68fa      	ldr	r2, [r7, #12]
 800f02c:	4413      	add	r3, r2
 800f02e:	881b      	ldrh	r3, [r3, #0]
 800f030:	2b20      	cmp	r3, #32
 800f032:	d0f5      	beq.n	800f020 <create_name+0x12c>
 800f034:	69bb      	ldr	r3, [r7, #24]
 800f036:	005b      	lsls	r3, r3, #1
 800f038:	68fa      	ldr	r2, [r7, #12]
 800f03a:	4413      	add	r3, r2
 800f03c:	881b      	ldrh	r3, [r3, #0]
 800f03e:	2b2e      	cmp	r3, #46	; 0x2e
 800f040:	d0ee      	beq.n	800f020 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f042:	69bb      	ldr	r3, [r7, #24]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d009      	beq.n	800f05c <create_name+0x168>
 800f048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f04c:	f043 0303 	orr.w	r3, r3, #3
 800f050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f054:	e002      	b.n	800f05c <create_name+0x168>
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	3b01      	subs	r3, #1
 800f05a:	617b      	str	r3, [r7, #20]
 800f05c:	697b      	ldr	r3, [r7, #20]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d009      	beq.n	800f076 <create_name+0x182>
 800f062:	697b      	ldr	r3, [r7, #20]
 800f064:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f068:	3b01      	subs	r3, #1
 800f06a:	005b      	lsls	r3, r3, #1
 800f06c:	68fa      	ldr	r2, [r7, #12]
 800f06e:	4413      	add	r3, r2
 800f070:	881b      	ldrh	r3, [r3, #0]
 800f072:	2b2e      	cmp	r3, #46	; 0x2e
 800f074:	d1ef      	bne.n	800f056 <create_name+0x162>

	i = b = 0; ni = 8;
 800f076:	2300      	movs	r3, #0
 800f078:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f07c:	2300      	movs	r3, #0
 800f07e:	623b      	str	r3, [r7, #32]
 800f080:	2308      	movs	r3, #8
 800f082:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f084:	69bb      	ldr	r3, [r7, #24]
 800f086:	1c5a      	adds	r2, r3, #1
 800f088:	61ba      	str	r2, [r7, #24]
 800f08a:	005b      	lsls	r3, r3, #1
 800f08c:	68fa      	ldr	r2, [r7, #12]
 800f08e:	4413      	add	r3, r2
 800f090:	881b      	ldrh	r3, [r3, #0]
 800f092:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f096:	2b00      	cmp	r3, #0
 800f098:	f000 8090 	beq.w	800f1bc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f09c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f09e:	2b20      	cmp	r3, #32
 800f0a0:	d006      	beq.n	800f0b0 <create_name+0x1bc>
 800f0a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0a4:	2b2e      	cmp	r3, #46	; 0x2e
 800f0a6:	d10a      	bne.n	800f0be <create_name+0x1ca>
 800f0a8:	69ba      	ldr	r2, [r7, #24]
 800f0aa:	697b      	ldr	r3, [r7, #20]
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	d006      	beq.n	800f0be <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800f0b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0b4:	f043 0303 	orr.w	r3, r3, #3
 800f0b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f0bc:	e07d      	b.n	800f1ba <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f0be:	6a3a      	ldr	r2, [r7, #32]
 800f0c0:	69fb      	ldr	r3, [r7, #28]
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d203      	bcs.n	800f0ce <create_name+0x1da>
 800f0c6:	69ba      	ldr	r2, [r7, #24]
 800f0c8:	697b      	ldr	r3, [r7, #20]
 800f0ca:	429a      	cmp	r2, r3
 800f0cc:	d123      	bne.n	800f116 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800f0ce:	69fb      	ldr	r3, [r7, #28]
 800f0d0:	2b0b      	cmp	r3, #11
 800f0d2:	d106      	bne.n	800f0e2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f0d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0d8:	f043 0303 	orr.w	r3, r3, #3
 800f0dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f0e0:	e075      	b.n	800f1ce <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f0e2:	69ba      	ldr	r2, [r7, #24]
 800f0e4:	697b      	ldr	r3, [r7, #20]
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d005      	beq.n	800f0f6 <create_name+0x202>
 800f0ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0ee:	f043 0303 	orr.w	r3, r3, #3
 800f0f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f0f6:	69ba      	ldr	r2, [r7, #24]
 800f0f8:	697b      	ldr	r3, [r7, #20]
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d866      	bhi.n	800f1cc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f0fe:	697b      	ldr	r3, [r7, #20]
 800f100:	61bb      	str	r3, [r7, #24]
 800f102:	2308      	movs	r3, #8
 800f104:	623b      	str	r3, [r7, #32]
 800f106:	230b      	movs	r3, #11
 800f108:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f10a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f10e:	009b      	lsls	r3, r3, #2
 800f110:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f114:	e051      	b.n	800f1ba <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f116:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f118:	2b7f      	cmp	r3, #127	; 0x7f
 800f11a:	d914      	bls.n	800f146 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f11c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f11e:	2100      	movs	r1, #0
 800f120:	4618      	mov	r0, r3
 800f122:	f001 fd13 	bl	8010b4c <ff_convert>
 800f126:	4603      	mov	r3, r0
 800f128:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f12a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d004      	beq.n	800f13a <create_name+0x246>
 800f130:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f132:	3b80      	subs	r3, #128	; 0x80
 800f134:	4a23      	ldr	r2, [pc, #140]	; (800f1c4 <create_name+0x2d0>)
 800f136:	5cd3      	ldrb	r3, [r2, r3]
 800f138:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f13a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f13e:	f043 0302 	orr.w	r3, r3, #2
 800f142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f146:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d007      	beq.n	800f15c <create_name+0x268>
 800f14c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f14e:	4619      	mov	r1, r3
 800f150:	481d      	ldr	r0, [pc, #116]	; (800f1c8 <create_name+0x2d4>)
 800f152:	f7fe fa14 	bl	800d57e <chk_chr>
 800f156:	4603      	mov	r3, r0
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d008      	beq.n	800f16e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f15c:	235f      	movs	r3, #95	; 0x5f
 800f15e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f160:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f164:	f043 0303 	orr.w	r3, r3, #3
 800f168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f16c:	e01b      	b.n	800f1a6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f16e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f170:	2b40      	cmp	r3, #64	; 0x40
 800f172:	d909      	bls.n	800f188 <create_name+0x294>
 800f174:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f176:	2b5a      	cmp	r3, #90	; 0x5a
 800f178:	d806      	bhi.n	800f188 <create_name+0x294>
					b |= 2;
 800f17a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f17e:	f043 0302 	orr.w	r3, r3, #2
 800f182:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f186:	e00e      	b.n	800f1a6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f188:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f18a:	2b60      	cmp	r3, #96	; 0x60
 800f18c:	d90b      	bls.n	800f1a6 <create_name+0x2b2>
 800f18e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f190:	2b7a      	cmp	r3, #122	; 0x7a
 800f192:	d808      	bhi.n	800f1a6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f194:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f198:	f043 0301 	orr.w	r3, r3, #1
 800f19c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f1a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1a2:	3b20      	subs	r3, #32
 800f1a4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f1a6:	6a3b      	ldr	r3, [r7, #32]
 800f1a8:	1c5a      	adds	r2, r3, #1
 800f1aa:	623a      	str	r2, [r7, #32]
 800f1ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f1ae:	b2d1      	uxtb	r1, r2
 800f1b0:	687a      	ldr	r2, [r7, #4]
 800f1b2:	4413      	add	r3, r2
 800f1b4:	460a      	mov	r2, r1
 800f1b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800f1ba:	e763      	b.n	800f084 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f1bc:	bf00      	nop
 800f1be:	e006      	b.n	800f1ce <create_name+0x2da>
 800f1c0:	08011d88 	.word	0x08011d88
 800f1c4:	08011df0 	.word	0x08011df0
 800f1c8:	08011d94 	.word	0x08011d94
			if (si > di) break;			/* No extension */
 800f1cc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f1d4:	2be5      	cmp	r3, #229	; 0xe5
 800f1d6:	d103      	bne.n	800f1e0 <create_name+0x2ec>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2205      	movs	r2, #5
 800f1dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800f1e0:	69fb      	ldr	r3, [r7, #28]
 800f1e2:	2b08      	cmp	r3, #8
 800f1e4:	d104      	bne.n	800f1f0 <create_name+0x2fc>
 800f1e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f1ea:	009b      	lsls	r3, r3, #2
 800f1ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f1f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f1f4:	f003 030c 	and.w	r3, r3, #12
 800f1f8:	2b0c      	cmp	r3, #12
 800f1fa:	d005      	beq.n	800f208 <create_name+0x314>
 800f1fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f200:	f003 0303 	and.w	r3, r3, #3
 800f204:	2b03      	cmp	r3, #3
 800f206:	d105      	bne.n	800f214 <create_name+0x320>
 800f208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f20c:	f043 0302 	orr.w	r3, r3, #2
 800f210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f218:	f003 0302 	and.w	r3, r3, #2
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d117      	bne.n	800f250 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f220:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f224:	f003 0303 	and.w	r3, r3, #3
 800f228:	2b01      	cmp	r3, #1
 800f22a:	d105      	bne.n	800f238 <create_name+0x344>
 800f22c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f230:	f043 0310 	orr.w	r3, r3, #16
 800f234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f238:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f23c:	f003 030c 	and.w	r3, r3, #12
 800f240:	2b04      	cmp	r3, #4
 800f242:	d105      	bne.n	800f250 <create_name+0x35c>
 800f244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f248:	f043 0308 	orr.w	r3, r3, #8
 800f24c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f256:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800f25a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3728      	adds	r7, #40	; 0x28
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}

0800f264 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b086      	sub	sp, #24
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
 800f26c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f272:	693b      	ldr	r3, [r7, #16]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f278:	e002      	b.n	800f280 <follow_path+0x1c>
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	3301      	adds	r3, #1
 800f27e:	603b      	str	r3, [r7, #0]
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	2b2f      	cmp	r3, #47	; 0x2f
 800f286:	d0f8      	beq.n	800f27a <follow_path+0x16>
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	781b      	ldrb	r3, [r3, #0]
 800f28c:	2b5c      	cmp	r3, #92	; 0x5c
 800f28e:	d0f4      	beq.n	800f27a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f290:	693b      	ldr	r3, [r7, #16]
 800f292:	2200      	movs	r2, #0
 800f294:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	2b1f      	cmp	r3, #31
 800f29c:	d80a      	bhi.n	800f2b4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2280      	movs	r2, #128	; 0x80
 800f2a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f2a6:	2100      	movs	r1, #0
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f7fe ff15 	bl	800e0d8 <dir_sdi>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	75fb      	strb	r3, [r7, #23]
 800f2b2:	e048      	b.n	800f346 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f2b4:	463b      	mov	r3, r7
 800f2b6:	4619      	mov	r1, r3
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f7ff fe1b 	bl	800eef4 <create_name>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f2c2:	7dfb      	ldrb	r3, [r7, #23]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d139      	bne.n	800f33c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f7ff fb7d 	bl	800e9c8 <dir_find>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f2d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f2da:	7dfb      	ldrb	r3, [r7, #23]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d00a      	beq.n	800f2f6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f2e0:	7dfb      	ldrb	r3, [r7, #23]
 800f2e2:	2b04      	cmp	r3, #4
 800f2e4:	d12c      	bne.n	800f340 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f2e6:	7afb      	ldrb	r3, [r7, #11]
 800f2e8:	f003 0304 	and.w	r3, r3, #4
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d127      	bne.n	800f340 <follow_path+0xdc>
 800f2f0:	2305      	movs	r3, #5
 800f2f2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f2f4:	e024      	b.n	800f340 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f2f6:	7afb      	ldrb	r3, [r7, #11]
 800f2f8:	f003 0304 	and.w	r3, r3, #4
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d121      	bne.n	800f344 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f300:	693b      	ldr	r3, [r7, #16]
 800f302:	799b      	ldrb	r3, [r3, #6]
 800f304:	f003 0310 	and.w	r3, r3, #16
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d102      	bne.n	800f312 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f30c:	2305      	movs	r3, #5
 800f30e:	75fb      	strb	r3, [r7, #23]
 800f310:	e019      	b.n	800f346 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	695b      	ldr	r3, [r3, #20]
 800f31c:	68fa      	ldr	r2, [r7, #12]
 800f31e:	8992      	ldrh	r2, [r2, #12]
 800f320:	fbb3 f0f2 	udiv	r0, r3, r2
 800f324:	fb00 f202 	mul.w	r2, r0, r2
 800f328:	1a9b      	subs	r3, r3, r2
 800f32a:	440b      	add	r3, r1
 800f32c:	4619      	mov	r1, r3
 800f32e:	68f8      	ldr	r0, [r7, #12]
 800f330:	f7ff f878 	bl	800e424 <ld_clust>
 800f334:	4602      	mov	r2, r0
 800f336:	693b      	ldr	r3, [r7, #16]
 800f338:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f33a:	e7bb      	b.n	800f2b4 <follow_path+0x50>
			if (res != FR_OK) break;
 800f33c:	bf00      	nop
 800f33e:	e002      	b.n	800f346 <follow_path+0xe2>
				break;
 800f340:	bf00      	nop
 800f342:	e000      	b.n	800f346 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f344:	bf00      	nop
			}
		}
	}

	return res;
 800f346:	7dfb      	ldrb	r3, [r7, #23]
}
 800f348:	4618      	mov	r0, r3
 800f34a:	3718      	adds	r7, #24
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}

0800f350 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f350:	b480      	push	{r7}
 800f352:	b087      	sub	sp, #28
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f35c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d031      	beq.n	800f3ca <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	617b      	str	r3, [r7, #20]
 800f36c:	e002      	b.n	800f374 <get_ldnumber+0x24>
 800f36e:	697b      	ldr	r3, [r7, #20]
 800f370:	3301      	adds	r3, #1
 800f372:	617b      	str	r3, [r7, #20]
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	781b      	ldrb	r3, [r3, #0]
 800f378:	2b1f      	cmp	r3, #31
 800f37a:	d903      	bls.n	800f384 <get_ldnumber+0x34>
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	781b      	ldrb	r3, [r3, #0]
 800f380:	2b3a      	cmp	r3, #58	; 0x3a
 800f382:	d1f4      	bne.n	800f36e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f384:	697b      	ldr	r3, [r7, #20]
 800f386:	781b      	ldrb	r3, [r3, #0]
 800f388:	2b3a      	cmp	r3, #58	; 0x3a
 800f38a:	d11c      	bne.n	800f3c6 <get_ldnumber+0x76>
			tp = *path;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	1c5a      	adds	r2, r3, #1
 800f396:	60fa      	str	r2, [r7, #12]
 800f398:	781b      	ldrb	r3, [r3, #0]
 800f39a:	3b30      	subs	r3, #48	; 0x30
 800f39c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f39e:	68bb      	ldr	r3, [r7, #8]
 800f3a0:	2b09      	cmp	r3, #9
 800f3a2:	d80e      	bhi.n	800f3c2 <get_ldnumber+0x72>
 800f3a4:	68fa      	ldr	r2, [r7, #12]
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	429a      	cmp	r2, r3
 800f3aa:	d10a      	bne.n	800f3c2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d107      	bne.n	800f3c2 <get_ldnumber+0x72>
					vol = (int)i;
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	3301      	adds	r3, #1
 800f3ba:	617b      	str	r3, [r7, #20]
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	697a      	ldr	r2, [r7, #20]
 800f3c0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f3c2:	693b      	ldr	r3, [r7, #16]
 800f3c4:	e002      	b.n	800f3cc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f3ca:	693b      	ldr	r3, [r7, #16]
}
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	371c      	adds	r7, #28
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d6:	4770      	bx	lr

0800f3d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b082      	sub	sp, #8
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
 800f3e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	70da      	strb	r2, [r3, #3]
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f3ee:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f3f0:	6839      	ldr	r1, [r7, #0]
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f7fe fa8e 	bl	800d914 <move_window>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d001      	beq.n	800f402 <check_fs+0x2a>
 800f3fe:	2304      	movs	r3, #4
 800f400:	e038      	b.n	800f474 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	3338      	adds	r3, #56	; 0x38
 800f406:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f40a:	4618      	mov	r0, r3
 800f40c:	f7fd ffd2 	bl	800d3b4 <ld_word>
 800f410:	4603      	mov	r3, r0
 800f412:	461a      	mov	r2, r3
 800f414:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f418:	429a      	cmp	r2, r3
 800f41a:	d001      	beq.n	800f420 <check_fs+0x48>
 800f41c:	2303      	movs	r3, #3
 800f41e:	e029      	b.n	800f474 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f426:	2be9      	cmp	r3, #233	; 0xe9
 800f428:	d009      	beq.n	800f43e <check_fs+0x66>
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f430:	2beb      	cmp	r3, #235	; 0xeb
 800f432:	d11e      	bne.n	800f472 <check_fs+0x9a>
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f43a:	2b90      	cmp	r3, #144	; 0x90
 800f43c:	d119      	bne.n	800f472 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	3338      	adds	r3, #56	; 0x38
 800f442:	3336      	adds	r3, #54	; 0x36
 800f444:	4618      	mov	r0, r3
 800f446:	f7fd ffcd 	bl	800d3e4 <ld_dword>
 800f44a:	4603      	mov	r3, r0
 800f44c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f450:	4a0a      	ldr	r2, [pc, #40]	; (800f47c <check_fs+0xa4>)
 800f452:	4293      	cmp	r3, r2
 800f454:	d101      	bne.n	800f45a <check_fs+0x82>
 800f456:	2300      	movs	r3, #0
 800f458:	e00c      	b.n	800f474 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	3338      	adds	r3, #56	; 0x38
 800f45e:	3352      	adds	r3, #82	; 0x52
 800f460:	4618      	mov	r0, r3
 800f462:	f7fd ffbf 	bl	800d3e4 <ld_dword>
 800f466:	4603      	mov	r3, r0
 800f468:	4a05      	ldr	r2, [pc, #20]	; (800f480 <check_fs+0xa8>)
 800f46a:	4293      	cmp	r3, r2
 800f46c:	d101      	bne.n	800f472 <check_fs+0x9a>
 800f46e:	2300      	movs	r3, #0
 800f470:	e000      	b.n	800f474 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f472:	2302      	movs	r3, #2
}
 800f474:	4618      	mov	r0, r3
 800f476:	3708      	adds	r7, #8
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}
 800f47c:	00544146 	.word	0x00544146
 800f480:	33544146 	.word	0x33544146

0800f484 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b096      	sub	sp, #88	; 0x58
 800f488:	af00      	add	r7, sp, #0
 800f48a:	60f8      	str	r0, [r7, #12]
 800f48c:	60b9      	str	r1, [r7, #8]
 800f48e:	4613      	mov	r3, r2
 800f490:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	2200      	movs	r2, #0
 800f496:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f498:	68f8      	ldr	r0, [r7, #12]
 800f49a:	f7ff ff59 	bl	800f350 <get_ldnumber>
 800f49e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f4a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	da01      	bge.n	800f4aa <find_volume+0x26>
 800f4a6:	230b      	movs	r3, #11
 800f4a8:	e265      	b.n	800f976 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f4aa:	4a9f      	ldr	r2, [pc, #636]	; (800f728 <find_volume+0x2a4>)
 800f4ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4b2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d101      	bne.n	800f4be <find_volume+0x3a>
 800f4ba:	230c      	movs	r3, #12
 800f4bc:	e25b      	b.n	800f976 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f4c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f4c4:	79fb      	ldrb	r3, [r7, #7]
 800f4c6:	f023 0301 	bic.w	r3, r3, #1
 800f4ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ce:	781b      	ldrb	r3, [r3, #0]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d01a      	beq.n	800f50a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d6:	785b      	ldrb	r3, [r3, #1]
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f7fd fecd 	bl	800d278 <disk_status>
 800f4de:	4603      	mov	r3, r0
 800f4e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f4e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f4e8:	f003 0301 	and.w	r3, r3, #1
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d10c      	bne.n	800f50a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f4f0:	79fb      	ldrb	r3, [r7, #7]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d007      	beq.n	800f506 <find_volume+0x82>
 800f4f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f4fa:	f003 0304 	and.w	r3, r3, #4
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d001      	beq.n	800f506 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f502:	230a      	movs	r3, #10
 800f504:	e237      	b.n	800f976 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800f506:	2300      	movs	r3, #0
 800f508:	e235      	b.n	800f976 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f50c:	2200      	movs	r2, #0
 800f50e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f512:	b2da      	uxtb	r2, r3
 800f514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f516:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f51a:	785b      	ldrb	r3, [r3, #1]
 800f51c:	4618      	mov	r0, r3
 800f51e:	f7fd fec5 	bl	800d2ac <disk_initialize>
 800f522:	4603      	mov	r3, r0
 800f524:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f528:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f52c:	f003 0301 	and.w	r3, r3, #1
 800f530:	2b00      	cmp	r3, #0
 800f532:	d001      	beq.n	800f538 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f534:	2303      	movs	r3, #3
 800f536:	e21e      	b.n	800f976 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f538:	79fb      	ldrb	r3, [r7, #7]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d007      	beq.n	800f54e <find_volume+0xca>
 800f53e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f542:	f003 0304 	and.w	r3, r3, #4
 800f546:	2b00      	cmp	r3, #0
 800f548:	d001      	beq.n	800f54e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f54a:	230a      	movs	r3, #10
 800f54c:	e213      	b.n	800f976 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f550:	7858      	ldrb	r0, [r3, #1]
 800f552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f554:	330c      	adds	r3, #12
 800f556:	461a      	mov	r2, r3
 800f558:	2102      	movs	r1, #2
 800f55a:	f7fd ff0d 	bl	800d378 <disk_ioctl>
 800f55e:	4603      	mov	r3, r0
 800f560:	2b00      	cmp	r3, #0
 800f562:	d001      	beq.n	800f568 <find_volume+0xe4>
 800f564:	2301      	movs	r3, #1
 800f566:	e206      	b.n	800f976 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f56a:	899b      	ldrh	r3, [r3, #12]
 800f56c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f570:	d80d      	bhi.n	800f58e <find_volume+0x10a>
 800f572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f574:	899b      	ldrh	r3, [r3, #12]
 800f576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f57a:	d308      	bcc.n	800f58e <find_volume+0x10a>
 800f57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f57e:	899b      	ldrh	r3, [r3, #12]
 800f580:	461a      	mov	r2, r3
 800f582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f584:	899b      	ldrh	r3, [r3, #12]
 800f586:	3b01      	subs	r3, #1
 800f588:	4013      	ands	r3, r2
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d001      	beq.n	800f592 <find_volume+0x10e>
 800f58e:	2301      	movs	r3, #1
 800f590:	e1f1      	b.n	800f976 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f592:	2300      	movs	r3, #0
 800f594:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f596:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f598:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f59a:	f7ff ff1d 	bl	800f3d8 <check_fs>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f5a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f5a8:	2b02      	cmp	r3, #2
 800f5aa:	d149      	bne.n	800f640 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	643b      	str	r3, [r7, #64]	; 0x40
 800f5b0:	e01e      	b.n	800f5f0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f5b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5ba:	011b      	lsls	r3, r3, #4
 800f5bc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f5c0:	4413      	add	r3, r2
 800f5c2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c6:	3304      	adds	r3, #4
 800f5c8:	781b      	ldrb	r3, [r3, #0]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d006      	beq.n	800f5dc <find_volume+0x158>
 800f5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d0:	3308      	adds	r3, #8
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f7fd ff06 	bl	800d3e4 <ld_dword>
 800f5d8:	4602      	mov	r2, r0
 800f5da:	e000      	b.n	800f5de <find_volume+0x15a>
 800f5dc:	2200      	movs	r2, #0
 800f5de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5e0:	009b      	lsls	r3, r3, #2
 800f5e2:	3358      	adds	r3, #88	; 0x58
 800f5e4:	443b      	add	r3, r7
 800f5e6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f5ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5ec:	3301      	adds	r3, #1
 800f5ee:	643b      	str	r3, [r7, #64]	; 0x40
 800f5f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5f2:	2b03      	cmp	r3, #3
 800f5f4:	d9dd      	bls.n	800f5b2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f5fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d002      	beq.n	800f606 <find_volume+0x182>
 800f600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f602:	3b01      	subs	r3, #1
 800f604:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f608:	009b      	lsls	r3, r3, #2
 800f60a:	3358      	adds	r3, #88	; 0x58
 800f60c:	443b      	add	r3, r7
 800f60e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f612:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f616:	2b00      	cmp	r3, #0
 800f618:	d005      	beq.n	800f626 <find_volume+0x1a2>
 800f61a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f61c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f61e:	f7ff fedb 	bl	800f3d8 <check_fs>
 800f622:	4603      	mov	r3, r0
 800f624:	e000      	b.n	800f628 <find_volume+0x1a4>
 800f626:	2303      	movs	r3, #3
 800f628:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f62c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f630:	2b01      	cmp	r3, #1
 800f632:	d905      	bls.n	800f640 <find_volume+0x1bc>
 800f634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f636:	3301      	adds	r3, #1
 800f638:	643b      	str	r3, [r7, #64]	; 0x40
 800f63a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f63c:	2b03      	cmp	r3, #3
 800f63e:	d9e2      	bls.n	800f606 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f640:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f644:	2b04      	cmp	r3, #4
 800f646:	d101      	bne.n	800f64c <find_volume+0x1c8>
 800f648:	2301      	movs	r3, #1
 800f64a:	e194      	b.n	800f976 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f64c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f650:	2b01      	cmp	r3, #1
 800f652:	d901      	bls.n	800f658 <find_volume+0x1d4>
 800f654:	230d      	movs	r3, #13
 800f656:	e18e      	b.n	800f976 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f65a:	3338      	adds	r3, #56	; 0x38
 800f65c:	330b      	adds	r3, #11
 800f65e:	4618      	mov	r0, r3
 800f660:	f7fd fea8 	bl	800d3b4 <ld_word>
 800f664:	4603      	mov	r3, r0
 800f666:	461a      	mov	r2, r3
 800f668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f66a:	899b      	ldrh	r3, [r3, #12]
 800f66c:	429a      	cmp	r2, r3
 800f66e:	d001      	beq.n	800f674 <find_volume+0x1f0>
 800f670:	230d      	movs	r3, #13
 800f672:	e180      	b.n	800f976 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f676:	3338      	adds	r3, #56	; 0x38
 800f678:	3316      	adds	r3, #22
 800f67a:	4618      	mov	r0, r3
 800f67c:	f7fd fe9a 	bl	800d3b4 <ld_word>
 800f680:	4603      	mov	r3, r0
 800f682:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f686:	2b00      	cmp	r3, #0
 800f688:	d106      	bne.n	800f698 <find_volume+0x214>
 800f68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f68c:	3338      	adds	r3, #56	; 0x38
 800f68e:	3324      	adds	r3, #36	; 0x24
 800f690:	4618      	mov	r0, r3
 800f692:	f7fd fea7 	bl	800d3e4 <ld_dword>
 800f696:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f69a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f69c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6a0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6a6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6aa:	789b      	ldrb	r3, [r3, #2]
 800f6ac:	2b01      	cmp	r3, #1
 800f6ae:	d005      	beq.n	800f6bc <find_volume+0x238>
 800f6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b2:	789b      	ldrb	r3, [r3, #2]
 800f6b4:	2b02      	cmp	r3, #2
 800f6b6:	d001      	beq.n	800f6bc <find_volume+0x238>
 800f6b8:	230d      	movs	r3, #13
 800f6ba:	e15c      	b.n	800f976 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6be:	789b      	ldrb	r3, [r3, #2]
 800f6c0:	461a      	mov	r2, r3
 800f6c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6c4:	fb02 f303 	mul.w	r3, r2, r3
 800f6c8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f6d0:	b29a      	uxth	r2, r3
 800f6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6d4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6d8:	895b      	ldrh	r3, [r3, #10]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d008      	beq.n	800f6f0 <find_volume+0x26c>
 800f6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e0:	895b      	ldrh	r3, [r3, #10]
 800f6e2:	461a      	mov	r2, r3
 800f6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e6:	895b      	ldrh	r3, [r3, #10]
 800f6e8:	3b01      	subs	r3, #1
 800f6ea:	4013      	ands	r3, r2
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d001      	beq.n	800f6f4 <find_volume+0x270>
 800f6f0:	230d      	movs	r3, #13
 800f6f2:	e140      	b.n	800f976 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6f6:	3338      	adds	r3, #56	; 0x38
 800f6f8:	3311      	adds	r3, #17
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f7fd fe5a 	bl	800d3b4 <ld_word>
 800f700:	4603      	mov	r3, r0
 800f702:	461a      	mov	r2, r3
 800f704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f706:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f70a:	891b      	ldrh	r3, [r3, #8]
 800f70c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f70e:	8992      	ldrh	r2, [r2, #12]
 800f710:	0952      	lsrs	r2, r2, #5
 800f712:	b292      	uxth	r2, r2
 800f714:	fbb3 f1f2 	udiv	r1, r3, r2
 800f718:	fb01 f202 	mul.w	r2, r1, r2
 800f71c:	1a9b      	subs	r3, r3, r2
 800f71e:	b29b      	uxth	r3, r3
 800f720:	2b00      	cmp	r3, #0
 800f722:	d003      	beq.n	800f72c <find_volume+0x2a8>
 800f724:	230d      	movs	r3, #13
 800f726:	e126      	b.n	800f976 <find_volume+0x4f2>
 800f728:	20002cd4 	.word	0x20002cd4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f72e:	3338      	adds	r3, #56	; 0x38
 800f730:	3313      	adds	r3, #19
 800f732:	4618      	mov	r0, r3
 800f734:	f7fd fe3e 	bl	800d3b4 <ld_word>
 800f738:	4603      	mov	r3, r0
 800f73a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f73c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d106      	bne.n	800f750 <find_volume+0x2cc>
 800f742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f744:	3338      	adds	r3, #56	; 0x38
 800f746:	3320      	adds	r3, #32
 800f748:	4618      	mov	r0, r3
 800f74a:	f7fd fe4b 	bl	800d3e4 <ld_dword>
 800f74e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f752:	3338      	adds	r3, #56	; 0x38
 800f754:	330e      	adds	r3, #14
 800f756:	4618      	mov	r0, r3
 800f758:	f7fd fe2c 	bl	800d3b4 <ld_word>
 800f75c:	4603      	mov	r3, r0
 800f75e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f760:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f762:	2b00      	cmp	r3, #0
 800f764:	d101      	bne.n	800f76a <find_volume+0x2e6>
 800f766:	230d      	movs	r3, #13
 800f768:	e105      	b.n	800f976 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f76a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f76c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f76e:	4413      	add	r3, r2
 800f770:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f772:	8911      	ldrh	r1, [r2, #8]
 800f774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f776:	8992      	ldrh	r2, [r2, #12]
 800f778:	0952      	lsrs	r2, r2, #5
 800f77a:	b292      	uxth	r2, r2
 800f77c:	fbb1 f2f2 	udiv	r2, r1, r2
 800f780:	b292      	uxth	r2, r2
 800f782:	4413      	add	r3, r2
 800f784:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f786:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d201      	bcs.n	800f792 <find_volume+0x30e>
 800f78e:	230d      	movs	r3, #13
 800f790:	e0f1      	b.n	800f976 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f792:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f796:	1ad3      	subs	r3, r2, r3
 800f798:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f79a:	8952      	ldrh	r2, [r2, #10]
 800f79c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f7a0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d101      	bne.n	800f7ac <find_volume+0x328>
 800f7a8:	230d      	movs	r3, #13
 800f7aa:	e0e4      	b.n	800f976 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800f7ac:	2303      	movs	r3, #3
 800f7ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d802      	bhi.n	800f7c2 <find_volume+0x33e>
 800f7bc:	2302      	movs	r3, #2
 800f7be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7c4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	d802      	bhi.n	800f7d2 <find_volume+0x34e>
 800f7cc:	2301      	movs	r3, #1
 800f7ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7d4:	1c9a      	adds	r2, r3, #2
 800f7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7d8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800f7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f7de:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f7e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f7e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7e4:	441a      	add	r2, r3
 800f7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e8:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800f7ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ee:	441a      	add	r2, r3
 800f7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7f2:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800f7f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f7f8:	2b03      	cmp	r3, #3
 800f7fa:	d11e      	bne.n	800f83a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7fe:	3338      	adds	r3, #56	; 0x38
 800f800:	332a      	adds	r3, #42	; 0x2a
 800f802:	4618      	mov	r0, r3
 800f804:	f7fd fdd6 	bl	800d3b4 <ld_word>
 800f808:	4603      	mov	r3, r0
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d001      	beq.n	800f812 <find_volume+0x38e>
 800f80e:	230d      	movs	r3, #13
 800f810:	e0b1      	b.n	800f976 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f814:	891b      	ldrh	r3, [r3, #8]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d001      	beq.n	800f81e <find_volume+0x39a>
 800f81a:	230d      	movs	r3, #13
 800f81c:	e0ab      	b.n	800f976 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f820:	3338      	adds	r3, #56	; 0x38
 800f822:	332c      	adds	r3, #44	; 0x2c
 800f824:	4618      	mov	r0, r3
 800f826:	f7fd fddd 	bl	800d3e4 <ld_dword>
 800f82a:	4602      	mov	r2, r0
 800f82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f82e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f832:	69db      	ldr	r3, [r3, #28]
 800f834:	009b      	lsls	r3, r3, #2
 800f836:	647b      	str	r3, [r7, #68]	; 0x44
 800f838:	e01f      	b.n	800f87a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f83c:	891b      	ldrh	r3, [r3, #8]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d101      	bne.n	800f846 <find_volume+0x3c2>
 800f842:	230d      	movs	r3, #13
 800f844:	e097      	b.n	800f976 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f84a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f84c:	441a      	add	r2, r3
 800f84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f850:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f852:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f856:	2b02      	cmp	r3, #2
 800f858:	d103      	bne.n	800f862 <find_volume+0x3de>
 800f85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f85c:	69db      	ldr	r3, [r3, #28]
 800f85e:	005b      	lsls	r3, r3, #1
 800f860:	e00a      	b.n	800f878 <find_volume+0x3f4>
 800f862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f864:	69da      	ldr	r2, [r3, #28]
 800f866:	4613      	mov	r3, r2
 800f868:	005b      	lsls	r3, r3, #1
 800f86a:	4413      	add	r3, r2
 800f86c:	085a      	lsrs	r2, r3, #1
 800f86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f870:	69db      	ldr	r3, [r3, #28]
 800f872:	f003 0301 	and.w	r3, r3, #1
 800f876:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f878:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f87c:	6a1a      	ldr	r2, [r3, #32]
 800f87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f880:	899b      	ldrh	r3, [r3, #12]
 800f882:	4619      	mov	r1, r3
 800f884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f886:	440b      	add	r3, r1
 800f888:	3b01      	subs	r3, #1
 800f88a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f88c:	8989      	ldrh	r1, [r1, #12]
 800f88e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f892:	429a      	cmp	r2, r3
 800f894:	d201      	bcs.n	800f89a <find_volume+0x416>
 800f896:	230d      	movs	r3, #13
 800f898:	e06d      	b.n	800f976 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f89c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f8a0:	619a      	str	r2, [r3, #24]
 800f8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a4:	699a      	ldr	r2, [r3, #24]
 800f8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800f8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ac:	2280      	movs	r2, #128	; 0x80
 800f8ae:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f8b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f8b4:	2b03      	cmp	r3, #3
 800f8b6:	d149      	bne.n	800f94c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ba:	3338      	adds	r3, #56	; 0x38
 800f8bc:	3330      	adds	r3, #48	; 0x30
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f7fd fd78 	bl	800d3b4 <ld_word>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	2b01      	cmp	r3, #1
 800f8c8:	d140      	bne.n	800f94c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f8ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8cc:	3301      	adds	r3, #1
 800f8ce:	4619      	mov	r1, r3
 800f8d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f8d2:	f7fe f81f 	bl	800d914 <move_window>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d137      	bne.n	800f94c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800f8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8de:	2200      	movs	r2, #0
 800f8e0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8e4:	3338      	adds	r3, #56	; 0x38
 800f8e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f7fd fd62 	bl	800d3b4 <ld_word>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	d127      	bne.n	800f94c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8fe:	3338      	adds	r3, #56	; 0x38
 800f900:	4618      	mov	r0, r3
 800f902:	f7fd fd6f 	bl	800d3e4 <ld_dword>
 800f906:	4603      	mov	r3, r0
 800f908:	4a1d      	ldr	r2, [pc, #116]	; (800f980 <find_volume+0x4fc>)
 800f90a:	4293      	cmp	r3, r2
 800f90c:	d11e      	bne.n	800f94c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f910:	3338      	adds	r3, #56	; 0x38
 800f912:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f916:	4618      	mov	r0, r3
 800f918:	f7fd fd64 	bl	800d3e4 <ld_dword>
 800f91c:	4603      	mov	r3, r0
 800f91e:	4a19      	ldr	r2, [pc, #100]	; (800f984 <find_volume+0x500>)
 800f920:	4293      	cmp	r3, r2
 800f922:	d113      	bne.n	800f94c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f926:	3338      	adds	r3, #56	; 0x38
 800f928:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f92c:	4618      	mov	r0, r3
 800f92e:	f7fd fd59 	bl	800d3e4 <ld_dword>
 800f932:	4602      	mov	r2, r0
 800f934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f936:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f93a:	3338      	adds	r3, #56	; 0x38
 800f93c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f940:	4618      	mov	r0, r3
 800f942:	f7fd fd4f 	bl	800d3e4 <ld_dword>
 800f946:	4602      	mov	r2, r0
 800f948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f94a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f94e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f952:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f954:	4b0c      	ldr	r3, [pc, #48]	; (800f988 <find_volume+0x504>)
 800f956:	881b      	ldrh	r3, [r3, #0]
 800f958:	3301      	adds	r3, #1
 800f95a:	b29a      	uxth	r2, r3
 800f95c:	4b0a      	ldr	r3, [pc, #40]	; (800f988 <find_volume+0x504>)
 800f95e:	801a      	strh	r2, [r3, #0]
 800f960:	4b09      	ldr	r3, [pc, #36]	; (800f988 <find_volume+0x504>)
 800f962:	881a      	ldrh	r2, [r3, #0]
 800f964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f966:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f96a:	4a08      	ldr	r2, [pc, #32]	; (800f98c <find_volume+0x508>)
 800f96c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f96e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f970:	f7fd ff68 	bl	800d844 <clear_lock>
#endif
	return FR_OK;
 800f974:	2300      	movs	r3, #0
}
 800f976:	4618      	mov	r0, r3
 800f978:	3758      	adds	r7, #88	; 0x58
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}
 800f97e:	bf00      	nop
 800f980:	41615252 	.word	0x41615252
 800f984:	61417272 	.word	0x61417272
 800f988:	20002cd8 	.word	0x20002cd8
 800f98c:	20002cfc 	.word	0x20002cfc

0800f990 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b084      	sub	sp, #16
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
 800f998:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f99a:	2309      	movs	r3, #9
 800f99c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d01c      	beq.n	800f9de <validate+0x4e>
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d018      	beq.n	800f9de <validate+0x4e>
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	781b      	ldrb	r3, [r3, #0]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d013      	beq.n	800f9de <validate+0x4e>
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	889a      	ldrh	r2, [r3, #4]
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	88db      	ldrh	r3, [r3, #6]
 800f9c0:	429a      	cmp	r2, r3
 800f9c2:	d10c      	bne.n	800f9de <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	785b      	ldrb	r3, [r3, #1]
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f7fd fc54 	bl	800d278 <disk_status>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	f003 0301 	and.w	r3, r3, #1
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d101      	bne.n	800f9de <validate+0x4e>
			res = FR_OK;
 800f9da:	2300      	movs	r3, #0
 800f9dc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f9de:	7bfb      	ldrb	r3, [r7, #15]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d102      	bne.n	800f9ea <validate+0x5a>
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	e000      	b.n	800f9ec <validate+0x5c>
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	683a      	ldr	r2, [r7, #0]
 800f9ee:	6013      	str	r3, [r2, #0]
	return res;
 800f9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3710      	adds	r7, #16
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}
	...

0800f9fc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b088      	sub	sp, #32
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	60f8      	str	r0, [r7, #12]
 800fa04:	60b9      	str	r1, [r7, #8]
 800fa06:	4613      	mov	r3, r2
 800fa08:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fa0e:	f107 0310 	add.w	r3, r7, #16
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7ff fc9c 	bl	800f350 <get_ldnumber>
 800fa18:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fa1a:	69fb      	ldr	r3, [r7, #28]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	da01      	bge.n	800fa24 <f_mount+0x28>
 800fa20:	230b      	movs	r3, #11
 800fa22:	e02b      	b.n	800fa7c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fa24:	4a17      	ldr	r2, [pc, #92]	; (800fa84 <f_mount+0x88>)
 800fa26:	69fb      	ldr	r3, [r7, #28]
 800fa28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa2c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fa2e:	69bb      	ldr	r3, [r7, #24]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d005      	beq.n	800fa40 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fa34:	69b8      	ldr	r0, [r7, #24]
 800fa36:	f7fd ff05 	bl	800d844 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fa3a:	69bb      	ldr	r3, [r7, #24]
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d002      	beq.n	800fa4c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	2200      	movs	r2, #0
 800fa4a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fa4c:	68fa      	ldr	r2, [r7, #12]
 800fa4e:	490d      	ldr	r1, [pc, #52]	; (800fa84 <f_mount+0x88>)
 800fa50:	69fb      	ldr	r3, [r7, #28]
 800fa52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d002      	beq.n	800fa62 <f_mount+0x66>
 800fa5c:	79fb      	ldrb	r3, [r7, #7]
 800fa5e:	2b01      	cmp	r3, #1
 800fa60:	d001      	beq.n	800fa66 <f_mount+0x6a>
 800fa62:	2300      	movs	r3, #0
 800fa64:	e00a      	b.n	800fa7c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fa66:	f107 010c 	add.w	r1, r7, #12
 800fa6a:	f107 0308 	add.w	r3, r7, #8
 800fa6e:	2200      	movs	r2, #0
 800fa70:	4618      	mov	r0, r3
 800fa72:	f7ff fd07 	bl	800f484 <find_volume>
 800fa76:	4603      	mov	r3, r0
 800fa78:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fa7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	3720      	adds	r7, #32
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}
 800fa84:	20002cd4 	.word	0x20002cd4

0800fa88 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b09a      	sub	sp, #104	; 0x68
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	60f8      	str	r0, [r7, #12]
 800fa90:	60b9      	str	r1, [r7, #8]
 800fa92:	4613      	mov	r3, r2
 800fa94:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d101      	bne.n	800faa0 <f_open+0x18>
 800fa9c:	2309      	movs	r3, #9
 800fa9e:	e1bb      	b.n	800fe18 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800faa0:	79fb      	ldrb	r3, [r7, #7]
 800faa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800faa6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800faa8:	79fa      	ldrb	r2, [r7, #7]
 800faaa:	f107 0114 	add.w	r1, r7, #20
 800faae:	f107 0308 	add.w	r3, r7, #8
 800fab2:	4618      	mov	r0, r3
 800fab4:	f7ff fce6 	bl	800f484 <find_volume>
 800fab8:	4603      	mov	r3, r0
 800faba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800fabe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	f040 819f 	bne.w	800fe06 <f_open+0x37e>
		dj.obj.fs = fs;
 800fac8:	697b      	ldr	r3, [r7, #20]
 800faca:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800facc:	68ba      	ldr	r2, [r7, #8]
 800face:	f107 0318 	add.w	r3, r7, #24
 800fad2:	4611      	mov	r1, r2
 800fad4:	4618      	mov	r0, r3
 800fad6:	f7ff fbc5 	bl	800f264 <follow_path>
 800fada:	4603      	mov	r3, r0
 800fadc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fae0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d11a      	bne.n	800fb1e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fae8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800faec:	b25b      	sxtb	r3, r3
 800faee:	2b00      	cmp	r3, #0
 800faf0:	da03      	bge.n	800fafa <f_open+0x72>
				res = FR_INVALID_NAME;
 800faf2:	2306      	movs	r3, #6
 800faf4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800faf8:	e011      	b.n	800fb1e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fafa:	79fb      	ldrb	r3, [r7, #7]
 800fafc:	f023 0301 	bic.w	r3, r3, #1
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	bf14      	ite	ne
 800fb04:	2301      	movne	r3, #1
 800fb06:	2300      	moveq	r3, #0
 800fb08:	b2db      	uxtb	r3, r3
 800fb0a:	461a      	mov	r2, r3
 800fb0c:	f107 0318 	add.w	r3, r7, #24
 800fb10:	4611      	mov	r1, r2
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7fd fd4e 	bl	800d5b4 <chk_lock>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fb1e:	79fb      	ldrb	r3, [r7, #7]
 800fb20:	f003 031c 	and.w	r3, r3, #28
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d07f      	beq.n	800fc28 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800fb28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d017      	beq.n	800fb60 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fb30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fb34:	2b04      	cmp	r3, #4
 800fb36:	d10e      	bne.n	800fb56 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fb38:	f7fd fd98 	bl	800d66c <enq_lock>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d006      	beq.n	800fb50 <f_open+0xc8>
 800fb42:	f107 0318 	add.w	r3, r7, #24
 800fb46:	4618      	mov	r0, r3
 800fb48:	f7fe fffe 	bl	800eb48 <dir_register>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	e000      	b.n	800fb52 <f_open+0xca>
 800fb50:	2312      	movs	r3, #18
 800fb52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fb56:	79fb      	ldrb	r3, [r7, #7]
 800fb58:	f043 0308 	orr.w	r3, r3, #8
 800fb5c:	71fb      	strb	r3, [r7, #7]
 800fb5e:	e010      	b.n	800fb82 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fb60:	7fbb      	ldrb	r3, [r7, #30]
 800fb62:	f003 0311 	and.w	r3, r3, #17
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d003      	beq.n	800fb72 <f_open+0xea>
					res = FR_DENIED;
 800fb6a:	2307      	movs	r3, #7
 800fb6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fb70:	e007      	b.n	800fb82 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fb72:	79fb      	ldrb	r3, [r7, #7]
 800fb74:	f003 0304 	and.w	r3, r3, #4
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d002      	beq.n	800fb82 <f_open+0xfa>
 800fb7c:	2308      	movs	r3, #8
 800fb7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fb82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d168      	bne.n	800fc5c <f_open+0x1d4>
 800fb8a:	79fb      	ldrb	r3, [r7, #7]
 800fb8c:	f003 0308 	and.w	r3, r3, #8
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d063      	beq.n	800fc5c <f_open+0x1d4>
				dw = GET_FATTIME();
 800fb94:	f7fb fa84 	bl	800b0a0 <get_fattime>
 800fb98:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb9c:	330e      	adds	r3, #14
 800fb9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fba0:	4618      	mov	r0, r3
 800fba2:	f7fd fc5d 	bl	800d460 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fba8:	3316      	adds	r3, #22
 800fbaa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fbac:	4618      	mov	r0, r3
 800fbae:	f7fd fc57 	bl	800d460 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbb4:	330b      	adds	r3, #11
 800fbb6:	2220      	movs	r2, #32
 800fbb8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fbba:	697b      	ldr	r3, [r7, #20]
 800fbbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fbbe:	4611      	mov	r1, r2
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f7fe fc2f 	bl	800e424 <ld_clust>
 800fbc6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fbcc:	2200      	movs	r2, #0
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f7fe fc47 	bl	800e462 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbd6:	331c      	adds	r3, #28
 800fbd8:	2100      	movs	r1, #0
 800fbda:	4618      	mov	r0, r3
 800fbdc:	f7fd fc40 	bl	800d460 <st_dword>
					fs->wflag = 1;
 800fbe0:	697b      	ldr	r3, [r7, #20]
 800fbe2:	2201      	movs	r2, #1
 800fbe4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fbe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d037      	beq.n	800fc5c <f_open+0x1d4>
						dw = fs->winsect;
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbf0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800fbf2:	f107 0318 	add.w	r3, r7, #24
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	f7fe f937 	bl	800de6e <remove_chain>
 800fc00:	4603      	mov	r3, r0
 800fc02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800fc06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d126      	bne.n	800fc5c <f_open+0x1d4>
							res = move_window(fs, dw);
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fc12:	4618      	mov	r0, r3
 800fc14:	f7fd fe7e 	bl	800d914 <move_window>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fc22:	3a01      	subs	r2, #1
 800fc24:	615a      	str	r2, [r3, #20]
 800fc26:	e019      	b.n	800fc5c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fc28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d115      	bne.n	800fc5c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fc30:	7fbb      	ldrb	r3, [r7, #30]
 800fc32:	f003 0310 	and.w	r3, r3, #16
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d003      	beq.n	800fc42 <f_open+0x1ba>
					res = FR_NO_FILE;
 800fc3a:	2304      	movs	r3, #4
 800fc3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fc40:	e00c      	b.n	800fc5c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fc42:	79fb      	ldrb	r3, [r7, #7]
 800fc44:	f003 0302 	and.w	r3, r3, #2
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d007      	beq.n	800fc5c <f_open+0x1d4>
 800fc4c:	7fbb      	ldrb	r3, [r7, #30]
 800fc4e:	f003 0301 	and.w	r3, r3, #1
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d002      	beq.n	800fc5c <f_open+0x1d4>
						res = FR_DENIED;
 800fc56:	2307      	movs	r3, #7
 800fc58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800fc5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d128      	bne.n	800fcb6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fc64:	79fb      	ldrb	r3, [r7, #7]
 800fc66:	f003 0308 	and.w	r3, r3, #8
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d003      	beq.n	800fc76 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800fc6e:	79fb      	ldrb	r3, [r7, #7]
 800fc70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc74:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800fc7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fc84:	79fb      	ldrb	r3, [r7, #7]
 800fc86:	f023 0301 	bic.w	r3, r3, #1
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	bf14      	ite	ne
 800fc8e:	2301      	movne	r3, #1
 800fc90:	2300      	moveq	r3, #0
 800fc92:	b2db      	uxtb	r3, r3
 800fc94:	461a      	mov	r2, r3
 800fc96:	f107 0318 	add.w	r3, r7, #24
 800fc9a:	4611      	mov	r1, r2
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f7fd fd07 	bl	800d6b0 <inc_lock>
 800fca2:	4602      	mov	r2, r0
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	691b      	ldr	r3, [r3, #16]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d102      	bne.n	800fcb6 <f_open+0x22e>
 800fcb0:	2302      	movs	r3, #2
 800fcb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fcb6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	f040 80a3 	bne.w	800fe06 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fcc4:	4611      	mov	r1, r2
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f7fe fbac 	bl	800e424 <ld_clust>
 800fccc:	4602      	mov	r2, r0
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fcd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcd4:	331c      	adds	r3, #28
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f7fd fb84 	bl	800d3e4 <ld_dword>
 800fcdc:	4602      	mov	r2, r0
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	2200      	movs	r2, #0
 800fce6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fce8:	697a      	ldr	r2, [r7, #20]
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fcee:	697b      	ldr	r3, [r7, #20]
 800fcf0:	88da      	ldrh	r2, [r3, #6]
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	79fa      	ldrb	r2, [r7, #7]
 800fcfa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	2200      	movs	r2, #0
 800fd00:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	2200      	movs	r2, #0
 800fd06:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	3330      	adds	r3, #48	; 0x30
 800fd12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fd16:	2100      	movs	r1, #0
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f7fd fbee 	bl	800d4fa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fd1e:	79fb      	ldrb	r3, [r7, #7]
 800fd20:	f003 0320 	and.w	r3, r3, #32
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d06e      	beq.n	800fe06 <f_open+0x37e>
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	68db      	ldr	r3, [r3, #12]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d06a      	beq.n	800fe06 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	68da      	ldr	r2, [r3, #12]
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fd38:	697b      	ldr	r3, [r7, #20]
 800fd3a:	895b      	ldrh	r3, [r3, #10]
 800fd3c:	461a      	mov	r2, r3
 800fd3e:	697b      	ldr	r3, [r7, #20]
 800fd40:	899b      	ldrh	r3, [r3, #12]
 800fd42:	fb02 f303 	mul.w	r3, r2, r3
 800fd46:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	689b      	ldr	r3, [r3, #8]
 800fd4c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	68db      	ldr	r3, [r3, #12]
 800fd52:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fd54:	e016      	b.n	800fd84 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f7fd fe97 	bl	800da8e <get_fat>
 800fd60:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800fd62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd64:	2b01      	cmp	r3, #1
 800fd66:	d802      	bhi.n	800fd6e <f_open+0x2e6>
 800fd68:	2302      	movs	r3, #2
 800fd6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fd6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd74:	d102      	bne.n	800fd7c <f_open+0x2f4>
 800fd76:	2301      	movs	r3, #1
 800fd78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fd7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fd7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd80:	1ad3      	subs	r3, r2, r3
 800fd82:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fd84:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d103      	bne.n	800fd94 <f_open+0x30c>
 800fd8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fd8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d8e0      	bhi.n	800fd56 <f_open+0x2ce>
				}
				fp->clust = clst;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fd98:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fd9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d131      	bne.n	800fe06 <f_open+0x37e>
 800fda2:	697b      	ldr	r3, [r7, #20]
 800fda4:	899b      	ldrh	r3, [r3, #12]
 800fda6:	461a      	mov	r2, r3
 800fda8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fdaa:	fbb3 f1f2 	udiv	r1, r3, r2
 800fdae:	fb01 f202 	mul.w	r2, r1, r2
 800fdb2:	1a9b      	subs	r3, r3, r2
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d026      	beq.n	800fe06 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f7fd fe47 	bl	800da50 <clust2sect>
 800fdc2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fdc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d103      	bne.n	800fdd2 <f_open+0x34a>
						res = FR_INT_ERR;
 800fdca:	2302      	movs	r3, #2
 800fdcc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fdd0:	e019      	b.n	800fe06 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fdd2:	697b      	ldr	r3, [r7, #20]
 800fdd4:	899b      	ldrh	r3, [r3, #12]
 800fdd6:	461a      	mov	r2, r3
 800fdd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fdda:	fbb3 f2f2 	udiv	r2, r3, r2
 800fdde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fde0:	441a      	add	r2, r3
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	7858      	ldrb	r0, [r3, #1]
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	6a1a      	ldr	r2, [r3, #32]
 800fdf4:	2301      	movs	r3, #1
 800fdf6:	f7fd fa7f 	bl	800d2f8 <disk_read>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d002      	beq.n	800fe06 <f_open+0x37e>
 800fe00:	2301      	movs	r3, #1
 800fe02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fe06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d002      	beq.n	800fe14 <f_open+0x38c>
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	2200      	movs	r2, #0
 800fe12:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fe14:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3768      	adds	r7, #104	; 0x68
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}

0800fe20 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b08e      	sub	sp, #56	; 0x38
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	60f8      	str	r0, [r7, #12]
 800fe28:	60b9      	str	r1, [r7, #8]
 800fe2a:	607a      	str	r2, [r7, #4]
 800fe2c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800fe2e:	68bb      	ldr	r3, [r7, #8]
 800fe30:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	2200      	movs	r2, #0
 800fe36:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	f107 0214 	add.w	r2, r7, #20
 800fe3e:	4611      	mov	r1, r2
 800fe40:	4618      	mov	r0, r3
 800fe42:	f7ff fda5 	bl	800f990 <validate>
 800fe46:	4603      	mov	r3, r0
 800fe48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fe4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d107      	bne.n	800fe64 <f_read+0x44>
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	7d5b      	ldrb	r3, [r3, #21]
 800fe58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fe5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d002      	beq.n	800fe6a <f_read+0x4a>
 800fe64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe68:	e135      	b.n	80100d6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	7d1b      	ldrb	r3, [r3, #20]
 800fe6e:	f003 0301 	and.w	r3, r3, #1
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d101      	bne.n	800fe7a <f_read+0x5a>
 800fe76:	2307      	movs	r3, #7
 800fe78:	e12d      	b.n	80100d6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	68da      	ldr	r2, [r3, #12]
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	699b      	ldr	r3, [r3, #24]
 800fe82:	1ad3      	subs	r3, r2, r3
 800fe84:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800fe86:	687a      	ldr	r2, [r7, #4]
 800fe88:	6a3b      	ldr	r3, [r7, #32]
 800fe8a:	429a      	cmp	r2, r3
 800fe8c:	f240 811e 	bls.w	80100cc <f_read+0x2ac>
 800fe90:	6a3b      	ldr	r3, [r7, #32]
 800fe92:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800fe94:	e11a      	b.n	80100cc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	699b      	ldr	r3, [r3, #24]
 800fe9a:	697a      	ldr	r2, [r7, #20]
 800fe9c:	8992      	ldrh	r2, [r2, #12]
 800fe9e:	fbb3 f1f2 	udiv	r1, r3, r2
 800fea2:	fb01 f202 	mul.w	r2, r1, r2
 800fea6:	1a9b      	subs	r3, r3, r2
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	f040 80d5 	bne.w	8010058 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	699b      	ldr	r3, [r3, #24]
 800feb2:	697a      	ldr	r2, [r7, #20]
 800feb4:	8992      	ldrh	r2, [r2, #12]
 800feb6:	fbb3 f3f2 	udiv	r3, r3, r2
 800feba:	697a      	ldr	r2, [r7, #20]
 800febc:	8952      	ldrh	r2, [r2, #10]
 800febe:	3a01      	subs	r2, #1
 800fec0:	4013      	ands	r3, r2
 800fec2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800fec4:	69fb      	ldr	r3, [r7, #28]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d12f      	bne.n	800ff2a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	699b      	ldr	r3, [r3, #24]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d103      	bne.n	800feda <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	689b      	ldr	r3, [r3, #8]
 800fed6:	633b      	str	r3, [r7, #48]	; 0x30
 800fed8:	e013      	b.n	800ff02 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d007      	beq.n	800fef2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	699b      	ldr	r3, [r3, #24]
 800fee6:	4619      	mov	r1, r3
 800fee8:	68f8      	ldr	r0, [r7, #12]
 800feea:	f7fe f8bd 	bl	800e068 <clmt_clust>
 800feee:	6338      	str	r0, [r7, #48]	; 0x30
 800fef0:	e007      	b.n	800ff02 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800fef2:	68fa      	ldr	r2, [r7, #12]
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	69db      	ldr	r3, [r3, #28]
 800fef8:	4619      	mov	r1, r3
 800fefa:	4610      	mov	r0, r2
 800fefc:	f7fd fdc7 	bl	800da8e <get_fat>
 800ff00:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ff02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff04:	2b01      	cmp	r3, #1
 800ff06:	d804      	bhi.n	800ff12 <f_read+0xf2>
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	2202      	movs	r2, #2
 800ff0c:	755a      	strb	r2, [r3, #21]
 800ff0e:	2302      	movs	r3, #2
 800ff10:	e0e1      	b.n	80100d6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ff12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff18:	d104      	bne.n	800ff24 <f_read+0x104>
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	2201      	movs	r2, #1
 800ff1e:	755a      	strb	r2, [r3, #21]
 800ff20:	2301      	movs	r3, #1
 800ff22:	e0d8      	b.n	80100d6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff28:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ff2a:	697a      	ldr	r2, [r7, #20]
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	69db      	ldr	r3, [r3, #28]
 800ff30:	4619      	mov	r1, r3
 800ff32:	4610      	mov	r0, r2
 800ff34:	f7fd fd8c 	bl	800da50 <clust2sect>
 800ff38:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ff3a:	69bb      	ldr	r3, [r7, #24]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d104      	bne.n	800ff4a <f_read+0x12a>
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	2202      	movs	r2, #2
 800ff44:	755a      	strb	r2, [r3, #21]
 800ff46:	2302      	movs	r3, #2
 800ff48:	e0c5      	b.n	80100d6 <f_read+0x2b6>
			sect += csect;
 800ff4a:	69ba      	ldr	r2, [r7, #24]
 800ff4c:	69fb      	ldr	r3, [r7, #28]
 800ff4e:	4413      	add	r3, r2
 800ff50:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ff52:	697b      	ldr	r3, [r7, #20]
 800ff54:	899b      	ldrh	r3, [r3, #12]
 800ff56:	461a      	mov	r2, r3
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff5e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ff60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d041      	beq.n	800ffea <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ff66:	69fa      	ldr	r2, [r7, #28]
 800ff68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff6a:	4413      	add	r3, r2
 800ff6c:	697a      	ldr	r2, [r7, #20]
 800ff6e:	8952      	ldrh	r2, [r2, #10]
 800ff70:	4293      	cmp	r3, r2
 800ff72:	d905      	bls.n	800ff80 <f_read+0x160>
					cc = fs->csize - csect;
 800ff74:	697b      	ldr	r3, [r7, #20]
 800ff76:	895b      	ldrh	r3, [r3, #10]
 800ff78:	461a      	mov	r2, r3
 800ff7a:	69fb      	ldr	r3, [r7, #28]
 800ff7c:	1ad3      	subs	r3, r2, r3
 800ff7e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ff80:	697b      	ldr	r3, [r7, #20]
 800ff82:	7858      	ldrb	r0, [r3, #1]
 800ff84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff86:	69ba      	ldr	r2, [r7, #24]
 800ff88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ff8a:	f7fd f9b5 	bl	800d2f8 <disk_read>
 800ff8e:	4603      	mov	r3, r0
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d004      	beq.n	800ff9e <f_read+0x17e>
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	2201      	movs	r2, #1
 800ff98:	755a      	strb	r2, [r3, #21]
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	e09b      	b.n	80100d6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	7d1b      	ldrb	r3, [r3, #20]
 800ffa2:	b25b      	sxtb	r3, r3
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	da18      	bge.n	800ffda <f_read+0x1ba>
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	6a1a      	ldr	r2, [r3, #32]
 800ffac:	69bb      	ldr	r3, [r7, #24]
 800ffae:	1ad3      	subs	r3, r2, r3
 800ffb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ffb2:	429a      	cmp	r2, r3
 800ffb4:	d911      	bls.n	800ffda <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	6a1a      	ldr	r2, [r3, #32]
 800ffba:	69bb      	ldr	r3, [r7, #24]
 800ffbc:	1ad3      	subs	r3, r2, r3
 800ffbe:	697a      	ldr	r2, [r7, #20]
 800ffc0:	8992      	ldrh	r2, [r2, #12]
 800ffc2:	fb02 f303 	mul.w	r3, r2, r3
 800ffc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffc8:	18d0      	adds	r0, r2, r3
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	899b      	ldrh	r3, [r3, #12]
 800ffd4:	461a      	mov	r2, r3
 800ffd6:	f7fd fa6f 	bl	800d4b8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ffda:	697b      	ldr	r3, [r7, #20]
 800ffdc:	899b      	ldrh	r3, [r3, #12]
 800ffde:	461a      	mov	r2, r3
 800ffe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffe2:	fb02 f303 	mul.w	r3, r2, r3
 800ffe6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ffe8:	e05c      	b.n	80100a4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	6a1b      	ldr	r3, [r3, #32]
 800ffee:	69ba      	ldr	r2, [r7, #24]
 800fff0:	429a      	cmp	r2, r3
 800fff2:	d02e      	beq.n	8010052 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	7d1b      	ldrb	r3, [r3, #20]
 800fff8:	b25b      	sxtb	r3, r3
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	da18      	bge.n	8010030 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fffe:	697b      	ldr	r3, [r7, #20]
 8010000:	7858      	ldrb	r0, [r3, #1]
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	6a1a      	ldr	r2, [r3, #32]
 801000c:	2301      	movs	r3, #1
 801000e:	f7fd f993 	bl	800d338 <disk_write>
 8010012:	4603      	mov	r3, r0
 8010014:	2b00      	cmp	r3, #0
 8010016:	d004      	beq.n	8010022 <f_read+0x202>
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	2201      	movs	r2, #1
 801001c:	755a      	strb	r2, [r3, #21]
 801001e:	2301      	movs	r3, #1
 8010020:	e059      	b.n	80100d6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	7d1b      	ldrb	r3, [r3, #20]
 8010026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801002a:	b2da      	uxtb	r2, r3
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010030:	697b      	ldr	r3, [r7, #20]
 8010032:	7858      	ldrb	r0, [r3, #1]
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801003a:	2301      	movs	r3, #1
 801003c:	69ba      	ldr	r2, [r7, #24]
 801003e:	f7fd f95b 	bl	800d2f8 <disk_read>
 8010042:	4603      	mov	r3, r0
 8010044:	2b00      	cmp	r3, #0
 8010046:	d004      	beq.n	8010052 <f_read+0x232>
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	2201      	movs	r2, #1
 801004c:	755a      	strb	r2, [r3, #21]
 801004e:	2301      	movs	r3, #1
 8010050:	e041      	b.n	80100d6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	69ba      	ldr	r2, [r7, #24]
 8010056:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010058:	697b      	ldr	r3, [r7, #20]
 801005a:	899b      	ldrh	r3, [r3, #12]
 801005c:	4618      	mov	r0, r3
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	699b      	ldr	r3, [r3, #24]
 8010062:	697a      	ldr	r2, [r7, #20]
 8010064:	8992      	ldrh	r2, [r2, #12]
 8010066:	fbb3 f1f2 	udiv	r1, r3, r2
 801006a:	fb01 f202 	mul.w	r2, r1, r2
 801006e:	1a9b      	subs	r3, r3, r2
 8010070:	1ac3      	subs	r3, r0, r3
 8010072:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	429a      	cmp	r2, r3
 801007a:	d901      	bls.n	8010080 <f_read+0x260>
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	699b      	ldr	r3, [r3, #24]
 801008a:	697a      	ldr	r2, [r7, #20]
 801008c:	8992      	ldrh	r2, [r2, #12]
 801008e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010092:	fb00 f202 	mul.w	r2, r0, r2
 8010096:	1a9b      	subs	r3, r3, r2
 8010098:	440b      	add	r3, r1
 801009a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801009c:	4619      	mov	r1, r3
 801009e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80100a0:	f7fd fa0a 	bl	800d4b8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80100a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100a8:	4413      	add	r3, r2
 80100aa:	627b      	str	r3, [r7, #36]	; 0x24
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	699a      	ldr	r2, [r3, #24]
 80100b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100b2:	441a      	add	r2, r3
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	619a      	str	r2, [r3, #24]
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	681a      	ldr	r2, [r3, #0]
 80100bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100be:	441a      	add	r2, r3
 80100c0:	683b      	ldr	r3, [r7, #0]
 80100c2:	601a      	str	r2, [r3, #0]
 80100c4:	687a      	ldr	r2, [r7, #4]
 80100c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100c8:	1ad3      	subs	r3, r2, r3
 80100ca:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	f47f aee1 	bne.w	800fe96 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80100d4:	2300      	movs	r3, #0
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3738      	adds	r7, #56	; 0x38
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}

080100de <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80100de:	b580      	push	{r7, lr}
 80100e0:	b086      	sub	sp, #24
 80100e2:	af00      	add	r7, sp, #0
 80100e4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f107 0208 	add.w	r2, r7, #8
 80100ec:	4611      	mov	r1, r2
 80100ee:	4618      	mov	r0, r3
 80100f0:	f7ff fc4e 	bl	800f990 <validate>
 80100f4:	4603      	mov	r3, r0
 80100f6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80100f8:	7dfb      	ldrb	r3, [r7, #23]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d168      	bne.n	80101d0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	7d1b      	ldrb	r3, [r3, #20]
 8010102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010106:	2b00      	cmp	r3, #0
 8010108:	d062      	beq.n	80101d0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	7d1b      	ldrb	r3, [r3, #20]
 801010e:	b25b      	sxtb	r3, r3
 8010110:	2b00      	cmp	r3, #0
 8010112:	da15      	bge.n	8010140 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	7858      	ldrb	r0, [r3, #1]
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	6a1a      	ldr	r2, [r3, #32]
 8010122:	2301      	movs	r3, #1
 8010124:	f7fd f908 	bl	800d338 <disk_write>
 8010128:	4603      	mov	r3, r0
 801012a:	2b00      	cmp	r3, #0
 801012c:	d001      	beq.n	8010132 <f_sync+0x54>
 801012e:	2301      	movs	r3, #1
 8010130:	e04f      	b.n	80101d2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	7d1b      	ldrb	r3, [r3, #20]
 8010136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801013a:	b2da      	uxtb	r2, r3
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010140:	f7fa ffae 	bl	800b0a0 <get_fattime>
 8010144:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010146:	68ba      	ldr	r2, [r7, #8]
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801014c:	4619      	mov	r1, r3
 801014e:	4610      	mov	r0, r2
 8010150:	f7fd fbe0 	bl	800d914 <move_window>
 8010154:	4603      	mov	r3, r0
 8010156:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010158:	7dfb      	ldrb	r3, [r7, #23]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d138      	bne.n	80101d0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010162:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	330b      	adds	r3, #11
 8010168:	781a      	ldrb	r2, [r3, #0]
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	330b      	adds	r3, #11
 801016e:	f042 0220 	orr.w	r2, r2, #32
 8010172:	b2d2      	uxtb	r2, r2
 8010174:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	6818      	ldr	r0, [r3, #0]
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	689b      	ldr	r3, [r3, #8]
 801017e:	461a      	mov	r2, r3
 8010180:	68f9      	ldr	r1, [r7, #12]
 8010182:	f7fe f96e 	bl	800e462 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	f103 021c 	add.w	r2, r3, #28
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	68db      	ldr	r3, [r3, #12]
 8010190:	4619      	mov	r1, r3
 8010192:	4610      	mov	r0, r2
 8010194:	f7fd f964 	bl	800d460 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	3316      	adds	r3, #22
 801019c:	6939      	ldr	r1, [r7, #16]
 801019e:	4618      	mov	r0, r3
 80101a0:	f7fd f95e 	bl	800d460 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	3312      	adds	r3, #18
 80101a8:	2100      	movs	r1, #0
 80101aa:	4618      	mov	r0, r3
 80101ac:	f7fd f93d 	bl	800d42a <st_word>
					fs->wflag = 1;
 80101b0:	68bb      	ldr	r3, [r7, #8]
 80101b2:	2201      	movs	r2, #1
 80101b4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80101b6:	68bb      	ldr	r3, [r7, #8]
 80101b8:	4618      	mov	r0, r3
 80101ba:	f7fd fbd9 	bl	800d970 <sync_fs>
 80101be:	4603      	mov	r3, r0
 80101c0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	7d1b      	ldrb	r3, [r3, #20]
 80101c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80101ca:	b2da      	uxtb	r2, r3
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80101d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3718      	adds	r7, #24
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}

080101da <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80101da:	b580      	push	{r7, lr}
 80101dc:	b084      	sub	sp, #16
 80101de:	af00      	add	r7, sp, #0
 80101e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80101e2:	6878      	ldr	r0, [r7, #4]
 80101e4:	f7ff ff7b 	bl	80100de <f_sync>
 80101e8:	4603      	mov	r3, r0
 80101ea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80101ec:	7bfb      	ldrb	r3, [r7, #15]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d118      	bne.n	8010224 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	f107 0208 	add.w	r2, r7, #8
 80101f8:	4611      	mov	r1, r2
 80101fa:	4618      	mov	r0, r3
 80101fc:	f7ff fbc8 	bl	800f990 <validate>
 8010200:	4603      	mov	r3, r0
 8010202:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010204:	7bfb      	ldrb	r3, [r7, #15]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d10c      	bne.n	8010224 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	691b      	ldr	r3, [r3, #16]
 801020e:	4618      	mov	r0, r3
 8010210:	f7fd fadc 	bl	800d7cc <dec_lock>
 8010214:	4603      	mov	r3, r0
 8010216:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010218:	7bfb      	ldrb	r3, [r7, #15]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d102      	bne.n	8010224 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	2200      	movs	r2, #0
 8010222:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010224:	7bfb      	ldrb	r3, [r7, #15]
}
 8010226:	4618      	mov	r0, r3
 8010228:	3710      	adds	r7, #16
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}

0801022e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801022e:	b580      	push	{r7, lr}
 8010230:	b090      	sub	sp, #64	; 0x40
 8010232:	af00      	add	r7, sp, #0
 8010234:	6078      	str	r0, [r7, #4]
 8010236:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f107 0208 	add.w	r2, r7, #8
 801023e:	4611      	mov	r1, r2
 8010240:	4618      	mov	r0, r3
 8010242:	f7ff fba5 	bl	800f990 <validate>
 8010246:	4603      	mov	r3, r0
 8010248:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801024c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010250:	2b00      	cmp	r3, #0
 8010252:	d103      	bne.n	801025c <f_lseek+0x2e>
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	7d5b      	ldrb	r3, [r3, #21]
 8010258:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801025c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010260:	2b00      	cmp	r3, #0
 8010262:	d002      	beq.n	801026a <f_lseek+0x3c>
 8010264:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010268:	e201      	b.n	801066e <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801026e:	2b00      	cmp	r3, #0
 8010270:	f000 80d9 	beq.w	8010426 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801027a:	d15a      	bne.n	8010332 <f_lseek+0x104>
			tbl = fp->cltbl;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010280:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010284:	1d1a      	adds	r2, r3, #4
 8010286:	627a      	str	r2, [r7, #36]	; 0x24
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	617b      	str	r3, [r7, #20]
 801028c:	2302      	movs	r3, #2
 801028e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	689b      	ldr	r3, [r3, #8]
 8010294:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8010296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010298:	2b00      	cmp	r3, #0
 801029a:	d03a      	beq.n	8010312 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801029c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801029e:	613b      	str	r3, [r7, #16]
 80102a0:	2300      	movs	r3, #0
 80102a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80102a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102a6:	3302      	adds	r3, #2
 80102a8:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80102aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ac:	60fb      	str	r3, [r7, #12]
 80102ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102b0:	3301      	adds	r3, #1
 80102b2:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80102b8:	4618      	mov	r0, r3
 80102ba:	f7fd fbe8 	bl	800da8e <get_fat>
 80102be:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80102c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102c2:	2b01      	cmp	r3, #1
 80102c4:	d804      	bhi.n	80102d0 <f_lseek+0xa2>
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	2202      	movs	r2, #2
 80102ca:	755a      	strb	r2, [r3, #21]
 80102cc:	2302      	movs	r3, #2
 80102ce:	e1ce      	b.n	801066e <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80102d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80102d6:	d104      	bne.n	80102e2 <f_lseek+0xb4>
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2201      	movs	r2, #1
 80102dc:	755a      	strb	r2, [r3, #21]
 80102de:	2301      	movs	r3, #1
 80102e0:	e1c5      	b.n	801066e <f_lseek+0x440>
					} while (cl == pcl + 1);
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	3301      	adds	r3, #1
 80102e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102e8:	429a      	cmp	r2, r3
 80102ea:	d0de      	beq.n	80102aa <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80102ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80102ee:	697b      	ldr	r3, [r7, #20]
 80102f0:	429a      	cmp	r2, r3
 80102f2:	d809      	bhi.n	8010308 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80102f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f6:	1d1a      	adds	r2, r3, #4
 80102f8:	627a      	str	r2, [r7, #36]	; 0x24
 80102fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80102fc:	601a      	str	r2, [r3, #0]
 80102fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010300:	1d1a      	adds	r2, r3, #4
 8010302:	627a      	str	r2, [r7, #36]	; 0x24
 8010304:	693a      	ldr	r2, [r7, #16]
 8010306:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010308:	68bb      	ldr	r3, [r7, #8]
 801030a:	69db      	ldr	r3, [r3, #28]
 801030c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801030e:	429a      	cmp	r2, r3
 8010310:	d3c4      	bcc.n	801029c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010316:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010318:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801031a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	429a      	cmp	r2, r3
 8010320:	d803      	bhi.n	801032a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8010322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010324:	2200      	movs	r2, #0
 8010326:	601a      	str	r2, [r3, #0]
 8010328:	e19f      	b.n	801066a <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801032a:	2311      	movs	r3, #17
 801032c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010330:	e19b      	b.n	801066a <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	68db      	ldr	r3, [r3, #12]
 8010336:	683a      	ldr	r2, [r7, #0]
 8010338:	429a      	cmp	r2, r3
 801033a:	d902      	bls.n	8010342 <f_lseek+0x114>
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	68db      	ldr	r3, [r3, #12]
 8010340:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	683a      	ldr	r2, [r7, #0]
 8010346:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010348:	683b      	ldr	r3, [r7, #0]
 801034a:	2b00      	cmp	r3, #0
 801034c:	f000 818d 	beq.w	801066a <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	3b01      	subs	r3, #1
 8010354:	4619      	mov	r1, r3
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f7fd fe86 	bl	800e068 <clmt_clust>
 801035c:	4602      	mov	r2, r0
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010362:	68ba      	ldr	r2, [r7, #8]
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	69db      	ldr	r3, [r3, #28]
 8010368:	4619      	mov	r1, r3
 801036a:	4610      	mov	r0, r2
 801036c:	f7fd fb70 	bl	800da50 <clust2sect>
 8010370:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010372:	69bb      	ldr	r3, [r7, #24]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d104      	bne.n	8010382 <f_lseek+0x154>
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2202      	movs	r2, #2
 801037c:	755a      	strb	r2, [r3, #21]
 801037e:	2302      	movs	r3, #2
 8010380:	e175      	b.n	801066e <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	3b01      	subs	r3, #1
 8010386:	68ba      	ldr	r2, [r7, #8]
 8010388:	8992      	ldrh	r2, [r2, #12]
 801038a:	fbb3 f3f2 	udiv	r3, r3, r2
 801038e:	68ba      	ldr	r2, [r7, #8]
 8010390:	8952      	ldrh	r2, [r2, #10]
 8010392:	3a01      	subs	r2, #1
 8010394:	4013      	ands	r3, r2
 8010396:	69ba      	ldr	r2, [r7, #24]
 8010398:	4413      	add	r3, r2
 801039a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	699b      	ldr	r3, [r3, #24]
 80103a0:	68ba      	ldr	r2, [r7, #8]
 80103a2:	8992      	ldrh	r2, [r2, #12]
 80103a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80103a8:	fb01 f202 	mul.w	r2, r1, r2
 80103ac:	1a9b      	subs	r3, r3, r2
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	f000 815b 	beq.w	801066a <f_lseek+0x43c>
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	6a1b      	ldr	r3, [r3, #32]
 80103b8:	69ba      	ldr	r2, [r7, #24]
 80103ba:	429a      	cmp	r2, r3
 80103bc:	f000 8155 	beq.w	801066a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	7d1b      	ldrb	r3, [r3, #20]
 80103c4:	b25b      	sxtb	r3, r3
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	da18      	bge.n	80103fc <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	7858      	ldrb	r0, [r3, #1]
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6a1a      	ldr	r2, [r3, #32]
 80103d8:	2301      	movs	r3, #1
 80103da:	f7fc ffad 	bl	800d338 <disk_write>
 80103de:	4603      	mov	r3, r0
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d004      	beq.n	80103ee <f_lseek+0x1c0>
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2201      	movs	r2, #1
 80103e8:	755a      	strb	r2, [r3, #21]
 80103ea:	2301      	movs	r3, #1
 80103ec:	e13f      	b.n	801066e <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	7d1b      	ldrb	r3, [r3, #20]
 80103f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80103f6:	b2da      	uxtb	r2, r3
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	7858      	ldrb	r0, [r3, #1]
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010406:	2301      	movs	r3, #1
 8010408:	69ba      	ldr	r2, [r7, #24]
 801040a:	f7fc ff75 	bl	800d2f8 <disk_read>
 801040e:	4603      	mov	r3, r0
 8010410:	2b00      	cmp	r3, #0
 8010412:	d004      	beq.n	801041e <f_lseek+0x1f0>
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2201      	movs	r2, #1
 8010418:	755a      	strb	r2, [r3, #21]
 801041a:	2301      	movs	r3, #1
 801041c:	e127      	b.n	801066e <f_lseek+0x440>
#endif
					fp->sect = dsc;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	69ba      	ldr	r2, [r7, #24]
 8010422:	621a      	str	r2, [r3, #32]
 8010424:	e121      	b.n	801066a <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	68db      	ldr	r3, [r3, #12]
 801042a:	683a      	ldr	r2, [r7, #0]
 801042c:	429a      	cmp	r2, r3
 801042e:	d908      	bls.n	8010442 <f_lseek+0x214>
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	7d1b      	ldrb	r3, [r3, #20]
 8010434:	f003 0302 	and.w	r3, r3, #2
 8010438:	2b00      	cmp	r3, #0
 801043a:	d102      	bne.n	8010442 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	68db      	ldr	r3, [r3, #12]
 8010440:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	699b      	ldr	r3, [r3, #24]
 8010446:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010448:	2300      	movs	r3, #0
 801044a:	637b      	str	r3, [r7, #52]	; 0x34
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010450:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	2b00      	cmp	r3, #0
 8010456:	f000 80b5 	beq.w	80105c4 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801045a:	68bb      	ldr	r3, [r7, #8]
 801045c:	895b      	ldrh	r3, [r3, #10]
 801045e:	461a      	mov	r2, r3
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	899b      	ldrh	r3, [r3, #12]
 8010464:	fb02 f303 	mul.w	r3, r2, r3
 8010468:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801046a:	6a3b      	ldr	r3, [r7, #32]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d01b      	beq.n	80104a8 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010470:	683b      	ldr	r3, [r7, #0]
 8010472:	1e5a      	subs	r2, r3, #1
 8010474:	69fb      	ldr	r3, [r7, #28]
 8010476:	fbb2 f2f3 	udiv	r2, r2, r3
 801047a:	6a3b      	ldr	r3, [r7, #32]
 801047c:	1e59      	subs	r1, r3, #1
 801047e:	69fb      	ldr	r3, [r7, #28]
 8010480:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010484:	429a      	cmp	r2, r3
 8010486:	d30f      	bcc.n	80104a8 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010488:	6a3b      	ldr	r3, [r7, #32]
 801048a:	1e5a      	subs	r2, r3, #1
 801048c:	69fb      	ldr	r3, [r7, #28]
 801048e:	425b      	negs	r3, r3
 8010490:	401a      	ands	r2, r3
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	699b      	ldr	r3, [r3, #24]
 801049a:	683a      	ldr	r2, [r7, #0]
 801049c:	1ad3      	subs	r3, r2, r3
 801049e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	69db      	ldr	r3, [r3, #28]
 80104a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80104a6:	e022      	b.n	80104ee <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	689b      	ldr	r3, [r3, #8]
 80104ac:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80104ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d119      	bne.n	80104e8 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	2100      	movs	r1, #0
 80104b8:	4618      	mov	r0, r3
 80104ba:	f7fd fd3d 	bl	800df38 <create_chain>
 80104be:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80104c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104c2:	2b01      	cmp	r3, #1
 80104c4:	d104      	bne.n	80104d0 <f_lseek+0x2a2>
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	2202      	movs	r2, #2
 80104ca:	755a      	strb	r2, [r3, #21]
 80104cc:	2302      	movs	r3, #2
 80104ce:	e0ce      	b.n	801066e <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80104d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80104d6:	d104      	bne.n	80104e2 <f_lseek+0x2b4>
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2201      	movs	r2, #1
 80104dc:	755a      	strb	r2, [r3, #21]
 80104de:	2301      	movs	r3, #1
 80104e0:	e0c5      	b.n	801066e <f_lseek+0x440>
					fp->obj.sclust = clst;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104e6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104ec:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80104ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d067      	beq.n	80105c4 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80104f4:	e03a      	b.n	801056c <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80104f6:	683a      	ldr	r2, [r7, #0]
 80104f8:	69fb      	ldr	r3, [r7, #28]
 80104fa:	1ad3      	subs	r3, r2, r3
 80104fc:	603b      	str	r3, [r7, #0]
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	699a      	ldr	r2, [r3, #24]
 8010502:	69fb      	ldr	r3, [r7, #28]
 8010504:	441a      	add	r2, r3
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	7d1b      	ldrb	r3, [r3, #20]
 801050e:	f003 0302 	and.w	r3, r3, #2
 8010512:	2b00      	cmp	r3, #0
 8010514:	d00b      	beq.n	801052e <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801051a:	4618      	mov	r0, r3
 801051c:	f7fd fd0c 	bl	800df38 <create_chain>
 8010520:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010524:	2b00      	cmp	r3, #0
 8010526:	d108      	bne.n	801053a <f_lseek+0x30c>
							ofs = 0; break;
 8010528:	2300      	movs	r3, #0
 801052a:	603b      	str	r3, [r7, #0]
 801052c:	e022      	b.n	8010574 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010532:	4618      	mov	r0, r3
 8010534:	f7fd faab 	bl	800da8e <get_fat>
 8010538:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801053a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801053c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010540:	d104      	bne.n	801054c <f_lseek+0x31e>
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2201      	movs	r2, #1
 8010546:	755a      	strb	r2, [r3, #21]
 8010548:	2301      	movs	r3, #1
 801054a:	e090      	b.n	801066e <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801054c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801054e:	2b01      	cmp	r3, #1
 8010550:	d904      	bls.n	801055c <f_lseek+0x32e>
 8010552:	68bb      	ldr	r3, [r7, #8]
 8010554:	69db      	ldr	r3, [r3, #28]
 8010556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010558:	429a      	cmp	r2, r3
 801055a:	d304      	bcc.n	8010566 <f_lseek+0x338>
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2202      	movs	r2, #2
 8010560:	755a      	strb	r2, [r3, #21]
 8010562:	2302      	movs	r3, #2
 8010564:	e083      	b.n	801066e <f_lseek+0x440>
					fp->clust = clst;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801056a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801056c:	683a      	ldr	r2, [r7, #0]
 801056e:	69fb      	ldr	r3, [r7, #28]
 8010570:	429a      	cmp	r2, r3
 8010572:	d8c0      	bhi.n	80104f6 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	699a      	ldr	r2, [r3, #24]
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	441a      	add	r2, r3
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	899b      	ldrh	r3, [r3, #12]
 8010584:	461a      	mov	r2, r3
 8010586:	683b      	ldr	r3, [r7, #0]
 8010588:	fbb3 f1f2 	udiv	r1, r3, r2
 801058c:	fb01 f202 	mul.w	r2, r1, r2
 8010590:	1a9b      	subs	r3, r3, r2
 8010592:	2b00      	cmp	r3, #0
 8010594:	d016      	beq.n	80105c4 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010596:	68bb      	ldr	r3, [r7, #8]
 8010598:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801059a:	4618      	mov	r0, r3
 801059c:	f7fd fa58 	bl	800da50 <clust2sect>
 80105a0:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80105a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d104      	bne.n	80105b2 <f_lseek+0x384>
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	2202      	movs	r2, #2
 80105ac:	755a      	strb	r2, [r3, #21]
 80105ae:	2302      	movs	r3, #2
 80105b0:	e05d      	b.n	801066e <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80105b2:	68bb      	ldr	r3, [r7, #8]
 80105b4:	899b      	ldrh	r3, [r3, #12]
 80105b6:	461a      	mov	r2, r3
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80105be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80105c0:	4413      	add	r3, r2
 80105c2:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	699a      	ldr	r2, [r3, #24]
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	68db      	ldr	r3, [r3, #12]
 80105cc:	429a      	cmp	r2, r3
 80105ce:	d90a      	bls.n	80105e6 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	699a      	ldr	r2, [r3, #24]
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	7d1b      	ldrb	r3, [r3, #20]
 80105dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105e0:	b2da      	uxtb	r2, r3
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	699b      	ldr	r3, [r3, #24]
 80105ea:	68ba      	ldr	r2, [r7, #8]
 80105ec:	8992      	ldrh	r2, [r2, #12]
 80105ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80105f2:	fb01 f202 	mul.w	r2, r1, r2
 80105f6:	1a9b      	subs	r3, r3, r2
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d036      	beq.n	801066a <f_lseek+0x43c>
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	6a1b      	ldr	r3, [r3, #32]
 8010600:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010602:	429a      	cmp	r2, r3
 8010604:	d031      	beq.n	801066a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	7d1b      	ldrb	r3, [r3, #20]
 801060a:	b25b      	sxtb	r3, r3
 801060c:	2b00      	cmp	r3, #0
 801060e:	da18      	bge.n	8010642 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010610:	68bb      	ldr	r3, [r7, #8]
 8010612:	7858      	ldrb	r0, [r3, #1]
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	6a1a      	ldr	r2, [r3, #32]
 801061e:	2301      	movs	r3, #1
 8010620:	f7fc fe8a 	bl	800d338 <disk_write>
 8010624:	4603      	mov	r3, r0
 8010626:	2b00      	cmp	r3, #0
 8010628:	d004      	beq.n	8010634 <f_lseek+0x406>
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2201      	movs	r2, #1
 801062e:	755a      	strb	r2, [r3, #21]
 8010630:	2301      	movs	r3, #1
 8010632:	e01c      	b.n	801066e <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	7d1b      	ldrb	r3, [r3, #20]
 8010638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801063c:	b2da      	uxtb	r2, r3
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010642:	68bb      	ldr	r3, [r7, #8]
 8010644:	7858      	ldrb	r0, [r3, #1]
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801064c:	2301      	movs	r3, #1
 801064e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010650:	f7fc fe52 	bl	800d2f8 <disk_read>
 8010654:	4603      	mov	r3, r0
 8010656:	2b00      	cmp	r3, #0
 8010658:	d004      	beq.n	8010664 <f_lseek+0x436>
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	2201      	movs	r2, #1
 801065e:	755a      	strb	r2, [r3, #21]
 8010660:	2301      	movs	r3, #1
 8010662:	e004      	b.n	801066e <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010668:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801066a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801066e:	4618      	mov	r0, r3
 8010670:	3740      	adds	r7, #64	; 0x40
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}

08010676 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010676:	b580      	push	{r7, lr}
 8010678:	b086      	sub	sp, #24
 801067a:	af00      	add	r7, sp, #0
 801067c:	6078      	str	r0, [r7, #4]
 801067e:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d101      	bne.n	801068a <f_opendir+0x14>
 8010686:	2309      	movs	r3, #9
 8010688:	e064      	b.n	8010754 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801068e:	f107 010c 	add.w	r1, r7, #12
 8010692:	463b      	mov	r3, r7
 8010694:	2200      	movs	r2, #0
 8010696:	4618      	mov	r0, r3
 8010698:	f7fe fef4 	bl	800f484 <find_volume>
 801069c:	4603      	mov	r3, r0
 801069e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80106a0:	7dfb      	ldrb	r3, [r7, #23]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d14f      	bne.n	8010746 <f_opendir+0xd0>
		obj->fs = fs;
 80106a6:	68fa      	ldr	r2, [r7, #12]
 80106a8:	693b      	ldr	r3, [r7, #16]
 80106aa:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80106ac:	683b      	ldr	r3, [r7, #0]
 80106ae:	4619      	mov	r1, r3
 80106b0:	6878      	ldr	r0, [r7, #4]
 80106b2:	f7fe fdd7 	bl	800f264 <follow_path>
 80106b6:	4603      	mov	r3, r0
 80106b8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80106ba:	7dfb      	ldrb	r3, [r7, #23]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d13d      	bne.n	801073c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80106c6:	b25b      	sxtb	r3, r3
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	db12      	blt.n	80106f2 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80106cc:	693b      	ldr	r3, [r7, #16]
 80106ce:	799b      	ldrb	r3, [r3, #6]
 80106d0:	f003 0310 	and.w	r3, r3, #16
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d00a      	beq.n	80106ee <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80106d8:	68fa      	ldr	r2, [r7, #12]
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	6a1b      	ldr	r3, [r3, #32]
 80106de:	4619      	mov	r1, r3
 80106e0:	4610      	mov	r0, r2
 80106e2:	f7fd fe9f 	bl	800e424 <ld_clust>
 80106e6:	4602      	mov	r2, r0
 80106e8:	693b      	ldr	r3, [r7, #16]
 80106ea:	609a      	str	r2, [r3, #8]
 80106ec:	e001      	b.n	80106f2 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80106ee:	2305      	movs	r3, #5
 80106f0:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80106f2:	7dfb      	ldrb	r3, [r7, #23]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d121      	bne.n	801073c <f_opendir+0xc6>
				obj->id = fs->id;
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	88da      	ldrh	r2, [r3, #6]
 80106fc:	693b      	ldr	r3, [r7, #16]
 80106fe:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8010700:	2100      	movs	r1, #0
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f7fd fce8 	bl	800e0d8 <dir_sdi>
 8010708:	4603      	mov	r3, r0
 801070a:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801070c:	7dfb      	ldrb	r3, [r7, #23]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d114      	bne.n	801073c <f_opendir+0xc6>
					if (obj->sclust) {
 8010712:	693b      	ldr	r3, [r7, #16]
 8010714:	689b      	ldr	r3, [r3, #8]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d00d      	beq.n	8010736 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801071a:	2100      	movs	r1, #0
 801071c:	6878      	ldr	r0, [r7, #4]
 801071e:	f7fc ffc7 	bl	800d6b0 <inc_lock>
 8010722:	4602      	mov	r2, r0
 8010724:	693b      	ldr	r3, [r7, #16]
 8010726:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8010728:	693b      	ldr	r3, [r7, #16]
 801072a:	691b      	ldr	r3, [r3, #16]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d105      	bne.n	801073c <f_opendir+0xc6>
 8010730:	2312      	movs	r3, #18
 8010732:	75fb      	strb	r3, [r7, #23]
 8010734:	e002      	b.n	801073c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8010736:	693b      	ldr	r3, [r7, #16]
 8010738:	2200      	movs	r2, #0
 801073a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801073c:	7dfb      	ldrb	r3, [r7, #23]
 801073e:	2b04      	cmp	r3, #4
 8010740:	d101      	bne.n	8010746 <f_opendir+0xd0>
 8010742:	2305      	movs	r3, #5
 8010744:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8010746:	7dfb      	ldrb	r3, [r7, #23]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d002      	beq.n	8010752 <f_opendir+0xdc>
 801074c:	693b      	ldr	r3, [r7, #16]
 801074e:	2200      	movs	r2, #0
 8010750:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010752:	7dfb      	ldrb	r3, [r7, #23]
}
 8010754:	4618      	mov	r0, r3
 8010756:	3718      	adds	r7, #24
 8010758:	46bd      	mov	sp, r7
 801075a:	bd80      	pop	{r7, pc}

0801075c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b084      	sub	sp, #16
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f107 0208 	add.w	r2, r7, #8
 801076a:	4611      	mov	r1, r2
 801076c:	4618      	mov	r0, r3
 801076e:	f7ff f90f 	bl	800f990 <validate>
 8010772:	4603      	mov	r3, r0
 8010774:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010776:	7bfb      	ldrb	r3, [r7, #15]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d110      	bne.n	801079e <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	691b      	ldr	r3, [r3, #16]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d006      	beq.n	8010792 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	691b      	ldr	r3, [r3, #16]
 8010788:	4618      	mov	r0, r3
 801078a:	f7fd f81f 	bl	800d7cc <dec_lock>
 801078e:	4603      	mov	r3, r0
 8010790:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8010792:	7bfb      	ldrb	r3, [r7, #15]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d102      	bne.n	801079e <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	2200      	movs	r2, #0
 801079c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801079e:	7bfb      	ldrb	r3, [r7, #15]
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	3710      	adds	r7, #16
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}

080107a8 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b084      	sub	sp, #16
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
 80107b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	f107 0208 	add.w	r2, r7, #8
 80107b8:	4611      	mov	r1, r2
 80107ba:	4618      	mov	r0, r3
 80107bc:	f7ff f8e8 	bl	800f990 <validate>
 80107c0:	4603      	mov	r3, r0
 80107c2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80107c4:	7bfb      	ldrb	r3, [r7, #15]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d126      	bne.n	8010818 <f_readdir+0x70>
		if (!fno) {
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d106      	bne.n	80107de <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80107d0:	2100      	movs	r1, #0
 80107d2:	6878      	ldr	r0, [r7, #4]
 80107d4:	f7fd fc80 	bl	800e0d8 <dir_sdi>
 80107d8:	4603      	mov	r3, r0
 80107da:	73fb      	strb	r3, [r7, #15]
 80107dc:	e01c      	b.n	8010818 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80107de:	2100      	movs	r1, #0
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f7fe f84a 	bl	800e87a <dir_read>
 80107e6:	4603      	mov	r3, r0
 80107e8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80107ea:	7bfb      	ldrb	r3, [r7, #15]
 80107ec:	2b04      	cmp	r3, #4
 80107ee:	d101      	bne.n	80107f4 <f_readdir+0x4c>
 80107f0:	2300      	movs	r3, #0
 80107f2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80107f4:	7bfb      	ldrb	r3, [r7, #15]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d10e      	bne.n	8010818 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80107fa:	6839      	ldr	r1, [r7, #0]
 80107fc:	6878      	ldr	r0, [r7, #4]
 80107fe:	f7fe fa9b 	bl	800ed38 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8010802:	2100      	movs	r1, #0
 8010804:	6878      	ldr	r0, [r7, #4]
 8010806:	f7fd fcf0 	bl	800e1ea <dir_next>
 801080a:	4603      	mov	r3, r0
 801080c:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801080e:	7bfb      	ldrb	r3, [r7, #15]
 8010810:	2b04      	cmp	r3, #4
 8010812:	d101      	bne.n	8010818 <f_readdir+0x70>
 8010814:	2300      	movs	r3, #0
 8010816:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8010818:	7bfb      	ldrb	r3, [r7, #15]
}
 801081a:	4618      	mov	r0, r3
 801081c:	3710      	adds	r7, #16
 801081e:	46bd      	mov	sp, r7
 8010820:	bd80      	pop	{r7, pc}

08010822 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8010822:	b580      	push	{r7, lr}
 8010824:	b092      	sub	sp, #72	; 0x48
 8010826:	af00      	add	r7, sp, #0
 8010828:	60f8      	str	r0, [r7, #12]
 801082a:	60b9      	str	r1, [r7, #8]
 801082c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801082e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010832:	f107 030c 	add.w	r3, r7, #12
 8010836:	2200      	movs	r2, #0
 8010838:	4618      	mov	r0, r3
 801083a:	f7fe fe23 	bl	800f484 <find_volume>
 801083e:	4603      	mov	r3, r0
 8010840:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8010844:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010848:	2b00      	cmp	r3, #0
 801084a:	f040 8099 	bne.w	8010980 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 801084e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8010854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010856:	699a      	ldr	r2, [r3, #24]
 8010858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801085a:	69db      	ldr	r3, [r3, #28]
 801085c:	3b02      	subs	r3, #2
 801085e:	429a      	cmp	r2, r3
 8010860:	d804      	bhi.n	801086c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8010862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010864:	699a      	ldr	r2, [r3, #24]
 8010866:	68bb      	ldr	r3, [r7, #8]
 8010868:	601a      	str	r2, [r3, #0]
 801086a:	e089      	b.n	8010980 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 801086c:	2300      	movs	r3, #0
 801086e:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8010870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010872:	781b      	ldrb	r3, [r3, #0]
 8010874:	2b01      	cmp	r3, #1
 8010876:	d128      	bne.n	80108ca <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8010878:	2302      	movs	r3, #2
 801087a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801087c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801087e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8010880:	f107 0314 	add.w	r3, r7, #20
 8010884:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010886:	4618      	mov	r0, r3
 8010888:	f7fd f901 	bl	800da8e <get_fat>
 801088c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 801088e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010894:	d103      	bne.n	801089e <f_getfree+0x7c>
 8010896:	2301      	movs	r3, #1
 8010898:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801089c:	e063      	b.n	8010966 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 801089e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108a0:	2b01      	cmp	r3, #1
 80108a2:	d103      	bne.n	80108ac <f_getfree+0x8a>
 80108a4:	2302      	movs	r3, #2
 80108a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80108aa:	e05c      	b.n	8010966 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80108ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d102      	bne.n	80108b8 <f_getfree+0x96>
 80108b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108b4:	3301      	adds	r3, #1
 80108b6:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80108b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108ba:	3301      	adds	r3, #1
 80108bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80108be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c0:	69db      	ldr	r3, [r3, #28]
 80108c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80108c4:	429a      	cmp	r2, r3
 80108c6:	d3db      	bcc.n	8010880 <f_getfree+0x5e>
 80108c8:	e04d      	b.n	8010966 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80108ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108cc:	69db      	ldr	r3, [r3, #28]
 80108ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80108d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108d4:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80108d6:	2300      	movs	r3, #0
 80108d8:	637b      	str	r3, [r7, #52]	; 0x34
 80108da:	2300      	movs	r3, #0
 80108dc:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80108de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d113      	bne.n	801090c <f_getfree+0xea>
							res = move_window(fs, sect++);
 80108e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108e8:	1c5a      	adds	r2, r3, #1
 80108ea:	63ba      	str	r2, [r7, #56]	; 0x38
 80108ec:	4619      	mov	r1, r3
 80108ee:	f7fd f811 	bl	800d914 <move_window>
 80108f2:	4603      	mov	r3, r0
 80108f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80108f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d131      	bne.n	8010964 <f_getfree+0x142>
							p = fs->win;
 8010900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010902:	3338      	adds	r3, #56	; 0x38
 8010904:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8010906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010908:	899b      	ldrh	r3, [r3, #12]
 801090a:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 801090c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801090e:	781b      	ldrb	r3, [r3, #0]
 8010910:	2b02      	cmp	r3, #2
 8010912:	d10f      	bne.n	8010934 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8010914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010916:	f7fc fd4d 	bl	800d3b4 <ld_word>
 801091a:	4603      	mov	r3, r0
 801091c:	2b00      	cmp	r3, #0
 801091e:	d102      	bne.n	8010926 <f_getfree+0x104>
 8010920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010922:	3301      	adds	r3, #1
 8010924:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8010926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010928:	3302      	adds	r3, #2
 801092a:	633b      	str	r3, [r7, #48]	; 0x30
 801092c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801092e:	3b02      	subs	r3, #2
 8010930:	637b      	str	r3, [r7, #52]	; 0x34
 8010932:	e010      	b.n	8010956 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8010934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010936:	f7fc fd55 	bl	800d3e4 <ld_dword>
 801093a:	4603      	mov	r3, r0
 801093c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010940:	2b00      	cmp	r3, #0
 8010942:	d102      	bne.n	801094a <f_getfree+0x128>
 8010944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010946:	3301      	adds	r3, #1
 8010948:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 801094a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801094c:	3304      	adds	r3, #4
 801094e:	633b      	str	r3, [r7, #48]	; 0x30
 8010950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010952:	3b04      	subs	r3, #4
 8010954:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8010956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010958:	3b01      	subs	r3, #1
 801095a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801095c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801095e:	2b00      	cmp	r3, #0
 8010960:	d1bd      	bne.n	80108de <f_getfree+0xbc>
 8010962:	e000      	b.n	8010966 <f_getfree+0x144>
							if (res != FR_OK) break;
 8010964:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8010966:	68bb      	ldr	r3, [r7, #8]
 8010968:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801096a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 801096c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801096e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010970:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8010972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010974:	791a      	ldrb	r2, [r3, #4]
 8010976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010978:	f042 0201 	orr.w	r2, r2, #1
 801097c:	b2d2      	uxtb	r2, r2
 801097e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8010980:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8010984:	4618      	mov	r0, r3
 8010986:	3748      	adds	r7, #72	; 0x48
 8010988:	46bd      	mov	sp, r7
 801098a:	bd80      	pop	{r7, pc}

0801098c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b088      	sub	sp, #32
 8010990:	af00      	add	r7, sp, #0
 8010992:	60f8      	str	r0, [r7, #12]
 8010994:	60b9      	str	r1, [r7, #8]
 8010996:	607a      	str	r2, [r7, #4]
	int n = 0;
 8010998:	2300      	movs	r3, #0
 801099a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80109a0:	e01b      	b.n	80109da <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80109a2:	f107 0310 	add.w	r3, r7, #16
 80109a6:	f107 0114 	add.w	r1, r7, #20
 80109aa:	2201      	movs	r2, #1
 80109ac:	6878      	ldr	r0, [r7, #4]
 80109ae:	f7ff fa37 	bl	800fe20 <f_read>
		if (rc != 1) break;
 80109b2:	693b      	ldr	r3, [r7, #16]
 80109b4:	2b01      	cmp	r3, #1
 80109b6:	d116      	bne.n	80109e6 <f_gets+0x5a>
		c = s[0];
 80109b8:	7d3b      	ldrb	r3, [r7, #20]
 80109ba:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80109bc:	7dfb      	ldrb	r3, [r7, #23]
 80109be:	2b0d      	cmp	r3, #13
 80109c0:	d100      	bne.n	80109c4 <f_gets+0x38>
 80109c2:	e00a      	b.n	80109da <f_gets+0x4e>
		*p++ = c;
 80109c4:	69bb      	ldr	r3, [r7, #24]
 80109c6:	1c5a      	adds	r2, r3, #1
 80109c8:	61ba      	str	r2, [r7, #24]
 80109ca:	7dfa      	ldrb	r2, [r7, #23]
 80109cc:	701a      	strb	r2, [r3, #0]
		n++;
 80109ce:	69fb      	ldr	r3, [r7, #28]
 80109d0:	3301      	adds	r3, #1
 80109d2:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80109d4:	7dfb      	ldrb	r3, [r7, #23]
 80109d6:	2b0a      	cmp	r3, #10
 80109d8:	d007      	beq.n	80109ea <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80109da:	68bb      	ldr	r3, [r7, #8]
 80109dc:	3b01      	subs	r3, #1
 80109de:	69fa      	ldr	r2, [r7, #28]
 80109e0:	429a      	cmp	r2, r3
 80109e2:	dbde      	blt.n	80109a2 <f_gets+0x16>
 80109e4:	e002      	b.n	80109ec <f_gets+0x60>
		if (rc != 1) break;
 80109e6:	bf00      	nop
 80109e8:	e000      	b.n	80109ec <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80109ea:	bf00      	nop
	}
	*p = 0;
 80109ec:	69bb      	ldr	r3, [r7, #24]
 80109ee:	2200      	movs	r2, #0
 80109f0:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80109f2:	69fb      	ldr	r3, [r7, #28]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d001      	beq.n	80109fc <f_gets+0x70>
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	e000      	b.n	80109fe <f_gets+0x72>
 80109fc:	2300      	movs	r3, #0
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3720      	adds	r7, #32
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}
	...

08010a08 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010a08:	b480      	push	{r7}
 8010a0a:	b087      	sub	sp, #28
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	60f8      	str	r0, [r7, #12]
 8010a10:	60b9      	str	r1, [r7, #8]
 8010a12:	4613      	mov	r3, r2
 8010a14:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010a16:	2301      	movs	r3, #1
 8010a18:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010a1e:	4b1f      	ldr	r3, [pc, #124]	; (8010a9c <FATFS_LinkDriverEx+0x94>)
 8010a20:	7a5b      	ldrb	r3, [r3, #9]
 8010a22:	b2db      	uxtb	r3, r3
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d131      	bne.n	8010a8c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010a28:	4b1c      	ldr	r3, [pc, #112]	; (8010a9c <FATFS_LinkDriverEx+0x94>)
 8010a2a:	7a5b      	ldrb	r3, [r3, #9]
 8010a2c:	b2db      	uxtb	r3, r3
 8010a2e:	461a      	mov	r2, r3
 8010a30:	4b1a      	ldr	r3, [pc, #104]	; (8010a9c <FATFS_LinkDriverEx+0x94>)
 8010a32:	2100      	movs	r1, #0
 8010a34:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010a36:	4b19      	ldr	r3, [pc, #100]	; (8010a9c <FATFS_LinkDriverEx+0x94>)
 8010a38:	7a5b      	ldrb	r3, [r3, #9]
 8010a3a:	b2db      	uxtb	r3, r3
 8010a3c:	4a17      	ldr	r2, [pc, #92]	; (8010a9c <FATFS_LinkDriverEx+0x94>)
 8010a3e:	009b      	lsls	r3, r3, #2
 8010a40:	4413      	add	r3, r2
 8010a42:	68fa      	ldr	r2, [r7, #12]
 8010a44:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010a46:	4b15      	ldr	r3, [pc, #84]	; (8010a9c <FATFS_LinkDriverEx+0x94>)
 8010a48:	7a5b      	ldrb	r3, [r3, #9]
 8010a4a:	b2db      	uxtb	r3, r3
 8010a4c:	461a      	mov	r2, r3
 8010a4e:	4b13      	ldr	r3, [pc, #76]	; (8010a9c <FATFS_LinkDriverEx+0x94>)
 8010a50:	4413      	add	r3, r2
 8010a52:	79fa      	ldrb	r2, [r7, #7]
 8010a54:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010a56:	4b11      	ldr	r3, [pc, #68]	; (8010a9c <FATFS_LinkDriverEx+0x94>)
 8010a58:	7a5b      	ldrb	r3, [r3, #9]
 8010a5a:	b2db      	uxtb	r3, r3
 8010a5c:	1c5a      	adds	r2, r3, #1
 8010a5e:	b2d1      	uxtb	r1, r2
 8010a60:	4a0e      	ldr	r2, [pc, #56]	; (8010a9c <FATFS_LinkDriverEx+0x94>)
 8010a62:	7251      	strb	r1, [r2, #9]
 8010a64:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010a66:	7dbb      	ldrb	r3, [r7, #22]
 8010a68:	3330      	adds	r3, #48	; 0x30
 8010a6a:	b2da      	uxtb	r2, r3
 8010a6c:	68bb      	ldr	r3, [r7, #8]
 8010a6e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	3301      	adds	r3, #1
 8010a74:	223a      	movs	r2, #58	; 0x3a
 8010a76:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010a78:	68bb      	ldr	r3, [r7, #8]
 8010a7a:	3302      	adds	r3, #2
 8010a7c:	222f      	movs	r2, #47	; 0x2f
 8010a7e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010a80:	68bb      	ldr	r3, [r7, #8]
 8010a82:	3303      	adds	r3, #3
 8010a84:	2200      	movs	r2, #0
 8010a86:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010a88:	2300      	movs	r3, #0
 8010a8a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a8e:	4618      	mov	r0, r3
 8010a90:	371c      	adds	r7, #28
 8010a92:	46bd      	mov	sp, r7
 8010a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a98:	4770      	bx	lr
 8010a9a:	bf00      	nop
 8010a9c:	20002efc 	.word	0x20002efc

08010aa0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b082      	sub	sp, #8
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
 8010aa8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010aaa:	2200      	movs	r2, #0
 8010aac:	6839      	ldr	r1, [r7, #0]
 8010aae:	6878      	ldr	r0, [r7, #4]
 8010ab0:	f7ff ffaa 	bl	8010a08 <FATFS_LinkDriverEx>
 8010ab4:	4603      	mov	r3, r0
}
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	3708      	adds	r7, #8
 8010aba:	46bd      	mov	sp, r7
 8010abc:	bd80      	pop	{r7, pc}
	...

08010ac0 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8010ac0:	b480      	push	{r7}
 8010ac2:	b085      	sub	sp, #20
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
 8010ac8:	460b      	mov	r3, r1
 8010aca:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8010acc:	2300      	movs	r3, #0
 8010ace:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8010ad0:	2301      	movs	r3, #1
 8010ad2:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8010ad4:	4b15      	ldr	r3, [pc, #84]	; (8010b2c <FATFS_UnLinkDriverEx+0x6c>)
 8010ad6:	7a5b      	ldrb	r3, [r3, #9]
 8010ad8:	b2db      	uxtb	r3, r3
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d01e      	beq.n	8010b1c <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	781b      	ldrb	r3, [r3, #0]
 8010ae2:	3b30      	subs	r3, #48	; 0x30
 8010ae4:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 8010ae6:	7bbb      	ldrb	r3, [r7, #14]
 8010ae8:	4a10      	ldr	r2, [pc, #64]	; (8010b2c <FATFS_UnLinkDriverEx+0x6c>)
 8010aea:	009b      	lsls	r3, r3, #2
 8010aec:	4413      	add	r3, r2
 8010aee:	685b      	ldr	r3, [r3, #4]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d013      	beq.n	8010b1c <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8010af4:	7bbb      	ldrb	r3, [r7, #14]
 8010af6:	4a0d      	ldr	r2, [pc, #52]	; (8010b2c <FATFS_UnLinkDriverEx+0x6c>)
 8010af8:	009b      	lsls	r3, r3, #2
 8010afa:	4413      	add	r3, r2
 8010afc:	2200      	movs	r2, #0
 8010afe:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8010b00:	7bbb      	ldrb	r3, [r7, #14]
 8010b02:	4a0a      	ldr	r2, [pc, #40]	; (8010b2c <FATFS_UnLinkDriverEx+0x6c>)
 8010b04:	4413      	add	r3, r2
 8010b06:	2200      	movs	r2, #0
 8010b08:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8010b0a:	4b08      	ldr	r3, [pc, #32]	; (8010b2c <FATFS_UnLinkDriverEx+0x6c>)
 8010b0c:	7a5b      	ldrb	r3, [r3, #9]
 8010b0e:	b2db      	uxtb	r3, r3
 8010b10:	3b01      	subs	r3, #1
 8010b12:	b2da      	uxtb	r2, r3
 8010b14:	4b05      	ldr	r3, [pc, #20]	; (8010b2c <FATFS_UnLinkDriverEx+0x6c>)
 8010b16:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8010b18:	2300      	movs	r3, #0
 8010b1a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8010b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b1e:	4618      	mov	r0, r3
 8010b20:	3714      	adds	r7, #20
 8010b22:	46bd      	mov	sp, r7
 8010b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b28:	4770      	bx	lr
 8010b2a:	bf00      	nop
 8010b2c:	20002efc 	.word	0x20002efc

08010b30 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b082      	sub	sp, #8
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8010b38:	2100      	movs	r1, #0
 8010b3a:	6878      	ldr	r0, [r7, #4]
 8010b3c:	f7ff ffc0 	bl	8010ac0 <FATFS_UnLinkDriverEx>
 8010b40:	4603      	mov	r3, r0
}
 8010b42:	4618      	mov	r0, r3
 8010b44:	3708      	adds	r7, #8
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd80      	pop	{r7, pc}
	...

08010b4c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010b4c:	b480      	push	{r7}
 8010b4e:	b085      	sub	sp, #20
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	4603      	mov	r3, r0
 8010b54:	6039      	str	r1, [r7, #0]
 8010b56:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010b58:	88fb      	ldrh	r3, [r7, #6]
 8010b5a:	2b7f      	cmp	r3, #127	; 0x7f
 8010b5c:	d802      	bhi.n	8010b64 <ff_convert+0x18>
		c = chr;
 8010b5e:	88fb      	ldrh	r3, [r7, #6]
 8010b60:	81fb      	strh	r3, [r7, #14]
 8010b62:	e025      	b.n	8010bb0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d00b      	beq.n	8010b82 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010b6a:	88fb      	ldrh	r3, [r7, #6]
 8010b6c:	2bff      	cmp	r3, #255	; 0xff
 8010b6e:	d805      	bhi.n	8010b7c <ff_convert+0x30>
 8010b70:	88fb      	ldrh	r3, [r7, #6]
 8010b72:	3b80      	subs	r3, #128	; 0x80
 8010b74:	4a12      	ldr	r2, [pc, #72]	; (8010bc0 <ff_convert+0x74>)
 8010b76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b7a:	e000      	b.n	8010b7e <ff_convert+0x32>
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	81fb      	strh	r3, [r7, #14]
 8010b80:	e016      	b.n	8010bb0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010b82:	2300      	movs	r3, #0
 8010b84:	81fb      	strh	r3, [r7, #14]
 8010b86:	e009      	b.n	8010b9c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010b88:	89fb      	ldrh	r3, [r7, #14]
 8010b8a:	4a0d      	ldr	r2, [pc, #52]	; (8010bc0 <ff_convert+0x74>)
 8010b8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b90:	88fa      	ldrh	r2, [r7, #6]
 8010b92:	429a      	cmp	r2, r3
 8010b94:	d006      	beq.n	8010ba4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010b96:	89fb      	ldrh	r3, [r7, #14]
 8010b98:	3301      	adds	r3, #1
 8010b9a:	81fb      	strh	r3, [r7, #14]
 8010b9c:	89fb      	ldrh	r3, [r7, #14]
 8010b9e:	2b7f      	cmp	r3, #127	; 0x7f
 8010ba0:	d9f2      	bls.n	8010b88 <ff_convert+0x3c>
 8010ba2:	e000      	b.n	8010ba6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010ba4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010ba6:	89fb      	ldrh	r3, [r7, #14]
 8010ba8:	3380      	adds	r3, #128	; 0x80
 8010baa:	b29b      	uxth	r3, r3
 8010bac:	b2db      	uxtb	r3, r3
 8010bae:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010bb0:	89fb      	ldrh	r3, [r7, #14]
}
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	3714      	adds	r7, #20
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bbc:	4770      	bx	lr
 8010bbe:	bf00      	nop
 8010bc0:	08011e80 	.word	0x08011e80

08010bc4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010bc4:	b480      	push	{r7}
 8010bc6:	b087      	sub	sp, #28
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	4603      	mov	r3, r0
 8010bcc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010bce:	88fb      	ldrh	r3, [r7, #6]
 8010bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010bd4:	d201      	bcs.n	8010bda <ff_wtoupper+0x16>
 8010bd6:	4b3e      	ldr	r3, [pc, #248]	; (8010cd0 <ff_wtoupper+0x10c>)
 8010bd8:	e000      	b.n	8010bdc <ff_wtoupper+0x18>
 8010bda:	4b3e      	ldr	r3, [pc, #248]	; (8010cd4 <ff_wtoupper+0x110>)
 8010bdc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	1c9a      	adds	r2, r3, #2
 8010be2:	617a      	str	r2, [r7, #20]
 8010be4:	881b      	ldrh	r3, [r3, #0]
 8010be6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010be8:	8a7b      	ldrh	r3, [r7, #18]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d068      	beq.n	8010cc0 <ff_wtoupper+0xfc>
 8010bee:	88fa      	ldrh	r2, [r7, #6]
 8010bf0:	8a7b      	ldrh	r3, [r7, #18]
 8010bf2:	429a      	cmp	r2, r3
 8010bf4:	d364      	bcc.n	8010cc0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010bf6:	697b      	ldr	r3, [r7, #20]
 8010bf8:	1c9a      	adds	r2, r3, #2
 8010bfa:	617a      	str	r2, [r7, #20]
 8010bfc:	881b      	ldrh	r3, [r3, #0]
 8010bfe:	823b      	strh	r3, [r7, #16]
 8010c00:	8a3b      	ldrh	r3, [r7, #16]
 8010c02:	0a1b      	lsrs	r3, r3, #8
 8010c04:	81fb      	strh	r3, [r7, #14]
 8010c06:	8a3b      	ldrh	r3, [r7, #16]
 8010c08:	b2db      	uxtb	r3, r3
 8010c0a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010c0c:	88fa      	ldrh	r2, [r7, #6]
 8010c0e:	8a79      	ldrh	r1, [r7, #18]
 8010c10:	8a3b      	ldrh	r3, [r7, #16]
 8010c12:	440b      	add	r3, r1
 8010c14:	429a      	cmp	r2, r3
 8010c16:	da49      	bge.n	8010cac <ff_wtoupper+0xe8>
			switch (cmd) {
 8010c18:	89fb      	ldrh	r3, [r7, #14]
 8010c1a:	2b08      	cmp	r3, #8
 8010c1c:	d84f      	bhi.n	8010cbe <ff_wtoupper+0xfa>
 8010c1e:	a201      	add	r2, pc, #4	; (adr r2, 8010c24 <ff_wtoupper+0x60>)
 8010c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c24:	08010c49 	.word	0x08010c49
 8010c28:	08010c5b 	.word	0x08010c5b
 8010c2c:	08010c71 	.word	0x08010c71
 8010c30:	08010c79 	.word	0x08010c79
 8010c34:	08010c81 	.word	0x08010c81
 8010c38:	08010c89 	.word	0x08010c89
 8010c3c:	08010c91 	.word	0x08010c91
 8010c40:	08010c99 	.word	0x08010c99
 8010c44:	08010ca1 	.word	0x08010ca1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010c48:	88fa      	ldrh	r2, [r7, #6]
 8010c4a:	8a7b      	ldrh	r3, [r7, #18]
 8010c4c:	1ad3      	subs	r3, r2, r3
 8010c4e:	005b      	lsls	r3, r3, #1
 8010c50:	697a      	ldr	r2, [r7, #20]
 8010c52:	4413      	add	r3, r2
 8010c54:	881b      	ldrh	r3, [r3, #0]
 8010c56:	80fb      	strh	r3, [r7, #6]
 8010c58:	e027      	b.n	8010caa <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010c5a:	88fa      	ldrh	r2, [r7, #6]
 8010c5c:	8a7b      	ldrh	r3, [r7, #18]
 8010c5e:	1ad3      	subs	r3, r2, r3
 8010c60:	b29b      	uxth	r3, r3
 8010c62:	f003 0301 	and.w	r3, r3, #1
 8010c66:	b29b      	uxth	r3, r3
 8010c68:	88fa      	ldrh	r2, [r7, #6]
 8010c6a:	1ad3      	subs	r3, r2, r3
 8010c6c:	80fb      	strh	r3, [r7, #6]
 8010c6e:	e01c      	b.n	8010caa <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010c70:	88fb      	ldrh	r3, [r7, #6]
 8010c72:	3b10      	subs	r3, #16
 8010c74:	80fb      	strh	r3, [r7, #6]
 8010c76:	e018      	b.n	8010caa <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010c78:	88fb      	ldrh	r3, [r7, #6]
 8010c7a:	3b20      	subs	r3, #32
 8010c7c:	80fb      	strh	r3, [r7, #6]
 8010c7e:	e014      	b.n	8010caa <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010c80:	88fb      	ldrh	r3, [r7, #6]
 8010c82:	3b30      	subs	r3, #48	; 0x30
 8010c84:	80fb      	strh	r3, [r7, #6]
 8010c86:	e010      	b.n	8010caa <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010c88:	88fb      	ldrh	r3, [r7, #6]
 8010c8a:	3b1a      	subs	r3, #26
 8010c8c:	80fb      	strh	r3, [r7, #6]
 8010c8e:	e00c      	b.n	8010caa <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010c90:	88fb      	ldrh	r3, [r7, #6]
 8010c92:	3308      	adds	r3, #8
 8010c94:	80fb      	strh	r3, [r7, #6]
 8010c96:	e008      	b.n	8010caa <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010c98:	88fb      	ldrh	r3, [r7, #6]
 8010c9a:	3b50      	subs	r3, #80	; 0x50
 8010c9c:	80fb      	strh	r3, [r7, #6]
 8010c9e:	e004      	b.n	8010caa <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010ca0:	88fb      	ldrh	r3, [r7, #6]
 8010ca2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010ca6:	80fb      	strh	r3, [r7, #6]
 8010ca8:	bf00      	nop
			}
			break;
 8010caa:	e008      	b.n	8010cbe <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010cac:	89fb      	ldrh	r3, [r7, #14]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d195      	bne.n	8010bde <ff_wtoupper+0x1a>
 8010cb2:	8a3b      	ldrh	r3, [r7, #16]
 8010cb4:	005b      	lsls	r3, r3, #1
 8010cb6:	697a      	ldr	r2, [r7, #20]
 8010cb8:	4413      	add	r3, r2
 8010cba:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010cbc:	e78f      	b.n	8010bde <ff_wtoupper+0x1a>
			break;
 8010cbe:	bf00      	nop
	}

	return chr;
 8010cc0:	88fb      	ldrh	r3, [r7, #6]
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	371c      	adds	r7, #28
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ccc:	4770      	bx	lr
 8010cce:	bf00      	nop
 8010cd0:	08011f80 	.word	0x08011f80
 8010cd4:	08012174 	.word	0x08012174

08010cd8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010cdc:	2201      	movs	r2, #1
 8010cde:	490e      	ldr	r1, [pc, #56]	; (8010d18 <MX_USB_HOST_Init+0x40>)
 8010ce0:	480e      	ldr	r0, [pc, #56]	; (8010d1c <MX_USB_HOST_Init+0x44>)
 8010ce2:	f7fa fe77 	bl	800b9d4 <USBH_Init>
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d001      	beq.n	8010cf0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010cec:	f7f2 fb8f 	bl	800340e <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8010cf0:	490b      	ldr	r1, [pc, #44]	; (8010d20 <MX_USB_HOST_Init+0x48>)
 8010cf2:	480a      	ldr	r0, [pc, #40]	; (8010d1c <MX_USB_HOST_Init+0x44>)
 8010cf4:	f7fa fefc 	bl	800baf0 <USBH_RegisterClass>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d001      	beq.n	8010d02 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010cfe:	f7f2 fb86 	bl	800340e <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010d02:	4806      	ldr	r0, [pc, #24]	; (8010d1c <MX_USB_HOST_Init+0x44>)
 8010d04:	f7fa ff80 	bl	800bc08 <USBH_Start>
 8010d08:	4603      	mov	r3, r0
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d001      	beq.n	8010d12 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010d0e:	f7f2 fb7e 	bl	800340e <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010d12:	bf00      	nop
 8010d14:	bd80      	pop	{r7, pc}
 8010d16:	bf00      	nop
 8010d18:	08010d39 	.word	0x08010d39
 8010d1c:	20002f08 	.word	0x20002f08
 8010d20:	20000040 	.word	0x20000040

08010d24 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8010d28:	4802      	ldr	r0, [pc, #8]	; (8010d34 <MX_USB_HOST_Process+0x10>)
 8010d2a:	f7fa ff7d 	bl	800bc28 <USBH_Process>
}
 8010d2e:	bf00      	nop
 8010d30:	bd80      	pop	{r7, pc}
 8010d32:	bf00      	nop
 8010d34:	20002f08 	.word	0x20002f08

08010d38 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010d38:	b480      	push	{r7}
 8010d3a:	b083      	sub	sp, #12
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
 8010d40:	460b      	mov	r3, r1
 8010d42:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010d44:	78fb      	ldrb	r3, [r7, #3]
 8010d46:	3b01      	subs	r3, #1
 8010d48:	2b04      	cmp	r3, #4
 8010d4a:	d819      	bhi.n	8010d80 <USBH_UserProcess+0x48>
 8010d4c:	a201      	add	r2, pc, #4	; (adr r2, 8010d54 <USBH_UserProcess+0x1c>)
 8010d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d52:	bf00      	nop
 8010d54:	08010d81 	.word	0x08010d81
 8010d58:	08010d71 	.word	0x08010d71
 8010d5c:	08010d81 	.word	0x08010d81
 8010d60:	08010d79 	.word	0x08010d79
 8010d64:	08010d69 	.word	0x08010d69
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010d68:	4b09      	ldr	r3, [pc, #36]	; (8010d90 <USBH_UserProcess+0x58>)
 8010d6a:	2203      	movs	r2, #3
 8010d6c:	701a      	strb	r2, [r3, #0]
  break;
 8010d6e:	e008      	b.n	8010d82 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010d70:	4b07      	ldr	r3, [pc, #28]	; (8010d90 <USBH_UserProcess+0x58>)
 8010d72:	2202      	movs	r2, #2
 8010d74:	701a      	strb	r2, [r3, #0]
  break;
 8010d76:	e004      	b.n	8010d82 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010d78:	4b05      	ldr	r3, [pc, #20]	; (8010d90 <USBH_UserProcess+0x58>)
 8010d7a:	2201      	movs	r2, #1
 8010d7c:	701a      	strb	r2, [r3, #0]
  break;
 8010d7e:	e000      	b.n	8010d82 <USBH_UserProcess+0x4a>

  default:
  break;
 8010d80:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010d82:	bf00      	nop
 8010d84:	370c      	adds	r7, #12
 8010d86:	46bd      	mov	sp, r7
 8010d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8c:	4770      	bx	lr
 8010d8e:	bf00      	nop
 8010d90:	200032e0 	.word	0x200032e0

08010d94 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b08a      	sub	sp, #40	; 0x28
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010d9c:	f107 0314 	add.w	r3, r7, #20
 8010da0:	2200      	movs	r2, #0
 8010da2:	601a      	str	r2, [r3, #0]
 8010da4:	605a      	str	r2, [r3, #4]
 8010da6:	609a      	str	r2, [r3, #8]
 8010da8:	60da      	str	r2, [r3, #12]
 8010daa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010db4:	d147      	bne.n	8010e46 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010db6:	2300      	movs	r3, #0
 8010db8:	613b      	str	r3, [r7, #16]
 8010dba:	4b25      	ldr	r3, [pc, #148]	; (8010e50 <HAL_HCD_MspInit+0xbc>)
 8010dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dbe:	4a24      	ldr	r2, [pc, #144]	; (8010e50 <HAL_HCD_MspInit+0xbc>)
 8010dc0:	f043 0301 	orr.w	r3, r3, #1
 8010dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8010dc6:	4b22      	ldr	r3, [pc, #136]	; (8010e50 <HAL_HCD_MspInit+0xbc>)
 8010dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dca:	f003 0301 	and.w	r3, r3, #1
 8010dce:	613b      	str	r3, [r7, #16]
 8010dd0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8010dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8010de0:	f107 0314 	add.w	r3, r7, #20
 8010de4:	4619      	mov	r1, r3
 8010de6:	481b      	ldr	r0, [pc, #108]	; (8010e54 <HAL_HCD_MspInit+0xc0>)
 8010de8:	f7f4 f9f8 	bl	80051dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8010dec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8010df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010df2:	2302      	movs	r3, #2
 8010df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010df6:	2300      	movs	r3, #0
 8010df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010dfe:	230a      	movs	r3, #10
 8010e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010e02:	f107 0314 	add.w	r3, r7, #20
 8010e06:	4619      	mov	r1, r3
 8010e08:	4812      	ldr	r0, [pc, #72]	; (8010e54 <HAL_HCD_MspInit+0xc0>)
 8010e0a:	f7f4 f9e7 	bl	80051dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010e0e:	4b10      	ldr	r3, [pc, #64]	; (8010e50 <HAL_HCD_MspInit+0xbc>)
 8010e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e12:	4a0f      	ldr	r2, [pc, #60]	; (8010e50 <HAL_HCD_MspInit+0xbc>)
 8010e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e18:	6353      	str	r3, [r2, #52]	; 0x34
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	60fb      	str	r3, [r7, #12]
 8010e1e:	4b0c      	ldr	r3, [pc, #48]	; (8010e50 <HAL_HCD_MspInit+0xbc>)
 8010e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e22:	4a0b      	ldr	r2, [pc, #44]	; (8010e50 <HAL_HCD_MspInit+0xbc>)
 8010e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010e28:	6453      	str	r3, [r2, #68]	; 0x44
 8010e2a:	4b09      	ldr	r3, [pc, #36]	; (8010e50 <HAL_HCD_MspInit+0xbc>)
 8010e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010e32:	60fb      	str	r3, [r7, #12]
 8010e34:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010e36:	2200      	movs	r2, #0
 8010e38:	2100      	movs	r1, #0
 8010e3a:	2043      	movs	r0, #67	; 0x43
 8010e3c:	f7f3 fd95 	bl	800496a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010e40:	2043      	movs	r0, #67	; 0x43
 8010e42:	f7f3 fdae 	bl	80049a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010e46:	bf00      	nop
 8010e48:	3728      	adds	r7, #40	; 0x28
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	bd80      	pop	{r7, pc}
 8010e4e:	bf00      	nop
 8010e50:	40023800 	.word	0x40023800
 8010e54:	40020000 	.word	0x40020000

08010e58 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b082      	sub	sp, #8
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7fb fabd 	bl	800c3e6 <USBH_LL_IncTimer>
}
 8010e6c:	bf00      	nop
 8010e6e:	3708      	adds	r7, #8
 8010e70:	46bd      	mov	sp, r7
 8010e72:	bd80      	pop	{r7, pc}

08010e74 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b082      	sub	sp, #8
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010e82:	4618      	mov	r0, r3
 8010e84:	f7fb faf5 	bl	800c472 <USBH_LL_Connect>
}
 8010e88:	bf00      	nop
 8010e8a:	3708      	adds	r7, #8
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd80      	pop	{r7, pc}

08010e90 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b082      	sub	sp, #8
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f7fb fafe 	bl	800c4a0 <USBH_LL_Disconnect>
}
 8010ea4:	bf00      	nop
 8010ea6:	3708      	adds	r7, #8
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd80      	pop	{r7, pc}

08010eac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010eac:	b480      	push	{r7}
 8010eae:	b083      	sub	sp, #12
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
 8010eb4:	460b      	mov	r3, r1
 8010eb6:	70fb      	strb	r3, [r7, #3]
 8010eb8:	4613      	mov	r3, r2
 8010eba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8010ebc:	bf00      	nop
 8010ebe:	370c      	adds	r7, #12
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec6:	4770      	bx	lr

08010ec8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b082      	sub	sp, #8
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f7fb faaf 	bl	800c43a <USBH_LL_PortEnabled>
}
 8010edc:	bf00      	nop
 8010ede:	3708      	adds	r7, #8
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}

08010ee4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b082      	sub	sp, #8
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f7fb faaf 	bl	800c456 <USBH_LL_PortDisabled>
}
 8010ef8:	bf00      	nop
 8010efa:	3708      	adds	r7, #8
 8010efc:	46bd      	mov	sp, r7
 8010efe:	bd80      	pop	{r7, pc}

08010f00 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b082      	sub	sp, #8
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010f0e:	2b01      	cmp	r3, #1
 8010f10:	d12a      	bne.n	8010f68 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010f12:	4a18      	ldr	r2, [pc, #96]	; (8010f74 <USBH_LL_Init+0x74>)
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	4a15      	ldr	r2, [pc, #84]	; (8010f74 <USBH_LL_Init+0x74>)
 8010f1e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010f22:	4b14      	ldr	r3, [pc, #80]	; (8010f74 <USBH_LL_Init+0x74>)
 8010f24:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010f28:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010f2a:	4b12      	ldr	r3, [pc, #72]	; (8010f74 <USBH_LL_Init+0x74>)
 8010f2c:	2208      	movs	r2, #8
 8010f2e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010f30:	4b10      	ldr	r3, [pc, #64]	; (8010f74 <USBH_LL_Init+0x74>)
 8010f32:	2201      	movs	r2, #1
 8010f34:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010f36:	4b0f      	ldr	r3, [pc, #60]	; (8010f74 <USBH_LL_Init+0x74>)
 8010f38:	2200      	movs	r2, #0
 8010f3a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010f3c:	4b0d      	ldr	r3, [pc, #52]	; (8010f74 <USBH_LL_Init+0x74>)
 8010f3e:	2202      	movs	r2, #2
 8010f40:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010f42:	4b0c      	ldr	r3, [pc, #48]	; (8010f74 <USBH_LL_Init+0x74>)
 8010f44:	2200      	movs	r2, #0
 8010f46:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010f48:	480a      	ldr	r0, [pc, #40]	; (8010f74 <USBH_LL_Init+0x74>)
 8010f4a:	f7f4 fb16 	bl	800557a <HAL_HCD_Init>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d001      	beq.n	8010f58 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010f54:	f7f2 fa5b 	bl	800340e <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010f58:	4806      	ldr	r0, [pc, #24]	; (8010f74 <USBH_LL_Init+0x74>)
 8010f5a:	f7f4 fefa 	bl	8005d52 <HAL_HCD_GetCurrentFrame>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	4619      	mov	r1, r3
 8010f62:	6878      	ldr	r0, [r7, #4]
 8010f64:	f7fb fa30 	bl	800c3c8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010f68:	2300      	movs	r3, #0
}
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	3708      	adds	r7, #8
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}
 8010f72:	bf00      	nop
 8010f74:	200032e4 	.word	0x200032e4

08010f78 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b084      	sub	sp, #16
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f80:	2300      	movs	r3, #0
 8010f82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010f84:	2300      	movs	r3, #0
 8010f86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f7f4 fe69 	bl	8005c66 <HAL_HCD_Start>
 8010f94:	4603      	mov	r3, r0
 8010f96:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010f98:	7bfb      	ldrb	r3, [r7, #15]
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	f000 f95c 	bl	8011258 <USBH_Get_USB_Status>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010fa4:	7bbb      	ldrb	r3, [r7, #14]
}
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	3710      	adds	r7, #16
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}

08010fae <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010fae:	b580      	push	{r7, lr}
 8010fb0:	b084      	sub	sp, #16
 8010fb2:	af00      	add	r7, sp, #0
 8010fb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010fba:	2300      	movs	r3, #0
 8010fbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f7f4 fe71 	bl	8005cac <HAL_HCD_Stop>
 8010fca:	4603      	mov	r3, r0
 8010fcc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010fce:	7bfb      	ldrb	r3, [r7, #15]
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	f000 f941 	bl	8011258 <USBH_Get_USB_Status>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010fda:	7bbb      	ldrb	r3, [r7, #14]
}
 8010fdc:	4618      	mov	r0, r3
 8010fde:	3710      	adds	r7, #16
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bd80      	pop	{r7, pc}

08010fe4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b084      	sub	sp, #16
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010fec:	2301      	movs	r3, #1
 8010fee:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	f7f4 feb9 	bl	8005d6e <HAL_HCD_GetCurrentSpeed>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	2b02      	cmp	r3, #2
 8011000:	d00c      	beq.n	801101c <USBH_LL_GetSpeed+0x38>
 8011002:	2b02      	cmp	r3, #2
 8011004:	d80d      	bhi.n	8011022 <USBH_LL_GetSpeed+0x3e>
 8011006:	2b00      	cmp	r3, #0
 8011008:	d002      	beq.n	8011010 <USBH_LL_GetSpeed+0x2c>
 801100a:	2b01      	cmp	r3, #1
 801100c:	d003      	beq.n	8011016 <USBH_LL_GetSpeed+0x32>
 801100e:	e008      	b.n	8011022 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011010:	2300      	movs	r3, #0
 8011012:	73fb      	strb	r3, [r7, #15]
    break;
 8011014:	e008      	b.n	8011028 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8011016:	2301      	movs	r3, #1
 8011018:	73fb      	strb	r3, [r7, #15]
    break;
 801101a:	e005      	b.n	8011028 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801101c:	2302      	movs	r3, #2
 801101e:	73fb      	strb	r3, [r7, #15]
    break;
 8011020:	e002      	b.n	8011028 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8011022:	2301      	movs	r3, #1
 8011024:	73fb      	strb	r3, [r7, #15]
    break;
 8011026:	bf00      	nop
  }
  return  speed;
 8011028:	7bfb      	ldrb	r3, [r7, #15]
}
 801102a:	4618      	mov	r0, r3
 801102c:	3710      	adds	r7, #16
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}

08011032 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8011032:	b580      	push	{r7, lr}
 8011034:	b084      	sub	sp, #16
 8011036:	af00      	add	r7, sp, #0
 8011038:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801103a:	2300      	movs	r3, #0
 801103c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801103e:	2300      	movs	r3, #0
 8011040:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011048:	4618      	mov	r0, r3
 801104a:	f7f4 fe4c 	bl	8005ce6 <HAL_HCD_ResetPort>
 801104e:	4603      	mov	r3, r0
 8011050:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011052:	7bfb      	ldrb	r3, [r7, #15]
 8011054:	4618      	mov	r0, r3
 8011056:	f000 f8ff 	bl	8011258 <USBH_Get_USB_Status>
 801105a:	4603      	mov	r3, r0
 801105c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801105e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011060:	4618      	mov	r0, r3
 8011062:	3710      	adds	r7, #16
 8011064:	46bd      	mov	sp, r7
 8011066:	bd80      	pop	{r7, pc}

08011068 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b082      	sub	sp, #8
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
 8011070:	460b      	mov	r3, r1
 8011072:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801107a:	78fa      	ldrb	r2, [r7, #3]
 801107c:	4611      	mov	r1, r2
 801107e:	4618      	mov	r0, r3
 8011080:	f7f4 fe53 	bl	8005d2a <HAL_HCD_HC_GetXferCount>
 8011084:	4603      	mov	r3, r0
}
 8011086:	4618      	mov	r0, r3
 8011088:	3708      	adds	r7, #8
 801108a:	46bd      	mov	sp, r7
 801108c:	bd80      	pop	{r7, pc}

0801108e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801108e:	b590      	push	{r4, r7, lr}
 8011090:	b089      	sub	sp, #36	; 0x24
 8011092:	af04      	add	r7, sp, #16
 8011094:	6078      	str	r0, [r7, #4]
 8011096:	4608      	mov	r0, r1
 8011098:	4611      	mov	r1, r2
 801109a:	461a      	mov	r2, r3
 801109c:	4603      	mov	r3, r0
 801109e:	70fb      	strb	r3, [r7, #3]
 80110a0:	460b      	mov	r3, r1
 80110a2:	70bb      	strb	r3, [r7, #2]
 80110a4:	4613      	mov	r3, r2
 80110a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110a8:	2300      	movs	r3, #0
 80110aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80110ac:	2300      	movs	r3, #0
 80110ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80110b6:	787c      	ldrb	r4, [r7, #1]
 80110b8:	78ba      	ldrb	r2, [r7, #2]
 80110ba:	78f9      	ldrb	r1, [r7, #3]
 80110bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80110be:	9302      	str	r3, [sp, #8]
 80110c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80110c4:	9301      	str	r3, [sp, #4]
 80110c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80110ca:	9300      	str	r3, [sp, #0]
 80110cc:	4623      	mov	r3, r4
 80110ce:	f7f4 fab6 	bl	800563e <HAL_HCD_HC_Init>
 80110d2:	4603      	mov	r3, r0
 80110d4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80110d6:	7bfb      	ldrb	r3, [r7, #15]
 80110d8:	4618      	mov	r0, r3
 80110da:	f000 f8bd 	bl	8011258 <USBH_Get_USB_Status>
 80110de:	4603      	mov	r3, r0
 80110e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80110e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	3714      	adds	r7, #20
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bd90      	pop	{r4, r7, pc}

080110ec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b084      	sub	sp, #16
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
 80110f4:	460b      	mov	r3, r1
 80110f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110f8:	2300      	movs	r3, #0
 80110fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80110fc:	2300      	movs	r3, #0
 80110fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011106:	78fa      	ldrb	r2, [r7, #3]
 8011108:	4611      	mov	r1, r2
 801110a:	4618      	mov	r0, r3
 801110c:	f7f4 fb26 	bl	800575c <HAL_HCD_HC_Halt>
 8011110:	4603      	mov	r3, r0
 8011112:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011114:	7bfb      	ldrb	r3, [r7, #15]
 8011116:	4618      	mov	r0, r3
 8011118:	f000 f89e 	bl	8011258 <USBH_Get_USB_Status>
 801111c:	4603      	mov	r3, r0
 801111e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011120:	7bbb      	ldrb	r3, [r7, #14]
}
 8011122:	4618      	mov	r0, r3
 8011124:	3710      	adds	r7, #16
 8011126:	46bd      	mov	sp, r7
 8011128:	bd80      	pop	{r7, pc}

0801112a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801112a:	b590      	push	{r4, r7, lr}
 801112c:	b089      	sub	sp, #36	; 0x24
 801112e:	af04      	add	r7, sp, #16
 8011130:	6078      	str	r0, [r7, #4]
 8011132:	4608      	mov	r0, r1
 8011134:	4611      	mov	r1, r2
 8011136:	461a      	mov	r2, r3
 8011138:	4603      	mov	r3, r0
 801113a:	70fb      	strb	r3, [r7, #3]
 801113c:	460b      	mov	r3, r1
 801113e:	70bb      	strb	r3, [r7, #2]
 8011140:	4613      	mov	r3, r2
 8011142:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011144:	2300      	movs	r3, #0
 8011146:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011148:	2300      	movs	r3, #0
 801114a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011152:	787c      	ldrb	r4, [r7, #1]
 8011154:	78ba      	ldrb	r2, [r7, #2]
 8011156:	78f9      	ldrb	r1, [r7, #3]
 8011158:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801115c:	9303      	str	r3, [sp, #12]
 801115e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011160:	9302      	str	r3, [sp, #8]
 8011162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011164:	9301      	str	r3, [sp, #4]
 8011166:	f897 3020 	ldrb.w	r3, [r7, #32]
 801116a:	9300      	str	r3, [sp, #0]
 801116c:	4623      	mov	r3, r4
 801116e:	f7f4 fb19 	bl	80057a4 <HAL_HCD_HC_SubmitRequest>
 8011172:	4603      	mov	r3, r0
 8011174:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8011176:	7bfb      	ldrb	r3, [r7, #15]
 8011178:	4618      	mov	r0, r3
 801117a:	f000 f86d 	bl	8011258 <USBH_Get_USB_Status>
 801117e:	4603      	mov	r3, r0
 8011180:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011182:	7bbb      	ldrb	r3, [r7, #14]
}
 8011184:	4618      	mov	r0, r3
 8011186:	3714      	adds	r7, #20
 8011188:	46bd      	mov	sp, r7
 801118a:	bd90      	pop	{r4, r7, pc}

0801118c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b082      	sub	sp, #8
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
 8011194:	460b      	mov	r3, r1
 8011196:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801119e:	78fa      	ldrb	r2, [r7, #3]
 80111a0:	4611      	mov	r1, r2
 80111a2:	4618      	mov	r0, r3
 80111a4:	f7f4 fdad 	bl	8005d02 <HAL_HCD_HC_GetURBState>
 80111a8:	4603      	mov	r3, r0
}
 80111aa:	4618      	mov	r0, r3
 80111ac:	3708      	adds	r7, #8
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}

080111b2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80111b2:	b580      	push	{r7, lr}
 80111b4:	b082      	sub	sp, #8
 80111b6:	af00      	add	r7, sp, #0
 80111b8:	6078      	str	r0, [r7, #4]
 80111ba:	460b      	mov	r3, r1
 80111bc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80111c4:	2b01      	cmp	r3, #1
 80111c6:	d103      	bne.n	80111d0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80111c8:	78fb      	ldrb	r3, [r7, #3]
 80111ca:	4618      	mov	r0, r3
 80111cc:	f000 f870 	bl	80112b0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80111d0:	20c8      	movs	r0, #200	; 0xc8
 80111d2:	f7f3 facb 	bl	800476c <HAL_Delay>
  return USBH_OK;
 80111d6:	2300      	movs	r3, #0
}
 80111d8:	4618      	mov	r0, r3
 80111da:	3708      	adds	r7, #8
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}

080111e0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80111e0:	b480      	push	{r7}
 80111e2:	b085      	sub	sp, #20
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
 80111e8:	460b      	mov	r3, r1
 80111ea:	70fb      	strb	r3, [r7, #3]
 80111ec:	4613      	mov	r3, r2
 80111ee:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80111f6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80111f8:	78fb      	ldrb	r3, [r7, #3]
 80111fa:	68fa      	ldr	r2, [r7, #12]
 80111fc:	212c      	movs	r1, #44	; 0x2c
 80111fe:	fb01 f303 	mul.w	r3, r1, r3
 8011202:	4413      	add	r3, r2
 8011204:	333b      	adds	r3, #59	; 0x3b
 8011206:	781b      	ldrb	r3, [r3, #0]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d009      	beq.n	8011220 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801120c:	78fb      	ldrb	r3, [r7, #3]
 801120e:	68fa      	ldr	r2, [r7, #12]
 8011210:	212c      	movs	r1, #44	; 0x2c
 8011212:	fb01 f303 	mul.w	r3, r1, r3
 8011216:	4413      	add	r3, r2
 8011218:	3354      	adds	r3, #84	; 0x54
 801121a:	78ba      	ldrb	r2, [r7, #2]
 801121c:	701a      	strb	r2, [r3, #0]
 801121e:	e008      	b.n	8011232 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8011220:	78fb      	ldrb	r3, [r7, #3]
 8011222:	68fa      	ldr	r2, [r7, #12]
 8011224:	212c      	movs	r1, #44	; 0x2c
 8011226:	fb01 f303 	mul.w	r3, r1, r3
 801122a:	4413      	add	r3, r2
 801122c:	3355      	adds	r3, #85	; 0x55
 801122e:	78ba      	ldrb	r2, [r7, #2]
 8011230:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8011232:	2300      	movs	r3, #0
}
 8011234:	4618      	mov	r0, r3
 8011236:	3714      	adds	r7, #20
 8011238:	46bd      	mov	sp, r7
 801123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123e:	4770      	bx	lr

08011240 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b082      	sub	sp, #8
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f7f3 fa8f 	bl	800476c <HAL_Delay>
}
 801124e:	bf00      	nop
 8011250:	3708      	adds	r7, #8
 8011252:	46bd      	mov	sp, r7
 8011254:	bd80      	pop	{r7, pc}
	...

08011258 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011258:	b480      	push	{r7}
 801125a:	b085      	sub	sp, #20
 801125c:	af00      	add	r7, sp, #0
 801125e:	4603      	mov	r3, r0
 8011260:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011262:	2300      	movs	r3, #0
 8011264:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011266:	79fb      	ldrb	r3, [r7, #7]
 8011268:	2b03      	cmp	r3, #3
 801126a:	d817      	bhi.n	801129c <USBH_Get_USB_Status+0x44>
 801126c:	a201      	add	r2, pc, #4	; (adr r2, 8011274 <USBH_Get_USB_Status+0x1c>)
 801126e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011272:	bf00      	nop
 8011274:	08011285 	.word	0x08011285
 8011278:	0801128b 	.word	0x0801128b
 801127c:	08011291 	.word	0x08011291
 8011280:	08011297 	.word	0x08011297
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011284:	2300      	movs	r3, #0
 8011286:	73fb      	strb	r3, [r7, #15]
    break;
 8011288:	e00b      	b.n	80112a2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801128a:	2302      	movs	r3, #2
 801128c:	73fb      	strb	r3, [r7, #15]
    break;
 801128e:	e008      	b.n	80112a2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011290:	2301      	movs	r3, #1
 8011292:	73fb      	strb	r3, [r7, #15]
    break;
 8011294:	e005      	b.n	80112a2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011296:	2302      	movs	r3, #2
 8011298:	73fb      	strb	r3, [r7, #15]
    break;
 801129a:	e002      	b.n	80112a2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801129c:	2302      	movs	r3, #2
 801129e:	73fb      	strb	r3, [r7, #15]
    break;
 80112a0:	bf00      	nop
  }
  return usb_status;
 80112a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80112a4:	4618      	mov	r0, r3
 80112a6:	3714      	adds	r7, #20
 80112a8:	46bd      	mov	sp, r7
 80112aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ae:	4770      	bx	lr

080112b0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b084      	sub	sp, #16
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	4603      	mov	r3, r0
 80112b8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80112ba:	79fb      	ldrb	r3, [r7, #7]
 80112bc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80112be:	79fb      	ldrb	r3, [r7, #7]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d102      	bne.n	80112ca <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80112c4:	2300      	movs	r3, #0
 80112c6:	73fb      	strb	r3, [r7, #15]
 80112c8:	e001      	b.n	80112ce <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80112ca:	2301      	movs	r3, #1
 80112cc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80112ce:	7bfb      	ldrb	r3, [r7, #15]
 80112d0:	461a      	mov	r2, r3
 80112d2:	2101      	movs	r1, #1
 80112d4:	4803      	ldr	r0, [pc, #12]	; (80112e4 <MX_DriverVbusFS+0x34>)
 80112d6:	f7f4 f91d 	bl	8005514 <HAL_GPIO_WritePin>
}
 80112da:	bf00      	nop
 80112dc:	3710      	adds	r7, #16
 80112de:	46bd      	mov	sp, r7
 80112e0:	bd80      	pop	{r7, pc}
 80112e2:	bf00      	nop
 80112e4:	40020800 	.word	0x40020800

080112e8 <__errno>:
 80112e8:	4b01      	ldr	r3, [pc, #4]	; (80112f0 <__errno+0x8>)
 80112ea:	6818      	ldr	r0, [r3, #0]
 80112ec:	4770      	bx	lr
 80112ee:	bf00      	nop
 80112f0:	20000060 	.word	0x20000060

080112f4 <__libc_init_array>:
 80112f4:	b570      	push	{r4, r5, r6, lr}
 80112f6:	4d0d      	ldr	r5, [pc, #52]	; (801132c <__libc_init_array+0x38>)
 80112f8:	4c0d      	ldr	r4, [pc, #52]	; (8011330 <__libc_init_array+0x3c>)
 80112fa:	1b64      	subs	r4, r4, r5
 80112fc:	10a4      	asrs	r4, r4, #2
 80112fe:	2600      	movs	r6, #0
 8011300:	42a6      	cmp	r6, r4
 8011302:	d109      	bne.n	8011318 <__libc_init_array+0x24>
 8011304:	4d0b      	ldr	r5, [pc, #44]	; (8011334 <__libc_init_array+0x40>)
 8011306:	4c0c      	ldr	r4, [pc, #48]	; (8011338 <__libc_init_array+0x44>)
 8011308:	f000 fcae 	bl	8011c68 <_init>
 801130c:	1b64      	subs	r4, r4, r5
 801130e:	10a4      	asrs	r4, r4, #2
 8011310:	2600      	movs	r6, #0
 8011312:	42a6      	cmp	r6, r4
 8011314:	d105      	bne.n	8011322 <__libc_init_array+0x2e>
 8011316:	bd70      	pop	{r4, r5, r6, pc}
 8011318:	f855 3b04 	ldr.w	r3, [r5], #4
 801131c:	4798      	blx	r3
 801131e:	3601      	adds	r6, #1
 8011320:	e7ee      	b.n	8011300 <__libc_init_array+0xc>
 8011322:	f855 3b04 	ldr.w	r3, [r5], #4
 8011326:	4798      	blx	r3
 8011328:	3601      	adds	r6, #1
 801132a:	e7f2      	b.n	8011312 <__libc_init_array+0x1e>
 801132c:	0801226c 	.word	0x0801226c
 8011330:	0801226c 	.word	0x0801226c
 8011334:	0801226c 	.word	0x0801226c
 8011338:	08012270 	.word	0x08012270

0801133c <malloc>:
 801133c:	4b02      	ldr	r3, [pc, #8]	; (8011348 <malloc+0xc>)
 801133e:	4601      	mov	r1, r0
 8011340:	6818      	ldr	r0, [r3, #0]
 8011342:	f000 b87f 	b.w	8011444 <_malloc_r>
 8011346:	bf00      	nop
 8011348:	20000060 	.word	0x20000060

0801134c <free>:
 801134c:	4b02      	ldr	r3, [pc, #8]	; (8011358 <free+0xc>)
 801134e:	4601      	mov	r1, r0
 8011350:	6818      	ldr	r0, [r3, #0]
 8011352:	f000 b80b 	b.w	801136c <_free_r>
 8011356:	bf00      	nop
 8011358:	20000060 	.word	0x20000060

0801135c <memset>:
 801135c:	4402      	add	r2, r0
 801135e:	4603      	mov	r3, r0
 8011360:	4293      	cmp	r3, r2
 8011362:	d100      	bne.n	8011366 <memset+0xa>
 8011364:	4770      	bx	lr
 8011366:	f803 1b01 	strb.w	r1, [r3], #1
 801136a:	e7f9      	b.n	8011360 <memset+0x4>

0801136c <_free_r>:
 801136c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801136e:	2900      	cmp	r1, #0
 8011370:	d044      	beq.n	80113fc <_free_r+0x90>
 8011372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011376:	9001      	str	r0, [sp, #4]
 8011378:	2b00      	cmp	r3, #0
 801137a:	f1a1 0404 	sub.w	r4, r1, #4
 801137e:	bfb8      	it	lt
 8011380:	18e4      	addlt	r4, r4, r3
 8011382:	f000 f913 	bl	80115ac <__malloc_lock>
 8011386:	4a1e      	ldr	r2, [pc, #120]	; (8011400 <_free_r+0x94>)
 8011388:	9801      	ldr	r0, [sp, #4]
 801138a:	6813      	ldr	r3, [r2, #0]
 801138c:	b933      	cbnz	r3, 801139c <_free_r+0x30>
 801138e:	6063      	str	r3, [r4, #4]
 8011390:	6014      	str	r4, [r2, #0]
 8011392:	b003      	add	sp, #12
 8011394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011398:	f000 b90e 	b.w	80115b8 <__malloc_unlock>
 801139c:	42a3      	cmp	r3, r4
 801139e:	d908      	bls.n	80113b2 <_free_r+0x46>
 80113a0:	6825      	ldr	r5, [r4, #0]
 80113a2:	1961      	adds	r1, r4, r5
 80113a4:	428b      	cmp	r3, r1
 80113a6:	bf01      	itttt	eq
 80113a8:	6819      	ldreq	r1, [r3, #0]
 80113aa:	685b      	ldreq	r3, [r3, #4]
 80113ac:	1949      	addeq	r1, r1, r5
 80113ae:	6021      	streq	r1, [r4, #0]
 80113b0:	e7ed      	b.n	801138e <_free_r+0x22>
 80113b2:	461a      	mov	r2, r3
 80113b4:	685b      	ldr	r3, [r3, #4]
 80113b6:	b10b      	cbz	r3, 80113bc <_free_r+0x50>
 80113b8:	42a3      	cmp	r3, r4
 80113ba:	d9fa      	bls.n	80113b2 <_free_r+0x46>
 80113bc:	6811      	ldr	r1, [r2, #0]
 80113be:	1855      	adds	r5, r2, r1
 80113c0:	42a5      	cmp	r5, r4
 80113c2:	d10b      	bne.n	80113dc <_free_r+0x70>
 80113c4:	6824      	ldr	r4, [r4, #0]
 80113c6:	4421      	add	r1, r4
 80113c8:	1854      	adds	r4, r2, r1
 80113ca:	42a3      	cmp	r3, r4
 80113cc:	6011      	str	r1, [r2, #0]
 80113ce:	d1e0      	bne.n	8011392 <_free_r+0x26>
 80113d0:	681c      	ldr	r4, [r3, #0]
 80113d2:	685b      	ldr	r3, [r3, #4]
 80113d4:	6053      	str	r3, [r2, #4]
 80113d6:	4421      	add	r1, r4
 80113d8:	6011      	str	r1, [r2, #0]
 80113da:	e7da      	b.n	8011392 <_free_r+0x26>
 80113dc:	d902      	bls.n	80113e4 <_free_r+0x78>
 80113de:	230c      	movs	r3, #12
 80113e0:	6003      	str	r3, [r0, #0]
 80113e2:	e7d6      	b.n	8011392 <_free_r+0x26>
 80113e4:	6825      	ldr	r5, [r4, #0]
 80113e6:	1961      	adds	r1, r4, r5
 80113e8:	428b      	cmp	r3, r1
 80113ea:	bf04      	itt	eq
 80113ec:	6819      	ldreq	r1, [r3, #0]
 80113ee:	685b      	ldreq	r3, [r3, #4]
 80113f0:	6063      	str	r3, [r4, #4]
 80113f2:	bf04      	itt	eq
 80113f4:	1949      	addeq	r1, r1, r5
 80113f6:	6021      	streq	r1, [r4, #0]
 80113f8:	6054      	str	r4, [r2, #4]
 80113fa:	e7ca      	b.n	8011392 <_free_r+0x26>
 80113fc:	b003      	add	sp, #12
 80113fe:	bd30      	pop	{r4, r5, pc}
 8011400:	200035e8 	.word	0x200035e8

08011404 <sbrk_aligned>:
 8011404:	b570      	push	{r4, r5, r6, lr}
 8011406:	4e0e      	ldr	r6, [pc, #56]	; (8011440 <sbrk_aligned+0x3c>)
 8011408:	460c      	mov	r4, r1
 801140a:	6831      	ldr	r1, [r6, #0]
 801140c:	4605      	mov	r5, r0
 801140e:	b911      	cbnz	r1, 8011416 <sbrk_aligned+0x12>
 8011410:	f000 f88c 	bl	801152c <_sbrk_r>
 8011414:	6030      	str	r0, [r6, #0]
 8011416:	4621      	mov	r1, r4
 8011418:	4628      	mov	r0, r5
 801141a:	f000 f887 	bl	801152c <_sbrk_r>
 801141e:	1c43      	adds	r3, r0, #1
 8011420:	d00a      	beq.n	8011438 <sbrk_aligned+0x34>
 8011422:	1cc4      	adds	r4, r0, #3
 8011424:	f024 0403 	bic.w	r4, r4, #3
 8011428:	42a0      	cmp	r0, r4
 801142a:	d007      	beq.n	801143c <sbrk_aligned+0x38>
 801142c:	1a21      	subs	r1, r4, r0
 801142e:	4628      	mov	r0, r5
 8011430:	f000 f87c 	bl	801152c <_sbrk_r>
 8011434:	3001      	adds	r0, #1
 8011436:	d101      	bne.n	801143c <sbrk_aligned+0x38>
 8011438:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801143c:	4620      	mov	r0, r4
 801143e:	bd70      	pop	{r4, r5, r6, pc}
 8011440:	200035ec 	.word	0x200035ec

08011444 <_malloc_r>:
 8011444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011448:	1ccd      	adds	r5, r1, #3
 801144a:	f025 0503 	bic.w	r5, r5, #3
 801144e:	3508      	adds	r5, #8
 8011450:	2d0c      	cmp	r5, #12
 8011452:	bf38      	it	cc
 8011454:	250c      	movcc	r5, #12
 8011456:	2d00      	cmp	r5, #0
 8011458:	4607      	mov	r7, r0
 801145a:	db01      	blt.n	8011460 <_malloc_r+0x1c>
 801145c:	42a9      	cmp	r1, r5
 801145e:	d905      	bls.n	801146c <_malloc_r+0x28>
 8011460:	230c      	movs	r3, #12
 8011462:	603b      	str	r3, [r7, #0]
 8011464:	2600      	movs	r6, #0
 8011466:	4630      	mov	r0, r6
 8011468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801146c:	4e2e      	ldr	r6, [pc, #184]	; (8011528 <_malloc_r+0xe4>)
 801146e:	f000 f89d 	bl	80115ac <__malloc_lock>
 8011472:	6833      	ldr	r3, [r6, #0]
 8011474:	461c      	mov	r4, r3
 8011476:	bb34      	cbnz	r4, 80114c6 <_malloc_r+0x82>
 8011478:	4629      	mov	r1, r5
 801147a:	4638      	mov	r0, r7
 801147c:	f7ff ffc2 	bl	8011404 <sbrk_aligned>
 8011480:	1c43      	adds	r3, r0, #1
 8011482:	4604      	mov	r4, r0
 8011484:	d14d      	bne.n	8011522 <_malloc_r+0xde>
 8011486:	6834      	ldr	r4, [r6, #0]
 8011488:	4626      	mov	r6, r4
 801148a:	2e00      	cmp	r6, #0
 801148c:	d140      	bne.n	8011510 <_malloc_r+0xcc>
 801148e:	6823      	ldr	r3, [r4, #0]
 8011490:	4631      	mov	r1, r6
 8011492:	4638      	mov	r0, r7
 8011494:	eb04 0803 	add.w	r8, r4, r3
 8011498:	f000 f848 	bl	801152c <_sbrk_r>
 801149c:	4580      	cmp	r8, r0
 801149e:	d13a      	bne.n	8011516 <_malloc_r+0xd2>
 80114a0:	6821      	ldr	r1, [r4, #0]
 80114a2:	3503      	adds	r5, #3
 80114a4:	1a6d      	subs	r5, r5, r1
 80114a6:	f025 0503 	bic.w	r5, r5, #3
 80114aa:	3508      	adds	r5, #8
 80114ac:	2d0c      	cmp	r5, #12
 80114ae:	bf38      	it	cc
 80114b0:	250c      	movcc	r5, #12
 80114b2:	4629      	mov	r1, r5
 80114b4:	4638      	mov	r0, r7
 80114b6:	f7ff ffa5 	bl	8011404 <sbrk_aligned>
 80114ba:	3001      	adds	r0, #1
 80114bc:	d02b      	beq.n	8011516 <_malloc_r+0xd2>
 80114be:	6823      	ldr	r3, [r4, #0]
 80114c0:	442b      	add	r3, r5
 80114c2:	6023      	str	r3, [r4, #0]
 80114c4:	e00e      	b.n	80114e4 <_malloc_r+0xa0>
 80114c6:	6822      	ldr	r2, [r4, #0]
 80114c8:	1b52      	subs	r2, r2, r5
 80114ca:	d41e      	bmi.n	801150a <_malloc_r+0xc6>
 80114cc:	2a0b      	cmp	r2, #11
 80114ce:	d916      	bls.n	80114fe <_malloc_r+0xba>
 80114d0:	1961      	adds	r1, r4, r5
 80114d2:	42a3      	cmp	r3, r4
 80114d4:	6025      	str	r5, [r4, #0]
 80114d6:	bf18      	it	ne
 80114d8:	6059      	strne	r1, [r3, #4]
 80114da:	6863      	ldr	r3, [r4, #4]
 80114dc:	bf08      	it	eq
 80114de:	6031      	streq	r1, [r6, #0]
 80114e0:	5162      	str	r2, [r4, r5]
 80114e2:	604b      	str	r3, [r1, #4]
 80114e4:	4638      	mov	r0, r7
 80114e6:	f104 060b 	add.w	r6, r4, #11
 80114ea:	f000 f865 	bl	80115b8 <__malloc_unlock>
 80114ee:	f026 0607 	bic.w	r6, r6, #7
 80114f2:	1d23      	adds	r3, r4, #4
 80114f4:	1af2      	subs	r2, r6, r3
 80114f6:	d0b6      	beq.n	8011466 <_malloc_r+0x22>
 80114f8:	1b9b      	subs	r3, r3, r6
 80114fa:	50a3      	str	r3, [r4, r2]
 80114fc:	e7b3      	b.n	8011466 <_malloc_r+0x22>
 80114fe:	6862      	ldr	r2, [r4, #4]
 8011500:	42a3      	cmp	r3, r4
 8011502:	bf0c      	ite	eq
 8011504:	6032      	streq	r2, [r6, #0]
 8011506:	605a      	strne	r2, [r3, #4]
 8011508:	e7ec      	b.n	80114e4 <_malloc_r+0xa0>
 801150a:	4623      	mov	r3, r4
 801150c:	6864      	ldr	r4, [r4, #4]
 801150e:	e7b2      	b.n	8011476 <_malloc_r+0x32>
 8011510:	4634      	mov	r4, r6
 8011512:	6876      	ldr	r6, [r6, #4]
 8011514:	e7b9      	b.n	801148a <_malloc_r+0x46>
 8011516:	230c      	movs	r3, #12
 8011518:	603b      	str	r3, [r7, #0]
 801151a:	4638      	mov	r0, r7
 801151c:	f000 f84c 	bl	80115b8 <__malloc_unlock>
 8011520:	e7a1      	b.n	8011466 <_malloc_r+0x22>
 8011522:	6025      	str	r5, [r4, #0]
 8011524:	e7de      	b.n	80114e4 <_malloc_r+0xa0>
 8011526:	bf00      	nop
 8011528:	200035e8 	.word	0x200035e8

0801152c <_sbrk_r>:
 801152c:	b538      	push	{r3, r4, r5, lr}
 801152e:	4d06      	ldr	r5, [pc, #24]	; (8011548 <_sbrk_r+0x1c>)
 8011530:	2300      	movs	r3, #0
 8011532:	4604      	mov	r4, r0
 8011534:	4608      	mov	r0, r1
 8011536:	602b      	str	r3, [r5, #0]
 8011538:	f7f2 fad0 	bl	8003adc <_sbrk>
 801153c:	1c43      	adds	r3, r0, #1
 801153e:	d102      	bne.n	8011546 <_sbrk_r+0x1a>
 8011540:	682b      	ldr	r3, [r5, #0]
 8011542:	b103      	cbz	r3, 8011546 <_sbrk_r+0x1a>
 8011544:	6023      	str	r3, [r4, #0]
 8011546:	bd38      	pop	{r3, r4, r5, pc}
 8011548:	200035f0 	.word	0x200035f0

0801154c <siprintf>:
 801154c:	b40e      	push	{r1, r2, r3}
 801154e:	b500      	push	{lr}
 8011550:	b09c      	sub	sp, #112	; 0x70
 8011552:	ab1d      	add	r3, sp, #116	; 0x74
 8011554:	9002      	str	r0, [sp, #8]
 8011556:	9006      	str	r0, [sp, #24]
 8011558:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801155c:	4809      	ldr	r0, [pc, #36]	; (8011584 <siprintf+0x38>)
 801155e:	9107      	str	r1, [sp, #28]
 8011560:	9104      	str	r1, [sp, #16]
 8011562:	4909      	ldr	r1, [pc, #36]	; (8011588 <siprintf+0x3c>)
 8011564:	f853 2b04 	ldr.w	r2, [r3], #4
 8011568:	9105      	str	r1, [sp, #20]
 801156a:	6800      	ldr	r0, [r0, #0]
 801156c:	9301      	str	r3, [sp, #4]
 801156e:	a902      	add	r1, sp, #8
 8011570:	f000 f884 	bl	801167c <_svfiprintf_r>
 8011574:	9b02      	ldr	r3, [sp, #8]
 8011576:	2200      	movs	r2, #0
 8011578:	701a      	strb	r2, [r3, #0]
 801157a:	b01c      	add	sp, #112	; 0x70
 801157c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011580:	b003      	add	sp, #12
 8011582:	4770      	bx	lr
 8011584:	20000060 	.word	0x20000060
 8011588:	ffff0208 	.word	0xffff0208

0801158c <strcat>:
 801158c:	b510      	push	{r4, lr}
 801158e:	4602      	mov	r2, r0
 8011590:	7814      	ldrb	r4, [r2, #0]
 8011592:	4613      	mov	r3, r2
 8011594:	3201      	adds	r2, #1
 8011596:	2c00      	cmp	r4, #0
 8011598:	d1fa      	bne.n	8011590 <strcat+0x4>
 801159a:	3b01      	subs	r3, #1
 801159c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80115a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80115a4:	2a00      	cmp	r2, #0
 80115a6:	d1f9      	bne.n	801159c <strcat+0x10>
 80115a8:	bd10      	pop	{r4, pc}
	...

080115ac <__malloc_lock>:
 80115ac:	4801      	ldr	r0, [pc, #4]	; (80115b4 <__malloc_lock+0x8>)
 80115ae:	f000 baf9 	b.w	8011ba4 <__retarget_lock_acquire_recursive>
 80115b2:	bf00      	nop
 80115b4:	200035f4 	.word	0x200035f4

080115b8 <__malloc_unlock>:
 80115b8:	4801      	ldr	r0, [pc, #4]	; (80115c0 <__malloc_unlock+0x8>)
 80115ba:	f000 baf4 	b.w	8011ba6 <__retarget_lock_release_recursive>
 80115be:	bf00      	nop
 80115c0:	200035f4 	.word	0x200035f4

080115c4 <__ssputs_r>:
 80115c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115c8:	688e      	ldr	r6, [r1, #8]
 80115ca:	429e      	cmp	r6, r3
 80115cc:	4682      	mov	sl, r0
 80115ce:	460c      	mov	r4, r1
 80115d0:	4690      	mov	r8, r2
 80115d2:	461f      	mov	r7, r3
 80115d4:	d838      	bhi.n	8011648 <__ssputs_r+0x84>
 80115d6:	898a      	ldrh	r2, [r1, #12]
 80115d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80115dc:	d032      	beq.n	8011644 <__ssputs_r+0x80>
 80115de:	6825      	ldr	r5, [r4, #0]
 80115e0:	6909      	ldr	r1, [r1, #16]
 80115e2:	eba5 0901 	sub.w	r9, r5, r1
 80115e6:	6965      	ldr	r5, [r4, #20]
 80115e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80115ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80115f0:	3301      	adds	r3, #1
 80115f2:	444b      	add	r3, r9
 80115f4:	106d      	asrs	r5, r5, #1
 80115f6:	429d      	cmp	r5, r3
 80115f8:	bf38      	it	cc
 80115fa:	461d      	movcc	r5, r3
 80115fc:	0553      	lsls	r3, r2, #21
 80115fe:	d531      	bpl.n	8011664 <__ssputs_r+0xa0>
 8011600:	4629      	mov	r1, r5
 8011602:	f7ff ff1f 	bl	8011444 <_malloc_r>
 8011606:	4606      	mov	r6, r0
 8011608:	b950      	cbnz	r0, 8011620 <__ssputs_r+0x5c>
 801160a:	230c      	movs	r3, #12
 801160c:	f8ca 3000 	str.w	r3, [sl]
 8011610:	89a3      	ldrh	r3, [r4, #12]
 8011612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011616:	81a3      	strh	r3, [r4, #12]
 8011618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801161c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011620:	6921      	ldr	r1, [r4, #16]
 8011622:	464a      	mov	r2, r9
 8011624:	f000 fac0 	bl	8011ba8 <memcpy>
 8011628:	89a3      	ldrh	r3, [r4, #12]
 801162a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801162e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011632:	81a3      	strh	r3, [r4, #12]
 8011634:	6126      	str	r6, [r4, #16]
 8011636:	6165      	str	r5, [r4, #20]
 8011638:	444e      	add	r6, r9
 801163a:	eba5 0509 	sub.w	r5, r5, r9
 801163e:	6026      	str	r6, [r4, #0]
 8011640:	60a5      	str	r5, [r4, #8]
 8011642:	463e      	mov	r6, r7
 8011644:	42be      	cmp	r6, r7
 8011646:	d900      	bls.n	801164a <__ssputs_r+0x86>
 8011648:	463e      	mov	r6, r7
 801164a:	6820      	ldr	r0, [r4, #0]
 801164c:	4632      	mov	r2, r6
 801164e:	4641      	mov	r1, r8
 8011650:	f000 fab8 	bl	8011bc4 <memmove>
 8011654:	68a3      	ldr	r3, [r4, #8]
 8011656:	1b9b      	subs	r3, r3, r6
 8011658:	60a3      	str	r3, [r4, #8]
 801165a:	6823      	ldr	r3, [r4, #0]
 801165c:	4433      	add	r3, r6
 801165e:	6023      	str	r3, [r4, #0]
 8011660:	2000      	movs	r0, #0
 8011662:	e7db      	b.n	801161c <__ssputs_r+0x58>
 8011664:	462a      	mov	r2, r5
 8011666:	f000 fac7 	bl	8011bf8 <_realloc_r>
 801166a:	4606      	mov	r6, r0
 801166c:	2800      	cmp	r0, #0
 801166e:	d1e1      	bne.n	8011634 <__ssputs_r+0x70>
 8011670:	6921      	ldr	r1, [r4, #16]
 8011672:	4650      	mov	r0, sl
 8011674:	f7ff fe7a 	bl	801136c <_free_r>
 8011678:	e7c7      	b.n	801160a <__ssputs_r+0x46>
	...

0801167c <_svfiprintf_r>:
 801167c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011680:	4698      	mov	r8, r3
 8011682:	898b      	ldrh	r3, [r1, #12]
 8011684:	061b      	lsls	r3, r3, #24
 8011686:	b09d      	sub	sp, #116	; 0x74
 8011688:	4607      	mov	r7, r0
 801168a:	460d      	mov	r5, r1
 801168c:	4614      	mov	r4, r2
 801168e:	d50e      	bpl.n	80116ae <_svfiprintf_r+0x32>
 8011690:	690b      	ldr	r3, [r1, #16]
 8011692:	b963      	cbnz	r3, 80116ae <_svfiprintf_r+0x32>
 8011694:	2140      	movs	r1, #64	; 0x40
 8011696:	f7ff fed5 	bl	8011444 <_malloc_r>
 801169a:	6028      	str	r0, [r5, #0]
 801169c:	6128      	str	r0, [r5, #16]
 801169e:	b920      	cbnz	r0, 80116aa <_svfiprintf_r+0x2e>
 80116a0:	230c      	movs	r3, #12
 80116a2:	603b      	str	r3, [r7, #0]
 80116a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80116a8:	e0d1      	b.n	801184e <_svfiprintf_r+0x1d2>
 80116aa:	2340      	movs	r3, #64	; 0x40
 80116ac:	616b      	str	r3, [r5, #20]
 80116ae:	2300      	movs	r3, #0
 80116b0:	9309      	str	r3, [sp, #36]	; 0x24
 80116b2:	2320      	movs	r3, #32
 80116b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80116b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80116bc:	2330      	movs	r3, #48	; 0x30
 80116be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011868 <_svfiprintf_r+0x1ec>
 80116c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80116c6:	f04f 0901 	mov.w	r9, #1
 80116ca:	4623      	mov	r3, r4
 80116cc:	469a      	mov	sl, r3
 80116ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80116d2:	b10a      	cbz	r2, 80116d8 <_svfiprintf_r+0x5c>
 80116d4:	2a25      	cmp	r2, #37	; 0x25
 80116d6:	d1f9      	bne.n	80116cc <_svfiprintf_r+0x50>
 80116d8:	ebba 0b04 	subs.w	fp, sl, r4
 80116dc:	d00b      	beq.n	80116f6 <_svfiprintf_r+0x7a>
 80116de:	465b      	mov	r3, fp
 80116e0:	4622      	mov	r2, r4
 80116e2:	4629      	mov	r1, r5
 80116e4:	4638      	mov	r0, r7
 80116e6:	f7ff ff6d 	bl	80115c4 <__ssputs_r>
 80116ea:	3001      	adds	r0, #1
 80116ec:	f000 80aa 	beq.w	8011844 <_svfiprintf_r+0x1c8>
 80116f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80116f2:	445a      	add	r2, fp
 80116f4:	9209      	str	r2, [sp, #36]	; 0x24
 80116f6:	f89a 3000 	ldrb.w	r3, [sl]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	f000 80a2 	beq.w	8011844 <_svfiprintf_r+0x1c8>
 8011700:	2300      	movs	r3, #0
 8011702:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011706:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801170a:	f10a 0a01 	add.w	sl, sl, #1
 801170e:	9304      	str	r3, [sp, #16]
 8011710:	9307      	str	r3, [sp, #28]
 8011712:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011716:	931a      	str	r3, [sp, #104]	; 0x68
 8011718:	4654      	mov	r4, sl
 801171a:	2205      	movs	r2, #5
 801171c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011720:	4851      	ldr	r0, [pc, #324]	; (8011868 <_svfiprintf_r+0x1ec>)
 8011722:	f7ee fd5d 	bl	80001e0 <memchr>
 8011726:	9a04      	ldr	r2, [sp, #16]
 8011728:	b9d8      	cbnz	r0, 8011762 <_svfiprintf_r+0xe6>
 801172a:	06d0      	lsls	r0, r2, #27
 801172c:	bf44      	itt	mi
 801172e:	2320      	movmi	r3, #32
 8011730:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011734:	0711      	lsls	r1, r2, #28
 8011736:	bf44      	itt	mi
 8011738:	232b      	movmi	r3, #43	; 0x2b
 801173a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801173e:	f89a 3000 	ldrb.w	r3, [sl]
 8011742:	2b2a      	cmp	r3, #42	; 0x2a
 8011744:	d015      	beq.n	8011772 <_svfiprintf_r+0xf6>
 8011746:	9a07      	ldr	r2, [sp, #28]
 8011748:	4654      	mov	r4, sl
 801174a:	2000      	movs	r0, #0
 801174c:	f04f 0c0a 	mov.w	ip, #10
 8011750:	4621      	mov	r1, r4
 8011752:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011756:	3b30      	subs	r3, #48	; 0x30
 8011758:	2b09      	cmp	r3, #9
 801175a:	d94e      	bls.n	80117fa <_svfiprintf_r+0x17e>
 801175c:	b1b0      	cbz	r0, 801178c <_svfiprintf_r+0x110>
 801175e:	9207      	str	r2, [sp, #28]
 8011760:	e014      	b.n	801178c <_svfiprintf_r+0x110>
 8011762:	eba0 0308 	sub.w	r3, r0, r8
 8011766:	fa09 f303 	lsl.w	r3, r9, r3
 801176a:	4313      	orrs	r3, r2
 801176c:	9304      	str	r3, [sp, #16]
 801176e:	46a2      	mov	sl, r4
 8011770:	e7d2      	b.n	8011718 <_svfiprintf_r+0x9c>
 8011772:	9b03      	ldr	r3, [sp, #12]
 8011774:	1d19      	adds	r1, r3, #4
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	9103      	str	r1, [sp, #12]
 801177a:	2b00      	cmp	r3, #0
 801177c:	bfbb      	ittet	lt
 801177e:	425b      	neglt	r3, r3
 8011780:	f042 0202 	orrlt.w	r2, r2, #2
 8011784:	9307      	strge	r3, [sp, #28]
 8011786:	9307      	strlt	r3, [sp, #28]
 8011788:	bfb8      	it	lt
 801178a:	9204      	strlt	r2, [sp, #16]
 801178c:	7823      	ldrb	r3, [r4, #0]
 801178e:	2b2e      	cmp	r3, #46	; 0x2e
 8011790:	d10c      	bne.n	80117ac <_svfiprintf_r+0x130>
 8011792:	7863      	ldrb	r3, [r4, #1]
 8011794:	2b2a      	cmp	r3, #42	; 0x2a
 8011796:	d135      	bne.n	8011804 <_svfiprintf_r+0x188>
 8011798:	9b03      	ldr	r3, [sp, #12]
 801179a:	1d1a      	adds	r2, r3, #4
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	9203      	str	r2, [sp, #12]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	bfb8      	it	lt
 80117a4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80117a8:	3402      	adds	r4, #2
 80117aa:	9305      	str	r3, [sp, #20]
 80117ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011878 <_svfiprintf_r+0x1fc>
 80117b0:	7821      	ldrb	r1, [r4, #0]
 80117b2:	2203      	movs	r2, #3
 80117b4:	4650      	mov	r0, sl
 80117b6:	f7ee fd13 	bl	80001e0 <memchr>
 80117ba:	b140      	cbz	r0, 80117ce <_svfiprintf_r+0x152>
 80117bc:	2340      	movs	r3, #64	; 0x40
 80117be:	eba0 000a 	sub.w	r0, r0, sl
 80117c2:	fa03 f000 	lsl.w	r0, r3, r0
 80117c6:	9b04      	ldr	r3, [sp, #16]
 80117c8:	4303      	orrs	r3, r0
 80117ca:	3401      	adds	r4, #1
 80117cc:	9304      	str	r3, [sp, #16]
 80117ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117d2:	4826      	ldr	r0, [pc, #152]	; (801186c <_svfiprintf_r+0x1f0>)
 80117d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80117d8:	2206      	movs	r2, #6
 80117da:	f7ee fd01 	bl	80001e0 <memchr>
 80117de:	2800      	cmp	r0, #0
 80117e0:	d038      	beq.n	8011854 <_svfiprintf_r+0x1d8>
 80117e2:	4b23      	ldr	r3, [pc, #140]	; (8011870 <_svfiprintf_r+0x1f4>)
 80117e4:	bb1b      	cbnz	r3, 801182e <_svfiprintf_r+0x1b2>
 80117e6:	9b03      	ldr	r3, [sp, #12]
 80117e8:	3307      	adds	r3, #7
 80117ea:	f023 0307 	bic.w	r3, r3, #7
 80117ee:	3308      	adds	r3, #8
 80117f0:	9303      	str	r3, [sp, #12]
 80117f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117f4:	4433      	add	r3, r6
 80117f6:	9309      	str	r3, [sp, #36]	; 0x24
 80117f8:	e767      	b.n	80116ca <_svfiprintf_r+0x4e>
 80117fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80117fe:	460c      	mov	r4, r1
 8011800:	2001      	movs	r0, #1
 8011802:	e7a5      	b.n	8011750 <_svfiprintf_r+0xd4>
 8011804:	2300      	movs	r3, #0
 8011806:	3401      	adds	r4, #1
 8011808:	9305      	str	r3, [sp, #20]
 801180a:	4619      	mov	r1, r3
 801180c:	f04f 0c0a 	mov.w	ip, #10
 8011810:	4620      	mov	r0, r4
 8011812:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011816:	3a30      	subs	r2, #48	; 0x30
 8011818:	2a09      	cmp	r2, #9
 801181a:	d903      	bls.n	8011824 <_svfiprintf_r+0x1a8>
 801181c:	2b00      	cmp	r3, #0
 801181e:	d0c5      	beq.n	80117ac <_svfiprintf_r+0x130>
 8011820:	9105      	str	r1, [sp, #20]
 8011822:	e7c3      	b.n	80117ac <_svfiprintf_r+0x130>
 8011824:	fb0c 2101 	mla	r1, ip, r1, r2
 8011828:	4604      	mov	r4, r0
 801182a:	2301      	movs	r3, #1
 801182c:	e7f0      	b.n	8011810 <_svfiprintf_r+0x194>
 801182e:	ab03      	add	r3, sp, #12
 8011830:	9300      	str	r3, [sp, #0]
 8011832:	462a      	mov	r2, r5
 8011834:	4b0f      	ldr	r3, [pc, #60]	; (8011874 <_svfiprintf_r+0x1f8>)
 8011836:	a904      	add	r1, sp, #16
 8011838:	4638      	mov	r0, r7
 801183a:	f3af 8000 	nop.w
 801183e:	1c42      	adds	r2, r0, #1
 8011840:	4606      	mov	r6, r0
 8011842:	d1d6      	bne.n	80117f2 <_svfiprintf_r+0x176>
 8011844:	89ab      	ldrh	r3, [r5, #12]
 8011846:	065b      	lsls	r3, r3, #25
 8011848:	f53f af2c 	bmi.w	80116a4 <_svfiprintf_r+0x28>
 801184c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801184e:	b01d      	add	sp, #116	; 0x74
 8011850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011854:	ab03      	add	r3, sp, #12
 8011856:	9300      	str	r3, [sp, #0]
 8011858:	462a      	mov	r2, r5
 801185a:	4b06      	ldr	r3, [pc, #24]	; (8011874 <_svfiprintf_r+0x1f8>)
 801185c:	a904      	add	r1, sp, #16
 801185e:	4638      	mov	r0, r7
 8011860:	f000 f87a 	bl	8011958 <_printf_i>
 8011864:	e7eb      	b.n	801183e <_svfiprintf_r+0x1c2>
 8011866:	bf00      	nop
 8011868:	08012230 	.word	0x08012230
 801186c:	0801223a 	.word	0x0801223a
 8011870:	00000000 	.word	0x00000000
 8011874:	080115c5 	.word	0x080115c5
 8011878:	08012236 	.word	0x08012236

0801187c <_printf_common>:
 801187c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011880:	4616      	mov	r6, r2
 8011882:	4699      	mov	r9, r3
 8011884:	688a      	ldr	r2, [r1, #8]
 8011886:	690b      	ldr	r3, [r1, #16]
 8011888:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801188c:	4293      	cmp	r3, r2
 801188e:	bfb8      	it	lt
 8011890:	4613      	movlt	r3, r2
 8011892:	6033      	str	r3, [r6, #0]
 8011894:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011898:	4607      	mov	r7, r0
 801189a:	460c      	mov	r4, r1
 801189c:	b10a      	cbz	r2, 80118a2 <_printf_common+0x26>
 801189e:	3301      	adds	r3, #1
 80118a0:	6033      	str	r3, [r6, #0]
 80118a2:	6823      	ldr	r3, [r4, #0]
 80118a4:	0699      	lsls	r1, r3, #26
 80118a6:	bf42      	ittt	mi
 80118a8:	6833      	ldrmi	r3, [r6, #0]
 80118aa:	3302      	addmi	r3, #2
 80118ac:	6033      	strmi	r3, [r6, #0]
 80118ae:	6825      	ldr	r5, [r4, #0]
 80118b0:	f015 0506 	ands.w	r5, r5, #6
 80118b4:	d106      	bne.n	80118c4 <_printf_common+0x48>
 80118b6:	f104 0a19 	add.w	sl, r4, #25
 80118ba:	68e3      	ldr	r3, [r4, #12]
 80118bc:	6832      	ldr	r2, [r6, #0]
 80118be:	1a9b      	subs	r3, r3, r2
 80118c0:	42ab      	cmp	r3, r5
 80118c2:	dc26      	bgt.n	8011912 <_printf_common+0x96>
 80118c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80118c8:	1e13      	subs	r3, r2, #0
 80118ca:	6822      	ldr	r2, [r4, #0]
 80118cc:	bf18      	it	ne
 80118ce:	2301      	movne	r3, #1
 80118d0:	0692      	lsls	r2, r2, #26
 80118d2:	d42b      	bmi.n	801192c <_printf_common+0xb0>
 80118d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80118d8:	4649      	mov	r1, r9
 80118da:	4638      	mov	r0, r7
 80118dc:	47c0      	blx	r8
 80118de:	3001      	adds	r0, #1
 80118e0:	d01e      	beq.n	8011920 <_printf_common+0xa4>
 80118e2:	6823      	ldr	r3, [r4, #0]
 80118e4:	68e5      	ldr	r5, [r4, #12]
 80118e6:	6832      	ldr	r2, [r6, #0]
 80118e8:	f003 0306 	and.w	r3, r3, #6
 80118ec:	2b04      	cmp	r3, #4
 80118ee:	bf08      	it	eq
 80118f0:	1aad      	subeq	r5, r5, r2
 80118f2:	68a3      	ldr	r3, [r4, #8]
 80118f4:	6922      	ldr	r2, [r4, #16]
 80118f6:	bf0c      	ite	eq
 80118f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80118fc:	2500      	movne	r5, #0
 80118fe:	4293      	cmp	r3, r2
 8011900:	bfc4      	itt	gt
 8011902:	1a9b      	subgt	r3, r3, r2
 8011904:	18ed      	addgt	r5, r5, r3
 8011906:	2600      	movs	r6, #0
 8011908:	341a      	adds	r4, #26
 801190a:	42b5      	cmp	r5, r6
 801190c:	d11a      	bne.n	8011944 <_printf_common+0xc8>
 801190e:	2000      	movs	r0, #0
 8011910:	e008      	b.n	8011924 <_printf_common+0xa8>
 8011912:	2301      	movs	r3, #1
 8011914:	4652      	mov	r2, sl
 8011916:	4649      	mov	r1, r9
 8011918:	4638      	mov	r0, r7
 801191a:	47c0      	blx	r8
 801191c:	3001      	adds	r0, #1
 801191e:	d103      	bne.n	8011928 <_printf_common+0xac>
 8011920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011928:	3501      	adds	r5, #1
 801192a:	e7c6      	b.n	80118ba <_printf_common+0x3e>
 801192c:	18e1      	adds	r1, r4, r3
 801192e:	1c5a      	adds	r2, r3, #1
 8011930:	2030      	movs	r0, #48	; 0x30
 8011932:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011936:	4422      	add	r2, r4
 8011938:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801193c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011940:	3302      	adds	r3, #2
 8011942:	e7c7      	b.n	80118d4 <_printf_common+0x58>
 8011944:	2301      	movs	r3, #1
 8011946:	4622      	mov	r2, r4
 8011948:	4649      	mov	r1, r9
 801194a:	4638      	mov	r0, r7
 801194c:	47c0      	blx	r8
 801194e:	3001      	adds	r0, #1
 8011950:	d0e6      	beq.n	8011920 <_printf_common+0xa4>
 8011952:	3601      	adds	r6, #1
 8011954:	e7d9      	b.n	801190a <_printf_common+0x8e>
	...

08011958 <_printf_i>:
 8011958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801195c:	7e0f      	ldrb	r7, [r1, #24]
 801195e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011960:	2f78      	cmp	r7, #120	; 0x78
 8011962:	4691      	mov	r9, r2
 8011964:	4680      	mov	r8, r0
 8011966:	460c      	mov	r4, r1
 8011968:	469a      	mov	sl, r3
 801196a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801196e:	d807      	bhi.n	8011980 <_printf_i+0x28>
 8011970:	2f62      	cmp	r7, #98	; 0x62
 8011972:	d80a      	bhi.n	801198a <_printf_i+0x32>
 8011974:	2f00      	cmp	r7, #0
 8011976:	f000 80d8 	beq.w	8011b2a <_printf_i+0x1d2>
 801197a:	2f58      	cmp	r7, #88	; 0x58
 801197c:	f000 80a3 	beq.w	8011ac6 <_printf_i+0x16e>
 8011980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011984:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011988:	e03a      	b.n	8011a00 <_printf_i+0xa8>
 801198a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801198e:	2b15      	cmp	r3, #21
 8011990:	d8f6      	bhi.n	8011980 <_printf_i+0x28>
 8011992:	a101      	add	r1, pc, #4	; (adr r1, 8011998 <_printf_i+0x40>)
 8011994:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011998:	080119f1 	.word	0x080119f1
 801199c:	08011a05 	.word	0x08011a05
 80119a0:	08011981 	.word	0x08011981
 80119a4:	08011981 	.word	0x08011981
 80119a8:	08011981 	.word	0x08011981
 80119ac:	08011981 	.word	0x08011981
 80119b0:	08011a05 	.word	0x08011a05
 80119b4:	08011981 	.word	0x08011981
 80119b8:	08011981 	.word	0x08011981
 80119bc:	08011981 	.word	0x08011981
 80119c0:	08011981 	.word	0x08011981
 80119c4:	08011b11 	.word	0x08011b11
 80119c8:	08011a35 	.word	0x08011a35
 80119cc:	08011af3 	.word	0x08011af3
 80119d0:	08011981 	.word	0x08011981
 80119d4:	08011981 	.word	0x08011981
 80119d8:	08011b33 	.word	0x08011b33
 80119dc:	08011981 	.word	0x08011981
 80119e0:	08011a35 	.word	0x08011a35
 80119e4:	08011981 	.word	0x08011981
 80119e8:	08011981 	.word	0x08011981
 80119ec:	08011afb 	.word	0x08011afb
 80119f0:	682b      	ldr	r3, [r5, #0]
 80119f2:	1d1a      	adds	r2, r3, #4
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	602a      	str	r2, [r5, #0]
 80119f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80119fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011a00:	2301      	movs	r3, #1
 8011a02:	e0a3      	b.n	8011b4c <_printf_i+0x1f4>
 8011a04:	6820      	ldr	r0, [r4, #0]
 8011a06:	6829      	ldr	r1, [r5, #0]
 8011a08:	0606      	lsls	r6, r0, #24
 8011a0a:	f101 0304 	add.w	r3, r1, #4
 8011a0e:	d50a      	bpl.n	8011a26 <_printf_i+0xce>
 8011a10:	680e      	ldr	r6, [r1, #0]
 8011a12:	602b      	str	r3, [r5, #0]
 8011a14:	2e00      	cmp	r6, #0
 8011a16:	da03      	bge.n	8011a20 <_printf_i+0xc8>
 8011a18:	232d      	movs	r3, #45	; 0x2d
 8011a1a:	4276      	negs	r6, r6
 8011a1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a20:	485e      	ldr	r0, [pc, #376]	; (8011b9c <_printf_i+0x244>)
 8011a22:	230a      	movs	r3, #10
 8011a24:	e019      	b.n	8011a5a <_printf_i+0x102>
 8011a26:	680e      	ldr	r6, [r1, #0]
 8011a28:	602b      	str	r3, [r5, #0]
 8011a2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011a2e:	bf18      	it	ne
 8011a30:	b236      	sxthne	r6, r6
 8011a32:	e7ef      	b.n	8011a14 <_printf_i+0xbc>
 8011a34:	682b      	ldr	r3, [r5, #0]
 8011a36:	6820      	ldr	r0, [r4, #0]
 8011a38:	1d19      	adds	r1, r3, #4
 8011a3a:	6029      	str	r1, [r5, #0]
 8011a3c:	0601      	lsls	r1, r0, #24
 8011a3e:	d501      	bpl.n	8011a44 <_printf_i+0xec>
 8011a40:	681e      	ldr	r6, [r3, #0]
 8011a42:	e002      	b.n	8011a4a <_printf_i+0xf2>
 8011a44:	0646      	lsls	r6, r0, #25
 8011a46:	d5fb      	bpl.n	8011a40 <_printf_i+0xe8>
 8011a48:	881e      	ldrh	r6, [r3, #0]
 8011a4a:	4854      	ldr	r0, [pc, #336]	; (8011b9c <_printf_i+0x244>)
 8011a4c:	2f6f      	cmp	r7, #111	; 0x6f
 8011a4e:	bf0c      	ite	eq
 8011a50:	2308      	moveq	r3, #8
 8011a52:	230a      	movne	r3, #10
 8011a54:	2100      	movs	r1, #0
 8011a56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011a5a:	6865      	ldr	r5, [r4, #4]
 8011a5c:	60a5      	str	r5, [r4, #8]
 8011a5e:	2d00      	cmp	r5, #0
 8011a60:	bfa2      	ittt	ge
 8011a62:	6821      	ldrge	r1, [r4, #0]
 8011a64:	f021 0104 	bicge.w	r1, r1, #4
 8011a68:	6021      	strge	r1, [r4, #0]
 8011a6a:	b90e      	cbnz	r6, 8011a70 <_printf_i+0x118>
 8011a6c:	2d00      	cmp	r5, #0
 8011a6e:	d04d      	beq.n	8011b0c <_printf_i+0x1b4>
 8011a70:	4615      	mov	r5, r2
 8011a72:	fbb6 f1f3 	udiv	r1, r6, r3
 8011a76:	fb03 6711 	mls	r7, r3, r1, r6
 8011a7a:	5dc7      	ldrb	r7, [r0, r7]
 8011a7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011a80:	4637      	mov	r7, r6
 8011a82:	42bb      	cmp	r3, r7
 8011a84:	460e      	mov	r6, r1
 8011a86:	d9f4      	bls.n	8011a72 <_printf_i+0x11a>
 8011a88:	2b08      	cmp	r3, #8
 8011a8a:	d10b      	bne.n	8011aa4 <_printf_i+0x14c>
 8011a8c:	6823      	ldr	r3, [r4, #0]
 8011a8e:	07de      	lsls	r6, r3, #31
 8011a90:	d508      	bpl.n	8011aa4 <_printf_i+0x14c>
 8011a92:	6923      	ldr	r3, [r4, #16]
 8011a94:	6861      	ldr	r1, [r4, #4]
 8011a96:	4299      	cmp	r1, r3
 8011a98:	bfde      	ittt	le
 8011a9a:	2330      	movle	r3, #48	; 0x30
 8011a9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011aa0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011aa4:	1b52      	subs	r2, r2, r5
 8011aa6:	6122      	str	r2, [r4, #16]
 8011aa8:	f8cd a000 	str.w	sl, [sp]
 8011aac:	464b      	mov	r3, r9
 8011aae:	aa03      	add	r2, sp, #12
 8011ab0:	4621      	mov	r1, r4
 8011ab2:	4640      	mov	r0, r8
 8011ab4:	f7ff fee2 	bl	801187c <_printf_common>
 8011ab8:	3001      	adds	r0, #1
 8011aba:	d14c      	bne.n	8011b56 <_printf_i+0x1fe>
 8011abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ac0:	b004      	add	sp, #16
 8011ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ac6:	4835      	ldr	r0, [pc, #212]	; (8011b9c <_printf_i+0x244>)
 8011ac8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011acc:	6829      	ldr	r1, [r5, #0]
 8011ace:	6823      	ldr	r3, [r4, #0]
 8011ad0:	f851 6b04 	ldr.w	r6, [r1], #4
 8011ad4:	6029      	str	r1, [r5, #0]
 8011ad6:	061d      	lsls	r5, r3, #24
 8011ad8:	d514      	bpl.n	8011b04 <_printf_i+0x1ac>
 8011ada:	07df      	lsls	r7, r3, #31
 8011adc:	bf44      	itt	mi
 8011ade:	f043 0320 	orrmi.w	r3, r3, #32
 8011ae2:	6023      	strmi	r3, [r4, #0]
 8011ae4:	b91e      	cbnz	r6, 8011aee <_printf_i+0x196>
 8011ae6:	6823      	ldr	r3, [r4, #0]
 8011ae8:	f023 0320 	bic.w	r3, r3, #32
 8011aec:	6023      	str	r3, [r4, #0]
 8011aee:	2310      	movs	r3, #16
 8011af0:	e7b0      	b.n	8011a54 <_printf_i+0xfc>
 8011af2:	6823      	ldr	r3, [r4, #0]
 8011af4:	f043 0320 	orr.w	r3, r3, #32
 8011af8:	6023      	str	r3, [r4, #0]
 8011afa:	2378      	movs	r3, #120	; 0x78
 8011afc:	4828      	ldr	r0, [pc, #160]	; (8011ba0 <_printf_i+0x248>)
 8011afe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011b02:	e7e3      	b.n	8011acc <_printf_i+0x174>
 8011b04:	0659      	lsls	r1, r3, #25
 8011b06:	bf48      	it	mi
 8011b08:	b2b6      	uxthmi	r6, r6
 8011b0a:	e7e6      	b.n	8011ada <_printf_i+0x182>
 8011b0c:	4615      	mov	r5, r2
 8011b0e:	e7bb      	b.n	8011a88 <_printf_i+0x130>
 8011b10:	682b      	ldr	r3, [r5, #0]
 8011b12:	6826      	ldr	r6, [r4, #0]
 8011b14:	6961      	ldr	r1, [r4, #20]
 8011b16:	1d18      	adds	r0, r3, #4
 8011b18:	6028      	str	r0, [r5, #0]
 8011b1a:	0635      	lsls	r5, r6, #24
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	d501      	bpl.n	8011b24 <_printf_i+0x1cc>
 8011b20:	6019      	str	r1, [r3, #0]
 8011b22:	e002      	b.n	8011b2a <_printf_i+0x1d2>
 8011b24:	0670      	lsls	r0, r6, #25
 8011b26:	d5fb      	bpl.n	8011b20 <_printf_i+0x1c8>
 8011b28:	8019      	strh	r1, [r3, #0]
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	6123      	str	r3, [r4, #16]
 8011b2e:	4615      	mov	r5, r2
 8011b30:	e7ba      	b.n	8011aa8 <_printf_i+0x150>
 8011b32:	682b      	ldr	r3, [r5, #0]
 8011b34:	1d1a      	adds	r2, r3, #4
 8011b36:	602a      	str	r2, [r5, #0]
 8011b38:	681d      	ldr	r5, [r3, #0]
 8011b3a:	6862      	ldr	r2, [r4, #4]
 8011b3c:	2100      	movs	r1, #0
 8011b3e:	4628      	mov	r0, r5
 8011b40:	f7ee fb4e 	bl	80001e0 <memchr>
 8011b44:	b108      	cbz	r0, 8011b4a <_printf_i+0x1f2>
 8011b46:	1b40      	subs	r0, r0, r5
 8011b48:	6060      	str	r0, [r4, #4]
 8011b4a:	6863      	ldr	r3, [r4, #4]
 8011b4c:	6123      	str	r3, [r4, #16]
 8011b4e:	2300      	movs	r3, #0
 8011b50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b54:	e7a8      	b.n	8011aa8 <_printf_i+0x150>
 8011b56:	6923      	ldr	r3, [r4, #16]
 8011b58:	462a      	mov	r2, r5
 8011b5a:	4649      	mov	r1, r9
 8011b5c:	4640      	mov	r0, r8
 8011b5e:	47d0      	blx	sl
 8011b60:	3001      	adds	r0, #1
 8011b62:	d0ab      	beq.n	8011abc <_printf_i+0x164>
 8011b64:	6823      	ldr	r3, [r4, #0]
 8011b66:	079b      	lsls	r3, r3, #30
 8011b68:	d413      	bmi.n	8011b92 <_printf_i+0x23a>
 8011b6a:	68e0      	ldr	r0, [r4, #12]
 8011b6c:	9b03      	ldr	r3, [sp, #12]
 8011b6e:	4298      	cmp	r0, r3
 8011b70:	bfb8      	it	lt
 8011b72:	4618      	movlt	r0, r3
 8011b74:	e7a4      	b.n	8011ac0 <_printf_i+0x168>
 8011b76:	2301      	movs	r3, #1
 8011b78:	4632      	mov	r2, r6
 8011b7a:	4649      	mov	r1, r9
 8011b7c:	4640      	mov	r0, r8
 8011b7e:	47d0      	blx	sl
 8011b80:	3001      	adds	r0, #1
 8011b82:	d09b      	beq.n	8011abc <_printf_i+0x164>
 8011b84:	3501      	adds	r5, #1
 8011b86:	68e3      	ldr	r3, [r4, #12]
 8011b88:	9903      	ldr	r1, [sp, #12]
 8011b8a:	1a5b      	subs	r3, r3, r1
 8011b8c:	42ab      	cmp	r3, r5
 8011b8e:	dcf2      	bgt.n	8011b76 <_printf_i+0x21e>
 8011b90:	e7eb      	b.n	8011b6a <_printf_i+0x212>
 8011b92:	2500      	movs	r5, #0
 8011b94:	f104 0619 	add.w	r6, r4, #25
 8011b98:	e7f5      	b.n	8011b86 <_printf_i+0x22e>
 8011b9a:	bf00      	nop
 8011b9c:	08012241 	.word	0x08012241
 8011ba0:	08012252 	.word	0x08012252

08011ba4 <__retarget_lock_acquire_recursive>:
 8011ba4:	4770      	bx	lr

08011ba6 <__retarget_lock_release_recursive>:
 8011ba6:	4770      	bx	lr

08011ba8 <memcpy>:
 8011ba8:	440a      	add	r2, r1
 8011baa:	4291      	cmp	r1, r2
 8011bac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011bb0:	d100      	bne.n	8011bb4 <memcpy+0xc>
 8011bb2:	4770      	bx	lr
 8011bb4:	b510      	push	{r4, lr}
 8011bb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011bba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011bbe:	4291      	cmp	r1, r2
 8011bc0:	d1f9      	bne.n	8011bb6 <memcpy+0xe>
 8011bc2:	bd10      	pop	{r4, pc}

08011bc4 <memmove>:
 8011bc4:	4288      	cmp	r0, r1
 8011bc6:	b510      	push	{r4, lr}
 8011bc8:	eb01 0402 	add.w	r4, r1, r2
 8011bcc:	d902      	bls.n	8011bd4 <memmove+0x10>
 8011bce:	4284      	cmp	r4, r0
 8011bd0:	4623      	mov	r3, r4
 8011bd2:	d807      	bhi.n	8011be4 <memmove+0x20>
 8011bd4:	1e43      	subs	r3, r0, #1
 8011bd6:	42a1      	cmp	r1, r4
 8011bd8:	d008      	beq.n	8011bec <memmove+0x28>
 8011bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011bde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011be2:	e7f8      	b.n	8011bd6 <memmove+0x12>
 8011be4:	4402      	add	r2, r0
 8011be6:	4601      	mov	r1, r0
 8011be8:	428a      	cmp	r2, r1
 8011bea:	d100      	bne.n	8011bee <memmove+0x2a>
 8011bec:	bd10      	pop	{r4, pc}
 8011bee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011bf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011bf6:	e7f7      	b.n	8011be8 <memmove+0x24>

08011bf8 <_realloc_r>:
 8011bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bfc:	4680      	mov	r8, r0
 8011bfe:	4614      	mov	r4, r2
 8011c00:	460e      	mov	r6, r1
 8011c02:	b921      	cbnz	r1, 8011c0e <_realloc_r+0x16>
 8011c04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c08:	4611      	mov	r1, r2
 8011c0a:	f7ff bc1b 	b.w	8011444 <_malloc_r>
 8011c0e:	b92a      	cbnz	r2, 8011c1c <_realloc_r+0x24>
 8011c10:	f7ff fbac 	bl	801136c <_free_r>
 8011c14:	4625      	mov	r5, r4
 8011c16:	4628      	mov	r0, r5
 8011c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c1c:	f000 f81b 	bl	8011c56 <_malloc_usable_size_r>
 8011c20:	4284      	cmp	r4, r0
 8011c22:	4607      	mov	r7, r0
 8011c24:	d802      	bhi.n	8011c2c <_realloc_r+0x34>
 8011c26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011c2a:	d812      	bhi.n	8011c52 <_realloc_r+0x5a>
 8011c2c:	4621      	mov	r1, r4
 8011c2e:	4640      	mov	r0, r8
 8011c30:	f7ff fc08 	bl	8011444 <_malloc_r>
 8011c34:	4605      	mov	r5, r0
 8011c36:	2800      	cmp	r0, #0
 8011c38:	d0ed      	beq.n	8011c16 <_realloc_r+0x1e>
 8011c3a:	42bc      	cmp	r4, r7
 8011c3c:	4622      	mov	r2, r4
 8011c3e:	4631      	mov	r1, r6
 8011c40:	bf28      	it	cs
 8011c42:	463a      	movcs	r2, r7
 8011c44:	f7ff ffb0 	bl	8011ba8 <memcpy>
 8011c48:	4631      	mov	r1, r6
 8011c4a:	4640      	mov	r0, r8
 8011c4c:	f7ff fb8e 	bl	801136c <_free_r>
 8011c50:	e7e1      	b.n	8011c16 <_realloc_r+0x1e>
 8011c52:	4635      	mov	r5, r6
 8011c54:	e7df      	b.n	8011c16 <_realloc_r+0x1e>

08011c56 <_malloc_usable_size_r>:
 8011c56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c5a:	1f18      	subs	r0, r3, #4
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	bfbc      	itt	lt
 8011c60:	580b      	ldrlt	r3, [r1, r0]
 8011c62:	18c0      	addlt	r0, r0, r3
 8011c64:	4770      	bx	lr
	...

08011c68 <_init>:
 8011c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c6a:	bf00      	nop
 8011c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c6e:	bc08      	pop	{r3}
 8011c70:	469e      	mov	lr, r3
 8011c72:	4770      	bx	lr

08011c74 <_fini>:
 8011c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c76:	bf00      	nop
 8011c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c7a:	bc08      	pop	{r3}
 8011c7c:	469e      	mov	lr, r3
 8011c7e:	4770      	bx	lr
