
lights_RGBW_PWM_DMA_two_chanels2_WORKS7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011ae0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e4  08011c70  08011c70  00021c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012254  08012254  000300c8  2**0
                  CONTENTS
  4 .ARM          00000008  08012254  08012254  00022254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801225c  0801225c  000300c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801225c  0801225c  0002225c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012260  08012260  00022260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08012264  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300c8  2**0
                  CONTENTS
 10 .bss          00003538  200000c8  200000c8  000300c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003600  20003600  000300c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000226bb  00000000  00000000  000300f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d58  00000000  00000000  000527b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ae8  00000000  00000000  00057510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018f0  00000000  00000000  00058ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027721  00000000  00000000  0005a8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000244c9  00000000  00000000  00082009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5826  00000000  00000000  000a64d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017bcf8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000075b8  00000000  00000000  0017bd48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c8 	.word	0x200000c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011c58 	.word	0x08011c58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000cc 	.word	0x200000cc
 80001cc:	08011c58 	.word	0x08011c58

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800089c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008a0:	f000 b974 	b.w	8000b8c <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468e      	mov	lr, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d14d      	bne.n	8000966 <__udivmoddi4+0xaa>
 80008ca:	428a      	cmp	r2, r1
 80008cc:	4694      	mov	ip, r2
 80008ce:	d969      	bls.n	80009a4 <__udivmoddi4+0xe8>
 80008d0:	fab2 f282 	clz	r2, r2
 80008d4:	b152      	cbz	r2, 80008ec <__udivmoddi4+0x30>
 80008d6:	fa01 f302 	lsl.w	r3, r1, r2
 80008da:	f1c2 0120 	rsb	r1, r2, #32
 80008de:	fa20 f101 	lsr.w	r1, r0, r1
 80008e2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008e6:	ea41 0e03 	orr.w	lr, r1, r3
 80008ea:	4094      	lsls	r4, r2
 80008ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f0:	0c21      	lsrs	r1, r4, #16
 80008f2:	fbbe f6f8 	udiv	r6, lr, r8
 80008f6:	fa1f f78c 	uxth.w	r7, ip
 80008fa:	fb08 e316 	mls	r3, r8, r6, lr
 80008fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000902:	fb06 f107 	mul.w	r1, r6, r7
 8000906:	4299      	cmp	r1, r3
 8000908:	d90a      	bls.n	8000920 <__udivmoddi4+0x64>
 800090a:	eb1c 0303 	adds.w	r3, ip, r3
 800090e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000912:	f080 811f 	bcs.w	8000b54 <__udivmoddi4+0x298>
 8000916:	4299      	cmp	r1, r3
 8000918:	f240 811c 	bls.w	8000b54 <__udivmoddi4+0x298>
 800091c:	3e02      	subs	r6, #2
 800091e:	4463      	add	r3, ip
 8000920:	1a5b      	subs	r3, r3, r1
 8000922:	b2a4      	uxth	r4, r4
 8000924:	fbb3 f0f8 	udiv	r0, r3, r8
 8000928:	fb08 3310 	mls	r3, r8, r0, r3
 800092c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000930:	fb00 f707 	mul.w	r7, r0, r7
 8000934:	42a7      	cmp	r7, r4
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x92>
 8000938:	eb1c 0404 	adds.w	r4, ip, r4
 800093c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000940:	f080 810a 	bcs.w	8000b58 <__udivmoddi4+0x29c>
 8000944:	42a7      	cmp	r7, r4
 8000946:	f240 8107 	bls.w	8000b58 <__udivmoddi4+0x29c>
 800094a:	4464      	add	r4, ip
 800094c:	3802      	subs	r0, #2
 800094e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000952:	1be4      	subs	r4, r4, r7
 8000954:	2600      	movs	r6, #0
 8000956:	b11d      	cbz	r5, 8000960 <__udivmoddi4+0xa4>
 8000958:	40d4      	lsrs	r4, r2
 800095a:	2300      	movs	r3, #0
 800095c:	e9c5 4300 	strd	r4, r3, [r5]
 8000960:	4631      	mov	r1, r6
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000966:	428b      	cmp	r3, r1
 8000968:	d909      	bls.n	800097e <__udivmoddi4+0xc2>
 800096a:	2d00      	cmp	r5, #0
 800096c:	f000 80ef 	beq.w	8000b4e <__udivmoddi4+0x292>
 8000970:	2600      	movs	r6, #0
 8000972:	e9c5 0100 	strd	r0, r1, [r5]
 8000976:	4630      	mov	r0, r6
 8000978:	4631      	mov	r1, r6
 800097a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800097e:	fab3 f683 	clz	r6, r3
 8000982:	2e00      	cmp	r6, #0
 8000984:	d14a      	bne.n	8000a1c <__udivmoddi4+0x160>
 8000986:	428b      	cmp	r3, r1
 8000988:	d302      	bcc.n	8000990 <__udivmoddi4+0xd4>
 800098a:	4282      	cmp	r2, r0
 800098c:	f200 80f9 	bhi.w	8000b82 <__udivmoddi4+0x2c6>
 8000990:	1a84      	subs	r4, r0, r2
 8000992:	eb61 0303 	sbc.w	r3, r1, r3
 8000996:	2001      	movs	r0, #1
 8000998:	469e      	mov	lr, r3
 800099a:	2d00      	cmp	r5, #0
 800099c:	d0e0      	beq.n	8000960 <__udivmoddi4+0xa4>
 800099e:	e9c5 4e00 	strd	r4, lr, [r5]
 80009a2:	e7dd      	b.n	8000960 <__udivmoddi4+0xa4>
 80009a4:	b902      	cbnz	r2, 80009a8 <__udivmoddi4+0xec>
 80009a6:	deff      	udf	#255	; 0xff
 80009a8:	fab2 f282 	clz	r2, r2
 80009ac:	2a00      	cmp	r2, #0
 80009ae:	f040 8092 	bne.w	8000ad6 <__udivmoddi4+0x21a>
 80009b2:	eba1 010c 	sub.w	r1, r1, ip
 80009b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ba:	fa1f fe8c 	uxth.w	lr, ip
 80009be:	2601      	movs	r6, #1
 80009c0:	0c20      	lsrs	r0, r4, #16
 80009c2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009c6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ce:	fb0e f003 	mul.w	r0, lr, r3
 80009d2:	4288      	cmp	r0, r1
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x12c>
 80009d6:	eb1c 0101 	adds.w	r1, ip, r1
 80009da:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x12a>
 80009e0:	4288      	cmp	r0, r1
 80009e2:	f200 80cb 	bhi.w	8000b7c <__udivmoddi4+0x2c0>
 80009e6:	4643      	mov	r3, r8
 80009e8:	1a09      	subs	r1, r1, r0
 80009ea:	b2a4      	uxth	r4, r4
 80009ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f0:	fb07 1110 	mls	r1, r7, r0, r1
 80009f4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009f8:	fb0e fe00 	mul.w	lr, lr, r0
 80009fc:	45a6      	cmp	lr, r4
 80009fe:	d908      	bls.n	8000a12 <__udivmoddi4+0x156>
 8000a00:	eb1c 0404 	adds.w	r4, ip, r4
 8000a04:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000a08:	d202      	bcs.n	8000a10 <__udivmoddi4+0x154>
 8000a0a:	45a6      	cmp	lr, r4
 8000a0c:	f200 80bb 	bhi.w	8000b86 <__udivmoddi4+0x2ca>
 8000a10:	4608      	mov	r0, r1
 8000a12:	eba4 040e 	sub.w	r4, r4, lr
 8000a16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a1a:	e79c      	b.n	8000956 <__udivmoddi4+0x9a>
 8000a1c:	f1c6 0720 	rsb	r7, r6, #32
 8000a20:	40b3      	lsls	r3, r6
 8000a22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a32:	431c      	orrs	r4, r3
 8000a34:	40f9      	lsrs	r1, r7
 8000a36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a42:	0c20      	lsrs	r0, r4, #16
 8000a44:	fa1f fe8c 	uxth.w	lr, ip
 8000a48:	fb09 1118 	mls	r1, r9, r8, r1
 8000a4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a50:	fb08 f00e 	mul.w	r0, r8, lr
 8000a54:	4288      	cmp	r0, r1
 8000a56:	fa02 f206 	lsl.w	r2, r2, r6
 8000a5a:	d90b      	bls.n	8000a74 <__udivmoddi4+0x1b8>
 8000a5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a60:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000a64:	f080 8088 	bcs.w	8000b78 <__udivmoddi4+0x2bc>
 8000a68:	4288      	cmp	r0, r1
 8000a6a:	f240 8085 	bls.w	8000b78 <__udivmoddi4+0x2bc>
 8000a6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a72:	4461      	add	r1, ip
 8000a74:	1a09      	subs	r1, r1, r0
 8000a76:	b2a4      	uxth	r4, r4
 8000a78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a88:	458e      	cmp	lr, r1
 8000a8a:	d908      	bls.n	8000a9e <__udivmoddi4+0x1e2>
 8000a8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a90:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000a94:	d26c      	bcs.n	8000b70 <__udivmoddi4+0x2b4>
 8000a96:	458e      	cmp	lr, r1
 8000a98:	d96a      	bls.n	8000b70 <__udivmoddi4+0x2b4>
 8000a9a:	3802      	subs	r0, #2
 8000a9c:	4461      	add	r1, ip
 8000a9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aa2:	fba0 9402 	umull	r9, r4, r0, r2
 8000aa6:	eba1 010e 	sub.w	r1, r1, lr
 8000aaa:	42a1      	cmp	r1, r4
 8000aac:	46c8      	mov	r8, r9
 8000aae:	46a6      	mov	lr, r4
 8000ab0:	d356      	bcc.n	8000b60 <__udivmoddi4+0x2a4>
 8000ab2:	d053      	beq.n	8000b5c <__udivmoddi4+0x2a0>
 8000ab4:	b15d      	cbz	r5, 8000ace <__udivmoddi4+0x212>
 8000ab6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aba:	eb61 010e 	sbc.w	r1, r1, lr
 8000abe:	fa01 f707 	lsl.w	r7, r1, r7
 8000ac2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ac6:	40f1      	lsrs	r1, r6
 8000ac8:	431f      	orrs	r7, r3
 8000aca:	e9c5 7100 	strd	r7, r1, [r5]
 8000ace:	2600      	movs	r6, #0
 8000ad0:	4631      	mov	r1, r6
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	40d8      	lsrs	r0, r3
 8000adc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ae4:	4091      	lsls	r1, r2
 8000ae6:	4301      	orrs	r1, r0
 8000ae8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aec:	fa1f fe8c 	uxth.w	lr, ip
 8000af0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000af4:	fb07 3610 	mls	r6, r7, r0, r3
 8000af8:	0c0b      	lsrs	r3, r1, #16
 8000afa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000afe:	fb00 f60e 	mul.w	r6, r0, lr
 8000b02:	429e      	cmp	r6, r3
 8000b04:	fa04 f402 	lsl.w	r4, r4, r2
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x260>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000b12:	d22f      	bcs.n	8000b74 <__udivmoddi4+0x2b8>
 8000b14:	429e      	cmp	r6, r3
 8000b16:	d92d      	bls.n	8000b74 <__udivmoddi4+0x2b8>
 8000b18:	3802      	subs	r0, #2
 8000b1a:	4463      	add	r3, ip
 8000b1c:	1b9b      	subs	r3, r3, r6
 8000b1e:	b289      	uxth	r1, r1
 8000b20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b24:	fb07 3316 	mls	r3, r7, r6, r3
 8000b28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b30:	428b      	cmp	r3, r1
 8000b32:	d908      	bls.n	8000b46 <__udivmoddi4+0x28a>
 8000b34:	eb1c 0101 	adds.w	r1, ip, r1
 8000b38:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000b3c:	d216      	bcs.n	8000b6c <__udivmoddi4+0x2b0>
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d914      	bls.n	8000b6c <__udivmoddi4+0x2b0>
 8000b42:	3e02      	subs	r6, #2
 8000b44:	4461      	add	r1, ip
 8000b46:	1ac9      	subs	r1, r1, r3
 8000b48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b4c:	e738      	b.n	80009c0 <__udivmoddi4+0x104>
 8000b4e:	462e      	mov	r6, r5
 8000b50:	4628      	mov	r0, r5
 8000b52:	e705      	b.n	8000960 <__udivmoddi4+0xa4>
 8000b54:	4606      	mov	r6, r0
 8000b56:	e6e3      	b.n	8000920 <__udivmoddi4+0x64>
 8000b58:	4618      	mov	r0, r3
 8000b5a:	e6f8      	b.n	800094e <__udivmoddi4+0x92>
 8000b5c:	454b      	cmp	r3, r9
 8000b5e:	d2a9      	bcs.n	8000ab4 <__udivmoddi4+0x1f8>
 8000b60:	ebb9 0802 	subs.w	r8, r9, r2
 8000b64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b68:	3801      	subs	r0, #1
 8000b6a:	e7a3      	b.n	8000ab4 <__udivmoddi4+0x1f8>
 8000b6c:	4646      	mov	r6, r8
 8000b6e:	e7ea      	b.n	8000b46 <__udivmoddi4+0x28a>
 8000b70:	4620      	mov	r0, r4
 8000b72:	e794      	b.n	8000a9e <__udivmoddi4+0x1e2>
 8000b74:	4640      	mov	r0, r8
 8000b76:	e7d1      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b78:	46d0      	mov	r8, sl
 8000b7a:	e77b      	b.n	8000a74 <__udivmoddi4+0x1b8>
 8000b7c:	3b02      	subs	r3, #2
 8000b7e:	4461      	add	r1, ip
 8000b80:	e732      	b.n	80009e8 <__udivmoddi4+0x12c>
 8000b82:	4630      	mov	r0, r6
 8000b84:	e709      	b.n	800099a <__udivmoddi4+0xde>
 8000b86:	4464      	add	r4, ip
 8000b88:	3802      	subs	r0, #2
 8000b8a:	e742      	b.n	8000a12 <__udivmoddi4+0x156>

08000b8c <__aeabi_idiv0>:
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <stop_light_turn_on_left>:
#define RIGHT_5_OFF		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3)


// ----------------------------------------------------------------------------------------
void stop_light_turn_on_left(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	LEFT_1_ON; 		LEFT_2_ON;		LEFT_3_ON;		LEFT_4_ON;		LEFT_5_ON;
 8000b94:	2100      	movs	r1, #0
 8000b96:	480a      	ldr	r0, [pc, #40]	; (8000bc0 <stop_light_turn_on_left+0x30>)
 8000b98:	f007 f990 	bl	8007ebc <HAL_TIM_PWM_Start>
 8000b9c:	2104      	movs	r1, #4
 8000b9e:	4808      	ldr	r0, [pc, #32]	; (8000bc0 <stop_light_turn_on_left+0x30>)
 8000ba0:	f007 f98c 	bl	8007ebc <HAL_TIM_PWM_Start>
 8000ba4:	2108      	movs	r1, #8
 8000ba6:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <stop_light_turn_on_left+0x30>)
 8000ba8:	f007 f988 	bl	8007ebc <HAL_TIM_PWM_Start>
 8000bac:	210c      	movs	r1, #12
 8000bae:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <stop_light_turn_on_left+0x30>)
 8000bb0:	f007 f984 	bl	8007ebc <HAL_TIM_PWM_Start>
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <stop_light_turn_on_left+0x34>)
 8000bb8:	f007 f980 	bl	8007ebc <HAL_TIM_PWM_Start>
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20001638 	.word	0x20001638
 8000bc4:	20001680 	.word	0x20001680

08000bc8 <stop_light_turn_on_right>:

// ----------------------------------------------------------------------------------------
void stop_light_turn_on_right(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	RIGHT_1_ON;		RIGHT_2_ON;		RIGHT_3_ON;		RIGHT_4_ON;		RIGHT_5_ON;
 8000bcc:	2104      	movs	r1, #4
 8000bce:	480a      	ldr	r0, [pc, #40]	; (8000bf8 <stop_light_turn_on_right+0x30>)
 8000bd0:	f007 f974 	bl	8007ebc <HAL_TIM_PWM_Start>
 8000bd4:	2108      	movs	r1, #8
 8000bd6:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <stop_light_turn_on_right+0x30>)
 8000bd8:	f007 f970 	bl	8007ebc <HAL_TIM_PWM_Start>
 8000bdc:	210c      	movs	r1, #12
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <stop_light_turn_on_right+0x30>)
 8000be0:	f007 f96c 	bl	8007ebc <HAL_TIM_PWM_Start>
 8000be4:	2104      	movs	r1, #4
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <stop_light_turn_on_right+0x34>)
 8000be8:	f007 f968 	bl	8007ebc <HAL_TIM_PWM_Start>
 8000bec:	2108      	movs	r1, #8
 8000bee:	4803      	ldr	r0, [pc, #12]	; (8000bfc <stop_light_turn_on_right+0x34>)
 8000bf0:	f007 f964 	bl	8007ebc <HAL_TIM_PWM_Start>
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20001680 	.word	0x20001680
 8000bfc:	200016c8 	.word	0x200016c8

08000c00 <stop_light_turn_off_left>:

// ----------------------------------------------------------------------------------------
void stop_light_turn_off_left(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	LEFT_1_OFF;		LEFT_2_OFF;		LEFT_3_OFF;		LEFT_4_OFF;		LEFT_5_OFF;
 8000c04:	2100      	movs	r1, #0
 8000c06:	480a      	ldr	r0, [pc, #40]	; (8000c30 <stop_light_turn_off_left+0x30>)
 8000c08:	f007 fa20 	bl	800804c <HAL_TIM_PWM_Stop>
 8000c0c:	2104      	movs	r1, #4
 8000c0e:	4808      	ldr	r0, [pc, #32]	; (8000c30 <stop_light_turn_off_left+0x30>)
 8000c10:	f007 fa1c 	bl	800804c <HAL_TIM_PWM_Stop>
 8000c14:	2108      	movs	r1, #8
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <stop_light_turn_off_left+0x30>)
 8000c18:	f007 fa18 	bl	800804c <HAL_TIM_PWM_Stop>
 8000c1c:	210c      	movs	r1, #12
 8000c1e:	4804      	ldr	r0, [pc, #16]	; (8000c30 <stop_light_turn_off_left+0x30>)
 8000c20:	f007 fa14 	bl	800804c <HAL_TIM_PWM_Stop>
 8000c24:	2100      	movs	r1, #0
 8000c26:	4803      	ldr	r0, [pc, #12]	; (8000c34 <stop_light_turn_off_left+0x34>)
 8000c28:	f007 fa10 	bl	800804c <HAL_TIM_PWM_Stop>
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20001638 	.word	0x20001638
 8000c34:	20001680 	.word	0x20001680

08000c38 <stop_light_turn_off_right>:

// ----------------------------------------------------------------------------------------
void stop_light_turn_off_right(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	RIGHT_1_OFF;	RIGHT_2_OFF;	RIGHT_3_OFF;	RIGHT_4_OFF;	RIGHT_5_OFF;
 8000c3c:	2104      	movs	r1, #4
 8000c3e:	480a      	ldr	r0, [pc, #40]	; (8000c68 <stop_light_turn_off_right+0x30>)
 8000c40:	f007 fa04 	bl	800804c <HAL_TIM_PWM_Stop>
 8000c44:	2108      	movs	r1, #8
 8000c46:	4808      	ldr	r0, [pc, #32]	; (8000c68 <stop_light_turn_off_right+0x30>)
 8000c48:	f007 fa00 	bl	800804c <HAL_TIM_PWM_Stop>
 8000c4c:	210c      	movs	r1, #12
 8000c4e:	4806      	ldr	r0, [pc, #24]	; (8000c68 <stop_light_turn_off_right+0x30>)
 8000c50:	f007 f9fc 	bl	800804c <HAL_TIM_PWM_Stop>
 8000c54:	2104      	movs	r1, #4
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <stop_light_turn_off_right+0x34>)
 8000c58:	f007 f9f8 	bl	800804c <HAL_TIM_PWM_Stop>
 8000c5c:	2108      	movs	r1, #8
 8000c5e:	4803      	ldr	r0, [pc, #12]	; (8000c6c <stop_light_turn_off_right+0x34>)
 8000c60:	f007 f9f4 	bl	800804c <HAL_TIM_PWM_Stop>
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20001680 	.word	0x20001680
 8000c6c:	200016c8 	.word	0x200016c8

08000c70 <set_duty_cycle_stop_left_1>:
	RIGHT_1_ON;
	HAL_Delay(delay);
}
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_left_1(int duty_cycle)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty_cycle);
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <set_duty_cycle_stop_left_1+0x1c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	20001680 	.word	0x20001680

08000c90 <set_duty_cycle_stop_left_2>:
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_left_2(int duty_cycle)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, duty_cycle);
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <set_duty_cycle_stop_left_2+0x1c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	20001638 	.word	0x20001638

08000cb0 <set_duty_cycle_stop_left_3>:
// ---------------------------------------------------------------------------------------
void set_duty_cycle_stop_left_3(int duty_cycle)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle);
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <set_duty_cycle_stop_left_3+0x1c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	20001638 	.word	0x20001638

08000cd0 <set_duty_cycle_stop_left_4>:
// ---------------------------------------------------------------------------------------
void set_duty_cycle_stop_left_4(int duty_cycle)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty_cycle);
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <set_duty_cycle_stop_left_4+0x1c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	20001638 	.word	0x20001638

08000cf0 <set_duty_cycle_stop_left_5>:
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_left_5(int duty_cycle)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle);
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <set_duty_cycle_stop_left_5+0x1c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	20001638 	.word	0x20001638

08000d10 <set_duty_cycle_stop_ritht_1>:
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_ritht_1(int duty_cycle)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, duty_cycle);
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <set_duty_cycle_stop_ritht_1+0x1c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	200016c8 	.word	0x200016c8

08000d30 <set_duty_cycle_stop_ritht_2>:
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_ritht_2(int duty_cycle)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, duty_cycle);
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <set_duty_cycle_stop_ritht_2+0x1c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	200016c8 	.word	0x200016c8

08000d50 <set_duty_cycle_stop_ritht_3>:
// ---------------------------------------------------------------------------------------
void set_duty_cycle_stop_ritht_3(int duty_cycle)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, duty_cycle);
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <set_duty_cycle_stop_ritht_3+0x1c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	20001680 	.word	0x20001680

08000d70 <set_duty_cycle_stop_ritht_4>:
// ---------------------------------------------------------------------------------------
void set_duty_cycle_stop_ritht_4(int duty_cycle)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty_cycle);
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <set_duty_cycle_stop_ritht_4+0x1c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	20001680 	.word	0x20001680

08000d90 <set_duty_cycle_stop_ritht_5>:
// ----------------------------------------------------------------------------------------
void set_duty_cycle_stop_ritht_5(int duty_cycle)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycle);
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <set_duty_cycle_stop_ritht_5+0x1c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	20001680 	.word	0x20001680

08000db0 <stop_light_all_turn_off>:
	stop_light_turn_on_right();
}

// ----------------------------------------------------------------------------------------
void stop_light_all_turn_off(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0

	stop_light_turn_off_left();
 8000db4:	f7ff ff24 	bl	8000c00 <stop_light_turn_off_left>
	stop_light_turn_off_right();
 8000db8:	f7ff ff3e 	bl	8000c38 <stop_light_turn_off_right>
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <test_from_midle_to_corner>:
		}
	}
}
// ----------------------------------------------------------------------------------------
void test_from_midle_to_corner(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
	int delay = 1;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	603b      	str	r3, [r7, #0]
	int duty_cycle = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]

	  // Turn on RED LEDs
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4866      	ldr	r0, [pc, #408]	; (8000f6c <test_from_midle_to_corner+0x1ac>)
 8000dd2:	f007 f873 	bl	8007ebc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000dd6:	2104      	movs	r1, #4
 8000dd8:	4864      	ldr	r0, [pc, #400]	; (8000f6c <test_from_midle_to_corner+0x1ac>)
 8000dda:	f007 f86f 	bl	8007ebc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000dde:	2108      	movs	r1, #8
 8000de0:	4862      	ldr	r0, [pc, #392]	; (8000f6c <test_from_midle_to_corner+0x1ac>)
 8000de2:	f007 f86b 	bl	8007ebc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000de6:	210c      	movs	r1, #12
 8000de8:	4860      	ldr	r0, [pc, #384]	; (8000f6c <test_from_midle_to_corner+0x1ac>)
 8000dea:	f007 f867 	bl	8007ebc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000dee:	2100      	movs	r1, #0
 8000df0:	485f      	ldr	r0, [pc, #380]	; (8000f70 <test_from_midle_to_corner+0x1b0>)
 8000df2:	f007 f863 	bl	8007ebc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000df6:	2104      	movs	r1, #4
 8000df8:	485d      	ldr	r0, [pc, #372]	; (8000f70 <test_from_midle_to_corner+0x1b0>)
 8000dfa:	f007 f85f 	bl	8007ebc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000dfe:	2108      	movs	r1, #8
 8000e00:	485b      	ldr	r0, [pc, #364]	; (8000f70 <test_from_midle_to_corner+0x1b0>)
 8000e02:	f007 f85b 	bl	8007ebc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000e06:	210c      	movs	r1, #12
 8000e08:	4859      	ldr	r0, [pc, #356]	; (8000f70 <test_from_midle_to_corner+0x1b0>)
 8000e0a:	f007 f857 	bl	8007ebc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000e0e:	2104      	movs	r1, #4
 8000e10:	4858      	ldr	r0, [pc, #352]	; (8000f74 <test_from_midle_to_corner+0x1b4>)
 8000e12:	f007 f853 	bl	8007ebc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000e16:	2108      	movs	r1, #8
 8000e18:	4856      	ldr	r0, [pc, #344]	; (8000f74 <test_from_midle_to_corner+0x1b4>)
 8000e1a:	f007 f84f 	bl	8007ebc <HAL_TIM_PWM_Start>

	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	e010      	b.n	8000e46 <test_from_midle_to_corner+0x86>
	{
		set_duty_cycle_stop_left_1(duty_cycle);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ff23 	bl	8000c70 <set_duty_cycle_stop_left_1>
		set_duty_cycle_stop_ritht_1(duty_cycle);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ff70 	bl	8000d10 <set_duty_cycle_stop_ritht_1>

		stop_light_turn_on_left();
 8000e30:	f7ff feae 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000e34:	f7ff fec8 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f003 fc8e 	bl	800475c <HAL_Delay>
	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3301      	adds	r3, #1
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b64      	cmp	r3, #100	; 0x64
 8000e4a:	ddeb      	ble.n	8000e24 <test_from_midle_to_corner+0x64>
	}

	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	e010      	b.n	8000e74 <test_from_midle_to_corner+0xb4>
	{
		set_duty_cycle_stop_left_2(duty_cycle);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ff1c 	bl	8000c90 <set_duty_cycle_stop_left_2>
		set_duty_cycle_stop_ritht_2(duty_cycle);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff ff69 	bl	8000d30 <set_duty_cycle_stop_ritht_2>

		stop_light_turn_on_left();
 8000e5e:	f7ff fe97 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000e62:	f7ff feb1 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f003 fc77 	bl	800475c <HAL_Delay>
	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3301      	adds	r3, #1
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b64      	cmp	r3, #100	; 0x64
 8000e78:	ddeb      	ble.n	8000e52 <test_from_midle_to_corner+0x92>
	}

	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	e010      	b.n	8000ea2 <test_from_midle_to_corner+0xe2>
	{
		set_duty_cycle_stop_left_3(duty_cycle);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff ff15 	bl	8000cb0 <set_duty_cycle_stop_left_3>
		set_duty_cycle_stop_ritht_3(duty_cycle);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ff62 	bl	8000d50 <set_duty_cycle_stop_ritht_3>

		stop_light_turn_on_left();
 8000e8c:	f7ff fe80 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000e90:	f7ff fe9a 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f003 fc60 	bl	800475c <HAL_Delay>
	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b64      	cmp	r3, #100	; 0x64
 8000ea6:	ddeb      	ble.n	8000e80 <test_from_midle_to_corner+0xc0>
	}

	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	e010      	b.n	8000ed0 <test_from_midle_to_corner+0x110>
	{
		set_duty_cycle_stop_left_4(duty_cycle);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ff0e 	bl	8000cd0 <set_duty_cycle_stop_left_4>
		set_duty_cycle_stop_ritht_4(duty_cycle);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff5b 	bl	8000d70 <set_duty_cycle_stop_ritht_4>

		stop_light_turn_on_left();
 8000eba:	f7ff fe69 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000ebe:	f7ff fe83 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f003 fc49 	bl	800475c <HAL_Delay>
	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b64      	cmp	r3, #100	; 0x64
 8000ed4:	ddeb      	ble.n	8000eae <test_from_midle_to_corner+0xee>
	}

	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	e010      	b.n	8000efe <test_from_midle_to_corner+0x13e>
	{
		set_duty_cycle_stop_left_5(duty_cycle);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ff07 	bl	8000cf0 <set_duty_cycle_stop_left_5>
		set_duty_cycle_stop_ritht_5(duty_cycle);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ff54 	bl	8000d90 <set_duty_cycle_stop_ritht_5>

		stop_light_turn_on_left();
 8000ee8:	f7ff fe52 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000eec:	f7ff fe6c 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f003 fc32 	bl	800475c <HAL_Delay>
	for(duty_cycle = 0; duty_cycle <= MAX_DEMO_BRIGHTNESS; duty_cycle++)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3301      	adds	r3, #1
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b64      	cmp	r3, #100	; 0x64
 8000f02:	ddeb      	ble.n	8000edc <test_from_midle_to_corner+0x11c>
	}

	for(duty_cycle = MAX_DEMO_BRIGHTNESS; duty_cycle >= 0; duty_cycle--)
 8000f04:	2364      	movs	r3, #100	; 0x64
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	e028      	b.n	8000f5c <test_from_midle_to_corner+0x19c>
	{
		set_duty_cycle_stop_left_1(duty_cycle);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff feb0 	bl	8000c70 <set_duty_cycle_stop_left_1>
		set_duty_cycle_stop_left_2(duty_cycle);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff febd 	bl	8000c90 <set_duty_cycle_stop_left_2>
		set_duty_cycle_stop_left_3(duty_cycle);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff feca 	bl	8000cb0 <set_duty_cycle_stop_left_3>
		set_duty_cycle_stop_left_4(duty_cycle);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff fed7 	bl	8000cd0 <set_duty_cycle_stop_left_4>
		set_duty_cycle_stop_left_5(duty_cycle);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff fee4 	bl	8000cf0 <set_duty_cycle_stop_left_5>

		set_duty_cycle_stop_ritht_1(duty_cycle);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff fef1 	bl	8000d10 <set_duty_cycle_stop_ritht_1>
		set_duty_cycle_stop_ritht_2(duty_cycle);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff fefe 	bl	8000d30 <set_duty_cycle_stop_ritht_2>
		set_duty_cycle_stop_ritht_3(duty_cycle);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff0b 	bl	8000d50 <set_duty_cycle_stop_ritht_3>
		set_duty_cycle_stop_ritht_4(duty_cycle);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ff18 	bl	8000d70 <set_duty_cycle_stop_ritht_4>
		set_duty_cycle_stop_ritht_5(duty_cycle);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ff25 	bl	8000d90 <set_duty_cycle_stop_ritht_5>

		stop_light_turn_on_left();
 8000f46:	f7ff fe23 	bl	8000b90 <stop_light_turn_on_left>
		stop_light_turn_on_right();
 8000f4a:	f7ff fe3d 	bl	8000bc8 <stop_light_turn_on_right>

		HAL_Delay(delay);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f003 fc03 	bl	800475c <HAL_Delay>
	for(duty_cycle = MAX_DEMO_BRIGHTNESS; duty_cycle >= 0; duty_cycle--)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	dad3      	bge.n	8000f0a <test_from_midle_to_corner+0x14a>
	}

}
 8000f62:	bf00      	nop
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20001638 	.word	0x20001638
 8000f70:	20001680 	.word	0x20001680
 8000f74:	200016c8 	.word	0x200016c8

08000f78 <ARGB_Init>:

/**
 * @brief Init timer & prescalers
 * @param none
 */
void ARGB_Init(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
    /* Auto-calculation! */
    u32_t APBfq; // Clock freq
#ifdef APB1
    APBfq = HAL_RCC_GetPCLK1Freq();
 8000f7e:	f006 fb6f 	bl	8007660 <HAL_RCC_GetPCLK1Freq>
 8000f82:	6078      	str	r0, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE1) == 0 ? 1 : 2;
 8000f84:	4b36      	ldr	r3, [pc, #216]	; (8001060 <ARGB_Init+0xe8>)
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <ARGB_Init+0x1c>
 8000f90:	2301      	movs	r3, #1
 8000f92:	e000      	b.n	8000f96 <ARGB_Init+0x1e>
 8000f94:	2302      	movs	r3, #2
 8000f96:	461a      	mov	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	fb02 f303 	mul.w	r3, r2, r3
 8000f9e:	607b      	str	r3, [r7, #4]
    APBfq *= (RCC->CFGR & RCC_CFGR_PPRE2) == 0 ? 1 : 2;
#endif
#ifdef WS2811S
    APBfq /= (uint32_t) (400 * 1000);  // 400 KHz - 2.5us
#else
    APBfq /= (uint32_t) (800 * 1000);  // 800 KHz - 1.25us
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	0a1b      	lsrs	r3, r3, #8
 8000fa4:	4a2f      	ldr	r2, [pc, #188]	; (8001064 <ARGB_Init+0xec>)
 8000fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000faa:	091b      	lsrs	r3, r3, #4
 8000fac:	607b      	str	r3, [r7, #4]
#endif
    TIM_HANDLE.Instance->PSC = 0;                        // dummy hardcode now
 8000fae:	4b2e      	ldr	r3, [pc, #184]	; (8001068 <ARGB_Init+0xf0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28
    TIM_HANDLE.Instance->ARR = (uint16_t) (APBfq - 1);   // set timer prescaler
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	4b2a      	ldr	r3, [pc, #168]	; (8001068 <ARGB_Init+0xf0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM_HANDLE.Instance->EGR = 1;                        // update timer registers
 8000fc4:	4b28      	ldr	r3, [pc, #160]	; (8001068 <ARGB_Init+0xf0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	615a      	str	r2, [r3, #20]
#ifdef WS2812
    PWM_HI = (u8_t) (APBfq * 0.56) - 1;     // Log.1 - 56% - 0.70us
    PWM_LO = (u8_t) (APBfq * 0.28) - 1;     // Log.0 - 28% - 0.35us
#endif
#ifdef SK6812
    PWM_HI = (u8_t) (APBfq * 0.50) - 1;     // Log.1 - 48% - 0.60us // v  PWM_HI = (u8_t) (APBfq * 0.48) - 1;     // Log.1 - 48% - 0.60us
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff fbc3 	bl	8000758 <__aeabi_ui2d>
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	4b25      	ldr	r3, [pc, #148]	; (800106c <ARGB_Init+0xf4>)
 8000fd8:	f7ff f952 	bl	8000280 <__aeabi_dmul>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f7ff fc32 	bl	800084c <__aeabi_d2uiz>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	3b01      	subs	r3, #1
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <ARGB_Init+0xf8>)
 8000ff2:	701a      	strb	r2, [r3, #0]
    PWM_LO = (u8_t) (APBfq * 0.26) - 1;     // Log.0 - 24% - 0.30us  // PWM_LO = (u8_t) (APBfq * 0.24) - 1;
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff fbaf 	bl	8000758 <__aeabi_ui2d>
 8000ffa:	a317      	add	r3, pc, #92	; (adr r3, 8001058 <ARGB_Init+0xe0>)
 8000ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001000:	f7ff f93e 	bl	8000280 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4610      	mov	r0, r2
 800100a:	4619      	mov	r1, r3
 800100c:	f7ff fc1e 	bl	800084c <__aeabi_d2uiz>
 8001010:	4603      	mov	r3, r0
 8001012:	b2db      	uxtb	r3, r3
 8001014:	3b01      	subs	r3, #1
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4b16      	ldr	r3, [pc, #88]	; (8001074 <ARGB_Init+0xfc>)
 800101a:	701a      	strb	r2, [r3, #0]
//#if INV_SIGNAL
//    TIM_POINTER->CCER |= TIM_CCER_CC2P; // set inv ch bit
//#else
//    TIM_POINTER->CCER &= ~TIM_CCER_CC2P;
//#endif
    ARGB_LOC_ST_LEFT = ARGB_READY; // Set Ready Flag
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <ARGB_Init+0x100>)
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH_LEFT, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <ARGB_Init+0xf0>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2201      	movs	r2, #1
 8001028:	2108      	movs	r1, #8
 800102a:	4618      	mov	r0, r3
 800102c:	f007 fe74 	bl	8008d18 <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8001030:	2001      	movs	r0, #1
 8001032:	f003 fb93 	bl	800475c <HAL_Delay>
    TIM_CCxChannelCmd(TIM_HANDLE.Instance, TIM_CH_RIGHT, TIM_CCx_ENABLE); // Enable GPIO to IDLE state
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <ARGB_Init+0xf0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2201      	movs	r2, #1
 800103c:	210c      	movs	r1, #12
 800103e:	4618      	mov	r0, r3
 8001040:	f007 fe6a 	bl	8008d18 <TIM_CCxChannelCmd>
    HAL_Delay(1); // Make some delay
 8001044:	2001      	movs	r0, #1
 8001046:	f003 fb89 	bl	800475c <HAL_Delay>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	f3af 8000 	nop.w
 8001058:	0a3d70a4 	.word	0x0a3d70a4
 800105c:	3fd0a3d7 	.word	0x3fd0a3d7
 8001060:	40023800 	.word	0x40023800
 8001064:	014f8b59 	.word	0x014f8b59
 8001068:	20001758 	.word	0x20001758
 800106c:	3fe00000 	.word	0x3fe00000
 8001070:	200000e4 	.word	0x200000e4
 8001074:	200000e5 	.word	0x200000e5
 8001078:	20000594 	.word	0x20000594

0800107c <ARGB_Clear_left>:
/**
 * @brief Fill ALL LEDs with (0,0,0)
 * @param none
 * @note Update strip after that
 */
void ARGB_Clear_left(void) {
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
    ARGB_FillRGB_left(0, 0, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	2100      	movs	r1, #0
 8001084:	2000      	movs	r0, #0
 8001086:	f000 f95d 	bl	8001344 <ARGB_FillRGB_left>
#ifdef SK6812
    ARGB_FillWhite_left(0);
 800108a:	2000      	movs	r0, #0
 800108c:	f000 f99c 	bl	80013c8 <ARGB_FillWhite_left>
#endif
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}

08001094 <ARGB_Clear_right>:
// -------------------------------------------------------------------------------
void ARGB_Clear_right(void) {
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
    ARGB_FillRGB_right(0, 0, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2100      	movs	r1, #0
 800109c:	2000      	movs	r0, #0
 800109e:	f000 f972 	bl	8001386 <ARGB_FillRGB_right>
#ifdef SK6812
    ARGB_FillWhite_right(0);
 80010a2:	2000      	movs	r0, #0
 80010a4:	f000 f9ad 	bl	8001402 <ARGB_FillWhite_right>
#endif
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}

080010ac <ARGB_SetBrightness>:

/**
 * @brief Set GLOBAL LED brightness
 * @param[in] br Brightness [0..255]
 */
void ARGB_SetBrightness(u8_t br) {
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
    ARGB_BR = br;
 80010b6:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <ARGB_SetBrightness+0x1c>)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	7013      	strb	r3, [r2, #0]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	20000000 	.word	0x20000000

080010cc <ARGB_SetRGB_left>:
 * @param[in] i LED position
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_SetRGB_left(u16_t i, u8_t g, u8_t r, u8_t b) {
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4604      	mov	r4, r0
 80010d4:	4608      	mov	r0, r1
 80010d6:	4611      	mov	r1, r2
 80010d8:	461a      	mov	r2, r3
 80010da:	4623      	mov	r3, r4
 80010dc:	80fb      	strh	r3, [r7, #6]
 80010de:	4603      	mov	r3, r0
 80010e0:	717b      	strb	r3, [r7, #5]
 80010e2:	460b      	mov	r3, r1
 80010e4:	713b      	strb	r3, [r7, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	2b54      	cmp	r3, #84	; 0x54
 80010ee:	d913      	bls.n	8001118 <ARGB_SetRGB_left+0x4c>
        u16_t _i = i / NUM_PIXELS;
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	4a30      	ldr	r2, [pc, #192]	; (80011b4 <ARGB_SetRGB_left+0xe8>)
 80010f4:	fba2 2303 	umull	r2, r3, r2, r3
 80010f8:	099b      	lsrs	r3, r3, #6
 80010fa:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 80010fc:	89fb      	ldrh	r3, [r7, #14]
 80010fe:	461a      	mov	r2, r3
 8001100:	0092      	lsls	r2, r2, #2
 8001102:	4413      	add	r3, r2
 8001104:	461a      	mov	r2, r3
 8001106:	0111      	lsls	r1, r2, #4
 8001108:	461a      	mov	r2, r3
 800110a:	460b      	mov	r3, r1
 800110c:	4413      	add	r3, r2
 800110e:	425b      	negs	r3, r3
 8001110:	b29a      	uxth	r2, r3
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	4413      	add	r3, r2
 8001116:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 8001118:	4b27      	ldr	r3, [pc, #156]	; (80011b8 <ARGB_SetRGB_left+0xec>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	3301      	adds	r3, #1
 8001120:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001124:	fb92 f3f3 	sdiv	r3, r2, r3
 8001128:	793a      	ldrb	r2, [r7, #4]
 800112a:	fb92 f3f3 	sdiv	r3, r2, r3
 800112e:	713b      	strb	r3, [r7, #4]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 8001130:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <ARGB_SetRGB_left+0xec>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	3301      	adds	r3, #1
 8001138:	f44f 7280 	mov.w	r2, #256	; 0x100
 800113c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001140:	797a      	ldrb	r2, [r7, #5]
 8001142:	fb92 f3f3 	sdiv	r3, r2, r3
 8001146:	717b      	strb	r3, [r7, #5]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <ARGB_SetRGB_left+0xec>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	3301      	adds	r3, #1
 8001150:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001154:	fb92 f3f3 	sdiv	r3, r2, r3
 8001158:	78fa      	ldrb	r2, [r7, #3]
 800115a:	fb92 f3f3 	sdiv	r3, r2, r3
 800115e:	70fb      	strb	r3, [r7, #3]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 8001160:	797b      	ldrb	r3, [r7, #5]
 8001162:	21b0      	movs	r1, #176	; 0xb0
 8001164:	4618      	mov	r0, r3
 8001166:	f000 fd01 	bl	8001b6c <scale8>
 800116a:	4603      	mov	r3, r0
 800116c:	717b      	strb	r3, [r7, #5]
    b = scale8(b, 0xF0);
 800116e:	78fb      	ldrb	r3, [r7, #3]
 8001170:	21f0      	movs	r1, #240	; 0xf0
 8001172:	4618      	mov	r0, r3
 8001174:	f000 fcfa 	bl	8001b6c <scale8>
 8001178:	4603      	mov	r3, r0
 800117a:	70fb      	strb	r3, [r7, #3]
#endif
    // Subpixel chain order
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
 800117c:	793b      	ldrb	r3, [r7, #4]
 800117e:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = g;
 8001180:	797b      	ldrb	r3, [r7, #5]
 8001182:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8001184:	78fb      	ldrb	r3, [r7, #3]
 8001186:	72fb      	strb	r3, [r7, #11]
    const u8_t subp2 = r;
    const u8_t subp3 = b;
#endif
    // RGB or RGBW
#ifdef SK6812
    RGB_BUF_LEFT[4 * i] = subp1;     // subpixel 1
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	490b      	ldr	r1, [pc, #44]	; (80011bc <ARGB_SetRGB_left+0xf0>)
 800118e:	7b7a      	ldrb	r2, [r7, #13]
 8001190:	54ca      	strb	r2, [r1, r3]
    RGB_BUF_LEFT[4 * i + 1] = subp2; // subpixel 2
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	3301      	adds	r3, #1
 8001198:	4908      	ldr	r1, [pc, #32]	; (80011bc <ARGB_SetRGB_left+0xf0>)
 800119a:	7b3a      	ldrb	r2, [r7, #12]
 800119c:	54ca      	strb	r2, [r1, r3]
    RGB_BUF_LEFT[4 * i + 2] = subp3; // subpixel 3
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	3302      	adds	r3, #2
 80011a4:	4905      	ldr	r1, [pc, #20]	; (80011bc <ARGB_SetRGB_left+0xf0>)
 80011a6:	7afa      	ldrb	r2, [r7, #11]
 80011a8:	54ca      	strb	r2, [r1, r3]
#else
    RGB_BUF_LEFT[3 * i] = subp1;     // subpixel 1
    RGB_BUF_LEFT[3 * i + 1] = subp2; // subpixel 2
    RGB_BUF_LEFT[3 * i + 2] = subp3; // subpixel 3
#endif
}
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd90      	pop	{r4, r7, pc}
 80011b2:	bf00      	nop
 80011b4:	c0c0c0c1 	.word	0xc0c0c0c1
 80011b8:	20000000 	.word	0x20000000
 80011bc:	200000e8 	.word	0x200000e8

080011c0 <ARGB_SetRGB_right>:
// ----------------------------------------------------------------------------
void ARGB_SetRGB_right(u16_t i, u8_t g, u8_t r, u8_t b) {
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4604      	mov	r4, r0
 80011c8:	4608      	mov	r0, r1
 80011ca:	4611      	mov	r1, r2
 80011cc:	461a      	mov	r2, r3
 80011ce:	4623      	mov	r3, r4
 80011d0:	80fb      	strh	r3, [r7, #6]
 80011d2:	4603      	mov	r3, r0
 80011d4:	717b      	strb	r3, [r7, #5]
 80011d6:	460b      	mov	r3, r1
 80011d8:	713b      	strb	r3, [r7, #4]
 80011da:	4613      	mov	r3, r2
 80011dc:	70fb      	strb	r3, [r7, #3]
    // overflow protection
    if (i >= NUM_PIXELS) {
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	2b54      	cmp	r3, #84	; 0x54
 80011e2:	d913      	bls.n	800120c <ARGB_SetRGB_right+0x4c>
        u16_t _i = i / NUM_PIXELS;
 80011e4:	88fb      	ldrh	r3, [r7, #6]
 80011e6:	4a30      	ldr	r2, [pc, #192]	; (80012a8 <ARGB_SetRGB_right+0xe8>)
 80011e8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ec:	099b      	lsrs	r3, r3, #6
 80011ee:	81fb      	strh	r3, [r7, #14]
        i -= _i * NUM_PIXELS;
 80011f0:	89fb      	ldrh	r3, [r7, #14]
 80011f2:	461a      	mov	r2, r3
 80011f4:	0092      	lsls	r2, r2, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	461a      	mov	r2, r3
 80011fa:	0111      	lsls	r1, r2, #4
 80011fc:	461a      	mov	r2, r3
 80011fe:	460b      	mov	r3, r1
 8001200:	4413      	add	r3, r2
 8001202:	425b      	negs	r3, r3
 8001204:	b29a      	uxth	r2, r3
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	4413      	add	r3, r2
 800120a:	80fb      	strh	r3, [r7, #6]
    }
    // set brightness
    r /= 256 / ((u16_t) ARGB_BR + 1);
 800120c:	4b27      	ldr	r3, [pc, #156]	; (80012ac <ARGB_SetRGB_right+0xec>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	3301      	adds	r3, #1
 8001214:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001218:	fb92 f3f3 	sdiv	r3, r2, r3
 800121c:	793a      	ldrb	r2, [r7, #4]
 800121e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001222:	713b      	strb	r3, [r7, #4]
    g /= 256 / ((u16_t) ARGB_BR + 1);
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <ARGB_SetRGB_right+0xec>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	3301      	adds	r3, #1
 800122c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001230:	fb92 f3f3 	sdiv	r3, r2, r3
 8001234:	797a      	ldrb	r2, [r7, #5]
 8001236:	fb92 f3f3 	sdiv	r3, r2, r3
 800123a:	717b      	strb	r3, [r7, #5]
    b /= 256 / ((u16_t) ARGB_BR + 1);
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <ARGB_SetRGB_right+0xec>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	3301      	adds	r3, #1
 8001244:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001248:	fb92 f3f3 	sdiv	r3, r2, r3
 800124c:	78fa      	ldrb	r2, [r7, #3]
 800124e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001252:	70fb      	strb	r3, [r7, #3]
#if USE_GAMMA_CORRECTION
    g = scale8(g, 0xB0);
 8001254:	797b      	ldrb	r3, [r7, #5]
 8001256:	21b0      	movs	r1, #176	; 0xb0
 8001258:	4618      	mov	r0, r3
 800125a:	f000 fc87 	bl	8001b6c <scale8>
 800125e:	4603      	mov	r3, r0
 8001260:	717b      	strb	r3, [r7, #5]
    b = scale8(b, 0xF0);
 8001262:	78fb      	ldrb	r3, [r7, #3]
 8001264:	21f0      	movs	r1, #240	; 0xf0
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fc80 	bl	8001b6c <scale8>
 800126c:	4603      	mov	r3, r0
 800126e:	70fb      	strb	r3, [r7, #3]
#endif
    // Subpixel chain order
#if defined(SK6812) || defined(WS2811F) || defined(WS2811S)
    const u8_t subp1 = r;
 8001270:	793b      	ldrb	r3, [r7, #4]
 8001272:	737b      	strb	r3, [r7, #13]
    const u8_t subp2 = g;
 8001274:	797b      	ldrb	r3, [r7, #5]
 8001276:	733b      	strb	r3, [r7, #12]
    const u8_t subp3 = b;
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	72fb      	strb	r3, [r7, #11]
    const u8_t subp2 = r;
    const u8_t subp3 = b;
#endif
    // RGB or RGBW
#ifdef SK6812
    RGB_BUF_RIGHT[4 * i] = subp1;     // subpixel 1
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	490b      	ldr	r1, [pc, #44]	; (80012b0 <ARGB_SetRGB_right+0xf0>)
 8001282:	7b7a      	ldrb	r2, [r7, #13]
 8001284:	54ca      	strb	r2, [r1, r3]
    RGB_BUF_RIGHT[4 * i + 1] = subp2; // subpixel 2
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	3301      	adds	r3, #1
 800128c:	4908      	ldr	r1, [pc, #32]	; (80012b0 <ARGB_SetRGB_right+0xf0>)
 800128e:	7b3a      	ldrb	r2, [r7, #12]
 8001290:	54ca      	strb	r2, [r1, r3]
    RGB_BUF_RIGHT[4 * i + 2] = subp3; // subpixel 3
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	4905      	ldr	r1, [pc, #20]	; (80012b0 <ARGB_SetRGB_right+0xf0>)
 800129a:	7afa      	ldrb	r2, [r7, #11]
 800129c:	54ca      	strb	r2, [r1, r3]
#else
    RGB_BUF_RIGHT[3 * i] = subp1;     // subpixel 1
    RGB_BUF_RIGHT[3 * i + 1] = subp2; // subpixel 2
    RGB_BUF_RIGHT[3 * i + 2] = subp3; // subpixel 3
#endif
}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd90      	pop	{r4, r7, pc}
 80012a6:	bf00      	nop
 80012a8:	c0c0c0c1 	.word	0xc0c0c0c1
 80012ac:	20000000 	.word	0x20000000
 80012b0:	2000023c 	.word	0x2000023c

080012b4 <ARGB_SetWhite_left>:
/**
 * @brief Set White component in strip by index
 * @param[in] i LED position
 * @param[in] w White component [0..255]
 */
void ARGB_SetWhite_left(u16_t i, u8_t w) {
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	460a      	mov	r2, r1
 80012be:	80fb      	strh	r3, [r7, #6]
 80012c0:	4613      	mov	r3, r2
 80012c2:	717b      	strb	r3, [r7, #5]
#ifdef RGB
    return;
#endif
    w /= 256 / ((u16_t) ARGB_BR + 1); 			// set brightness
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <ARGB_SetWhite_left+0x40>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	3301      	adds	r3, #1
 80012cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80012d4:	797a      	ldrb	r2, [r7, #5]
 80012d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80012da:	717b      	strb	r3, [r7, #5]
    RGB_BUF_LEFT[4 * i + 3] = w;                // set white part
 80012dc:	88fb      	ldrh	r3, [r7, #6]
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	3303      	adds	r3, #3
 80012e2:	4905      	ldr	r1, [pc, #20]	; (80012f8 <ARGB_SetWhite_left+0x44>)
 80012e4:	797a      	ldrb	r2, [r7, #5]
 80012e6:	54ca      	strb	r2, [r1, r3]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	20000000 	.word	0x20000000
 80012f8:	200000e8 	.word	0x200000e8

080012fc <ARGB_SetWhite_right>:
// -------------------------------------------------------------------
void ARGB_SetWhite_right(u16_t i, u8_t w) {
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	460a      	mov	r2, r1
 8001306:	80fb      	strh	r3, [r7, #6]
 8001308:	4613      	mov	r3, r2
 800130a:	717b      	strb	r3, [r7, #5]
#ifdef RGB
    return;
#endif
    w /= 256 / ((u16_t) ARGB_BR + 1); 			// set brightness
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <ARGB_SetWhite_right+0x40>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	3301      	adds	r3, #1
 8001314:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001318:	fb92 f3f3 	sdiv	r3, r2, r3
 800131c:	797a      	ldrb	r2, [r7, #5]
 800131e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001322:	717b      	strb	r3, [r7, #5]
    RGB_BUF_RIGHT[4 * i + 3] = w;               // set white part
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	3303      	adds	r3, #3
 800132a:	4905      	ldr	r1, [pc, #20]	; (8001340 <ARGB_SetWhite_right+0x44>)
 800132c:	797a      	ldrb	r2, [r7, #5]
 800132e:	54ca      	strb	r2, [r1, r3]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	20000000 	.word	0x20000000
 8001340:	2000023c 	.word	0x2000023c

08001344 <ARGB_FillRGB_left>:
 * @brief Fill ALL LEDs with RGB color
 * @param[in] r Red component   [0..255]
 * @param[in] g Green component [0..255]
 * @param[in] b Blue component  [0..255]
 */
void ARGB_FillRGB_left(u8_t r, u8_t g, u8_t b) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
 800134e:	460b      	mov	r3, r1
 8001350:	71bb      	strb	r3, [r7, #6]
 8001352:	4613      	mov	r3, r2
 8001354:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8001356:	2300      	movs	r3, #0
 8001358:	81fb      	strh	r3, [r7, #14]
 800135a:	e00b      	b.n	8001374 <ARGB_FillRGB_left+0x30>
        ARGB_SetRGB_left(i, r, g, b);
 800135c:	89fb      	ldrh	r3, [r7, #14]
 800135e:	b298      	uxth	r0, r3
 8001360:	797b      	ldrb	r3, [r7, #5]
 8001362:	79ba      	ldrb	r2, [r7, #6]
 8001364:	79f9      	ldrb	r1, [r7, #7]
 8001366:	f7ff feb1 	bl	80010cc <ARGB_SetRGB_left>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 800136a:	89fb      	ldrh	r3, [r7, #14]
 800136c:	b29b      	uxth	r3, r3
 800136e:	3301      	adds	r3, #1
 8001370:	b29b      	uxth	r3, r3
 8001372:	81fb      	strh	r3, [r7, #14]
 8001374:	89fb      	ldrh	r3, [r7, #14]
 8001376:	b29b      	uxth	r3, r3
 8001378:	2b54      	cmp	r3, #84	; 0x54
 800137a:	d9ef      	bls.n	800135c <ARGB_FillRGB_left+0x18>
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <ARGB_FillRGB_right>:
// --------------------------------------------------------------------------------
void ARGB_FillRGB_right(u8_t r, u8_t g, u8_t b) {
 8001386:	b580      	push	{r7, lr}
 8001388:	b084      	sub	sp, #16
 800138a:	af00      	add	r7, sp, #0
 800138c:	4603      	mov	r3, r0
 800138e:	71fb      	strb	r3, [r7, #7]
 8001390:	460b      	mov	r3, r1
 8001392:	71bb      	strb	r3, [r7, #6]
 8001394:	4613      	mov	r3, r2
 8001396:	717b      	strb	r3, [r7, #5]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8001398:	2300      	movs	r3, #0
 800139a:	81fb      	strh	r3, [r7, #14]
 800139c:	e00b      	b.n	80013b6 <ARGB_FillRGB_right+0x30>
        ARGB_SetRGB_right(i, r, g, b);
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	b298      	uxth	r0, r3
 80013a2:	797b      	ldrb	r3, [r7, #5]
 80013a4:	79ba      	ldrb	r2, [r7, #6]
 80013a6:	79f9      	ldrb	r1, [r7, #7]
 80013a8:	f7ff ff0a 	bl	80011c0 <ARGB_SetRGB_right>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 80013ac:	89fb      	ldrh	r3, [r7, #14]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	3301      	adds	r3, #1
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	81fb      	strh	r3, [r7, #14]
 80013b6:	89fb      	ldrh	r3, [r7, #14]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	2b54      	cmp	r3, #84	; 0x54
 80013bc:	d9ef      	bls.n	800139e <ARGB_FillRGB_right+0x18>
}
 80013be:	bf00      	nop
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <ARGB_FillWhite_left>:

/**
 * @brief Set ALL White components in strip
 * @param[in] w White component [0..255]
 */
void ARGB_FillWhite_left(u8_t w) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	81fb      	strh	r3, [r7, #14]
 80013d6:	e00b      	b.n	80013f0 <ARGB_FillWhite_left+0x28>
        ARGB_SetWhite_left(i, w);
 80013d8:	89fb      	ldrh	r3, [r7, #14]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	79fa      	ldrb	r2, [r7, #7]
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff67 	bl	80012b4 <ARGB_SetWhite_left>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 80013e6:	89fb      	ldrh	r3, [r7, #14]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	3301      	adds	r3, #1
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	81fb      	strh	r3, [r7, #14]
 80013f0:	89fb      	ldrh	r3, [r7, #14]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	2b54      	cmp	r3, #84	; 0x54
 80013f6:	d9ef      	bls.n	80013d8 <ARGB_FillWhite_left+0x10>
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <ARGB_FillWhite_right>:
// --------------------------------------------------------------------------
void ARGB_FillWhite_right(u8_t w) {
 8001402:	b580      	push	{r7, lr}
 8001404:	b084      	sub	sp, #16
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	71fb      	strb	r3, [r7, #7]
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 800140c:	2300      	movs	r3, #0
 800140e:	81fb      	strh	r3, [r7, #14]
 8001410:	e00b      	b.n	800142a <ARGB_FillWhite_right+0x28>
        ARGB_SetWhite_right(i, w);
 8001412:	89fb      	ldrh	r3, [r7, #14]
 8001414:	b29b      	uxth	r3, r3
 8001416:	79fa      	ldrb	r2, [r7, #7]
 8001418:	4611      	mov	r1, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff6e 	bl	80012fc <ARGB_SetWhite_right>
    for (volatile u16_t i = 0; i < NUM_PIXELS; i++)
 8001420:	89fb      	ldrh	r3, [r7, #14]
 8001422:	b29b      	uxth	r3, r3
 8001424:	3301      	adds	r3, #1
 8001426:	b29b      	uxth	r3, r3
 8001428:	81fb      	strh	r3, [r7, #14]
 800142a:	89fb      	ldrh	r3, [r7, #14]
 800142c:	b29b      	uxth	r3, r3
 800142e:	2b54      	cmp	r3, #84	; 0x54
 8001430:	d9ef      	bls.n	8001412 <ARGB_FillWhite_right+0x10>
}
 8001432:	bf00      	nop
 8001434:	bf00      	nop
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <ARGB_Show_left>:
/**
 * @brief Update strip
 * @param none
 * @return #ARGB_STATE enum
 */
ARGB_STATE ARGB_Show_left(void) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
	ARGB_LOC_ST_LEFT = ARGB_BUSY;
 8001442:	4b9f      	ldr	r3, [pc, #636]	; (80016c0 <ARGB_Show_left+0x284>)
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER_LEFT != 0 || DMA_HANDLE_LEFT.State != HAL_DMA_STATE_READY) {   //////////////////////////////////////   BUF_COUNTER  ?????
 8001448:	4b9e      	ldr	r3, [pc, #632]	; (80016c4 <ARGB_Show_left+0x288>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	b29b      	uxth	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d105      	bne.n	800145e <ARGB_Show_left+0x22>
 8001452:	4b9d      	ldr	r3, [pc, #628]	; (80016c8 <ARGB_Show_left+0x28c>)
 8001454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b01      	cmp	r3, #1
 800145c:	d001      	beq.n	8001462 <ARGB_Show_left+0x26>
        return ARGB_BUSY;
 800145e:	2300      	movs	r3, #0
 8001460:	e1a1      	b.n	80017a6 <ARGB_Show_left+0x36a>
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 8001462:	2300      	movs	r3, #0
 8001464:	71fb      	strb	r3, [r7, #7]
 8001466:	e0dc      	b.n	8001622 <ARGB_Show_left+0x1e6>
            // set first transfer from first values
        	PWM_BUF_LEFT[i] = (((RGB_BUF_LEFT[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001468:	4b98      	ldr	r3, [pc, #608]	; (80016cc <ARGB_Show_left+0x290>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	461a      	mov	r2, r3
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147c:	2b00      	cmp	r3, #0
 800147e:	dd04      	ble.n	800148a <ARGB_Show_left+0x4e>
 8001480:	4b93      	ldr	r3, [pc, #588]	; (80016d0 <ARGB_Show_left+0x294>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	461a      	mov	r2, r3
 8001488:	e003      	b.n	8001492 <ARGB_Show_left+0x56>
 800148a:	4b92      	ldr	r3, [pc, #584]	; (80016d4 <ARGB_Show_left+0x298>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	461a      	mov	r2, r3
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	4619      	mov	r1, r3
 8001498:	4b8f      	ldr	r3, [pc, #572]	; (80016d8 <ARGB_Show_left+0x29c>)
 800149a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        	PWM_BUF_LEFT[i + 8] = (((RGB_BUF_LEFT[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800149e:	4b8b      	ldr	r3, [pc, #556]	; (80016cc <ARGB_Show_left+0x290>)
 80014a0:	785b      	ldrb	r3, [r3, #1]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	461a      	mov	r2, r3
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	dd04      	ble.n	80014c0 <ARGB_Show_left+0x84>
 80014b6:	4b86      	ldr	r3, [pc, #536]	; (80016d0 <ARGB_Show_left+0x294>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	4619      	mov	r1, r3
 80014be:	e003      	b.n	80014c8 <ARGB_Show_left+0x8c>
 80014c0:	4b84      	ldr	r3, [pc, #528]	; (80016d4 <ARGB_Show_left+0x298>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	4619      	mov	r1, r3
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	3308      	adds	r3, #8
 80014ce:	4a82      	ldr	r2, [pc, #520]	; (80016d8 <ARGB_Show_left+0x29c>)
 80014d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 16] = (((RGB_BUF_LEFT[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80014d4:	4b7d      	ldr	r3, [pc, #500]	; (80016cc <ARGB_Show_left+0x290>)
 80014d6:	789b      	ldrb	r3, [r3, #2]
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	dd04      	ble.n	80014f6 <ARGB_Show_left+0xba>
 80014ec:	4b78      	ldr	r3, [pc, #480]	; (80016d0 <ARGB_Show_left+0x294>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	4619      	mov	r1, r3
 80014f4:	e003      	b.n	80014fe <ARGB_Show_left+0xc2>
 80014f6:	4b77      	ldr	r3, [pc, #476]	; (80016d4 <ARGB_Show_left+0x298>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	4619      	mov	r1, r3
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	3310      	adds	r3, #16
 8001504:	4a74      	ldr	r2, [pc, #464]	; (80016d8 <ARGB_Show_left+0x29c>)
 8001506:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 24] = (((RGB_BUF_LEFT[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800150a:	4b70      	ldr	r3, [pc, #448]	; (80016cc <ARGB_Show_left+0x290>)
 800150c:	78db      	ldrb	r3, [r3, #3]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151e:	2b00      	cmp	r3, #0
 8001520:	dd04      	ble.n	800152c <ARGB_Show_left+0xf0>
 8001522:	4b6b      	ldr	r3, [pc, #428]	; (80016d0 <ARGB_Show_left+0x294>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	4619      	mov	r1, r3
 800152a:	e003      	b.n	8001534 <ARGB_Show_left+0xf8>
 800152c:	4b69      	ldr	r3, [pc, #420]	; (80016d4 <ARGB_Show_left+0x298>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	4619      	mov	r1, r3
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	3318      	adds	r3, #24
 800153a:	4a67      	ldr	r2, [pc, #412]	; (80016d8 <ARGB_Show_left+0x29c>)
 800153c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 32] = (((RGB_BUF_LEFT[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001540:	4b62      	ldr	r3, [pc, #392]	; (80016cc <ARGB_Show_left+0x290>)
 8001542:	791b      	ldrb	r3, [r3, #4]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	461a      	mov	r2, r3
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001554:	2b00      	cmp	r3, #0
 8001556:	dd04      	ble.n	8001562 <ARGB_Show_left+0x126>
 8001558:	4b5d      	ldr	r3, [pc, #372]	; (80016d0 <ARGB_Show_left+0x294>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	4619      	mov	r1, r3
 8001560:	e003      	b.n	800156a <ARGB_Show_left+0x12e>
 8001562:	4b5c      	ldr	r3, [pc, #368]	; (80016d4 <ARGB_Show_left+0x298>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	4619      	mov	r1, r3
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	3320      	adds	r3, #32
 8001570:	4a59      	ldr	r2, [pc, #356]	; (80016d8 <ARGB_Show_left+0x29c>)
 8001572:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 40] = (((RGB_BUF_LEFT[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001576:	4b55      	ldr	r3, [pc, #340]	; (80016cc <ARGB_Show_left+0x290>)
 8001578:	795b      	ldrb	r3, [r3, #5]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	461a      	mov	r2, r3
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158a:	2b00      	cmp	r3, #0
 800158c:	dd04      	ble.n	8001598 <ARGB_Show_left+0x15c>
 800158e:	4b50      	ldr	r3, [pc, #320]	; (80016d0 <ARGB_Show_left+0x294>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	4619      	mov	r1, r3
 8001596:	e003      	b.n	80015a0 <ARGB_Show_left+0x164>
 8001598:	4b4e      	ldr	r3, [pc, #312]	; (80016d4 <ARGB_Show_left+0x298>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	4619      	mov	r1, r3
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	3328      	adds	r3, #40	; 0x28
 80015a6:	4a4c      	ldr	r2, [pc, #304]	; (80016d8 <ARGB_Show_left+0x29c>)
 80015a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#ifdef SK6812
        	PWM_BUF_LEFT[i + 48] = (((RGB_BUF_LEFT[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80015ac:	4b47      	ldr	r3, [pc, #284]	; (80016cc <ARGB_Show_left+0x290>)
 80015ae:	799b      	ldrb	r3, [r3, #6]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	461a      	mov	r2, r3
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	dd04      	ble.n	80015ce <ARGB_Show_left+0x192>
 80015c4:	4b42      	ldr	r3, [pc, #264]	; (80016d0 <ARGB_Show_left+0x294>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	4619      	mov	r1, r3
 80015cc:	e003      	b.n	80015d6 <ARGB_Show_left+0x19a>
 80015ce:	4b41      	ldr	r3, [pc, #260]	; (80016d4 <ARGB_Show_left+0x298>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	4619      	mov	r1, r3
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	3330      	adds	r3, #48	; 0x30
 80015dc:	4a3e      	ldr	r2, [pc, #248]	; (80016d8 <ARGB_Show_left+0x29c>)
 80015de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 56] = (((RGB_BUF_LEFT[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80015e2:	4b3a      	ldr	r3, [pc, #232]	; (80016cc <ARGB_Show_left+0x290>)
 80015e4:	79db      	ldrb	r3, [r3, #7]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	dd04      	ble.n	8001604 <ARGB_Show_left+0x1c8>
 80015fa:	4b35      	ldr	r3, [pc, #212]	; (80016d0 <ARGB_Show_left+0x294>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	4619      	mov	r1, r3
 8001602:	e003      	b.n	800160c <ARGB_Show_left+0x1d0>
 8001604:	4b33      	ldr	r3, [pc, #204]	; (80016d4 <ARGB_Show_left+0x298>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	4619      	mov	r1, r3
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	3338      	adds	r3, #56	; 0x38
 8001612:	4a31      	ldr	r2, [pc, #196]	; (80016d8 <ARGB_Show_left+0x29c>)
 8001614:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	3301      	adds	r3, #1
 800161e:	b2db      	uxtb	r3, r3
 8001620:	71fb      	strb	r3, [r7, #7]
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b07      	cmp	r3, #7
 8001628:	f67f af1e 	bls.w	8001468 <ARGB_Show_left+0x2c>
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001630:	e0b1      	b.n	8001796 <ARGB_Show_left+0x35a>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH_LEFT) == HAL_TIM_CHANNEL_STATE_BUSY) {
 8001632:	4b2a      	ldr	r3, [pc, #168]	; (80016dc <ARGB_Show_left+0x2a0>)
 8001634:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d102      	bne.n	8001644 <ARGB_Show_left+0x208>
                DMA_Send_Stat = HAL_BUSY;
 800163e:	2302      	movs	r3, #2
 8001640:	73fb      	strb	r3, [r7, #15]
                continue;
 8001642:	e0a8      	b.n	8001796 <ARGB_Show_left+0x35a>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH_LEFT) == HAL_TIM_CHANNEL_STATE_READY) {
 8001644:	4b25      	ldr	r3, [pc, #148]	; (80016dc <ARGB_Show_left+0x2a0>)
 8001646:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b01      	cmp	r3, #1
 800164e:	d11d      	bne.n	800168c <ARGB_Show_left+0x250>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH_LEFT, HAL_TIM_CHANNEL_STATE_BUSY);
 8001650:	4b22      	ldr	r3, [pc, #136]	; (80016dc <ARGB_Show_left+0x2a0>)
 8001652:	2202      	movs	r2, #2
 8001654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
#elif TIM_CH_LEFT == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC TIM_DMA_CC4
#define ARGB_TIM_CCR CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_L]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt_left;
 8001658:	4b20      	ldr	r3, [pc, #128]	; (80016dc <ARGB_Show_left+0x2a0>)
 800165a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165c:	4a20      	ldr	r2, [pc, #128]	; (80016e0 <ARGB_Show_left+0x2a4>)
 800165e:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_L]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt_left;
 8001660:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <ARGB_Show_left+0x2a0>)
 8001662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001664:	4a1f      	ldr	r2, [pc, #124]	; (80016e4 <ARGB_Show_left+0x2a8>)
 8001666:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_L]->XferErrorCallback = TIM_DMAError;
 8001668:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <ARGB_Show_left+0x2a0>)
 800166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166c:	4a1e      	ldr	r2, [pc, #120]	; (80016e8 <ARGB_Show_left+0x2ac>)
 800166e:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_L], (u32_t) PWM_BUF_LEFT,
 8001670:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <ARGB_Show_left+0x2a0>)
 8001672:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001674:	4918      	ldr	r1, [pc, #96]	; (80016d8 <ARGB_Show_left+0x29c>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR_L,
 8001676:	4b19      	ldr	r3, [pc, #100]	; (80016dc <ARGB_Show_left+0x2a0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	333c      	adds	r3, #60	; 0x3c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_L], (u32_t) PWM_BUF_LEFT,
 800167c:	461a      	mov	r2, r3
 800167e:	2340      	movs	r3, #64	; 0x40
 8001680:	f003 fa50 	bl	8004b24 <HAL_DMA_Start_IT>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d006      	beq.n	8001698 <ARGB_Show_left+0x25c>
 800168a:	e002      	b.n	8001692 <ARGB_Show_left+0x256>
                DMA_Send_Stat = HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	73fb      	strb	r3, [r7, #15]
                continue;
 8001690:	e081      	b.n	8001796 <ARGB_Show_left+0x35a>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	73fb      	strb	r3, [r7, #15]
                continue;
 8001696:	e07e      	b.n	8001796 <ARGB_Show_left+0x35a>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC_L);
 8001698:	4b10      	ldr	r3, [pc, #64]	; (80016dc <ARGB_Show_left+0x2a0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <ARGB_Show_left+0x2a0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016a6:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <ARGB_Show_left+0x2a0>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0f      	ldr	r2, [pc, #60]	; (80016ec <ARGB_Show_left+0x2b0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d004      	beq.n	80016bc <ARGB_Show_left+0x280>
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <ARGB_Show_left+0x2a0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <ARGB_Show_left+0x2b4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d11b      	bne.n	80016f4 <ARGB_Show_left+0x2b8>
 80016bc:	2301      	movs	r3, #1
 80016be:	e01a      	b.n	80016f6 <ARGB_Show_left+0x2ba>
 80016c0:	20000594 	.word	0x20000594
 80016c4:	20000590 	.word	0x20000590
 80016c8:	200017e8 	.word	0x200017e8
 80016cc:	200000e8 	.word	0x200000e8
 80016d0:	200000e4 	.word	0x200000e4
 80016d4:	200000e5 	.word	0x200000e5
 80016d8:	20000390 	.word	0x20000390
 80016dc:	20001758 	.word	0x20001758
 80016e0:	08001b95 	.word	0x08001b95
 80016e4:	08002185 	.word	0x08002185
 80016e8:	080086b3 	.word	0x080086b3
 80016ec:	40010000 	.word	0x40010000
 80016f0:	40010400 	.word	0x40010400
 80016f4:	2300      	movs	r3, #0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d007      	beq.n	800170a <ARGB_Show_left+0x2ce>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 80016fa:	4b2d      	ldr	r3, [pc, #180]	; (80017b0 <ARGB_Show_left+0x374>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001700:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <ARGB_Show_left+0x374>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001708:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 800170a:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <ARGB_Show_left+0x374>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a29      	ldr	r2, [pc, #164]	; (80017b4 <ARGB_Show_left+0x378>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d022      	beq.n	800175a <ARGB_Show_left+0x31e>
 8001714:	4b26      	ldr	r3, [pc, #152]	; (80017b0 <ARGB_Show_left+0x374>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800171c:	d01d      	beq.n	800175a <ARGB_Show_left+0x31e>
 800171e:	4b24      	ldr	r3, [pc, #144]	; (80017b0 <ARGB_Show_left+0x374>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a25      	ldr	r2, [pc, #148]	; (80017b8 <ARGB_Show_left+0x37c>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d018      	beq.n	800175a <ARGB_Show_left+0x31e>
 8001728:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <ARGB_Show_left+0x374>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a23      	ldr	r2, [pc, #140]	; (80017bc <ARGB_Show_left+0x380>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d013      	beq.n	800175a <ARGB_Show_left+0x31e>
 8001732:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <ARGB_Show_left+0x374>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a22      	ldr	r2, [pc, #136]	; (80017c0 <ARGB_Show_left+0x384>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d00e      	beq.n	800175a <ARGB_Show_left+0x31e>
 800173c:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <ARGB_Show_left+0x374>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a20      	ldr	r2, [pc, #128]	; (80017c4 <ARGB_Show_left+0x388>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d009      	beq.n	800175a <ARGB_Show_left+0x31e>
 8001746:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <ARGB_Show_left+0x374>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a1f      	ldr	r2, [pc, #124]	; (80017c8 <ARGB_Show_left+0x38c>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d004      	beq.n	800175a <ARGB_Show_left+0x31e>
 8001750:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <ARGB_Show_left+0x374>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a1d      	ldr	r2, [pc, #116]	; (80017cc <ARGB_Show_left+0x390>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d111      	bne.n	800177e <ARGB_Show_left+0x342>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <ARGB_Show_left+0x374>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b06      	cmp	r3, #6
 800176a:	d011      	beq.n	8001790 <ARGB_Show_left+0x354>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 800176c:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <ARGB_Show_left+0x374>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <ARGB_Show_left+0x374>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0201 	orr.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 800177c:	e008      	b.n	8001790 <ARGB_Show_left+0x354>
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <ARGB_Show_left+0x374>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <ARGB_Show_left+0x374>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f042 0201 	orr.w	r2, r2, #1
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	e000      	b.n	8001792 <ARGB_Show_left+0x356>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001790:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	2b00      	cmp	r3, #0
 800179a:	f47f af4a 	bne.w	8001632 <ARGB_Show_left+0x1f6>
        }
        BUF_COUNTER_LEFT = 2;
 800179e:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <ARGB_Show_left+0x394>)
 80017a0:	2202      	movs	r2, #2
 80017a2:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 80017a4:	2302      	movs	r3, #2
    }
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20001758 	.word	0x20001758
 80017b4:	40010000 	.word	0x40010000
 80017b8:	40000400 	.word	0x40000400
 80017bc:	40000800 	.word	0x40000800
 80017c0:	40000c00 	.word	0x40000c00
 80017c4:	40010400 	.word	0x40010400
 80017c8:	40014000 	.word	0x40014000
 80017cc:	40001800 	.word	0x40001800
 80017d0:	20000590 	.word	0x20000590

080017d4 <ARGB_Show_right>:
// ----------------------------------------------------------------------
ARGB_STATE ARGB_Show_right(void) {             //////////////////////////////////////   BUF_COUNTER  ?????
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
	ARGB_LOC_ST_RIGHT = ARGB_BUSY;
 80017da:	4b9f      	ldr	r3, [pc, #636]	; (8001a58 <ARGB_Show_right+0x284>)
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
    if (BUF_COUNTER_RIGHT != 0 || DMA_HANDLE_RIGHT.State != HAL_DMA_STATE_READY) { // <<<<<<<<<<<<<<<<<<<<<<<<< Зависає тут
 80017e0:	4b9e      	ldr	r3, [pc, #632]	; (8001a5c <ARGB_Show_right+0x288>)
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f040 81aa 	bne.w	8001b40 <ARGB_Show_right+0x36c>
 80017ec:	4b9c      	ldr	r3, [pc, #624]	; (8001a60 <ARGB_Show_right+0x28c>)
 80017ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	f040 81a3 	bne.w	8001b40 <ARGB_Show_right+0x36c>
        //return ARGB_BUSY;
    } else {
        for (volatile u8_t i = 0; i < 8; i++) {
 80017fa:	2300      	movs	r3, #0
 80017fc:	71fb      	strb	r3, [r7, #7]
 80017fe:	e0dc      	b.n	80019ba <ARGB_Show_right+0x1e6>
            // set first transfer from first values
        	PWM_BUF_RIGHT[i] = (((RGB_BUF_RIGHT[0] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001800:	4b98      	ldr	r3, [pc, #608]	; (8001a64 <ARGB_Show_right+0x290>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	461a      	mov	r2, r3
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001814:	2b00      	cmp	r3, #0
 8001816:	dd04      	ble.n	8001822 <ARGB_Show_right+0x4e>
 8001818:	4b93      	ldr	r3, [pc, #588]	; (8001a68 <ARGB_Show_right+0x294>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	461a      	mov	r2, r3
 8001820:	e003      	b.n	800182a <ARGB_Show_right+0x56>
 8001822:	4b92      	ldr	r3, [pc, #584]	; (8001a6c <ARGB_Show_right+0x298>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	461a      	mov	r2, r3
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4619      	mov	r1, r3
 8001830:	4b8f      	ldr	r3, [pc, #572]	; (8001a70 <ARGB_Show_right+0x29c>)
 8001832:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        	PWM_BUF_RIGHT[i + 8] = (((RGB_BUF_RIGHT[1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001836:	4b8b      	ldr	r3, [pc, #556]	; (8001a64 <ARGB_Show_right+0x290>)
 8001838:	785b      	ldrb	r3, [r3, #1]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	461a      	mov	r2, r3
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	b2db      	uxtb	r3, r3
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184a:	2b00      	cmp	r3, #0
 800184c:	dd04      	ble.n	8001858 <ARGB_Show_right+0x84>
 800184e:	4b86      	ldr	r3, [pc, #536]	; (8001a68 <ARGB_Show_right+0x294>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	4619      	mov	r1, r3
 8001856:	e003      	b.n	8001860 <ARGB_Show_right+0x8c>
 8001858:	4b84      	ldr	r3, [pc, #528]	; (8001a6c <ARGB_Show_right+0x298>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	4619      	mov	r1, r3
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	3308      	adds	r3, #8
 8001866:	4a82      	ldr	r2, [pc, #520]	; (8001a70 <ARGB_Show_right+0x29c>)
 8001868:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 16] = (((RGB_BUF_RIGHT[2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800186c:	4b7d      	ldr	r3, [pc, #500]	; (8001a64 <ARGB_Show_right+0x290>)
 800186e:	789b      	ldrb	r3, [r3, #2]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001880:	2b00      	cmp	r3, #0
 8001882:	dd04      	ble.n	800188e <ARGB_Show_right+0xba>
 8001884:	4b78      	ldr	r3, [pc, #480]	; (8001a68 <ARGB_Show_right+0x294>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	4619      	mov	r1, r3
 800188c:	e003      	b.n	8001896 <ARGB_Show_right+0xc2>
 800188e:	4b77      	ldr	r3, [pc, #476]	; (8001a6c <ARGB_Show_right+0x298>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	4619      	mov	r1, r3
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	3310      	adds	r3, #16
 800189c:	4a74      	ldr	r2, [pc, #464]	; (8001a70 <ARGB_Show_right+0x29c>)
 800189e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 24] = (((RGB_BUF_RIGHT[3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80018a2:	4b70      	ldr	r3, [pc, #448]	; (8001a64 <ARGB_Show_right+0x290>)
 80018a4:	78db      	ldrb	r3, [r3, #3]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	461a      	mov	r2, r3
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	dd04      	ble.n	80018c4 <ARGB_Show_right+0xf0>
 80018ba:	4b6b      	ldr	r3, [pc, #428]	; (8001a68 <ARGB_Show_right+0x294>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	4619      	mov	r1, r3
 80018c2:	e003      	b.n	80018cc <ARGB_Show_right+0xf8>
 80018c4:	4b69      	ldr	r3, [pc, #420]	; (8001a6c <ARGB_Show_right+0x298>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	4619      	mov	r1, r3
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	3318      	adds	r3, #24
 80018d2:	4a67      	ldr	r2, [pc, #412]	; (8001a70 <ARGB_Show_right+0x29c>)
 80018d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 32] = (((RGB_BUF_RIGHT[4] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80018d8:	4b62      	ldr	r3, [pc, #392]	; (8001a64 <ARGB_Show_right+0x290>)
 80018da:	791b      	ldrb	r3, [r3, #4]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	461a      	mov	r2, r3
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	dd04      	ble.n	80018fa <ARGB_Show_right+0x126>
 80018f0:	4b5d      	ldr	r3, [pc, #372]	; (8001a68 <ARGB_Show_right+0x294>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	4619      	mov	r1, r3
 80018f8:	e003      	b.n	8001902 <ARGB_Show_right+0x12e>
 80018fa:	4b5c      	ldr	r3, [pc, #368]	; (8001a6c <ARGB_Show_right+0x298>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	4619      	mov	r1, r3
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	3320      	adds	r3, #32
 8001908:	4a59      	ldr	r2, [pc, #356]	; (8001a70 <ARGB_Show_right+0x29c>)
 800190a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 40] = (((RGB_BUF_RIGHT[5] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800190e:	4b55      	ldr	r3, [pc, #340]	; (8001a64 <ARGB_Show_right+0x290>)
 8001910:	795b      	ldrb	r3, [r3, #5]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	461a      	mov	r2, r3
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001922:	2b00      	cmp	r3, #0
 8001924:	dd04      	ble.n	8001930 <ARGB_Show_right+0x15c>
 8001926:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <ARGB_Show_right+0x294>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	4619      	mov	r1, r3
 800192e:	e003      	b.n	8001938 <ARGB_Show_right+0x164>
 8001930:	4b4e      	ldr	r3, [pc, #312]	; (8001a6c <ARGB_Show_right+0x298>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	4619      	mov	r1, r3
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	3328      	adds	r3, #40	; 0x28
 800193e:	4a4c      	ldr	r2, [pc, #304]	; (8001a70 <ARGB_Show_right+0x29c>)
 8001940:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#ifdef SK6812
        	PWM_BUF_RIGHT[i + 48] = (((RGB_BUF_RIGHT[6] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001944:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <ARGB_Show_right+0x290>)
 8001946:	799b      	ldrb	r3, [r3, #6]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	461a      	mov	r2, r3
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001958:	2b00      	cmp	r3, #0
 800195a:	dd04      	ble.n	8001966 <ARGB_Show_right+0x192>
 800195c:	4b42      	ldr	r3, [pc, #264]	; (8001a68 <ARGB_Show_right+0x294>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	4619      	mov	r1, r3
 8001964:	e003      	b.n	800196e <ARGB_Show_right+0x19a>
 8001966:	4b41      	ldr	r3, [pc, #260]	; (8001a6c <ARGB_Show_right+0x298>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	4619      	mov	r1, r3
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	3330      	adds	r3, #48	; 0x30
 8001974:	4a3e      	ldr	r2, [pc, #248]	; (8001a70 <ARGB_Show_right+0x29c>)
 8001976:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 56] = (((RGB_BUF_RIGHT[7] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 800197a:	4b3a      	ldr	r3, [pc, #232]	; (8001a64 <ARGB_Show_right+0x290>)
 800197c:	79db      	ldrb	r3, [r3, #7]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	461a      	mov	r2, r3
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198e:	2b00      	cmp	r3, #0
 8001990:	dd04      	ble.n	800199c <ARGB_Show_right+0x1c8>
 8001992:	4b35      	ldr	r3, [pc, #212]	; (8001a68 <ARGB_Show_right+0x294>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	4619      	mov	r1, r3
 800199a:	e003      	b.n	80019a4 <ARGB_Show_right+0x1d0>
 800199c:	4b33      	ldr	r3, [pc, #204]	; (8001a6c <ARGB_Show_right+0x298>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	4619      	mov	r1, r3
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	3338      	adds	r3, #56	; 0x38
 80019aa:	4a31      	ldr	r2, [pc, #196]	; (8001a70 <ARGB_Show_right+0x29c>)
 80019ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	3301      	adds	r3, #1
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	71fb      	strb	r3, [r7, #7]
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b07      	cmp	r3, #7
 80019c0:	f67f af1e 	bls.w	8001800 <ARGB_Show_right+0x2c>
#endif
        }
        HAL_StatusTypeDef DMA_Send_Stat = HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 80019c8:	e0b1      	b.n	8001b2e <ARGB_Show_right+0x35a>
            if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH_RIGHT) == HAL_TIM_CHANNEL_STATE_BUSY) {
 80019ca:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <ARGB_Show_right+0x2a0>)
 80019cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d102      	bne.n	80019dc <ARGB_Show_right+0x208>
                DMA_Send_Stat = HAL_BUSY;
 80019d6:	2302      	movs	r3, #2
 80019d8:	73fb      	strb	r3, [r7, #15]
                continue;
 80019da:	e0a8      	b.n	8001b2e <ARGB_Show_right+0x35a>
            } else if (TIM_CHANNEL_STATE_GET(&TIM_HANDLE, TIM_CH_RIGHT) == HAL_TIM_CHANNEL_STATE_READY) {
 80019dc:	4b25      	ldr	r3, [pc, #148]	; (8001a74 <ARGB_Show_right+0x2a0>)
 80019de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d11d      	bne.n	8001a24 <ARGB_Show_right+0x250>
                TIM_CHANNEL_STATE_SET(&TIM_HANDLE, TIM_CH_RIGHT, HAL_TIM_CHANNEL_STATE_BUSY);
 80019e8:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <ARGB_Show_right+0x2a0>)
 80019ea:	2202      	movs	r2, #2
 80019ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#elif TIM_CH_RIGHT == TIM_CHANNEL_4
#define ARGB_TIM_DMA_ID_R TIM_DMA_ID_CC4
#define ARGB_TIM_DMA_CC_R TIM_DMA_CC4
#define ARGB_TIM_CCR_R CCR4
#endif
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R]->XferCpltCallback = ARGB_TIM_DMADelayPulseCplt_right;
 80019f0:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <ARGB_Show_right+0x2a0>)
 80019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f4:	4a20      	ldr	r2, [pc, #128]	; (8001a78 <ARGB_Show_right+0x2a4>)
 80019f6:	63da      	str	r2, [r3, #60]	; 0x3c
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R]->XferHalfCpltCallback = ARGB_TIM_DMADelayPulseHalfCplt_right;
 80019f8:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <ARGB_Show_right+0x2a0>)
 80019fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fc:	4a1f      	ldr	r2, [pc, #124]	; (8001a7c <ARGB_Show_right+0x2a8>)
 80019fe:	641a      	str	r2, [r3, #64]	; 0x40
            TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R]->XferErrorCallback = TIM_DMAError;
 8001a00:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <ARGB_Show_right+0x2a0>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	4a1e      	ldr	r2, [pc, #120]	; (8001a80 <ARGB_Show_right+0x2ac>)
 8001a06:	64da      	str	r2, [r3, #76]	; 0x4c
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R], (u32_t) PWM_BUF_RIGHT,
 8001a08:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <ARGB_Show_right+0x2a0>)
 8001a0a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001a0c:	4918      	ldr	r1, [pc, #96]	; (8001a70 <ARGB_Show_right+0x29c>)
                                 (u32_t) &TIM_HANDLE.Instance->ARGB_TIM_CCR_R,
 8001a0e:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <ARGB_Show_right+0x2a0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	3340      	adds	r3, #64	; 0x40
            if (HAL_DMA_Start_IT(TIM_HANDLE.hdma[ARGB_TIM_DMA_ID_R], (u32_t) PWM_BUF_RIGHT,
 8001a14:	461a      	mov	r2, r3
 8001a16:	2340      	movs	r3, #64	; 0x40
 8001a18:	f003 f884 	bl	8004b24 <HAL_DMA_Start_IT>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d006      	beq.n	8001a30 <ARGB_Show_right+0x25c>
 8001a22:	e002      	b.n	8001a2a <ARGB_Show_right+0x256>
                DMA_Send_Stat = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
                continue;
 8001a28:	e081      	b.n	8001b2e <ARGB_Show_right+0x35a>
                                 (u16_t) PWM_BUF_LEN) != HAL_OK) {
                DMA_Send_Stat = HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	73fb      	strb	r3, [r7, #15]
                continue;
 8001a2e:	e07e      	b.n	8001b2e <ARGB_Show_right+0x35a>
            }
            __HAL_TIM_ENABLE_DMA(&TIM_HANDLE, ARGB_TIM_DMA_CC_R);
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <ARGB_Show_right+0x2a0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <ARGB_Show_right+0x2a0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a3e:	60da      	str	r2, [r3, #12]
            if (IS_TIM_BREAK_INSTANCE(TIM_HANDLE.Instance) != RESET)
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <ARGB_Show_right+0x2a0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0f      	ldr	r2, [pc, #60]	; (8001a84 <ARGB_Show_right+0x2b0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d004      	beq.n	8001a54 <ARGB_Show_right+0x280>
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <ARGB_Show_right+0x2a0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a0e      	ldr	r2, [pc, #56]	; (8001a88 <ARGB_Show_right+0x2b4>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d11b      	bne.n	8001a8c <ARGB_Show_right+0x2b8>
 8001a54:	2301      	movs	r3, #1
 8001a56:	e01a      	b.n	8001a8e <ARGB_Show_right+0x2ba>
 8001a58:	20000595 	.word	0x20000595
 8001a5c:	20000592 	.word	0x20000592
 8001a60:	20001848 	.word	0x20001848
 8001a64:	2000023c 	.word	0x2000023c
 8001a68:	200000e4 	.word	0x200000e4
 8001a6c:	200000e5 	.word	0x200000e5
 8001a70:	20000490 	.word	0x20000490
 8001a74:	20001758 	.word	0x20001758
 8001a78:	08001e8d 	.word	0x08001e8d
 8001a7c:	08002335 	.word	0x08002335
 8001a80:	080086b3 	.word	0x080086b3
 8001a84:	40010000 	.word	0x40010000
 8001a88:	40010400 	.word	0x40010400
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d007      	beq.n	8001aa2 <ARGB_Show_right+0x2ce>
                __HAL_TIM_MOE_ENABLE(&TIM_HANDLE);
 8001a92:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <ARGB_Show_right+0x374>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a98:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <ARGB_Show_right+0x374>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aa0:	645a      	str	r2, [r3, #68]	; 0x44
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001aa2:	4b29      	ldr	r3, [pc, #164]	; (8001b48 <ARGB_Show_right+0x374>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a29      	ldr	r2, [pc, #164]	; (8001b4c <ARGB_Show_right+0x378>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d022      	beq.n	8001af2 <ARGB_Show_right+0x31e>
 8001aac:	4b26      	ldr	r3, [pc, #152]	; (8001b48 <ARGB_Show_right+0x374>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab4:	d01d      	beq.n	8001af2 <ARGB_Show_right+0x31e>
 8001ab6:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <ARGB_Show_right+0x374>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a25      	ldr	r2, [pc, #148]	; (8001b50 <ARGB_Show_right+0x37c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d018      	beq.n	8001af2 <ARGB_Show_right+0x31e>
 8001ac0:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <ARGB_Show_right+0x374>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a23      	ldr	r2, [pc, #140]	; (8001b54 <ARGB_Show_right+0x380>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d013      	beq.n	8001af2 <ARGB_Show_right+0x31e>
 8001aca:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <ARGB_Show_right+0x374>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a22      	ldr	r2, [pc, #136]	; (8001b58 <ARGB_Show_right+0x384>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d00e      	beq.n	8001af2 <ARGB_Show_right+0x31e>
 8001ad4:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <ARGB_Show_right+0x374>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a20      	ldr	r2, [pc, #128]	; (8001b5c <ARGB_Show_right+0x388>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d009      	beq.n	8001af2 <ARGB_Show_right+0x31e>
 8001ade:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <ARGB_Show_right+0x374>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a1f      	ldr	r2, [pc, #124]	; (8001b60 <ARGB_Show_right+0x38c>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d004      	beq.n	8001af2 <ARGB_Show_right+0x31e>
 8001ae8:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <ARGB_Show_right+0x374>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a1d      	ldr	r2, [pc, #116]	; (8001b64 <ARGB_Show_right+0x390>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d111      	bne.n	8001b16 <ARGB_Show_right+0x342>
                u32_t tmpsmcr = TIM_HANDLE.Instance->SMCR & TIM_SMCR_SMS;
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <ARGB_Show_right+0x374>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	60bb      	str	r3, [r7, #8]
                if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2b06      	cmp	r3, #6
 8001b02:	d011      	beq.n	8001b28 <ARGB_Show_right+0x354>
                    __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001b04:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <ARGB_Show_right+0x374>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <ARGB_Show_right+0x374>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	601a      	str	r2, [r3, #0]
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001b14:	e008      	b.n	8001b28 <ARGB_Show_right+0x354>
            } else
                __HAL_TIM_ENABLE(&TIM_HANDLE);
 8001b16:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <ARGB_Show_right+0x374>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <ARGB_Show_right+0x374>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f042 0201 	orr.w	r2, r2, #1
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	e000      	b.n	8001b2a <ARGB_Show_right+0x356>
            if (IS_TIM_SLAVE_INSTANCE(TIM_HANDLE.Instance)) {
 8001b28:	bf00      	nop
            DMA_Send_Stat = HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73fb      	strb	r3, [r7, #15]
        while (DMA_Send_Stat != HAL_OK) {
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f47f af4a 	bne.w	80019ca <ARGB_Show_right+0x1f6>
        }
        BUF_COUNTER_RIGHT = 2;
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <ARGB_Show_right+0x394>)
 8001b38:	2202      	movs	r2, #2
 8001b3a:	801a      	strh	r2, [r3, #0]
        return ARGB_OK;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e7ff      	b.n	8001b40 <ARGB_Show_right+0x36c>
    }
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20001758 	.word	0x20001758
 8001b4c:	40010000 	.word	0x40010000
 8001b50:	40000400 	.word	0x40000400
 8001b54:	40000800 	.word	0x40000800
 8001b58:	40000c00 	.word	0x40000c00
 8001b5c:	40010400 	.word	0x40010400
 8001b60:	40014000 	.word	0x40014000
 8001b64:	40001800 	.word	0x40001800
 8001b68:	20000592 	.word	0x20000592

08001b6c <scale8>:
 * @brief Private method for gamma correction
 * @param[in] x Param to scale
 * @param[in] scale Scale coefficient
 * @return Scaled value
 */
static inline u8_t scale8(u8_t x, u8_t scale) {
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	460a      	mov	r2, r1
 8001b76:	71fb      	strb	r3, [r7, #7]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t) x * scale) >> 8;
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	79ba      	ldrb	r2, [r7, #6]
 8001b80:	fb02 f303 	mul.w	r3, r2, r3
 8001b84:	121b      	asrs	r3, r3, #8
 8001b86:	b2db      	uxtb	r3, r3
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <ARGB_TIM_DMADelayPulseCplt_left>:
/**
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseCplt_left(DMA_HandleTypeDef *hdma) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba0:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE_LEFT || htim != &TIM_HANDLE) return;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a8c      	ldr	r2, [pc, #560]	; (8001dd8 <ARGB_TIM_DMADelayPulseCplt_left+0x244>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	f040 8168 	bne.w	8001e7c <ARGB_TIM_DMADelayPulseCplt_left+0x2e8>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4a8b      	ldr	r2, [pc, #556]	; (8001ddc <ARGB_TIM_DMADelayPulseCplt_left+0x248>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	f040 8163 	bne.w	8001e7c <ARGB_TIM_DMADelayPulseCplt_left+0x2e8>
    if (BUF_COUNTER_LEFT == 0) return; // if no data to transmit - return
 8001bb6:	4b8a      	ldr	r3, [pc, #552]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 815f 	beq.w	8001e80 <ARGB_TIM_DMADelayPulseCplt_left+0x2ec>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d10b      	bne.n	8001be4 <ARGB_TIM_DMADelayPulseCplt_left+0x50>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d136      	bne.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001be2:	e031      	b.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d10b      	bne.n	8001c06 <ARGB_TIM_DMADelayPulseCplt_left+0x72>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d125      	bne.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c04:	e020      	b.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d10b      	bne.n	8001c28 <ARGB_TIM_DMADelayPulseCplt_left+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2204      	movs	r2, #4
 8001c14:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d114      	bne.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c26:	e00f      	b.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d10a      	bne.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2208      	movs	r2, #8
 8001c36:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d103      	bne.n	8001c48 <ARGB_TIM_DMADelayPulseCplt_left+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER_LEFT < NUM_PIXELS) {
 8001c48:	4b65      	ldr	r3, [pc, #404]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	2b54      	cmp	r3, #84	; 0x54
 8001c50:	f200 8094 	bhi.w	8001d7c <ARGB_TIM_DMADelayPulseCplt_left+0x1e8>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001c54:	2300      	movs	r3, #0
 8001c56:	72fb      	strb	r3, [r7, #11]
 8001c58:	e083      	b.n	8001d62 <ARGB_TIM_DMADelayPulseCplt_left+0x1ce>
#ifdef SK6812
        	PWM_BUF_LEFT[i + 32] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001c5a:	4b61      	ldr	r3, [pc, #388]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4a60      	ldr	r2, [pc, #384]	; (8001de4 <ARGB_TIM_DMADelayPulseCplt_left+0x250>)
 8001c64:	5cd3      	ldrb	r3, [r2, r3]
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	7afb      	ldrb	r3, [r7, #11]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	dd04      	ble.n	8001c84 <ARGB_TIM_DMADelayPulseCplt_left+0xf0>
 8001c7a:	4b5b      	ldr	r3, [pc, #364]	; (8001de8 <ARGB_TIM_DMADelayPulseCplt_left+0x254>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	4619      	mov	r1, r3
 8001c82:	e003      	b.n	8001c8c <ARGB_TIM_DMADelayPulseCplt_left+0xf8>
 8001c84:	4b59      	ldr	r3, [pc, #356]	; (8001dec <ARGB_TIM_DMADelayPulseCplt_left+0x258>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	7afb      	ldrb	r3, [r7, #11]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	3320      	adds	r3, #32
 8001c92:	4a57      	ldr	r2, [pc, #348]	; (8001df0 <ARGB_TIM_DMADelayPulseCplt_left+0x25c>)
 8001c94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 40] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001c98:	4b51      	ldr	r3, [pc, #324]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	4a50      	ldr	r2, [pc, #320]	; (8001de4 <ARGB_TIM_DMADelayPulseCplt_left+0x250>)
 8001ca4:	5cd3      	ldrb	r3, [r2, r3]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	7afb      	ldrb	r3, [r7, #11]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	dd04      	ble.n	8001cc4 <ARGB_TIM_DMADelayPulseCplt_left+0x130>
 8001cba:	4b4b      	ldr	r3, [pc, #300]	; (8001de8 <ARGB_TIM_DMADelayPulseCplt_left+0x254>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	e003      	b.n	8001ccc <ARGB_TIM_DMADelayPulseCplt_left+0x138>
 8001cc4:	4b49      	ldr	r3, [pc, #292]	; (8001dec <ARGB_TIM_DMADelayPulseCplt_left+0x258>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	4619      	mov	r1, r3
 8001ccc:	7afb      	ldrb	r3, [r7, #11]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	3328      	adds	r3, #40	; 0x28
 8001cd2:	4a47      	ldr	r2, [pc, #284]	; (8001df0 <ARGB_TIM_DMADelayPulseCplt_left+0x25c>)
 8001cd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 48] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001cd8:	4b41      	ldr	r3, [pc, #260]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	4a40      	ldr	r2, [pc, #256]	; (8001de4 <ARGB_TIM_DMADelayPulseCplt_left+0x250>)
 8001ce4:	5cd3      	ldrb	r3, [r2, r3]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	7afb      	ldrb	r3, [r7, #11]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	dd04      	ble.n	8001d04 <ARGB_TIM_DMADelayPulseCplt_left+0x170>
 8001cfa:	4b3b      	ldr	r3, [pc, #236]	; (8001de8 <ARGB_TIM_DMADelayPulseCplt_left+0x254>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	4619      	mov	r1, r3
 8001d02:	e003      	b.n	8001d0c <ARGB_TIM_DMADelayPulseCplt_left+0x178>
 8001d04:	4b39      	ldr	r3, [pc, #228]	; (8001dec <ARGB_TIM_DMADelayPulseCplt_left+0x258>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	7afb      	ldrb	r3, [r7, #11]
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	3330      	adds	r3, #48	; 0x30
 8001d12:	4a37      	ldr	r2, [pc, #220]	; (8001df0 <ARGB_TIM_DMADelayPulseCplt_left+0x25c>)
 8001d14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 56] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001d18:	4b31      	ldr	r3, [pc, #196]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	3303      	adds	r3, #3
 8001d22:	4a30      	ldr	r2, [pc, #192]	; (8001de4 <ARGB_TIM_DMADelayPulseCplt_left+0x250>)
 8001d24:	5cd3      	ldrb	r3, [r2, r3]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	461a      	mov	r2, r3
 8001d2a:	7afb      	ldrb	r3, [r7, #11]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	dd04      	ble.n	8001d44 <ARGB_TIM_DMADelayPulseCplt_left+0x1b0>
 8001d3a:	4b2b      	ldr	r3, [pc, #172]	; (8001de8 <ARGB_TIM_DMADelayPulseCplt_left+0x254>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	4619      	mov	r1, r3
 8001d42:	e003      	b.n	8001d4c <ARGB_TIM_DMADelayPulseCplt_left+0x1b8>
 8001d44:	4b29      	ldr	r3, [pc, #164]	; (8001dec <ARGB_TIM_DMADelayPulseCplt_left+0x258>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	7afb      	ldrb	r3, [r7, #11]
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	3338      	adds	r3, #56	; 0x38
 8001d52:	4a27      	ldr	r2, [pc, #156]	; (8001df0 <ARGB_TIM_DMADelayPulseCplt_left+0x25c>)
 8001d54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8001d58:	7afb      	ldrb	r3, [r7, #11]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	72fb      	strb	r3, [r7, #11]
 8001d62:	7afb      	ldrb	r3, [r7, #11]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b07      	cmp	r3, #7
 8001d68:	f67f af77 	bls.w	8001c5a <ARGB_TIM_DMADelayPulseCplt_left+0xc6>
        	PWM_BUF_LEFT[i + 24] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_LEFT[i + 32] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_LEFT[i + 40] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        BUF_COUNTER_LEFT++;
 8001d6c:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	3301      	adds	r3, #1
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001d78:	801a      	strh	r2, [r3, #0]
 8001d7a:	e07b      	b.n	8001e74 <ARGB_TIM_DMADelayPulseCplt_left+0x2e0>
    } else if (BUF_COUNTER_LEFT < NUM_PIXELS + 2) { // if RET transfer
 8001d7c:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	2b56      	cmp	r3, #86	; 0x56
 8001d84:	d80c      	bhi.n	8001da0 <ARGB_TIM_DMADelayPulseCplt_left+0x20c>
        memset((dma_siz *) &PWM_BUF_LEFT[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 8001d86:	2280      	movs	r2, #128	; 0x80
 8001d88:	2100      	movs	r1, #0
 8001d8a:	481a      	ldr	r0, [pc, #104]	; (8001df4 <ARGB_TIM_DMADelayPulseCplt_left+0x260>)
 8001d8c:	f00f fade 	bl	801134c <memset>
        BUF_COUNTER_LEFT++;
 8001d90:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	3301      	adds	r3, #1
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001d9c:	801a      	strh	r2, [r3, #0]
 8001d9e:	e069      	b.n	8001e74 <ARGB_TIM_DMADelayPulseCplt_left+0x2e0>
    } else { // if END of transfer
    	BUF_COUNTER_LEFT = 0;
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <ARGB_TIM_DMADelayPulseCplt_left+0x24c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	801a      	strh	r2, [r3, #0]
#if TIM_CH_LEFT == TIM_CHANNEL_2
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
#endif
#if TIM_CH_LEFT == TIM_CHANNEL_3
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001db4:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f002 ff7a 	bl	8004cb4 <HAL_DMA_Abort_IT>
#endif
#if TIM_CH_LEFT == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0c      	ldr	r2, [pc, #48]	; (8001df8 <ARGB_TIM_DMADelayPulseCplt_left+0x264>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d004      	beq.n	8001dd4 <ARGB_TIM_DMADelayPulseCplt_left+0x240>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <ARGB_TIM_DMADelayPulseCplt_left+0x268>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d115      	bne.n	8001e00 <ARGB_TIM_DMADelayPulseCplt_left+0x26c>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e014      	b.n	8001e02 <ARGB_TIM_DMADelayPulseCplt_left+0x26e>
 8001dd8:	200017e8 	.word	0x200017e8
 8001ddc:	20001758 	.word	0x20001758
 8001de0:	20000590 	.word	0x20000590
 8001de4:	200000e8 	.word	0x200000e8
 8001de8:	200000e4 	.word	0x200000e4
 8001dec:	200000e5 	.word	0x200000e5
 8001df0:	20000390 	.word	0x20000390
 8001df4:	20000410 	.word	0x20000410
 8001df8:	40010000 	.word	0x40010000
 8001dfc:	40010400 	.word	0x40010400
 8001e00:	2300      	movs	r3, #0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d017      	beq.n	8001e36 <ARGB_TIM_DMADelayPulseCplt_left+0x2a2>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6a1a      	ldr	r2, [r3, #32]
 8001e0c:	f241 1311 	movw	r3, #4369	; 0x1111
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10f      	bne.n	8001e36 <ARGB_TIM_DMADelayPulseCplt_left+0x2a2>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6a1a      	ldr	r2, [r3, #32]
 8001e1c:	f240 4344 	movw	r3, #1092	; 0x444
 8001e20:	4013      	ands	r3, r2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d107      	bne.n	8001e36 <ARGB_TIM_DMADelayPulseCplt_left+0x2a2>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e34:	645a      	str	r2, [r3, #68]	; 0x44
        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6a1a      	ldr	r2, [r3, #32]
 8001e3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10f      	bne.n	8001e66 <ARGB_TIM_DMADelayPulseCplt_left+0x2d2>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6a1a      	ldr	r2, [r3, #32]
 8001e4c:	f240 4344 	movw	r3, #1092	; 0x444
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d107      	bne.n	8001e66 <ARGB_TIM_DMADelayPulseCplt_left+0x2d2>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0201 	bic.w	r2, r2, #1
 8001e64:	601a      	str	r2, [r3, #0]
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH_LEFT, HAL_TIM_CHANNEL_STATE_READY);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        ARGB_LOC_ST_LEFT = ARGB_READY;
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <ARGB_TIM_DMADelayPulseCplt_left+0x2f4>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	771a      	strb	r2, [r3, #28]
 8001e7a:	e002      	b.n	8001e82 <ARGB_TIM_DMADelayPulseCplt_left+0x2ee>
    if (hdma != &DMA_HANDLE_LEFT || htim != &TIM_HANDLE) return;
 8001e7c:	bf00      	nop
 8001e7e:	e000      	b.n	8001e82 <ARGB_TIM_DMADelayPulseCplt_left+0x2ee>
    if (BUF_COUNTER_LEFT == 0) return; // if no data to transmit - return
 8001e80:	bf00      	nop
}
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000594 	.word	0x20000594

08001e8c <ARGB_TIM_DMADelayPulseCplt_right>:
// -----------------------------------------------------------------------
static void ARGB_TIM_DMADelayPulseCplt_right(DMA_HandleTypeDef *hdma) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e98:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE_RIGHT || htim != &TIM_HANDLE) return;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a8c      	ldr	r2, [pc, #560]	; (80020d0 <ARGB_TIM_DMADelayPulseCplt_right+0x244>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	f040 8168 	bne.w	8002174 <ARGB_TIM_DMADelayPulseCplt_right+0x2e8>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4a8b      	ldr	r2, [pc, #556]	; (80020d4 <ARGB_TIM_DMADelayPulseCplt_right+0x248>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	f040 8163 	bne.w	8002174 <ARGB_TIM_DMADelayPulseCplt_right+0x2e8>
    if (BUF_COUNTER_RIGHT == 0) return; // if no data to transmit - return    // ,<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 8001eae:	4b8a      	ldr	r3, [pc, #552]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 815f 	beq.w	8002178 <ARGB_TIM_DMADelayPulseCplt_right+0x2ec>
    if (hdma == htim->hdma[TIM_DMA_ID_CC1]) {
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d10b      	bne.n	8001edc <ARGB_TIM_DMADelayPulseCplt_right+0x50>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d136      	bne.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001eda:	e031      	b.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC2]) {
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d10b      	bne.n	8001efe <ARGB_TIM_DMADelayPulseCplt_right+0x72>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d125      	bne.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001efc:	e020      	b.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC3]) {
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d10b      	bne.n	8001f20 <ARGB_TIM_DMADelayPulseCplt_right+0x94>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2204      	movs	r2, #4
 8001f0c:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d114      	bne.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f1e:	e00f      	b.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
        }
    } else if (hdma == htim->hdma[TIM_DMA_ID_CC4]) {
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d10a      	bne.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2208      	movs	r2, #8
 8001f2e:	771a      	strb	r2, [r3, #28]
        if (hdma->Init.Mode == DMA_NORMAL) {
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d103      	bne.n	8001f40 <ARGB_TIM_DMADelayPulseCplt_right+0xb4>
            TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
    } else {
        /* nothing to do */
    }
// if data transfer
    if (BUF_COUNTER_RIGHT < NUM_PIXELS) {
 8001f40:	4b65      	ldr	r3, [pc, #404]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	2b54      	cmp	r3, #84	; 0x54
 8001f48:	f200 8094 	bhi.w	8002074 <ARGB_TIM_DMADelayPulseCplt_right+0x1e8>
        // fill second part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	72fb      	strb	r3, [r7, #11]
 8001f50:	e083      	b.n	800205a <ARGB_TIM_DMADelayPulseCplt_right+0x1ce>
#ifdef SK6812
        	PWM_BUF_RIGHT[i + 32] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001f52:	4b61      	ldr	r3, [pc, #388]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4a60      	ldr	r2, [pc, #384]	; (80020dc <ARGB_TIM_DMADelayPulseCplt_right+0x250>)
 8001f5c:	5cd3      	ldrb	r3, [r2, r3]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	7afb      	ldrb	r3, [r7, #11]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	dd04      	ble.n	8001f7c <ARGB_TIM_DMADelayPulseCplt_right+0xf0>
 8001f72:	4b5b      	ldr	r3, [pc, #364]	; (80020e0 <ARGB_TIM_DMADelayPulseCplt_right+0x254>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	4619      	mov	r1, r3
 8001f7a:	e003      	b.n	8001f84 <ARGB_TIM_DMADelayPulseCplt_right+0xf8>
 8001f7c:	4b59      	ldr	r3, [pc, #356]	; (80020e4 <ARGB_TIM_DMADelayPulseCplt_right+0x258>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	4619      	mov	r1, r3
 8001f84:	7afb      	ldrb	r3, [r7, #11]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	3320      	adds	r3, #32
 8001f8a:	4a57      	ldr	r2, [pc, #348]	; (80020e8 <ARGB_TIM_DMADelayPulseCplt_right+0x25c>)
 8001f8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 40] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001f90:	4b51      	ldr	r3, [pc, #324]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	3301      	adds	r3, #1
 8001f9a:	4a50      	ldr	r2, [pc, #320]	; (80020dc <ARGB_TIM_DMADelayPulseCplt_right+0x250>)
 8001f9c:	5cd3      	ldrb	r3, [r2, r3]
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	7afb      	ldrb	r3, [r7, #11]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	dd04      	ble.n	8001fbc <ARGB_TIM_DMADelayPulseCplt_right+0x130>
 8001fb2:	4b4b      	ldr	r3, [pc, #300]	; (80020e0 <ARGB_TIM_DMADelayPulseCplt_right+0x254>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	4619      	mov	r1, r3
 8001fba:	e003      	b.n	8001fc4 <ARGB_TIM_DMADelayPulseCplt_right+0x138>
 8001fbc:	4b49      	ldr	r3, [pc, #292]	; (80020e4 <ARGB_TIM_DMADelayPulseCplt_right+0x258>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	7afb      	ldrb	r3, [r7, #11]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	3328      	adds	r3, #40	; 0x28
 8001fca:	4a47      	ldr	r2, [pc, #284]	; (80020e8 <ARGB_TIM_DMADelayPulseCplt_right+0x25c>)
 8001fcc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 48] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8001fd0:	4b41      	ldr	r3, [pc, #260]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	3302      	adds	r3, #2
 8001fda:	4a40      	ldr	r2, [pc, #256]	; (80020dc <ARGB_TIM_DMADelayPulseCplt_right+0x250>)
 8001fdc:	5cd3      	ldrb	r3, [r2, r3]
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	7afb      	ldrb	r3, [r7, #11]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	dd04      	ble.n	8001ffc <ARGB_TIM_DMADelayPulseCplt_right+0x170>
 8001ff2:	4b3b      	ldr	r3, [pc, #236]	; (80020e0 <ARGB_TIM_DMADelayPulseCplt_right+0x254>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	e003      	b.n	8002004 <ARGB_TIM_DMADelayPulseCplt_right+0x178>
 8001ffc:	4b39      	ldr	r3, [pc, #228]	; (80020e4 <ARGB_TIM_DMADelayPulseCplt_right+0x258>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	4619      	mov	r1, r3
 8002004:	7afb      	ldrb	r3, [r7, #11]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	3330      	adds	r3, #48	; 0x30
 800200a:	4a37      	ldr	r2, [pc, #220]	; (80020e8 <ARGB_TIM_DMADelayPulseCplt_right+0x25c>)
 800200c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 56] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 3] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002010:	4b31      	ldr	r3, [pc, #196]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	b29b      	uxth	r3, r3
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	3303      	adds	r3, #3
 800201a:	4a30      	ldr	r2, [pc, #192]	; (80020dc <ARGB_TIM_DMADelayPulseCplt_right+0x250>)
 800201c:	5cd3      	ldrb	r3, [r2, r3]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	461a      	mov	r2, r3
 8002022:	7afb      	ldrb	r3, [r7, #11]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202e:	2b00      	cmp	r3, #0
 8002030:	dd04      	ble.n	800203c <ARGB_TIM_DMADelayPulseCplt_right+0x1b0>
 8002032:	4b2b      	ldr	r3, [pc, #172]	; (80020e0 <ARGB_TIM_DMADelayPulseCplt_right+0x254>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	4619      	mov	r1, r3
 800203a:	e003      	b.n	8002044 <ARGB_TIM_DMADelayPulseCplt_right+0x1b8>
 800203c:	4b29      	ldr	r3, [pc, #164]	; (80020e4 <ARGB_TIM_DMADelayPulseCplt_right+0x258>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	4619      	mov	r1, r3
 8002044:	7afb      	ldrb	r3, [r7, #11]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	3338      	adds	r3, #56	; 0x38
 800204a:	4a27      	ldr	r2, [pc, #156]	; (80020e8 <ARGB_TIM_DMADelayPulseCplt_right+0x25c>)
 800204c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8002050:	7afb      	ldrb	r3, [r7, #11]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	3301      	adds	r3, #1
 8002056:	b2db      	uxtb	r3, r3
 8002058:	72fb      	strb	r3, [r7, #11]
 800205a:	7afb      	ldrb	r3, [r7, #11]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b07      	cmp	r3, #7
 8002060:	f67f af77 	bls.w	8001f52 <ARGB_TIM_DMADelayPulseCplt_right+0xc6>
        	PWM_BUF_RIGHT[i + 24] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_RIGHT[i + 32] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_RIGHT[i + 40] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        BUF_COUNTER_RIGHT++;
 8002064:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	b29b      	uxth	r3, r3
 800206a:	3301      	adds	r3, #1
 800206c:	b29a      	uxth	r2, r3
 800206e:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8002070:	801a      	strh	r2, [r3, #0]
 8002072:	e07b      	b.n	800216c <ARGB_TIM_DMADelayPulseCplt_right+0x2e0>
    } else if (BUF_COUNTER_RIGHT < NUM_PIXELS + 2) { // if RET transfer
 8002074:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	b29b      	uxth	r3, r3
 800207a:	2b56      	cmp	r3, #86	; 0x56
 800207c:	d80c      	bhi.n	8002098 <ARGB_TIM_DMADelayPulseCplt_right+0x20c>
        memset((dma_siz *) &PWM_BUF_RIGHT[PWM_BUF_LEN / 2], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // second part
 800207e:	2280      	movs	r2, #128	; 0x80
 8002080:	2100      	movs	r1, #0
 8002082:	481a      	ldr	r0, [pc, #104]	; (80020ec <ARGB_TIM_DMADelayPulseCplt_right+0x260>)
 8002084:	f00f f962 	bl	801134c <memset>
        BUF_COUNTER_RIGHT++;
 8002088:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	b29b      	uxth	r3, r3
 800208e:	3301      	adds	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 8002094:	801a      	strh	r2, [r3, #0]
 8002096:	e069      	b.n	800216c <ARGB_TIM_DMADelayPulseCplt_right+0x2e0>
    } else { // if END of transfer
    	BUF_COUNTER_RIGHT = 0;
 8002098:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <ARGB_TIM_DMADelayPulseCplt_right+0x24c>)
 800209a:	2200      	movs	r2, #0
 800209c:	801a      	strh	r2, [r3, #0]
#if TIM_CH_RIGHT == TIM_CHANNEL_3
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
#endif
#if TIM_CH_RIGHT == TIM_CHANNEL_4
        __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020ac:	60da      	str	r2, [r3, #12]
        (void) HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4618      	mov	r0, r3
 80020b4:	f002 fdfe 	bl	8004cb4 <HAL_DMA_Abort_IT>
#endif
        if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET) {
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0c      	ldr	r2, [pc, #48]	; (80020f0 <ARGB_TIM_DMADelayPulseCplt_right+0x264>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d004      	beq.n	80020cc <ARGB_TIM_DMADelayPulseCplt_right+0x240>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <ARGB_TIM_DMADelayPulseCplt_right+0x268>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d115      	bne.n	80020f8 <ARGB_TIM_DMADelayPulseCplt_right+0x26c>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e014      	b.n	80020fa <ARGB_TIM_DMADelayPulseCplt_right+0x26e>
 80020d0:	20001848 	.word	0x20001848
 80020d4:	20001758 	.word	0x20001758
 80020d8:	20000592 	.word	0x20000592
 80020dc:	2000023c 	.word	0x2000023c
 80020e0:	200000e4 	.word	0x200000e4
 80020e4:	200000e5 	.word	0x200000e5
 80020e8:	20000490 	.word	0x20000490
 80020ec:	20000510 	.word	0x20000510
 80020f0:	40010000 	.word	0x40010000
 80020f4:	40010400 	.word	0x40010400
 80020f8:	2300      	movs	r3, #0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d017      	beq.n	800212e <ARGB_TIM_DMADelayPulseCplt_right+0x2a2>
            /* Disable the Main Output */
            __HAL_TIM_MOE_DISABLE(htim);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6a1a      	ldr	r2, [r3, #32]
 8002104:	f241 1311 	movw	r3, #4369	; 0x1111
 8002108:	4013      	ands	r3, r2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10f      	bne.n	800212e <ARGB_TIM_DMADelayPulseCplt_right+0x2a2>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6a1a      	ldr	r2, [r3, #32]
 8002114:	f240 4344 	movw	r3, #1092	; 0x444
 8002118:	4013      	ands	r3, r2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d107      	bne.n	800212e <ARGB_TIM_DMADelayPulseCplt_right+0x2a2>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800212c:	645a      	str	r2, [r3, #68]	; 0x44
        }
        /* Disable the Peripheral */
        __HAL_TIM_DISABLE(htim);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6a1a      	ldr	r2, [r3, #32]
 8002134:	f241 1311 	movw	r3, #4369	; 0x1111
 8002138:	4013      	ands	r3, r2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10f      	bne.n	800215e <ARGB_TIM_DMADelayPulseCplt_right+0x2d2>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6a1a      	ldr	r2, [r3, #32]
 8002144:	f240 4344 	movw	r3, #1092	; 0x444
 8002148:	4013      	ands	r3, r2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d107      	bne.n	800215e <ARGB_TIM_DMADelayPulseCplt_right+0x2d2>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0201 	bic.w	r2, r2, #1
 800215c:	601a      	str	r2, [r3, #0]
        /* Set the TIM channel state */
        TIM_CHANNEL_STATE_SET(htim, TIM_CH_RIGHT, HAL_TIM_CHANNEL_STATE_READY);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        ARGB_LOC_ST_RIGHT = ARGB_READY;
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <ARGB_TIM_DMADelayPulseCplt_right+0x2f4>)
 8002168:	2201      	movs	r2, #1
 800216a:	701a      	strb	r2, [r3, #0]
    }
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	771a      	strb	r2, [r3, #28]
 8002172:	e002      	b.n	800217a <ARGB_TIM_DMADelayPulseCplt_right+0x2ee>
    if (hdma != &DMA_HANDLE_RIGHT || htim != &TIM_HANDLE) return;
 8002174:	bf00      	nop
 8002176:	e000      	b.n	800217a <ARGB_TIM_DMADelayPulseCplt_right+0x2ee>
    if (BUF_COUNTER_RIGHT == 0) return; // if no data to transmit - return    // ,<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 8002178:	bf00      	nop
}
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000595 	.word	0x20000595

08002184 <ARGB_TIM_DMADelayPulseHalfCplt_left>:
/**
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ARGB_TIM_DMADelayPulseHalfCplt_left(DMA_HandleTypeDef *hdma) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002190:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE_LEFT || htim != &TIM_HANDLE) return;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a60      	ldr	r2, [pc, #384]	; (8002318 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x194>)
 8002196:	4293      	cmp	r3, r2
 8002198:	f040 80b7 	bne.w	800230a <ARGB_TIM_DMADelayPulseHalfCplt_left+0x186>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4a5f      	ldr	r2, [pc, #380]	; (800231c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x198>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	f040 80b2 	bne.w	800230a <ARGB_TIM_DMADelayPulseHalfCplt_left+0x186>
    if (BUF_COUNTER_LEFT == 0) return; // if no data to transmit - return
 80021a6:	4b5e      	ldr	r3, [pc, #376]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 80ae 	beq.w	800230e <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18a>
    // if data transfer
    if (BUF_COUNTER_LEFT < NUM_PIXELS) {
 80021b2:	4b5b      	ldr	r3, [pc, #364]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	2b54      	cmp	r3, #84	; 0x54
 80021ba:	f200 8094 	bhi.w	80022e6 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x162>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 80021be:	2300      	movs	r3, #0
 80021c0:	72fb      	strb	r3, [r7, #11]
 80021c2:	e083      	b.n	80022cc <ARGB_TIM_DMADelayPulseHalfCplt_left+0x148>
#ifdef SK6812
        	PWM_BUF_LEFT[i] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80021c4:	4b56      	ldr	r3, [pc, #344]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4a55      	ldr	r2, [pc, #340]	; (8002324 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a0>)
 80021ce:	5cd3      	ldrb	r3, [r2, r3]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	7afb      	ldrb	r3, [r7, #11]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	dd04      	ble.n	80021ee <ARGB_TIM_DMADelayPulseHalfCplt_left+0x6a>
 80021e4:	4b50      	ldr	r3, [pc, #320]	; (8002328 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a4>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	e003      	b.n	80021f6 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x72>
 80021ee:	4b4f      	ldr	r3, [pc, #316]	; (800232c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a8>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	7afb      	ldrb	r3, [r7, #11]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	4619      	mov	r1, r3
 80021fc:	4b4c      	ldr	r3, [pc, #304]	; (8002330 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 80021fe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        	PWM_BUF_LEFT[i + 8] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002202:	4b47      	ldr	r3, [pc, #284]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	3301      	adds	r3, #1
 800220c:	4a45      	ldr	r2, [pc, #276]	; (8002324 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a0>)
 800220e:	5cd3      	ldrb	r3, [r2, r3]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	461a      	mov	r2, r3
 8002214:	7afb      	ldrb	r3, [r7, #11]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002220:	2b00      	cmp	r3, #0
 8002222:	dd04      	ble.n	800222e <ARGB_TIM_DMADelayPulseHalfCplt_left+0xaa>
 8002224:	4b40      	ldr	r3, [pc, #256]	; (8002328 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a4>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	4619      	mov	r1, r3
 800222c:	e003      	b.n	8002236 <ARGB_TIM_DMADelayPulseHalfCplt_left+0xb2>
 800222e:	4b3f      	ldr	r3, [pc, #252]	; (800232c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a8>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	b2db      	uxtb	r3, r3
 8002234:	4619      	mov	r1, r3
 8002236:	7afb      	ldrb	r3, [r7, #11]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	3308      	adds	r3, #8
 800223c:	4a3c      	ldr	r2, [pc, #240]	; (8002330 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 800223e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 16] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002242:	4b37      	ldr	r3, [pc, #220]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	b29b      	uxth	r3, r3
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	3302      	adds	r3, #2
 800224c:	4a35      	ldr	r2, [pc, #212]	; (8002324 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a0>)
 800224e:	5cd3      	ldrb	r3, [r2, r3]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	461a      	mov	r2, r3
 8002254:	7afb      	ldrb	r3, [r7, #11]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002260:	2b00      	cmp	r3, #0
 8002262:	dd04      	ble.n	800226e <ARGB_TIM_DMADelayPulseHalfCplt_left+0xea>
 8002264:	4b30      	ldr	r3, [pc, #192]	; (8002328 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a4>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	4619      	mov	r1, r3
 800226c:	e003      	b.n	8002276 <ARGB_TIM_DMADelayPulseHalfCplt_left+0xf2>
 800226e:	4b2f      	ldr	r3, [pc, #188]	; (800232c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a8>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	4619      	mov	r1, r3
 8002276:	7afb      	ldrb	r3, [r7, #11]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	3310      	adds	r3, #16
 800227c:	4a2c      	ldr	r2, [pc, #176]	; (8002330 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 800227e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_LEFT[i + 24] = (((RGB_BUF_LEFT[4 * BUF_COUNTER_LEFT + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
 8002282:	4b27      	ldr	r3, [pc, #156]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	b29b      	uxth	r3, r3
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	3303      	adds	r3, #3
 800228c:	4a25      	ldr	r2, [pc, #148]	; (8002324 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a0>)
 800228e:	5cd3      	ldrb	r3, [r2, r3]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	7afb      	ldrb	r3, [r7, #11]
 8002296:	b2db      	uxtb	r3, r3
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	dd04      	ble.n	80022ae <ARGB_TIM_DMADelayPulseHalfCplt_left+0x12a>
 80022a4:	4b20      	ldr	r3, [pc, #128]	; (8002328 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a4>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	4619      	mov	r1, r3
 80022ac:	e003      	b.n	80022b6 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x132>
 80022ae:	4b1f      	ldr	r3, [pc, #124]	; (800232c <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1a8>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	4619      	mov	r1, r3
 80022b6:	7afb      	ldrb	r3, [r7, #11]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	3318      	adds	r3, #24
 80022bc:	4a1c      	ldr	r2, [pc, #112]	; (8002330 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 80022be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 80022c2:	7afb      	ldrb	r3, [r7, #11]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	3301      	adds	r3, #1
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	72fb      	strb	r3, [r7, #11]
 80022cc:	7afb      	ldrb	r3, [r7, #11]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b07      	cmp	r3, #7
 80022d2:	f67f af77 	bls.w	80021c4 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x40>
        	PWM_BUF_LEFT[i] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_LEFT[i + 8] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_LEFT[i + 16] = (((RGB_BUF_LEFT[3 * BUF_COUNTER_LEFT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        BUF_COUNTER_LEFT++;
 80022d6:	4b12      	ldr	r3, [pc, #72]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	3301      	adds	r3, #1
 80022de:	b29a      	uxth	r2, r3
 80022e0:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80022e2:	801a      	strh	r2, [r3, #0]
 80022e4:	e014      	b.n	8002310 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18c>
    } else if (BUF_COUNTER_LEFT < NUM_PIXELS + 2) { // if RET transfer
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	2b56      	cmp	r3, #86	; 0x56
 80022ee:	d80f      	bhi.n	8002310 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18c>
        memset((dma_siz *) &PWM_BUF_LEFT[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 80022f0:	2280      	movs	r2, #128	; 0x80
 80022f2:	2100      	movs	r1, #0
 80022f4:	480e      	ldr	r0, [pc, #56]	; (8002330 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x1ac>)
 80022f6:	f00f f829 	bl	801134c <memset>
        BUF_COUNTER_LEFT++;
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	3301      	adds	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x19c>)
 8002306:	801a      	strh	r2, [r3, #0]
 8002308:	e002      	b.n	8002310 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18c>
    if (hdma != &DMA_HANDLE_LEFT || htim != &TIM_HANDLE) return;
 800230a:	bf00      	nop
 800230c:	e000      	b.n	8002310 <ARGB_TIM_DMADelayPulseHalfCplt_left+0x18c>
    if (BUF_COUNTER_LEFT == 0) return; // if no data to transmit - return
 800230e:	bf00      	nop
    }
}
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200017e8 	.word	0x200017e8
 800231c:	20001758 	.word	0x20001758
 8002320:	20000590 	.word	0x20000590
 8002324:	200000e8 	.word	0x200000e8
 8002328:	200000e4 	.word	0x200000e4
 800232c:	200000e5 	.word	0x200000e5
 8002330:	20000390 	.word	0x20000390

08002334 <ARGB_TIM_DMADelayPulseHalfCplt_right>:
// -----------------------------------------------------------------------------------
static void ARGB_TIM_DMADelayPulseHalfCplt_right(DMA_HandleTypeDef *hdma) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
    TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *) ((DMA_HandleTypeDef *) hdma)->Parent;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002340:	60fb      	str	r3, [r7, #12]
    // if wrong handlers
    if (hdma != &DMA_HANDLE_RIGHT || htim != &TIM_HANDLE) return;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a60      	ldr	r2, [pc, #384]	; (80024c8 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x194>)
 8002346:	4293      	cmp	r3, r2
 8002348:	f040 80b7 	bne.w	80024ba <ARGB_TIM_DMADelayPulseHalfCplt_right+0x186>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4a5f      	ldr	r2, [pc, #380]	; (80024cc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x198>)
 8002350:	4293      	cmp	r3, r2
 8002352:	f040 80b2 	bne.w	80024ba <ARGB_TIM_DMADelayPulseHalfCplt_right+0x186>
    if (BUF_COUNTER_RIGHT == 0) return; // if no data to transmit - return
 8002356:	4b5e      	ldr	r3, [pc, #376]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	b29b      	uxth	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80ae 	beq.w	80024be <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18a>
    // if data transfer
    if (BUF_COUNTER_RIGHT < NUM_PIXELS) {
 8002362:	4b5b      	ldr	r3, [pc, #364]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	2b54      	cmp	r3, #84	; 0x54
 800236a:	f200 8094 	bhi.w	8002496 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x162>
        // fill first part of buffer
        for (volatile u8_t i = 0; i < 8; i++) {
 800236e:	2300      	movs	r3, #0
 8002370:	72fb      	strb	r3, [r7, #11]
 8002372:	e083      	b.n	800247c <ARGB_TIM_DMADelayPulseHalfCplt_right+0x148>
#ifdef SK6812
        	PWM_BUF_RIGHT[i] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 8002374:	4b56      	ldr	r3, [pc, #344]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	b29b      	uxth	r3, r3
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4a55      	ldr	r2, [pc, #340]	; (80024d4 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a0>)
 800237e:	5cd3      	ldrb	r3, [r2, r3]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	461a      	mov	r2, r3
 8002384:	7afb      	ldrb	r3, [r7, #11]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002390:	2b00      	cmp	r3, #0
 8002392:	dd04      	ble.n	800239e <ARGB_TIM_DMADelayPulseHalfCplt_right+0x6a>
 8002394:	4b50      	ldr	r3, [pc, #320]	; (80024d8 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a4>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	b2db      	uxtb	r3, r3
 800239a:	461a      	mov	r2, r3
 800239c:	e003      	b.n	80023a6 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x72>
 800239e:	4b4f      	ldr	r3, [pc, #316]	; (80024dc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a8>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	7afb      	ldrb	r3, [r7, #11]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	4619      	mov	r1, r3
 80023ac:	4b4c      	ldr	r3, [pc, #304]	; (80024e0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 80023ae:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        	PWM_BUF_RIGHT[i + 8] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80023b2:	4b47      	ldr	r3, [pc, #284]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	3301      	adds	r3, #1
 80023bc:	4a45      	ldr	r2, [pc, #276]	; (80024d4 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a0>)
 80023be:	5cd3      	ldrb	r3, [r2, r3]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	461a      	mov	r2, r3
 80023c4:	7afb      	ldrb	r3, [r7, #11]
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	dd04      	ble.n	80023de <ARGB_TIM_DMADelayPulseHalfCplt_right+0xaa>
 80023d4:	4b40      	ldr	r3, [pc, #256]	; (80024d8 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a4>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	4619      	mov	r1, r3
 80023dc:	e003      	b.n	80023e6 <ARGB_TIM_DMADelayPulseHalfCplt_right+0xb2>
 80023de:	4b3f      	ldr	r3, [pc, #252]	; (80024dc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a8>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	4619      	mov	r1, r3
 80023e6:	7afb      	ldrb	r3, [r7, #11]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	3308      	adds	r3, #8
 80023ec:	4a3c      	ldr	r2, [pc, #240]	; (80024e0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 80023ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 16] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
 80023f2:	4b37      	ldr	r3, [pc, #220]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	3302      	adds	r3, #2
 80023fc:	4a35      	ldr	r2, [pc, #212]	; (80024d4 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a0>)
 80023fe:	5cd3      	ldrb	r3, [r2, r3]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	7afb      	ldrb	r3, [r7, #11]
 8002406:	b2db      	uxtb	r3, r3
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002410:	2b00      	cmp	r3, #0
 8002412:	dd04      	ble.n	800241e <ARGB_TIM_DMADelayPulseHalfCplt_right+0xea>
 8002414:	4b30      	ldr	r3, [pc, #192]	; (80024d8 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a4>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	4619      	mov	r1, r3
 800241c:	e003      	b.n	8002426 <ARGB_TIM_DMADelayPulseHalfCplt_right+0xf2>
 800241e:	4b2f      	ldr	r3, [pc, #188]	; (80024dc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a8>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	b2db      	uxtb	r3, r3
 8002424:	4619      	mov	r1, r3
 8002426:	7afb      	ldrb	r3, [r7, #11]
 8002428:	b2db      	uxtb	r3, r3
 800242a:	3310      	adds	r3, #16
 800242c:	4a2c      	ldr	r2, [pc, #176]	; (80024e0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 800242e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	PWM_BUF_RIGHT[i + 24] = (((RGB_BUF_RIGHT[4 * BUF_COUNTER_RIGHT + 3] << i) & 0x80) > 0)? PWM_HI : PWM_LO;
 8002432:	4b27      	ldr	r3, [pc, #156]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	3303      	adds	r3, #3
 800243c:	4a25      	ldr	r2, [pc, #148]	; (80024d4 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a0>)
 800243e:	5cd3      	ldrb	r3, [r2, r3]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	461a      	mov	r2, r3
 8002444:	7afb      	ldrb	r3, [r7, #11]
 8002446:	b2db      	uxtb	r3, r3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002450:	2b00      	cmp	r3, #0
 8002452:	dd04      	ble.n	800245e <ARGB_TIM_DMADelayPulseHalfCplt_right+0x12a>
 8002454:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a4>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	4619      	mov	r1, r3
 800245c:	e003      	b.n	8002466 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x132>
 800245e:	4b1f      	ldr	r3, [pc, #124]	; (80024dc <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1a8>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	4619      	mov	r1, r3
 8002466:	7afb      	ldrb	r3, [r7, #11]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	3318      	adds	r3, #24
 800246c:	4a1c      	ldr	r2, [pc, #112]	; (80024e0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 800246e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (volatile u8_t i = 0; i < 8; i++) {
 8002472:	7afb      	ldrb	r3, [r7, #11]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	3301      	adds	r3, #1
 8002478:	b2db      	uxtb	r3, r3
 800247a:	72fb      	strb	r3, [r7, #11]
 800247c:	7afb      	ldrb	r3, [r7, #11]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b07      	cmp	r3, #7
 8002482:	f67f af77 	bls.w	8002374 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x40>
        	PWM_BUF_RIGHT[i] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_RIGHT[i + 8] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT + 1] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
        	PWM_BUF_RIGHT[i + 16] = (((RGB_BUF_RIGHT[3 * BUF_COUNTER_RIGHT + 2] << i) & 0x80) > 0) ? PWM_HI : PWM_LO;
#endif
        }
        BUF_COUNTER_RIGHT++;
 8002486:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	b29b      	uxth	r3, r3
 800248c:	3301      	adds	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002492:	801a      	strh	r2, [r3, #0]
 8002494:	e014      	b.n	80024c0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18c>
    } else if (BUF_COUNTER_RIGHT < NUM_PIXELS + 2) { // if RET transfer
 8002496:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	b29b      	uxth	r3, r3
 800249c:	2b56      	cmp	r3, #86	; 0x56
 800249e:	d80f      	bhi.n	80024c0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18c>
        memset((dma_siz *) &PWM_BUF_RIGHT[0], 0, (PWM_BUF_LEN / 2)*sizeof(dma_siz)); // first part
 80024a0:	2280      	movs	r2, #128	; 0x80
 80024a2:	2100      	movs	r1, #0
 80024a4:	480e      	ldr	r0, [pc, #56]	; (80024e0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x1ac>)
 80024a6:	f00e ff51 	bl	801134c <memset>
        BUF_COUNTER_RIGHT++;
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3301      	adds	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x19c>)
 80024b6:	801a      	strh	r2, [r3, #0]
 80024b8:	e002      	b.n	80024c0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18c>
    if (hdma != &DMA_HANDLE_RIGHT || htim != &TIM_HANDLE) return;
 80024ba:	bf00      	nop
 80024bc:	e000      	b.n	80024c0 <ARGB_TIM_DMADelayPulseHalfCplt_right+0x18c>
    if (BUF_COUNTER_RIGHT == 0) return; // if no data to transmit - return
 80024be:	bf00      	nop
    }
}
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20001848 	.word	0x20001848
 80024cc:	20001758 	.word	0x20001758
 80024d0:	20000592 	.word	0x20000592
 80024d4:	2000023c 	.word	0x2000023c
 80024d8:	200000e4 	.word	0x200000e4
 80024dc:	200000e5 	.word	0x200000e5
 80024e0:	20000490 	.word	0x20000490

080024e4 <turn_off_left_stript>:

#include "light/led_stript/ARGB.h"

// -----------------------------------------------------------------------------------------------------
void turn_off_left_stript(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
	ARGB_Clear_left(); 			// Clear stirp
 80024e8:	f7fe fdc8 	bl	800107c <ARGB_Clear_left>
	while (ARGB_Show_left() != ARGB_OK); // Update - Option 1
 80024ec:	bf00      	nop
 80024ee:	f7fe ffa5 	bl	800143c <ARGB_Show_left>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d1fa      	bne.n	80024ee <turn_off_left_stript+0xa>
}
 80024f8:	bf00      	nop
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}

080024fe <turn_off_right_stript>:
// -----------------------------------------------------------------------------------------------------
void turn_off_right_stript(void)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	af00      	add	r7, sp, #0
	ARGB_Clear_right();
 8002502:	f7fe fdc7 	bl	8001094 <ARGB_Clear_right>
	while (ARGB_Show_right() != ARGB_OK); // Update - Option 1
 8002506:	bf00      	nop
 8002508:	f7ff f964 	bl	80017d4 <ARGB_Show_right>
 800250c:	4603      	mov	r3, r0
 800250e:	2b02      	cmp	r3, #2
 8002510:	d1fa      	bne.n	8002508 <turn_off_right_stript+0xa>
}
 8002512:	bf00      	nop
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}

08002518 <turn_off_left_and_right_dtript>:
// -----------------------------------------------------------------------------------------------------
void turn_off_left_and_right_dtript(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
	turn_off_left_stript();
 800251c:	f7ff ffe2 	bl	80024e4 <turn_off_left_stript>
	turn_off_right_stript();
 8002520:	f7ff ffed 	bl	80024fe <turn_off_right_stript>
}
 8002524:	bf00      	nop
 8002526:	bd80      	pop	{r7, pc}

08002528 <turn_all_leds_from_centr>:
	}
	while (!ARGB_Show_right());  // Update
}
// -----------------------------------------------------------------------------------------------------
void turn_all_leds_from_centr(u8_t delay, u8_t r, u8_t g, u8_t b)
{
 8002528:	b590      	push	{r4, r7, lr}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	4604      	mov	r4, r0
 8002530:	4608      	mov	r0, r1
 8002532:	4611      	mov	r1, r2
 8002534:	461a      	mov	r2, r3
 8002536:	4623      	mov	r3, r4
 8002538:	71fb      	strb	r3, [r7, #7]
 800253a:	4603      	mov	r3, r0
 800253c:	71bb      	strb	r3, [r7, #6]
 800253e:	460b      	mov	r3, r1
 8002540:	717b      	strb	r3, [r7, #5]
 8002542:	4613      	mov	r3, r2
 8002544:	713b      	strb	r3, [r7, #4]
	uint8_t i =0;
 8002546:	2300      	movs	r3, #0
 8002548:	73fb      	strb	r3, [r7, #15]
	// turn_off_left_stript();

	for( i = 84; i >= 43; i--)
 800254a:	2354      	movs	r3, #84	; 0x54
 800254c:	73fb      	strb	r3, [r7, #15]
 800254e:	e034      	b.n	80025ba <turn_all_leds_from_centr+0x92>
	{
		ARGB_SetRGB_left(i, r, g, b);			// High side
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	b298      	uxth	r0, r3
 8002554:	793b      	ldrb	r3, [r7, #4]
 8002556:	797a      	ldrb	r2, [r7, #5]
 8002558:	79b9      	ldrb	r1, [r7, #6]
 800255a:	f7fe fdb7 	bl	80010cc <ARGB_SetRGB_left>
		ARGB_SetRGB_right(i, r, g, b);
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	b298      	uxth	r0, r3
 8002562:	793b      	ldrb	r3, [r7, #4]
 8002564:	797a      	ldrb	r2, [r7, #5]
 8002566:	79b9      	ldrb	r1, [r7, #6]
 8002568:	f7fe fe2a 	bl	80011c0 <ARGB_SetRGB_right>

		ARGB_SetRGB_left((85 - i), r, g, b);
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	b29b      	uxth	r3, r3
 8002570:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
 8002574:	b298      	uxth	r0, r3
 8002576:	793b      	ldrb	r3, [r7, #4]
 8002578:	797a      	ldrb	r2, [r7, #5]
 800257a:	79b9      	ldrb	r1, [r7, #6]
 800257c:	f7fe fda6 	bl	80010cc <ARGB_SetRGB_left>
		ARGB_SetRGB_right((85 - i), r, g, b);
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	b29b      	uxth	r3, r3
 8002584:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
 8002588:	b298      	uxth	r0, r3
 800258a:	793b      	ldrb	r3, [r7, #4]
 800258c:	797a      	ldrb	r2, [r7, #5]
 800258e:	79b9      	ldrb	r1, [r7, #6]
 8002590:	f7fe fe16 	bl	80011c0 <ARGB_SetRGB_right>

		while (!ARGB_Show_left());  // Update
 8002594:	bf00      	nop
 8002596:	f7fe ff51 	bl	800143c <ARGB_Show_left>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0fa      	beq.n	8002596 <turn_all_leds_from_centr+0x6e>
		while (!ARGB_Show_right());  // Update
 80025a0:	bf00      	nop
 80025a2:	f7ff f917 	bl	80017d4 <ARGB_Show_right>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0fa      	beq.n	80025a2 <turn_all_leds_from_centr+0x7a>
		HAL_Delay(delay);
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f002 f8d4 	bl	800475c <HAL_Delay>
	for( i = 84; i >= 43; i--)
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	2b2a      	cmp	r3, #42	; 0x2a
 80025be:	d8c7      	bhi.n	8002550 <turn_all_leds_from_centr+0x28>
	}
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd90      	pop	{r4, r7, pc}

080025ca <set_left_one_rgbw_led>:
// -----------------------------------------------------------------------------------------------------
void set_left_one_rgbw_led(uint8_t position, u8_t r, u8_t g, u8_t b, u8_t w)
{
 80025ca:	b590      	push	{r4, r7, lr}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	4604      	mov	r4, r0
 80025d2:	4608      	mov	r0, r1
 80025d4:	4611      	mov	r1, r2
 80025d6:	461a      	mov	r2, r3
 80025d8:	4623      	mov	r3, r4
 80025da:	71fb      	strb	r3, [r7, #7]
 80025dc:	4603      	mov	r3, r0
 80025de:	71bb      	strb	r3, [r7, #6]
 80025e0:	460b      	mov	r3, r1
 80025e2:	717b      	strb	r3, [r7, #5]
 80025e4:	4613      	mov	r3, r2
 80025e6:	713b      	strb	r3, [r7, #4]
	ARGB_SetRGB_left(position, r, g, b);
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	b298      	uxth	r0, r3
 80025ec:	793b      	ldrb	r3, [r7, #4]
 80025ee:	797a      	ldrb	r2, [r7, #5]
 80025f0:	79b9      	ldrb	r1, [r7, #6]
 80025f2:	f7fe fd6b 	bl	80010cc <ARGB_SetRGB_left>
	ARGB_SetWhite_left(position, w);
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	7e3a      	ldrb	r2, [r7, #24]
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fe58 	bl	80012b4 <ARGB_SetWhite_left>
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	bd90      	pop	{r4, r7, pc}

0800260c <set_right_one_rgbw_led>:
// -----------------------------------------------------------------------------------------------------
void set_right_one_rgbw_led(uint8_t position, u8_t r, u8_t g, u8_t b, u8_t w)
{
 800260c:	b590      	push	{r4, r7, lr}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4604      	mov	r4, r0
 8002614:	4608      	mov	r0, r1
 8002616:	4611      	mov	r1, r2
 8002618:	461a      	mov	r2, r3
 800261a:	4623      	mov	r3, r4
 800261c:	71fb      	strb	r3, [r7, #7]
 800261e:	4603      	mov	r3, r0
 8002620:	71bb      	strb	r3, [r7, #6]
 8002622:	460b      	mov	r3, r1
 8002624:	717b      	strb	r3, [r7, #5]
 8002626:	4613      	mov	r3, r2
 8002628:	713b      	strb	r3, [r7, #4]
	ARGB_SetRGB_right(position, r, g, b);
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	b298      	uxth	r0, r3
 800262e:	793b      	ldrb	r3, [r7, #4]
 8002630:	797a      	ldrb	r2, [r7, #5]
 8002632:	79b9      	ldrb	r1, [r7, #6]
 8002634:	f7fe fdc4 	bl	80011c0 <ARGB_SetRGB_right>
	ARGB_SetWhite_right(position, w);
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	b29b      	uxth	r3, r3
 800263c:	7e3a      	ldrb	r2, [r7, #24]
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe fe5b 	bl	80012fc <ARGB_SetWhite_right>
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	bd90      	pop	{r4, r7, pc}
	...

08002650 <init_tim_13>:
static void MX_TIM13_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
void init_tim_13(int msec)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
	msec = msec*10;
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_AUTORELOAD(&htim13, msec-1);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	1e5a      	subs	r2, r3, #1
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <init_tim_13+0x38>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	62da      	str	r2, [r3, #44]	; 0x2c
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3b01      	subs	r3, #1
 8002672:	461a      	mov	r2, r3
 8002674:	4b04      	ldr	r3, [pc, #16]	; (8002688 <init_tim_13+0x38>)
 8002676:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Start_IT(&htim13);
 8002678:	4803      	ldr	r0, [pc, #12]	; (8002688 <init_tim_13+0x38>)
 800267a:	f005 fb5f 	bl	8007d3c <HAL_TIM_Base_Start_IT>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	200017a0 	.word	0x200017a0

0800268c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800268c:	b5b0      	push	{r4, r5, r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002692:	f001 fff1 	bl	8004678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002696:	f000 f903 	bl	80028a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800269a:	f000 fca5 	bl	8002fe8 <MX_GPIO_Init>
  MX_DMA_Init();
 800269e:	f000 fc7b 	bl	8002f98 <MX_DMA_Init>
  MX_USB_HOST_Init();
 80026a2:	f00e fb11 	bl	8010cc8 <MX_USB_HOST_Init>
  MX_USART3_UART_Init();
 80026a6:	f000 fc4d 	bl	8002f44 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80026aa:	f000 f963 	bl	8002974 <MX_SPI1_Init>
  MX_FATFS_Init();
 80026ae:	f008 fcdd 	bl	800b06c <MX_FATFS_Init>
  MX_TIM2_Init();
 80026b2:	f000 f995 	bl	80029e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80026b6:	f000 fa29 	bl	8002b0c <MX_TIM3_Init>
  MX_TIM4_Init();
 80026ba:	f000 fabf 	bl	8002c3c <MX_TIM4_Init>
  MX_TIM8_Init();
 80026be:	f000 fb8d 	bl	8002ddc <MX_TIM8_Init>
  MX_TIM5_Init();
 80026c2:	f000 fb3d 	bl	8002d40 <MX_TIM5_Init>
  MX_TIM13_Init();
 80026c6:	f000 fc19 	bl	8002efc <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(100);
 80026ca:	2064      	movs	r0, #100	; 0x64
 80026cc:	f002 f846 	bl	800475c <HAL_Delay>

  // LEDs //////////////////////////////////////////////////////////////////
  ARGB_SetBrightness(255); 					 	// Set global brightness to 100%
 80026d0:	20ff      	movs	r0, #255	; 0xff
 80026d2:	f7fe fceb 	bl	80010ac <ARGB_SetBrightness>
  ARGB_Init();  								// Initialization
 80026d6:	f7fe fc4f 	bl	8000f78 <ARGB_Init>
  turn_off_left_and_right_dtript();
 80026da:	f7ff ff1d 	bl	8002518 <turn_off_left_and_right_dtript>
  //////////////////////////////////////////////////////////////////////////

  // SD Card //////////////////////////////////////////////////////////////
  char msg_buf[30] = {0};
 80026de:	2300      	movs	r3, #0
 80026e0:	603b      	str	r3, [r7, #0]
 80026e2:	1d3b      	adds	r3, r7, #4
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]
 80026f0:	615a      	str	r2, [r3, #20]
 80026f2:	831a      	strh	r2, [r3, #24]
  if(disk_initialize(SDFatFs. drv) != 0)
 80026f4:	4b5c      	ldr	r3, [pc, #368]	; (8002868 <main+0x1dc>)
 80026f6:	785b      	ldrb	r3, [r3, #1]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f00a fdcf 	bl	800d29c <disk_initialize>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d023      	beq.n	800274c <main+0xc0>
  {
	  while(1)
	  {
		  strcat(msg_buf, "\n\r-> ERROR: NO SD CARD! \n\r");
 8002704:	463b      	mov	r3, r7
 8002706:	4618      	mov	r0, r3
 8002708:	f7fd fd62 	bl	80001d0 <strlen>
 800270c:	4603      	mov	r3, r0
 800270e:	461a      	mov	r2, r3
 8002710:	463b      	mov	r3, r7
 8002712:	4413      	add	r3, r2
 8002714:	4a55      	ldr	r2, [pc, #340]	; (800286c <main+0x1e0>)
 8002716:	461d      	mov	r5, r3
 8002718:	4614      	mov	r4, r2
 800271a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800271c:	6028      	str	r0, [r5, #0]
 800271e:	6069      	str	r1, [r5, #4]
 8002720:	60aa      	str	r2, [r5, #8]
 8002722:	60eb      	str	r3, [r5, #12]
 8002724:	cc03      	ldmia	r4!, {r0, r1}
 8002726:	6128      	str	r0, [r5, #16]
 8002728:	6169      	str	r1, [r5, #20]
 800272a:	8823      	ldrh	r3, [r4, #0]
 800272c:	78a2      	ldrb	r2, [r4, #2]
 800272e:	832b      	strh	r3, [r5, #24]
 8002730:	4613      	mov	r3, r2
 8002732:	76ab      	strb	r3, [r5, #26]
		  HAL_UART_Transmit_IT(&huart3, msg_buf, sizeof(msg_buf));
 8002734:	463b      	mov	r3, r7
 8002736:	221e      	movs	r2, #30
 8002738:	4619      	mov	r1, r3
 800273a:	484d      	ldr	r0, [pc, #308]	; (8002870 <main+0x1e4>)
 800273c:	f006 fcd3 	bl	80090e6 <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 8002740:	2064      	movs	r0, #100	; 0x64
 8002742:	f002 f80b 	bl	800475c <HAL_Delay>

		  all_leds_animantion_error_state();
 8002746:	f000 fe21 	bl	800338c <all_leds_animantion_error_state>
		  strcat(msg_buf, "\n\r-> ERROR: NO SD CARD! \n\r");
 800274a:	e7db      	b.n	8002704 <main+0x78>
	  }
  }
  else
  {
	  SD_SPI_GetFileInfo();
 800274c:	f001 fc4c 	bl	8003fe8 <SD_SPI_GetFileInfo>
	  FATFS_UnLinkDriver(USER_Path);
 8002750:	4848      	ldr	r0, [pc, #288]	; (8002874 <main+0x1e8>)
 8002752:	f00e f9e5 	bl	8010b20 <FATFS_UnLinkDriver>

	  all_leds_animantion_ok_state();
 8002756:	f000 fe01 	bl	800335c <all_leds_animantion_ok_state>
  }
  //////////////////////////////////////////////////////////////////////////

  // UART //////////////////////////////////////////////////////////////////
  HAL_Delay(100);
 800275a:	2064      	movs	r0, #100	; 0x64
 800275c:	f001 fffe 	bl	800475c <HAL_Delay>
  HAL_UART_Receive_IT(&huart3, &uart_RX_data, sizeof(uart_RX_data));		// Turn on receive on byte from UART in interrupt mode
 8002760:	2201      	movs	r2, #1
 8002762:	4945      	ldr	r1, [pc, #276]	; (8002878 <main+0x1ec>)
 8002764:	4842      	ldr	r0, [pc, #264]	; (8002870 <main+0x1e4>)
 8002766:	f006 fd03 	bl	8009170 <HAL_UART_Receive_IT>
  //////////////////////////////////////////////////////////////////////////

  HAL_TIM_Base_Start_IT(&htim5);       										//використати цей таймер для синхронізації
 800276a:	4844      	ldr	r0, [pc, #272]	; (800287c <main+0x1f0>)
 800276c:	f005 fae6 	bl	8007d3c <HAL_TIM_Base_Start_IT>


  init_tim_13(40);				// Set value in milisecond
 8002770:	2028      	movs	r0, #40	; 0x28
 8002772:	f7ff ff6d 	bl	8002650 <init_tim_13>


	  //test_function_generate_delay();


	  if(flag_received_command == true)
 8002776:	4b42      	ldr	r3, [pc, #264]	; (8002880 <main+0x1f4>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d071      	beq.n	8002862 <main+0x1d6>
	  {
		  static char buf_str[10] = {0};
		  static int flag_firt_command = 1;

		  if(flag_firt_command == 1)
 800277e:	4b41      	ldr	r3, [pc, #260]	; (8002884 <main+0x1f8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d113      	bne.n	80027ae <main+0x122>
		  {
			  strcat(buf_str, rx_buf_command);
 8002786:	4940      	ldr	r1, [pc, #256]	; (8002888 <main+0x1fc>)
 8002788:	4840      	ldr	r0, [pc, #256]	; (800288c <main+0x200>)
 800278a:	f00e fef7 	bl	801157c <strcat>
			  strcat(buf_str, ".bin");
 800278e:	483f      	ldr	r0, [pc, #252]	; (800288c <main+0x200>)
 8002790:	f7fd fd1e 	bl	80001d0 <strlen>
 8002794:	4603      	mov	r3, r0
 8002796:	461a      	mov	r2, r3
 8002798:	4b3c      	ldr	r3, [pc, #240]	; (800288c <main+0x200>)
 800279a:	4413      	add	r3, r2
 800279c:	4a3c      	ldr	r2, [pc, #240]	; (8002890 <main+0x204>)
 800279e:	6810      	ldr	r0, [r2, #0]
 80027a0:	6018      	str	r0, [r3, #0]
 80027a2:	7912      	ldrb	r2, [r2, #4]
 80027a4:	711a      	strb	r2, [r3, #4]
			  flag_firt_command = 0;
 80027a6:	4b37      	ldr	r3, [pc, #220]	; (8002884 <main+0x1f8>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	e059      	b.n	8002862 <main+0x1d6>
		  }
		  else
		  {
			  if(open_bin_file(buf_str) == 0)
 80027ae:	4837      	ldr	r0, [pc, #220]	; (800288c <main+0x200>)
 80027b0:	f001 fd16 	bl	80041e0 <open_bin_file>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d12a      	bne.n	8002810 <main+0x184>
			  {
				  static bool print_flag = true;
				  if(print_flag == true)
 80027ba:	4b36      	ldr	r3, [pc, #216]	; (8002894 <main+0x208>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d04f      	beq.n	8002862 <main+0x1d6>
				  {
					  memset(msg_buf, 0, sizeof(msg_buf));
 80027c2:	463b      	mov	r3, r7
 80027c4:	221e      	movs	r2, #30
 80027c6:	2100      	movs	r1, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f00e fdbf 	bl	801134c <memset>
					  strcat(msg_buf, rx_buf_command);
 80027ce:	463b      	mov	r3, r7
 80027d0:	492d      	ldr	r1, [pc, #180]	; (8002888 <main+0x1fc>)
 80027d2:	4618      	mov	r0, r3
 80027d4:	f00e fed2 	bl	801157c <strcat>
					  strcat(msg_buf, ": working...  \n\r");
 80027d8:	463b      	mov	r3, r7
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fd fcf8 	bl	80001d0 <strlen>
 80027e0:	4603      	mov	r3, r0
 80027e2:	461a      	mov	r2, r3
 80027e4:	463b      	mov	r3, r7
 80027e6:	4413      	add	r3, r2
 80027e8:	4a2b      	ldr	r2, [pc, #172]	; (8002898 <main+0x20c>)
 80027ea:	461d      	mov	r5, r3
 80027ec:	4614      	mov	r4, r2
 80027ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027f0:	6028      	str	r0, [r5, #0]
 80027f2:	6069      	str	r1, [r5, #4]
 80027f4:	60aa      	str	r2, [r5, #8]
 80027f6:	60eb      	str	r3, [r5, #12]
 80027f8:	7823      	ldrb	r3, [r4, #0]
 80027fa:	742b      	strb	r3, [r5, #16]
					  HAL_UART_Transmit_IT(&huart3, msg_buf, sizeof(msg_buf));
 80027fc:	463b      	mov	r3, r7
 80027fe:	221e      	movs	r2, #30
 8002800:	4619      	mov	r1, r3
 8002802:	481b      	ldr	r0, [pc, #108]	; (8002870 <main+0x1e4>)
 8002804:	f006 fc6f 	bl	80090e6 <HAL_UART_Transmit_IT>

					  print_flag = false;
 8002808:	4b22      	ldr	r3, [pc, #136]	; (8002894 <main+0x208>)
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]
 800280e:	e028      	b.n	8002862 <main+0x1d6>
				  }
			  }
			  else
			  {
				  memset(rx_buf_command, 0, sizeof(rx_buf_command));
 8002810:	220a      	movs	r2, #10
 8002812:	2100      	movs	r1, #0
 8002814:	481c      	ldr	r0, [pc, #112]	; (8002888 <main+0x1fc>)
 8002816:	f00e fd99 	bl	801134c <memset>
				  memset(msg_buf, 0, sizeof(msg_buf));
 800281a:	463b      	mov	r3, r7
 800281c:	221e      	movs	r2, #30
 800281e:	2100      	movs	r1, #0
 8002820:	4618      	mov	r0, r3
 8002822:	f00e fd93 	bl	801134c <memset>
				  strcat(msg_buf, "\n\r DONE \n\r");
 8002826:	463b      	mov	r3, r7
 8002828:	4618      	mov	r0, r3
 800282a:	f7fd fcd1 	bl	80001d0 <strlen>
 800282e:	4603      	mov	r3, r0
 8002830:	461a      	mov	r2, r3
 8002832:	463b      	mov	r3, r7
 8002834:	4413      	add	r3, r2
 8002836:	4919      	ldr	r1, [pc, #100]	; (800289c <main+0x210>)
 8002838:	461a      	mov	r2, r3
 800283a:	460b      	mov	r3, r1
 800283c:	cb03      	ldmia	r3!, {r0, r1}
 800283e:	6010      	str	r0, [r2, #0]
 8002840:	6051      	str	r1, [r2, #4]
 8002842:	8819      	ldrh	r1, [r3, #0]
 8002844:	789b      	ldrb	r3, [r3, #2]
 8002846:	8111      	strh	r1, [r2, #8]
 8002848:	7293      	strb	r3, [r2, #10]
				  HAL_UART_Transmit_IT(&huart3, msg_buf, sizeof(msg_buf));
 800284a:	463b      	mov	r3, r7
 800284c:	221e      	movs	r2, #30
 800284e:	4619      	mov	r1, r3
 8002850:	4807      	ldr	r0, [pc, #28]	; (8002870 <main+0x1e4>)
 8002852:	f006 fc48 	bl	80090e6 <HAL_UART_Transmit_IT>

				  flag_received_command = false;
 8002856:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <main+0x1f4>)
 8002858:	2200      	movs	r2, #0
 800285a:	701a      	strb	r2, [r3, #0]
				  flag_firt_command = 1;
 800285c:	4b09      	ldr	r3, [pc, #36]	; (8002884 <main+0x1f8>)
 800285e:	2201      	movs	r2, #1
 8002860:	601a      	str	r2, [r3, #0]
//	  HAL_Delay(1000);
	  //


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8002862:	f00e fa57 	bl	8010d14 <MX_USB_HOST_Process>
	  if(flag_received_command == true)
 8002866:	e786      	b.n	8002776 <main+0xea>
 8002868:	20000598 	.word	0x20000598
 800286c:	08011c70 	.word	0x08011c70
 8002870:	200018a8 	.word	0x200018a8
 8002874:	200018fc 	.word	0x200018fc
 8002878:	200015d0 	.word	0x200015d0
 800287c:	20001710 	.word	0x20001710
 8002880:	200015d1 	.word	0x200015d1
 8002884:	20000004 	.word	0x20000004
 8002888:	200015d4 	.word	0x200015d4
 800288c:	200018ec 	.word	0x200018ec
 8002890:	08011c8c 	.word	0x08011c8c
 8002894:	20000008 	.word	0x20000008
 8002898:	08011c94 	.word	0x08011c94
 800289c:	08011ca8 	.word	0x08011ca8

080028a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b094      	sub	sp, #80	; 0x50
 80028a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028a6:	f107 0320 	add.w	r3, r7, #32
 80028aa:	2230      	movs	r2, #48	; 0x30
 80028ac:	2100      	movs	r1, #0
 80028ae:	4618      	mov	r0, r3
 80028b0:	f00e fd4c 	bl	801134c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028b4:	f107 030c 	add.w	r3, r7, #12
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028c4:	2300      	movs	r3, #0
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	4b28      	ldr	r3, [pc, #160]	; (800296c <SystemClock_Config+0xcc>)
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	4a27      	ldr	r2, [pc, #156]	; (800296c <SystemClock_Config+0xcc>)
 80028ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d2:	6413      	str	r3, [r2, #64]	; 0x40
 80028d4:	4b25      	ldr	r3, [pc, #148]	; (800296c <SystemClock_Config+0xcc>)
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028e0:	2300      	movs	r3, #0
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	4b22      	ldr	r3, [pc, #136]	; (8002970 <SystemClock_Config+0xd0>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a21      	ldr	r2, [pc, #132]	; (8002970 <SystemClock_Config+0xd0>)
 80028ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	4b1f      	ldr	r3, [pc, #124]	; (8002970 <SystemClock_Config+0xd0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028fc:	2301      	movs	r3, #1
 80028fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002900:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002906:	2302      	movs	r3, #2
 8002908:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800290a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800290e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002910:	2308      	movs	r3, #8
 8002912:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002914:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002918:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800291a:	2302      	movs	r3, #2
 800291c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800291e:	2307      	movs	r3, #7
 8002920:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002922:	f107 0320 	add.w	r3, r7, #32
 8002926:	4618      	mov	r0, r3
 8002928:	f004 fa2a 	bl	8006d80 <HAL_RCC_OscConfig>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002932:	f000 fd64 	bl	80033fe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002936:	230f      	movs	r3, #15
 8002938:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800293a:	2302      	movs	r3, #2
 800293c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002942:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002946:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002948:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800294c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800294e:	f107 030c 	add.w	r3, r7, #12
 8002952:	2105      	movs	r1, #5
 8002954:	4618      	mov	r0, r3
 8002956:	f004 fc8b 	bl	8007270 <HAL_RCC_ClockConfig>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002960:	f000 fd4d 	bl	80033fe <Error_Handler>
  }
}
 8002964:	bf00      	nop
 8002966:	3750      	adds	r7, #80	; 0x50
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40023800 	.word	0x40023800
 8002970:	40007000 	.word	0x40007000

08002974 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002978:	4b17      	ldr	r3, [pc, #92]	; (80029d8 <MX_SPI1_Init+0x64>)
 800297a:	4a18      	ldr	r2, [pc, #96]	; (80029dc <MX_SPI1_Init+0x68>)
 800297c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800297e:	4b16      	ldr	r3, [pc, #88]	; (80029d8 <MX_SPI1_Init+0x64>)
 8002980:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002984:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002986:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <MX_SPI1_Init+0x64>)
 8002988:	2200      	movs	r2, #0
 800298a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800298c:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <MX_SPI1_Init+0x64>)
 800298e:	2200      	movs	r2, #0
 8002990:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002992:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <MX_SPI1_Init+0x64>)
 8002994:	2200      	movs	r2, #0
 8002996:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002998:	4b0f      	ldr	r3, [pc, #60]	; (80029d8 <MX_SPI1_Init+0x64>)
 800299a:	2200      	movs	r2, #0
 800299c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800299e:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <MX_SPI1_Init+0x64>)
 80029a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80029a6:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <MX_SPI1_Init+0x64>)
 80029a8:	2218      	movs	r2, #24
 80029aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029ac:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <MX_SPI1_Init+0x64>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029b2:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <MX_SPI1_Init+0x64>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029b8:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <MX_SPI1_Init+0x64>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80029be:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <MX_SPI1_Init+0x64>)
 80029c0:	220a      	movs	r2, #10
 80029c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029c4:	4804      	ldr	r0, [pc, #16]	; (80029d8 <MX_SPI1_Init+0x64>)
 80029c6:	f004 fe73 	bl	80076b0 <HAL_SPI_Init>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80029d0:	f000 fd15 	bl	80033fe <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80029d4:	bf00      	nop
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	200015e0 	.word	0x200015e0
 80029dc:	40013000 	.word	0x40013000

080029e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08e      	sub	sp, #56	; 0x38
 80029e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	605a      	str	r2, [r3, #4]
 80029f0:	609a      	str	r2, [r3, #8]
 80029f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029f4:	f107 0320 	add.w	r3, r7, #32
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029fe:	1d3b      	adds	r3, r7, #4
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	611a      	str	r2, [r3, #16]
 8002a0c:	615a      	str	r2, [r3, #20]
 8002a0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a10:	4b3d      	ldr	r3, [pc, #244]	; (8002b08 <MX_TIM2_Init+0x128>)
 8002a12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2100-1;
 8002a18:	4b3b      	ldr	r3, [pc, #236]	; (8002b08 <MX_TIM2_Init+0x128>)
 8002a1a:	f640 0233 	movw	r2, #2099	; 0x833
 8002a1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a20:	4b39      	ldr	r3, [pc, #228]	; (8002b08 <MX_TIM2_Init+0x128>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250-1;
 8002a26:	4b38      	ldr	r3, [pc, #224]	; (8002b08 <MX_TIM2_Init+0x128>)
 8002a28:	22f9      	movs	r2, #249	; 0xf9
 8002a2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a2c:	4b36      	ldr	r3, [pc, #216]	; (8002b08 <MX_TIM2_Init+0x128>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a32:	4b35      	ldr	r3, [pc, #212]	; (8002b08 <MX_TIM2_Init+0x128>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a38:	4833      	ldr	r0, [pc, #204]	; (8002b08 <MX_TIM2_Init+0x128>)
 8002a3a:	f005 f92f 	bl	8007c9c <HAL_TIM_Base_Init>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002a44:	f000 fcdb 	bl	80033fe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a52:	4619      	mov	r1, r3
 8002a54:	482c      	ldr	r0, [pc, #176]	; (8002b08 <MX_TIM2_Init+0x128>)
 8002a56:	f005 fd33 	bl	80084c0 <HAL_TIM_ConfigClockSource>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002a60:	f000 fccd 	bl	80033fe <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a64:	4828      	ldr	r0, [pc, #160]	; (8002b08 <MX_TIM2_Init+0x128>)
 8002a66:	f005 f9d9 	bl	8007e1c <HAL_TIM_PWM_Init>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002a70:	f000 fcc5 	bl	80033fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a74:	2300      	movs	r3, #0
 8002a76:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a7c:	f107 0320 	add.w	r3, r7, #32
 8002a80:	4619      	mov	r1, r3
 8002a82:	4821      	ldr	r0, [pc, #132]	; (8002b08 <MX_TIM2_Init+0x128>)
 8002a84:	f006 f96e 	bl	8008d64 <HAL_TIMEx_MasterConfigSynchronization>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002a8e:	f000 fcb6 	bl	80033fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a92:	2360      	movs	r3, #96	; 0x60
 8002a94:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002aa2:	1d3b      	adds	r3, r7, #4
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4817      	ldr	r0, [pc, #92]	; (8002b08 <MX_TIM2_Init+0x128>)
 8002aaa:	f005 fc47 	bl	800833c <HAL_TIM_PWM_ConfigChannel>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002ab4:	f000 fca3 	bl	80033fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ab8:	1d3b      	adds	r3, r7, #4
 8002aba:	2204      	movs	r2, #4
 8002abc:	4619      	mov	r1, r3
 8002abe:	4812      	ldr	r0, [pc, #72]	; (8002b08 <MX_TIM2_Init+0x128>)
 8002ac0:	f005 fc3c 	bl	800833c <HAL_TIM_PWM_ConfigChannel>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002aca:	f000 fc98 	bl	80033fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ace:	1d3b      	adds	r3, r7, #4
 8002ad0:	2208      	movs	r2, #8
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	480c      	ldr	r0, [pc, #48]	; (8002b08 <MX_TIM2_Init+0x128>)
 8002ad6:	f005 fc31 	bl	800833c <HAL_TIM_PWM_ConfigChannel>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002ae0:	f000 fc8d 	bl	80033fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ae4:	1d3b      	adds	r3, r7, #4
 8002ae6:	220c      	movs	r2, #12
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4807      	ldr	r0, [pc, #28]	; (8002b08 <MX_TIM2_Init+0x128>)
 8002aec:	f005 fc26 	bl	800833c <HAL_TIM_PWM_ConfigChannel>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8002af6:	f000 fc82 	bl	80033fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002afa:	4803      	ldr	r0, [pc, #12]	; (8002b08 <MX_TIM2_Init+0x128>)
 8002afc:	f000 fe2a 	bl	8003754 <HAL_TIM_MspPostInit>

}
 8002b00:	bf00      	nop
 8002b02:	3738      	adds	r7, #56	; 0x38
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	20001638 	.word	0x20001638

08002b0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08e      	sub	sp, #56	; 0x38
 8002b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	605a      	str	r2, [r3, #4]
 8002b1c:	609a      	str	r2, [r3, #8]
 8002b1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b20:	f107 0320 	add.w	r3, r7, #32
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b2a:	1d3b      	adds	r3, r7, #4
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	611a      	str	r2, [r3, #16]
 8002b38:	615a      	str	r2, [r3, #20]
 8002b3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b3c:	4b3d      	ldr	r3, [pc, #244]	; (8002c34 <MX_TIM3_Init+0x128>)
 8002b3e:	4a3e      	ldr	r2, [pc, #248]	; (8002c38 <MX_TIM3_Init+0x12c>)
 8002b40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2100-1;
 8002b42:	4b3c      	ldr	r3, [pc, #240]	; (8002c34 <MX_TIM3_Init+0x128>)
 8002b44:	f640 0233 	movw	r2, #2099	; 0x833
 8002b48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b4a:	4b3a      	ldr	r3, [pc, #232]	; (8002c34 <MX_TIM3_Init+0x128>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 250-1;
 8002b50:	4b38      	ldr	r3, [pc, #224]	; (8002c34 <MX_TIM3_Init+0x128>)
 8002b52:	22f9      	movs	r2, #249	; 0xf9
 8002b54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b56:	4b37      	ldr	r3, [pc, #220]	; (8002c34 <MX_TIM3_Init+0x128>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b5c:	4b35      	ldr	r3, [pc, #212]	; (8002c34 <MX_TIM3_Init+0x128>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b62:	4834      	ldr	r0, [pc, #208]	; (8002c34 <MX_TIM3_Init+0x128>)
 8002b64:	f005 f89a 	bl	8007c9c <HAL_TIM_Base_Init>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002b6e:	f000 fc46 	bl	80033fe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	482d      	ldr	r0, [pc, #180]	; (8002c34 <MX_TIM3_Init+0x128>)
 8002b80:	f005 fc9e 	bl	80084c0 <HAL_TIM_ConfigClockSource>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002b8a:	f000 fc38 	bl	80033fe <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002b8e:	4829      	ldr	r0, [pc, #164]	; (8002c34 <MX_TIM3_Init+0x128>)
 8002b90:	f005 f944 	bl	8007e1c <HAL_TIM_PWM_Init>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002b9a:	f000 fc30 	bl	80033fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ba6:	f107 0320 	add.w	r3, r7, #32
 8002baa:	4619      	mov	r1, r3
 8002bac:	4821      	ldr	r0, [pc, #132]	; (8002c34 <MX_TIM3_Init+0x128>)
 8002bae:	f006 f8d9 	bl	8008d64 <HAL_TIMEx_MasterConfigSynchronization>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002bb8:	f000 fc21 	bl	80033fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bbc:	2360      	movs	r3, #96	; 0x60
 8002bbe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bcc:	1d3b      	adds	r3, r7, #4
 8002bce:	2200      	movs	r2, #0
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4818      	ldr	r0, [pc, #96]	; (8002c34 <MX_TIM3_Init+0x128>)
 8002bd4:	f005 fbb2 	bl	800833c <HAL_TIM_PWM_ConfigChannel>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002bde:	f000 fc0e 	bl	80033fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002be2:	1d3b      	adds	r3, r7, #4
 8002be4:	2204      	movs	r2, #4
 8002be6:	4619      	mov	r1, r3
 8002be8:	4812      	ldr	r0, [pc, #72]	; (8002c34 <MX_TIM3_Init+0x128>)
 8002bea:	f005 fba7 	bl	800833c <HAL_TIM_PWM_ConfigChannel>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002bf4:	f000 fc03 	bl	80033fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002bf8:	1d3b      	adds	r3, r7, #4
 8002bfa:	2208      	movs	r2, #8
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	480d      	ldr	r0, [pc, #52]	; (8002c34 <MX_TIM3_Init+0x128>)
 8002c00:	f005 fb9c 	bl	800833c <HAL_TIM_PWM_ConfigChannel>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002c0a:	f000 fbf8 	bl	80033fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c0e:	1d3b      	adds	r3, r7, #4
 8002c10:	220c      	movs	r2, #12
 8002c12:	4619      	mov	r1, r3
 8002c14:	4807      	ldr	r0, [pc, #28]	; (8002c34 <MX_TIM3_Init+0x128>)
 8002c16:	f005 fb91 	bl	800833c <HAL_TIM_PWM_ConfigChannel>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002c20:	f000 fbed 	bl	80033fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002c24:	4803      	ldr	r0, [pc, #12]	; (8002c34 <MX_TIM3_Init+0x128>)
 8002c26:	f000 fd95 	bl	8003754 <HAL_TIM_MspPostInit>

}
 8002c2a:	bf00      	nop
 8002c2c:	3738      	adds	r7, #56	; 0x38
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20001680 	.word	0x20001680
 8002c38:	40000400 	.word	0x40000400

08002c3c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08e      	sub	sp, #56	; 0x38
 8002c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	605a      	str	r2, [r3, #4]
 8002c4c:	609a      	str	r2, [r3, #8]
 8002c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c50:	f107 0320 	add.w	r3, r7, #32
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]
 8002c68:	615a      	str	r2, [r3, #20]
 8002c6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c6c:	4b32      	ldr	r3, [pc, #200]	; (8002d38 <MX_TIM4_Init+0xfc>)
 8002c6e:	4a33      	ldr	r2, [pc, #204]	; (8002d3c <MX_TIM4_Init+0x100>)
 8002c70:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2100-1;
 8002c72:	4b31      	ldr	r3, [pc, #196]	; (8002d38 <MX_TIM4_Init+0xfc>)
 8002c74:	f640 0233 	movw	r2, #2099	; 0x833
 8002c78:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c7a:	4b2f      	ldr	r3, [pc, #188]	; (8002d38 <MX_TIM4_Init+0xfc>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 250-1;
 8002c80:	4b2d      	ldr	r3, [pc, #180]	; (8002d38 <MX_TIM4_Init+0xfc>)
 8002c82:	22f9      	movs	r2, #249	; 0xf9
 8002c84:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c86:	4b2c      	ldr	r3, [pc, #176]	; (8002d38 <MX_TIM4_Init+0xfc>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c8c:	4b2a      	ldr	r3, [pc, #168]	; (8002d38 <MX_TIM4_Init+0xfc>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002c92:	4829      	ldr	r0, [pc, #164]	; (8002d38 <MX_TIM4_Init+0xfc>)
 8002c94:	f005 f802 	bl	8007c9c <HAL_TIM_Base_Init>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002c9e:	f000 fbae 	bl	80033fe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ca8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cac:	4619      	mov	r1, r3
 8002cae:	4822      	ldr	r0, [pc, #136]	; (8002d38 <MX_TIM4_Init+0xfc>)
 8002cb0:	f005 fc06 	bl	80084c0 <HAL_TIM_ConfigClockSource>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002cba:	f000 fba0 	bl	80033fe <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002cbe:	481e      	ldr	r0, [pc, #120]	; (8002d38 <MX_TIM4_Init+0xfc>)
 8002cc0:	f005 f8ac 	bl	8007e1c <HAL_TIM_PWM_Init>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002cca:	f000 fb98 	bl	80033fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002cd6:	f107 0320 	add.w	r3, r7, #32
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4816      	ldr	r0, [pc, #88]	; (8002d38 <MX_TIM4_Init+0xfc>)
 8002cde:	f006 f841 	bl	8008d64 <HAL_TIMEx_MasterConfigSynchronization>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002ce8:	f000 fb89 	bl	80033fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cec:	2360      	movs	r3, #96	; 0x60
 8002cee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002cfc:	1d3b      	adds	r3, r7, #4
 8002cfe:	2204      	movs	r2, #4
 8002d00:	4619      	mov	r1, r3
 8002d02:	480d      	ldr	r0, [pc, #52]	; (8002d38 <MX_TIM4_Init+0xfc>)
 8002d04:	f005 fb1a 	bl	800833c <HAL_TIM_PWM_ConfigChannel>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002d0e:	f000 fb76 	bl	80033fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d12:	1d3b      	adds	r3, r7, #4
 8002d14:	2208      	movs	r2, #8
 8002d16:	4619      	mov	r1, r3
 8002d18:	4807      	ldr	r0, [pc, #28]	; (8002d38 <MX_TIM4_Init+0xfc>)
 8002d1a:	f005 fb0f 	bl	800833c <HAL_TIM_PWM_ConfigChannel>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8002d24:	f000 fb6b 	bl	80033fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002d28:	4803      	ldr	r0, [pc, #12]	; (8002d38 <MX_TIM4_Init+0xfc>)
 8002d2a:	f000 fd13 	bl	8003754 <HAL_TIM_MspPostInit>

}
 8002d2e:	bf00      	nop
 8002d30:	3738      	adds	r7, #56	; 0x38
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	200016c8 	.word	0x200016c8
 8002d3c:	40000800 	.word	0x40000800

08002d40 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d46:	f107 0308 	add.w	r3, r7, #8
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	605a      	str	r2, [r3, #4]
 8002d50:	609a      	str	r2, [r3, #8]
 8002d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d54:	463b      	mov	r3, r7
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002d5c:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <MX_TIM5_Init+0x94>)
 8002d5e:	4a1e      	ldr	r2, [pc, #120]	; (8002dd8 <MX_TIM5_Init+0x98>)
 8002d60:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8400-1;
 8002d62:	4b1c      	ldr	r3, [pc, #112]	; (8002dd4 <MX_TIM5_Init+0x94>)
 8002d64:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002d68:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d6a:	4b1a      	ldr	r3, [pc, #104]	; (8002dd4 <MX_TIM5_Init+0x94>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000;
 8002d70:	4b18      	ldr	r3, [pc, #96]	; (8002dd4 <MX_TIM5_Init+0x94>)
 8002d72:	f242 7210 	movw	r2, #10000	; 0x2710
 8002d76:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d78:	4b16      	ldr	r3, [pc, #88]	; (8002dd4 <MX_TIM5_Init+0x94>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d7e:	4b15      	ldr	r3, [pc, #84]	; (8002dd4 <MX_TIM5_Init+0x94>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002d84:	4813      	ldr	r0, [pc, #76]	; (8002dd4 <MX_TIM5_Init+0x94>)
 8002d86:	f004 ff89 	bl	8007c9c <HAL_TIM_Base_Init>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002d90:	f000 fb35 	bl	80033fe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002d9a:	f107 0308 	add.w	r3, r7, #8
 8002d9e:	4619      	mov	r1, r3
 8002da0:	480c      	ldr	r0, [pc, #48]	; (8002dd4 <MX_TIM5_Init+0x94>)
 8002da2:	f005 fb8d 	bl	80084c0 <HAL_TIM_ConfigClockSource>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002dac:	f000 fb27 	bl	80033fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002db0:	2300      	movs	r3, #0
 8002db2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002db4:	2300      	movs	r3, #0
 8002db6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002db8:	463b      	mov	r3, r7
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4805      	ldr	r0, [pc, #20]	; (8002dd4 <MX_TIM5_Init+0x94>)
 8002dbe:	f005 ffd1 	bl	8008d64 <HAL_TIMEx_MasterConfigSynchronization>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002dc8:	f000 fb19 	bl	80033fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002dcc:	bf00      	nop
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20001710 	.word	0x20001710
 8002dd8:	40000c00 	.word	0x40000c00

08002ddc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b092      	sub	sp, #72	; 0x48
 8002de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002de2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	611a      	str	r2, [r3, #16]
 8002dfc:	615a      	str	r2, [r3, #20]
 8002dfe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e00:	1d3b      	adds	r3, r7, #4
 8002e02:	2220      	movs	r2, #32
 8002e04:	2100      	movs	r1, #0
 8002e06:	4618      	mov	r0, r3
 8002e08:	f00e faa0 	bl	801134c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002e0c:	4b39      	ldr	r3, [pc, #228]	; (8002ef4 <MX_TIM8_Init+0x118>)
 8002e0e:	4a3a      	ldr	r2, [pc, #232]	; (8002ef8 <MX_TIM8_Init+0x11c>)
 8002e10:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002e12:	4b38      	ldr	r3, [pc, #224]	; (8002ef4 <MX_TIM8_Init+0x118>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e18:	4b36      	ldr	r3, [pc, #216]	; (8002ef4 <MX_TIM8_Init+0x118>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002e1e:	4b35      	ldr	r3, [pc, #212]	; (8002ef4 <MX_TIM8_Init+0x118>)
 8002e20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e24:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e26:	4b33      	ldr	r3, [pc, #204]	; (8002ef4 <MX_TIM8_Init+0x118>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002e2c:	4b31      	ldr	r3, [pc, #196]	; (8002ef4 <MX_TIM8_Init+0x118>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e32:	4b30      	ldr	r3, [pc, #192]	; (8002ef4 <MX_TIM8_Init+0x118>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002e38:	482e      	ldr	r0, [pc, #184]	; (8002ef4 <MX_TIM8_Init+0x118>)
 8002e3a:	f004 ffef 	bl	8007e1c <HAL_TIM_PWM_Init>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002e44:	f000 fadb 	bl	80033fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002e50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e54:	4619      	mov	r1, r3
 8002e56:	4827      	ldr	r0, [pc, #156]	; (8002ef4 <MX_TIM8_Init+0x118>)
 8002e58:	f005 ff84 	bl	8008d64 <HAL_TIMEx_MasterConfigSynchronization>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002e62:	f000 facc 	bl	80033fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e66:	2360      	movs	r3, #96	; 0x60
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e72:	2300      	movs	r3, #0
 8002e74:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e76:	2300      	movs	r3, #0
 8002e78:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e86:	2208      	movs	r2, #8
 8002e88:	4619      	mov	r1, r3
 8002e8a:	481a      	ldr	r0, [pc, #104]	; (8002ef4 <MX_TIM8_Init+0x118>)
 8002e8c:	f005 fa56 	bl	800833c <HAL_TIM_PWM_ConfigChannel>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002e96:	f000 fab2 	bl	80033fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e9e:	220c      	movs	r2, #12
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4814      	ldr	r0, [pc, #80]	; (8002ef4 <MX_TIM8_Init+0x118>)
 8002ea4:	f005 fa4a 	bl	800833c <HAL_TIM_PWM_ConfigChannel>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8002eae:	f000 faa6 	bl	80033fe <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ec6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002eca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002ed0:	1d3b      	adds	r3, r7, #4
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4807      	ldr	r0, [pc, #28]	; (8002ef4 <MX_TIM8_Init+0x118>)
 8002ed6:	f005 ffc1 	bl	8008e5c <HAL_TIMEx_ConfigBreakDeadTime>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8002ee0:	f000 fa8d 	bl	80033fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002ee4:	4803      	ldr	r0, [pc, #12]	; (8002ef4 <MX_TIM8_Init+0x118>)
 8002ee6:	f000 fc35 	bl	8003754 <HAL_TIM_MspPostInit>

}
 8002eea:	bf00      	nop
 8002eec:	3748      	adds	r7, #72	; 0x48
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	20001758 	.word	0x20001758
 8002ef8:	40010400 	.word	0x40010400

08002efc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002f00:	4b0e      	ldr	r3, [pc, #56]	; (8002f3c <MX_TIM13_Init+0x40>)
 8002f02:	4a0f      	ldr	r2, [pc, #60]	; (8002f40 <MX_TIM13_Init+0x44>)
 8002f04:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8400-1;
 8002f06:	4b0d      	ldr	r3, [pc, #52]	; (8002f3c <MX_TIM13_Init+0x40>)
 8002f08:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002f0c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <MX_TIM13_Init+0x40>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 50000;
 8002f14:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <MX_TIM13_Init+0x40>)
 8002f16:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002f1a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f1c:	4b07      	ldr	r3, [pc, #28]	; (8002f3c <MX_TIM13_Init+0x40>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f22:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <MX_TIM13_Init+0x40>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002f28:	4804      	ldr	r0, [pc, #16]	; (8002f3c <MX_TIM13_Init+0x40>)
 8002f2a:	f004 feb7 	bl	8007c9c <HAL_TIM_Base_Init>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8002f34:	f000 fa63 	bl	80033fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002f38:	bf00      	nop
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	200017a0 	.word	0x200017a0
 8002f40:	40001c00 	.word	0x40001c00

08002f44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f48:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <MX_USART3_UART_Init+0x4c>)
 8002f4a:	4a12      	ldr	r2, [pc, #72]	; (8002f94 <MX_USART3_UART_Init+0x50>)
 8002f4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002f4e:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <MX_USART3_UART_Init+0x4c>)
 8002f50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f56:	4b0e      	ldr	r3, [pc, #56]	; (8002f90 <MX_USART3_UART_Init+0x4c>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f5c:	4b0c      	ldr	r3, [pc, #48]	; (8002f90 <MX_USART3_UART_Init+0x4c>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f62:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <MX_USART3_UART_Init+0x4c>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f68:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <MX_USART3_UART_Init+0x4c>)
 8002f6a:	220c      	movs	r2, #12
 8002f6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f6e:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <MX_USART3_UART_Init+0x4c>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <MX_USART3_UART_Init+0x4c>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f7a:	4805      	ldr	r0, [pc, #20]	; (8002f90 <MX_USART3_UART_Init+0x4c>)
 8002f7c:	f005 ffd4 	bl	8008f28 <HAL_UART_Init>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002f86:	f000 fa3a 	bl	80033fe <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f8a:	bf00      	nop
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	200018a8 	.word	0x200018a8
 8002f94:	40004800 	.word	0x40004800

08002f98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	607b      	str	r3, [r7, #4]
 8002fa2:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <MX_DMA_Init+0x4c>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	4a0f      	ldr	r2, [pc, #60]	; (8002fe4 <MX_DMA_Init+0x4c>)
 8002fa8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fac:	6313      	str	r3, [r2, #48]	; 0x30
 8002fae:	4b0d      	ldr	r3, [pc, #52]	; (8002fe4 <MX_DMA_Init+0x4c>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb6:	607b      	str	r3, [r7, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	203c      	movs	r0, #60	; 0x3c
 8002fc0:	f001 fccb 	bl	800495a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002fc4:	203c      	movs	r0, #60	; 0x3c
 8002fc6:	f001 fce4 	bl	8004992 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2100      	movs	r1, #0
 8002fce:	2046      	movs	r0, #70	; 0x46
 8002fd0:	f001 fcc3 	bl	800495a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002fd4:	2046      	movs	r0, #70	; 0x46
 8002fd6:	f001 fcdc 	bl	8004992 <HAL_NVIC_EnableIRQ>

}
 8002fda:	bf00      	nop
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40023800 	.word	0x40023800

08002fe8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08c      	sub	sp, #48	; 0x30
 8002fec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fee:	f107 031c 	add.w	r3, r7, #28
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	605a      	str	r2, [r3, #4]
 8002ff8:	609a      	str	r2, [r3, #8]
 8002ffa:	60da      	str	r2, [r3, #12]
 8002ffc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	61bb      	str	r3, [r7, #24]
 8003002:	4ba3      	ldr	r3, [pc, #652]	; (8003290 <MX_GPIO_Init+0x2a8>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	4aa2      	ldr	r2, [pc, #648]	; (8003290 <MX_GPIO_Init+0x2a8>)
 8003008:	f043 0310 	orr.w	r3, r3, #16
 800300c:	6313      	str	r3, [r2, #48]	; 0x30
 800300e:	4ba0      	ldr	r3, [pc, #640]	; (8003290 <MX_GPIO_Init+0x2a8>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	61bb      	str	r3, [r7, #24]
 8003018:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	4b9c      	ldr	r3, [pc, #624]	; (8003290 <MX_GPIO_Init+0x2a8>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	4a9b      	ldr	r2, [pc, #620]	; (8003290 <MX_GPIO_Init+0x2a8>)
 8003024:	f043 0304 	orr.w	r3, r3, #4
 8003028:	6313      	str	r3, [r2, #48]	; 0x30
 800302a:	4b99      	ldr	r3, [pc, #612]	; (8003290 <MX_GPIO_Init+0x2a8>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	4b95      	ldr	r3, [pc, #596]	; (8003290 <MX_GPIO_Init+0x2a8>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	4a94      	ldr	r2, [pc, #592]	; (8003290 <MX_GPIO_Init+0x2a8>)
 8003040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003044:	6313      	str	r3, [r2, #48]	; 0x30
 8003046:	4b92      	ldr	r3, [pc, #584]	; (8003290 <MX_GPIO_Init+0x2a8>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	4b8e      	ldr	r3, [pc, #568]	; (8003290 <MX_GPIO_Init+0x2a8>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	4a8d      	ldr	r2, [pc, #564]	; (8003290 <MX_GPIO_Init+0x2a8>)
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	6313      	str	r3, [r2, #48]	; 0x30
 8003062:	4b8b      	ldr	r3, [pc, #556]	; (8003290 <MX_GPIO_Init+0x2a8>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	4b87      	ldr	r3, [pc, #540]	; (8003290 <MX_GPIO_Init+0x2a8>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	4a86      	ldr	r2, [pc, #536]	; (8003290 <MX_GPIO_Init+0x2a8>)
 8003078:	f043 0302 	orr.w	r3, r3, #2
 800307c:	6313      	str	r3, [r2, #48]	; 0x30
 800307e:	4b84      	ldr	r3, [pc, #528]	; (8003290 <MX_GPIO_Init+0x2a8>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	60bb      	str	r3, [r7, #8]
 8003088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	607b      	str	r3, [r7, #4]
 800308e:	4b80      	ldr	r3, [pc, #512]	; (8003290 <MX_GPIO_Init+0x2a8>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	4a7f      	ldr	r2, [pc, #508]	; (8003290 <MX_GPIO_Init+0x2a8>)
 8003094:	f043 0308 	orr.w	r3, r3, #8
 8003098:	6313      	str	r3, [r2, #48]	; 0x30
 800309a:	4b7d      	ldr	r3, [pc, #500]	; (8003290 <MX_GPIO_Init+0x2a8>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	607b      	str	r3, [r7, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TEST_OUTPUT_1_Pin|TEST_OUTPUT_2_Pin, GPIO_PIN_RESET);
 80030a6:	2200      	movs	r2, #0
 80030a8:	210c      	movs	r1, #12
 80030aa:	487a      	ldr	r0, [pc, #488]	; (8003294 <MX_GPIO_Init+0x2ac>)
 80030ac:	f002 fa2a 	bl	8005504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80030b0:	2201      	movs	r2, #1
 80030b2:	2101      	movs	r1, #1
 80030b4:	4878      	ldr	r0, [pc, #480]	; (8003298 <MX_GPIO_Init+0x2b0>)
 80030b6:	f002 fa25 	bl	8005504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_RESET);
 80030ba:	2200      	movs	r2, #0
 80030bc:	2108      	movs	r1, #8
 80030be:	4877      	ldr	r0, [pc, #476]	; (800329c <MX_GPIO_Init+0x2b4>)
 80030c0:	f002 fa20 	bl	8005504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TEST_OUT_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80030c4:	2200      	movs	r2, #0
 80030c6:	f64f 0110 	movw	r1, #63504	; 0xf810
 80030ca:	4875      	ldr	r0, [pc, #468]	; (80032a0 <MX_GPIO_Init+0x2b8>)
 80030cc:	f002 fa1a 	bl	8005504 <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : TEST_OUTPUT_1_Pin */
  GPIO_InitStruct.Pin = TEST_OUTPUT_1_Pin;
 80030d0:	2304      	movs	r3, #4
 80030d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030d4:	2301      	movs	r3, #1
 80030d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80030d8:	2302      	movs	r3, #2
 80030da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030dc:	2303      	movs	r3, #3
 80030de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUTPUT_1_GPIO_Port, &GPIO_InitStruct);
 80030e0:	f107 031c 	add.w	r3, r7, #28
 80030e4:	4619      	mov	r1, r3
 80030e6:	486b      	ldr	r0, [pc, #428]	; (8003294 <MX_GPIO_Init+0x2ac>)
 80030e8:	f002 f870 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUTPUT_2_Pin */
  GPIO_InitStruct.Pin = TEST_OUTPUT_2_Pin;
 80030ec:	2308      	movs	r3, #8
 80030ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030f0:	2301      	movs	r3, #1
 80030f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f8:	2300      	movs	r3, #0
 80030fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUTPUT_2_GPIO_Port, &GPIO_InitStruct);
 80030fc:	f107 031c 	add.w	r3, r7, #28
 8003100:	4619      	mov	r1, r3
 8003102:	4864      	ldr	r0, [pc, #400]	; (8003294 <MX_GPIO_Init+0x2ac>)
 8003104:	f002 f862 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003108:	2301      	movs	r3, #1
 800310a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800310c:	2301      	movs	r3, #1
 800310e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003110:	2300      	movs	r3, #0
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003114:	2300      	movs	r3, #0
 8003116:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003118:	f107 031c 	add.w	r3, r7, #28
 800311c:	4619      	mov	r1, r3
 800311e:	485e      	ldr	r0, [pc, #376]	; (8003298 <MX_GPIO_Init+0x2b0>)
 8003120:	f002 f854 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003124:	2308      	movs	r3, #8
 8003126:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003128:	2302      	movs	r3, #2
 800312a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312c:	2300      	movs	r3, #0
 800312e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003130:	2300      	movs	r3, #0
 8003132:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003134:	2305      	movs	r3, #5
 8003136:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003138:	f107 031c 	add.w	r3, r7, #28
 800313c:	4619      	mov	r1, r3
 800313e:	4856      	ldr	r0, [pc, #344]	; (8003298 <MX_GPIO_Init+0x2b0>)
 8003140:	f002 f844 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003144:	2301      	movs	r3, #1
 8003146:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003148:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800314c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314e:	2300      	movs	r3, #0
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003152:	f107 031c 	add.w	r3, r7, #28
 8003156:	4619      	mov	r1, r3
 8003158:	4850      	ldr	r0, [pc, #320]	; (800329c <MX_GPIO_Init+0x2b4>)
 800315a:	f002 f837 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_SD_Pin */
  GPIO_InitStruct.Pin = CS_SD_Pin;
 800315e:	2308      	movs	r3, #8
 8003160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003162:	2301      	movs	r3, #1
 8003164:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003166:	2300      	movs	r3, #0
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800316a:	2302      	movs	r3, #2
 800316c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_SD_GPIO_Port, &GPIO_InitStruct);
 800316e:	f107 031c 	add.w	r3, r7, #28
 8003172:	4619      	mov	r1, r3
 8003174:	4849      	ldr	r0, [pc, #292]	; (800329c <MX_GPIO_Init+0x2b4>)
 8003176:	f002 f829 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800317a:	2310      	movs	r3, #16
 800317c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317e:	2302      	movs	r3, #2
 8003180:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003182:	2300      	movs	r3, #0
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003186:	2300      	movs	r3, #0
 8003188:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800318a:	2306      	movs	r3, #6
 800318c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800318e:	f107 031c 	add.w	r3, r7, #28
 8003192:	4619      	mov	r1, r3
 8003194:	4841      	ldr	r0, [pc, #260]	; (800329c <MX_GPIO_Init+0x2b4>)
 8003196:	f002 f819 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800319a:	2304      	movs	r3, #4
 800319c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800319e:	2300      	movs	r3, #0
 80031a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a6:	f107 031c 	add.w	r3, r7, #28
 80031aa:	4619      	mov	r1, r3
 80031ac:	483d      	ldr	r0, [pc, #244]	; (80032a4 <MX_GPIO_Init+0x2bc>)
 80031ae:	f002 f80d 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80031b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b8:	2302      	movs	r3, #2
 80031ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031bc:	2300      	movs	r3, #0
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c0:	2300      	movs	r3, #0
 80031c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031c4:	2305      	movs	r3, #5
 80031c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80031c8:	f107 031c 	add.w	r3, r7, #28
 80031cc:	4619      	mov	r1, r3
 80031ce:	4835      	ldr	r0, [pc, #212]	; (80032a4 <MX_GPIO_Init+0x2bc>)
 80031d0:	f001 fffc 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUT_Pin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 80031d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031da:	2301      	movs	r3, #1
 80031dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031de:	2301      	movs	r3, #1
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e2:	2303      	movs	r3, #3
 80031e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 80031e6:	f107 031c 	add.w	r3, r7, #28
 80031ea:	4619      	mov	r1, r3
 80031ec:	482c      	ldr	r0, [pc, #176]	; (80032a0 <MX_GPIO_Init+0x2b8>)
 80031ee:	f001 ffed 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80031f2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80031f6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031f8:	2301      	movs	r3, #1
 80031fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003200:	2300      	movs	r3, #0
 8003202:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003204:	f107 031c 	add.w	r3, r7, #28
 8003208:	4619      	mov	r1, r3
 800320a:	4825      	ldr	r0, [pc, #148]	; (80032a0 <MX_GPIO_Init+0x2b8>)
 800320c:	f001 ffde 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003210:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003216:	2302      	movs	r3, #2
 8003218:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321a:	2300      	movs	r3, #0
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321e:	2300      	movs	r3, #0
 8003220:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003222:	2306      	movs	r3, #6
 8003224:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003226:	f107 031c 	add.w	r3, r7, #28
 800322a:	4619      	mov	r1, r3
 800322c:	481a      	ldr	r0, [pc, #104]	; (8003298 <MX_GPIO_Init+0x2b0>)
 800322e:	f001 ffcd 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003232:	2320      	movs	r3, #32
 8003234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003236:	2300      	movs	r3, #0
 8003238:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323a:	2300      	movs	r3, #0
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800323e:	f107 031c 	add.w	r3, r7, #28
 8003242:	4619      	mov	r1, r3
 8003244:	4816      	ldr	r0, [pc, #88]	; (80032a0 <MX_GPIO_Init+0x2b8>)
 8003246:	f001 ffc1 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800324a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800324e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003250:	2312      	movs	r3, #18
 8003252:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003254:	2301      	movs	r3, #1
 8003256:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003258:	2300      	movs	r3, #0
 800325a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800325c:	2304      	movs	r3, #4
 800325e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003260:	f107 031c 	add.w	r3, r7, #28
 8003264:	4619      	mov	r1, r3
 8003266:	480f      	ldr	r0, [pc, #60]	; (80032a4 <MX_GPIO_Init+0x2bc>)
 8003268:	f001 ffb0 	bl	80051cc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800326c:	2302      	movs	r3, #2
 800326e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003270:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003274:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003276:	2300      	movs	r3, #0
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800327a:	f107 031c 	add.w	r3, r7, #28
 800327e:	4619      	mov	r1, r3
 8003280:	4804      	ldr	r0, [pc, #16]	; (8003294 <MX_GPIO_Init+0x2ac>)
 8003282:	f001 ffa3 	bl	80051cc <HAL_GPIO_Init>

}
 8003286:	bf00      	nop
 8003288:	3730      	adds	r7, #48	; 0x30
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800
 8003294:	40021000 	.word	0x40021000
 8003298:	40020800 	.word	0x40020800
 800329c:	40020000 	.word	0x40020000
 80032a0:	40020c00 	.word	0x40020c00
 80032a4:	40020400 	.word	0x40020400

080032a8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// ------------------------------------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
	if(htim == &htim13)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a07      	ldr	r2, [pc, #28]	; (80032d0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d106      	bne.n	80032c6 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		HAL_GPIO_TogglePin(GPIOE, TEST_OUTPUT_2_Pin);
 80032b8:	2108      	movs	r1, #8
 80032ba:	4806      	ldr	r0, [pc, #24]	; (80032d4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80032bc:	f002 f93b 	bl	8005536 <HAL_GPIO_TogglePin>
		interrupt_flag = 1;
 80032c0:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	701a      	strb	r2, [r3, #0]
		//HAL_TIM_Base_Stop_IT(&htim13);
	}
}
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	200017a0 	.word	0x200017a0
 80032d4:	40021000 	.word	0x40021000
 80032d8:	200015df 	.word	0x200015df

080032dc <HAL_UART_RxCpltCallback>:
// ------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART3)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a15      	ldr	r2, [pc, #84]	; (8003340 <HAL_UART_RxCpltCallback+0x64>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d123      	bne.n	8003336 <HAL_UART_RxCpltCallback+0x5a>
	{
		if(uart_RX_data != 13)
 80032ee:	4b15      	ldr	r3, [pc, #84]	; (8003344 <HAL_UART_RxCpltCallback+0x68>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b0d      	cmp	r3, #13
 80032f4:	d00d      	beq.n	8003312 <HAL_UART_RxCpltCallback+0x36>
		{
			rx_buf_command[count_chars] = uart_RX_data;
 80032f6:	4b14      	ldr	r3, [pc, #80]	; (8003348 <HAL_UART_RxCpltCallback+0x6c>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	4b11      	ldr	r3, [pc, #68]	; (8003344 <HAL_UART_RxCpltCallback+0x68>)
 80032fe:	7819      	ldrb	r1, [r3, #0]
 8003300:	4b12      	ldr	r3, [pc, #72]	; (800334c <HAL_UART_RxCpltCallback+0x70>)
 8003302:	5499      	strb	r1, [r3, r2]
			count_chars++;
 8003304:	4b10      	ldr	r3, [pc, #64]	; (8003348 <HAL_UART_RxCpltCallback+0x6c>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	3301      	adds	r3, #1
 800330a:	b2da      	uxtb	r2, r3
 800330c:	4b0e      	ldr	r3, [pc, #56]	; (8003348 <HAL_UART_RxCpltCallback+0x6c>)
 800330e:	701a      	strb	r2, [r3, #0]
 8003310:	e005      	b.n	800331e <HAL_UART_RxCpltCallback+0x42>
		}
		else
		{
			flag_received_command = true;
 8003312:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <HAL_UART_RxCpltCallback+0x74>)
 8003314:	2201      	movs	r2, #1
 8003316:	701a      	strb	r2, [r3, #0]
			count_chars= 0;
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <HAL_UART_RxCpltCallback+0x6c>)
 800331a:	2200      	movs	r2, #0
 800331c:	701a      	strb	r2, [r3, #0]
		}


		if(uart_RX_data == 'z')						// If was sent "STOP animation" command. 'z' key
 800331e:	4b09      	ldr	r3, [pc, #36]	; (8003344 <HAL_UART_RxCpltCallback+0x68>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b7a      	cmp	r3, #122	; 0x7a
 8003324:	d102      	bne.n	800332c <HAL_UART_RxCpltCallback+0x50>
		{
			interrupt_animation_flag = true;
 8003326:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_UART_RxCpltCallback+0x78>)
 8003328:	2201      	movs	r2, #1
 800332a:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, &uart_RX_data, 1);
 800332c:	2201      	movs	r2, #1
 800332e:	4905      	ldr	r1, [pc, #20]	; (8003344 <HAL_UART_RxCpltCallback+0x68>)
 8003330:	4809      	ldr	r0, [pc, #36]	; (8003358 <HAL_UART_RxCpltCallback+0x7c>)
 8003332:	f005 ff1d 	bl	8009170 <HAL_UART_Receive_IT>
		//HAL_UART_Transmit_IT(&huart3, &uart_RX_data, 1);
	}
}
 8003336:	bf00      	nop
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40004800 	.word	0x40004800
 8003344:	200015d0 	.word	0x200015d0
 8003348:	200015de 	.word	0x200015de
 800334c:	200015d4 	.word	0x200015d4
 8003350:	200015d1 	.word	0x200015d1
 8003354:	200015d2 	.word	0x200015d2
 8003358:	200018a8 	.word	0x200018a8

0800335c <all_leds_animantion_ok_state>:
// ------------------------------------------------------------------------------------
void all_leds_animantion_ok_state(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
	turn_all_leds_from_centr(10, 0, 0, 150);
 8003360:	2396      	movs	r3, #150	; 0x96
 8003362:	2200      	movs	r2, #0
 8003364:	2100      	movs	r1, #0
 8003366:	200a      	movs	r0, #10
 8003368:	f7ff f8de 	bl	8002528 <turn_all_leds_from_centr>
	test_from_midle_to_corner();
 800336c:	f7fd fd28 	bl	8000dc0 <test_from_midle_to_corner>

	HAL_Delay(500);
 8003370:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003374:	f001 f9f2 	bl	800475c <HAL_Delay>

	turn_all_leds_from_centr(20, 0, 0, 0);
 8003378:	2300      	movs	r3, #0
 800337a:	2200      	movs	r2, #0
 800337c:	2100      	movs	r1, #0
 800337e:	2014      	movs	r0, #20
 8003380:	f7ff f8d2 	bl	8002528 <turn_all_leds_from_centr>
	stop_light_all_turn_off();
 8003384:	f7fd fd14 	bl	8000db0 <stop_light_all_turn_off>
}
 8003388:	bf00      	nop
 800338a:	bd80      	pop	{r7, pc}

0800338c <all_leds_animantion_error_state>:
// -----------------------------------------------------------------------------
void all_leds_animantion_error_state(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af02      	add	r7, sp, #8
	turn_all_leds_from_centr(7, 150, 0, 0);
 8003392:	2300      	movs	r3, #0
 8003394:	2200      	movs	r2, #0
 8003396:	2196      	movs	r1, #150	; 0x96
 8003398:	2007      	movs	r0, #7
 800339a:	f7ff f8c5 	bl	8002528 <turn_all_leds_from_centr>
	test_from_midle_to_corner();
 800339e:	f7fd fd0f 	bl	8000dc0 <test_from_midle_to_corner>

	for(uint8_t i = 0; i < 85; i ++)
 80033a2:	2300      	movs	r3, #0
 80033a4:	71fb      	strb	r3, [r7, #7]
 80033a6:	e021      	b.n	80033ec <all_leds_animantion_error_state+0x60>
	{
		set_left_one_rgbw_led(i, 0, 0, 0, 0);
 80033a8:	79f8      	ldrb	r0, [r7, #7]
 80033aa:	2300      	movs	r3, #0
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	2300      	movs	r3, #0
 80033b0:	2200      	movs	r2, #0
 80033b2:	2100      	movs	r1, #0
 80033b4:	f7ff f909 	bl	80025ca <set_left_one_rgbw_led>
		set_right_one_rgbw_led(i, 0, 0, 0, 0);
 80033b8:	79f8      	ldrb	r0, [r7, #7]
 80033ba:	2300      	movs	r3, #0
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	2300      	movs	r3, #0
 80033c0:	2200      	movs	r2, #0
 80033c2:	2100      	movs	r1, #0
 80033c4:	f7ff f922 	bl	800260c <set_right_one_rgbw_led>
		while (!ARGB_Show_left());  			// Update
 80033c8:	bf00      	nop
 80033ca:	f7fe f837 	bl	800143c <ARGB_Show_left>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0fa      	beq.n	80033ca <all_leds_animantion_error_state+0x3e>
		while (!ARGB_Show_right());  			// Update
 80033d4:	bf00      	nop
 80033d6:	f7fe f9fd 	bl	80017d4 <ARGB_Show_right>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0fa      	beq.n	80033d6 <all_leds_animantion_error_state+0x4a>
		HAL_Delay(3);
 80033e0:	2003      	movs	r0, #3
 80033e2:	f001 f9bb 	bl	800475c <HAL_Delay>
	for(uint8_t i = 0; i < 85; i ++)
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	3301      	adds	r3, #1
 80033ea:	71fb      	strb	r3, [r7, #7]
 80033ec:	79fb      	ldrb	r3, [r7, #7]
 80033ee:	2b54      	cmp	r3, #84	; 0x54
 80033f0:	d9da      	bls.n	80033a8 <all_leds_animantion_error_state+0x1c>
	}

	stop_light_all_turn_off();
 80033f2:	f7fd fcdd 	bl	8000db0 <stop_light_all_turn_off>
}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033fe:	b480      	push	{r7}
 8003400:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003402:	b672      	cpsid	i
}
 8003404:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003406:	e7fe      	b.n	8003406 <Error_Handler+0x8>

08003408 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	607b      	str	r3, [r7, #4]
 8003412:	4b10      	ldr	r3, [pc, #64]	; (8003454 <HAL_MspInit+0x4c>)
 8003414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003416:	4a0f      	ldr	r2, [pc, #60]	; (8003454 <HAL_MspInit+0x4c>)
 8003418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800341c:	6453      	str	r3, [r2, #68]	; 0x44
 800341e:	4b0d      	ldr	r3, [pc, #52]	; (8003454 <HAL_MspInit+0x4c>)
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003426:	607b      	str	r3, [r7, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	603b      	str	r3, [r7, #0]
 800342e:	4b09      	ldr	r3, [pc, #36]	; (8003454 <HAL_MspInit+0x4c>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	4a08      	ldr	r2, [pc, #32]	; (8003454 <HAL_MspInit+0x4c>)
 8003434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003438:	6413      	str	r3, [r2, #64]	; 0x40
 800343a:	4b06      	ldr	r3, [pc, #24]	; (8003454 <HAL_MspInit+0x4c>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003446:	2007      	movs	r0, #7
 8003448:	f001 fa7c 	bl	8004944 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800344c:	bf00      	nop
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40023800 	.word	0x40023800

08003458 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08a      	sub	sp, #40	; 0x28
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003460:	f107 0314 	add.w	r3, r7, #20
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	605a      	str	r2, [r3, #4]
 800346a:	609a      	str	r2, [r3, #8]
 800346c:	60da      	str	r2, [r3, #12]
 800346e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a19      	ldr	r2, [pc, #100]	; (80034dc <HAL_SPI_MspInit+0x84>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d12b      	bne.n	80034d2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800347a:	2300      	movs	r3, #0
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	4b18      	ldr	r3, [pc, #96]	; (80034e0 <HAL_SPI_MspInit+0x88>)
 8003480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003482:	4a17      	ldr	r2, [pc, #92]	; (80034e0 <HAL_SPI_MspInit+0x88>)
 8003484:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003488:	6453      	str	r3, [r2, #68]	; 0x44
 800348a:	4b15      	ldr	r3, [pc, #84]	; (80034e0 <HAL_SPI_MspInit+0x88>)
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	4b11      	ldr	r3, [pc, #68]	; (80034e0 <HAL_SPI_MspInit+0x88>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	4a10      	ldr	r2, [pc, #64]	; (80034e0 <HAL_SPI_MspInit+0x88>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	6313      	str	r3, [r2, #48]	; 0x30
 80034a6:	4b0e      	ldr	r3, [pc, #56]	; (80034e0 <HAL_SPI_MspInit+0x88>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80034b2:	23e0      	movs	r3, #224	; 0xe0
 80034b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b6:	2302      	movs	r3, #2
 80034b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034be:	2303      	movs	r3, #3
 80034c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034c2:	2305      	movs	r3, #5
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c6:	f107 0314 	add.w	r3, r7, #20
 80034ca:	4619      	mov	r1, r3
 80034cc:	4805      	ldr	r0, [pc, #20]	; (80034e4 <HAL_SPI_MspInit+0x8c>)
 80034ce:	f001 fe7d 	bl	80051cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80034d2:	bf00      	nop
 80034d4:	3728      	adds	r7, #40	; 0x28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40013000 	.word	0x40013000
 80034e0:	40023800 	.word	0x40023800
 80034e4:	40020000 	.word	0x40020000

080034e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b088      	sub	sp, #32
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f8:	d116      	bne.n	8003528 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
 80034fe:	4b3c      	ldr	r3, [pc, #240]	; (80035f0 <HAL_TIM_Base_MspInit+0x108>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	4a3b      	ldr	r2, [pc, #236]	; (80035f0 <HAL_TIM_Base_MspInit+0x108>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	6413      	str	r3, [r2, #64]	; 0x40
 800350a:	4b39      	ldr	r3, [pc, #228]	; (80035f0 <HAL_TIM_Base_MspInit+0x108>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	61fb      	str	r3, [r7, #28]
 8003514:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003516:	2200      	movs	r2, #0
 8003518:	2100      	movs	r1, #0
 800351a:	201c      	movs	r0, #28
 800351c:	f001 fa1d 	bl	800495a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003520:	201c      	movs	r0, #28
 8003522:	f001 fa36 	bl	8004992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8003526:	e05e      	b.n	80035e6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM3)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a31      	ldr	r2, [pc, #196]	; (80035f4 <HAL_TIM_Base_MspInit+0x10c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d10e      	bne.n	8003550 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	61bb      	str	r3, [r7, #24]
 8003536:	4b2e      	ldr	r3, [pc, #184]	; (80035f0 <HAL_TIM_Base_MspInit+0x108>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	4a2d      	ldr	r2, [pc, #180]	; (80035f0 <HAL_TIM_Base_MspInit+0x108>)
 800353c:	f043 0302 	orr.w	r3, r3, #2
 8003540:	6413      	str	r3, [r2, #64]	; 0x40
 8003542:	4b2b      	ldr	r3, [pc, #172]	; (80035f0 <HAL_TIM_Base_MspInit+0x108>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	61bb      	str	r3, [r7, #24]
 800354c:	69bb      	ldr	r3, [r7, #24]
}
 800354e:	e04a      	b.n	80035e6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM4)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a28      	ldr	r2, [pc, #160]	; (80035f8 <HAL_TIM_Base_MspInit+0x110>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d10e      	bne.n	8003578 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]
 800355e:	4b24      	ldr	r3, [pc, #144]	; (80035f0 <HAL_TIM_Base_MspInit+0x108>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	4a23      	ldr	r2, [pc, #140]	; (80035f0 <HAL_TIM_Base_MspInit+0x108>)
 8003564:	f043 0304 	orr.w	r3, r3, #4
 8003568:	6413      	str	r3, [r2, #64]	; 0x40
 800356a:	4b21      	ldr	r3, [pc, #132]	; (80035f0 <HAL_TIM_Base_MspInit+0x108>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f003 0304 	and.w	r3, r3, #4
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	697b      	ldr	r3, [r7, #20]
}
 8003576:	e036      	b.n	80035e6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM5)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a1f      	ldr	r2, [pc, #124]	; (80035fc <HAL_TIM_Base_MspInit+0x114>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d116      	bne.n	80035b0 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	613b      	str	r3, [r7, #16]
 8003586:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <HAL_TIM_Base_MspInit+0x108>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	4a19      	ldr	r2, [pc, #100]	; (80035f0 <HAL_TIM_Base_MspInit+0x108>)
 800358c:	f043 0308 	orr.w	r3, r3, #8
 8003590:	6413      	str	r3, [r2, #64]	; 0x40
 8003592:	4b17      	ldr	r3, [pc, #92]	; (80035f0 <HAL_TIM_Base_MspInit+0x108>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800359e:	2200      	movs	r2, #0
 80035a0:	2100      	movs	r1, #0
 80035a2:	2032      	movs	r0, #50	; 0x32
 80035a4:	f001 f9d9 	bl	800495a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80035a8:	2032      	movs	r0, #50	; 0x32
 80035aa:	f001 f9f2 	bl	8004992 <HAL_NVIC_EnableIRQ>
}
 80035ae:	e01a      	b.n	80035e6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a12      	ldr	r2, [pc, #72]	; (8003600 <HAL_TIM_Base_MspInit+0x118>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d115      	bne.n	80035e6 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <HAL_TIM_Base_MspInit+0x108>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	4a0b      	ldr	r2, [pc, #44]	; (80035f0 <HAL_TIM_Base_MspInit+0x108>)
 80035c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035c8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ca:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <HAL_TIM_Base_MspInit+0x108>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80035d6:	2200      	movs	r2, #0
 80035d8:	2100      	movs	r1, #0
 80035da:	202c      	movs	r0, #44	; 0x2c
 80035dc:	f001 f9bd 	bl	800495a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80035e0:	202c      	movs	r0, #44	; 0x2c
 80035e2:	f001 f9d6 	bl	8004992 <HAL_NVIC_EnableIRQ>
}
 80035e6:	bf00      	nop
 80035e8:	3720      	adds	r7, #32
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40023800 	.word	0x40023800
 80035f4:	40000400 	.word	0x40000400
 80035f8:	40000800 	.word	0x40000800
 80035fc:	40000c00 	.word	0x40000c00
 8003600:	40001c00 	.word	0x40001c00

08003604 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a4a      	ldr	r2, [pc, #296]	; (800373c <HAL_TIM_PWM_MspInit+0x138>)
 8003612:	4293      	cmp	r3, r2
 8003614:	f040 808e 	bne.w	8003734 <HAL_TIM_PWM_MspInit+0x130>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003618:	2300      	movs	r3, #0
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	4b48      	ldr	r3, [pc, #288]	; (8003740 <HAL_TIM_PWM_MspInit+0x13c>)
 800361e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003620:	4a47      	ldr	r2, [pc, #284]	; (8003740 <HAL_TIM_PWM_MspInit+0x13c>)
 8003622:	f043 0302 	orr.w	r3, r3, #2
 8003626:	6453      	str	r3, [r2, #68]	; 0x44
 8003628:	4b45      	ldr	r3, [pc, #276]	; (8003740 <HAL_TIM_PWM_MspInit+0x13c>)
 800362a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 DMA Init */
    /* TIM8_CH3 Init */
    hdma_tim8_ch3.Instance = DMA2_Stream4;
 8003634:	4b43      	ldr	r3, [pc, #268]	; (8003744 <HAL_TIM_PWM_MspInit+0x140>)
 8003636:	4a44      	ldr	r2, [pc, #272]	; (8003748 <HAL_TIM_PWM_MspInit+0x144>)
 8003638:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch3.Init.Channel = DMA_CHANNEL_7;
 800363a:	4b42      	ldr	r3, [pc, #264]	; (8003744 <HAL_TIM_PWM_MspInit+0x140>)
 800363c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003640:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003642:	4b40      	ldr	r3, [pc, #256]	; (8003744 <HAL_TIM_PWM_MspInit+0x140>)
 8003644:	2240      	movs	r2, #64	; 0x40
 8003646:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003648:	4b3e      	ldr	r3, [pc, #248]	; (8003744 <HAL_TIM_PWM_MspInit+0x140>)
 800364a:	2200      	movs	r2, #0
 800364c:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800364e:	4b3d      	ldr	r3, [pc, #244]	; (8003744 <HAL_TIM_PWM_MspInit+0x140>)
 8003650:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003654:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003656:	4b3b      	ldr	r3, [pc, #236]	; (8003744 <HAL_TIM_PWM_MspInit+0x140>)
 8003658:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800365c:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800365e:	4b39      	ldr	r3, [pc, #228]	; (8003744 <HAL_TIM_PWM_MspInit+0x140>)
 8003660:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003664:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch3.Init.Mode = DMA_CIRCULAR;
 8003666:	4b37      	ldr	r3, [pc, #220]	; (8003744 <HAL_TIM_PWM_MspInit+0x140>)
 8003668:	f44f 7280 	mov.w	r2, #256	; 0x100
 800366c:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 800366e:	4b35      	ldr	r3, [pc, #212]	; (8003744 <HAL_TIM_PWM_MspInit+0x140>)
 8003670:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003674:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003676:	4b33      	ldr	r3, [pc, #204]	; (8003744 <HAL_TIM_PWM_MspInit+0x140>)
 8003678:	2200      	movs	r2, #0
 800367a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch3) != HAL_OK)
 800367c:	4831      	ldr	r0, [pc, #196]	; (8003744 <HAL_TIM_PWM_MspInit+0x140>)
 800367e:	f001 f9a3 	bl	80049c8 <HAL_DMA_Init>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_TIM_PWM_MspInit+0x88>
    {
      Error_Handler();
 8003688:	f7ff feb9 	bl	80033fe <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a2d      	ldr	r2, [pc, #180]	; (8003744 <HAL_TIM_PWM_MspInit+0x140>)
 8003690:	62da      	str	r2, [r3, #44]	; 0x2c
 8003692:	4a2c      	ldr	r2, [pc, #176]	; (8003744 <HAL_TIM_PWM_MspInit+0x140>)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM8_CH4_TRIG_COM Init */
    hdma_tim8_ch4_trig_com.Instance = DMA2_Stream7;
 8003698:	4b2c      	ldr	r3, [pc, #176]	; (800374c <HAL_TIM_PWM_MspInit+0x148>)
 800369a:	4a2d      	ldr	r2, [pc, #180]	; (8003750 <HAL_TIM_PWM_MspInit+0x14c>)
 800369c:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch4_trig_com.Init.Channel = DMA_CHANNEL_7;
 800369e:	4b2b      	ldr	r3, [pc, #172]	; (800374c <HAL_TIM_PWM_MspInit+0x148>)
 80036a0:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80036a4:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036a6:	4b29      	ldr	r3, [pc, #164]	; (800374c <HAL_TIM_PWM_MspInit+0x148>)
 80036a8:	2240      	movs	r2, #64	; 0x40
 80036aa:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 80036ac:	4b27      	ldr	r3, [pc, #156]	; (800374c <HAL_TIM_PWM_MspInit+0x148>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 80036b2:	4b26      	ldr	r3, [pc, #152]	; (800374c <HAL_TIM_PWM_MspInit+0x148>)
 80036b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036b8:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80036ba:	4b24      	ldr	r3, [pc, #144]	; (800374c <HAL_TIM_PWM_MspInit+0x148>)
 80036bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036c0:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80036c2:	4b22      	ldr	r3, [pc, #136]	; (800374c <HAL_TIM_PWM_MspInit+0x148>)
 80036c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036c8:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 80036ca:	4b20      	ldr	r3, [pc, #128]	; (800374c <HAL_TIM_PWM_MspInit+0x148>)
 80036cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036d0:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 80036d2:	4b1e      	ldr	r3, [pc, #120]	; (800374c <HAL_TIM_PWM_MspInit+0x148>)
 80036d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036d8:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036da:	4b1c      	ldr	r3, [pc, #112]	; (800374c <HAL_TIM_PWM_MspInit+0x148>)
 80036dc:	2200      	movs	r2, #0
 80036de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch4_trig_com) != HAL_OK)
 80036e0:	481a      	ldr	r0, [pc, #104]	; (800374c <HAL_TIM_PWM_MspInit+0x148>)
 80036e2:	f001 f971 	bl	80049c8 <HAL_DMA_Init>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_TIM_PWM_MspInit+0xec>
    {
      Error_Handler();
 80036ec:	f7ff fe87 	bl	80033fe <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim8_ch4_trig_com);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a16      	ldr	r2, [pc, #88]	; (800374c <HAL_TIM_PWM_MspInit+0x148>)
 80036f4:	631a      	str	r2, [r3, #48]	; 0x30
 80036f6:	4a15      	ldr	r2, [pc, #84]	; (800374c <HAL_TIM_PWM_MspInit+0x148>)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim8_ch4_trig_com);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a13      	ldr	r2, [pc, #76]	; (800374c <HAL_TIM_PWM_MspInit+0x148>)
 8003700:	639a      	str	r2, [r3, #56]	; 0x38
 8003702:	4a12      	ldr	r2, [pc, #72]	; (800374c <HAL_TIM_PWM_MspInit+0x148>)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim8_ch4_trig_com);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a10      	ldr	r2, [pc, #64]	; (800374c <HAL_TIM_PWM_MspInit+0x148>)
 800370c:	635a      	str	r2, [r3, #52]	; 0x34
 800370e:	4a0f      	ldr	r2, [pc, #60]	; (800374c <HAL_TIM_PWM_MspInit+0x148>)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003714:	2200      	movs	r2, #0
 8003716:	2100      	movs	r1, #0
 8003718:	202c      	movs	r0, #44	; 0x2c
 800371a:	f001 f91e 	bl	800495a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800371e:	202c      	movs	r0, #44	; 0x2c
 8003720:	f001 f937 	bl	8004992 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8003724:	2200      	movs	r2, #0
 8003726:	2100      	movs	r1, #0
 8003728:	202d      	movs	r0, #45	; 0x2d
 800372a:	f001 f916 	bl	800495a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800372e:	202d      	movs	r0, #45	; 0x2d
 8003730:	f001 f92f 	bl	8004992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003734:	bf00      	nop
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40010400 	.word	0x40010400
 8003740:	40023800 	.word	0x40023800
 8003744:	200017e8 	.word	0x200017e8
 8003748:	40026470 	.word	0x40026470
 800374c:	20001848 	.word	0x20001848
 8003750:	400264b8 	.word	0x400264b8

08003754 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08e      	sub	sp, #56	; 0x38
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800375c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	609a      	str	r2, [r3, #8]
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003774:	d13e      	bne.n	80037f4 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	623b      	str	r3, [r7, #32]
 800377a:	4b66      	ldr	r3, [pc, #408]	; (8003914 <HAL_TIM_MspPostInit+0x1c0>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	4a65      	ldr	r2, [pc, #404]	; (8003914 <HAL_TIM_MspPostInit+0x1c0>)
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	6313      	str	r3, [r2, #48]	; 0x30
 8003786:	4b63      	ldr	r3, [pc, #396]	; (8003914 <HAL_TIM_MspPostInit+0x1c0>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	623b      	str	r3, [r7, #32]
 8003790:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	4b5f      	ldr	r3, [pc, #380]	; (8003914 <HAL_TIM_MspPostInit+0x1c0>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	4a5e      	ldr	r2, [pc, #376]	; (8003914 <HAL_TIM_MspPostInit+0x1c0>)
 800379c:	f043 0302 	orr.w	r3, r3, #2
 80037a0:	6313      	str	r3, [r2, #48]	; 0x30
 80037a2:	4b5c      	ldr	r3, [pc, #368]	; (8003914 <HAL_TIM_MspPostInit+0x1c0>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	61fb      	str	r3, [r7, #28]
 80037ac:	69fb      	ldr	r3, [r7, #28]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15;
 80037ae:	f248 0306 	movw	r3, #32774	; 0x8006
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b4:	2302      	movs	r3, #2
 80037b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037bc:	2300      	movs	r3, #0
 80037be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037c0:	2301      	movs	r3, #1
 80037c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037c8:	4619      	mov	r1, r3
 80037ca:	4853      	ldr	r0, [pc, #332]	; (8003918 <HAL_TIM_MspPostInit+0x1c4>)
 80037cc:	f001 fcfe 	bl	80051cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80037d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d6:	2302      	movs	r3, #2
 80037d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037da:	2300      	movs	r3, #0
 80037dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037de:	2300      	movs	r3, #0
 80037e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037e2:	2301      	movs	r3, #1
 80037e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ea:	4619      	mov	r1, r3
 80037ec:	484b      	ldr	r0, [pc, #300]	; (800391c <HAL_TIM_MspPostInit+0x1c8>)
 80037ee:	f001 fced 	bl	80051cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80037f2:	e08a      	b.n	800390a <HAL_TIM_MspPostInit+0x1b6>
  else if(htim->Instance==TIM3)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a49      	ldr	r2, [pc, #292]	; (8003920 <HAL_TIM_MspPostInit+0x1cc>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d13c      	bne.n	8003878 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037fe:	2300      	movs	r3, #0
 8003800:	61bb      	str	r3, [r7, #24]
 8003802:	4b44      	ldr	r3, [pc, #272]	; (8003914 <HAL_TIM_MspPostInit+0x1c0>)
 8003804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003806:	4a43      	ldr	r2, [pc, #268]	; (8003914 <HAL_TIM_MspPostInit+0x1c0>)
 8003808:	f043 0302 	orr.w	r3, r3, #2
 800380c:	6313      	str	r3, [r2, #48]	; 0x30
 800380e:	4b41      	ldr	r3, [pc, #260]	; (8003914 <HAL_TIM_MspPostInit+0x1c0>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	61bb      	str	r3, [r7, #24]
 8003818:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800381a:	2300      	movs	r3, #0
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	4b3d      	ldr	r3, [pc, #244]	; (8003914 <HAL_TIM_MspPostInit+0x1c0>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	4a3c      	ldr	r2, [pc, #240]	; (8003914 <HAL_TIM_MspPostInit+0x1c0>)
 8003824:	f043 0304 	orr.w	r3, r3, #4
 8003828:	6313      	str	r3, [r2, #48]	; 0x30
 800382a:	4b3a      	ldr	r3, [pc, #232]	; (8003914 <HAL_TIM_MspPostInit+0x1c0>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8003836:	2323      	movs	r3, #35	; 0x23
 8003838:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800383a:	2302      	movs	r3, #2
 800383c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383e:	2300      	movs	r3, #0
 8003840:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003842:	2300      	movs	r3, #0
 8003844:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003846:	2302      	movs	r3, #2
 8003848:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800384a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800384e:	4619      	mov	r1, r3
 8003850:	4832      	ldr	r0, [pc, #200]	; (800391c <HAL_TIM_MspPostInit+0x1c8>)
 8003852:	f001 fcbb 	bl	80051cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003856:	2340      	movs	r3, #64	; 0x40
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800385a:	2302      	movs	r3, #2
 800385c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385e:	2300      	movs	r3, #0
 8003860:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003862:	2300      	movs	r3, #0
 8003864:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003866:	2302      	movs	r3, #2
 8003868:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800386a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800386e:	4619      	mov	r1, r3
 8003870:	482c      	ldr	r0, [pc, #176]	; (8003924 <HAL_TIM_MspPostInit+0x1d0>)
 8003872:	f001 fcab 	bl	80051cc <HAL_GPIO_Init>
}
 8003876:	e048      	b.n	800390a <HAL_TIM_MspPostInit+0x1b6>
  else if(htim->Instance==TIM4)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a2a      	ldr	r2, [pc, #168]	; (8003928 <HAL_TIM_MspPostInit+0x1d4>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d11f      	bne.n	80038c2 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003882:	2300      	movs	r3, #0
 8003884:	613b      	str	r3, [r7, #16]
 8003886:	4b23      	ldr	r3, [pc, #140]	; (8003914 <HAL_TIM_MspPostInit+0x1c0>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	4a22      	ldr	r2, [pc, #136]	; (8003914 <HAL_TIM_MspPostInit+0x1c0>)
 800388c:	f043 0302 	orr.w	r3, r3, #2
 8003890:	6313      	str	r3, [r2, #48]	; 0x30
 8003892:	4b20      	ldr	r3, [pc, #128]	; (8003914 <HAL_TIM_MspPostInit+0x1c0>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	613b      	str	r3, [r7, #16]
 800389c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800389e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a4:	2302      	movs	r3, #2
 80038a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ac:	2300      	movs	r3, #0
 80038ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80038b0:	2302      	movs	r3, #2
 80038b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038b8:	4619      	mov	r1, r3
 80038ba:	4818      	ldr	r0, [pc, #96]	; (800391c <HAL_TIM_MspPostInit+0x1c8>)
 80038bc:	f001 fc86 	bl	80051cc <HAL_GPIO_Init>
}
 80038c0:	e023      	b.n	800390a <HAL_TIM_MspPostInit+0x1b6>
  else if(htim->Instance==TIM8)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a19      	ldr	r2, [pc, #100]	; (800392c <HAL_TIM_MspPostInit+0x1d8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d11e      	bne.n	800390a <HAL_TIM_MspPostInit+0x1b6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038cc:	2300      	movs	r3, #0
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	4b10      	ldr	r3, [pc, #64]	; (8003914 <HAL_TIM_MspPostInit+0x1c0>)
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	4a0f      	ldr	r2, [pc, #60]	; (8003914 <HAL_TIM_MspPostInit+0x1c0>)
 80038d6:	f043 0304 	orr.w	r3, r3, #4
 80038da:	6313      	str	r3, [r2, #48]	; 0x30
 80038dc:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <HAL_TIM_MspPostInit+0x1c0>)
 80038de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80038e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ee:	2302      	movs	r3, #2
 80038f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038f2:	2301      	movs	r3, #1
 80038f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038f6:	2303      	movs	r3, #3
 80038f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80038fa:	2303      	movs	r3, #3
 80038fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003902:	4619      	mov	r1, r3
 8003904:	4807      	ldr	r0, [pc, #28]	; (8003924 <HAL_TIM_MspPostInit+0x1d0>)
 8003906:	f001 fc61 	bl	80051cc <HAL_GPIO_Init>
}
 800390a:	bf00      	nop
 800390c:	3738      	adds	r7, #56	; 0x38
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40023800 	.word	0x40023800
 8003918:	40020000 	.word	0x40020000
 800391c:	40020400 	.word	0x40020400
 8003920:	40000400 	.word	0x40000400
 8003924:	40020800 	.word	0x40020800
 8003928:	40000800 	.word	0x40000800
 800392c:	40010400 	.word	0x40010400

08003930 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08a      	sub	sp, #40	; 0x28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003938:	f107 0314 	add.w	r3, r7, #20
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	605a      	str	r2, [r3, #4]
 8003942:	609a      	str	r2, [r3, #8]
 8003944:	60da      	str	r2, [r3, #12]
 8003946:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a1d      	ldr	r2, [pc, #116]	; (80039c4 <HAL_UART_MspInit+0x94>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d134      	bne.n	80039bc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	613b      	str	r3, [r7, #16]
 8003956:	4b1c      	ldr	r3, [pc, #112]	; (80039c8 <HAL_UART_MspInit+0x98>)
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	4a1b      	ldr	r2, [pc, #108]	; (80039c8 <HAL_UART_MspInit+0x98>)
 800395c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003960:	6413      	str	r3, [r2, #64]	; 0x40
 8003962:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <HAL_UART_MspInit+0x98>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800396a:	613b      	str	r3, [r7, #16]
 800396c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	4b15      	ldr	r3, [pc, #84]	; (80039c8 <HAL_UART_MspInit+0x98>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	4a14      	ldr	r2, [pc, #80]	; (80039c8 <HAL_UART_MspInit+0x98>)
 8003978:	f043 0308 	orr.w	r3, r3, #8
 800397c:	6313      	str	r3, [r2, #48]	; 0x30
 800397e:	4b12      	ldr	r3, [pc, #72]	; (80039c8 <HAL_UART_MspInit+0x98>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800398a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800398e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003990:	2302      	movs	r3, #2
 8003992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003994:	2300      	movs	r3, #0
 8003996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003998:	2303      	movs	r3, #3
 800399a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800399c:	2307      	movs	r3, #7
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039a0:	f107 0314 	add.w	r3, r7, #20
 80039a4:	4619      	mov	r1, r3
 80039a6:	4809      	ldr	r0, [pc, #36]	; (80039cc <HAL_UART_MspInit+0x9c>)
 80039a8:	f001 fc10 	bl	80051cc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80039ac:	2200      	movs	r2, #0
 80039ae:	2100      	movs	r1, #0
 80039b0:	2027      	movs	r0, #39	; 0x27
 80039b2:	f000 ffd2 	bl	800495a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80039b6:	2027      	movs	r0, #39	; 0x27
 80039b8:	f000 ffeb 	bl	8004992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80039bc:	bf00      	nop
 80039be:	3728      	adds	r7, #40	; 0x28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40004800 	.word	0x40004800
 80039c8:	40023800 	.word	0x40023800
 80039cc:	40020c00 	.word	0x40020c00

080039d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039d4:	e7fe      	b.n	80039d4 <NMI_Handler+0x4>

080039d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039d6:	b480      	push	{r7}
 80039d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039da:	e7fe      	b.n	80039da <HardFault_Handler+0x4>

080039dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039e0:	e7fe      	b.n	80039e0 <MemManage_Handler+0x4>

080039e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039e2:	b480      	push	{r7}
 80039e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039e6:	e7fe      	b.n	80039e6 <BusFault_Handler+0x4>

080039e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039ec:	e7fe      	b.n	80039ec <UsageFault_Handler+0x4>

080039ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039ee:	b480      	push	{r7}
 80039f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039f2:	bf00      	nop
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a00:	bf00      	nop
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a1c:	f000 fe7e 	bl	800471c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a20:	bf00      	nop
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//HAL_GPIO_TogglePin(GPIOD,LD4_Pin);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a28:	4802      	ldr	r0, [pc, #8]	; (8003a34 <TIM2_IRQHandler+0x10>)
 8003a2a:	f004 fb7f 	bl	800812c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	20001638 	.word	0x20001638

08003a38 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003a3c:	4802      	ldr	r0, [pc, #8]	; (8003a48 <USART3_IRQHandler+0x10>)
 8003a3e:	f005 fbc7 	bl	80091d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003a42:	bf00      	nop
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	200018a8 	.word	0x200018a8

08003a4c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003a50:	4803      	ldr	r0, [pc, #12]	; (8003a60 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8003a52:	f004 fb6b 	bl	800812c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8003a56:	4803      	ldr	r0, [pc, #12]	; (8003a64 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8003a58:	f004 fb68 	bl	800812c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003a5c:	bf00      	nop
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	20001758 	.word	0x20001758
 8003a64:	200017a0 	.word	0x200017a0

08003a68 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003a6c:	4802      	ldr	r0, [pc, #8]	; (8003a78 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003a6e:	f004 fb5d 	bl	800812c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003a72:	bf00      	nop
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20001758 	.word	0x20001758

08003a7c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	//HAL_GPIO_TogglePin(GPIOE, TEST_OUTPUT_Pin);
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003a80:	4802      	ldr	r0, [pc, #8]	; (8003a8c <TIM5_IRQHandler+0x10>)
 8003a82:	f004 fb53 	bl	800812c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003a86:	bf00      	nop
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20001710 	.word	0x20001710

08003a90 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch3);
 8003a94:	4802      	ldr	r0, [pc, #8]	; (8003aa0 <DMA2_Stream4_IRQHandler+0x10>)
 8003a96:	f001 f92f 	bl	8004cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003a9a:	bf00      	nop
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	200017e8 	.word	0x200017e8

08003aa4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003aa8:	4802      	ldr	r0, [pc, #8]	; (8003ab4 <OTG_FS_IRQHandler+0x10>)
 8003aaa:	f001 ffc9 	bl	8005a40 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003aae:	bf00      	nop
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	200032ec 	.word	0x200032ec

08003ab8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch4_trig_com);
 8003abc:	4802      	ldr	r0, [pc, #8]	; (8003ac8 <DMA2_Stream7_IRQHandler+0x10>)
 8003abe:	f001 f91b 	bl	8004cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003ac2:	bf00      	nop
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20001848 	.word	0x20001848

08003acc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ad4:	4a14      	ldr	r2, [pc, #80]	; (8003b28 <_sbrk+0x5c>)
 8003ad6:	4b15      	ldr	r3, [pc, #84]	; (8003b2c <_sbrk+0x60>)
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ae0:	4b13      	ldr	r3, [pc, #76]	; (8003b30 <_sbrk+0x64>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d102      	bne.n	8003aee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ae8:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <_sbrk+0x64>)
 8003aea:	4a12      	ldr	r2, [pc, #72]	; (8003b34 <_sbrk+0x68>)
 8003aec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003aee:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <_sbrk+0x64>)
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4413      	add	r3, r2
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d207      	bcs.n	8003b0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003afc:	f00d fbec 	bl	80112d8 <__errno>
 8003b00:	4603      	mov	r3, r0
 8003b02:	220c      	movs	r2, #12
 8003b04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b0a:	e009      	b.n	8003b20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b0c:	4b08      	ldr	r3, [pc, #32]	; (8003b30 <_sbrk+0x64>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b12:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <_sbrk+0x64>)
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4413      	add	r3, r2
 8003b1a:	4a05      	ldr	r2, [pc, #20]	; (8003b30 <_sbrk+0x64>)
 8003b1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	20020000 	.word	0x20020000
 8003b2c:	00000400 	.word	0x00000400
 8003b30:	200018f8 	.word	0x200018f8
 8003b34:	20003600 	.word	0x20003600

08003b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b3c:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <SystemInit+0x20>)
 8003b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b42:	4a05      	ldr	r2, [pc, #20]	; (8003b58 <SystemInit+0x20>)
 8003b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b4c:	bf00      	nop
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	e000ed00 	.word	0xe000ed00

08003b5c <SD_SPI_Init>:
void make_delay(int delay);

/***	FUNCTIONS	***********************************************************************************************************************************************************************************/
/******************************************************************************************************************************************************************************************************/
uint8_t SD_SPI_Init(void)
{
 8003b5c:	b590      	push	{r4, r7, lr}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
	uint8_t vCmd;
	int16_t vCounter;
	//uint32_t vTmpPrc;
	sdinfo.type = 0;
 8003b62:	4b6b      	ldr	r3, [pc, #428]	; (8003d10 <SD_SPI_Init+0x1b4>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	701a      	strb	r2, [r3, #0]
	uint8_t aArray[4];

	HAL_Delay(250);														// SD voltage stability delay
 8003b68:	20fa      	movs	r0, #250	; 0xfa
 8003b6a:	f000 fdf7 	bl	800475c <HAL_Delay>

	/*vTmpPrc = hspi2.Init.BaudRatePrescaler;
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128; 		//156.25 kbbs*/

	HAL_SPI_Init(&hspi1);
 8003b6e:	4869      	ldr	r0, [pc, #420]	; (8003d14 <SD_SPI_Init+0x1b8>)
 8003b70:	f003 fd9e 	bl	80076b0 <HAL_SPI_Init>

	SD_DESELECT;
 8003b74:	2201      	movs	r2, #1
 8003b76:	2108      	movs	r1, #8
 8003b78:	4867      	ldr	r0, [pc, #412]	; (8003d18 <SD_SPI_Init+0x1bc>)
 8003b7a:	f001 fcc3 	bl	8005504 <HAL_GPIO_WritePin>
	for(vCounter = 0; vCounter<10; vCounter++) // 80 pulse bit. Set SPI as SD card interface
 8003b7e:	2300      	movs	r3, #0
 8003b80:	80bb      	strh	r3, [r7, #4]
 8003b82:	e007      	b.n	8003b94 <SD_SPI_Init+0x38>
		SPI_Release();
 8003b84:	f000 f902 	bl	8003d8c <SPI_Release>
	for(vCounter = 0; vCounter<10; vCounter++) // 80 pulse bit. Set SPI as SD card interface
 8003b88:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	3301      	adds	r3, #1
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	80bb      	strh	r3, [r7, #4]
 8003b94:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003b98:	2b09      	cmp	r3, #9
 8003b9a:	ddf3      	ble.n	8003b84 <SD_SPI_Init+0x28>

	/*hspi2.Init.BaudRatePrescaler = vTmpPrc;
	HAL_SPI_Init(&hspi2);*/

	SD_SELECT;
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	2108      	movs	r1, #8
 8003ba0:	485d      	ldr	r0, [pc, #372]	; (8003d18 <SD_SPI_Init+0x1bc>)
 8003ba2:	f001 fcaf 	bl	8005504 <HAL_GPIO_WritePin>
	if (SD_SPI_Cmd(CMD0, 0) == 1) // Enter Idle state
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	2040      	movs	r0, #64	; 0x40
 8003baa:	f000 f91b 	bl	8003de4 <SD_SPI_Cmd>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	f040 80a5 	bne.w	8003d00 <SD_SPI_Init+0x1a4>
		{
			SPI_Release();
 8003bb6:	f000 f8e9 	bl	8003d8c <SPI_Release>
			if (SD_SPI_Cmd(CMD8, 0x1AA) == 1) // SDv2
 8003bba:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003bbe:	2048      	movs	r0, #72	; 0x48
 8003bc0:	f000 f910 	bl	8003de4 <SD_SPI_Cmd>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d162      	bne.n	8003c90 <SD_SPI_Init+0x134>
				{
					for (vCounter = 0; vCounter < 4; vCounter++)
 8003bca:	2300      	movs	r3, #0
 8003bcc:	80bb      	strh	r3, [r7, #4]
 8003bce:	e010      	b.n	8003bf2 <SD_SPI_Init+0x96>
						aArray[vCounter] = SPI_ReceiveByte();
 8003bd0:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003bd4:	f000 f8cd 	bl	8003d72 <SPI_ReceiveByte>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	461a      	mov	r2, r3
 8003bdc:	f104 0308 	add.w	r3, r4, #8
 8003be0:	443b      	add	r3, r7
 8003be2:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (vCounter = 0; vCounter < 4; vCounter++)
 8003be6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3301      	adds	r3, #1
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	80bb      	strh	r3, [r7, #4]
 8003bf2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	ddea      	ble.n	8003bd0 <SD_SPI_Init+0x74>
					if (aArray[2] == 0x01 && aArray[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8003bfa:	78bb      	ldrb	r3, [r7, #2]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	f040 8081 	bne.w	8003d04 <SD_SPI_Init+0x1a8>
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	2baa      	cmp	r3, #170	; 0xaa
 8003c06:	d17d      	bne.n	8003d04 <SD_SPI_Init+0x1a8>
						{
							for (vCounter = 12000; (vCounter && SD_SPI_Cmd(ACMD41, 1UL << 30)); vCounter--)	{;}	 // Wait for leaving idle state (ACMD41 with HCS bit)
 8003c08:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8003c0c:	80bb      	strh	r3, [r7, #4]
 8003c0e:	e005      	b.n	8003c1c <SD_SPI_Init+0xc0>
 8003c10:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	80bb      	strh	r3, [r7, #4]
 8003c1c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d007      	beq.n	8003c34 <SD_SPI_Init+0xd8>
 8003c24:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003c28:	20e9      	movs	r0, #233	; 0xe9
 8003c2a:	f000 f8db 	bl	8003de4 <SD_SPI_Cmd>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1ed      	bne.n	8003c10 <SD_SPI_Init+0xb4>
							if (vCounter && SD_SPI_Cmd(CMD58, 0) == 0)
 8003c34:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d063      	beq.n	8003d04 <SD_SPI_Init+0x1a8>
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	207a      	movs	r0, #122	; 0x7a
 8003c40:	f000 f8d0 	bl	8003de4 <SD_SPI_Cmd>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d15c      	bne.n	8003d04 <SD_SPI_Init+0x1a8>
								{ // Check CCS bit in the OCR
									for (vCounter = 0; vCounter < 4; vCounter++) 	aArray[vCounter] = SPI_ReceiveByte();
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	80bb      	strh	r3, [r7, #4]
 8003c4e:	e010      	b.n	8003c72 <SD_SPI_Init+0x116>
 8003c50:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003c54:	f000 f88d 	bl	8003d72 <SPI_ReceiveByte>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	f104 0308 	add.w	r3, r4, #8
 8003c60:	443b      	add	r3, r7
 8003c62:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003c66:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	80bb      	strh	r3, [r7, #4]
 8003c72:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c76:	2b03      	cmp	r3, #3
 8003c78:	ddea      	ble.n	8003c50 <SD_SPI_Init+0xf4>
									sdinfo.type = (aArray[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 8003c7a:	783b      	ldrb	r3, [r7, #0]
 8003c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <SD_SPI_Init+0x12c>
 8003c84:	220c      	movs	r2, #12
 8003c86:	e000      	b.n	8003c8a <SD_SPI_Init+0x12e>
 8003c88:	2204      	movs	r2, #4
 8003c8a:	4b21      	ldr	r3, [pc, #132]	; (8003d10 <SD_SPI_Init+0x1b4>)
 8003c8c:	701a      	strb	r2, [r3, #0]
 8003c8e:	e039      	b.n	8003d04 <SD_SPI_Init+0x1a8>
								}
						}
				}
			else		//SDv1 or MMCv3
				{
					if (SD_SPI_Cmd(ACMD41, 0) <= 1)
 8003c90:	2100      	movs	r1, #0
 8003c92:	20e9      	movs	r0, #233	; 0xe9
 8003c94:	f000 f8a6 	bl	8003de4 <SD_SPI_Cmd>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d805      	bhi.n	8003caa <SD_SPI_Init+0x14e>
						{
							sdinfo.type = CT_SD1; vCmd = ACMD41; // SDv1
 8003c9e:	4b1c      	ldr	r3, [pc, #112]	; (8003d10 <SD_SPI_Init+0x1b4>)
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	701a      	strb	r2, [r3, #0]
 8003ca4:	23e9      	movs	r3, #233	; 0xe9
 8003ca6:	71fb      	strb	r3, [r7, #7]
 8003ca8:	e004      	b.n	8003cb4 <SD_SPI_Init+0x158>
						}
						else
						{
							sdinfo.type = CT_MMC; vCmd = CMD1; // MMCv3
 8003caa:	4b19      	ldr	r3, [pc, #100]	; (8003d10 <SD_SPI_Init+0x1b4>)
 8003cac:	2201      	movs	r2, #1
 8003cae:	701a      	strb	r2, [r3, #0]
 8003cb0:	2341      	movs	r3, #65	; 0x41
 8003cb2:	71fb      	strb	r3, [r7, #7]
						}
					for (vCounter = 25000; vCounter && SD_SPI_Cmd(vCmd, 0); vCounter--) ; // Wait for leaving idle state
 8003cb4:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8003cb8:	80bb      	strh	r3, [r7, #4]
 8003cba:	e005      	b.n	8003cc8 <SD_SPI_Init+0x16c>
 8003cbc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	80bb      	strh	r3, [r7, #4]
 8003cc8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d007      	beq.n	8003ce0 <SD_SPI_Init+0x184>
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 f885 	bl	8003de4 <SD_SPI_Cmd>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1ed      	bne.n	8003cbc <SD_SPI_Init+0x160>
					if ( ! vCounter || SD_SPI_Cmd(CMD16, 512) != 0) // Set R/W block length to 512
 8003ce0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d007      	beq.n	8003cf8 <SD_SPI_Init+0x19c>
 8003ce8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003cec:	2050      	movs	r0, #80	; 0x50
 8003cee:	f000 f879 	bl	8003de4 <SD_SPI_Cmd>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <SD_SPI_Init+0x1a8>
					sdinfo.type = 0;
 8003cf8:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <SD_SPI_Init+0x1b4>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	701a      	strb	r2, [r3, #0]
 8003cfe:	e001      	b.n	8003d04 <SD_SPI_Init+0x1a8>
				}
		}
	else
		{
			return 1;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <SD_SPI_Init+0x1aa>
		}

	return 0;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd90      	pop	{r4, r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20002934 	.word	0x20002934
 8003d14:	200015e0 	.word	0x200015e0
 8003d18:	40020000 	.word	0x40020000

08003d1c <SPIx_WriteRead>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SPIx_WriteRead(uint8_t byte)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af02      	add	r7, sp, #8
 8003d22:	4603      	mov	r3, r0
 8003d24:	71fb      	strb	r3, [r7, #7]
  uint8_t vReceivedByte = 0;
 8003d26:	2300      	movs	r3, #0
 8003d28:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &byte, (uint8_t*) &vReceivedByte, 1, 0x1000) != HAL_OK)
 8003d2a:	f107 020f 	add.w	r2, r7, #15
 8003d2e:	1df9      	adds	r1, r7, #7
 8003d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	2301      	movs	r3, #1
 8003d38:	4806      	ldr	r0, [pc, #24]	; (8003d54 <SPIx_WriteRead+0x38>)
 8003d3a:	f003 fd42 	bl	80077c2 <HAL_SPI_TransmitReceive>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <SPIx_WriteRead+0x2c>
  {
  	SD_Error_Handler();
 8003d44:	f000 fa40 	bl	80041c8 <SD_Error_Handler>
  }
  return vReceivedByte;
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	200015e0 	.word	0x200015e0

08003d58 <SPI_SendByte>:

/****************************************************************************************************************/
/****************************************************************************************************************/
void SPI_SendByte(uint8_t byte)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	71fb      	strb	r3, [r7, #7]
  SPIx_WriteRead(byte);
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff ffd9 	bl	8003d1c <SPIx_WriteRead>
}
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <SPI_ReceiveByte>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SPI_ReceiveByte(void)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
  uint8_t byte = SPIx_WriteRead(0xFF);
 8003d78:	20ff      	movs	r0, #255	; 0xff
 8003d7a:	f7ff ffcf 	bl	8003d1c <SPIx_WriteRead>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	71fb      	strb	r3, [r7, #7]
  return byte;
 8003d82:	79fb      	ldrb	r3, [r7, #7]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <SPI_Release>:

/****************************************************************************************************************/
/****************************************************************************************************************/
void SPI_Release(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  SPIx_WriteRead(0xFF);
 8003d90:	20ff      	movs	r0, #255	; 0xff
 8003d92:	f7ff ffc3 	bl	8003d1c <SPIx_WriteRead>
}
 8003d96:	bf00      	nop
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <SD_SPI_WaitingForReadiness>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_WaitingForReadiness(void)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b082      	sub	sp, #8
 8003d9e:	af00      	add	r7, sp, #0
	uint8_t vResult;
	uint16_t vCount = 0;
 8003da0:	2300      	movs	r3, #0
 8003da2:	80fb      	strh	r3, [r7, #6]

	do {
		vResult = SPI_ReceiveByte();
 8003da4:	f7ff ffe5 	bl	8003d72 <SPI_ReceiveByte>
 8003da8:	4603      	mov	r3, r0
 8003daa:	717b      	strb	r3, [r7, #5]
		vCount++;
 8003dac:	88fb      	ldrh	r3, [r7, #6]
 8003dae:	3301      	adds	r3, #1
 8003db0:	80fb      	strh	r3, [r7, #6]
	} while ( (vResult != 0xFF) && (vCount < 0xFFFF) );
 8003db2:	797b      	ldrb	r3, [r7, #5]
 8003db4:	2bff      	cmp	r3, #255	; 0xff
 8003db6:	d004      	beq.n	8003dc2 <SD_SPI_WaitingForReadiness+0x28>
 8003db8:	88fb      	ldrh	r3, [r7, #6]
 8003dba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d1f0      	bne.n	8003da4 <SD_SPI_WaitingForReadiness+0xa>

	if (vCount >= 0xFFFF) return ERROR;
 8003dc2:	88fb      	ldrh	r3, [r7, #6]
 8003dc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d101      	bne.n	8003dd0 <SD_SPI_WaitingForReadiness+0x36>
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e005      	b.n	8003ddc <SD_SPI_WaitingForReadiness+0x42>

	  return (vResult == 0xFF) ? OK: ERROR;
 8003dd0:	797b      	ldrb	r3, [r7, #5]
 8003dd2:	2bff      	cmp	r3, #255	; 0xff
 8003dd4:	bf14      	ite	ne
 8003dd6:	2301      	movne	r3, #1
 8003dd8:	2300      	moveq	r3, #0
 8003dda:	b2db      	uxtb	r3, r3
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <SD_SPI_Cmd>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_Cmd(uint8_t cmd, uint32_t argument)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	6039      	str	r1, [r7, #0]
 8003dee:	71fb      	strb	r3, [r7, #7]
  uint8_t vByte, vResult;

	// ACMD is the command sequence of CMD55-CMD?
	if (cmd & 0x80)
 8003df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	da0e      	bge.n	8003e16 <SD_SPI_Cmd+0x32>
	{
		cmd &= 0x7F;
 8003df8:	79fb      	ldrb	r3, [r7, #7]
 8003dfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dfe:	71fb      	strb	r3, [r7, #7]
		vResult = SD_SPI_Cmd(CMD55, 0);
 8003e00:	2100      	movs	r1, #0
 8003e02:	2077      	movs	r0, #119	; 0x77
 8003e04:	f7ff ffee 	bl	8003de4 <SD_SPI_Cmd>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	73bb      	strb	r3, [r7, #14]
		if (vResult > 1) return vResult;
 8003e0c:	7bbb      	ldrb	r3, [r7, #14]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d901      	bls.n	8003e16 <SD_SPI_Cmd+0x32>
 8003e12:	7bbb      	ldrb	r3, [r7, #14]
 8003e14:	e049      	b.n	8003eaa <SD_SPI_Cmd+0xc6>
	}

	// Select the card
	SD_DESELECT;
 8003e16:	2201      	movs	r2, #1
 8003e18:	2108      	movs	r1, #8
 8003e1a:	4826      	ldr	r0, [pc, #152]	; (8003eb4 <SD_SPI_Cmd+0xd0>)
 8003e1c:	f001 fb72 	bl	8005504 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 8003e20:	f7ff ffa7 	bl	8003d72 <SPI_ReceiveByte>
	SD_SELECT;
 8003e24:	2200      	movs	r2, #0
 8003e26:	2108      	movs	r1, #8
 8003e28:	4822      	ldr	r0, [pc, #136]	; (8003eb4 <SD_SPI_Cmd+0xd0>)
 8003e2a:	f001 fb6b 	bl	8005504 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 8003e2e:	f7ff ffa0 	bl	8003d72 <SPI_ReceiveByte>

	// Send a command packet
	SPI_SendByte(cmd); // Start + Command index
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff ff8f 	bl	8003d58 <SPI_SendByte>
	SPI_SendByte((uint8_t)(argument >> 24)); // Argument[31..24]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	0e1b      	lsrs	r3, r3, #24
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff ff89 	bl	8003d58 <SPI_SendByte>
	SPI_SendByte((uint8_t)(argument >> 16)); // Argument[23..16]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	0c1b      	lsrs	r3, r3, #16
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff ff83 	bl	8003d58 <SPI_SendByte>
	SPI_SendByte((uint8_t)(argument >> 8)); // Argument[15..8]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	0a1b      	lsrs	r3, r3, #8
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff ff7d 	bl	8003d58 <SPI_SendByte>
	SPI_SendByte((uint8_t)argument); // Argument[7..0]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff ff78 	bl	8003d58 <SPI_SendByte>
	vByte = 0x01; // Dummy CRC + Stop
 8003e68:	2301      	movs	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]

	if (cmd == CMD0) {vByte = 0x95;} // Valid CRC for CMD0(0)
 8003e6c:	79fb      	ldrb	r3, [r7, #7]
 8003e6e:	2b40      	cmp	r3, #64	; 0x40
 8003e70:	d101      	bne.n	8003e76 <SD_SPI_Cmd+0x92>
 8003e72:	2395      	movs	r3, #149	; 0x95
 8003e74:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) {vByte = 0x87;} // Valid CRC for CMD8(0x1AA)
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	2b48      	cmp	r3, #72	; 0x48
 8003e7a:	d101      	bne.n	8003e80 <SD_SPI_Cmd+0x9c>
 8003e7c:	2387      	movs	r3, #135	; 0x87
 8003e7e:	73fb      	strb	r3, [r7, #15]
	SPI_SendByte(vByte);
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff ff68 	bl	8003d58 <SPI_SendByte>

  // Receive a command response
  vByte = 10; // Wait for a valid response in timeout of 10 attempts
 8003e88:	230a      	movs	r3, #10
 8003e8a:	73fb      	strb	r3, [r7, #15]
  do {
    		vResult = SPI_ReceiveByte();
 8003e8c:	f7ff ff71 	bl	8003d72 <SPI_ReceiveByte>
 8003e90:	4603      	mov	r3, r0
 8003e92:	73bb      	strb	r3, [r7, #14]
  } while ((vResult & 0x80) && --vByte);
 8003e94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	da05      	bge.n	8003ea8 <SD_SPI_Cmd+0xc4>
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	73fb      	strb	r3, [r7, #15]
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1f1      	bne.n	8003e8c <SD_SPI_Cmd+0xa8>

  return vResult;
 8003ea8:	7bbb      	ldrb	r3, [r7, #14]

}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40020000 	.word	0x40020000

08003eb8 <SD_SPI_Read_Block>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_Read_Block(uint8_t *buff, uint32_t lba)
{
 8003eb8:	b590      	push	{r4, r7, lr}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint8_t vResult = 0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	737b      	strb	r3, [r7, #13]
  uint16_t vCounter = 0;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	81fb      	strh	r3, [r7, #14]

	vResult = SD_SPI_Cmd (CMD17, lba);
 8003eca:	6839      	ldr	r1, [r7, #0]
 8003ecc:	2051      	movs	r0, #81	; 0x51
 8003ece:	f7ff ff89 	bl	8003de4 <SD_SPI_Cmd>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	737b      	strb	r3, [r7, #13]
	if (vResult) return 5; //	Error
 8003ed6:	7b7b      	ldrb	r3, [r7, #13]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <SD_SPI_Read_Block+0x28>
 8003edc:	2305      	movs	r3, #5
 8003ede:	e02d      	b.n	8003f3c <SD_SPI_Read_Block+0x84>

	SPI_Release();
 8003ee0:	f7ff ff54 	bl	8003d8c <SPI_Release>

  do{
				vResult=SPI_ReceiveByte();
 8003ee4:	f7ff ff45 	bl	8003d72 <SPI_ReceiveByte>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	737b      	strb	r3, [r7, #13]
				vCounter++;
 8003eec:	89fb      	ldrh	r3, [r7, #14]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	81fb      	strh	r3, [r7, #14]
  } while ((vResult != 0xFE) && (vCounter < 0xFFFF)); // Wait till mark(0xFE) is received
 8003ef2:	7b7b      	ldrb	r3, [r7, #13]
 8003ef4:	2bfe      	cmp	r3, #254	; 0xfe
 8003ef6:	d004      	beq.n	8003f02 <SD_SPI_Read_Block+0x4a>
 8003ef8:	89fb      	ldrh	r3, [r7, #14]
 8003efa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d1f0      	bne.n	8003ee4 <SD_SPI_Read_Block+0x2c>
  if (vCounter >= 0xFFFF) return 5;	 //	 Error
 8003f02:	89fb      	ldrh	r3, [r7, #14]
 8003f04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d101      	bne.n	8003f10 <SD_SPI_Read_Block+0x58>
 8003f0c:	2305      	movs	r3, #5
 8003f0e:	e015      	b.n	8003f3c <SD_SPI_Read_Block+0x84>

  for (vCounter = 0; vCounter<512; vCounter++) buff[vCounter]=SPI_ReceiveByte(); // Write data to the buffer
 8003f10:	2300      	movs	r3, #0
 8003f12:	81fb      	strh	r3, [r7, #14]
 8003f14:	e009      	b.n	8003f2a <SD_SPI_Read_Block+0x72>
 8003f16:	89fb      	ldrh	r3, [r7, #14]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	18d4      	adds	r4, r2, r3
 8003f1c:	f7ff ff29 	bl	8003d72 <SPI_ReceiveByte>
 8003f20:	4603      	mov	r3, r0
 8003f22:	7023      	strb	r3, [r4, #0]
 8003f24:	89fb      	ldrh	r3, [r7, #14]
 8003f26:	3301      	adds	r3, #1
 8003f28:	81fb      	strh	r3, [r7, #14]
 8003f2a:	89fb      	ldrh	r3, [r7, #14]
 8003f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f30:	d3f1      	bcc.n	8003f16 <SD_SPI_Read_Block+0x5e>
  SPI_Release(); // Skip CRC
 8003f32:	f7ff ff2b 	bl	8003d8c <SPI_Release>
  SPI_Release();
 8003f36:	f7ff ff29 	bl	8003d8c <SPI_Release>

  return 0;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd90      	pop	{r4, r7, pc}

08003f44 <SD_SPI_Write_Block>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_Write_Block (uint8_t *buff, uint32_t lba)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint8_t vResult;
  uint16_t vCounter;

  vResult = SD_SPI_Cmd(CMD24, lba);
 8003f4e:	6839      	ldr	r1, [r7, #0]
 8003f50:	2058      	movs	r0, #88	; 0x58
 8003f52:	f7ff ff47 	bl	8003de4 <SD_SPI_Cmd>
 8003f56:	4603      	mov	r3, r0
 8003f58:	737b      	strb	r3, [r7, #13]

  if(vResult != 0x00) return 6; // Error
 8003f5a:	7b7b      	ldrb	r3, [r7, #13]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <SD_SPI_Write_Block+0x20>
 8003f60:	2306      	movs	r3, #6
 8003f62:	e03d      	b.n	8003fe0 <SD_SPI_Write_Block+0x9c>

  SPI_Release();
 8003f64:	f7ff ff12 	bl	8003d8c <SPI_Release>
  SPI_SendByte (0xFE); // Send transmission start mark
 8003f68:	20fe      	movs	r0, #254	; 0xfe
 8003f6a:	f7ff fef5 	bl	8003d58 <SPI_SendByte>
  for (vCounter = 0; vCounter<512; vCounter++) SPI_SendByte(buff[vCounter]); // Write data to the SD
 8003f6e:	2300      	movs	r3, #0
 8003f70:	81fb      	strh	r3, [r7, #14]
 8003f72:	e009      	b.n	8003f88 <SD_SPI_Write_Block+0x44>
 8003f74:	89fb      	ldrh	r3, [r7, #14]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	4413      	add	r3, r2
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff feeb 	bl	8003d58 <SPI_SendByte>
 8003f82:	89fb      	ldrh	r3, [r7, #14]
 8003f84:	3301      	adds	r3, #1
 8003f86:	81fb      	strh	r3, [r7, #14]
 8003f88:	89fb      	ldrh	r3, [r7, #14]
 8003f8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f8e:	d3f1      	bcc.n	8003f74 <SD_SPI_Write_Block+0x30>
  SPI_Release();  // Skip CRC
 8003f90:	f7ff fefc 	bl	8003d8c <SPI_Release>
  SPI_Release();
 8003f94:	f7ff fefa 	bl	8003d8c <SPI_Release>
  vResult = SPI_ReceiveByte();
 8003f98:	f7ff feeb 	bl	8003d72 <SPI_ReceiveByte>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	737b      	strb	r3, [r7, #13]
  if((vResult & 0x05) != 0x05) return 6; // Error  (datasheet p. 111)
 8003fa0:	7b7b      	ldrb	r3, [r7, #13]
 8003fa2:	f003 0305 	and.w	r3, r3, #5
 8003fa6:	2b05      	cmp	r3, #5
 8003fa8:	d001      	beq.n	8003fae <SD_SPI_Write_Block+0x6a>
 8003faa:	2306      	movs	r3, #6
 8003fac:	e018      	b.n	8003fe0 <SD_SPI_Write_Block+0x9c>

  vCounter = 0;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	81fb      	strh	r3, [r7, #14]
  do {
	  vResult=SPI_ReceiveByte();
 8003fb2:	f7ff fede 	bl	8003d72 <SPI_ReceiveByte>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	737b      	strb	r3, [r7, #13]
	  vCounter++;
 8003fba:	89fb      	ldrh	r3, [r7, #14]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	81fb      	strh	r3, [r7, #14]
  } while ( (vResult != 0xFF)&&(vCounter<0xFFFF) );		//Wait till BUSY mode is finished
 8003fc0:	7b7b      	ldrb	r3, [r7, #13]
 8003fc2:	2bff      	cmp	r3, #255	; 0xff
 8003fc4:	d004      	beq.n	8003fd0 <SD_SPI_Write_Block+0x8c>
 8003fc6:	89fb      	ldrh	r3, [r7, #14]
 8003fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d1f0      	bne.n	8003fb2 <SD_SPI_Write_Block+0x6e>
  if (vCounter>=0xFFFF) return 6;		// Error
 8003fd0:	89fb      	ldrh	r3, [r7, #14]
 8003fd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d101      	bne.n	8003fde <SD_SPI_Write_Block+0x9a>
 8003fda:	2306      	movs	r3, #6
 8003fdc:	e000      	b.n	8003fe0 <SD_SPI_Write_Block+0x9c>

  return 0;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <SD_SPI_GetFileInfo>:
}

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_GetFileInfo(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
	uint8_t vResult;
	DWORD free_clusters, free_sectors, total_sectors;

	if(f_mount(&SDFatFs, (TCHAR const*)USER_Path, 0))
 8003fee:	2200      	movs	r2, #0
 8003ff0:	4964      	ldr	r1, [pc, #400]	; (8004184 <SD_SPI_GetFileInfo+0x19c>)
 8003ff2:	4865      	ldr	r0, [pc, #404]	; (8004188 <SD_SPI_GetFileInfo+0x1a0>)
 8003ff4:	f00b fcfa 	bl	800f9ec <f_mount>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <SD_SPI_GetFileInfo+0x1c>
	{
		SD_Error_Handler();
 8003ffe:	f000 f8e3 	bl	80041c8 <SD_Error_Handler>
 8004002:	e038      	b.n	8004076 <SD_SPI_GetFileInfo+0x8e>
	}
	else
	{
		vResult = f_opendir(&sDirectory, "/");		// "/" - directory name to open
 8004004:	4961      	ldr	r1, [pc, #388]	; (800418c <SD_SPI_GetFileInfo+0x1a4>)
 8004006:	4862      	ldr	r0, [pc, #392]	; (8004190 <SD_SPI_GetFileInfo+0x1a8>)
 8004008:	f00c fb2d 	bl	8010666 <f_opendir>
 800400c:	4603      	mov	r3, r0
 800400e:	73fb      	strb	r3, [r7, #15]

		if (vResult == FR_OK)
 8004010:	7bfb      	ldrb	r3, [r7, #15]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d12c      	bne.n	8004070 <SD_SPI_GetFileInfo+0x88>
		{
			while(1)
			{
				vResult = f_readdir(&sDirectory, &sFileInfo);
 8004016:	495f      	ldr	r1, [pc, #380]	; (8004194 <SD_SPI_GetFileInfo+0x1ac>)
 8004018:	485d      	ldr	r0, [pc, #372]	; (8004190 <SD_SPI_GetFileInfo+0x1a8>)
 800401a:	f00c fbbd 	bl	8010798 <f_readdir>
 800401e:	4603      	mov	r3, r0
 8004020:	73fb      	strb	r3, [r7, #15]

				if ((vResult == FR_OK) && (sFileInfo.fname[0]))
 8004022:	7bfb      	ldrb	r3, [r7, #15]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d123      	bne.n	8004070 <SD_SPI_GetFileInfo+0x88>
 8004028:	4b5a      	ldr	r3, [pc, #360]	; (8004194 <SD_SPI_GetFileInfo+0x1ac>)
 800402a:	7d9b      	ldrb	r3, [r3, #22]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01f      	beq.n	8004070 <SD_SPI_GetFileInfo+0x88>
				{
					HAL_UART_Transmit(&huart3, (uint8_t*)sFileInfo.fname, strlen((char*)sFileInfo.fname), 0x1000);
 8004030:	4859      	ldr	r0, [pc, #356]	; (8004198 <SD_SPI_GetFileInfo+0x1b0>)
 8004032:	f7fc f8cd 	bl	80001d0 <strlen>
 8004036:	4603      	mov	r3, r0
 8004038:	b29a      	uxth	r2, r3
 800403a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800403e:	4956      	ldr	r1, [pc, #344]	; (8004198 <SD_SPI_GetFileInfo+0x1b0>)
 8004040:	4856      	ldr	r0, [pc, #344]	; (800419c <SD_SPI_GetFileInfo+0x1b4>)
 8004042:	f004 ffbe 	bl	8008fc2 <HAL_UART_Transmit>

					if(sFileInfo.fattrib & AM_DIR)
 8004046:	4b53      	ldr	r3, [pc, #332]	; (8004194 <SD_SPI_GetFileInfo+0x1ac>)
 8004048:	7a1b      	ldrb	r3, [r3, #8]
 800404a:	f003 0310 	and.w	r3, r3, #16
 800404e:	2b00      	cmp	r3, #0
 8004050:	d006      	beq.n	8004060 <SD_SPI_GetFileInfo+0x78>
					{
						HAL_UART_Transmit(&huart3, (uint8_t*)"  [DIR]", 7, 0x1000);
 8004052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004056:	2207      	movs	r2, #7
 8004058:	4951      	ldr	r1, [pc, #324]	; (80041a0 <SD_SPI_GetFileInfo+0x1b8>)
 800405a:	4850      	ldr	r0, [pc, #320]	; (800419c <SD_SPI_GetFileInfo+0x1b4>)
 800405c:	f004 ffb1 	bl	8008fc2 <HAL_UART_Transmit>
					}
				}
				else break;

				HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, 0x1000);
 8004060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004064:	2202      	movs	r2, #2
 8004066:	494f      	ldr	r1, [pc, #316]	; (80041a4 <SD_SPI_GetFileInfo+0x1bc>)
 8004068:	484c      	ldr	r0, [pc, #304]	; (800419c <SD_SPI_GetFileInfo+0x1b4>)
 800406a:	f004 ffaa 	bl	8008fc2 <HAL_UART_Transmit>
				vResult = f_readdir(&sDirectory, &sFileInfo);
 800406e:	e7d2      	b.n	8004016 <SD_SPI_GetFileInfo+0x2e>
			}
		}
		f_closedir(&sDirectory);
 8004070:	4847      	ldr	r0, [pc, #284]	; (8004190 <SD_SPI_GetFileInfo+0x1a8>)
 8004072:	f00c fb6b 	bl	801074c <f_closedir>
	}

	f_getfree("/", &free_clusters, &fs);
 8004076:	463b      	mov	r3, r7
 8004078:	4a4b      	ldr	r2, [pc, #300]	; (80041a8 <SD_SPI_GetFileInfo+0x1c0>)
 800407a:	4619      	mov	r1, r3
 800407c:	4843      	ldr	r0, [pc, #268]	; (800418c <SD_SPI_GetFileInfo+0x1a4>)
 800407e:	f00c fbc8 	bl	8010812 <f_getfree>

	sprintf(aStringBuffer, "free_clusters: %lu\r\n", free_clusters);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	461a      	mov	r2, r3
 8004086:	4949      	ldr	r1, [pc, #292]	; (80041ac <SD_SPI_GetFileInfo+0x1c4>)
 8004088:	4849      	ldr	r0, [pc, #292]	; (80041b0 <SD_SPI_GetFileInfo+0x1c8>)
 800408a:	f00d fa57 	bl	801153c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 800408e:	4848      	ldr	r0, [pc, #288]	; (80041b0 <SD_SPI_GetFileInfo+0x1c8>)
 8004090:	f7fc f89e 	bl	80001d0 <strlen>
 8004094:	4603      	mov	r3, r0
 8004096:	b29a      	uxth	r2, r3
 8004098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800409c:	4944      	ldr	r1, [pc, #272]	; (80041b0 <SD_SPI_GetFileInfo+0x1c8>)
 800409e:	483f      	ldr	r0, [pc, #252]	; (800419c <SD_SPI_GetFileInfo+0x1b4>)
 80040a0:	f004 ff8f 	bl	8008fc2 <HAL_UART_Transmit>

	sprintf(aStringBuffer,"n_fatent: %lu\r\n",fs->n_fatent);
 80040a4:	4b40      	ldr	r3, [pc, #256]	; (80041a8 <SD_SPI_GetFileInfo+0x1c0>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	461a      	mov	r2, r3
 80040ac:	4941      	ldr	r1, [pc, #260]	; (80041b4 <SD_SPI_GetFileInfo+0x1cc>)
 80040ae:	4840      	ldr	r0, [pc, #256]	; (80041b0 <SD_SPI_GetFileInfo+0x1c8>)
 80040b0:	f00d fa44 	bl	801153c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 80040b4:	483e      	ldr	r0, [pc, #248]	; (80041b0 <SD_SPI_GetFileInfo+0x1c8>)
 80040b6:	f7fc f88b 	bl	80001d0 <strlen>
 80040ba:	4603      	mov	r3, r0
 80040bc:	b29a      	uxth	r2, r3
 80040be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040c2:	493b      	ldr	r1, [pc, #236]	; (80041b0 <SD_SPI_GetFileInfo+0x1c8>)
 80040c4:	4835      	ldr	r0, [pc, #212]	; (800419c <SD_SPI_GetFileInfo+0x1b4>)
 80040c6:	f004 ff7c 	bl	8008fc2 <HAL_UART_Transmit>

	sprintf(aStringBuffer,"fs_csize: %d\r\n",fs->csize);
 80040ca:	4b37      	ldr	r3, [pc, #220]	; (80041a8 <SD_SPI_GetFileInfo+0x1c0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	895b      	ldrh	r3, [r3, #10]
 80040d0:	461a      	mov	r2, r3
 80040d2:	4939      	ldr	r1, [pc, #228]	; (80041b8 <SD_SPI_GetFileInfo+0x1d0>)
 80040d4:	4836      	ldr	r0, [pc, #216]	; (80041b0 <SD_SPI_GetFileInfo+0x1c8>)
 80040d6:	f00d fa31 	bl	801153c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 80040da:	4835      	ldr	r0, [pc, #212]	; (80041b0 <SD_SPI_GetFileInfo+0x1c8>)
 80040dc:	f7fc f878 	bl	80001d0 <strlen>
 80040e0:	4603      	mov	r3, r0
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040e8:	4931      	ldr	r1, [pc, #196]	; (80041b0 <SD_SPI_GetFileInfo+0x1c8>)
 80040ea:	482c      	ldr	r0, [pc, #176]	; (800419c <SD_SPI_GetFileInfo+0x1b4>)
 80040ec:	f004 ff69 	bl	8008fc2 <HAL_UART_Transmit>

	total_sectors = (fs->n_fatent - 2) * fs->csize;
 80040f0:	4b2d      	ldr	r3, [pc, #180]	; (80041a8 <SD_SPI_GetFileInfo+0x1c0>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	3b02      	subs	r3, #2
 80040f8:	4a2b      	ldr	r2, [pc, #172]	; (80041a8 <SD_SPI_GetFileInfo+0x1c0>)
 80040fa:	6812      	ldr	r2, [r2, #0]
 80040fc:	8952      	ldrh	r2, [r2, #10]
 80040fe:	fb02 f303 	mul.w	r3, r2, r3
 8004102:	60bb      	str	r3, [r7, #8]
	sprintf(aStringBuffer, "total_sectors: %lu\r\n", total_sectors);
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	492d      	ldr	r1, [pc, #180]	; (80041bc <SD_SPI_GetFileInfo+0x1d4>)
 8004108:	4829      	ldr	r0, [pc, #164]	; (80041b0 <SD_SPI_GetFileInfo+0x1c8>)
 800410a:	f00d fa17 	bl	801153c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 800410e:	4828      	ldr	r0, [pc, #160]	; (80041b0 <SD_SPI_GetFileInfo+0x1c8>)
 8004110:	f7fc f85e 	bl	80001d0 <strlen>
 8004114:	4603      	mov	r3, r0
 8004116:	b29a      	uxth	r2, r3
 8004118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800411c:	4924      	ldr	r1, [pc, #144]	; (80041b0 <SD_SPI_GetFileInfo+0x1c8>)
 800411e:	481f      	ldr	r0, [pc, #124]	; (800419c <SD_SPI_GetFileInfo+0x1b4>)
 8004120:	f004 ff4f 	bl	8008fc2 <HAL_UART_Transmit>

	free_sectors = free_clusters * fs->csize;
 8004124:	4b20      	ldr	r3, [pc, #128]	; (80041a8 <SD_SPI_GetFileInfo+0x1c0>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	895b      	ldrh	r3, [r3, #10]
 800412a:	461a      	mov	r2, r3
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	fb02 f303 	mul.w	r3, r2, r3
 8004132:	607b      	str	r3, [r7, #4]
	sprintf(aStringBuffer, "free_sectors: %lu\r\n", free_sectors);
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	4922      	ldr	r1, [pc, #136]	; (80041c0 <SD_SPI_GetFileInfo+0x1d8>)
 8004138:	481d      	ldr	r0, [pc, #116]	; (80041b0 <SD_SPI_GetFileInfo+0x1c8>)
 800413a:	f00d f9ff 	bl	801153c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 800413e:	481c      	ldr	r0, [pc, #112]	; (80041b0 <SD_SPI_GetFileInfo+0x1c8>)
 8004140:	f7fc f846 	bl	80001d0 <strlen>
 8004144:	4603      	mov	r3, r0
 8004146:	b29a      	uxth	r2, r3
 8004148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800414c:	4918      	ldr	r1, [pc, #96]	; (80041b0 <SD_SPI_GetFileInfo+0x1c8>)
 800414e:	4813      	ldr	r0, [pc, #76]	; (800419c <SD_SPI_GetFileInfo+0x1b4>)
 8004150:	f004 ff37 	bl	8008fc2 <HAL_UART_Transmit>

	sprintf(aStringBuffer, "%lu KB total drive space.\r\n%lu KB available.\r\n", (free_sectors / 2), (total_sectors / 2));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	085a      	lsrs	r2, r3, #1
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	085b      	lsrs	r3, r3, #1
 800415c:	4919      	ldr	r1, [pc, #100]	; (80041c4 <SD_SPI_GetFileInfo+0x1dc>)
 800415e:	4814      	ldr	r0, [pc, #80]	; (80041b0 <SD_SPI_GetFileInfo+0x1c8>)
 8004160:	f00d f9ec 	bl	801153c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)aStringBuffer, strlen(aStringBuffer), 0x1000);
 8004164:	4812      	ldr	r0, [pc, #72]	; (80041b0 <SD_SPI_GetFileInfo+0x1c8>)
 8004166:	f7fc f833 	bl	80001d0 <strlen>
 800416a:	4603      	mov	r3, r0
 800416c:	b29a      	uxth	r2, r3
 800416e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004172:	490f      	ldr	r1, [pc, #60]	; (80041b0 <SD_SPI_GetFileInfo+0x1c8>)
 8004174:	4809      	ldr	r0, [pc, #36]	; (800419c <SD_SPI_GetFileInfo+0x1b4>)
 8004176:	f004 ff24 	bl	8008fc2 <HAL_UART_Transmit>

	return 0;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	200018fc 	.word	0x200018fc
 8004188:	20000598 	.word	0x20000598
 800418c:	08011cc4 	.word	0x08011cc4
 8004190:	20002a50 	.word	0x20002a50
 8004194:	20002938 	.word	0x20002938
 8004198:	2000294e 	.word	0x2000294e
 800419c:	200018a8 	.word	0x200018a8
 80041a0:	08011cc8 	.word	0x08011cc8
 80041a4:	08011cd0 	.word	0x08011cd0
 80041a8:	20001900 	.word	0x20001900
 80041ac:	08011cd4 	.word	0x08011cd4
 80041b0:	20002a84 	.word	0x20002a84
 80041b4:	08011cec 	.word	0x08011cec
 80041b8:	08011cfc 	.word	0x08011cfc
 80041bc:	08011d0c 	.word	0x08011d0c
 80041c0:	08011d24 	.word	0x08011d24
 80041c4:	08011d38 	.word	0x08011d38

080041c8 <SD_Error_Handler>:

/****************************************************************************************************************/
/****************************************************************************************************************/
void SD_Error_Handler(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
	LED_Red_ON;
 80041cc:	2201      	movs	r2, #1
 80041ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80041d2:	4802      	ldr	r0, [pc, #8]	; (80041dc <SD_Error_Handler+0x14>)
 80041d4:	f001 f996 	bl	8005504 <HAL_GPIO_WritePin>
	//while(1);
}
 80041d8:	bf00      	nop
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40020c00 	.word	0x40020c00

080041e0 <open_bin_file>:
// ------------------------------------------------------------------------------------------------
/*
	Open file, calculate how many frames in selected file and show all frames.
 */
uint8_t open_bin_file(char* name)
{
 80041e0:	b5b0      	push	{r4, r5, r7, lr}
 80041e2:	f5ad 7d7a 	sub.w	sp, sp, #1000	; 0x3e8
 80041e6:	af02      	add	r7, sp, #8
 80041e8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80041ec:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 80041f0:	6018      	str	r0, [r3, #0]
	int i = 0;
 80041f2:	2300      	movs	r3, #0
 80041f4:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4

	uint16_t vTemp = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	f8a7 33d2 	strh.w	r3, [r7, #978]	; 0x3d2
	uint32_t vIndex = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
	static uint32_t vFileSize = 0;
	uint32_t vBytesReadCounter;

	uint8_t frame_buffer[949] = {0};
 8004204:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8004208:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	3304      	adds	r3, #4
 8004212:	f240 32b1 	movw	r2, #945	; 0x3b1
 8004216:	2100      	movs	r1, #0
 8004218:	4618      	mov	r0, r3
 800421a:	f00d f897 	bl	801134c <memset>
	int size_buf_for_read = sizeof(frame_buffer);
 800421e:	f240 33b5 	movw	r3, #949	; 0x3b5
 8004222:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
	static int how_many_frames = 0;

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004226:	2100      	movs	r1, #0
 8004228:	487f      	ldr	r0, [pc, #508]	; (8004428 <open_bin_file+0x248>)
 800422a:	f003 fe47 	bl	8007ebc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800422e:	2104      	movs	r1, #4
 8004230:	487d      	ldr	r0, [pc, #500]	; (8004428 <open_bin_file+0x248>)
 8004232:	f003 fe43 	bl	8007ebc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8004236:	2108      	movs	r1, #8
 8004238:	487b      	ldr	r0, [pc, #492]	; (8004428 <open_bin_file+0x248>)
 800423a:	f003 fe3f 	bl	8007ebc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800423e:	210c      	movs	r1, #12
 8004240:	4879      	ldr	r0, [pc, #484]	; (8004428 <open_bin_file+0x248>)
 8004242:	f003 fe3b 	bl	8007ebc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004246:	2100      	movs	r1, #0
 8004248:	4878      	ldr	r0, [pc, #480]	; (800442c <open_bin_file+0x24c>)
 800424a:	f003 fe37 	bl	8007ebc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800424e:	2104      	movs	r1, #4
 8004250:	4876      	ldr	r0, [pc, #472]	; (800442c <open_bin_file+0x24c>)
 8004252:	f003 fe33 	bl	8007ebc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8004256:	2108      	movs	r1, #8
 8004258:	4874      	ldr	r0, [pc, #464]	; (800442c <open_bin_file+0x24c>)
 800425a:	f003 fe2f 	bl	8007ebc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800425e:	210c      	movs	r1, #12
 8004260:	4872      	ldr	r0, [pc, #456]	; (800442c <open_bin_file+0x24c>)
 8004262:	f003 fe2b 	bl	8007ebc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8004266:	2104      	movs	r1, #4
 8004268:	4871      	ldr	r0, [pc, #452]	; (8004430 <open_bin_file+0x250>)
 800426a:	f003 fe27 	bl	8007ebc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800426e:	2108      	movs	r1, #8
 8004270:	486f      	ldr	r0, [pc, #444]	; (8004430 <open_bin_file+0x250>)
 8004272:	f003 fe23 	bl	8007ebc <HAL_TIM_PWM_Start>



	static int open_file_flag = 0;

	if(open_file_flag == 0)		// if file wasn't opened before
 8004276:	4b6f      	ldr	r3, [pc, #444]	; (8004434 <open_bin_file+0x254>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d12a      	bne.n	80042d4 <open_bin_file+0xf4>
	{
		if(f_mount(&SDFatFs, (TCHAR const*)USER_Path, 0))
 800427e:	2200      	movs	r2, #0
 8004280:	496d      	ldr	r1, [pc, #436]	; (8004438 <open_bin_file+0x258>)
 8004282:	486e      	ldr	r0, [pc, #440]	; (800443c <open_bin_file+0x25c>)
 8004284:	f00b fbb2 	bl	800f9ec <f_mount>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <open_bin_file+0xb4>
		{
			SD_Error_Handler();
 800428e:	f7ff ff9b 	bl	80041c8 <SD_Error_Handler>
 8004292:	e1b7      	b.n	8004604 <open_bin_file+0x424>
		}
		else
		{
			if(f_open(&MyFile, name, FA_READ))
 8004294:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8004298:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800429c:	2201      	movs	r2, #1
 800429e:	6819      	ldr	r1, [r3, #0]
 80042a0:	4867      	ldr	r0, [pc, #412]	; (8004440 <open_bin_file+0x260>)
 80042a2:	f00b fbe9 	bl	800fa78 <f_open>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d002      	beq.n	80042b2 <open_bin_file+0xd2>
			{
				SD_Error_Handler();
 80042ac:	f7ff ff8c 	bl	80041c8 <SD_Error_Handler>
 80042b0:	e1a8      	b.n	8004604 <open_bin_file+0x424>
			}
			else
			{
				vFileSize = MyFile.obj.objsize;									// Get size of current file
 80042b2:	4b63      	ldr	r3, [pc, #396]	; (8004440 <open_bin_file+0x260>)
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	4a63      	ldr	r2, [pc, #396]	; (8004444 <open_bin_file+0x264>)
 80042b8:	6013      	str	r3, [r2, #0]
				how_many_frames = vFileSize/frame_size;							// How many frames into current file
 80042ba:	4b62      	ldr	r3, [pc, #392]	; (8004444 <open_bin_file+0x264>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a62      	ldr	r2, [pc, #392]	; (8004448 <open_bin_file+0x268>)
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80042c6:	461a      	mov	r2, r3
 80042c8:	4b60      	ldr	r3, [pc, #384]	; (800444c <open_bin_file+0x26c>)
 80042ca:	601a      	str	r2, [r3, #0]

				open_file_flag = 1;
 80042cc:	4b59      	ldr	r3, [pc, #356]	; (8004434 <open_bin_file+0x254>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	e197      	b.n	8004604 <open_bin_file+0x424>
	}
	else
	{
		static int h = 0;

		if(h >= how_many_frames)
 80042d4:	4b5e      	ldr	r3, [pc, #376]	; (8004450 <open_bin_file+0x270>)
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	4b5c      	ldr	r3, [pc, #368]	; (800444c <open_bin_file+0x26c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	429a      	cmp	r2, r3
 80042de:	f2c0 8184 	blt.w	80045ea <open_bin_file+0x40a>
		{
			f_close(&MyFile);
 80042e2:	4857      	ldr	r0, [pc, #348]	; (8004440 <open_bin_file+0x260>)
 80042e4:	f00b ff71 	bl	80101ca <f_close>
			open_file_flag = 0;
 80042e8:	4b52      	ldr	r3, [pc, #328]	; (8004434 <open_bin_file+0x254>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	601a      	str	r2, [r3, #0]
			h = 0;
 80042ee:	4b58      	ldr	r3, [pc, #352]	; (8004450 <open_bin_file+0x270>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]

			return 1;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e185      	b.n	8004604 <open_bin_file+0x424>
		}

		for( h; ((h < how_many_frames) && (interrupt_flag == 1)); h++)
		{
			HAL_GPIO_TogglePin(GPIOE, TEST_OUTPUT_1_Pin);					// For measure
 80042f8:	2104      	movs	r1, #4
 80042fa:	4856      	ldr	r0, [pc, #344]	; (8004454 <open_bin_file+0x274>)
 80042fc:	f001 f91b 	bl	8005536 <HAL_GPIO_TogglePin>

			if(interrupt_animation_flag == true)						// If was sent "STOP animation" command. 'z' key
 8004300:	4b55      	ldr	r3, [pc, #340]	; (8004458 <open_bin_file+0x278>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <open_bin_file+0x13e>
			{
				interrupt_animation_flag = false;
 8004308:	4b53      	ldr	r3, [pc, #332]	; (8004458 <open_bin_file+0x278>)
 800430a:	2200      	movs	r2, #0
 800430c:	701a      	strb	r2, [r3, #0]
				stop_light_all_turn_off();
 800430e:	f7fc fd4f 	bl	8000db0 <stop_light_all_turn_off>
				turn_off_left_and_right_dtript();
 8004312:	f7fe f901 	bl	8002518 <turn_off_left_and_right_dtript>
				HAL_Delay(100);
 8004316:	2064      	movs	r0, #100	; 0x64
 8004318:	f000 fa20 	bl	800475c <HAL_Delay>

				break;
 800431c:	e170      	b.n	8004600 <open_bin_file+0x420>
			}

			memset(frame_buffer, 0, sizeof(frame_buffer));
 800431e:	f107 0308 	add.w	r3, r7, #8
 8004322:	f240 32b5 	movw	r2, #949	; 0x3b5
 8004326:	2100      	movs	r1, #0
 8004328:	4618      	mov	r0, r3
 800432a:	f00d f80f 	bl	801134c <memset>

			f_lseek(&MyFile, h + ((frame_size - 1)*h));						// shift on one frame
 800432e:	4b46      	ldr	r3, [pc, #280]	; (8004448 <open_bin_file+0x268>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3b01      	subs	r3, #1
 8004334:	4a46      	ldr	r2, [pc, #280]	; (8004450 <open_bin_file+0x270>)
 8004336:	6812      	ldr	r2, [r2, #0]
 8004338:	fb03 f202 	mul.w	r2, r3, r2
 800433c:	4b44      	ldr	r3, [pc, #272]	; (8004450 <open_bin_file+0x270>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4413      	add	r3, r2
 8004342:	4619      	mov	r1, r3
 8004344:	483e      	ldr	r0, [pc, #248]	; (8004440 <open_bin_file+0x260>)
 8004346:	f00b ff6a 	bl	801021e <f_lseek>
			f_read(&MyFile, aBuffer, vTemp, (UINT *)&vBytesReadCounter);
 800434a:	f8b7 23d2 	ldrh.w	r2, [r7, #978]	; 0x3d2
 800434e:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8004352:	4942      	ldr	r1, [pc, #264]	; (800445c <open_bin_file+0x27c>)
 8004354:	483a      	ldr	r0, [pc, #232]	; (8004440 <open_bin_file+0x260>)
 8004356:	f00b fd5b 	bl	800fe10 <f_read>
			f_gets(frame_buffer, size_buf_for_read, &MyFile);     			// Read one fraime into buffer
 800435a:	f107 0308 	add.w	r3, r7, #8
 800435e:	4a38      	ldr	r2, [pc, #224]	; (8004440 <open_bin_file+0x260>)
 8004360:	f8d7 13c8 	ldr.w	r1, [r7, #968]	; 0x3c8
 8004364:	4618      	mov	r0, r3
 8004366:	f00c fb09 	bl	801097c <f_gets>

			if((h > 316) && (h < 330))			// Place in 7.bin file where somsing wrong
 800436a:	4b39      	ldr	r3, [pc, #228]	; (8004450 <open_bin_file+0x270>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8004372:	dd07      	ble.n	8004384 <open_bin_file+0x1a4>
 8004374:	4b36      	ldr	r3, [pc, #216]	; (8004450 <open_bin_file+0x270>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 800437c:	da02      	bge.n	8004384 <open_bin_file+0x1a4>
			{
				int ggg = 99;
 800437e:	2363      	movs	r3, #99	; 0x63
 8004380:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
			}

			// SET Left RGBW LEDs
			uint16_t number_of_rgbw_leds = 0;
 8004384:	2300      	movs	r3, #0
 8004386:	f8a7 33de 	strh.w	r3, [r7, #990]	; 0x3de
			int k = 0;
 800438a:	2300      	movs	r3, #0
 800438c:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
			for(k = end_left_led; k >= strat_left_led; k--)		// 84 LEDs
 8004390:	4b33      	ldr	r3, [pc, #204]	; (8004460 <open_bin_file+0x280>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 8004398:	e037      	b.n	800440a <open_bin_file+0x22a>
			{
				if(k%4 == 0)
 800439a:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d12c      	bne.n	8004400 <open_bin_file+0x220>
				{
					set_left_one_rgbw_led(number_of_rgbw_leds, frame_buffer[k], frame_buffer[k+1], frame_buffer[k+2], frame_buffer[k+3]);
 80043a6:	f8b7 33de 	ldrh.w	r3, [r7, #990]	; 0x3de
 80043aa:	b2d8      	uxtb	r0, r3
 80043ac:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80043b0:	f5a3 7276 	sub.w	r2, r3, #984	; 0x3d8
 80043b4:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 80043b8:	4413      	add	r3, r2
 80043ba:	7819      	ldrb	r1, [r3, #0]
 80043bc:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 80043c0:	3301      	adds	r3, #1
 80043c2:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80043c6:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 80043ca:	5cd4      	ldrb	r4, [r2, r3]
 80043cc:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 80043d0:	3302      	adds	r3, #2
 80043d2:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80043d6:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 80043da:	5cd5      	ldrb	r5, [r2, r3]
 80043dc:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 80043e0:	3303      	adds	r3, #3
 80043e2:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80043e6:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 80043ea:	5cd3      	ldrb	r3, [r2, r3]
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	462b      	mov	r3, r5
 80043f0:	4622      	mov	r2, r4
 80043f2:	f7fe f8ea 	bl	80025ca <set_left_one_rgbw_led>
					number_of_rgbw_leds++;
 80043f6:	f8b7 33de 	ldrh.w	r3, [r7, #990]	; 0x3de
 80043fa:	3301      	adds	r3, #1
 80043fc:	f8a7 33de 	strh.w	r3, [r7, #990]	; 0x3de
			for(k = end_left_led; k >= strat_left_led; k--)		// 84 LEDs
 8004400:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8004404:	3b01      	subs	r3, #1
 8004406:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 800440a:	4b16      	ldr	r3, [pc, #88]	; (8004464 <open_bin_file+0x284>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8004412:	429a      	cmp	r2, r3
 8004414:	dac1      	bge.n	800439a <open_bin_file+0x1ba>
				}
			}

			// SET Right RGBW LEDs
			number_of_rgbw_leds = 0;
 8004416:	2300      	movs	r3, #0
 8004418:	f8a7 33de 	strh.w	r3, [r7, #990]	; 0x3de
			for(k = end_ritht_led; k >= strat_right_led; k--)
 800441c:	4b12      	ldr	r3, [pc, #72]	; (8004468 <open_bin_file+0x288>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 8004424:	e05a      	b.n	80044dc <open_bin_file+0x2fc>
 8004426:	bf00      	nop
 8004428:	20001638 	.word	0x20001638
 800442c:	20001680 	.word	0x20001680
 8004430:	200016c8 	.word	0x200016c8
 8004434:	20002cc0 	.word	0x20002cc0
 8004438:	200018fc 	.word	0x200018fc
 800443c:	20000598 	.word	0x20000598
 8004440:	20001904 	.word	0x20001904
 8004444:	20002cc4 	.word	0x20002cc4
 8004448:	20000010 	.word	0x20000010
 800444c:	20002cc8 	.word	0x20002cc8
 8004450:	20002ccc 	.word	0x20002ccc
 8004454:	40021000 	.word	0x40021000
 8004458:	200015d2 	.word	0x200015d2
 800445c:	20002ac0 	.word	0x20002ac0
 8004460:	2000001c 	.word	0x2000001c
 8004464:	20000018 	.word	0x20000018
 8004468:	20000024 	.word	0x20000024
			{
				if(k%4 == 0)
 800446c:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8004470:	f003 0303 	and.w	r3, r3, #3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d12c      	bne.n	80044d2 <open_bin_file+0x2f2>
				{
					set_right_one_rgbw_led(number_of_rgbw_leds, frame_buffer[k], frame_buffer[k+1], frame_buffer[k+2], frame_buffer[k+3]);
 8004478:	f8b7 33de 	ldrh.w	r3, [r7, #990]	; 0x3de
 800447c:	b2d8      	uxtb	r0, r3
 800447e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8004482:	f5a3 7276 	sub.w	r2, r3, #984	; 0x3d8
 8004486:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 800448a:	4413      	add	r3, r2
 800448c:	7819      	ldrb	r1, [r3, #0]
 800448e:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8004492:	3301      	adds	r3, #1
 8004494:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8004498:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 800449c:	5cd4      	ldrb	r4, [r2, r3]
 800449e:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 80044a2:	3302      	adds	r3, #2
 80044a4:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80044a8:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 80044ac:	5cd5      	ldrb	r5, [r2, r3]
 80044ae:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 80044b2:	3303      	adds	r3, #3
 80044b4:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80044b8:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 80044bc:	5cd3      	ldrb	r3, [r2, r3]
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	462b      	mov	r3, r5
 80044c2:	4622      	mov	r2, r4
 80044c4:	f7fe f8a2 	bl	800260c <set_right_one_rgbw_led>
					number_of_rgbw_leds++;
 80044c8:	f8b7 33de 	ldrh.w	r3, [r7, #990]	; 0x3de
 80044cc:	3301      	adds	r3, #1
 80044ce:	f8a7 33de 	strh.w	r3, [r7, #990]	; 0x3de
			for(k = end_ritht_led; k >= strat_right_led; k--)
 80044d2:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 80044d6:	3b01      	subs	r3, #1
 80044d8:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 80044dc:	4b4c      	ldr	r3, [pc, #304]	; (8004610 <open_bin_file+0x430>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 80044e4:	429a      	cmp	r2, r3
 80044e6:	dac1      	bge.n	800446c <open_bin_file+0x28c>
			}

			// make_delay(267);

			// SET RED LEDs
			set_duty_cycle_stop_left_5(frame_buffer[start_evenled + 16 ]);
 80044e8:	4b4a      	ldr	r3, [pc, #296]	; (8004614 <open_bin_file+0x434>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3310      	adds	r3, #16
 80044ee:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80044f2:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 80044f6:	5cd3      	ldrb	r3, [r2, r3]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fc fbf9 	bl	8000cf0 <set_duty_cycle_stop_left_5>
			set_duty_cycle_stop_left_4(frame_buffer[start_evenled + 12 ]);
 80044fe:	4b45      	ldr	r3, [pc, #276]	; (8004614 <open_bin_file+0x434>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	330c      	adds	r3, #12
 8004504:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8004508:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 800450c:	5cd3      	ldrb	r3, [r2, r3]
 800450e:	4618      	mov	r0, r3
 8004510:	f7fc fbde 	bl	8000cd0 <set_duty_cycle_stop_left_4>
			set_duty_cycle_stop_left_3(frame_buffer[start_evenled + 8 ]);
 8004514:	4b3f      	ldr	r3, [pc, #252]	; (8004614 <open_bin_file+0x434>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3308      	adds	r3, #8
 800451a:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 800451e:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8004522:	5cd3      	ldrb	r3, [r2, r3]
 8004524:	4618      	mov	r0, r3
 8004526:	f7fc fbc3 	bl	8000cb0 <set_duty_cycle_stop_left_3>
			set_duty_cycle_stop_left_2(frame_buffer[start_evenled + 4 ]);
 800452a:	4b3a      	ldr	r3, [pc, #232]	; (8004614 <open_bin_file+0x434>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3304      	adds	r3, #4
 8004530:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8004534:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8004538:	5cd3      	ldrb	r3, [r2, r3]
 800453a:	4618      	mov	r0, r3
 800453c:	f7fc fba8 	bl	8000c90 <set_duty_cycle_stop_left_2>
			set_duty_cycle_stop_left_1(frame_buffer[start_evenled]);
 8004540:	4b34      	ldr	r3, [pc, #208]	; (8004614 <open_bin_file+0x434>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8004548:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 800454c:	5cd3      	ldrb	r3, [r2, r3]
 800454e:	4618      	mov	r0, r3
 8004550:	f7fc fb8e 	bl	8000c70 <set_duty_cycle_stop_left_1>

			set_duty_cycle_stop_ritht_1(frame_buffer[start_evenled + 20 ]);
 8004554:	4b2f      	ldr	r3, [pc, #188]	; (8004614 <open_bin_file+0x434>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3314      	adds	r3, #20
 800455a:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 800455e:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8004562:	5cd3      	ldrb	r3, [r2, r3]
 8004564:	4618      	mov	r0, r3
 8004566:	f7fc fbd3 	bl	8000d10 <set_duty_cycle_stop_ritht_1>
			set_duty_cycle_stop_ritht_2(frame_buffer[start_evenled + 24 ]);
 800456a:	4b2a      	ldr	r3, [pc, #168]	; (8004614 <open_bin_file+0x434>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3318      	adds	r3, #24
 8004570:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8004574:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8004578:	5cd3      	ldrb	r3, [r2, r3]
 800457a:	4618      	mov	r0, r3
 800457c:	f7fc fbd8 	bl	8000d30 <set_duty_cycle_stop_ritht_2>
			set_duty_cycle_stop_ritht_3(frame_buffer[start_evenled + 28 ]);
 8004580:	4b24      	ldr	r3, [pc, #144]	; (8004614 <open_bin_file+0x434>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	331c      	adds	r3, #28
 8004586:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 800458a:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 800458e:	5cd3      	ldrb	r3, [r2, r3]
 8004590:	4618      	mov	r0, r3
 8004592:	f7fc fbdd 	bl	8000d50 <set_duty_cycle_stop_ritht_3>
			set_duty_cycle_stop_ritht_4(frame_buffer[start_evenled + 32 ]);
 8004596:	4b1f      	ldr	r3, [pc, #124]	; (8004614 <open_bin_file+0x434>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3320      	adds	r3, #32
 800459c:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80045a0:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 80045a4:	5cd3      	ldrb	r3, [r2, r3]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fc fbe2 	bl	8000d70 <set_duty_cycle_stop_ritht_4>
			set_duty_cycle_stop_ritht_5(frame_buffer[start_evenled + 36 ]);
 80045ac:	4b19      	ldr	r3, [pc, #100]	; (8004614 <open_bin_file+0x434>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3324      	adds	r3, #36	; 0x24
 80045b2:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 80045b6:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 80045ba:	5cd3      	ldrb	r3, [r2, r3]
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fc fbe7 	bl	8000d90 <set_duty_cycle_stop_ritht_5>

			while (!ARGB_Show_left());  		// Update
 80045c2:	bf00      	nop
 80045c4:	f7fc ff3a 	bl	800143c <ARGB_Show_left>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0fa      	beq.n	80045c4 <open_bin_file+0x3e4>
			while (!ARGB_Show_right());  		// Update
 80045ce:	bf00      	nop
 80045d0:	f7fd f900 	bl	80017d4 <ARGB_Show_right>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0fa      	beq.n	80045d0 <open_bin_file+0x3f0>

			interrupt_flag = 0;				// Tim 13
 80045da:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <open_bin_file+0x438>)
 80045dc:	2200      	movs	r2, #0
 80045de:	701a      	strb	r2, [r3, #0]
		for( h; ((h < how_many_frames) && (interrupt_flag == 1)); h++)
 80045e0:	4b0e      	ldr	r3, [pc, #56]	; (800461c <open_bin_file+0x43c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3301      	adds	r3, #1
 80045e6:	4a0d      	ldr	r2, [pc, #52]	; (800461c <open_bin_file+0x43c>)
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	4b0c      	ldr	r3, [pc, #48]	; (800461c <open_bin_file+0x43c>)
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <open_bin_file+0x440>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	da04      	bge.n	8004600 <open_bin_file+0x420>
 80045f6:	4b08      	ldr	r3, [pc, #32]	; (8004618 <open_bin_file+0x438>)
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	f43f ae7c 	beq.w	80042f8 <open_bin_file+0x118>
		}
		return 0;
 8004600:	2300      	movs	r3, #0
 8004602:	e7ff      	b.n	8004604 <open_bin_file+0x424>
//		}
//	}
//	f_close(&MyFile);
//	return 0;

}
 8004604:	4618      	mov	r0, r3
 8004606:	f507 7778 	add.w	r7, r7, #992	; 0x3e0
 800460a:	46bd      	mov	sp, r7
 800460c:	bdb0      	pop	{r4, r5, r7, pc}
 800460e:	bf00      	nop
 8004610:	20000020 	.word	0x20000020
 8004614:	20000014 	.word	0x20000014
 8004618:	200015df 	.word	0x200015df
 800461c:	20002ccc 	.word	0x20002ccc
 8004620:	20002cc8 	.word	0x20002cc8

08004624 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004624:	f8df d034 	ldr.w	sp, [pc, #52]	; 800465c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004628:	480d      	ldr	r0, [pc, #52]	; (8004660 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800462a:	490e      	ldr	r1, [pc, #56]	; (8004664 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800462c:	4a0e      	ldr	r2, [pc, #56]	; (8004668 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800462e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004630:	e002      	b.n	8004638 <LoopCopyDataInit>

08004632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004636:	3304      	adds	r3, #4

08004638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800463a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800463c:	d3f9      	bcc.n	8004632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800463e:	4a0b      	ldr	r2, [pc, #44]	; (800466c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004640:	4c0b      	ldr	r4, [pc, #44]	; (8004670 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004644:	e001      	b.n	800464a <LoopFillZerobss>

08004646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004648:	3204      	adds	r2, #4

0800464a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800464a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800464c:	d3fb      	bcc.n	8004646 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800464e:	f7ff fa73 	bl	8003b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004652:	f00c fe47 	bl	80112e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004656:	f7fe f819 	bl	800268c <main>
  bx  lr    
 800465a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800465c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004664:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8004668:	08012264 	.word	0x08012264
  ldr r2, =_sbss
 800466c:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8004670:	20003600 	.word	0x20003600

08004674 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004674:	e7fe      	b.n	8004674 <ADC_IRQHandler>
	...

08004678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800467c:	4b0e      	ldr	r3, [pc, #56]	; (80046b8 <HAL_Init+0x40>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a0d      	ldr	r2, [pc, #52]	; (80046b8 <HAL_Init+0x40>)
 8004682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004686:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004688:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <HAL_Init+0x40>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a0a      	ldr	r2, [pc, #40]	; (80046b8 <HAL_Init+0x40>)
 800468e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004692:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004694:	4b08      	ldr	r3, [pc, #32]	; (80046b8 <HAL_Init+0x40>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a07      	ldr	r2, [pc, #28]	; (80046b8 <HAL_Init+0x40>)
 800469a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800469e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046a0:	2003      	movs	r0, #3
 80046a2:	f000 f94f 	bl	8004944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046a6:	2000      	movs	r0, #0
 80046a8:	f000 f808 	bl	80046bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046ac:	f7fe feac 	bl	8003408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	40023c00 	.word	0x40023c00

080046bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80046c4:	4b12      	ldr	r3, [pc, #72]	; (8004710 <HAL_InitTick+0x54>)
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	4b12      	ldr	r3, [pc, #72]	; (8004714 <HAL_InitTick+0x58>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	4619      	mov	r1, r3
 80046ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80046d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 f967 	bl	80049ae <HAL_SYSTICK_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e00e      	b.n	8004708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b0f      	cmp	r3, #15
 80046ee:	d80a      	bhi.n	8004706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046f0:	2200      	movs	r2, #0
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046f8:	f000 f92f 	bl	800495a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046fc:	4a06      	ldr	r2, [pc, #24]	; (8004718 <HAL_InitTick+0x5c>)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	e000      	b.n	8004708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
}
 8004708:	4618      	mov	r0, r3
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	2000000c 	.word	0x2000000c
 8004714:	2000002c 	.word	0x2000002c
 8004718:	20000028 	.word	0x20000028

0800471c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004720:	4b06      	ldr	r3, [pc, #24]	; (800473c <HAL_IncTick+0x20>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	461a      	mov	r2, r3
 8004726:	4b06      	ldr	r3, [pc, #24]	; (8004740 <HAL_IncTick+0x24>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4413      	add	r3, r2
 800472c:	4a04      	ldr	r2, [pc, #16]	; (8004740 <HAL_IncTick+0x24>)
 800472e:	6013      	str	r3, [r2, #0]
}
 8004730:	bf00      	nop
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	2000002c 	.word	0x2000002c
 8004740:	20002cd0 	.word	0x20002cd0

08004744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  return uwTick;
 8004748:	4b03      	ldr	r3, [pc, #12]	; (8004758 <HAL_GetTick+0x14>)
 800474a:	681b      	ldr	r3, [r3, #0]
}
 800474c:	4618      	mov	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	20002cd0 	.word	0x20002cd0

0800475c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004764:	f7ff ffee 	bl	8004744 <HAL_GetTick>
 8004768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004774:	d005      	beq.n	8004782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004776:	4b0a      	ldr	r3, [pc, #40]	; (80047a0 <HAL_Delay+0x44>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	461a      	mov	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4413      	add	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004782:	bf00      	nop
 8004784:	f7ff ffde 	bl	8004744 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	429a      	cmp	r2, r3
 8004792:	d8f7      	bhi.n	8004784 <HAL_Delay+0x28>
  {
  }
}
 8004794:	bf00      	nop
 8004796:	bf00      	nop
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	2000002c 	.word	0x2000002c

080047a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047b4:	4b0c      	ldr	r3, [pc, #48]	; (80047e8 <__NVIC_SetPriorityGrouping+0x44>)
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047c0:	4013      	ands	r3, r2
 80047c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047d6:	4a04      	ldr	r2, [pc, #16]	; (80047e8 <__NVIC_SetPriorityGrouping+0x44>)
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	60d3      	str	r3, [r2, #12]
}
 80047dc:	bf00      	nop
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	e000ed00 	.word	0xe000ed00

080047ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047f0:	4b04      	ldr	r3, [pc, #16]	; (8004804 <__NVIC_GetPriorityGrouping+0x18>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	0a1b      	lsrs	r3, r3, #8
 80047f6:	f003 0307 	and.w	r3, r3, #7
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	e000ed00 	.word	0xe000ed00

08004808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	4603      	mov	r3, r0
 8004810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004816:	2b00      	cmp	r3, #0
 8004818:	db0b      	blt.n	8004832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800481a:	79fb      	ldrb	r3, [r7, #7]
 800481c:	f003 021f 	and.w	r2, r3, #31
 8004820:	4907      	ldr	r1, [pc, #28]	; (8004840 <__NVIC_EnableIRQ+0x38>)
 8004822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004826:	095b      	lsrs	r3, r3, #5
 8004828:	2001      	movs	r0, #1
 800482a:	fa00 f202 	lsl.w	r2, r0, r2
 800482e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	e000e100 	.word	0xe000e100

08004844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	4603      	mov	r3, r0
 800484c:	6039      	str	r1, [r7, #0]
 800484e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004854:	2b00      	cmp	r3, #0
 8004856:	db0a      	blt.n	800486e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	b2da      	uxtb	r2, r3
 800485c:	490c      	ldr	r1, [pc, #48]	; (8004890 <__NVIC_SetPriority+0x4c>)
 800485e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004862:	0112      	lsls	r2, r2, #4
 8004864:	b2d2      	uxtb	r2, r2
 8004866:	440b      	add	r3, r1
 8004868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800486c:	e00a      	b.n	8004884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	b2da      	uxtb	r2, r3
 8004872:	4908      	ldr	r1, [pc, #32]	; (8004894 <__NVIC_SetPriority+0x50>)
 8004874:	79fb      	ldrb	r3, [r7, #7]
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	3b04      	subs	r3, #4
 800487c:	0112      	lsls	r2, r2, #4
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	440b      	add	r3, r1
 8004882:	761a      	strb	r2, [r3, #24]
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	e000e100 	.word	0xe000e100
 8004894:	e000ed00 	.word	0xe000ed00

08004898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004898:	b480      	push	{r7}
 800489a:	b089      	sub	sp, #36	; 0x24
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	f1c3 0307 	rsb	r3, r3, #7
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	bf28      	it	cs
 80048b6:	2304      	movcs	r3, #4
 80048b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	3304      	adds	r3, #4
 80048be:	2b06      	cmp	r3, #6
 80048c0:	d902      	bls.n	80048c8 <NVIC_EncodePriority+0x30>
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	3b03      	subs	r3, #3
 80048c6:	e000      	b.n	80048ca <NVIC_EncodePriority+0x32>
 80048c8:	2300      	movs	r3, #0
 80048ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	fa02 f303 	lsl.w	r3, r2, r3
 80048d6:	43da      	mvns	r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	401a      	ands	r2, r3
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ea:	43d9      	mvns	r1, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048f0:	4313      	orrs	r3, r2
         );
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3724      	adds	r7, #36	; 0x24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
	...

08004900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3b01      	subs	r3, #1
 800490c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004910:	d301      	bcc.n	8004916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004912:	2301      	movs	r3, #1
 8004914:	e00f      	b.n	8004936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004916:	4a0a      	ldr	r2, [pc, #40]	; (8004940 <SysTick_Config+0x40>)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3b01      	subs	r3, #1
 800491c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800491e:	210f      	movs	r1, #15
 8004920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004924:	f7ff ff8e 	bl	8004844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004928:	4b05      	ldr	r3, [pc, #20]	; (8004940 <SysTick_Config+0x40>)
 800492a:	2200      	movs	r2, #0
 800492c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800492e:	4b04      	ldr	r3, [pc, #16]	; (8004940 <SysTick_Config+0x40>)
 8004930:	2207      	movs	r2, #7
 8004932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	e000e010 	.word	0xe000e010

08004944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7ff ff29 	bl	80047a4 <__NVIC_SetPriorityGrouping>
}
 8004952:	bf00      	nop
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800495a:	b580      	push	{r7, lr}
 800495c:	b086      	sub	sp, #24
 800495e:	af00      	add	r7, sp, #0
 8004960:	4603      	mov	r3, r0
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	607a      	str	r2, [r7, #4]
 8004966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004968:	2300      	movs	r3, #0
 800496a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800496c:	f7ff ff3e 	bl	80047ec <__NVIC_GetPriorityGrouping>
 8004970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	68b9      	ldr	r1, [r7, #8]
 8004976:	6978      	ldr	r0, [r7, #20]
 8004978:	f7ff ff8e 	bl	8004898 <NVIC_EncodePriority>
 800497c:	4602      	mov	r2, r0
 800497e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004982:	4611      	mov	r1, r2
 8004984:	4618      	mov	r0, r3
 8004986:	f7ff ff5d 	bl	8004844 <__NVIC_SetPriority>
}
 800498a:	bf00      	nop
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b082      	sub	sp, #8
 8004996:	af00      	add	r7, sp, #0
 8004998:	4603      	mov	r3, r0
 800499a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800499c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7ff ff31 	bl	8004808 <__NVIC_EnableIRQ>
}
 80049a6:	bf00      	nop
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b082      	sub	sp, #8
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7ff ffa2 	bl	8004900 <SysTick_Config>
 80049bc:	4603      	mov	r3, r0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
	...

080049c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80049d4:	f7ff feb6 	bl	8004744 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e099      	b.n	8004b18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0201 	bic.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a04:	e00f      	b.n	8004a26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a06:	f7ff fe9d 	bl	8004744 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b05      	cmp	r3, #5
 8004a12:	d908      	bls.n	8004a26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2203      	movs	r2, #3
 8004a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e078      	b.n	8004b18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e8      	bne.n	8004a06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	4b38      	ldr	r3, [pc, #224]	; (8004b20 <HAL_DMA_Init+0x158>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d107      	bne.n	8004a90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f023 0307 	bic.w	r3, r3, #7
 8004aa6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d117      	bne.n	8004aea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00e      	beq.n	8004aea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 fb01 	bl	80050d4 <DMA_CheckFifoParam>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d008      	beq.n	8004aea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2240      	movs	r2, #64	; 0x40
 8004adc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e016      	b.n	8004b18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fab8 	bl	8005068 <DMA_CalcBaseAndBitshift>
 8004af8:	4603      	mov	r3, r0
 8004afa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b00:	223f      	movs	r2, #63	; 0x3f
 8004b02:	409a      	lsls	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3718      	adds	r7, #24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	f010803f 	.word	0xf010803f

08004b24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d101      	bne.n	8004b4a <HAL_DMA_Start_IT+0x26>
 8004b46:	2302      	movs	r3, #2
 8004b48:	e040      	b.n	8004bcc <HAL_DMA_Start_IT+0xa8>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d12f      	bne.n	8004bbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2202      	movs	r2, #2
 8004b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	68b9      	ldr	r1, [r7, #8]
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f000 fa4a 	bl	800500c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b7c:	223f      	movs	r2, #63	; 0x3f
 8004b7e:	409a      	lsls	r2, r3
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0216 	orr.w	r2, r2, #22
 8004b92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d007      	beq.n	8004bac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0208 	orr.w	r2, r2, #8
 8004baa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 0201 	orr.w	r2, r2, #1
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	e005      	b.n	8004bca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3718      	adds	r7, #24
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004be2:	f7ff fdaf 	bl	8004744 <HAL_GetTick>
 8004be6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d008      	beq.n	8004c06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2280      	movs	r2, #128	; 0x80
 8004bf8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e052      	b.n	8004cac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0216 	bic.w	r2, r2, #22
 8004c14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	695a      	ldr	r2, [r3, #20]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d103      	bne.n	8004c36 <HAL_DMA_Abort+0x62>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d007      	beq.n	8004c46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0208 	bic.w	r2, r2, #8
 8004c44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0201 	bic.w	r2, r2, #1
 8004c54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c56:	e013      	b.n	8004c80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c58:	f7ff fd74 	bl	8004744 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b05      	cmp	r3, #5
 8004c64:	d90c      	bls.n	8004c80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2203      	movs	r2, #3
 8004c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e015      	b.n	8004cac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1e4      	bne.n	8004c58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c92:	223f      	movs	r2, #63	; 0x3f
 8004c94:	409a      	lsls	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d004      	beq.n	8004cd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2280      	movs	r2, #128	; 0x80
 8004ccc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e00c      	b.n	8004cec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2205      	movs	r2, #5
 8004cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0201 	bic.w	r2, r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d04:	4b8e      	ldr	r3, [pc, #568]	; (8004f40 <HAL_DMA_IRQHandler+0x248>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a8e      	ldr	r2, [pc, #568]	; (8004f44 <HAL_DMA_IRQHandler+0x24c>)
 8004d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0e:	0a9b      	lsrs	r3, r3, #10
 8004d10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d22:	2208      	movs	r2, #8
 8004d24:	409a      	lsls	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d01a      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d013      	beq.n	8004d64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0204 	bic.w	r2, r2, #4
 8004d4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d50:	2208      	movs	r2, #8
 8004d52:	409a      	lsls	r2, r3
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5c:	f043 0201 	orr.w	r2, r3, #1
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d68:	2201      	movs	r2, #1
 8004d6a:	409a      	lsls	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d012      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00b      	beq.n	8004d9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d86:	2201      	movs	r2, #1
 8004d88:	409a      	lsls	r2, r3
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d92:	f043 0202 	orr.w	r2, r3, #2
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d9e:	2204      	movs	r2, #4
 8004da0:	409a      	lsls	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	4013      	ands	r3, r2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d012      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00b      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dbc:	2204      	movs	r2, #4
 8004dbe:	409a      	lsls	r2, r3
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc8:	f043 0204 	orr.w	r2, r3, #4
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd4:	2210      	movs	r2, #16
 8004dd6:	409a      	lsls	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d043      	beq.n	8004e68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d03c      	beq.n	8004e68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df2:	2210      	movs	r2, #16
 8004df4:	409a      	lsls	r2, r3
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d018      	beq.n	8004e3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d108      	bne.n	8004e28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d024      	beq.n	8004e68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	4798      	blx	r3
 8004e26:	e01f      	b.n	8004e68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d01b      	beq.n	8004e68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	4798      	blx	r3
 8004e38:	e016      	b.n	8004e68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d107      	bne.n	8004e58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0208 	bic.w	r2, r2, #8
 8004e56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	409a      	lsls	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4013      	ands	r3, r2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 808f 	beq.w	8004f98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0310 	and.w	r3, r3, #16
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 8087 	beq.w	8004f98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e8e:	2220      	movs	r2, #32
 8004e90:	409a      	lsls	r2, r3
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b05      	cmp	r3, #5
 8004ea0:	d136      	bne.n	8004f10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0216 	bic.w	r2, r2, #22
 8004eb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	695a      	ldr	r2, [r3, #20]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ec0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d103      	bne.n	8004ed2 <HAL_DMA_IRQHandler+0x1da>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d007      	beq.n	8004ee2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0208 	bic.w	r2, r2, #8
 8004ee0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee6:	223f      	movs	r2, #63	; 0x3f
 8004ee8:	409a      	lsls	r2, r3
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d07e      	beq.n	8005004 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	4798      	blx	r3
        }
        return;
 8004f0e:	e079      	b.n	8005004 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d01d      	beq.n	8004f5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10d      	bne.n	8004f48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d031      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	4798      	blx	r3
 8004f3c:	e02c      	b.n	8004f98 <HAL_DMA_IRQHandler+0x2a0>
 8004f3e:	bf00      	nop
 8004f40:	2000000c 	.word	0x2000000c
 8004f44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d023      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	4798      	blx	r3
 8004f58:	e01e      	b.n	8004f98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10f      	bne.n	8004f88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0210 	bic.w	r2, r2, #16
 8004f76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d032      	beq.n	8005006 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d022      	beq.n	8004ff2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2205      	movs	r2, #5
 8004fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0201 	bic.w	r2, r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	60bb      	str	r3, [r7, #8]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d307      	bcc.n	8004fe0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1f2      	bne.n	8004fc4 <HAL_DMA_IRQHandler+0x2cc>
 8004fde:	e000      	b.n	8004fe2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004fe0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d005      	beq.n	8005006 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	4798      	blx	r3
 8005002:	e000      	b.n	8005006 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005004:	bf00      	nop
    }
  }
}
 8005006:	3718      	adds	r7, #24
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
 8005018:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005028:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	2b40      	cmp	r3, #64	; 0x40
 8005038:	d108      	bne.n	800504c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800504a:	e007      	b.n	800505c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	60da      	str	r2, [r3, #12]
}
 800505c:	bf00      	nop
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	b2db      	uxtb	r3, r3
 8005076:	3b10      	subs	r3, #16
 8005078:	4a14      	ldr	r2, [pc, #80]	; (80050cc <DMA_CalcBaseAndBitshift+0x64>)
 800507a:	fba2 2303 	umull	r2, r3, r2, r3
 800507e:	091b      	lsrs	r3, r3, #4
 8005080:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005082:	4a13      	ldr	r2, [pc, #76]	; (80050d0 <DMA_CalcBaseAndBitshift+0x68>)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4413      	add	r3, r2
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2b03      	cmp	r3, #3
 8005094:	d909      	bls.n	80050aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800509e:	f023 0303 	bic.w	r3, r3, #3
 80050a2:	1d1a      	adds	r2, r3, #4
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	659a      	str	r2, [r3, #88]	; 0x58
 80050a8:	e007      	b.n	80050ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80050b2:	f023 0303 	bic.w	r3, r3, #3
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	aaaaaaab 	.word	0xaaaaaaab
 80050d0:	08011dd8 	.word	0x08011dd8

080050d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050dc:	2300      	movs	r3, #0
 80050de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d11f      	bne.n	800512e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2b03      	cmp	r3, #3
 80050f2:	d856      	bhi.n	80051a2 <DMA_CheckFifoParam+0xce>
 80050f4:	a201      	add	r2, pc, #4	; (adr r2, 80050fc <DMA_CheckFifoParam+0x28>)
 80050f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fa:	bf00      	nop
 80050fc:	0800510d 	.word	0x0800510d
 8005100:	0800511f 	.word	0x0800511f
 8005104:	0800510d 	.word	0x0800510d
 8005108:	080051a3 	.word	0x080051a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d046      	beq.n	80051a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800511c:	e043      	b.n	80051a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005122:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005126:	d140      	bne.n	80051aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800512c:	e03d      	b.n	80051aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005136:	d121      	bne.n	800517c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b03      	cmp	r3, #3
 800513c:	d837      	bhi.n	80051ae <DMA_CheckFifoParam+0xda>
 800513e:	a201      	add	r2, pc, #4	; (adr r2, 8005144 <DMA_CheckFifoParam+0x70>)
 8005140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005144:	08005155 	.word	0x08005155
 8005148:	0800515b 	.word	0x0800515b
 800514c:	08005155 	.word	0x08005155
 8005150:	0800516d 	.word	0x0800516d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	73fb      	strb	r3, [r7, #15]
      break;
 8005158:	e030      	b.n	80051bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d025      	beq.n	80051b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800516a:	e022      	b.n	80051b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005170:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005174:	d11f      	bne.n	80051b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800517a:	e01c      	b.n	80051b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2b02      	cmp	r3, #2
 8005180:	d903      	bls.n	800518a <DMA_CheckFifoParam+0xb6>
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2b03      	cmp	r3, #3
 8005186:	d003      	beq.n	8005190 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005188:	e018      	b.n	80051bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	73fb      	strb	r3, [r7, #15]
      break;
 800518e:	e015      	b.n	80051bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005194:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00e      	beq.n	80051ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	73fb      	strb	r3, [r7, #15]
      break;
 80051a0:	e00b      	b.n	80051ba <DMA_CheckFifoParam+0xe6>
      break;
 80051a2:	bf00      	nop
 80051a4:	e00a      	b.n	80051bc <DMA_CheckFifoParam+0xe8>
      break;
 80051a6:	bf00      	nop
 80051a8:	e008      	b.n	80051bc <DMA_CheckFifoParam+0xe8>
      break;
 80051aa:	bf00      	nop
 80051ac:	e006      	b.n	80051bc <DMA_CheckFifoParam+0xe8>
      break;
 80051ae:	bf00      	nop
 80051b0:	e004      	b.n	80051bc <DMA_CheckFifoParam+0xe8>
      break;
 80051b2:	bf00      	nop
 80051b4:	e002      	b.n	80051bc <DMA_CheckFifoParam+0xe8>
      break;   
 80051b6:	bf00      	nop
 80051b8:	e000      	b.n	80051bc <DMA_CheckFifoParam+0xe8>
      break;
 80051ba:	bf00      	nop
    }
  } 
  
  return status; 
 80051bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop

080051cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b089      	sub	sp, #36	; 0x24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80051d6:	2300      	movs	r3, #0
 80051d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80051da:	2300      	movs	r3, #0
 80051dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80051de:	2300      	movs	r3, #0
 80051e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051e2:	2300      	movs	r3, #0
 80051e4:	61fb      	str	r3, [r7, #28]
 80051e6:	e16b      	b.n	80054c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051e8:	2201      	movs	r2, #1
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	fa02 f303 	lsl.w	r3, r2, r3
 80051f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	4013      	ands	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	429a      	cmp	r2, r3
 8005202:	f040 815a 	bne.w	80054ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	2b01      	cmp	r3, #1
 8005210:	d005      	beq.n	800521e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800521a:	2b02      	cmp	r3, #2
 800521c:	d130      	bne.n	8005280 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	005b      	lsls	r3, r3, #1
 8005228:	2203      	movs	r2, #3
 800522a:	fa02 f303 	lsl.w	r3, r2, r3
 800522e:	43db      	mvns	r3, r3
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	4013      	ands	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	fa02 f303 	lsl.w	r3, r2, r3
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	4313      	orrs	r3, r2
 8005246:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005254:	2201      	movs	r2, #1
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	fa02 f303 	lsl.w	r3, r2, r3
 800525c:	43db      	mvns	r3, r3
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	4013      	ands	r3, r2
 8005262:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	091b      	lsrs	r3, r3, #4
 800526a:	f003 0201 	and.w	r2, r3, #1
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	fa02 f303 	lsl.w	r3, r2, r3
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	4313      	orrs	r3, r2
 8005278:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f003 0303 	and.w	r3, r3, #3
 8005288:	2b03      	cmp	r3, #3
 800528a:	d017      	beq.n	80052bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	2203      	movs	r2, #3
 8005298:	fa02 f303 	lsl.w	r3, r2, r3
 800529c:	43db      	mvns	r3, r3
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	4013      	ands	r3, r2
 80052a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	fa02 f303 	lsl.w	r3, r2, r3
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f003 0303 	and.w	r3, r3, #3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d123      	bne.n	8005310 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	08da      	lsrs	r2, r3, #3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	3208      	adds	r2, #8
 80052d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	f003 0307 	and.w	r3, r3, #7
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	220f      	movs	r2, #15
 80052e0:	fa02 f303 	lsl.w	r3, r2, r3
 80052e4:	43db      	mvns	r3, r3
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	4013      	ands	r3, r2
 80052ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	691a      	ldr	r2, [r3, #16]
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	fa02 f303 	lsl.w	r3, r2, r3
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	4313      	orrs	r3, r2
 8005300:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	08da      	lsrs	r2, r3, #3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	3208      	adds	r2, #8
 800530a:	69b9      	ldr	r1, [r7, #24]
 800530c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	2203      	movs	r2, #3
 800531c:	fa02 f303 	lsl.w	r3, r2, r3
 8005320:	43db      	mvns	r3, r3
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	4013      	ands	r3, r2
 8005326:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f003 0203 	and.w	r2, r3, #3
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	4313      	orrs	r3, r2
 800533c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 80b4 	beq.w	80054ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005352:	2300      	movs	r3, #0
 8005354:	60fb      	str	r3, [r7, #12]
 8005356:	4b60      	ldr	r3, [pc, #384]	; (80054d8 <HAL_GPIO_Init+0x30c>)
 8005358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535a:	4a5f      	ldr	r2, [pc, #380]	; (80054d8 <HAL_GPIO_Init+0x30c>)
 800535c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005360:	6453      	str	r3, [r2, #68]	; 0x44
 8005362:	4b5d      	ldr	r3, [pc, #372]	; (80054d8 <HAL_GPIO_Init+0x30c>)
 8005364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800536e:	4a5b      	ldr	r2, [pc, #364]	; (80054dc <HAL_GPIO_Init+0x310>)
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	089b      	lsrs	r3, r3, #2
 8005374:	3302      	adds	r3, #2
 8005376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800537a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	f003 0303 	and.w	r3, r3, #3
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	220f      	movs	r2, #15
 8005386:	fa02 f303 	lsl.w	r3, r2, r3
 800538a:	43db      	mvns	r3, r3
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	4013      	ands	r3, r2
 8005390:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a52      	ldr	r2, [pc, #328]	; (80054e0 <HAL_GPIO_Init+0x314>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d02b      	beq.n	80053f2 <HAL_GPIO_Init+0x226>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a51      	ldr	r2, [pc, #324]	; (80054e4 <HAL_GPIO_Init+0x318>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d025      	beq.n	80053ee <HAL_GPIO_Init+0x222>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a50      	ldr	r2, [pc, #320]	; (80054e8 <HAL_GPIO_Init+0x31c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d01f      	beq.n	80053ea <HAL_GPIO_Init+0x21e>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a4f      	ldr	r2, [pc, #316]	; (80054ec <HAL_GPIO_Init+0x320>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d019      	beq.n	80053e6 <HAL_GPIO_Init+0x21a>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a4e      	ldr	r2, [pc, #312]	; (80054f0 <HAL_GPIO_Init+0x324>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d013      	beq.n	80053e2 <HAL_GPIO_Init+0x216>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a4d      	ldr	r2, [pc, #308]	; (80054f4 <HAL_GPIO_Init+0x328>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d00d      	beq.n	80053de <HAL_GPIO_Init+0x212>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a4c      	ldr	r2, [pc, #304]	; (80054f8 <HAL_GPIO_Init+0x32c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d007      	beq.n	80053da <HAL_GPIO_Init+0x20e>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a4b      	ldr	r2, [pc, #300]	; (80054fc <HAL_GPIO_Init+0x330>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d101      	bne.n	80053d6 <HAL_GPIO_Init+0x20a>
 80053d2:	2307      	movs	r3, #7
 80053d4:	e00e      	b.n	80053f4 <HAL_GPIO_Init+0x228>
 80053d6:	2308      	movs	r3, #8
 80053d8:	e00c      	b.n	80053f4 <HAL_GPIO_Init+0x228>
 80053da:	2306      	movs	r3, #6
 80053dc:	e00a      	b.n	80053f4 <HAL_GPIO_Init+0x228>
 80053de:	2305      	movs	r3, #5
 80053e0:	e008      	b.n	80053f4 <HAL_GPIO_Init+0x228>
 80053e2:	2304      	movs	r3, #4
 80053e4:	e006      	b.n	80053f4 <HAL_GPIO_Init+0x228>
 80053e6:	2303      	movs	r3, #3
 80053e8:	e004      	b.n	80053f4 <HAL_GPIO_Init+0x228>
 80053ea:	2302      	movs	r3, #2
 80053ec:	e002      	b.n	80053f4 <HAL_GPIO_Init+0x228>
 80053ee:	2301      	movs	r3, #1
 80053f0:	e000      	b.n	80053f4 <HAL_GPIO_Init+0x228>
 80053f2:	2300      	movs	r3, #0
 80053f4:	69fa      	ldr	r2, [r7, #28]
 80053f6:	f002 0203 	and.w	r2, r2, #3
 80053fa:	0092      	lsls	r2, r2, #2
 80053fc:	4093      	lsls	r3, r2
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	4313      	orrs	r3, r2
 8005402:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005404:	4935      	ldr	r1, [pc, #212]	; (80054dc <HAL_GPIO_Init+0x310>)
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	089b      	lsrs	r3, r3, #2
 800540a:	3302      	adds	r3, #2
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005412:	4b3b      	ldr	r3, [pc, #236]	; (8005500 <HAL_GPIO_Init+0x334>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	43db      	mvns	r3, r3
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	4013      	ands	r3, r2
 8005420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	4313      	orrs	r3, r2
 8005434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005436:	4a32      	ldr	r2, [pc, #200]	; (8005500 <HAL_GPIO_Init+0x334>)
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800543c:	4b30      	ldr	r3, [pc, #192]	; (8005500 <HAL_GPIO_Init+0x334>)
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	43db      	mvns	r3, r3
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	4013      	ands	r3, r2
 800544a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d003      	beq.n	8005460 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	4313      	orrs	r3, r2
 800545e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005460:	4a27      	ldr	r2, [pc, #156]	; (8005500 <HAL_GPIO_Init+0x334>)
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005466:	4b26      	ldr	r3, [pc, #152]	; (8005500 <HAL_GPIO_Init+0x334>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	43db      	mvns	r3, r3
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	4013      	ands	r3, r2
 8005474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	4313      	orrs	r3, r2
 8005488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800548a:	4a1d      	ldr	r2, [pc, #116]	; (8005500 <HAL_GPIO_Init+0x334>)
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005490:	4b1b      	ldr	r3, [pc, #108]	; (8005500 <HAL_GPIO_Init+0x334>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	43db      	mvns	r3, r3
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	4013      	ands	r3, r2
 800549e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80054b4:	4a12      	ldr	r2, [pc, #72]	; (8005500 <HAL_GPIO_Init+0x334>)
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	3301      	adds	r3, #1
 80054be:	61fb      	str	r3, [r7, #28]
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	2b0f      	cmp	r3, #15
 80054c4:	f67f ae90 	bls.w	80051e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80054c8:	bf00      	nop
 80054ca:	bf00      	nop
 80054cc:	3724      	adds	r7, #36	; 0x24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	40023800 	.word	0x40023800
 80054dc:	40013800 	.word	0x40013800
 80054e0:	40020000 	.word	0x40020000
 80054e4:	40020400 	.word	0x40020400
 80054e8:	40020800 	.word	0x40020800
 80054ec:	40020c00 	.word	0x40020c00
 80054f0:	40021000 	.word	0x40021000
 80054f4:	40021400 	.word	0x40021400
 80054f8:	40021800 	.word	0x40021800
 80054fc:	40021c00 	.word	0x40021c00
 8005500:	40013c00 	.word	0x40013c00

08005504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	460b      	mov	r3, r1
 800550e:	807b      	strh	r3, [r7, #2]
 8005510:	4613      	mov	r3, r2
 8005512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005514:	787b      	ldrb	r3, [r7, #1]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800551a:	887a      	ldrh	r2, [r7, #2]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005520:	e003      	b.n	800552a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005522:	887b      	ldrh	r3, [r7, #2]
 8005524:	041a      	lsls	r2, r3, #16
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	619a      	str	r2, [r3, #24]
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005536:	b480      	push	{r7}
 8005538:	b085      	sub	sp, #20
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	460b      	mov	r3, r1
 8005540:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005548:	887a      	ldrh	r2, [r7, #2]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4013      	ands	r3, r2
 800554e:	041a      	lsls	r2, r3, #16
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	43d9      	mvns	r1, r3
 8005554:	887b      	ldrh	r3, [r7, #2]
 8005556:	400b      	ands	r3, r1
 8005558:	431a      	orrs	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	619a      	str	r2, [r3, #24]
}
 800555e:	bf00      	nop
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800556a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800556c:	b08f      	sub	sp, #60	; 0x3c
 800556e:	af0a      	add	r7, sp, #40	; 0x28
 8005570:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e054      	b.n	8005626 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d106      	bne.n	800559c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f00b fbf4 	bl	8010d84 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2203      	movs	r2, #3
 80055a0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d102      	bne.n	80055b6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f004 fde2 	bl	800a184 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	603b      	str	r3, [r7, #0]
 80055c6:	687e      	ldr	r6, [r7, #4]
 80055c8:	466d      	mov	r5, sp
 80055ca:	f106 0410 	add.w	r4, r6, #16
 80055ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80055da:	e885 0003 	stmia.w	r5, {r0, r1}
 80055de:	1d33      	adds	r3, r6, #4
 80055e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055e2:	6838      	ldr	r0, [r7, #0]
 80055e4:	f004 fd5c 	bl	800a0a0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2101      	movs	r1, #1
 80055ee:	4618      	mov	r0, r3
 80055f0:	f004 fdd9 	bl	800a1a6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	603b      	str	r3, [r7, #0]
 80055fa:	687e      	ldr	r6, [r7, #4]
 80055fc:	466d      	mov	r5, sp
 80055fe:	f106 0410 	add.w	r4, r6, #16
 8005602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005608:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800560a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800560e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005612:	1d33      	adds	r3, r6, #4
 8005614:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005616:	6838      	ldr	r0, [r7, #0]
 8005618:	f004 ff62 	bl	800a4e0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800562e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800562e:	b590      	push	{r4, r7, lr}
 8005630:	b089      	sub	sp, #36	; 0x24
 8005632:	af04      	add	r7, sp, #16
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	4608      	mov	r0, r1
 8005638:	4611      	mov	r1, r2
 800563a:	461a      	mov	r2, r3
 800563c:	4603      	mov	r3, r0
 800563e:	70fb      	strb	r3, [r7, #3]
 8005640:	460b      	mov	r3, r1
 8005642:	70bb      	strb	r3, [r7, #2]
 8005644:	4613      	mov	r3, r2
 8005646:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800564e:	2b01      	cmp	r3, #1
 8005650:	d101      	bne.n	8005656 <HAL_HCD_HC_Init+0x28>
 8005652:	2302      	movs	r3, #2
 8005654:	e076      	b.n	8005744 <HAL_HCD_HC_Init+0x116>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800565e:	78fb      	ldrb	r3, [r7, #3]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	212c      	movs	r1, #44	; 0x2c
 8005664:	fb01 f303 	mul.w	r3, r1, r3
 8005668:	4413      	add	r3, r2
 800566a:	333d      	adds	r3, #61	; 0x3d
 800566c:	2200      	movs	r2, #0
 800566e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	212c      	movs	r1, #44	; 0x2c
 8005676:	fb01 f303 	mul.w	r3, r1, r3
 800567a:	4413      	add	r3, r2
 800567c:	3338      	adds	r3, #56	; 0x38
 800567e:	787a      	ldrb	r2, [r7, #1]
 8005680:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8005682:	78fb      	ldrb	r3, [r7, #3]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	212c      	movs	r1, #44	; 0x2c
 8005688:	fb01 f303 	mul.w	r3, r1, r3
 800568c:	4413      	add	r3, r2
 800568e:	3340      	adds	r3, #64	; 0x40
 8005690:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005692:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005694:	78fb      	ldrb	r3, [r7, #3]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	212c      	movs	r1, #44	; 0x2c
 800569a:	fb01 f303 	mul.w	r3, r1, r3
 800569e:	4413      	add	r3, r2
 80056a0:	3339      	adds	r3, #57	; 0x39
 80056a2:	78fa      	ldrb	r2, [r7, #3]
 80056a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80056a6:	78fb      	ldrb	r3, [r7, #3]
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	212c      	movs	r1, #44	; 0x2c
 80056ac:	fb01 f303 	mul.w	r3, r1, r3
 80056b0:	4413      	add	r3, r2
 80056b2:	333f      	adds	r3, #63	; 0x3f
 80056b4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80056b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80056ba:	78fb      	ldrb	r3, [r7, #3]
 80056bc:	78ba      	ldrb	r2, [r7, #2]
 80056be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056c2:	b2d0      	uxtb	r0, r2
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	212c      	movs	r1, #44	; 0x2c
 80056c8:	fb01 f303 	mul.w	r3, r1, r3
 80056cc:	4413      	add	r3, r2
 80056ce:	333a      	adds	r3, #58	; 0x3a
 80056d0:	4602      	mov	r2, r0
 80056d2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80056d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	da09      	bge.n	80056f0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	212c      	movs	r1, #44	; 0x2c
 80056e2:	fb01 f303 	mul.w	r3, r1, r3
 80056e6:	4413      	add	r3, r2
 80056e8:	333b      	adds	r3, #59	; 0x3b
 80056ea:	2201      	movs	r2, #1
 80056ec:	701a      	strb	r2, [r3, #0]
 80056ee:	e008      	b.n	8005702 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80056f0:	78fb      	ldrb	r3, [r7, #3]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	212c      	movs	r1, #44	; 0x2c
 80056f6:	fb01 f303 	mul.w	r3, r1, r3
 80056fa:	4413      	add	r3, r2
 80056fc:	333b      	adds	r3, #59	; 0x3b
 80056fe:	2200      	movs	r2, #0
 8005700:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8005702:	78fb      	ldrb	r3, [r7, #3]
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	212c      	movs	r1, #44	; 0x2c
 8005708:	fb01 f303 	mul.w	r3, r1, r3
 800570c:	4413      	add	r3, r2
 800570e:	333c      	adds	r3, #60	; 0x3c
 8005710:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005714:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6818      	ldr	r0, [r3, #0]
 800571a:	787c      	ldrb	r4, [r7, #1]
 800571c:	78ba      	ldrb	r2, [r7, #2]
 800571e:	78f9      	ldrb	r1, [r7, #3]
 8005720:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005722:	9302      	str	r3, [sp, #8]
 8005724:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005728:	9301      	str	r3, [sp, #4]
 800572a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	4623      	mov	r3, r4
 8005732:	f005 f85b 	bl	800a7ec <USB_HC_Init>
 8005736:	4603      	mov	r3, r0
 8005738:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005742:	7bfb      	ldrb	r3, [r7, #15]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	bd90      	pop	{r4, r7, pc}

0800574c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	460b      	mov	r3, r1
 8005756:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005758:	2300      	movs	r3, #0
 800575a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005762:	2b01      	cmp	r3, #1
 8005764:	d101      	bne.n	800576a <HAL_HCD_HC_Halt+0x1e>
 8005766:	2302      	movs	r3, #2
 8005768:	e00f      	b.n	800578a <HAL_HCD_HC_Halt+0x3e>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	78fa      	ldrb	r2, [r7, #3]
 8005778:	4611      	mov	r1, r2
 800577a:	4618      	mov	r0, r3
 800577c:	f005 faab 	bl	800acd6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005788:	7bfb      	ldrb	r3, [r7, #15]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	4608      	mov	r0, r1
 800579e:	4611      	mov	r1, r2
 80057a0:	461a      	mov	r2, r3
 80057a2:	4603      	mov	r3, r0
 80057a4:	70fb      	strb	r3, [r7, #3]
 80057a6:	460b      	mov	r3, r1
 80057a8:	70bb      	strb	r3, [r7, #2]
 80057aa:	4613      	mov	r3, r2
 80057ac:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80057ae:	78fb      	ldrb	r3, [r7, #3]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	212c      	movs	r1, #44	; 0x2c
 80057b4:	fb01 f303 	mul.w	r3, r1, r3
 80057b8:	4413      	add	r3, r2
 80057ba:	333b      	adds	r3, #59	; 0x3b
 80057bc:	78ba      	ldrb	r2, [r7, #2]
 80057be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80057c0:	78fb      	ldrb	r3, [r7, #3]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	212c      	movs	r1, #44	; 0x2c
 80057c6:	fb01 f303 	mul.w	r3, r1, r3
 80057ca:	4413      	add	r3, r2
 80057cc:	333f      	adds	r3, #63	; 0x3f
 80057ce:	787a      	ldrb	r2, [r7, #1]
 80057d0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80057d2:	7c3b      	ldrb	r3, [r7, #16]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d112      	bne.n	80057fe <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80057d8:	78fb      	ldrb	r3, [r7, #3]
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	212c      	movs	r1, #44	; 0x2c
 80057de:	fb01 f303 	mul.w	r3, r1, r3
 80057e2:	4413      	add	r3, r2
 80057e4:	3342      	adds	r3, #66	; 0x42
 80057e6:	2203      	movs	r2, #3
 80057e8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80057ea:	78fb      	ldrb	r3, [r7, #3]
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	212c      	movs	r1, #44	; 0x2c
 80057f0:	fb01 f303 	mul.w	r3, r1, r3
 80057f4:	4413      	add	r3, r2
 80057f6:	333d      	adds	r3, #61	; 0x3d
 80057f8:	7f3a      	ldrb	r2, [r7, #28]
 80057fa:	701a      	strb	r2, [r3, #0]
 80057fc:	e008      	b.n	8005810 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80057fe:	78fb      	ldrb	r3, [r7, #3]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	212c      	movs	r1, #44	; 0x2c
 8005804:	fb01 f303 	mul.w	r3, r1, r3
 8005808:	4413      	add	r3, r2
 800580a:	3342      	adds	r3, #66	; 0x42
 800580c:	2202      	movs	r2, #2
 800580e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005810:	787b      	ldrb	r3, [r7, #1]
 8005812:	2b03      	cmp	r3, #3
 8005814:	f200 80c6 	bhi.w	80059a4 <HAL_HCD_HC_SubmitRequest+0x210>
 8005818:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800581a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581e:	bf00      	nop
 8005820:	08005831 	.word	0x08005831
 8005824:	08005991 	.word	0x08005991
 8005828:	08005895 	.word	0x08005895
 800582c:	08005913 	.word	0x08005913
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005830:	7c3b      	ldrb	r3, [r7, #16]
 8005832:	2b01      	cmp	r3, #1
 8005834:	f040 80b8 	bne.w	80059a8 <HAL_HCD_HC_SubmitRequest+0x214>
 8005838:	78bb      	ldrb	r3, [r7, #2]
 800583a:	2b00      	cmp	r3, #0
 800583c:	f040 80b4 	bne.w	80059a8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8005840:	8b3b      	ldrh	r3, [r7, #24]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d108      	bne.n	8005858 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8005846:	78fb      	ldrb	r3, [r7, #3]
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	212c      	movs	r1, #44	; 0x2c
 800584c:	fb01 f303 	mul.w	r3, r1, r3
 8005850:	4413      	add	r3, r2
 8005852:	3355      	adds	r3, #85	; 0x55
 8005854:	2201      	movs	r2, #1
 8005856:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005858:	78fb      	ldrb	r3, [r7, #3]
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	212c      	movs	r1, #44	; 0x2c
 800585e:	fb01 f303 	mul.w	r3, r1, r3
 8005862:	4413      	add	r3, r2
 8005864:	3355      	adds	r3, #85	; 0x55
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d109      	bne.n	8005880 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800586c:	78fb      	ldrb	r3, [r7, #3]
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	212c      	movs	r1, #44	; 0x2c
 8005872:	fb01 f303 	mul.w	r3, r1, r3
 8005876:	4413      	add	r3, r2
 8005878:	3342      	adds	r3, #66	; 0x42
 800587a:	2200      	movs	r2, #0
 800587c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800587e:	e093      	b.n	80059a8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005880:	78fb      	ldrb	r3, [r7, #3]
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	212c      	movs	r1, #44	; 0x2c
 8005886:	fb01 f303 	mul.w	r3, r1, r3
 800588a:	4413      	add	r3, r2
 800588c:	3342      	adds	r3, #66	; 0x42
 800588e:	2202      	movs	r2, #2
 8005890:	701a      	strb	r2, [r3, #0]
      break;
 8005892:	e089      	b.n	80059a8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005894:	78bb      	ldrb	r3, [r7, #2]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d11d      	bne.n	80058d6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800589a:	78fb      	ldrb	r3, [r7, #3]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	212c      	movs	r1, #44	; 0x2c
 80058a0:	fb01 f303 	mul.w	r3, r1, r3
 80058a4:	4413      	add	r3, r2
 80058a6:	3355      	adds	r3, #85	; 0x55
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d109      	bne.n	80058c2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80058ae:	78fb      	ldrb	r3, [r7, #3]
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	212c      	movs	r1, #44	; 0x2c
 80058b4:	fb01 f303 	mul.w	r3, r1, r3
 80058b8:	4413      	add	r3, r2
 80058ba:	3342      	adds	r3, #66	; 0x42
 80058bc:	2200      	movs	r2, #0
 80058be:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80058c0:	e073      	b.n	80059aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80058c2:	78fb      	ldrb	r3, [r7, #3]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	212c      	movs	r1, #44	; 0x2c
 80058c8:	fb01 f303 	mul.w	r3, r1, r3
 80058cc:	4413      	add	r3, r2
 80058ce:	3342      	adds	r3, #66	; 0x42
 80058d0:	2202      	movs	r2, #2
 80058d2:	701a      	strb	r2, [r3, #0]
      break;
 80058d4:	e069      	b.n	80059aa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80058d6:	78fb      	ldrb	r3, [r7, #3]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	212c      	movs	r1, #44	; 0x2c
 80058dc:	fb01 f303 	mul.w	r3, r1, r3
 80058e0:	4413      	add	r3, r2
 80058e2:	3354      	adds	r3, #84	; 0x54
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d109      	bne.n	80058fe <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80058ea:	78fb      	ldrb	r3, [r7, #3]
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	212c      	movs	r1, #44	; 0x2c
 80058f0:	fb01 f303 	mul.w	r3, r1, r3
 80058f4:	4413      	add	r3, r2
 80058f6:	3342      	adds	r3, #66	; 0x42
 80058f8:	2200      	movs	r2, #0
 80058fa:	701a      	strb	r2, [r3, #0]
      break;
 80058fc:	e055      	b.n	80059aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80058fe:	78fb      	ldrb	r3, [r7, #3]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	212c      	movs	r1, #44	; 0x2c
 8005904:	fb01 f303 	mul.w	r3, r1, r3
 8005908:	4413      	add	r3, r2
 800590a:	3342      	adds	r3, #66	; 0x42
 800590c:	2202      	movs	r2, #2
 800590e:	701a      	strb	r2, [r3, #0]
      break;
 8005910:	e04b      	b.n	80059aa <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005912:	78bb      	ldrb	r3, [r7, #2]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d11d      	bne.n	8005954 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005918:	78fb      	ldrb	r3, [r7, #3]
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	212c      	movs	r1, #44	; 0x2c
 800591e:	fb01 f303 	mul.w	r3, r1, r3
 8005922:	4413      	add	r3, r2
 8005924:	3355      	adds	r3, #85	; 0x55
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d109      	bne.n	8005940 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800592c:	78fb      	ldrb	r3, [r7, #3]
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	212c      	movs	r1, #44	; 0x2c
 8005932:	fb01 f303 	mul.w	r3, r1, r3
 8005936:	4413      	add	r3, r2
 8005938:	3342      	adds	r3, #66	; 0x42
 800593a:	2200      	movs	r2, #0
 800593c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800593e:	e034      	b.n	80059aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005940:	78fb      	ldrb	r3, [r7, #3]
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	212c      	movs	r1, #44	; 0x2c
 8005946:	fb01 f303 	mul.w	r3, r1, r3
 800594a:	4413      	add	r3, r2
 800594c:	3342      	adds	r3, #66	; 0x42
 800594e:	2202      	movs	r2, #2
 8005950:	701a      	strb	r2, [r3, #0]
      break;
 8005952:	e02a      	b.n	80059aa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005954:	78fb      	ldrb	r3, [r7, #3]
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	212c      	movs	r1, #44	; 0x2c
 800595a:	fb01 f303 	mul.w	r3, r1, r3
 800595e:	4413      	add	r3, r2
 8005960:	3354      	adds	r3, #84	; 0x54
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d109      	bne.n	800597c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005968:	78fb      	ldrb	r3, [r7, #3]
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	212c      	movs	r1, #44	; 0x2c
 800596e:	fb01 f303 	mul.w	r3, r1, r3
 8005972:	4413      	add	r3, r2
 8005974:	3342      	adds	r3, #66	; 0x42
 8005976:	2200      	movs	r2, #0
 8005978:	701a      	strb	r2, [r3, #0]
      break;
 800597a:	e016      	b.n	80059aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800597c:	78fb      	ldrb	r3, [r7, #3]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	212c      	movs	r1, #44	; 0x2c
 8005982:	fb01 f303 	mul.w	r3, r1, r3
 8005986:	4413      	add	r3, r2
 8005988:	3342      	adds	r3, #66	; 0x42
 800598a:	2202      	movs	r2, #2
 800598c:	701a      	strb	r2, [r3, #0]
      break;
 800598e:	e00c      	b.n	80059aa <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005990:	78fb      	ldrb	r3, [r7, #3]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	212c      	movs	r1, #44	; 0x2c
 8005996:	fb01 f303 	mul.w	r3, r1, r3
 800599a:	4413      	add	r3, r2
 800599c:	3342      	adds	r3, #66	; 0x42
 800599e:	2200      	movs	r2, #0
 80059a0:	701a      	strb	r2, [r3, #0]
      break;
 80059a2:	e002      	b.n	80059aa <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80059a4:	bf00      	nop
 80059a6:	e000      	b.n	80059aa <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80059a8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80059aa:	78fb      	ldrb	r3, [r7, #3]
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	212c      	movs	r1, #44	; 0x2c
 80059b0:	fb01 f303 	mul.w	r3, r1, r3
 80059b4:	4413      	add	r3, r2
 80059b6:	3344      	adds	r3, #68	; 0x44
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80059bc:	78fb      	ldrb	r3, [r7, #3]
 80059be:	8b3a      	ldrh	r2, [r7, #24]
 80059c0:	6879      	ldr	r1, [r7, #4]
 80059c2:	202c      	movs	r0, #44	; 0x2c
 80059c4:	fb00 f303 	mul.w	r3, r0, r3
 80059c8:	440b      	add	r3, r1
 80059ca:	334c      	adds	r3, #76	; 0x4c
 80059cc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80059ce:	78fb      	ldrb	r3, [r7, #3]
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	212c      	movs	r1, #44	; 0x2c
 80059d4:	fb01 f303 	mul.w	r3, r1, r3
 80059d8:	4413      	add	r3, r2
 80059da:	3360      	adds	r3, #96	; 0x60
 80059dc:	2200      	movs	r2, #0
 80059de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80059e0:	78fb      	ldrb	r3, [r7, #3]
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	212c      	movs	r1, #44	; 0x2c
 80059e6:	fb01 f303 	mul.w	r3, r1, r3
 80059ea:	4413      	add	r3, r2
 80059ec:	3350      	adds	r3, #80	; 0x50
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80059f2:	78fb      	ldrb	r3, [r7, #3]
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	212c      	movs	r1, #44	; 0x2c
 80059f8:	fb01 f303 	mul.w	r3, r1, r3
 80059fc:	4413      	add	r3, r2
 80059fe:	3339      	adds	r3, #57	; 0x39
 8005a00:	78fa      	ldrb	r2, [r7, #3]
 8005a02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005a04:	78fb      	ldrb	r3, [r7, #3]
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	212c      	movs	r1, #44	; 0x2c
 8005a0a:	fb01 f303 	mul.w	r3, r1, r3
 8005a0e:	4413      	add	r3, r2
 8005a10:	3361      	adds	r3, #97	; 0x61
 8005a12:	2200      	movs	r2, #0
 8005a14:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6818      	ldr	r0, [r3, #0]
 8005a1a:	78fb      	ldrb	r3, [r7, #3]
 8005a1c:	222c      	movs	r2, #44	; 0x2c
 8005a1e:	fb02 f303 	mul.w	r3, r2, r3
 8005a22:	3338      	adds	r3, #56	; 0x38
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	18d1      	adds	r1, r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f004 fffe 	bl	800aa30 <USB_HC_StartXfer>
 8005a34:	4603      	mov	r3, r0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop

08005a40 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f004 fcff 	bl	800a45a <USB_GetMode>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	f040 80f6 	bne.w	8005c50 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f004 fce3 	bl	800a434 <USB_ReadInterrupts>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 80ec 	beq.w	8005c4e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f004 fcda 	bl	800a434 <USB_ReadInterrupts>
 8005a80:	4603      	mov	r3, r0
 8005a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a8a:	d104      	bne.n	8005a96 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005a94:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f004 fcca 	bl	800a434 <USB_ReadInterrupts>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aaa:	d104      	bne.n	8005ab6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005ab4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f004 fcba 	bl	800a434 <USB_ReadInterrupts>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ac6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005aca:	d104      	bne.n	8005ad6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005ad4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f004 fcaa 	bl	800a434 <USB_ReadInterrupts>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d103      	bne.n	8005af2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2202      	movs	r2, #2
 8005af0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f004 fc9c 	bl	800a434 <USB_ReadInterrupts>
 8005afc:	4603      	mov	r3, r0
 8005afe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b06:	d11c      	bne.n	8005b42 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005b10:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10f      	bne.n	8005b42 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8005b22:	2110      	movs	r1, #16
 8005b24:	6938      	ldr	r0, [r7, #16]
 8005b26:	f004 fb8b 	bl	800a240 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8005b2a:	6938      	ldr	r0, [r7, #16]
 8005b2c:	f004 fbbc 	bl	800a2a8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2101      	movs	r1, #1
 8005b36:	4618      	mov	r0, r3
 8005b38:	f004 fd92 	bl	800a660 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f00b f99f 	bl	8010e80 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f004 fc74 	bl	800a434 <USB_ReadInterrupts>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b56:	d102      	bne.n	8005b5e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f001 f89e 	bl	8006c9a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f004 fc66 	bl	800a434 <USB_ReadInterrupts>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	f003 0308 	and.w	r3, r3, #8
 8005b6e:	2b08      	cmp	r3, #8
 8005b70:	d106      	bne.n	8005b80 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f00b f968 	bl	8010e48 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2208      	movs	r2, #8
 8005b7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f004 fc55 	bl	800a434 <USB_ReadInterrupts>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	2b10      	cmp	r3, #16
 8005b92:	d101      	bne.n	8005b98 <HAL_HCD_IRQHandler+0x158>
 8005b94:	2301      	movs	r3, #1
 8005b96:	e000      	b.n	8005b9a <HAL_HCD_IRQHandler+0x15a>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d012      	beq.n	8005bc4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	699a      	ldr	r2, [r3, #24]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0210 	bic.w	r2, r2, #16
 8005bac:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 ffa1 	bl	8006af6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699a      	ldr	r2, [r3, #24]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 0210 	orr.w	r2, r2, #16
 8005bc2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f004 fc33 	bl	800a434 <USB_ReadInterrupts>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bd8:	d13a      	bne.n	8005c50 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f005 f868 	bl	800acb4 <USB_HC_ReadInterrupt>
 8005be4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005be6:	2300      	movs	r3, #0
 8005be8:	617b      	str	r3, [r7, #20]
 8005bea:	e025      	b.n	8005c38 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f003 030f 	and.w	r3, r3, #15
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d018      	beq.n	8005c32 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c16:	d106      	bne.n	8005c26 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f8ab 	bl	8005d7a <HCD_HC_IN_IRQHandler>
 8005c24:	e005      	b.n	8005c32 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 fbf9 	bl	8006424 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	3301      	adds	r3, #1
 8005c36:	617b      	str	r3, [r7, #20]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d3d4      	bcc.n	8005bec <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c4a:	615a      	str	r2, [r3, #20]
 8005c4c:	e000      	b.n	8005c50 <HAL_HCD_IRQHandler+0x210>
      return;
 8005c4e:	bf00      	nop
    }
  }
}
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b082      	sub	sp, #8
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d101      	bne.n	8005c6c <HAL_HCD_Start+0x16>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	e013      	b.n	8005c94 <HAL_HCD_Start+0x3e>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2101      	movs	r1, #1
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f004 fd54 	bl	800a728 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f004 fa6c 	bl	800a162 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d101      	bne.n	8005cb2 <HAL_HCD_Stop+0x16>
 8005cae:	2302      	movs	r3, #2
 8005cb0:	e00d      	b.n	8005cce <HAL_HCD_Stop+0x32>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f005 f942 	bl	800af48 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b082      	sub	sp, #8
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f004 fcf6 	bl	800a6d4 <USB_ResetPort>
 8005ce8:	4603      	mov	r3, r0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3708      	adds	r7, #8
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b083      	sub	sp, #12
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005cfe:	78fb      	ldrb	r3, [r7, #3]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	212c      	movs	r1, #44	; 0x2c
 8005d04:	fb01 f303 	mul.w	r3, r1, r3
 8005d08:	4413      	add	r3, r2
 8005d0a:	3360      	adds	r3, #96	; 0x60
 8005d0c:	781b      	ldrb	r3, [r3, #0]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	460b      	mov	r3, r1
 8005d24:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005d26:	78fb      	ldrb	r3, [r7, #3]
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	212c      	movs	r1, #44	; 0x2c
 8005d2c:	fb01 f303 	mul.w	r3, r1, r3
 8005d30:	4413      	add	r3, r2
 8005d32:	3350      	adds	r3, #80	; 0x50
 8005d34:	681b      	ldr	r3, [r3, #0]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b082      	sub	sp, #8
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f004 fd3a 	bl	800a7c8 <USB_GetCurrentFrame>
 8005d54:	4603      	mov	r3, r0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b082      	sub	sp, #8
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f004 fd15 	bl	800a79a <USB_GetHostSpeed>
 8005d70:	4603      	mov	r3, r0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b086      	sub	sp, #24
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
 8005d82:	460b      	mov	r3, r1
 8005d84:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005d90:	78fb      	ldrb	r3, [r7, #3]
 8005d92:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 0304 	and.w	r3, r3, #4
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d11a      	bne.n	8005de0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db6:	461a      	mov	r2, r3
 8005db8:	2304      	movs	r3, #4
 8005dba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	212c      	movs	r1, #44	; 0x2c
 8005dc2:	fb01 f303 	mul.w	r3, r1, r3
 8005dc6:	4413      	add	r3, r2
 8005dc8:	3361      	adds	r3, #97	; 0x61
 8005dca:	2206      	movs	r2, #6
 8005dcc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	b2d2      	uxtb	r2, r2
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f004 ff7c 	bl	800acd6 <USB_HC_Halt>
 8005dde:	e0af      	b.n	8005f40 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df6:	d11b      	bne.n	8005e30 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e04:	461a      	mov	r2, r3
 8005e06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	212c      	movs	r1, #44	; 0x2c
 8005e12:	fb01 f303 	mul.w	r3, r1, r3
 8005e16:	4413      	add	r3, r2
 8005e18:	3361      	adds	r3, #97	; 0x61
 8005e1a:	2207      	movs	r2, #7
 8005e1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	b2d2      	uxtb	r2, r2
 8005e26:	4611      	mov	r1, r2
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f004 ff54 	bl	800acd6 <USB_HC_Halt>
 8005e2e:	e087      	b.n	8005f40 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f003 0320 	and.w	r3, r3, #32
 8005e42:	2b20      	cmp	r3, #32
 8005e44:	d109      	bne.n	8005e5a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e52:	461a      	mov	r2, r3
 8005e54:	2320      	movs	r3, #32
 8005e56:	6093      	str	r3, [r2, #8]
 8005e58:	e072      	b.n	8005f40 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f003 0308 	and.w	r3, r3, #8
 8005e6c:	2b08      	cmp	r3, #8
 8005e6e:	d11a      	bne.n	8005ea6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	2308      	movs	r3, #8
 8005e80:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	212c      	movs	r1, #44	; 0x2c
 8005e88:	fb01 f303 	mul.w	r3, r1, r3
 8005e8c:	4413      	add	r3, r2
 8005e8e:	3361      	adds	r3, #97	; 0x61
 8005e90:	2205      	movs	r2, #5
 8005e92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f004 ff19 	bl	800acd6 <USB_HC_Halt>
 8005ea4:	e04c      	b.n	8005f40 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ebc:	d11b      	bne.n	8005ef6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	015a      	lsls	r2, r3, #5
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eca:	461a      	mov	r2, r3
 8005ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ed0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	212c      	movs	r1, #44	; 0x2c
 8005ed8:	fb01 f303 	mul.w	r3, r1, r3
 8005edc:	4413      	add	r3, r2
 8005ede:	3361      	adds	r3, #97	; 0x61
 8005ee0:	2208      	movs	r2, #8
 8005ee2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	b2d2      	uxtb	r2, r2
 8005eec:	4611      	mov	r1, r2
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f004 fef1 	bl	800acd6 <USB_HC_Halt>
 8005ef4:	e024      	b.n	8005f40 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f08:	2b80      	cmp	r3, #128	; 0x80
 8005f0a:	d119      	bne.n	8005f40 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f18:	461a      	mov	r2, r3
 8005f1a:	2380      	movs	r3, #128	; 0x80
 8005f1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	212c      	movs	r1, #44	; 0x2c
 8005f24:	fb01 f303 	mul.w	r3, r1, r3
 8005f28:	4413      	add	r3, r2
 8005f2a:	3361      	adds	r3, #97	; 0x61
 8005f2c:	2206      	movs	r2, #6
 8005f2e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	b2d2      	uxtb	r2, r2
 8005f38:	4611      	mov	r1, r2
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f004 fecb 	bl	800acd6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f56:	d112      	bne.n	8005f7e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	b2d2      	uxtb	r2, r2
 8005f60:	4611      	mov	r1, r2
 8005f62:	4618      	mov	r0, r3
 8005f64:	f004 feb7 	bl	800acd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f74:	461a      	mov	r2, r3
 8005f76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f7a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005f7c:	e24e      	b.n	800641c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	f040 80df 	bne.w	8006154 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d019      	beq.n	8005fd2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	212c      	movs	r1, #44	; 0x2c
 8005fa4:	fb01 f303 	mul.w	r3, r1, r3
 8005fa8:	4413      	add	r3, r2
 8005faa:	3348      	adds	r3, #72	; 0x48
 8005fac:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	0159      	lsls	r1, r3, #5
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	440b      	add	r3, r1
 8005fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005fc0:	1ad2      	subs	r2, r2, r3
 8005fc2:	6879      	ldr	r1, [r7, #4]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	202c      	movs	r0, #44	; 0x2c
 8005fc8:	fb00 f303 	mul.w	r3, r0, r3
 8005fcc:	440b      	add	r3, r1
 8005fce:	3350      	adds	r3, #80	; 0x50
 8005fd0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	212c      	movs	r1, #44	; 0x2c
 8005fd8:	fb01 f303 	mul.w	r3, r1, r3
 8005fdc:	4413      	add	r3, r2
 8005fde:	3361      	adds	r3, #97	; 0x61
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	212c      	movs	r1, #44	; 0x2c
 8005fea:	fb01 f303 	mul.w	r3, r1, r3
 8005fee:	4413      	add	r3, r2
 8005ff0:	335c      	adds	r3, #92	; 0x5c
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006002:	461a      	mov	r2, r3
 8006004:	2301      	movs	r3, #1
 8006006:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	212c      	movs	r1, #44	; 0x2c
 800600e:	fb01 f303 	mul.w	r3, r1, r3
 8006012:	4413      	add	r3, r2
 8006014:	333f      	adds	r3, #63	; 0x3f
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d009      	beq.n	8006030 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	212c      	movs	r1, #44	; 0x2c
 8006022:	fb01 f303 	mul.w	r3, r1, r3
 8006026:	4413      	add	r3, r2
 8006028:	333f      	adds	r3, #63	; 0x3f
 800602a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800602c:	2b02      	cmp	r3, #2
 800602e:	d111      	bne.n	8006054 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	b2d2      	uxtb	r2, r2
 8006038:	4611      	mov	r1, r2
 800603a:	4618      	mov	r0, r3
 800603c:	f004 fe4b 	bl	800acd6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	4413      	add	r3, r2
 8006048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800604c:	461a      	mov	r2, r3
 800604e:	2310      	movs	r3, #16
 8006050:	6093      	str	r3, [r2, #8]
 8006052:	e03a      	b.n	80060ca <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	212c      	movs	r1, #44	; 0x2c
 800605a:	fb01 f303 	mul.w	r3, r1, r3
 800605e:	4413      	add	r3, r2
 8006060:	333f      	adds	r3, #63	; 0x3f
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b03      	cmp	r3, #3
 8006066:	d009      	beq.n	800607c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	212c      	movs	r1, #44	; 0x2c
 800606e:	fb01 f303 	mul.w	r3, r1, r3
 8006072:	4413      	add	r3, r2
 8006074:	333f      	adds	r3, #63	; 0x3f
 8006076:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8006078:	2b01      	cmp	r3, #1
 800607a:	d126      	bne.n	80060ca <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	4413      	add	r3, r2
 8006084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	0151      	lsls	r1, r2, #5
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	440a      	add	r2, r1
 8006092:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006096:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800609a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	212c      	movs	r1, #44	; 0x2c
 80060a2:	fb01 f303 	mul.w	r3, r1, r3
 80060a6:	4413      	add	r3, r2
 80060a8:	3360      	adds	r3, #96	; 0x60
 80060aa:	2201      	movs	r2, #1
 80060ac:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	b2d9      	uxtb	r1, r3
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	202c      	movs	r0, #44	; 0x2c
 80060b8:	fb00 f303 	mul.w	r3, r0, r3
 80060bc:	4413      	add	r3, r2
 80060be:	3360      	adds	r3, #96	; 0x60
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	461a      	mov	r2, r3
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f00a fee9 	bl	8010e9c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d12b      	bne.n	800612a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	212c      	movs	r1, #44	; 0x2c
 80060d8:	fb01 f303 	mul.w	r3, r1, r3
 80060dc:	4413      	add	r3, r2
 80060de:	3348      	adds	r3, #72	; 0x48
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	202c      	movs	r0, #44	; 0x2c
 80060e8:	fb00 f202 	mul.w	r2, r0, r2
 80060ec:	440a      	add	r2, r1
 80060ee:	3240      	adds	r2, #64	; 0x40
 80060f0:	8812      	ldrh	r2, [r2, #0]
 80060f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f000 818e 	beq.w	800641c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	212c      	movs	r1, #44	; 0x2c
 8006106:	fb01 f303 	mul.w	r3, r1, r3
 800610a:	4413      	add	r3, r2
 800610c:	3354      	adds	r3, #84	; 0x54
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	f083 0301 	eor.w	r3, r3, #1
 8006114:	b2d8      	uxtb	r0, r3
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	212c      	movs	r1, #44	; 0x2c
 800611c:	fb01 f303 	mul.w	r3, r1, r3
 8006120:	4413      	add	r3, r2
 8006122:	3354      	adds	r3, #84	; 0x54
 8006124:	4602      	mov	r2, r0
 8006126:	701a      	strb	r2, [r3, #0]
}
 8006128:	e178      	b.n	800641c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	212c      	movs	r1, #44	; 0x2c
 8006130:	fb01 f303 	mul.w	r3, r1, r3
 8006134:	4413      	add	r3, r2
 8006136:	3354      	adds	r3, #84	; 0x54
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	f083 0301 	eor.w	r3, r3, #1
 800613e:	b2d8      	uxtb	r0, r3
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	212c      	movs	r1, #44	; 0x2c
 8006146:	fb01 f303 	mul.w	r3, r1, r3
 800614a:	4413      	add	r3, r2
 800614c:	3354      	adds	r3, #84	; 0x54
 800614e:	4602      	mov	r2, r0
 8006150:	701a      	strb	r2, [r3, #0]
}
 8006152:	e163      	b.n	800641c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	4413      	add	r3, r2
 800615c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b02      	cmp	r3, #2
 8006168:	f040 80f6 	bne.w	8006358 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	212c      	movs	r1, #44	; 0x2c
 8006172:	fb01 f303 	mul.w	r3, r1, r3
 8006176:	4413      	add	r3, r2
 8006178:	3361      	adds	r3, #97	; 0x61
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d109      	bne.n	8006194 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	212c      	movs	r1, #44	; 0x2c
 8006186:	fb01 f303 	mul.w	r3, r1, r3
 800618a:	4413      	add	r3, r2
 800618c:	3360      	adds	r3, #96	; 0x60
 800618e:	2201      	movs	r2, #1
 8006190:	701a      	strb	r2, [r3, #0]
 8006192:	e0c9      	b.n	8006328 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	212c      	movs	r1, #44	; 0x2c
 800619a:	fb01 f303 	mul.w	r3, r1, r3
 800619e:	4413      	add	r3, r2
 80061a0:	3361      	adds	r3, #97	; 0x61
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	2b05      	cmp	r3, #5
 80061a6:	d109      	bne.n	80061bc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	212c      	movs	r1, #44	; 0x2c
 80061ae:	fb01 f303 	mul.w	r3, r1, r3
 80061b2:	4413      	add	r3, r2
 80061b4:	3360      	adds	r3, #96	; 0x60
 80061b6:	2205      	movs	r2, #5
 80061b8:	701a      	strb	r2, [r3, #0]
 80061ba:	e0b5      	b.n	8006328 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	212c      	movs	r1, #44	; 0x2c
 80061c2:	fb01 f303 	mul.w	r3, r1, r3
 80061c6:	4413      	add	r3, r2
 80061c8:	3361      	adds	r3, #97	; 0x61
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	2b06      	cmp	r3, #6
 80061ce:	d009      	beq.n	80061e4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	212c      	movs	r1, #44	; 0x2c
 80061d6:	fb01 f303 	mul.w	r3, r1, r3
 80061da:	4413      	add	r3, r2
 80061dc:	3361      	adds	r3, #97	; 0x61
 80061de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80061e0:	2b08      	cmp	r3, #8
 80061e2:	d150      	bne.n	8006286 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	212c      	movs	r1, #44	; 0x2c
 80061ea:	fb01 f303 	mul.w	r3, r1, r3
 80061ee:	4413      	add	r3, r2
 80061f0:	335c      	adds	r3, #92	; 0x5c
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	1c5a      	adds	r2, r3, #1
 80061f6:	6879      	ldr	r1, [r7, #4]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	202c      	movs	r0, #44	; 0x2c
 80061fc:	fb00 f303 	mul.w	r3, r0, r3
 8006200:	440b      	add	r3, r1
 8006202:	335c      	adds	r3, #92	; 0x5c
 8006204:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	212c      	movs	r1, #44	; 0x2c
 800620c:	fb01 f303 	mul.w	r3, r1, r3
 8006210:	4413      	add	r3, r2
 8006212:	335c      	adds	r3, #92	; 0x5c
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b02      	cmp	r3, #2
 8006218:	d912      	bls.n	8006240 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	212c      	movs	r1, #44	; 0x2c
 8006220:	fb01 f303 	mul.w	r3, r1, r3
 8006224:	4413      	add	r3, r2
 8006226:	335c      	adds	r3, #92	; 0x5c
 8006228:	2200      	movs	r2, #0
 800622a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	212c      	movs	r1, #44	; 0x2c
 8006232:	fb01 f303 	mul.w	r3, r1, r3
 8006236:	4413      	add	r3, r2
 8006238:	3360      	adds	r3, #96	; 0x60
 800623a:	2204      	movs	r2, #4
 800623c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800623e:	e073      	b.n	8006328 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	212c      	movs	r1, #44	; 0x2c
 8006246:	fb01 f303 	mul.w	r3, r1, r3
 800624a:	4413      	add	r3, r2
 800624c:	3360      	adds	r3, #96	; 0x60
 800624e:	2202      	movs	r2, #2
 8006250:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	015a      	lsls	r2, r3, #5
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	4413      	add	r3, r2
 800625a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006268:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006270:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	4413      	add	r3, r2
 800627a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627e:	461a      	mov	r2, r3
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006284:	e050      	b.n	8006328 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	212c      	movs	r1, #44	; 0x2c
 800628c:	fb01 f303 	mul.w	r3, r1, r3
 8006290:	4413      	add	r3, r2
 8006292:	3361      	adds	r3, #97	; 0x61
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	2b03      	cmp	r3, #3
 8006298:	d122      	bne.n	80062e0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	212c      	movs	r1, #44	; 0x2c
 80062a0:	fb01 f303 	mul.w	r3, r1, r3
 80062a4:	4413      	add	r3, r2
 80062a6:	3360      	adds	r3, #96	; 0x60
 80062a8:	2202      	movs	r2, #2
 80062aa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062c2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062ca:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	015a      	lsls	r2, r3, #5
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	4413      	add	r3, r2
 80062d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d8:	461a      	mov	r2, r3
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	e023      	b.n	8006328 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	212c      	movs	r1, #44	; 0x2c
 80062e6:	fb01 f303 	mul.w	r3, r1, r3
 80062ea:	4413      	add	r3, r2
 80062ec:	3361      	adds	r3, #97	; 0x61
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	2b07      	cmp	r3, #7
 80062f2:	d119      	bne.n	8006328 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	212c      	movs	r1, #44	; 0x2c
 80062fa:	fb01 f303 	mul.w	r3, r1, r3
 80062fe:	4413      	add	r3, r2
 8006300:	335c      	adds	r3, #92	; 0x5c
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	1c5a      	adds	r2, r3, #1
 8006306:	6879      	ldr	r1, [r7, #4]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	202c      	movs	r0, #44	; 0x2c
 800630c:	fb00 f303 	mul.w	r3, r0, r3
 8006310:	440b      	add	r3, r1
 8006312:	335c      	adds	r3, #92	; 0x5c
 8006314:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	212c      	movs	r1, #44	; 0x2c
 800631c:	fb01 f303 	mul.w	r3, r1, r3
 8006320:	4413      	add	r3, r2
 8006322:	3360      	adds	r3, #96	; 0x60
 8006324:	2204      	movs	r2, #4
 8006326:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	4413      	add	r3, r2
 8006330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006334:	461a      	mov	r2, r3
 8006336:	2302      	movs	r3, #2
 8006338:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	b2d9      	uxtb	r1, r3
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	202c      	movs	r0, #44	; 0x2c
 8006344:	fb00 f303 	mul.w	r3, r0, r3
 8006348:	4413      	add	r3, r2
 800634a:	3360      	adds	r3, #96	; 0x60
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	461a      	mov	r2, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f00a fda3 	bl	8010e9c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006356:	e061      	b.n	800641c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	4413      	add	r3, r2
 8006360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f003 0310 	and.w	r3, r3, #16
 800636a:	2b10      	cmp	r3, #16
 800636c:	d156      	bne.n	800641c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	212c      	movs	r1, #44	; 0x2c
 8006374:	fb01 f303 	mul.w	r3, r1, r3
 8006378:	4413      	add	r3, r2
 800637a:	333f      	adds	r3, #63	; 0x3f
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	2b03      	cmp	r3, #3
 8006380:	d111      	bne.n	80063a6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	212c      	movs	r1, #44	; 0x2c
 8006388:	fb01 f303 	mul.w	r3, r1, r3
 800638c:	4413      	add	r3, r2
 800638e:	335c      	adds	r3, #92	; 0x5c
 8006390:	2200      	movs	r2, #0
 8006392:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	4611      	mov	r1, r2
 800639e:	4618      	mov	r0, r3
 80063a0:	f004 fc99 	bl	800acd6 <USB_HC_Halt>
 80063a4:	e031      	b.n	800640a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	212c      	movs	r1, #44	; 0x2c
 80063ac:	fb01 f303 	mul.w	r3, r1, r3
 80063b0:	4413      	add	r3, r2
 80063b2:	333f      	adds	r3, #63	; 0x3f
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d009      	beq.n	80063ce <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	212c      	movs	r1, #44	; 0x2c
 80063c0:	fb01 f303 	mul.w	r3, r1, r3
 80063c4:	4413      	add	r3, r2
 80063c6:	333f      	adds	r3, #63	; 0x3f
 80063c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d11d      	bne.n	800640a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	212c      	movs	r1, #44	; 0x2c
 80063d4:	fb01 f303 	mul.w	r3, r1, r3
 80063d8:	4413      	add	r3, r2
 80063da:	335c      	adds	r3, #92	; 0x5c
 80063dc:	2200      	movs	r2, #0
 80063de:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d110      	bne.n	800640a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	212c      	movs	r1, #44	; 0x2c
 80063ee:	fb01 f303 	mul.w	r3, r1, r3
 80063f2:	4413      	add	r3, r2
 80063f4:	3361      	adds	r3, #97	; 0x61
 80063f6:	2203      	movs	r2, #3
 80063f8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	b2d2      	uxtb	r2, r2
 8006402:	4611      	mov	r1, r2
 8006404:	4618      	mov	r0, r3
 8006406:	f004 fc66 	bl	800acd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	4413      	add	r3, r2
 8006412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006416:	461a      	mov	r2, r3
 8006418:	2310      	movs	r3, #16
 800641a:	6093      	str	r3, [r2, #8]
}
 800641c:	bf00      	nop
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b088      	sub	sp, #32
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	460b      	mov	r3, r1
 800642e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800643a:	78fb      	ldrb	r3, [r7, #3]
 800643c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	4413      	add	r3, r2
 8006446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b04      	cmp	r3, #4
 8006452:	d11a      	bne.n	800648a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	4413      	add	r3, r2
 800645c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006460:	461a      	mov	r2, r3
 8006462:	2304      	movs	r3, #4
 8006464:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	212c      	movs	r1, #44	; 0x2c
 800646c:	fb01 f303 	mul.w	r3, r1, r3
 8006470:	4413      	add	r3, r2
 8006472:	3361      	adds	r3, #97	; 0x61
 8006474:	2206      	movs	r2, #6
 8006476:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	b2d2      	uxtb	r2, r2
 8006480:	4611      	mov	r1, r2
 8006482:	4618      	mov	r0, r3
 8006484:	f004 fc27 	bl	800acd6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8006488:	e331      	b.n	8006aee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	4413      	add	r3, r2
 8006492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f003 0320 	and.w	r3, r3, #32
 800649c:	2b20      	cmp	r3, #32
 800649e:	d12e      	bne.n	80064fe <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ac:	461a      	mov	r2, r3
 80064ae:	2320      	movs	r3, #32
 80064b0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	212c      	movs	r1, #44	; 0x2c
 80064b8:	fb01 f303 	mul.w	r3, r1, r3
 80064bc:	4413      	add	r3, r2
 80064be:	333d      	adds	r3, #61	; 0x3d
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	f040 8313 	bne.w	8006aee <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	212c      	movs	r1, #44	; 0x2c
 80064ce:	fb01 f303 	mul.w	r3, r1, r3
 80064d2:	4413      	add	r3, r2
 80064d4:	333d      	adds	r3, #61	; 0x3d
 80064d6:	2200      	movs	r2, #0
 80064d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	212c      	movs	r1, #44	; 0x2c
 80064e0:	fb01 f303 	mul.w	r3, r1, r3
 80064e4:	4413      	add	r3, r2
 80064e6:	3360      	adds	r3, #96	; 0x60
 80064e8:	2202      	movs	r2, #2
 80064ea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	4611      	mov	r1, r2
 80064f6:	4618      	mov	r0, r3
 80064f8:	f004 fbed 	bl	800acd6 <USB_HC_Halt>
}
 80064fc:	e2f7      	b.n	8006aee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	4413      	add	r3, r2
 8006506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006514:	d112      	bne.n	800653c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	015a      	lsls	r2, r3, #5
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	4413      	add	r3, r2
 800651e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006522:	461a      	mov	r2, r3
 8006524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006528:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	b2d2      	uxtb	r2, r2
 8006532:	4611      	mov	r1, r2
 8006534:	4618      	mov	r0, r3
 8006536:	f004 fbce 	bl	800acd6 <USB_HC_Halt>
}
 800653a:	e2d8      	b.n	8006aee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	4413      	add	r3, r2
 8006544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b01      	cmp	r3, #1
 8006550:	d140      	bne.n	80065d4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	212c      	movs	r1, #44	; 0x2c
 8006558:	fb01 f303 	mul.w	r3, r1, r3
 800655c:	4413      	add	r3, r2
 800655e:	335c      	adds	r3, #92	; 0x5c
 8006560:	2200      	movs	r2, #0
 8006562:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	4413      	add	r3, r2
 800656c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006576:	2b40      	cmp	r3, #64	; 0x40
 8006578:	d111      	bne.n	800659e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	212c      	movs	r1, #44	; 0x2c
 8006580:	fb01 f303 	mul.w	r3, r1, r3
 8006584:	4413      	add	r3, r2
 8006586:	333d      	adds	r3, #61	; 0x3d
 8006588:	2201      	movs	r2, #1
 800658a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	4413      	add	r3, r2
 8006594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006598:	461a      	mov	r2, r3
 800659a:	2340      	movs	r3, #64	; 0x40
 800659c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065aa:	461a      	mov	r2, r3
 80065ac:	2301      	movs	r3, #1
 80065ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	212c      	movs	r1, #44	; 0x2c
 80065b6:	fb01 f303 	mul.w	r3, r1, r3
 80065ba:	4413      	add	r3, r2
 80065bc:	3361      	adds	r3, #97	; 0x61
 80065be:	2201      	movs	r2, #1
 80065c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	b2d2      	uxtb	r2, r2
 80065ca:	4611      	mov	r1, r2
 80065cc:	4618      	mov	r0, r3
 80065ce:	f004 fb82 	bl	800acd6 <USB_HC_Halt>
}
 80065d2:	e28c      	b.n	8006aee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e6:	2b40      	cmp	r3, #64	; 0x40
 80065e8:	d12c      	bne.n	8006644 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	212c      	movs	r1, #44	; 0x2c
 80065f0:	fb01 f303 	mul.w	r3, r1, r3
 80065f4:	4413      	add	r3, r2
 80065f6:	3361      	adds	r3, #97	; 0x61
 80065f8:	2204      	movs	r2, #4
 80065fa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	212c      	movs	r1, #44	; 0x2c
 8006602:	fb01 f303 	mul.w	r3, r1, r3
 8006606:	4413      	add	r3, r2
 8006608:	333d      	adds	r3, #61	; 0x3d
 800660a:	2201      	movs	r2, #1
 800660c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	212c      	movs	r1, #44	; 0x2c
 8006614:	fb01 f303 	mul.w	r3, r1, r3
 8006618:	4413      	add	r3, r2
 800661a:	335c      	adds	r3, #92	; 0x5c
 800661c:	2200      	movs	r2, #0
 800661e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	b2d2      	uxtb	r2, r2
 8006628:	4611      	mov	r1, r2
 800662a:	4618      	mov	r0, r3
 800662c:	f004 fb53 	bl	800acd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	4413      	add	r3, r2
 8006638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800663c:	461a      	mov	r2, r3
 800663e:	2340      	movs	r3, #64	; 0x40
 8006640:	6093      	str	r3, [r2, #8]
}
 8006642:	e254      	b.n	8006aee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	4413      	add	r3, r2
 800664c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f003 0308 	and.w	r3, r3, #8
 8006656:	2b08      	cmp	r3, #8
 8006658:	d11a      	bne.n	8006690 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	4413      	add	r3, r2
 8006662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006666:	461a      	mov	r2, r3
 8006668:	2308      	movs	r3, #8
 800666a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	212c      	movs	r1, #44	; 0x2c
 8006672:	fb01 f303 	mul.w	r3, r1, r3
 8006676:	4413      	add	r3, r2
 8006678:	3361      	adds	r3, #97	; 0x61
 800667a:	2205      	movs	r2, #5
 800667c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	b2d2      	uxtb	r2, r2
 8006686:	4611      	mov	r1, r2
 8006688:	4618      	mov	r0, r3
 800668a:	f004 fb24 	bl	800acd6 <USB_HC_Halt>
}
 800668e:	e22e      	b.n	8006aee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	4413      	add	r3, r2
 8006698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f003 0310 	and.w	r3, r3, #16
 80066a2:	2b10      	cmp	r3, #16
 80066a4:	d140      	bne.n	8006728 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	212c      	movs	r1, #44	; 0x2c
 80066ac:	fb01 f303 	mul.w	r3, r1, r3
 80066b0:	4413      	add	r3, r2
 80066b2:	335c      	adds	r3, #92	; 0x5c
 80066b4:	2200      	movs	r2, #0
 80066b6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	212c      	movs	r1, #44	; 0x2c
 80066be:	fb01 f303 	mul.w	r3, r1, r3
 80066c2:	4413      	add	r3, r2
 80066c4:	3361      	adds	r3, #97	; 0x61
 80066c6:	2203      	movs	r2, #3
 80066c8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	212c      	movs	r1, #44	; 0x2c
 80066d0:	fb01 f303 	mul.w	r3, r1, r3
 80066d4:	4413      	add	r3, r2
 80066d6:	333d      	adds	r3, #61	; 0x3d
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d112      	bne.n	8006704 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	212c      	movs	r1, #44	; 0x2c
 80066e4:	fb01 f303 	mul.w	r3, r1, r3
 80066e8:	4413      	add	r3, r2
 80066ea:	333c      	adds	r3, #60	; 0x3c
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d108      	bne.n	8006704 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	212c      	movs	r1, #44	; 0x2c
 80066f8:	fb01 f303 	mul.w	r3, r1, r3
 80066fc:	4413      	add	r3, r2
 80066fe:	333d      	adds	r3, #61	; 0x3d
 8006700:	2201      	movs	r2, #1
 8006702:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	b2d2      	uxtb	r2, r2
 800670c:	4611      	mov	r1, r2
 800670e:	4618      	mov	r0, r3
 8006710:	f004 fae1 	bl	800acd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	4413      	add	r3, r2
 800671c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006720:	461a      	mov	r2, r3
 8006722:	2310      	movs	r3, #16
 8006724:	6093      	str	r3, [r2, #8]
}
 8006726:	e1e2      	b.n	8006aee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	4413      	add	r3, r2
 8006730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800673a:	2b80      	cmp	r3, #128	; 0x80
 800673c:	d164      	bne.n	8006808 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d111      	bne.n	800676a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	212c      	movs	r1, #44	; 0x2c
 800674c:	fb01 f303 	mul.w	r3, r1, r3
 8006750:	4413      	add	r3, r2
 8006752:	3361      	adds	r3, #97	; 0x61
 8006754:	2206      	movs	r2, #6
 8006756:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	b2d2      	uxtb	r2, r2
 8006760:	4611      	mov	r1, r2
 8006762:	4618      	mov	r0, r3
 8006764:	f004 fab7 	bl	800acd6 <USB_HC_Halt>
 8006768:	e044      	b.n	80067f4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	212c      	movs	r1, #44	; 0x2c
 8006770:	fb01 f303 	mul.w	r3, r1, r3
 8006774:	4413      	add	r3, r2
 8006776:	335c      	adds	r3, #92	; 0x5c
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	6879      	ldr	r1, [r7, #4]
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	202c      	movs	r0, #44	; 0x2c
 8006782:	fb00 f303 	mul.w	r3, r0, r3
 8006786:	440b      	add	r3, r1
 8006788:	335c      	adds	r3, #92	; 0x5c
 800678a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	212c      	movs	r1, #44	; 0x2c
 8006792:	fb01 f303 	mul.w	r3, r1, r3
 8006796:	4413      	add	r3, r2
 8006798:	335c      	adds	r3, #92	; 0x5c
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b02      	cmp	r3, #2
 800679e:	d920      	bls.n	80067e2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	212c      	movs	r1, #44	; 0x2c
 80067a6:	fb01 f303 	mul.w	r3, r1, r3
 80067aa:	4413      	add	r3, r2
 80067ac:	335c      	adds	r3, #92	; 0x5c
 80067ae:	2200      	movs	r2, #0
 80067b0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	212c      	movs	r1, #44	; 0x2c
 80067b8:	fb01 f303 	mul.w	r3, r1, r3
 80067bc:	4413      	add	r3, r2
 80067be:	3360      	adds	r3, #96	; 0x60
 80067c0:	2204      	movs	r2, #4
 80067c2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	b2d9      	uxtb	r1, r3
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	202c      	movs	r0, #44	; 0x2c
 80067ce:	fb00 f303 	mul.w	r3, r0, r3
 80067d2:	4413      	add	r3, r2
 80067d4:	3360      	adds	r3, #96	; 0x60
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	461a      	mov	r2, r3
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f00a fb5e 	bl	8010e9c <HAL_HCD_HC_NotifyURBChange_Callback>
 80067e0:	e008      	b.n	80067f4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	212c      	movs	r1, #44	; 0x2c
 80067e8:	fb01 f303 	mul.w	r3, r1, r3
 80067ec:	4413      	add	r3, r2
 80067ee:	3360      	adds	r3, #96	; 0x60
 80067f0:	2202      	movs	r2, #2
 80067f2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006800:	461a      	mov	r2, r3
 8006802:	2380      	movs	r3, #128	; 0x80
 8006804:	6093      	str	r3, [r2, #8]
}
 8006806:	e172      	b.n	8006aee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	4413      	add	r3, r2
 8006810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800681a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800681e:	d11b      	bne.n	8006858 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	212c      	movs	r1, #44	; 0x2c
 8006826:	fb01 f303 	mul.w	r3, r1, r3
 800682a:	4413      	add	r3, r2
 800682c:	3361      	adds	r3, #97	; 0x61
 800682e:	2208      	movs	r2, #8
 8006830:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	b2d2      	uxtb	r2, r2
 800683a:	4611      	mov	r1, r2
 800683c:	4618      	mov	r0, r3
 800683e:	f004 fa4a 	bl	800acd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	4413      	add	r3, r2
 800684a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800684e:	461a      	mov	r2, r3
 8006850:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006854:	6093      	str	r3, [r2, #8]
}
 8006856:	e14a      	b.n	8006aee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	4413      	add	r3, r2
 8006860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b02      	cmp	r3, #2
 800686c:	f040 813f 	bne.w	8006aee <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	212c      	movs	r1, #44	; 0x2c
 8006876:	fb01 f303 	mul.w	r3, r1, r3
 800687a:	4413      	add	r3, r2
 800687c:	3361      	adds	r3, #97	; 0x61
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d17d      	bne.n	8006980 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	212c      	movs	r1, #44	; 0x2c
 800688a:	fb01 f303 	mul.w	r3, r1, r3
 800688e:	4413      	add	r3, r2
 8006890:	3360      	adds	r3, #96	; 0x60
 8006892:	2201      	movs	r2, #1
 8006894:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	212c      	movs	r1, #44	; 0x2c
 800689c:	fb01 f303 	mul.w	r3, r1, r3
 80068a0:	4413      	add	r3, r2
 80068a2:	333f      	adds	r3, #63	; 0x3f
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d00a      	beq.n	80068c0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	212c      	movs	r1, #44	; 0x2c
 80068b0:	fb01 f303 	mul.w	r3, r1, r3
 80068b4:	4413      	add	r3, r2
 80068b6:	333f      	adds	r3, #63	; 0x3f
 80068b8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80068ba:	2b03      	cmp	r3, #3
 80068bc:	f040 8100 	bne.w	8006ac0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d113      	bne.n	80068f0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	212c      	movs	r1, #44	; 0x2c
 80068ce:	fb01 f303 	mul.w	r3, r1, r3
 80068d2:	4413      	add	r3, r2
 80068d4:	3355      	adds	r3, #85	; 0x55
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	f083 0301 	eor.w	r3, r3, #1
 80068dc:	b2d8      	uxtb	r0, r3
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	212c      	movs	r1, #44	; 0x2c
 80068e4:	fb01 f303 	mul.w	r3, r1, r3
 80068e8:	4413      	add	r3, r2
 80068ea:	3355      	adds	r3, #85	; 0x55
 80068ec:	4602      	mov	r2, r0
 80068ee:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	f040 80e3 	bne.w	8006ac0 <HCD_HC_OUT_IRQHandler+0x69c>
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	212c      	movs	r1, #44	; 0x2c
 8006900:	fb01 f303 	mul.w	r3, r1, r3
 8006904:	4413      	add	r3, r2
 8006906:	334c      	adds	r3, #76	; 0x4c
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 80d8 	beq.w	8006ac0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	212c      	movs	r1, #44	; 0x2c
 8006916:	fb01 f303 	mul.w	r3, r1, r3
 800691a:	4413      	add	r3, r2
 800691c:	334c      	adds	r3, #76	; 0x4c
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6879      	ldr	r1, [r7, #4]
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	202c      	movs	r0, #44	; 0x2c
 8006926:	fb00 f202 	mul.w	r2, r0, r2
 800692a:	440a      	add	r2, r1
 800692c:	3240      	adds	r2, #64	; 0x40
 800692e:	8812      	ldrh	r2, [r2, #0]
 8006930:	4413      	add	r3, r2
 8006932:	3b01      	subs	r3, #1
 8006934:	6879      	ldr	r1, [r7, #4]
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	202c      	movs	r0, #44	; 0x2c
 800693a:	fb00 f202 	mul.w	r2, r0, r2
 800693e:	440a      	add	r2, r1
 8006940:	3240      	adds	r2, #64	; 0x40
 8006942:	8812      	ldrh	r2, [r2, #0]
 8006944:	fbb3 f3f2 	udiv	r3, r3, r2
 8006948:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 80b5 	beq.w	8006ac0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	212c      	movs	r1, #44	; 0x2c
 800695c:	fb01 f303 	mul.w	r3, r1, r3
 8006960:	4413      	add	r3, r2
 8006962:	3355      	adds	r3, #85	; 0x55
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	f083 0301 	eor.w	r3, r3, #1
 800696a:	b2d8      	uxtb	r0, r3
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	212c      	movs	r1, #44	; 0x2c
 8006972:	fb01 f303 	mul.w	r3, r1, r3
 8006976:	4413      	add	r3, r2
 8006978:	3355      	adds	r3, #85	; 0x55
 800697a:	4602      	mov	r2, r0
 800697c:	701a      	strb	r2, [r3, #0]
 800697e:	e09f      	b.n	8006ac0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	212c      	movs	r1, #44	; 0x2c
 8006986:	fb01 f303 	mul.w	r3, r1, r3
 800698a:	4413      	add	r3, r2
 800698c:	3361      	adds	r3, #97	; 0x61
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b03      	cmp	r3, #3
 8006992:	d109      	bne.n	80069a8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	212c      	movs	r1, #44	; 0x2c
 800699a:	fb01 f303 	mul.w	r3, r1, r3
 800699e:	4413      	add	r3, r2
 80069a0:	3360      	adds	r3, #96	; 0x60
 80069a2:	2202      	movs	r2, #2
 80069a4:	701a      	strb	r2, [r3, #0]
 80069a6:	e08b      	b.n	8006ac0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	212c      	movs	r1, #44	; 0x2c
 80069ae:	fb01 f303 	mul.w	r3, r1, r3
 80069b2:	4413      	add	r3, r2
 80069b4:	3361      	adds	r3, #97	; 0x61
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	2b04      	cmp	r3, #4
 80069ba:	d109      	bne.n	80069d0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	212c      	movs	r1, #44	; 0x2c
 80069c2:	fb01 f303 	mul.w	r3, r1, r3
 80069c6:	4413      	add	r3, r2
 80069c8:	3360      	adds	r3, #96	; 0x60
 80069ca:	2202      	movs	r2, #2
 80069cc:	701a      	strb	r2, [r3, #0]
 80069ce:	e077      	b.n	8006ac0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	212c      	movs	r1, #44	; 0x2c
 80069d6:	fb01 f303 	mul.w	r3, r1, r3
 80069da:	4413      	add	r3, r2
 80069dc:	3361      	adds	r3, #97	; 0x61
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	2b05      	cmp	r3, #5
 80069e2:	d109      	bne.n	80069f8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	212c      	movs	r1, #44	; 0x2c
 80069ea:	fb01 f303 	mul.w	r3, r1, r3
 80069ee:	4413      	add	r3, r2
 80069f0:	3360      	adds	r3, #96	; 0x60
 80069f2:	2205      	movs	r2, #5
 80069f4:	701a      	strb	r2, [r3, #0]
 80069f6:	e063      	b.n	8006ac0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	212c      	movs	r1, #44	; 0x2c
 80069fe:	fb01 f303 	mul.w	r3, r1, r3
 8006a02:	4413      	add	r3, r2
 8006a04:	3361      	adds	r3, #97	; 0x61
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	2b06      	cmp	r3, #6
 8006a0a:	d009      	beq.n	8006a20 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	212c      	movs	r1, #44	; 0x2c
 8006a12:	fb01 f303 	mul.w	r3, r1, r3
 8006a16:	4413      	add	r3, r2
 8006a18:	3361      	adds	r3, #97	; 0x61
 8006a1a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006a1c:	2b08      	cmp	r3, #8
 8006a1e:	d14f      	bne.n	8006ac0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	212c      	movs	r1, #44	; 0x2c
 8006a26:	fb01 f303 	mul.w	r3, r1, r3
 8006a2a:	4413      	add	r3, r2
 8006a2c:	335c      	adds	r3, #92	; 0x5c
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	1c5a      	adds	r2, r3, #1
 8006a32:	6879      	ldr	r1, [r7, #4]
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	202c      	movs	r0, #44	; 0x2c
 8006a38:	fb00 f303 	mul.w	r3, r0, r3
 8006a3c:	440b      	add	r3, r1
 8006a3e:	335c      	adds	r3, #92	; 0x5c
 8006a40:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	212c      	movs	r1, #44	; 0x2c
 8006a48:	fb01 f303 	mul.w	r3, r1, r3
 8006a4c:	4413      	add	r3, r2
 8006a4e:	335c      	adds	r3, #92	; 0x5c
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d912      	bls.n	8006a7c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	212c      	movs	r1, #44	; 0x2c
 8006a5c:	fb01 f303 	mul.w	r3, r1, r3
 8006a60:	4413      	add	r3, r2
 8006a62:	335c      	adds	r3, #92	; 0x5c
 8006a64:	2200      	movs	r2, #0
 8006a66:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	212c      	movs	r1, #44	; 0x2c
 8006a6e:	fb01 f303 	mul.w	r3, r1, r3
 8006a72:	4413      	add	r3, r2
 8006a74:	3360      	adds	r3, #96	; 0x60
 8006a76:	2204      	movs	r2, #4
 8006a78:	701a      	strb	r2, [r3, #0]
 8006a7a:	e021      	b.n	8006ac0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	212c      	movs	r1, #44	; 0x2c
 8006a82:	fb01 f303 	mul.w	r3, r1, r3
 8006a86:	4413      	add	r3, r2
 8006a88:	3360      	adds	r3, #96	; 0x60
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006aa4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006aac:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	015a      	lsls	r2, r3, #5
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aba:	461a      	mov	r2, r3
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006acc:	461a      	mov	r2, r3
 8006ace:	2302      	movs	r3, #2
 8006ad0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	b2d9      	uxtb	r1, r3
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	202c      	movs	r0, #44	; 0x2c
 8006adc:	fb00 f303 	mul.w	r3, r0, r3
 8006ae0:	4413      	add	r3, r2
 8006ae2:	3360      	adds	r3, #96	; 0x60
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f00a f9d7 	bl	8010e9c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006aee:	bf00      	nop
 8006af0:	3720      	adds	r7, #32
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b08a      	sub	sp, #40	; 0x28
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	f003 030f 	and.w	r3, r3, #15
 8006b16:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	0c5b      	lsrs	r3, r3, #17
 8006b1c:	f003 030f 	and.w	r3, r3, #15
 8006b20:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	091b      	lsrs	r3, r3, #4
 8006b26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b2a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d004      	beq.n	8006b3c <HCD_RXQLVL_IRQHandler+0x46>
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	2b05      	cmp	r3, #5
 8006b36:	f000 80a9 	beq.w	8006c8c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006b3a:	e0aa      	b.n	8006c92 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f000 80a6 	beq.w	8006c90 <HCD_RXQLVL_IRQHandler+0x19a>
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	212c      	movs	r1, #44	; 0x2c
 8006b4a:	fb01 f303 	mul.w	r3, r1, r3
 8006b4e:	4413      	add	r3, r2
 8006b50:	3344      	adds	r3, #68	; 0x44
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 809b 	beq.w	8006c90 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	212c      	movs	r1, #44	; 0x2c
 8006b60:	fb01 f303 	mul.w	r3, r1, r3
 8006b64:	4413      	add	r3, r2
 8006b66:	3350      	adds	r3, #80	; 0x50
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	441a      	add	r2, r3
 8006b6e:	6879      	ldr	r1, [r7, #4]
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	202c      	movs	r0, #44	; 0x2c
 8006b74:	fb00 f303 	mul.w	r3, r0, r3
 8006b78:	440b      	add	r3, r1
 8006b7a:	334c      	adds	r3, #76	; 0x4c
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d87a      	bhi.n	8006c78 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6818      	ldr	r0, [r3, #0]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	212c      	movs	r1, #44	; 0x2c
 8006b8c:	fb01 f303 	mul.w	r3, r1, r3
 8006b90:	4413      	add	r3, r2
 8006b92:	3344      	adds	r3, #68	; 0x44
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	b292      	uxth	r2, r2
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	f003 fbf2 	bl	800a384 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	212c      	movs	r1, #44	; 0x2c
 8006ba6:	fb01 f303 	mul.w	r3, r1, r3
 8006baa:	4413      	add	r3, r2
 8006bac:	3344      	adds	r3, #68	; 0x44
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	441a      	add	r2, r3
 8006bb4:	6879      	ldr	r1, [r7, #4]
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	202c      	movs	r0, #44	; 0x2c
 8006bba:	fb00 f303 	mul.w	r3, r0, r3
 8006bbe:	440b      	add	r3, r1
 8006bc0:	3344      	adds	r3, #68	; 0x44
 8006bc2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	212c      	movs	r1, #44	; 0x2c
 8006bca:	fb01 f303 	mul.w	r3, r1, r3
 8006bce:	4413      	add	r3, r2
 8006bd0:	3350      	adds	r3, #80	; 0x50
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	441a      	add	r2, r3
 8006bd8:	6879      	ldr	r1, [r7, #4]
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	202c      	movs	r0, #44	; 0x2c
 8006bde:	fb00 f303 	mul.w	r3, r0, r3
 8006be2:	440b      	add	r3, r1
 8006be4:	3350      	adds	r3, #80	; 0x50
 8006be6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	0cdb      	lsrs	r3, r3, #19
 8006bf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bfc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	212c      	movs	r1, #44	; 0x2c
 8006c04:	fb01 f303 	mul.w	r3, r1, r3
 8006c08:	4413      	add	r3, r2
 8006c0a:	3340      	adds	r3, #64	; 0x40
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d13c      	bne.n	8006c90 <HCD_RXQLVL_IRQHandler+0x19a>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d039      	beq.n	8006c90 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	6a3b      	ldr	r3, [r7, #32]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c32:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c3a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	015a      	lsls	r2, r3, #5
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c48:	461a      	mov	r2, r3
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	212c      	movs	r1, #44	; 0x2c
 8006c54:	fb01 f303 	mul.w	r3, r1, r3
 8006c58:	4413      	add	r3, r2
 8006c5a:	3354      	adds	r3, #84	; 0x54
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	f083 0301 	eor.w	r3, r3, #1
 8006c62:	b2d8      	uxtb	r0, r3
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	212c      	movs	r1, #44	; 0x2c
 8006c6a:	fb01 f303 	mul.w	r3, r1, r3
 8006c6e:	4413      	add	r3, r2
 8006c70:	3354      	adds	r3, #84	; 0x54
 8006c72:	4602      	mov	r2, r0
 8006c74:	701a      	strb	r2, [r3, #0]
      break;
 8006c76:	e00b      	b.n	8006c90 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	212c      	movs	r1, #44	; 0x2c
 8006c7e:	fb01 f303 	mul.w	r3, r1, r3
 8006c82:	4413      	add	r3, r2
 8006c84:	3360      	adds	r3, #96	; 0x60
 8006c86:	2204      	movs	r2, #4
 8006c88:	701a      	strb	r2, [r3, #0]
      break;
 8006c8a:	e001      	b.n	8006c90 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006c8c:	bf00      	nop
 8006c8e:	e000      	b.n	8006c92 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006c90:	bf00      	nop
  }
}
 8006c92:	bf00      	nop
 8006c94:	3728      	adds	r7, #40	; 0x28
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b086      	sub	sp, #24
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006cc6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d10b      	bne.n	8006cea <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d102      	bne.n	8006ce2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f00a f8c1 	bl	8010e64 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	f043 0302 	orr.w	r3, r3, #2
 8006ce8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f003 0308 	and.w	r3, r3, #8
 8006cf0:	2b08      	cmp	r3, #8
 8006cf2:	d132      	bne.n	8006d5a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	f043 0308 	orr.w	r3, r3, #8
 8006cfa:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f003 0304 	and.w	r3, r3, #4
 8006d02:	2b04      	cmp	r3, #4
 8006d04:	d126      	bne.n	8006d54 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d113      	bne.n	8006d36 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006d14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d18:	d106      	bne.n	8006d28 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2102      	movs	r1, #2
 8006d20:	4618      	mov	r0, r3
 8006d22:	f003 fc9d 	bl	800a660 <USB_InitFSLSPClkSel>
 8006d26:	e011      	b.n	8006d4c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f003 fc96 	bl	800a660 <USB_InitFSLSPClkSel>
 8006d34:	e00a      	b.n	8006d4c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d106      	bne.n	8006d4c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d44:	461a      	mov	r2, r3
 8006d46:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006d4a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f00a f8b3 	bl	8010eb8 <HAL_HCD_PortEnabled_Callback>
 8006d52:	e002      	b.n	8006d5a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f00a f8bd 	bl	8010ed4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f003 0320 	and.w	r3, r3, #32
 8006d60:	2b20      	cmp	r3, #32
 8006d62:	d103      	bne.n	8006d6c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	f043 0320 	orr.w	r3, r3, #32
 8006d6a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006d72:	461a      	mov	r2, r3
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	6013      	str	r3, [r2, #0]
}
 8006d78:	bf00      	nop
 8006d7a:	3718      	adds	r7, #24
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e267      	b.n	8007262 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d075      	beq.n	8006e8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d9e:	4b88      	ldr	r3, [pc, #544]	; (8006fc0 <HAL_RCC_OscConfig+0x240>)
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	f003 030c 	and.w	r3, r3, #12
 8006da6:	2b04      	cmp	r3, #4
 8006da8:	d00c      	beq.n	8006dc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006daa:	4b85      	ldr	r3, [pc, #532]	; (8006fc0 <HAL_RCC_OscConfig+0x240>)
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006db2:	2b08      	cmp	r3, #8
 8006db4:	d112      	bne.n	8006ddc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006db6:	4b82      	ldr	r3, [pc, #520]	; (8006fc0 <HAL_RCC_OscConfig+0x240>)
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dc2:	d10b      	bne.n	8006ddc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dc4:	4b7e      	ldr	r3, [pc, #504]	; (8006fc0 <HAL_RCC_OscConfig+0x240>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d05b      	beq.n	8006e88 <HAL_RCC_OscConfig+0x108>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d157      	bne.n	8006e88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e242      	b.n	8007262 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006de4:	d106      	bne.n	8006df4 <HAL_RCC_OscConfig+0x74>
 8006de6:	4b76      	ldr	r3, [pc, #472]	; (8006fc0 <HAL_RCC_OscConfig+0x240>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a75      	ldr	r2, [pc, #468]	; (8006fc0 <HAL_RCC_OscConfig+0x240>)
 8006dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	e01d      	b.n	8006e30 <HAL_RCC_OscConfig+0xb0>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006dfc:	d10c      	bne.n	8006e18 <HAL_RCC_OscConfig+0x98>
 8006dfe:	4b70      	ldr	r3, [pc, #448]	; (8006fc0 <HAL_RCC_OscConfig+0x240>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a6f      	ldr	r2, [pc, #444]	; (8006fc0 <HAL_RCC_OscConfig+0x240>)
 8006e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e08:	6013      	str	r3, [r2, #0]
 8006e0a:	4b6d      	ldr	r3, [pc, #436]	; (8006fc0 <HAL_RCC_OscConfig+0x240>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a6c      	ldr	r2, [pc, #432]	; (8006fc0 <HAL_RCC_OscConfig+0x240>)
 8006e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e14:	6013      	str	r3, [r2, #0]
 8006e16:	e00b      	b.n	8006e30 <HAL_RCC_OscConfig+0xb0>
 8006e18:	4b69      	ldr	r3, [pc, #420]	; (8006fc0 <HAL_RCC_OscConfig+0x240>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a68      	ldr	r2, [pc, #416]	; (8006fc0 <HAL_RCC_OscConfig+0x240>)
 8006e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e22:	6013      	str	r3, [r2, #0]
 8006e24:	4b66      	ldr	r3, [pc, #408]	; (8006fc0 <HAL_RCC_OscConfig+0x240>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a65      	ldr	r2, [pc, #404]	; (8006fc0 <HAL_RCC_OscConfig+0x240>)
 8006e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d013      	beq.n	8006e60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e38:	f7fd fc84 	bl	8004744 <HAL_GetTick>
 8006e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e3e:	e008      	b.n	8006e52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e40:	f7fd fc80 	bl	8004744 <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	2b64      	cmp	r3, #100	; 0x64
 8006e4c:	d901      	bls.n	8006e52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e207      	b.n	8007262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e52:	4b5b      	ldr	r3, [pc, #364]	; (8006fc0 <HAL_RCC_OscConfig+0x240>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d0f0      	beq.n	8006e40 <HAL_RCC_OscConfig+0xc0>
 8006e5e:	e014      	b.n	8006e8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e60:	f7fd fc70 	bl	8004744 <HAL_GetTick>
 8006e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e66:	e008      	b.n	8006e7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e68:	f7fd fc6c 	bl	8004744 <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	2b64      	cmp	r3, #100	; 0x64
 8006e74:	d901      	bls.n	8006e7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e1f3      	b.n	8007262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e7a:	4b51      	ldr	r3, [pc, #324]	; (8006fc0 <HAL_RCC_OscConfig+0x240>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1f0      	bne.n	8006e68 <HAL_RCC_OscConfig+0xe8>
 8006e86:	e000      	b.n	8006e8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0302 	and.w	r3, r3, #2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d063      	beq.n	8006f5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e96:	4b4a      	ldr	r3, [pc, #296]	; (8006fc0 <HAL_RCC_OscConfig+0x240>)
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f003 030c 	and.w	r3, r3, #12
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00b      	beq.n	8006eba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ea2:	4b47      	ldr	r3, [pc, #284]	; (8006fc0 <HAL_RCC_OscConfig+0x240>)
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006eaa:	2b08      	cmp	r3, #8
 8006eac:	d11c      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006eae:	4b44      	ldr	r3, [pc, #272]	; (8006fc0 <HAL_RCC_OscConfig+0x240>)
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d116      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006eba:	4b41      	ldr	r3, [pc, #260]	; (8006fc0 <HAL_RCC_OscConfig+0x240>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0302 	and.w	r3, r3, #2
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d005      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x152>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d001      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e1c7      	b.n	8007262 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ed2:	4b3b      	ldr	r3, [pc, #236]	; (8006fc0 <HAL_RCC_OscConfig+0x240>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	00db      	lsls	r3, r3, #3
 8006ee0:	4937      	ldr	r1, [pc, #220]	; (8006fc0 <HAL_RCC_OscConfig+0x240>)
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ee6:	e03a      	b.n	8006f5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d020      	beq.n	8006f32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ef0:	4b34      	ldr	r3, [pc, #208]	; (8006fc4 <HAL_RCC_OscConfig+0x244>)
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ef6:	f7fd fc25 	bl	8004744 <HAL_GetTick>
 8006efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006efc:	e008      	b.n	8006f10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006efe:	f7fd fc21 	bl	8004744 <HAL_GetTick>
 8006f02:	4602      	mov	r2, r0
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d901      	bls.n	8006f10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e1a8      	b.n	8007262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f10:	4b2b      	ldr	r3, [pc, #172]	; (8006fc0 <HAL_RCC_OscConfig+0x240>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0302 	and.w	r3, r3, #2
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d0f0      	beq.n	8006efe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f1c:	4b28      	ldr	r3, [pc, #160]	; (8006fc0 <HAL_RCC_OscConfig+0x240>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	00db      	lsls	r3, r3, #3
 8006f2a:	4925      	ldr	r1, [pc, #148]	; (8006fc0 <HAL_RCC_OscConfig+0x240>)
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	600b      	str	r3, [r1, #0]
 8006f30:	e015      	b.n	8006f5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f32:	4b24      	ldr	r3, [pc, #144]	; (8006fc4 <HAL_RCC_OscConfig+0x244>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f38:	f7fd fc04 	bl	8004744 <HAL_GetTick>
 8006f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f3e:	e008      	b.n	8006f52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f40:	f7fd fc00 	bl	8004744 <HAL_GetTick>
 8006f44:	4602      	mov	r2, r0
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d901      	bls.n	8006f52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e187      	b.n	8007262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f52:	4b1b      	ldr	r3, [pc, #108]	; (8006fc0 <HAL_RCC_OscConfig+0x240>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0302 	and.w	r3, r3, #2
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1f0      	bne.n	8006f40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0308 	and.w	r3, r3, #8
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d036      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d016      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f72:	4b15      	ldr	r3, [pc, #84]	; (8006fc8 <HAL_RCC_OscConfig+0x248>)
 8006f74:	2201      	movs	r2, #1
 8006f76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f78:	f7fd fbe4 	bl	8004744 <HAL_GetTick>
 8006f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f7e:	e008      	b.n	8006f92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f80:	f7fd fbe0 	bl	8004744 <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e167      	b.n	8007262 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f92:	4b0b      	ldr	r3, [pc, #44]	; (8006fc0 <HAL_RCC_OscConfig+0x240>)
 8006f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d0f0      	beq.n	8006f80 <HAL_RCC_OscConfig+0x200>
 8006f9e:	e01b      	b.n	8006fd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fa0:	4b09      	ldr	r3, [pc, #36]	; (8006fc8 <HAL_RCC_OscConfig+0x248>)
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fa6:	f7fd fbcd 	bl	8004744 <HAL_GetTick>
 8006faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fac:	e00e      	b.n	8006fcc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fae:	f7fd fbc9 	bl	8004744 <HAL_GetTick>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d907      	bls.n	8006fcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e150      	b.n	8007262 <HAL_RCC_OscConfig+0x4e2>
 8006fc0:	40023800 	.word	0x40023800
 8006fc4:	42470000 	.word	0x42470000
 8006fc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fcc:	4b88      	ldr	r3, [pc, #544]	; (80071f0 <HAL_RCC_OscConfig+0x470>)
 8006fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fd0:	f003 0302 	and.w	r3, r3, #2
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1ea      	bne.n	8006fae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 8097 	beq.w	8007114 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fea:	4b81      	ldr	r3, [pc, #516]	; (80071f0 <HAL_RCC_OscConfig+0x470>)
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10f      	bne.n	8007016 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	60bb      	str	r3, [r7, #8]
 8006ffa:	4b7d      	ldr	r3, [pc, #500]	; (80071f0 <HAL_RCC_OscConfig+0x470>)
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffe:	4a7c      	ldr	r2, [pc, #496]	; (80071f0 <HAL_RCC_OscConfig+0x470>)
 8007000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007004:	6413      	str	r3, [r2, #64]	; 0x40
 8007006:	4b7a      	ldr	r3, [pc, #488]	; (80071f0 <HAL_RCC_OscConfig+0x470>)
 8007008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800700e:	60bb      	str	r3, [r7, #8]
 8007010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007012:	2301      	movs	r3, #1
 8007014:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007016:	4b77      	ldr	r3, [pc, #476]	; (80071f4 <HAL_RCC_OscConfig+0x474>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800701e:	2b00      	cmp	r3, #0
 8007020:	d118      	bne.n	8007054 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007022:	4b74      	ldr	r3, [pc, #464]	; (80071f4 <HAL_RCC_OscConfig+0x474>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a73      	ldr	r2, [pc, #460]	; (80071f4 <HAL_RCC_OscConfig+0x474>)
 8007028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800702c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800702e:	f7fd fb89 	bl	8004744 <HAL_GetTick>
 8007032:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007034:	e008      	b.n	8007048 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007036:	f7fd fb85 	bl	8004744 <HAL_GetTick>
 800703a:	4602      	mov	r2, r0
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	2b02      	cmp	r3, #2
 8007042:	d901      	bls.n	8007048 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	e10c      	b.n	8007262 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007048:	4b6a      	ldr	r3, [pc, #424]	; (80071f4 <HAL_RCC_OscConfig+0x474>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007050:	2b00      	cmp	r3, #0
 8007052:	d0f0      	beq.n	8007036 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	2b01      	cmp	r3, #1
 800705a:	d106      	bne.n	800706a <HAL_RCC_OscConfig+0x2ea>
 800705c:	4b64      	ldr	r3, [pc, #400]	; (80071f0 <HAL_RCC_OscConfig+0x470>)
 800705e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007060:	4a63      	ldr	r2, [pc, #396]	; (80071f0 <HAL_RCC_OscConfig+0x470>)
 8007062:	f043 0301 	orr.w	r3, r3, #1
 8007066:	6713      	str	r3, [r2, #112]	; 0x70
 8007068:	e01c      	b.n	80070a4 <HAL_RCC_OscConfig+0x324>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	2b05      	cmp	r3, #5
 8007070:	d10c      	bne.n	800708c <HAL_RCC_OscConfig+0x30c>
 8007072:	4b5f      	ldr	r3, [pc, #380]	; (80071f0 <HAL_RCC_OscConfig+0x470>)
 8007074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007076:	4a5e      	ldr	r2, [pc, #376]	; (80071f0 <HAL_RCC_OscConfig+0x470>)
 8007078:	f043 0304 	orr.w	r3, r3, #4
 800707c:	6713      	str	r3, [r2, #112]	; 0x70
 800707e:	4b5c      	ldr	r3, [pc, #368]	; (80071f0 <HAL_RCC_OscConfig+0x470>)
 8007080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007082:	4a5b      	ldr	r2, [pc, #364]	; (80071f0 <HAL_RCC_OscConfig+0x470>)
 8007084:	f043 0301 	orr.w	r3, r3, #1
 8007088:	6713      	str	r3, [r2, #112]	; 0x70
 800708a:	e00b      	b.n	80070a4 <HAL_RCC_OscConfig+0x324>
 800708c:	4b58      	ldr	r3, [pc, #352]	; (80071f0 <HAL_RCC_OscConfig+0x470>)
 800708e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007090:	4a57      	ldr	r2, [pc, #348]	; (80071f0 <HAL_RCC_OscConfig+0x470>)
 8007092:	f023 0301 	bic.w	r3, r3, #1
 8007096:	6713      	str	r3, [r2, #112]	; 0x70
 8007098:	4b55      	ldr	r3, [pc, #340]	; (80071f0 <HAL_RCC_OscConfig+0x470>)
 800709a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709c:	4a54      	ldr	r2, [pc, #336]	; (80071f0 <HAL_RCC_OscConfig+0x470>)
 800709e:	f023 0304 	bic.w	r3, r3, #4
 80070a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d015      	beq.n	80070d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ac:	f7fd fb4a 	bl	8004744 <HAL_GetTick>
 80070b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070b2:	e00a      	b.n	80070ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070b4:	f7fd fb46 	bl	8004744 <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	f241 3288 	movw	r2, #5000	; 0x1388
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d901      	bls.n	80070ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e0cb      	b.n	8007262 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070ca:	4b49      	ldr	r3, [pc, #292]	; (80071f0 <HAL_RCC_OscConfig+0x470>)
 80070cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ce:	f003 0302 	and.w	r3, r3, #2
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d0ee      	beq.n	80070b4 <HAL_RCC_OscConfig+0x334>
 80070d6:	e014      	b.n	8007102 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070d8:	f7fd fb34 	bl	8004744 <HAL_GetTick>
 80070dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070de:	e00a      	b.n	80070f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070e0:	f7fd fb30 	bl	8004744 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d901      	bls.n	80070f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e0b5      	b.n	8007262 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070f6:	4b3e      	ldr	r3, [pc, #248]	; (80071f0 <HAL_RCC_OscConfig+0x470>)
 80070f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070fa:	f003 0302 	and.w	r3, r3, #2
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1ee      	bne.n	80070e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007102:	7dfb      	ldrb	r3, [r7, #23]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d105      	bne.n	8007114 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007108:	4b39      	ldr	r3, [pc, #228]	; (80071f0 <HAL_RCC_OscConfig+0x470>)
 800710a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710c:	4a38      	ldr	r2, [pc, #224]	; (80071f0 <HAL_RCC_OscConfig+0x470>)
 800710e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007112:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	2b00      	cmp	r3, #0
 800711a:	f000 80a1 	beq.w	8007260 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800711e:	4b34      	ldr	r3, [pc, #208]	; (80071f0 <HAL_RCC_OscConfig+0x470>)
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f003 030c 	and.w	r3, r3, #12
 8007126:	2b08      	cmp	r3, #8
 8007128:	d05c      	beq.n	80071e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	2b02      	cmp	r3, #2
 8007130:	d141      	bne.n	80071b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007132:	4b31      	ldr	r3, [pc, #196]	; (80071f8 <HAL_RCC_OscConfig+0x478>)
 8007134:	2200      	movs	r2, #0
 8007136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007138:	f7fd fb04 	bl	8004744 <HAL_GetTick>
 800713c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800713e:	e008      	b.n	8007152 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007140:	f7fd fb00 	bl	8004744 <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	2b02      	cmp	r3, #2
 800714c:	d901      	bls.n	8007152 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e087      	b.n	8007262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007152:	4b27      	ldr	r3, [pc, #156]	; (80071f0 <HAL_RCC_OscConfig+0x470>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1f0      	bne.n	8007140 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	69da      	ldr	r2, [r3, #28]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	431a      	orrs	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716c:	019b      	lsls	r3, r3, #6
 800716e:	431a      	orrs	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007174:	085b      	lsrs	r3, r3, #1
 8007176:	3b01      	subs	r3, #1
 8007178:	041b      	lsls	r3, r3, #16
 800717a:	431a      	orrs	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007180:	061b      	lsls	r3, r3, #24
 8007182:	491b      	ldr	r1, [pc, #108]	; (80071f0 <HAL_RCC_OscConfig+0x470>)
 8007184:	4313      	orrs	r3, r2
 8007186:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007188:	4b1b      	ldr	r3, [pc, #108]	; (80071f8 <HAL_RCC_OscConfig+0x478>)
 800718a:	2201      	movs	r2, #1
 800718c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800718e:	f7fd fad9 	bl	8004744 <HAL_GetTick>
 8007192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007194:	e008      	b.n	80071a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007196:	f7fd fad5 	bl	8004744 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d901      	bls.n	80071a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e05c      	b.n	8007262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071a8:	4b11      	ldr	r3, [pc, #68]	; (80071f0 <HAL_RCC_OscConfig+0x470>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d0f0      	beq.n	8007196 <HAL_RCC_OscConfig+0x416>
 80071b4:	e054      	b.n	8007260 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071b6:	4b10      	ldr	r3, [pc, #64]	; (80071f8 <HAL_RCC_OscConfig+0x478>)
 80071b8:	2200      	movs	r2, #0
 80071ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071bc:	f7fd fac2 	bl	8004744 <HAL_GetTick>
 80071c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071c2:	e008      	b.n	80071d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071c4:	f7fd fabe 	bl	8004744 <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d901      	bls.n	80071d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e045      	b.n	8007262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071d6:	4b06      	ldr	r3, [pc, #24]	; (80071f0 <HAL_RCC_OscConfig+0x470>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1f0      	bne.n	80071c4 <HAL_RCC_OscConfig+0x444>
 80071e2:	e03d      	b.n	8007260 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d107      	bne.n	80071fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e038      	b.n	8007262 <HAL_RCC_OscConfig+0x4e2>
 80071f0:	40023800 	.word	0x40023800
 80071f4:	40007000 	.word	0x40007000
 80071f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80071fc:	4b1b      	ldr	r3, [pc, #108]	; (800726c <HAL_RCC_OscConfig+0x4ec>)
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d028      	beq.n	800725c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007214:	429a      	cmp	r2, r3
 8007216:	d121      	bne.n	800725c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007222:	429a      	cmp	r2, r3
 8007224:	d11a      	bne.n	800725c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800722c:	4013      	ands	r3, r2
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007232:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007234:	4293      	cmp	r3, r2
 8007236:	d111      	bne.n	800725c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007242:	085b      	lsrs	r3, r3, #1
 8007244:	3b01      	subs	r3, #1
 8007246:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007248:	429a      	cmp	r2, r3
 800724a:	d107      	bne.n	800725c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007256:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007258:	429a      	cmp	r2, r3
 800725a:	d001      	beq.n	8007260 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e000      	b.n	8007262 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	40023800 	.word	0x40023800

08007270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d101      	bne.n	8007284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e0cc      	b.n	800741e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007284:	4b68      	ldr	r3, [pc, #416]	; (8007428 <HAL_RCC_ClockConfig+0x1b8>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0307 	and.w	r3, r3, #7
 800728c:	683a      	ldr	r2, [r7, #0]
 800728e:	429a      	cmp	r2, r3
 8007290:	d90c      	bls.n	80072ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007292:	4b65      	ldr	r3, [pc, #404]	; (8007428 <HAL_RCC_ClockConfig+0x1b8>)
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	b2d2      	uxtb	r2, r2
 8007298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800729a:	4b63      	ldr	r3, [pc, #396]	; (8007428 <HAL_RCC_ClockConfig+0x1b8>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 0307 	and.w	r3, r3, #7
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d001      	beq.n	80072ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e0b8      	b.n	800741e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0302 	and.w	r3, r3, #2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d020      	beq.n	80072fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0304 	and.w	r3, r3, #4
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d005      	beq.n	80072d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072c4:	4b59      	ldr	r3, [pc, #356]	; (800742c <HAL_RCC_ClockConfig+0x1bc>)
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	4a58      	ldr	r2, [pc, #352]	; (800742c <HAL_RCC_ClockConfig+0x1bc>)
 80072ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80072ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0308 	and.w	r3, r3, #8
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d005      	beq.n	80072e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072dc:	4b53      	ldr	r3, [pc, #332]	; (800742c <HAL_RCC_ClockConfig+0x1bc>)
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	4a52      	ldr	r2, [pc, #328]	; (800742c <HAL_RCC_ClockConfig+0x1bc>)
 80072e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80072e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072e8:	4b50      	ldr	r3, [pc, #320]	; (800742c <HAL_RCC_ClockConfig+0x1bc>)
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	494d      	ldr	r1, [pc, #308]	; (800742c <HAL_RCC_ClockConfig+0x1bc>)
 80072f6:	4313      	orrs	r3, r2
 80072f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	2b00      	cmp	r3, #0
 8007304:	d044      	beq.n	8007390 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d107      	bne.n	800731e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800730e:	4b47      	ldr	r3, [pc, #284]	; (800742c <HAL_RCC_ClockConfig+0x1bc>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d119      	bne.n	800734e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e07f      	b.n	800741e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	2b02      	cmp	r3, #2
 8007324:	d003      	beq.n	800732e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800732a:	2b03      	cmp	r3, #3
 800732c:	d107      	bne.n	800733e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800732e:	4b3f      	ldr	r3, [pc, #252]	; (800742c <HAL_RCC_ClockConfig+0x1bc>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007336:	2b00      	cmp	r3, #0
 8007338:	d109      	bne.n	800734e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e06f      	b.n	800741e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800733e:	4b3b      	ldr	r3, [pc, #236]	; (800742c <HAL_RCC_ClockConfig+0x1bc>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 0302 	and.w	r3, r3, #2
 8007346:	2b00      	cmp	r3, #0
 8007348:	d101      	bne.n	800734e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e067      	b.n	800741e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800734e:	4b37      	ldr	r3, [pc, #220]	; (800742c <HAL_RCC_ClockConfig+0x1bc>)
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f023 0203 	bic.w	r2, r3, #3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	4934      	ldr	r1, [pc, #208]	; (800742c <HAL_RCC_ClockConfig+0x1bc>)
 800735c:	4313      	orrs	r3, r2
 800735e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007360:	f7fd f9f0 	bl	8004744 <HAL_GetTick>
 8007364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007366:	e00a      	b.n	800737e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007368:	f7fd f9ec 	bl	8004744 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	f241 3288 	movw	r2, #5000	; 0x1388
 8007376:	4293      	cmp	r3, r2
 8007378:	d901      	bls.n	800737e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e04f      	b.n	800741e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800737e:	4b2b      	ldr	r3, [pc, #172]	; (800742c <HAL_RCC_ClockConfig+0x1bc>)
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f003 020c 	and.w	r2, r3, #12
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	429a      	cmp	r2, r3
 800738e:	d1eb      	bne.n	8007368 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007390:	4b25      	ldr	r3, [pc, #148]	; (8007428 <HAL_RCC_ClockConfig+0x1b8>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0307 	and.w	r3, r3, #7
 8007398:	683a      	ldr	r2, [r7, #0]
 800739a:	429a      	cmp	r2, r3
 800739c:	d20c      	bcs.n	80073b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800739e:	4b22      	ldr	r3, [pc, #136]	; (8007428 <HAL_RCC_ClockConfig+0x1b8>)
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	b2d2      	uxtb	r2, r2
 80073a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073a6:	4b20      	ldr	r3, [pc, #128]	; (8007428 <HAL_RCC_ClockConfig+0x1b8>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 0307 	and.w	r3, r3, #7
 80073ae:	683a      	ldr	r2, [r7, #0]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d001      	beq.n	80073b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e032      	b.n	800741e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 0304 	and.w	r3, r3, #4
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d008      	beq.n	80073d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073c4:	4b19      	ldr	r3, [pc, #100]	; (800742c <HAL_RCC_ClockConfig+0x1bc>)
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	4916      	ldr	r1, [pc, #88]	; (800742c <HAL_RCC_ClockConfig+0x1bc>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0308 	and.w	r3, r3, #8
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d009      	beq.n	80073f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073e2:	4b12      	ldr	r3, [pc, #72]	; (800742c <HAL_RCC_ClockConfig+0x1bc>)
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	00db      	lsls	r3, r3, #3
 80073f0:	490e      	ldr	r1, [pc, #56]	; (800742c <HAL_RCC_ClockConfig+0x1bc>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80073f6:	f000 f821 	bl	800743c <HAL_RCC_GetSysClockFreq>
 80073fa:	4602      	mov	r2, r0
 80073fc:	4b0b      	ldr	r3, [pc, #44]	; (800742c <HAL_RCC_ClockConfig+0x1bc>)
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	091b      	lsrs	r3, r3, #4
 8007402:	f003 030f 	and.w	r3, r3, #15
 8007406:	490a      	ldr	r1, [pc, #40]	; (8007430 <HAL_RCC_ClockConfig+0x1c0>)
 8007408:	5ccb      	ldrb	r3, [r1, r3]
 800740a:	fa22 f303 	lsr.w	r3, r2, r3
 800740e:	4a09      	ldr	r2, [pc, #36]	; (8007434 <HAL_RCC_ClockConfig+0x1c4>)
 8007410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007412:	4b09      	ldr	r3, [pc, #36]	; (8007438 <HAL_RCC_ClockConfig+0x1c8>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4618      	mov	r0, r3
 8007418:	f7fd f950 	bl	80046bc <HAL_InitTick>

  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	40023c00 	.word	0x40023c00
 800742c:	40023800 	.word	0x40023800
 8007430:	08011dc0 	.word	0x08011dc0
 8007434:	2000000c 	.word	0x2000000c
 8007438:	20000028 	.word	0x20000028

0800743c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800743c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007440:	b094      	sub	sp, #80	; 0x50
 8007442:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007444:	2300      	movs	r3, #0
 8007446:	647b      	str	r3, [r7, #68]	; 0x44
 8007448:	2300      	movs	r3, #0
 800744a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800744c:	2300      	movs	r3, #0
 800744e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007450:	2300      	movs	r3, #0
 8007452:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007454:	4b79      	ldr	r3, [pc, #484]	; (800763c <HAL_RCC_GetSysClockFreq+0x200>)
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f003 030c 	and.w	r3, r3, #12
 800745c:	2b08      	cmp	r3, #8
 800745e:	d00d      	beq.n	800747c <HAL_RCC_GetSysClockFreq+0x40>
 8007460:	2b08      	cmp	r3, #8
 8007462:	f200 80e1 	bhi.w	8007628 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007466:	2b00      	cmp	r3, #0
 8007468:	d002      	beq.n	8007470 <HAL_RCC_GetSysClockFreq+0x34>
 800746a:	2b04      	cmp	r3, #4
 800746c:	d003      	beq.n	8007476 <HAL_RCC_GetSysClockFreq+0x3a>
 800746e:	e0db      	b.n	8007628 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007470:	4b73      	ldr	r3, [pc, #460]	; (8007640 <HAL_RCC_GetSysClockFreq+0x204>)
 8007472:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007474:	e0db      	b.n	800762e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007476:	4b73      	ldr	r3, [pc, #460]	; (8007644 <HAL_RCC_GetSysClockFreq+0x208>)
 8007478:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800747a:	e0d8      	b.n	800762e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800747c:	4b6f      	ldr	r3, [pc, #444]	; (800763c <HAL_RCC_GetSysClockFreq+0x200>)
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007484:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007486:	4b6d      	ldr	r3, [pc, #436]	; (800763c <HAL_RCC_GetSysClockFreq+0x200>)
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800748e:	2b00      	cmp	r3, #0
 8007490:	d063      	beq.n	800755a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007492:	4b6a      	ldr	r3, [pc, #424]	; (800763c <HAL_RCC_GetSysClockFreq+0x200>)
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	099b      	lsrs	r3, r3, #6
 8007498:	2200      	movs	r2, #0
 800749a:	63bb      	str	r3, [r7, #56]	; 0x38
 800749c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800749e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074a4:	633b      	str	r3, [r7, #48]	; 0x30
 80074a6:	2300      	movs	r3, #0
 80074a8:	637b      	str	r3, [r7, #52]	; 0x34
 80074aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80074ae:	4622      	mov	r2, r4
 80074b0:	462b      	mov	r3, r5
 80074b2:	f04f 0000 	mov.w	r0, #0
 80074b6:	f04f 0100 	mov.w	r1, #0
 80074ba:	0159      	lsls	r1, r3, #5
 80074bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074c0:	0150      	lsls	r0, r2, #5
 80074c2:	4602      	mov	r2, r0
 80074c4:	460b      	mov	r3, r1
 80074c6:	4621      	mov	r1, r4
 80074c8:	1a51      	subs	r1, r2, r1
 80074ca:	6139      	str	r1, [r7, #16]
 80074cc:	4629      	mov	r1, r5
 80074ce:	eb63 0301 	sbc.w	r3, r3, r1
 80074d2:	617b      	str	r3, [r7, #20]
 80074d4:	f04f 0200 	mov.w	r2, #0
 80074d8:	f04f 0300 	mov.w	r3, #0
 80074dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074e0:	4659      	mov	r1, fp
 80074e2:	018b      	lsls	r3, r1, #6
 80074e4:	4651      	mov	r1, sl
 80074e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80074ea:	4651      	mov	r1, sl
 80074ec:	018a      	lsls	r2, r1, #6
 80074ee:	4651      	mov	r1, sl
 80074f0:	ebb2 0801 	subs.w	r8, r2, r1
 80074f4:	4659      	mov	r1, fp
 80074f6:	eb63 0901 	sbc.w	r9, r3, r1
 80074fa:	f04f 0200 	mov.w	r2, #0
 80074fe:	f04f 0300 	mov.w	r3, #0
 8007502:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007506:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800750a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800750e:	4690      	mov	r8, r2
 8007510:	4699      	mov	r9, r3
 8007512:	4623      	mov	r3, r4
 8007514:	eb18 0303 	adds.w	r3, r8, r3
 8007518:	60bb      	str	r3, [r7, #8]
 800751a:	462b      	mov	r3, r5
 800751c:	eb49 0303 	adc.w	r3, r9, r3
 8007520:	60fb      	str	r3, [r7, #12]
 8007522:	f04f 0200 	mov.w	r2, #0
 8007526:	f04f 0300 	mov.w	r3, #0
 800752a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800752e:	4629      	mov	r1, r5
 8007530:	024b      	lsls	r3, r1, #9
 8007532:	4621      	mov	r1, r4
 8007534:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007538:	4621      	mov	r1, r4
 800753a:	024a      	lsls	r2, r1, #9
 800753c:	4610      	mov	r0, r2
 800753e:	4619      	mov	r1, r3
 8007540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007542:	2200      	movs	r2, #0
 8007544:	62bb      	str	r3, [r7, #40]	; 0x28
 8007546:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007548:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800754c:	f7f9 f99e 	bl	800088c <__aeabi_uldivmod>
 8007550:	4602      	mov	r2, r0
 8007552:	460b      	mov	r3, r1
 8007554:	4613      	mov	r3, r2
 8007556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007558:	e058      	b.n	800760c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800755a:	4b38      	ldr	r3, [pc, #224]	; (800763c <HAL_RCC_GetSysClockFreq+0x200>)
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	099b      	lsrs	r3, r3, #6
 8007560:	2200      	movs	r2, #0
 8007562:	4618      	mov	r0, r3
 8007564:	4611      	mov	r1, r2
 8007566:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800756a:	623b      	str	r3, [r7, #32]
 800756c:	2300      	movs	r3, #0
 800756e:	627b      	str	r3, [r7, #36]	; 0x24
 8007570:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007574:	4642      	mov	r2, r8
 8007576:	464b      	mov	r3, r9
 8007578:	f04f 0000 	mov.w	r0, #0
 800757c:	f04f 0100 	mov.w	r1, #0
 8007580:	0159      	lsls	r1, r3, #5
 8007582:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007586:	0150      	lsls	r0, r2, #5
 8007588:	4602      	mov	r2, r0
 800758a:	460b      	mov	r3, r1
 800758c:	4641      	mov	r1, r8
 800758e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007592:	4649      	mov	r1, r9
 8007594:	eb63 0b01 	sbc.w	fp, r3, r1
 8007598:	f04f 0200 	mov.w	r2, #0
 800759c:	f04f 0300 	mov.w	r3, #0
 80075a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80075a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80075a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80075ac:	ebb2 040a 	subs.w	r4, r2, sl
 80075b0:	eb63 050b 	sbc.w	r5, r3, fp
 80075b4:	f04f 0200 	mov.w	r2, #0
 80075b8:	f04f 0300 	mov.w	r3, #0
 80075bc:	00eb      	lsls	r3, r5, #3
 80075be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075c2:	00e2      	lsls	r2, r4, #3
 80075c4:	4614      	mov	r4, r2
 80075c6:	461d      	mov	r5, r3
 80075c8:	4643      	mov	r3, r8
 80075ca:	18e3      	adds	r3, r4, r3
 80075cc:	603b      	str	r3, [r7, #0]
 80075ce:	464b      	mov	r3, r9
 80075d0:	eb45 0303 	adc.w	r3, r5, r3
 80075d4:	607b      	str	r3, [r7, #4]
 80075d6:	f04f 0200 	mov.w	r2, #0
 80075da:	f04f 0300 	mov.w	r3, #0
 80075de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80075e2:	4629      	mov	r1, r5
 80075e4:	028b      	lsls	r3, r1, #10
 80075e6:	4621      	mov	r1, r4
 80075e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80075ec:	4621      	mov	r1, r4
 80075ee:	028a      	lsls	r2, r1, #10
 80075f0:	4610      	mov	r0, r2
 80075f2:	4619      	mov	r1, r3
 80075f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075f6:	2200      	movs	r2, #0
 80075f8:	61bb      	str	r3, [r7, #24]
 80075fa:	61fa      	str	r2, [r7, #28]
 80075fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007600:	f7f9 f944 	bl	800088c <__aeabi_uldivmod>
 8007604:	4602      	mov	r2, r0
 8007606:	460b      	mov	r3, r1
 8007608:	4613      	mov	r3, r2
 800760a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800760c:	4b0b      	ldr	r3, [pc, #44]	; (800763c <HAL_RCC_GetSysClockFreq+0x200>)
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	0c1b      	lsrs	r3, r3, #16
 8007612:	f003 0303 	and.w	r3, r3, #3
 8007616:	3301      	adds	r3, #1
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800761c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800761e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007620:	fbb2 f3f3 	udiv	r3, r2, r3
 8007624:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007626:	e002      	b.n	800762e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007628:	4b05      	ldr	r3, [pc, #20]	; (8007640 <HAL_RCC_GetSysClockFreq+0x204>)
 800762a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800762c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800762e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007630:	4618      	mov	r0, r3
 8007632:	3750      	adds	r7, #80	; 0x50
 8007634:	46bd      	mov	sp, r7
 8007636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800763a:	bf00      	nop
 800763c:	40023800 	.word	0x40023800
 8007640:	00f42400 	.word	0x00f42400
 8007644:	007a1200 	.word	0x007a1200

08007648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007648:	b480      	push	{r7}
 800764a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800764c:	4b03      	ldr	r3, [pc, #12]	; (800765c <HAL_RCC_GetHCLKFreq+0x14>)
 800764e:	681b      	ldr	r3, [r3, #0]
}
 8007650:	4618      	mov	r0, r3
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	2000000c 	.word	0x2000000c

08007660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007664:	f7ff fff0 	bl	8007648 <HAL_RCC_GetHCLKFreq>
 8007668:	4602      	mov	r2, r0
 800766a:	4b05      	ldr	r3, [pc, #20]	; (8007680 <HAL_RCC_GetPCLK1Freq+0x20>)
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	0a9b      	lsrs	r3, r3, #10
 8007670:	f003 0307 	and.w	r3, r3, #7
 8007674:	4903      	ldr	r1, [pc, #12]	; (8007684 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007676:	5ccb      	ldrb	r3, [r1, r3]
 8007678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800767c:	4618      	mov	r0, r3
 800767e:	bd80      	pop	{r7, pc}
 8007680:	40023800 	.word	0x40023800
 8007684:	08011dd0 	.word	0x08011dd0

08007688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800768c:	f7ff ffdc 	bl	8007648 <HAL_RCC_GetHCLKFreq>
 8007690:	4602      	mov	r2, r0
 8007692:	4b05      	ldr	r3, [pc, #20]	; (80076a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	0b5b      	lsrs	r3, r3, #13
 8007698:	f003 0307 	and.w	r3, r3, #7
 800769c:	4903      	ldr	r1, [pc, #12]	; (80076ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800769e:	5ccb      	ldrb	r3, [r1, r3]
 80076a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	40023800 	.word	0x40023800
 80076ac:	08011dd0 	.word	0x08011dd0

080076b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e07b      	b.n	80077ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d108      	bne.n	80076dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076d2:	d009      	beq.n	80076e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	61da      	str	r2, [r3, #28]
 80076da:	e005      	b.n	80076e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d106      	bne.n	8007708 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f7fb fea8 	bl	8003458 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2202      	movs	r2, #2
 800770c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800771e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007730:	431a      	orrs	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800773a:	431a      	orrs	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	f003 0302 	and.w	r3, r3, #2
 8007744:	431a      	orrs	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	431a      	orrs	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007758:	431a      	orrs	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007762:	431a      	orrs	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800776c:	ea42 0103 	orr.w	r1, r2, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007774:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	430a      	orrs	r2, r1
 800777e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	0c1b      	lsrs	r3, r3, #16
 8007786:	f003 0104 	and.w	r1, r3, #4
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778e:	f003 0210 	and.w	r2, r3, #16
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	430a      	orrs	r2, r1
 8007798:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	69da      	ldr	r2, [r3, #28]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b08c      	sub	sp, #48	; 0x30
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	60f8      	str	r0, [r7, #12]
 80077ca:	60b9      	str	r1, [r7, #8]
 80077cc:	607a      	str	r2, [r7, #4]
 80077ce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80077d0:	2301      	movs	r3, #1
 80077d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d101      	bne.n	80077e8 <HAL_SPI_TransmitReceive+0x26>
 80077e4:	2302      	movs	r3, #2
 80077e6:	e18a      	b.n	8007afe <HAL_SPI_TransmitReceive+0x33c>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077f0:	f7fc ffa8 	bl	8004744 <HAL_GetTick>
 80077f4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007806:	887b      	ldrh	r3, [r7, #2]
 8007808:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800780a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800780e:	2b01      	cmp	r3, #1
 8007810:	d00f      	beq.n	8007832 <HAL_SPI_TransmitReceive+0x70>
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007818:	d107      	bne.n	800782a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d103      	bne.n	800782a <HAL_SPI_TransmitReceive+0x68>
 8007822:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007826:	2b04      	cmp	r3, #4
 8007828:	d003      	beq.n	8007832 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800782a:	2302      	movs	r3, #2
 800782c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007830:	e15b      	b.n	8007aea <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d005      	beq.n	8007844 <HAL_SPI_TransmitReceive+0x82>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d002      	beq.n	8007844 <HAL_SPI_TransmitReceive+0x82>
 800783e:	887b      	ldrh	r3, [r7, #2]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d103      	bne.n	800784c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800784a:	e14e      	b.n	8007aea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b04      	cmp	r3, #4
 8007856:	d003      	beq.n	8007860 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2205      	movs	r2, #5
 800785c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	887a      	ldrh	r2, [r7, #2]
 8007870:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	887a      	ldrh	r2, [r7, #2]
 8007876:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	887a      	ldrh	r2, [r7, #2]
 8007882:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	887a      	ldrh	r2, [r7, #2]
 8007888:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a0:	2b40      	cmp	r3, #64	; 0x40
 80078a2:	d007      	beq.n	80078b4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078bc:	d178      	bne.n	80079b0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d002      	beq.n	80078cc <HAL_SPI_TransmitReceive+0x10a>
 80078c6:	8b7b      	ldrh	r3, [r7, #26]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d166      	bne.n	800799a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d0:	881a      	ldrh	r2, [r3, #0]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078dc:	1c9a      	adds	r2, r3, #2
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	3b01      	subs	r3, #1
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078f0:	e053      	b.n	800799a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d11b      	bne.n	8007938 <HAL_SPI_TransmitReceive+0x176>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007904:	b29b      	uxth	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d016      	beq.n	8007938 <HAL_SPI_TransmitReceive+0x176>
 800790a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790c:	2b01      	cmp	r3, #1
 800790e:	d113      	bne.n	8007938 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007914:	881a      	ldrh	r2, [r3, #0]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007920:	1c9a      	adds	r2, r3, #2
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800792a:	b29b      	uxth	r3, r3
 800792c:	3b01      	subs	r3, #1
 800792e:	b29a      	uxth	r2, r3
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007934:	2300      	movs	r3, #0
 8007936:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f003 0301 	and.w	r3, r3, #1
 8007942:	2b01      	cmp	r3, #1
 8007944:	d119      	bne.n	800797a <HAL_SPI_TransmitReceive+0x1b8>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800794a:	b29b      	uxth	r3, r3
 800794c:	2b00      	cmp	r3, #0
 800794e:	d014      	beq.n	800797a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68da      	ldr	r2, [r3, #12]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795a:	b292      	uxth	r2, r2
 800795c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007962:	1c9a      	adds	r2, r3, #2
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800796c:	b29b      	uxth	r3, r3
 800796e:	3b01      	subs	r3, #1
 8007970:	b29a      	uxth	r2, r3
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007976:	2301      	movs	r3, #1
 8007978:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800797a:	f7fc fee3 	bl	8004744 <HAL_GetTick>
 800797e:	4602      	mov	r2, r0
 8007980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007986:	429a      	cmp	r2, r3
 8007988:	d807      	bhi.n	800799a <HAL_SPI_TransmitReceive+0x1d8>
 800798a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007990:	d003      	beq.n	800799a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007998:	e0a7      	b.n	8007aea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800799e:	b29b      	uxth	r3, r3
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1a6      	bne.n	80078f2 <HAL_SPI_TransmitReceive+0x130>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d1a1      	bne.n	80078f2 <HAL_SPI_TransmitReceive+0x130>
 80079ae:	e07c      	b.n	8007aaa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d002      	beq.n	80079be <HAL_SPI_TransmitReceive+0x1fc>
 80079b8:	8b7b      	ldrh	r3, [r7, #26]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d16b      	bne.n	8007a96 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	330c      	adds	r3, #12
 80079c8:	7812      	ldrb	r2, [r2, #0]
 80079ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d0:	1c5a      	adds	r2, r3, #1
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079da:	b29b      	uxth	r3, r3
 80079dc:	3b01      	subs	r3, #1
 80079de:	b29a      	uxth	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079e4:	e057      	b.n	8007a96 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f003 0302 	and.w	r3, r3, #2
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d11c      	bne.n	8007a2e <HAL_SPI_TransmitReceive+0x26c>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d017      	beq.n	8007a2e <HAL_SPI_TransmitReceive+0x26c>
 80079fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d114      	bne.n	8007a2e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	330c      	adds	r3, #12
 8007a0e:	7812      	ldrb	r2, [r2, #0]
 8007a10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a16:	1c5a      	adds	r2, r3, #1
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	3b01      	subs	r3, #1
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d119      	bne.n	8007a70 <HAL_SPI_TransmitReceive+0x2ae>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d014      	beq.n	8007a70 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68da      	ldr	r2, [r3, #12]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a50:	b2d2      	uxtb	r2, r2
 8007a52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a58:	1c5a      	adds	r2, r3, #1
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	3b01      	subs	r3, #1
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007a70:	f7fc fe68 	bl	8004744 <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d803      	bhi.n	8007a88 <HAL_SPI_TransmitReceive+0x2c6>
 8007a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a86:	d102      	bne.n	8007a8e <HAL_SPI_TransmitReceive+0x2cc>
 8007a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d103      	bne.n	8007a96 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007a94:	e029      	b.n	8007aea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d1a2      	bne.n	80079e6 <HAL_SPI_TransmitReceive+0x224>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d19d      	bne.n	80079e6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f000 f8b2 	bl	8007c18 <SPI_EndRxTxTransaction>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d006      	beq.n	8007ac8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007ac6:	e010      	b.n	8007aea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10b      	bne.n	8007ae8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	617b      	str	r3, [r7, #20]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	617b      	str	r3, [r7, #20]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	617b      	str	r3, [r7, #20]
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	e000      	b.n	8007aea <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007ae8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007afa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3730      	adds	r7, #48	; 0x30
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
	...

08007b08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b088      	sub	sp, #32
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	603b      	str	r3, [r7, #0]
 8007b14:	4613      	mov	r3, r2
 8007b16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b18:	f7fc fe14 	bl	8004744 <HAL_GetTick>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b20:	1a9b      	subs	r3, r3, r2
 8007b22:	683a      	ldr	r2, [r7, #0]
 8007b24:	4413      	add	r3, r2
 8007b26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b28:	f7fc fe0c 	bl	8004744 <HAL_GetTick>
 8007b2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b2e:	4b39      	ldr	r3, [pc, #228]	; (8007c14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	015b      	lsls	r3, r3, #5
 8007b34:	0d1b      	lsrs	r3, r3, #20
 8007b36:	69fa      	ldr	r2, [r7, #28]
 8007b38:	fb02 f303 	mul.w	r3, r2, r3
 8007b3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b3e:	e054      	b.n	8007bea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b46:	d050      	beq.n	8007bea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b48:	f7fc fdfc 	bl	8004744 <HAL_GetTick>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	69fa      	ldr	r2, [r7, #28]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d902      	bls.n	8007b5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d13d      	bne.n	8007bda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b76:	d111      	bne.n	8007b9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b80:	d004      	beq.n	8007b8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b8a:	d107      	bne.n	8007b9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ba4:	d10f      	bne.n	8007bc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bb4:	601a      	str	r2, [r3, #0]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e017      	b.n	8007c0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d101      	bne.n	8007be4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007be0:	2300      	movs	r3, #0
 8007be2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	3b01      	subs	r3, #1
 8007be8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689a      	ldr	r2, [r3, #8]
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	bf0c      	ite	eq
 8007bfa:	2301      	moveq	r3, #1
 8007bfc:	2300      	movne	r3, #0
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	461a      	mov	r2, r3
 8007c02:	79fb      	ldrb	r3, [r7, #7]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d19b      	bne.n	8007b40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3720      	adds	r7, #32
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	2000000c 	.word	0x2000000c

08007c18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b088      	sub	sp, #32
 8007c1c:	af02      	add	r7, sp, #8
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007c24:	4b1b      	ldr	r3, [pc, #108]	; (8007c94 <SPI_EndRxTxTransaction+0x7c>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a1b      	ldr	r2, [pc, #108]	; (8007c98 <SPI_EndRxTxTransaction+0x80>)
 8007c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c2e:	0d5b      	lsrs	r3, r3, #21
 8007c30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c34:	fb02 f303 	mul.w	r3, r2, r3
 8007c38:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c42:	d112      	bne.n	8007c6a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	2180      	movs	r1, #128	; 0x80
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f7ff ff5a 	bl	8007b08 <SPI_WaitFlagStateUntilTimeout>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d016      	beq.n	8007c88 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c5e:	f043 0220 	orr.w	r2, r3, #32
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007c66:	2303      	movs	r3, #3
 8007c68:	e00f      	b.n	8007c8a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00a      	beq.n	8007c86 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	3b01      	subs	r3, #1
 8007c74:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c80:	2b80      	cmp	r3, #128	; 0x80
 8007c82:	d0f2      	beq.n	8007c6a <SPI_EndRxTxTransaction+0x52>
 8007c84:	e000      	b.n	8007c88 <SPI_EndRxTxTransaction+0x70>
        break;
 8007c86:	bf00      	nop
  }

  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3718      	adds	r7, #24
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	2000000c 	.word	0x2000000c
 8007c98:	165e9f81 	.word	0x165e9f81

08007c9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d101      	bne.n	8007cae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e041      	b.n	8007d32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d106      	bne.n	8007cc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f7fb fc10 	bl	80034e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2202      	movs	r2, #2
 8007ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	3304      	adds	r3, #4
 8007cd8:	4619      	mov	r1, r3
 8007cda:	4610      	mov	r0, r2
 8007cdc:	f000 fd32 	bl	8008744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3708      	adds	r7, #8
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
	...

08007d3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d001      	beq.n	8007d54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	e04e      	b.n	8007df2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2202      	movs	r2, #2
 8007d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68da      	ldr	r2, [r3, #12]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f042 0201 	orr.w	r2, r2, #1
 8007d6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a23      	ldr	r2, [pc, #140]	; (8007e00 <HAL_TIM_Base_Start_IT+0xc4>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d022      	beq.n	8007dbc <HAL_TIM_Base_Start_IT+0x80>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d7e:	d01d      	beq.n	8007dbc <HAL_TIM_Base_Start_IT+0x80>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a1f      	ldr	r2, [pc, #124]	; (8007e04 <HAL_TIM_Base_Start_IT+0xc8>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d018      	beq.n	8007dbc <HAL_TIM_Base_Start_IT+0x80>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a1e      	ldr	r2, [pc, #120]	; (8007e08 <HAL_TIM_Base_Start_IT+0xcc>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d013      	beq.n	8007dbc <HAL_TIM_Base_Start_IT+0x80>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a1c      	ldr	r2, [pc, #112]	; (8007e0c <HAL_TIM_Base_Start_IT+0xd0>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d00e      	beq.n	8007dbc <HAL_TIM_Base_Start_IT+0x80>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a1b      	ldr	r2, [pc, #108]	; (8007e10 <HAL_TIM_Base_Start_IT+0xd4>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d009      	beq.n	8007dbc <HAL_TIM_Base_Start_IT+0x80>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a19      	ldr	r2, [pc, #100]	; (8007e14 <HAL_TIM_Base_Start_IT+0xd8>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d004      	beq.n	8007dbc <HAL_TIM_Base_Start_IT+0x80>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a18      	ldr	r2, [pc, #96]	; (8007e18 <HAL_TIM_Base_Start_IT+0xdc>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d111      	bne.n	8007de0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f003 0307 	and.w	r3, r3, #7
 8007dc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2b06      	cmp	r3, #6
 8007dcc:	d010      	beq.n	8007df0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f042 0201 	orr.w	r2, r2, #1
 8007ddc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dde:	e007      	b.n	8007df0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f042 0201 	orr.w	r2, r2, #1
 8007dee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	40010000 	.word	0x40010000
 8007e04:	40000400 	.word	0x40000400
 8007e08:	40000800 	.word	0x40000800
 8007e0c:	40000c00 	.word	0x40000c00
 8007e10:	40010400 	.word	0x40010400
 8007e14:	40014000 	.word	0x40014000
 8007e18:	40001800 	.word	0x40001800

08007e1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e041      	b.n	8007eb2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d106      	bne.n	8007e48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7fb fbde 	bl	8003604 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2202      	movs	r2, #2
 8007e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	3304      	adds	r3, #4
 8007e58:	4619      	mov	r1, r3
 8007e5a:	4610      	mov	r0, r2
 8007e5c:	f000 fc72 	bl	8008744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
	...

08007ebc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d109      	bne.n	8007ee0 <HAL_TIM_PWM_Start+0x24>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	bf14      	ite	ne
 8007ed8:	2301      	movne	r3, #1
 8007eda:	2300      	moveq	r3, #0
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	e022      	b.n	8007f26 <HAL_TIM_PWM_Start+0x6a>
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	2b04      	cmp	r3, #4
 8007ee4:	d109      	bne.n	8007efa <HAL_TIM_PWM_Start+0x3e>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	bf14      	ite	ne
 8007ef2:	2301      	movne	r3, #1
 8007ef4:	2300      	moveq	r3, #0
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	e015      	b.n	8007f26 <HAL_TIM_PWM_Start+0x6a>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	2b08      	cmp	r3, #8
 8007efe:	d109      	bne.n	8007f14 <HAL_TIM_PWM_Start+0x58>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	bf14      	ite	ne
 8007f0c:	2301      	movne	r3, #1
 8007f0e:	2300      	moveq	r3, #0
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	e008      	b.n	8007f26 <HAL_TIM_PWM_Start+0x6a>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	bf14      	ite	ne
 8007f20:	2301      	movne	r3, #1
 8007f22:	2300      	moveq	r3, #0
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e07c      	b.n	8008028 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d104      	bne.n	8007f3e <HAL_TIM_PWM_Start+0x82>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2202      	movs	r2, #2
 8007f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f3c:	e013      	b.n	8007f66 <HAL_TIM_PWM_Start+0xaa>
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	2b04      	cmp	r3, #4
 8007f42:	d104      	bne.n	8007f4e <HAL_TIM_PWM_Start+0x92>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2202      	movs	r2, #2
 8007f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f4c:	e00b      	b.n	8007f66 <HAL_TIM_PWM_Start+0xaa>
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	2b08      	cmp	r3, #8
 8007f52:	d104      	bne.n	8007f5e <HAL_TIM_PWM_Start+0xa2>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2202      	movs	r2, #2
 8007f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f5c:	e003      	b.n	8007f66 <HAL_TIM_PWM_Start+0xaa>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2202      	movs	r2, #2
 8007f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	6839      	ldr	r1, [r7, #0]
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f000 fed2 	bl	8008d18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a2d      	ldr	r2, [pc, #180]	; (8008030 <HAL_TIM_PWM_Start+0x174>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d004      	beq.n	8007f88 <HAL_TIM_PWM_Start+0xcc>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a2c      	ldr	r2, [pc, #176]	; (8008034 <HAL_TIM_PWM_Start+0x178>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d101      	bne.n	8007f8c <HAL_TIM_PWM_Start+0xd0>
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e000      	b.n	8007f8e <HAL_TIM_PWM_Start+0xd2>
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d007      	beq.n	8007fa2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007fa0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a22      	ldr	r2, [pc, #136]	; (8008030 <HAL_TIM_PWM_Start+0x174>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d022      	beq.n	8007ff2 <HAL_TIM_PWM_Start+0x136>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fb4:	d01d      	beq.n	8007ff2 <HAL_TIM_PWM_Start+0x136>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a1f      	ldr	r2, [pc, #124]	; (8008038 <HAL_TIM_PWM_Start+0x17c>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d018      	beq.n	8007ff2 <HAL_TIM_PWM_Start+0x136>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a1d      	ldr	r2, [pc, #116]	; (800803c <HAL_TIM_PWM_Start+0x180>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d013      	beq.n	8007ff2 <HAL_TIM_PWM_Start+0x136>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a1c      	ldr	r2, [pc, #112]	; (8008040 <HAL_TIM_PWM_Start+0x184>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d00e      	beq.n	8007ff2 <HAL_TIM_PWM_Start+0x136>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a16      	ldr	r2, [pc, #88]	; (8008034 <HAL_TIM_PWM_Start+0x178>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d009      	beq.n	8007ff2 <HAL_TIM_PWM_Start+0x136>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a18      	ldr	r2, [pc, #96]	; (8008044 <HAL_TIM_PWM_Start+0x188>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d004      	beq.n	8007ff2 <HAL_TIM_PWM_Start+0x136>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a16      	ldr	r2, [pc, #88]	; (8008048 <HAL_TIM_PWM_Start+0x18c>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d111      	bne.n	8008016 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	f003 0307 	and.w	r3, r3, #7
 8007ffc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2b06      	cmp	r3, #6
 8008002:	d010      	beq.n	8008026 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f042 0201 	orr.w	r2, r2, #1
 8008012:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008014:	e007      	b.n	8008026 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f042 0201 	orr.w	r2, r2, #1
 8008024:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	40010000 	.word	0x40010000
 8008034:	40010400 	.word	0x40010400
 8008038:	40000400 	.word	0x40000400
 800803c:	40000800 	.word	0x40000800
 8008040:	40000c00 	.word	0x40000c00
 8008044:	40014000 	.word	0x40014000
 8008048:	40001800 	.word	0x40001800

0800804c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2200      	movs	r2, #0
 800805c:	6839      	ldr	r1, [r7, #0]
 800805e:	4618      	mov	r0, r3
 8008060:	f000 fe5a 	bl	8008d18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a2e      	ldr	r2, [pc, #184]	; (8008124 <HAL_TIM_PWM_Stop+0xd8>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d004      	beq.n	8008078 <HAL_TIM_PWM_Stop+0x2c>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a2d      	ldr	r2, [pc, #180]	; (8008128 <HAL_TIM_PWM_Stop+0xdc>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d101      	bne.n	800807c <HAL_TIM_PWM_Stop+0x30>
 8008078:	2301      	movs	r3, #1
 800807a:	e000      	b.n	800807e <HAL_TIM_PWM_Stop+0x32>
 800807c:	2300      	movs	r3, #0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d017      	beq.n	80080b2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	6a1a      	ldr	r2, [r3, #32]
 8008088:	f241 1311 	movw	r3, #4369	; 0x1111
 800808c:	4013      	ands	r3, r2
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10f      	bne.n	80080b2 <HAL_TIM_PWM_Stop+0x66>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	6a1a      	ldr	r2, [r3, #32]
 8008098:	f240 4344 	movw	r3, #1092	; 0x444
 800809c:	4013      	ands	r3, r2
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d107      	bne.n	80080b2 <HAL_TIM_PWM_Stop+0x66>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6a1a      	ldr	r2, [r3, #32]
 80080b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80080bc:	4013      	ands	r3, r2
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10f      	bne.n	80080e2 <HAL_TIM_PWM_Stop+0x96>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6a1a      	ldr	r2, [r3, #32]
 80080c8:	f240 4344 	movw	r3, #1092	; 0x444
 80080cc:	4013      	ands	r3, r2
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d107      	bne.n	80080e2 <HAL_TIM_PWM_Stop+0x96>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f022 0201 	bic.w	r2, r2, #1
 80080e0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d104      	bne.n	80080f2 <HAL_TIM_PWM_Stop+0xa6>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080f0:	e013      	b.n	800811a <HAL_TIM_PWM_Stop+0xce>
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	2b04      	cmp	r3, #4
 80080f6:	d104      	bne.n	8008102 <HAL_TIM_PWM_Stop+0xb6>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008100:	e00b      	b.n	800811a <HAL_TIM_PWM_Stop+0xce>
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2b08      	cmp	r3, #8
 8008106:	d104      	bne.n	8008112 <HAL_TIM_PWM_Stop+0xc6>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008110:	e003      	b.n	800811a <HAL_TIM_PWM_Stop+0xce>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2201      	movs	r2, #1
 8008116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	3708      	adds	r7, #8
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	40010000 	.word	0x40010000
 8008128:	40010400 	.word	0x40010400

0800812c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	f003 0302 	and.w	r3, r3, #2
 800813e:	2b02      	cmp	r3, #2
 8008140:	d122      	bne.n	8008188 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	f003 0302 	and.w	r3, r3, #2
 800814c:	2b02      	cmp	r3, #2
 800814e:	d11b      	bne.n	8008188 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f06f 0202 	mvn.w	r2, #2
 8008158:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	f003 0303 	and.w	r3, r3, #3
 800816a:	2b00      	cmp	r3, #0
 800816c:	d003      	beq.n	8008176 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fa77 	bl	8008662 <HAL_TIM_IC_CaptureCallback>
 8008174:	e005      	b.n	8008182 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fa69 	bl	800864e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 fa7a 	bl	8008676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	f003 0304 	and.w	r3, r3, #4
 8008192:	2b04      	cmp	r3, #4
 8008194:	d122      	bne.n	80081dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	f003 0304 	and.w	r3, r3, #4
 80081a0:	2b04      	cmp	r3, #4
 80081a2:	d11b      	bne.n	80081dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f06f 0204 	mvn.w	r2, #4
 80081ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2202      	movs	r2, #2
 80081b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d003      	beq.n	80081ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fa4d 	bl	8008662 <HAL_TIM_IC_CaptureCallback>
 80081c8:	e005      	b.n	80081d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fa3f 	bl	800864e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fa50 	bl	8008676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	f003 0308 	and.w	r3, r3, #8
 80081e6:	2b08      	cmp	r3, #8
 80081e8:	d122      	bne.n	8008230 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	f003 0308 	and.w	r3, r3, #8
 80081f4:	2b08      	cmp	r3, #8
 80081f6:	d11b      	bne.n	8008230 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f06f 0208 	mvn.w	r2, #8
 8008200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2204      	movs	r2, #4
 8008206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	69db      	ldr	r3, [r3, #28]
 800820e:	f003 0303 	and.w	r3, r3, #3
 8008212:	2b00      	cmp	r3, #0
 8008214:	d003      	beq.n	800821e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fa23 	bl	8008662 <HAL_TIM_IC_CaptureCallback>
 800821c:	e005      	b.n	800822a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 fa15 	bl	800864e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 fa26 	bl	8008676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	f003 0310 	and.w	r3, r3, #16
 800823a:	2b10      	cmp	r3, #16
 800823c:	d122      	bne.n	8008284 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	f003 0310 	and.w	r3, r3, #16
 8008248:	2b10      	cmp	r3, #16
 800824a:	d11b      	bne.n	8008284 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f06f 0210 	mvn.w	r2, #16
 8008254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2208      	movs	r2, #8
 800825a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	69db      	ldr	r3, [r3, #28]
 8008262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008266:	2b00      	cmp	r3, #0
 8008268:	d003      	beq.n	8008272 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f9f9 	bl	8008662 <HAL_TIM_IC_CaptureCallback>
 8008270:	e005      	b.n	800827e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f9eb 	bl	800864e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f9fc 	bl	8008676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	2b01      	cmp	r3, #1
 8008290:	d10e      	bne.n	80082b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	2b01      	cmp	r3, #1
 800829e:	d107      	bne.n	80082b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f06f 0201 	mvn.w	r2, #1
 80082a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7fa fffc 	bl	80032a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ba:	2b80      	cmp	r3, #128	; 0x80
 80082bc:	d10e      	bne.n	80082dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082c8:	2b80      	cmp	r3, #128	; 0x80
 80082ca:	d107      	bne.n	80082dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80082d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 fe1c 	bl	8008f14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e6:	2b40      	cmp	r3, #64	; 0x40
 80082e8:	d10e      	bne.n	8008308 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f4:	2b40      	cmp	r3, #64	; 0x40
 80082f6:	d107      	bne.n	8008308 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f9c1 	bl	800868a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	f003 0320 	and.w	r3, r3, #32
 8008312:	2b20      	cmp	r3, #32
 8008314:	d10e      	bne.n	8008334 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	f003 0320 	and.w	r3, r3, #32
 8008320:	2b20      	cmp	r3, #32
 8008322:	d107      	bne.n	8008334 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f06f 0220 	mvn.w	r2, #32
 800832c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fde6 	bl	8008f00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008334:	bf00      	nop
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b086      	sub	sp, #24
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008348:	2300      	movs	r3, #0
 800834a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008352:	2b01      	cmp	r3, #1
 8008354:	d101      	bne.n	800835a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008356:	2302      	movs	r3, #2
 8008358:	e0ae      	b.n	80084b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2b0c      	cmp	r3, #12
 8008366:	f200 809f 	bhi.w	80084a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800836a:	a201      	add	r2, pc, #4	; (adr r2, 8008370 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800836c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008370:	080083a5 	.word	0x080083a5
 8008374:	080084a9 	.word	0x080084a9
 8008378:	080084a9 	.word	0x080084a9
 800837c:	080084a9 	.word	0x080084a9
 8008380:	080083e5 	.word	0x080083e5
 8008384:	080084a9 	.word	0x080084a9
 8008388:	080084a9 	.word	0x080084a9
 800838c:	080084a9 	.word	0x080084a9
 8008390:	08008427 	.word	0x08008427
 8008394:	080084a9 	.word	0x080084a9
 8008398:	080084a9 	.word	0x080084a9
 800839c:	080084a9 	.word	0x080084a9
 80083a0:	08008467 	.word	0x08008467
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68b9      	ldr	r1, [r7, #8]
 80083aa:	4618      	mov	r0, r3
 80083ac:	f000 fa6a 	bl	8008884 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	699a      	ldr	r2, [r3, #24]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f042 0208 	orr.w	r2, r2, #8
 80083be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	699a      	ldr	r2, [r3, #24]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f022 0204 	bic.w	r2, r2, #4
 80083ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6999      	ldr	r1, [r3, #24]
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	691a      	ldr	r2, [r3, #16]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	430a      	orrs	r2, r1
 80083e0:	619a      	str	r2, [r3, #24]
      break;
 80083e2:	e064      	b.n	80084ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68b9      	ldr	r1, [r7, #8]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 faba 	bl	8008964 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	699a      	ldr	r2, [r3, #24]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	699a      	ldr	r2, [r3, #24]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800840e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	6999      	ldr	r1, [r3, #24]
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	021a      	lsls	r2, r3, #8
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	430a      	orrs	r2, r1
 8008422:	619a      	str	r2, [r3, #24]
      break;
 8008424:	e043      	b.n	80084ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68b9      	ldr	r1, [r7, #8]
 800842c:	4618      	mov	r0, r3
 800842e:	f000 fb0f 	bl	8008a50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	69da      	ldr	r2, [r3, #28]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f042 0208 	orr.w	r2, r2, #8
 8008440:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	69da      	ldr	r2, [r3, #28]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f022 0204 	bic.w	r2, r2, #4
 8008450:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	69d9      	ldr	r1, [r3, #28]
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	691a      	ldr	r2, [r3, #16]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	430a      	orrs	r2, r1
 8008462:	61da      	str	r2, [r3, #28]
      break;
 8008464:	e023      	b.n	80084ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68b9      	ldr	r1, [r7, #8]
 800846c:	4618      	mov	r0, r3
 800846e:	f000 fb63 	bl	8008b38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	69da      	ldr	r2, [r3, #28]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	69da      	ldr	r2, [r3, #28]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	69d9      	ldr	r1, [r3, #28]
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	021a      	lsls	r2, r3, #8
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	430a      	orrs	r2, r1
 80084a4:	61da      	str	r2, [r3, #28]
      break;
 80084a6:	e002      	b.n	80084ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	75fb      	strb	r3, [r7, #23]
      break;
 80084ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3718      	adds	r7, #24
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d101      	bne.n	80084dc <HAL_TIM_ConfigClockSource+0x1c>
 80084d8:	2302      	movs	r3, #2
 80084da:	e0b4      	b.n	8008646 <HAL_TIM_ConfigClockSource+0x186>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2202      	movs	r2, #2
 80084e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80084fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008502:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008514:	d03e      	beq.n	8008594 <HAL_TIM_ConfigClockSource+0xd4>
 8008516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800851a:	f200 8087 	bhi.w	800862c <HAL_TIM_ConfigClockSource+0x16c>
 800851e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008522:	f000 8086 	beq.w	8008632 <HAL_TIM_ConfigClockSource+0x172>
 8008526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800852a:	d87f      	bhi.n	800862c <HAL_TIM_ConfigClockSource+0x16c>
 800852c:	2b70      	cmp	r3, #112	; 0x70
 800852e:	d01a      	beq.n	8008566 <HAL_TIM_ConfigClockSource+0xa6>
 8008530:	2b70      	cmp	r3, #112	; 0x70
 8008532:	d87b      	bhi.n	800862c <HAL_TIM_ConfigClockSource+0x16c>
 8008534:	2b60      	cmp	r3, #96	; 0x60
 8008536:	d050      	beq.n	80085da <HAL_TIM_ConfigClockSource+0x11a>
 8008538:	2b60      	cmp	r3, #96	; 0x60
 800853a:	d877      	bhi.n	800862c <HAL_TIM_ConfigClockSource+0x16c>
 800853c:	2b50      	cmp	r3, #80	; 0x50
 800853e:	d03c      	beq.n	80085ba <HAL_TIM_ConfigClockSource+0xfa>
 8008540:	2b50      	cmp	r3, #80	; 0x50
 8008542:	d873      	bhi.n	800862c <HAL_TIM_ConfigClockSource+0x16c>
 8008544:	2b40      	cmp	r3, #64	; 0x40
 8008546:	d058      	beq.n	80085fa <HAL_TIM_ConfigClockSource+0x13a>
 8008548:	2b40      	cmp	r3, #64	; 0x40
 800854a:	d86f      	bhi.n	800862c <HAL_TIM_ConfigClockSource+0x16c>
 800854c:	2b30      	cmp	r3, #48	; 0x30
 800854e:	d064      	beq.n	800861a <HAL_TIM_ConfigClockSource+0x15a>
 8008550:	2b30      	cmp	r3, #48	; 0x30
 8008552:	d86b      	bhi.n	800862c <HAL_TIM_ConfigClockSource+0x16c>
 8008554:	2b20      	cmp	r3, #32
 8008556:	d060      	beq.n	800861a <HAL_TIM_ConfigClockSource+0x15a>
 8008558:	2b20      	cmp	r3, #32
 800855a:	d867      	bhi.n	800862c <HAL_TIM_ConfigClockSource+0x16c>
 800855c:	2b00      	cmp	r3, #0
 800855e:	d05c      	beq.n	800861a <HAL_TIM_ConfigClockSource+0x15a>
 8008560:	2b10      	cmp	r3, #16
 8008562:	d05a      	beq.n	800861a <HAL_TIM_ConfigClockSource+0x15a>
 8008564:	e062      	b.n	800862c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6818      	ldr	r0, [r3, #0]
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	6899      	ldr	r1, [r3, #8]
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	685a      	ldr	r2, [r3, #4]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	f000 fbaf 	bl	8008cd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008588:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68ba      	ldr	r2, [r7, #8]
 8008590:	609a      	str	r2, [r3, #8]
      break;
 8008592:	e04f      	b.n	8008634 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6818      	ldr	r0, [r3, #0]
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	6899      	ldr	r1, [r3, #8]
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	685a      	ldr	r2, [r3, #4]
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	f000 fb98 	bl	8008cd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	689a      	ldr	r2, [r3, #8]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085b6:	609a      	str	r2, [r3, #8]
      break;
 80085b8:	e03c      	b.n	8008634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6818      	ldr	r0, [r3, #0]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	6859      	ldr	r1, [r3, #4]
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	461a      	mov	r2, r3
 80085c8:	f000 fb0c 	bl	8008be4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2150      	movs	r1, #80	; 0x50
 80085d2:	4618      	mov	r0, r3
 80085d4:	f000 fb65 	bl	8008ca2 <TIM_ITRx_SetConfig>
      break;
 80085d8:	e02c      	b.n	8008634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6818      	ldr	r0, [r3, #0]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	6859      	ldr	r1, [r3, #4]
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	461a      	mov	r2, r3
 80085e8:	f000 fb2b 	bl	8008c42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2160      	movs	r1, #96	; 0x60
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 fb55 	bl	8008ca2 <TIM_ITRx_SetConfig>
      break;
 80085f8:	e01c      	b.n	8008634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6818      	ldr	r0, [r3, #0]
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	6859      	ldr	r1, [r3, #4]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	461a      	mov	r2, r3
 8008608:	f000 faec 	bl	8008be4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2140      	movs	r1, #64	; 0x40
 8008612:	4618      	mov	r0, r3
 8008614:	f000 fb45 	bl	8008ca2 <TIM_ITRx_SetConfig>
      break;
 8008618:	e00c      	b.n	8008634 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4619      	mov	r1, r3
 8008624:	4610      	mov	r0, r2
 8008626:	f000 fb3c 	bl	8008ca2 <TIM_ITRx_SetConfig>
      break;
 800862a:	e003      	b.n	8008634 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	73fb      	strb	r3, [r7, #15]
      break;
 8008630:	e000      	b.n	8008634 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008632:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008644:	7bfb      	ldrb	r3, [r7, #15]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800864e:	b480      	push	{r7}
 8008650:	b083      	sub	sp, #12
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008656:	bf00      	nop
 8008658:	370c      	adds	r7, #12
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr

08008662 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008662:	b480      	push	{r7}
 8008664:	b083      	sub	sp, #12
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800866a:	bf00      	nop
 800866c:	370c      	adds	r7, #12
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008676:	b480      	push	{r7}
 8008678:	b083      	sub	sp, #12
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800867e:	bf00      	nop
 8008680:	370c      	adds	r7, #12
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr

0800868a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800868a:	b480      	push	{r7}
 800868c:	b083      	sub	sp, #12
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008692:	bf00      	nop
 8008694:	370c      	adds	r7, #12
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr

0800869e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800869e:	b480      	push	{r7}
 80086a0:	b083      	sub	sp, #12
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80086a6:	bf00      	nop
 80086a8:	370c      	adds	r7, #12
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr

080086b2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b084      	sub	sp, #16
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086be:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d107      	bne.n	80086da <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2201      	movs	r2, #1
 80086ce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086d8:	e02a      	b.n	8008730 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d107      	bne.n	80086f4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2202      	movs	r2, #2
 80086e8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086f2:	e01d      	b.n	8008730 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d107      	bne.n	800870e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2204      	movs	r2, #4
 8008702:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800870c:	e010      	b.n	8008730 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	429a      	cmp	r2, r3
 8008716:	d107      	bne.n	8008728 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2208      	movs	r2, #8
 800871c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2201      	movs	r2, #1
 8008722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008726:	e003      	b.n	8008730 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f7ff ffb4 	bl	800869e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2200      	movs	r2, #0
 800873a:	771a      	strb	r2, [r3, #28]
}
 800873c:	bf00      	nop
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a40      	ldr	r2, [pc, #256]	; (8008858 <TIM_Base_SetConfig+0x114>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d013      	beq.n	8008784 <TIM_Base_SetConfig+0x40>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008762:	d00f      	beq.n	8008784 <TIM_Base_SetConfig+0x40>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a3d      	ldr	r2, [pc, #244]	; (800885c <TIM_Base_SetConfig+0x118>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d00b      	beq.n	8008784 <TIM_Base_SetConfig+0x40>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a3c      	ldr	r2, [pc, #240]	; (8008860 <TIM_Base_SetConfig+0x11c>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d007      	beq.n	8008784 <TIM_Base_SetConfig+0x40>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a3b      	ldr	r2, [pc, #236]	; (8008864 <TIM_Base_SetConfig+0x120>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d003      	beq.n	8008784 <TIM_Base_SetConfig+0x40>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4a3a      	ldr	r2, [pc, #232]	; (8008868 <TIM_Base_SetConfig+0x124>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d108      	bne.n	8008796 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800878a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	4313      	orrs	r3, r2
 8008794:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a2f      	ldr	r2, [pc, #188]	; (8008858 <TIM_Base_SetConfig+0x114>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d02b      	beq.n	80087f6 <TIM_Base_SetConfig+0xb2>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087a4:	d027      	beq.n	80087f6 <TIM_Base_SetConfig+0xb2>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a2c      	ldr	r2, [pc, #176]	; (800885c <TIM_Base_SetConfig+0x118>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d023      	beq.n	80087f6 <TIM_Base_SetConfig+0xb2>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a2b      	ldr	r2, [pc, #172]	; (8008860 <TIM_Base_SetConfig+0x11c>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d01f      	beq.n	80087f6 <TIM_Base_SetConfig+0xb2>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a2a      	ldr	r2, [pc, #168]	; (8008864 <TIM_Base_SetConfig+0x120>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d01b      	beq.n	80087f6 <TIM_Base_SetConfig+0xb2>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a29      	ldr	r2, [pc, #164]	; (8008868 <TIM_Base_SetConfig+0x124>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d017      	beq.n	80087f6 <TIM_Base_SetConfig+0xb2>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a28      	ldr	r2, [pc, #160]	; (800886c <TIM_Base_SetConfig+0x128>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d013      	beq.n	80087f6 <TIM_Base_SetConfig+0xb2>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a27      	ldr	r2, [pc, #156]	; (8008870 <TIM_Base_SetConfig+0x12c>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d00f      	beq.n	80087f6 <TIM_Base_SetConfig+0xb2>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a26      	ldr	r2, [pc, #152]	; (8008874 <TIM_Base_SetConfig+0x130>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d00b      	beq.n	80087f6 <TIM_Base_SetConfig+0xb2>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a25      	ldr	r2, [pc, #148]	; (8008878 <TIM_Base_SetConfig+0x134>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d007      	beq.n	80087f6 <TIM_Base_SetConfig+0xb2>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a24      	ldr	r2, [pc, #144]	; (800887c <TIM_Base_SetConfig+0x138>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d003      	beq.n	80087f6 <TIM_Base_SetConfig+0xb2>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a23      	ldr	r2, [pc, #140]	; (8008880 <TIM_Base_SetConfig+0x13c>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d108      	bne.n	8008808 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	4313      	orrs	r3, r2
 8008806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	4313      	orrs	r3, r2
 8008814:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	689a      	ldr	r2, [r3, #8]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a0a      	ldr	r2, [pc, #40]	; (8008858 <TIM_Base_SetConfig+0x114>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d003      	beq.n	800883c <TIM_Base_SetConfig+0xf8>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a0c      	ldr	r2, [pc, #48]	; (8008868 <TIM_Base_SetConfig+0x124>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d103      	bne.n	8008844 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	691a      	ldr	r2, [r3, #16]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	615a      	str	r2, [r3, #20]
}
 800884a:	bf00      	nop
 800884c:	3714      	adds	r7, #20
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop
 8008858:	40010000 	.word	0x40010000
 800885c:	40000400 	.word	0x40000400
 8008860:	40000800 	.word	0x40000800
 8008864:	40000c00 	.word	0x40000c00
 8008868:	40010400 	.word	0x40010400
 800886c:	40014000 	.word	0x40014000
 8008870:	40014400 	.word	0x40014400
 8008874:	40014800 	.word	0x40014800
 8008878:	40001800 	.word	0x40001800
 800887c:	40001c00 	.word	0x40001c00
 8008880:	40002000 	.word	0x40002000

08008884 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008884:	b480      	push	{r7}
 8008886:	b087      	sub	sp, #28
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a1b      	ldr	r3, [r3, #32]
 8008892:	f023 0201 	bic.w	r2, r3, #1
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f023 0303 	bic.w	r3, r3, #3
 80088ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	4313      	orrs	r3, r2
 80088c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	f023 0302 	bic.w	r3, r3, #2
 80088cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a20      	ldr	r2, [pc, #128]	; (800895c <TIM_OC1_SetConfig+0xd8>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d003      	beq.n	80088e8 <TIM_OC1_SetConfig+0x64>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a1f      	ldr	r2, [pc, #124]	; (8008960 <TIM_OC1_SetConfig+0xdc>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d10c      	bne.n	8008902 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	f023 0308 	bic.w	r3, r3, #8
 80088ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	697a      	ldr	r2, [r7, #20]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	f023 0304 	bic.w	r3, r3, #4
 8008900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a15      	ldr	r2, [pc, #84]	; (800895c <TIM_OC1_SetConfig+0xd8>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d003      	beq.n	8008912 <TIM_OC1_SetConfig+0x8e>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a14      	ldr	r2, [pc, #80]	; (8008960 <TIM_OC1_SetConfig+0xdc>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d111      	bne.n	8008936 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	695b      	ldr	r3, [r3, #20]
 8008926:	693a      	ldr	r2, [r7, #16]
 8008928:	4313      	orrs	r3, r2
 800892a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	693a      	ldr	r2, [r7, #16]
 8008932:	4313      	orrs	r3, r2
 8008934:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	693a      	ldr	r2, [r7, #16]
 800893a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	685a      	ldr	r2, [r3, #4]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	697a      	ldr	r2, [r7, #20]
 800894e:	621a      	str	r2, [r3, #32]
}
 8008950:	bf00      	nop
 8008952:	371c      	adds	r7, #28
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr
 800895c:	40010000 	.word	0x40010000
 8008960:	40010400 	.word	0x40010400

08008964 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008964:	b480      	push	{r7}
 8008966:	b087      	sub	sp, #28
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a1b      	ldr	r3, [r3, #32]
 8008972:	f023 0210 	bic.w	r2, r3, #16
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a1b      	ldr	r3, [r3, #32]
 800897e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800899a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	021b      	lsls	r3, r3, #8
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	f023 0320 	bic.w	r3, r3, #32
 80089ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	011b      	lsls	r3, r3, #4
 80089b6:	697a      	ldr	r2, [r7, #20]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a22      	ldr	r2, [pc, #136]	; (8008a48 <TIM_OC2_SetConfig+0xe4>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d003      	beq.n	80089cc <TIM_OC2_SetConfig+0x68>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a21      	ldr	r2, [pc, #132]	; (8008a4c <TIM_OC2_SetConfig+0xe8>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d10d      	bne.n	80089e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	011b      	lsls	r3, r3, #4
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	4313      	orrs	r3, r2
 80089de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4a17      	ldr	r2, [pc, #92]	; (8008a48 <TIM_OC2_SetConfig+0xe4>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d003      	beq.n	80089f8 <TIM_OC2_SetConfig+0x94>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a16      	ldr	r2, [pc, #88]	; (8008a4c <TIM_OC2_SetConfig+0xe8>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d113      	bne.n	8008a20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	695b      	ldr	r3, [r3, #20]
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	693a      	ldr	r2, [r7, #16]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	699b      	ldr	r3, [r3, #24]
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	693a      	ldr	r2, [r7, #16]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	693a      	ldr	r2, [r7, #16]
 8008a24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	685a      	ldr	r2, [r3, #4]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	697a      	ldr	r2, [r7, #20]
 8008a38:	621a      	str	r2, [r3, #32]
}
 8008a3a:	bf00      	nop
 8008a3c:	371c      	adds	r7, #28
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	40010000 	.word	0x40010000
 8008a4c:	40010400 	.word	0x40010400

08008a50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b087      	sub	sp, #28
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a1b      	ldr	r3, [r3, #32]
 8008a5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6a1b      	ldr	r3, [r3, #32]
 8008a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	69db      	ldr	r3, [r3, #28]
 8008a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f023 0303 	bic.w	r3, r3, #3
 8008a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	021b      	lsls	r3, r3, #8
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4a21      	ldr	r2, [pc, #132]	; (8008b30 <TIM_OC3_SetConfig+0xe0>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d003      	beq.n	8008ab6 <TIM_OC3_SetConfig+0x66>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a20      	ldr	r2, [pc, #128]	; (8008b34 <TIM_OC3_SetConfig+0xe4>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d10d      	bne.n	8008ad2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008abc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	021b      	lsls	r3, r3, #8
 8008ac4:	697a      	ldr	r2, [r7, #20]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a16      	ldr	r2, [pc, #88]	; (8008b30 <TIM_OC3_SetConfig+0xe0>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d003      	beq.n	8008ae2 <TIM_OC3_SetConfig+0x92>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a15      	ldr	r2, [pc, #84]	; (8008b34 <TIM_OC3_SetConfig+0xe4>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d113      	bne.n	8008b0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008af0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	695b      	ldr	r3, [r3, #20]
 8008af6:	011b      	lsls	r3, r3, #4
 8008af8:	693a      	ldr	r2, [r7, #16]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	011b      	lsls	r3, r3, #4
 8008b04:	693a      	ldr	r2, [r7, #16]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	693a      	ldr	r2, [r7, #16]
 8008b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	685a      	ldr	r2, [r3, #4]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	697a      	ldr	r2, [r7, #20]
 8008b22:	621a      	str	r2, [r3, #32]
}
 8008b24:	bf00      	nop
 8008b26:	371c      	adds	r7, #28
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr
 8008b30:	40010000 	.word	0x40010000
 8008b34:	40010400 	.word	0x40010400

08008b38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b087      	sub	sp, #28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a1b      	ldr	r3, [r3, #32]
 8008b52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	69db      	ldr	r3, [r3, #28]
 8008b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	021b      	lsls	r3, r3, #8
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	031b      	lsls	r3, r3, #12
 8008b8a:	693a      	ldr	r2, [r7, #16]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a12      	ldr	r2, [pc, #72]	; (8008bdc <TIM_OC4_SetConfig+0xa4>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d003      	beq.n	8008ba0 <TIM_OC4_SetConfig+0x68>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a11      	ldr	r2, [pc, #68]	; (8008be0 <TIM_OC4_SetConfig+0xa8>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d109      	bne.n	8008bb4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ba6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	019b      	lsls	r3, r3, #6
 8008bae:	697a      	ldr	r2, [r7, #20]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	697a      	ldr	r2, [r7, #20]
 8008bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	685a      	ldr	r2, [r3, #4]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	621a      	str	r2, [r3, #32]
}
 8008bce:	bf00      	nop
 8008bd0:	371c      	adds	r7, #28
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	40010000 	.word	0x40010000
 8008be0:	40010400 	.word	0x40010400

08008be4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b087      	sub	sp, #28
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6a1b      	ldr	r3, [r3, #32]
 8008bf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6a1b      	ldr	r3, [r3, #32]
 8008bfa:	f023 0201 	bic.w	r2, r3, #1
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	699b      	ldr	r3, [r3, #24]
 8008c06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	011b      	lsls	r3, r3, #4
 8008c14:	693a      	ldr	r2, [r7, #16]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	f023 030a 	bic.w	r3, r3, #10
 8008c20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c22:	697a      	ldr	r2, [r7, #20]
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	697a      	ldr	r2, [r7, #20]
 8008c34:	621a      	str	r2, [r3, #32]
}
 8008c36:	bf00      	nop
 8008c38:	371c      	adds	r7, #28
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr

08008c42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c42:	b480      	push	{r7}
 8008c44:	b087      	sub	sp, #28
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	60f8      	str	r0, [r7, #12]
 8008c4a:	60b9      	str	r1, [r7, #8]
 8008c4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6a1b      	ldr	r3, [r3, #32]
 8008c52:	f023 0210 	bic.w	r2, r3, #16
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	699b      	ldr	r3, [r3, #24]
 8008c5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6a1b      	ldr	r3, [r3, #32]
 8008c64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	031b      	lsls	r3, r3, #12
 8008c72:	697a      	ldr	r2, [r7, #20]
 8008c74:	4313      	orrs	r3, r2
 8008c76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	011b      	lsls	r3, r3, #4
 8008c84:	693a      	ldr	r2, [r7, #16]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	697a      	ldr	r2, [r7, #20]
 8008c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	693a      	ldr	r2, [r7, #16]
 8008c94:	621a      	str	r2, [r3, #32]
}
 8008c96:	bf00      	nop
 8008c98:	371c      	adds	r7, #28
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	b085      	sub	sp, #20
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008cba:	683a      	ldr	r2, [r7, #0]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	f043 0307 	orr.w	r3, r3, #7
 8008cc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	609a      	str	r2, [r3, #8]
}
 8008ccc:	bf00      	nop
 8008cce:	3714      	adds	r7, #20
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b087      	sub	sp, #28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	607a      	str	r2, [r7, #4]
 8008ce4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	021a      	lsls	r2, r3, #8
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	431a      	orrs	r2, r3
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	697a      	ldr	r2, [r7, #20]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	697a      	ldr	r2, [r7, #20]
 8008d0a:	609a      	str	r2, [r3, #8]
}
 8008d0c:	bf00      	nop
 8008d0e:	371c      	adds	r7, #28
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b087      	sub	sp, #28
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	f003 031f 	and.w	r3, r3, #31
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6a1a      	ldr	r2, [r3, #32]
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	43db      	mvns	r3, r3
 8008d3a:	401a      	ands	r2, r3
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6a1a      	ldr	r2, [r3, #32]
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	f003 031f 	and.w	r3, r3, #31
 8008d4a:	6879      	ldr	r1, [r7, #4]
 8008d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8008d50:	431a      	orrs	r2, r3
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	621a      	str	r2, [r3, #32]
}
 8008d56:	bf00      	nop
 8008d58:	371c      	adds	r7, #28
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr
	...

08008d64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d101      	bne.n	8008d7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d78:	2302      	movs	r3, #2
 8008d7a:	e05a      	b.n	8008e32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2202      	movs	r2, #2
 8008d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008da2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a21      	ldr	r2, [pc, #132]	; (8008e40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d022      	beq.n	8008e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dc8:	d01d      	beq.n	8008e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a1d      	ldr	r2, [pc, #116]	; (8008e44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d018      	beq.n	8008e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a1b      	ldr	r2, [pc, #108]	; (8008e48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d013      	beq.n	8008e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a1a      	ldr	r2, [pc, #104]	; (8008e4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d00e      	beq.n	8008e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a18      	ldr	r2, [pc, #96]	; (8008e50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d009      	beq.n	8008e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a17      	ldr	r2, [pc, #92]	; (8008e54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d004      	beq.n	8008e06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a15      	ldr	r2, [pc, #84]	; (8008e58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d10c      	bne.n	8008e20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	68ba      	ldr	r2, [r7, #8]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	68ba      	ldr	r2, [r7, #8]
 8008e1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3714      	adds	r7, #20
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	40010000 	.word	0x40010000
 8008e44:	40000400 	.word	0x40000400
 8008e48:	40000800 	.word	0x40000800
 8008e4c:	40000c00 	.word	0x40000c00
 8008e50:	40010400 	.word	0x40010400
 8008e54:	40014000 	.word	0x40014000
 8008e58:	40001800 	.word	0x40001800

08008e5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008e66:	2300      	movs	r3, #0
 8008e68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d101      	bne.n	8008e78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008e74:	2302      	movs	r3, #2
 8008e76:	e03d      	b.n	8008ef4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	695b      	ldr	r3, [r3, #20]
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	69db      	ldr	r3, [r3, #28]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3714      	adds	r7, #20
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f1c:	bf00      	nop
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d101      	bne.n	8008f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e03f      	b.n	8008fba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d106      	bne.n	8008f54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7fa fcee 	bl	8003930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2224      	movs	r2, #36	; 0x24
 8008f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68da      	ldr	r2, [r3, #12]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 fe23 	bl	8009bb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	691a      	ldr	r2, [r3, #16]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	695a      	ldr	r2, [r3, #20]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	68da      	ldr	r2, [r3, #12]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008fa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2220      	movs	r2, #32
 8008fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2220      	movs	r2, #32
 8008fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3708      	adds	r7, #8
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b08a      	sub	sp, #40	; 0x28
 8008fc6:	af02      	add	r7, sp, #8
 8008fc8:	60f8      	str	r0, [r7, #12]
 8008fca:	60b9      	str	r1, [r7, #8]
 8008fcc:	603b      	str	r3, [r7, #0]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	2b20      	cmp	r3, #32
 8008fe0:	d17c      	bne.n	80090dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d002      	beq.n	8008fee <HAL_UART_Transmit+0x2c>
 8008fe8:	88fb      	ldrh	r3, [r7, #6]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e075      	b.n	80090de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d101      	bne.n	8009000 <HAL_UART_Transmit+0x3e>
 8008ffc:	2302      	movs	r3, #2
 8008ffe:	e06e      	b.n	80090de <HAL_UART_Transmit+0x11c>
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2221      	movs	r2, #33	; 0x21
 8009012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009016:	f7fb fb95 	bl	8004744 <HAL_GetTick>
 800901a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	88fa      	ldrh	r2, [r7, #6]
 8009020:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	88fa      	ldrh	r2, [r7, #6]
 8009026:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009030:	d108      	bne.n	8009044 <HAL_UART_Transmit+0x82>
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d104      	bne.n	8009044 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800903a:	2300      	movs	r3, #0
 800903c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	61bb      	str	r3, [r7, #24]
 8009042:	e003      	b.n	800904c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009048:	2300      	movs	r3, #0
 800904a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2200      	movs	r2, #0
 8009050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009054:	e02a      	b.n	80090ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	2200      	movs	r2, #0
 800905e:	2180      	movs	r1, #128	; 0x80
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f000 fb63 	bl	800972c <UART_WaitOnFlagUntilTimeout>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d001      	beq.n	8009070 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800906c:	2303      	movs	r3, #3
 800906e:	e036      	b.n	80090de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d10b      	bne.n	800908e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	881b      	ldrh	r3, [r3, #0]
 800907a:	461a      	mov	r2, r3
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009084:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	3302      	adds	r3, #2
 800908a:	61bb      	str	r3, [r7, #24]
 800908c:	e007      	b.n	800909e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	781a      	ldrb	r2, [r3, #0]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	3301      	adds	r3, #1
 800909c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	3b01      	subs	r3, #1
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1cf      	bne.n	8009056 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	2200      	movs	r2, #0
 80090be:	2140      	movs	r1, #64	; 0x40
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f000 fb33 	bl	800972c <UART_WaitOnFlagUntilTimeout>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d001      	beq.n	80090d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80090cc:	2303      	movs	r3, #3
 80090ce:	e006      	b.n	80090de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2220      	movs	r2, #32
 80090d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80090d8:	2300      	movs	r3, #0
 80090da:	e000      	b.n	80090de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80090dc:	2302      	movs	r3, #2
  }
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3720      	adds	r7, #32
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80090e6:	b480      	push	{r7}
 80090e8:	b085      	sub	sp, #20
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	60f8      	str	r0, [r7, #12]
 80090ee:	60b9      	str	r1, [r7, #8]
 80090f0:	4613      	mov	r3, r2
 80090f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	2b20      	cmp	r3, #32
 80090fe:	d130      	bne.n	8009162 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d002      	beq.n	800910c <HAL_UART_Transmit_IT+0x26>
 8009106:	88fb      	ldrh	r3, [r7, #6]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d101      	bne.n	8009110 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	e029      	b.n	8009164 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009116:	2b01      	cmp	r3, #1
 8009118:	d101      	bne.n	800911e <HAL_UART_Transmit_IT+0x38>
 800911a:	2302      	movs	r3, #2
 800911c:	e022      	b.n	8009164 <HAL_UART_Transmit_IT+0x7e>
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2201      	movs	r2, #1
 8009122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	68ba      	ldr	r2, [r7, #8]
 800912a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	88fa      	ldrh	r2, [r7, #6]
 8009130:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	88fa      	ldrh	r2, [r7, #6]
 8009136:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2221      	movs	r2, #33	; 0x21
 8009142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68da      	ldr	r2, [r3, #12]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800915c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800915e:	2300      	movs	r3, #0
 8009160:	e000      	b.n	8009164 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8009162:	2302      	movs	r3, #2
  }
}
 8009164:	4618      	mov	r0, r3
 8009166:	3714      	adds	r7, #20
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	4613      	mov	r3, r2
 800917c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009184:	b2db      	uxtb	r3, r3
 8009186:	2b20      	cmp	r3, #32
 8009188:	d11d      	bne.n	80091c6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d002      	beq.n	8009196 <HAL_UART_Receive_IT+0x26>
 8009190:	88fb      	ldrh	r3, [r7, #6]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d101      	bne.n	800919a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e016      	b.n	80091c8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d101      	bne.n	80091a8 <HAL_UART_Receive_IT+0x38>
 80091a4:	2302      	movs	r3, #2
 80091a6:	e00f      	b.n	80091c8 <HAL_UART_Receive_IT+0x58>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2200      	movs	r2, #0
 80091b4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80091b6:	88fb      	ldrh	r3, [r7, #6]
 80091b8:	461a      	mov	r2, r3
 80091ba:	68b9      	ldr	r1, [r7, #8]
 80091bc:	68f8      	ldr	r0, [r7, #12]
 80091be:	f000 fb23 	bl	8009808 <UART_Start_Receive_IT>
 80091c2:	4603      	mov	r3, r0
 80091c4:	e000      	b.n	80091c8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80091c6:	2302      	movs	r3, #2
  }
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b0ba      	sub	sp, #232	; 0xe8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	695b      	ldr	r3, [r3, #20]
 80091f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80091f6:	2300      	movs	r3, #0
 80091f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80091fc:	2300      	movs	r3, #0
 80091fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009206:	f003 030f 	and.w	r3, r3, #15
 800920a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800920e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009212:	2b00      	cmp	r3, #0
 8009214:	d10f      	bne.n	8009236 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800921a:	f003 0320 	and.w	r3, r3, #32
 800921e:	2b00      	cmp	r3, #0
 8009220:	d009      	beq.n	8009236 <HAL_UART_IRQHandler+0x66>
 8009222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009226:	f003 0320 	and.w	r3, r3, #32
 800922a:	2b00      	cmp	r3, #0
 800922c:	d003      	beq.n	8009236 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 fc07 	bl	8009a42 <UART_Receive_IT>
      return;
 8009234:	e256      	b.n	80096e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009236:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800923a:	2b00      	cmp	r3, #0
 800923c:	f000 80de 	beq.w	80093fc <HAL_UART_IRQHandler+0x22c>
 8009240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009244:	f003 0301 	and.w	r3, r3, #1
 8009248:	2b00      	cmp	r3, #0
 800924a:	d106      	bne.n	800925a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800924c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009250:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009254:	2b00      	cmp	r3, #0
 8009256:	f000 80d1 	beq.w	80093fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800925a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800925e:	f003 0301 	and.w	r3, r3, #1
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00b      	beq.n	800927e <HAL_UART_IRQHandler+0xae>
 8009266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800926a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800926e:	2b00      	cmp	r3, #0
 8009270:	d005      	beq.n	800927e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009276:	f043 0201 	orr.w	r2, r3, #1
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800927e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009282:	f003 0304 	and.w	r3, r3, #4
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00b      	beq.n	80092a2 <HAL_UART_IRQHandler+0xd2>
 800928a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800928e:	f003 0301 	and.w	r3, r3, #1
 8009292:	2b00      	cmp	r3, #0
 8009294:	d005      	beq.n	80092a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929a:	f043 0202 	orr.w	r2, r3, #2
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80092a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092a6:	f003 0302 	and.w	r3, r3, #2
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00b      	beq.n	80092c6 <HAL_UART_IRQHandler+0xf6>
 80092ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092b2:	f003 0301 	and.w	r3, r3, #1
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d005      	beq.n	80092c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092be:	f043 0204 	orr.w	r2, r3, #4
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80092c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ca:	f003 0308 	and.w	r3, r3, #8
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d011      	beq.n	80092f6 <HAL_UART_IRQHandler+0x126>
 80092d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092d6:	f003 0320 	and.w	r3, r3, #32
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d105      	bne.n	80092ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80092de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092e2:	f003 0301 	and.w	r3, r3, #1
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d005      	beq.n	80092f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ee:	f043 0208 	orr.w	r2, r3, #8
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	f000 81ed 	beq.w	80096da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009304:	f003 0320 	and.w	r3, r3, #32
 8009308:	2b00      	cmp	r3, #0
 800930a:	d008      	beq.n	800931e <HAL_UART_IRQHandler+0x14e>
 800930c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009310:	f003 0320 	and.w	r3, r3, #32
 8009314:	2b00      	cmp	r3, #0
 8009316:	d002      	beq.n	800931e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 fb92 	bl	8009a42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	695b      	ldr	r3, [r3, #20]
 8009324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009328:	2b40      	cmp	r3, #64	; 0x40
 800932a:	bf0c      	ite	eq
 800932c:	2301      	moveq	r3, #1
 800932e:	2300      	movne	r3, #0
 8009330:	b2db      	uxtb	r3, r3
 8009332:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800933a:	f003 0308 	and.w	r3, r3, #8
 800933e:	2b00      	cmp	r3, #0
 8009340:	d103      	bne.n	800934a <HAL_UART_IRQHandler+0x17a>
 8009342:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009346:	2b00      	cmp	r3, #0
 8009348:	d04f      	beq.n	80093ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 fa9a 	bl	8009884 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	695b      	ldr	r3, [r3, #20]
 8009356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800935a:	2b40      	cmp	r3, #64	; 0x40
 800935c:	d141      	bne.n	80093e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	3314      	adds	r3, #20
 8009364:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009368:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800936c:	e853 3f00 	ldrex	r3, [r3]
 8009370:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009374:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800937c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	3314      	adds	r3, #20
 8009386:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800938a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800938e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009392:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009396:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800939a:	e841 2300 	strex	r3, r2, [r1]
 800939e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80093a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1d9      	bne.n	800935e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d013      	beq.n	80093da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b6:	4a7d      	ldr	r2, [pc, #500]	; (80095ac <HAL_UART_IRQHandler+0x3dc>)
 80093b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fb fc78 	bl	8004cb4 <HAL_DMA_Abort_IT>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d016      	beq.n	80093f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80093d4:	4610      	mov	r0, r2
 80093d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093d8:	e00e      	b.n	80093f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f990 	bl	8009700 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093e0:	e00a      	b.n	80093f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f98c 	bl	8009700 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093e8:	e006      	b.n	80093f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f988 	bl	8009700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80093f6:	e170      	b.n	80096da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093f8:	bf00      	nop
    return;
 80093fa:	e16e      	b.n	80096da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009400:	2b01      	cmp	r3, #1
 8009402:	f040 814a 	bne.w	800969a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800940a:	f003 0310 	and.w	r3, r3, #16
 800940e:	2b00      	cmp	r3, #0
 8009410:	f000 8143 	beq.w	800969a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009418:	f003 0310 	and.w	r3, r3, #16
 800941c:	2b00      	cmp	r3, #0
 800941e:	f000 813c 	beq.w	800969a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009422:	2300      	movs	r3, #0
 8009424:	60bb      	str	r3, [r7, #8]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	60bb      	str	r3, [r7, #8]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	60bb      	str	r3, [r7, #8]
 8009436:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	695b      	ldr	r3, [r3, #20]
 800943e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009442:	2b40      	cmp	r3, #64	; 0x40
 8009444:	f040 80b4 	bne.w	80095b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009454:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009458:	2b00      	cmp	r3, #0
 800945a:	f000 8140 	beq.w	80096de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009462:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009466:	429a      	cmp	r2, r3
 8009468:	f080 8139 	bcs.w	80096de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009472:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009478:	69db      	ldr	r3, [r3, #28]
 800947a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800947e:	f000 8088 	beq.w	8009592 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	330c      	adds	r3, #12
 8009488:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009490:	e853 3f00 	ldrex	r3, [r3]
 8009494:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009498:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800949c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	330c      	adds	r3, #12
 80094aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80094ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80094b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80094ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80094be:	e841 2300 	strex	r3, r2, [r1]
 80094c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80094c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1d9      	bne.n	8009482 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	3314      	adds	r3, #20
 80094d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094d8:	e853 3f00 	ldrex	r3, [r3]
 80094dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80094de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094e0:	f023 0301 	bic.w	r3, r3, #1
 80094e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	3314      	adds	r3, #20
 80094ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80094f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80094f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80094fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80094fe:	e841 2300 	strex	r3, r2, [r1]
 8009502:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009504:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1e1      	bne.n	80094ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	3314      	adds	r3, #20
 8009510:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009514:	e853 3f00 	ldrex	r3, [r3]
 8009518:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800951a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800951c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009520:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	3314      	adds	r3, #20
 800952a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800952e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009530:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009532:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009534:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009536:	e841 2300 	strex	r3, r2, [r1]
 800953a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800953c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800953e:	2b00      	cmp	r3, #0
 8009540:	d1e3      	bne.n	800950a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2220      	movs	r2, #32
 8009546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	330c      	adds	r3, #12
 8009556:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800955a:	e853 3f00 	ldrex	r3, [r3]
 800955e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009562:	f023 0310 	bic.w	r3, r3, #16
 8009566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	330c      	adds	r3, #12
 8009570:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009574:	65ba      	str	r2, [r7, #88]	; 0x58
 8009576:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009578:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800957a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800957c:	e841 2300 	strex	r3, r2, [r1]
 8009580:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009584:	2b00      	cmp	r3, #0
 8009586:	d1e3      	bne.n	8009550 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800958c:	4618      	mov	r0, r3
 800958e:	f7fb fb21 	bl	8004bd4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800959a:	b29b      	uxth	r3, r3
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	b29b      	uxth	r3, r3
 80095a0:	4619      	mov	r1, r3
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f8b6 	bl	8009714 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80095a8:	e099      	b.n	80096de <HAL_UART_IRQHandler+0x50e>
 80095aa:	bf00      	nop
 80095ac:	0800994b 	.word	0x0800994b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	1ad3      	subs	r3, r2, r3
 80095bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	f000 808b 	beq.w	80096e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80095cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	f000 8086 	beq.w	80096e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	330c      	adds	r3, #12
 80095dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e0:	e853 3f00 	ldrex	r3, [r3]
 80095e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80095e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	330c      	adds	r3, #12
 80095f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80095fa:	647a      	str	r2, [r7, #68]	; 0x44
 80095fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009600:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009602:	e841 2300 	strex	r3, r2, [r1]
 8009606:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1e3      	bne.n	80095d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	3314      	adds	r3, #20
 8009614:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009618:	e853 3f00 	ldrex	r3, [r3]
 800961c:	623b      	str	r3, [r7, #32]
   return(result);
 800961e:	6a3b      	ldr	r3, [r7, #32]
 8009620:	f023 0301 	bic.w	r3, r3, #1
 8009624:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	3314      	adds	r3, #20
 800962e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009632:	633a      	str	r2, [r7, #48]	; 0x30
 8009634:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009636:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800963a:	e841 2300 	strex	r3, r2, [r1]
 800963e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009642:	2b00      	cmp	r3, #0
 8009644:	d1e3      	bne.n	800960e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2220      	movs	r2, #32
 800964a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	330c      	adds	r3, #12
 800965a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	e853 3f00 	ldrex	r3, [r3]
 8009662:	60fb      	str	r3, [r7, #12]
   return(result);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f023 0310 	bic.w	r3, r3, #16
 800966a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	330c      	adds	r3, #12
 8009674:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009678:	61fa      	str	r2, [r7, #28]
 800967a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967c:	69b9      	ldr	r1, [r7, #24]
 800967e:	69fa      	ldr	r2, [r7, #28]
 8009680:	e841 2300 	strex	r3, r2, [r1]
 8009684:	617b      	str	r3, [r7, #20]
   return(result);
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d1e3      	bne.n	8009654 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800968c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009690:	4619      	mov	r1, r3
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 f83e 	bl	8009714 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009698:	e023      	b.n	80096e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800969a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800969e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d009      	beq.n	80096ba <HAL_UART_IRQHandler+0x4ea>
 80096a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d003      	beq.n	80096ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f95d 	bl	8009972 <UART_Transmit_IT>
    return;
 80096b8:	e014      	b.n	80096e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80096ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d00e      	beq.n	80096e4 <HAL_UART_IRQHandler+0x514>
 80096c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d008      	beq.n	80096e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 f99d 	bl	8009a12 <UART_EndTransmit_IT>
    return;
 80096d8:	e004      	b.n	80096e4 <HAL_UART_IRQHandler+0x514>
    return;
 80096da:	bf00      	nop
 80096dc:	e002      	b.n	80096e4 <HAL_UART_IRQHandler+0x514>
      return;
 80096de:	bf00      	nop
 80096e0:	e000      	b.n	80096e4 <HAL_UART_IRQHandler+0x514>
      return;
 80096e2:	bf00      	nop
  }
}
 80096e4:	37e8      	adds	r7, #232	; 0xe8
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop

080096ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80096f4:	bf00      	nop
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009708:	bf00      	nop
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	460b      	mov	r3, r1
 800971e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b090      	sub	sp, #64	; 0x40
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	603b      	str	r3, [r7, #0]
 8009738:	4613      	mov	r3, r2
 800973a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800973c:	e050      	b.n	80097e0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800973e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009744:	d04c      	beq.n	80097e0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009748:	2b00      	cmp	r3, #0
 800974a:	d007      	beq.n	800975c <UART_WaitOnFlagUntilTimeout+0x30>
 800974c:	f7fa fffa 	bl	8004744 <HAL_GetTick>
 8009750:	4602      	mov	r2, r0
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	1ad3      	subs	r3, r2, r3
 8009756:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009758:	429a      	cmp	r2, r3
 800975a:	d241      	bcs.n	80097e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	330c      	adds	r3, #12
 8009762:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009766:	e853 3f00 	ldrex	r3, [r3]
 800976a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800976c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	330c      	adds	r3, #12
 800977a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800977c:	637a      	str	r2, [r7, #52]	; 0x34
 800977e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009780:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009782:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009784:	e841 2300 	strex	r3, r2, [r1]
 8009788:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800978a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1e5      	bne.n	800975c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	3314      	adds	r3, #20
 8009796:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	e853 3f00 	ldrex	r3, [r3]
 800979e:	613b      	str	r3, [r7, #16]
   return(result);
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	f023 0301 	bic.w	r3, r3, #1
 80097a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	3314      	adds	r3, #20
 80097ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097b0:	623a      	str	r2, [r7, #32]
 80097b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b4:	69f9      	ldr	r1, [r7, #28]
 80097b6:	6a3a      	ldr	r2, [r7, #32]
 80097b8:	e841 2300 	strex	r3, r2, [r1]
 80097bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d1e5      	bne.n	8009790 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2220      	movs	r2, #32
 80097c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2220      	movs	r2, #32
 80097d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80097dc:	2303      	movs	r3, #3
 80097de:	e00f      	b.n	8009800 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	4013      	ands	r3, r2
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	429a      	cmp	r2, r3
 80097ee:	bf0c      	ite	eq
 80097f0:	2301      	moveq	r3, #1
 80097f2:	2300      	movne	r3, #0
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	461a      	mov	r2, r3
 80097f8:	79fb      	ldrb	r3, [r7, #7]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d09f      	beq.n	800973e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3740      	adds	r7, #64	; 0x40
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	4613      	mov	r3, r2
 8009814:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	68ba      	ldr	r2, [r7, #8]
 800981a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	88fa      	ldrh	r2, [r7, #6]
 8009820:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	88fa      	ldrh	r2, [r7, #6]
 8009826:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2200      	movs	r2, #0
 800982c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2222      	movs	r2, #34	; 0x22
 8009832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2200      	movs	r2, #0
 800983a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	691b      	ldr	r3, [r3, #16]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d007      	beq.n	8009856 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	68da      	ldr	r2, [r3, #12]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009854:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	695a      	ldr	r2, [r3, #20]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f042 0201 	orr.w	r2, r2, #1
 8009864:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	68da      	ldr	r2, [r3, #12]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f042 0220 	orr.w	r2, r2, #32
 8009874:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009876:	2300      	movs	r3, #0
}
 8009878:	4618      	mov	r0, r3
 800987a:	3714      	adds	r7, #20
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009884:	b480      	push	{r7}
 8009886:	b095      	sub	sp, #84	; 0x54
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	330c      	adds	r3, #12
 8009892:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009896:	e853 3f00 	ldrex	r3, [r3]
 800989a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800989c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	330c      	adds	r3, #12
 80098aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80098ac:	643a      	str	r2, [r7, #64]	; 0x40
 80098ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80098b4:	e841 2300 	strex	r3, r2, [r1]
 80098b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80098ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d1e5      	bne.n	800988c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	3314      	adds	r3, #20
 80098c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c8:	6a3b      	ldr	r3, [r7, #32]
 80098ca:	e853 3f00 	ldrex	r3, [r3]
 80098ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	f023 0301 	bic.w	r3, r3, #1
 80098d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	3314      	adds	r3, #20
 80098de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80098e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098e8:	e841 2300 	strex	r3, r2, [r1]
 80098ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d1e5      	bne.n	80098c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d119      	bne.n	8009930 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	330c      	adds	r3, #12
 8009902:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	e853 3f00 	ldrex	r3, [r3]
 800990a:	60bb      	str	r3, [r7, #8]
   return(result);
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	f023 0310 	bic.w	r3, r3, #16
 8009912:	647b      	str	r3, [r7, #68]	; 0x44
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	330c      	adds	r3, #12
 800991a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800991c:	61ba      	str	r2, [r7, #24]
 800991e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009920:	6979      	ldr	r1, [r7, #20]
 8009922:	69ba      	ldr	r2, [r7, #24]
 8009924:	e841 2300 	strex	r3, r2, [r1]
 8009928:	613b      	str	r3, [r7, #16]
   return(result);
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d1e5      	bne.n	80098fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2220      	movs	r2, #32
 8009934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800993e:	bf00      	nop
 8009940:	3754      	adds	r7, #84	; 0x54
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr

0800994a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b084      	sub	sp, #16
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009956:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2200      	movs	r2, #0
 800995c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2200      	movs	r2, #0
 8009962:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009964:	68f8      	ldr	r0, [r7, #12]
 8009966:	f7ff fecb 	bl	8009700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800996a:	bf00      	nop
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009972:	b480      	push	{r7}
 8009974:	b085      	sub	sp, #20
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009980:	b2db      	uxtb	r3, r3
 8009982:	2b21      	cmp	r3, #33	; 0x21
 8009984:	d13e      	bne.n	8009a04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800998e:	d114      	bne.n	80099ba <UART_Transmit_IT+0x48>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	691b      	ldr	r3, [r3, #16]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d110      	bne.n	80099ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a1b      	ldr	r3, [r3, #32]
 800999c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	881b      	ldrh	r3, [r3, #0]
 80099a2:	461a      	mov	r2, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6a1b      	ldr	r3, [r3, #32]
 80099b2:	1c9a      	adds	r2, r3, #2
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	621a      	str	r2, [r3, #32]
 80099b8:	e008      	b.n	80099cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6a1b      	ldr	r3, [r3, #32]
 80099be:	1c59      	adds	r1, r3, #1
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	6211      	str	r1, [r2, #32]
 80099c4:	781a      	ldrb	r2, [r3, #0]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	3b01      	subs	r3, #1
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	4619      	mov	r1, r3
 80099da:	84d1      	strh	r1, [r2, #38]	; 0x26
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10f      	bne.n	8009a00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	68da      	ldr	r2, [r3, #12]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80099ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	68da      	ldr	r2, [r3, #12]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009a00:	2300      	movs	r3, #0
 8009a02:	e000      	b.n	8009a06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009a04:	2302      	movs	r3, #2
  }
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3714      	adds	r7, #20
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr

08009a12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b082      	sub	sp, #8
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68da      	ldr	r2, [r3, #12]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2220      	movs	r2, #32
 8009a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f7ff fe5a 	bl	80096ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3708      	adds	r7, #8
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b08c      	sub	sp, #48	; 0x30
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	2b22      	cmp	r3, #34	; 0x22
 8009a54:	f040 80ab 	bne.w	8009bae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a60:	d117      	bne.n	8009a92 <UART_Receive_IT+0x50>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d113      	bne.n	8009a92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a72:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a8a:	1c9a      	adds	r2, r3, #2
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	629a      	str	r2, [r3, #40]	; 0x28
 8009a90:	e026      	b.n	8009ae0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aa4:	d007      	beq.n	8009ab6 <UART_Receive_IT+0x74>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d10a      	bne.n	8009ac4 <UART_Receive_IT+0x82>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d106      	bne.n	8009ac4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	b2da      	uxtb	r2, r3
 8009abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac0:	701a      	strb	r2, [r3, #0]
 8009ac2:	e008      	b.n	8009ad6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ad0:	b2da      	uxtb	r2, r3
 8009ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ada:	1c5a      	adds	r2, r3, #1
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	4619      	mov	r1, r3
 8009aee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d15a      	bne.n	8009baa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68da      	ldr	r2, [r3, #12]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f022 0220 	bic.w	r2, r2, #32
 8009b02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68da      	ldr	r2, [r3, #12]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	695a      	ldr	r2, [r3, #20]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f022 0201 	bic.w	r2, r2, #1
 8009b22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2220      	movs	r2, #32
 8009b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d135      	bne.n	8009ba0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	330c      	adds	r3, #12
 8009b40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	e853 3f00 	ldrex	r3, [r3]
 8009b48:	613b      	str	r3, [r7, #16]
   return(result);
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	f023 0310 	bic.w	r3, r3, #16
 8009b50:	627b      	str	r3, [r7, #36]	; 0x24
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	330c      	adds	r3, #12
 8009b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b5a:	623a      	str	r2, [r7, #32]
 8009b5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5e:	69f9      	ldr	r1, [r7, #28]
 8009b60:	6a3a      	ldr	r2, [r7, #32]
 8009b62:	e841 2300 	strex	r3, r2, [r1]
 8009b66:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d1e5      	bne.n	8009b3a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f003 0310 	and.w	r3, r3, #16
 8009b78:	2b10      	cmp	r3, #16
 8009b7a:	d10a      	bne.n	8009b92 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	60fb      	str	r3, [r7, #12]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	60fb      	str	r3, [r7, #12]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	60fb      	str	r3, [r7, #12]
 8009b90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009b96:	4619      	mov	r1, r3
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f7ff fdbb 	bl	8009714 <HAL_UARTEx_RxEventCallback>
 8009b9e:	e002      	b.n	8009ba6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f7f9 fb9b 	bl	80032dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	e002      	b.n	8009bb0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009baa:	2300      	movs	r3, #0
 8009bac:	e000      	b.n	8009bb0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009bae:	2302      	movs	r3, #2
  }
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3730      	adds	r7, #48	; 0x30
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009bbc:	b0c0      	sub	sp, #256	; 0x100
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	691b      	ldr	r3, [r3, #16]
 8009bcc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bd4:	68d9      	ldr	r1, [r3, #12]
 8009bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	ea40 0301 	orr.w	r3, r0, r1
 8009be0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009be6:	689a      	ldr	r2, [r3, #8]
 8009be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	431a      	orrs	r2, r3
 8009bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bf4:	695b      	ldr	r3, [r3, #20]
 8009bf6:	431a      	orrs	r2, r3
 8009bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bfc:	69db      	ldr	r3, [r3, #28]
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009c10:	f021 010c 	bic.w	r1, r1, #12
 8009c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009c1e:	430b      	orrs	r3, r1
 8009c20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	695b      	ldr	r3, [r3, #20]
 8009c2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c32:	6999      	ldr	r1, [r3, #24]
 8009c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	ea40 0301 	orr.w	r3, r0, r1
 8009c3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	4b8f      	ldr	r3, [pc, #572]	; (8009e84 <UART_SetConfig+0x2cc>)
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d005      	beq.n	8009c58 <UART_SetConfig+0xa0>
 8009c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	4b8d      	ldr	r3, [pc, #564]	; (8009e88 <UART_SetConfig+0x2d0>)
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d104      	bne.n	8009c62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009c58:	f7fd fd16 	bl	8007688 <HAL_RCC_GetPCLK2Freq>
 8009c5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009c60:	e003      	b.n	8009c6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009c62:	f7fd fcfd 	bl	8007660 <HAL_RCC_GetPCLK1Freq>
 8009c66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c6e:	69db      	ldr	r3, [r3, #28]
 8009c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c74:	f040 810c 	bne.w	8009e90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009c82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009c86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009c8a:	4622      	mov	r2, r4
 8009c8c:	462b      	mov	r3, r5
 8009c8e:	1891      	adds	r1, r2, r2
 8009c90:	65b9      	str	r1, [r7, #88]	; 0x58
 8009c92:	415b      	adcs	r3, r3
 8009c94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009c9a:	4621      	mov	r1, r4
 8009c9c:	eb12 0801 	adds.w	r8, r2, r1
 8009ca0:	4629      	mov	r1, r5
 8009ca2:	eb43 0901 	adc.w	r9, r3, r1
 8009ca6:	f04f 0200 	mov.w	r2, #0
 8009caa:	f04f 0300 	mov.w	r3, #0
 8009cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009cba:	4690      	mov	r8, r2
 8009cbc:	4699      	mov	r9, r3
 8009cbe:	4623      	mov	r3, r4
 8009cc0:	eb18 0303 	adds.w	r3, r8, r3
 8009cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009cc8:	462b      	mov	r3, r5
 8009cca:	eb49 0303 	adc.w	r3, r9, r3
 8009cce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009cde:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009ce2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	18db      	adds	r3, r3, r3
 8009cea:	653b      	str	r3, [r7, #80]	; 0x50
 8009cec:	4613      	mov	r3, r2
 8009cee:	eb42 0303 	adc.w	r3, r2, r3
 8009cf2:	657b      	str	r3, [r7, #84]	; 0x54
 8009cf4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009cf8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009cfc:	f7f6 fdc6 	bl	800088c <__aeabi_uldivmod>
 8009d00:	4602      	mov	r2, r0
 8009d02:	460b      	mov	r3, r1
 8009d04:	4b61      	ldr	r3, [pc, #388]	; (8009e8c <UART_SetConfig+0x2d4>)
 8009d06:	fba3 2302 	umull	r2, r3, r3, r2
 8009d0a:	095b      	lsrs	r3, r3, #5
 8009d0c:	011c      	lsls	r4, r3, #4
 8009d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d12:	2200      	movs	r2, #0
 8009d14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009d1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009d20:	4642      	mov	r2, r8
 8009d22:	464b      	mov	r3, r9
 8009d24:	1891      	adds	r1, r2, r2
 8009d26:	64b9      	str	r1, [r7, #72]	; 0x48
 8009d28:	415b      	adcs	r3, r3
 8009d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009d30:	4641      	mov	r1, r8
 8009d32:	eb12 0a01 	adds.w	sl, r2, r1
 8009d36:	4649      	mov	r1, r9
 8009d38:	eb43 0b01 	adc.w	fp, r3, r1
 8009d3c:	f04f 0200 	mov.w	r2, #0
 8009d40:	f04f 0300 	mov.w	r3, #0
 8009d44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009d48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009d4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d50:	4692      	mov	sl, r2
 8009d52:	469b      	mov	fp, r3
 8009d54:	4643      	mov	r3, r8
 8009d56:	eb1a 0303 	adds.w	r3, sl, r3
 8009d5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d5e:	464b      	mov	r3, r9
 8009d60:	eb4b 0303 	adc.w	r3, fp, r3
 8009d64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009d74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009d78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	18db      	adds	r3, r3, r3
 8009d80:	643b      	str	r3, [r7, #64]	; 0x40
 8009d82:	4613      	mov	r3, r2
 8009d84:	eb42 0303 	adc.w	r3, r2, r3
 8009d88:	647b      	str	r3, [r7, #68]	; 0x44
 8009d8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009d8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009d92:	f7f6 fd7b 	bl	800088c <__aeabi_uldivmod>
 8009d96:	4602      	mov	r2, r0
 8009d98:	460b      	mov	r3, r1
 8009d9a:	4611      	mov	r1, r2
 8009d9c:	4b3b      	ldr	r3, [pc, #236]	; (8009e8c <UART_SetConfig+0x2d4>)
 8009d9e:	fba3 2301 	umull	r2, r3, r3, r1
 8009da2:	095b      	lsrs	r3, r3, #5
 8009da4:	2264      	movs	r2, #100	; 0x64
 8009da6:	fb02 f303 	mul.w	r3, r2, r3
 8009daa:	1acb      	subs	r3, r1, r3
 8009dac:	00db      	lsls	r3, r3, #3
 8009dae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009db2:	4b36      	ldr	r3, [pc, #216]	; (8009e8c <UART_SetConfig+0x2d4>)
 8009db4:	fba3 2302 	umull	r2, r3, r3, r2
 8009db8:	095b      	lsrs	r3, r3, #5
 8009dba:	005b      	lsls	r3, r3, #1
 8009dbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009dc0:	441c      	add	r4, r3
 8009dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009dcc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009dd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009dd4:	4642      	mov	r2, r8
 8009dd6:	464b      	mov	r3, r9
 8009dd8:	1891      	adds	r1, r2, r2
 8009dda:	63b9      	str	r1, [r7, #56]	; 0x38
 8009ddc:	415b      	adcs	r3, r3
 8009dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009de0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009de4:	4641      	mov	r1, r8
 8009de6:	1851      	adds	r1, r2, r1
 8009de8:	6339      	str	r1, [r7, #48]	; 0x30
 8009dea:	4649      	mov	r1, r9
 8009dec:	414b      	adcs	r3, r1
 8009dee:	637b      	str	r3, [r7, #52]	; 0x34
 8009df0:	f04f 0200 	mov.w	r2, #0
 8009df4:	f04f 0300 	mov.w	r3, #0
 8009df8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009dfc:	4659      	mov	r1, fp
 8009dfe:	00cb      	lsls	r3, r1, #3
 8009e00:	4651      	mov	r1, sl
 8009e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e06:	4651      	mov	r1, sl
 8009e08:	00ca      	lsls	r2, r1, #3
 8009e0a:	4610      	mov	r0, r2
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	4603      	mov	r3, r0
 8009e10:	4642      	mov	r2, r8
 8009e12:	189b      	adds	r3, r3, r2
 8009e14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009e18:	464b      	mov	r3, r9
 8009e1a:	460a      	mov	r2, r1
 8009e1c:	eb42 0303 	adc.w	r3, r2, r3
 8009e20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009e30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009e34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009e38:	460b      	mov	r3, r1
 8009e3a:	18db      	adds	r3, r3, r3
 8009e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e3e:	4613      	mov	r3, r2
 8009e40:	eb42 0303 	adc.w	r3, r2, r3
 8009e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009e4e:	f7f6 fd1d 	bl	800088c <__aeabi_uldivmod>
 8009e52:	4602      	mov	r2, r0
 8009e54:	460b      	mov	r3, r1
 8009e56:	4b0d      	ldr	r3, [pc, #52]	; (8009e8c <UART_SetConfig+0x2d4>)
 8009e58:	fba3 1302 	umull	r1, r3, r3, r2
 8009e5c:	095b      	lsrs	r3, r3, #5
 8009e5e:	2164      	movs	r1, #100	; 0x64
 8009e60:	fb01 f303 	mul.w	r3, r1, r3
 8009e64:	1ad3      	subs	r3, r2, r3
 8009e66:	00db      	lsls	r3, r3, #3
 8009e68:	3332      	adds	r3, #50	; 0x32
 8009e6a:	4a08      	ldr	r2, [pc, #32]	; (8009e8c <UART_SetConfig+0x2d4>)
 8009e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e70:	095b      	lsrs	r3, r3, #5
 8009e72:	f003 0207 	and.w	r2, r3, #7
 8009e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4422      	add	r2, r4
 8009e7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009e80:	e105      	b.n	800a08e <UART_SetConfig+0x4d6>
 8009e82:	bf00      	nop
 8009e84:	40011000 	.word	0x40011000
 8009e88:	40011400 	.word	0x40011400
 8009e8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e94:	2200      	movs	r2, #0
 8009e96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009e9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009e9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009ea2:	4642      	mov	r2, r8
 8009ea4:	464b      	mov	r3, r9
 8009ea6:	1891      	adds	r1, r2, r2
 8009ea8:	6239      	str	r1, [r7, #32]
 8009eaa:	415b      	adcs	r3, r3
 8009eac:	627b      	str	r3, [r7, #36]	; 0x24
 8009eae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009eb2:	4641      	mov	r1, r8
 8009eb4:	1854      	adds	r4, r2, r1
 8009eb6:	4649      	mov	r1, r9
 8009eb8:	eb43 0501 	adc.w	r5, r3, r1
 8009ebc:	f04f 0200 	mov.w	r2, #0
 8009ec0:	f04f 0300 	mov.w	r3, #0
 8009ec4:	00eb      	lsls	r3, r5, #3
 8009ec6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009eca:	00e2      	lsls	r2, r4, #3
 8009ecc:	4614      	mov	r4, r2
 8009ece:	461d      	mov	r5, r3
 8009ed0:	4643      	mov	r3, r8
 8009ed2:	18e3      	adds	r3, r4, r3
 8009ed4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009ed8:	464b      	mov	r3, r9
 8009eda:	eb45 0303 	adc.w	r3, r5, r3
 8009ede:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009eee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009ef2:	f04f 0200 	mov.w	r2, #0
 8009ef6:	f04f 0300 	mov.w	r3, #0
 8009efa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009efe:	4629      	mov	r1, r5
 8009f00:	008b      	lsls	r3, r1, #2
 8009f02:	4621      	mov	r1, r4
 8009f04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f08:	4621      	mov	r1, r4
 8009f0a:	008a      	lsls	r2, r1, #2
 8009f0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009f10:	f7f6 fcbc 	bl	800088c <__aeabi_uldivmod>
 8009f14:	4602      	mov	r2, r0
 8009f16:	460b      	mov	r3, r1
 8009f18:	4b60      	ldr	r3, [pc, #384]	; (800a09c <UART_SetConfig+0x4e4>)
 8009f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8009f1e:	095b      	lsrs	r3, r3, #5
 8009f20:	011c      	lsls	r4, r3, #4
 8009f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f26:	2200      	movs	r2, #0
 8009f28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009f2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009f30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009f34:	4642      	mov	r2, r8
 8009f36:	464b      	mov	r3, r9
 8009f38:	1891      	adds	r1, r2, r2
 8009f3a:	61b9      	str	r1, [r7, #24]
 8009f3c:	415b      	adcs	r3, r3
 8009f3e:	61fb      	str	r3, [r7, #28]
 8009f40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f44:	4641      	mov	r1, r8
 8009f46:	1851      	adds	r1, r2, r1
 8009f48:	6139      	str	r1, [r7, #16]
 8009f4a:	4649      	mov	r1, r9
 8009f4c:	414b      	adcs	r3, r1
 8009f4e:	617b      	str	r3, [r7, #20]
 8009f50:	f04f 0200 	mov.w	r2, #0
 8009f54:	f04f 0300 	mov.w	r3, #0
 8009f58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009f5c:	4659      	mov	r1, fp
 8009f5e:	00cb      	lsls	r3, r1, #3
 8009f60:	4651      	mov	r1, sl
 8009f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f66:	4651      	mov	r1, sl
 8009f68:	00ca      	lsls	r2, r1, #3
 8009f6a:	4610      	mov	r0, r2
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	4603      	mov	r3, r0
 8009f70:	4642      	mov	r2, r8
 8009f72:	189b      	adds	r3, r3, r2
 8009f74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f78:	464b      	mov	r3, r9
 8009f7a:	460a      	mov	r2, r1
 8009f7c:	eb42 0303 	adc.w	r3, r2, r3
 8009f80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009f8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009f90:	f04f 0200 	mov.w	r2, #0
 8009f94:	f04f 0300 	mov.w	r3, #0
 8009f98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009f9c:	4649      	mov	r1, r9
 8009f9e:	008b      	lsls	r3, r1, #2
 8009fa0:	4641      	mov	r1, r8
 8009fa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fa6:	4641      	mov	r1, r8
 8009fa8:	008a      	lsls	r2, r1, #2
 8009faa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009fae:	f7f6 fc6d 	bl	800088c <__aeabi_uldivmod>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	4b39      	ldr	r3, [pc, #228]	; (800a09c <UART_SetConfig+0x4e4>)
 8009fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8009fbc:	095b      	lsrs	r3, r3, #5
 8009fbe:	2164      	movs	r1, #100	; 0x64
 8009fc0:	fb01 f303 	mul.w	r3, r1, r3
 8009fc4:	1ad3      	subs	r3, r2, r3
 8009fc6:	011b      	lsls	r3, r3, #4
 8009fc8:	3332      	adds	r3, #50	; 0x32
 8009fca:	4a34      	ldr	r2, [pc, #208]	; (800a09c <UART_SetConfig+0x4e4>)
 8009fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8009fd0:	095b      	lsrs	r3, r3, #5
 8009fd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009fd6:	441c      	add	r4, r3
 8009fd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fdc:	2200      	movs	r2, #0
 8009fde:	673b      	str	r3, [r7, #112]	; 0x70
 8009fe0:	677a      	str	r2, [r7, #116]	; 0x74
 8009fe2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009fe6:	4642      	mov	r2, r8
 8009fe8:	464b      	mov	r3, r9
 8009fea:	1891      	adds	r1, r2, r2
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	415b      	adcs	r3, r3
 8009ff0:	60fb      	str	r3, [r7, #12]
 8009ff2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ff6:	4641      	mov	r1, r8
 8009ff8:	1851      	adds	r1, r2, r1
 8009ffa:	6039      	str	r1, [r7, #0]
 8009ffc:	4649      	mov	r1, r9
 8009ffe:	414b      	adcs	r3, r1
 800a000:	607b      	str	r3, [r7, #4]
 800a002:	f04f 0200 	mov.w	r2, #0
 800a006:	f04f 0300 	mov.w	r3, #0
 800a00a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a00e:	4659      	mov	r1, fp
 800a010:	00cb      	lsls	r3, r1, #3
 800a012:	4651      	mov	r1, sl
 800a014:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a018:	4651      	mov	r1, sl
 800a01a:	00ca      	lsls	r2, r1, #3
 800a01c:	4610      	mov	r0, r2
 800a01e:	4619      	mov	r1, r3
 800a020:	4603      	mov	r3, r0
 800a022:	4642      	mov	r2, r8
 800a024:	189b      	adds	r3, r3, r2
 800a026:	66bb      	str	r3, [r7, #104]	; 0x68
 800a028:	464b      	mov	r3, r9
 800a02a:	460a      	mov	r2, r1
 800a02c:	eb42 0303 	adc.w	r3, r2, r3
 800a030:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	663b      	str	r3, [r7, #96]	; 0x60
 800a03c:	667a      	str	r2, [r7, #100]	; 0x64
 800a03e:	f04f 0200 	mov.w	r2, #0
 800a042:	f04f 0300 	mov.w	r3, #0
 800a046:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a04a:	4649      	mov	r1, r9
 800a04c:	008b      	lsls	r3, r1, #2
 800a04e:	4641      	mov	r1, r8
 800a050:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a054:	4641      	mov	r1, r8
 800a056:	008a      	lsls	r2, r1, #2
 800a058:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a05c:	f7f6 fc16 	bl	800088c <__aeabi_uldivmod>
 800a060:	4602      	mov	r2, r0
 800a062:	460b      	mov	r3, r1
 800a064:	4b0d      	ldr	r3, [pc, #52]	; (800a09c <UART_SetConfig+0x4e4>)
 800a066:	fba3 1302 	umull	r1, r3, r3, r2
 800a06a:	095b      	lsrs	r3, r3, #5
 800a06c:	2164      	movs	r1, #100	; 0x64
 800a06e:	fb01 f303 	mul.w	r3, r1, r3
 800a072:	1ad3      	subs	r3, r2, r3
 800a074:	011b      	lsls	r3, r3, #4
 800a076:	3332      	adds	r3, #50	; 0x32
 800a078:	4a08      	ldr	r2, [pc, #32]	; (800a09c <UART_SetConfig+0x4e4>)
 800a07a:	fba2 2303 	umull	r2, r3, r2, r3
 800a07e:	095b      	lsrs	r3, r3, #5
 800a080:	f003 020f 	and.w	r2, r3, #15
 800a084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4422      	add	r2, r4
 800a08c:	609a      	str	r2, [r3, #8]
}
 800a08e:	bf00      	nop
 800a090:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a094:	46bd      	mov	sp, r7
 800a096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a09a:	bf00      	nop
 800a09c:	51eb851f 	.word	0x51eb851f

0800a0a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a0a0:	b084      	sub	sp, #16
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b084      	sub	sp, #16
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
 800a0aa:	f107 001c 	add.w	r0, r7, #28
 800a0ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d122      	bne.n	800a0fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a0cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a0e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d105      	bne.n	800a0f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 f9c0 	bl	800a478 <USB_CoreReset>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	73fb      	strb	r3, [r7, #15]
 800a0fc:	e01a      	b.n	800a134 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 f9b4 	bl	800a478 <USB_CoreReset>
 800a110:	4603      	mov	r3, r0
 800a112:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a116:	2b00      	cmp	r3, #0
 800a118:	d106      	bne.n	800a128 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a11e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	639a      	str	r2, [r3, #56]	; 0x38
 800a126:	e005      	b.n	800a134 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a12c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a136:	2b01      	cmp	r3, #1
 800a138:	d10b      	bne.n	800a152 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	f043 0206 	orr.w	r2, r3, #6
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	f043 0220 	orr.w	r2, r3, #32
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a152:	7bfb      	ldrb	r3, [r7, #15]
}
 800a154:	4618      	mov	r0, r3
 800a156:	3710      	adds	r7, #16
 800a158:	46bd      	mov	sp, r7
 800a15a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a15e:	b004      	add	sp, #16
 800a160:	4770      	bx	lr

0800a162 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a162:	b480      	push	{r7}
 800a164:	b083      	sub	sp, #12
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	f043 0201 	orr.w	r2, r3, #1
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a184:	b480      	push	{r7}
 800a186:	b083      	sub	sp, #12
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	f023 0201 	bic.w	r2, r3, #1
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a198:	2300      	movs	r3, #0
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	370c      	adds	r7, #12
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr

0800a1a6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b084      	sub	sp, #16
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	68db      	ldr	r3, [r3, #12]
 800a1ba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a1c2:	78fb      	ldrb	r3, [r7, #3]
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d115      	bne.n	800a1f4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a1d4:	2001      	movs	r0, #1
 800a1d6:	f7fa fac1 	bl	800475c <HAL_Delay>
      ms++;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	3301      	adds	r3, #1
 800a1de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 f93a 	bl	800a45a <USB_GetMode>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d01e      	beq.n	800a22a <USB_SetCurrentMode+0x84>
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2b31      	cmp	r3, #49	; 0x31
 800a1f0:	d9f0      	bls.n	800a1d4 <USB_SetCurrentMode+0x2e>
 800a1f2:	e01a      	b.n	800a22a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a1f4:	78fb      	ldrb	r3, [r7, #3]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d115      	bne.n	800a226 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a206:	2001      	movs	r0, #1
 800a208:	f7fa faa8 	bl	800475c <HAL_Delay>
      ms++;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	3301      	adds	r3, #1
 800a210:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 f921 	bl	800a45a <USB_GetMode>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d005      	beq.n	800a22a <USB_SetCurrentMode+0x84>
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2b31      	cmp	r3, #49	; 0x31
 800a222:	d9f0      	bls.n	800a206 <USB_SetCurrentMode+0x60>
 800a224:	e001      	b.n	800a22a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	e005      	b.n	800a236 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2b32      	cmp	r3, #50	; 0x32
 800a22e:	d101      	bne.n	800a234 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a230:	2301      	movs	r3, #1
 800a232:	e000      	b.n	800a236 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
	...

0800a240 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a24a:	2300      	movs	r3, #0
 800a24c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	3301      	adds	r3, #1
 800a252:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	4a13      	ldr	r2, [pc, #76]	; (800a2a4 <USB_FlushTxFifo+0x64>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d901      	bls.n	800a260 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a25c:	2303      	movs	r3, #3
 800a25e:	e01b      	b.n	800a298 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	2b00      	cmp	r3, #0
 800a266:	daf2      	bge.n	800a24e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a268:	2300      	movs	r3, #0
 800a26a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	019b      	lsls	r3, r3, #6
 800a270:	f043 0220 	orr.w	r2, r3, #32
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	3301      	adds	r3, #1
 800a27c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	4a08      	ldr	r2, [pc, #32]	; (800a2a4 <USB_FlushTxFifo+0x64>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d901      	bls.n	800a28a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a286:	2303      	movs	r3, #3
 800a288:	e006      	b.n	800a298 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	691b      	ldr	r3, [r3, #16]
 800a28e:	f003 0320 	and.w	r3, r3, #32
 800a292:	2b20      	cmp	r3, #32
 800a294:	d0f0      	beq.n	800a278 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3714      	adds	r7, #20
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr
 800a2a4:	00030d40 	.word	0x00030d40

0800a2a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	4a11      	ldr	r2, [pc, #68]	; (800a304 <USB_FlushRxFifo+0x5c>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d901      	bls.n	800a2c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a2c2:	2303      	movs	r3, #3
 800a2c4:	e018      	b.n	800a2f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	691b      	ldr	r3, [r3, #16]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	daf2      	bge.n	800a2b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2210      	movs	r2, #16
 800a2d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	4a08      	ldr	r2, [pc, #32]	; (800a304 <USB_FlushRxFifo+0x5c>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d901      	bls.n	800a2ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a2e6:	2303      	movs	r3, #3
 800a2e8:	e006      	b.n	800a2f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	f003 0310 	and.w	r3, r3, #16
 800a2f2:	2b10      	cmp	r3, #16
 800a2f4:	d0f0      	beq.n	800a2d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a2f6:	2300      	movs	r3, #0
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3714      	adds	r7, #20
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr
 800a304:	00030d40 	.word	0x00030d40

0800a308 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a308:	b480      	push	{r7}
 800a30a:	b089      	sub	sp, #36	; 0x24
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	60b9      	str	r1, [r7, #8]
 800a312:	4611      	mov	r1, r2
 800a314:	461a      	mov	r2, r3
 800a316:	460b      	mov	r3, r1
 800a318:	71fb      	strb	r3, [r7, #7]
 800a31a:	4613      	mov	r3, r2
 800a31c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a326:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d123      	bne.n	800a376 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a32e:	88bb      	ldrh	r3, [r7, #4]
 800a330:	3303      	adds	r3, #3
 800a332:	089b      	lsrs	r3, r3, #2
 800a334:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a336:	2300      	movs	r3, #0
 800a338:	61bb      	str	r3, [r7, #24]
 800a33a:	e018      	b.n	800a36e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a33c:	79fb      	ldrb	r3, [r7, #7]
 800a33e:	031a      	lsls	r2, r3, #12
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	4413      	add	r3, r2
 800a344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a348:	461a      	mov	r2, r3
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	3301      	adds	r3, #1
 800a354:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a356:	69fb      	ldr	r3, [r7, #28]
 800a358:	3301      	adds	r3, #1
 800a35a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	3301      	adds	r3, #1
 800a360:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	3301      	adds	r3, #1
 800a366:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	3301      	adds	r3, #1
 800a36c:	61bb      	str	r3, [r7, #24]
 800a36e:	69ba      	ldr	r2, [r7, #24]
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	429a      	cmp	r2, r3
 800a374:	d3e2      	bcc.n	800a33c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3724      	adds	r7, #36	; 0x24
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr

0800a384 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a384:	b480      	push	{r7}
 800a386:	b08b      	sub	sp, #44	; 0x2c
 800a388:	af00      	add	r7, sp, #0
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	60b9      	str	r1, [r7, #8]
 800a38e:	4613      	mov	r3, r2
 800a390:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a39a:	88fb      	ldrh	r3, [r7, #6]
 800a39c:	089b      	lsrs	r3, r3, #2
 800a39e:	b29b      	uxth	r3, r3
 800a3a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a3a2:	88fb      	ldrh	r3, [r7, #6]
 800a3a4:	f003 0303 	and.w	r3, r3, #3
 800a3a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	623b      	str	r3, [r7, #32]
 800a3ae:	e014      	b.n	800a3da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ba:	601a      	str	r2, [r3, #0]
    pDest++;
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3be:	3301      	adds	r3, #1
 800a3c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a3d4:	6a3b      	ldr	r3, [r7, #32]
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	623b      	str	r3, [r7, #32]
 800a3da:	6a3a      	ldr	r2, [r7, #32]
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d3e6      	bcc.n	800a3b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a3e2:	8bfb      	ldrh	r3, [r7, #30]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d01e      	beq.n	800a426 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	f107 0310 	add.w	r3, r7, #16
 800a3f8:	6812      	ldr	r2, [r2, #0]
 800a3fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a3fc:	693a      	ldr	r2, [r7, #16]
 800a3fe:	6a3b      	ldr	r3, [r7, #32]
 800a400:	b2db      	uxtb	r3, r3
 800a402:	00db      	lsls	r3, r3, #3
 800a404:	fa22 f303 	lsr.w	r3, r2, r3
 800a408:	b2da      	uxtb	r2, r3
 800a40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40c:	701a      	strb	r2, [r3, #0]
      i++;
 800a40e:	6a3b      	ldr	r3, [r7, #32]
 800a410:	3301      	adds	r3, #1
 800a412:	623b      	str	r3, [r7, #32]
      pDest++;
 800a414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a416:	3301      	adds	r3, #1
 800a418:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a41a:	8bfb      	ldrh	r3, [r7, #30]
 800a41c:	3b01      	subs	r3, #1
 800a41e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a420:	8bfb      	ldrh	r3, [r7, #30]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d1ea      	bne.n	800a3fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a428:	4618      	mov	r0, r3
 800a42a:	372c      	adds	r7, #44	; 0x2c
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a434:	b480      	push	{r7}
 800a436:	b085      	sub	sp, #20
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	695b      	ldr	r3, [r3, #20]
 800a440:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	699b      	ldr	r3, [r3, #24]
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	4013      	ands	r3, r2
 800a44a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a44c:	68fb      	ldr	r3, [r7, #12]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3714      	adds	r7, #20
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr

0800a45a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a45a:	b480      	push	{r7}
 800a45c:	b083      	sub	sp, #12
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	695b      	ldr	r3, [r3, #20]
 800a466:	f003 0301 	and.w	r3, r3, #1
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	370c      	adds	r7, #12
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr
	...

0800a478 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a480:	2300      	movs	r3, #0
 800a482:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	3301      	adds	r3, #1
 800a488:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	4a13      	ldr	r2, [pc, #76]	; (800a4dc <USB_CoreReset+0x64>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d901      	bls.n	800a496 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a492:	2303      	movs	r3, #3
 800a494:	e01b      	b.n	800a4ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	691b      	ldr	r3, [r3, #16]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	daf2      	bge.n	800a484 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	691b      	ldr	r3, [r3, #16]
 800a4a6:	f043 0201 	orr.w	r2, r3, #1
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	4a09      	ldr	r2, [pc, #36]	; (800a4dc <USB_CoreReset+0x64>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d901      	bls.n	800a4c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a4bc:	2303      	movs	r3, #3
 800a4be:	e006      	b.n	800a4ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	691b      	ldr	r3, [r3, #16]
 800a4c4:	f003 0301 	and.w	r3, r3, #1
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d0f0      	beq.n	800a4ae <USB_CoreReset+0x36>

  return HAL_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3714      	adds	r7, #20
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop
 800a4dc:	00030d40 	.word	0x00030d40

0800a4e0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a4e0:	b084      	sub	sp, #16
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b086      	sub	sp, #24
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
 800a4ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a4ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a500:	461a      	mov	r2, r3
 800a502:	2300      	movs	r3, #0
 800a504:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a50a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a516:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a522:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a52e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a532:	2b00      	cmp	r3, #0
 800a534:	d018      	beq.n	800a568 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d10a      	bne.n	800a552 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a54a:	f043 0304 	orr.w	r3, r3, #4
 800a54e:	6013      	str	r3, [r2, #0]
 800a550:	e014      	b.n	800a57c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a560:	f023 0304 	bic.w	r3, r3, #4
 800a564:	6013      	str	r3, [r2, #0]
 800a566:	e009      	b.n	800a57c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	68fa      	ldr	r2, [r7, #12]
 800a572:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a576:	f023 0304 	bic.w	r3, r3, #4
 800a57a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a57c:	2110      	movs	r1, #16
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f7ff fe5e 	bl	800a240 <USB_FlushTxFifo>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d001      	beq.n	800a58e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800a58a:	2301      	movs	r3, #1
 800a58c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f7ff fe8a 	bl	800a2a8 <USB_FlushRxFifo>
 800a594:	4603      	mov	r3, r0
 800a596:	2b00      	cmp	r3, #0
 800a598:	d001      	beq.n	800a59e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a59e:	2300      	movs	r3, #0
 800a5a0:	613b      	str	r3, [r7, #16]
 800a5a2:	e015      	b.n	800a5d0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	015a      	lsls	r2, r3, #5
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5b6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	015a      	lsls	r2, r3, #5
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	4413      	add	r3, r2
 800a5c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	613b      	str	r3, [r7, #16]
 800a5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d2:	693a      	ldr	r2, [r7, #16]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d3e5      	bcc.n	800a5a4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5e4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d00b      	beq.n	800a60a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a5f8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	4a13      	ldr	r2, [pc, #76]	; (800a64c <USB_HostInit+0x16c>)
 800a5fe:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	4a13      	ldr	r2, [pc, #76]	; (800a650 <USB_HostInit+0x170>)
 800a604:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a608:	e009      	b.n	800a61e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2280      	movs	r2, #128	; 0x80
 800a60e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4a10      	ldr	r2, [pc, #64]	; (800a654 <USB_HostInit+0x174>)
 800a614:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	4a0f      	ldr	r2, [pc, #60]	; (800a658 <USB_HostInit+0x178>)
 800a61a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a620:	2b00      	cmp	r3, #0
 800a622:	d105      	bne.n	800a630 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	699b      	ldr	r3, [r3, #24]
 800a628:	f043 0210 	orr.w	r2, r3, #16
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	699a      	ldr	r2, [r3, #24]
 800a634:	4b09      	ldr	r3, [pc, #36]	; (800a65c <USB_HostInit+0x17c>)
 800a636:	4313      	orrs	r3, r2
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800a63c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3718      	adds	r7, #24
 800a642:	46bd      	mov	sp, r7
 800a644:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a648:	b004      	add	sp, #16
 800a64a:	4770      	bx	lr
 800a64c:	01000200 	.word	0x01000200
 800a650:	00e00300 	.word	0x00e00300
 800a654:	00600080 	.word	0x00600080
 800a658:	004000e0 	.word	0x004000e0
 800a65c:	a3200008 	.word	0xa3200008

0800a660 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	460b      	mov	r3, r1
 800a66a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	68fa      	ldr	r2, [r7, #12]
 800a67a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a67e:	f023 0303 	bic.w	r3, r3, #3
 800a682:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	78fb      	ldrb	r3, [r7, #3]
 800a68e:	f003 0303 	and.w	r3, r3, #3
 800a692:	68f9      	ldr	r1, [r7, #12]
 800a694:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a698:	4313      	orrs	r3, r2
 800a69a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a69c:	78fb      	ldrb	r3, [r7, #3]
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d107      	bne.n	800a6b2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a6ae:	6053      	str	r3, [r2, #4]
 800a6b0:	e009      	b.n	800a6c6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a6b2:	78fb      	ldrb	r3, [r7, #3]
 800a6b4:	2b02      	cmp	r3, #2
 800a6b6:	d106      	bne.n	800a6c6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6be:	461a      	mov	r2, r3
 800a6c0:	f241 7370 	movw	r3, #6000	; 0x1770
 800a6c4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3714      	adds	r7, #20
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr

0800a6d4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a6f4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a6fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a702:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a704:	2064      	movs	r0, #100	; 0x64
 800a706:	f7fa f829 	bl	800475c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	68fa      	ldr	r2, [r7, #12]
 800a70e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a712:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a716:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a718:	200a      	movs	r0, #10
 800a71a:	f7fa f81f 	bl	800475c <HAL_Delay>

  return HAL_OK;
 800a71e:	2300      	movs	r3, #0
}
 800a720:	4618      	mov	r0, r3
 800a722:	3710      	adds	r7, #16
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a728:	b480      	push	{r7}
 800a72a:	b085      	sub	sp, #20
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	460b      	mov	r3, r1
 800a732:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a738:	2300      	movs	r3, #0
 800a73a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a74c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a754:	2b00      	cmp	r3, #0
 800a756:	d109      	bne.n	800a76c <USB_DriveVbus+0x44>
 800a758:	78fb      	ldrb	r3, [r7, #3]
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d106      	bne.n	800a76c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	68fa      	ldr	r2, [r7, #12]
 800a762:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a766:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a76a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a776:	d109      	bne.n	800a78c <USB_DriveVbus+0x64>
 800a778:	78fb      	ldrb	r3, [r7, #3]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d106      	bne.n	800a78c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	68fa      	ldr	r2, [r7, #12]
 800a782:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a78a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a78c:	2300      	movs	r3, #0
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3714      	adds	r7, #20
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr

0800a79a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a79a:	b480      	push	{r7}
 800a79c:	b085      	sub	sp, #20
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	0c5b      	lsrs	r3, r3, #17
 800a7b8:	f003 0303 	and.w	r3, r3, #3
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3714      	adds	r7, #20
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	b29b      	uxth	r3, r3
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3714      	adds	r7, #20
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr
	...

0800a7ec <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b088      	sub	sp, #32
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	4608      	mov	r0, r1
 800a7f6:	4611      	mov	r1, r2
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	70fb      	strb	r3, [r7, #3]
 800a7fe:	460b      	mov	r3, r1
 800a800:	70bb      	strb	r3, [r7, #2]
 800a802:	4613      	mov	r3, r2
 800a804:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a806:	2300      	movs	r3, #0
 800a808:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800a80e:	78fb      	ldrb	r3, [r7, #3]
 800a810:	015a      	lsls	r2, r3, #5
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	4413      	add	r3, r2
 800a816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a81a:	461a      	mov	r2, r3
 800a81c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a820:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a822:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a826:	2b03      	cmp	r3, #3
 800a828:	d87e      	bhi.n	800a928 <USB_HC_Init+0x13c>
 800a82a:	a201      	add	r2, pc, #4	; (adr r2, 800a830 <USB_HC_Init+0x44>)
 800a82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a830:	0800a841 	.word	0x0800a841
 800a834:	0800a8eb 	.word	0x0800a8eb
 800a838:	0800a841 	.word	0x0800a841
 800a83c:	0800a8ad 	.word	0x0800a8ad
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a840:	78fb      	ldrb	r3, [r7, #3]
 800a842:	015a      	lsls	r2, r3, #5
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	4413      	add	r3, r2
 800a848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a84c:	461a      	mov	r2, r3
 800a84e:	f240 439d 	movw	r3, #1181	; 0x49d
 800a852:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a854:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	da10      	bge.n	800a87e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a85c:	78fb      	ldrb	r3, [r7, #3]
 800a85e:	015a      	lsls	r2, r3, #5
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	4413      	add	r3, r2
 800a864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	78fa      	ldrb	r2, [r7, #3]
 800a86c:	0151      	lsls	r1, r2, #5
 800a86e:	693a      	ldr	r2, [r7, #16]
 800a870:	440a      	add	r2, r1
 800a872:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a87a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800a87c:	e057      	b.n	800a92e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a886:	2b00      	cmp	r3, #0
 800a888:	d051      	beq.n	800a92e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a88a:	78fb      	ldrb	r3, [r7, #3]
 800a88c:	015a      	lsls	r2, r3, #5
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	4413      	add	r3, r2
 800a892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a896:	68db      	ldr	r3, [r3, #12]
 800a898:	78fa      	ldrb	r2, [r7, #3]
 800a89a:	0151      	lsls	r1, r2, #5
 800a89c:	693a      	ldr	r2, [r7, #16]
 800a89e:	440a      	add	r2, r1
 800a8a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a8a8:	60d3      	str	r3, [r2, #12]
      break;
 800a8aa:	e040      	b.n	800a92e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a8ac:	78fb      	ldrb	r3, [r7, #3]
 800a8ae:	015a      	lsls	r2, r3, #5
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	4413      	add	r3, r2
 800a8b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	f240 639d 	movw	r3, #1693	; 0x69d
 800a8be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a8c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	da34      	bge.n	800a932 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a8c8:	78fb      	ldrb	r3, [r7, #3]
 800a8ca:	015a      	lsls	r2, r3, #5
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	4413      	add	r3, r2
 800a8d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8d4:	68db      	ldr	r3, [r3, #12]
 800a8d6:	78fa      	ldrb	r2, [r7, #3]
 800a8d8:	0151      	lsls	r1, r2, #5
 800a8da:	693a      	ldr	r2, [r7, #16]
 800a8dc:	440a      	add	r2, r1
 800a8de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8e6:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a8e8:	e023      	b.n	800a932 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a8ea:	78fb      	ldrb	r3, [r7, #3]
 800a8ec:	015a      	lsls	r2, r3, #5
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	f240 2325 	movw	r3, #549	; 0x225
 800a8fc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a8fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a902:	2b00      	cmp	r3, #0
 800a904:	da17      	bge.n	800a936 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a906:	78fb      	ldrb	r3, [r7, #3]
 800a908:	015a      	lsls	r2, r3, #5
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	4413      	add	r3, r2
 800a90e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a912:	68db      	ldr	r3, [r3, #12]
 800a914:	78fa      	ldrb	r2, [r7, #3]
 800a916:	0151      	lsls	r1, r2, #5
 800a918:	693a      	ldr	r2, [r7, #16]
 800a91a:	440a      	add	r2, r1
 800a91c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a920:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a924:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a926:	e006      	b.n	800a936 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a928:	2301      	movs	r3, #1
 800a92a:	77fb      	strb	r3, [r7, #31]
      break;
 800a92c:	e004      	b.n	800a938 <USB_HC_Init+0x14c>
      break;
 800a92e:	bf00      	nop
 800a930:	e002      	b.n	800a938 <USB_HC_Init+0x14c>
      break;
 800a932:	bf00      	nop
 800a934:	e000      	b.n	800a938 <USB_HC_Init+0x14c>
      break;
 800a936:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a938:	78fb      	ldrb	r3, [r7, #3]
 800a93a:	015a      	lsls	r2, r3, #5
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	4413      	add	r3, r2
 800a940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a944:	68db      	ldr	r3, [r3, #12]
 800a946:	78fa      	ldrb	r2, [r7, #3]
 800a948:	0151      	lsls	r1, r2, #5
 800a94a:	693a      	ldr	r2, [r7, #16]
 800a94c:	440a      	add	r2, r1
 800a94e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a952:	f043 0302 	orr.w	r3, r3, #2
 800a956:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a95e:	699a      	ldr	r2, [r3, #24]
 800a960:	78fb      	ldrb	r3, [r7, #3]
 800a962:	f003 030f 	and.w	r3, r3, #15
 800a966:	2101      	movs	r1, #1
 800a968:	fa01 f303 	lsl.w	r3, r1, r3
 800a96c:	6939      	ldr	r1, [r7, #16]
 800a96e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a972:	4313      	orrs	r3, r2
 800a974:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	699b      	ldr	r3, [r3, #24]
 800a97a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a982:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a986:	2b00      	cmp	r3, #0
 800a988:	da03      	bge.n	800a992 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a98a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a98e:	61bb      	str	r3, [r7, #24]
 800a990:	e001      	b.n	800a996 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800a992:	2300      	movs	r3, #0
 800a994:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f7ff feff 	bl	800a79a <USB_GetHostSpeed>
 800a99c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a99e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a9a2:	2b02      	cmp	r3, #2
 800a9a4:	d106      	bne.n	800a9b4 <USB_HC_Init+0x1c8>
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2b02      	cmp	r3, #2
 800a9aa:	d003      	beq.n	800a9b4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a9ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a9b0:	617b      	str	r3, [r7, #20]
 800a9b2:	e001      	b.n	800a9b8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a9b8:	787b      	ldrb	r3, [r7, #1]
 800a9ba:	059b      	lsls	r3, r3, #22
 800a9bc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a9c0:	78bb      	ldrb	r3, [r7, #2]
 800a9c2:	02db      	lsls	r3, r3, #11
 800a9c4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a9c8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a9ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a9ce:	049b      	lsls	r3, r3, #18
 800a9d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a9d4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a9d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a9d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a9dc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a9de:	69bb      	ldr	r3, [r7, #24]
 800a9e0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a9e2:	78fb      	ldrb	r3, [r7, #3]
 800a9e4:	0159      	lsls	r1, r3, #5
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	440b      	add	r3, r1
 800a9ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9ee:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a9f4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a9f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a9fa:	2b03      	cmp	r3, #3
 800a9fc:	d003      	beq.n	800aa06 <USB_HC_Init+0x21a>
 800a9fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d10f      	bne.n	800aa26 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800aa06:	78fb      	ldrb	r3, [r7, #3]
 800aa08:	015a      	lsls	r2, r3, #5
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	78fa      	ldrb	r2, [r7, #3]
 800aa16:	0151      	lsls	r1, r2, #5
 800aa18:	693a      	ldr	r2, [r7, #16]
 800aa1a:	440a      	add	r2, r1
 800aa1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aa24:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800aa26:	7ffb      	ldrb	r3, [r7, #31]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3720      	adds	r7, #32
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b08c      	sub	sp, #48	; 0x30
 800aa34:	af02      	add	r7, sp, #8
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	785b      	ldrb	r3, [r3, #1]
 800aa46:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800aa48:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa4c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d02d      	beq.n	800aab6 <USB_HC_StartXfer+0x86>
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	791b      	ldrb	r3, [r3, #4]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d129      	bne.n	800aab6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800aa62:	79fb      	ldrb	r3, [r7, #7]
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d117      	bne.n	800aa98 <USB_HC_StartXfer+0x68>
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	79db      	ldrb	r3, [r3, #7]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d003      	beq.n	800aa78 <USB_HC_StartXfer+0x48>
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	79db      	ldrb	r3, [r3, #7]
 800aa74:	2b02      	cmp	r3, #2
 800aa76:	d10f      	bne.n	800aa98 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800aa78:	69fb      	ldr	r3, [r7, #28]
 800aa7a:	015a      	lsls	r2, r3, #5
 800aa7c:	6a3b      	ldr	r3, [r7, #32]
 800aa7e:	4413      	add	r3, r2
 800aa80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	69fa      	ldr	r2, [r7, #28]
 800aa88:	0151      	lsls	r1, r2, #5
 800aa8a:	6a3a      	ldr	r2, [r7, #32]
 800aa8c:	440a      	add	r2, r1
 800aa8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa96:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800aa98:	79fb      	ldrb	r3, [r7, #7]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d10b      	bne.n	800aab6 <USB_HC_StartXfer+0x86>
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	795b      	ldrb	r3, [r3, #5]
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d107      	bne.n	800aab6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	785b      	ldrb	r3, [r3, #1]
 800aaaa:	4619      	mov	r1, r3
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f000 fa0f 	bl	800aed0 <USB_DoPing>
      return HAL_OK;
 800aab2:	2300      	movs	r3, #0
 800aab4:	e0f8      	b.n	800aca8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	695b      	ldr	r3, [r3, #20]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d018      	beq.n	800aaf0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	695b      	ldr	r3, [r3, #20]
 800aac2:	68ba      	ldr	r2, [r7, #8]
 800aac4:	8912      	ldrh	r2, [r2, #8]
 800aac6:	4413      	add	r3, r2
 800aac8:	3b01      	subs	r3, #1
 800aaca:	68ba      	ldr	r2, [r7, #8]
 800aacc:	8912      	ldrh	r2, [r2, #8]
 800aace:	fbb3 f3f2 	udiv	r3, r3, r2
 800aad2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800aad4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800aad6:	8b7b      	ldrh	r3, [r7, #26]
 800aad8:	429a      	cmp	r2, r3
 800aada:	d90b      	bls.n	800aaf4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800aadc:	8b7b      	ldrh	r3, [r7, #26]
 800aade:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800aae0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aae2:	68ba      	ldr	r2, [r7, #8]
 800aae4:	8912      	ldrh	r2, [r2, #8]
 800aae6:	fb03 f202 	mul.w	r2, r3, r2
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	611a      	str	r2, [r3, #16]
 800aaee:	e001      	b.n	800aaf4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	78db      	ldrb	r3, [r3, #3]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d007      	beq.n	800ab0c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800aafc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aafe:	68ba      	ldr	r2, [r7, #8]
 800ab00:	8912      	ldrh	r2, [r2, #8]
 800ab02:	fb03 f202 	mul.w	r2, r3, r2
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	611a      	str	r2, [r3, #16]
 800ab0a:	e003      	b.n	800ab14 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	695a      	ldr	r2, [r3, #20]
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	691b      	ldr	r3, [r3, #16]
 800ab18:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ab1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ab1e:	04d9      	lsls	r1, r3, #19
 800ab20:	4b63      	ldr	r3, [pc, #396]	; (800acb0 <USB_HC_StartXfer+0x280>)
 800ab22:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ab24:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	7a9b      	ldrb	r3, [r3, #10]
 800ab2a:	075b      	lsls	r3, r3, #29
 800ab2c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ab30:	69f9      	ldr	r1, [r7, #28]
 800ab32:	0148      	lsls	r0, r1, #5
 800ab34:	6a39      	ldr	r1, [r7, #32]
 800ab36:	4401      	add	r1, r0
 800ab38:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ab3c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ab3e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800ab40:	79fb      	ldrb	r3, [r7, #7]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d009      	beq.n	800ab5a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	68d9      	ldr	r1, [r3, #12]
 800ab4a:	69fb      	ldr	r3, [r7, #28]
 800ab4c:	015a      	lsls	r2, r3, #5
 800ab4e:	6a3b      	ldr	r3, [r7, #32]
 800ab50:	4413      	add	r3, r2
 800ab52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab56:	460a      	mov	r2, r1
 800ab58:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800ab5a:	6a3b      	ldr	r3, [r7, #32]
 800ab5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab60:	689b      	ldr	r3, [r3, #8]
 800ab62:	f003 0301 	and.w	r3, r3, #1
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	bf0c      	ite	eq
 800ab6a:	2301      	moveq	r3, #1
 800ab6c:	2300      	movne	r3, #0
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800ab72:	69fb      	ldr	r3, [r7, #28]
 800ab74:	015a      	lsls	r2, r3, #5
 800ab76:	6a3b      	ldr	r3, [r7, #32]
 800ab78:	4413      	add	r3, r2
 800ab7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	69fa      	ldr	r2, [r7, #28]
 800ab82:	0151      	lsls	r1, r2, #5
 800ab84:	6a3a      	ldr	r2, [r7, #32]
 800ab86:	440a      	add	r2, r1
 800ab88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ab90:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800ab92:	69fb      	ldr	r3, [r7, #28]
 800ab94:	015a      	lsls	r2, r3, #5
 800ab96:	6a3b      	ldr	r3, [r7, #32]
 800ab98:	4413      	add	r3, r2
 800ab9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	7e7b      	ldrb	r3, [r7, #25]
 800aba2:	075b      	lsls	r3, r3, #29
 800aba4:	69f9      	ldr	r1, [r7, #28]
 800aba6:	0148      	lsls	r0, r1, #5
 800aba8:	6a39      	ldr	r1, [r7, #32]
 800abaa:	4401      	add	r1, r0
 800abac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800abb0:	4313      	orrs	r3, r2
 800abb2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	015a      	lsls	r2, r3, #5
 800abb8:	6a3b      	ldr	r3, [r7, #32]
 800abba:	4413      	add	r3, r2
 800abbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800abca:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	78db      	ldrb	r3, [r3, #3]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d004      	beq.n	800abde <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abda:	613b      	str	r3, [r7, #16]
 800abdc:	e003      	b.n	800abe6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800abe4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800abec:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	015a      	lsls	r2, r3, #5
 800abf2:	6a3b      	ldr	r3, [r7, #32]
 800abf4:	4413      	add	r3, r2
 800abf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abfa:	461a      	mov	r2, r3
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800ac00:	79fb      	ldrb	r3, [r7, #7]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d001      	beq.n	800ac0a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800ac06:	2300      	movs	r3, #0
 800ac08:	e04e      	b.n	800aca8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	78db      	ldrb	r3, [r3, #3]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d149      	bne.n	800aca6 <USB_HC_StartXfer+0x276>
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	695b      	ldr	r3, [r3, #20]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d045      	beq.n	800aca6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	79db      	ldrb	r3, [r3, #7]
 800ac1e:	2b03      	cmp	r3, #3
 800ac20:	d830      	bhi.n	800ac84 <USB_HC_StartXfer+0x254>
 800ac22:	a201      	add	r2, pc, #4	; (adr r2, 800ac28 <USB_HC_StartXfer+0x1f8>)
 800ac24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac28:	0800ac39 	.word	0x0800ac39
 800ac2c:	0800ac5d 	.word	0x0800ac5d
 800ac30:	0800ac39 	.word	0x0800ac39
 800ac34:	0800ac5d 	.word	0x0800ac5d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	695b      	ldr	r3, [r3, #20]
 800ac3c:	3303      	adds	r3, #3
 800ac3e:	089b      	lsrs	r3, r3, #2
 800ac40:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800ac42:	8afa      	ldrh	r2, [r7, #22]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d91c      	bls.n	800ac88 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	699b      	ldr	r3, [r3, #24]
 800ac52:	f043 0220 	orr.w	r2, r3, #32
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	619a      	str	r2, [r3, #24]
        }
        break;
 800ac5a:	e015      	b.n	800ac88 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	695b      	ldr	r3, [r3, #20]
 800ac60:	3303      	adds	r3, #3
 800ac62:	089b      	lsrs	r3, r3, #2
 800ac64:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ac66:	8afa      	ldrh	r2, [r7, #22]
 800ac68:	6a3b      	ldr	r3, [r7, #32]
 800ac6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac6e:	691b      	ldr	r3, [r3, #16]
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d90a      	bls.n	800ac8c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	699b      	ldr	r3, [r3, #24]
 800ac7a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	619a      	str	r2, [r3, #24]
        }
        break;
 800ac82:	e003      	b.n	800ac8c <USB_HC_StartXfer+0x25c>

      default:
        break;
 800ac84:	bf00      	nop
 800ac86:	e002      	b.n	800ac8e <USB_HC_StartXfer+0x25e>
        break;
 800ac88:	bf00      	nop
 800ac8a:	e000      	b.n	800ac8e <USB_HC_StartXfer+0x25e>
        break;
 800ac8c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	68d9      	ldr	r1, [r3, #12]
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	785a      	ldrb	r2, [r3, #1]
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	695b      	ldr	r3, [r3, #20]
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	2000      	movs	r0, #0
 800ac9e:	9000      	str	r0, [sp, #0]
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f7ff fb31 	bl	800a308 <USB_WritePacket>
  }

  return HAL_OK;
 800aca6:	2300      	movs	r3, #0
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3728      	adds	r7, #40	; 0x28
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}
 800acb0:	1ff80000 	.word	0x1ff80000

0800acb4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b085      	sub	sp, #20
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800acc6:	695b      	ldr	r3, [r3, #20]
 800acc8:	b29b      	uxth	r3, r3
}
 800acca:	4618      	mov	r0, r3
 800accc:	3714      	adds	r7, #20
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr

0800acd6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800acd6:	b480      	push	{r7}
 800acd8:	b089      	sub	sp, #36	; 0x24
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
 800acde:	460b      	mov	r3, r1
 800ace0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800ace6:	78fb      	ldrb	r3, [r7, #3]
 800ace8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800acea:	2300      	movs	r3, #0
 800acec:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	015a      	lsls	r2, r3, #5
 800acf2:	69fb      	ldr	r3, [r7, #28]
 800acf4:	4413      	add	r3, r2
 800acf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	0c9b      	lsrs	r3, r3, #18
 800acfe:	f003 0303 	and.w	r3, r3, #3
 800ad02:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	015a      	lsls	r2, r3, #5
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	4413      	add	r3, r2
 800ad0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	0fdb      	lsrs	r3, r3, #31
 800ad14:	f003 0301 	and.w	r3, r3, #1
 800ad18:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	f003 0320 	and.w	r3, r3, #32
 800ad22:	2b20      	cmp	r3, #32
 800ad24:	d104      	bne.n	800ad30 <USB_HC_Halt+0x5a>
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d101      	bne.n	800ad30 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	e0c8      	b.n	800aec2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d002      	beq.n	800ad3c <USB_HC_Halt+0x66>
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	2b02      	cmp	r3, #2
 800ad3a:	d163      	bne.n	800ae04 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ad3c:	69bb      	ldr	r3, [r7, #24]
 800ad3e:	015a      	lsls	r2, r3, #5
 800ad40:	69fb      	ldr	r3, [r7, #28]
 800ad42:	4413      	add	r3, r2
 800ad44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	69ba      	ldr	r2, [r7, #24]
 800ad4c:	0151      	lsls	r1, r2, #5
 800ad4e:	69fa      	ldr	r2, [r7, #28]
 800ad50:	440a      	add	r2, r1
 800ad52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad5a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	689b      	ldr	r3, [r3, #8]
 800ad60:	f003 0320 	and.w	r3, r3, #32
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	f040 80ab 	bne.w	800aec0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d133      	bne.n	800adde <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ad76:	69bb      	ldr	r3, [r7, #24]
 800ad78:	015a      	lsls	r2, r3, #5
 800ad7a:	69fb      	ldr	r3, [r7, #28]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	69ba      	ldr	r2, [r7, #24]
 800ad86:	0151      	lsls	r1, r2, #5
 800ad88:	69fa      	ldr	r2, [r7, #28]
 800ad8a:	440a      	add	r2, r1
 800ad8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad94:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	015a      	lsls	r2, r3, #5
 800ad9a:	69fb      	ldr	r3, [r7, #28]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	69ba      	ldr	r2, [r7, #24]
 800ada6:	0151      	lsls	r1, r2, #5
 800ada8:	69fa      	ldr	r2, [r7, #28]
 800adaa:	440a      	add	r2, r1
 800adac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800adb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800adb4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	3301      	adds	r3, #1
 800adba:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800adc2:	d81d      	bhi.n	800ae00 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	015a      	lsls	r2, r3, #5
 800adc8:	69fb      	ldr	r3, [r7, #28]
 800adca:	4413      	add	r3, r2
 800adcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800add6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800adda:	d0ec      	beq.n	800adb6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800addc:	e070      	b.n	800aec0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	015a      	lsls	r2, r3, #5
 800ade2:	69fb      	ldr	r3, [r7, #28]
 800ade4:	4413      	add	r3, r2
 800ade6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	69ba      	ldr	r2, [r7, #24]
 800adee:	0151      	lsls	r1, r2, #5
 800adf0:	69fa      	ldr	r2, [r7, #28]
 800adf2:	440a      	add	r2, r1
 800adf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800adf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800adfc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800adfe:	e05f      	b.n	800aec0 <USB_HC_Halt+0x1ea>
            break;
 800ae00:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ae02:	e05d      	b.n	800aec0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ae04:	69bb      	ldr	r3, [r7, #24]
 800ae06:	015a      	lsls	r2, r3, #5
 800ae08:	69fb      	ldr	r3, [r7, #28]
 800ae0a:	4413      	add	r3, r2
 800ae0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	69ba      	ldr	r2, [r7, #24]
 800ae14:	0151      	lsls	r1, r2, #5
 800ae16:	69fa      	ldr	r2, [r7, #28]
 800ae18:	440a      	add	r2, r1
 800ae1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae22:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ae24:	69fb      	ldr	r3, [r7, #28]
 800ae26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d133      	bne.n	800ae9c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ae34:	69bb      	ldr	r3, [r7, #24]
 800ae36:	015a      	lsls	r2, r3, #5
 800ae38:	69fb      	ldr	r3, [r7, #28]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	69ba      	ldr	r2, [r7, #24]
 800ae44:	0151      	lsls	r1, r2, #5
 800ae46:	69fa      	ldr	r2, [r7, #28]
 800ae48:	440a      	add	r2, r1
 800ae4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae52:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	015a      	lsls	r2, r3, #5
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	4413      	add	r3, r2
 800ae5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	69ba      	ldr	r2, [r7, #24]
 800ae64:	0151      	lsls	r1, r2, #5
 800ae66:	69fa      	ldr	r2, [r7, #28]
 800ae68:	440a      	add	r2, r1
 800ae6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae72:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	3301      	adds	r3, #1
 800ae78:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae80:	d81d      	bhi.n	800aebe <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	015a      	lsls	r2, r3, #5
 800ae86:	69fb      	ldr	r3, [r7, #28]
 800ae88:	4413      	add	r3, r2
 800ae8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae98:	d0ec      	beq.n	800ae74 <USB_HC_Halt+0x19e>
 800ae9a:	e011      	b.n	800aec0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ae9c:	69bb      	ldr	r3, [r7, #24]
 800ae9e:	015a      	lsls	r2, r3, #5
 800aea0:	69fb      	ldr	r3, [r7, #28]
 800aea2:	4413      	add	r3, r2
 800aea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	69ba      	ldr	r2, [r7, #24]
 800aeac:	0151      	lsls	r1, r2, #5
 800aeae:	69fa      	ldr	r2, [r7, #28]
 800aeb0:	440a      	add	r2, r1
 800aeb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aeb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aeba:	6013      	str	r3, [r2, #0]
 800aebc:	e000      	b.n	800aec0 <USB_HC_Halt+0x1ea>
          break;
 800aebe:	bf00      	nop
    }
  }

  return HAL_OK;
 800aec0:	2300      	movs	r3, #0
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3724      	adds	r7, #36	; 0x24
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr
	...

0800aed0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b087      	sub	sp, #28
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	460b      	mov	r3, r1
 800aeda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800aee0:	78fb      	ldrb	r3, [r7, #3]
 800aee2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800aee4:	2301      	movs	r3, #1
 800aee6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	04da      	lsls	r2, r3, #19
 800aeec:	4b15      	ldr	r3, [pc, #84]	; (800af44 <USB_DoPing+0x74>)
 800aeee:	4013      	ands	r3, r2
 800aef0:	693a      	ldr	r2, [r7, #16]
 800aef2:	0151      	lsls	r1, r2, #5
 800aef4:	697a      	ldr	r2, [r7, #20]
 800aef6:	440a      	add	r2, r1
 800aef8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aefc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af00:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	015a      	lsls	r2, r3, #5
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	4413      	add	r3, r2
 800af0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800af18:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af20:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	015a      	lsls	r2, r3, #5
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	4413      	add	r3, r2
 800af2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af2e:	461a      	mov	r2, r3
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	371c      	adds	r7, #28
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr
 800af42:	bf00      	nop
 800af44:	1ff80000 	.word	0x1ff80000

0800af48 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b088      	sub	sp, #32
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800af50:	2300      	movs	r3, #0
 800af52:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800af58:	2300      	movs	r3, #0
 800af5a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f7ff f911 	bl	800a184 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800af62:	2110      	movs	r1, #16
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f7ff f96b 	bl	800a240 <USB_FlushTxFifo>
 800af6a:	4603      	mov	r3, r0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d001      	beq.n	800af74 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800af70:	2301      	movs	r3, #1
 800af72:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f7ff f997 	bl	800a2a8 <USB_FlushRxFifo>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d001      	beq.n	800af84 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800af80:	2301      	movs	r3, #1
 800af82:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800af84:	2300      	movs	r3, #0
 800af86:	61bb      	str	r3, [r7, #24]
 800af88:	e01f      	b.n	800afca <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800af8a:	69bb      	ldr	r3, [r7, #24]
 800af8c:	015a      	lsls	r2, r3, #5
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	4413      	add	r3, r2
 800af92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800afa0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800afa8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800afb0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800afb2:	69bb      	ldr	r3, [r7, #24]
 800afb4:	015a      	lsls	r2, r3, #5
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	4413      	add	r3, r2
 800afba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afbe:	461a      	mov	r2, r3
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800afc4:	69bb      	ldr	r3, [r7, #24]
 800afc6:	3301      	adds	r3, #1
 800afc8:	61bb      	str	r3, [r7, #24]
 800afca:	69bb      	ldr	r3, [r7, #24]
 800afcc:	2b0f      	cmp	r3, #15
 800afce:	d9dc      	bls.n	800af8a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800afd0:	2300      	movs	r3, #0
 800afd2:	61bb      	str	r3, [r7, #24]
 800afd4:	e034      	b.n	800b040 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800afd6:	69bb      	ldr	r3, [r7, #24]
 800afd8:	015a      	lsls	r2, r3, #5
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	4413      	add	r3, r2
 800afde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800afec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aff4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800affc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800affe:	69bb      	ldr	r3, [r7, #24]
 800b000:	015a      	lsls	r2, r3, #5
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	4413      	add	r3, r2
 800b006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b00a:	461a      	mov	r2, r3
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	3301      	adds	r3, #1
 800b014:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b01c:	d80c      	bhi.n	800b038 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b01e:	69bb      	ldr	r3, [r7, #24]
 800b020:	015a      	lsls	r2, r3, #5
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	4413      	add	r3, r2
 800b026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b030:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b034:	d0ec      	beq.n	800b010 <USB_StopHost+0xc8>
 800b036:	e000      	b.n	800b03a <USB_StopHost+0xf2>
        break;
 800b038:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b03a:	69bb      	ldr	r3, [r7, #24]
 800b03c:	3301      	adds	r3, #1
 800b03e:	61bb      	str	r3, [r7, #24]
 800b040:	69bb      	ldr	r3, [r7, #24]
 800b042:	2b0f      	cmp	r3, #15
 800b044:	d9c7      	bls.n	800afd6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b04c:	461a      	mov	r2, r3
 800b04e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b052:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b05a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f7ff f880 	bl	800a162 <USB_EnableGlobalInt>

  return ret;
 800b062:	7ffb      	ldrb	r3, [r7, #31]
}
 800b064:	4618      	mov	r0, r3
 800b066:	3720      	adds	r7, #32
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b070:	4904      	ldr	r1, [pc, #16]	; (800b084 <MX_FATFS_Init+0x18>)
 800b072:	4805      	ldr	r0, [pc, #20]	; (800b088 <MX_FATFS_Init+0x1c>)
 800b074:	f005 fd0c 	bl	8010a90 <FATFS_LinkDriver>
 800b078:	4603      	mov	r3, r0
 800b07a:	461a      	mov	r2, r3
 800b07c:	4b03      	ldr	r3, [pc, #12]	; (800b08c <MX_FATFS_Init+0x20>)
 800b07e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b080:	bf00      	nop
 800b082:	bd80      	pop	{r7, pc}
 800b084:	20002cd8 	.word	0x20002cd8
 800b088:	20000030 	.word	0x20000030
 800b08c:	20002cd4 	.word	0x20002cd4

0800b090 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b090:	b480      	push	{r7}
 800b092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b094:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b096:	4618      	mov	r0, r3
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
	Stat = (SD_SPI_Init()) ? STA_NOINIT : RES_OK;
 800b0aa:	f7f8 fd57 	bl	8003b5c <SD_SPI_Init>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	bf14      	ite	ne
 800b0b4:	2301      	movne	r3, #1
 800b0b6:	2300      	moveq	r3, #0
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	4b04      	ldr	r3, [pc, #16]	; (800b0d0 <USER_initialize+0x30>)
 800b0be:	701a      	strb	r2, [r3, #0]
//	 HAL_UART_Transmit(&huart3,(uint8_t*)"USER_initialize\n\r",17,0x1000);
//
//	 SD_PowerOn();
//	 if(sd_ini()==0) {Stat &= ~STA_NOINIT;} 		//Сбросим статус STA_NOINIT
    return Stat;
 800b0c0:	4b03      	ldr	r3, [pc, #12]	; (800b0d0 <USER_initialize+0x30>)
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3708      	adds	r7, #8
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	2000002d 	.word	0x2000002d

0800b0d4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	4603      	mov	r3, r0
 800b0dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
	//HAL_UART_Transmit(&huart3,(uint8_t*)"USER_status\n\r",13,0x1000);
	if (pdrv) return STA_NOINIT;
 800b0de:	79fb      	ldrb	r3, [r7, #7]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d001      	beq.n	800b0e8 <USER_status+0x14>
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	e002      	b.n	800b0ee <USER_status+0x1a>
    return Stat;
 800b0e8:	4b04      	ldr	r3, [pc, #16]	; (800b0fc <USER_status+0x28>)
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	370c      	adds	r7, #12
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr
 800b0fa:	bf00      	nop
 800b0fc:	2000002d 	.word	0x2000002d

0800b100 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	60b9      	str	r1, [r7, #8]
 800b108:	607a      	str	r2, [r7, #4]
 800b10a:	603b      	str	r3, [r7, #0]
 800b10c:	4603      	mov	r3, r0
 800b10e:	73fb      	strb	r3, [r7, #15]
//
//	SPI_Release();
//
//	return count ? RES_ERROR : RES_OK;

	if (pdrv || ( ! count)) return RES_PARERR;
 800b110:	7bfb      	ldrb	r3, [r7, #15]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d102      	bne.n	800b11c <USER_read+0x1c>
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d101      	bne.n	800b120 <USER_read+0x20>
 800b11c:	2304      	movs	r3, #4
 800b11e:	e023      	b.n	800b168 <USER_read+0x68>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b120:	4b13      	ldr	r3, [pc, #76]	; (800b170 <USER_read+0x70>)
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	b2db      	uxtb	r3, r3
 800b126:	f003 0301 	and.w	r3, r3, #1
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d001      	beq.n	800b132 <USER_read+0x32>
 800b12e:	2303      	movs	r3, #3
 800b130:	e01a      	b.n	800b168 <USER_read+0x68>

			if ( ! (sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 800b132:	4b10      	ldr	r3, [pc, #64]	; (800b174 <USER_read+0x74>)
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	b2db      	uxtb	r3, r3
 800b138:	f003 0304 	and.w	r3, r3, #4
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d102      	bne.n	800b146 <USER_read+0x46>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	025b      	lsls	r3, r3, #9
 800b144:	607b      	str	r3, [r7, #4]
			if (count == 1) /* Single block read */
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d105      	bne.n	800b158 <USER_read+0x58>
			{
				SD_SPI_Read_Block(buff, sector);
 800b14c:	6879      	ldr	r1, [r7, #4]
 800b14e:	68b8      	ldr	r0, [r7, #8]
 800b150:	f7f8 feb2 	bl	8003eb8 <SD_SPI_Read_Block>
				count = 0;
 800b154:	2300      	movs	r3, #0
 800b156:	603b      	str	r3, [r7, #0]
			}
			else /* Multiple block read */
			{
			}
			SPI_Release();
 800b158:	f7f8 fe18 	bl	8003d8c <SPI_Release>
			return count ? RES_ERROR : RES_OK;
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	bf14      	ite	ne
 800b162:	2301      	movne	r3, #1
 800b164:	2300      	moveq	r3, #0
 800b166:	b2db      	uxtb	r3, r3

   // return RES_OK;
  /* USER CODE END READ */
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3710      	adds	r7, #16
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	2000002d 	.word	0x2000002d
 800b174:	20002934 	.word	0x20002934

0800b178 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	60b9      	str	r1, [r7, #8]
 800b180:	607a      	str	r2, [r7, #4]
 800b182:	603b      	str	r3, [r7, #0]
 800b184:	4603      	mov	r3, r0
 800b186:	73fb      	strb	r3, [r7, #15]
  /* USER CODE HERE */
//	HAL_UART_Transmit(&huart3,(uint8_t*)"USER_write\n\r",12,0x1000);
//	sprintf(str1,"sector: %lu\n\r",sector);
//	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);

	if (pdrv || !count) return RES_PARERR;
 800b188:	7bfb      	ldrb	r3, [r7, #15]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d102      	bne.n	800b194 <USER_write+0x1c>
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d101      	bne.n	800b198 <USER_write+0x20>
 800b194:	2304      	movs	r3, #4
 800b196:	e02c      	b.n	800b1f2 <USER_write+0x7a>
			if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b198:	4b18      	ldr	r3, [pc, #96]	; (800b1fc <USER_write+0x84>)
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	f003 0301 	and.w	r3, r3, #1
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d001      	beq.n	800b1aa <USER_write+0x32>
 800b1a6:	2303      	movs	r3, #3
 800b1a8:	e023      	b.n	800b1f2 <USER_write+0x7a>
			if (Stat & STA_PROTECT) return RES_WRPRT;
 800b1aa:	4b14      	ldr	r3, [pc, #80]	; (800b1fc <USER_write+0x84>)
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	b2db      	uxtb	r3, r3
 800b1b0:	f003 0304 	and.w	r3, r3, #4
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d001      	beq.n	800b1bc <USER_write+0x44>
 800b1b8:	2302      	movs	r3, #2
 800b1ba:	e01a      	b.n	800b1f2 <USER_write+0x7a>
			if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 800b1bc:	4b10      	ldr	r3, [pc, #64]	; (800b200 <USER_write+0x88>)
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	f003 0304 	and.w	r3, r3, #4
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d102      	bne.n	800b1d0 <USER_write+0x58>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	025b      	lsls	r3, r3, #9
 800b1ce:	607b      	str	r3, [r7, #4]
			if (count == 1) /* Single block read */
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	d105      	bne.n	800b1e2 <USER_write+0x6a>
			{
				SD_SPI_Write_Block((BYTE*)buff, sector);
 800b1d6:	6879      	ldr	r1, [r7, #4]
 800b1d8:	68b8      	ldr	r0, [r7, #8]
 800b1da:	f7f8 feb3 	bl	8003f44 <SD_SPI_Write_Block>
				count = 0;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	603b      	str	r3, [r7, #0]
			}
			else /* Multiple block read */
			{
			}
			SPI_Release();
 800b1e2:	f7f8 fdd3 	bl	8003d8c <SPI_Release>
			return count ? RES_ERROR : RES_OK;
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	bf14      	ite	ne
 800b1ec:	2301      	movne	r3, #1
 800b1ee:	2300      	moveq	r3, #0
 800b1f0:	b2db      	uxtb	r3, r3

    //return RES_OK;
  /* USER CODE END WRITE */
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3710      	adds	r7, #16
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	2000002d 	.word	0x2000002d
 800b200:	20002934 	.word	0x20002934

0800b204 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	4603      	mov	r3, r0
 800b20c:	603a      	str	r2, [r7, #0]
 800b20e:	71fb      	strb	r3, [r7, #7]
 800b210:	460b      	mov	r3, r1
 800b212:	71bb      	strb	r3, [r7, #6]
//
//    SPI_Release();
//
//    return res;

	DRESULT vResult = RES_ERROR;
 800b214:	2301      	movs	r3, #1
 800b216:	73fb      	strb	r3, [r7, #15]

		    if (pdrv) return RES_PARERR;
 800b218:	79fb      	ldrb	r3, [r7, #7]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d001      	beq.n	800b222 <USER_ioctl+0x1e>
 800b21e:	2304      	movs	r3, #4
 800b220:	e02b      	b.n	800b27a <USER_ioctl+0x76>
				if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b222:	4b18      	ldr	r3, [pc, #96]	; (800b284 <USER_ioctl+0x80>)
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	b2db      	uxtb	r3, r3
 800b228:	f003 0301 	and.w	r3, r3, #1
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d001      	beq.n	800b234 <USER_ioctl+0x30>
 800b230:	2303      	movs	r3, #3
 800b232:	e022      	b.n	800b27a <USER_ioctl+0x76>
				vResult = RES_ERROR;
 800b234:	2301      	movs	r3, #1
 800b236:	73fb      	strb	r3, [r7, #15]

				switch (cmd)
 800b238:	79bb      	ldrb	r3, [r7, #6]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d002      	beq.n	800b244 <USER_ioctl+0x40>
 800b23e:	2b02      	cmp	r3, #2
 800b240:	d00d      	beq.n	800b25e <USER_ioctl+0x5a>
 800b242:	e013      	b.n	800b26c <USER_ioctl+0x68>
				{
					case CTRL_SYNC : /* Flush dirty buffer if present */
									SD_SELECT;
 800b244:	2200      	movs	r2, #0
 800b246:	2108      	movs	r1, #8
 800b248:	480f      	ldr	r0, [pc, #60]	; (800b288 <USER_ioctl+0x84>)
 800b24a:	f7fa f95b 	bl	8005504 <HAL_GPIO_WritePin>
									if ( ! SD_SPI_WaitingForReadiness())
 800b24e:	f7f8 fda4 	bl	8003d9a <SD_SPI_WaitingForReadiness>
 800b252:	4603      	mov	r3, r0
 800b254:	2b00      	cmp	r3, #0
 800b256:	d10c      	bne.n	800b272 <USER_ioctl+0x6e>
									vResult = RES_OK;
 800b258:	2300      	movs	r3, #0
 800b25a:	73fb      	strb	r3, [r7, #15]
										break;
 800b25c:	e009      	b.n	800b272 <USER_ioctl+0x6e>

					case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
									*(WORD*)buff = 512;
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b264:	801a      	strh	r2, [r3, #0]
									vResult = RES_OK;
 800b266:	2300      	movs	r3, #0
 800b268:	73fb      	strb	r3, [r7, #15]
										break;
 800b26a:	e003      	b.n	800b274 <USER_ioctl+0x70>

					default:
						vResult = RES_PARERR;
 800b26c:	2304      	movs	r3, #4
 800b26e:	73fb      	strb	r3, [r7, #15]
 800b270:	e000      	b.n	800b274 <USER_ioctl+0x70>
										break;
 800b272:	bf00      	nop
				}

				SPI_Release();
 800b274:	f7f8 fd8a 	bl	8003d8c <SPI_Release>

				return vResult;
 800b278:	7bfb      	ldrb	r3, [r7, #15]
   // return res;
  /* USER CODE END IOCTL */
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	2000002d 	.word	0x2000002d
 800b288:	40020000 	.word	0x40020000

0800b28c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b28c:	b590      	push	{r4, r7, lr}
 800b28e:	b089      	sub	sp, #36	; 0x24
 800b290:	af04      	add	r7, sp, #16
 800b292:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800b294:	2301      	movs	r3, #1
 800b296:	2202      	movs	r2, #2
 800b298:	2102      	movs	r1, #2
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 fc66 	bl	800bb6c <USBH_FindInterface>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b2a4:	7bfb      	ldrb	r3, [r7, #15]
 800b2a6:	2bff      	cmp	r3, #255	; 0xff
 800b2a8:	d002      	beq.n	800b2b0 <USBH_CDC_InterfaceInit+0x24>
 800b2aa:	7bfb      	ldrb	r3, [r7, #15]
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d901      	bls.n	800b2b4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b2b0:	2302      	movs	r3, #2
 800b2b2:	e13d      	b.n	800b530 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800b2b4:	7bfb      	ldrb	r3, [r7, #15]
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f000 fc3b 	bl	800bb34 <USBH_SelectInterface>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b2c2:	7bbb      	ldrb	r3, [r7, #14]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d001      	beq.n	800b2cc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800b2c8:	2302      	movs	r3, #2
 800b2ca:	e131      	b.n	800b530 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b2d2:	2050      	movs	r0, #80	; 0x50
 800b2d4:	f006 f82a 	bl	801132c <malloc>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2e2:	69db      	ldr	r3, [r3, #28]
 800b2e4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d101      	bne.n	800b2f0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800b2ec:	2302      	movs	r3, #2
 800b2ee:	e11f      	b.n	800b530 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800b2f0:	2250      	movs	r2, #80	; 0x50
 800b2f2:	2100      	movs	r1, #0
 800b2f4:	68b8      	ldr	r0, [r7, #8]
 800b2f6:	f006 f829 	bl	801134c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800b2fa:	7bfb      	ldrb	r3, [r7, #15]
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	211a      	movs	r1, #26
 800b300:	fb01 f303 	mul.w	r3, r1, r3
 800b304:	4413      	add	r3, r2
 800b306:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	b25b      	sxtb	r3, r3
 800b30e:	2b00      	cmp	r3, #0
 800b310:	da15      	bge.n	800b33e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b312:	7bfb      	ldrb	r3, [r7, #15]
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	211a      	movs	r1, #26
 800b318:	fb01 f303 	mul.w	r3, r1, r3
 800b31c:	4413      	add	r3, r2
 800b31e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b322:	781a      	ldrb	r2, [r3, #0]
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b328:	7bfb      	ldrb	r3, [r7, #15]
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	211a      	movs	r1, #26
 800b32e:	fb01 f303 	mul.w	r3, r1, r3
 800b332:	4413      	add	r3, r2
 800b334:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b338:	881a      	ldrh	r2, [r3, #0]
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	785b      	ldrb	r3, [r3, #1]
 800b342:	4619      	mov	r1, r3
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f001 ff2c 	bl	800d1a2 <USBH_AllocPipe>
 800b34a:	4603      	mov	r3, r0
 800b34c:	461a      	mov	r2, r3
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	7819      	ldrb	r1, [r3, #0]
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	7858      	ldrb	r0, [r3, #1]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b366:	68ba      	ldr	r2, [r7, #8]
 800b368:	8952      	ldrh	r2, [r2, #10]
 800b36a:	9202      	str	r2, [sp, #8]
 800b36c:	2203      	movs	r2, #3
 800b36e:	9201      	str	r2, [sp, #4]
 800b370:	9300      	str	r3, [sp, #0]
 800b372:	4623      	mov	r3, r4
 800b374:	4602      	mov	r2, r0
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f001 fee4 	bl	800d144 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	2200      	movs	r2, #0
 800b382:	4619      	mov	r1, r3
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f005 ff23 	bl	80111d0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800b38a:	2300      	movs	r3, #0
 800b38c:	2200      	movs	r2, #0
 800b38e:	210a      	movs	r1, #10
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f000 fbeb 	bl	800bb6c <USBH_FindInterface>
 800b396:	4603      	mov	r3, r0
 800b398:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b39a:	7bfb      	ldrb	r3, [r7, #15]
 800b39c:	2bff      	cmp	r3, #255	; 0xff
 800b39e:	d002      	beq.n	800b3a6 <USBH_CDC_InterfaceInit+0x11a>
 800b3a0:	7bfb      	ldrb	r3, [r7, #15]
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d901      	bls.n	800b3aa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b3a6:	2302      	movs	r3, #2
 800b3a8:	e0c2      	b.n	800b530 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800b3aa:	7bfb      	ldrb	r3, [r7, #15]
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	211a      	movs	r1, #26
 800b3b0:	fb01 f303 	mul.w	r3, r1, r3
 800b3b4:	4413      	add	r3, r2
 800b3b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	b25b      	sxtb	r3, r3
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	da16      	bge.n	800b3f0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b3c2:	7bfb      	ldrb	r3, [r7, #15]
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	211a      	movs	r1, #26
 800b3c8:	fb01 f303 	mul.w	r3, r1, r3
 800b3cc:	4413      	add	r3, r2
 800b3ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b3d2:	781a      	ldrb	r2, [r3, #0]
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b3d8:	7bfb      	ldrb	r3, [r7, #15]
 800b3da:	687a      	ldr	r2, [r7, #4]
 800b3dc:	211a      	movs	r1, #26
 800b3de:	fb01 f303 	mul.w	r3, r1, r3
 800b3e2:	4413      	add	r3, r2
 800b3e4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b3e8:	881a      	ldrh	r2, [r3, #0]
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	835a      	strh	r2, [r3, #26]
 800b3ee:	e015      	b.n	800b41c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b3f0:	7bfb      	ldrb	r3, [r7, #15]
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	211a      	movs	r1, #26
 800b3f6:	fb01 f303 	mul.w	r3, r1, r3
 800b3fa:	4413      	add	r3, r2
 800b3fc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b400:	781a      	ldrb	r2, [r3, #0]
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b406:	7bfb      	ldrb	r3, [r7, #15]
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	211a      	movs	r1, #26
 800b40c:	fb01 f303 	mul.w	r3, r1, r3
 800b410:	4413      	add	r3, r2
 800b412:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b416:	881a      	ldrh	r2, [r3, #0]
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800b41c:	7bfb      	ldrb	r3, [r7, #15]
 800b41e:	687a      	ldr	r2, [r7, #4]
 800b420:	211a      	movs	r1, #26
 800b422:	fb01 f303 	mul.w	r3, r1, r3
 800b426:	4413      	add	r3, r2
 800b428:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	b25b      	sxtb	r3, r3
 800b430:	2b00      	cmp	r3, #0
 800b432:	da16      	bge.n	800b462 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b434:	7bfb      	ldrb	r3, [r7, #15]
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	211a      	movs	r1, #26
 800b43a:	fb01 f303 	mul.w	r3, r1, r3
 800b43e:	4413      	add	r3, r2
 800b440:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b444:	781a      	ldrb	r2, [r3, #0]
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b44a:	7bfb      	ldrb	r3, [r7, #15]
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	211a      	movs	r1, #26
 800b450:	fb01 f303 	mul.w	r3, r1, r3
 800b454:	4413      	add	r3, r2
 800b456:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b45a:	881a      	ldrh	r2, [r3, #0]
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	835a      	strh	r2, [r3, #26]
 800b460:	e015      	b.n	800b48e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b462:	7bfb      	ldrb	r3, [r7, #15]
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	211a      	movs	r1, #26
 800b468:	fb01 f303 	mul.w	r3, r1, r3
 800b46c:	4413      	add	r3, r2
 800b46e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b472:	781a      	ldrb	r2, [r3, #0]
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b478:	7bfb      	ldrb	r3, [r7, #15]
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	211a      	movs	r1, #26
 800b47e:	fb01 f303 	mul.w	r3, r1, r3
 800b482:	4413      	add	r3, r2
 800b484:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b488:	881a      	ldrh	r2, [r3, #0]
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	7b9b      	ldrb	r3, [r3, #14]
 800b492:	4619      	mov	r1, r3
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f001 fe84 	bl	800d1a2 <USBH_AllocPipe>
 800b49a:	4603      	mov	r3, r0
 800b49c:	461a      	mov	r2, r3
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	7bdb      	ldrb	r3, [r3, #15]
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f001 fe7a 	bl	800d1a2 <USBH_AllocPipe>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	7b59      	ldrb	r1, [r3, #13]
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	7b98      	ldrb	r0, [r3, #14]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b4ca:	68ba      	ldr	r2, [r7, #8]
 800b4cc:	8b12      	ldrh	r2, [r2, #24]
 800b4ce:	9202      	str	r2, [sp, #8]
 800b4d0:	2202      	movs	r2, #2
 800b4d2:	9201      	str	r2, [sp, #4]
 800b4d4:	9300      	str	r3, [sp, #0]
 800b4d6:	4623      	mov	r3, r4
 800b4d8:	4602      	mov	r2, r0
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f001 fe32 	bl	800d144 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	7b19      	ldrb	r1, [r3, #12]
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	7bd8      	ldrb	r0, [r3, #15]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b4f4:	68ba      	ldr	r2, [r7, #8]
 800b4f6:	8b52      	ldrh	r2, [r2, #26]
 800b4f8:	9202      	str	r2, [sp, #8]
 800b4fa:	2202      	movs	r2, #2
 800b4fc:	9201      	str	r2, [sp, #4]
 800b4fe:	9300      	str	r3, [sp, #0]
 800b500:	4623      	mov	r3, r4
 800b502:	4602      	mov	r2, r0
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f001 fe1d 	bl	800d144 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	2200      	movs	r2, #0
 800b50e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	7b5b      	ldrb	r3, [r3, #13]
 800b516:	2200      	movs	r2, #0
 800b518:	4619      	mov	r1, r3
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f005 fe58 	bl	80111d0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	7b1b      	ldrb	r3, [r3, #12]
 800b524:	2200      	movs	r2, #0
 800b526:	4619      	mov	r1, r3
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f005 fe51 	bl	80111d0 <USBH_LL_SetToggle>

  return USBH_OK;
 800b52e:	2300      	movs	r3, #0
}
 800b530:	4618      	mov	r0, r3
 800b532:	3714      	adds	r7, #20
 800b534:	46bd      	mov	sp, r7
 800b536:	bd90      	pop	{r4, r7, pc}

0800b538 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b546:	69db      	ldr	r3, [r3, #28]
 800b548:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00e      	beq.n	800b570 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	4619      	mov	r1, r3
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f001 fe12 	bl	800d182 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	781b      	ldrb	r3, [r3, #0]
 800b562:	4619      	mov	r1, r3
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f001 fe3d 	bl	800d1e4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2200      	movs	r2, #0
 800b56e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	7b1b      	ldrb	r3, [r3, #12]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d00e      	beq.n	800b596 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	7b1b      	ldrb	r3, [r3, #12]
 800b57c:	4619      	mov	r1, r3
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f001 fdff 	bl	800d182 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	7b1b      	ldrb	r3, [r3, #12]
 800b588:	4619      	mov	r1, r3
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f001 fe2a 	bl	800d1e4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2200      	movs	r2, #0
 800b594:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	7b5b      	ldrb	r3, [r3, #13]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d00e      	beq.n	800b5bc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	7b5b      	ldrb	r3, [r3, #13]
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f001 fdec 	bl	800d182 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	7b5b      	ldrb	r3, [r3, #13]
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f001 fe17 	bl	800d1e4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5c2:	69db      	ldr	r3, [r3, #28]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d00b      	beq.n	800b5e0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5ce:	69db      	ldr	r3, [r3, #28]
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f005 feb3 	bl	801133c <free>
    phost->pActiveClass->pData = 0U;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5dc:	2200      	movs	r2, #0
 800b5de:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b5e0:	2300      	movs	r3, #0
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3710      	adds	r7, #16
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}

0800b5ea <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b5ea:	b580      	push	{r7, lr}
 800b5ec:	b084      	sub	sp, #16
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5f8:	69db      	ldr	r3, [r3, #28]
 800b5fa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	3340      	adds	r3, #64	; 0x40
 800b600:	4619      	mov	r1, r3
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 f8b1 	bl	800b76a <GetLineCoding>
 800b608:	4603      	mov	r3, r0
 800b60a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800b60c:	7afb      	ldrb	r3, [r7, #11]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d105      	bne.n	800b61e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b618:	2102      	movs	r1, #2
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800b61e:	7afb      	ldrb	r3, [r7, #11]
}
 800b620:	4618      	mov	r0, r3
 800b622:	3710      	adds	r7, #16
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b630:	2301      	movs	r3, #1
 800b632:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800b634:	2300      	movs	r3, #0
 800b636:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b63e:	69db      	ldr	r3, [r3, #28]
 800b640:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b648:	2b04      	cmp	r3, #4
 800b64a:	d877      	bhi.n	800b73c <USBH_CDC_Process+0x114>
 800b64c:	a201      	add	r2, pc, #4	; (adr r2, 800b654 <USBH_CDC_Process+0x2c>)
 800b64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b652:	bf00      	nop
 800b654:	0800b669 	.word	0x0800b669
 800b658:	0800b66f 	.word	0x0800b66f
 800b65c:	0800b69f 	.word	0x0800b69f
 800b660:	0800b713 	.word	0x0800b713
 800b664:	0800b721 	.word	0x0800b721
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800b668:	2300      	movs	r3, #0
 800b66a:	73fb      	strb	r3, [r7, #15]
      break;
 800b66c:	e06d      	b.n	800b74a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b672:	4619      	mov	r1, r3
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 f897 	bl	800b7a8 <SetLineCoding>
 800b67a:	4603      	mov	r3, r0
 800b67c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b67e:	7bbb      	ldrb	r3, [r7, #14]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d104      	bne.n	800b68e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	2202      	movs	r2, #2
 800b688:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b68c:	e058      	b.n	800b740 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800b68e:	7bbb      	ldrb	r3, [r7, #14]
 800b690:	2b01      	cmp	r3, #1
 800b692:	d055      	beq.n	800b740 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	2204      	movs	r2, #4
 800b698:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b69c:	e050      	b.n	800b740 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	3340      	adds	r3, #64	; 0x40
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 f860 	bl	800b76a <GetLineCoding>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b6ae:	7bbb      	ldrb	r3, [r7, #14]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d126      	bne.n	800b702 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6c6:	791b      	ldrb	r3, [r3, #4]
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d13b      	bne.n	800b744 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6d6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d133      	bne.n	800b744 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6e6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d12b      	bne.n	800b744 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6f4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d124      	bne.n	800b744 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 f958 	bl	800b9b0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b700:	e020      	b.n	800b744 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800b702:	7bbb      	ldrb	r3, [r7, #14]
 800b704:	2b01      	cmp	r3, #1
 800b706:	d01d      	beq.n	800b744 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	2204      	movs	r2, #4
 800b70c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b710:	e018      	b.n	800b744 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 f867 	bl	800b7e6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 f8da 	bl	800b8d2 <CDC_ProcessReception>
      break;
 800b71e:	e014      	b.n	800b74a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800b720:	2100      	movs	r1, #0
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f000 ffef 	bl	800c706 <USBH_ClrFeature>
 800b728:	4603      	mov	r3, r0
 800b72a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b72c:	7bbb      	ldrb	r3, [r7, #14]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d10a      	bne.n	800b748 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	2200      	movs	r2, #0
 800b736:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800b73a:	e005      	b.n	800b748 <USBH_CDC_Process+0x120>

    default:
      break;
 800b73c:	bf00      	nop
 800b73e:	e004      	b.n	800b74a <USBH_CDC_Process+0x122>
      break;
 800b740:	bf00      	nop
 800b742:	e002      	b.n	800b74a <USBH_CDC_Process+0x122>
      break;
 800b744:	bf00      	nop
 800b746:	e000      	b.n	800b74a <USBH_CDC_Process+0x122>
      break;
 800b748:	bf00      	nop

  }

  return status;
 800b74a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3710      	adds	r7, #16
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b754:	b480      	push	{r7}
 800b756:	b083      	sub	sp, #12
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b75c:	2300      	movs	r3, #0
}
 800b75e:	4618      	mov	r0, r3
 800b760:	370c      	adds	r7, #12
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr

0800b76a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800b76a:	b580      	push	{r7, lr}
 800b76c:	b082      	sub	sp, #8
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
 800b772:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	22a1      	movs	r2, #161	; 0xa1
 800b778:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2221      	movs	r2, #33	; 0x21
 800b77e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2200      	movs	r2, #0
 800b784:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2200      	movs	r2, #0
 800b78a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2207      	movs	r2, #7
 800b790:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	2207      	movs	r2, #7
 800b796:	4619      	mov	r1, r3
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f001 fa81 	bl	800cca0 <USBH_CtlReq>
 800b79e:	4603      	mov	r3, r0
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3708      	adds	r7, #8
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2221      	movs	r2, #33	; 0x21
 800b7b6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2220      	movs	r2, #32
 800b7bc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2207      	movs	r2, #7
 800b7ce:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	2207      	movs	r2, #7
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f001 fa62 	bl	800cca0 <USBH_CtlReq>
 800b7dc:	4603      	mov	r3, r0
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3708      	adds	r7, #8
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}

0800b7e6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800b7e6:	b580      	push	{r7, lr}
 800b7e8:	b086      	sub	sp, #24
 800b7ea:	af02      	add	r7, sp, #8
 800b7ec:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7f4:	69db      	ldr	r3, [r3, #28]
 800b7f6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800b802:	2b01      	cmp	r3, #1
 800b804:	d002      	beq.n	800b80c <CDC_ProcessTransmission+0x26>
 800b806:	2b02      	cmp	r3, #2
 800b808:	d023      	beq.n	800b852 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800b80a:	e05e      	b.n	800b8ca <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b810:	68fa      	ldr	r2, [r7, #12]
 800b812:	8b12      	ldrh	r2, [r2, #24]
 800b814:	4293      	cmp	r3, r2
 800b816:	d90b      	bls.n	800b830 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	69d9      	ldr	r1, [r3, #28]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	8b1a      	ldrh	r2, [r3, #24]
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	7b5b      	ldrb	r3, [r3, #13]
 800b824:	2001      	movs	r0, #1
 800b826:	9000      	str	r0, [sp, #0]
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f001 fc48 	bl	800d0be <USBH_BulkSendData>
 800b82e:	e00b      	b.n	800b848 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800b838:	b29a      	uxth	r2, r3
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	7b5b      	ldrb	r3, [r3, #13]
 800b83e:	2001      	movs	r0, #1
 800b840:	9000      	str	r0, [sp, #0]
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f001 fc3b 	bl	800d0be <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2202      	movs	r2, #2
 800b84c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b850:	e03b      	b.n	800b8ca <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	7b5b      	ldrb	r3, [r3, #13]
 800b856:	4619      	mov	r1, r3
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f005 fc8f 	bl	801117c <USBH_LL_GetURBState>
 800b85e:	4603      	mov	r3, r0
 800b860:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800b862:	7afb      	ldrb	r3, [r7, #11]
 800b864:	2b01      	cmp	r3, #1
 800b866:	d128      	bne.n	800b8ba <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86c:	68fa      	ldr	r2, [r7, #12]
 800b86e:	8b12      	ldrh	r2, [r2, #24]
 800b870:	4293      	cmp	r3, r2
 800b872:	d90e      	bls.n	800b892 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	8b12      	ldrh	r2, [r2, #24]
 800b87c:	1a9a      	subs	r2, r3, r2
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	69db      	ldr	r3, [r3, #28]
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	8b12      	ldrh	r2, [r2, #24]
 800b88a:	441a      	add	r2, r3
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	61da      	str	r2, [r3, #28]
 800b890:	e002      	b.n	800b898 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2200      	movs	r2, #0
 800b896:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d004      	beq.n	800b8aa <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b8a8:	e00e      	b.n	800b8c8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 f868 	bl	800b988 <USBH_CDC_TransmitCallback>
      break;
 800b8b8:	e006      	b.n	800b8c8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800b8ba:	7afb      	ldrb	r3, [r7, #11]
 800b8bc:	2b02      	cmp	r3, #2
 800b8be:	d103      	bne.n	800b8c8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b8c8:	bf00      	nop
  }
}
 800b8ca:	bf00      	nop
 800b8cc:	3710      	adds	r7, #16
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}

0800b8d2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b086      	sub	sp, #24
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b8e0:	69db      	ldr	r3, [r3, #28]
 800b8e2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800b8ee:	2b03      	cmp	r3, #3
 800b8f0:	d002      	beq.n	800b8f8 <CDC_ProcessReception+0x26>
 800b8f2:	2b04      	cmp	r3, #4
 800b8f4:	d00e      	beq.n	800b914 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800b8f6:	e043      	b.n	800b980 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	6a19      	ldr	r1, [r3, #32]
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	8b5a      	ldrh	r2, [r3, #26]
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	7b1b      	ldrb	r3, [r3, #12]
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f001 fbff 	bl	800d108 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	2204      	movs	r2, #4
 800b90e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b912:	e035      	b.n	800b980 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	7b1b      	ldrb	r3, [r3, #12]
 800b918:	4619      	mov	r1, r3
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f005 fc2e 	bl	801117c <USBH_LL_GetURBState>
 800b920:	4603      	mov	r3, r0
 800b922:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800b924:	7cfb      	ldrb	r3, [r7, #19]
 800b926:	2b01      	cmp	r3, #1
 800b928:	d129      	bne.n	800b97e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	7b1b      	ldrb	r3, [r3, #12]
 800b92e:	4619      	mov	r1, r3
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f005 fb91 	bl	8011058 <USBH_LL_GetLastXferSize>
 800b936:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b93c:	68fa      	ldr	r2, [r7, #12]
 800b93e:	429a      	cmp	r2, r3
 800b940:	d016      	beq.n	800b970 <CDC_ProcessReception+0x9e>
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	8b5b      	ldrh	r3, [r3, #26]
 800b946:	461a      	mov	r2, r3
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d910      	bls.n	800b970 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	1ad2      	subs	r2, r2, r3
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	6a1a      	ldr	r2, [r3, #32]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	441a      	add	r2, r3
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	2203      	movs	r2, #3
 800b96a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b96e:	e006      	b.n	800b97e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	2200      	movs	r2, #0
 800b974:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f000 f80f 	bl	800b99c <USBH_CDC_ReceiveCallback>
      break;
 800b97e:	bf00      	nop
  }
}
 800b980:	bf00      	nop
 800b982:	3718      	adds	r7, #24
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800b988:	b480      	push	{r7}
 800b98a:	b083      	sub	sp, #12
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b990:	bf00      	nop
 800b992:	370c      	adds	r7, #12
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr

0800b99c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b083      	sub	sp, #12
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b9a4:	bf00      	nop
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b9b8:	bf00      	nop
 800b9ba:	370c      	adds	r7, #12
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c2:	4770      	bx	lr

0800b9c4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	60b9      	str	r1, [r7, #8]
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d101      	bne.n	800b9dc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b9d8:	2302      	movs	r3, #2
 800b9da:	e029      	b.n	800ba30 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	79fa      	ldrb	r2, [r7, #7]
 800b9e0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b9f4:	68f8      	ldr	r0, [r7, #12]
 800b9f6:	f000 f81f 	bl	800ba38 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2200      	movs	r2, #0
 800ba06:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2200      	movs	r2, #0
 800ba16:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d003      	beq.n	800ba28 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	68ba      	ldr	r2, [r7, #8]
 800ba24:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800ba28:	68f8      	ldr	r0, [r7, #12]
 800ba2a:	f005 fa61 	bl	8010ef0 <USBH_LL_Init>

  return USBH_OK;
 800ba2e:	2300      	movs	r3, #0
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3710      	adds	r7, #16
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b085      	sub	sp, #20
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ba40:	2300      	movs	r3, #0
 800ba42:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ba44:	2300      	movs	r3, #0
 800ba46:	60fb      	str	r3, [r7, #12]
 800ba48:	e009      	b.n	800ba5e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ba4a:	687a      	ldr	r2, [r7, #4]
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	33e0      	adds	r3, #224	; 0xe0
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	4413      	add	r3, r2
 800ba54:	2200      	movs	r2, #0
 800ba56:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	60fb      	str	r3, [r7, #12]
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	2b0f      	cmp	r3, #15
 800ba62:	d9f2      	bls.n	800ba4a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ba64:	2300      	movs	r3, #0
 800ba66:	60fb      	str	r3, [r7, #12]
 800ba68:	e009      	b.n	800ba7e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	4413      	add	r3, r2
 800ba70:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ba74:	2200      	movs	r2, #0
 800ba76:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	60fb      	str	r3, [r7, #12]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba84:	d3f1      	bcc.n	800ba6a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2201      	movs	r2, #1
 800ba96:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2201      	movs	r2, #1
 800baa4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2240      	movs	r2, #64	; 0x40
 800baaa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2200      	movs	r2, #0
 800bab6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2201      	movs	r2, #1
 800babe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2200      	movs	r2, #0
 800bace:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800bad2:	2300      	movs	r3, #0
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3714      	adds	r7, #20
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr

0800bae0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b085      	sub	sp, #20
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800baea:	2300      	movs	r3, #0
 800baec:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d016      	beq.n	800bb22 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d10e      	bne.n	800bb1c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bb04:	1c59      	adds	r1, r3, #1
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	33de      	adds	r3, #222	; 0xde
 800bb10:	6839      	ldr	r1, [r7, #0]
 800bb12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800bb16:	2300      	movs	r3, #0
 800bb18:	73fb      	strb	r3, [r7, #15]
 800bb1a:	e004      	b.n	800bb26 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800bb1c:	2302      	movs	r3, #2
 800bb1e:	73fb      	strb	r3, [r7, #15]
 800bb20:	e001      	b.n	800bb26 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800bb22:	2302      	movs	r3, #2
 800bb24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bb26:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3714      	adds	r7, #20
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b085      	sub	sp, #20
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800bb40:	2300      	movs	r3, #0
 800bb42:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800bb4a:	78fa      	ldrb	r2, [r7, #3]
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d204      	bcs.n	800bb5a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	78fa      	ldrb	r2, [r7, #3]
 800bb54:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800bb58:	e001      	b.n	800bb5e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800bb5a:	2302      	movs	r3, #2
 800bb5c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bb5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3714      	adds	r7, #20
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr

0800bb6c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b087      	sub	sp, #28
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	4608      	mov	r0, r1
 800bb76:	4611      	mov	r1, r2
 800bb78:	461a      	mov	r2, r3
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	70fb      	strb	r3, [r7, #3]
 800bb7e:	460b      	mov	r3, r1
 800bb80:	70bb      	strb	r3, [r7, #2]
 800bb82:	4613      	mov	r3, r2
 800bb84:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800bb86:	2300      	movs	r3, #0
 800bb88:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bb94:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bb96:	e025      	b.n	800bbe4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800bb98:	7dfb      	ldrb	r3, [r7, #23]
 800bb9a:	221a      	movs	r2, #26
 800bb9c:	fb02 f303 	mul.w	r3, r2, r3
 800bba0:	3308      	adds	r3, #8
 800bba2:	68fa      	ldr	r2, [r7, #12]
 800bba4:	4413      	add	r3, r2
 800bba6:	3302      	adds	r3, #2
 800bba8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	795b      	ldrb	r3, [r3, #5]
 800bbae:	78fa      	ldrb	r2, [r7, #3]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d002      	beq.n	800bbba <USBH_FindInterface+0x4e>
 800bbb4:	78fb      	ldrb	r3, [r7, #3]
 800bbb6:	2bff      	cmp	r3, #255	; 0xff
 800bbb8:	d111      	bne.n	800bbde <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bbbe:	78ba      	ldrb	r2, [r7, #2]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d002      	beq.n	800bbca <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bbc4:	78bb      	ldrb	r3, [r7, #2]
 800bbc6:	2bff      	cmp	r3, #255	; 0xff
 800bbc8:	d109      	bne.n	800bbde <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bbce:	787a      	ldrb	r2, [r7, #1]
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d002      	beq.n	800bbda <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bbd4:	787b      	ldrb	r3, [r7, #1]
 800bbd6:	2bff      	cmp	r3, #255	; 0xff
 800bbd8:	d101      	bne.n	800bbde <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800bbda:	7dfb      	ldrb	r3, [r7, #23]
 800bbdc:	e006      	b.n	800bbec <USBH_FindInterface+0x80>
    }
    if_ix++;
 800bbde:	7dfb      	ldrb	r3, [r7, #23]
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bbe4:	7dfb      	ldrb	r3, [r7, #23]
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	d9d6      	bls.n	800bb98 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800bbea:	23ff      	movs	r3, #255	; 0xff
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	371c      	adds	r7, #28
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f005 f9b1 	bl	8010f68 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800bc06:	2101      	movs	r1, #1
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f005 faca 	bl	80111a2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800bc0e:	2300      	movs	r3, #0
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3708      	adds	r7, #8
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b088      	sub	sp, #32
 800bc1c:	af04      	add	r7, sp, #16
 800bc1e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800bc20:	2302      	movs	r3, #2
 800bc22:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800bc24:	2300      	movs	r3, #0
 800bc26:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d102      	bne.n	800bc3a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2203      	movs	r2, #3
 800bc38:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	b2db      	uxtb	r3, r3
 800bc40:	2b0b      	cmp	r3, #11
 800bc42:	f200 81be 	bhi.w	800bfc2 <USBH_Process+0x3aa>
 800bc46:	a201      	add	r2, pc, #4	; (adr r2, 800bc4c <USBH_Process+0x34>)
 800bc48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc4c:	0800bc7d 	.word	0x0800bc7d
 800bc50:	0800bcaf 	.word	0x0800bcaf
 800bc54:	0800bd17 	.word	0x0800bd17
 800bc58:	0800bf5d 	.word	0x0800bf5d
 800bc5c:	0800bfc3 	.word	0x0800bfc3
 800bc60:	0800bdbb 	.word	0x0800bdbb
 800bc64:	0800bf03 	.word	0x0800bf03
 800bc68:	0800bdf1 	.word	0x0800bdf1
 800bc6c:	0800be11 	.word	0x0800be11
 800bc70:	0800be31 	.word	0x0800be31
 800bc74:	0800be75 	.word	0x0800be75
 800bc78:	0800bf45 	.word	0x0800bf45
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bc82:	b2db      	uxtb	r3, r3
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	f000 819e 	beq.w	800bfc6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800bc90:	20c8      	movs	r0, #200	; 0xc8
 800bc92:	f005 facd 	bl	8011230 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f005 f9c3 	bl	8011022 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bcac:	e18b      	b.n	800bfc6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d107      	bne.n	800bcc8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2202      	movs	r2, #2
 800bcc4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bcc6:	e18d      	b.n	800bfe4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bcce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bcd2:	d914      	bls.n	800bcfe <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bcda:	3301      	adds	r3, #1
 800bcdc:	b2da      	uxtb	r2, r3
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bcea:	2b03      	cmp	r3, #3
 800bcec:	d903      	bls.n	800bcf6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	220d      	movs	r2, #13
 800bcf2:	701a      	strb	r2, [r3, #0]
      break;
 800bcf4:	e176      	b.n	800bfe4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	701a      	strb	r2, [r3, #0]
      break;
 800bcfc:	e172      	b.n	800bfe4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bd04:	f103 020a 	add.w	r2, r3, #10
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800bd0e:	200a      	movs	r0, #10
 800bd10:	f005 fa8e 	bl	8011230 <USBH_Delay>
      break;
 800bd14:	e166      	b.n	800bfe4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d005      	beq.n	800bd2c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bd26:	2104      	movs	r1, #4
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800bd2c:	2064      	movs	r0, #100	; 0x64
 800bd2e:	f005 fa7f 	bl	8011230 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f005 f94e 	bl	8010fd4 <USBH_LL_GetSpeed>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2205      	movs	r2, #5
 800bd46:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800bd48:	2100      	movs	r1, #0
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f001 fa29 	bl	800d1a2 <USBH_AllocPipe>
 800bd50:	4603      	mov	r3, r0
 800bd52:	461a      	mov	r2, r3
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800bd58:	2180      	movs	r1, #128	; 0x80
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f001 fa21 	bl	800d1a2 <USBH_AllocPipe>
 800bd60:	4603      	mov	r3, r0
 800bd62:	461a      	mov	r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	7919      	ldrb	r1, [r3, #4]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bd78:	687a      	ldr	r2, [r7, #4]
 800bd7a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bd7c:	b292      	uxth	r2, r2
 800bd7e:	9202      	str	r2, [sp, #8]
 800bd80:	2200      	movs	r2, #0
 800bd82:	9201      	str	r2, [sp, #4]
 800bd84:	9300      	str	r3, [sp, #0]
 800bd86:	4603      	mov	r3, r0
 800bd88:	2280      	movs	r2, #128	; 0x80
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f001 f9da 	bl	800d144 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	7959      	ldrb	r1, [r3, #5]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bda0:	687a      	ldr	r2, [r7, #4]
 800bda2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bda4:	b292      	uxth	r2, r2
 800bda6:	9202      	str	r2, [sp, #8]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	9201      	str	r2, [sp, #4]
 800bdac:	9300      	str	r3, [sp, #0]
 800bdae:	4603      	mov	r3, r0
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f001 f9c6 	bl	800d144 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bdb8:	e114      	b.n	800bfe4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 f918 	bl	800bff0 <USBH_HandleEnum>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800bdc4:	7bbb      	ldrb	r3, [r7, #14]
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	f040 80fe 	bne.w	800bfca <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d103      	bne.n	800bde8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2208      	movs	r2, #8
 800bde4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bde6:	e0f0      	b.n	800bfca <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2207      	movs	r2, #7
 800bdec:	701a      	strb	r2, [r3, #0]
      break;
 800bdee:	e0ec      	b.n	800bfca <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	f000 80e9 	beq.w	800bfce <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800be02:	2101      	movs	r1, #1
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2208      	movs	r2, #8
 800be0c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800be0e:	e0de      	b.n	800bfce <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800be16:	b29b      	uxth	r3, r3
 800be18:	4619      	mov	r1, r3
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f000 fc2c 	bl	800c678 <USBH_SetCfg>
 800be20:	4603      	mov	r3, r0
 800be22:	2b00      	cmp	r3, #0
 800be24:	f040 80d5 	bne.w	800bfd2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2209      	movs	r2, #9
 800be2c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800be2e:	e0d0      	b.n	800bfd2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800be36:	f003 0320 	and.w	r3, r3, #32
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d016      	beq.n	800be6c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800be3e:	2101      	movs	r1, #1
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 fc3c 	bl	800c6be <USBH_SetFeature>
 800be46:	4603      	mov	r3, r0
 800be48:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800be4a:	7bbb      	ldrb	r3, [r7, #14]
 800be4c:	b2db      	uxtb	r3, r3
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d103      	bne.n	800be5a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	220a      	movs	r2, #10
 800be56:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800be58:	e0bd      	b.n	800bfd6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800be5a:	7bbb      	ldrb	r3, [r7, #14]
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	2b03      	cmp	r3, #3
 800be60:	f040 80b9 	bne.w	800bfd6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	220a      	movs	r2, #10
 800be68:	701a      	strb	r2, [r3, #0]
      break;
 800be6a:	e0b4      	b.n	800bfd6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	220a      	movs	r2, #10
 800be70:	701a      	strb	r2, [r3, #0]
      break;
 800be72:	e0b0      	b.n	800bfd6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	f000 80ad 	beq.w	800bfda <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800be88:	2300      	movs	r3, #0
 800be8a:	73fb      	strb	r3, [r7, #15]
 800be8c:	e016      	b.n	800bebc <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800be8e:	7bfa      	ldrb	r2, [r7, #15]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	32de      	adds	r2, #222	; 0xde
 800be94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be98:	791a      	ldrb	r2, [r3, #4]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d108      	bne.n	800beb6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800bea4:	7bfa      	ldrb	r2, [r7, #15]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	32de      	adds	r2, #222	; 0xde
 800beaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800beb4:	e005      	b.n	800bec2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800beb6:	7bfb      	ldrb	r3, [r7, #15]
 800beb8:	3301      	adds	r3, #1
 800beba:	73fb      	strb	r3, [r7, #15]
 800bebc:	7bfb      	ldrb	r3, [r7, #15]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d0e5      	beq.n	800be8e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d016      	beq.n	800befa <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bed2:	689b      	ldr	r3, [r3, #8]
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	4798      	blx	r3
 800bed8:	4603      	mov	r3, r0
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d109      	bne.n	800bef2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2206      	movs	r2, #6
 800bee2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800beea:	2103      	movs	r1, #3
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bef0:	e073      	b.n	800bfda <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	220d      	movs	r2, #13
 800bef6:	701a      	strb	r2, [r3, #0]
      break;
 800bef8:	e06f      	b.n	800bfda <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	220d      	movs	r2, #13
 800befe:	701a      	strb	r2, [r3, #0]
      break;
 800bf00:	e06b      	b.n	800bfda <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d017      	beq.n	800bf3c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf12:	691b      	ldr	r3, [r3, #16]
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	4798      	blx	r3
 800bf18:	4603      	mov	r3, r0
 800bf1a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800bf1c:	7bbb      	ldrb	r3, [r7, #14]
 800bf1e:	b2db      	uxtb	r3, r3
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d103      	bne.n	800bf2c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	220b      	movs	r2, #11
 800bf28:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bf2a:	e058      	b.n	800bfde <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800bf2c:	7bbb      	ldrb	r3, [r7, #14]
 800bf2e:	b2db      	uxtb	r3, r3
 800bf30:	2b02      	cmp	r3, #2
 800bf32:	d154      	bne.n	800bfde <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	220d      	movs	r2, #13
 800bf38:	701a      	strb	r2, [r3, #0]
      break;
 800bf3a:	e050      	b.n	800bfde <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	220d      	movs	r2, #13
 800bf40:	701a      	strb	r2, [r3, #0]
      break;
 800bf42:	e04c      	b.n	800bfde <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d049      	beq.n	800bfe2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf54:	695b      	ldr	r3, [r3, #20]
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	4798      	blx	r3
      }
      break;
 800bf5a:	e042      	b.n	800bfe2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f7ff fd67 	bl	800ba38 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d009      	beq.n	800bf88 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf7a:	68db      	ldr	r3, [r3, #12]
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2200      	movs	r2, #0
 800bf84:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d005      	beq.n	800bf9e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bf98:	2105      	movs	r1, #5
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	2b01      	cmp	r3, #1
 800bfa8:	d107      	bne.n	800bfba <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2200      	movs	r2, #0
 800bfae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f7ff fe20 	bl	800bbf8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bfb8:	e014      	b.n	800bfe4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f004 ffd4 	bl	8010f68 <USBH_LL_Start>
      break;
 800bfc0:	e010      	b.n	800bfe4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800bfc2:	bf00      	nop
 800bfc4:	e00e      	b.n	800bfe4 <USBH_Process+0x3cc>
      break;
 800bfc6:	bf00      	nop
 800bfc8:	e00c      	b.n	800bfe4 <USBH_Process+0x3cc>
      break;
 800bfca:	bf00      	nop
 800bfcc:	e00a      	b.n	800bfe4 <USBH_Process+0x3cc>
    break;
 800bfce:	bf00      	nop
 800bfd0:	e008      	b.n	800bfe4 <USBH_Process+0x3cc>
      break;
 800bfd2:	bf00      	nop
 800bfd4:	e006      	b.n	800bfe4 <USBH_Process+0x3cc>
      break;
 800bfd6:	bf00      	nop
 800bfd8:	e004      	b.n	800bfe4 <USBH_Process+0x3cc>
      break;
 800bfda:	bf00      	nop
 800bfdc:	e002      	b.n	800bfe4 <USBH_Process+0x3cc>
      break;
 800bfde:	bf00      	nop
 800bfe0:	e000      	b.n	800bfe4 <USBH_Process+0x3cc>
      break;
 800bfe2:	bf00      	nop
  }
  return USBH_OK;
 800bfe4:	2300      	movs	r3, #0
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3710      	adds	r7, #16
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
 800bfee:	bf00      	nop

0800bff0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b088      	sub	sp, #32
 800bff4:	af04      	add	r7, sp, #16
 800bff6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800bff8:	2301      	movs	r3, #1
 800bffa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800bffc:	2301      	movs	r3, #1
 800bffe:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	785b      	ldrb	r3, [r3, #1]
 800c004:	2b07      	cmp	r3, #7
 800c006:	f200 81c1 	bhi.w	800c38c <USBH_HandleEnum+0x39c>
 800c00a:	a201      	add	r2, pc, #4	; (adr r2, 800c010 <USBH_HandleEnum+0x20>)
 800c00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c010:	0800c031 	.word	0x0800c031
 800c014:	0800c0ef 	.word	0x0800c0ef
 800c018:	0800c159 	.word	0x0800c159
 800c01c:	0800c1e7 	.word	0x0800c1e7
 800c020:	0800c251 	.word	0x0800c251
 800c024:	0800c2c1 	.word	0x0800c2c1
 800c028:	0800c307 	.word	0x0800c307
 800c02c:	0800c34d 	.word	0x0800c34d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c030:	2108      	movs	r1, #8
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f000 fa50 	bl	800c4d8 <USBH_Get_DevDesc>
 800c038:	4603      	mov	r3, r0
 800c03a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c03c:	7bbb      	ldrb	r3, [r7, #14]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d130      	bne.n	800c0a4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2201      	movs	r2, #1
 800c050:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	7919      	ldrb	r1, [r3, #4]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c066:	b292      	uxth	r2, r2
 800c068:	9202      	str	r2, [sp, #8]
 800c06a:	2200      	movs	r2, #0
 800c06c:	9201      	str	r2, [sp, #4]
 800c06e:	9300      	str	r3, [sp, #0]
 800c070:	4603      	mov	r3, r0
 800c072:	2280      	movs	r2, #128	; 0x80
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f001 f865 	bl	800d144 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	7959      	ldrb	r1, [r3, #5]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c08e:	b292      	uxth	r2, r2
 800c090:	9202      	str	r2, [sp, #8]
 800c092:	2200      	movs	r2, #0
 800c094:	9201      	str	r2, [sp, #4]
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	4603      	mov	r3, r0
 800c09a:	2200      	movs	r2, #0
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f001 f851 	bl	800d144 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c0a2:	e175      	b.n	800c390 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c0a4:	7bbb      	ldrb	r3, [r7, #14]
 800c0a6:	2b03      	cmp	r3, #3
 800c0a8:	f040 8172 	bne.w	800c390 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c0b2:	3301      	adds	r3, #1
 800c0b4:	b2da      	uxtb	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c0c2:	2b03      	cmp	r3, #3
 800c0c4:	d903      	bls.n	800c0ce <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	220d      	movs	r2, #13
 800c0ca:	701a      	strb	r2, [r3, #0]
      break;
 800c0cc:	e160      	b.n	800c390 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	795b      	ldrb	r3, [r3, #5]
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f001 f885 	bl	800d1e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	791b      	ldrb	r3, [r3, #4]
 800c0de:	4619      	mov	r1, r3
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f001 f87f 	bl	800d1e4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	701a      	strb	r2, [r3, #0]
      break;
 800c0ec:	e150      	b.n	800c390 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c0ee:	2112      	movs	r1, #18
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 f9f1 	bl	800c4d8 <USBH_Get_DevDesc>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c0fa:	7bbb      	ldrb	r3, [r7, #14]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d103      	bne.n	800c108 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2202      	movs	r2, #2
 800c104:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c106:	e145      	b.n	800c394 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c108:	7bbb      	ldrb	r3, [r7, #14]
 800c10a:	2b03      	cmp	r3, #3
 800c10c:	f040 8142 	bne.w	800c394 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c116:	3301      	adds	r3, #1
 800c118:	b2da      	uxtb	r2, r3
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c126:	2b03      	cmp	r3, #3
 800c128:	d903      	bls.n	800c132 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	220d      	movs	r2, #13
 800c12e:	701a      	strb	r2, [r3, #0]
      break;
 800c130:	e130      	b.n	800c394 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	795b      	ldrb	r3, [r3, #5]
 800c136:	4619      	mov	r1, r3
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f001 f853 	bl	800d1e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	791b      	ldrb	r3, [r3, #4]
 800c142:	4619      	mov	r1, r3
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f001 f84d 	bl	800d1e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2200      	movs	r2, #0
 800c14e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2200      	movs	r2, #0
 800c154:	701a      	strb	r2, [r3, #0]
      break;
 800c156:	e11d      	b.n	800c394 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c158:	2101      	movs	r1, #1
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f000 fa68 	bl	800c630 <USBH_SetAddress>
 800c160:	4603      	mov	r3, r0
 800c162:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c164:	7bbb      	ldrb	r3, [r7, #14]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d132      	bne.n	800c1d0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c16a:	2002      	movs	r0, #2
 800c16c:	f005 f860 	bl	8011230 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2201      	movs	r2, #1
 800c174:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2203      	movs	r2, #3
 800c17c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	7919      	ldrb	r1, [r3, #4]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c192:	b292      	uxth	r2, r2
 800c194:	9202      	str	r2, [sp, #8]
 800c196:	2200      	movs	r2, #0
 800c198:	9201      	str	r2, [sp, #4]
 800c19a:	9300      	str	r3, [sp, #0]
 800c19c:	4603      	mov	r3, r0
 800c19e:	2280      	movs	r2, #128	; 0x80
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f000 ffcf 	bl	800d144 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	7959      	ldrb	r1, [r3, #5]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c1ba:	b292      	uxth	r2, r2
 800c1bc:	9202      	str	r2, [sp, #8]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	9201      	str	r2, [sp, #4]
 800c1c2:	9300      	str	r3, [sp, #0]
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f000 ffbb 	bl	800d144 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c1ce:	e0e3      	b.n	800c398 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c1d0:	7bbb      	ldrb	r3, [r7, #14]
 800c1d2:	2b03      	cmp	r3, #3
 800c1d4:	f040 80e0 	bne.w	800c398 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	220d      	movs	r2, #13
 800c1dc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	705a      	strb	r2, [r3, #1]
      break;
 800c1e4:	e0d8      	b.n	800c398 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c1e6:	2109      	movs	r1, #9
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 f99d 	bl	800c528 <USBH_Get_CfgDesc>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c1f2:	7bbb      	ldrb	r3, [r7, #14]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d103      	bne.n	800c200 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2204      	movs	r2, #4
 800c1fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c1fe:	e0cd      	b.n	800c39c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c200:	7bbb      	ldrb	r3, [r7, #14]
 800c202:	2b03      	cmp	r3, #3
 800c204:	f040 80ca 	bne.w	800c39c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c20e:	3301      	adds	r3, #1
 800c210:	b2da      	uxtb	r2, r3
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c21e:	2b03      	cmp	r3, #3
 800c220:	d903      	bls.n	800c22a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	220d      	movs	r2, #13
 800c226:	701a      	strb	r2, [r3, #0]
      break;
 800c228:	e0b8      	b.n	800c39c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	795b      	ldrb	r3, [r3, #5]
 800c22e:	4619      	mov	r1, r3
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f000 ffd7 	bl	800d1e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	791b      	ldrb	r3, [r3, #4]
 800c23a:	4619      	mov	r1, r3
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 ffd1 	bl	800d1e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2200      	movs	r2, #0
 800c246:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2200      	movs	r2, #0
 800c24c:	701a      	strb	r2, [r3, #0]
      break;
 800c24e:	e0a5      	b.n	800c39c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c256:	4619      	mov	r1, r3
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 f965 	bl	800c528 <USBH_Get_CfgDesc>
 800c25e:	4603      	mov	r3, r0
 800c260:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c262:	7bbb      	ldrb	r3, [r7, #14]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d103      	bne.n	800c270 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2205      	movs	r2, #5
 800c26c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c26e:	e097      	b.n	800c3a0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c270:	7bbb      	ldrb	r3, [r7, #14]
 800c272:	2b03      	cmp	r3, #3
 800c274:	f040 8094 	bne.w	800c3a0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c27e:	3301      	adds	r3, #1
 800c280:	b2da      	uxtb	r2, r3
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c28e:	2b03      	cmp	r3, #3
 800c290:	d903      	bls.n	800c29a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	220d      	movs	r2, #13
 800c296:	701a      	strb	r2, [r3, #0]
      break;
 800c298:	e082      	b.n	800c3a0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	795b      	ldrb	r3, [r3, #5]
 800c29e:	4619      	mov	r1, r3
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f000 ff9f 	bl	800d1e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	791b      	ldrb	r3, [r3, #4]
 800c2aa:	4619      	mov	r1, r3
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f000 ff99 	bl	800d1e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	701a      	strb	r2, [r3, #0]
      break;
 800c2be:	e06f      	b.n	800c3a0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d019      	beq.n	800c2fe <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c2d6:	23ff      	movs	r3, #255	; 0xff
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f000 f949 	bl	800c570 <USBH_Get_StringDesc>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c2e2:	7bbb      	ldrb	r3, [r7, #14]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d103      	bne.n	800c2f0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2206      	movs	r2, #6
 800c2ec:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c2ee:	e059      	b.n	800c3a4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c2f0:	7bbb      	ldrb	r3, [r7, #14]
 800c2f2:	2b03      	cmp	r3, #3
 800c2f4:	d156      	bne.n	800c3a4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2206      	movs	r2, #6
 800c2fa:	705a      	strb	r2, [r3, #1]
      break;
 800c2fc:	e052      	b.n	800c3a4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2206      	movs	r2, #6
 800c302:	705a      	strb	r2, [r3, #1]
      break;
 800c304:	e04e      	b.n	800c3a4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d019      	beq.n	800c344 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c31c:	23ff      	movs	r3, #255	; 0xff
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 f926 	bl	800c570 <USBH_Get_StringDesc>
 800c324:	4603      	mov	r3, r0
 800c326:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c328:	7bbb      	ldrb	r3, [r7, #14]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d103      	bne.n	800c336 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2207      	movs	r2, #7
 800c332:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c334:	e038      	b.n	800c3a8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c336:	7bbb      	ldrb	r3, [r7, #14]
 800c338:	2b03      	cmp	r3, #3
 800c33a:	d135      	bne.n	800c3a8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2207      	movs	r2, #7
 800c340:	705a      	strb	r2, [r3, #1]
      break;
 800c342:	e031      	b.n	800c3a8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2207      	movs	r2, #7
 800c348:	705a      	strb	r2, [r3, #1]
      break;
 800c34a:	e02d      	b.n	800c3a8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c352:	2b00      	cmp	r3, #0
 800c354:	d017      	beq.n	800c386 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c362:	23ff      	movs	r3, #255	; 0xff
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f000 f903 	bl	800c570 <USBH_Get_StringDesc>
 800c36a:	4603      	mov	r3, r0
 800c36c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c36e:	7bbb      	ldrb	r3, [r7, #14]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d102      	bne.n	800c37a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c374:	2300      	movs	r3, #0
 800c376:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c378:	e018      	b.n	800c3ac <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c37a:	7bbb      	ldrb	r3, [r7, #14]
 800c37c:	2b03      	cmp	r3, #3
 800c37e:	d115      	bne.n	800c3ac <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800c380:	2300      	movs	r3, #0
 800c382:	73fb      	strb	r3, [r7, #15]
      break;
 800c384:	e012      	b.n	800c3ac <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800c386:	2300      	movs	r3, #0
 800c388:	73fb      	strb	r3, [r7, #15]
      break;
 800c38a:	e00f      	b.n	800c3ac <USBH_HandleEnum+0x3bc>

    default:
      break;
 800c38c:	bf00      	nop
 800c38e:	e00e      	b.n	800c3ae <USBH_HandleEnum+0x3be>
      break;
 800c390:	bf00      	nop
 800c392:	e00c      	b.n	800c3ae <USBH_HandleEnum+0x3be>
      break;
 800c394:	bf00      	nop
 800c396:	e00a      	b.n	800c3ae <USBH_HandleEnum+0x3be>
      break;
 800c398:	bf00      	nop
 800c39a:	e008      	b.n	800c3ae <USBH_HandleEnum+0x3be>
      break;
 800c39c:	bf00      	nop
 800c39e:	e006      	b.n	800c3ae <USBH_HandleEnum+0x3be>
      break;
 800c3a0:	bf00      	nop
 800c3a2:	e004      	b.n	800c3ae <USBH_HandleEnum+0x3be>
      break;
 800c3a4:	bf00      	nop
 800c3a6:	e002      	b.n	800c3ae <USBH_HandleEnum+0x3be>
      break;
 800c3a8:	bf00      	nop
 800c3aa:	e000      	b.n	800c3ae <USBH_HandleEnum+0x3be>
      break;
 800c3ac:	bf00      	nop
  }
  return Status;
 800c3ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3710      	adds	r7, #16
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b083      	sub	sp, #12
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	683a      	ldr	r2, [r7, #0]
 800c3c6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c3ca:	bf00      	nop
 800c3cc:	370c      	adds	r7, #12
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d4:	4770      	bx	lr

0800c3d6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c3d6:	b580      	push	{r7, lr}
 800c3d8:	b082      	sub	sp, #8
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c3e4:	1c5a      	adds	r2, r3, #1
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 f804 	bl	800c3fa <USBH_HandleSof>
}
 800c3f2:	bf00      	nop
 800c3f4:	3708      	adds	r7, #8
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}

0800c3fa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c3fa:	b580      	push	{r7, lr}
 800c3fc:	b082      	sub	sp, #8
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	781b      	ldrb	r3, [r3, #0]
 800c406:	b2db      	uxtb	r3, r3
 800c408:	2b0b      	cmp	r3, #11
 800c40a:	d10a      	bne.n	800c422 <USBH_HandleSof+0x28>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c412:	2b00      	cmp	r3, #0
 800c414:	d005      	beq.n	800c422 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c41c:	699b      	ldr	r3, [r3, #24]
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	4798      	blx	r3
  }
}
 800c422:	bf00      	nop
 800c424:	3708      	adds	r7, #8
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}

0800c42a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c42a:	b480      	push	{r7}
 800c42c:	b083      	sub	sp, #12
 800c42e:	af00      	add	r7, sp, #0
 800c430:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2201      	movs	r2, #1
 800c436:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800c43a:	bf00      	nop
}
 800c43c:	370c      	adds	r7, #12
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr

0800c446 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c446:	b480      	push	{r7}
 800c448:	b083      	sub	sp, #12
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2200      	movs	r2, #0
 800c452:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c456:	bf00      	nop
}
 800c458:	370c      	adds	r7, #12
 800c45a:	46bd      	mov	sp, r7
 800c45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c460:	4770      	bx	lr

0800c462 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c462:	b480      	push	{r7}
 800c464:	b083      	sub	sp, #12
 800c466:	af00      	add	r7, sp, #0
 800c468:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2201      	movs	r2, #1
 800c46e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2200      	movs	r2, #0
 800c476:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2200      	movs	r2, #0
 800c47e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c482:	2300      	movs	r3, #0
}
 800c484:	4618      	mov	r0, r3
 800c486:	370c      	adds	r7, #12
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr

0800c490 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b082      	sub	sp, #8
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2201      	movs	r2, #1
 800c49c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f004 fd74 	bl	8010f9e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	791b      	ldrb	r3, [r3, #4]
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 fe91 	bl	800d1e4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	795b      	ldrb	r3, [r3, #5]
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f000 fe8b 	bl	800d1e4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c4ce:	2300      	movs	r3, #0
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3708      	adds	r7, #8
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b086      	sub	sp, #24
 800c4dc:	af02      	add	r7, sp, #8
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	460b      	mov	r3, r1
 800c4e2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c4ea:	78fb      	ldrb	r3, [r7, #3]
 800c4ec:	b29b      	uxth	r3, r3
 800c4ee:	9300      	str	r3, [sp, #0]
 800c4f0:	4613      	mov	r3, r2
 800c4f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c4f6:	2100      	movs	r1, #0
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f000 f864 	bl	800c5c6 <USBH_GetDescriptor>
 800c4fe:	4603      	mov	r3, r0
 800c500:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800c502:	7bfb      	ldrb	r3, [r7, #15]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d10a      	bne.n	800c51e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c514:	78fa      	ldrb	r2, [r7, #3]
 800c516:	b292      	uxth	r2, r2
 800c518:	4619      	mov	r1, r3
 800c51a:	f000 f918 	bl	800c74e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c51e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c520:	4618      	mov	r0, r3
 800c522:	3710      	adds	r7, #16
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b086      	sub	sp, #24
 800c52c:	af02      	add	r7, sp, #8
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	460b      	mov	r3, r1
 800c532:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	331c      	adds	r3, #28
 800c538:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c53a:	887b      	ldrh	r3, [r7, #2]
 800c53c:	9300      	str	r3, [sp, #0]
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c544:	2100      	movs	r1, #0
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 f83d 	bl	800c5c6 <USBH_GetDescriptor>
 800c54c:	4603      	mov	r3, r0
 800c54e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800c550:	7bfb      	ldrb	r3, [r7, #15]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d107      	bne.n	800c566 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800c556:	887b      	ldrh	r3, [r7, #2]
 800c558:	461a      	mov	r2, r3
 800c55a:	68b9      	ldr	r1, [r7, #8]
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 f987 	bl	800c870 <USBH_ParseCfgDesc>
 800c562:	4603      	mov	r3, r0
 800c564:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c566:	7bfb      	ldrb	r3, [r7, #15]
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3710      	adds	r7, #16
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}

0800c570 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b088      	sub	sp, #32
 800c574:	af02      	add	r7, sp, #8
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	607a      	str	r2, [r7, #4]
 800c57a:	461a      	mov	r2, r3
 800c57c:	460b      	mov	r3, r1
 800c57e:	72fb      	strb	r3, [r7, #11]
 800c580:	4613      	mov	r3, r2
 800c582:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800c584:	7afb      	ldrb	r3, [r7, #11]
 800c586:	b29b      	uxth	r3, r3
 800c588:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c58c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c594:	893b      	ldrh	r3, [r7, #8]
 800c596:	9300      	str	r3, [sp, #0]
 800c598:	460b      	mov	r3, r1
 800c59a:	2100      	movs	r1, #0
 800c59c:	68f8      	ldr	r0, [r7, #12]
 800c59e:	f000 f812 	bl	800c5c6 <USBH_GetDescriptor>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c5a6:	7dfb      	ldrb	r3, [r7, #23]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d107      	bne.n	800c5bc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c5b2:	893a      	ldrh	r2, [r7, #8]
 800c5b4:	6879      	ldr	r1, [r7, #4]
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f000 fb24 	bl	800cc04 <USBH_ParseStringDesc>
  }

  return status;
 800c5bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3718      	adds	r7, #24
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}

0800c5c6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c5c6:	b580      	push	{r7, lr}
 800c5c8:	b084      	sub	sp, #16
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	60f8      	str	r0, [r7, #12]
 800c5ce:	607b      	str	r3, [r7, #4]
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	72fb      	strb	r3, [r7, #11]
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	789b      	ldrb	r3, [r3, #2]
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d11c      	bne.n	800c61a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c5e0:	7afb      	ldrb	r3, [r7, #11]
 800c5e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c5e6:	b2da      	uxtb	r2, r3
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	2206      	movs	r2, #6
 800c5f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	893a      	ldrh	r2, [r7, #8]
 800c5f6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c5f8:	893b      	ldrh	r3, [r7, #8]
 800c5fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c5fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c602:	d104      	bne.n	800c60e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f240 4209 	movw	r2, #1033	; 0x409
 800c60a:	829a      	strh	r2, [r3, #20]
 800c60c:	e002      	b.n	800c614 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2200      	movs	r2, #0
 800c612:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	8b3a      	ldrh	r2, [r7, #24]
 800c618:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c61a:	8b3b      	ldrh	r3, [r7, #24]
 800c61c:	461a      	mov	r2, r3
 800c61e:	6879      	ldr	r1, [r7, #4]
 800c620:	68f8      	ldr	r0, [r7, #12]
 800c622:	f000 fb3d 	bl	800cca0 <USBH_CtlReq>
 800c626:	4603      	mov	r3, r0
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3710      	adds	r7, #16
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
 800c638:	460b      	mov	r3, r1
 800c63a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	789b      	ldrb	r3, [r3, #2]
 800c640:	2b01      	cmp	r3, #1
 800c642:	d10f      	bne.n	800c664 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2200      	movs	r2, #0
 800c648:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2205      	movs	r2, #5
 800c64e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c650:	78fb      	ldrb	r3, [r7, #3]
 800c652:	b29a      	uxth	r2, r3
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2200      	movs	r2, #0
 800c65c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2200      	movs	r2, #0
 800c662:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c664:	2200      	movs	r2, #0
 800c666:	2100      	movs	r1, #0
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f000 fb19 	bl	800cca0 <USBH_CtlReq>
 800c66e:	4603      	mov	r3, r0
}
 800c670:	4618      	mov	r0, r3
 800c672:	3708      	adds	r7, #8
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}

0800c678 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	460b      	mov	r3, r1
 800c682:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	789b      	ldrb	r3, [r3, #2]
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d10e      	bne.n	800c6aa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2200      	movs	r2, #0
 800c690:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2209      	movs	r2, #9
 800c696:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	887a      	ldrh	r2, [r7, #2]
 800c69c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	2100      	movs	r1, #0
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 faf6 	bl	800cca0 <USBH_CtlReq>
 800c6b4:	4603      	mov	r3, r0
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3708      	adds	r7, #8
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}

0800c6be <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c6be:	b580      	push	{r7, lr}
 800c6c0:	b082      	sub	sp, #8
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	6078      	str	r0, [r7, #4]
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	789b      	ldrb	r3, [r3, #2]
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d10f      	bne.n	800c6f2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2203      	movs	r2, #3
 800c6dc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c6de:	78fb      	ldrb	r3, [r7, #3]
 800c6e0:	b29a      	uxth	r2, r3
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	2100      	movs	r1, #0
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f000 fad2 	bl	800cca0 <USBH_CtlReq>
 800c6fc:	4603      	mov	r3, r0
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3708      	adds	r7, #8
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}

0800c706 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c706:	b580      	push	{r7, lr}
 800c708:	b082      	sub	sp, #8
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
 800c70e:	460b      	mov	r3, r1
 800c710:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	789b      	ldrb	r3, [r3, #2]
 800c716:	2b01      	cmp	r3, #1
 800c718:	d10f      	bne.n	800c73a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2202      	movs	r2, #2
 800c71e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2201      	movs	r2, #1
 800c724:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2200      	movs	r2, #0
 800c72a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c72c:	78fb      	ldrb	r3, [r7, #3]
 800c72e:	b29a      	uxth	r2, r3
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2200      	movs	r2, #0
 800c738:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800c73a:	2200      	movs	r2, #0
 800c73c:	2100      	movs	r1, #0
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f000 faae 	bl	800cca0 <USBH_CtlReq>
 800c744:	4603      	mov	r3, r0
}
 800c746:	4618      	mov	r0, r3
 800c748:	3708      	adds	r7, #8
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}

0800c74e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c74e:	b480      	push	{r7}
 800c750:	b085      	sub	sp, #20
 800c752:	af00      	add	r7, sp, #0
 800c754:	60f8      	str	r0, [r7, #12]
 800c756:	60b9      	str	r1, [r7, #8]
 800c758:	4613      	mov	r3, r2
 800c75a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	781a      	ldrb	r2, [r3, #0]
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	785a      	ldrb	r2, [r3, #1]
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	3302      	adds	r3, #2
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	b29a      	uxth	r2, r3
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	3303      	adds	r3, #3
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	b29b      	uxth	r3, r3
 800c77c:	021b      	lsls	r3, r3, #8
 800c77e:	b29b      	uxth	r3, r3
 800c780:	4313      	orrs	r3, r2
 800c782:	b29a      	uxth	r2, r3
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	791a      	ldrb	r2, [r3, #4]
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	795a      	ldrb	r2, [r3, #5]
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	799a      	ldrb	r2, [r3, #6]
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	79da      	ldrb	r2, [r3, #7]
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	79db      	ldrb	r3, [r3, #7]
 800c7ac:	2b20      	cmp	r3, #32
 800c7ae:	dc11      	bgt.n	800c7d4 <USBH_ParseDevDesc+0x86>
 800c7b0:	2b08      	cmp	r3, #8
 800c7b2:	db16      	blt.n	800c7e2 <USBH_ParseDevDesc+0x94>
 800c7b4:	3b08      	subs	r3, #8
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	fa02 f303 	lsl.w	r3, r2, r3
 800c7bc:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800c7c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	bf14      	ite	ne
 800c7c8:	2301      	movne	r3, #1
 800c7ca:	2300      	moveq	r3, #0
 800c7cc:	b2db      	uxtb	r3, r3
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d102      	bne.n	800c7d8 <USBH_ParseDevDesc+0x8a>
 800c7d2:	e006      	b.n	800c7e2 <USBH_ParseDevDesc+0x94>
 800c7d4:	2b40      	cmp	r3, #64	; 0x40
 800c7d6:	d104      	bne.n	800c7e2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	79da      	ldrb	r2, [r3, #7]
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	71da      	strb	r2, [r3, #7]
      break;
 800c7e0:	e003      	b.n	800c7ea <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	2240      	movs	r2, #64	; 0x40
 800c7e6:	71da      	strb	r2, [r3, #7]
      break;
 800c7e8:	bf00      	nop
  }

  if (length > 8U)
 800c7ea:	88fb      	ldrh	r3, [r7, #6]
 800c7ec:	2b08      	cmp	r3, #8
 800c7ee:	d939      	bls.n	800c864 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	3308      	adds	r3, #8
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	b29a      	uxth	r2, r3
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	3309      	adds	r3, #9
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	b29b      	uxth	r3, r3
 800c800:	021b      	lsls	r3, r3, #8
 800c802:	b29b      	uxth	r3, r3
 800c804:	4313      	orrs	r3, r2
 800c806:	b29a      	uxth	r2, r3
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	330a      	adds	r3, #10
 800c810:	781b      	ldrb	r3, [r3, #0]
 800c812:	b29a      	uxth	r2, r3
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	330b      	adds	r3, #11
 800c818:	781b      	ldrb	r3, [r3, #0]
 800c81a:	b29b      	uxth	r3, r3
 800c81c:	021b      	lsls	r3, r3, #8
 800c81e:	b29b      	uxth	r3, r3
 800c820:	4313      	orrs	r3, r2
 800c822:	b29a      	uxth	r2, r3
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	330c      	adds	r3, #12
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	b29a      	uxth	r2, r3
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	330d      	adds	r3, #13
 800c834:	781b      	ldrb	r3, [r3, #0]
 800c836:	b29b      	uxth	r3, r3
 800c838:	021b      	lsls	r3, r3, #8
 800c83a:	b29b      	uxth	r3, r3
 800c83c:	4313      	orrs	r3, r2
 800c83e:	b29a      	uxth	r2, r3
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	7b9a      	ldrb	r2, [r3, #14]
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	7bda      	ldrb	r2, [r3, #15]
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	7c1a      	ldrb	r2, [r3, #16]
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	7c5a      	ldrb	r2, [r3, #17]
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	745a      	strb	r2, [r3, #17]
  }
}
 800c864:	bf00      	nop
 800c866:	3714      	adds	r7, #20
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr

0800c870 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b08c      	sub	sp, #48	; 0x30
 800c874:	af00      	add	r7, sp, #0
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	60b9      	str	r1, [r7, #8]
 800c87a:	4613      	mov	r3, r2
 800c87c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c884:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c886:	2300      	movs	r3, #0
 800c888:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c890:	2300      	movs	r3, #0
 800c892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800c896:	2300      	movs	r3, #0
 800c898:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	781a      	ldrb	r2, [r3, #0]
 800c8a4:	6a3b      	ldr	r3, [r7, #32]
 800c8a6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	785a      	ldrb	r2, [r3, #1]
 800c8ac:	6a3b      	ldr	r3, [r7, #32]
 800c8ae:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	3302      	adds	r3, #2
 800c8b4:	781b      	ldrb	r3, [r3, #0]
 800c8b6:	b29a      	uxth	r2, r3
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	3303      	adds	r3, #3
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	021b      	lsls	r3, r3, #8
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8cc:	bf28      	it	cs
 800c8ce:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800c8d2:	b29a      	uxth	r2, r3
 800c8d4:	6a3b      	ldr	r3, [r7, #32]
 800c8d6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	791a      	ldrb	r2, [r3, #4]
 800c8dc:	6a3b      	ldr	r3, [r7, #32]
 800c8de:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	795a      	ldrb	r2, [r3, #5]
 800c8e4:	6a3b      	ldr	r3, [r7, #32]
 800c8e6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	799a      	ldrb	r2, [r3, #6]
 800c8ec:	6a3b      	ldr	r3, [r7, #32]
 800c8ee:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	79da      	ldrb	r2, [r3, #7]
 800c8f4:	6a3b      	ldr	r3, [r7, #32]
 800c8f6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	7a1a      	ldrb	r2, [r3, #8]
 800c8fc:	6a3b      	ldr	r3, [r7, #32]
 800c8fe:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800c900:	6a3b      	ldr	r3, [r7, #32]
 800c902:	781b      	ldrb	r3, [r3, #0]
 800c904:	2b09      	cmp	r3, #9
 800c906:	d002      	beq.n	800c90e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c908:	6a3b      	ldr	r3, [r7, #32]
 800c90a:	2209      	movs	r2, #9
 800c90c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c90e:	88fb      	ldrh	r3, [r7, #6]
 800c910:	2b09      	cmp	r3, #9
 800c912:	f240 809d 	bls.w	800ca50 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800c916:	2309      	movs	r3, #9
 800c918:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c91a:	2300      	movs	r3, #0
 800c91c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c91e:	e081      	b.n	800ca24 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c920:	f107 0316 	add.w	r3, r7, #22
 800c924:	4619      	mov	r1, r3
 800c926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c928:	f000 f99f 	bl	800cc6a <USBH_GetNextDesc>
 800c92c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c930:	785b      	ldrb	r3, [r3, #1]
 800c932:	2b04      	cmp	r3, #4
 800c934:	d176      	bne.n	800ca24 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	2b09      	cmp	r3, #9
 800c93c:	d002      	beq.n	800c944 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c940:	2209      	movs	r2, #9
 800c942:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c944:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c948:	221a      	movs	r2, #26
 800c94a:	fb02 f303 	mul.w	r3, r2, r3
 800c94e:	3308      	adds	r3, #8
 800c950:	6a3a      	ldr	r2, [r7, #32]
 800c952:	4413      	add	r3, r2
 800c954:	3302      	adds	r3, #2
 800c956:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c958:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c95a:	69f8      	ldr	r0, [r7, #28]
 800c95c:	f000 f87e 	bl	800ca5c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c960:	2300      	movs	r3, #0
 800c962:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c966:	2300      	movs	r3, #0
 800c968:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c96a:	e043      	b.n	800c9f4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c96c:	f107 0316 	add.w	r3, r7, #22
 800c970:	4619      	mov	r1, r3
 800c972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c974:	f000 f979 	bl	800cc6a <USBH_GetNextDesc>
 800c978:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97c:	785b      	ldrb	r3, [r3, #1]
 800c97e:	2b05      	cmp	r3, #5
 800c980:	d138      	bne.n	800c9f4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800c982:	69fb      	ldr	r3, [r7, #28]
 800c984:	795b      	ldrb	r3, [r3, #5]
 800c986:	2b01      	cmp	r3, #1
 800c988:	d10f      	bne.n	800c9aa <USBH_ParseCfgDesc+0x13a>
 800c98a:	69fb      	ldr	r3, [r7, #28]
 800c98c:	799b      	ldrb	r3, [r3, #6]
 800c98e:	2b02      	cmp	r3, #2
 800c990:	d10b      	bne.n	800c9aa <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c992:	69fb      	ldr	r3, [r7, #28]
 800c994:	79db      	ldrb	r3, [r3, #7]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d10f      	bne.n	800c9ba <USBH_ParseCfgDesc+0x14a>
 800c99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	2b09      	cmp	r3, #9
 800c9a0:	d00b      	beq.n	800c9ba <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800c9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a4:	2209      	movs	r2, #9
 800c9a6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c9a8:	e007      	b.n	800c9ba <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800c9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	2b07      	cmp	r3, #7
 800c9b0:	d004      	beq.n	800c9bc <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b4:	2207      	movs	r2, #7
 800c9b6:	701a      	strb	r2, [r3, #0]
 800c9b8:	e000      	b.n	800c9bc <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c9ba:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c9bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9c0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c9c4:	3201      	adds	r2, #1
 800c9c6:	00d2      	lsls	r2, r2, #3
 800c9c8:	211a      	movs	r1, #26
 800c9ca:	fb01 f303 	mul.w	r3, r1, r3
 800c9ce:	4413      	add	r3, r2
 800c9d0:	3308      	adds	r3, #8
 800c9d2:	6a3a      	ldr	r2, [r7, #32]
 800c9d4:	4413      	add	r3, r2
 800c9d6:	3304      	adds	r3, #4
 800c9d8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c9da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9dc:	69b9      	ldr	r1, [r7, #24]
 800c9de:	68f8      	ldr	r0, [r7, #12]
 800c9e0:	f000 f86b 	bl	800caba <USBH_ParseEPDesc>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800c9ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c9ee:	3301      	adds	r3, #1
 800c9f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c9f4:	69fb      	ldr	r3, [r7, #28]
 800c9f6:	791b      	ldrb	r3, [r3, #4]
 800c9f8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d204      	bcs.n	800ca0a <USBH_ParseCfgDesc+0x19a>
 800ca00:	6a3b      	ldr	r3, [r7, #32]
 800ca02:	885a      	ldrh	r2, [r3, #2]
 800ca04:	8afb      	ldrh	r3, [r7, #22]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d8b0      	bhi.n	800c96c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800ca0a:	69fb      	ldr	r3, [r7, #28]
 800ca0c:	791b      	ldrb	r3, [r3, #4]
 800ca0e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d201      	bcs.n	800ca1a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800ca16:	2303      	movs	r3, #3
 800ca18:	e01c      	b.n	800ca54 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800ca1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca1e:	3301      	adds	r3, #1
 800ca20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ca24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	d805      	bhi.n	800ca38 <USBH_ParseCfgDesc+0x1c8>
 800ca2c:	6a3b      	ldr	r3, [r7, #32]
 800ca2e:	885a      	ldrh	r2, [r3, #2]
 800ca30:	8afb      	ldrh	r3, [r7, #22]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	f63f af74 	bhi.w	800c920 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800ca38:	6a3b      	ldr	r3, [r7, #32]
 800ca3a:	791b      	ldrb	r3, [r3, #4]
 800ca3c:	2b02      	cmp	r3, #2
 800ca3e:	bf28      	it	cs
 800ca40:	2302      	movcs	r3, #2
 800ca42:	b2db      	uxtb	r3, r3
 800ca44:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d201      	bcs.n	800ca50 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800ca4c:	2303      	movs	r3, #3
 800ca4e:	e001      	b.n	800ca54 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800ca50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3730      	adds	r7, #48	; 0x30
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b083      	sub	sp, #12
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	781a      	ldrb	r2, [r3, #0]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	785a      	ldrb	r2, [r3, #1]
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	789a      	ldrb	r2, [r3, #2]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	78da      	ldrb	r2, [r3, #3]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	791a      	ldrb	r2, [r3, #4]
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	795a      	ldrb	r2, [r3, #5]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	799a      	ldrb	r2, [r3, #6]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	79da      	ldrb	r2, [r3, #7]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	7a1a      	ldrb	r2, [r3, #8]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	721a      	strb	r2, [r3, #8]
}
 800caae:	bf00      	nop
 800cab0:	370c      	adds	r7, #12
 800cab2:	46bd      	mov	sp, r7
 800cab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab8:	4770      	bx	lr

0800caba <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800caba:	b480      	push	{r7}
 800cabc:	b087      	sub	sp, #28
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	60f8      	str	r0, [r7, #12]
 800cac2:	60b9      	str	r1, [r7, #8]
 800cac4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800cac6:	2300      	movs	r3, #0
 800cac8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	781a      	ldrb	r2, [r3, #0]
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	785a      	ldrb	r2, [r3, #1]
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	789a      	ldrb	r2, [r3, #2]
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	78da      	ldrb	r2, [r3, #3]
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	3304      	adds	r3, #4
 800caee:	781b      	ldrb	r3, [r3, #0]
 800caf0:	b29a      	uxth	r2, r3
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	3305      	adds	r3, #5
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	021b      	lsls	r3, r3, #8
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	4313      	orrs	r3, r2
 800cb00:	b29a      	uxth	r2, r3
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	799a      	ldrb	r2, [r3, #6]
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	889b      	ldrh	r3, [r3, #4]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d102      	bne.n	800cb1c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800cb16:	2303      	movs	r3, #3
 800cb18:	75fb      	strb	r3, [r7, #23]
 800cb1a:	e033      	b.n	800cb84 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	889b      	ldrh	r3, [r3, #4]
 800cb20:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800cb24:	f023 0307 	bic.w	r3, r3, #7
 800cb28:	b29a      	uxth	r2, r3
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	889b      	ldrh	r3, [r3, #4]
 800cb32:	b21a      	sxth	r2, r3
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	3304      	adds	r3, #4
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	b299      	uxth	r1, r3
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	3305      	adds	r3, #5
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	021b      	lsls	r3, r3, #8
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	430b      	orrs	r3, r1
 800cb4a:	b29b      	uxth	r3, r3
 800cb4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d110      	bne.n	800cb76 <USBH_ParseEPDesc+0xbc>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	3304      	adds	r3, #4
 800cb58:	781b      	ldrb	r3, [r3, #0]
 800cb5a:	b299      	uxth	r1, r3
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	3305      	adds	r3, #5
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	b29b      	uxth	r3, r3
 800cb64:	021b      	lsls	r3, r3, #8
 800cb66:	b29b      	uxth	r3, r3
 800cb68:	430b      	orrs	r3, r1
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	b21b      	sxth	r3, r3
 800cb6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb72:	b21b      	sxth	r3, r3
 800cb74:	e001      	b.n	800cb7a <USBH_ParseEPDesc+0xc0>
 800cb76:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb7a:	4313      	orrs	r3, r2
 800cb7c:	b21b      	sxth	r3, r3
 800cb7e:	b29a      	uxth	r2, r3
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d116      	bne.n	800cbbc <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	78db      	ldrb	r3, [r3, #3]
 800cb92:	f003 0303 	and.w	r3, r3, #3
 800cb96:	2b01      	cmp	r3, #1
 800cb98:	d005      	beq.n	800cba6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	78db      	ldrb	r3, [r3, #3]
 800cb9e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800cba2:	2b03      	cmp	r3, #3
 800cba4:	d127      	bne.n	800cbf6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	799b      	ldrb	r3, [r3, #6]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d003      	beq.n	800cbb6 <USBH_ParseEPDesc+0xfc>
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	799b      	ldrb	r3, [r3, #6]
 800cbb2:	2b10      	cmp	r3, #16
 800cbb4:	d91f      	bls.n	800cbf6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800cbb6:	2303      	movs	r3, #3
 800cbb8:	75fb      	strb	r3, [r7, #23]
 800cbba:	e01c      	b.n	800cbf6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	78db      	ldrb	r3, [r3, #3]
 800cbc0:	f003 0303 	and.w	r3, r3, #3
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d10a      	bne.n	800cbde <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	799b      	ldrb	r3, [r3, #6]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d003      	beq.n	800cbd8 <USBH_ParseEPDesc+0x11e>
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	799b      	ldrb	r3, [r3, #6]
 800cbd4:	2b10      	cmp	r3, #16
 800cbd6:	d90e      	bls.n	800cbf6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800cbd8:	2303      	movs	r3, #3
 800cbda:	75fb      	strb	r3, [r7, #23]
 800cbdc:	e00b      	b.n	800cbf6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	78db      	ldrb	r3, [r3, #3]
 800cbe2:	f003 0303 	and.w	r3, r3, #3
 800cbe6:	2b03      	cmp	r3, #3
 800cbe8:	d105      	bne.n	800cbf6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	799b      	ldrb	r3, [r3, #6]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d101      	bne.n	800cbf6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800cbf2:	2303      	movs	r3, #3
 800cbf4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800cbf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	371c      	adds	r7, #28
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b087      	sub	sp, #28
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	60f8      	str	r0, [r7, #12]
 800cc0c:	60b9      	str	r1, [r7, #8]
 800cc0e:	4613      	mov	r3, r2
 800cc10:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	3301      	adds	r3, #1
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	2b03      	cmp	r3, #3
 800cc1a:	d120      	bne.n	800cc5e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	1e9a      	subs	r2, r3, #2
 800cc22:	88fb      	ldrh	r3, [r7, #6]
 800cc24:	4293      	cmp	r3, r2
 800cc26:	bf28      	it	cs
 800cc28:	4613      	movcs	r3, r2
 800cc2a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	3302      	adds	r3, #2
 800cc30:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800cc32:	2300      	movs	r3, #0
 800cc34:	82fb      	strh	r3, [r7, #22]
 800cc36:	e00b      	b.n	800cc50 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800cc38:	8afb      	ldrh	r3, [r7, #22]
 800cc3a:	68fa      	ldr	r2, [r7, #12]
 800cc3c:	4413      	add	r3, r2
 800cc3e:	781a      	ldrb	r2, [r3, #0]
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	701a      	strb	r2, [r3, #0]
      pdest++;
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	3301      	adds	r3, #1
 800cc48:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800cc4a:	8afb      	ldrh	r3, [r7, #22]
 800cc4c:	3302      	adds	r3, #2
 800cc4e:	82fb      	strh	r3, [r7, #22]
 800cc50:	8afa      	ldrh	r2, [r7, #22]
 800cc52:	8abb      	ldrh	r3, [r7, #20]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d3ef      	bcc.n	800cc38 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	701a      	strb	r2, [r3, #0]
  }
}
 800cc5e:	bf00      	nop
 800cc60:	371c      	adds	r7, #28
 800cc62:	46bd      	mov	sp, r7
 800cc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc68:	4770      	bx	lr

0800cc6a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800cc6a:	b480      	push	{r7}
 800cc6c:	b085      	sub	sp, #20
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	6078      	str	r0, [r7, #4]
 800cc72:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	881a      	ldrh	r2, [r3, #0]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	b29b      	uxth	r3, r3
 800cc7e:	4413      	add	r3, r2
 800cc80:	b29a      	uxth	r2, r3
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	4413      	add	r3, r2
 800cc90:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cc92:	68fb      	ldr	r3, [r7, #12]
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3714      	adds	r7, #20
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b086      	sub	sp, #24
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	60b9      	str	r1, [r7, #8]
 800ccaa:	4613      	mov	r3, r2
 800ccac:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ccae:	2301      	movs	r3, #1
 800ccb0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	789b      	ldrb	r3, [r3, #2]
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d002      	beq.n	800ccc0 <USBH_CtlReq+0x20>
 800ccba:	2b02      	cmp	r3, #2
 800ccbc:	d00f      	beq.n	800ccde <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ccbe:	e027      	b.n	800cd10 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	68ba      	ldr	r2, [r7, #8]
 800ccc4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	88fa      	ldrh	r2, [r7, #6]
 800ccca:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	2201      	movs	r2, #1
 800ccd0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2202      	movs	r2, #2
 800ccd6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ccd8:	2301      	movs	r3, #1
 800ccda:	75fb      	strb	r3, [r7, #23]
      break;
 800ccdc:	e018      	b.n	800cd10 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ccde:	68f8      	ldr	r0, [r7, #12]
 800cce0:	f000 f81c 	bl	800cd1c <USBH_HandleControl>
 800cce4:	4603      	mov	r3, r0
 800cce6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800cce8:	7dfb      	ldrb	r3, [r7, #23]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d002      	beq.n	800ccf4 <USBH_CtlReq+0x54>
 800ccee:	7dfb      	ldrb	r3, [r7, #23]
 800ccf0:	2b03      	cmp	r3, #3
 800ccf2:	d106      	bne.n	800cd02 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	2201      	movs	r2, #1
 800ccf8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	761a      	strb	r2, [r3, #24]
      break;
 800cd00:	e005      	b.n	800cd0e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800cd02:	7dfb      	ldrb	r3, [r7, #23]
 800cd04:	2b02      	cmp	r3, #2
 800cd06:	d102      	bne.n	800cd0e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	709a      	strb	r2, [r3, #2]
      break;
 800cd0e:	bf00      	nop
  }
  return status;
 800cd10:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3718      	adds	r7, #24
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
	...

0800cd1c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b086      	sub	sp, #24
 800cd20:	af02      	add	r7, sp, #8
 800cd22:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800cd24:	2301      	movs	r3, #1
 800cd26:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	7e1b      	ldrb	r3, [r3, #24]
 800cd30:	3b01      	subs	r3, #1
 800cd32:	2b0a      	cmp	r3, #10
 800cd34:	f200 8156 	bhi.w	800cfe4 <USBH_HandleControl+0x2c8>
 800cd38:	a201      	add	r2, pc, #4	; (adr r2, 800cd40 <USBH_HandleControl+0x24>)
 800cd3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd3e:	bf00      	nop
 800cd40:	0800cd6d 	.word	0x0800cd6d
 800cd44:	0800cd87 	.word	0x0800cd87
 800cd48:	0800cdf1 	.word	0x0800cdf1
 800cd4c:	0800ce17 	.word	0x0800ce17
 800cd50:	0800ce4f 	.word	0x0800ce4f
 800cd54:	0800ce79 	.word	0x0800ce79
 800cd58:	0800cecb 	.word	0x0800cecb
 800cd5c:	0800ceed 	.word	0x0800ceed
 800cd60:	0800cf29 	.word	0x0800cf29
 800cd64:	0800cf4f 	.word	0x0800cf4f
 800cd68:	0800cf8d 	.word	0x0800cf8d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f103 0110 	add.w	r1, r3, #16
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	795b      	ldrb	r3, [r3, #5]
 800cd76:	461a      	mov	r2, r3
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f000 f943 	bl	800d004 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2202      	movs	r2, #2
 800cd82:	761a      	strb	r2, [r3, #24]
      break;
 800cd84:	e139      	b.n	800cffa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	795b      	ldrb	r3, [r3, #5]
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f004 f9f5 	bl	801117c <USBH_LL_GetURBState>
 800cd92:	4603      	mov	r3, r0
 800cd94:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800cd96:	7bbb      	ldrb	r3, [r7, #14]
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d11e      	bne.n	800cdda <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	7c1b      	ldrb	r3, [r3, #16]
 800cda0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cda4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	8adb      	ldrh	r3, [r3, #22]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d00a      	beq.n	800cdc4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800cdae:	7b7b      	ldrb	r3, [r7, #13]
 800cdb0:	2b80      	cmp	r3, #128	; 0x80
 800cdb2:	d103      	bne.n	800cdbc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2203      	movs	r2, #3
 800cdb8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cdba:	e115      	b.n	800cfe8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2205      	movs	r2, #5
 800cdc0:	761a      	strb	r2, [r3, #24]
      break;
 800cdc2:	e111      	b.n	800cfe8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800cdc4:	7b7b      	ldrb	r3, [r7, #13]
 800cdc6:	2b80      	cmp	r3, #128	; 0x80
 800cdc8:	d103      	bne.n	800cdd2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2209      	movs	r2, #9
 800cdce:	761a      	strb	r2, [r3, #24]
      break;
 800cdd0:	e10a      	b.n	800cfe8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2207      	movs	r2, #7
 800cdd6:	761a      	strb	r2, [r3, #24]
      break;
 800cdd8:	e106      	b.n	800cfe8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800cdda:	7bbb      	ldrb	r3, [r7, #14]
 800cddc:	2b04      	cmp	r3, #4
 800cdde:	d003      	beq.n	800cde8 <USBH_HandleControl+0xcc>
 800cde0:	7bbb      	ldrb	r3, [r7, #14]
 800cde2:	2b02      	cmp	r3, #2
 800cde4:	f040 8100 	bne.w	800cfe8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	220b      	movs	r2, #11
 800cdec:	761a      	strb	r2, [r3, #24]
      break;
 800cdee:	e0fb      	b.n	800cfe8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cdf6:	b29a      	uxth	r2, r3
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6899      	ldr	r1, [r3, #8]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	899a      	ldrh	r2, [r3, #12]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	791b      	ldrb	r3, [r3, #4]
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f000 f93a 	bl	800d082 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2204      	movs	r2, #4
 800ce12:	761a      	strb	r2, [r3, #24]
      break;
 800ce14:	e0f1      	b.n	800cffa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	791b      	ldrb	r3, [r3, #4]
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f004 f9ad 	bl	801117c <USBH_LL_GetURBState>
 800ce22:	4603      	mov	r3, r0
 800ce24:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ce26:	7bbb      	ldrb	r3, [r7, #14]
 800ce28:	2b01      	cmp	r3, #1
 800ce2a:	d102      	bne.n	800ce32 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2209      	movs	r2, #9
 800ce30:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ce32:	7bbb      	ldrb	r3, [r7, #14]
 800ce34:	2b05      	cmp	r3, #5
 800ce36:	d102      	bne.n	800ce3e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ce38:	2303      	movs	r3, #3
 800ce3a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ce3c:	e0d6      	b.n	800cfec <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ce3e:	7bbb      	ldrb	r3, [r7, #14]
 800ce40:	2b04      	cmp	r3, #4
 800ce42:	f040 80d3 	bne.w	800cfec <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	220b      	movs	r2, #11
 800ce4a:	761a      	strb	r2, [r3, #24]
      break;
 800ce4c:	e0ce      	b.n	800cfec <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6899      	ldr	r1, [r3, #8]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	899a      	ldrh	r2, [r3, #12]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	795b      	ldrb	r3, [r3, #5]
 800ce5a:	2001      	movs	r0, #1
 800ce5c:	9000      	str	r0, [sp, #0]
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f000 f8ea 	bl	800d038 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ce6a:	b29a      	uxth	r2, r3
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2206      	movs	r2, #6
 800ce74:	761a      	strb	r2, [r3, #24]
      break;
 800ce76:	e0c0      	b.n	800cffa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	795b      	ldrb	r3, [r3, #5]
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f004 f97c 	bl	801117c <USBH_LL_GetURBState>
 800ce84:	4603      	mov	r3, r0
 800ce86:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ce88:	7bbb      	ldrb	r3, [r7, #14]
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d103      	bne.n	800ce96 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2207      	movs	r2, #7
 800ce92:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ce94:	e0ac      	b.n	800cff0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ce96:	7bbb      	ldrb	r3, [r7, #14]
 800ce98:	2b05      	cmp	r3, #5
 800ce9a:	d105      	bne.n	800cea8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	220c      	movs	r2, #12
 800cea0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800cea2:	2303      	movs	r3, #3
 800cea4:	73fb      	strb	r3, [r7, #15]
      break;
 800cea6:	e0a3      	b.n	800cff0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cea8:	7bbb      	ldrb	r3, [r7, #14]
 800ceaa:	2b02      	cmp	r3, #2
 800ceac:	d103      	bne.n	800ceb6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2205      	movs	r2, #5
 800ceb2:	761a      	strb	r2, [r3, #24]
      break;
 800ceb4:	e09c      	b.n	800cff0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ceb6:	7bbb      	ldrb	r3, [r7, #14]
 800ceb8:	2b04      	cmp	r3, #4
 800ceba:	f040 8099 	bne.w	800cff0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	220b      	movs	r2, #11
 800cec2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800cec4:	2302      	movs	r3, #2
 800cec6:	73fb      	strb	r3, [r7, #15]
      break;
 800cec8:	e092      	b.n	800cff0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	791b      	ldrb	r3, [r3, #4]
 800cece:	2200      	movs	r2, #0
 800ced0:	2100      	movs	r1, #0
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f000 f8d5 	bl	800d082 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cede:	b29a      	uxth	r2, r3
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2208      	movs	r2, #8
 800cee8:	761a      	strb	r2, [r3, #24]

      break;
 800ceea:	e086      	b.n	800cffa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	791b      	ldrb	r3, [r3, #4]
 800cef0:	4619      	mov	r1, r3
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f004 f942 	bl	801117c <USBH_LL_GetURBState>
 800cef8:	4603      	mov	r3, r0
 800cefa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cefc:	7bbb      	ldrb	r3, [r7, #14]
 800cefe:	2b01      	cmp	r3, #1
 800cf00:	d105      	bne.n	800cf0e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	220d      	movs	r2, #13
 800cf06:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cf0c:	e072      	b.n	800cff4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800cf0e:	7bbb      	ldrb	r3, [r7, #14]
 800cf10:	2b04      	cmp	r3, #4
 800cf12:	d103      	bne.n	800cf1c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	220b      	movs	r2, #11
 800cf18:	761a      	strb	r2, [r3, #24]
      break;
 800cf1a:	e06b      	b.n	800cff4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800cf1c:	7bbb      	ldrb	r3, [r7, #14]
 800cf1e:	2b05      	cmp	r3, #5
 800cf20:	d168      	bne.n	800cff4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800cf22:	2303      	movs	r3, #3
 800cf24:	73fb      	strb	r3, [r7, #15]
      break;
 800cf26:	e065      	b.n	800cff4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	795b      	ldrb	r3, [r3, #5]
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	9200      	str	r2, [sp, #0]
 800cf30:	2200      	movs	r2, #0
 800cf32:	2100      	movs	r1, #0
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f000 f87f 	bl	800d038 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cf40:	b29a      	uxth	r2, r3
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	220a      	movs	r2, #10
 800cf4a:	761a      	strb	r2, [r3, #24]
      break;
 800cf4c:	e055      	b.n	800cffa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	795b      	ldrb	r3, [r3, #5]
 800cf52:	4619      	mov	r1, r3
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f004 f911 	bl	801117c <USBH_LL_GetURBState>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800cf5e:	7bbb      	ldrb	r3, [r7, #14]
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d105      	bne.n	800cf70 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800cf64:	2300      	movs	r3, #0
 800cf66:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	220d      	movs	r2, #13
 800cf6c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cf6e:	e043      	b.n	800cff8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cf70:	7bbb      	ldrb	r3, [r7, #14]
 800cf72:	2b02      	cmp	r3, #2
 800cf74:	d103      	bne.n	800cf7e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2209      	movs	r2, #9
 800cf7a:	761a      	strb	r2, [r3, #24]
      break;
 800cf7c:	e03c      	b.n	800cff8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800cf7e:	7bbb      	ldrb	r3, [r7, #14]
 800cf80:	2b04      	cmp	r3, #4
 800cf82:	d139      	bne.n	800cff8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	220b      	movs	r2, #11
 800cf88:	761a      	strb	r2, [r3, #24]
      break;
 800cf8a:	e035      	b.n	800cff8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	7e5b      	ldrb	r3, [r3, #25]
 800cf90:	3301      	adds	r3, #1
 800cf92:	b2da      	uxtb	r2, r3
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	765a      	strb	r2, [r3, #25]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	7e5b      	ldrb	r3, [r3, #25]
 800cf9c:	2b02      	cmp	r3, #2
 800cf9e:	d806      	bhi.n	800cfae <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2201      	movs	r2, #1
 800cfa4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2201      	movs	r2, #1
 800cfaa:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800cfac:	e025      	b.n	800cffa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cfb4:	2106      	movs	r1, #6
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	795b      	ldrb	r3, [r3, #5]
 800cfc4:	4619      	mov	r1, r3
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f000 f90c 	bl	800d1e4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	791b      	ldrb	r3, [r3, #4]
 800cfd0:	4619      	mov	r1, r3
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f000 f906 	bl	800d1e4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800cfde:	2302      	movs	r3, #2
 800cfe0:	73fb      	strb	r3, [r7, #15]
      break;
 800cfe2:	e00a      	b.n	800cffa <USBH_HandleControl+0x2de>

    default:
      break;
 800cfe4:	bf00      	nop
 800cfe6:	e008      	b.n	800cffa <USBH_HandleControl+0x2de>
      break;
 800cfe8:	bf00      	nop
 800cfea:	e006      	b.n	800cffa <USBH_HandleControl+0x2de>
      break;
 800cfec:	bf00      	nop
 800cfee:	e004      	b.n	800cffa <USBH_HandleControl+0x2de>
      break;
 800cff0:	bf00      	nop
 800cff2:	e002      	b.n	800cffa <USBH_HandleControl+0x2de>
      break;
 800cff4:	bf00      	nop
 800cff6:	e000      	b.n	800cffa <USBH_HandleControl+0x2de>
      break;
 800cff8:	bf00      	nop
  }

  return status;
 800cffa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3710      	adds	r7, #16
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}

0800d004 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b088      	sub	sp, #32
 800d008:	af04      	add	r7, sp, #16
 800d00a:	60f8      	str	r0, [r7, #12]
 800d00c:	60b9      	str	r1, [r7, #8]
 800d00e:	4613      	mov	r3, r2
 800d010:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d012:	79f9      	ldrb	r1, [r7, #7]
 800d014:	2300      	movs	r3, #0
 800d016:	9303      	str	r3, [sp, #12]
 800d018:	2308      	movs	r3, #8
 800d01a:	9302      	str	r3, [sp, #8]
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	9301      	str	r3, [sp, #4]
 800d020:	2300      	movs	r3, #0
 800d022:	9300      	str	r3, [sp, #0]
 800d024:	2300      	movs	r3, #0
 800d026:	2200      	movs	r2, #0
 800d028:	68f8      	ldr	r0, [r7, #12]
 800d02a:	f004 f876 	bl	801111a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800d02e:	2300      	movs	r3, #0
}
 800d030:	4618      	mov	r0, r3
 800d032:	3710      	adds	r7, #16
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b088      	sub	sp, #32
 800d03c:	af04      	add	r7, sp, #16
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	60b9      	str	r1, [r7, #8]
 800d042:	4611      	mov	r1, r2
 800d044:	461a      	mov	r2, r3
 800d046:	460b      	mov	r3, r1
 800d048:	80fb      	strh	r3, [r7, #6]
 800d04a:	4613      	mov	r3, r2
 800d04c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d054:	2b00      	cmp	r3, #0
 800d056:	d001      	beq.n	800d05c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d058:	2300      	movs	r3, #0
 800d05a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d05c:	7979      	ldrb	r1, [r7, #5]
 800d05e:	7e3b      	ldrb	r3, [r7, #24]
 800d060:	9303      	str	r3, [sp, #12]
 800d062:	88fb      	ldrh	r3, [r7, #6]
 800d064:	9302      	str	r3, [sp, #8]
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	9301      	str	r3, [sp, #4]
 800d06a:	2301      	movs	r3, #1
 800d06c:	9300      	str	r3, [sp, #0]
 800d06e:	2300      	movs	r3, #0
 800d070:	2200      	movs	r2, #0
 800d072:	68f8      	ldr	r0, [r7, #12]
 800d074:	f004 f851 	bl	801111a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d078:	2300      	movs	r3, #0
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3710      	adds	r7, #16
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}

0800d082 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d082:	b580      	push	{r7, lr}
 800d084:	b088      	sub	sp, #32
 800d086:	af04      	add	r7, sp, #16
 800d088:	60f8      	str	r0, [r7, #12]
 800d08a:	60b9      	str	r1, [r7, #8]
 800d08c:	4611      	mov	r1, r2
 800d08e:	461a      	mov	r2, r3
 800d090:	460b      	mov	r3, r1
 800d092:	80fb      	strh	r3, [r7, #6]
 800d094:	4613      	mov	r3, r2
 800d096:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d098:	7979      	ldrb	r1, [r7, #5]
 800d09a:	2300      	movs	r3, #0
 800d09c:	9303      	str	r3, [sp, #12]
 800d09e:	88fb      	ldrh	r3, [r7, #6]
 800d0a0:	9302      	str	r3, [sp, #8]
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	9301      	str	r3, [sp, #4]
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	9300      	str	r3, [sp, #0]
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	68f8      	ldr	r0, [r7, #12]
 800d0b0:	f004 f833 	bl	801111a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d0b4:	2300      	movs	r3, #0

}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3710      	adds	r7, #16
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}

0800d0be <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d0be:	b580      	push	{r7, lr}
 800d0c0:	b088      	sub	sp, #32
 800d0c2:	af04      	add	r7, sp, #16
 800d0c4:	60f8      	str	r0, [r7, #12]
 800d0c6:	60b9      	str	r1, [r7, #8]
 800d0c8:	4611      	mov	r1, r2
 800d0ca:	461a      	mov	r2, r3
 800d0cc:	460b      	mov	r3, r1
 800d0ce:	80fb      	strh	r3, [r7, #6]
 800d0d0:	4613      	mov	r3, r2
 800d0d2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d001      	beq.n	800d0e2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d0e2:	7979      	ldrb	r1, [r7, #5]
 800d0e4:	7e3b      	ldrb	r3, [r7, #24]
 800d0e6:	9303      	str	r3, [sp, #12]
 800d0e8:	88fb      	ldrh	r3, [r7, #6]
 800d0ea:	9302      	str	r3, [sp, #8]
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	9301      	str	r3, [sp, #4]
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	9300      	str	r3, [sp, #0]
 800d0f4:	2302      	movs	r3, #2
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	68f8      	ldr	r0, [r7, #12]
 800d0fa:	f004 f80e 	bl	801111a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d0fe:	2300      	movs	r3, #0
}
 800d100:	4618      	mov	r0, r3
 800d102:	3710      	adds	r7, #16
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b088      	sub	sp, #32
 800d10c:	af04      	add	r7, sp, #16
 800d10e:	60f8      	str	r0, [r7, #12]
 800d110:	60b9      	str	r1, [r7, #8]
 800d112:	4611      	mov	r1, r2
 800d114:	461a      	mov	r2, r3
 800d116:	460b      	mov	r3, r1
 800d118:	80fb      	strh	r3, [r7, #6]
 800d11a:	4613      	mov	r3, r2
 800d11c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d11e:	7979      	ldrb	r1, [r7, #5]
 800d120:	2300      	movs	r3, #0
 800d122:	9303      	str	r3, [sp, #12]
 800d124:	88fb      	ldrh	r3, [r7, #6]
 800d126:	9302      	str	r3, [sp, #8]
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	9301      	str	r3, [sp, #4]
 800d12c:	2301      	movs	r3, #1
 800d12e:	9300      	str	r3, [sp, #0]
 800d130:	2302      	movs	r3, #2
 800d132:	2201      	movs	r2, #1
 800d134:	68f8      	ldr	r0, [r7, #12]
 800d136:	f003 fff0 	bl	801111a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d13a:	2300      	movs	r3, #0
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	3710      	adds	r7, #16
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}

0800d144 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b086      	sub	sp, #24
 800d148:	af04      	add	r7, sp, #16
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	4608      	mov	r0, r1
 800d14e:	4611      	mov	r1, r2
 800d150:	461a      	mov	r2, r3
 800d152:	4603      	mov	r3, r0
 800d154:	70fb      	strb	r3, [r7, #3]
 800d156:	460b      	mov	r3, r1
 800d158:	70bb      	strb	r3, [r7, #2]
 800d15a:	4613      	mov	r3, r2
 800d15c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d15e:	7878      	ldrb	r0, [r7, #1]
 800d160:	78ba      	ldrb	r2, [r7, #2]
 800d162:	78f9      	ldrb	r1, [r7, #3]
 800d164:	8b3b      	ldrh	r3, [r7, #24]
 800d166:	9302      	str	r3, [sp, #8]
 800d168:	7d3b      	ldrb	r3, [r7, #20]
 800d16a:	9301      	str	r3, [sp, #4]
 800d16c:	7c3b      	ldrb	r3, [r7, #16]
 800d16e:	9300      	str	r3, [sp, #0]
 800d170:	4603      	mov	r3, r0
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f003 ff83 	bl	801107e <USBH_LL_OpenPipe>

  return USBH_OK;
 800d178:	2300      	movs	r3, #0
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3708      	adds	r7, #8
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}

0800d182 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d182:	b580      	push	{r7, lr}
 800d184:	b082      	sub	sp, #8
 800d186:	af00      	add	r7, sp, #0
 800d188:	6078      	str	r0, [r7, #4]
 800d18a:	460b      	mov	r3, r1
 800d18c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d18e:	78fb      	ldrb	r3, [r7, #3]
 800d190:	4619      	mov	r1, r3
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f003 ffa2 	bl	80110dc <USBH_LL_ClosePipe>

  return USBH_OK;
 800d198:	2300      	movs	r3, #0
}
 800d19a:	4618      	mov	r0, r3
 800d19c:	3708      	adds	r7, #8
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}

0800d1a2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d1a2:	b580      	push	{r7, lr}
 800d1a4:	b084      	sub	sp, #16
 800d1a6:	af00      	add	r7, sp, #0
 800d1a8:	6078      	str	r0, [r7, #4]
 800d1aa:	460b      	mov	r3, r1
 800d1ac:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f000 f836 	bl	800d220 <USBH_GetFreePipe>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d1b8:	89fb      	ldrh	r3, [r7, #14]
 800d1ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d00a      	beq.n	800d1d8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d1c2:	78fa      	ldrb	r2, [r7, #3]
 800d1c4:	89fb      	ldrh	r3, [r7, #14]
 800d1c6:	f003 030f 	and.w	r3, r3, #15
 800d1ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d1ce:	6879      	ldr	r1, [r7, #4]
 800d1d0:	33e0      	adds	r3, #224	; 0xe0
 800d1d2:	009b      	lsls	r3, r3, #2
 800d1d4:	440b      	add	r3, r1
 800d1d6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d1d8:	89fb      	ldrh	r3, [r7, #14]
 800d1da:	b2db      	uxtb	r3, r3
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3710      	adds	r7, #16
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}

0800d1e4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	460b      	mov	r3, r1
 800d1ee:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d1f0:	78fb      	ldrb	r3, [r7, #3]
 800d1f2:	2b0f      	cmp	r3, #15
 800d1f4:	d80d      	bhi.n	800d212 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d1f6:	78fb      	ldrb	r3, [r7, #3]
 800d1f8:	687a      	ldr	r2, [r7, #4]
 800d1fa:	33e0      	adds	r3, #224	; 0xe0
 800d1fc:	009b      	lsls	r3, r3, #2
 800d1fe:	4413      	add	r3, r2
 800d200:	685a      	ldr	r2, [r3, #4]
 800d202:	78fb      	ldrb	r3, [r7, #3]
 800d204:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d208:	6879      	ldr	r1, [r7, #4]
 800d20a:	33e0      	adds	r3, #224	; 0xe0
 800d20c:	009b      	lsls	r3, r3, #2
 800d20e:	440b      	add	r3, r1
 800d210:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d212:	2300      	movs	r3, #0
}
 800d214:	4618      	mov	r0, r3
 800d216:	370c      	adds	r7, #12
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr

0800d220 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d220:	b480      	push	{r7}
 800d222:	b085      	sub	sp, #20
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d228:	2300      	movs	r3, #0
 800d22a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d22c:	2300      	movs	r3, #0
 800d22e:	73fb      	strb	r3, [r7, #15]
 800d230:	e00f      	b.n	800d252 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d232:	7bfb      	ldrb	r3, [r7, #15]
 800d234:	687a      	ldr	r2, [r7, #4]
 800d236:	33e0      	adds	r3, #224	; 0xe0
 800d238:	009b      	lsls	r3, r3, #2
 800d23a:	4413      	add	r3, r2
 800d23c:	685b      	ldr	r3, [r3, #4]
 800d23e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d242:	2b00      	cmp	r3, #0
 800d244:	d102      	bne.n	800d24c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d246:	7bfb      	ldrb	r3, [r7, #15]
 800d248:	b29b      	uxth	r3, r3
 800d24a:	e007      	b.n	800d25c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d24c:	7bfb      	ldrb	r3, [r7, #15]
 800d24e:	3301      	adds	r3, #1
 800d250:	73fb      	strb	r3, [r7, #15]
 800d252:	7bfb      	ldrb	r3, [r7, #15]
 800d254:	2b0f      	cmp	r3, #15
 800d256:	d9ec      	bls.n	800d232 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d258:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3714      	adds	r7, #20
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr

0800d268 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b084      	sub	sp, #16
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	4603      	mov	r3, r0
 800d270:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d272:	79fb      	ldrb	r3, [r7, #7]
 800d274:	4a08      	ldr	r2, [pc, #32]	; (800d298 <disk_status+0x30>)
 800d276:	009b      	lsls	r3, r3, #2
 800d278:	4413      	add	r3, r2
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	685b      	ldr	r3, [r3, #4]
 800d27e:	79fa      	ldrb	r2, [r7, #7]
 800d280:	4905      	ldr	r1, [pc, #20]	; (800d298 <disk_status+0x30>)
 800d282:	440a      	add	r2, r1
 800d284:	7a12      	ldrb	r2, [r2, #8]
 800d286:	4610      	mov	r0, r2
 800d288:	4798      	blx	r3
 800d28a:	4603      	mov	r3, r0
 800d28c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d28e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d290:	4618      	mov	r0, r3
 800d292:	3710      	adds	r7, #16
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}
 800d298:	20002f04 	.word	0x20002f04

0800d29c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b084      	sub	sp, #16
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d2aa:	79fb      	ldrb	r3, [r7, #7]
 800d2ac:	4a0d      	ldr	r2, [pc, #52]	; (800d2e4 <disk_initialize+0x48>)
 800d2ae:	5cd3      	ldrb	r3, [r2, r3]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d111      	bne.n	800d2d8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d2b4:	79fb      	ldrb	r3, [r7, #7]
 800d2b6:	4a0b      	ldr	r2, [pc, #44]	; (800d2e4 <disk_initialize+0x48>)
 800d2b8:	2101      	movs	r1, #1
 800d2ba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d2bc:	79fb      	ldrb	r3, [r7, #7]
 800d2be:	4a09      	ldr	r2, [pc, #36]	; (800d2e4 <disk_initialize+0x48>)
 800d2c0:	009b      	lsls	r3, r3, #2
 800d2c2:	4413      	add	r3, r2
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	79fa      	ldrb	r2, [r7, #7]
 800d2ca:	4906      	ldr	r1, [pc, #24]	; (800d2e4 <disk_initialize+0x48>)
 800d2cc:	440a      	add	r2, r1
 800d2ce:	7a12      	ldrb	r2, [r2, #8]
 800d2d0:	4610      	mov	r0, r2
 800d2d2:	4798      	blx	r3
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3710      	adds	r7, #16
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	20002f04 	.word	0x20002f04

0800d2e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d2e8:	b590      	push	{r4, r7, lr}
 800d2ea:	b087      	sub	sp, #28
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	60b9      	str	r1, [r7, #8]
 800d2f0:	607a      	str	r2, [r7, #4]
 800d2f2:	603b      	str	r3, [r7, #0]
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d2f8:	7bfb      	ldrb	r3, [r7, #15]
 800d2fa:	4a0a      	ldr	r2, [pc, #40]	; (800d324 <disk_read+0x3c>)
 800d2fc:	009b      	lsls	r3, r3, #2
 800d2fe:	4413      	add	r3, r2
 800d300:	685b      	ldr	r3, [r3, #4]
 800d302:	689c      	ldr	r4, [r3, #8]
 800d304:	7bfb      	ldrb	r3, [r7, #15]
 800d306:	4a07      	ldr	r2, [pc, #28]	; (800d324 <disk_read+0x3c>)
 800d308:	4413      	add	r3, r2
 800d30a:	7a18      	ldrb	r0, [r3, #8]
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	68b9      	ldr	r1, [r7, #8]
 800d312:	47a0      	blx	r4
 800d314:	4603      	mov	r3, r0
 800d316:	75fb      	strb	r3, [r7, #23]
  return res;
 800d318:	7dfb      	ldrb	r3, [r7, #23]
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	371c      	adds	r7, #28
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd90      	pop	{r4, r7, pc}
 800d322:	bf00      	nop
 800d324:	20002f04 	.word	0x20002f04

0800d328 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d328:	b590      	push	{r4, r7, lr}
 800d32a:	b087      	sub	sp, #28
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	60b9      	str	r1, [r7, #8]
 800d330:	607a      	str	r2, [r7, #4]
 800d332:	603b      	str	r3, [r7, #0]
 800d334:	4603      	mov	r3, r0
 800d336:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d338:	7bfb      	ldrb	r3, [r7, #15]
 800d33a:	4a0a      	ldr	r2, [pc, #40]	; (800d364 <disk_write+0x3c>)
 800d33c:	009b      	lsls	r3, r3, #2
 800d33e:	4413      	add	r3, r2
 800d340:	685b      	ldr	r3, [r3, #4]
 800d342:	68dc      	ldr	r4, [r3, #12]
 800d344:	7bfb      	ldrb	r3, [r7, #15]
 800d346:	4a07      	ldr	r2, [pc, #28]	; (800d364 <disk_write+0x3c>)
 800d348:	4413      	add	r3, r2
 800d34a:	7a18      	ldrb	r0, [r3, #8]
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	687a      	ldr	r2, [r7, #4]
 800d350:	68b9      	ldr	r1, [r7, #8]
 800d352:	47a0      	blx	r4
 800d354:	4603      	mov	r3, r0
 800d356:	75fb      	strb	r3, [r7, #23]
  return res;
 800d358:	7dfb      	ldrb	r3, [r7, #23]
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	371c      	adds	r7, #28
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd90      	pop	{r4, r7, pc}
 800d362:	bf00      	nop
 800d364:	20002f04 	.word	0x20002f04

0800d368 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b084      	sub	sp, #16
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	4603      	mov	r3, r0
 800d370:	603a      	str	r2, [r7, #0]
 800d372:	71fb      	strb	r3, [r7, #7]
 800d374:	460b      	mov	r3, r1
 800d376:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d378:	79fb      	ldrb	r3, [r7, #7]
 800d37a:	4a09      	ldr	r2, [pc, #36]	; (800d3a0 <disk_ioctl+0x38>)
 800d37c:	009b      	lsls	r3, r3, #2
 800d37e:	4413      	add	r3, r2
 800d380:	685b      	ldr	r3, [r3, #4]
 800d382:	691b      	ldr	r3, [r3, #16]
 800d384:	79fa      	ldrb	r2, [r7, #7]
 800d386:	4906      	ldr	r1, [pc, #24]	; (800d3a0 <disk_ioctl+0x38>)
 800d388:	440a      	add	r2, r1
 800d38a:	7a10      	ldrb	r0, [r2, #8]
 800d38c:	79b9      	ldrb	r1, [r7, #6]
 800d38e:	683a      	ldr	r2, [r7, #0]
 800d390:	4798      	blx	r3
 800d392:	4603      	mov	r3, r0
 800d394:	73fb      	strb	r3, [r7, #15]
  return res;
 800d396:	7bfb      	ldrb	r3, [r7, #15]
}
 800d398:	4618      	mov	r0, r3
 800d39a:	3710      	adds	r7, #16
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}
 800d3a0:	20002f04 	.word	0x20002f04

0800d3a4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b085      	sub	sp, #20
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	3301      	adds	r3, #1
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d3b4:	89fb      	ldrh	r3, [r7, #14]
 800d3b6:	021b      	lsls	r3, r3, #8
 800d3b8:	b21a      	sxth	r2, r3
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	b21b      	sxth	r3, r3
 800d3c0:	4313      	orrs	r3, r2
 800d3c2:	b21b      	sxth	r3, r3
 800d3c4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d3c6:	89fb      	ldrh	r3, [r7, #14]
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3714      	adds	r7, #20
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d2:	4770      	bx	lr

0800d3d4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b085      	sub	sp, #20
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	3303      	adds	r3, #3
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	021b      	lsls	r3, r3, #8
 800d3e8:	687a      	ldr	r2, [r7, #4]
 800d3ea:	3202      	adds	r2, #2
 800d3ec:	7812      	ldrb	r2, [r2, #0]
 800d3ee:	4313      	orrs	r3, r2
 800d3f0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	021b      	lsls	r3, r3, #8
 800d3f6:	687a      	ldr	r2, [r7, #4]
 800d3f8:	3201      	adds	r2, #1
 800d3fa:	7812      	ldrb	r2, [r2, #0]
 800d3fc:	4313      	orrs	r3, r2
 800d3fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	021b      	lsls	r3, r3, #8
 800d404:	687a      	ldr	r2, [r7, #4]
 800d406:	7812      	ldrb	r2, [r2, #0]
 800d408:	4313      	orrs	r3, r2
 800d40a:	60fb      	str	r3, [r7, #12]
	return rv;
 800d40c:	68fb      	ldr	r3, [r7, #12]
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3714      	adds	r7, #20
 800d412:	46bd      	mov	sp, r7
 800d414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d418:	4770      	bx	lr

0800d41a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d41a:	b480      	push	{r7}
 800d41c:	b083      	sub	sp, #12
 800d41e:	af00      	add	r7, sp, #0
 800d420:	6078      	str	r0, [r7, #4]
 800d422:	460b      	mov	r3, r1
 800d424:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	1c5a      	adds	r2, r3, #1
 800d42a:	607a      	str	r2, [r7, #4]
 800d42c:	887a      	ldrh	r2, [r7, #2]
 800d42e:	b2d2      	uxtb	r2, r2
 800d430:	701a      	strb	r2, [r3, #0]
 800d432:	887b      	ldrh	r3, [r7, #2]
 800d434:	0a1b      	lsrs	r3, r3, #8
 800d436:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	1c5a      	adds	r2, r3, #1
 800d43c:	607a      	str	r2, [r7, #4]
 800d43e:	887a      	ldrh	r2, [r7, #2]
 800d440:	b2d2      	uxtb	r2, r2
 800d442:	701a      	strb	r2, [r3, #0]
}
 800d444:	bf00      	nop
 800d446:	370c      	adds	r7, #12
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr

0800d450 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d450:	b480      	push	{r7}
 800d452:	b083      	sub	sp, #12
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
 800d458:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	1c5a      	adds	r2, r3, #1
 800d45e:	607a      	str	r2, [r7, #4]
 800d460:	683a      	ldr	r2, [r7, #0]
 800d462:	b2d2      	uxtb	r2, r2
 800d464:	701a      	strb	r2, [r3, #0]
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	0a1b      	lsrs	r3, r3, #8
 800d46a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	1c5a      	adds	r2, r3, #1
 800d470:	607a      	str	r2, [r7, #4]
 800d472:	683a      	ldr	r2, [r7, #0]
 800d474:	b2d2      	uxtb	r2, r2
 800d476:	701a      	strb	r2, [r3, #0]
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	0a1b      	lsrs	r3, r3, #8
 800d47c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	1c5a      	adds	r2, r3, #1
 800d482:	607a      	str	r2, [r7, #4]
 800d484:	683a      	ldr	r2, [r7, #0]
 800d486:	b2d2      	uxtb	r2, r2
 800d488:	701a      	strb	r2, [r3, #0]
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	0a1b      	lsrs	r3, r3, #8
 800d48e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	1c5a      	adds	r2, r3, #1
 800d494:	607a      	str	r2, [r7, #4]
 800d496:	683a      	ldr	r2, [r7, #0]
 800d498:	b2d2      	uxtb	r2, r2
 800d49a:	701a      	strb	r2, [r3, #0]
}
 800d49c:	bf00      	nop
 800d49e:	370c      	adds	r7, #12
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a6:	4770      	bx	lr

0800d4a8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d4a8:	b480      	push	{r7}
 800d4aa:	b087      	sub	sp, #28
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	60f8      	str	r0, [r7, #12]
 800d4b0:	60b9      	str	r1, [r7, #8]
 800d4b2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d00d      	beq.n	800d4de <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d4c2:	693a      	ldr	r2, [r7, #16]
 800d4c4:	1c53      	adds	r3, r2, #1
 800d4c6:	613b      	str	r3, [r7, #16]
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	1c59      	adds	r1, r3, #1
 800d4cc:	6179      	str	r1, [r7, #20]
 800d4ce:	7812      	ldrb	r2, [r2, #0]
 800d4d0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	3b01      	subs	r3, #1
 800d4d6:	607b      	str	r3, [r7, #4]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d1f1      	bne.n	800d4c2 <mem_cpy+0x1a>
	}
}
 800d4de:	bf00      	nop
 800d4e0:	371c      	adds	r7, #28
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e8:	4770      	bx	lr

0800d4ea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d4ea:	b480      	push	{r7}
 800d4ec:	b087      	sub	sp, #28
 800d4ee:	af00      	add	r7, sp, #0
 800d4f0:	60f8      	str	r0, [r7, #12]
 800d4f2:	60b9      	str	r1, [r7, #8]
 800d4f4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	1c5a      	adds	r2, r3, #1
 800d4fe:	617a      	str	r2, [r7, #20]
 800d500:	68ba      	ldr	r2, [r7, #8]
 800d502:	b2d2      	uxtb	r2, r2
 800d504:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	3b01      	subs	r3, #1
 800d50a:	607b      	str	r3, [r7, #4]
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d1f3      	bne.n	800d4fa <mem_set+0x10>
}
 800d512:	bf00      	nop
 800d514:	bf00      	nop
 800d516:	371c      	adds	r7, #28
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr

0800d520 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d520:	b480      	push	{r7}
 800d522:	b089      	sub	sp, #36	; 0x24
 800d524:	af00      	add	r7, sp, #0
 800d526:	60f8      	str	r0, [r7, #12]
 800d528:	60b9      	str	r1, [r7, #8]
 800d52a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	61fb      	str	r3, [r7, #28]
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d534:	2300      	movs	r3, #0
 800d536:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d538:	69fb      	ldr	r3, [r7, #28]
 800d53a:	1c5a      	adds	r2, r3, #1
 800d53c:	61fa      	str	r2, [r7, #28]
 800d53e:	781b      	ldrb	r3, [r3, #0]
 800d540:	4619      	mov	r1, r3
 800d542:	69bb      	ldr	r3, [r7, #24]
 800d544:	1c5a      	adds	r2, r3, #1
 800d546:	61ba      	str	r2, [r7, #24]
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	1acb      	subs	r3, r1, r3
 800d54c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	3b01      	subs	r3, #1
 800d552:	607b      	str	r3, [r7, #4]
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d002      	beq.n	800d560 <mem_cmp+0x40>
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d0eb      	beq.n	800d538 <mem_cmp+0x18>

	return r;
 800d560:	697b      	ldr	r3, [r7, #20]
}
 800d562:	4618      	mov	r0, r3
 800d564:	3724      	adds	r7, #36	; 0x24
 800d566:	46bd      	mov	sp, r7
 800d568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56c:	4770      	bx	lr

0800d56e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d56e:	b480      	push	{r7}
 800d570:	b083      	sub	sp, #12
 800d572:	af00      	add	r7, sp, #0
 800d574:	6078      	str	r0, [r7, #4]
 800d576:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d578:	e002      	b.n	800d580 <chk_chr+0x12>
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	3301      	adds	r3, #1
 800d57e:	607b      	str	r3, [r7, #4]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	781b      	ldrb	r3, [r3, #0]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d005      	beq.n	800d594 <chk_chr+0x26>
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	461a      	mov	r2, r3
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	4293      	cmp	r3, r2
 800d592:	d1f2      	bne.n	800d57a <chk_chr+0xc>
	return *str;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	781b      	ldrb	r3, [r3, #0]
}
 800d598:	4618      	mov	r0, r3
 800d59a:	370c      	adds	r7, #12
 800d59c:	46bd      	mov	sp, r7
 800d59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a2:	4770      	bx	lr

0800d5a4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b085      	sub	sp, #20
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	60bb      	str	r3, [r7, #8]
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	60fb      	str	r3, [r7, #12]
 800d5b6:	e029      	b.n	800d60c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d5b8:	4a27      	ldr	r2, [pc, #156]	; (800d658 <chk_lock+0xb4>)
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	011b      	lsls	r3, r3, #4
 800d5be:	4413      	add	r3, r2
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d01d      	beq.n	800d602 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d5c6:	4a24      	ldr	r2, [pc, #144]	; (800d658 <chk_lock+0xb4>)
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	011b      	lsls	r3, r3, #4
 800d5cc:	4413      	add	r3, r2
 800d5ce:	681a      	ldr	r2, [r3, #0]
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d116      	bne.n	800d606 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d5d8:	4a1f      	ldr	r2, [pc, #124]	; (800d658 <chk_lock+0xb4>)
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	011b      	lsls	r3, r3, #4
 800d5de:	4413      	add	r3, r2
 800d5e0:	3304      	adds	r3, #4
 800d5e2:	681a      	ldr	r2, [r3, #0]
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d10c      	bne.n	800d606 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d5ec:	4a1a      	ldr	r2, [pc, #104]	; (800d658 <chk_lock+0xb4>)
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	011b      	lsls	r3, r3, #4
 800d5f2:	4413      	add	r3, r2
 800d5f4:	3308      	adds	r3, #8
 800d5f6:	681a      	ldr	r2, [r3, #0]
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d102      	bne.n	800d606 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d600:	e007      	b.n	800d612 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d602:	2301      	movs	r3, #1
 800d604:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	3301      	adds	r3, #1
 800d60a:	60fb      	str	r3, [r7, #12]
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	2b01      	cmp	r3, #1
 800d610:	d9d2      	bls.n	800d5b8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	2b02      	cmp	r3, #2
 800d616:	d109      	bne.n	800d62c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d102      	bne.n	800d624 <chk_lock+0x80>
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	2b02      	cmp	r3, #2
 800d622:	d101      	bne.n	800d628 <chk_lock+0x84>
 800d624:	2300      	movs	r3, #0
 800d626:	e010      	b.n	800d64a <chk_lock+0xa6>
 800d628:	2312      	movs	r3, #18
 800d62a:	e00e      	b.n	800d64a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d108      	bne.n	800d644 <chk_lock+0xa0>
 800d632:	4a09      	ldr	r2, [pc, #36]	; (800d658 <chk_lock+0xb4>)
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	011b      	lsls	r3, r3, #4
 800d638:	4413      	add	r3, r2
 800d63a:	330c      	adds	r3, #12
 800d63c:	881b      	ldrh	r3, [r3, #0]
 800d63e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d642:	d101      	bne.n	800d648 <chk_lock+0xa4>
 800d644:	2310      	movs	r3, #16
 800d646:	e000      	b.n	800d64a <chk_lock+0xa6>
 800d648:	2300      	movs	r3, #0
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	3714      	adds	r7, #20
 800d64e:	46bd      	mov	sp, r7
 800d650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d654:	4770      	bx	lr
 800d656:	bf00      	nop
 800d658:	20002ce4 	.word	0x20002ce4

0800d65c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d65c:	b480      	push	{r7}
 800d65e:	b083      	sub	sp, #12
 800d660:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d662:	2300      	movs	r3, #0
 800d664:	607b      	str	r3, [r7, #4]
 800d666:	e002      	b.n	800d66e <enq_lock+0x12>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	3301      	adds	r3, #1
 800d66c:	607b      	str	r3, [r7, #4]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2b01      	cmp	r3, #1
 800d672:	d806      	bhi.n	800d682 <enq_lock+0x26>
 800d674:	4a09      	ldr	r2, [pc, #36]	; (800d69c <enq_lock+0x40>)
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	011b      	lsls	r3, r3, #4
 800d67a:	4413      	add	r3, r2
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d1f2      	bne.n	800d668 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2b02      	cmp	r3, #2
 800d686:	bf14      	ite	ne
 800d688:	2301      	movne	r3, #1
 800d68a:	2300      	moveq	r3, #0
 800d68c:	b2db      	uxtb	r3, r3
}
 800d68e:	4618      	mov	r0, r3
 800d690:	370c      	adds	r7, #12
 800d692:	46bd      	mov	sp, r7
 800d694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d698:	4770      	bx	lr
 800d69a:	bf00      	nop
 800d69c:	20002ce4 	.word	0x20002ce4

0800d6a0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b085      	sub	sp, #20
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	60fb      	str	r3, [r7, #12]
 800d6ae:	e01f      	b.n	800d6f0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d6b0:	4a41      	ldr	r2, [pc, #260]	; (800d7b8 <inc_lock+0x118>)
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	011b      	lsls	r3, r3, #4
 800d6b6:	4413      	add	r3, r2
 800d6b8:	681a      	ldr	r2, [r3, #0]
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	d113      	bne.n	800d6ea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d6c2:	4a3d      	ldr	r2, [pc, #244]	; (800d7b8 <inc_lock+0x118>)
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	011b      	lsls	r3, r3, #4
 800d6c8:	4413      	add	r3, r2
 800d6ca:	3304      	adds	r3, #4
 800d6cc:	681a      	ldr	r2, [r3, #0]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d109      	bne.n	800d6ea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d6d6:	4a38      	ldr	r2, [pc, #224]	; (800d7b8 <inc_lock+0x118>)
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	011b      	lsls	r3, r3, #4
 800d6dc:	4413      	add	r3, r2
 800d6de:	3308      	adds	r3, #8
 800d6e0:	681a      	ldr	r2, [r3, #0]
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	d006      	beq.n	800d6f8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	3301      	adds	r3, #1
 800d6ee:	60fb      	str	r3, [r7, #12]
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	2b01      	cmp	r3, #1
 800d6f4:	d9dc      	bls.n	800d6b0 <inc_lock+0x10>
 800d6f6:	e000      	b.n	800d6fa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d6f8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2b02      	cmp	r3, #2
 800d6fe:	d132      	bne.n	800d766 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d700:	2300      	movs	r3, #0
 800d702:	60fb      	str	r3, [r7, #12]
 800d704:	e002      	b.n	800d70c <inc_lock+0x6c>
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	3301      	adds	r3, #1
 800d70a:	60fb      	str	r3, [r7, #12]
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	2b01      	cmp	r3, #1
 800d710:	d806      	bhi.n	800d720 <inc_lock+0x80>
 800d712:	4a29      	ldr	r2, [pc, #164]	; (800d7b8 <inc_lock+0x118>)
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	011b      	lsls	r3, r3, #4
 800d718:	4413      	add	r3, r2
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d1f2      	bne.n	800d706 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	2b02      	cmp	r3, #2
 800d724:	d101      	bne.n	800d72a <inc_lock+0x8a>
 800d726:	2300      	movs	r3, #0
 800d728:	e040      	b.n	800d7ac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681a      	ldr	r2, [r3, #0]
 800d72e:	4922      	ldr	r1, [pc, #136]	; (800d7b8 <inc_lock+0x118>)
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	011b      	lsls	r3, r3, #4
 800d734:	440b      	add	r3, r1
 800d736:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	689a      	ldr	r2, [r3, #8]
 800d73c:	491e      	ldr	r1, [pc, #120]	; (800d7b8 <inc_lock+0x118>)
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	011b      	lsls	r3, r3, #4
 800d742:	440b      	add	r3, r1
 800d744:	3304      	adds	r3, #4
 800d746:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	695a      	ldr	r2, [r3, #20]
 800d74c:	491a      	ldr	r1, [pc, #104]	; (800d7b8 <inc_lock+0x118>)
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	011b      	lsls	r3, r3, #4
 800d752:	440b      	add	r3, r1
 800d754:	3308      	adds	r3, #8
 800d756:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d758:	4a17      	ldr	r2, [pc, #92]	; (800d7b8 <inc_lock+0x118>)
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	011b      	lsls	r3, r3, #4
 800d75e:	4413      	add	r3, r2
 800d760:	330c      	adds	r3, #12
 800d762:	2200      	movs	r2, #0
 800d764:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d009      	beq.n	800d780 <inc_lock+0xe0>
 800d76c:	4a12      	ldr	r2, [pc, #72]	; (800d7b8 <inc_lock+0x118>)
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	011b      	lsls	r3, r3, #4
 800d772:	4413      	add	r3, r2
 800d774:	330c      	adds	r3, #12
 800d776:	881b      	ldrh	r3, [r3, #0]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d001      	beq.n	800d780 <inc_lock+0xe0>
 800d77c:	2300      	movs	r3, #0
 800d77e:	e015      	b.n	800d7ac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d108      	bne.n	800d798 <inc_lock+0xf8>
 800d786:	4a0c      	ldr	r2, [pc, #48]	; (800d7b8 <inc_lock+0x118>)
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	011b      	lsls	r3, r3, #4
 800d78c:	4413      	add	r3, r2
 800d78e:	330c      	adds	r3, #12
 800d790:	881b      	ldrh	r3, [r3, #0]
 800d792:	3301      	adds	r3, #1
 800d794:	b29a      	uxth	r2, r3
 800d796:	e001      	b.n	800d79c <inc_lock+0xfc>
 800d798:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d79c:	4906      	ldr	r1, [pc, #24]	; (800d7b8 <inc_lock+0x118>)
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	011b      	lsls	r3, r3, #4
 800d7a2:	440b      	add	r3, r1
 800d7a4:	330c      	adds	r3, #12
 800d7a6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	3301      	adds	r3, #1
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3714      	adds	r7, #20
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr
 800d7b8:	20002ce4 	.word	0x20002ce4

0800d7bc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d7bc:	b480      	push	{r7}
 800d7be:	b085      	sub	sp, #20
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	3b01      	subs	r3, #1
 800d7c8:	607b      	str	r3, [r7, #4]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d825      	bhi.n	800d81c <dec_lock+0x60>
		n = Files[i].ctr;
 800d7d0:	4a17      	ldr	r2, [pc, #92]	; (800d830 <dec_lock+0x74>)
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	011b      	lsls	r3, r3, #4
 800d7d6:	4413      	add	r3, r2
 800d7d8:	330c      	adds	r3, #12
 800d7da:	881b      	ldrh	r3, [r3, #0]
 800d7dc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d7de:	89fb      	ldrh	r3, [r7, #14]
 800d7e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7e4:	d101      	bne.n	800d7ea <dec_lock+0x2e>
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d7ea:	89fb      	ldrh	r3, [r7, #14]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d002      	beq.n	800d7f6 <dec_lock+0x3a>
 800d7f0:	89fb      	ldrh	r3, [r7, #14]
 800d7f2:	3b01      	subs	r3, #1
 800d7f4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d7f6:	4a0e      	ldr	r2, [pc, #56]	; (800d830 <dec_lock+0x74>)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	011b      	lsls	r3, r3, #4
 800d7fc:	4413      	add	r3, r2
 800d7fe:	330c      	adds	r3, #12
 800d800:	89fa      	ldrh	r2, [r7, #14]
 800d802:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d804:	89fb      	ldrh	r3, [r7, #14]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d105      	bne.n	800d816 <dec_lock+0x5a>
 800d80a:	4a09      	ldr	r2, [pc, #36]	; (800d830 <dec_lock+0x74>)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	011b      	lsls	r3, r3, #4
 800d810:	4413      	add	r3, r2
 800d812:	2200      	movs	r2, #0
 800d814:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d816:	2300      	movs	r3, #0
 800d818:	737b      	strb	r3, [r7, #13]
 800d81a:	e001      	b.n	800d820 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d81c:	2302      	movs	r3, #2
 800d81e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d820:	7b7b      	ldrb	r3, [r7, #13]
}
 800d822:	4618      	mov	r0, r3
 800d824:	3714      	adds	r7, #20
 800d826:	46bd      	mov	sp, r7
 800d828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82c:	4770      	bx	lr
 800d82e:	bf00      	nop
 800d830:	20002ce4 	.word	0x20002ce4

0800d834 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d834:	b480      	push	{r7}
 800d836:	b085      	sub	sp, #20
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d83c:	2300      	movs	r3, #0
 800d83e:	60fb      	str	r3, [r7, #12]
 800d840:	e010      	b.n	800d864 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d842:	4a0d      	ldr	r2, [pc, #52]	; (800d878 <clear_lock+0x44>)
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	011b      	lsls	r3, r3, #4
 800d848:	4413      	add	r3, r2
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	687a      	ldr	r2, [r7, #4]
 800d84e:	429a      	cmp	r2, r3
 800d850:	d105      	bne.n	800d85e <clear_lock+0x2a>
 800d852:	4a09      	ldr	r2, [pc, #36]	; (800d878 <clear_lock+0x44>)
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	011b      	lsls	r3, r3, #4
 800d858:	4413      	add	r3, r2
 800d85a:	2200      	movs	r2, #0
 800d85c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	3301      	adds	r3, #1
 800d862:	60fb      	str	r3, [r7, #12]
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	2b01      	cmp	r3, #1
 800d868:	d9eb      	bls.n	800d842 <clear_lock+0xe>
	}
}
 800d86a:	bf00      	nop
 800d86c:	bf00      	nop
 800d86e:	3714      	adds	r7, #20
 800d870:	46bd      	mov	sp, r7
 800d872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d876:	4770      	bx	lr
 800d878:	20002ce4 	.word	0x20002ce4

0800d87c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b086      	sub	sp, #24
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d884:	2300      	movs	r3, #0
 800d886:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	78db      	ldrb	r3, [r3, #3]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d034      	beq.n	800d8fa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d894:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	7858      	ldrb	r0, [r3, #1]
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	697a      	ldr	r2, [r7, #20]
 800d8a4:	f7ff fd40 	bl	800d328 <disk_write>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d002      	beq.n	800d8b4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	73fb      	strb	r3, [r7, #15]
 800d8b2:	e022      	b.n	800d8fa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8be:	697a      	ldr	r2, [r7, #20]
 800d8c0:	1ad2      	subs	r2, r2, r3
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6a1b      	ldr	r3, [r3, #32]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d217      	bcs.n	800d8fa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	789b      	ldrb	r3, [r3, #2]
 800d8ce:	613b      	str	r3, [r7, #16]
 800d8d0:	e010      	b.n	800d8f4 <sync_window+0x78>
					wsect += fs->fsize;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6a1b      	ldr	r3, [r3, #32]
 800d8d6:	697a      	ldr	r2, [r7, #20]
 800d8d8:	4413      	add	r3, r2
 800d8da:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	7858      	ldrb	r0, [r3, #1]
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	697a      	ldr	r2, [r7, #20]
 800d8ea:	f7ff fd1d 	bl	800d328 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	3b01      	subs	r3, #1
 800d8f2:	613b      	str	r3, [r7, #16]
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	2b01      	cmp	r3, #1
 800d8f8:	d8eb      	bhi.n	800d8d2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d8fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3718      	adds	r7, #24
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}

0800d904 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b084      	sub	sp, #16
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d90e:	2300      	movs	r3, #0
 800d910:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d916:	683a      	ldr	r2, [r7, #0]
 800d918:	429a      	cmp	r2, r3
 800d91a:	d01b      	beq.n	800d954 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f7ff ffad 	bl	800d87c <sync_window>
 800d922:	4603      	mov	r3, r0
 800d924:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d926:	7bfb      	ldrb	r3, [r7, #15]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d113      	bne.n	800d954 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	7858      	ldrb	r0, [r3, #1]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d936:	2301      	movs	r3, #1
 800d938:	683a      	ldr	r2, [r7, #0]
 800d93a:	f7ff fcd5 	bl	800d2e8 <disk_read>
 800d93e:	4603      	mov	r3, r0
 800d940:	2b00      	cmp	r3, #0
 800d942:	d004      	beq.n	800d94e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d944:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d948:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d94a:	2301      	movs	r3, #1
 800d94c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	683a      	ldr	r2, [r7, #0]
 800d952:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800d954:	7bfb      	ldrb	r3, [r7, #15]
}
 800d956:	4618      	mov	r0, r3
 800d958:	3710      	adds	r7, #16
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}
	...

0800d960 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b084      	sub	sp, #16
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f7ff ff87 	bl	800d87c <sync_window>
 800d96e:	4603      	mov	r3, r0
 800d970:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d972:	7bfb      	ldrb	r3, [r7, #15]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d159      	bne.n	800da2c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	781b      	ldrb	r3, [r3, #0]
 800d97c:	2b03      	cmp	r3, #3
 800d97e:	d149      	bne.n	800da14 <sync_fs+0xb4>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	791b      	ldrb	r3, [r3, #4]
 800d984:	2b01      	cmp	r3, #1
 800d986:	d145      	bne.n	800da14 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	899b      	ldrh	r3, [r3, #12]
 800d992:	461a      	mov	r2, r3
 800d994:	2100      	movs	r1, #0
 800d996:	f7ff fda8 	bl	800d4ea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	3338      	adds	r3, #56	; 0x38
 800d99e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d9a2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7ff fd37 	bl	800d41a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	3338      	adds	r3, #56	; 0x38
 800d9b0:	4921      	ldr	r1, [pc, #132]	; (800da38 <sync_fs+0xd8>)
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f7ff fd4c 	bl	800d450 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	3338      	adds	r3, #56	; 0x38
 800d9bc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d9c0:	491e      	ldr	r1, [pc, #120]	; (800da3c <sync_fs+0xdc>)
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7ff fd44 	bl	800d450 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	3338      	adds	r3, #56	; 0x38
 800d9cc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	699b      	ldr	r3, [r3, #24]
 800d9d4:	4619      	mov	r1, r3
 800d9d6:	4610      	mov	r0, r2
 800d9d8:	f7ff fd3a 	bl	800d450 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	3338      	adds	r3, #56	; 0x38
 800d9e0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	695b      	ldr	r3, [r3, #20]
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	4610      	mov	r0, r2
 800d9ec:	f7ff fd30 	bl	800d450 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9f4:	1c5a      	adds	r2, r3, #1
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	7858      	ldrb	r0, [r3, #1]
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da08:	2301      	movs	r3, #1
 800da0a:	f7ff fc8d 	bl	800d328 <disk_write>
			fs->fsi_flag = 0;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2200      	movs	r2, #0
 800da12:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	785b      	ldrb	r3, [r3, #1]
 800da18:	2200      	movs	r2, #0
 800da1a:	2100      	movs	r1, #0
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7ff fca3 	bl	800d368 <disk_ioctl>
 800da22:	4603      	mov	r3, r0
 800da24:	2b00      	cmp	r3, #0
 800da26:	d001      	beq.n	800da2c <sync_fs+0xcc>
 800da28:	2301      	movs	r3, #1
 800da2a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800da2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3710      	adds	r7, #16
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}
 800da36:	bf00      	nop
 800da38:	41615252 	.word	0x41615252
 800da3c:	61417272 	.word	0x61417272

0800da40 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800da40:	b480      	push	{r7}
 800da42:	b083      	sub	sp, #12
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	3b02      	subs	r3, #2
 800da4e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	69db      	ldr	r3, [r3, #28]
 800da54:	3b02      	subs	r3, #2
 800da56:	683a      	ldr	r2, [r7, #0]
 800da58:	429a      	cmp	r2, r3
 800da5a:	d301      	bcc.n	800da60 <clust2sect+0x20>
 800da5c:	2300      	movs	r3, #0
 800da5e:	e008      	b.n	800da72 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	895b      	ldrh	r3, [r3, #10]
 800da64:	461a      	mov	r2, r3
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	fb03 f202 	mul.w	r2, r3, r2
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da70:	4413      	add	r3, r2
}
 800da72:	4618      	mov	r0, r3
 800da74:	370c      	adds	r7, #12
 800da76:	46bd      	mov	sp, r7
 800da78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7c:	4770      	bx	lr

0800da7e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800da7e:	b580      	push	{r7, lr}
 800da80:	b086      	sub	sp, #24
 800da82:	af00      	add	r7, sp, #0
 800da84:	6078      	str	r0, [r7, #4]
 800da86:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	2b01      	cmp	r3, #1
 800da92:	d904      	bls.n	800da9e <get_fat+0x20>
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	69db      	ldr	r3, [r3, #28]
 800da98:	683a      	ldr	r2, [r7, #0]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d302      	bcc.n	800daa4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800da9e:	2301      	movs	r3, #1
 800daa0:	617b      	str	r3, [r7, #20]
 800daa2:	e0bb      	b.n	800dc1c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800daa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800daa8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	2b03      	cmp	r3, #3
 800dab0:	f000 8083 	beq.w	800dbba <get_fat+0x13c>
 800dab4:	2b03      	cmp	r3, #3
 800dab6:	f300 80a7 	bgt.w	800dc08 <get_fat+0x18a>
 800daba:	2b01      	cmp	r3, #1
 800dabc:	d002      	beq.n	800dac4 <get_fat+0x46>
 800dabe:	2b02      	cmp	r3, #2
 800dac0:	d056      	beq.n	800db70 <get_fat+0xf2>
 800dac2:	e0a1      	b.n	800dc08 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	60fb      	str	r3, [r7, #12]
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	085b      	lsrs	r3, r3, #1
 800dacc:	68fa      	ldr	r2, [r7, #12]
 800dace:	4413      	add	r3, r2
 800dad0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dad2:	693b      	ldr	r3, [r7, #16]
 800dad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	899b      	ldrh	r3, [r3, #12]
 800dada:	4619      	mov	r1, r3
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	fbb3 f3f1 	udiv	r3, r3, r1
 800dae2:	4413      	add	r3, r2
 800dae4:	4619      	mov	r1, r3
 800dae6:	6938      	ldr	r0, [r7, #16]
 800dae8:	f7ff ff0c 	bl	800d904 <move_window>
 800daec:	4603      	mov	r3, r0
 800daee:	2b00      	cmp	r3, #0
 800daf0:	f040 808d 	bne.w	800dc0e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	1c5a      	adds	r2, r3, #1
 800daf8:	60fa      	str	r2, [r7, #12]
 800dafa:	693a      	ldr	r2, [r7, #16]
 800dafc:	8992      	ldrh	r2, [r2, #12]
 800dafe:	fbb3 f1f2 	udiv	r1, r3, r2
 800db02:	fb01 f202 	mul.w	r2, r1, r2
 800db06:	1a9b      	subs	r3, r3, r2
 800db08:	693a      	ldr	r2, [r7, #16]
 800db0a:	4413      	add	r3, r2
 800db0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800db10:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	899b      	ldrh	r3, [r3, #12]
 800db1a:	4619      	mov	r1, r3
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	fbb3 f3f1 	udiv	r3, r3, r1
 800db22:	4413      	add	r3, r2
 800db24:	4619      	mov	r1, r3
 800db26:	6938      	ldr	r0, [r7, #16]
 800db28:	f7ff feec 	bl	800d904 <move_window>
 800db2c:	4603      	mov	r3, r0
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d16f      	bne.n	800dc12 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	899b      	ldrh	r3, [r3, #12]
 800db36:	461a      	mov	r2, r3
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	fbb3 f1f2 	udiv	r1, r3, r2
 800db3e:	fb01 f202 	mul.w	r2, r1, r2
 800db42:	1a9b      	subs	r3, r3, r2
 800db44:	693a      	ldr	r2, [r7, #16]
 800db46:	4413      	add	r3, r2
 800db48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800db4c:	021b      	lsls	r3, r3, #8
 800db4e:	461a      	mov	r2, r3
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	4313      	orrs	r3, r2
 800db54:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	f003 0301 	and.w	r3, r3, #1
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d002      	beq.n	800db66 <get_fat+0xe8>
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	091b      	lsrs	r3, r3, #4
 800db64:	e002      	b.n	800db6c <get_fat+0xee>
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800db6c:	617b      	str	r3, [r7, #20]
			break;
 800db6e:	e055      	b.n	800dc1c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	899b      	ldrh	r3, [r3, #12]
 800db78:	085b      	lsrs	r3, r3, #1
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	4619      	mov	r1, r3
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	fbb3 f3f1 	udiv	r3, r3, r1
 800db84:	4413      	add	r3, r2
 800db86:	4619      	mov	r1, r3
 800db88:	6938      	ldr	r0, [r7, #16]
 800db8a:	f7ff febb 	bl	800d904 <move_window>
 800db8e:	4603      	mov	r3, r0
 800db90:	2b00      	cmp	r3, #0
 800db92:	d140      	bne.n	800dc16 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800db94:	693b      	ldr	r3, [r7, #16]
 800db96:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	005b      	lsls	r3, r3, #1
 800db9e:	693a      	ldr	r2, [r7, #16]
 800dba0:	8992      	ldrh	r2, [r2, #12]
 800dba2:	fbb3 f0f2 	udiv	r0, r3, r2
 800dba6:	fb00 f202 	mul.w	r2, r0, r2
 800dbaa:	1a9b      	subs	r3, r3, r2
 800dbac:	440b      	add	r3, r1
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f7ff fbf8 	bl	800d3a4 <ld_word>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	617b      	str	r3, [r7, #20]
			break;
 800dbb8:	e030      	b.n	800dc1c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	899b      	ldrh	r3, [r3, #12]
 800dbc2:	089b      	lsrs	r3, r3, #2
 800dbc4:	b29b      	uxth	r3, r3
 800dbc6:	4619      	mov	r1, r3
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	fbb3 f3f1 	udiv	r3, r3, r1
 800dbce:	4413      	add	r3, r2
 800dbd0:	4619      	mov	r1, r3
 800dbd2:	6938      	ldr	r0, [r7, #16]
 800dbd4:	f7ff fe96 	bl	800d904 <move_window>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d11d      	bne.n	800dc1a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	009b      	lsls	r3, r3, #2
 800dbe8:	693a      	ldr	r2, [r7, #16]
 800dbea:	8992      	ldrh	r2, [r2, #12]
 800dbec:	fbb3 f0f2 	udiv	r0, r3, r2
 800dbf0:	fb00 f202 	mul.w	r2, r0, r2
 800dbf4:	1a9b      	subs	r3, r3, r2
 800dbf6:	440b      	add	r3, r1
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f7ff fbeb 	bl	800d3d4 <ld_dword>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800dc04:	617b      	str	r3, [r7, #20]
			break;
 800dc06:	e009      	b.n	800dc1c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800dc08:	2301      	movs	r3, #1
 800dc0a:	617b      	str	r3, [r7, #20]
 800dc0c:	e006      	b.n	800dc1c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc0e:	bf00      	nop
 800dc10:	e004      	b.n	800dc1c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc12:	bf00      	nop
 800dc14:	e002      	b.n	800dc1c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dc16:	bf00      	nop
 800dc18:	e000      	b.n	800dc1c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dc1a:	bf00      	nop
		}
	}

	return val;
 800dc1c:	697b      	ldr	r3, [r7, #20]
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3718      	adds	r7, #24
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}

0800dc26 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800dc26:	b590      	push	{r4, r7, lr}
 800dc28:	b089      	sub	sp, #36	; 0x24
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	60f8      	str	r0, [r7, #12]
 800dc2e:	60b9      	str	r1, [r7, #8]
 800dc30:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800dc32:	2302      	movs	r3, #2
 800dc34:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	f240 8102 	bls.w	800de42 <put_fat+0x21c>
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	69db      	ldr	r3, [r3, #28]
 800dc42:	68ba      	ldr	r2, [r7, #8]
 800dc44:	429a      	cmp	r2, r3
 800dc46:	f080 80fc 	bcs.w	800de42 <put_fat+0x21c>
		switch (fs->fs_type) {
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	781b      	ldrb	r3, [r3, #0]
 800dc4e:	2b03      	cmp	r3, #3
 800dc50:	f000 80b6 	beq.w	800ddc0 <put_fat+0x19a>
 800dc54:	2b03      	cmp	r3, #3
 800dc56:	f300 80fd 	bgt.w	800de54 <put_fat+0x22e>
 800dc5a:	2b01      	cmp	r3, #1
 800dc5c:	d003      	beq.n	800dc66 <put_fat+0x40>
 800dc5e:	2b02      	cmp	r3, #2
 800dc60:	f000 8083 	beq.w	800dd6a <put_fat+0x144>
 800dc64:	e0f6      	b.n	800de54 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	61bb      	str	r3, [r7, #24]
 800dc6a:	69bb      	ldr	r3, [r7, #24]
 800dc6c:	085b      	lsrs	r3, r3, #1
 800dc6e:	69ba      	ldr	r2, [r7, #24]
 800dc70:	4413      	add	r3, r2
 800dc72:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	899b      	ldrh	r3, [r3, #12]
 800dc7c:	4619      	mov	r1, r3
 800dc7e:	69bb      	ldr	r3, [r7, #24]
 800dc80:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc84:	4413      	add	r3, r2
 800dc86:	4619      	mov	r1, r3
 800dc88:	68f8      	ldr	r0, [r7, #12]
 800dc8a:	f7ff fe3b 	bl	800d904 <move_window>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dc92:	7ffb      	ldrb	r3, [r7, #31]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	f040 80d6 	bne.w	800de46 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dca0:	69bb      	ldr	r3, [r7, #24]
 800dca2:	1c5a      	adds	r2, r3, #1
 800dca4:	61ba      	str	r2, [r7, #24]
 800dca6:	68fa      	ldr	r2, [r7, #12]
 800dca8:	8992      	ldrh	r2, [r2, #12]
 800dcaa:	fbb3 f0f2 	udiv	r0, r3, r2
 800dcae:	fb00 f202 	mul.w	r2, r0, r2
 800dcb2:	1a9b      	subs	r3, r3, r2
 800dcb4:	440b      	add	r3, r1
 800dcb6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	f003 0301 	and.w	r3, r3, #1
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d00d      	beq.n	800dcde <put_fat+0xb8>
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	781b      	ldrb	r3, [r3, #0]
 800dcc6:	b25b      	sxtb	r3, r3
 800dcc8:	f003 030f 	and.w	r3, r3, #15
 800dccc:	b25a      	sxtb	r2, r3
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	b2db      	uxtb	r3, r3
 800dcd2:	011b      	lsls	r3, r3, #4
 800dcd4:	b25b      	sxtb	r3, r3
 800dcd6:	4313      	orrs	r3, r2
 800dcd8:	b25b      	sxtb	r3, r3
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	e001      	b.n	800dce2 <put_fat+0xbc>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	b2db      	uxtb	r3, r3
 800dce2:	697a      	ldr	r2, [r7, #20]
 800dce4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	2201      	movs	r2, #1
 800dcea:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	899b      	ldrh	r3, [r3, #12]
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	69bb      	ldr	r3, [r7, #24]
 800dcf8:	fbb3 f3f1 	udiv	r3, r3, r1
 800dcfc:	4413      	add	r3, r2
 800dcfe:	4619      	mov	r1, r3
 800dd00:	68f8      	ldr	r0, [r7, #12]
 800dd02:	f7ff fdff 	bl	800d904 <move_window>
 800dd06:	4603      	mov	r3, r0
 800dd08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd0a:	7ffb      	ldrb	r3, [r7, #31]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	f040 809c 	bne.w	800de4a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	899b      	ldrh	r3, [r3, #12]
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	69bb      	ldr	r3, [r7, #24]
 800dd20:	fbb3 f0f2 	udiv	r0, r3, r2
 800dd24:	fb00 f202 	mul.w	r2, r0, r2
 800dd28:	1a9b      	subs	r3, r3, r2
 800dd2a:	440b      	add	r3, r1
 800dd2c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	f003 0301 	and.w	r3, r3, #1
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d003      	beq.n	800dd40 <put_fat+0x11a>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	091b      	lsrs	r3, r3, #4
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	e00e      	b.n	800dd5e <put_fat+0x138>
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	781b      	ldrb	r3, [r3, #0]
 800dd44:	b25b      	sxtb	r3, r3
 800dd46:	f023 030f 	bic.w	r3, r3, #15
 800dd4a:	b25a      	sxtb	r2, r3
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	0a1b      	lsrs	r3, r3, #8
 800dd50:	b25b      	sxtb	r3, r3
 800dd52:	f003 030f 	and.w	r3, r3, #15
 800dd56:	b25b      	sxtb	r3, r3
 800dd58:	4313      	orrs	r3, r2
 800dd5a:	b25b      	sxtb	r3, r3
 800dd5c:	b2db      	uxtb	r3, r3
 800dd5e:	697a      	ldr	r2, [r7, #20]
 800dd60:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	2201      	movs	r2, #1
 800dd66:	70da      	strb	r2, [r3, #3]
			break;
 800dd68:	e074      	b.n	800de54 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	899b      	ldrh	r3, [r3, #12]
 800dd72:	085b      	lsrs	r3, r3, #1
 800dd74:	b29b      	uxth	r3, r3
 800dd76:	4619      	mov	r1, r3
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd7e:	4413      	add	r3, r2
 800dd80:	4619      	mov	r1, r3
 800dd82:	68f8      	ldr	r0, [r7, #12]
 800dd84:	f7ff fdbe 	bl	800d904 <move_window>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd8c:	7ffb      	ldrb	r3, [r7, #31]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d15d      	bne.n	800de4e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	005b      	lsls	r3, r3, #1
 800dd9c:	68fa      	ldr	r2, [r7, #12]
 800dd9e:	8992      	ldrh	r2, [r2, #12]
 800dda0:	fbb3 f0f2 	udiv	r0, r3, r2
 800dda4:	fb00 f202 	mul.w	r2, r0, r2
 800dda8:	1a9b      	subs	r3, r3, r2
 800ddaa:	440b      	add	r3, r1
 800ddac:	687a      	ldr	r2, [r7, #4]
 800ddae:	b292      	uxth	r2, r2
 800ddb0:	4611      	mov	r1, r2
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f7ff fb31 	bl	800d41a <st_word>
			fs->wflag = 1;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	2201      	movs	r2, #1
 800ddbc:	70da      	strb	r2, [r3, #3]
			break;
 800ddbe:	e049      	b.n	800de54 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	899b      	ldrh	r3, [r3, #12]
 800ddc8:	089b      	lsrs	r3, r3, #2
 800ddca:	b29b      	uxth	r3, r3
 800ddcc:	4619      	mov	r1, r3
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	fbb3 f3f1 	udiv	r3, r3, r1
 800ddd4:	4413      	add	r3, r2
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	68f8      	ldr	r0, [r7, #12]
 800ddda:	f7ff fd93 	bl	800d904 <move_window>
 800ddde:	4603      	mov	r3, r0
 800dde0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dde2:	7ffb      	ldrb	r3, [r7, #31]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d134      	bne.n	800de52 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	009b      	lsls	r3, r3, #2
 800ddf8:	68fa      	ldr	r2, [r7, #12]
 800ddfa:	8992      	ldrh	r2, [r2, #12]
 800ddfc:	fbb3 f0f2 	udiv	r0, r3, r2
 800de00:	fb00 f202 	mul.w	r2, r0, r2
 800de04:	1a9b      	subs	r3, r3, r2
 800de06:	440b      	add	r3, r1
 800de08:	4618      	mov	r0, r3
 800de0a:	f7ff fae3 	bl	800d3d4 <ld_dword>
 800de0e:	4603      	mov	r3, r0
 800de10:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800de14:	4323      	orrs	r3, r4
 800de16:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	009b      	lsls	r3, r3, #2
 800de22:	68fa      	ldr	r2, [r7, #12]
 800de24:	8992      	ldrh	r2, [r2, #12]
 800de26:	fbb3 f0f2 	udiv	r0, r3, r2
 800de2a:	fb00 f202 	mul.w	r2, r0, r2
 800de2e:	1a9b      	subs	r3, r3, r2
 800de30:	440b      	add	r3, r1
 800de32:	6879      	ldr	r1, [r7, #4]
 800de34:	4618      	mov	r0, r3
 800de36:	f7ff fb0b 	bl	800d450 <st_dword>
			fs->wflag = 1;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	2201      	movs	r2, #1
 800de3e:	70da      	strb	r2, [r3, #3]
			break;
 800de40:	e008      	b.n	800de54 <put_fat+0x22e>
		}
	}
 800de42:	bf00      	nop
 800de44:	e006      	b.n	800de54 <put_fat+0x22e>
			if (res != FR_OK) break;
 800de46:	bf00      	nop
 800de48:	e004      	b.n	800de54 <put_fat+0x22e>
			if (res != FR_OK) break;
 800de4a:	bf00      	nop
 800de4c:	e002      	b.n	800de54 <put_fat+0x22e>
			if (res != FR_OK) break;
 800de4e:	bf00      	nop
 800de50:	e000      	b.n	800de54 <put_fat+0x22e>
			if (res != FR_OK) break;
 800de52:	bf00      	nop
	return res;
 800de54:	7ffb      	ldrb	r3, [r7, #31]
}
 800de56:	4618      	mov	r0, r3
 800de58:	3724      	adds	r7, #36	; 0x24
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd90      	pop	{r4, r7, pc}

0800de5e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800de5e:	b580      	push	{r7, lr}
 800de60:	b088      	sub	sp, #32
 800de62:	af00      	add	r7, sp, #0
 800de64:	60f8      	str	r0, [r7, #12]
 800de66:	60b9      	str	r1, [r7, #8]
 800de68:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800de6a:	2300      	movs	r3, #0
 800de6c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	2b01      	cmp	r3, #1
 800de78:	d904      	bls.n	800de84 <remove_chain+0x26>
 800de7a:	69bb      	ldr	r3, [r7, #24]
 800de7c:	69db      	ldr	r3, [r3, #28]
 800de7e:	68ba      	ldr	r2, [r7, #8]
 800de80:	429a      	cmp	r2, r3
 800de82:	d301      	bcc.n	800de88 <remove_chain+0x2a>
 800de84:	2302      	movs	r3, #2
 800de86:	e04b      	b.n	800df20 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d00c      	beq.n	800dea8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800de8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de92:	6879      	ldr	r1, [r7, #4]
 800de94:	69b8      	ldr	r0, [r7, #24]
 800de96:	f7ff fec6 	bl	800dc26 <put_fat>
 800de9a:	4603      	mov	r3, r0
 800de9c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800de9e:	7ffb      	ldrb	r3, [r7, #31]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d001      	beq.n	800dea8 <remove_chain+0x4a>
 800dea4:	7ffb      	ldrb	r3, [r7, #31]
 800dea6:	e03b      	b.n	800df20 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800dea8:	68b9      	ldr	r1, [r7, #8]
 800deaa:	68f8      	ldr	r0, [r7, #12]
 800deac:	f7ff fde7 	bl	800da7e <get_fat>
 800deb0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d031      	beq.n	800df1c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	2b01      	cmp	r3, #1
 800debc:	d101      	bne.n	800dec2 <remove_chain+0x64>
 800debe:	2302      	movs	r3, #2
 800dec0:	e02e      	b.n	800df20 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dec8:	d101      	bne.n	800dece <remove_chain+0x70>
 800deca:	2301      	movs	r3, #1
 800decc:	e028      	b.n	800df20 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800dece:	2200      	movs	r2, #0
 800ded0:	68b9      	ldr	r1, [r7, #8]
 800ded2:	69b8      	ldr	r0, [r7, #24]
 800ded4:	f7ff fea7 	bl	800dc26 <put_fat>
 800ded8:	4603      	mov	r3, r0
 800deda:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800dedc:	7ffb      	ldrb	r3, [r7, #31]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d001      	beq.n	800dee6 <remove_chain+0x88>
 800dee2:	7ffb      	ldrb	r3, [r7, #31]
 800dee4:	e01c      	b.n	800df20 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800dee6:	69bb      	ldr	r3, [r7, #24]
 800dee8:	699a      	ldr	r2, [r3, #24]
 800deea:	69bb      	ldr	r3, [r7, #24]
 800deec:	69db      	ldr	r3, [r3, #28]
 800deee:	3b02      	subs	r3, #2
 800def0:	429a      	cmp	r2, r3
 800def2:	d20b      	bcs.n	800df0c <remove_chain+0xae>
			fs->free_clst++;
 800def4:	69bb      	ldr	r3, [r7, #24]
 800def6:	699b      	ldr	r3, [r3, #24]
 800def8:	1c5a      	adds	r2, r3, #1
 800defa:	69bb      	ldr	r3, [r7, #24]
 800defc:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800defe:	69bb      	ldr	r3, [r7, #24]
 800df00:	791b      	ldrb	r3, [r3, #4]
 800df02:	f043 0301 	orr.w	r3, r3, #1
 800df06:	b2da      	uxtb	r2, r3
 800df08:	69bb      	ldr	r3, [r7, #24]
 800df0a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800df0c:	697b      	ldr	r3, [r7, #20]
 800df0e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800df10:	69bb      	ldr	r3, [r7, #24]
 800df12:	69db      	ldr	r3, [r3, #28]
 800df14:	68ba      	ldr	r2, [r7, #8]
 800df16:	429a      	cmp	r2, r3
 800df18:	d3c6      	bcc.n	800dea8 <remove_chain+0x4a>
 800df1a:	e000      	b.n	800df1e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800df1c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800df1e:	2300      	movs	r3, #0
}
 800df20:	4618      	mov	r0, r3
 800df22:	3720      	adds	r7, #32
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}

0800df28 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b088      	sub	sp, #32
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d10d      	bne.n	800df5a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	695b      	ldr	r3, [r3, #20]
 800df42:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800df44:	69bb      	ldr	r3, [r7, #24]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d004      	beq.n	800df54 <create_chain+0x2c>
 800df4a:	693b      	ldr	r3, [r7, #16]
 800df4c:	69db      	ldr	r3, [r3, #28]
 800df4e:	69ba      	ldr	r2, [r7, #24]
 800df50:	429a      	cmp	r2, r3
 800df52:	d31b      	bcc.n	800df8c <create_chain+0x64>
 800df54:	2301      	movs	r3, #1
 800df56:	61bb      	str	r3, [r7, #24]
 800df58:	e018      	b.n	800df8c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800df5a:	6839      	ldr	r1, [r7, #0]
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f7ff fd8e 	bl	800da7e <get_fat>
 800df62:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	2b01      	cmp	r3, #1
 800df68:	d801      	bhi.n	800df6e <create_chain+0x46>
 800df6a:	2301      	movs	r3, #1
 800df6c:	e070      	b.n	800e050 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df74:	d101      	bne.n	800df7a <create_chain+0x52>
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	e06a      	b.n	800e050 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800df7a:	693b      	ldr	r3, [r7, #16]
 800df7c:	69db      	ldr	r3, [r3, #28]
 800df7e:	68fa      	ldr	r2, [r7, #12]
 800df80:	429a      	cmp	r2, r3
 800df82:	d201      	bcs.n	800df88 <create_chain+0x60>
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	e063      	b.n	800e050 <create_chain+0x128>
		scl = clst;
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800df8c:	69bb      	ldr	r3, [r7, #24]
 800df8e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800df90:	69fb      	ldr	r3, [r7, #28]
 800df92:	3301      	adds	r3, #1
 800df94:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800df96:	693b      	ldr	r3, [r7, #16]
 800df98:	69db      	ldr	r3, [r3, #28]
 800df9a:	69fa      	ldr	r2, [r7, #28]
 800df9c:	429a      	cmp	r2, r3
 800df9e:	d307      	bcc.n	800dfb0 <create_chain+0x88>
				ncl = 2;
 800dfa0:	2302      	movs	r3, #2
 800dfa2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800dfa4:	69fa      	ldr	r2, [r7, #28]
 800dfa6:	69bb      	ldr	r3, [r7, #24]
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d901      	bls.n	800dfb0 <create_chain+0x88>
 800dfac:	2300      	movs	r3, #0
 800dfae:	e04f      	b.n	800e050 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dfb0:	69f9      	ldr	r1, [r7, #28]
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f7ff fd63 	bl	800da7e <get_fat>
 800dfb8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d00e      	beq.n	800dfde <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	2b01      	cmp	r3, #1
 800dfc4:	d003      	beq.n	800dfce <create_chain+0xa6>
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfcc:	d101      	bne.n	800dfd2 <create_chain+0xaa>
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	e03e      	b.n	800e050 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800dfd2:	69fa      	ldr	r2, [r7, #28]
 800dfd4:	69bb      	ldr	r3, [r7, #24]
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	d1da      	bne.n	800df90 <create_chain+0x68>
 800dfda:	2300      	movs	r3, #0
 800dfdc:	e038      	b.n	800e050 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800dfde:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dfe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfe4:	69f9      	ldr	r1, [r7, #28]
 800dfe6:	6938      	ldr	r0, [r7, #16]
 800dfe8:	f7ff fe1d 	bl	800dc26 <put_fat>
 800dfec:	4603      	mov	r3, r0
 800dfee:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800dff0:	7dfb      	ldrb	r3, [r7, #23]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d109      	bne.n	800e00a <create_chain+0xe2>
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d006      	beq.n	800e00a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800dffc:	69fa      	ldr	r2, [r7, #28]
 800dffe:	6839      	ldr	r1, [r7, #0]
 800e000:	6938      	ldr	r0, [r7, #16]
 800e002:	f7ff fe10 	bl	800dc26 <put_fat>
 800e006:	4603      	mov	r3, r0
 800e008:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e00a:	7dfb      	ldrb	r3, [r7, #23]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d116      	bne.n	800e03e <create_chain+0x116>
		fs->last_clst = ncl;
 800e010:	693b      	ldr	r3, [r7, #16]
 800e012:	69fa      	ldr	r2, [r7, #28]
 800e014:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	699a      	ldr	r2, [r3, #24]
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	69db      	ldr	r3, [r3, #28]
 800e01e:	3b02      	subs	r3, #2
 800e020:	429a      	cmp	r2, r3
 800e022:	d804      	bhi.n	800e02e <create_chain+0x106>
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	699b      	ldr	r3, [r3, #24]
 800e028:	1e5a      	subs	r2, r3, #1
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	791b      	ldrb	r3, [r3, #4]
 800e032:	f043 0301 	orr.w	r3, r3, #1
 800e036:	b2da      	uxtb	r2, r3
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	711a      	strb	r2, [r3, #4]
 800e03c:	e007      	b.n	800e04e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e03e:	7dfb      	ldrb	r3, [r7, #23]
 800e040:	2b01      	cmp	r3, #1
 800e042:	d102      	bne.n	800e04a <create_chain+0x122>
 800e044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e048:	e000      	b.n	800e04c <create_chain+0x124>
 800e04a:	2301      	movs	r3, #1
 800e04c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e04e:	69fb      	ldr	r3, [r7, #28]
}
 800e050:	4618      	mov	r0, r3
 800e052:	3720      	adds	r7, #32
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}

0800e058 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e058:	b480      	push	{r7}
 800e05a:	b087      	sub	sp, #28
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e06c:	3304      	adds	r3, #4
 800e06e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	899b      	ldrh	r3, [r3, #12]
 800e074:	461a      	mov	r2, r3
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	fbb3 f3f2 	udiv	r3, r3, r2
 800e07c:	68fa      	ldr	r2, [r7, #12]
 800e07e:	8952      	ldrh	r2, [r2, #10]
 800e080:	fbb3 f3f2 	udiv	r3, r3, r2
 800e084:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	1d1a      	adds	r2, r3, #4
 800e08a:	613a      	str	r2, [r7, #16]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d101      	bne.n	800e09a <clmt_clust+0x42>
 800e096:	2300      	movs	r3, #0
 800e098:	e010      	b.n	800e0bc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800e09a:	697a      	ldr	r2, [r7, #20]
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	d307      	bcc.n	800e0b2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800e0a2:	697a      	ldr	r2, [r7, #20]
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	1ad3      	subs	r3, r2, r3
 800e0a8:	617b      	str	r3, [r7, #20]
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	3304      	adds	r3, #4
 800e0ae:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e0b0:	e7e9      	b.n	800e086 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800e0b2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e0b4:	693b      	ldr	r3, [r7, #16]
 800e0b6:	681a      	ldr	r2, [r3, #0]
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	4413      	add	r3, r2
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	371c      	adds	r7, #28
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c6:	4770      	bx	lr

0800e0c8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b086      	sub	sp, #24
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
 800e0d0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e0d8:	683b      	ldr	r3, [r7, #0]
 800e0da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e0de:	d204      	bcs.n	800e0ea <dir_sdi+0x22>
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	f003 031f 	and.w	r3, r3, #31
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d001      	beq.n	800e0ee <dir_sdi+0x26>
		return FR_INT_ERR;
 800e0ea:	2302      	movs	r3, #2
 800e0ec:	e071      	b.n	800e1d2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	683a      	ldr	r2, [r7, #0]
 800e0f2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	689b      	ldr	r3, [r3, #8]
 800e0f8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d106      	bne.n	800e10e <dir_sdi+0x46>
 800e100:	693b      	ldr	r3, [r7, #16]
 800e102:	781b      	ldrb	r3, [r3, #0]
 800e104:	2b02      	cmp	r3, #2
 800e106:	d902      	bls.n	800e10e <dir_sdi+0x46>
		clst = fs->dirbase;
 800e108:	693b      	ldr	r3, [r7, #16]
 800e10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e10c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d10c      	bne.n	800e12e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	095b      	lsrs	r3, r3, #5
 800e118:	693a      	ldr	r2, [r7, #16]
 800e11a:	8912      	ldrh	r2, [r2, #8]
 800e11c:	4293      	cmp	r3, r2
 800e11e:	d301      	bcc.n	800e124 <dir_sdi+0x5c>
 800e120:	2302      	movs	r3, #2
 800e122:	e056      	b.n	800e1d2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	61da      	str	r2, [r3, #28]
 800e12c:	e02d      	b.n	800e18a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	895b      	ldrh	r3, [r3, #10]
 800e132:	461a      	mov	r2, r3
 800e134:	693b      	ldr	r3, [r7, #16]
 800e136:	899b      	ldrh	r3, [r3, #12]
 800e138:	fb02 f303 	mul.w	r3, r2, r3
 800e13c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e13e:	e019      	b.n	800e174 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	6979      	ldr	r1, [r7, #20]
 800e144:	4618      	mov	r0, r3
 800e146:	f7ff fc9a 	bl	800da7e <get_fat>
 800e14a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e152:	d101      	bne.n	800e158 <dir_sdi+0x90>
 800e154:	2301      	movs	r3, #1
 800e156:	e03c      	b.n	800e1d2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	2b01      	cmp	r3, #1
 800e15c:	d904      	bls.n	800e168 <dir_sdi+0xa0>
 800e15e:	693b      	ldr	r3, [r7, #16]
 800e160:	69db      	ldr	r3, [r3, #28]
 800e162:	697a      	ldr	r2, [r7, #20]
 800e164:	429a      	cmp	r2, r3
 800e166:	d301      	bcc.n	800e16c <dir_sdi+0xa4>
 800e168:	2302      	movs	r3, #2
 800e16a:	e032      	b.n	800e1d2 <dir_sdi+0x10a>
			ofs -= csz;
 800e16c:	683a      	ldr	r2, [r7, #0]
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	1ad3      	subs	r3, r2, r3
 800e172:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e174:	683a      	ldr	r2, [r7, #0]
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	429a      	cmp	r2, r3
 800e17a:	d2e1      	bcs.n	800e140 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800e17c:	6979      	ldr	r1, [r7, #20]
 800e17e:	6938      	ldr	r0, [r7, #16]
 800e180:	f7ff fc5e 	bl	800da40 <clust2sect>
 800e184:	4602      	mov	r2, r0
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	697a      	ldr	r2, [r7, #20]
 800e18e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	69db      	ldr	r3, [r3, #28]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d101      	bne.n	800e19c <dir_sdi+0xd4>
 800e198:	2302      	movs	r3, #2
 800e19a:	e01a      	b.n	800e1d2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	69da      	ldr	r2, [r3, #28]
 800e1a0:	693b      	ldr	r3, [r7, #16]
 800e1a2:	899b      	ldrh	r3, [r3, #12]
 800e1a4:	4619      	mov	r1, r3
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	fbb3 f3f1 	udiv	r3, r3, r1
 800e1ac:	441a      	add	r2, r3
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e1b2:	693b      	ldr	r3, [r7, #16]
 800e1b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	899b      	ldrh	r3, [r3, #12]
 800e1bc:	461a      	mov	r2, r3
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	fbb3 f0f2 	udiv	r0, r3, r2
 800e1c4:	fb00 f202 	mul.w	r2, r0, r2
 800e1c8:	1a9b      	subs	r3, r3, r2
 800e1ca:	18ca      	adds	r2, r1, r3
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e1d0:	2300      	movs	r3, #0
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3718      	adds	r7, #24
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}

0800e1da <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e1da:	b580      	push	{r7, lr}
 800e1dc:	b086      	sub	sp, #24
 800e1de:	af00      	add	r7, sp, #0
 800e1e0:	6078      	str	r0, [r7, #4]
 800e1e2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	695b      	ldr	r3, [r3, #20]
 800e1ee:	3320      	adds	r3, #32
 800e1f0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	69db      	ldr	r3, [r3, #28]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d003      	beq.n	800e202 <dir_next+0x28>
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e200:	d301      	bcc.n	800e206 <dir_next+0x2c>
 800e202:	2304      	movs	r3, #4
 800e204:	e0bb      	b.n	800e37e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	899b      	ldrh	r3, [r3, #12]
 800e20a:	461a      	mov	r2, r3
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e212:	fb01 f202 	mul.w	r2, r1, r2
 800e216:	1a9b      	subs	r3, r3, r2
 800e218:	2b00      	cmp	r3, #0
 800e21a:	f040 809d 	bne.w	800e358 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	69db      	ldr	r3, [r3, #28]
 800e222:	1c5a      	adds	r2, r3, #1
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	699b      	ldr	r3, [r3, #24]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d10b      	bne.n	800e248 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	095b      	lsrs	r3, r3, #5
 800e234:	68fa      	ldr	r2, [r7, #12]
 800e236:	8912      	ldrh	r2, [r2, #8]
 800e238:	4293      	cmp	r3, r2
 800e23a:	f0c0 808d 	bcc.w	800e358 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2200      	movs	r2, #0
 800e242:	61da      	str	r2, [r3, #28]
 800e244:	2304      	movs	r3, #4
 800e246:	e09a      	b.n	800e37e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	899b      	ldrh	r3, [r3, #12]
 800e24c:	461a      	mov	r2, r3
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	fbb3 f3f2 	udiv	r3, r3, r2
 800e254:	68fa      	ldr	r2, [r7, #12]
 800e256:	8952      	ldrh	r2, [r2, #10]
 800e258:	3a01      	subs	r2, #1
 800e25a:	4013      	ands	r3, r2
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d17b      	bne.n	800e358 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e260:	687a      	ldr	r2, [r7, #4]
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	699b      	ldr	r3, [r3, #24]
 800e266:	4619      	mov	r1, r3
 800e268:	4610      	mov	r0, r2
 800e26a:	f7ff fc08 	bl	800da7e <get_fat>
 800e26e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	2b01      	cmp	r3, #1
 800e274:	d801      	bhi.n	800e27a <dir_next+0xa0>
 800e276:	2302      	movs	r3, #2
 800e278:	e081      	b.n	800e37e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e280:	d101      	bne.n	800e286 <dir_next+0xac>
 800e282:	2301      	movs	r3, #1
 800e284:	e07b      	b.n	800e37e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	69db      	ldr	r3, [r3, #28]
 800e28a:	697a      	ldr	r2, [r7, #20]
 800e28c:	429a      	cmp	r2, r3
 800e28e:	d359      	bcc.n	800e344 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d104      	bne.n	800e2a0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2200      	movs	r2, #0
 800e29a:	61da      	str	r2, [r3, #28]
 800e29c:	2304      	movs	r3, #4
 800e29e:	e06e      	b.n	800e37e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e2a0:	687a      	ldr	r2, [r7, #4]
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	699b      	ldr	r3, [r3, #24]
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	4610      	mov	r0, r2
 800e2aa:	f7ff fe3d 	bl	800df28 <create_chain>
 800e2ae:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e2b0:	697b      	ldr	r3, [r7, #20]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d101      	bne.n	800e2ba <dir_next+0xe0>
 800e2b6:	2307      	movs	r3, #7
 800e2b8:	e061      	b.n	800e37e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	d101      	bne.n	800e2c4 <dir_next+0xea>
 800e2c0:	2302      	movs	r3, #2
 800e2c2:	e05c      	b.n	800e37e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e2c4:	697b      	ldr	r3, [r7, #20]
 800e2c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2ca:	d101      	bne.n	800e2d0 <dir_next+0xf6>
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	e056      	b.n	800e37e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e2d0:	68f8      	ldr	r0, [r7, #12]
 800e2d2:	f7ff fad3 	bl	800d87c <sync_window>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d001      	beq.n	800e2e0 <dir_next+0x106>
 800e2dc:	2301      	movs	r3, #1
 800e2de:	e04e      	b.n	800e37e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	899b      	ldrh	r3, [r3, #12]
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	2100      	movs	r1, #0
 800e2ee:	f7ff f8fc 	bl	800d4ea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	613b      	str	r3, [r7, #16]
 800e2f6:	6979      	ldr	r1, [r7, #20]
 800e2f8:	68f8      	ldr	r0, [r7, #12]
 800e2fa:	f7ff fba1 	bl	800da40 <clust2sect>
 800e2fe:	4602      	mov	r2, r0
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	635a      	str	r2, [r3, #52]	; 0x34
 800e304:	e012      	b.n	800e32c <dir_next+0x152>
						fs->wflag = 1;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	2201      	movs	r2, #1
 800e30a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e30c:	68f8      	ldr	r0, [r7, #12]
 800e30e:	f7ff fab5 	bl	800d87c <sync_window>
 800e312:	4603      	mov	r3, r0
 800e314:	2b00      	cmp	r3, #0
 800e316:	d001      	beq.n	800e31c <dir_next+0x142>
 800e318:	2301      	movs	r3, #1
 800e31a:	e030      	b.n	800e37e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	3301      	adds	r3, #1
 800e320:	613b      	str	r3, [r7, #16]
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e326:	1c5a      	adds	r2, r3, #1
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	635a      	str	r2, [r3, #52]	; 0x34
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	895b      	ldrh	r3, [r3, #10]
 800e330:	461a      	mov	r2, r3
 800e332:	693b      	ldr	r3, [r7, #16]
 800e334:	4293      	cmp	r3, r2
 800e336:	d3e6      	bcc.n	800e306 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e33c:	693b      	ldr	r3, [r7, #16]
 800e33e:	1ad2      	subs	r2, r2, r3
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	697a      	ldr	r2, [r7, #20]
 800e348:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e34a:	6979      	ldr	r1, [r7, #20]
 800e34c:	68f8      	ldr	r0, [r7, #12]
 800e34e:	f7ff fb77 	bl	800da40 <clust2sect>
 800e352:	4602      	mov	r2, r0
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	68ba      	ldr	r2, [r7, #8]
 800e35c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	899b      	ldrh	r3, [r3, #12]
 800e368:	461a      	mov	r2, r3
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	fbb3 f0f2 	udiv	r0, r3, r2
 800e370:	fb00 f202 	mul.w	r2, r0, r2
 800e374:	1a9b      	subs	r3, r3, r2
 800e376:	18ca      	adds	r2, r1, r3
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e37c:	2300      	movs	r3, #0
}
 800e37e:	4618      	mov	r0, r3
 800e380:	3718      	adds	r7, #24
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}

0800e386 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e386:	b580      	push	{r7, lr}
 800e388:	b086      	sub	sp, #24
 800e38a:	af00      	add	r7, sp, #0
 800e38c:	6078      	str	r0, [r7, #4]
 800e38e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e396:	2100      	movs	r1, #0
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f7ff fe95 	bl	800e0c8 <dir_sdi>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e3a2:	7dfb      	ldrb	r3, [r7, #23]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d12b      	bne.n	800e400 <dir_alloc+0x7a>
		n = 0;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	69db      	ldr	r3, [r3, #28]
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	68f8      	ldr	r0, [r7, #12]
 800e3b4:	f7ff faa6 	bl	800d904 <move_window>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e3bc:	7dfb      	ldrb	r3, [r7, #23]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d11d      	bne.n	800e3fe <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6a1b      	ldr	r3, [r3, #32]
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	2be5      	cmp	r3, #229	; 0xe5
 800e3ca:	d004      	beq.n	800e3d6 <dir_alloc+0x50>
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6a1b      	ldr	r3, [r3, #32]
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d107      	bne.n	800e3e6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e3d6:	693b      	ldr	r3, [r7, #16]
 800e3d8:	3301      	adds	r3, #1
 800e3da:	613b      	str	r3, [r7, #16]
 800e3dc:	693a      	ldr	r2, [r7, #16]
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d102      	bne.n	800e3ea <dir_alloc+0x64>
 800e3e4:	e00c      	b.n	800e400 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e3ea:	2101      	movs	r1, #1
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f7ff fef4 	bl	800e1da <dir_next>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e3f6:	7dfb      	ldrb	r3, [r7, #23]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d0d7      	beq.n	800e3ac <dir_alloc+0x26>
 800e3fc:	e000      	b.n	800e400 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e3fe:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e400:	7dfb      	ldrb	r3, [r7, #23]
 800e402:	2b04      	cmp	r3, #4
 800e404:	d101      	bne.n	800e40a <dir_alloc+0x84>
 800e406:	2307      	movs	r3, #7
 800e408:	75fb      	strb	r3, [r7, #23]
	return res;
 800e40a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	3718      	adds	r7, #24
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}

0800e414 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b084      	sub	sp, #16
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	331a      	adds	r3, #26
 800e422:	4618      	mov	r0, r3
 800e424:	f7fe ffbe 	bl	800d3a4 <ld_word>
 800e428:	4603      	mov	r3, r0
 800e42a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	781b      	ldrb	r3, [r3, #0]
 800e430:	2b03      	cmp	r3, #3
 800e432:	d109      	bne.n	800e448 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	3314      	adds	r3, #20
 800e438:	4618      	mov	r0, r3
 800e43a:	f7fe ffb3 	bl	800d3a4 <ld_word>
 800e43e:	4603      	mov	r3, r0
 800e440:	041b      	lsls	r3, r3, #16
 800e442:	68fa      	ldr	r2, [r7, #12]
 800e444:	4313      	orrs	r3, r2
 800e446:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e448:	68fb      	ldr	r3, [r7, #12]
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3710      	adds	r7, #16
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}

0800e452 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e452:	b580      	push	{r7, lr}
 800e454:	b084      	sub	sp, #16
 800e456:	af00      	add	r7, sp, #0
 800e458:	60f8      	str	r0, [r7, #12]
 800e45a:	60b9      	str	r1, [r7, #8]
 800e45c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	331a      	adds	r3, #26
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	b292      	uxth	r2, r2
 800e466:	4611      	mov	r1, r2
 800e468:	4618      	mov	r0, r3
 800e46a:	f7fe ffd6 	bl	800d41a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	781b      	ldrb	r3, [r3, #0]
 800e472:	2b03      	cmp	r3, #3
 800e474:	d109      	bne.n	800e48a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	f103 0214 	add.w	r2, r3, #20
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	0c1b      	lsrs	r3, r3, #16
 800e480:	b29b      	uxth	r3, r3
 800e482:	4619      	mov	r1, r3
 800e484:	4610      	mov	r0, r2
 800e486:	f7fe ffc8 	bl	800d41a <st_word>
	}
}
 800e48a:	bf00      	nop
 800e48c:	3710      	adds	r7, #16
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}
	...

0800e494 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e494:	b590      	push	{r4, r7, lr}
 800e496:	b087      	sub	sp, #28
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
 800e49c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	331a      	adds	r3, #26
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f7fe ff7e 	bl	800d3a4 <ld_word>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d001      	beq.n	800e4b2 <cmp_lfn+0x1e>
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	e059      	b.n	800e566 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	781b      	ldrb	r3, [r3, #0]
 800e4b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e4ba:	1e5a      	subs	r2, r3, #1
 800e4bc:	4613      	mov	r3, r2
 800e4be:	005b      	lsls	r3, r3, #1
 800e4c0:	4413      	add	r3, r2
 800e4c2:	009b      	lsls	r3, r3, #2
 800e4c4:	4413      	add	r3, r2
 800e4c6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	81fb      	strh	r3, [r7, #14]
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	613b      	str	r3, [r7, #16]
 800e4d0:	e033      	b.n	800e53a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e4d2:	4a27      	ldr	r2, [pc, #156]	; (800e570 <cmp_lfn+0xdc>)
 800e4d4:	693b      	ldr	r3, [r7, #16]
 800e4d6:	4413      	add	r3, r2
 800e4d8:	781b      	ldrb	r3, [r3, #0]
 800e4da:	461a      	mov	r2, r3
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	4413      	add	r3, r2
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7fe ff5f 	bl	800d3a4 <ld_word>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e4ea:	89fb      	ldrh	r3, [r7, #14]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d01a      	beq.n	800e526 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	2bfe      	cmp	r3, #254	; 0xfe
 800e4f4:	d812      	bhi.n	800e51c <cmp_lfn+0x88>
 800e4f6:	89bb      	ldrh	r3, [r7, #12]
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f002 fb5b 	bl	8010bb4 <ff_wtoupper>
 800e4fe:	4603      	mov	r3, r0
 800e500:	461c      	mov	r4, r3
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	1c5a      	adds	r2, r3, #1
 800e506:	617a      	str	r2, [r7, #20]
 800e508:	005b      	lsls	r3, r3, #1
 800e50a:	687a      	ldr	r2, [r7, #4]
 800e50c:	4413      	add	r3, r2
 800e50e:	881b      	ldrh	r3, [r3, #0]
 800e510:	4618      	mov	r0, r3
 800e512:	f002 fb4f 	bl	8010bb4 <ff_wtoupper>
 800e516:	4603      	mov	r3, r0
 800e518:	429c      	cmp	r4, r3
 800e51a:	d001      	beq.n	800e520 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e51c:	2300      	movs	r3, #0
 800e51e:	e022      	b.n	800e566 <cmp_lfn+0xd2>
			}
			wc = uc;
 800e520:	89bb      	ldrh	r3, [r7, #12]
 800e522:	81fb      	strh	r3, [r7, #14]
 800e524:	e006      	b.n	800e534 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e526:	89bb      	ldrh	r3, [r7, #12]
 800e528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e52c:	4293      	cmp	r3, r2
 800e52e:	d001      	beq.n	800e534 <cmp_lfn+0xa0>
 800e530:	2300      	movs	r3, #0
 800e532:	e018      	b.n	800e566 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	3301      	adds	r3, #1
 800e538:	613b      	str	r3, [r7, #16]
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	2b0c      	cmp	r3, #12
 800e53e:	d9c8      	bls.n	800e4d2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	781b      	ldrb	r3, [r3, #0]
 800e544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d00b      	beq.n	800e564 <cmp_lfn+0xd0>
 800e54c:	89fb      	ldrh	r3, [r7, #14]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d008      	beq.n	800e564 <cmp_lfn+0xd0>
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	005b      	lsls	r3, r3, #1
 800e556:	687a      	ldr	r2, [r7, #4]
 800e558:	4413      	add	r3, r2
 800e55a:	881b      	ldrh	r3, [r3, #0]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d001      	beq.n	800e564 <cmp_lfn+0xd0>
 800e560:	2300      	movs	r3, #0
 800e562:	e000      	b.n	800e566 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e564:	2301      	movs	r3, #1
}
 800e566:	4618      	mov	r0, r3
 800e568:	371c      	adds	r7, #28
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd90      	pop	{r4, r7, pc}
 800e56e:	bf00      	nop
 800e570:	08011e60 	.word	0x08011e60

0800e574 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b086      	sub	sp, #24
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
 800e57c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	331a      	adds	r3, #26
 800e582:	4618      	mov	r0, r3
 800e584:	f7fe ff0e 	bl	800d3a4 <ld_word>
 800e588:	4603      	mov	r3, r0
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d001      	beq.n	800e592 <pick_lfn+0x1e>
 800e58e:	2300      	movs	r3, #0
 800e590:	e04d      	b.n	800e62e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	781b      	ldrb	r3, [r3, #0]
 800e596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e59a:	1e5a      	subs	r2, r3, #1
 800e59c:	4613      	mov	r3, r2
 800e59e:	005b      	lsls	r3, r3, #1
 800e5a0:	4413      	add	r3, r2
 800e5a2:	009b      	lsls	r3, r3, #2
 800e5a4:	4413      	add	r3, r2
 800e5a6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	81fb      	strh	r3, [r7, #14]
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	613b      	str	r3, [r7, #16]
 800e5b0:	e028      	b.n	800e604 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e5b2:	4a21      	ldr	r2, [pc, #132]	; (800e638 <pick_lfn+0xc4>)
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	4413      	add	r3, r2
 800e5b8:	781b      	ldrb	r3, [r3, #0]
 800e5ba:	461a      	mov	r2, r3
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	4413      	add	r3, r2
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f7fe feef 	bl	800d3a4 <ld_word>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e5ca:	89fb      	ldrh	r3, [r7, #14]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d00f      	beq.n	800e5f0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800e5d0:	697b      	ldr	r3, [r7, #20]
 800e5d2:	2bfe      	cmp	r3, #254	; 0xfe
 800e5d4:	d901      	bls.n	800e5da <pick_lfn+0x66>
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	e029      	b.n	800e62e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800e5da:	89bb      	ldrh	r3, [r7, #12]
 800e5dc:	81fb      	strh	r3, [r7, #14]
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	1c5a      	adds	r2, r3, #1
 800e5e2:	617a      	str	r2, [r7, #20]
 800e5e4:	005b      	lsls	r3, r3, #1
 800e5e6:	687a      	ldr	r2, [r7, #4]
 800e5e8:	4413      	add	r3, r2
 800e5ea:	89fa      	ldrh	r2, [r7, #14]
 800e5ec:	801a      	strh	r2, [r3, #0]
 800e5ee:	e006      	b.n	800e5fe <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e5f0:	89bb      	ldrh	r3, [r7, #12]
 800e5f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	d001      	beq.n	800e5fe <pick_lfn+0x8a>
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	e017      	b.n	800e62e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e5fe:	693b      	ldr	r3, [r7, #16]
 800e600:	3301      	adds	r3, #1
 800e602:	613b      	str	r3, [r7, #16]
 800e604:	693b      	ldr	r3, [r7, #16]
 800e606:	2b0c      	cmp	r3, #12
 800e608:	d9d3      	bls.n	800e5b2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e612:	2b00      	cmp	r3, #0
 800e614:	d00a      	beq.n	800e62c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	2bfe      	cmp	r3, #254	; 0xfe
 800e61a:	d901      	bls.n	800e620 <pick_lfn+0xac>
 800e61c:	2300      	movs	r3, #0
 800e61e:	e006      	b.n	800e62e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	005b      	lsls	r3, r3, #1
 800e624:	687a      	ldr	r2, [r7, #4]
 800e626:	4413      	add	r3, r2
 800e628:	2200      	movs	r2, #0
 800e62a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800e62c:	2301      	movs	r3, #1
}
 800e62e:	4618      	mov	r0, r3
 800e630:	3718      	adds	r7, #24
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}
 800e636:	bf00      	nop
 800e638:	08011e60 	.word	0x08011e60

0800e63c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b088      	sub	sp, #32
 800e640:	af00      	add	r7, sp, #0
 800e642:	60f8      	str	r0, [r7, #12]
 800e644:	60b9      	str	r1, [r7, #8]
 800e646:	4611      	mov	r1, r2
 800e648:	461a      	mov	r2, r3
 800e64a:	460b      	mov	r3, r1
 800e64c:	71fb      	strb	r3, [r7, #7]
 800e64e:	4613      	mov	r3, r2
 800e650:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	330d      	adds	r3, #13
 800e656:	79ba      	ldrb	r2, [r7, #6]
 800e658:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	330b      	adds	r3, #11
 800e65e:	220f      	movs	r2, #15
 800e660:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	330c      	adds	r3, #12
 800e666:	2200      	movs	r2, #0
 800e668:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e66a:	68bb      	ldr	r3, [r7, #8]
 800e66c:	331a      	adds	r3, #26
 800e66e:	2100      	movs	r1, #0
 800e670:	4618      	mov	r0, r3
 800e672:	f7fe fed2 	bl	800d41a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e676:	79fb      	ldrb	r3, [r7, #7]
 800e678:	1e5a      	subs	r2, r3, #1
 800e67a:	4613      	mov	r3, r2
 800e67c:	005b      	lsls	r3, r3, #1
 800e67e:	4413      	add	r3, r2
 800e680:	009b      	lsls	r3, r3, #2
 800e682:	4413      	add	r3, r2
 800e684:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e686:	2300      	movs	r3, #0
 800e688:	82fb      	strh	r3, [r7, #22]
 800e68a:	2300      	movs	r3, #0
 800e68c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e68e:	8afb      	ldrh	r3, [r7, #22]
 800e690:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e694:	4293      	cmp	r3, r2
 800e696:	d007      	beq.n	800e6a8 <put_lfn+0x6c>
 800e698:	69fb      	ldr	r3, [r7, #28]
 800e69a:	1c5a      	adds	r2, r3, #1
 800e69c:	61fa      	str	r2, [r7, #28]
 800e69e:	005b      	lsls	r3, r3, #1
 800e6a0:	68fa      	ldr	r2, [r7, #12]
 800e6a2:	4413      	add	r3, r2
 800e6a4:	881b      	ldrh	r3, [r3, #0]
 800e6a6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e6a8:	4a17      	ldr	r2, [pc, #92]	; (800e708 <put_lfn+0xcc>)
 800e6aa:	69bb      	ldr	r3, [r7, #24]
 800e6ac:	4413      	add	r3, r2
 800e6ae:	781b      	ldrb	r3, [r3, #0]
 800e6b0:	461a      	mov	r2, r3
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	4413      	add	r3, r2
 800e6b6:	8afa      	ldrh	r2, [r7, #22]
 800e6b8:	4611      	mov	r1, r2
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7fe fead 	bl	800d41a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e6c0:	8afb      	ldrh	r3, [r7, #22]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d102      	bne.n	800e6cc <put_lfn+0x90>
 800e6c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e6ca:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e6cc:	69bb      	ldr	r3, [r7, #24]
 800e6ce:	3301      	adds	r3, #1
 800e6d0:	61bb      	str	r3, [r7, #24]
 800e6d2:	69bb      	ldr	r3, [r7, #24]
 800e6d4:	2b0c      	cmp	r3, #12
 800e6d6:	d9da      	bls.n	800e68e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e6d8:	8afb      	ldrh	r3, [r7, #22]
 800e6da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6de:	4293      	cmp	r3, r2
 800e6e0:	d006      	beq.n	800e6f0 <put_lfn+0xb4>
 800e6e2:	69fb      	ldr	r3, [r7, #28]
 800e6e4:	005b      	lsls	r3, r3, #1
 800e6e6:	68fa      	ldr	r2, [r7, #12]
 800e6e8:	4413      	add	r3, r2
 800e6ea:	881b      	ldrh	r3, [r3, #0]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d103      	bne.n	800e6f8 <put_lfn+0xbc>
 800e6f0:	79fb      	ldrb	r3, [r7, #7]
 800e6f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6f6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e6f8:	68bb      	ldr	r3, [r7, #8]
 800e6fa:	79fa      	ldrb	r2, [r7, #7]
 800e6fc:	701a      	strb	r2, [r3, #0]
}
 800e6fe:	bf00      	nop
 800e700:	3720      	adds	r7, #32
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	08011e60 	.word	0x08011e60

0800e70c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b08c      	sub	sp, #48	; 0x30
 800e710:	af00      	add	r7, sp, #0
 800e712:	60f8      	str	r0, [r7, #12]
 800e714:	60b9      	str	r1, [r7, #8]
 800e716:	607a      	str	r2, [r7, #4]
 800e718:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e71a:	220b      	movs	r2, #11
 800e71c:	68b9      	ldr	r1, [r7, #8]
 800e71e:	68f8      	ldr	r0, [r7, #12]
 800e720:	f7fe fec2 	bl	800d4a8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	2b05      	cmp	r3, #5
 800e728:	d92b      	bls.n	800e782 <gen_numname+0x76>
		sr = seq;
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e72e:	e022      	b.n	800e776 <gen_numname+0x6a>
			wc = *lfn++;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	1c9a      	adds	r2, r3, #2
 800e734:	607a      	str	r2, [r7, #4]
 800e736:	881b      	ldrh	r3, [r3, #0]
 800e738:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e73a:	2300      	movs	r3, #0
 800e73c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e73e:	e017      	b.n	800e770 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e740:	69fb      	ldr	r3, [r7, #28]
 800e742:	005a      	lsls	r2, r3, #1
 800e744:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e746:	f003 0301 	and.w	r3, r3, #1
 800e74a:	4413      	add	r3, r2
 800e74c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e74e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e750:	085b      	lsrs	r3, r3, #1
 800e752:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e754:	69fb      	ldr	r3, [r7, #28]
 800e756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d005      	beq.n	800e76a <gen_numname+0x5e>
 800e75e:	69fb      	ldr	r3, [r7, #28]
 800e760:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800e764:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800e768:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e76c:	3301      	adds	r3, #1
 800e76e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e772:	2b0f      	cmp	r3, #15
 800e774:	d9e4      	bls.n	800e740 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	881b      	ldrh	r3, [r3, #0]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d1d8      	bne.n	800e730 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e77e:	69fb      	ldr	r3, [r7, #28]
 800e780:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e782:	2307      	movs	r3, #7
 800e784:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	b2db      	uxtb	r3, r3
 800e78a:	f003 030f 	and.w	r3, r3, #15
 800e78e:	b2db      	uxtb	r3, r3
 800e790:	3330      	adds	r3, #48	; 0x30
 800e792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e796:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e79a:	2b39      	cmp	r3, #57	; 0x39
 800e79c:	d904      	bls.n	800e7a8 <gen_numname+0x9c>
 800e79e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e7a2:	3307      	adds	r3, #7
 800e7a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7aa:	1e5a      	subs	r2, r3, #1
 800e7ac:	62ba      	str	r2, [r7, #40]	; 0x28
 800e7ae:	3330      	adds	r3, #48	; 0x30
 800e7b0:	443b      	add	r3, r7
 800e7b2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e7b6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	091b      	lsrs	r3, r3, #4
 800e7be:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d1df      	bne.n	800e786 <gen_numname+0x7a>
	ns[i] = '~';
 800e7c6:	f107 0214 	add.w	r2, r7, #20
 800e7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7cc:	4413      	add	r3, r2
 800e7ce:	227e      	movs	r2, #126	; 0x7e
 800e7d0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	627b      	str	r3, [r7, #36]	; 0x24
 800e7d6:	e002      	b.n	800e7de <gen_numname+0xd2>
 800e7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7da:	3301      	adds	r3, #1
 800e7dc:	627b      	str	r3, [r7, #36]	; 0x24
 800e7de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d205      	bcs.n	800e7f2 <gen_numname+0xe6>
 800e7e6:	68fa      	ldr	r2, [r7, #12]
 800e7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ea:	4413      	add	r3, r2
 800e7ec:	781b      	ldrb	r3, [r3, #0]
 800e7ee:	2b20      	cmp	r3, #32
 800e7f0:	d1f2      	bne.n	800e7d8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f4:	2b07      	cmp	r3, #7
 800e7f6:	d807      	bhi.n	800e808 <gen_numname+0xfc>
 800e7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fa:	1c5a      	adds	r2, r3, #1
 800e7fc:	62ba      	str	r2, [r7, #40]	; 0x28
 800e7fe:	3330      	adds	r3, #48	; 0x30
 800e800:	443b      	add	r3, r7
 800e802:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e806:	e000      	b.n	800e80a <gen_numname+0xfe>
 800e808:	2120      	movs	r1, #32
 800e80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e80c:	1c5a      	adds	r2, r3, #1
 800e80e:	627a      	str	r2, [r7, #36]	; 0x24
 800e810:	68fa      	ldr	r2, [r7, #12]
 800e812:	4413      	add	r3, r2
 800e814:	460a      	mov	r2, r1
 800e816:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e81a:	2b07      	cmp	r3, #7
 800e81c:	d9e9      	bls.n	800e7f2 <gen_numname+0xe6>
}
 800e81e:	bf00      	nop
 800e820:	bf00      	nop
 800e822:	3730      	adds	r7, #48	; 0x30
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}

0800e828 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e828:	b480      	push	{r7}
 800e82a:	b085      	sub	sp, #20
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e830:	2300      	movs	r3, #0
 800e832:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e834:	230b      	movs	r3, #11
 800e836:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e838:	7bfb      	ldrb	r3, [r7, #15]
 800e83a:	b2da      	uxtb	r2, r3
 800e83c:	0852      	lsrs	r2, r2, #1
 800e83e:	01db      	lsls	r3, r3, #7
 800e840:	4313      	orrs	r3, r2
 800e842:	b2da      	uxtb	r2, r3
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	1c59      	adds	r1, r3, #1
 800e848:	6079      	str	r1, [r7, #4]
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	4413      	add	r3, r2
 800e84e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e850:	68bb      	ldr	r3, [r7, #8]
 800e852:	3b01      	subs	r3, #1
 800e854:	60bb      	str	r3, [r7, #8]
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d1ed      	bne.n	800e838 <sum_sfn+0x10>
	return sum;
 800e85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e85e:	4618      	mov	r0, r3
 800e860:	3714      	adds	r7, #20
 800e862:	46bd      	mov	sp, r7
 800e864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e868:	4770      	bx	lr

0800e86a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e86a:	b580      	push	{r7, lr}
 800e86c:	b086      	sub	sp, #24
 800e86e:	af00      	add	r7, sp, #0
 800e870:	6078      	str	r0, [r7, #4]
 800e872:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e874:	2304      	movs	r3, #4
 800e876:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800e87e:	23ff      	movs	r3, #255	; 0xff
 800e880:	757b      	strb	r3, [r7, #21]
 800e882:	23ff      	movs	r3, #255	; 0xff
 800e884:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800e886:	e081      	b.n	800e98c <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	69db      	ldr	r3, [r3, #28]
 800e88c:	4619      	mov	r1, r3
 800e88e:	6938      	ldr	r0, [r7, #16]
 800e890:	f7ff f838 	bl	800d904 <move_window>
 800e894:	4603      	mov	r3, r0
 800e896:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e898:	7dfb      	ldrb	r3, [r7, #23]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d17c      	bne.n	800e998 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	6a1b      	ldr	r3, [r3, #32]
 800e8a2:	781b      	ldrb	r3, [r3, #0]
 800e8a4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800e8a6:	7dbb      	ldrb	r3, [r7, #22]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d102      	bne.n	800e8b2 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e8ac:	2304      	movs	r3, #4
 800e8ae:	75fb      	strb	r3, [r7, #23]
 800e8b0:	e077      	b.n	800e9a2 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6a1b      	ldr	r3, [r3, #32]
 800e8b6:	330b      	adds	r3, #11
 800e8b8:	781b      	ldrb	r3, [r3, #0]
 800e8ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e8be:	73fb      	strb	r3, [r7, #15]
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	7bfa      	ldrb	r2, [r7, #15]
 800e8c4:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800e8c6:	7dbb      	ldrb	r3, [r7, #22]
 800e8c8:	2be5      	cmp	r3, #229	; 0xe5
 800e8ca:	d00e      	beq.n	800e8ea <dir_read+0x80>
 800e8cc:	7dbb      	ldrb	r3, [r7, #22]
 800e8ce:	2b2e      	cmp	r3, #46	; 0x2e
 800e8d0:	d00b      	beq.n	800e8ea <dir_read+0x80>
 800e8d2:	7bfb      	ldrb	r3, [r7, #15]
 800e8d4:	f023 0320 	bic.w	r3, r3, #32
 800e8d8:	2b08      	cmp	r3, #8
 800e8da:	bf0c      	ite	eq
 800e8dc:	2301      	moveq	r3, #1
 800e8de:	2300      	movne	r3, #0
 800e8e0:	b2db      	uxtb	r3, r3
 800e8e2:	461a      	mov	r2, r3
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	4293      	cmp	r3, r2
 800e8e8:	d002      	beq.n	800e8f0 <dir_read+0x86>
				ord = 0xFF;
 800e8ea:	23ff      	movs	r3, #255	; 0xff
 800e8ec:	757b      	strb	r3, [r7, #21]
 800e8ee:	e044      	b.n	800e97a <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800e8f0:	7bfb      	ldrb	r3, [r7, #15]
 800e8f2:	2b0f      	cmp	r3, #15
 800e8f4:	d12f      	bne.n	800e956 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800e8f6:	7dbb      	ldrb	r3, [r7, #22]
 800e8f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d00d      	beq.n	800e91c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6a1b      	ldr	r3, [r3, #32]
 800e904:	7b5b      	ldrb	r3, [r3, #13]
 800e906:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800e908:	7dbb      	ldrb	r3, [r7, #22]
 800e90a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e90e:	75bb      	strb	r3, [r7, #22]
 800e910:	7dbb      	ldrb	r3, [r7, #22]
 800e912:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	695a      	ldr	r2, [r3, #20]
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e91c:	7dba      	ldrb	r2, [r7, #22]
 800e91e:	7d7b      	ldrb	r3, [r7, #21]
 800e920:	429a      	cmp	r2, r3
 800e922:	d115      	bne.n	800e950 <dir_read+0xe6>
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6a1b      	ldr	r3, [r3, #32]
 800e928:	330d      	adds	r3, #13
 800e92a:	781b      	ldrb	r3, [r3, #0]
 800e92c:	7d3a      	ldrb	r2, [r7, #20]
 800e92e:	429a      	cmp	r2, r3
 800e930:	d10e      	bne.n	800e950 <dir_read+0xe6>
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	691a      	ldr	r2, [r3, #16]
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6a1b      	ldr	r3, [r3, #32]
 800e93a:	4619      	mov	r1, r3
 800e93c:	4610      	mov	r0, r2
 800e93e:	f7ff fe19 	bl	800e574 <pick_lfn>
 800e942:	4603      	mov	r3, r0
 800e944:	2b00      	cmp	r3, #0
 800e946:	d003      	beq.n	800e950 <dir_read+0xe6>
 800e948:	7d7b      	ldrb	r3, [r7, #21]
 800e94a:	3b01      	subs	r3, #1
 800e94c:	b2db      	uxtb	r3, r3
 800e94e:	e000      	b.n	800e952 <dir_read+0xe8>
 800e950:	23ff      	movs	r3, #255	; 0xff
 800e952:	757b      	strb	r3, [r7, #21]
 800e954:	e011      	b.n	800e97a <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800e956:	7d7b      	ldrb	r3, [r7, #21]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d109      	bne.n	800e970 <dir_read+0x106>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6a1b      	ldr	r3, [r3, #32]
 800e960:	4618      	mov	r0, r3
 800e962:	f7ff ff61 	bl	800e828 <sum_sfn>
 800e966:	4603      	mov	r3, r0
 800e968:	461a      	mov	r2, r3
 800e96a:	7d3b      	ldrb	r3, [r7, #20]
 800e96c:	4293      	cmp	r3, r2
 800e96e:	d015      	beq.n	800e99c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e976:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800e978:	e010      	b.n	800e99c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e97a:	2100      	movs	r1, #0
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f7ff fc2c 	bl	800e1da <dir_next>
 800e982:	4603      	mov	r3, r0
 800e984:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e986:	7dfb      	ldrb	r3, [r7, #23]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d109      	bne.n	800e9a0 <dir_read+0x136>
	while (dp->sect) {
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	69db      	ldr	r3, [r3, #28]
 800e990:	2b00      	cmp	r3, #0
 800e992:	f47f af79 	bne.w	800e888 <dir_read+0x1e>
 800e996:	e004      	b.n	800e9a2 <dir_read+0x138>
		if (res != FR_OK) break;
 800e998:	bf00      	nop
 800e99a:	e002      	b.n	800e9a2 <dir_read+0x138>
					break;
 800e99c:	bf00      	nop
 800e99e:	e000      	b.n	800e9a2 <dir_read+0x138>
		if (res != FR_OK) break;
 800e9a0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e9a2:	7dfb      	ldrb	r3, [r7, #23]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d002      	beq.n	800e9ae <dir_read+0x144>
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	61da      	str	r2, [r3, #28]
	return res;
 800e9ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3718      	adds	r7, #24
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}

0800e9b8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b086      	sub	sp, #24
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e9c6:	2100      	movs	r1, #0
 800e9c8:	6878      	ldr	r0, [r7, #4]
 800e9ca:	f7ff fb7d 	bl	800e0c8 <dir_sdi>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e9d2:	7dfb      	ldrb	r3, [r7, #23]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d001      	beq.n	800e9dc <dir_find+0x24>
 800e9d8:	7dfb      	ldrb	r3, [r7, #23]
 800e9da:	e0a9      	b.n	800eb30 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e9dc:	23ff      	movs	r3, #255	; 0xff
 800e9de:	753b      	strb	r3, [r7, #20]
 800e9e0:	7d3b      	ldrb	r3, [r7, #20]
 800e9e2:	757b      	strb	r3, [r7, #21]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e9ea:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	69db      	ldr	r3, [r3, #28]
 800e9f0:	4619      	mov	r1, r3
 800e9f2:	6938      	ldr	r0, [r7, #16]
 800e9f4:	f7fe ff86 	bl	800d904 <move_window>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e9fc:	7dfb      	ldrb	r3, [r7, #23]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	f040 8090 	bne.w	800eb24 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6a1b      	ldr	r3, [r3, #32]
 800ea08:	781b      	ldrb	r3, [r3, #0]
 800ea0a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ea0c:	7dbb      	ldrb	r3, [r7, #22]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d102      	bne.n	800ea18 <dir_find+0x60>
 800ea12:	2304      	movs	r3, #4
 800ea14:	75fb      	strb	r3, [r7, #23]
 800ea16:	e08a      	b.n	800eb2e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	6a1b      	ldr	r3, [r3, #32]
 800ea1c:	330b      	adds	r3, #11
 800ea1e:	781b      	ldrb	r3, [r3, #0]
 800ea20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea24:	73fb      	strb	r3, [r7, #15]
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	7bfa      	ldrb	r2, [r7, #15]
 800ea2a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ea2c:	7dbb      	ldrb	r3, [r7, #22]
 800ea2e:	2be5      	cmp	r3, #229	; 0xe5
 800ea30:	d007      	beq.n	800ea42 <dir_find+0x8a>
 800ea32:	7bfb      	ldrb	r3, [r7, #15]
 800ea34:	f003 0308 	and.w	r3, r3, #8
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d009      	beq.n	800ea50 <dir_find+0x98>
 800ea3c:	7bfb      	ldrb	r3, [r7, #15]
 800ea3e:	2b0f      	cmp	r3, #15
 800ea40:	d006      	beq.n	800ea50 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ea42:	23ff      	movs	r3, #255	; 0xff
 800ea44:	757b      	strb	r3, [r7, #21]
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ea4c:	631a      	str	r2, [r3, #48]	; 0x30
 800ea4e:	e05e      	b.n	800eb0e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ea50:	7bfb      	ldrb	r3, [r7, #15]
 800ea52:	2b0f      	cmp	r3, #15
 800ea54:	d136      	bne.n	800eac4 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ea5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d154      	bne.n	800eb0e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ea64:	7dbb      	ldrb	r3, [r7, #22]
 800ea66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d00d      	beq.n	800ea8a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6a1b      	ldr	r3, [r3, #32]
 800ea72:	7b5b      	ldrb	r3, [r3, #13]
 800ea74:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ea76:	7dbb      	ldrb	r3, [r7, #22]
 800ea78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea7c:	75bb      	strb	r3, [r7, #22]
 800ea7e:	7dbb      	ldrb	r3, [r7, #22]
 800ea80:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	695a      	ldr	r2, [r3, #20]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ea8a:	7dba      	ldrb	r2, [r7, #22]
 800ea8c:	7d7b      	ldrb	r3, [r7, #21]
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	d115      	bne.n	800eabe <dir_find+0x106>
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6a1b      	ldr	r3, [r3, #32]
 800ea96:	330d      	adds	r3, #13
 800ea98:	781b      	ldrb	r3, [r3, #0]
 800ea9a:	7d3a      	ldrb	r2, [r7, #20]
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	d10e      	bne.n	800eabe <dir_find+0x106>
 800eaa0:	693b      	ldr	r3, [r7, #16]
 800eaa2:	691a      	ldr	r2, [r3, #16]
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6a1b      	ldr	r3, [r3, #32]
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	4610      	mov	r0, r2
 800eaac:	f7ff fcf2 	bl	800e494 <cmp_lfn>
 800eab0:	4603      	mov	r3, r0
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d003      	beq.n	800eabe <dir_find+0x106>
 800eab6:	7d7b      	ldrb	r3, [r7, #21]
 800eab8:	3b01      	subs	r3, #1
 800eaba:	b2db      	uxtb	r3, r3
 800eabc:	e000      	b.n	800eac0 <dir_find+0x108>
 800eabe:	23ff      	movs	r3, #255	; 0xff
 800eac0:	757b      	strb	r3, [r7, #21]
 800eac2:	e024      	b.n	800eb0e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800eac4:	7d7b      	ldrb	r3, [r7, #21]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d109      	bne.n	800eade <dir_find+0x126>
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	6a1b      	ldr	r3, [r3, #32]
 800eace:	4618      	mov	r0, r3
 800ead0:	f7ff feaa 	bl	800e828 <sum_sfn>
 800ead4:	4603      	mov	r3, r0
 800ead6:	461a      	mov	r2, r3
 800ead8:	7d3b      	ldrb	r3, [r7, #20]
 800eada:	4293      	cmp	r3, r2
 800eadc:	d024      	beq.n	800eb28 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eae4:	f003 0301 	and.w	r3, r3, #1
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d10a      	bne.n	800eb02 <dir_find+0x14a>
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	6a18      	ldr	r0, [r3, #32]
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	3324      	adds	r3, #36	; 0x24
 800eaf4:	220b      	movs	r2, #11
 800eaf6:	4619      	mov	r1, r3
 800eaf8:	f7fe fd12 	bl	800d520 <mem_cmp>
 800eafc:	4603      	mov	r3, r0
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d014      	beq.n	800eb2c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800eb02:	23ff      	movs	r3, #255	; 0xff
 800eb04:	757b      	strb	r3, [r7, #21]
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb0c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800eb0e:	2100      	movs	r1, #0
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f7ff fb62 	bl	800e1da <dir_next>
 800eb16:	4603      	mov	r3, r0
 800eb18:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800eb1a:	7dfb      	ldrb	r3, [r7, #23]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	f43f af65 	beq.w	800e9ec <dir_find+0x34>
 800eb22:	e004      	b.n	800eb2e <dir_find+0x176>
		if (res != FR_OK) break;
 800eb24:	bf00      	nop
 800eb26:	e002      	b.n	800eb2e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800eb28:	bf00      	nop
 800eb2a:	e000      	b.n	800eb2e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800eb2c:	bf00      	nop

	return res;
 800eb2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3718      	adds	r7, #24
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}

0800eb38 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b08c      	sub	sp, #48	; 0x30
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eb4c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d001      	beq.n	800eb58 <dir_register+0x20>
 800eb54:	2306      	movs	r3, #6
 800eb56:	e0e0      	b.n	800ed1a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800eb58:	2300      	movs	r3, #0
 800eb5a:	627b      	str	r3, [r7, #36]	; 0x24
 800eb5c:	e002      	b.n	800eb64 <dir_register+0x2c>
 800eb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb60:	3301      	adds	r3, #1
 800eb62:	627b      	str	r3, [r7, #36]	; 0x24
 800eb64:	69fb      	ldr	r3, [r7, #28]
 800eb66:	691a      	ldr	r2, [r3, #16]
 800eb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb6a:	005b      	lsls	r3, r3, #1
 800eb6c:	4413      	add	r3, r2
 800eb6e:	881b      	ldrh	r3, [r3, #0]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d1f4      	bne.n	800eb5e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800eb7a:	f107 030c 	add.w	r3, r7, #12
 800eb7e:	220c      	movs	r2, #12
 800eb80:	4618      	mov	r0, r3
 800eb82:	f7fe fc91 	bl	800d4a8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800eb86:	7dfb      	ldrb	r3, [r7, #23]
 800eb88:	f003 0301 	and.w	r3, r3, #1
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d032      	beq.n	800ebf6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2240      	movs	r2, #64	; 0x40
 800eb94:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800eb98:	2301      	movs	r3, #1
 800eb9a:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb9c:	e016      	b.n	800ebcc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800eba4:	69fb      	ldr	r3, [r7, #28]
 800eba6:	691a      	ldr	r2, [r3, #16]
 800eba8:	f107 010c 	add.w	r1, r7, #12
 800ebac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebae:	f7ff fdad 	bl	800e70c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f7ff ff00 	bl	800e9b8 <dir_find>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ebbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d106      	bne.n	800ebd4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ebc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc8:	3301      	adds	r3, #1
 800ebca:	62bb      	str	r3, [r7, #40]	; 0x28
 800ebcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebce:	2b63      	cmp	r3, #99	; 0x63
 800ebd0:	d9e5      	bls.n	800eb9e <dir_register+0x66>
 800ebd2:	e000      	b.n	800ebd6 <dir_register+0x9e>
			if (res != FR_OK) break;
 800ebd4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ebd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebd8:	2b64      	cmp	r3, #100	; 0x64
 800ebda:	d101      	bne.n	800ebe0 <dir_register+0xa8>
 800ebdc:	2307      	movs	r3, #7
 800ebde:	e09c      	b.n	800ed1a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ebe0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ebe4:	2b04      	cmp	r3, #4
 800ebe6:	d002      	beq.n	800ebee <dir_register+0xb6>
 800ebe8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ebec:	e095      	b.n	800ed1a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ebee:	7dfa      	ldrb	r2, [r7, #23]
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ebf6:	7dfb      	ldrb	r3, [r7, #23]
 800ebf8:	f003 0302 	and.w	r3, r3, #2
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d007      	beq.n	800ec10 <dir_register+0xd8>
 800ec00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec02:	330c      	adds	r3, #12
 800ec04:	4a47      	ldr	r2, [pc, #284]	; (800ed24 <dir_register+0x1ec>)
 800ec06:	fba2 2303 	umull	r2, r3, r2, r3
 800ec0a:	089b      	lsrs	r3, r3, #2
 800ec0c:	3301      	adds	r3, #1
 800ec0e:	e000      	b.n	800ec12 <dir_register+0xda>
 800ec10:	2301      	movs	r3, #1
 800ec12:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ec14:	6a39      	ldr	r1, [r7, #32]
 800ec16:	6878      	ldr	r0, [r7, #4]
 800ec18:	f7ff fbb5 	bl	800e386 <dir_alloc>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ec22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d148      	bne.n	800ecbc <dir_register+0x184>
 800ec2a:	6a3b      	ldr	r3, [r7, #32]
 800ec2c:	3b01      	subs	r3, #1
 800ec2e:	623b      	str	r3, [r7, #32]
 800ec30:	6a3b      	ldr	r3, [r7, #32]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d042      	beq.n	800ecbc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	695a      	ldr	r2, [r3, #20]
 800ec3a:	6a3b      	ldr	r3, [r7, #32]
 800ec3c:	015b      	lsls	r3, r3, #5
 800ec3e:	1ad3      	subs	r3, r2, r3
 800ec40:	4619      	mov	r1, r3
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f7ff fa40 	bl	800e0c8 <dir_sdi>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ec4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d132      	bne.n	800ecbc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	3324      	adds	r3, #36	; 0x24
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f7ff fde4 	bl	800e828 <sum_sfn>
 800ec60:	4603      	mov	r3, r0
 800ec62:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	69db      	ldr	r3, [r3, #28]
 800ec68:	4619      	mov	r1, r3
 800ec6a:	69f8      	ldr	r0, [r7, #28]
 800ec6c:	f7fe fe4a 	bl	800d904 <move_window>
 800ec70:	4603      	mov	r3, r0
 800ec72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800ec76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d11d      	bne.n	800ecba <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ec7e:	69fb      	ldr	r3, [r7, #28]
 800ec80:	6918      	ldr	r0, [r3, #16]
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	6a19      	ldr	r1, [r3, #32]
 800ec86:	6a3b      	ldr	r3, [r7, #32]
 800ec88:	b2da      	uxtb	r2, r3
 800ec8a:	7efb      	ldrb	r3, [r7, #27]
 800ec8c:	f7ff fcd6 	bl	800e63c <put_lfn>
				fs->wflag = 1;
 800ec90:	69fb      	ldr	r3, [r7, #28]
 800ec92:	2201      	movs	r2, #1
 800ec94:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ec96:	2100      	movs	r1, #0
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f7ff fa9e 	bl	800e1da <dir_next>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800eca4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d107      	bne.n	800ecbc <dir_register+0x184>
 800ecac:	6a3b      	ldr	r3, [r7, #32]
 800ecae:	3b01      	subs	r3, #1
 800ecb0:	623b      	str	r3, [r7, #32]
 800ecb2:	6a3b      	ldr	r3, [r7, #32]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d1d5      	bne.n	800ec64 <dir_register+0x12c>
 800ecb8:	e000      	b.n	800ecbc <dir_register+0x184>
				if (res != FR_OK) break;
 800ecba:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ecbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d128      	bne.n	800ed16 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	69db      	ldr	r3, [r3, #28]
 800ecc8:	4619      	mov	r1, r3
 800ecca:	69f8      	ldr	r0, [r7, #28]
 800eccc:	f7fe fe1a 	bl	800d904 <move_window>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ecd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d11b      	bne.n	800ed16 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	6a1b      	ldr	r3, [r3, #32]
 800ece2:	2220      	movs	r2, #32
 800ece4:	2100      	movs	r1, #0
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7fe fbff 	bl	800d4ea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	6a18      	ldr	r0, [r3, #32]
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	3324      	adds	r3, #36	; 0x24
 800ecf4:	220b      	movs	r2, #11
 800ecf6:	4619      	mov	r1, r3
 800ecf8:	f7fe fbd6 	bl	800d4a8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6a1b      	ldr	r3, [r3, #32]
 800ed06:	330c      	adds	r3, #12
 800ed08:	f002 0218 	and.w	r2, r2, #24
 800ed0c:	b2d2      	uxtb	r2, r2
 800ed0e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ed10:	69fb      	ldr	r3, [r7, #28]
 800ed12:	2201      	movs	r2, #1
 800ed14:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ed16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	3730      	adds	r7, #48	; 0x30
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}
 800ed22:	bf00      	nop
 800ed24:	4ec4ec4f 	.word	0x4ec4ec4f

0800ed28 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b088      	sub	sp, #32
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
 800ed30:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	69db      	ldr	r3, [r3, #28]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	f000 80c9 	beq.w	800eeda <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed50:	d032      	beq.n	800edb8 <get_fileinfo+0x90>
			i = j = 0;
 800ed52:	2300      	movs	r3, #0
 800ed54:	61bb      	str	r3, [r7, #24]
 800ed56:	69bb      	ldr	r3, [r7, #24]
 800ed58:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ed5a:	e01b      	b.n	800ed94 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800ed5c:	89fb      	ldrh	r3, [r7, #14]
 800ed5e:	2100      	movs	r1, #0
 800ed60:	4618      	mov	r0, r3
 800ed62:	f001 feeb 	bl	8010b3c <ff_convert>
 800ed66:	4603      	mov	r3, r0
 800ed68:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800ed6a:	89fb      	ldrh	r3, [r7, #14]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d102      	bne.n	800ed76 <get_fileinfo+0x4e>
 800ed70:	2300      	movs	r3, #0
 800ed72:	61fb      	str	r3, [r7, #28]
 800ed74:	e01a      	b.n	800edac <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800ed76:	69fb      	ldr	r3, [r7, #28]
 800ed78:	2bfe      	cmp	r3, #254	; 0xfe
 800ed7a:	d902      	bls.n	800ed82 <get_fileinfo+0x5a>
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	61fb      	str	r3, [r7, #28]
 800ed80:	e014      	b.n	800edac <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800ed82:	69fb      	ldr	r3, [r7, #28]
 800ed84:	1c5a      	adds	r2, r3, #1
 800ed86:	61fa      	str	r2, [r7, #28]
 800ed88:	89fa      	ldrh	r2, [r7, #14]
 800ed8a:	b2d1      	uxtb	r1, r2
 800ed8c:	683a      	ldr	r2, [r7, #0]
 800ed8e:	4413      	add	r3, r2
 800ed90:	460a      	mov	r2, r1
 800ed92:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	691a      	ldr	r2, [r3, #16]
 800ed98:	69bb      	ldr	r3, [r7, #24]
 800ed9a:	1c59      	adds	r1, r3, #1
 800ed9c:	61b9      	str	r1, [r7, #24]
 800ed9e:	005b      	lsls	r3, r3, #1
 800eda0:	4413      	add	r3, r2
 800eda2:	881b      	ldrh	r3, [r3, #0]
 800eda4:	81fb      	strh	r3, [r7, #14]
 800eda6:	89fb      	ldrh	r3, [r7, #14]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d1d7      	bne.n	800ed5c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800edac:	683a      	ldr	r2, [r7, #0]
 800edae:	69fb      	ldr	r3, [r7, #28]
 800edb0:	4413      	add	r3, r2
 800edb2:	3316      	adds	r3, #22
 800edb4:	2200      	movs	r2, #0
 800edb6:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800edb8:	2300      	movs	r3, #0
 800edba:	61bb      	str	r3, [r7, #24]
 800edbc:	69bb      	ldr	r3, [r7, #24]
 800edbe:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800edc0:	683a      	ldr	r2, [r7, #0]
 800edc2:	69fb      	ldr	r3, [r7, #28]
 800edc4:	4413      	add	r3, r2
 800edc6:	3316      	adds	r3, #22
 800edc8:	781b      	ldrb	r3, [r3, #0]
 800edca:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800edcc:	e04c      	b.n	800ee68 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	6a1a      	ldr	r2, [r3, #32]
 800edd2:	69fb      	ldr	r3, [r7, #28]
 800edd4:	1c59      	adds	r1, r3, #1
 800edd6:	61f9      	str	r1, [r7, #28]
 800edd8:	4413      	add	r3, r2
 800edda:	781b      	ldrb	r3, [r3, #0]
 800eddc:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800edde:	7dfb      	ldrb	r3, [r7, #23]
 800ede0:	2b20      	cmp	r3, #32
 800ede2:	d100      	bne.n	800ede6 <get_fileinfo+0xbe>
 800ede4:	e040      	b.n	800ee68 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ede6:	7dfb      	ldrb	r3, [r7, #23]
 800ede8:	2b05      	cmp	r3, #5
 800edea:	d101      	bne.n	800edf0 <get_fileinfo+0xc8>
 800edec:	23e5      	movs	r3, #229	; 0xe5
 800edee:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800edf0:	69fb      	ldr	r3, [r7, #28]
 800edf2:	2b09      	cmp	r3, #9
 800edf4:	d10f      	bne.n	800ee16 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800edf6:	89bb      	ldrh	r3, [r7, #12]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d105      	bne.n	800ee08 <get_fileinfo+0xe0>
 800edfc:	683a      	ldr	r2, [r7, #0]
 800edfe:	69bb      	ldr	r3, [r7, #24]
 800ee00:	4413      	add	r3, r2
 800ee02:	3316      	adds	r3, #22
 800ee04:	222e      	movs	r2, #46	; 0x2e
 800ee06:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800ee08:	69bb      	ldr	r3, [r7, #24]
 800ee0a:	1c5a      	adds	r2, r3, #1
 800ee0c:	61ba      	str	r2, [r7, #24]
 800ee0e:	683a      	ldr	r2, [r7, #0]
 800ee10:	4413      	add	r3, r2
 800ee12:	222e      	movs	r2, #46	; 0x2e
 800ee14:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800ee16:	683a      	ldr	r2, [r7, #0]
 800ee18:	69bb      	ldr	r3, [r7, #24]
 800ee1a:	4413      	add	r3, r2
 800ee1c:	3309      	adds	r3, #9
 800ee1e:	7dfa      	ldrb	r2, [r7, #23]
 800ee20:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800ee22:	89bb      	ldrh	r3, [r7, #12]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d11c      	bne.n	800ee62 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800ee28:	7dfb      	ldrb	r3, [r7, #23]
 800ee2a:	2b40      	cmp	r3, #64	; 0x40
 800ee2c:	d913      	bls.n	800ee56 <get_fileinfo+0x12e>
 800ee2e:	7dfb      	ldrb	r3, [r7, #23]
 800ee30:	2b5a      	cmp	r3, #90	; 0x5a
 800ee32:	d810      	bhi.n	800ee56 <get_fileinfo+0x12e>
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	6a1b      	ldr	r3, [r3, #32]
 800ee38:	330c      	adds	r3, #12
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	461a      	mov	r2, r3
 800ee3e:	69fb      	ldr	r3, [r7, #28]
 800ee40:	2b08      	cmp	r3, #8
 800ee42:	d901      	bls.n	800ee48 <get_fileinfo+0x120>
 800ee44:	2310      	movs	r3, #16
 800ee46:	e000      	b.n	800ee4a <get_fileinfo+0x122>
 800ee48:	2308      	movs	r3, #8
 800ee4a:	4013      	ands	r3, r2
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d002      	beq.n	800ee56 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800ee50:	7dfb      	ldrb	r3, [r7, #23]
 800ee52:	3320      	adds	r3, #32
 800ee54:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800ee56:	683a      	ldr	r2, [r7, #0]
 800ee58:	69bb      	ldr	r3, [r7, #24]
 800ee5a:	4413      	add	r3, r2
 800ee5c:	3316      	adds	r3, #22
 800ee5e:	7dfa      	ldrb	r2, [r7, #23]
 800ee60:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800ee62:	69bb      	ldr	r3, [r7, #24]
 800ee64:	3301      	adds	r3, #1
 800ee66:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800ee68:	69fb      	ldr	r3, [r7, #28]
 800ee6a:	2b0a      	cmp	r3, #10
 800ee6c:	d9af      	bls.n	800edce <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800ee6e:	89bb      	ldrh	r3, [r7, #12]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d10d      	bne.n	800ee90 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800ee74:	683a      	ldr	r2, [r7, #0]
 800ee76:	69bb      	ldr	r3, [r7, #24]
 800ee78:	4413      	add	r3, r2
 800ee7a:	3316      	adds	r3, #22
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	6a1b      	ldr	r3, [r3, #32]
 800ee84:	330c      	adds	r3, #12
 800ee86:	781b      	ldrb	r3, [r3, #0]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d101      	bne.n	800ee90 <get_fileinfo+0x168>
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800ee90:	683a      	ldr	r2, [r7, #0]
 800ee92:	69bb      	ldr	r3, [r7, #24]
 800ee94:	4413      	add	r3, r2
 800ee96:	3309      	adds	r3, #9
 800ee98:	2200      	movs	r2, #0
 800ee9a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	6a1b      	ldr	r3, [r3, #32]
 800eea0:	7ada      	ldrb	r2, [r3, #11]
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	6a1b      	ldr	r3, [r3, #32]
 800eeaa:	331c      	adds	r3, #28
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7fe fa91 	bl	800d3d4 <ld_dword>
 800eeb2:	4602      	mov	r2, r0
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	6a1b      	ldr	r3, [r3, #32]
 800eebc:	3316      	adds	r3, #22
 800eebe:	4618      	mov	r0, r3
 800eec0:	f7fe fa88 	bl	800d3d4 <ld_dword>
 800eec4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	b29a      	uxth	r2, r3
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	80da      	strh	r2, [r3, #6]
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	0c1b      	lsrs	r3, r3, #16
 800eed2:	b29a      	uxth	r2, r3
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	809a      	strh	r2, [r3, #4]
 800eed8:	e000      	b.n	800eedc <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800eeda:	bf00      	nop
}
 800eedc:	3720      	adds	r7, #32
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}
	...

0800eee4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b08a      	sub	sp, #40	; 0x28
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	613b      	str	r3, [r7, #16]
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	691b      	ldr	r3, [r3, #16]
 800eefa:	60fb      	str	r3, [r7, #12]
 800eefc:	2300      	movs	r3, #0
 800eefe:	617b      	str	r3, [r7, #20]
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ef04:	69bb      	ldr	r3, [r7, #24]
 800ef06:	1c5a      	adds	r2, r3, #1
 800ef08:	61ba      	str	r2, [r7, #24]
 800ef0a:	693a      	ldr	r2, [r7, #16]
 800ef0c:	4413      	add	r3, r2
 800ef0e:	781b      	ldrb	r3, [r3, #0]
 800ef10:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ef12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef14:	2b1f      	cmp	r3, #31
 800ef16:	d940      	bls.n	800ef9a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ef18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef1a:	2b2f      	cmp	r3, #47	; 0x2f
 800ef1c:	d006      	beq.n	800ef2c <create_name+0x48>
 800ef1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef20:	2b5c      	cmp	r3, #92	; 0x5c
 800ef22:	d110      	bne.n	800ef46 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ef24:	e002      	b.n	800ef2c <create_name+0x48>
 800ef26:	69bb      	ldr	r3, [r7, #24]
 800ef28:	3301      	adds	r3, #1
 800ef2a:	61bb      	str	r3, [r7, #24]
 800ef2c:	693a      	ldr	r2, [r7, #16]
 800ef2e:	69bb      	ldr	r3, [r7, #24]
 800ef30:	4413      	add	r3, r2
 800ef32:	781b      	ldrb	r3, [r3, #0]
 800ef34:	2b2f      	cmp	r3, #47	; 0x2f
 800ef36:	d0f6      	beq.n	800ef26 <create_name+0x42>
 800ef38:	693a      	ldr	r2, [r7, #16]
 800ef3a:	69bb      	ldr	r3, [r7, #24]
 800ef3c:	4413      	add	r3, r2
 800ef3e:	781b      	ldrb	r3, [r3, #0]
 800ef40:	2b5c      	cmp	r3, #92	; 0x5c
 800ef42:	d0f0      	beq.n	800ef26 <create_name+0x42>
			break;
 800ef44:	e02a      	b.n	800ef9c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ef46:	697b      	ldr	r3, [r7, #20]
 800ef48:	2bfe      	cmp	r3, #254	; 0xfe
 800ef4a:	d901      	bls.n	800ef50 <create_name+0x6c>
 800ef4c:	2306      	movs	r3, #6
 800ef4e:	e17d      	b.n	800f24c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ef50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef52:	b2db      	uxtb	r3, r3
 800ef54:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ef56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef58:	2101      	movs	r1, #1
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f001 fdee 	bl	8010b3c <ff_convert>
 800ef60:	4603      	mov	r3, r0
 800ef62:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ef64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d101      	bne.n	800ef6e <create_name+0x8a>
 800ef6a:	2306      	movs	r3, #6
 800ef6c:	e16e      	b.n	800f24c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ef6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef70:	2b7f      	cmp	r3, #127	; 0x7f
 800ef72:	d809      	bhi.n	800ef88 <create_name+0xa4>
 800ef74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef76:	4619      	mov	r1, r3
 800ef78:	488d      	ldr	r0, [pc, #564]	; (800f1b0 <create_name+0x2cc>)
 800ef7a:	f7fe faf8 	bl	800d56e <chk_chr>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d001      	beq.n	800ef88 <create_name+0xa4>
 800ef84:	2306      	movs	r3, #6
 800ef86:	e161      	b.n	800f24c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	1c5a      	adds	r2, r3, #1
 800ef8c:	617a      	str	r2, [r7, #20]
 800ef8e:	005b      	lsls	r3, r3, #1
 800ef90:	68fa      	ldr	r2, [r7, #12]
 800ef92:	4413      	add	r3, r2
 800ef94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ef96:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ef98:	e7b4      	b.n	800ef04 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ef9a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ef9c:	693a      	ldr	r2, [r7, #16]
 800ef9e:	69bb      	ldr	r3, [r7, #24]
 800efa0:	441a      	add	r2, r3
 800efa2:	683b      	ldr	r3, [r7, #0]
 800efa4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800efa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efa8:	2b1f      	cmp	r3, #31
 800efaa:	d801      	bhi.n	800efb0 <create_name+0xcc>
 800efac:	2304      	movs	r3, #4
 800efae:	e000      	b.n	800efb2 <create_name+0xce>
 800efb0:	2300      	movs	r3, #0
 800efb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800efb6:	e011      	b.n	800efdc <create_name+0xf8>
		w = lfn[di - 1];
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800efbe:	3b01      	subs	r3, #1
 800efc0:	005b      	lsls	r3, r3, #1
 800efc2:	68fa      	ldr	r2, [r7, #12]
 800efc4:	4413      	add	r3, r2
 800efc6:	881b      	ldrh	r3, [r3, #0]
 800efc8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800efca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efcc:	2b20      	cmp	r3, #32
 800efce:	d002      	beq.n	800efd6 <create_name+0xf2>
 800efd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efd2:	2b2e      	cmp	r3, #46	; 0x2e
 800efd4:	d106      	bne.n	800efe4 <create_name+0x100>
		di--;
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	3b01      	subs	r3, #1
 800efda:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d1ea      	bne.n	800efb8 <create_name+0xd4>
 800efe2:	e000      	b.n	800efe6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800efe4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	005b      	lsls	r3, r3, #1
 800efea:	68fa      	ldr	r2, [r7, #12]
 800efec:	4413      	add	r3, r2
 800efee:	2200      	movs	r2, #0
 800eff0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d101      	bne.n	800effc <create_name+0x118>
 800eff8:	2306      	movs	r3, #6
 800effa:	e127      	b.n	800f24c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	3324      	adds	r3, #36	; 0x24
 800f000:	220b      	movs	r2, #11
 800f002:	2120      	movs	r1, #32
 800f004:	4618      	mov	r0, r3
 800f006:	f7fe fa70 	bl	800d4ea <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f00a:	2300      	movs	r3, #0
 800f00c:	61bb      	str	r3, [r7, #24]
 800f00e:	e002      	b.n	800f016 <create_name+0x132>
 800f010:	69bb      	ldr	r3, [r7, #24]
 800f012:	3301      	adds	r3, #1
 800f014:	61bb      	str	r3, [r7, #24]
 800f016:	69bb      	ldr	r3, [r7, #24]
 800f018:	005b      	lsls	r3, r3, #1
 800f01a:	68fa      	ldr	r2, [r7, #12]
 800f01c:	4413      	add	r3, r2
 800f01e:	881b      	ldrh	r3, [r3, #0]
 800f020:	2b20      	cmp	r3, #32
 800f022:	d0f5      	beq.n	800f010 <create_name+0x12c>
 800f024:	69bb      	ldr	r3, [r7, #24]
 800f026:	005b      	lsls	r3, r3, #1
 800f028:	68fa      	ldr	r2, [r7, #12]
 800f02a:	4413      	add	r3, r2
 800f02c:	881b      	ldrh	r3, [r3, #0]
 800f02e:	2b2e      	cmp	r3, #46	; 0x2e
 800f030:	d0ee      	beq.n	800f010 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f032:	69bb      	ldr	r3, [r7, #24]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d009      	beq.n	800f04c <create_name+0x168>
 800f038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f03c:	f043 0303 	orr.w	r3, r3, #3
 800f040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f044:	e002      	b.n	800f04c <create_name+0x168>
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	3b01      	subs	r3, #1
 800f04a:	617b      	str	r3, [r7, #20]
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d009      	beq.n	800f066 <create_name+0x182>
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f058:	3b01      	subs	r3, #1
 800f05a:	005b      	lsls	r3, r3, #1
 800f05c:	68fa      	ldr	r2, [r7, #12]
 800f05e:	4413      	add	r3, r2
 800f060:	881b      	ldrh	r3, [r3, #0]
 800f062:	2b2e      	cmp	r3, #46	; 0x2e
 800f064:	d1ef      	bne.n	800f046 <create_name+0x162>

	i = b = 0; ni = 8;
 800f066:	2300      	movs	r3, #0
 800f068:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f06c:	2300      	movs	r3, #0
 800f06e:	623b      	str	r3, [r7, #32]
 800f070:	2308      	movs	r3, #8
 800f072:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f074:	69bb      	ldr	r3, [r7, #24]
 800f076:	1c5a      	adds	r2, r3, #1
 800f078:	61ba      	str	r2, [r7, #24]
 800f07a:	005b      	lsls	r3, r3, #1
 800f07c:	68fa      	ldr	r2, [r7, #12]
 800f07e:	4413      	add	r3, r2
 800f080:	881b      	ldrh	r3, [r3, #0]
 800f082:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f084:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f086:	2b00      	cmp	r3, #0
 800f088:	f000 8090 	beq.w	800f1ac <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f08c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f08e:	2b20      	cmp	r3, #32
 800f090:	d006      	beq.n	800f0a0 <create_name+0x1bc>
 800f092:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f094:	2b2e      	cmp	r3, #46	; 0x2e
 800f096:	d10a      	bne.n	800f0ae <create_name+0x1ca>
 800f098:	69ba      	ldr	r2, [r7, #24]
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	429a      	cmp	r2, r3
 800f09e:	d006      	beq.n	800f0ae <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800f0a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0a4:	f043 0303 	orr.w	r3, r3, #3
 800f0a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f0ac:	e07d      	b.n	800f1aa <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f0ae:	6a3a      	ldr	r2, [r7, #32]
 800f0b0:	69fb      	ldr	r3, [r7, #28]
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	d203      	bcs.n	800f0be <create_name+0x1da>
 800f0b6:	69ba      	ldr	r2, [r7, #24]
 800f0b8:	697b      	ldr	r3, [r7, #20]
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	d123      	bne.n	800f106 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800f0be:	69fb      	ldr	r3, [r7, #28]
 800f0c0:	2b0b      	cmp	r3, #11
 800f0c2:	d106      	bne.n	800f0d2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f0c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0c8:	f043 0303 	orr.w	r3, r3, #3
 800f0cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f0d0:	e075      	b.n	800f1be <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f0d2:	69ba      	ldr	r2, [r7, #24]
 800f0d4:	697b      	ldr	r3, [r7, #20]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d005      	beq.n	800f0e6 <create_name+0x202>
 800f0da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0de:	f043 0303 	orr.w	r3, r3, #3
 800f0e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f0e6:	69ba      	ldr	r2, [r7, #24]
 800f0e8:	697b      	ldr	r3, [r7, #20]
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	d866      	bhi.n	800f1bc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	61bb      	str	r3, [r7, #24]
 800f0f2:	2308      	movs	r3, #8
 800f0f4:	623b      	str	r3, [r7, #32]
 800f0f6:	230b      	movs	r3, #11
 800f0f8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f0fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f0fe:	009b      	lsls	r3, r3, #2
 800f100:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f104:	e051      	b.n	800f1aa <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f108:	2b7f      	cmp	r3, #127	; 0x7f
 800f10a:	d914      	bls.n	800f136 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f10c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f10e:	2100      	movs	r1, #0
 800f110:	4618      	mov	r0, r3
 800f112:	f001 fd13 	bl	8010b3c <ff_convert>
 800f116:	4603      	mov	r3, r0
 800f118:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f11a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d004      	beq.n	800f12a <create_name+0x246>
 800f120:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f122:	3b80      	subs	r3, #128	; 0x80
 800f124:	4a23      	ldr	r2, [pc, #140]	; (800f1b4 <create_name+0x2d0>)
 800f126:	5cd3      	ldrb	r3, [r2, r3]
 800f128:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f12a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f12e:	f043 0302 	orr.w	r3, r3, #2
 800f132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f136:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d007      	beq.n	800f14c <create_name+0x268>
 800f13c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f13e:	4619      	mov	r1, r3
 800f140:	481d      	ldr	r0, [pc, #116]	; (800f1b8 <create_name+0x2d4>)
 800f142:	f7fe fa14 	bl	800d56e <chk_chr>
 800f146:	4603      	mov	r3, r0
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d008      	beq.n	800f15e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f14c:	235f      	movs	r3, #95	; 0x5f
 800f14e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f154:	f043 0303 	orr.w	r3, r3, #3
 800f158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f15c:	e01b      	b.n	800f196 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f15e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f160:	2b40      	cmp	r3, #64	; 0x40
 800f162:	d909      	bls.n	800f178 <create_name+0x294>
 800f164:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f166:	2b5a      	cmp	r3, #90	; 0x5a
 800f168:	d806      	bhi.n	800f178 <create_name+0x294>
					b |= 2;
 800f16a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f16e:	f043 0302 	orr.w	r3, r3, #2
 800f172:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f176:	e00e      	b.n	800f196 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f178:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f17a:	2b60      	cmp	r3, #96	; 0x60
 800f17c:	d90b      	bls.n	800f196 <create_name+0x2b2>
 800f17e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f180:	2b7a      	cmp	r3, #122	; 0x7a
 800f182:	d808      	bhi.n	800f196 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f184:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f188:	f043 0301 	orr.w	r3, r3, #1
 800f18c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f190:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f192:	3b20      	subs	r3, #32
 800f194:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f196:	6a3b      	ldr	r3, [r7, #32]
 800f198:	1c5a      	adds	r2, r3, #1
 800f19a:	623a      	str	r2, [r7, #32]
 800f19c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f19e:	b2d1      	uxtb	r1, r2
 800f1a0:	687a      	ldr	r2, [r7, #4]
 800f1a2:	4413      	add	r3, r2
 800f1a4:	460a      	mov	r2, r1
 800f1a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800f1aa:	e763      	b.n	800f074 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f1ac:	bf00      	nop
 800f1ae:	e006      	b.n	800f1be <create_name+0x2da>
 800f1b0:	08011d78 	.word	0x08011d78
 800f1b4:	08011de0 	.word	0x08011de0
 800f1b8:	08011d84 	.word	0x08011d84
			if (si > di) break;			/* No extension */
 800f1bc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f1c4:	2be5      	cmp	r3, #229	; 0xe5
 800f1c6:	d103      	bne.n	800f1d0 <create_name+0x2ec>
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2205      	movs	r2, #5
 800f1cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800f1d0:	69fb      	ldr	r3, [r7, #28]
 800f1d2:	2b08      	cmp	r3, #8
 800f1d4:	d104      	bne.n	800f1e0 <create_name+0x2fc>
 800f1d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f1da:	009b      	lsls	r3, r3, #2
 800f1dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f1e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f1e4:	f003 030c 	and.w	r3, r3, #12
 800f1e8:	2b0c      	cmp	r3, #12
 800f1ea:	d005      	beq.n	800f1f8 <create_name+0x314>
 800f1ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f1f0:	f003 0303 	and.w	r3, r3, #3
 800f1f4:	2b03      	cmp	r3, #3
 800f1f6:	d105      	bne.n	800f204 <create_name+0x320>
 800f1f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1fc:	f043 0302 	orr.w	r3, r3, #2
 800f200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f208:	f003 0302 	and.w	r3, r3, #2
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d117      	bne.n	800f240 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f210:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f214:	f003 0303 	and.w	r3, r3, #3
 800f218:	2b01      	cmp	r3, #1
 800f21a:	d105      	bne.n	800f228 <create_name+0x344>
 800f21c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f220:	f043 0310 	orr.w	r3, r3, #16
 800f224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f228:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f22c:	f003 030c 	and.w	r3, r3, #12
 800f230:	2b04      	cmp	r3, #4
 800f232:	d105      	bne.n	800f240 <create_name+0x35c>
 800f234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f238:	f043 0308 	orr.w	r3, r3, #8
 800f23c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f246:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800f24a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	3728      	adds	r7, #40	; 0x28
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}

0800f254 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b086      	sub	sp, #24
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
 800f25c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f262:	693b      	ldr	r3, [r7, #16]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f268:	e002      	b.n	800f270 <follow_path+0x1c>
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	3301      	adds	r3, #1
 800f26e:	603b      	str	r3, [r7, #0]
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	781b      	ldrb	r3, [r3, #0]
 800f274:	2b2f      	cmp	r3, #47	; 0x2f
 800f276:	d0f8      	beq.n	800f26a <follow_path+0x16>
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	781b      	ldrb	r3, [r3, #0]
 800f27c:	2b5c      	cmp	r3, #92	; 0x5c
 800f27e:	d0f4      	beq.n	800f26a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f280:	693b      	ldr	r3, [r7, #16]
 800f282:	2200      	movs	r2, #0
 800f284:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	2b1f      	cmp	r3, #31
 800f28c:	d80a      	bhi.n	800f2a4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	2280      	movs	r2, #128	; 0x80
 800f292:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f296:	2100      	movs	r1, #0
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f7fe ff15 	bl	800e0c8 <dir_sdi>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	75fb      	strb	r3, [r7, #23]
 800f2a2:	e048      	b.n	800f336 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f2a4:	463b      	mov	r3, r7
 800f2a6:	4619      	mov	r1, r3
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f7ff fe1b 	bl	800eee4 <create_name>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f2b2:	7dfb      	ldrb	r3, [r7, #23]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d139      	bne.n	800f32c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f7ff fb7d 	bl	800e9b8 <dir_find>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f2c8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f2ca:	7dfb      	ldrb	r3, [r7, #23]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d00a      	beq.n	800f2e6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f2d0:	7dfb      	ldrb	r3, [r7, #23]
 800f2d2:	2b04      	cmp	r3, #4
 800f2d4:	d12c      	bne.n	800f330 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f2d6:	7afb      	ldrb	r3, [r7, #11]
 800f2d8:	f003 0304 	and.w	r3, r3, #4
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d127      	bne.n	800f330 <follow_path+0xdc>
 800f2e0:	2305      	movs	r3, #5
 800f2e2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f2e4:	e024      	b.n	800f330 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f2e6:	7afb      	ldrb	r3, [r7, #11]
 800f2e8:	f003 0304 	and.w	r3, r3, #4
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d121      	bne.n	800f334 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	799b      	ldrb	r3, [r3, #6]
 800f2f4:	f003 0310 	and.w	r3, r3, #16
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d102      	bne.n	800f302 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f2fc:	2305      	movs	r3, #5
 800f2fe:	75fb      	strb	r3, [r7, #23]
 800f300:	e019      	b.n	800f336 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	695b      	ldr	r3, [r3, #20]
 800f30c:	68fa      	ldr	r2, [r7, #12]
 800f30e:	8992      	ldrh	r2, [r2, #12]
 800f310:	fbb3 f0f2 	udiv	r0, r3, r2
 800f314:	fb00 f202 	mul.w	r2, r0, r2
 800f318:	1a9b      	subs	r3, r3, r2
 800f31a:	440b      	add	r3, r1
 800f31c:	4619      	mov	r1, r3
 800f31e:	68f8      	ldr	r0, [r7, #12]
 800f320:	f7ff f878 	bl	800e414 <ld_clust>
 800f324:	4602      	mov	r2, r0
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f32a:	e7bb      	b.n	800f2a4 <follow_path+0x50>
			if (res != FR_OK) break;
 800f32c:	bf00      	nop
 800f32e:	e002      	b.n	800f336 <follow_path+0xe2>
				break;
 800f330:	bf00      	nop
 800f332:	e000      	b.n	800f336 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f334:	bf00      	nop
			}
		}
	}

	return res;
 800f336:	7dfb      	ldrb	r3, [r7, #23]
}
 800f338:	4618      	mov	r0, r3
 800f33a:	3718      	adds	r7, #24
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}

0800f340 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f340:	b480      	push	{r7}
 800f342:	b087      	sub	sp, #28
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f34c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d031      	beq.n	800f3ba <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	617b      	str	r3, [r7, #20]
 800f35c:	e002      	b.n	800f364 <get_ldnumber+0x24>
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	3301      	adds	r3, #1
 800f362:	617b      	str	r3, [r7, #20]
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	2b1f      	cmp	r3, #31
 800f36a:	d903      	bls.n	800f374 <get_ldnumber+0x34>
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	781b      	ldrb	r3, [r3, #0]
 800f370:	2b3a      	cmp	r3, #58	; 0x3a
 800f372:	d1f4      	bne.n	800f35e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	781b      	ldrb	r3, [r3, #0]
 800f378:	2b3a      	cmp	r3, #58	; 0x3a
 800f37a:	d11c      	bne.n	800f3b6 <get_ldnumber+0x76>
			tp = *path;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	1c5a      	adds	r2, r3, #1
 800f386:	60fa      	str	r2, [r7, #12]
 800f388:	781b      	ldrb	r3, [r3, #0]
 800f38a:	3b30      	subs	r3, #48	; 0x30
 800f38c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	2b09      	cmp	r3, #9
 800f392:	d80e      	bhi.n	800f3b2 <get_ldnumber+0x72>
 800f394:	68fa      	ldr	r2, [r7, #12]
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	429a      	cmp	r2, r3
 800f39a:	d10a      	bne.n	800f3b2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d107      	bne.n	800f3b2 <get_ldnumber+0x72>
					vol = (int)i;
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	3301      	adds	r3, #1
 800f3aa:	617b      	str	r3, [r7, #20]
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	697a      	ldr	r2, [r7, #20]
 800f3b0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	e002      	b.n	800f3bc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f3ba:	693b      	ldr	r3, [r7, #16]
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	371c      	adds	r7, #28
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr

0800f3c8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b082      	sub	sp, #8
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
 800f3d0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	70da      	strb	r2, [r3, #3]
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f3de:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f3e0:	6839      	ldr	r1, [r7, #0]
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f7fe fa8e 	bl	800d904 <move_window>
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d001      	beq.n	800f3f2 <check_fs+0x2a>
 800f3ee:	2304      	movs	r3, #4
 800f3f0:	e038      	b.n	800f464 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	3338      	adds	r3, #56	; 0x38
 800f3f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f7fd ffd2 	bl	800d3a4 <ld_word>
 800f400:	4603      	mov	r3, r0
 800f402:	461a      	mov	r2, r3
 800f404:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f408:	429a      	cmp	r2, r3
 800f40a:	d001      	beq.n	800f410 <check_fs+0x48>
 800f40c:	2303      	movs	r3, #3
 800f40e:	e029      	b.n	800f464 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f416:	2be9      	cmp	r3, #233	; 0xe9
 800f418:	d009      	beq.n	800f42e <check_fs+0x66>
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f420:	2beb      	cmp	r3, #235	; 0xeb
 800f422:	d11e      	bne.n	800f462 <check_fs+0x9a>
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f42a:	2b90      	cmp	r3, #144	; 0x90
 800f42c:	d119      	bne.n	800f462 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	3338      	adds	r3, #56	; 0x38
 800f432:	3336      	adds	r3, #54	; 0x36
 800f434:	4618      	mov	r0, r3
 800f436:	f7fd ffcd 	bl	800d3d4 <ld_dword>
 800f43a:	4603      	mov	r3, r0
 800f43c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f440:	4a0a      	ldr	r2, [pc, #40]	; (800f46c <check_fs+0xa4>)
 800f442:	4293      	cmp	r3, r2
 800f444:	d101      	bne.n	800f44a <check_fs+0x82>
 800f446:	2300      	movs	r3, #0
 800f448:	e00c      	b.n	800f464 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	3338      	adds	r3, #56	; 0x38
 800f44e:	3352      	adds	r3, #82	; 0x52
 800f450:	4618      	mov	r0, r3
 800f452:	f7fd ffbf 	bl	800d3d4 <ld_dword>
 800f456:	4603      	mov	r3, r0
 800f458:	4a05      	ldr	r2, [pc, #20]	; (800f470 <check_fs+0xa8>)
 800f45a:	4293      	cmp	r3, r2
 800f45c:	d101      	bne.n	800f462 <check_fs+0x9a>
 800f45e:	2300      	movs	r3, #0
 800f460:	e000      	b.n	800f464 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f462:	2302      	movs	r3, #2
}
 800f464:	4618      	mov	r0, r3
 800f466:	3708      	adds	r7, #8
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}
 800f46c:	00544146 	.word	0x00544146
 800f470:	33544146 	.word	0x33544146

0800f474 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b096      	sub	sp, #88	; 0x58
 800f478:	af00      	add	r7, sp, #0
 800f47a:	60f8      	str	r0, [r7, #12]
 800f47c:	60b9      	str	r1, [r7, #8]
 800f47e:	4613      	mov	r3, r2
 800f480:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	2200      	movs	r2, #0
 800f486:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f488:	68f8      	ldr	r0, [r7, #12]
 800f48a:	f7ff ff59 	bl	800f340 <get_ldnumber>
 800f48e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f492:	2b00      	cmp	r3, #0
 800f494:	da01      	bge.n	800f49a <find_volume+0x26>
 800f496:	230b      	movs	r3, #11
 800f498:	e265      	b.n	800f966 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f49a:	4a9f      	ldr	r2, [pc, #636]	; (800f718 <find_volume+0x2a4>)
 800f49c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f49e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4a2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d101      	bne.n	800f4ae <find_volume+0x3a>
 800f4aa:	230c      	movs	r3, #12
 800f4ac:	e25b      	b.n	800f966 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f4b2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f4b4:	79fb      	ldrb	r3, [r7, #7]
 800f4b6:	f023 0301 	bic.w	r3, r3, #1
 800f4ba:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4be:	781b      	ldrb	r3, [r3, #0]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d01a      	beq.n	800f4fa <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c6:	785b      	ldrb	r3, [r3, #1]
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f7fd fecd 	bl	800d268 <disk_status>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f4d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f4d8:	f003 0301 	and.w	r3, r3, #1
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d10c      	bne.n	800f4fa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f4e0:	79fb      	ldrb	r3, [r7, #7]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d007      	beq.n	800f4f6 <find_volume+0x82>
 800f4e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f4ea:	f003 0304 	and.w	r3, r3, #4
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d001      	beq.n	800f4f6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f4f2:	230a      	movs	r3, #10
 800f4f4:	e237      	b.n	800f966 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	e235      	b.n	800f966 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f502:	b2da      	uxtb	r2, r3
 800f504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f506:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f50a:	785b      	ldrb	r3, [r3, #1]
 800f50c:	4618      	mov	r0, r3
 800f50e:	f7fd fec5 	bl	800d29c <disk_initialize>
 800f512:	4603      	mov	r3, r0
 800f514:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f518:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f51c:	f003 0301 	and.w	r3, r3, #1
 800f520:	2b00      	cmp	r3, #0
 800f522:	d001      	beq.n	800f528 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f524:	2303      	movs	r3, #3
 800f526:	e21e      	b.n	800f966 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f528:	79fb      	ldrb	r3, [r7, #7]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d007      	beq.n	800f53e <find_volume+0xca>
 800f52e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f532:	f003 0304 	and.w	r3, r3, #4
 800f536:	2b00      	cmp	r3, #0
 800f538:	d001      	beq.n	800f53e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f53a:	230a      	movs	r3, #10
 800f53c:	e213      	b.n	800f966 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f540:	7858      	ldrb	r0, [r3, #1]
 800f542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f544:	330c      	adds	r3, #12
 800f546:	461a      	mov	r2, r3
 800f548:	2102      	movs	r1, #2
 800f54a:	f7fd ff0d 	bl	800d368 <disk_ioctl>
 800f54e:	4603      	mov	r3, r0
 800f550:	2b00      	cmp	r3, #0
 800f552:	d001      	beq.n	800f558 <find_volume+0xe4>
 800f554:	2301      	movs	r3, #1
 800f556:	e206      	b.n	800f966 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f55a:	899b      	ldrh	r3, [r3, #12]
 800f55c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f560:	d80d      	bhi.n	800f57e <find_volume+0x10a>
 800f562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f564:	899b      	ldrh	r3, [r3, #12]
 800f566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f56a:	d308      	bcc.n	800f57e <find_volume+0x10a>
 800f56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f56e:	899b      	ldrh	r3, [r3, #12]
 800f570:	461a      	mov	r2, r3
 800f572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f574:	899b      	ldrh	r3, [r3, #12]
 800f576:	3b01      	subs	r3, #1
 800f578:	4013      	ands	r3, r2
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d001      	beq.n	800f582 <find_volume+0x10e>
 800f57e:	2301      	movs	r3, #1
 800f580:	e1f1      	b.n	800f966 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f582:	2300      	movs	r3, #0
 800f584:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f586:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f588:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f58a:	f7ff ff1d 	bl	800f3c8 <check_fs>
 800f58e:	4603      	mov	r3, r0
 800f590:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f594:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f598:	2b02      	cmp	r3, #2
 800f59a:	d149      	bne.n	800f630 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f59c:	2300      	movs	r3, #0
 800f59e:	643b      	str	r3, [r7, #64]	; 0x40
 800f5a0:	e01e      	b.n	800f5e0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5a4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f5a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5aa:	011b      	lsls	r3, r3, #4
 800f5ac:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f5b0:	4413      	add	r3, r2
 800f5b2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b6:	3304      	adds	r3, #4
 800f5b8:	781b      	ldrb	r3, [r3, #0]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d006      	beq.n	800f5cc <find_volume+0x158>
 800f5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c0:	3308      	adds	r3, #8
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f7fd ff06 	bl	800d3d4 <ld_dword>
 800f5c8:	4602      	mov	r2, r0
 800f5ca:	e000      	b.n	800f5ce <find_volume+0x15a>
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5d0:	009b      	lsls	r3, r3, #2
 800f5d2:	3358      	adds	r3, #88	; 0x58
 800f5d4:	443b      	add	r3, r7
 800f5d6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f5da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5dc:	3301      	adds	r3, #1
 800f5de:	643b      	str	r3, [r7, #64]	; 0x40
 800f5e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5e2:	2b03      	cmp	r3, #3
 800f5e4:	d9dd      	bls.n	800f5a2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f5ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d002      	beq.n	800f5f6 <find_volume+0x182>
 800f5f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5f2:	3b01      	subs	r3, #1
 800f5f4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f5f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5f8:	009b      	lsls	r3, r3, #2
 800f5fa:	3358      	adds	r3, #88	; 0x58
 800f5fc:	443b      	add	r3, r7
 800f5fe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f602:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f606:	2b00      	cmp	r3, #0
 800f608:	d005      	beq.n	800f616 <find_volume+0x1a2>
 800f60a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f60c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f60e:	f7ff fedb 	bl	800f3c8 <check_fs>
 800f612:	4603      	mov	r3, r0
 800f614:	e000      	b.n	800f618 <find_volume+0x1a4>
 800f616:	2303      	movs	r3, #3
 800f618:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f61c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f620:	2b01      	cmp	r3, #1
 800f622:	d905      	bls.n	800f630 <find_volume+0x1bc>
 800f624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f626:	3301      	adds	r3, #1
 800f628:	643b      	str	r3, [r7, #64]	; 0x40
 800f62a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f62c:	2b03      	cmp	r3, #3
 800f62e:	d9e2      	bls.n	800f5f6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f630:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f634:	2b04      	cmp	r3, #4
 800f636:	d101      	bne.n	800f63c <find_volume+0x1c8>
 800f638:	2301      	movs	r3, #1
 800f63a:	e194      	b.n	800f966 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f63c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f640:	2b01      	cmp	r3, #1
 800f642:	d901      	bls.n	800f648 <find_volume+0x1d4>
 800f644:	230d      	movs	r3, #13
 800f646:	e18e      	b.n	800f966 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f64a:	3338      	adds	r3, #56	; 0x38
 800f64c:	330b      	adds	r3, #11
 800f64e:	4618      	mov	r0, r3
 800f650:	f7fd fea8 	bl	800d3a4 <ld_word>
 800f654:	4603      	mov	r3, r0
 800f656:	461a      	mov	r2, r3
 800f658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f65a:	899b      	ldrh	r3, [r3, #12]
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d001      	beq.n	800f664 <find_volume+0x1f0>
 800f660:	230d      	movs	r3, #13
 800f662:	e180      	b.n	800f966 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f666:	3338      	adds	r3, #56	; 0x38
 800f668:	3316      	adds	r3, #22
 800f66a:	4618      	mov	r0, r3
 800f66c:	f7fd fe9a 	bl	800d3a4 <ld_word>
 800f670:	4603      	mov	r3, r0
 800f672:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f676:	2b00      	cmp	r3, #0
 800f678:	d106      	bne.n	800f688 <find_volume+0x214>
 800f67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f67c:	3338      	adds	r3, #56	; 0x38
 800f67e:	3324      	adds	r3, #36	; 0x24
 800f680:	4618      	mov	r0, r3
 800f682:	f7fd fea7 	bl	800d3d4 <ld_dword>
 800f686:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f68a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f68c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f690:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f696:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f69a:	789b      	ldrb	r3, [r3, #2]
 800f69c:	2b01      	cmp	r3, #1
 800f69e:	d005      	beq.n	800f6ac <find_volume+0x238>
 800f6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6a2:	789b      	ldrb	r3, [r3, #2]
 800f6a4:	2b02      	cmp	r3, #2
 800f6a6:	d001      	beq.n	800f6ac <find_volume+0x238>
 800f6a8:	230d      	movs	r3, #13
 800f6aa:	e15c      	b.n	800f966 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ae:	789b      	ldrb	r3, [r3, #2]
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6b4:	fb02 f303 	mul.w	r3, r2, r3
 800f6b8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f6c0:	b29a      	uxth	r2, r3
 800f6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6c4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6c8:	895b      	ldrh	r3, [r3, #10]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d008      	beq.n	800f6e0 <find_volume+0x26c>
 800f6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6d0:	895b      	ldrh	r3, [r3, #10]
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6d6:	895b      	ldrh	r3, [r3, #10]
 800f6d8:	3b01      	subs	r3, #1
 800f6da:	4013      	ands	r3, r2
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d001      	beq.n	800f6e4 <find_volume+0x270>
 800f6e0:	230d      	movs	r3, #13
 800f6e2:	e140      	b.n	800f966 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e6:	3338      	adds	r3, #56	; 0x38
 800f6e8:	3311      	adds	r3, #17
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7fd fe5a 	bl	800d3a4 <ld_word>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	461a      	mov	r2, r3
 800f6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6f6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6fa:	891b      	ldrh	r3, [r3, #8]
 800f6fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f6fe:	8992      	ldrh	r2, [r2, #12]
 800f700:	0952      	lsrs	r2, r2, #5
 800f702:	b292      	uxth	r2, r2
 800f704:	fbb3 f1f2 	udiv	r1, r3, r2
 800f708:	fb01 f202 	mul.w	r2, r1, r2
 800f70c:	1a9b      	subs	r3, r3, r2
 800f70e:	b29b      	uxth	r3, r3
 800f710:	2b00      	cmp	r3, #0
 800f712:	d003      	beq.n	800f71c <find_volume+0x2a8>
 800f714:	230d      	movs	r3, #13
 800f716:	e126      	b.n	800f966 <find_volume+0x4f2>
 800f718:	20002cdc 	.word	0x20002cdc

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f71e:	3338      	adds	r3, #56	; 0x38
 800f720:	3313      	adds	r3, #19
 800f722:	4618      	mov	r0, r3
 800f724:	f7fd fe3e 	bl	800d3a4 <ld_word>
 800f728:	4603      	mov	r3, r0
 800f72a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f72c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d106      	bne.n	800f740 <find_volume+0x2cc>
 800f732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f734:	3338      	adds	r3, #56	; 0x38
 800f736:	3320      	adds	r3, #32
 800f738:	4618      	mov	r0, r3
 800f73a:	f7fd fe4b 	bl	800d3d4 <ld_dword>
 800f73e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f742:	3338      	adds	r3, #56	; 0x38
 800f744:	330e      	adds	r3, #14
 800f746:	4618      	mov	r0, r3
 800f748:	f7fd fe2c 	bl	800d3a4 <ld_word>
 800f74c:	4603      	mov	r3, r0
 800f74e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f750:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f752:	2b00      	cmp	r3, #0
 800f754:	d101      	bne.n	800f75a <find_volume+0x2e6>
 800f756:	230d      	movs	r3, #13
 800f758:	e105      	b.n	800f966 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f75a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f75c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f75e:	4413      	add	r3, r2
 800f760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f762:	8911      	ldrh	r1, [r2, #8]
 800f764:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f766:	8992      	ldrh	r2, [r2, #12]
 800f768:	0952      	lsrs	r2, r2, #5
 800f76a:	b292      	uxth	r2, r2
 800f76c:	fbb1 f2f2 	udiv	r2, r1, r2
 800f770:	b292      	uxth	r2, r2
 800f772:	4413      	add	r3, r2
 800f774:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f776:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f77a:	429a      	cmp	r2, r3
 800f77c:	d201      	bcs.n	800f782 <find_volume+0x30e>
 800f77e:	230d      	movs	r3, #13
 800f780:	e0f1      	b.n	800f966 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f782:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f786:	1ad3      	subs	r3, r2, r3
 800f788:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f78a:	8952      	ldrh	r2, [r2, #10]
 800f78c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f790:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f794:	2b00      	cmp	r3, #0
 800f796:	d101      	bne.n	800f79c <find_volume+0x328>
 800f798:	230d      	movs	r3, #13
 800f79a:	e0e4      	b.n	800f966 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800f79c:	2303      	movs	r3, #3
 800f79e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	d802      	bhi.n	800f7b2 <find_volume+0x33e>
 800f7ac:	2302      	movs	r3, #2
 800f7ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d802      	bhi.n	800f7c2 <find_volume+0x34e>
 800f7bc:	2301      	movs	r3, #1
 800f7be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7c4:	1c9a      	adds	r2, r3, #2
 800f7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800f7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f7ce:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f7d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f7d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7d4:	441a      	add	r2, r3
 800f7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7d8:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800f7da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7de:	441a      	add	r2, r3
 800f7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e2:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800f7e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f7e8:	2b03      	cmp	r3, #3
 800f7ea:	d11e      	bne.n	800f82a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ee:	3338      	adds	r3, #56	; 0x38
 800f7f0:	332a      	adds	r3, #42	; 0x2a
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f7fd fdd6 	bl	800d3a4 <ld_word>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d001      	beq.n	800f802 <find_volume+0x38e>
 800f7fe:	230d      	movs	r3, #13
 800f800:	e0b1      	b.n	800f966 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f804:	891b      	ldrh	r3, [r3, #8]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d001      	beq.n	800f80e <find_volume+0x39a>
 800f80a:	230d      	movs	r3, #13
 800f80c:	e0ab      	b.n	800f966 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f810:	3338      	adds	r3, #56	; 0x38
 800f812:	332c      	adds	r3, #44	; 0x2c
 800f814:	4618      	mov	r0, r3
 800f816:	f7fd fddd 	bl	800d3d4 <ld_dword>
 800f81a:	4602      	mov	r2, r0
 800f81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f81e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f822:	69db      	ldr	r3, [r3, #28]
 800f824:	009b      	lsls	r3, r3, #2
 800f826:	647b      	str	r3, [r7, #68]	; 0x44
 800f828:	e01f      	b.n	800f86a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f82c:	891b      	ldrh	r3, [r3, #8]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d101      	bne.n	800f836 <find_volume+0x3c2>
 800f832:	230d      	movs	r3, #13
 800f834:	e097      	b.n	800f966 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f83a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f83c:	441a      	add	r2, r3
 800f83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f840:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f842:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f846:	2b02      	cmp	r3, #2
 800f848:	d103      	bne.n	800f852 <find_volume+0x3de>
 800f84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f84c:	69db      	ldr	r3, [r3, #28]
 800f84e:	005b      	lsls	r3, r3, #1
 800f850:	e00a      	b.n	800f868 <find_volume+0x3f4>
 800f852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f854:	69da      	ldr	r2, [r3, #28]
 800f856:	4613      	mov	r3, r2
 800f858:	005b      	lsls	r3, r3, #1
 800f85a:	4413      	add	r3, r2
 800f85c:	085a      	lsrs	r2, r3, #1
 800f85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f860:	69db      	ldr	r3, [r3, #28]
 800f862:	f003 0301 	and.w	r3, r3, #1
 800f866:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f868:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f86c:	6a1a      	ldr	r2, [r3, #32]
 800f86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f870:	899b      	ldrh	r3, [r3, #12]
 800f872:	4619      	mov	r1, r3
 800f874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f876:	440b      	add	r3, r1
 800f878:	3b01      	subs	r3, #1
 800f87a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f87c:	8989      	ldrh	r1, [r1, #12]
 800f87e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f882:	429a      	cmp	r2, r3
 800f884:	d201      	bcs.n	800f88a <find_volume+0x416>
 800f886:	230d      	movs	r3, #13
 800f888:	e06d      	b.n	800f966 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f88c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f890:	619a      	str	r2, [r3, #24]
 800f892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f894:	699a      	ldr	r2, [r3, #24]
 800f896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f898:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800f89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f89c:	2280      	movs	r2, #128	; 0x80
 800f89e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f8a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f8a4:	2b03      	cmp	r3, #3
 800f8a6:	d149      	bne.n	800f93c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8aa:	3338      	adds	r3, #56	; 0x38
 800f8ac:	3330      	adds	r3, #48	; 0x30
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f7fd fd78 	bl	800d3a4 <ld_word>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	2b01      	cmp	r3, #1
 800f8b8:	d140      	bne.n	800f93c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f8ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8bc:	3301      	adds	r3, #1
 800f8be:	4619      	mov	r1, r3
 800f8c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f8c2:	f7fe f81f 	bl	800d904 <move_window>
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d137      	bne.n	800f93c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800f8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8d4:	3338      	adds	r3, #56	; 0x38
 800f8d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f7fd fd62 	bl	800d3a4 <ld_word>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	d127      	bne.n	800f93c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ee:	3338      	adds	r3, #56	; 0x38
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f7fd fd6f 	bl	800d3d4 <ld_dword>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	4a1d      	ldr	r2, [pc, #116]	; (800f970 <find_volume+0x4fc>)
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	d11e      	bne.n	800f93c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f900:	3338      	adds	r3, #56	; 0x38
 800f902:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f906:	4618      	mov	r0, r3
 800f908:	f7fd fd64 	bl	800d3d4 <ld_dword>
 800f90c:	4603      	mov	r3, r0
 800f90e:	4a19      	ldr	r2, [pc, #100]	; (800f974 <find_volume+0x500>)
 800f910:	4293      	cmp	r3, r2
 800f912:	d113      	bne.n	800f93c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f916:	3338      	adds	r3, #56	; 0x38
 800f918:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f91c:	4618      	mov	r0, r3
 800f91e:	f7fd fd59 	bl	800d3d4 <ld_dword>
 800f922:	4602      	mov	r2, r0
 800f924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f926:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f92a:	3338      	adds	r3, #56	; 0x38
 800f92c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f930:	4618      	mov	r0, r3
 800f932:	f7fd fd4f 	bl	800d3d4 <ld_dword>
 800f936:	4602      	mov	r2, r0
 800f938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f93a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f93e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f942:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f944:	4b0c      	ldr	r3, [pc, #48]	; (800f978 <find_volume+0x504>)
 800f946:	881b      	ldrh	r3, [r3, #0]
 800f948:	3301      	adds	r3, #1
 800f94a:	b29a      	uxth	r2, r3
 800f94c:	4b0a      	ldr	r3, [pc, #40]	; (800f978 <find_volume+0x504>)
 800f94e:	801a      	strh	r2, [r3, #0]
 800f950:	4b09      	ldr	r3, [pc, #36]	; (800f978 <find_volume+0x504>)
 800f952:	881a      	ldrh	r2, [r3, #0]
 800f954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f956:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f95a:	4a08      	ldr	r2, [pc, #32]	; (800f97c <find_volume+0x508>)
 800f95c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f95e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f960:	f7fd ff68 	bl	800d834 <clear_lock>
#endif
	return FR_OK;
 800f964:	2300      	movs	r3, #0
}
 800f966:	4618      	mov	r0, r3
 800f968:	3758      	adds	r7, #88	; 0x58
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}
 800f96e:	bf00      	nop
 800f970:	41615252 	.word	0x41615252
 800f974:	61417272 	.word	0x61417272
 800f978:	20002ce0 	.word	0x20002ce0
 800f97c:	20002d04 	.word	0x20002d04

0800f980 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b084      	sub	sp, #16
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
 800f988:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f98a:	2309      	movs	r3, #9
 800f98c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d01c      	beq.n	800f9ce <validate+0x4e>
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d018      	beq.n	800f9ce <validate+0x4e>
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	781b      	ldrb	r3, [r3, #0]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d013      	beq.n	800f9ce <validate+0x4e>
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	889a      	ldrh	r2, [r3, #4]
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	88db      	ldrh	r3, [r3, #6]
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	d10c      	bne.n	800f9ce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	785b      	ldrb	r3, [r3, #1]
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f7fd fc54 	bl	800d268 <disk_status>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	f003 0301 	and.w	r3, r3, #1
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d101      	bne.n	800f9ce <validate+0x4e>
			res = FR_OK;
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f9ce:	7bfb      	ldrb	r3, [r7, #15]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d102      	bne.n	800f9da <validate+0x5a>
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	e000      	b.n	800f9dc <validate+0x5c>
 800f9da:	2300      	movs	r3, #0
 800f9dc:	683a      	ldr	r2, [r7, #0]
 800f9de:	6013      	str	r3, [r2, #0]
	return res;
 800f9e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	3710      	adds	r7, #16
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}
	...

0800f9ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b088      	sub	sp, #32
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	60f8      	str	r0, [r7, #12]
 800f9f4:	60b9      	str	r1, [r7, #8]
 800f9f6:	4613      	mov	r3, r2
 800f9f8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f9fa:	68bb      	ldr	r3, [r7, #8]
 800f9fc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f9fe:	f107 0310 	add.w	r3, r7, #16
 800fa02:	4618      	mov	r0, r3
 800fa04:	f7ff fc9c 	bl	800f340 <get_ldnumber>
 800fa08:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fa0a:	69fb      	ldr	r3, [r7, #28]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	da01      	bge.n	800fa14 <f_mount+0x28>
 800fa10:	230b      	movs	r3, #11
 800fa12:	e02b      	b.n	800fa6c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fa14:	4a17      	ldr	r2, [pc, #92]	; (800fa74 <f_mount+0x88>)
 800fa16:	69fb      	ldr	r3, [r7, #28]
 800fa18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa1c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fa1e:	69bb      	ldr	r3, [r7, #24]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d005      	beq.n	800fa30 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fa24:	69b8      	ldr	r0, [r7, #24]
 800fa26:	f7fd ff05 	bl	800d834 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fa2a:	69bb      	ldr	r3, [r7, #24]
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d002      	beq.n	800fa3c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	2200      	movs	r2, #0
 800fa3a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fa3c:	68fa      	ldr	r2, [r7, #12]
 800fa3e:	490d      	ldr	r1, [pc, #52]	; (800fa74 <f_mount+0x88>)
 800fa40:	69fb      	ldr	r3, [r7, #28]
 800fa42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d002      	beq.n	800fa52 <f_mount+0x66>
 800fa4c:	79fb      	ldrb	r3, [r7, #7]
 800fa4e:	2b01      	cmp	r3, #1
 800fa50:	d001      	beq.n	800fa56 <f_mount+0x6a>
 800fa52:	2300      	movs	r3, #0
 800fa54:	e00a      	b.n	800fa6c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fa56:	f107 010c 	add.w	r1, r7, #12
 800fa5a:	f107 0308 	add.w	r3, r7, #8
 800fa5e:	2200      	movs	r2, #0
 800fa60:	4618      	mov	r0, r3
 800fa62:	f7ff fd07 	bl	800f474 <find_volume>
 800fa66:	4603      	mov	r3, r0
 800fa68:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fa6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3720      	adds	r7, #32
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}
 800fa74:	20002cdc 	.word	0x20002cdc

0800fa78 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b09a      	sub	sp, #104	; 0x68
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	60f8      	str	r0, [r7, #12]
 800fa80:	60b9      	str	r1, [r7, #8]
 800fa82:	4613      	mov	r3, r2
 800fa84:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d101      	bne.n	800fa90 <f_open+0x18>
 800fa8c:	2309      	movs	r3, #9
 800fa8e:	e1bb      	b.n	800fe08 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fa90:	79fb      	ldrb	r3, [r7, #7]
 800fa92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa96:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800fa98:	79fa      	ldrb	r2, [r7, #7]
 800fa9a:	f107 0114 	add.w	r1, r7, #20
 800fa9e:	f107 0308 	add.w	r3, r7, #8
 800faa2:	4618      	mov	r0, r3
 800faa4:	f7ff fce6 	bl	800f474 <find_volume>
 800faa8:	4603      	mov	r3, r0
 800faaa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800faae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	f040 819f 	bne.w	800fdf6 <f_open+0x37e>
		dj.obj.fs = fs;
 800fab8:	697b      	ldr	r3, [r7, #20]
 800faba:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fabc:	68ba      	ldr	r2, [r7, #8]
 800fabe:	f107 0318 	add.w	r3, r7, #24
 800fac2:	4611      	mov	r1, r2
 800fac4:	4618      	mov	r0, r3
 800fac6:	f7ff fbc5 	bl	800f254 <follow_path>
 800faca:	4603      	mov	r3, r0
 800facc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fad0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d11a      	bne.n	800fb0e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fad8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800fadc:	b25b      	sxtb	r3, r3
 800fade:	2b00      	cmp	r3, #0
 800fae0:	da03      	bge.n	800faea <f_open+0x72>
				res = FR_INVALID_NAME;
 800fae2:	2306      	movs	r3, #6
 800fae4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fae8:	e011      	b.n	800fb0e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800faea:	79fb      	ldrb	r3, [r7, #7]
 800faec:	f023 0301 	bic.w	r3, r3, #1
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	bf14      	ite	ne
 800faf4:	2301      	movne	r3, #1
 800faf6:	2300      	moveq	r3, #0
 800faf8:	b2db      	uxtb	r3, r3
 800fafa:	461a      	mov	r2, r3
 800fafc:	f107 0318 	add.w	r3, r7, #24
 800fb00:	4611      	mov	r1, r2
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7fd fd4e 	bl	800d5a4 <chk_lock>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fb0e:	79fb      	ldrb	r3, [r7, #7]
 800fb10:	f003 031c 	and.w	r3, r3, #28
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d07f      	beq.n	800fc18 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800fb18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d017      	beq.n	800fb50 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fb20:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fb24:	2b04      	cmp	r3, #4
 800fb26:	d10e      	bne.n	800fb46 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fb28:	f7fd fd98 	bl	800d65c <enq_lock>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d006      	beq.n	800fb40 <f_open+0xc8>
 800fb32:	f107 0318 	add.w	r3, r7, #24
 800fb36:	4618      	mov	r0, r3
 800fb38:	f7fe fffe 	bl	800eb38 <dir_register>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	e000      	b.n	800fb42 <f_open+0xca>
 800fb40:	2312      	movs	r3, #18
 800fb42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fb46:	79fb      	ldrb	r3, [r7, #7]
 800fb48:	f043 0308 	orr.w	r3, r3, #8
 800fb4c:	71fb      	strb	r3, [r7, #7]
 800fb4e:	e010      	b.n	800fb72 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fb50:	7fbb      	ldrb	r3, [r7, #30]
 800fb52:	f003 0311 	and.w	r3, r3, #17
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d003      	beq.n	800fb62 <f_open+0xea>
					res = FR_DENIED;
 800fb5a:	2307      	movs	r3, #7
 800fb5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fb60:	e007      	b.n	800fb72 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fb62:	79fb      	ldrb	r3, [r7, #7]
 800fb64:	f003 0304 	and.w	r3, r3, #4
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d002      	beq.n	800fb72 <f_open+0xfa>
 800fb6c:	2308      	movs	r3, #8
 800fb6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fb72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d168      	bne.n	800fc4c <f_open+0x1d4>
 800fb7a:	79fb      	ldrb	r3, [r7, #7]
 800fb7c:	f003 0308 	and.w	r3, r3, #8
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d063      	beq.n	800fc4c <f_open+0x1d4>
				dw = GET_FATTIME();
 800fb84:	f7fb fa84 	bl	800b090 <get_fattime>
 800fb88:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb8c:	330e      	adds	r3, #14
 800fb8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fb90:	4618      	mov	r0, r3
 800fb92:	f7fd fc5d 	bl	800d450 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb98:	3316      	adds	r3, #22
 800fb9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f7fd fc57 	bl	800d450 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fba4:	330b      	adds	r3, #11
 800fba6:	2220      	movs	r2, #32
 800fba8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fbaa:	697b      	ldr	r3, [r7, #20]
 800fbac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fbae:	4611      	mov	r1, r2
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f7fe fc2f 	bl	800e414 <ld_clust>
 800fbb6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fbb8:	697b      	ldr	r3, [r7, #20]
 800fbba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f7fe fc47 	bl	800e452 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbc6:	331c      	adds	r3, #28
 800fbc8:	2100      	movs	r1, #0
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f7fd fc40 	bl	800d450 <st_dword>
					fs->wflag = 1;
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	2201      	movs	r2, #1
 800fbd4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fbd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d037      	beq.n	800fc4c <f_open+0x1d4>
						dw = fs->winsect;
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbe0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800fbe2:	f107 0318 	add.w	r3, r7, #24
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fbea:	4618      	mov	r0, r3
 800fbec:	f7fe f937 	bl	800de5e <remove_chain>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800fbf6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d126      	bne.n	800fc4c <f_open+0x1d4>
							res = move_window(fs, dw);
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fc02:	4618      	mov	r0, r3
 800fc04:	f7fd fe7e 	bl	800d904 <move_window>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fc12:	3a01      	subs	r2, #1
 800fc14:	615a      	str	r2, [r3, #20]
 800fc16:	e019      	b.n	800fc4c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fc18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d115      	bne.n	800fc4c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fc20:	7fbb      	ldrb	r3, [r7, #30]
 800fc22:	f003 0310 	and.w	r3, r3, #16
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d003      	beq.n	800fc32 <f_open+0x1ba>
					res = FR_NO_FILE;
 800fc2a:	2304      	movs	r3, #4
 800fc2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fc30:	e00c      	b.n	800fc4c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fc32:	79fb      	ldrb	r3, [r7, #7]
 800fc34:	f003 0302 	and.w	r3, r3, #2
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d007      	beq.n	800fc4c <f_open+0x1d4>
 800fc3c:	7fbb      	ldrb	r3, [r7, #30]
 800fc3e:	f003 0301 	and.w	r3, r3, #1
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d002      	beq.n	800fc4c <f_open+0x1d4>
						res = FR_DENIED;
 800fc46:	2307      	movs	r3, #7
 800fc48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800fc4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d128      	bne.n	800fca6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fc54:	79fb      	ldrb	r3, [r7, #7]
 800fc56:	f003 0308 	and.w	r3, r3, #8
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d003      	beq.n	800fc66 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800fc5e:	79fb      	ldrb	r3, [r7, #7]
 800fc60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc64:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800fc6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fc74:	79fb      	ldrb	r3, [r7, #7]
 800fc76:	f023 0301 	bic.w	r3, r3, #1
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	bf14      	ite	ne
 800fc7e:	2301      	movne	r3, #1
 800fc80:	2300      	moveq	r3, #0
 800fc82:	b2db      	uxtb	r3, r3
 800fc84:	461a      	mov	r2, r3
 800fc86:	f107 0318 	add.w	r3, r7, #24
 800fc8a:	4611      	mov	r1, r2
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f7fd fd07 	bl	800d6a0 <inc_lock>
 800fc92:	4602      	mov	r2, r0
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	691b      	ldr	r3, [r3, #16]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d102      	bne.n	800fca6 <f_open+0x22e>
 800fca0:	2302      	movs	r3, #2
 800fca2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fca6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	f040 80a3 	bne.w	800fdf6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fcb0:	697b      	ldr	r3, [r7, #20]
 800fcb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fcb4:	4611      	mov	r1, r2
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7fe fbac 	bl	800e414 <ld_clust>
 800fcbc:	4602      	mov	r2, r0
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fcc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc4:	331c      	adds	r3, #28
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f7fd fb84 	bl	800d3d4 <ld_dword>
 800fccc:	4602      	mov	r2, r0
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fcd8:	697a      	ldr	r2, [r7, #20]
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	88da      	ldrh	r2, [r3, #6]
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	79fa      	ldrb	r2, [r7, #7]
 800fcea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	2200      	movs	r2, #0
 800fcf0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	3330      	adds	r3, #48	; 0x30
 800fd02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fd06:	2100      	movs	r1, #0
 800fd08:	4618      	mov	r0, r3
 800fd0a:	f7fd fbee 	bl	800d4ea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fd0e:	79fb      	ldrb	r3, [r7, #7]
 800fd10:	f003 0320 	and.w	r3, r3, #32
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d06e      	beq.n	800fdf6 <f_open+0x37e>
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	68db      	ldr	r3, [r3, #12]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d06a      	beq.n	800fdf6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	68da      	ldr	r2, [r3, #12]
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fd28:	697b      	ldr	r3, [r7, #20]
 800fd2a:	895b      	ldrh	r3, [r3, #10]
 800fd2c:	461a      	mov	r2, r3
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	899b      	ldrh	r3, [r3, #12]
 800fd32:	fb02 f303 	mul.w	r3, r2, r3
 800fd36:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	689b      	ldr	r3, [r3, #8]
 800fd3c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	68db      	ldr	r3, [r3, #12]
 800fd42:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fd44:	e016      	b.n	800fd74 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	f7fd fe97 	bl	800da7e <get_fat>
 800fd50:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800fd52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd54:	2b01      	cmp	r3, #1
 800fd56:	d802      	bhi.n	800fd5e <f_open+0x2e6>
 800fd58:	2302      	movs	r3, #2
 800fd5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fd5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd64:	d102      	bne.n	800fd6c <f_open+0x2f4>
 800fd66:	2301      	movs	r3, #1
 800fd68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fd6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fd6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd70:	1ad3      	subs	r3, r2, r3
 800fd72:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fd74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d103      	bne.n	800fd84 <f_open+0x30c>
 800fd7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fd7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd80:	429a      	cmp	r2, r3
 800fd82:	d8e0      	bhi.n	800fd46 <f_open+0x2ce>
				}
				fp->clust = clst;
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fd88:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fd8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d131      	bne.n	800fdf6 <f_open+0x37e>
 800fd92:	697b      	ldr	r3, [r7, #20]
 800fd94:	899b      	ldrh	r3, [r3, #12]
 800fd96:	461a      	mov	r2, r3
 800fd98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd9a:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd9e:	fb01 f202 	mul.w	r2, r1, r2
 800fda2:	1a9b      	subs	r3, r3, r2
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d026      	beq.n	800fdf6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fda8:	697b      	ldr	r3, [r7, #20]
 800fdaa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fdac:	4618      	mov	r0, r3
 800fdae:	f7fd fe47 	bl	800da40 <clust2sect>
 800fdb2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fdb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d103      	bne.n	800fdc2 <f_open+0x34a>
						res = FR_INT_ERR;
 800fdba:	2302      	movs	r3, #2
 800fdbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800fdc0:	e019      	b.n	800fdf6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	899b      	ldrh	r3, [r3, #12]
 800fdc6:	461a      	mov	r2, r3
 800fdc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fdca:	fbb3 f2f2 	udiv	r2, r3, r2
 800fdce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fdd0:	441a      	add	r2, r3
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fdd6:	697b      	ldr	r3, [r7, #20]
 800fdd8:	7858      	ldrb	r0, [r3, #1]
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	6a1a      	ldr	r2, [r3, #32]
 800fde4:	2301      	movs	r3, #1
 800fde6:	f7fd fa7f 	bl	800d2e8 <disk_read>
 800fdea:	4603      	mov	r3, r0
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d002      	beq.n	800fdf6 <f_open+0x37e>
 800fdf0:	2301      	movs	r3, #1
 800fdf2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fdf6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d002      	beq.n	800fe04 <f_open+0x38c>
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	2200      	movs	r2, #0
 800fe02:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fe04:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800fe08:	4618      	mov	r0, r3
 800fe0a:	3768      	adds	r7, #104	; 0x68
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}

0800fe10 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b08e      	sub	sp, #56	; 0x38
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	60f8      	str	r0, [r7, #12]
 800fe18:	60b9      	str	r1, [r7, #8]
 800fe1a:	607a      	str	r2, [r7, #4]
 800fe1c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800fe22:	683b      	ldr	r3, [r7, #0]
 800fe24:	2200      	movs	r2, #0
 800fe26:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	f107 0214 	add.w	r2, r7, #20
 800fe2e:	4611      	mov	r1, r2
 800fe30:	4618      	mov	r0, r3
 800fe32:	f7ff fda5 	bl	800f980 <validate>
 800fe36:	4603      	mov	r3, r0
 800fe38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fe3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d107      	bne.n	800fe54 <f_read+0x44>
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	7d5b      	ldrb	r3, [r3, #21]
 800fe48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fe4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d002      	beq.n	800fe5a <f_read+0x4a>
 800fe54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe58:	e135      	b.n	80100c6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	7d1b      	ldrb	r3, [r3, #20]
 800fe5e:	f003 0301 	and.w	r3, r3, #1
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d101      	bne.n	800fe6a <f_read+0x5a>
 800fe66:	2307      	movs	r3, #7
 800fe68:	e12d      	b.n	80100c6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	68da      	ldr	r2, [r3, #12]
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	699b      	ldr	r3, [r3, #24]
 800fe72:	1ad3      	subs	r3, r2, r3
 800fe74:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800fe76:	687a      	ldr	r2, [r7, #4]
 800fe78:	6a3b      	ldr	r3, [r7, #32]
 800fe7a:	429a      	cmp	r2, r3
 800fe7c:	f240 811e 	bls.w	80100bc <f_read+0x2ac>
 800fe80:	6a3b      	ldr	r3, [r7, #32]
 800fe82:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800fe84:	e11a      	b.n	80100bc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	699b      	ldr	r3, [r3, #24]
 800fe8a:	697a      	ldr	r2, [r7, #20]
 800fe8c:	8992      	ldrh	r2, [r2, #12]
 800fe8e:	fbb3 f1f2 	udiv	r1, r3, r2
 800fe92:	fb01 f202 	mul.w	r2, r1, r2
 800fe96:	1a9b      	subs	r3, r3, r2
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	f040 80d5 	bne.w	8010048 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	699b      	ldr	r3, [r3, #24]
 800fea2:	697a      	ldr	r2, [r7, #20]
 800fea4:	8992      	ldrh	r2, [r2, #12]
 800fea6:	fbb3 f3f2 	udiv	r3, r3, r2
 800feaa:	697a      	ldr	r2, [r7, #20]
 800feac:	8952      	ldrh	r2, [r2, #10]
 800feae:	3a01      	subs	r2, #1
 800feb0:	4013      	ands	r3, r2
 800feb2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800feb4:	69fb      	ldr	r3, [r7, #28]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d12f      	bne.n	800ff1a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	699b      	ldr	r3, [r3, #24]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d103      	bne.n	800feca <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	689b      	ldr	r3, [r3, #8]
 800fec6:	633b      	str	r3, [r7, #48]	; 0x30
 800fec8:	e013      	b.n	800fef2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d007      	beq.n	800fee2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	699b      	ldr	r3, [r3, #24]
 800fed6:	4619      	mov	r1, r3
 800fed8:	68f8      	ldr	r0, [r7, #12]
 800feda:	f7fe f8bd 	bl	800e058 <clmt_clust>
 800fede:	6338      	str	r0, [r7, #48]	; 0x30
 800fee0:	e007      	b.n	800fef2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800fee2:	68fa      	ldr	r2, [r7, #12]
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	69db      	ldr	r3, [r3, #28]
 800fee8:	4619      	mov	r1, r3
 800feea:	4610      	mov	r0, r2
 800feec:	f7fd fdc7 	bl	800da7e <get_fat>
 800fef0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800fef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fef4:	2b01      	cmp	r3, #1
 800fef6:	d804      	bhi.n	800ff02 <f_read+0xf2>
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	2202      	movs	r2, #2
 800fefc:	755a      	strb	r2, [r3, #21]
 800fefe:	2302      	movs	r3, #2
 800ff00:	e0e1      	b.n	80100c6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ff02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff08:	d104      	bne.n	800ff14 <f_read+0x104>
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	2201      	movs	r2, #1
 800ff0e:	755a      	strb	r2, [r3, #21]
 800ff10:	2301      	movs	r3, #1
 800ff12:	e0d8      	b.n	80100c6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff18:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ff1a:	697a      	ldr	r2, [r7, #20]
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	69db      	ldr	r3, [r3, #28]
 800ff20:	4619      	mov	r1, r3
 800ff22:	4610      	mov	r0, r2
 800ff24:	f7fd fd8c 	bl	800da40 <clust2sect>
 800ff28:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ff2a:	69bb      	ldr	r3, [r7, #24]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d104      	bne.n	800ff3a <f_read+0x12a>
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	2202      	movs	r2, #2
 800ff34:	755a      	strb	r2, [r3, #21]
 800ff36:	2302      	movs	r3, #2
 800ff38:	e0c5      	b.n	80100c6 <f_read+0x2b6>
			sect += csect;
 800ff3a:	69ba      	ldr	r2, [r7, #24]
 800ff3c:	69fb      	ldr	r3, [r7, #28]
 800ff3e:	4413      	add	r3, r2
 800ff40:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ff42:	697b      	ldr	r3, [r7, #20]
 800ff44:	899b      	ldrh	r3, [r3, #12]
 800ff46:	461a      	mov	r2, r3
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff4e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ff50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d041      	beq.n	800ffda <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ff56:	69fa      	ldr	r2, [r7, #28]
 800ff58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff5a:	4413      	add	r3, r2
 800ff5c:	697a      	ldr	r2, [r7, #20]
 800ff5e:	8952      	ldrh	r2, [r2, #10]
 800ff60:	4293      	cmp	r3, r2
 800ff62:	d905      	bls.n	800ff70 <f_read+0x160>
					cc = fs->csize - csect;
 800ff64:	697b      	ldr	r3, [r7, #20]
 800ff66:	895b      	ldrh	r3, [r3, #10]
 800ff68:	461a      	mov	r2, r3
 800ff6a:	69fb      	ldr	r3, [r7, #28]
 800ff6c:	1ad3      	subs	r3, r2, r3
 800ff6e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ff70:	697b      	ldr	r3, [r7, #20]
 800ff72:	7858      	ldrb	r0, [r3, #1]
 800ff74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff76:	69ba      	ldr	r2, [r7, #24]
 800ff78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ff7a:	f7fd f9b5 	bl	800d2e8 <disk_read>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d004      	beq.n	800ff8e <f_read+0x17e>
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	2201      	movs	r2, #1
 800ff88:	755a      	strb	r2, [r3, #21]
 800ff8a:	2301      	movs	r3, #1
 800ff8c:	e09b      	b.n	80100c6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	7d1b      	ldrb	r3, [r3, #20]
 800ff92:	b25b      	sxtb	r3, r3
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	da18      	bge.n	800ffca <f_read+0x1ba>
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	6a1a      	ldr	r2, [r3, #32]
 800ff9c:	69bb      	ldr	r3, [r7, #24]
 800ff9e:	1ad3      	subs	r3, r2, r3
 800ffa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d911      	bls.n	800ffca <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	6a1a      	ldr	r2, [r3, #32]
 800ffaa:	69bb      	ldr	r3, [r7, #24]
 800ffac:	1ad3      	subs	r3, r2, r3
 800ffae:	697a      	ldr	r2, [r7, #20]
 800ffb0:	8992      	ldrh	r2, [r2, #12]
 800ffb2:	fb02 f303 	mul.w	r3, r2, r3
 800ffb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffb8:	18d0      	adds	r0, r2, r3
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	899b      	ldrh	r3, [r3, #12]
 800ffc4:	461a      	mov	r2, r3
 800ffc6:	f7fd fa6f 	bl	800d4a8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ffca:	697b      	ldr	r3, [r7, #20]
 800ffcc:	899b      	ldrh	r3, [r3, #12]
 800ffce:	461a      	mov	r2, r3
 800ffd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffd2:	fb02 f303 	mul.w	r3, r2, r3
 800ffd6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ffd8:	e05c      	b.n	8010094 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	6a1b      	ldr	r3, [r3, #32]
 800ffde:	69ba      	ldr	r2, [r7, #24]
 800ffe0:	429a      	cmp	r2, r3
 800ffe2:	d02e      	beq.n	8010042 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	7d1b      	ldrb	r3, [r3, #20]
 800ffe8:	b25b      	sxtb	r3, r3
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	da18      	bge.n	8010020 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	7858      	ldrb	r0, [r3, #1]
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	6a1a      	ldr	r2, [r3, #32]
 800fffc:	2301      	movs	r3, #1
 800fffe:	f7fd f993 	bl	800d328 <disk_write>
 8010002:	4603      	mov	r3, r0
 8010004:	2b00      	cmp	r3, #0
 8010006:	d004      	beq.n	8010012 <f_read+0x202>
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	2201      	movs	r2, #1
 801000c:	755a      	strb	r2, [r3, #21]
 801000e:	2301      	movs	r3, #1
 8010010:	e059      	b.n	80100c6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	7d1b      	ldrb	r3, [r3, #20]
 8010016:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801001a:	b2da      	uxtb	r2, r3
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	7858      	ldrb	r0, [r3, #1]
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801002a:	2301      	movs	r3, #1
 801002c:	69ba      	ldr	r2, [r7, #24]
 801002e:	f7fd f95b 	bl	800d2e8 <disk_read>
 8010032:	4603      	mov	r3, r0
 8010034:	2b00      	cmp	r3, #0
 8010036:	d004      	beq.n	8010042 <f_read+0x232>
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	2201      	movs	r2, #1
 801003c:	755a      	strb	r2, [r3, #21]
 801003e:	2301      	movs	r3, #1
 8010040:	e041      	b.n	80100c6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	69ba      	ldr	r2, [r7, #24]
 8010046:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010048:	697b      	ldr	r3, [r7, #20]
 801004a:	899b      	ldrh	r3, [r3, #12]
 801004c:	4618      	mov	r0, r3
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	699b      	ldr	r3, [r3, #24]
 8010052:	697a      	ldr	r2, [r7, #20]
 8010054:	8992      	ldrh	r2, [r2, #12]
 8010056:	fbb3 f1f2 	udiv	r1, r3, r2
 801005a:	fb01 f202 	mul.w	r2, r1, r2
 801005e:	1a9b      	subs	r3, r3, r2
 8010060:	1ac3      	subs	r3, r0, r3
 8010062:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	429a      	cmp	r2, r3
 801006a:	d901      	bls.n	8010070 <f_read+0x260>
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	699b      	ldr	r3, [r3, #24]
 801007a:	697a      	ldr	r2, [r7, #20]
 801007c:	8992      	ldrh	r2, [r2, #12]
 801007e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010082:	fb00 f202 	mul.w	r2, r0, r2
 8010086:	1a9b      	subs	r3, r3, r2
 8010088:	440b      	add	r3, r1
 801008a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801008c:	4619      	mov	r1, r3
 801008e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010090:	f7fd fa0a 	bl	800d4a8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010098:	4413      	add	r3, r2
 801009a:	627b      	str	r3, [r7, #36]	; 0x24
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	699a      	ldr	r2, [r3, #24]
 80100a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100a2:	441a      	add	r2, r3
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	619a      	str	r2, [r3, #24]
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	681a      	ldr	r2, [r3, #0]
 80100ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ae:	441a      	add	r2, r3
 80100b0:	683b      	ldr	r3, [r7, #0]
 80100b2:	601a      	str	r2, [r3, #0]
 80100b4:	687a      	ldr	r2, [r7, #4]
 80100b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100b8:	1ad3      	subs	r3, r2, r3
 80100ba:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	f47f aee1 	bne.w	800fe86 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80100c4:	2300      	movs	r3, #0
}
 80100c6:	4618      	mov	r0, r3
 80100c8:	3738      	adds	r7, #56	; 0x38
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}

080100ce <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80100ce:	b580      	push	{r7, lr}
 80100d0:	b086      	sub	sp, #24
 80100d2:	af00      	add	r7, sp, #0
 80100d4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	f107 0208 	add.w	r2, r7, #8
 80100dc:	4611      	mov	r1, r2
 80100de:	4618      	mov	r0, r3
 80100e0:	f7ff fc4e 	bl	800f980 <validate>
 80100e4:	4603      	mov	r3, r0
 80100e6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80100e8:	7dfb      	ldrb	r3, [r7, #23]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d168      	bne.n	80101c0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	7d1b      	ldrb	r3, [r3, #20]
 80100f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d062      	beq.n	80101c0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	7d1b      	ldrb	r3, [r3, #20]
 80100fe:	b25b      	sxtb	r3, r3
 8010100:	2b00      	cmp	r3, #0
 8010102:	da15      	bge.n	8010130 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	7858      	ldrb	r0, [r3, #1]
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	6a1a      	ldr	r2, [r3, #32]
 8010112:	2301      	movs	r3, #1
 8010114:	f7fd f908 	bl	800d328 <disk_write>
 8010118:	4603      	mov	r3, r0
 801011a:	2b00      	cmp	r3, #0
 801011c:	d001      	beq.n	8010122 <f_sync+0x54>
 801011e:	2301      	movs	r3, #1
 8010120:	e04f      	b.n	80101c2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	7d1b      	ldrb	r3, [r3, #20]
 8010126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801012a:	b2da      	uxtb	r2, r3
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010130:	f7fa ffae 	bl	800b090 <get_fattime>
 8010134:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010136:	68ba      	ldr	r2, [r7, #8]
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801013c:	4619      	mov	r1, r3
 801013e:	4610      	mov	r0, r2
 8010140:	f7fd fbe0 	bl	800d904 <move_window>
 8010144:	4603      	mov	r3, r0
 8010146:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010148:	7dfb      	ldrb	r3, [r7, #23]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d138      	bne.n	80101c0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010152:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	330b      	adds	r3, #11
 8010158:	781a      	ldrb	r2, [r3, #0]
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	330b      	adds	r3, #11
 801015e:	f042 0220 	orr.w	r2, r2, #32
 8010162:	b2d2      	uxtb	r2, r2
 8010164:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	6818      	ldr	r0, [r3, #0]
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	689b      	ldr	r3, [r3, #8]
 801016e:	461a      	mov	r2, r3
 8010170:	68f9      	ldr	r1, [r7, #12]
 8010172:	f7fe f96e 	bl	800e452 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	f103 021c 	add.w	r2, r3, #28
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	68db      	ldr	r3, [r3, #12]
 8010180:	4619      	mov	r1, r3
 8010182:	4610      	mov	r0, r2
 8010184:	f7fd f964 	bl	800d450 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	3316      	adds	r3, #22
 801018c:	6939      	ldr	r1, [r7, #16]
 801018e:	4618      	mov	r0, r3
 8010190:	f7fd f95e 	bl	800d450 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	3312      	adds	r3, #18
 8010198:	2100      	movs	r1, #0
 801019a:	4618      	mov	r0, r3
 801019c:	f7fd f93d 	bl	800d41a <st_word>
					fs->wflag = 1;
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	2201      	movs	r2, #1
 80101a4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80101a6:	68bb      	ldr	r3, [r7, #8]
 80101a8:	4618      	mov	r0, r3
 80101aa:	f7fd fbd9 	bl	800d960 <sync_fs>
 80101ae:	4603      	mov	r3, r0
 80101b0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	7d1b      	ldrb	r3, [r3, #20]
 80101b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80101ba:	b2da      	uxtb	r2, r3
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80101c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80101c2:	4618      	mov	r0, r3
 80101c4:	3718      	adds	r7, #24
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}

080101ca <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80101ca:	b580      	push	{r7, lr}
 80101cc:	b084      	sub	sp, #16
 80101ce:	af00      	add	r7, sp, #0
 80101d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	f7ff ff7b 	bl	80100ce <f_sync>
 80101d8:	4603      	mov	r3, r0
 80101da:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80101dc:	7bfb      	ldrb	r3, [r7, #15]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d118      	bne.n	8010214 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	f107 0208 	add.w	r2, r7, #8
 80101e8:	4611      	mov	r1, r2
 80101ea:	4618      	mov	r0, r3
 80101ec:	f7ff fbc8 	bl	800f980 <validate>
 80101f0:	4603      	mov	r3, r0
 80101f2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80101f4:	7bfb      	ldrb	r3, [r7, #15]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d10c      	bne.n	8010214 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	691b      	ldr	r3, [r3, #16]
 80101fe:	4618      	mov	r0, r3
 8010200:	f7fd fadc 	bl	800d7bc <dec_lock>
 8010204:	4603      	mov	r3, r0
 8010206:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010208:	7bfb      	ldrb	r3, [r7, #15]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d102      	bne.n	8010214 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	2200      	movs	r2, #0
 8010212:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010214:	7bfb      	ldrb	r3, [r7, #15]
}
 8010216:	4618      	mov	r0, r3
 8010218:	3710      	adds	r7, #16
 801021a:	46bd      	mov	sp, r7
 801021c:	bd80      	pop	{r7, pc}

0801021e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801021e:	b580      	push	{r7, lr}
 8010220:	b090      	sub	sp, #64	; 0x40
 8010222:	af00      	add	r7, sp, #0
 8010224:	6078      	str	r0, [r7, #4]
 8010226:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	f107 0208 	add.w	r2, r7, #8
 801022e:	4611      	mov	r1, r2
 8010230:	4618      	mov	r0, r3
 8010232:	f7ff fba5 	bl	800f980 <validate>
 8010236:	4603      	mov	r3, r0
 8010238:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801023c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010240:	2b00      	cmp	r3, #0
 8010242:	d103      	bne.n	801024c <f_lseek+0x2e>
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	7d5b      	ldrb	r3, [r3, #21]
 8010248:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801024c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010250:	2b00      	cmp	r3, #0
 8010252:	d002      	beq.n	801025a <f_lseek+0x3c>
 8010254:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010258:	e201      	b.n	801065e <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801025e:	2b00      	cmp	r3, #0
 8010260:	f000 80d9 	beq.w	8010416 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801026a:	d15a      	bne.n	8010322 <f_lseek+0x104>
			tbl = fp->cltbl;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010270:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010274:	1d1a      	adds	r2, r3, #4
 8010276:	627a      	str	r2, [r7, #36]	; 0x24
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	617b      	str	r3, [r7, #20]
 801027c:	2302      	movs	r3, #2
 801027e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	689b      	ldr	r3, [r3, #8]
 8010284:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8010286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010288:	2b00      	cmp	r3, #0
 801028a:	d03a      	beq.n	8010302 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801028c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801028e:	613b      	str	r3, [r7, #16]
 8010290:	2300      	movs	r3, #0
 8010292:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010296:	3302      	adds	r3, #2
 8010298:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801029a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801029c:	60fb      	str	r3, [r7, #12]
 801029e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102a0:	3301      	adds	r3, #1
 80102a2:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80102a8:	4618      	mov	r0, r3
 80102aa:	f7fd fbe8 	bl	800da7e <get_fat>
 80102ae:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80102b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b2:	2b01      	cmp	r3, #1
 80102b4:	d804      	bhi.n	80102c0 <f_lseek+0xa2>
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2202      	movs	r2, #2
 80102ba:	755a      	strb	r2, [r3, #21]
 80102bc:	2302      	movs	r3, #2
 80102be:	e1ce      	b.n	801065e <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80102c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80102c6:	d104      	bne.n	80102d2 <f_lseek+0xb4>
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	2201      	movs	r2, #1
 80102cc:	755a      	strb	r2, [r3, #21]
 80102ce:	2301      	movs	r3, #1
 80102d0:	e1c5      	b.n	801065e <f_lseek+0x440>
					} while (cl == pcl + 1);
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	3301      	adds	r3, #1
 80102d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102d8:	429a      	cmp	r2, r3
 80102da:	d0de      	beq.n	801029a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80102dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80102de:	697b      	ldr	r3, [r7, #20]
 80102e0:	429a      	cmp	r2, r3
 80102e2:	d809      	bhi.n	80102f8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80102e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e6:	1d1a      	adds	r2, r3, #4
 80102e8:	627a      	str	r2, [r7, #36]	; 0x24
 80102ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80102ec:	601a      	str	r2, [r3, #0]
 80102ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f0:	1d1a      	adds	r2, r3, #4
 80102f2:	627a      	str	r2, [r7, #36]	; 0x24
 80102f4:	693a      	ldr	r2, [r7, #16]
 80102f6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	69db      	ldr	r3, [r3, #28]
 80102fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102fe:	429a      	cmp	r2, r3
 8010300:	d3c4      	bcc.n	801028c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010308:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801030a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801030c:	697b      	ldr	r3, [r7, #20]
 801030e:	429a      	cmp	r2, r3
 8010310:	d803      	bhi.n	801031a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8010312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010314:	2200      	movs	r2, #0
 8010316:	601a      	str	r2, [r3, #0]
 8010318:	e19f      	b.n	801065a <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801031a:	2311      	movs	r3, #17
 801031c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010320:	e19b      	b.n	801065a <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	68db      	ldr	r3, [r3, #12]
 8010326:	683a      	ldr	r2, [r7, #0]
 8010328:	429a      	cmp	r2, r3
 801032a:	d902      	bls.n	8010332 <f_lseek+0x114>
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	68db      	ldr	r3, [r3, #12]
 8010330:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	683a      	ldr	r2, [r7, #0]
 8010336:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	2b00      	cmp	r3, #0
 801033c:	f000 818d 	beq.w	801065a <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010340:	683b      	ldr	r3, [r7, #0]
 8010342:	3b01      	subs	r3, #1
 8010344:	4619      	mov	r1, r3
 8010346:	6878      	ldr	r0, [r7, #4]
 8010348:	f7fd fe86 	bl	800e058 <clmt_clust>
 801034c:	4602      	mov	r2, r0
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010352:	68ba      	ldr	r2, [r7, #8]
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	69db      	ldr	r3, [r3, #28]
 8010358:	4619      	mov	r1, r3
 801035a:	4610      	mov	r0, r2
 801035c:	f7fd fb70 	bl	800da40 <clust2sect>
 8010360:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010362:	69bb      	ldr	r3, [r7, #24]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d104      	bne.n	8010372 <f_lseek+0x154>
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2202      	movs	r2, #2
 801036c:	755a      	strb	r2, [r3, #21]
 801036e:	2302      	movs	r3, #2
 8010370:	e175      	b.n	801065e <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	3b01      	subs	r3, #1
 8010376:	68ba      	ldr	r2, [r7, #8]
 8010378:	8992      	ldrh	r2, [r2, #12]
 801037a:	fbb3 f3f2 	udiv	r3, r3, r2
 801037e:	68ba      	ldr	r2, [r7, #8]
 8010380:	8952      	ldrh	r2, [r2, #10]
 8010382:	3a01      	subs	r2, #1
 8010384:	4013      	ands	r3, r2
 8010386:	69ba      	ldr	r2, [r7, #24]
 8010388:	4413      	add	r3, r2
 801038a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	699b      	ldr	r3, [r3, #24]
 8010390:	68ba      	ldr	r2, [r7, #8]
 8010392:	8992      	ldrh	r2, [r2, #12]
 8010394:	fbb3 f1f2 	udiv	r1, r3, r2
 8010398:	fb01 f202 	mul.w	r2, r1, r2
 801039c:	1a9b      	subs	r3, r3, r2
 801039e:	2b00      	cmp	r3, #0
 80103a0:	f000 815b 	beq.w	801065a <f_lseek+0x43c>
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	6a1b      	ldr	r3, [r3, #32]
 80103a8:	69ba      	ldr	r2, [r7, #24]
 80103aa:	429a      	cmp	r2, r3
 80103ac:	f000 8155 	beq.w	801065a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	7d1b      	ldrb	r3, [r3, #20]
 80103b4:	b25b      	sxtb	r3, r3
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	da18      	bge.n	80103ec <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80103ba:	68bb      	ldr	r3, [r7, #8]
 80103bc:	7858      	ldrb	r0, [r3, #1]
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6a1a      	ldr	r2, [r3, #32]
 80103c8:	2301      	movs	r3, #1
 80103ca:	f7fc ffad 	bl	800d328 <disk_write>
 80103ce:	4603      	mov	r3, r0
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d004      	beq.n	80103de <f_lseek+0x1c0>
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	2201      	movs	r2, #1
 80103d8:	755a      	strb	r2, [r3, #21]
 80103da:	2301      	movs	r3, #1
 80103dc:	e13f      	b.n	801065e <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	7d1b      	ldrb	r3, [r3, #20]
 80103e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80103e6:	b2da      	uxtb	r2, r3
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80103ec:	68bb      	ldr	r3, [r7, #8]
 80103ee:	7858      	ldrb	r0, [r3, #1]
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80103f6:	2301      	movs	r3, #1
 80103f8:	69ba      	ldr	r2, [r7, #24]
 80103fa:	f7fc ff75 	bl	800d2e8 <disk_read>
 80103fe:	4603      	mov	r3, r0
 8010400:	2b00      	cmp	r3, #0
 8010402:	d004      	beq.n	801040e <f_lseek+0x1f0>
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2201      	movs	r2, #1
 8010408:	755a      	strb	r2, [r3, #21]
 801040a:	2301      	movs	r3, #1
 801040c:	e127      	b.n	801065e <f_lseek+0x440>
#endif
					fp->sect = dsc;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	69ba      	ldr	r2, [r7, #24]
 8010412:	621a      	str	r2, [r3, #32]
 8010414:	e121      	b.n	801065a <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	68db      	ldr	r3, [r3, #12]
 801041a:	683a      	ldr	r2, [r7, #0]
 801041c:	429a      	cmp	r2, r3
 801041e:	d908      	bls.n	8010432 <f_lseek+0x214>
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	7d1b      	ldrb	r3, [r3, #20]
 8010424:	f003 0302 	and.w	r3, r3, #2
 8010428:	2b00      	cmp	r3, #0
 801042a:	d102      	bne.n	8010432 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	68db      	ldr	r3, [r3, #12]
 8010430:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	699b      	ldr	r3, [r3, #24]
 8010436:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010438:	2300      	movs	r3, #0
 801043a:	637b      	str	r3, [r7, #52]	; 0x34
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010440:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	2b00      	cmp	r3, #0
 8010446:	f000 80b5 	beq.w	80105b4 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	895b      	ldrh	r3, [r3, #10]
 801044e:	461a      	mov	r2, r3
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	899b      	ldrh	r3, [r3, #12]
 8010454:	fb02 f303 	mul.w	r3, r2, r3
 8010458:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801045a:	6a3b      	ldr	r3, [r7, #32]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d01b      	beq.n	8010498 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	1e5a      	subs	r2, r3, #1
 8010464:	69fb      	ldr	r3, [r7, #28]
 8010466:	fbb2 f2f3 	udiv	r2, r2, r3
 801046a:	6a3b      	ldr	r3, [r7, #32]
 801046c:	1e59      	subs	r1, r3, #1
 801046e:	69fb      	ldr	r3, [r7, #28]
 8010470:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010474:	429a      	cmp	r2, r3
 8010476:	d30f      	bcc.n	8010498 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010478:	6a3b      	ldr	r3, [r7, #32]
 801047a:	1e5a      	subs	r2, r3, #1
 801047c:	69fb      	ldr	r3, [r7, #28]
 801047e:	425b      	negs	r3, r3
 8010480:	401a      	ands	r2, r3
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	699b      	ldr	r3, [r3, #24]
 801048a:	683a      	ldr	r2, [r7, #0]
 801048c:	1ad3      	subs	r3, r2, r3
 801048e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	69db      	ldr	r3, [r3, #28]
 8010494:	63bb      	str	r3, [r7, #56]	; 0x38
 8010496:	e022      	b.n	80104de <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	689b      	ldr	r3, [r3, #8]
 801049c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801049e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d119      	bne.n	80104d8 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2100      	movs	r1, #0
 80104a8:	4618      	mov	r0, r3
 80104aa:	f7fd fd3d 	bl	800df28 <create_chain>
 80104ae:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80104b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104b2:	2b01      	cmp	r3, #1
 80104b4:	d104      	bne.n	80104c0 <f_lseek+0x2a2>
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	2202      	movs	r2, #2
 80104ba:	755a      	strb	r2, [r3, #21]
 80104bc:	2302      	movs	r3, #2
 80104be:	e0ce      	b.n	801065e <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80104c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80104c6:	d104      	bne.n	80104d2 <f_lseek+0x2b4>
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2201      	movs	r2, #1
 80104cc:	755a      	strb	r2, [r3, #21]
 80104ce:	2301      	movs	r3, #1
 80104d0:	e0c5      	b.n	801065e <f_lseek+0x440>
					fp->obj.sclust = clst;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104d6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104dc:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80104de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d067      	beq.n	80105b4 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80104e4:	e03a      	b.n	801055c <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80104e6:	683a      	ldr	r2, [r7, #0]
 80104e8:	69fb      	ldr	r3, [r7, #28]
 80104ea:	1ad3      	subs	r3, r2, r3
 80104ec:	603b      	str	r3, [r7, #0]
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	699a      	ldr	r2, [r3, #24]
 80104f2:	69fb      	ldr	r3, [r7, #28]
 80104f4:	441a      	add	r2, r3
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	7d1b      	ldrb	r3, [r3, #20]
 80104fe:	f003 0302 	and.w	r3, r3, #2
 8010502:	2b00      	cmp	r3, #0
 8010504:	d00b      	beq.n	801051e <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801050a:	4618      	mov	r0, r3
 801050c:	f7fd fd0c 	bl	800df28 <create_chain>
 8010510:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010514:	2b00      	cmp	r3, #0
 8010516:	d108      	bne.n	801052a <f_lseek+0x30c>
							ofs = 0; break;
 8010518:	2300      	movs	r3, #0
 801051a:	603b      	str	r3, [r7, #0]
 801051c:	e022      	b.n	8010564 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010522:	4618      	mov	r0, r3
 8010524:	f7fd faab 	bl	800da7e <get_fat>
 8010528:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801052a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801052c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010530:	d104      	bne.n	801053c <f_lseek+0x31e>
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	2201      	movs	r2, #1
 8010536:	755a      	strb	r2, [r3, #21]
 8010538:	2301      	movs	r3, #1
 801053a:	e090      	b.n	801065e <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801053c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801053e:	2b01      	cmp	r3, #1
 8010540:	d904      	bls.n	801054c <f_lseek+0x32e>
 8010542:	68bb      	ldr	r3, [r7, #8]
 8010544:	69db      	ldr	r3, [r3, #28]
 8010546:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010548:	429a      	cmp	r2, r3
 801054a:	d304      	bcc.n	8010556 <f_lseek+0x338>
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	2202      	movs	r2, #2
 8010550:	755a      	strb	r2, [r3, #21]
 8010552:	2302      	movs	r3, #2
 8010554:	e083      	b.n	801065e <f_lseek+0x440>
					fp->clust = clst;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801055a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801055c:	683a      	ldr	r2, [r7, #0]
 801055e:	69fb      	ldr	r3, [r7, #28]
 8010560:	429a      	cmp	r2, r3
 8010562:	d8c0      	bhi.n	80104e6 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	699a      	ldr	r2, [r3, #24]
 8010568:	683b      	ldr	r3, [r7, #0]
 801056a:	441a      	add	r2, r3
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	899b      	ldrh	r3, [r3, #12]
 8010574:	461a      	mov	r2, r3
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	fbb3 f1f2 	udiv	r1, r3, r2
 801057c:	fb01 f202 	mul.w	r2, r1, r2
 8010580:	1a9b      	subs	r3, r3, r2
 8010582:	2b00      	cmp	r3, #0
 8010584:	d016      	beq.n	80105b4 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801058a:	4618      	mov	r0, r3
 801058c:	f7fd fa58 	bl	800da40 <clust2sect>
 8010590:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8010592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010594:	2b00      	cmp	r3, #0
 8010596:	d104      	bne.n	80105a2 <f_lseek+0x384>
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	2202      	movs	r2, #2
 801059c:	755a      	strb	r2, [r3, #21]
 801059e:	2302      	movs	r3, #2
 80105a0:	e05d      	b.n	801065e <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80105a2:	68bb      	ldr	r3, [r7, #8]
 80105a4:	899b      	ldrh	r3, [r3, #12]
 80105a6:	461a      	mov	r2, r3
 80105a8:	683b      	ldr	r3, [r7, #0]
 80105aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80105ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80105b0:	4413      	add	r3, r2
 80105b2:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	699a      	ldr	r2, [r3, #24]
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	68db      	ldr	r3, [r3, #12]
 80105bc:	429a      	cmp	r2, r3
 80105be:	d90a      	bls.n	80105d6 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	699a      	ldr	r2, [r3, #24]
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	7d1b      	ldrb	r3, [r3, #20]
 80105cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80105d0:	b2da      	uxtb	r2, r3
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	699b      	ldr	r3, [r3, #24]
 80105da:	68ba      	ldr	r2, [r7, #8]
 80105dc:	8992      	ldrh	r2, [r2, #12]
 80105de:	fbb3 f1f2 	udiv	r1, r3, r2
 80105e2:	fb01 f202 	mul.w	r2, r1, r2
 80105e6:	1a9b      	subs	r3, r3, r2
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d036      	beq.n	801065a <f_lseek+0x43c>
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	6a1b      	ldr	r3, [r3, #32]
 80105f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80105f2:	429a      	cmp	r2, r3
 80105f4:	d031      	beq.n	801065a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	7d1b      	ldrb	r3, [r3, #20]
 80105fa:	b25b      	sxtb	r3, r3
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	da18      	bge.n	8010632 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010600:	68bb      	ldr	r3, [r7, #8]
 8010602:	7858      	ldrb	r0, [r3, #1]
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6a1a      	ldr	r2, [r3, #32]
 801060e:	2301      	movs	r3, #1
 8010610:	f7fc fe8a 	bl	800d328 <disk_write>
 8010614:	4603      	mov	r3, r0
 8010616:	2b00      	cmp	r3, #0
 8010618:	d004      	beq.n	8010624 <f_lseek+0x406>
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2201      	movs	r2, #1
 801061e:	755a      	strb	r2, [r3, #21]
 8010620:	2301      	movs	r3, #1
 8010622:	e01c      	b.n	801065e <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	7d1b      	ldrb	r3, [r3, #20]
 8010628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801062c:	b2da      	uxtb	r2, r3
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010632:	68bb      	ldr	r3, [r7, #8]
 8010634:	7858      	ldrb	r0, [r3, #1]
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801063c:	2301      	movs	r3, #1
 801063e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010640:	f7fc fe52 	bl	800d2e8 <disk_read>
 8010644:	4603      	mov	r3, r0
 8010646:	2b00      	cmp	r3, #0
 8010648:	d004      	beq.n	8010654 <f_lseek+0x436>
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	2201      	movs	r2, #1
 801064e:	755a      	strb	r2, [r3, #21]
 8010650:	2301      	movs	r3, #1
 8010652:	e004      	b.n	801065e <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010658:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801065a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801065e:	4618      	mov	r0, r3
 8010660:	3740      	adds	r7, #64	; 0x40
 8010662:	46bd      	mov	sp, r7
 8010664:	bd80      	pop	{r7, pc}

08010666 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010666:	b580      	push	{r7, lr}
 8010668:	b086      	sub	sp, #24
 801066a:	af00      	add	r7, sp, #0
 801066c:	6078      	str	r0, [r7, #4]
 801066e:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d101      	bne.n	801067a <f_opendir+0x14>
 8010676:	2309      	movs	r3, #9
 8010678:	e064      	b.n	8010744 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801067e:	f107 010c 	add.w	r1, r7, #12
 8010682:	463b      	mov	r3, r7
 8010684:	2200      	movs	r2, #0
 8010686:	4618      	mov	r0, r3
 8010688:	f7fe fef4 	bl	800f474 <find_volume>
 801068c:	4603      	mov	r3, r0
 801068e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010690:	7dfb      	ldrb	r3, [r7, #23]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d14f      	bne.n	8010736 <f_opendir+0xd0>
		obj->fs = fs;
 8010696:	68fa      	ldr	r2, [r7, #12]
 8010698:	693b      	ldr	r3, [r7, #16]
 801069a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	4619      	mov	r1, r3
 80106a0:	6878      	ldr	r0, [r7, #4]
 80106a2:	f7fe fdd7 	bl	800f254 <follow_path>
 80106a6:	4603      	mov	r3, r0
 80106a8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80106aa:	7dfb      	ldrb	r3, [r7, #23]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d13d      	bne.n	801072c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80106b6:	b25b      	sxtb	r3, r3
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	db12      	blt.n	80106e2 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	799b      	ldrb	r3, [r3, #6]
 80106c0:	f003 0310 	and.w	r3, r3, #16
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d00a      	beq.n	80106de <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80106c8:	68fa      	ldr	r2, [r7, #12]
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	6a1b      	ldr	r3, [r3, #32]
 80106ce:	4619      	mov	r1, r3
 80106d0:	4610      	mov	r0, r2
 80106d2:	f7fd fe9f 	bl	800e414 <ld_clust>
 80106d6:	4602      	mov	r2, r0
 80106d8:	693b      	ldr	r3, [r7, #16]
 80106da:	609a      	str	r2, [r3, #8]
 80106dc:	e001      	b.n	80106e2 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80106de:	2305      	movs	r3, #5
 80106e0:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80106e2:	7dfb      	ldrb	r3, [r7, #23]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d121      	bne.n	801072c <f_opendir+0xc6>
				obj->id = fs->id;
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	88da      	ldrh	r2, [r3, #6]
 80106ec:	693b      	ldr	r3, [r7, #16]
 80106ee:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80106f0:	2100      	movs	r1, #0
 80106f2:	6878      	ldr	r0, [r7, #4]
 80106f4:	f7fd fce8 	bl	800e0c8 <dir_sdi>
 80106f8:	4603      	mov	r3, r0
 80106fa:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80106fc:	7dfb      	ldrb	r3, [r7, #23]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d114      	bne.n	801072c <f_opendir+0xc6>
					if (obj->sclust) {
 8010702:	693b      	ldr	r3, [r7, #16]
 8010704:	689b      	ldr	r3, [r3, #8]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d00d      	beq.n	8010726 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801070a:	2100      	movs	r1, #0
 801070c:	6878      	ldr	r0, [r7, #4]
 801070e:	f7fc ffc7 	bl	800d6a0 <inc_lock>
 8010712:	4602      	mov	r2, r0
 8010714:	693b      	ldr	r3, [r7, #16]
 8010716:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8010718:	693b      	ldr	r3, [r7, #16]
 801071a:	691b      	ldr	r3, [r3, #16]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d105      	bne.n	801072c <f_opendir+0xc6>
 8010720:	2312      	movs	r3, #18
 8010722:	75fb      	strb	r3, [r7, #23]
 8010724:	e002      	b.n	801072c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8010726:	693b      	ldr	r3, [r7, #16]
 8010728:	2200      	movs	r2, #0
 801072a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801072c:	7dfb      	ldrb	r3, [r7, #23]
 801072e:	2b04      	cmp	r3, #4
 8010730:	d101      	bne.n	8010736 <f_opendir+0xd0>
 8010732:	2305      	movs	r3, #5
 8010734:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8010736:	7dfb      	ldrb	r3, [r7, #23]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d002      	beq.n	8010742 <f_opendir+0xdc>
 801073c:	693b      	ldr	r3, [r7, #16]
 801073e:	2200      	movs	r2, #0
 8010740:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010742:	7dfb      	ldrb	r3, [r7, #23]
}
 8010744:	4618      	mov	r0, r3
 8010746:	3718      	adds	r7, #24
 8010748:	46bd      	mov	sp, r7
 801074a:	bd80      	pop	{r7, pc}

0801074c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b084      	sub	sp, #16
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f107 0208 	add.w	r2, r7, #8
 801075a:	4611      	mov	r1, r2
 801075c:	4618      	mov	r0, r3
 801075e:	f7ff f90f 	bl	800f980 <validate>
 8010762:	4603      	mov	r3, r0
 8010764:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010766:	7bfb      	ldrb	r3, [r7, #15]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d110      	bne.n	801078e <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	691b      	ldr	r3, [r3, #16]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d006      	beq.n	8010782 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	691b      	ldr	r3, [r3, #16]
 8010778:	4618      	mov	r0, r3
 801077a:	f7fd f81f 	bl	800d7bc <dec_lock>
 801077e:	4603      	mov	r3, r0
 8010780:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8010782:	7bfb      	ldrb	r3, [r7, #15]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d102      	bne.n	801078e <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	2200      	movs	r2, #0
 801078c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801078e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010790:	4618      	mov	r0, r3
 8010792:	3710      	adds	r7, #16
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}

08010798 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b084      	sub	sp, #16
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
 80107a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	f107 0208 	add.w	r2, r7, #8
 80107a8:	4611      	mov	r1, r2
 80107aa:	4618      	mov	r0, r3
 80107ac:	f7ff f8e8 	bl	800f980 <validate>
 80107b0:	4603      	mov	r3, r0
 80107b2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80107b4:	7bfb      	ldrb	r3, [r7, #15]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d126      	bne.n	8010808 <f_readdir+0x70>
		if (!fno) {
 80107ba:	683b      	ldr	r3, [r7, #0]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d106      	bne.n	80107ce <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80107c0:	2100      	movs	r1, #0
 80107c2:	6878      	ldr	r0, [r7, #4]
 80107c4:	f7fd fc80 	bl	800e0c8 <dir_sdi>
 80107c8:	4603      	mov	r3, r0
 80107ca:	73fb      	strb	r3, [r7, #15]
 80107cc:	e01c      	b.n	8010808 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80107ce:	2100      	movs	r1, #0
 80107d0:	6878      	ldr	r0, [r7, #4]
 80107d2:	f7fe f84a 	bl	800e86a <dir_read>
 80107d6:	4603      	mov	r3, r0
 80107d8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80107da:	7bfb      	ldrb	r3, [r7, #15]
 80107dc:	2b04      	cmp	r3, #4
 80107de:	d101      	bne.n	80107e4 <f_readdir+0x4c>
 80107e0:	2300      	movs	r3, #0
 80107e2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80107e4:	7bfb      	ldrb	r3, [r7, #15]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d10e      	bne.n	8010808 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80107ea:	6839      	ldr	r1, [r7, #0]
 80107ec:	6878      	ldr	r0, [r7, #4]
 80107ee:	f7fe fa9b 	bl	800ed28 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80107f2:	2100      	movs	r1, #0
 80107f4:	6878      	ldr	r0, [r7, #4]
 80107f6:	f7fd fcf0 	bl	800e1da <dir_next>
 80107fa:	4603      	mov	r3, r0
 80107fc:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80107fe:	7bfb      	ldrb	r3, [r7, #15]
 8010800:	2b04      	cmp	r3, #4
 8010802:	d101      	bne.n	8010808 <f_readdir+0x70>
 8010804:	2300      	movs	r3, #0
 8010806:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8010808:	7bfb      	ldrb	r3, [r7, #15]
}
 801080a:	4618      	mov	r0, r3
 801080c:	3710      	adds	r7, #16
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}

08010812 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8010812:	b580      	push	{r7, lr}
 8010814:	b092      	sub	sp, #72	; 0x48
 8010816:	af00      	add	r7, sp, #0
 8010818:	60f8      	str	r0, [r7, #12]
 801081a:	60b9      	str	r1, [r7, #8]
 801081c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801081e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010822:	f107 030c 	add.w	r3, r7, #12
 8010826:	2200      	movs	r2, #0
 8010828:	4618      	mov	r0, r3
 801082a:	f7fe fe23 	bl	800f474 <find_volume>
 801082e:	4603      	mov	r3, r0
 8010830:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8010834:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010838:	2b00      	cmp	r3, #0
 801083a:	f040 8099 	bne.w	8010970 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 801083e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8010844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010846:	699a      	ldr	r2, [r3, #24]
 8010848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801084a:	69db      	ldr	r3, [r3, #28]
 801084c:	3b02      	subs	r3, #2
 801084e:	429a      	cmp	r2, r3
 8010850:	d804      	bhi.n	801085c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8010852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010854:	699a      	ldr	r2, [r3, #24]
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	601a      	str	r2, [r3, #0]
 801085a:	e089      	b.n	8010970 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 801085c:	2300      	movs	r3, #0
 801085e:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8010860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010862:	781b      	ldrb	r3, [r3, #0]
 8010864:	2b01      	cmp	r3, #1
 8010866:	d128      	bne.n	80108ba <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8010868:	2302      	movs	r3, #2
 801086a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801086c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801086e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8010870:	f107 0314 	add.w	r3, r7, #20
 8010874:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010876:	4618      	mov	r0, r3
 8010878:	f7fd f901 	bl	800da7e <get_fat>
 801087c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 801087e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010884:	d103      	bne.n	801088e <f_getfree+0x7c>
 8010886:	2301      	movs	r3, #1
 8010888:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801088c:	e063      	b.n	8010956 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 801088e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010890:	2b01      	cmp	r3, #1
 8010892:	d103      	bne.n	801089c <f_getfree+0x8a>
 8010894:	2302      	movs	r3, #2
 8010896:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801089a:	e05c      	b.n	8010956 <f_getfree+0x144>
					if (stat == 0) nfree++;
 801089c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d102      	bne.n	80108a8 <f_getfree+0x96>
 80108a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108a4:	3301      	adds	r3, #1
 80108a6:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80108a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108aa:	3301      	adds	r3, #1
 80108ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80108ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108b0:	69db      	ldr	r3, [r3, #28]
 80108b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80108b4:	429a      	cmp	r2, r3
 80108b6:	d3db      	bcc.n	8010870 <f_getfree+0x5e>
 80108b8:	e04d      	b.n	8010956 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80108ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108bc:	69db      	ldr	r3, [r3, #28]
 80108be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80108c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108c4:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80108c6:	2300      	movs	r3, #0
 80108c8:	637b      	str	r3, [r7, #52]	; 0x34
 80108ca:	2300      	movs	r3, #0
 80108cc:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80108ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d113      	bne.n	80108fc <f_getfree+0xea>
							res = move_window(fs, sect++);
 80108d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108d8:	1c5a      	adds	r2, r3, #1
 80108da:	63ba      	str	r2, [r7, #56]	; 0x38
 80108dc:	4619      	mov	r1, r3
 80108de:	f7fd f811 	bl	800d904 <move_window>
 80108e2:	4603      	mov	r3, r0
 80108e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80108e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d131      	bne.n	8010954 <f_getfree+0x142>
							p = fs->win;
 80108f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108f2:	3338      	adds	r3, #56	; 0x38
 80108f4:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80108f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108f8:	899b      	ldrh	r3, [r3, #12]
 80108fa:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80108fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108fe:	781b      	ldrb	r3, [r3, #0]
 8010900:	2b02      	cmp	r3, #2
 8010902:	d10f      	bne.n	8010924 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8010904:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010906:	f7fc fd4d 	bl	800d3a4 <ld_word>
 801090a:	4603      	mov	r3, r0
 801090c:	2b00      	cmp	r3, #0
 801090e:	d102      	bne.n	8010916 <f_getfree+0x104>
 8010910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010912:	3301      	adds	r3, #1
 8010914:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8010916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010918:	3302      	adds	r3, #2
 801091a:	633b      	str	r3, [r7, #48]	; 0x30
 801091c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801091e:	3b02      	subs	r3, #2
 8010920:	637b      	str	r3, [r7, #52]	; 0x34
 8010922:	e010      	b.n	8010946 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8010924:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010926:	f7fc fd55 	bl	800d3d4 <ld_dword>
 801092a:	4603      	mov	r3, r0
 801092c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010930:	2b00      	cmp	r3, #0
 8010932:	d102      	bne.n	801093a <f_getfree+0x128>
 8010934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010936:	3301      	adds	r3, #1
 8010938:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 801093a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801093c:	3304      	adds	r3, #4
 801093e:	633b      	str	r3, [r7, #48]	; 0x30
 8010940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010942:	3b04      	subs	r3, #4
 8010944:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8010946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010948:	3b01      	subs	r3, #1
 801094a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801094c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801094e:	2b00      	cmp	r3, #0
 8010950:	d1bd      	bne.n	80108ce <f_getfree+0xbc>
 8010952:	e000      	b.n	8010956 <f_getfree+0x144>
							if (res != FR_OK) break;
 8010954:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8010956:	68bb      	ldr	r3, [r7, #8]
 8010958:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801095a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 801095c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801095e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010960:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8010962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010964:	791a      	ldrb	r2, [r3, #4]
 8010966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010968:	f042 0201 	orr.w	r2, r2, #1
 801096c:	b2d2      	uxtb	r2, r2
 801096e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8010970:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8010974:	4618      	mov	r0, r3
 8010976:	3748      	adds	r7, #72	; 0x48
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}

0801097c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b088      	sub	sp, #32
 8010980:	af00      	add	r7, sp, #0
 8010982:	60f8      	str	r0, [r7, #12]
 8010984:	60b9      	str	r1, [r7, #8]
 8010986:	607a      	str	r2, [r7, #4]
	int n = 0;
 8010988:	2300      	movs	r3, #0
 801098a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8010990:	e01b      	b.n	80109ca <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8010992:	f107 0310 	add.w	r3, r7, #16
 8010996:	f107 0114 	add.w	r1, r7, #20
 801099a:	2201      	movs	r2, #1
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	f7ff fa37 	bl	800fe10 <f_read>
		if (rc != 1) break;
 80109a2:	693b      	ldr	r3, [r7, #16]
 80109a4:	2b01      	cmp	r3, #1
 80109a6:	d116      	bne.n	80109d6 <f_gets+0x5a>
		c = s[0];
 80109a8:	7d3b      	ldrb	r3, [r7, #20]
 80109aa:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80109ac:	7dfb      	ldrb	r3, [r7, #23]
 80109ae:	2b0d      	cmp	r3, #13
 80109b0:	d100      	bne.n	80109b4 <f_gets+0x38>
 80109b2:	e00a      	b.n	80109ca <f_gets+0x4e>
		*p++ = c;
 80109b4:	69bb      	ldr	r3, [r7, #24]
 80109b6:	1c5a      	adds	r2, r3, #1
 80109b8:	61ba      	str	r2, [r7, #24]
 80109ba:	7dfa      	ldrb	r2, [r7, #23]
 80109bc:	701a      	strb	r2, [r3, #0]
		n++;
 80109be:	69fb      	ldr	r3, [r7, #28]
 80109c0:	3301      	adds	r3, #1
 80109c2:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80109c4:	7dfb      	ldrb	r3, [r7, #23]
 80109c6:	2b0a      	cmp	r3, #10
 80109c8:	d007      	beq.n	80109da <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80109ca:	68bb      	ldr	r3, [r7, #8]
 80109cc:	3b01      	subs	r3, #1
 80109ce:	69fa      	ldr	r2, [r7, #28]
 80109d0:	429a      	cmp	r2, r3
 80109d2:	dbde      	blt.n	8010992 <f_gets+0x16>
 80109d4:	e002      	b.n	80109dc <f_gets+0x60>
		if (rc != 1) break;
 80109d6:	bf00      	nop
 80109d8:	e000      	b.n	80109dc <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80109da:	bf00      	nop
	}
	*p = 0;
 80109dc:	69bb      	ldr	r3, [r7, #24]
 80109de:	2200      	movs	r2, #0
 80109e0:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80109e2:	69fb      	ldr	r3, [r7, #28]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d001      	beq.n	80109ec <f_gets+0x70>
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	e000      	b.n	80109ee <f_gets+0x72>
 80109ec:	2300      	movs	r3, #0
}
 80109ee:	4618      	mov	r0, r3
 80109f0:	3720      	adds	r7, #32
 80109f2:	46bd      	mov	sp, r7
 80109f4:	bd80      	pop	{r7, pc}
	...

080109f8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80109f8:	b480      	push	{r7}
 80109fa:	b087      	sub	sp, #28
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	60f8      	str	r0, [r7, #12]
 8010a00:	60b9      	str	r1, [r7, #8]
 8010a02:	4613      	mov	r3, r2
 8010a04:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010a06:	2301      	movs	r3, #1
 8010a08:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010a0e:	4b1f      	ldr	r3, [pc, #124]	; (8010a8c <FATFS_LinkDriverEx+0x94>)
 8010a10:	7a5b      	ldrb	r3, [r3, #9]
 8010a12:	b2db      	uxtb	r3, r3
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d131      	bne.n	8010a7c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010a18:	4b1c      	ldr	r3, [pc, #112]	; (8010a8c <FATFS_LinkDriverEx+0x94>)
 8010a1a:	7a5b      	ldrb	r3, [r3, #9]
 8010a1c:	b2db      	uxtb	r3, r3
 8010a1e:	461a      	mov	r2, r3
 8010a20:	4b1a      	ldr	r3, [pc, #104]	; (8010a8c <FATFS_LinkDriverEx+0x94>)
 8010a22:	2100      	movs	r1, #0
 8010a24:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010a26:	4b19      	ldr	r3, [pc, #100]	; (8010a8c <FATFS_LinkDriverEx+0x94>)
 8010a28:	7a5b      	ldrb	r3, [r3, #9]
 8010a2a:	b2db      	uxtb	r3, r3
 8010a2c:	4a17      	ldr	r2, [pc, #92]	; (8010a8c <FATFS_LinkDriverEx+0x94>)
 8010a2e:	009b      	lsls	r3, r3, #2
 8010a30:	4413      	add	r3, r2
 8010a32:	68fa      	ldr	r2, [r7, #12]
 8010a34:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010a36:	4b15      	ldr	r3, [pc, #84]	; (8010a8c <FATFS_LinkDriverEx+0x94>)
 8010a38:	7a5b      	ldrb	r3, [r3, #9]
 8010a3a:	b2db      	uxtb	r3, r3
 8010a3c:	461a      	mov	r2, r3
 8010a3e:	4b13      	ldr	r3, [pc, #76]	; (8010a8c <FATFS_LinkDriverEx+0x94>)
 8010a40:	4413      	add	r3, r2
 8010a42:	79fa      	ldrb	r2, [r7, #7]
 8010a44:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010a46:	4b11      	ldr	r3, [pc, #68]	; (8010a8c <FATFS_LinkDriverEx+0x94>)
 8010a48:	7a5b      	ldrb	r3, [r3, #9]
 8010a4a:	b2db      	uxtb	r3, r3
 8010a4c:	1c5a      	adds	r2, r3, #1
 8010a4e:	b2d1      	uxtb	r1, r2
 8010a50:	4a0e      	ldr	r2, [pc, #56]	; (8010a8c <FATFS_LinkDriverEx+0x94>)
 8010a52:	7251      	strb	r1, [r2, #9]
 8010a54:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010a56:	7dbb      	ldrb	r3, [r7, #22]
 8010a58:	3330      	adds	r3, #48	; 0x30
 8010a5a:	b2da      	uxtb	r2, r3
 8010a5c:	68bb      	ldr	r3, [r7, #8]
 8010a5e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010a60:	68bb      	ldr	r3, [r7, #8]
 8010a62:	3301      	adds	r3, #1
 8010a64:	223a      	movs	r2, #58	; 0x3a
 8010a66:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010a68:	68bb      	ldr	r3, [r7, #8]
 8010a6a:	3302      	adds	r3, #2
 8010a6c:	222f      	movs	r2, #47	; 0x2f
 8010a6e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	3303      	adds	r3, #3
 8010a74:	2200      	movs	r2, #0
 8010a76:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010a78:	2300      	movs	r3, #0
 8010a7a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a7e:	4618      	mov	r0, r3
 8010a80:	371c      	adds	r7, #28
 8010a82:	46bd      	mov	sp, r7
 8010a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a88:	4770      	bx	lr
 8010a8a:	bf00      	nop
 8010a8c:	20002f04 	.word	0x20002f04

08010a90 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b082      	sub	sp, #8
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
 8010a98:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	6839      	ldr	r1, [r7, #0]
 8010a9e:	6878      	ldr	r0, [r7, #4]
 8010aa0:	f7ff ffaa 	bl	80109f8 <FATFS_LinkDriverEx>
 8010aa4:	4603      	mov	r3, r0
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3708      	adds	r7, #8
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}
	...

08010ab0 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8010ab0:	b480      	push	{r7}
 8010ab2:	b085      	sub	sp, #20
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
 8010ab8:	460b      	mov	r3, r1
 8010aba:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8010abc:	2300      	movs	r3, #0
 8010abe:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8010ac0:	2301      	movs	r3, #1
 8010ac2:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8010ac4:	4b15      	ldr	r3, [pc, #84]	; (8010b1c <FATFS_UnLinkDriverEx+0x6c>)
 8010ac6:	7a5b      	ldrb	r3, [r3, #9]
 8010ac8:	b2db      	uxtb	r3, r3
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d01e      	beq.n	8010b0c <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	781b      	ldrb	r3, [r3, #0]
 8010ad2:	3b30      	subs	r3, #48	; 0x30
 8010ad4:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 8010ad6:	7bbb      	ldrb	r3, [r7, #14]
 8010ad8:	4a10      	ldr	r2, [pc, #64]	; (8010b1c <FATFS_UnLinkDriverEx+0x6c>)
 8010ada:	009b      	lsls	r3, r3, #2
 8010adc:	4413      	add	r3, r2
 8010ade:	685b      	ldr	r3, [r3, #4]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d013      	beq.n	8010b0c <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8010ae4:	7bbb      	ldrb	r3, [r7, #14]
 8010ae6:	4a0d      	ldr	r2, [pc, #52]	; (8010b1c <FATFS_UnLinkDriverEx+0x6c>)
 8010ae8:	009b      	lsls	r3, r3, #2
 8010aea:	4413      	add	r3, r2
 8010aec:	2200      	movs	r2, #0
 8010aee:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8010af0:	7bbb      	ldrb	r3, [r7, #14]
 8010af2:	4a0a      	ldr	r2, [pc, #40]	; (8010b1c <FATFS_UnLinkDriverEx+0x6c>)
 8010af4:	4413      	add	r3, r2
 8010af6:	2200      	movs	r2, #0
 8010af8:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8010afa:	4b08      	ldr	r3, [pc, #32]	; (8010b1c <FATFS_UnLinkDriverEx+0x6c>)
 8010afc:	7a5b      	ldrb	r3, [r3, #9]
 8010afe:	b2db      	uxtb	r3, r3
 8010b00:	3b01      	subs	r3, #1
 8010b02:	b2da      	uxtb	r2, r3
 8010b04:	4b05      	ldr	r3, [pc, #20]	; (8010b1c <FATFS_UnLinkDriverEx+0x6c>)
 8010b06:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8010b08:	2300      	movs	r3, #0
 8010b0a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8010b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b0e:	4618      	mov	r0, r3
 8010b10:	3714      	adds	r7, #20
 8010b12:	46bd      	mov	sp, r7
 8010b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b18:	4770      	bx	lr
 8010b1a:	bf00      	nop
 8010b1c:	20002f04 	.word	0x20002f04

08010b20 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b082      	sub	sp, #8
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8010b28:	2100      	movs	r1, #0
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	f7ff ffc0 	bl	8010ab0 <FATFS_UnLinkDriverEx>
 8010b30:	4603      	mov	r3, r0
}
 8010b32:	4618      	mov	r0, r3
 8010b34:	3708      	adds	r7, #8
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}
	...

08010b3c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010b3c:	b480      	push	{r7}
 8010b3e:	b085      	sub	sp, #20
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	4603      	mov	r3, r0
 8010b44:	6039      	str	r1, [r7, #0]
 8010b46:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010b48:	88fb      	ldrh	r3, [r7, #6]
 8010b4a:	2b7f      	cmp	r3, #127	; 0x7f
 8010b4c:	d802      	bhi.n	8010b54 <ff_convert+0x18>
		c = chr;
 8010b4e:	88fb      	ldrh	r3, [r7, #6]
 8010b50:	81fb      	strh	r3, [r7, #14]
 8010b52:	e025      	b.n	8010ba0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d00b      	beq.n	8010b72 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010b5a:	88fb      	ldrh	r3, [r7, #6]
 8010b5c:	2bff      	cmp	r3, #255	; 0xff
 8010b5e:	d805      	bhi.n	8010b6c <ff_convert+0x30>
 8010b60:	88fb      	ldrh	r3, [r7, #6]
 8010b62:	3b80      	subs	r3, #128	; 0x80
 8010b64:	4a12      	ldr	r2, [pc, #72]	; (8010bb0 <ff_convert+0x74>)
 8010b66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b6a:	e000      	b.n	8010b6e <ff_convert+0x32>
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	81fb      	strh	r3, [r7, #14]
 8010b70:	e016      	b.n	8010ba0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010b72:	2300      	movs	r3, #0
 8010b74:	81fb      	strh	r3, [r7, #14]
 8010b76:	e009      	b.n	8010b8c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010b78:	89fb      	ldrh	r3, [r7, #14]
 8010b7a:	4a0d      	ldr	r2, [pc, #52]	; (8010bb0 <ff_convert+0x74>)
 8010b7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b80:	88fa      	ldrh	r2, [r7, #6]
 8010b82:	429a      	cmp	r2, r3
 8010b84:	d006      	beq.n	8010b94 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010b86:	89fb      	ldrh	r3, [r7, #14]
 8010b88:	3301      	adds	r3, #1
 8010b8a:	81fb      	strh	r3, [r7, #14]
 8010b8c:	89fb      	ldrh	r3, [r7, #14]
 8010b8e:	2b7f      	cmp	r3, #127	; 0x7f
 8010b90:	d9f2      	bls.n	8010b78 <ff_convert+0x3c>
 8010b92:	e000      	b.n	8010b96 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010b94:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010b96:	89fb      	ldrh	r3, [r7, #14]
 8010b98:	3380      	adds	r3, #128	; 0x80
 8010b9a:	b29b      	uxth	r3, r3
 8010b9c:	b2db      	uxtb	r3, r3
 8010b9e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010ba0:	89fb      	ldrh	r3, [r7, #14]
}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	3714      	adds	r7, #20
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bac:	4770      	bx	lr
 8010bae:	bf00      	nop
 8010bb0:	08011e70 	.word	0x08011e70

08010bb4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b087      	sub	sp, #28
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	4603      	mov	r3, r0
 8010bbc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010bbe:	88fb      	ldrh	r3, [r7, #6]
 8010bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010bc4:	d201      	bcs.n	8010bca <ff_wtoupper+0x16>
 8010bc6:	4b3e      	ldr	r3, [pc, #248]	; (8010cc0 <ff_wtoupper+0x10c>)
 8010bc8:	e000      	b.n	8010bcc <ff_wtoupper+0x18>
 8010bca:	4b3e      	ldr	r3, [pc, #248]	; (8010cc4 <ff_wtoupper+0x110>)
 8010bcc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	1c9a      	adds	r2, r3, #2
 8010bd2:	617a      	str	r2, [r7, #20]
 8010bd4:	881b      	ldrh	r3, [r3, #0]
 8010bd6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010bd8:	8a7b      	ldrh	r3, [r7, #18]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d068      	beq.n	8010cb0 <ff_wtoupper+0xfc>
 8010bde:	88fa      	ldrh	r2, [r7, #6]
 8010be0:	8a7b      	ldrh	r3, [r7, #18]
 8010be2:	429a      	cmp	r2, r3
 8010be4:	d364      	bcc.n	8010cb0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	1c9a      	adds	r2, r3, #2
 8010bea:	617a      	str	r2, [r7, #20]
 8010bec:	881b      	ldrh	r3, [r3, #0]
 8010bee:	823b      	strh	r3, [r7, #16]
 8010bf0:	8a3b      	ldrh	r3, [r7, #16]
 8010bf2:	0a1b      	lsrs	r3, r3, #8
 8010bf4:	81fb      	strh	r3, [r7, #14]
 8010bf6:	8a3b      	ldrh	r3, [r7, #16]
 8010bf8:	b2db      	uxtb	r3, r3
 8010bfa:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010bfc:	88fa      	ldrh	r2, [r7, #6]
 8010bfe:	8a79      	ldrh	r1, [r7, #18]
 8010c00:	8a3b      	ldrh	r3, [r7, #16]
 8010c02:	440b      	add	r3, r1
 8010c04:	429a      	cmp	r2, r3
 8010c06:	da49      	bge.n	8010c9c <ff_wtoupper+0xe8>
			switch (cmd) {
 8010c08:	89fb      	ldrh	r3, [r7, #14]
 8010c0a:	2b08      	cmp	r3, #8
 8010c0c:	d84f      	bhi.n	8010cae <ff_wtoupper+0xfa>
 8010c0e:	a201      	add	r2, pc, #4	; (adr r2, 8010c14 <ff_wtoupper+0x60>)
 8010c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c14:	08010c39 	.word	0x08010c39
 8010c18:	08010c4b 	.word	0x08010c4b
 8010c1c:	08010c61 	.word	0x08010c61
 8010c20:	08010c69 	.word	0x08010c69
 8010c24:	08010c71 	.word	0x08010c71
 8010c28:	08010c79 	.word	0x08010c79
 8010c2c:	08010c81 	.word	0x08010c81
 8010c30:	08010c89 	.word	0x08010c89
 8010c34:	08010c91 	.word	0x08010c91
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010c38:	88fa      	ldrh	r2, [r7, #6]
 8010c3a:	8a7b      	ldrh	r3, [r7, #18]
 8010c3c:	1ad3      	subs	r3, r2, r3
 8010c3e:	005b      	lsls	r3, r3, #1
 8010c40:	697a      	ldr	r2, [r7, #20]
 8010c42:	4413      	add	r3, r2
 8010c44:	881b      	ldrh	r3, [r3, #0]
 8010c46:	80fb      	strh	r3, [r7, #6]
 8010c48:	e027      	b.n	8010c9a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010c4a:	88fa      	ldrh	r2, [r7, #6]
 8010c4c:	8a7b      	ldrh	r3, [r7, #18]
 8010c4e:	1ad3      	subs	r3, r2, r3
 8010c50:	b29b      	uxth	r3, r3
 8010c52:	f003 0301 	and.w	r3, r3, #1
 8010c56:	b29b      	uxth	r3, r3
 8010c58:	88fa      	ldrh	r2, [r7, #6]
 8010c5a:	1ad3      	subs	r3, r2, r3
 8010c5c:	80fb      	strh	r3, [r7, #6]
 8010c5e:	e01c      	b.n	8010c9a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010c60:	88fb      	ldrh	r3, [r7, #6]
 8010c62:	3b10      	subs	r3, #16
 8010c64:	80fb      	strh	r3, [r7, #6]
 8010c66:	e018      	b.n	8010c9a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010c68:	88fb      	ldrh	r3, [r7, #6]
 8010c6a:	3b20      	subs	r3, #32
 8010c6c:	80fb      	strh	r3, [r7, #6]
 8010c6e:	e014      	b.n	8010c9a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010c70:	88fb      	ldrh	r3, [r7, #6]
 8010c72:	3b30      	subs	r3, #48	; 0x30
 8010c74:	80fb      	strh	r3, [r7, #6]
 8010c76:	e010      	b.n	8010c9a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010c78:	88fb      	ldrh	r3, [r7, #6]
 8010c7a:	3b1a      	subs	r3, #26
 8010c7c:	80fb      	strh	r3, [r7, #6]
 8010c7e:	e00c      	b.n	8010c9a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010c80:	88fb      	ldrh	r3, [r7, #6]
 8010c82:	3308      	adds	r3, #8
 8010c84:	80fb      	strh	r3, [r7, #6]
 8010c86:	e008      	b.n	8010c9a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010c88:	88fb      	ldrh	r3, [r7, #6]
 8010c8a:	3b50      	subs	r3, #80	; 0x50
 8010c8c:	80fb      	strh	r3, [r7, #6]
 8010c8e:	e004      	b.n	8010c9a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010c90:	88fb      	ldrh	r3, [r7, #6]
 8010c92:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010c96:	80fb      	strh	r3, [r7, #6]
 8010c98:	bf00      	nop
			}
			break;
 8010c9a:	e008      	b.n	8010cae <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010c9c:	89fb      	ldrh	r3, [r7, #14]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d195      	bne.n	8010bce <ff_wtoupper+0x1a>
 8010ca2:	8a3b      	ldrh	r3, [r7, #16]
 8010ca4:	005b      	lsls	r3, r3, #1
 8010ca6:	697a      	ldr	r2, [r7, #20]
 8010ca8:	4413      	add	r3, r2
 8010caa:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010cac:	e78f      	b.n	8010bce <ff_wtoupper+0x1a>
			break;
 8010cae:	bf00      	nop
	}

	return chr;
 8010cb0:	88fb      	ldrh	r3, [r7, #6]
}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	371c      	adds	r7, #28
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cbc:	4770      	bx	lr
 8010cbe:	bf00      	nop
 8010cc0:	08011f70 	.word	0x08011f70
 8010cc4:	08012164 	.word	0x08012164

08010cc8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010ccc:	2201      	movs	r2, #1
 8010cce:	490e      	ldr	r1, [pc, #56]	; (8010d08 <MX_USB_HOST_Init+0x40>)
 8010cd0:	480e      	ldr	r0, [pc, #56]	; (8010d0c <MX_USB_HOST_Init+0x44>)
 8010cd2:	f7fa fe77 	bl	800b9c4 <USBH_Init>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d001      	beq.n	8010ce0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010cdc:	f7f2 fb8f 	bl	80033fe <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8010ce0:	490b      	ldr	r1, [pc, #44]	; (8010d10 <MX_USB_HOST_Init+0x48>)
 8010ce2:	480a      	ldr	r0, [pc, #40]	; (8010d0c <MX_USB_HOST_Init+0x44>)
 8010ce4:	f7fa fefc 	bl	800bae0 <USBH_RegisterClass>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d001      	beq.n	8010cf2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010cee:	f7f2 fb86 	bl	80033fe <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010cf2:	4806      	ldr	r0, [pc, #24]	; (8010d0c <MX_USB_HOST_Init+0x44>)
 8010cf4:	f7fa ff80 	bl	800bbf8 <USBH_Start>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d001      	beq.n	8010d02 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010cfe:	f7f2 fb7e 	bl	80033fe <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010d02:	bf00      	nop
 8010d04:	bd80      	pop	{r7, pc}
 8010d06:	bf00      	nop
 8010d08:	08010d29 	.word	0x08010d29
 8010d0c:	20002f10 	.word	0x20002f10
 8010d10:	20000044 	.word	0x20000044

08010d14 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8010d18:	4802      	ldr	r0, [pc, #8]	; (8010d24 <MX_USB_HOST_Process+0x10>)
 8010d1a:	f7fa ff7d 	bl	800bc18 <USBH_Process>
}
 8010d1e:	bf00      	nop
 8010d20:	bd80      	pop	{r7, pc}
 8010d22:	bf00      	nop
 8010d24:	20002f10 	.word	0x20002f10

08010d28 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010d28:	b480      	push	{r7}
 8010d2a:	b083      	sub	sp, #12
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
 8010d30:	460b      	mov	r3, r1
 8010d32:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010d34:	78fb      	ldrb	r3, [r7, #3]
 8010d36:	3b01      	subs	r3, #1
 8010d38:	2b04      	cmp	r3, #4
 8010d3a:	d819      	bhi.n	8010d70 <USBH_UserProcess+0x48>
 8010d3c:	a201      	add	r2, pc, #4	; (adr r2, 8010d44 <USBH_UserProcess+0x1c>)
 8010d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d42:	bf00      	nop
 8010d44:	08010d71 	.word	0x08010d71
 8010d48:	08010d61 	.word	0x08010d61
 8010d4c:	08010d71 	.word	0x08010d71
 8010d50:	08010d69 	.word	0x08010d69
 8010d54:	08010d59 	.word	0x08010d59
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010d58:	4b09      	ldr	r3, [pc, #36]	; (8010d80 <USBH_UserProcess+0x58>)
 8010d5a:	2203      	movs	r2, #3
 8010d5c:	701a      	strb	r2, [r3, #0]
  break;
 8010d5e:	e008      	b.n	8010d72 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010d60:	4b07      	ldr	r3, [pc, #28]	; (8010d80 <USBH_UserProcess+0x58>)
 8010d62:	2202      	movs	r2, #2
 8010d64:	701a      	strb	r2, [r3, #0]
  break;
 8010d66:	e004      	b.n	8010d72 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010d68:	4b05      	ldr	r3, [pc, #20]	; (8010d80 <USBH_UserProcess+0x58>)
 8010d6a:	2201      	movs	r2, #1
 8010d6c:	701a      	strb	r2, [r3, #0]
  break;
 8010d6e:	e000      	b.n	8010d72 <USBH_UserProcess+0x4a>

  default:
  break;
 8010d70:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010d72:	bf00      	nop
 8010d74:	370c      	adds	r7, #12
 8010d76:	46bd      	mov	sp, r7
 8010d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7c:	4770      	bx	lr
 8010d7e:	bf00      	nop
 8010d80:	200032e8 	.word	0x200032e8

08010d84 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b08a      	sub	sp, #40	; 0x28
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010d8c:	f107 0314 	add.w	r3, r7, #20
 8010d90:	2200      	movs	r2, #0
 8010d92:	601a      	str	r2, [r3, #0]
 8010d94:	605a      	str	r2, [r3, #4]
 8010d96:	609a      	str	r2, [r3, #8]
 8010d98:	60da      	str	r2, [r3, #12]
 8010d9a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010da4:	d147      	bne.n	8010e36 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010da6:	2300      	movs	r3, #0
 8010da8:	613b      	str	r3, [r7, #16]
 8010daa:	4b25      	ldr	r3, [pc, #148]	; (8010e40 <HAL_HCD_MspInit+0xbc>)
 8010dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dae:	4a24      	ldr	r2, [pc, #144]	; (8010e40 <HAL_HCD_MspInit+0xbc>)
 8010db0:	f043 0301 	orr.w	r3, r3, #1
 8010db4:	6313      	str	r3, [r2, #48]	; 0x30
 8010db6:	4b22      	ldr	r3, [pc, #136]	; (8010e40 <HAL_HCD_MspInit+0xbc>)
 8010db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dba:	f003 0301 	and.w	r3, r3, #1
 8010dbe:	613b      	str	r3, [r7, #16]
 8010dc0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8010dc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010dc8:	2300      	movs	r3, #0
 8010dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010dcc:	2300      	movs	r3, #0
 8010dce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8010dd0:	f107 0314 	add.w	r3, r7, #20
 8010dd4:	4619      	mov	r1, r3
 8010dd6:	481b      	ldr	r0, [pc, #108]	; (8010e44 <HAL_HCD_MspInit+0xc0>)
 8010dd8:	f7f4 f9f8 	bl	80051cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8010ddc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8010de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010de2:	2302      	movs	r3, #2
 8010de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010de6:	2300      	movs	r3, #0
 8010de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010dea:	2300      	movs	r3, #0
 8010dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010dee:	230a      	movs	r3, #10
 8010df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010df2:	f107 0314 	add.w	r3, r7, #20
 8010df6:	4619      	mov	r1, r3
 8010df8:	4812      	ldr	r0, [pc, #72]	; (8010e44 <HAL_HCD_MspInit+0xc0>)
 8010dfa:	f7f4 f9e7 	bl	80051cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010dfe:	4b10      	ldr	r3, [pc, #64]	; (8010e40 <HAL_HCD_MspInit+0xbc>)
 8010e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e02:	4a0f      	ldr	r2, [pc, #60]	; (8010e40 <HAL_HCD_MspInit+0xbc>)
 8010e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e08:	6353      	str	r3, [r2, #52]	; 0x34
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	60fb      	str	r3, [r7, #12]
 8010e0e:	4b0c      	ldr	r3, [pc, #48]	; (8010e40 <HAL_HCD_MspInit+0xbc>)
 8010e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e12:	4a0b      	ldr	r2, [pc, #44]	; (8010e40 <HAL_HCD_MspInit+0xbc>)
 8010e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010e18:	6453      	str	r3, [r2, #68]	; 0x44
 8010e1a:	4b09      	ldr	r3, [pc, #36]	; (8010e40 <HAL_HCD_MspInit+0xbc>)
 8010e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010e22:	60fb      	str	r3, [r7, #12]
 8010e24:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010e26:	2200      	movs	r2, #0
 8010e28:	2100      	movs	r1, #0
 8010e2a:	2043      	movs	r0, #67	; 0x43
 8010e2c:	f7f3 fd95 	bl	800495a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010e30:	2043      	movs	r0, #67	; 0x43
 8010e32:	f7f3 fdae 	bl	8004992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010e36:	bf00      	nop
 8010e38:	3728      	adds	r7, #40	; 0x28
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	bd80      	pop	{r7, pc}
 8010e3e:	bf00      	nop
 8010e40:	40023800 	.word	0x40023800
 8010e44:	40020000 	.word	0x40020000

08010e48 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b082      	sub	sp, #8
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010e56:	4618      	mov	r0, r3
 8010e58:	f7fb fabd 	bl	800c3d6 <USBH_LL_IncTimer>
}
 8010e5c:	bf00      	nop
 8010e5e:	3708      	adds	r7, #8
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}

08010e64 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b082      	sub	sp, #8
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010e72:	4618      	mov	r0, r3
 8010e74:	f7fb faf5 	bl	800c462 <USBH_LL_Connect>
}
 8010e78:	bf00      	nop
 8010e7a:	3708      	adds	r7, #8
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bd80      	pop	{r7, pc}

08010e80 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b082      	sub	sp, #8
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f7fb fafe 	bl	800c490 <USBH_LL_Disconnect>
}
 8010e94:	bf00      	nop
 8010e96:	3708      	adds	r7, #8
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	bd80      	pop	{r7, pc}

08010e9c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010e9c:	b480      	push	{r7}
 8010e9e:	b083      	sub	sp, #12
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
 8010ea4:	460b      	mov	r3, r1
 8010ea6:	70fb      	strb	r3, [r7, #3]
 8010ea8:	4613      	mov	r3, r2
 8010eaa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8010eac:	bf00      	nop
 8010eae:	370c      	adds	r7, #12
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb6:	4770      	bx	lr

08010eb8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b082      	sub	sp, #8
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f7fb faaf 	bl	800c42a <USBH_LL_PortEnabled>
}
 8010ecc:	bf00      	nop
 8010ece:	3708      	adds	r7, #8
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}

08010ed4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b082      	sub	sp, #8
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f7fb faaf 	bl	800c446 <USBH_LL_PortDisabled>
}
 8010ee8:	bf00      	nop
 8010eea:	3708      	adds	r7, #8
 8010eec:	46bd      	mov	sp, r7
 8010eee:	bd80      	pop	{r7, pc}

08010ef0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b082      	sub	sp, #8
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010efe:	2b01      	cmp	r3, #1
 8010f00:	d12a      	bne.n	8010f58 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010f02:	4a18      	ldr	r2, [pc, #96]	; (8010f64 <USBH_LL_Init+0x74>)
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	4a15      	ldr	r2, [pc, #84]	; (8010f64 <USBH_LL_Init+0x74>)
 8010f0e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010f12:	4b14      	ldr	r3, [pc, #80]	; (8010f64 <USBH_LL_Init+0x74>)
 8010f14:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010f18:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010f1a:	4b12      	ldr	r3, [pc, #72]	; (8010f64 <USBH_LL_Init+0x74>)
 8010f1c:	2208      	movs	r2, #8
 8010f1e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010f20:	4b10      	ldr	r3, [pc, #64]	; (8010f64 <USBH_LL_Init+0x74>)
 8010f22:	2201      	movs	r2, #1
 8010f24:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010f26:	4b0f      	ldr	r3, [pc, #60]	; (8010f64 <USBH_LL_Init+0x74>)
 8010f28:	2200      	movs	r2, #0
 8010f2a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010f2c:	4b0d      	ldr	r3, [pc, #52]	; (8010f64 <USBH_LL_Init+0x74>)
 8010f2e:	2202      	movs	r2, #2
 8010f30:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010f32:	4b0c      	ldr	r3, [pc, #48]	; (8010f64 <USBH_LL_Init+0x74>)
 8010f34:	2200      	movs	r2, #0
 8010f36:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010f38:	480a      	ldr	r0, [pc, #40]	; (8010f64 <USBH_LL_Init+0x74>)
 8010f3a:	f7f4 fb16 	bl	800556a <HAL_HCD_Init>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d001      	beq.n	8010f48 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010f44:	f7f2 fa5b 	bl	80033fe <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010f48:	4806      	ldr	r0, [pc, #24]	; (8010f64 <USBH_LL_Init+0x74>)
 8010f4a:	f7f4 fefa 	bl	8005d42 <HAL_HCD_GetCurrentFrame>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	4619      	mov	r1, r3
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f7fb fa30 	bl	800c3b8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010f58:	2300      	movs	r3, #0
}
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	3708      	adds	r7, #8
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	bd80      	pop	{r7, pc}
 8010f62:	bf00      	nop
 8010f64:	200032ec 	.word	0x200032ec

08010f68 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b084      	sub	sp, #16
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f70:	2300      	movs	r3, #0
 8010f72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010f74:	2300      	movs	r3, #0
 8010f76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010f7e:	4618      	mov	r0, r3
 8010f80:	f7f4 fe69 	bl	8005c56 <HAL_HCD_Start>
 8010f84:	4603      	mov	r3, r0
 8010f86:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010f88:	7bfb      	ldrb	r3, [r7, #15]
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f000 f95c 	bl	8011248 <USBH_Get_USB_Status>
 8010f90:	4603      	mov	r3, r0
 8010f92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f94:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f96:	4618      	mov	r0, r3
 8010f98:	3710      	adds	r7, #16
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	bd80      	pop	{r7, pc}

08010f9e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010f9e:	b580      	push	{r7, lr}
 8010fa0:	b084      	sub	sp, #16
 8010fa2:	af00      	add	r7, sp, #0
 8010fa4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010faa:	2300      	movs	r3, #0
 8010fac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	f7f4 fe71 	bl	8005c9c <HAL_HCD_Stop>
 8010fba:	4603      	mov	r3, r0
 8010fbc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010fbe:	7bfb      	ldrb	r3, [r7, #15]
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	f000 f941 	bl	8011248 <USBH_Get_USB_Status>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010fca:	7bbb      	ldrb	r3, [r7, #14]
}
 8010fcc:	4618      	mov	r0, r3
 8010fce:	3710      	adds	r7, #16
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	bd80      	pop	{r7, pc}

08010fd4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b084      	sub	sp, #16
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010fdc:	2301      	movs	r3, #1
 8010fde:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	f7f4 feb9 	bl	8005d5e <HAL_HCD_GetCurrentSpeed>
 8010fec:	4603      	mov	r3, r0
 8010fee:	2b02      	cmp	r3, #2
 8010ff0:	d00c      	beq.n	801100c <USBH_LL_GetSpeed+0x38>
 8010ff2:	2b02      	cmp	r3, #2
 8010ff4:	d80d      	bhi.n	8011012 <USBH_LL_GetSpeed+0x3e>
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d002      	beq.n	8011000 <USBH_LL_GetSpeed+0x2c>
 8010ffa:	2b01      	cmp	r3, #1
 8010ffc:	d003      	beq.n	8011006 <USBH_LL_GetSpeed+0x32>
 8010ffe:	e008      	b.n	8011012 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011000:	2300      	movs	r3, #0
 8011002:	73fb      	strb	r3, [r7, #15]
    break;
 8011004:	e008      	b.n	8011018 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8011006:	2301      	movs	r3, #1
 8011008:	73fb      	strb	r3, [r7, #15]
    break;
 801100a:	e005      	b.n	8011018 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801100c:	2302      	movs	r3, #2
 801100e:	73fb      	strb	r3, [r7, #15]
    break;
 8011010:	e002      	b.n	8011018 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8011012:	2301      	movs	r3, #1
 8011014:	73fb      	strb	r3, [r7, #15]
    break;
 8011016:	bf00      	nop
  }
  return  speed;
 8011018:	7bfb      	ldrb	r3, [r7, #15]
}
 801101a:	4618      	mov	r0, r3
 801101c:	3710      	adds	r7, #16
 801101e:	46bd      	mov	sp, r7
 8011020:	bd80      	pop	{r7, pc}

08011022 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8011022:	b580      	push	{r7, lr}
 8011024:	b084      	sub	sp, #16
 8011026:	af00      	add	r7, sp, #0
 8011028:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801102a:	2300      	movs	r3, #0
 801102c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801102e:	2300      	movs	r3, #0
 8011030:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011038:	4618      	mov	r0, r3
 801103a:	f7f4 fe4c 	bl	8005cd6 <HAL_HCD_ResetPort>
 801103e:	4603      	mov	r3, r0
 8011040:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011042:	7bfb      	ldrb	r3, [r7, #15]
 8011044:	4618      	mov	r0, r3
 8011046:	f000 f8ff 	bl	8011248 <USBH_Get_USB_Status>
 801104a:	4603      	mov	r3, r0
 801104c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801104e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011050:	4618      	mov	r0, r3
 8011052:	3710      	adds	r7, #16
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}

08011058 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b082      	sub	sp, #8
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
 8011060:	460b      	mov	r3, r1
 8011062:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801106a:	78fa      	ldrb	r2, [r7, #3]
 801106c:	4611      	mov	r1, r2
 801106e:	4618      	mov	r0, r3
 8011070:	f7f4 fe53 	bl	8005d1a <HAL_HCD_HC_GetXferCount>
 8011074:	4603      	mov	r3, r0
}
 8011076:	4618      	mov	r0, r3
 8011078:	3708      	adds	r7, #8
 801107a:	46bd      	mov	sp, r7
 801107c:	bd80      	pop	{r7, pc}

0801107e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801107e:	b590      	push	{r4, r7, lr}
 8011080:	b089      	sub	sp, #36	; 0x24
 8011082:	af04      	add	r7, sp, #16
 8011084:	6078      	str	r0, [r7, #4]
 8011086:	4608      	mov	r0, r1
 8011088:	4611      	mov	r1, r2
 801108a:	461a      	mov	r2, r3
 801108c:	4603      	mov	r3, r0
 801108e:	70fb      	strb	r3, [r7, #3]
 8011090:	460b      	mov	r3, r1
 8011092:	70bb      	strb	r3, [r7, #2]
 8011094:	4613      	mov	r3, r2
 8011096:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011098:	2300      	movs	r3, #0
 801109a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801109c:	2300      	movs	r3, #0
 801109e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80110a6:	787c      	ldrb	r4, [r7, #1]
 80110a8:	78ba      	ldrb	r2, [r7, #2]
 80110aa:	78f9      	ldrb	r1, [r7, #3]
 80110ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80110ae:	9302      	str	r3, [sp, #8]
 80110b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80110b4:	9301      	str	r3, [sp, #4]
 80110b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80110ba:	9300      	str	r3, [sp, #0]
 80110bc:	4623      	mov	r3, r4
 80110be:	f7f4 fab6 	bl	800562e <HAL_HCD_HC_Init>
 80110c2:	4603      	mov	r3, r0
 80110c4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80110c6:	7bfb      	ldrb	r3, [r7, #15]
 80110c8:	4618      	mov	r0, r3
 80110ca:	f000 f8bd 	bl	8011248 <USBH_Get_USB_Status>
 80110ce:	4603      	mov	r3, r0
 80110d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80110d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80110d4:	4618      	mov	r0, r3
 80110d6:	3714      	adds	r7, #20
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd90      	pop	{r4, r7, pc}

080110dc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b084      	sub	sp, #16
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
 80110e4:	460b      	mov	r3, r1
 80110e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110e8:	2300      	movs	r3, #0
 80110ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80110ec:	2300      	movs	r3, #0
 80110ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80110f6:	78fa      	ldrb	r2, [r7, #3]
 80110f8:	4611      	mov	r1, r2
 80110fa:	4618      	mov	r0, r3
 80110fc:	f7f4 fb26 	bl	800574c <HAL_HCD_HC_Halt>
 8011100:	4603      	mov	r3, r0
 8011102:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011104:	7bfb      	ldrb	r3, [r7, #15]
 8011106:	4618      	mov	r0, r3
 8011108:	f000 f89e 	bl	8011248 <USBH_Get_USB_Status>
 801110c:	4603      	mov	r3, r0
 801110e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011110:	7bbb      	ldrb	r3, [r7, #14]
}
 8011112:	4618      	mov	r0, r3
 8011114:	3710      	adds	r7, #16
 8011116:	46bd      	mov	sp, r7
 8011118:	bd80      	pop	{r7, pc}

0801111a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801111a:	b590      	push	{r4, r7, lr}
 801111c:	b089      	sub	sp, #36	; 0x24
 801111e:	af04      	add	r7, sp, #16
 8011120:	6078      	str	r0, [r7, #4]
 8011122:	4608      	mov	r0, r1
 8011124:	4611      	mov	r1, r2
 8011126:	461a      	mov	r2, r3
 8011128:	4603      	mov	r3, r0
 801112a:	70fb      	strb	r3, [r7, #3]
 801112c:	460b      	mov	r3, r1
 801112e:	70bb      	strb	r3, [r7, #2]
 8011130:	4613      	mov	r3, r2
 8011132:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011134:	2300      	movs	r3, #0
 8011136:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011138:	2300      	movs	r3, #0
 801113a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011142:	787c      	ldrb	r4, [r7, #1]
 8011144:	78ba      	ldrb	r2, [r7, #2]
 8011146:	78f9      	ldrb	r1, [r7, #3]
 8011148:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801114c:	9303      	str	r3, [sp, #12]
 801114e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011150:	9302      	str	r3, [sp, #8]
 8011152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011154:	9301      	str	r3, [sp, #4]
 8011156:	f897 3020 	ldrb.w	r3, [r7, #32]
 801115a:	9300      	str	r3, [sp, #0]
 801115c:	4623      	mov	r3, r4
 801115e:	f7f4 fb19 	bl	8005794 <HAL_HCD_HC_SubmitRequest>
 8011162:	4603      	mov	r3, r0
 8011164:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8011166:	7bfb      	ldrb	r3, [r7, #15]
 8011168:	4618      	mov	r0, r3
 801116a:	f000 f86d 	bl	8011248 <USBH_Get_USB_Status>
 801116e:	4603      	mov	r3, r0
 8011170:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011172:	7bbb      	ldrb	r3, [r7, #14]
}
 8011174:	4618      	mov	r0, r3
 8011176:	3714      	adds	r7, #20
 8011178:	46bd      	mov	sp, r7
 801117a:	bd90      	pop	{r4, r7, pc}

0801117c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b082      	sub	sp, #8
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	460b      	mov	r3, r1
 8011186:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801118e:	78fa      	ldrb	r2, [r7, #3]
 8011190:	4611      	mov	r1, r2
 8011192:	4618      	mov	r0, r3
 8011194:	f7f4 fdad 	bl	8005cf2 <HAL_HCD_HC_GetURBState>
 8011198:	4603      	mov	r3, r0
}
 801119a:	4618      	mov	r0, r3
 801119c:	3708      	adds	r7, #8
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}

080111a2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80111a2:	b580      	push	{r7, lr}
 80111a4:	b082      	sub	sp, #8
 80111a6:	af00      	add	r7, sp, #0
 80111a8:	6078      	str	r0, [r7, #4]
 80111aa:	460b      	mov	r3, r1
 80111ac:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80111b4:	2b01      	cmp	r3, #1
 80111b6:	d103      	bne.n	80111c0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80111b8:	78fb      	ldrb	r3, [r7, #3]
 80111ba:	4618      	mov	r0, r3
 80111bc:	f000 f870 	bl	80112a0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80111c0:	20c8      	movs	r0, #200	; 0xc8
 80111c2:	f7f3 facb 	bl	800475c <HAL_Delay>
  return USBH_OK;
 80111c6:	2300      	movs	r3, #0
}
 80111c8:	4618      	mov	r0, r3
 80111ca:	3708      	adds	r7, #8
 80111cc:	46bd      	mov	sp, r7
 80111ce:	bd80      	pop	{r7, pc}

080111d0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80111d0:	b480      	push	{r7}
 80111d2:	b085      	sub	sp, #20
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
 80111d8:	460b      	mov	r3, r1
 80111da:	70fb      	strb	r3, [r7, #3]
 80111dc:	4613      	mov	r3, r2
 80111de:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80111e6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80111e8:	78fb      	ldrb	r3, [r7, #3]
 80111ea:	68fa      	ldr	r2, [r7, #12]
 80111ec:	212c      	movs	r1, #44	; 0x2c
 80111ee:	fb01 f303 	mul.w	r3, r1, r3
 80111f2:	4413      	add	r3, r2
 80111f4:	333b      	adds	r3, #59	; 0x3b
 80111f6:	781b      	ldrb	r3, [r3, #0]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d009      	beq.n	8011210 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80111fc:	78fb      	ldrb	r3, [r7, #3]
 80111fe:	68fa      	ldr	r2, [r7, #12]
 8011200:	212c      	movs	r1, #44	; 0x2c
 8011202:	fb01 f303 	mul.w	r3, r1, r3
 8011206:	4413      	add	r3, r2
 8011208:	3354      	adds	r3, #84	; 0x54
 801120a:	78ba      	ldrb	r2, [r7, #2]
 801120c:	701a      	strb	r2, [r3, #0]
 801120e:	e008      	b.n	8011222 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8011210:	78fb      	ldrb	r3, [r7, #3]
 8011212:	68fa      	ldr	r2, [r7, #12]
 8011214:	212c      	movs	r1, #44	; 0x2c
 8011216:	fb01 f303 	mul.w	r3, r1, r3
 801121a:	4413      	add	r3, r2
 801121c:	3355      	adds	r3, #85	; 0x55
 801121e:	78ba      	ldrb	r2, [r7, #2]
 8011220:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8011222:	2300      	movs	r3, #0
}
 8011224:	4618      	mov	r0, r3
 8011226:	3714      	adds	r7, #20
 8011228:	46bd      	mov	sp, r7
 801122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122e:	4770      	bx	lr

08011230 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b082      	sub	sp, #8
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8011238:	6878      	ldr	r0, [r7, #4]
 801123a:	f7f3 fa8f 	bl	800475c <HAL_Delay>
}
 801123e:	bf00      	nop
 8011240:	3708      	adds	r7, #8
 8011242:	46bd      	mov	sp, r7
 8011244:	bd80      	pop	{r7, pc}
	...

08011248 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011248:	b480      	push	{r7}
 801124a:	b085      	sub	sp, #20
 801124c:	af00      	add	r7, sp, #0
 801124e:	4603      	mov	r3, r0
 8011250:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011252:	2300      	movs	r3, #0
 8011254:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011256:	79fb      	ldrb	r3, [r7, #7]
 8011258:	2b03      	cmp	r3, #3
 801125a:	d817      	bhi.n	801128c <USBH_Get_USB_Status+0x44>
 801125c:	a201      	add	r2, pc, #4	; (adr r2, 8011264 <USBH_Get_USB_Status+0x1c>)
 801125e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011262:	bf00      	nop
 8011264:	08011275 	.word	0x08011275
 8011268:	0801127b 	.word	0x0801127b
 801126c:	08011281 	.word	0x08011281
 8011270:	08011287 	.word	0x08011287
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011274:	2300      	movs	r3, #0
 8011276:	73fb      	strb	r3, [r7, #15]
    break;
 8011278:	e00b      	b.n	8011292 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801127a:	2302      	movs	r3, #2
 801127c:	73fb      	strb	r3, [r7, #15]
    break;
 801127e:	e008      	b.n	8011292 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011280:	2301      	movs	r3, #1
 8011282:	73fb      	strb	r3, [r7, #15]
    break;
 8011284:	e005      	b.n	8011292 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011286:	2302      	movs	r3, #2
 8011288:	73fb      	strb	r3, [r7, #15]
    break;
 801128a:	e002      	b.n	8011292 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801128c:	2302      	movs	r3, #2
 801128e:	73fb      	strb	r3, [r7, #15]
    break;
 8011290:	bf00      	nop
  }
  return usb_status;
 8011292:	7bfb      	ldrb	r3, [r7, #15]
}
 8011294:	4618      	mov	r0, r3
 8011296:	3714      	adds	r7, #20
 8011298:	46bd      	mov	sp, r7
 801129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129e:	4770      	bx	lr

080112a0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b084      	sub	sp, #16
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	4603      	mov	r3, r0
 80112a8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80112aa:	79fb      	ldrb	r3, [r7, #7]
 80112ac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80112ae:	79fb      	ldrb	r3, [r7, #7]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d102      	bne.n	80112ba <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80112b4:	2300      	movs	r3, #0
 80112b6:	73fb      	strb	r3, [r7, #15]
 80112b8:	e001      	b.n	80112be <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80112ba:	2301      	movs	r3, #1
 80112bc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80112be:	7bfb      	ldrb	r3, [r7, #15]
 80112c0:	461a      	mov	r2, r3
 80112c2:	2101      	movs	r1, #1
 80112c4:	4803      	ldr	r0, [pc, #12]	; (80112d4 <MX_DriverVbusFS+0x34>)
 80112c6:	f7f4 f91d 	bl	8005504 <HAL_GPIO_WritePin>
}
 80112ca:	bf00      	nop
 80112cc:	3710      	adds	r7, #16
 80112ce:	46bd      	mov	sp, r7
 80112d0:	bd80      	pop	{r7, pc}
 80112d2:	bf00      	nop
 80112d4:	40020800 	.word	0x40020800

080112d8 <__errno>:
 80112d8:	4b01      	ldr	r3, [pc, #4]	; (80112e0 <__errno+0x8>)
 80112da:	6818      	ldr	r0, [r3, #0]
 80112dc:	4770      	bx	lr
 80112de:	bf00      	nop
 80112e0:	20000064 	.word	0x20000064

080112e4 <__libc_init_array>:
 80112e4:	b570      	push	{r4, r5, r6, lr}
 80112e6:	4d0d      	ldr	r5, [pc, #52]	; (801131c <__libc_init_array+0x38>)
 80112e8:	4c0d      	ldr	r4, [pc, #52]	; (8011320 <__libc_init_array+0x3c>)
 80112ea:	1b64      	subs	r4, r4, r5
 80112ec:	10a4      	asrs	r4, r4, #2
 80112ee:	2600      	movs	r6, #0
 80112f0:	42a6      	cmp	r6, r4
 80112f2:	d109      	bne.n	8011308 <__libc_init_array+0x24>
 80112f4:	4d0b      	ldr	r5, [pc, #44]	; (8011324 <__libc_init_array+0x40>)
 80112f6:	4c0c      	ldr	r4, [pc, #48]	; (8011328 <__libc_init_array+0x44>)
 80112f8:	f000 fcae 	bl	8011c58 <_init>
 80112fc:	1b64      	subs	r4, r4, r5
 80112fe:	10a4      	asrs	r4, r4, #2
 8011300:	2600      	movs	r6, #0
 8011302:	42a6      	cmp	r6, r4
 8011304:	d105      	bne.n	8011312 <__libc_init_array+0x2e>
 8011306:	bd70      	pop	{r4, r5, r6, pc}
 8011308:	f855 3b04 	ldr.w	r3, [r5], #4
 801130c:	4798      	blx	r3
 801130e:	3601      	adds	r6, #1
 8011310:	e7ee      	b.n	80112f0 <__libc_init_array+0xc>
 8011312:	f855 3b04 	ldr.w	r3, [r5], #4
 8011316:	4798      	blx	r3
 8011318:	3601      	adds	r6, #1
 801131a:	e7f2      	b.n	8011302 <__libc_init_array+0x1e>
 801131c:	0801225c 	.word	0x0801225c
 8011320:	0801225c 	.word	0x0801225c
 8011324:	0801225c 	.word	0x0801225c
 8011328:	08012260 	.word	0x08012260

0801132c <malloc>:
 801132c:	4b02      	ldr	r3, [pc, #8]	; (8011338 <malloc+0xc>)
 801132e:	4601      	mov	r1, r0
 8011330:	6818      	ldr	r0, [r3, #0]
 8011332:	f000 b87f 	b.w	8011434 <_malloc_r>
 8011336:	bf00      	nop
 8011338:	20000064 	.word	0x20000064

0801133c <free>:
 801133c:	4b02      	ldr	r3, [pc, #8]	; (8011348 <free+0xc>)
 801133e:	4601      	mov	r1, r0
 8011340:	6818      	ldr	r0, [r3, #0]
 8011342:	f000 b80b 	b.w	801135c <_free_r>
 8011346:	bf00      	nop
 8011348:	20000064 	.word	0x20000064

0801134c <memset>:
 801134c:	4402      	add	r2, r0
 801134e:	4603      	mov	r3, r0
 8011350:	4293      	cmp	r3, r2
 8011352:	d100      	bne.n	8011356 <memset+0xa>
 8011354:	4770      	bx	lr
 8011356:	f803 1b01 	strb.w	r1, [r3], #1
 801135a:	e7f9      	b.n	8011350 <memset+0x4>

0801135c <_free_r>:
 801135c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801135e:	2900      	cmp	r1, #0
 8011360:	d044      	beq.n	80113ec <_free_r+0x90>
 8011362:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011366:	9001      	str	r0, [sp, #4]
 8011368:	2b00      	cmp	r3, #0
 801136a:	f1a1 0404 	sub.w	r4, r1, #4
 801136e:	bfb8      	it	lt
 8011370:	18e4      	addlt	r4, r4, r3
 8011372:	f000 f913 	bl	801159c <__malloc_lock>
 8011376:	4a1e      	ldr	r2, [pc, #120]	; (80113f0 <_free_r+0x94>)
 8011378:	9801      	ldr	r0, [sp, #4]
 801137a:	6813      	ldr	r3, [r2, #0]
 801137c:	b933      	cbnz	r3, 801138c <_free_r+0x30>
 801137e:	6063      	str	r3, [r4, #4]
 8011380:	6014      	str	r4, [r2, #0]
 8011382:	b003      	add	sp, #12
 8011384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011388:	f000 b90e 	b.w	80115a8 <__malloc_unlock>
 801138c:	42a3      	cmp	r3, r4
 801138e:	d908      	bls.n	80113a2 <_free_r+0x46>
 8011390:	6825      	ldr	r5, [r4, #0]
 8011392:	1961      	adds	r1, r4, r5
 8011394:	428b      	cmp	r3, r1
 8011396:	bf01      	itttt	eq
 8011398:	6819      	ldreq	r1, [r3, #0]
 801139a:	685b      	ldreq	r3, [r3, #4]
 801139c:	1949      	addeq	r1, r1, r5
 801139e:	6021      	streq	r1, [r4, #0]
 80113a0:	e7ed      	b.n	801137e <_free_r+0x22>
 80113a2:	461a      	mov	r2, r3
 80113a4:	685b      	ldr	r3, [r3, #4]
 80113a6:	b10b      	cbz	r3, 80113ac <_free_r+0x50>
 80113a8:	42a3      	cmp	r3, r4
 80113aa:	d9fa      	bls.n	80113a2 <_free_r+0x46>
 80113ac:	6811      	ldr	r1, [r2, #0]
 80113ae:	1855      	adds	r5, r2, r1
 80113b0:	42a5      	cmp	r5, r4
 80113b2:	d10b      	bne.n	80113cc <_free_r+0x70>
 80113b4:	6824      	ldr	r4, [r4, #0]
 80113b6:	4421      	add	r1, r4
 80113b8:	1854      	adds	r4, r2, r1
 80113ba:	42a3      	cmp	r3, r4
 80113bc:	6011      	str	r1, [r2, #0]
 80113be:	d1e0      	bne.n	8011382 <_free_r+0x26>
 80113c0:	681c      	ldr	r4, [r3, #0]
 80113c2:	685b      	ldr	r3, [r3, #4]
 80113c4:	6053      	str	r3, [r2, #4]
 80113c6:	4421      	add	r1, r4
 80113c8:	6011      	str	r1, [r2, #0]
 80113ca:	e7da      	b.n	8011382 <_free_r+0x26>
 80113cc:	d902      	bls.n	80113d4 <_free_r+0x78>
 80113ce:	230c      	movs	r3, #12
 80113d0:	6003      	str	r3, [r0, #0]
 80113d2:	e7d6      	b.n	8011382 <_free_r+0x26>
 80113d4:	6825      	ldr	r5, [r4, #0]
 80113d6:	1961      	adds	r1, r4, r5
 80113d8:	428b      	cmp	r3, r1
 80113da:	bf04      	itt	eq
 80113dc:	6819      	ldreq	r1, [r3, #0]
 80113de:	685b      	ldreq	r3, [r3, #4]
 80113e0:	6063      	str	r3, [r4, #4]
 80113e2:	bf04      	itt	eq
 80113e4:	1949      	addeq	r1, r1, r5
 80113e6:	6021      	streq	r1, [r4, #0]
 80113e8:	6054      	str	r4, [r2, #4]
 80113ea:	e7ca      	b.n	8011382 <_free_r+0x26>
 80113ec:	b003      	add	sp, #12
 80113ee:	bd30      	pop	{r4, r5, pc}
 80113f0:	200035f0 	.word	0x200035f0

080113f4 <sbrk_aligned>:
 80113f4:	b570      	push	{r4, r5, r6, lr}
 80113f6:	4e0e      	ldr	r6, [pc, #56]	; (8011430 <sbrk_aligned+0x3c>)
 80113f8:	460c      	mov	r4, r1
 80113fa:	6831      	ldr	r1, [r6, #0]
 80113fc:	4605      	mov	r5, r0
 80113fe:	b911      	cbnz	r1, 8011406 <sbrk_aligned+0x12>
 8011400:	f000 f88c 	bl	801151c <_sbrk_r>
 8011404:	6030      	str	r0, [r6, #0]
 8011406:	4621      	mov	r1, r4
 8011408:	4628      	mov	r0, r5
 801140a:	f000 f887 	bl	801151c <_sbrk_r>
 801140e:	1c43      	adds	r3, r0, #1
 8011410:	d00a      	beq.n	8011428 <sbrk_aligned+0x34>
 8011412:	1cc4      	adds	r4, r0, #3
 8011414:	f024 0403 	bic.w	r4, r4, #3
 8011418:	42a0      	cmp	r0, r4
 801141a:	d007      	beq.n	801142c <sbrk_aligned+0x38>
 801141c:	1a21      	subs	r1, r4, r0
 801141e:	4628      	mov	r0, r5
 8011420:	f000 f87c 	bl	801151c <_sbrk_r>
 8011424:	3001      	adds	r0, #1
 8011426:	d101      	bne.n	801142c <sbrk_aligned+0x38>
 8011428:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801142c:	4620      	mov	r0, r4
 801142e:	bd70      	pop	{r4, r5, r6, pc}
 8011430:	200035f4 	.word	0x200035f4

08011434 <_malloc_r>:
 8011434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011438:	1ccd      	adds	r5, r1, #3
 801143a:	f025 0503 	bic.w	r5, r5, #3
 801143e:	3508      	adds	r5, #8
 8011440:	2d0c      	cmp	r5, #12
 8011442:	bf38      	it	cc
 8011444:	250c      	movcc	r5, #12
 8011446:	2d00      	cmp	r5, #0
 8011448:	4607      	mov	r7, r0
 801144a:	db01      	blt.n	8011450 <_malloc_r+0x1c>
 801144c:	42a9      	cmp	r1, r5
 801144e:	d905      	bls.n	801145c <_malloc_r+0x28>
 8011450:	230c      	movs	r3, #12
 8011452:	603b      	str	r3, [r7, #0]
 8011454:	2600      	movs	r6, #0
 8011456:	4630      	mov	r0, r6
 8011458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801145c:	4e2e      	ldr	r6, [pc, #184]	; (8011518 <_malloc_r+0xe4>)
 801145e:	f000 f89d 	bl	801159c <__malloc_lock>
 8011462:	6833      	ldr	r3, [r6, #0]
 8011464:	461c      	mov	r4, r3
 8011466:	bb34      	cbnz	r4, 80114b6 <_malloc_r+0x82>
 8011468:	4629      	mov	r1, r5
 801146a:	4638      	mov	r0, r7
 801146c:	f7ff ffc2 	bl	80113f4 <sbrk_aligned>
 8011470:	1c43      	adds	r3, r0, #1
 8011472:	4604      	mov	r4, r0
 8011474:	d14d      	bne.n	8011512 <_malloc_r+0xde>
 8011476:	6834      	ldr	r4, [r6, #0]
 8011478:	4626      	mov	r6, r4
 801147a:	2e00      	cmp	r6, #0
 801147c:	d140      	bne.n	8011500 <_malloc_r+0xcc>
 801147e:	6823      	ldr	r3, [r4, #0]
 8011480:	4631      	mov	r1, r6
 8011482:	4638      	mov	r0, r7
 8011484:	eb04 0803 	add.w	r8, r4, r3
 8011488:	f000 f848 	bl	801151c <_sbrk_r>
 801148c:	4580      	cmp	r8, r0
 801148e:	d13a      	bne.n	8011506 <_malloc_r+0xd2>
 8011490:	6821      	ldr	r1, [r4, #0]
 8011492:	3503      	adds	r5, #3
 8011494:	1a6d      	subs	r5, r5, r1
 8011496:	f025 0503 	bic.w	r5, r5, #3
 801149a:	3508      	adds	r5, #8
 801149c:	2d0c      	cmp	r5, #12
 801149e:	bf38      	it	cc
 80114a0:	250c      	movcc	r5, #12
 80114a2:	4629      	mov	r1, r5
 80114a4:	4638      	mov	r0, r7
 80114a6:	f7ff ffa5 	bl	80113f4 <sbrk_aligned>
 80114aa:	3001      	adds	r0, #1
 80114ac:	d02b      	beq.n	8011506 <_malloc_r+0xd2>
 80114ae:	6823      	ldr	r3, [r4, #0]
 80114b0:	442b      	add	r3, r5
 80114b2:	6023      	str	r3, [r4, #0]
 80114b4:	e00e      	b.n	80114d4 <_malloc_r+0xa0>
 80114b6:	6822      	ldr	r2, [r4, #0]
 80114b8:	1b52      	subs	r2, r2, r5
 80114ba:	d41e      	bmi.n	80114fa <_malloc_r+0xc6>
 80114bc:	2a0b      	cmp	r2, #11
 80114be:	d916      	bls.n	80114ee <_malloc_r+0xba>
 80114c0:	1961      	adds	r1, r4, r5
 80114c2:	42a3      	cmp	r3, r4
 80114c4:	6025      	str	r5, [r4, #0]
 80114c6:	bf18      	it	ne
 80114c8:	6059      	strne	r1, [r3, #4]
 80114ca:	6863      	ldr	r3, [r4, #4]
 80114cc:	bf08      	it	eq
 80114ce:	6031      	streq	r1, [r6, #0]
 80114d0:	5162      	str	r2, [r4, r5]
 80114d2:	604b      	str	r3, [r1, #4]
 80114d4:	4638      	mov	r0, r7
 80114d6:	f104 060b 	add.w	r6, r4, #11
 80114da:	f000 f865 	bl	80115a8 <__malloc_unlock>
 80114de:	f026 0607 	bic.w	r6, r6, #7
 80114e2:	1d23      	adds	r3, r4, #4
 80114e4:	1af2      	subs	r2, r6, r3
 80114e6:	d0b6      	beq.n	8011456 <_malloc_r+0x22>
 80114e8:	1b9b      	subs	r3, r3, r6
 80114ea:	50a3      	str	r3, [r4, r2]
 80114ec:	e7b3      	b.n	8011456 <_malloc_r+0x22>
 80114ee:	6862      	ldr	r2, [r4, #4]
 80114f0:	42a3      	cmp	r3, r4
 80114f2:	bf0c      	ite	eq
 80114f4:	6032      	streq	r2, [r6, #0]
 80114f6:	605a      	strne	r2, [r3, #4]
 80114f8:	e7ec      	b.n	80114d4 <_malloc_r+0xa0>
 80114fa:	4623      	mov	r3, r4
 80114fc:	6864      	ldr	r4, [r4, #4]
 80114fe:	e7b2      	b.n	8011466 <_malloc_r+0x32>
 8011500:	4634      	mov	r4, r6
 8011502:	6876      	ldr	r6, [r6, #4]
 8011504:	e7b9      	b.n	801147a <_malloc_r+0x46>
 8011506:	230c      	movs	r3, #12
 8011508:	603b      	str	r3, [r7, #0]
 801150a:	4638      	mov	r0, r7
 801150c:	f000 f84c 	bl	80115a8 <__malloc_unlock>
 8011510:	e7a1      	b.n	8011456 <_malloc_r+0x22>
 8011512:	6025      	str	r5, [r4, #0]
 8011514:	e7de      	b.n	80114d4 <_malloc_r+0xa0>
 8011516:	bf00      	nop
 8011518:	200035f0 	.word	0x200035f0

0801151c <_sbrk_r>:
 801151c:	b538      	push	{r3, r4, r5, lr}
 801151e:	4d06      	ldr	r5, [pc, #24]	; (8011538 <_sbrk_r+0x1c>)
 8011520:	2300      	movs	r3, #0
 8011522:	4604      	mov	r4, r0
 8011524:	4608      	mov	r0, r1
 8011526:	602b      	str	r3, [r5, #0]
 8011528:	f7f2 fad0 	bl	8003acc <_sbrk>
 801152c:	1c43      	adds	r3, r0, #1
 801152e:	d102      	bne.n	8011536 <_sbrk_r+0x1a>
 8011530:	682b      	ldr	r3, [r5, #0]
 8011532:	b103      	cbz	r3, 8011536 <_sbrk_r+0x1a>
 8011534:	6023      	str	r3, [r4, #0]
 8011536:	bd38      	pop	{r3, r4, r5, pc}
 8011538:	200035f8 	.word	0x200035f8

0801153c <siprintf>:
 801153c:	b40e      	push	{r1, r2, r3}
 801153e:	b500      	push	{lr}
 8011540:	b09c      	sub	sp, #112	; 0x70
 8011542:	ab1d      	add	r3, sp, #116	; 0x74
 8011544:	9002      	str	r0, [sp, #8]
 8011546:	9006      	str	r0, [sp, #24]
 8011548:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801154c:	4809      	ldr	r0, [pc, #36]	; (8011574 <siprintf+0x38>)
 801154e:	9107      	str	r1, [sp, #28]
 8011550:	9104      	str	r1, [sp, #16]
 8011552:	4909      	ldr	r1, [pc, #36]	; (8011578 <siprintf+0x3c>)
 8011554:	f853 2b04 	ldr.w	r2, [r3], #4
 8011558:	9105      	str	r1, [sp, #20]
 801155a:	6800      	ldr	r0, [r0, #0]
 801155c:	9301      	str	r3, [sp, #4]
 801155e:	a902      	add	r1, sp, #8
 8011560:	f000 f884 	bl	801166c <_svfiprintf_r>
 8011564:	9b02      	ldr	r3, [sp, #8]
 8011566:	2200      	movs	r2, #0
 8011568:	701a      	strb	r2, [r3, #0]
 801156a:	b01c      	add	sp, #112	; 0x70
 801156c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011570:	b003      	add	sp, #12
 8011572:	4770      	bx	lr
 8011574:	20000064 	.word	0x20000064
 8011578:	ffff0208 	.word	0xffff0208

0801157c <strcat>:
 801157c:	b510      	push	{r4, lr}
 801157e:	4602      	mov	r2, r0
 8011580:	7814      	ldrb	r4, [r2, #0]
 8011582:	4613      	mov	r3, r2
 8011584:	3201      	adds	r2, #1
 8011586:	2c00      	cmp	r4, #0
 8011588:	d1fa      	bne.n	8011580 <strcat+0x4>
 801158a:	3b01      	subs	r3, #1
 801158c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011590:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011594:	2a00      	cmp	r2, #0
 8011596:	d1f9      	bne.n	801158c <strcat+0x10>
 8011598:	bd10      	pop	{r4, pc}
	...

0801159c <__malloc_lock>:
 801159c:	4801      	ldr	r0, [pc, #4]	; (80115a4 <__malloc_lock+0x8>)
 801159e:	f000 baf9 	b.w	8011b94 <__retarget_lock_acquire_recursive>
 80115a2:	bf00      	nop
 80115a4:	200035fc 	.word	0x200035fc

080115a8 <__malloc_unlock>:
 80115a8:	4801      	ldr	r0, [pc, #4]	; (80115b0 <__malloc_unlock+0x8>)
 80115aa:	f000 baf4 	b.w	8011b96 <__retarget_lock_release_recursive>
 80115ae:	bf00      	nop
 80115b0:	200035fc 	.word	0x200035fc

080115b4 <__ssputs_r>:
 80115b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115b8:	688e      	ldr	r6, [r1, #8]
 80115ba:	429e      	cmp	r6, r3
 80115bc:	4682      	mov	sl, r0
 80115be:	460c      	mov	r4, r1
 80115c0:	4690      	mov	r8, r2
 80115c2:	461f      	mov	r7, r3
 80115c4:	d838      	bhi.n	8011638 <__ssputs_r+0x84>
 80115c6:	898a      	ldrh	r2, [r1, #12]
 80115c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80115cc:	d032      	beq.n	8011634 <__ssputs_r+0x80>
 80115ce:	6825      	ldr	r5, [r4, #0]
 80115d0:	6909      	ldr	r1, [r1, #16]
 80115d2:	eba5 0901 	sub.w	r9, r5, r1
 80115d6:	6965      	ldr	r5, [r4, #20]
 80115d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80115dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80115e0:	3301      	adds	r3, #1
 80115e2:	444b      	add	r3, r9
 80115e4:	106d      	asrs	r5, r5, #1
 80115e6:	429d      	cmp	r5, r3
 80115e8:	bf38      	it	cc
 80115ea:	461d      	movcc	r5, r3
 80115ec:	0553      	lsls	r3, r2, #21
 80115ee:	d531      	bpl.n	8011654 <__ssputs_r+0xa0>
 80115f0:	4629      	mov	r1, r5
 80115f2:	f7ff ff1f 	bl	8011434 <_malloc_r>
 80115f6:	4606      	mov	r6, r0
 80115f8:	b950      	cbnz	r0, 8011610 <__ssputs_r+0x5c>
 80115fa:	230c      	movs	r3, #12
 80115fc:	f8ca 3000 	str.w	r3, [sl]
 8011600:	89a3      	ldrh	r3, [r4, #12]
 8011602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011606:	81a3      	strh	r3, [r4, #12]
 8011608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801160c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011610:	6921      	ldr	r1, [r4, #16]
 8011612:	464a      	mov	r2, r9
 8011614:	f000 fac0 	bl	8011b98 <memcpy>
 8011618:	89a3      	ldrh	r3, [r4, #12]
 801161a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801161e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011622:	81a3      	strh	r3, [r4, #12]
 8011624:	6126      	str	r6, [r4, #16]
 8011626:	6165      	str	r5, [r4, #20]
 8011628:	444e      	add	r6, r9
 801162a:	eba5 0509 	sub.w	r5, r5, r9
 801162e:	6026      	str	r6, [r4, #0]
 8011630:	60a5      	str	r5, [r4, #8]
 8011632:	463e      	mov	r6, r7
 8011634:	42be      	cmp	r6, r7
 8011636:	d900      	bls.n	801163a <__ssputs_r+0x86>
 8011638:	463e      	mov	r6, r7
 801163a:	6820      	ldr	r0, [r4, #0]
 801163c:	4632      	mov	r2, r6
 801163e:	4641      	mov	r1, r8
 8011640:	f000 fab8 	bl	8011bb4 <memmove>
 8011644:	68a3      	ldr	r3, [r4, #8]
 8011646:	1b9b      	subs	r3, r3, r6
 8011648:	60a3      	str	r3, [r4, #8]
 801164a:	6823      	ldr	r3, [r4, #0]
 801164c:	4433      	add	r3, r6
 801164e:	6023      	str	r3, [r4, #0]
 8011650:	2000      	movs	r0, #0
 8011652:	e7db      	b.n	801160c <__ssputs_r+0x58>
 8011654:	462a      	mov	r2, r5
 8011656:	f000 fac7 	bl	8011be8 <_realloc_r>
 801165a:	4606      	mov	r6, r0
 801165c:	2800      	cmp	r0, #0
 801165e:	d1e1      	bne.n	8011624 <__ssputs_r+0x70>
 8011660:	6921      	ldr	r1, [r4, #16]
 8011662:	4650      	mov	r0, sl
 8011664:	f7ff fe7a 	bl	801135c <_free_r>
 8011668:	e7c7      	b.n	80115fa <__ssputs_r+0x46>
	...

0801166c <_svfiprintf_r>:
 801166c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011670:	4698      	mov	r8, r3
 8011672:	898b      	ldrh	r3, [r1, #12]
 8011674:	061b      	lsls	r3, r3, #24
 8011676:	b09d      	sub	sp, #116	; 0x74
 8011678:	4607      	mov	r7, r0
 801167a:	460d      	mov	r5, r1
 801167c:	4614      	mov	r4, r2
 801167e:	d50e      	bpl.n	801169e <_svfiprintf_r+0x32>
 8011680:	690b      	ldr	r3, [r1, #16]
 8011682:	b963      	cbnz	r3, 801169e <_svfiprintf_r+0x32>
 8011684:	2140      	movs	r1, #64	; 0x40
 8011686:	f7ff fed5 	bl	8011434 <_malloc_r>
 801168a:	6028      	str	r0, [r5, #0]
 801168c:	6128      	str	r0, [r5, #16]
 801168e:	b920      	cbnz	r0, 801169a <_svfiprintf_r+0x2e>
 8011690:	230c      	movs	r3, #12
 8011692:	603b      	str	r3, [r7, #0]
 8011694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011698:	e0d1      	b.n	801183e <_svfiprintf_r+0x1d2>
 801169a:	2340      	movs	r3, #64	; 0x40
 801169c:	616b      	str	r3, [r5, #20]
 801169e:	2300      	movs	r3, #0
 80116a0:	9309      	str	r3, [sp, #36]	; 0x24
 80116a2:	2320      	movs	r3, #32
 80116a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80116a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80116ac:	2330      	movs	r3, #48	; 0x30
 80116ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011858 <_svfiprintf_r+0x1ec>
 80116b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80116b6:	f04f 0901 	mov.w	r9, #1
 80116ba:	4623      	mov	r3, r4
 80116bc:	469a      	mov	sl, r3
 80116be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80116c2:	b10a      	cbz	r2, 80116c8 <_svfiprintf_r+0x5c>
 80116c4:	2a25      	cmp	r2, #37	; 0x25
 80116c6:	d1f9      	bne.n	80116bc <_svfiprintf_r+0x50>
 80116c8:	ebba 0b04 	subs.w	fp, sl, r4
 80116cc:	d00b      	beq.n	80116e6 <_svfiprintf_r+0x7a>
 80116ce:	465b      	mov	r3, fp
 80116d0:	4622      	mov	r2, r4
 80116d2:	4629      	mov	r1, r5
 80116d4:	4638      	mov	r0, r7
 80116d6:	f7ff ff6d 	bl	80115b4 <__ssputs_r>
 80116da:	3001      	adds	r0, #1
 80116dc:	f000 80aa 	beq.w	8011834 <_svfiprintf_r+0x1c8>
 80116e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80116e2:	445a      	add	r2, fp
 80116e4:	9209      	str	r2, [sp, #36]	; 0x24
 80116e6:	f89a 3000 	ldrb.w	r3, [sl]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	f000 80a2 	beq.w	8011834 <_svfiprintf_r+0x1c8>
 80116f0:	2300      	movs	r3, #0
 80116f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80116f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80116fa:	f10a 0a01 	add.w	sl, sl, #1
 80116fe:	9304      	str	r3, [sp, #16]
 8011700:	9307      	str	r3, [sp, #28]
 8011702:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011706:	931a      	str	r3, [sp, #104]	; 0x68
 8011708:	4654      	mov	r4, sl
 801170a:	2205      	movs	r2, #5
 801170c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011710:	4851      	ldr	r0, [pc, #324]	; (8011858 <_svfiprintf_r+0x1ec>)
 8011712:	f7ee fd65 	bl	80001e0 <memchr>
 8011716:	9a04      	ldr	r2, [sp, #16]
 8011718:	b9d8      	cbnz	r0, 8011752 <_svfiprintf_r+0xe6>
 801171a:	06d0      	lsls	r0, r2, #27
 801171c:	bf44      	itt	mi
 801171e:	2320      	movmi	r3, #32
 8011720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011724:	0711      	lsls	r1, r2, #28
 8011726:	bf44      	itt	mi
 8011728:	232b      	movmi	r3, #43	; 0x2b
 801172a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801172e:	f89a 3000 	ldrb.w	r3, [sl]
 8011732:	2b2a      	cmp	r3, #42	; 0x2a
 8011734:	d015      	beq.n	8011762 <_svfiprintf_r+0xf6>
 8011736:	9a07      	ldr	r2, [sp, #28]
 8011738:	4654      	mov	r4, sl
 801173a:	2000      	movs	r0, #0
 801173c:	f04f 0c0a 	mov.w	ip, #10
 8011740:	4621      	mov	r1, r4
 8011742:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011746:	3b30      	subs	r3, #48	; 0x30
 8011748:	2b09      	cmp	r3, #9
 801174a:	d94e      	bls.n	80117ea <_svfiprintf_r+0x17e>
 801174c:	b1b0      	cbz	r0, 801177c <_svfiprintf_r+0x110>
 801174e:	9207      	str	r2, [sp, #28]
 8011750:	e014      	b.n	801177c <_svfiprintf_r+0x110>
 8011752:	eba0 0308 	sub.w	r3, r0, r8
 8011756:	fa09 f303 	lsl.w	r3, r9, r3
 801175a:	4313      	orrs	r3, r2
 801175c:	9304      	str	r3, [sp, #16]
 801175e:	46a2      	mov	sl, r4
 8011760:	e7d2      	b.n	8011708 <_svfiprintf_r+0x9c>
 8011762:	9b03      	ldr	r3, [sp, #12]
 8011764:	1d19      	adds	r1, r3, #4
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	9103      	str	r1, [sp, #12]
 801176a:	2b00      	cmp	r3, #0
 801176c:	bfbb      	ittet	lt
 801176e:	425b      	neglt	r3, r3
 8011770:	f042 0202 	orrlt.w	r2, r2, #2
 8011774:	9307      	strge	r3, [sp, #28]
 8011776:	9307      	strlt	r3, [sp, #28]
 8011778:	bfb8      	it	lt
 801177a:	9204      	strlt	r2, [sp, #16]
 801177c:	7823      	ldrb	r3, [r4, #0]
 801177e:	2b2e      	cmp	r3, #46	; 0x2e
 8011780:	d10c      	bne.n	801179c <_svfiprintf_r+0x130>
 8011782:	7863      	ldrb	r3, [r4, #1]
 8011784:	2b2a      	cmp	r3, #42	; 0x2a
 8011786:	d135      	bne.n	80117f4 <_svfiprintf_r+0x188>
 8011788:	9b03      	ldr	r3, [sp, #12]
 801178a:	1d1a      	adds	r2, r3, #4
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	9203      	str	r2, [sp, #12]
 8011790:	2b00      	cmp	r3, #0
 8011792:	bfb8      	it	lt
 8011794:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011798:	3402      	adds	r4, #2
 801179a:	9305      	str	r3, [sp, #20]
 801179c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011868 <_svfiprintf_r+0x1fc>
 80117a0:	7821      	ldrb	r1, [r4, #0]
 80117a2:	2203      	movs	r2, #3
 80117a4:	4650      	mov	r0, sl
 80117a6:	f7ee fd1b 	bl	80001e0 <memchr>
 80117aa:	b140      	cbz	r0, 80117be <_svfiprintf_r+0x152>
 80117ac:	2340      	movs	r3, #64	; 0x40
 80117ae:	eba0 000a 	sub.w	r0, r0, sl
 80117b2:	fa03 f000 	lsl.w	r0, r3, r0
 80117b6:	9b04      	ldr	r3, [sp, #16]
 80117b8:	4303      	orrs	r3, r0
 80117ba:	3401      	adds	r4, #1
 80117bc:	9304      	str	r3, [sp, #16]
 80117be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117c2:	4826      	ldr	r0, [pc, #152]	; (801185c <_svfiprintf_r+0x1f0>)
 80117c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80117c8:	2206      	movs	r2, #6
 80117ca:	f7ee fd09 	bl	80001e0 <memchr>
 80117ce:	2800      	cmp	r0, #0
 80117d0:	d038      	beq.n	8011844 <_svfiprintf_r+0x1d8>
 80117d2:	4b23      	ldr	r3, [pc, #140]	; (8011860 <_svfiprintf_r+0x1f4>)
 80117d4:	bb1b      	cbnz	r3, 801181e <_svfiprintf_r+0x1b2>
 80117d6:	9b03      	ldr	r3, [sp, #12]
 80117d8:	3307      	adds	r3, #7
 80117da:	f023 0307 	bic.w	r3, r3, #7
 80117de:	3308      	adds	r3, #8
 80117e0:	9303      	str	r3, [sp, #12]
 80117e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117e4:	4433      	add	r3, r6
 80117e6:	9309      	str	r3, [sp, #36]	; 0x24
 80117e8:	e767      	b.n	80116ba <_svfiprintf_r+0x4e>
 80117ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80117ee:	460c      	mov	r4, r1
 80117f0:	2001      	movs	r0, #1
 80117f2:	e7a5      	b.n	8011740 <_svfiprintf_r+0xd4>
 80117f4:	2300      	movs	r3, #0
 80117f6:	3401      	adds	r4, #1
 80117f8:	9305      	str	r3, [sp, #20]
 80117fa:	4619      	mov	r1, r3
 80117fc:	f04f 0c0a 	mov.w	ip, #10
 8011800:	4620      	mov	r0, r4
 8011802:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011806:	3a30      	subs	r2, #48	; 0x30
 8011808:	2a09      	cmp	r2, #9
 801180a:	d903      	bls.n	8011814 <_svfiprintf_r+0x1a8>
 801180c:	2b00      	cmp	r3, #0
 801180e:	d0c5      	beq.n	801179c <_svfiprintf_r+0x130>
 8011810:	9105      	str	r1, [sp, #20]
 8011812:	e7c3      	b.n	801179c <_svfiprintf_r+0x130>
 8011814:	fb0c 2101 	mla	r1, ip, r1, r2
 8011818:	4604      	mov	r4, r0
 801181a:	2301      	movs	r3, #1
 801181c:	e7f0      	b.n	8011800 <_svfiprintf_r+0x194>
 801181e:	ab03      	add	r3, sp, #12
 8011820:	9300      	str	r3, [sp, #0]
 8011822:	462a      	mov	r2, r5
 8011824:	4b0f      	ldr	r3, [pc, #60]	; (8011864 <_svfiprintf_r+0x1f8>)
 8011826:	a904      	add	r1, sp, #16
 8011828:	4638      	mov	r0, r7
 801182a:	f3af 8000 	nop.w
 801182e:	1c42      	adds	r2, r0, #1
 8011830:	4606      	mov	r6, r0
 8011832:	d1d6      	bne.n	80117e2 <_svfiprintf_r+0x176>
 8011834:	89ab      	ldrh	r3, [r5, #12]
 8011836:	065b      	lsls	r3, r3, #25
 8011838:	f53f af2c 	bmi.w	8011694 <_svfiprintf_r+0x28>
 801183c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801183e:	b01d      	add	sp, #116	; 0x74
 8011840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011844:	ab03      	add	r3, sp, #12
 8011846:	9300      	str	r3, [sp, #0]
 8011848:	462a      	mov	r2, r5
 801184a:	4b06      	ldr	r3, [pc, #24]	; (8011864 <_svfiprintf_r+0x1f8>)
 801184c:	a904      	add	r1, sp, #16
 801184e:	4638      	mov	r0, r7
 8011850:	f000 f87a 	bl	8011948 <_printf_i>
 8011854:	e7eb      	b.n	801182e <_svfiprintf_r+0x1c2>
 8011856:	bf00      	nop
 8011858:	08012220 	.word	0x08012220
 801185c:	0801222a 	.word	0x0801222a
 8011860:	00000000 	.word	0x00000000
 8011864:	080115b5 	.word	0x080115b5
 8011868:	08012226 	.word	0x08012226

0801186c <_printf_common>:
 801186c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011870:	4616      	mov	r6, r2
 8011872:	4699      	mov	r9, r3
 8011874:	688a      	ldr	r2, [r1, #8]
 8011876:	690b      	ldr	r3, [r1, #16]
 8011878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801187c:	4293      	cmp	r3, r2
 801187e:	bfb8      	it	lt
 8011880:	4613      	movlt	r3, r2
 8011882:	6033      	str	r3, [r6, #0]
 8011884:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011888:	4607      	mov	r7, r0
 801188a:	460c      	mov	r4, r1
 801188c:	b10a      	cbz	r2, 8011892 <_printf_common+0x26>
 801188e:	3301      	adds	r3, #1
 8011890:	6033      	str	r3, [r6, #0]
 8011892:	6823      	ldr	r3, [r4, #0]
 8011894:	0699      	lsls	r1, r3, #26
 8011896:	bf42      	ittt	mi
 8011898:	6833      	ldrmi	r3, [r6, #0]
 801189a:	3302      	addmi	r3, #2
 801189c:	6033      	strmi	r3, [r6, #0]
 801189e:	6825      	ldr	r5, [r4, #0]
 80118a0:	f015 0506 	ands.w	r5, r5, #6
 80118a4:	d106      	bne.n	80118b4 <_printf_common+0x48>
 80118a6:	f104 0a19 	add.w	sl, r4, #25
 80118aa:	68e3      	ldr	r3, [r4, #12]
 80118ac:	6832      	ldr	r2, [r6, #0]
 80118ae:	1a9b      	subs	r3, r3, r2
 80118b0:	42ab      	cmp	r3, r5
 80118b2:	dc26      	bgt.n	8011902 <_printf_common+0x96>
 80118b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80118b8:	1e13      	subs	r3, r2, #0
 80118ba:	6822      	ldr	r2, [r4, #0]
 80118bc:	bf18      	it	ne
 80118be:	2301      	movne	r3, #1
 80118c0:	0692      	lsls	r2, r2, #26
 80118c2:	d42b      	bmi.n	801191c <_printf_common+0xb0>
 80118c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80118c8:	4649      	mov	r1, r9
 80118ca:	4638      	mov	r0, r7
 80118cc:	47c0      	blx	r8
 80118ce:	3001      	adds	r0, #1
 80118d0:	d01e      	beq.n	8011910 <_printf_common+0xa4>
 80118d2:	6823      	ldr	r3, [r4, #0]
 80118d4:	68e5      	ldr	r5, [r4, #12]
 80118d6:	6832      	ldr	r2, [r6, #0]
 80118d8:	f003 0306 	and.w	r3, r3, #6
 80118dc:	2b04      	cmp	r3, #4
 80118de:	bf08      	it	eq
 80118e0:	1aad      	subeq	r5, r5, r2
 80118e2:	68a3      	ldr	r3, [r4, #8]
 80118e4:	6922      	ldr	r2, [r4, #16]
 80118e6:	bf0c      	ite	eq
 80118e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80118ec:	2500      	movne	r5, #0
 80118ee:	4293      	cmp	r3, r2
 80118f0:	bfc4      	itt	gt
 80118f2:	1a9b      	subgt	r3, r3, r2
 80118f4:	18ed      	addgt	r5, r5, r3
 80118f6:	2600      	movs	r6, #0
 80118f8:	341a      	adds	r4, #26
 80118fa:	42b5      	cmp	r5, r6
 80118fc:	d11a      	bne.n	8011934 <_printf_common+0xc8>
 80118fe:	2000      	movs	r0, #0
 8011900:	e008      	b.n	8011914 <_printf_common+0xa8>
 8011902:	2301      	movs	r3, #1
 8011904:	4652      	mov	r2, sl
 8011906:	4649      	mov	r1, r9
 8011908:	4638      	mov	r0, r7
 801190a:	47c0      	blx	r8
 801190c:	3001      	adds	r0, #1
 801190e:	d103      	bne.n	8011918 <_printf_common+0xac>
 8011910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011918:	3501      	adds	r5, #1
 801191a:	e7c6      	b.n	80118aa <_printf_common+0x3e>
 801191c:	18e1      	adds	r1, r4, r3
 801191e:	1c5a      	adds	r2, r3, #1
 8011920:	2030      	movs	r0, #48	; 0x30
 8011922:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011926:	4422      	add	r2, r4
 8011928:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801192c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011930:	3302      	adds	r3, #2
 8011932:	e7c7      	b.n	80118c4 <_printf_common+0x58>
 8011934:	2301      	movs	r3, #1
 8011936:	4622      	mov	r2, r4
 8011938:	4649      	mov	r1, r9
 801193a:	4638      	mov	r0, r7
 801193c:	47c0      	blx	r8
 801193e:	3001      	adds	r0, #1
 8011940:	d0e6      	beq.n	8011910 <_printf_common+0xa4>
 8011942:	3601      	adds	r6, #1
 8011944:	e7d9      	b.n	80118fa <_printf_common+0x8e>
	...

08011948 <_printf_i>:
 8011948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801194c:	7e0f      	ldrb	r7, [r1, #24]
 801194e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011950:	2f78      	cmp	r7, #120	; 0x78
 8011952:	4691      	mov	r9, r2
 8011954:	4680      	mov	r8, r0
 8011956:	460c      	mov	r4, r1
 8011958:	469a      	mov	sl, r3
 801195a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801195e:	d807      	bhi.n	8011970 <_printf_i+0x28>
 8011960:	2f62      	cmp	r7, #98	; 0x62
 8011962:	d80a      	bhi.n	801197a <_printf_i+0x32>
 8011964:	2f00      	cmp	r7, #0
 8011966:	f000 80d8 	beq.w	8011b1a <_printf_i+0x1d2>
 801196a:	2f58      	cmp	r7, #88	; 0x58
 801196c:	f000 80a3 	beq.w	8011ab6 <_printf_i+0x16e>
 8011970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011978:	e03a      	b.n	80119f0 <_printf_i+0xa8>
 801197a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801197e:	2b15      	cmp	r3, #21
 8011980:	d8f6      	bhi.n	8011970 <_printf_i+0x28>
 8011982:	a101      	add	r1, pc, #4	; (adr r1, 8011988 <_printf_i+0x40>)
 8011984:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011988:	080119e1 	.word	0x080119e1
 801198c:	080119f5 	.word	0x080119f5
 8011990:	08011971 	.word	0x08011971
 8011994:	08011971 	.word	0x08011971
 8011998:	08011971 	.word	0x08011971
 801199c:	08011971 	.word	0x08011971
 80119a0:	080119f5 	.word	0x080119f5
 80119a4:	08011971 	.word	0x08011971
 80119a8:	08011971 	.word	0x08011971
 80119ac:	08011971 	.word	0x08011971
 80119b0:	08011971 	.word	0x08011971
 80119b4:	08011b01 	.word	0x08011b01
 80119b8:	08011a25 	.word	0x08011a25
 80119bc:	08011ae3 	.word	0x08011ae3
 80119c0:	08011971 	.word	0x08011971
 80119c4:	08011971 	.word	0x08011971
 80119c8:	08011b23 	.word	0x08011b23
 80119cc:	08011971 	.word	0x08011971
 80119d0:	08011a25 	.word	0x08011a25
 80119d4:	08011971 	.word	0x08011971
 80119d8:	08011971 	.word	0x08011971
 80119dc:	08011aeb 	.word	0x08011aeb
 80119e0:	682b      	ldr	r3, [r5, #0]
 80119e2:	1d1a      	adds	r2, r3, #4
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	602a      	str	r2, [r5, #0]
 80119e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80119ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80119f0:	2301      	movs	r3, #1
 80119f2:	e0a3      	b.n	8011b3c <_printf_i+0x1f4>
 80119f4:	6820      	ldr	r0, [r4, #0]
 80119f6:	6829      	ldr	r1, [r5, #0]
 80119f8:	0606      	lsls	r6, r0, #24
 80119fa:	f101 0304 	add.w	r3, r1, #4
 80119fe:	d50a      	bpl.n	8011a16 <_printf_i+0xce>
 8011a00:	680e      	ldr	r6, [r1, #0]
 8011a02:	602b      	str	r3, [r5, #0]
 8011a04:	2e00      	cmp	r6, #0
 8011a06:	da03      	bge.n	8011a10 <_printf_i+0xc8>
 8011a08:	232d      	movs	r3, #45	; 0x2d
 8011a0a:	4276      	negs	r6, r6
 8011a0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a10:	485e      	ldr	r0, [pc, #376]	; (8011b8c <_printf_i+0x244>)
 8011a12:	230a      	movs	r3, #10
 8011a14:	e019      	b.n	8011a4a <_printf_i+0x102>
 8011a16:	680e      	ldr	r6, [r1, #0]
 8011a18:	602b      	str	r3, [r5, #0]
 8011a1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011a1e:	bf18      	it	ne
 8011a20:	b236      	sxthne	r6, r6
 8011a22:	e7ef      	b.n	8011a04 <_printf_i+0xbc>
 8011a24:	682b      	ldr	r3, [r5, #0]
 8011a26:	6820      	ldr	r0, [r4, #0]
 8011a28:	1d19      	adds	r1, r3, #4
 8011a2a:	6029      	str	r1, [r5, #0]
 8011a2c:	0601      	lsls	r1, r0, #24
 8011a2e:	d501      	bpl.n	8011a34 <_printf_i+0xec>
 8011a30:	681e      	ldr	r6, [r3, #0]
 8011a32:	e002      	b.n	8011a3a <_printf_i+0xf2>
 8011a34:	0646      	lsls	r6, r0, #25
 8011a36:	d5fb      	bpl.n	8011a30 <_printf_i+0xe8>
 8011a38:	881e      	ldrh	r6, [r3, #0]
 8011a3a:	4854      	ldr	r0, [pc, #336]	; (8011b8c <_printf_i+0x244>)
 8011a3c:	2f6f      	cmp	r7, #111	; 0x6f
 8011a3e:	bf0c      	ite	eq
 8011a40:	2308      	moveq	r3, #8
 8011a42:	230a      	movne	r3, #10
 8011a44:	2100      	movs	r1, #0
 8011a46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011a4a:	6865      	ldr	r5, [r4, #4]
 8011a4c:	60a5      	str	r5, [r4, #8]
 8011a4e:	2d00      	cmp	r5, #0
 8011a50:	bfa2      	ittt	ge
 8011a52:	6821      	ldrge	r1, [r4, #0]
 8011a54:	f021 0104 	bicge.w	r1, r1, #4
 8011a58:	6021      	strge	r1, [r4, #0]
 8011a5a:	b90e      	cbnz	r6, 8011a60 <_printf_i+0x118>
 8011a5c:	2d00      	cmp	r5, #0
 8011a5e:	d04d      	beq.n	8011afc <_printf_i+0x1b4>
 8011a60:	4615      	mov	r5, r2
 8011a62:	fbb6 f1f3 	udiv	r1, r6, r3
 8011a66:	fb03 6711 	mls	r7, r3, r1, r6
 8011a6a:	5dc7      	ldrb	r7, [r0, r7]
 8011a6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011a70:	4637      	mov	r7, r6
 8011a72:	42bb      	cmp	r3, r7
 8011a74:	460e      	mov	r6, r1
 8011a76:	d9f4      	bls.n	8011a62 <_printf_i+0x11a>
 8011a78:	2b08      	cmp	r3, #8
 8011a7a:	d10b      	bne.n	8011a94 <_printf_i+0x14c>
 8011a7c:	6823      	ldr	r3, [r4, #0]
 8011a7e:	07de      	lsls	r6, r3, #31
 8011a80:	d508      	bpl.n	8011a94 <_printf_i+0x14c>
 8011a82:	6923      	ldr	r3, [r4, #16]
 8011a84:	6861      	ldr	r1, [r4, #4]
 8011a86:	4299      	cmp	r1, r3
 8011a88:	bfde      	ittt	le
 8011a8a:	2330      	movle	r3, #48	; 0x30
 8011a8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011a90:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011a94:	1b52      	subs	r2, r2, r5
 8011a96:	6122      	str	r2, [r4, #16]
 8011a98:	f8cd a000 	str.w	sl, [sp]
 8011a9c:	464b      	mov	r3, r9
 8011a9e:	aa03      	add	r2, sp, #12
 8011aa0:	4621      	mov	r1, r4
 8011aa2:	4640      	mov	r0, r8
 8011aa4:	f7ff fee2 	bl	801186c <_printf_common>
 8011aa8:	3001      	adds	r0, #1
 8011aaa:	d14c      	bne.n	8011b46 <_printf_i+0x1fe>
 8011aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ab0:	b004      	add	sp, #16
 8011ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ab6:	4835      	ldr	r0, [pc, #212]	; (8011b8c <_printf_i+0x244>)
 8011ab8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011abc:	6829      	ldr	r1, [r5, #0]
 8011abe:	6823      	ldr	r3, [r4, #0]
 8011ac0:	f851 6b04 	ldr.w	r6, [r1], #4
 8011ac4:	6029      	str	r1, [r5, #0]
 8011ac6:	061d      	lsls	r5, r3, #24
 8011ac8:	d514      	bpl.n	8011af4 <_printf_i+0x1ac>
 8011aca:	07df      	lsls	r7, r3, #31
 8011acc:	bf44      	itt	mi
 8011ace:	f043 0320 	orrmi.w	r3, r3, #32
 8011ad2:	6023      	strmi	r3, [r4, #0]
 8011ad4:	b91e      	cbnz	r6, 8011ade <_printf_i+0x196>
 8011ad6:	6823      	ldr	r3, [r4, #0]
 8011ad8:	f023 0320 	bic.w	r3, r3, #32
 8011adc:	6023      	str	r3, [r4, #0]
 8011ade:	2310      	movs	r3, #16
 8011ae0:	e7b0      	b.n	8011a44 <_printf_i+0xfc>
 8011ae2:	6823      	ldr	r3, [r4, #0]
 8011ae4:	f043 0320 	orr.w	r3, r3, #32
 8011ae8:	6023      	str	r3, [r4, #0]
 8011aea:	2378      	movs	r3, #120	; 0x78
 8011aec:	4828      	ldr	r0, [pc, #160]	; (8011b90 <_printf_i+0x248>)
 8011aee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011af2:	e7e3      	b.n	8011abc <_printf_i+0x174>
 8011af4:	0659      	lsls	r1, r3, #25
 8011af6:	bf48      	it	mi
 8011af8:	b2b6      	uxthmi	r6, r6
 8011afa:	e7e6      	b.n	8011aca <_printf_i+0x182>
 8011afc:	4615      	mov	r5, r2
 8011afe:	e7bb      	b.n	8011a78 <_printf_i+0x130>
 8011b00:	682b      	ldr	r3, [r5, #0]
 8011b02:	6826      	ldr	r6, [r4, #0]
 8011b04:	6961      	ldr	r1, [r4, #20]
 8011b06:	1d18      	adds	r0, r3, #4
 8011b08:	6028      	str	r0, [r5, #0]
 8011b0a:	0635      	lsls	r5, r6, #24
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	d501      	bpl.n	8011b14 <_printf_i+0x1cc>
 8011b10:	6019      	str	r1, [r3, #0]
 8011b12:	e002      	b.n	8011b1a <_printf_i+0x1d2>
 8011b14:	0670      	lsls	r0, r6, #25
 8011b16:	d5fb      	bpl.n	8011b10 <_printf_i+0x1c8>
 8011b18:	8019      	strh	r1, [r3, #0]
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	6123      	str	r3, [r4, #16]
 8011b1e:	4615      	mov	r5, r2
 8011b20:	e7ba      	b.n	8011a98 <_printf_i+0x150>
 8011b22:	682b      	ldr	r3, [r5, #0]
 8011b24:	1d1a      	adds	r2, r3, #4
 8011b26:	602a      	str	r2, [r5, #0]
 8011b28:	681d      	ldr	r5, [r3, #0]
 8011b2a:	6862      	ldr	r2, [r4, #4]
 8011b2c:	2100      	movs	r1, #0
 8011b2e:	4628      	mov	r0, r5
 8011b30:	f7ee fb56 	bl	80001e0 <memchr>
 8011b34:	b108      	cbz	r0, 8011b3a <_printf_i+0x1f2>
 8011b36:	1b40      	subs	r0, r0, r5
 8011b38:	6060      	str	r0, [r4, #4]
 8011b3a:	6863      	ldr	r3, [r4, #4]
 8011b3c:	6123      	str	r3, [r4, #16]
 8011b3e:	2300      	movs	r3, #0
 8011b40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b44:	e7a8      	b.n	8011a98 <_printf_i+0x150>
 8011b46:	6923      	ldr	r3, [r4, #16]
 8011b48:	462a      	mov	r2, r5
 8011b4a:	4649      	mov	r1, r9
 8011b4c:	4640      	mov	r0, r8
 8011b4e:	47d0      	blx	sl
 8011b50:	3001      	adds	r0, #1
 8011b52:	d0ab      	beq.n	8011aac <_printf_i+0x164>
 8011b54:	6823      	ldr	r3, [r4, #0]
 8011b56:	079b      	lsls	r3, r3, #30
 8011b58:	d413      	bmi.n	8011b82 <_printf_i+0x23a>
 8011b5a:	68e0      	ldr	r0, [r4, #12]
 8011b5c:	9b03      	ldr	r3, [sp, #12]
 8011b5e:	4298      	cmp	r0, r3
 8011b60:	bfb8      	it	lt
 8011b62:	4618      	movlt	r0, r3
 8011b64:	e7a4      	b.n	8011ab0 <_printf_i+0x168>
 8011b66:	2301      	movs	r3, #1
 8011b68:	4632      	mov	r2, r6
 8011b6a:	4649      	mov	r1, r9
 8011b6c:	4640      	mov	r0, r8
 8011b6e:	47d0      	blx	sl
 8011b70:	3001      	adds	r0, #1
 8011b72:	d09b      	beq.n	8011aac <_printf_i+0x164>
 8011b74:	3501      	adds	r5, #1
 8011b76:	68e3      	ldr	r3, [r4, #12]
 8011b78:	9903      	ldr	r1, [sp, #12]
 8011b7a:	1a5b      	subs	r3, r3, r1
 8011b7c:	42ab      	cmp	r3, r5
 8011b7e:	dcf2      	bgt.n	8011b66 <_printf_i+0x21e>
 8011b80:	e7eb      	b.n	8011b5a <_printf_i+0x212>
 8011b82:	2500      	movs	r5, #0
 8011b84:	f104 0619 	add.w	r6, r4, #25
 8011b88:	e7f5      	b.n	8011b76 <_printf_i+0x22e>
 8011b8a:	bf00      	nop
 8011b8c:	08012231 	.word	0x08012231
 8011b90:	08012242 	.word	0x08012242

08011b94 <__retarget_lock_acquire_recursive>:
 8011b94:	4770      	bx	lr

08011b96 <__retarget_lock_release_recursive>:
 8011b96:	4770      	bx	lr

08011b98 <memcpy>:
 8011b98:	440a      	add	r2, r1
 8011b9a:	4291      	cmp	r1, r2
 8011b9c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011ba0:	d100      	bne.n	8011ba4 <memcpy+0xc>
 8011ba2:	4770      	bx	lr
 8011ba4:	b510      	push	{r4, lr}
 8011ba6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011baa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011bae:	4291      	cmp	r1, r2
 8011bb0:	d1f9      	bne.n	8011ba6 <memcpy+0xe>
 8011bb2:	bd10      	pop	{r4, pc}

08011bb4 <memmove>:
 8011bb4:	4288      	cmp	r0, r1
 8011bb6:	b510      	push	{r4, lr}
 8011bb8:	eb01 0402 	add.w	r4, r1, r2
 8011bbc:	d902      	bls.n	8011bc4 <memmove+0x10>
 8011bbe:	4284      	cmp	r4, r0
 8011bc0:	4623      	mov	r3, r4
 8011bc2:	d807      	bhi.n	8011bd4 <memmove+0x20>
 8011bc4:	1e43      	subs	r3, r0, #1
 8011bc6:	42a1      	cmp	r1, r4
 8011bc8:	d008      	beq.n	8011bdc <memmove+0x28>
 8011bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011bce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011bd2:	e7f8      	b.n	8011bc6 <memmove+0x12>
 8011bd4:	4402      	add	r2, r0
 8011bd6:	4601      	mov	r1, r0
 8011bd8:	428a      	cmp	r2, r1
 8011bda:	d100      	bne.n	8011bde <memmove+0x2a>
 8011bdc:	bd10      	pop	{r4, pc}
 8011bde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011be2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011be6:	e7f7      	b.n	8011bd8 <memmove+0x24>

08011be8 <_realloc_r>:
 8011be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bec:	4680      	mov	r8, r0
 8011bee:	4614      	mov	r4, r2
 8011bf0:	460e      	mov	r6, r1
 8011bf2:	b921      	cbnz	r1, 8011bfe <_realloc_r+0x16>
 8011bf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011bf8:	4611      	mov	r1, r2
 8011bfa:	f7ff bc1b 	b.w	8011434 <_malloc_r>
 8011bfe:	b92a      	cbnz	r2, 8011c0c <_realloc_r+0x24>
 8011c00:	f7ff fbac 	bl	801135c <_free_r>
 8011c04:	4625      	mov	r5, r4
 8011c06:	4628      	mov	r0, r5
 8011c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c0c:	f000 f81b 	bl	8011c46 <_malloc_usable_size_r>
 8011c10:	4284      	cmp	r4, r0
 8011c12:	4607      	mov	r7, r0
 8011c14:	d802      	bhi.n	8011c1c <_realloc_r+0x34>
 8011c16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011c1a:	d812      	bhi.n	8011c42 <_realloc_r+0x5a>
 8011c1c:	4621      	mov	r1, r4
 8011c1e:	4640      	mov	r0, r8
 8011c20:	f7ff fc08 	bl	8011434 <_malloc_r>
 8011c24:	4605      	mov	r5, r0
 8011c26:	2800      	cmp	r0, #0
 8011c28:	d0ed      	beq.n	8011c06 <_realloc_r+0x1e>
 8011c2a:	42bc      	cmp	r4, r7
 8011c2c:	4622      	mov	r2, r4
 8011c2e:	4631      	mov	r1, r6
 8011c30:	bf28      	it	cs
 8011c32:	463a      	movcs	r2, r7
 8011c34:	f7ff ffb0 	bl	8011b98 <memcpy>
 8011c38:	4631      	mov	r1, r6
 8011c3a:	4640      	mov	r0, r8
 8011c3c:	f7ff fb8e 	bl	801135c <_free_r>
 8011c40:	e7e1      	b.n	8011c06 <_realloc_r+0x1e>
 8011c42:	4635      	mov	r5, r6
 8011c44:	e7df      	b.n	8011c06 <_realloc_r+0x1e>

08011c46 <_malloc_usable_size_r>:
 8011c46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c4a:	1f18      	subs	r0, r3, #4
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	bfbc      	itt	lt
 8011c50:	580b      	ldrlt	r3, [r1, r0]
 8011c52:	18c0      	addlt	r0, r0, r3
 8011c54:	4770      	bx	lr
	...

08011c58 <_init>:
 8011c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c5a:	bf00      	nop
 8011c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c5e:	bc08      	pop	{r3}
 8011c60:	469e      	mov	lr, r3
 8011c62:	4770      	bx	lr

08011c64 <_fini>:
 8011c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c66:	bf00      	nop
 8011c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c6a:	bc08      	pop	{r3}
 8011c6c:	469e      	mov	lr, r3
 8011c6e:	4770      	bx	lr
